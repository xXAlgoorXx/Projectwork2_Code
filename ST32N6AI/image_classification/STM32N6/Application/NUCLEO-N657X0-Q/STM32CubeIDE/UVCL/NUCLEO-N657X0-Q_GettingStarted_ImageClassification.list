
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000febc  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  34010620  34010620  00010620  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000021a4  34010640  34010640  00010640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  340127e4  340127e4  00012a10  2**0
                  CONTENTS
  5 .ARM          00000008  340127e4  340127e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  340127ec  34012a10  00012a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  340127ec  340127ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  340127f0  340127f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000021c  340127f4  340127f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000009d0  34012a10  34012a10  00012a10  2**2
                  ALLOC
 11 ._user_heap_stack 00004200  340133e0  340133e0  00012a10  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  00012a10  2**0
                  CONTENTS, READONLY
 13 .debug_info   00066146  00000000  00000000  00012a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009c18  00000000  00000000  00078b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00020f69  00000000  00000000  000827a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002940  00000000  00000000  000a3718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003372  00000000  00000000  000a6058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00095b9c  00000000  00000000  000a93ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b77b  00000000  00000000  0013ef66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    003b1a7f  00000000  00000000  0018a6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0053c160  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000081f0  00000000  00000000  0053c1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000156  00000000  00000000  00544394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	34012a10 	.word	0x34012a10
3400076c:	00000000 	.word	0x00000000
34000770:	340105f4 	.word	0x340105f4

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	34012a14 	.word	0x34012a14
3400078c:	340105f4 	.word	0x340105f4

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b9b0 	b.w	34000b18 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	4688      	mov	r8, r1
340007d8:	4604      	mov	r4, r0
340007da:	468e      	mov	lr, r1
340007dc:	2b00      	cmp	r3, #0
340007de:	d14a      	bne.n	34000876 <__udivmoddi4+0xa6>
340007e0:	428a      	cmp	r2, r1
340007e2:	4617      	mov	r7, r2
340007e4:	d95f      	bls.n	340008a6 <__udivmoddi4+0xd6>
340007e6:	fab2 f682 	clz	r6, r2
340007ea:	b14e      	cbz	r6, 34000800 <__udivmoddi4+0x30>
340007ec:	f1c6 0320 	rsb	r3, r6, #32
340007f0:	fa01 fe06 	lsl.w	lr, r1, r6
340007f4:	40b7      	lsls	r7, r6
340007f6:	40b4      	lsls	r4, r6
340007f8:	fa20 f303 	lsr.w	r3, r0, r3
340007fc:	ea43 0e0e 	orr.w	lr, r3, lr
34000800:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000804:	fa1f fc87 	uxth.w	ip, r7
34000808:	0c23      	lsrs	r3, r4, #16
3400080a:	fbbe f1f8 	udiv	r1, lr, r8
3400080e:	fb08 ee11 	mls	lr, r8, r1, lr
34000812:	fb01 f20c 	mul.w	r2, r1, ip
34000816:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
3400081a:	429a      	cmp	r2, r3
3400081c:	d907      	bls.n	3400082e <__udivmoddi4+0x5e>
3400081e:	18fb      	adds	r3, r7, r3
34000820:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34000824:	d202      	bcs.n	3400082c <__udivmoddi4+0x5c>
34000826:	429a      	cmp	r2, r3
34000828:	f200 8154 	bhi.w	34000ad4 <__udivmoddi4+0x304>
3400082c:	4601      	mov	r1, r0
3400082e:	1a9b      	subs	r3, r3, r2
34000830:	b2a2      	uxth	r2, r4
34000832:	fbb3 f0f8 	udiv	r0, r3, r8
34000836:	fb08 3310 	mls	r3, r8, r0, r3
3400083a:	fb00 fc0c 	mul.w	ip, r0, ip
3400083e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34000842:	4594      	cmp	ip, r2
34000844:	d90b      	bls.n	3400085e <__udivmoddi4+0x8e>
34000846:	18ba      	adds	r2, r7, r2
34000848:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
3400084c:	bf2c      	ite	cs
3400084e:	2401      	movcs	r4, #1
34000850:	2400      	movcc	r4, #0
34000852:	4594      	cmp	ip, r2
34000854:	d902      	bls.n	3400085c <__udivmoddi4+0x8c>
34000856:	2c00      	cmp	r4, #0
34000858:	f000 813f 	beq.w	34000ada <__udivmoddi4+0x30a>
3400085c:	4618      	mov	r0, r3
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	eba2 020c 	sub.w	r2, r2, ip
34000866:	2100      	movs	r1, #0
34000868:	b11d      	cbz	r5, 34000872 <__udivmoddi4+0xa2>
3400086a:	40f2      	lsrs	r2, r6
3400086c:	2300      	movs	r3, #0
3400086e:	e9c5 2300 	strd	r2, r3, [r5]
34000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000876:	428b      	cmp	r3, r1
34000878:	d905      	bls.n	34000886 <__udivmoddi4+0xb6>
3400087a:	b10d      	cbz	r5, 34000880 <__udivmoddi4+0xb0>
3400087c:	e9c5 0100 	strd	r0, r1, [r5]
34000880:	2100      	movs	r1, #0
34000882:	4608      	mov	r0, r1
34000884:	e7f5      	b.n	34000872 <__udivmoddi4+0xa2>
34000886:	fab3 f183 	clz	r1, r3
3400088a:	2900      	cmp	r1, #0
3400088c:	d14e      	bne.n	3400092c <__udivmoddi4+0x15c>
3400088e:	4543      	cmp	r3, r8
34000890:	f0c0 8112 	bcc.w	34000ab8 <__udivmoddi4+0x2e8>
34000894:	4282      	cmp	r2, r0
34000896:	f240 810f 	bls.w	34000ab8 <__udivmoddi4+0x2e8>
3400089a:	4608      	mov	r0, r1
3400089c:	2d00      	cmp	r5, #0
3400089e:	d0e8      	beq.n	34000872 <__udivmoddi4+0xa2>
340008a0:	e9c5 4e00 	strd	r4, lr, [r5]
340008a4:	e7e5      	b.n	34000872 <__udivmoddi4+0xa2>
340008a6:	2a00      	cmp	r2, #0
340008a8:	f000 80ac 	beq.w	34000a04 <__udivmoddi4+0x234>
340008ac:	fab2 f682 	clz	r6, r2
340008b0:	2e00      	cmp	r6, #0
340008b2:	f040 80bb 	bne.w	34000a2c <__udivmoddi4+0x25c>
340008b6:	1a8b      	subs	r3, r1, r2
340008b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
340008bc:	b2bc      	uxth	r4, r7
340008be:	2101      	movs	r1, #1
340008c0:	0c02      	lsrs	r2, r0, #16
340008c2:	b280      	uxth	r0, r0
340008c4:	fbb3 fcfe 	udiv	ip, r3, lr
340008c8:	fb0e 331c 	mls	r3, lr, ip, r3
340008cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
340008d0:	fb04 f20c 	mul.w	r2, r4, ip
340008d4:	429a      	cmp	r2, r3
340008d6:	d90e      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d8:	18fb      	adds	r3, r7, r3
340008da:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	429a      	cmp	r2, r3
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80ec 	beq.w	34000acc <__udivmoddi4+0x2fc>
340008f4:	46c4      	mov	ip, r8
340008f6:	1a9b      	subs	r3, r3, r2
340008f8:	fbb3 f8fe 	udiv	r8, r3, lr
340008fc:	fb0e 3318 	mls	r3, lr, r8, r3
34000900:	fb04 f408 	mul.w	r4, r4, r8
34000904:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34000908:	4294      	cmp	r4, r2
3400090a:	d90b      	bls.n	34000924 <__udivmoddi4+0x154>
3400090c:	18ba      	adds	r2, r7, r2
3400090e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34000912:	bf2c      	ite	cs
34000914:	2001      	movcs	r0, #1
34000916:	2000      	movcc	r0, #0
34000918:	4294      	cmp	r4, r2
3400091a:	d902      	bls.n	34000922 <__udivmoddi4+0x152>
3400091c:	2800      	cmp	r0, #0
3400091e:	f000 80d1 	beq.w	34000ac4 <__udivmoddi4+0x2f4>
34000922:	4698      	mov	r8, r3
34000924:	1b12      	subs	r2, r2, r4
34000926:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa08 f401 	lsl.w	r4, r8, r1
34000936:	fa00 f901 	lsl.w	r9, r0, r1
3400093a:	fa22 f706 	lsr.w	r7, r2, r6
3400093e:	fa28 f806 	lsr.w	r8, r8, r6
34000942:	408a      	lsls	r2, r1
34000944:	431f      	orrs	r7, r3
34000946:	fa20 f306 	lsr.w	r3, r0, r6
3400094a:	0c38      	lsrs	r0, r7, #16
3400094c:	4323      	orrs	r3, r4
3400094e:	fa1f fc87 	uxth.w	ip, r7
34000952:	0c1c      	lsrs	r4, r3, #16
34000954:	fbb8 fef0 	udiv	lr, r8, r0
34000958:	fb00 881e 	mls	r8, r0, lr, r8
3400095c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34000960:	fb0e f80c 	mul.w	r8, lr, ip
34000964:	45a0      	cmp	r8, r4
34000966:	d90e      	bls.n	34000986 <__udivmoddi4+0x1b6>
34000968:	193c      	adds	r4, r7, r4
3400096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3400096e:	bf2c      	ite	cs
34000970:	f04f 0b01 	movcs.w	fp, #1
34000974:	f04f 0b00 	movcc.w	fp, #0
34000978:	45a0      	cmp	r8, r4
3400097a:	d903      	bls.n	34000984 <__udivmoddi4+0x1b4>
3400097c:	f1bb 0f00 	cmp.w	fp, #0
34000980:	f000 80b8 	beq.w	34000af4 <__udivmoddi4+0x324>
34000984:	46d6      	mov	lr, sl
34000986:	eba4 0408 	sub.w	r4, r4, r8
3400098a:	fa1f f883 	uxth.w	r8, r3
3400098e:	fbb4 f3f0 	udiv	r3, r4, r0
34000992:	fb00 4413 	mls	r4, r0, r3, r4
34000996:	fb03 fc0c 	mul.w	ip, r3, ip
3400099a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3400099e:	45a4      	cmp	ip, r4
340009a0:	d90e      	bls.n	340009c0 <__udivmoddi4+0x1f0>
340009a2:	193c      	adds	r4, r7, r4
340009a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
340009a8:	bf2c      	ite	cs
340009aa:	f04f 0801 	movcs.w	r8, #1
340009ae:	f04f 0800 	movcc.w	r8, #0
340009b2:	45a4      	cmp	ip, r4
340009b4:	d903      	bls.n	340009be <__udivmoddi4+0x1ee>
340009b6:	f1b8 0f00 	cmp.w	r8, #0
340009ba:	f000 809f 	beq.w	34000afc <__udivmoddi4+0x32c>
340009be:	4603      	mov	r3, r0
340009c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
340009c4:	eba4 040c 	sub.w	r4, r4, ip
340009c8:	fba0 ec02 	umull	lr, ip, r0, r2
340009cc:	4564      	cmp	r4, ip
340009ce:	4673      	mov	r3, lr
340009d0:	46e0      	mov	r8, ip
340009d2:	d302      	bcc.n	340009da <__udivmoddi4+0x20a>
340009d4:	d107      	bne.n	340009e6 <__udivmoddi4+0x216>
340009d6:	45f1      	cmp	r9, lr
340009d8:	d205      	bcs.n	340009e6 <__udivmoddi4+0x216>
340009da:	ebbe 0302 	subs.w	r3, lr, r2
340009de:	eb6c 0c07 	sbc.w	ip, ip, r7
340009e2:	3801      	subs	r0, #1
340009e4:	46e0      	mov	r8, ip
340009e6:	b15d      	cbz	r5, 34000a00 <__udivmoddi4+0x230>
340009e8:	ebb9 0203 	subs.w	r2, r9, r3
340009ec:	eb64 0408 	sbc.w	r4, r4, r8
340009f0:	fa04 f606 	lsl.w	r6, r4, r6
340009f4:	fa22 f301 	lsr.w	r3, r2, r1
340009f8:	40cc      	lsrs	r4, r1
340009fa:	431e      	orrs	r6, r3
340009fc:	e9c5 6400 	strd	r6, r4, [r5]
34000a00:	2100      	movs	r1, #0
34000a02:	e736      	b.n	34000872 <__udivmoddi4+0xa2>
34000a04:	fbb1 fcf2 	udiv	ip, r1, r2
34000a08:	0c01      	lsrs	r1, r0, #16
34000a0a:	4614      	mov	r4, r2
34000a0c:	b280      	uxth	r0, r0
34000a0e:	4696      	mov	lr, r2
34000a10:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a14:	2620      	movs	r6, #32
34000a16:	4690      	mov	r8, r2
34000a18:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34000a1c:	4610      	mov	r0, r2
34000a1e:	fbb1 f1f2 	udiv	r1, r1, r2
34000a22:	eba3 0308 	sub.w	r3, r3, r8
34000a26:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34000a2a:	e74b      	b.n	340008c4 <__udivmoddi4+0xf4>
34000a2c:	40b7      	lsls	r7, r6
34000a2e:	f1c6 0320 	rsb	r3, r6, #32
34000a32:	fa01 f206 	lsl.w	r2, r1, r6
34000a36:	fa21 f803 	lsr.w	r8, r1, r3
34000a3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34000a3e:	fa20 f303 	lsr.w	r3, r0, r3
34000a42:	b2bc      	uxth	r4, r7
34000a44:	40b0      	lsls	r0, r6
34000a46:	4313      	orrs	r3, r2
34000a48:	0c02      	lsrs	r2, r0, #16
34000a4a:	0c19      	lsrs	r1, r3, #16
34000a4c:	b280      	uxth	r0, r0
34000a4e:	fbb8 f9fe 	udiv	r9, r8, lr
34000a52:	fb0e 8819 	mls	r8, lr, r9, r8
34000a56:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a5a:	fb09 f804 	mul.w	r8, r9, r4
34000a5e:	4588      	cmp	r8, r1
34000a60:	d951      	bls.n	34000b06 <__udivmoddi4+0x336>
34000a62:	1879      	adds	r1, r7, r1
34000a64:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34000a68:	bf2c      	ite	cs
34000a6a:	f04f 0a01 	movcs.w	sl, #1
34000a6e:	f04f 0a00 	movcc.w	sl, #0
34000a72:	4588      	cmp	r8, r1
34000a74:	d902      	bls.n	34000a7c <__udivmoddi4+0x2ac>
34000a76:	f1ba 0f00 	cmp.w	sl, #0
34000a7a:	d031      	beq.n	34000ae0 <__udivmoddi4+0x310>
34000a7c:	eba1 0108 	sub.w	r1, r1, r8
34000a80:	fbb1 f9fe 	udiv	r9, r1, lr
34000a84:	fb09 f804 	mul.w	r8, r9, r4
34000a88:	fb0e 1119 	mls	r1, lr, r9, r1
34000a8c:	b29b      	uxth	r3, r3
34000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34000a92:	4543      	cmp	r3, r8
34000a94:	d235      	bcs.n	34000b02 <__udivmoddi4+0x332>
34000a96:	18fb      	adds	r3, r7, r3
34000a98:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34000a9c:	bf2c      	ite	cs
34000a9e:	f04f 0a01 	movcs.w	sl, #1
34000aa2:	f04f 0a00 	movcc.w	sl, #0
34000aa6:	4543      	cmp	r3, r8
34000aa8:	d2bb      	bcs.n	34000a22 <__udivmoddi4+0x252>
34000aaa:	f1ba 0f00 	cmp.w	sl, #0
34000aae:	d1b8      	bne.n	34000a22 <__udivmoddi4+0x252>
34000ab0:	f1a9 0102 	sub.w	r1, r9, #2
34000ab4:	443b      	add	r3, r7
34000ab6:	e7b4      	b.n	34000a22 <__udivmoddi4+0x252>
34000ab8:	1a84      	subs	r4, r0, r2
34000aba:	eb68 0203 	sbc.w	r2, r8, r3
34000abe:	2001      	movs	r0, #1
34000ac0:	4696      	mov	lr, r2
34000ac2:	e6eb      	b.n	3400089c <__udivmoddi4+0xcc>
34000ac4:	443a      	add	r2, r7
34000ac6:	f1a8 0802 	sub.w	r8, r8, #2
34000aca:	e72b      	b.n	34000924 <__udivmoddi4+0x154>
34000acc:	f1ac 0c02 	sub.w	ip, ip, #2
34000ad0:	443b      	add	r3, r7
34000ad2:	e710      	b.n	340008f6 <__udivmoddi4+0x126>
34000ad4:	3902      	subs	r1, #2
34000ad6:	443b      	add	r3, r7
34000ad8:	e6a9      	b.n	3400082e <__udivmoddi4+0x5e>
34000ada:	443a      	add	r2, r7
34000adc:	3802      	subs	r0, #2
34000ade:	e6be      	b.n	3400085e <__udivmoddi4+0x8e>
34000ae0:	eba7 0808 	sub.w	r8, r7, r8
34000ae4:	f1a9 0c02 	sub.w	ip, r9, #2
34000ae8:	4441      	add	r1, r8
34000aea:	fbb1 f9fe 	udiv	r9, r1, lr
34000aee:	fb09 f804 	mul.w	r8, r9, r4
34000af2:	e7c9      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000af4:	f1ae 0e02 	sub.w	lr, lr, #2
34000af8:	443c      	add	r4, r7
34000afa:	e744      	b.n	34000986 <__udivmoddi4+0x1b6>
34000afc:	3b02      	subs	r3, #2
34000afe:	443c      	add	r4, r7
34000b00:	e75e      	b.n	340009c0 <__udivmoddi4+0x1f0>
34000b02:	4649      	mov	r1, r9
34000b04:	e78d      	b.n	34000a22 <__udivmoddi4+0x252>
34000b06:	eba1 0108 	sub.w	r1, r1, r8
34000b0a:	46cc      	mov	ip, r9
34000b0c:	fbb1 f9fe 	udiv	r9, r1, lr
34000b10:	fb09 f804 	mul.w	r8, r9, r4
34000b14:	e7b8      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000b16:	bf00      	nop

34000b18 <__aeabi_idiv0>:
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop

34000b1c <update_weights_int8>:
void update_weights_float(float* NNweights, const float *new_weights,size_t Num_weights) {
    memcpy(NNweights, new_weights, Num_weights * sizeof(float));
    //    SCB_CleanDCache_by_Addr(weights, NUM_WEIGHTS * sizeof(float));
}

void update_weights_int8(int8_t* NNweights, const int8_t *new_weights,size_t Num_weights) {
34000b1c:	b538      	push	{r3, r4, r5, lr}
34000b1e:	4615      	mov	r5, r2
34000b20:	4604      	mov	r4, r0
    memcpy(NNweights, new_weights, Num_weights * sizeof(int8_t));
34000b22:	f00e f94e 	bl	3400edc2 <memcpy>
    printf("Cleaning weights at %p, size %lu\n\r", NNweights, Num_weights);
34000b26:	462a      	mov	r2, r5
34000b28:	4621      	mov	r1, r4
34000b2a:	4811      	ldr	r0, [pc, #68]	@ (34000b70 <update_weights_int8+0x54>)
34000b2c:	f00d fd72 	bl	3400e614 <iprintf>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34000b30:	2d00      	cmp	r5, #0
34000b32:	dd1c      	ble.n	34000b6e <update_weights_int8+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000b34:	f004 031f 	and.w	r3, r4, #31
34000b38:	195a      	adds	r2, r3, r5
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000b3a:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34000b3e:	4620      	mov	r0, r4

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34000b40:	43c3      	mvns	r3, r0
34000b42:	4414      	add	r4, r2
34000b44:	4423      	add	r3, r4
34000b46:	3a20      	subs	r2, #32
34000b48:	095b      	lsrs	r3, r3, #5
34000b4a:	3220      	adds	r2, #32
34000b4c:	f103 0e01 	add.w	lr, r3, #1
34000b50:	bfd8      	it	le
34000b52:	f04f 0e01 	movle.w	lr, #1
34000b56:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000b5a:	4906      	ldr	r1, [pc, #24]	@ (34000b74 <update_weights_int8+0x58>)
34000b5c:	f8c1 0268 	str.w	r0, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000b60:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34000b62:	f00f c805 	le	lr, 34000b5c <update_weights_int8+0x40>
34000b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000b6a:	f3bf 8f6f 	isb	sy
	SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(int8_t));
}
34000b6e:	bd38      	pop	{r3, r4, r5, pc}
34000b70:	34010640 	.word	0x34010640
34000b74:	e000ed00 	.word	0xe000ed00

34000b78 <getIdentityWeights_int8>:
//    return true;
//}



int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000b7a:	fb01 f700 	mul.w	r7, r1, r0
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000b7e:	4606      	mov	r6, r0
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000b80:	4638      	mov	r0, r7
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000b82:	460d      	mov	r5, r1
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000b84:	f00c fec4 	bl	3400d910 <malloc>
    if (identity == NULL) {
34000b88:	4604      	mov	r4, r0
34000b8a:	b1c8      	cbz	r0, 34000bc0 <getIdentityWeights_int8+0x48>
        return NULL;
    }

    // Initialize the entire matrix to 0
    memset(identity, 0, insize * outsize * sizeof(int8_t));
34000b8c:	463a      	mov	r2, r7
34000b8e:	2100      	movs	r1, #0
34000b90:	f00d fe88 	bl	3400e8a4 <memset>

    // Set 1 on the diagonal
    for (size_t i = 0; i < insize; i++) {
34000b94:	2300      	movs	r3, #0
34000b96:	461a      	mov	r2, r3
34000b98:	42b2      	cmp	r2, r6
34000b9a:	d011      	beq.n	34000bc0 <getIdentityWeights_int8+0x48>
        for (size_t j = 0; j < outsize; j++) {
34000b9c:	2000      	movs	r0, #0
34000b9e:	18e7      	adds	r7, r4, r3
34000ba0:	1c69      	adds	r1, r5, #1
34000ba2:	e008      	b.n	34000bb6 <getIdentityWeights_int8+0x3e>
            if (i == j) {
34000ba4:	4282      	cmp	r2, r0
34000ba6:	bf14      	ite	ne
34000ba8:	f04f 0c00 	movne.w	ip, #0
34000bac:	f04f 0c01 	moveq.w	ip, #1
        for (size_t j = 0; j < outsize; j++) {
34000bb0:	3001      	adds	r0, #1
            if (i == j) {
34000bb2:	f807 cb01 	strb.w	ip, [r7], #1
        for (size_t j = 0; j < outsize; j++) {
34000bb6:	3901      	subs	r1, #1
34000bb8:	d1f4      	bne.n	34000ba4 <getIdentityWeights_int8+0x2c>
    for (size_t i = 0; i < insize; i++) {
34000bba:	3201      	adds	r2, #1
34000bbc:	442b      	add	r3, r5
34000bbe:	e7eb      	b.n	34000b98 <getIdentityWeights_int8+0x20>
//	    printf("\n\r");
//	}
//

    return identity;
}
34000bc0:	4620      	mov	r0, r4
34000bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

34000bc4 <NeuralNetwork_init>:

void NeuralNetwork_init(int8_t **nn_in, uint32_t *nnin_length, int8_t *nn_out[], int *number_output, uint32_t nn_out_len[])
{
34000bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34000bc8:	4617      	mov	r7, r2
34000bca:	4698      	mov	r8, r3
34000bcc:	460e      	mov	r6, r1
34000bce:	4681      	mov	r9, r0
    const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_Default(); // INFO
34000bd0:	f000 f888 	bl	34000ce4 <LL_ATON_Input_Buffers_Info_Default>
34000bd4:	4604      	mov	r4, r0
    const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_Default(); // INFO
34000bd6:	f000 f889 	bl	34000cec <LL_ATON_Output_Buffers_Info_Default>
    return eb->blob_address;
  }

  static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf)
  {
    if (buf->is_user_allocated)
34000bda:	6863      	ldr	r3, [r4, #4]
34000bdc:	7d22      	ldrb	r2, [r4, #20]
    {
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
      return *tmp;
    }
    return buf->addr_base.p;
34000bde:	461d      	mov	r5, r3
    if (buf->is_user_allocated)
34000be0:	b102      	cbz	r2, 34000be4 <NeuralNetwork_init+0x20>
      return *tmp;
34000be2:	681d      	ldr	r5, [r3, #0]
  }

  static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf)
  {
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34000be4:	68a3      	ldr	r3, [r4, #8]
    // Get the input buffer address (as int8_t now)
    *nn_in = (int8_t *)LL_Buffer_addr_start(&nn_in_info[0]); // Needed

    /* Count number of outputs */
    *number_output = 0;
    while (nn_out_info[*number_output].name != NULL)
34000be6:	2238      	movs	r2, #56	@ 0x38
34000be8:	441d      	add	r5, r3
    *nn_in = (int8_t *)LL_Buffer_addr_start(&nn_in_info[0]); // Needed
34000bea:	f8c9 5000 	str.w	r5, [r9]
    while (nn_out_info[*number_output].name != NULL)
34000bee:	2500      	movs	r5, #0
34000bf0:	fb02 f305 	mul.w	r3, r2, r5
34000bf4:	58c3      	ldr	r3, [r0, r3]
34000bf6:	b94b      	cbnz	r3, 34000c0c <NeuralNetwork_init+0x48>
    {
        (*number_output)++;
    }

    assert(*number_output <= MAX_NUMBER_OUTPUT);
34000bf8:	2d01      	cmp	r5, #1
34000bfa:	f8c8 5000 	str.w	r5, [r8]
34000bfe:	dd07      	ble.n	34000c10 <NeuralNetwork_init+0x4c>
34000c00:	2186      	movs	r1, #134	@ 0x86
34000c02:	4b0c      	ldr	r3, [pc, #48]	@ (34000c34 <NeuralNetwork_init+0x70>)
34000c04:	4a0c      	ldr	r2, [pc, #48]	@ (34000c38 <NeuralNetwork_init+0x74>)
34000c06:	480d      	ldr	r0, [pc, #52]	@ (34000c3c <NeuralNetwork_init+0x78>)
34000c08:	f00c fe64 	bl	3400d8d4 <__assert_func>
        (*number_output)++;
34000c0c:	3501      	adds	r5, #1
34000c0e:	e7ef      	b.n	34000bf0 <NeuralNetwork_init+0x2c>

    for (int i = 0; i < *number_output; i++)
34000c10:	d10a      	bne.n	34000c28 <NeuralNetwork_init+0x64>
    if (buf->is_user_allocated)
34000c12:	7d02      	ldrb	r2, [r0, #20]
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
34000c14:	6843      	ldr	r3, [r0, #4]
    if (buf->is_user_allocated)
34000c16:	b102      	cbz	r2, 34000c1a <NeuralNetwork_init+0x56>
      return *tmp;
34000c18:	681b      	ldr	r3, [r3, #0]
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34000c1a:	6882      	ldr	r2, [r0, #8]
34000c1c:	4413      	add	r3, r2
    {
        // Get the output buffers address as int8_t
        nn_out[i] = (int8_t *) LL_Buffer_addr_start(&nn_out_info[i]);
34000c1e:	603b      	str	r3, [r7, #0]
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
    return buf->offset_end - buf->offset_start;
34000c20:	68c3      	ldr	r3, [r0, #12]
34000c22:	1a9b      	subs	r3, r3, r2
        nn_out_len[i] = LL_Buffer_len(&nn_out_info[i]);
34000c24:	9a08      	ldr	r2, [sp, #32]
34000c26:	6013      	str	r3, [r2, #0]
34000c28:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
34000c2c:	1a9b      	subs	r3, r3, r2
    }

    *nnin_length = LL_Buffer_len(&nn_in_info[0]);
34000c2e:	6033      	str	r3, [r6, #0]
}
34000c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34000c34:	34010663 	.word	0x34010663
34000c38:	340120df 	.word	0x340120df
34000c3c:	34010687 	.word	0x34010687

34000c40 <LL_ATON_End_EpochBlock_3>:
  LL_ATON_EnableUnits_Init(Enable_epoch_3_all_units, 4);

}

static void LL_ATON_End_EpochBlock_3(const void *epoch_block)
{
34000c40:	b508      	push	{r3, lr}
	}, /* Gemm_2_conv_4_off_bias_12 OUT: in unit=STREAM_ENG_V2 1 in port=0 out unit=ARITH_ACC_V2 2 out port=0 */
};


  /* epoch=3 */
  LL_Switch_Deinit(switch_deinit_in_3, 3);
34000c42:	2103      	movs	r1, #3
34000c44:	4804      	ldr	r0, [pc, #16]	@ (34000c58 <LL_ATON_End_EpochBlock_3+0x18>)
34000c46:	f00b fdff 	bl	3400c848 <LL_Switch_Deinit>
  };


  LL_ATON_DisableUnits_Init(Disable_epoch_3_all_units, 4);

}
34000c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DisableUnits_Init(Disable_epoch_3_all_units, 4);
34000c4e:	2104      	movs	r1, #4
34000c50:	4802      	ldr	r0, [pc, #8]	@ (34000c5c <LL_ATON_End_EpochBlock_3+0x1c>)
34000c52:	f00c b8f5 	b.w	3400ce40 <LL_ATON_DisableUnits_Init>
34000c56:	bf00      	nop
34000c58:	34012398 	.word	0x34012398
34000c5c:	34012388 	.word	0x34012388

34000c60 <LL_ATON_Start_EpochBlock_3>:
{
34000c60:	b508      	push	{r3, lr}
  LL_Convacc_Init(0, &Gemm_2_conv_4_init3);
34000c62:	4910      	ldr	r1, [pc, #64]	@ (34000ca4 <LL_ATON_Start_EpochBlock_3+0x44>)
34000c64:	2000      	movs	r0, #0
34000c66:	f00b ff61 	bl	3400cb2c <LL_Convacc_Init>
  LL_Streng_TensorInit(0, &Gemm_2_conv_4_dma_init_in_0_3, 1);
34000c6a:	2201      	movs	r2, #1
34000c6c:	490e      	ldr	r1, [pc, #56]	@ (34000ca8 <LL_ATON_Start_EpochBlock_3+0x48>)
34000c6e:	2000      	movs	r0, #0
34000c70:	f00b fe10 	bl	3400c894 <LL_Streng_TensorInit>
  LL_Streng_TensorInit(6, &Gemm_2_conv_4_dma_init_in_1_3, 1);
34000c74:	2201      	movs	r2, #1
34000c76:	490d      	ldr	r1, [pc, #52]	@ (34000cac <LL_ATON_Start_EpochBlock_3+0x4c>)
34000c78:	2006      	movs	r0, #6
34000c7a:	f00b fe0b 	bl	3400c894 <LL_Streng_TensorInit>
  LL_Streng_TensorInit(1, &Gemm_2_conv_4_off_bias_12_dma_init_out_0_3, 1);
34000c7e:	2201      	movs	r2, #1
34000c80:	490b      	ldr	r1, [pc, #44]	@ (34000cb0 <LL_ATON_Start_EpochBlock_3+0x50>)
34000c82:	4610      	mov	r0, r2
34000c84:	f00b fe06 	bl	3400c894 <LL_Streng_TensorInit>
  LL_Switch_Init(switch_init_in_3, 3);
34000c88:	2103      	movs	r1, #3
34000c8a:	480a      	ldr	r0, [pc, #40]	@ (34000cb4 <LL_ATON_Start_EpochBlock_3+0x54>)
34000c8c:	f00b fdcc 	bl	3400c828 <LL_Switch_Init>
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
34000c90:	4909      	ldr	r1, [pc, #36]	@ (34000cb8 <LL_ATON_Start_EpochBlock_3+0x58>)
34000c92:	480a      	ldr	r0, [pc, #40]	@ (34000cbc <LL_ATON_Start_EpochBlock_3+0x5c>)
34000c94:	f000 fbda 	bl	3400144c <mcu_cache_invalidate_range>
}
34000c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_EnableUnits_Init(Enable_epoch_3_all_units, 4);
34000c9c:	2104      	movs	r1, #4
34000c9e:	4808      	ldr	r0, [pc, #32]	@ (34000cc0 <LL_ATON_Start_EpochBlock_3+0x60>)
34000ca0:	f00b bd50 	b.w	3400c744 <LL_ATON_EnableUnits_Init>
34000ca4:	3401234c 	.word	0x3401234c
34000ca8:	3401230c 	.word	0x3401230c
34000cac:	340122cc 	.word	0x340122cc
34000cb0:	3401228c 	.word	0x3401228c
34000cb4:	3401225c 	.word	0x3401225c
34000cb8:	342004f0 	.word	0x342004f0
34000cbc:	34200000 	.word	0x34200000
34000cc0:	3401224c 	.word	0x3401224c

34000cc4 <LL_ATON_Set_User_Input_Buffer_Default>:
}
34000cc4:	2003      	movs	r0, #3
34000cc6:	4770      	bx	lr

34000cc8 <LL_ATON_Get_User_Input_Buffer_Default>:
}
34000cc8:	2000      	movs	r0, #0
34000cca:	4770      	bx	lr

34000ccc <LL_ATON_Set_User_Output_Buffer_Default>:
LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_Default(uint32_t num, void* buffer, uint32_t size)
34000ccc:	2003      	movs	r0, #3
34000cce:	4770      	bx	lr

34000cd0 <LL_ATON_Get_User_Output_Buffer_Default>:
void *LL_ATON_Get_User_Output_Buffer_Default(uint32_t num)
34000cd0:	2000      	movs	r0, #0
34000cd2:	4770      	bx	lr

34000cd4 <LL_ATON_EC_Network_Init_Default>:
}
34000cd4:	2001      	movs	r0, #1
34000cd6:	4770      	bx	lr

34000cd8 <LL_ATON_EC_Inference_Init_Default>:
bool LL_ATON_EC_Inference_Init_Default(void)
34000cd8:	2001      	movs	r0, #1
34000cda:	4770      	bx	lr

34000cdc <LL_ATON_EpochBlockItems_Default>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
34000cdc:	4800      	ldr	r0, [pc, #0]	@ (34000ce0 <LL_ATON_EpochBlockItems_Default+0x4>)
34000cde:	4770      	bx	lr
34000ce0:	340123c8 	.word	0x340123c8

34000ce4 <LL_ATON_Input_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
34000ce4:	4800      	ldr	r0, [pc, #0]	@ (34000ce8 <LL_ATON_Input_Buffers_Info_Default+0x4>)
34000ce6:	4770      	bx	lr
34000ce8:	340121dc 	.word	0x340121dc

34000cec <LL_ATON_Output_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
34000cec:	4800      	ldr	r0, [pc, #0]	@ (34000cf0 <LL_ATON_Output_Buffers_Info_Default+0x4>)
34000cee:	4770      	bx	lr
34000cf0:	3401214c 	.word	0x3401214c

34000cf4 <LL_ATON_Internal_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
34000cf4:	4800      	ldr	r0, [pc, #0]	@ (34000cf8 <LL_ATON_Internal_Buffers_Info_Default+0x4>)
34000cf6:	4770      	bx	lr
34000cf8:	340120f4 	.word	0x340120f4

34000cfc <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34000cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
34000cfe:	4b15      	ldr	r3, [pc, #84]	@ (34000d54 <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000d00:	217c      	movs	r1, #124	@ 0x7c
34000d02:	aa01      	add	r2, sp, #4
34000d04:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
34000d06:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000d08:	f001 fc6e 	bl	340025e8 <HAL_BSEC_OTP_Read>
34000d0c:	4603      	mov	r3, r0
34000d0e:	b9e0      	cbnz	r0, 34000d4a <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
34000d10:	9a01      	ldr	r2, [sp, #4]
34000d12:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
34000d16:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
34000d1a:	d017      	beq.n	34000d4c <Fuse_Programming+0x50>
    {
      data |= bit_mask;
34000d1c:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000d20:	217c      	movs	r1, #124	@ 0x7c
34000d22:	a802      	add	r0, sp, #8
      data |= bit_mask;
34000d24:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000d26:	f001 fc7b 	bl	34002620 <HAL_BSEC_OTP_Program>
34000d2a:	b968      	cbnz	r0, 34000d48 <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000d2c:	217c      	movs	r1, #124	@ 0x7c
34000d2e:	aa01      	add	r2, sp, #4
34000d30:	a802      	add	r0, sp, #8
34000d32:	f001 fc59 	bl	340025e8 <HAL_BSEC_OTP_Read>
34000d36:	b930      	cbnz	r0, 34000d46 <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
34000d38:	9b01      	ldr	r3, [sp, #4]
34000d3a:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
34000d3e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
34000d42:	d003      	beq.n	34000d4c <Fuse_Programming+0x50>
34000d44:	e7fe      	b.n	34000d44 <Fuse_Programming+0x48>
34000d46:	e7fe      	b.n	34000d46 <Fuse_Programming+0x4a>
34000d48:	e7fe      	b.n	34000d48 <Fuse_Programming+0x4c>
34000d4a:	e7fe      	b.n	34000d4a <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
34000d4c:	b005      	add	sp, #20
34000d4e:	f85d fb04 	ldr.w	pc, [sp], #4
34000d52:	bf00      	nop
34000d54:	56009000 	.word	0x56009000

34000d58 <LL_MEM_EnableClock>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34000d58:	4b04      	ldr	r3, [pc, #16]	@ (34000d6c <LL_MEM_EnableClock+0x14>)
{
34000d5a:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
34000d5c:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34000d60:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34000d64:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000d66:	9b01      	ldr	r3, [sp, #4]
}
34000d68:	b002      	add	sp, #8
34000d6a:	4770      	bx	lr
34000d6c:	56028000 	.word	0x56028000

34000d70 <LL_MEM_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000d70:	4b04      	ldr	r3, [pc, #16]	@ (34000d84 <LL_MEM_EnableClockLowPower+0x14>)
{
34000d72:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000d74:	f8c3 0a8c 	str.w	r0, [r3, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
34000d78:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34000d7c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000d7e:	9b01      	ldr	r3, [sp, #4]
}
34000d80:	b002      	add	sp, #8
34000d82:	4770      	bx	lr
34000d84:	56028000 	.word	0x56028000

34000d88 <LL_AHB5_GRP1_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000d88:	4b04      	ldr	r3, [pc, #16]	@ (34000d9c <LL_AHB5_GRP1_EnableClockLowPower+0x14>)
{
34000d8a:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000d8c:	f8c3 0aa0 	str.w	r0, [r3, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34000d90:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34000d94:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000d96:	9b01      	ldr	r3, [sp, #4]
}
34000d98:	b002      	add	sp, #8
34000d9a:	4770      	bx	lr
34000d9c:	56028000 	.word	0x56028000

34000da0 <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
34000da0:	b530      	push	{r4, r5, lr}
34000da2:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34000da6:	2240      	movs	r2, #64	@ 0x40
34000da8:	2100      	movs	r1, #0
34000daa:	4668      	mov	r0, sp
34000dac:	f00d fd7a 	bl	3400e8a4 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34000db0:	2298      	movs	r2, #152	@ 0x98
34000db2:	2100      	movs	r1, #0
34000db4:	a810      	add	r0, sp, #64	@ 0x40
34000db6:	f00d fd75 	bl	3400e8a4 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34000dba:	f44f 72c8 	mov.w	r2, #400	@ 0x190
34000dbe:	2100      	movs	r1, #0
34000dc0:	a836      	add	r0, sp, #216	@ 0xd8
34000dc2:	f00d fd6f 	bl	3400e8a4 <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
34000dc6:	2001      	movs	r0, #1
34000dc8:	f000 fe96 	bl	34001af8 <BSP_SMPS_Init>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34000dcc:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000dce:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34000dd0:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
34000dd2:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34000dd4:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34000dd6:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34000dda:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
34000dde:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
34000de0:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34000de2:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34000de6:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34000dea:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
34000dee:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34000df2:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
34000df6:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
34000dfa:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000dfe:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
34000e00:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000e02:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34000e04:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34000e08:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
34000e0c:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
34000e10:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
34000e14:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
34000e16:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000e18:	f003 fb6e 	bl	340044f8 <HAL_RCC_OscConfig>
34000e1c:	b100      	cbz	r0, 34000e20 <SystemClock_Config+0x80>
  {
    while(1);
34000e1e:	e7fe      	b.n	34000e1e <SystemClock_Config+0x7e>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34000e20:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34000e24:	227f      	movs	r2, #127	@ 0x7f
34000e26:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34000e2a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34000e2e:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
34000e30:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
34000e34:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
34000e38:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
34000e3c:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34000e40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
34000e44:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
34000e48:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34000e4c:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34000e50:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34000e54:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34000e56:	4668      	mov	r0, sp
34000e58:	f003 ff4a 	bl	34004cf0 <HAL_RCC_ClockConfig>
34000e5c:	b100      	cbz	r0, 34000e60 <SystemClock_Config+0xc0>
  {
    while(1);
34000e5e:	e7fe      	b.n	34000e5e <SystemClock_Config+0xbe>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000e60:	4b08      	ldr	r3, [pc, #32]	@ (34000e84 <SystemClock_Config+0xe4>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34000e62:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000e64:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34000e66:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
34000e6a:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000e6e:	4b06      	ldr	r3, [pc, #24]	@ (34000e88 <SystemClock_Config+0xe8>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000e70:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000e72:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000e74:	f004 faee 	bl	34005454 <HAL_RCCEx_PeriphCLKConfig>
34000e78:	b100      	cbz	r0, 34000e7c <SystemClock_Config+0xdc>
  {
    while (1);
34000e7a:	e7fe      	b.n	34000e7a <SystemClock_Config+0xda>
  }
}
34000e7c:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
34000e80:	bd30      	pop	{r4, r5, pc}
34000e82:	bf00      	nop
34000e84:	03000014 	.word	0x03000014
34000e88:	03000414 	.word	0x03000414

34000e8c <enableTiming_Cyc>:
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
34000e8c:	4a06      	ldr	r2, [pc, #24]	@ (34000ea8 <enableTiming_Cyc+0x1c>)
34000e8e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34000e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
34000e96:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
34000e9a:	f5a2 425d 	sub.w	r2, r2, #56576	@ 0xdd00
34000e9e:	6813      	ldr	r3, [r2, #0]
34000ea0:	f043 0301 	orr.w	r3, r3, #1
34000ea4:	6013      	str	r3, [r2, #0]
}
34000ea6:	4770      	bx	lr
34000ea8:	e000ed00 	.word	0xe000ed00

34000eac <controllOutput>:
void controllOutput(int8_t* in, int8_t* weights, size_t insize, size_t outsize) {
34000eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34000eb0:	4605      	mov	r5, r0
34000eb2:	4616      	mov	r6, r2
    printf("Controll Output:\n\r ");
34000eb4:	4812      	ldr	r0, [pc, #72]	@ (34000f00 <controllOutput+0x54>)
void controllOutput(int8_t* in, int8_t* weights, size_t insize, size_t outsize) {
34000eb6:	4689      	mov	r9, r1
34000eb8:	4698      	mov	r8, r3
    for (size_t i = 0; i < outsize; i++) {  // Iterate over output size
34000eba:	2700      	movs	r7, #0
    printf("Controll Output:\n\r ");
34000ebc:	f00d fbaa 	bl	3400e614 <iprintf>
        printf("%3d ", acc);  // Print the result as a 32-bit integer
34000ec0:	f8df a044 	ldr.w	sl, [pc, #68]	@ 34000f08 <controllOutput+0x5c>
34000ec4:	442e      	add	r6, r5
    for (size_t i = 0; i < outsize; i++) {  // Iterate over output size
34000ec6:	4547      	cmp	r7, r8
34000ec8:	d014      	beq.n	34000ef4 <controllOutput+0x48>
        int32_t acc = 0;
34000eca:	1b74      	subs	r4, r6, r5
34000ecc:	462a      	mov	r2, r5
34000ece:	2100      	movs	r1, #0
34000ed0:	eb09 0307 	add.w	r3, r9, r7
34000ed4:	3401      	adds	r4, #1
34000ed6:	e006      	b.n	34000ee6 <controllOutput+0x3a>
            acc += in[j] * weights[i + outsize * j];  // Correct indexing
34000ed8:	f993 0000 	ldrsb.w	r0, [r3]
34000edc:	f912 cb01 	ldrsb.w	ip, [r2], #1
34000ee0:	4443      	add	r3, r8
34000ee2:	fb1c 1100 	smlabb	r1, ip, r0, r1
        for (size_t j = 0; j < insize; j++) {  // Iterate over input size
34000ee6:	3c01      	subs	r4, #1
34000ee8:	d1f6      	bne.n	34000ed8 <controllOutput+0x2c>
        printf("%3d ", acc);  // Print the result as a 32-bit integer
34000eea:	4650      	mov	r0, sl
34000eec:	f00d fb92 	bl	3400e614 <iprintf>
    for (size_t i = 0; i < outsize; i++) {  // Iterate over output size
34000ef0:	3701      	adds	r7, #1
34000ef2:	e7e8      	b.n	34000ec6 <controllOutput+0x1a>
    printf("\n\r");
34000ef4:	4803      	ldr	r0, [pc, #12]	@ (34000f04 <controllOutput+0x58>)
}
34000ef6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printf("\n\r");
34000efa:	f00d bb8b 	b.w	3400e614 <iprintf>
34000efe:	bf00      	nop
34000f00:	340106ca 	.word	0x340106ca
34000f04:	340106fc 	.word	0x340106fc
34000f08:	340106de 	.word	0x340106de

34000f0c <main>:
{
34000f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000f10:	b095      	sub	sp, #84	@ 0x54
    BSP_LED_Init(LED_BLUE);
34000f12:	2000      	movs	r0, #0
{
34000f14:	af02      	add	r7, sp, #8
    enableTiming_Cyc();
34000f16:	f7ff ffb9 	bl	34000e8c <enableTiming_Cyc>
    BSP_LED_Init(LED_BLUE);
34000f1a:	f000 fe2b 	bl	34001b74 <BSP_LED_Init>
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34000f1e:	4ad2      	ldr	r2, [pc, #840]	@ (34001268 <main+0x35c>)
34000f20:	6813      	ldr	r3, [r2, #0]
34000f22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34000f26:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
34000f28:	4bd0      	ldr	r3, [pc, #832]	@ (3400126c <main+0x360>)
34000f2a:	6a1a      	ldr	r2, [r3, #32]
34000f2c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
34000f30:	621a      	str	r2, [r3, #32]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
34000f32:	6a1a      	ldr	r2, [r3, #32]
34000f34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
34000f38:	621a      	str	r2, [r3, #32]
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34000f3a:	2210      	movs	r2, #16
34000f3c:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34000f40:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34000f44:	61fb      	str	r3, [r7, #28]
  (void)tmpreg;
34000f46:	69fb      	ldr	r3, [r7, #28]
  HAL_Init();
34000f48:	f001 fad6 	bl	340024f8 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34000f4c:	4bc8      	ldr	r3, [pc, #800]	@ (34001270 <main+0x364>)
34000f4e:	695a      	ldr	r2, [r3, #20]
34000f50:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
34000f54:	d111      	bne.n	34000f7a <main+0x6e>
  __ASM volatile ("dsb 0xF":::"memory");
34000f56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000f5a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34000f5e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34000f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000f66:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
34000f6a:	695a      	ldr	r2, [r3, #20]
34000f6c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34000f70:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34000f72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000f76:	f3bf 8f6f 	isb	sy
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
34000f7a:	4abb      	ldr	r2, [pc, #748]	@ (34001268 <main+0x35c>)
34000f7c:	6813      	ldr	r3, [r2, #0]
34000f7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34000f82:	6013      	str	r3, [r2, #0]
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
34000f84:	f5a2 4273 	sub.w	r2, r2, #62208	@ 0xf300
34000f88:	6953      	ldr	r3, [r2, #20]
34000f8a:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
34000f8e:	d128      	bne.n	34000fe2 <main+0xd6>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
34000f90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
34000f94:	f3bf 8f4f 	dsb	sy
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34000f98:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    ccsidr = SCB->CCSIDR;
34000f9c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34000fa0:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
34000fa4:	f3c3 334e 	ubfx	r3, r3, #13, #15
34000fa8:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34000faa:	f100 0e01 	add.w	lr, r0, #1
34000fae:	4601      	mov	r1, r0
34000fb0:	f04e e001 	dls	lr, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34000fb4:	ea03 0604 	and.w	r6, r3, r4
34000fb8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
34000fbc:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
34000fc0:	3901      	subs	r1, #1
34000fc2:	f00f c807 	le	lr, 34000fb8 <main+0xac>
    } while(sets-- != 0U);
34000fc6:	3b20      	subs	r3, #32
34000fc8:	f113 0f20 	cmn.w	r3, #32
34000fcc:	d1ed      	bne.n	34000faa <main+0x9e>
34000fce:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
34000fd2:	6953      	ldr	r3, [r2, #20]
34000fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34000fd8:	6153      	str	r3, [r2, #20]
34000fda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000fde:	f3bf 8f6f 	isb	sy
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34000fe2:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
34000fe6:	4da1      	ldr	r5, [pc, #644]	@ (3400126c <main+0x360>)
  SystemClock_Config();
34000fe8:	f7ff feda 	bl	34000da0 <SystemClock_Config>
34000fec:	f8c5 8a60 	str.w	r8, [r5, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34000ff0:	f8d5 3260 	ldr.w	r3, [r5, #608]	@ 0x260
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000ff4:	4a9f      	ldr	r2, [pc, #636]	@ (34001274 <main+0x368>)
  tmpreg = READ_REG(RCC->AHB5ENR);
34000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)tmpreg;
34000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
34000ffa:	2001      	movs	r0, #1
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34000ffc:	f8c5 8a20 	str.w	r8, [r5, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001000:	f8c2 8220 	str.w	r8, [r2, #544]	@ 0x220
34001004:	f7ff fea8 	bl	34000d58 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
34001008:	2002      	movs	r0, #2
3400100a:	f7ff fea5 	bl	34000d58 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
3400100e:	2004      	movs	r0, #4
34001010:	f7ff fea2 	bl	34000d58 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
34001014:	2008      	movs	r0, #8
34001016:	f7ff fe9f 	bl	34000d58 <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
3400101a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RAMCFG_HandleTypeDef hramcfg = {0};
3400101e:	2400      	movs	r4, #0
34001020:	f8c5 3a54 	str.w	r3, [r5, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
34001024:	f8d5 1254 	ldr.w	r1, [r5, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001028:	f107 0038 	add.w	r0, r7, #56	@ 0x38
3400102c:	6239      	str	r1, [r7, #32]
  (void)tmpreg;
3400102e:	6a39      	ldr	r1, [r7, #32]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34001030:	4991      	ldr	r1, [pc, #580]	@ (34001278 <main+0x36c>)
  RAMCFG_HandleTypeDef hramcfg = {0};
34001032:	e9c7 440f 	strd	r4, r4, [r7, #60]	@ 0x3c
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34001036:	63b9      	str	r1, [r7, #56]	@ 0x38
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001038:	f003 f83a 	bl	340040b0 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
3400103c:	498f      	ldr	r1, [pc, #572]	@ (3400127c <main+0x370>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3400103e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34001042:	63b9      	str	r1, [r7, #56]	@ 0x38
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001044:	f003 f834 	bl	340040b0 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
34001048:	498d      	ldr	r1, [pc, #564]	@ (34001280 <main+0x374>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3400104a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3400104e:	63b9      	str	r1, [r7, #56]	@ 0x38
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001050:	f003 f82e 	bl	340040b0 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34001054:	498b      	ldr	r1, [pc, #556]	@ (34001284 <main+0x378>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001056:	f107 0038 	add.w	r0, r7, #56	@ 0x38
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
3400105a:	63b9      	str	r1, [r7, #56]	@ 0x38
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3400105c:	f003 f828 	bl	340040b0 <HAL_RAMCFG_EnableAXISRAM>
  Fuse_Programming();
34001060:	f7ff fe4c 	bl	34000cfc <Fuse_Programming>
  npu_cache_init();
34001064:	f000 fa1c 	bl	340014a0 <npu_cache_init>
  npu_cache_enable();
34001068:	f000 fa24 	bl	340014b4 <npu_cache_enable>
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3400106c:	f240 1101 	movw	r1, #257	@ 0x101
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34001070:	f44f 7b00 	mov.w	fp, #512	@ 0x200
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34001074:	2603      	movs	r6, #3
34001076:	f04f 0902 	mov.w	r9, #2
  BSP_XSPI_NOR_Init(0, &NOR_Init);
3400107a:	f107 0a18 	add.w	sl, r7, #24
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3400107e:	8339      	strh	r1, [r7, #24]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001080:	4620      	mov	r0, r4
34001082:	4651      	mov	r1, sl
34001084:	f000 ff5e 	bl	34001f44 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
34001088:	4620      	mov	r0, r4
3400108a:	f000 fecf 	bl	34001e2c <BSP_XSPI_NOR_EnableMemoryMappedMode>
3400108e:	f8c5 ba58 	str.w	fp, [r5, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
34001092:	f8d5 1258 	ldr.w	r1, [r5, #600]	@ 0x258
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34001096:	2001      	movs	r0, #1
34001098:	62b9      	str	r1, [r7, #40]	@ 0x28
  (void)tmpreg;
3400109a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3400109c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
340010a0:	e9c7 960e 	strd	r9, r6, [r7, #56]	@ 0x38
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
340010a4:	f009 f804 	bl	3400a0b0 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
340010a8:	2008      	movs	r0, #8
340010aa:	f107 0138 	add.w	r1, r7, #56	@ 0x38
340010ae:	f008 ffff 	bl	3400a0b0 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
340010b2:	2009      	movs	r0, #9
340010b4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
340010b8:	f008 fffa 	bl	3400a0b0 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
340010bc:	200a      	movs	r0, #10
340010be:	f107 0138 	add.w	r1, r7, #56	@ 0x38
340010c2:	f008 fff5 	bl	3400a0b0 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
340010c6:	200b      	movs	r0, #11
340010c8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
340010cc:	f008 fff0 	bl	3400a0b0 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
340010d0:	2004      	movs	r0, #4
340010d2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
340010d6:	f008 ffeb 	bl	3400a0b0 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340010da:	4631      	mov	r1, r6
340010dc:	486a      	ldr	r0, [pc, #424]	@ (34001288 <main+0x37c>)
340010de:	f009 f83d 	bl	3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340010e2:	4631      	mov	r1, r6
340010e4:	4869      	ldr	r0, [pc, #420]	@ (3400128c <main+0x380>)
340010e6:	f009 f839 	bl	3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340010ea:	4631      	mov	r1, r6
340010ec:	4868      	ldr	r0, [pc, #416]	@ (34001290 <main+0x384>)
340010ee:	f009 f835 	bl	3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340010f2:	4631      	mov	r1, r6
340010f4:	4867      	ldr	r0, [pc, #412]	@ (34001294 <main+0x388>)
340010f6:	f009 f831 	bl	3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340010fa:	4631      	mov	r1, r6
340010fc:	4866      	ldr	r0, [pc, #408]	@ (34001298 <main+0x38c>)
340010fe:	f009 f82d 	bl	3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001102:	4631      	mov	r1, r6
34001104:	4865      	ldr	r0, [pc, #404]	@ (3400129c <main+0x390>)
34001106:	f009 f829 	bl	3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400110a:	4631      	mov	r1, r6
3400110c:	4864      	ldr	r0, [pc, #400]	@ (340012a0 <main+0x394>)
3400110e:	f009 f825 	bl	3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001112:	4631      	mov	r1, r6
34001114:	4863      	ldr	r0, [pc, #396]	@ (340012a4 <main+0x398>)
34001116:	f009 f821 	bl	3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400111a:	4631      	mov	r1, r6
3400111c:	2004      	movs	r0, #4
3400111e:	f009 f81d 	bl	3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34001122:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34001126:	f8c5 1a58 	str.w	r1, [r5, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
3400112a:	f8d5 0258 	ldr.w	r0, [r5, #600]	@ 0x258
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
3400112e:	4a51      	ldr	r2, [pc, #324]	@ (34001274 <main+0x368>)
  tmpreg = READ_REG(RCC->AHB3ENR);
34001130:	62f8      	str	r0, [r7, #44]	@ 0x2c
  (void)tmpreg;
34001132:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
34001134:	f8c5 1a18 	str.w	r1, [r5, #2584]	@ 0xa18
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
34001138:	2020      	movs	r0, #32
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
3400113a:	f8c2 1218 	str.w	r1, [r2, #536]	@ 0x218
3400113e:	f7ff fe23 	bl	34000d88 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
34001142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34001146:	2204      	movs	r2, #4
34001148:	4618      	mov	r0, r3
3400114a:	f7ff fe1d 	bl	34000d88 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
3400114e:	4640      	mov	r0, r8
34001150:	f7ff fe1a 	bl	34000d88 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
34001154:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001158:	f7ff fe16 	bl	34000d88 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
3400115c:	4648      	mov	r0, r9
3400115e:	f7ff fe13 	bl	34000d88 <LL_AHB5_GRP1_EnableClockLowPower>
34001162:	f8c5 2abc 	str.w	r2, [r5, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34001166:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
3400116a:	4658      	mov	r0, fp
3400116c:	637b      	str	r3, [r7, #52]	@ 0x34
  (void)tmpreg;
3400116e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34001170:	2340      	movs	r3, #64	@ 0x40
34001172:	f8c5 3abc 	str.w	r3, [r5, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34001176:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
  BSP_COM_Init(COM1, &com_config);
3400117a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
3400117e:	633b      	str	r3, [r7, #48]	@ 0x30
  (void)tmpreg;
34001180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34001182:	f7ff fdf5 	bl	34000d70 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
34001186:	2080      	movs	r0, #128	@ 0x80
34001188:	f7ff fdf2 	bl	34000d70 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
3400118c:	f44f 7080 	mov.w	r0, #256	@ 0x100
34001190:	f7ff fdee 	bl	34000d70 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
34001194:	2001      	movs	r0, #1
34001196:	f7ff fdeb 	bl	34000d70 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
3400119a:	4648      	mov	r0, r9
3400119c:	f7ff fde8 	bl	34000d70 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
340011a0:	4610      	mov	r0, r2
340011a2:	f7ff fde5 	bl	34000d70 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
340011a6:	2008      	movs	r0, #8
340011a8:	f7ff fde2 	bl	34000d70 <LL_MEM_EnableClockLowPower>
  COM_InitTypeDef com_config = {
340011ac:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  BSP_COM_Init(COM1, &com_config);
340011b0:	4620      	mov	r0, r4
  COM_InitTypeDef com_config = {
340011b2:	e9c7 340e 	strd	r3, r4, [r7, #56]	@ 0x38
	DWT->CYCCNT = 0; // Reset counter
340011b6:	4d3c      	ldr	r5, [pc, #240]	@ (340012a8 <main+0x39c>)
  COM_InitTypeDef com_config = {
340011b8:	643c      	str	r4, [r7, #64]	@ 0x40
340011ba:	f8a7 4044 	strh.w	r4, [r7, #68]	@ 0x44
  BSP_COM_Init(COM1, &com_config);
340011be:	f000 fd21 	bl	34001c04 <BSP_COM_Init>
    BSP_LED_On(LED_BLUE);
340011c2:	4620      	mov	r0, r4
340011c4:	f000 fcb6 	bl	34001b34 <BSP_LED_On>
    printf("\n\r== Begin measurement ==\n\r");
340011c8:	4838      	ldr	r0, [pc, #224]	@ (340012ac <main+0x3a0>)
340011ca:	f00d fa23 	bl	3400e614 <iprintf>
    NeuralNetwork_init(&nn_in, &nn_in_len, nn_out, &number_output, nn_out_len);
340011ce:	f107 0214 	add.w	r2, r7, #20
    int number_output = 0;
340011d2:	e9c7 4403 	strd	r4, r4, [r7, #12]
    int8_t* nn_in = NULL;
340011d6:	63bc      	str	r4, [r7, #56]	@ 0x38
    NeuralNetwork_init(&nn_in, &nn_in_len, nn_out, &number_output, nn_out_len);
340011d8:	f107 0310 	add.w	r3, r7, #16
	DWT->CYCCNT = 0; // Reset counter
340011dc:	606c      	str	r4, [r5, #4]
    NeuralNetwork_init(&nn_in, &nn_in_len, nn_out, &number_output, nn_out_len);
340011de:	f107 010c 	add.w	r1, r7, #12
340011e2:	f8cd a000 	str.w	sl, [sp]
340011e6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
340011ea:	f7ff fceb 	bl	34000bc4 <NeuralNetwork_init>
    printf("Input length: %lu bytes\n\r", nn_in_len);
340011ee:	68f9      	ldr	r1, [r7, #12]
340011f0:	482f      	ldr	r0, [pc, #188]	@ (340012b0 <main+0x3a4>)
	uint32_t cycles = DWT->CYCCNT;
340011f2:	686b      	ldr	r3, [r5, #4]
    printf("Input length: %lu bytes\n\r", nn_in_len);
340011f4:	f00d fa0e 	bl	3400e614 <iprintf>
    printf("Output length: %lu bytes\n\r", nn_out_len[0]);
340011f8:	69b9      	ldr	r1, [r7, #24]
340011fa:	482e      	ldr	r0, [pc, #184]	@ (340012b4 <main+0x3a8>)
340011fc:	f00d fa0a 	bl	3400e614 <iprintf>
    printf("In pointer: %p\n\r",nn_in);
34001200:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
34001202:	482d      	ldr	r0, [pc, #180]	@ (340012b8 <main+0x3ac>)
34001204:	f00d fa06 	bl	3400e614 <iprintf>
    printf("Out pointer: %p\n\r",nn_out[0]);
34001208:	6979      	ldr	r1, [r7, #20]
3400120a:	482c      	ldr	r0, [pc, #176]	@ (340012bc <main+0x3b0>)
3400120c:	f00d fa02 	bl	3400e614 <iprintf>
    int8_t matrix1[nn_in_len];
34001210:	68f8      	ldr	r0, [r7, #12]
34001212:	1dc3      	adds	r3, r0, #7
34001214:	f023 0307 	bic.w	r3, r3, #7
34001218:	ebad 0d03 	sub.w	sp, sp, r3
3400121c:	f10d 0808 	add.w	r8, sp, #8
    for (int i = 0; i < nn_in_len; i++) {
34001220:	1c43      	adds	r3, r0, #1
34001222:	3b01      	subs	r3, #1
34001224:	f040 80c5 	bne.w	340013b2 <main+0x4a6>
    int8_t* identityWeights = getIdentityWeights_int8(nn_in_len,nn_out_len[0]);
34001228:	69b9      	ldr	r1, [r7, #24]
3400122a:	f7ff fca5 	bl	34000b78 <getIdentityWeights_int8>
	if (identityWeights == NULL) {
3400122e:	4605      	mov	r5, r0
34001230:	b910      	cbnz	r0, 34001238 <main+0x32c>
		printf("Error in weights Allocation");
34001232:	4823      	ldr	r0, [pc, #140]	@ (340012c0 <main+0x3b4>)
34001234:	f00d f9ee 	bl	3400e614 <iprintf>
	size_t loopcount = 0;
34001238:	2600      	movs	r6, #0
	size_t weight_size = nn_in_len * nn_out_len[0];  // Based on weight tensor shape in network.c
3400123a:	69bc      	ldr	r4, [r7, #24]
3400123c:	68fb      	ldr	r3, [r7, #12]
		    printf("%4d", nn_in[i]);
3400123e:	f8df b088 	ldr.w	fp, [pc, #136]	@ 340012c8 <main+0x3bc>
	size_t weight_size = nn_in_len * nn_out_len[0];  // Based on weight tensor shape in network.c
34001242:	435c      	muls	r4, r3
		printf("\n\r");
34001244:	f8df a084 	ldr.w	sl, [pc, #132]	@ 340012cc <main+0x3c0>
        controllOutput(matrix1, nnweights, nn_in_len,nn_out_len[0]);
34001248:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 340012d0 <main+0x3c4>
    	printf("Loop count main:%4d\n\r",loopcount);
3400124c:	4631      	mov	r1, r6
3400124e:	481d      	ldr	r0, [pc, #116]	@ (340012c4 <main+0x3b8>)
34001250:	f00d f9e0 	bl	3400e614 <iprintf>
        memcpy(nn_in, matrix1, nn_in_len);
34001254:	68fa      	ldr	r2, [r7, #12]
34001256:	4641      	mov	r1, r8
34001258:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
3400125a:	f00d fdb2 	bl	3400edc2 <memcpy>
        SCB_CleanDCache_by_Addr((void*)nn_in, nn_in_len);
3400125e:	68fa      	ldr	r2, [r7, #12]
    if ( dsize > 0 ) {
34001260:	2a00      	cmp	r2, #0
34001262:	dd55      	ble.n	34001310 <main+0x404>
34001264:	e036      	b.n	340012d4 <main+0x3c8>
34001266:	bf00      	nop
34001268:	e001e000 	.word	0xe001e000
3400126c:	56028000 	.word	0x56028000
34001270:	e000ed00 	.word	0xe000ed00
34001274:	56029000 	.word	0x56029000
34001278:	52023100 	.word	0x52023100
3400127c:	52023180 	.word	0x52023180
34001280:	52023200 	.word	0x52023200
34001284:	52023280 	.word	0x52023280
34001288:	3000000a 	.word	0x3000000a
3400128c:	30000005 	.word	0x30000005
34001290:	2000001c 	.word	0x2000001c
34001294:	2000001d 	.word	0x2000001d
34001298:	30000006 	.word	0x30000006
3400129c:	30000007 	.word	0x30000007
340012a0:	30000008 	.word	0x30000008
340012a4:	10000018 	.word	0x10000018
340012a8:	e0001000 	.word	0xe0001000
340012ac:	340106e3 	.word	0x340106e3
340012b0:	340106ff 	.word	0x340106ff
340012b4:	34010719 	.word	0x34010719
340012b8:	34010734 	.word	0x34010734
340012bc:	34010745 	.word	0x34010745
340012c0:	34010757 	.word	0x34010757
340012c4:	34010773 	.word	0x34010773
340012c8:	34010796 	.word	0x34010796
340012cc:	340106fc 	.word	0x340106fc
340012d0:	34200000 	.word	0x34200000
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
340012d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
340012d6:	f003 001f 	and.w	r0, r3, #31
340012da:	4410      	add	r0, r2
  __ASM volatile ("dsb 0xF":::"memory");
340012dc:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
340012e0:	43da      	mvns	r2, r3
340012e2:	eb03 0c00 	add.w	ip, r3, r0
340012e6:	4462      	add	r2, ip
340012e8:	3820      	subs	r0, #32
340012ea:	0952      	lsrs	r2, r2, #5
340012ec:	3020      	adds	r0, #32
340012ee:	f102 0e01 	add.w	lr, r2, #1
340012f2:	bfd8      	it	le
340012f4:	f04f 0e01 	movle.w	lr, #1
340012f8:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
340012fc:	4938      	ldr	r1, [pc, #224]	@ (340013e0 <main+0x4d4>)
340012fe:	f8c1 3268 	str.w	r3, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34001302:	3320      	adds	r3, #32
      } while ( op_size > 0 );
34001304:	f00f c805 	le	lr, 340012fe <main+0x3f2>
34001308:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400130c:	f3bf 8f6f 	isb	sy
		printf("Inputs: %p\n\r",nn_in);
34001310:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
34001312:	4834      	ldr	r0, [pc, #208]	@ (340013e4 <main+0x4d8>)
34001314:	f00d f97e 	bl	3400e614 <iprintf>
		for (int i = 0; i < nn_in_len; i++) {
34001318:	2300      	movs	r3, #0
3400131a:	68fa      	ldr	r2, [r7, #12]
3400131c:	429a      	cmp	r2, r3
3400131e:	d84c      	bhi.n	340013ba <main+0x4ae>
		printf("\n\r");
34001320:	4650      	mov	r0, sl
34001322:	f00d f977 	bl	3400e614 <iprintf>
    if ( dsize > 0 ) {
34001326:	2c00      	cmp	r4, #0
34001328:	dd18      	ble.n	3400135c <main+0x450>
  __ASM volatile ("dsb 0xF":::"memory");
3400132a:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3400132e:	1e63      	subs	r3, r4, #1
34001330:	f1a4 0020 	sub.w	r0, r4, #32
34001334:	095b      	lsrs	r3, r3, #5
34001336:	3020      	adds	r0, #32
34001338:	f103 0e01 	add.w	lr, r3, #1
3400133c:	bfd8      	it	le
3400133e:	f04f 0e01 	movle.w	lr, #1
34001342:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34001346:	4926      	ldr	r1, [pc, #152]	@ (340013e0 <main+0x4d4>)
      } while ( op_size > 0 );
34001348:	4a27      	ldr	r2, [pc, #156]	@ (340013e8 <main+0x4dc>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3400134a:	f8c1 2268 	str.w	r2, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
3400134e:	3220      	adds	r2, #32
      } while ( op_size > 0 );
34001350:	f00f c805 	le	lr, 3400134a <main+0x43e>
34001354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34001358:	f3bf 8f6f 	isb	sy
        ts[0] = HAL_GetTick();
3400135c:	f001 f8ea 	bl	34002534 <HAL_GetTick>
	DWT->CYCCNT = 0; // Reset counter
34001360:	2300      	movs	r3, #0
34001362:	4a22      	ldr	r2, [pc, #136]	@ (340013ec <main+0x4e0>)
        LL_ATON_RT_Main(&NN_Instance_Default);
34001364:	4822      	ldr	r0, [pc, #136]	@ (340013f0 <main+0x4e4>)
	DWT->CYCCNT = 0; // Reset counter
34001366:	6053      	str	r3, [r2, #4]
        LL_ATON_RT_Main(&NN_Instance_Default);
34001368:	f00b fe02 	bl	3400cf70 <LL_ATON_RT_Main>
	uint32_t cycles = DWT->CYCCNT;
3400136c:	4a1f      	ldr	r2, [pc, #124]	@ (340013ec <main+0x4e0>)
3400136e:	6852      	ldr	r2, [r2, #4]
        ts[1] = HAL_GetTick();
34001370:	f001 f8e0 	bl	34002534 <HAL_GetTick>
        printf("NPU Output: %p\n\r",nn_out[0]);
34001374:	6979      	ldr	r1, [r7, #20]
34001376:	481f      	ldr	r0, [pc, #124]	@ (340013f4 <main+0x4e8>)
34001378:	f00d f94c 	bl	3400e614 <iprintf>
		for (int i = 0; i < nn_out_len[0]; i++) {
3400137c:	2300      	movs	r3, #0
3400137e:	69ba      	ldr	r2, [r7, #24]
34001380:	429a      	cmp	r2, r3
34001382:	d823      	bhi.n	340013cc <main+0x4c0>
		printf("\n\r");
34001384:	4650      	mov	r0, sl
34001386:	f00d f945 	bl	3400e614 <iprintf>
        controllOutput(matrix1, nnweights, nn_in_len,nn_out_len[0]);
3400138a:	4649      	mov	r1, r9
3400138c:	69bb      	ldr	r3, [r7, #24]
3400138e:	68fa      	ldr	r2, [r7, #12]
34001390:	4640      	mov	r0, r8
34001392:	f7ff fd8b 	bl	34000eac <controllOutput>
        BSP_LED_Toggle(LED_BLUE);
34001396:	2000      	movs	r0, #0
34001398:	f000 fc0c 	bl	34001bb4 <BSP_LED_Toggle>
        HAL_Delay(1000);
3400139c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
340013a0:	f001 f8ce 	bl	34002540 <HAL_Delay>
		update_weights_int8(nnweights, identityWeights, weight_size);
340013a4:	4622      	mov	r2, r4
340013a6:	4629      	mov	r1, r5
340013a8:	4648      	mov	r0, r9
340013aa:	f7ff fbb7 	bl	34000b1c <update_weights_int8>
		loopcount++;
340013ae:	3601      	adds	r6, #1
    {
340013b0:	e74c      	b.n	3400124c <main+0x340>
        matrix1[i] = (int8_t)((i) % 256);  // Example input: cycles through -128 to 127
340013b2:	f808 4004 	strb.w	r4, [r8, r4]
    for (int i = 0; i < nn_in_len; i++) {
340013b6:	3401      	adds	r4, #1
340013b8:	e733      	b.n	34001222 <main+0x316>
		    printf("%4d", nn_in[i]);
340013ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
340013bc:	4658      	mov	r0, fp
340013be:	56d1      	ldrsb	r1, [r2, r3]
340013c0:	607b      	str	r3, [r7, #4]
340013c2:	f00d f927 	bl	3400e614 <iprintf>
		for (int i = 0; i < nn_in_len; i++) {
340013c6:	687b      	ldr	r3, [r7, #4]
340013c8:	3301      	adds	r3, #1
340013ca:	e7a6      	b.n	3400131a <main+0x40e>
			printf("%4d", nn_out[0][i]);
340013cc:	697a      	ldr	r2, [r7, #20]
340013ce:	4658      	mov	r0, fp
340013d0:	56d1      	ldrsb	r1, [r2, r3]
340013d2:	607b      	str	r3, [r7, #4]
340013d4:	f00d f91e 	bl	3400e614 <iprintf>
		for (int i = 0; i < nn_out_len[0]; i++) {
340013d8:	687b      	ldr	r3, [r7, #4]
340013da:	3301      	adds	r3, #1
340013dc:	e7cf      	b.n	3400137e <main+0x472>
340013de:	bf00      	nop
340013e0:	e000ed00 	.word	0xe000ed00
340013e4:	34010789 	.word	0x34010789
340013e8:	34200000 	.word	0x34200000
340013ec:	e0001000 	.word	0xe0001000
340013f0:	340127f4 	.word	0x340127f4
340013f4:	3401079a 	.word	0x3401079a

340013f8 <_write>:
{
340013f8:	b510      	push	{r4, lr}
340013fa:	4614      	mov	r4, r2
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
340013fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001400:	b292      	uxth	r2, r2
34001402:	4802      	ldr	r0, [pc, #8]	@ (3400140c <_write+0x14>)
34001404:	f009 fa36 	bl	3400a874 <HAL_UART_Transmit>
}
34001408:	4620      	mov	r0, r4
3400140a:	bd10      	pop	{r4, pc}
3400140c:	34012a38 	.word	0x34012a38

34001410 <IAC_IRQHandler>:
  while (1)
34001410:	e7fe      	b.n	34001410 <IAC_IRQHandler>
	...

34001414 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34001414:	b507      	push	{r0, r1, r2, lr}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001416:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
3400141a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
3400141e:	f7ff fc9b 	bl	34000d58 <LL_MEM_EnableClock>
34001422:	4b08      	ldr	r3, [pc, #32]	@ (34001444 <HAL_CACHEAXI_MspInit+0x30>)
34001424:	f8c3 2a60 	str.w	r2, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001428:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
3400142c:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
3400142e:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001430:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34001438:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
3400143c:	b003      	add	sp, #12
3400143e:	f85d fb04 	ldr.w	pc, [sp], #4
34001442:	bf00      	nop
34001444:	56028000 	.word	0x56028000

34001448 <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
34001448:	be00      	bkpt	0x0000
  while (1)
3400144a:	e7fe      	b.n	3400144a <assert_failed+0x2>

3400144c <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
3400144c:	b530      	push	{r4, r5, lr}

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
3400144e:	4d13      	ldr	r5, [pc, #76]	@ (3400149c <mcu_cache_invalidate_range+0x50>)
34001450:	696b      	ldr	r3, [r5, #20]
34001452:	03db      	lsls	r3, r3, #15
34001454:	d51f      	bpl.n	34001496 <mcu_cache_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34001456:	1a0a      	subs	r2, r1, r0
    if ( dsize > 0 ) {
34001458:	2a00      	cmp	r2, #0
3400145a:	dd1c      	ble.n	34001496 <mcu_cache_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3400145c:	f000 031f 	and.w	r3, r0, #31
34001460:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
34001462:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
34001466:	1884      	adds	r4, r0, r2
34001468:	43c2      	mvns	r2, r0
3400146a:	1a1b      	subs	r3, r3, r0
3400146c:	440b      	add	r3, r1
3400146e:	4422      	add	r2, r4
34001470:	3b20      	subs	r3, #32
34001472:	0952      	lsrs	r2, r2, #5
34001474:	3320      	adds	r3, #32
34001476:	f102 0e01 	add.w	lr, r2, #1
3400147a:	bfd8      	it	le
3400147c:	f04f 0e01 	movle.w	lr, #1
34001480:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34001484:	f8c5 025c 	str.w	r0, [r5, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34001488:	3020      	adds	r0, #32
      } while ( op_size > 0 );
3400148a:	f00f c805 	le	lr, 34001484 <mcu_cache_invalidate_range+0x38>
3400148e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34001492:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
34001496:	2000      	movs	r0, #0
34001498:	bd30      	pop	{r4, r5, pc}
3400149a:	bf00      	nop
3400149c:	e000ed00 	.word	0xe000ed00

340014a0 <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
340014a0:	4802      	ldr	r0, [pc, #8]	@ (340014ac <npu_cache_init+0xc>)
340014a2:	4b03      	ldr	r3, [pc, #12]	@ (340014b0 <npu_cache_init+0x10>)
340014a4:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
340014a6:	f001 b94f 	b.w	34002748 <HAL_CACHEAXI_Init>
340014aa:	bf00      	nop
340014ac:	34012a2c 	.word	0x34012a2c
340014b0:	580dfc00 	.word	0x580dfc00

340014b4 <npu_cache_enable>:
}

void npu_cache_enable(void)
{
340014b4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
340014b6:	4c03      	ldr	r4, [pc, #12]	@ (340014c4 <npu_cache_enable+0x10>)
340014b8:	4620      	mov	r0, r4
340014ba:	f001 f911 	bl	340026e0 <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
340014be:	2802      	cmp	r0, #2
340014c0:	d0fa      	beq.n	340014b8 <npu_cache_enable+0x4>
}
340014c2:	bd10      	pop	{r4, pc}
340014c4:	34012a2c 	.word	0x34012a2c

340014c8 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
340014c8:	4770      	bx	lr

340014ca <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
340014ca:	e7fe      	b.n	340014ca <HardFault_Handler>

340014cc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
340014cc:	e7fe      	b.n	340014cc <MemManage_Handler>

340014ce <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
340014ce:	e7fe      	b.n	340014ce <BusFault_Handler>

340014d0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
340014d0:	e7fe      	b.n	340014d0 <UsageFault_Handler>

340014d2 <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
340014d2:	e7fe      	b.n	340014d2 <SecureFault_Handler>

340014d4 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
340014d4:	4770      	bx	lr

340014d6 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
340014d6:	e7fe      	b.n	340014d6 <DebugMon_Handler>

340014d8 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
  while (1)
340014d8:	e7fe      	b.n	340014d8 <PendSV_Handler>

340014da <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
340014da:	f001 b81f 	b.w	3400251c <HAL_IncTick>

340014de <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
340014de:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
340014e0:	f00a fb94 	bl	3400bc0c <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
}
340014e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
340014e8:	f001 bb30 	b.w	34002b4c <HAL_DCMIPP_CSI_IRQHandler>

340014ec <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
340014ec:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
340014ee:	f00a fb8d 	bl	3400bc0c <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
340014f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
340014f6:	f001 b9f3 	b.w	340028e0 <HAL_DCMIPP_IRQHandler>

340014fa <_getpid>:
}

int _getpid(void)
{
  return 1;
}
340014fa:	2001      	movs	r0, #1
340014fc:	4770      	bx	lr

340014fe <_kill>:

int _kill(int pid, int sig)
{
340014fe:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
34001500:	f00d fc24 	bl	3400ed4c <__errno>
34001504:	2316      	movs	r3, #22
34001506:	6003      	str	r3, [r0, #0]
  return -1;
}
34001508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400150c:	bd08      	pop	{r3, pc}

3400150e <_exit>:

void _exit (int status)
{
3400150e:	b508      	push	{r3, lr}
  errno = EINVAL;
34001510:	f00d fc1c 	bl	3400ed4c <__errno>
34001514:	2316      	movs	r3, #22
34001516:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
34001518:	e7fe      	b.n	34001518 <_exit+0xa>

3400151a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
3400151a:	b570      	push	{r4, r5, r6, lr}
3400151c:	460d      	mov	r5, r1
3400151e:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001520:	460e      	mov	r6, r1
34001522:	1b73      	subs	r3, r6, r5
34001524:	429c      	cmp	r4, r3
34001526:	dc01      	bgt.n	3400152c <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
34001528:	4620      	mov	r0, r4
3400152a:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
3400152c:	f3af 8000 	nop.w
34001530:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001534:	e7f5      	b.n	34001522 <_read+0x8>

34001536 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
34001536:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400153a:	4770      	bx	lr

3400153c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
3400153c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
34001540:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
34001542:	604b      	str	r3, [r1, #4]
}
34001544:	4770      	bx	lr

34001546 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
34001546:	2001      	movs	r0, #1
34001548:	4770      	bx	lr

3400154a <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
3400154a:	2000      	movs	r0, #0
3400154c:	4770      	bx	lr

3400154e <MX25UM51245G_GetFlashInfo>:
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
3400154e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34001552:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34001556:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
3400155a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400155e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001562:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001566:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
3400156a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
3400156e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001572:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
34001574:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34001578:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25UM51245G_OK;
};
3400157c:	2000      	movs	r0, #0
3400157e:	4770      	bx	lr

34001580 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
34001580:	b570      	push	{r4, r5, r6, lr}
34001582:	460d      	mov	r5, r1
34001584:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef  s_command = {0};
34001586:	2100      	movs	r1, #0
{
34001588:	4606      	mov	r6, r0
3400158a:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef  s_command = {0};
3400158c:	a805      	add	r0, sp, #20
3400158e:	224c      	movs	r2, #76	@ 0x4c
34001590:	f00d f988 	bl	3400e8a4 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001594:	2214      	movs	r2, #20
34001596:	2100      	movs	r1, #0
34001598:	4668      	mov	r0, sp
3400159a:	f00d f983 	bl	3400e8a4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400159e:	b935      	cbnz	r5, 340015ae <MX25UM51245G_AutoPollingMemReady+0x2e>
  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340015a0:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340015a2:	429c      	cmp	r4, r3
340015a4:	d104      	bne.n	340015b0 <MX25UM51245G_AutoPollingMemReady+0x30>
    return MX25UM51245G_ERROR;
340015a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340015aa:	b018      	add	sp, #96	@ 0x60
340015ac:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340015ae:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340015b0:	1e60      	subs	r0, r4, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340015b2:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340015b4:	4243      	negs	r3, r0
340015b6:	4143      	adcs	r3, r0
340015b8:	00da      	lsls	r2, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340015ba:	920a      	str	r2, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340015bc:	2d00      	cmp	r5, #0
340015be:	d03a      	beq.n	34001636 <MX25UM51245G_AutoPollingMemReady+0xb6>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340015c0:	2210      	movs	r2, #16
340015c2:	f240 51fa 	movw	r1, #1530	@ 0x5fa
340015c6:	9209      	str	r2, [sp, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
340015c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340015cc:	920c      	str	r2, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
340015ce:	02da      	lsls	r2, r3, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
340015d0:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340015d2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340015d6:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340015d8:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340015da:	bf14      	ite	ne
340015dc:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
340015e0:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
340015e4:	ea4f 63c3 	mov.w	r3, r3, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340015e8:	9107      	str	r1, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340015ea:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
340015ec:	9315      	str	r3, [sp, #84]	@ 0x54
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
340015ee:	d02a      	beq.n	34001646 <MX25UM51245G_AutoPollingMemReady+0xc6>
340015f0:	2c01      	cmp	r4, #1
340015f2:	d123      	bne.n	3400163c <MX25UM51245G_AutoPollingMemReady+0xbc>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
340015f4:	2305      	movs	r3, #5
340015f6:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340015f8:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340015fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
340015fe:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001600:	2301      	movs	r3, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001602:	2110      	movs	r1, #16
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001604:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001606:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3400160a:	9214      	str	r2, [sp, #80]	@ 0x50
3400160c:	e9cd 3103 	strd	r3, r1, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001610:	f241 3288 	movw	r2, #5000	@ 0x1388
34001614:	4630      	mov	r0, r6
34001616:	a905      	add	r1, sp, #20
34001618:	f009 fd36 	bl	3400b088 <HAL_XSPI_Command>
3400161c:	2800      	cmp	r0, #0
3400161e:	d1c2      	bne.n	340015a6 <MX25UM51245G_AutoPollingMemReady+0x26>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001620:	f241 3288 	movw	r2, #5000	@ 0x1388
34001624:	4669      	mov	r1, sp
34001626:	4630      	mov	r0, r6
34001628:	f009 fee0 	bl	3400b3ec <HAL_XSPI_AutoPolling>
3400162c:	3800      	subs	r0, #0
3400162e:	bf18      	it	ne
34001630:	2001      	movne	r0, #1
34001632:	4240      	negs	r0, r0
34001634:	e7b9      	b.n	340015aa <MX25UM51245G_AutoPollingMemReady+0x2a>
34001636:	2105      	movs	r1, #5
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001638:	462a      	mov	r2, r5
3400163a:	e7c7      	b.n	340015cc <MX25UM51245G_AutoPollingMemReady+0x4c>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
3400163c:	2304      	movs	r3, #4
3400163e:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001640:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001642:	2300      	movs	r3, #0
34001644:	e7db      	b.n	340015fe <MX25UM51245G_AutoPollingMemReady+0x7e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001646:	2c01      	cmp	r4, #1
34001648:	d1fa      	bne.n	34001640 <MX25UM51245G_AutoPollingMemReady+0xc0>
3400164a:	e7d5      	b.n	340015f8 <MX25UM51245G_AutoPollingMemReady+0x78>

3400164c <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
3400164c:	b570      	push	{r4, r5, r6, lr}
3400164e:	460c      	mov	r4, r1
34001650:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef      s_command = {0};
34001652:	2100      	movs	r1, #0
{
34001654:	4606      	mov	r6, r0
34001656:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef      s_command = {0};
34001658:	a805      	add	r0, sp, #20
3400165a:	224c      	movs	r2, #76	@ 0x4c
3400165c:	f00d f922 	bl	3400e8a4 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001660:	2210      	movs	r2, #16
34001662:	2100      	movs	r1, #0
34001664:	a801      	add	r0, sp, #4
34001666:	f00d f91d 	bl	3400e8a4 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
3400166a:	2c01      	cmp	r4, #1
3400166c:	d144      	bne.n	340016f8 <MX25UM51245G_EnableSTRMemoryMappedMode+0xac>
3400166e:	b91d      	cbnz	r5, 34001678 <MX25UM51245G_EnableSTRMemoryMappedMode+0x2c>
  {
    return MX25UM51245G_ERROR;
34001670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001674:	b018      	add	sp, #96	@ 0x60
34001676:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001678:	9405      	str	r4, [sp, #20]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400167a:	2204      	movs	r2, #4
3400167c:	2310      	movs	r3, #16
3400167e:	e9cd 2308 	strd	r2, r3, [sp, #32]
34001682:	f64e 4213 	movw	r2, #60435	@ 0xec13
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                                 : HAL_XSPI_ADDRESS_32_BITS;
3400168a:	2d00      	cmp	r5, #0
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400168c:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_32_BITS;
3400168e:	bf14      	ite	ne
34001690:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
34001694:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001698:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400169a:	9207      	str	r2, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400169c:	bf0c      	ite	eq
3400169e:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
340016a2:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
340016a6:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340016a8:	bf0c      	ite	eq
340016aa:	2308      	moveq	r3, #8
340016ac:	2306      	movne	r3, #6
340016ae:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016b0:	4630      	mov	r0, r6
340016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
340016b6:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
340016b8:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016ba:	f009 fce5 	bl	3400b088 <HAL_XSPI_Command>
340016be:	2800      	cmp	r0, #0
340016c0:	d1d6      	bne.n	34001670 <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
340016c2:	2302      	movs	r3, #2
340016c4:	9305      	str	r3, [sp, #20]
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
340016c6:	bb1c      	cbnz	r4, 34001710 <MX25UM51245G_EnableSTRMemoryMappedMode+0xc4>
340016c8:	2d00      	cmp	r5, #0
340016ca:	bf18      	it	ne
340016cc:	2312      	movne	r3, #18
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340016ce:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles        = 0U;
340016d0:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016d2:	f241 3288 	movw	r2, #5000	@ 0x1388
340016d6:	4630      	mov	r0, r6
340016d8:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = 0U;
340016da:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016dc:	f009 fcd4 	bl	3400b088 <HAL_XSPI_Command>
340016e0:	2800      	cmp	r0, #0
340016e2:	d1c5      	bne.n	34001670 <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340016e4:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
340016e6:	a901      	add	r1, sp, #4
340016e8:	4630      	mov	r0, r6
340016ea:	f009 fefb 	bl	3400b4e4 <HAL_XSPI_MemoryMapped>
340016ee:	3800      	subs	r0, #0
340016f0:	bf18      	it	ne
340016f2:	2001      	movne	r0, #1
340016f4:	4240      	negs	r0, r0
340016f6:	e7bd      	b.n	34001674 <MX25UM51245G_EnableSTRMemoryMappedMode+0x28>
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340016f8:	2301      	movs	r3, #1
340016fa:	9305      	str	r3, [sp, #20]
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340016fc:	2c00      	cmp	r4, #0
340016fe:	d1bc      	bne.n	3400167a <MX25UM51245G_EnableSTRMemoryMappedMode+0x2e>
                                 : MX25UM51245G_OCTA_READ_CMD;
34001700:	2d00      	cmp	r5, #0
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001702:	9308      	str	r3, [sp, #32]
                                 : MX25UM51245G_OCTA_READ_CMD;
34001704:	bf14      	ite	ne
34001706:	220c      	movne	r2, #12
34001708:	220b      	moveq	r2, #11
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400170a:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400170e:	e7bc      	b.n	3400168a <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001710:	f241 23ed 	movw	r3, #4845	@ 0x12ed
34001714:	e7db      	b.n	340016ce <MX25UM51245G_EnableSTRMemoryMappedMode+0x82>

34001716 <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
34001716:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001718:	2510      	movs	r5, #16
{
3400171a:	b099      	sub	sp, #100	@ 0x64
3400171c:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef      s_command = {0};
3400171e:	223c      	movs	r2, #60	@ 0x3c
34001720:	2100      	movs	r1, #0
34001722:	a806      	add	r0, sp, #24
34001724:	f00d f8be 	bl	3400e8a4 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001728:	462a      	mov	r2, r5
3400172a:	2100      	movs	r1, #0
3400172c:	a801      	add	r0, sp, #4
3400172e:	f00d f8b9 	bl	3400e8a4 <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001732:	2301      	movs	r3, #1
34001734:	9305      	str	r3, [sp, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34001736:	2304      	movs	r3, #4
34001738:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3400173a:	2308      	movs	r3, #8
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
3400173c:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
34001740:	f64e 6311 	movw	r3, #60945	@ 0xee11
34001744:	9307      	str	r3, [sp, #28]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34001746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400174a:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3400174e:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001750:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001754:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34001758:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
3400175c:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34001760:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
34001762:	2306      	movs	r3, #6
34001764:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
34001768:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400176c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001770:	4620      	mov	r0, r4
34001772:	a905      	add	r1, sp, #20
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
34001774:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001776:	f009 fc87 	bl	3400b088 <HAL_XSPI_Command>
3400177a:	b118      	cbz	r0, 34001784 <MX25UM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25UM51245G_ERROR;
3400177c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001780:	b019      	add	sp, #100	@ 0x64
34001782:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
34001784:	2302      	movs	r3, #2
34001786:	9305      	str	r3, [sp, #20]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001788:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
3400178c:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001790:	f241 3288 	movw	r2, #5000	@ 0x1388
34001794:	4620      	mov	r0, r4
34001796:	a905      	add	r1, sp, #20
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001798:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400179a:	f009 fc75 	bl	3400b088 <HAL_XSPI_Command>
3400179e:	2800      	cmp	r0, #0
340017a0:	d1ec      	bne.n	3400177c <MX25UM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340017a2:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
340017a4:	a901      	add	r1, sp, #4
340017a6:	4620      	mov	r0, r4
340017a8:	f009 fe9c 	bl	3400b4e4 <HAL_XSPI_MemoryMapped>
340017ac:	3800      	subs	r0, #0
340017ae:	bf18      	it	ne
340017b0:	2001      	movne	r0, #1
340017b2:	4240      	negs	r0, r0
340017b4:	e7e4      	b.n	34001780 <MX25UM51245G_EnableDTRMemoryMappedMode+0x6a>

340017b6 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340017b6:	b5f0      	push	{r4, r5, r6, r7, lr}
340017b8:	460c      	mov	r4, r1
340017ba:	b099      	sub	sp, #100	@ 0x64
  XSPI_RegularCmdTypeDef     s_command = {0};
340017bc:	2100      	movs	r1, #0
{
340017be:	4606      	mov	r6, r0
340017c0:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef     s_command = {0};
340017c2:	a805      	add	r0, sp, #20
340017c4:	224c      	movs	r2, #76	@ 0x4c
340017c6:	f00d f86d 	bl	3400e8a4 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
340017ca:	2214      	movs	r2, #20
340017cc:	2100      	movs	r1, #0
340017ce:	4668      	mov	r0, sp
340017d0:	f00d f868 	bl	3400e8a4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340017d4:	b934      	cbnz	r4, 340017e4 <MX25UM51245G_WriteEnable+0x2e>
  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340017d6:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340017d8:	429d      	cmp	r5, r3
340017da:	d104      	bne.n	340017e6 <MX25UM51245G_WriteEnable+0x30>
    return MX25UM51245G_ERROR;
340017dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340017e0:	b019      	add	sp, #100	@ 0x64
340017e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340017e4:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340017e6:	f105 3cff 	add.w	ip, r5, #4294967295	@ 0xffffffff
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340017ea:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340017ec:	f1dc 0300 	rsbs	r3, ip, #0
340017f0:	eb43 030c 	adc.w	r3, r3, ip
340017f4:	00db      	lsls	r3, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340017f6:	930a      	str	r3, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340017f8:	2c00      	cmp	r4, #0
340017fa:	d045      	beq.n	34001888 <MX25UM51245G_WriteEnable+0xd2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340017fc:	2310      	movs	r3, #16
340017fe:	9309      	str	r3, [sp, #36]	@ 0x24
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001800:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001804:	f241 3288 	movw	r2, #5000	@ 0x1388
34001808:	4630      	mov	r0, r6
3400180a:	a905      	add	r1, sp, #20
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400180c:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400180e:	f009 fc3b 	bl	3400b088 <HAL_XSPI_Command>
34001812:	4603      	mov	r3, r0
34001814:	2800      	cmp	r0, #0
34001816:	d1e1      	bne.n	340017dc <MX25UM51245G_WriteEnable+0x26>
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001818:	2c00      	cmp	r4, #0
3400181a:	d037      	beq.n	3400188c <MX25UM51245G_WriteEnable+0xd6>
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
3400181c:	2d01      	cmp	r5, #1
3400181e:	f240 5cfa 	movw	ip, #1530	@ 0x5fa
34001822:	d03d      	beq.n	340018a0 <MX25UM51245G_WriteEnable+0xea>
34001824:	4607      	mov	r7, r0
34001826:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
3400182a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
3400182e:	2004      	movs	r0, #4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001830:	2101      	movs	r1, #1
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001832:	461a      	mov	r2, r3
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001834:	940c      	str	r4, [sp, #48]	@ 0x30
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
34001836:	f44f 5440 	mov.w	r4, #12288	@ 0x3000
3400183a:	940d      	str	r4, [sp, #52]	@ 0x34
  s_command.Address        = 0U;
3400183c:	2400      	movs	r4, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
3400183e:	e9cd 3015 	strd	r3, r0, [sp, #84]	@ 0x54
34001842:	9114      	str	r1, [sp, #80]	@ 0x50
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001844:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001846:	4630      	mov	r0, r6
34001848:	f241 3288 	movw	r2, #5000	@ 0x1388
3400184c:	a905      	add	r1, sp, #20
3400184e:	f8cd c01c 	str.w	ip, [sp, #28]
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001852:	970e      	str	r7, [sp, #56]	@ 0x38
  s_command.Address        = 0U;
34001854:	940b      	str	r4, [sp, #44]	@ 0x2c
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001856:	9513      	str	r5, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001858:	f009 fc16 	bl	3400b088 <HAL_XSPI_Command>
3400185c:	2800      	cmp	r0, #0
3400185e:	d1bd      	bne.n	340017dc <MX25UM51245G_WriteEnable+0x26>
  s_config.MatchValue      = 2U;
34001860:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001862:	2210      	movs	r2, #16
  s_config.MatchMask       = 2U;
34001864:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001868:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
3400186c:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400186e:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001872:	4669      	mov	r1, sp
34001874:	f241 3288 	movw	r2, #5000	@ 0x1388
34001878:	4630      	mov	r0, r6
3400187a:	f009 fdb7 	bl	3400b3ec <HAL_XSPI_AutoPolling>
3400187e:	1b00      	subs	r0, r0, r4
34001880:	bf18      	it	ne
34001882:	2001      	movne	r0, #1
34001884:	4240      	negs	r0, r0
34001886:	e7ab      	b.n	340017e0 <MX25UM51245G_WriteEnable+0x2a>
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001888:	2306      	movs	r3, #6
3400188a:	e7bb      	b.n	34001804 <MX25UM51245G_WriteEnable+0x4e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400188c:	2d01      	cmp	r5, #1
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
3400188e:	f04f 0c05 	mov.w	ip, #5
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001892:	d012      	beq.n	340018ba <MX25UM51245G_WriteEnable+0x104>
34001894:	4623      	mov	r3, r4
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001896:	4627      	mov	r7, r4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001898:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
3400189c:	4620      	mov	r0, r4
3400189e:	e7c7      	b.n	34001830 <MX25UM51245G_WriteEnable+0x7a>
340018a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
340018a4:	f44f 6700 	mov.w	r7, #2048	@ 0x800
340018a8:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
340018ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
340018b0:	2005      	movs	r0, #5
340018b2:	2102      	movs	r1, #2
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340018b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
340018b8:	e7bc      	b.n	34001834 <MX25UM51245G_WriteEnable+0x7e>
340018ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
340018be:	f44f 6700 	mov.w	r7, #2048	@ 0x800
340018c2:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
340018c6:	4620      	mov	r0, r4
340018c8:	e7f3      	b.n	340018b2 <MX25UM51245G_WriteEnable+0xfc>

340018ca <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
340018ca:	b5f0      	push	{r4, r5, r6, r7, lr}
340018cc:	460d      	mov	r5, r1
340018ce:	b095      	sub	sp, #84	@ 0x54
340018d0:	4606      	mov	r6, r0
340018d2:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340018d4:	2100      	movs	r1, #0
340018d6:	224c      	movs	r2, #76	@ 0x4c
340018d8:	a801      	add	r0, sp, #4
{
340018da:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
340018dc:	f00c ffe2 	bl	3400e8a4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340018e0:	b935      	cbnz	r5, 340018f0 <MX25UM51245G_WriteCfg2Register+0x26>
  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340018e2:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340018e4:	429c      	cmp	r4, r3
340018e6:	d104      	bne.n	340018f2 <MX25UM51245G_WriteCfg2Register+0x28>
    return MX25UM51245G_ERROR;
340018e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340018ec:	b015      	add	sp, #84	@ 0x54
340018ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340018f0:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340018f2:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340018f4:	1e63      	subs	r3, r4, #1
340018f6:	425a      	negs	r2, r3
340018f8:	415a      	adcs	r2, r3
340018fa:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340018fc:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340018fe:	2d00      	cmp	r5, #0
34001900:	d030      	beq.n	34001964 <MX25UM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001902:	2310      	movs	r3, #16
34001904:	f247 218d 	movw	r1, #29325	@ 0x728d
34001908:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400190a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400190e:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001910:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001912:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001914:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001918:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400191a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400191c:	bf14      	ite	ne
3400191e:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
34001922:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001926:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400192a:	9103      	str	r1, [sp, #12]
  s_command.Address            = WriteAddr;
3400192c:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400192e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001930:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34001932:	d01b      	beq.n	3400196c <MX25UM51245G_WriteCfg2Register+0xa2>
34001934:	2c01      	cmp	r4, #1
34001936:	bf0c      	ite	eq
34001938:	2302      	moveq	r3, #2
3400193a:	2301      	movne	r3, #1
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400193c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001940:	4630      	mov	r0, r6
34001942:	a901      	add	r1, sp, #4
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34001944:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001946:	f009 fb9f 	bl	3400b088 <HAL_XSPI_Command>
3400194a:	2800      	cmp	r0, #0
3400194c:	d1cc      	bne.n	340018e8 <MX25UM51245G_WriteCfg2Register+0x1e>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400194e:	f241 3288 	movw	r2, #5000	@ 0x1388
34001952:	4630      	mov	r0, r6
34001954:	a91a      	add	r1, sp, #104	@ 0x68
34001956:	f009 fcaf 	bl	3400b2b8 <HAL_XSPI_Transmit>
3400195a:	3800      	subs	r0, #0
3400195c:	bf18      	it	ne
3400195e:	2001      	movne	r0, #1
34001960:	4240      	negs	r0, r0
34001962:	e7c3      	b.n	340018ec <MX25UM51245G_WriteCfg2Register+0x22>
34001964:	2172      	movs	r1, #114	@ 0x72
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001966:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400196a:	e7d0      	b.n	3400190e <MX25UM51245G_WriteCfg2Register+0x44>
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
3400196c:	2301      	movs	r3, #1
3400196e:	e7e5      	b.n	3400193c <MX25UM51245G_WriteCfg2Register+0x72>

34001970 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
34001970:	b5f0      	push	{r4, r5, r6, r7, lr}
34001972:	460d      	mov	r5, r1
34001974:	b095      	sub	sp, #84	@ 0x54
34001976:	4606      	mov	r6, r0
34001978:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400197a:	2100      	movs	r1, #0
3400197c:	224c      	movs	r2, #76	@ 0x4c
3400197e:	a801      	add	r0, sp, #4
{
34001980:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
34001982:	f00c ff8f 	bl	3400e8a4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001986:	b935      	cbnz	r5, 34001996 <MX25UM51245G_ReadCfg2Register+0x26>
  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001988:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400198a:	429c      	cmp	r4, r3
3400198c:	d104      	bne.n	34001998 <MX25UM51245G_ReadCfg2Register+0x28>
    return MX25UM51245G_ERROR;
3400198e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001992:	b015      	add	sp, #84	@ 0x54
34001994:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001996:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001998:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400199a:	1e63      	subs	r3, r4, #1
3400199c:	425a      	negs	r2, r3
3400199e:	415a      	adcs	r2, r3
340019a0:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340019a2:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340019a4:	2d00      	cmp	r5, #0
340019a6:	d034      	beq.n	34001a12 <MX25UM51245G_ReadCfg2Register+0xa2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340019a8:	2310      	movs	r3, #16
340019aa:	f247 118e 	movw	r1, #29070	@ 0x718e
340019ae:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340019b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340019b4:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
340019b6:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
340019b8:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340019ba:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340019be:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340019c0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340019c2:	bf14      	ite	ne
340019c4:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
340019c8:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
340019cc:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340019d0:	9103      	str	r1, [sp, #12]
  s_command.Address            = ReadAddr;
340019d2:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340019d4:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
340019d6:	9211      	str	r2, [sp, #68]	@ 0x44
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
340019d8:	d024      	beq.n	34001a24 <MX25UM51245G_ReadCfg2Register+0xb4>
340019da:	2c01      	cmp	r4, #1
340019dc:	d11d      	bne.n	34001a1a <MX25UM51245G_ReadCfg2Register+0xaa>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
340019de:	2305      	movs	r3, #5
340019e0:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340019e2:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340019e4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
340019e8:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340019ea:	4630      	mov	r0, r6
340019ec:	f241 3288 	movw	r2, #5000	@ 0x1388
340019f0:	a901      	add	r1, sp, #4
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340019f2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340019f4:	f009 fb48 	bl	3400b088 <HAL_XSPI_Command>
340019f8:	2800      	cmp	r0, #0
340019fa:	d1c8      	bne.n	3400198e <MX25UM51245G_ReadCfg2Register+0x1e>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340019fc:	f241 3288 	movw	r2, #5000	@ 0x1388
34001a00:	4630      	mov	r0, r6
34001a02:	991a      	ldr	r1, [sp, #104]	@ 0x68
34001a04:	f009 fc9c 	bl	3400b340 <HAL_XSPI_Receive>
34001a08:	3800      	subs	r0, #0
34001a0a:	bf18      	it	ne
34001a0c:	2001      	movne	r0, #1
34001a0e:	4240      	negs	r0, r0
34001a10:	e7bf      	b.n	34001992 <MX25UM51245G_ReadCfg2Register+0x22>
34001a12:	2171      	movs	r1, #113	@ 0x71
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001a18:	e7cc      	b.n	340019b4 <MX25UM51245G_ReadCfg2Register+0x44>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001a1a:	2304      	movs	r3, #4
34001a1c:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001a1e:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001a20:	2300      	movs	r3, #0
34001a22:	e7e1      	b.n	340019e8 <MX25UM51245G_ReadCfg2Register+0x78>
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001a24:	2c01      	cmp	r4, #1
34001a26:	d1fa      	bne.n	34001a1e <MX25UM51245G_ReadCfg2Register+0xae>
34001a28:	e7db      	b.n	340019e2 <MX25UM51245G_ReadCfg2Register+0x72>

34001a2a <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001a2a:	b570      	push	{r4, r5, r6, lr}
34001a2c:	460d      	mov	r5, r1
34001a2e:	b094      	sub	sp, #80	@ 0x50
34001a30:	4606      	mov	r6, r0
34001a32:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001a34:	2100      	movs	r1, #0
34001a36:	224c      	movs	r2, #76	@ 0x4c
34001a38:	a801      	add	r0, sp, #4
34001a3a:	f00c ff33 	bl	3400e8a4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001a3e:	b9d5      	cbnz	r5, 34001a76 <MX25UM51245G_ResetEnable+0x4c>
34001a40:	2c01      	cmp	r4, #1
34001a42:	d01c      	beq.n	34001a7e <MX25UM51245G_ResetEnable+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001a44:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001a46:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001a48:	1e63      	subs	r3, r4, #1
34001a4a:	425c      	negs	r4, r3
34001a4c:	415c      	adcs	r4, r3
34001a4e:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001a50:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001a52:	b195      	cbz	r5, 34001a7a <MX25UM51245G_ResetEnable+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001a54:	2310      	movs	r3, #16
34001a56:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
34001a58:	f246 6399 	movw	r3, #26265	@ 0x6699
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001a60:	4630      	mov	r0, r6
34001a62:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001a64:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a66:	f009 fb0f 	bl	3400b088 <HAL_XSPI_Command>
34001a6a:	3800      	subs	r0, #0
34001a6c:	bf18      	it	ne
34001a6e:	2001      	movne	r0, #1
34001a70:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001a72:	b014      	add	sp, #80	@ 0x50
34001a74:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001a76:	2304      	movs	r3, #4
34001a78:	e7e5      	b.n	34001a46 <MX25UM51245G_ResetEnable+0x1c>
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
34001a7a:	2366      	movs	r3, #102	@ 0x66
34001a7c:	e7ee      	b.n	34001a5c <MX25UM51245G_ResetEnable+0x32>
    return MX25UM51245G_ERROR;
34001a7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001a82:	e7f6      	b.n	34001a72 <MX25UM51245G_ResetEnable+0x48>

34001a84 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001a84:	b570      	push	{r4, r5, r6, lr}
34001a86:	460d      	mov	r5, r1
34001a88:	b094      	sub	sp, #80	@ 0x50
34001a8a:	4606      	mov	r6, r0
34001a8c:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001a8e:	2100      	movs	r1, #0
34001a90:	224c      	movs	r2, #76	@ 0x4c
34001a92:	a801      	add	r0, sp, #4
34001a94:	f00c ff06 	bl	3400e8a4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001a98:	b9d5      	cbnz	r5, 34001ad0 <MX25UM51245G_ResetMemory+0x4c>
34001a9a:	2c01      	cmp	r4, #1
34001a9c:	d01c      	beq.n	34001ad8 <MX25UM51245G_ResetMemory+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001a9e:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001aa0:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001aa2:	1e63      	subs	r3, r4, #1
34001aa4:	425c      	negs	r4, r3
34001aa6:	415c      	adcs	r4, r3
34001aa8:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001aaa:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001aac:	b195      	cbz	r5, 34001ad4 <MX25UM51245G_ResetMemory+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001aae:	2310      	movs	r3, #16
34001ab0:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34001ab2:	f649 1366 	movw	r3, #39270	@ 0x9966
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
34001aba:	4630      	mov	r0, r6
34001abc:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001abe:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001ac0:	f009 fae2 	bl	3400b088 <HAL_XSPI_Command>
34001ac4:	3800      	subs	r0, #0
34001ac6:	bf18      	it	ne
34001ac8:	2001      	movne	r0, #1
34001aca:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001acc:	b014      	add	sp, #80	@ 0x50
34001ace:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001ad0:	2304      	movs	r3, #4
34001ad2:	e7e5      	b.n	34001aa0 <MX25UM51245G_ResetMemory+0x1c>
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34001ad4:	2399      	movs	r3, #153	@ 0x99
34001ad6:	e7ee      	b.n	34001ab6 <MX25UM51245G_ResetMemory+0x32>
    return MX25UM51245G_ERROR;
34001ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001adc:	e7f6      	b.n	34001acc <MX25UM51245G_ResetMemory+0x48>
	...

34001ae0 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001ae0:	4b04      	ldr	r3, [pc, #16]	@ (34001af4 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001ae2:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001ae4:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001ae8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001aec:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001aee:	9b01      	ldr	r3, [sp, #4]
}
34001af0:	b002      	add	sp, #8
34001af2:	4770      	bx	lr
34001af4:	56028000 	.word	0x56028000

34001af8 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34001af8:	b570      	push	{r4, r5, r6, lr}
34001afa:	4604      	mov	r4, r0
34001afc:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
34001afe:	2002      	movs	r0, #2
34001b00:	f7ff ffee 	bl	34001ae0 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001b04:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001b06:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001b0a:	9303      	str	r3, [sp, #12]
34001b0c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001b0e:	2301      	movs	r3, #1
34001b10:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001b14:	2303      	movs	r3, #3
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001b16:	4d06      	ldr	r5, [pc, #24]	@ (34001b30 <BSP_SMPS_Init+0x38>)
34001b18:	a901      	add	r1, sp, #4
34001b1a:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001b1c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001b1e:	f001 fbef 	bl	34003300 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
34001b22:	4622      	mov	r2, r4
34001b24:	4631      	mov	r1, r6
34001b26:	4628      	mov	r0, r5
34001b28:	f001 fe02 	bl	34003730 <HAL_GPIO_WritePin>
}
34001b2c:	b006      	add	sp, #24
34001b2e:	bd70      	pop	{r4, r5, r6, pc}
34001b30:	56020400 	.word	0x56020400

34001b34 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
34001b34:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
34001b36:	4b05      	ldr	r3, [pc, #20]	@ (34001b4c <BSP_LED_On+0x18>)
34001b38:	2200      	movs	r2, #0
34001b3a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
34001b3e:	4b04      	ldr	r3, [pc, #16]	@ (34001b50 <BSP_LED_On+0x1c>)
34001b40:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
34001b44:	f001 fdf4 	bl	34003730 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
34001b48:	2000      	movs	r0, #0
34001b4a:	bd08      	pop	{r3, pc}
34001b4c:	34012428 	.word	0x34012428
34001b50:	3401241c 	.word	0x3401241c

34001b54 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
34001b54:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
34001b56:	4b05      	ldr	r3, [pc, #20]	@ (34001b6c <BSP_LED_Off+0x18>)
34001b58:	2201      	movs	r2, #1
34001b5a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
34001b5e:	4b04      	ldr	r3, [pc, #16]	@ (34001b70 <BSP_LED_Off+0x1c>)
34001b60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
34001b64:	f001 fde4 	bl	34003730 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
34001b68:	2000      	movs	r0, #0
34001b6a:	bd08      	pop	{r3, pc}
34001b6c:	34012428 	.word	0x34012428
34001b70:	3401241c 	.word	0x3401241c

34001b74 <BSP_LED_Init>:
{
34001b74:	b530      	push	{r4, r5, lr}
34001b76:	4604      	mov	r4, r0
34001b78:	b087      	sub	sp, #28
    LED1_GPIO_CLK_ENABLE();
34001b7a:	2040      	movs	r0, #64	@ 0x40
34001b7c:	f7ff ffb0 	bl	34001ae0 <LL_AHB4_GRP1_EnableClock>
  GPIO_Init.Pin   = LED_PIN[Led];
34001b80:	4b0a      	ldr	r3, [pc, #40]	@ (34001bac <BSP_LED_Init+0x38>)
  GPIO_Init.Pull  = GPIO_NOPULL;
34001b82:	2500      	movs	r5, #0
  GPIO_Init.Pin   = LED_PIN[Led];
34001b84:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
34001b88:	a901      	add	r1, sp, #4
  GPIO_Init.Pin   = LED_PIN[Led];
34001b8a:	9301      	str	r3, [sp, #4]
  GPIO_Init.Pull  = GPIO_NOPULL;
34001b8c:	2301      	movs	r3, #1
34001b8e:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001b92:	2303      	movs	r3, #3
34001b94:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
34001b96:	4b06      	ldr	r3, [pc, #24]	@ (34001bb0 <BSP_LED_Init+0x3c>)
34001b98:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
34001b9c:	f001 fbb0 	bl	34003300 <HAL_GPIO_Init>
  BSP_LED_Off(Led);
34001ba0:	4620      	mov	r0, r4
34001ba2:	f7ff ffd7 	bl	34001b54 <BSP_LED_Off>
}
34001ba6:	4628      	mov	r0, r5
34001ba8:	b007      	add	sp, #28
34001baa:	bd30      	pop	{r4, r5, pc}
34001bac:	34012428 	.word	0x34012428
34001bb0:	3401241c 	.word	0x3401241c

34001bb4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
34001bb4:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
34001bb6:	4b05      	ldr	r3, [pc, #20]	@ (34001bcc <BSP_LED_Toggle+0x18>)
34001bb8:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
34001bbc:	4b04      	ldr	r3, [pc, #16]	@ (34001bd0 <BSP_LED_Toggle+0x1c>)
34001bbe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
34001bc2:	f001 fdcf 	bl	34003764 <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
}
34001bc6:	2000      	movs	r0, #0
34001bc8:	bd08      	pop	{r3, pc}
34001bca:	bf00      	nop
34001bcc:	34012428 	.word	0x34012428
34001bd0:	3401241c 	.word	0x3401241c

34001bd4 <MX_USART1_Init>:
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
34001bd4:	4a0a      	ldr	r2, [pc, #40]	@ (34001c00 <MX_USART1_Init+0x2c>)
34001bd6:	6812      	ldr	r2, [r2, #0]
34001bd8:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
34001bda:	680a      	ldr	r2, [r1, #0]
34001bdc:	6042      	str	r2, [r0, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
34001bde:	220c      	movs	r2, #12
34001be0:	6142      	str	r2, [r0, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
34001be2:	894a      	ldrh	r2, [r1, #10]
34001be4:	6102      	str	r2, [r0, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
34001be6:	684a      	ldr	r2, [r1, #4]
34001be8:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
34001bea:	890a      	ldrh	r2, [r1, #8]
34001bec:	60c2      	str	r2, [r0, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
34001bee:	898a      	ldrh	r2, [r1, #12]
34001bf0:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
34001bf2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34001bf6:	61c2      	str	r2, [r0, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
34001bf8:	2200      	movs	r2, #0
34001bfa:	6242      	str	r2, [r0, #36]	@ 0x24
  return HAL_UART_Init(huart);
34001bfc:	f008 beec 	b.w	3400a9d8 <HAL_UART_Init>
34001c00:	34012824 	.word	0x34012824

34001c04 <BSP_COM_Init>:
{
34001c04:	b570      	push	{r4, r5, r6, lr}
34001c06:	4604      	mov	r4, r0
  if (COM_Init == NULL)
34001c08:	460d      	mov	r5, r1
{
34001c0a:	b086      	sub	sp, #24
  if (COM_Init == NULL)
34001c0c:	2900      	cmp	r1, #0
34001c0e:	d034      	beq.n	34001c7a <BSP_COM_Init+0x76>
    hcom_uart[COM].Instance = COM_UART[COM];
34001c10:	4b1d      	ldr	r3, [pc, #116]	@ (34001c88 <BSP_COM_Init+0x84>)
34001c12:	491e      	ldr	r1, [pc, #120]	@ (34001c8c <BSP_COM_Init+0x88>)
34001c14:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
34001c18:	2394      	movs	r3, #148	@ 0x94
34001c1a:	4343      	muls	r3, r0
34001c1c:	50ca      	str	r2, [r1, r3]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
34001c1e:	4b1c      	ldr	r3, [pc, #112]	@ (34001c90 <BSP_COM_Init+0x8c>)
34001c20:	429a      	cmp	r2, r3
34001c22:	d121      	bne.n	34001c68 <BSP_COM_Init+0x64>
  WRITE_REG(RCC->APB2ENSR, Periphs);
34001c24:	2210      	movs	r2, #16
  {
    COM = COM1;
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
34001c26:	2010      	movs	r0, #16
34001c28:	f7ff ff5a 	bl	34001ae0 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
34001c2c:	2008      	movs	r0, #8
34001c2e:	f7ff ff57 	bl	34001ae0 <LL_AHB4_GRP1_EnableClock>
34001c32:	4b18      	ldr	r3, [pc, #96]	@ (34001c94 <BSP_COM_Init+0x90>)
  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001c34:	2607      	movs	r6, #7
34001c36:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
34001c3a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
34001c3e:	2220      	movs	r2, #32
34001c40:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001c42:	9b00      	ldr	r3, [sp, #0]
34001c44:	2302      	movs	r3, #2
34001c46:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
34001c4a:	9304      	str	r3, [sp, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;
34001c4c:	2301      	movs	r3, #1
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34001c4e:	4812      	ldr	r0, [pc, #72]	@ (34001c98 <BSP_COM_Init+0x94>)
34001c50:	a901      	add	r1, sp, #4
  GPIO_Init.Pull      = GPIO_PULLUP;
34001c52:	9303      	str	r3, [sp, #12]
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001c54:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34001c56:	f001 fb53 	bl	34003300 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34001c5a:	2340      	movs	r3, #64	@ 0x40
  GPIO_Init.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34001c5c:	480f      	ldr	r0, [pc, #60]	@ (34001c9c <BSP_COM_Init+0x98>)
34001c5e:	a901      	add	r1, sp, #4
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34001c60:	9301      	str	r3, [sp, #4]
  GPIO_Init.Alternate = COM_RX_AF[COM];
34001c62:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34001c64:	f001 fb4c 	bl	34003300 <HAL_GPIO_Init>
      if (COM == COM1)
34001c68:	b924      	cbnz	r4, 34001c74 <BSP_COM_Init+0x70>
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
34001c6a:	4629      	mov	r1, r5
34001c6c:	4807      	ldr	r0, [pc, #28]	@ (34001c8c <BSP_COM_Init+0x88>)
34001c6e:	f7ff ffb1 	bl	34001bd4 <MX_USART1_Init>
34001c72:	b928      	cbnz	r0, 34001c80 <BSP_COM_Init+0x7c>
  int32_t status = BSP_ERROR_NONE;
34001c74:	2000      	movs	r0, #0
}
34001c76:	b006      	add	sp, #24
34001c78:	bd70      	pop	{r4, r5, r6, pc}
    status = BSP_ERROR_WRONG_PARAM;
34001c7a:	f06f 0001 	mvn.w	r0, #1
34001c7e:	e7fa      	b.n	34001c76 <BSP_COM_Init+0x72>
          status = BSP_ERROR_PERIPH_FAILURE;
34001c80:	f06f 0003 	mvn.w	r0, #3
  return status;
34001c84:	e7f7      	b.n	34001c76 <BSP_COM_Init+0x72>
34001c86:	bf00      	nop
34001c88:	34012824 	.word	0x34012824
34001c8c:	34012a38 	.word	0x34012a38
34001c90:	52001000 	.word	0x52001000
34001c94:	56028000 	.word	0x56028000
34001c98:	56021000 	.word	0x56021000
34001c9c:	56020c00 	.word	0x56020c00

34001ca0 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001ca0:	4b04      	ldr	r3, [pc, #16]	@ (34001cb4 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001ca2:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001ca4:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001ca8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001cac:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001cae:	9b01      	ldr	r3, [sp, #4]
}
34001cb0:	b002      	add	sp, #8
34001cb2:	4770      	bx	lr
34001cb4:	56028000 	.word	0x56028000

34001cb8 <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001cb8:	b530      	push	{r4, r5, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cba:	4c20      	ldr	r4, [pc, #128]	@ (34001d3c <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001cbc:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cbe:	78a2      	ldrb	r2, [r4, #2]
34001cc0:	7861      	ldrb	r1, [r4, #1]
34001cc2:	481f      	ldr	r0, [pc, #124]	@ (34001d40 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001cc4:	f7ff fd77 	bl	340017b6 <MX25UM51245G_WriteEnable>
34001cc8:	b118      	cbz	r0, 34001cd2 <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001cca:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
34001cce:	b005      	add	sp, #20
34001cd0:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cd2:	9000      	str	r0, [sp, #0]
34001cd4:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001cd8:	78a2      	ldrb	r2, [r4, #2]
34001cda:	7861      	ldrb	r1, [r4, #1]
34001cdc:	4818      	ldr	r0, [pc, #96]	@ (34001d40 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001cde:	f7ff fdf4 	bl	340018ca <MX25UM51245G_WriteCfg2Register>
34001ce2:	2800      	cmp	r0, #0
34001ce4:	d1f1      	bne.n	34001cca <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001ce6:	78a2      	ldrb	r2, [r4, #2]
34001ce8:	7861      	ldrb	r1, [r4, #1]
34001cea:	4815      	ldr	r0, [pc, #84]	@ (34001d40 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001cec:	f7ff fd63 	bl	340017b6 <MX25UM51245G_WriteEnable>
34001cf0:	4603      	mov	r3, r0
34001cf2:	2800      	cmp	r0, #0
34001cf4:	d1e9      	bne.n	34001cca <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cf6:	2501      	movs	r5, #1
34001cf8:	9500      	str	r5, [sp, #0]
34001cfa:	78a2      	ldrb	r2, [r4, #2]
34001cfc:	7861      	ldrb	r1, [r4, #1]
34001cfe:	4810      	ldr	r0, [pc, #64]	@ (34001d40 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001d00:	f7ff fde3 	bl	340018ca <MX25UM51245G_WriteCfg2Register>
34001d04:	4604      	mov	r4, r0
34001d06:	2800      	cmp	r0, #0
34001d08:	d1df      	bne.n	34001cca <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001d0a:	2028      	movs	r0, #40	@ 0x28
34001d0c:	f000 fc18 	bl	34002540 <HAL_Delay>
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001d10:	4622      	mov	r2, r4
34001d12:	4629      	mov	r1, r5
34001d14:	480a      	ldr	r0, [pc, #40]	@ (34001d40 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001d16:	f7ff fc33 	bl	34001580 <MX25UM51245G_AutoPollingMemReady>
34001d1a:	4603      	mov	r3, r0
34001d1c:	2800      	cmp	r0, #0
34001d1e:	d1d4      	bne.n	34001cca <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001d20:	aa03      	add	r2, sp, #12
34001d22:	9200      	str	r2, [sp, #0]
34001d24:	4629      	mov	r1, r5
34001d26:	4602      	mov	r2, r0
34001d28:	4805      	ldr	r0, [pc, #20]	@ (34001d40 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001d2a:	f7ff fe21 	bl	34001970 <MX25UM51245G_ReadCfg2Register>
34001d2e:	2800      	cmp	r0, #0
34001d30:	d1cb      	bne.n	34001cca <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
34001d32:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001d36:	42ab      	cmp	r3, r5
34001d38:	d0c9      	beq.n	34001cce <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
34001d3a:	e7c6      	b.n	34001cca <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
34001d3c:	34012b60 	.word	0x34012b60
34001d40:	34012b64 	.word	0x34012b64

34001d44 <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001d44:	b530      	push	{r4, r5, lr}
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d46:	4d27      	ldr	r5, [pc, #156]	@ (34001de4 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
34001d48:	4c27      	ldr	r4, [pc, #156]	@ (34001de8 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001d4a:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d4c:	4620      	mov	r0, r4
34001d4e:	78aa      	ldrb	r2, [r5, #2]
34001d50:	7869      	ldrb	r1, [r5, #1]
34001d52:	f7ff fd30 	bl	340017b6 <MX25UM51245G_WriteEnable>
34001d56:	b118      	cbz	r0, 34001d60 <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001d58:	f06f 0004 	mvn.w	r0, #4
}
34001d5c:	b005      	add	sp, #20
34001d5e:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d60:	9000      	str	r0, [sp, #0]
34001d62:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001d66:	4620      	mov	r0, r4
34001d68:	78aa      	ldrb	r2, [r5, #2]
34001d6a:	7869      	ldrb	r1, [r5, #1]
34001d6c:	f7ff fdad 	bl	340018ca <MX25UM51245G_WriteCfg2Register>
34001d70:	2800      	cmp	r0, #0
34001d72:	d1f1      	bne.n	34001d58 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d74:	4620      	mov	r0, r4
34001d76:	78aa      	ldrb	r2, [r5, #2]
34001d78:	7869      	ldrb	r1, [r5, #1]
34001d7a:	f7ff fd1c 	bl	340017b6 <MX25UM51245G_WriteEnable>
34001d7e:	4603      	mov	r3, r0
34001d80:	2800      	cmp	r0, #0
34001d82:	d1e9      	bne.n	34001d58 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d84:	2202      	movs	r2, #2
34001d86:	9200      	str	r2, [sp, #0]
34001d88:	4620      	mov	r0, r4
34001d8a:	78aa      	ldrb	r2, [r5, #2]
34001d8c:	7869      	ldrb	r1, [r5, #1]
34001d8e:	f7ff fd9c 	bl	340018ca <MX25UM51245G_WriteCfg2Register>
34001d92:	2800      	cmp	r0, #0
34001d94:	d1e0      	bne.n	34001d58 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001d96:	2028      	movs	r0, #40	@ 0x28
34001d98:	f000 fbd2 	bl	34002540 <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34001d9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001da0:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001da2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001da6:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001da8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001daa:	f009 f82f 	bl	3400ae0c <HAL_XSPI_Init>
34001dae:	b9a8      	cbnz	r0, 34001ddc <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001db0:	2201      	movs	r2, #1
34001db2:	4620      	mov	r0, r4
34001db4:	4611      	mov	r1, r2
34001db6:	f7ff fbe3 	bl	34001580 <MX25UM51245G_AutoPollingMemReady>
34001dba:	4603      	mov	r3, r0
34001dbc:	2800      	cmp	r0, #0
34001dbe:	d1cb      	bne.n	34001d58 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34001dc0:	aa03      	add	r2, sp, #12
34001dc2:	9200      	str	r2, [sp, #0]
34001dc4:	2201      	movs	r2, #1
34001dc6:	4620      	mov	r0, r4
34001dc8:	4611      	mov	r1, r2
34001dca:	f7ff fdd1 	bl	34001970 <MX25UM51245G_ReadCfg2Register>
34001dce:	2800      	cmp	r0, #0
34001dd0:	d1c2      	bne.n	34001d58 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
34001dd2:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001dd6:	2b02      	cmp	r3, #2
34001dd8:	d0c0      	beq.n	34001d5c <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34001dda:	e7bd      	b.n	34001d58 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
34001ddc:	f06f 0003 	mvn.w	r0, #3
  return ret;
34001de0:	e7bc      	b.n	34001d5c <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34001de2:	bf00      	nop
34001de4:	34012b60 	.word	0x34012b60
34001de8:	34012b64 	.word	0x34012b64

34001dec <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 4;
34001dec:	2304      	movs	r3, #4
34001dee:	4a0e      	ldr	r2, [pc, #56]	@ (34001e28 <MX_XSPI_NOR_Init+0x3c>)
34001df0:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34001df4:	680a      	ldr	r2, [r1, #0]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34001df6:	2300      	movs	r3, #0
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34001df8:	6102      	str	r2, [r0, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
34001dfa:	2202      	movs	r2, #2
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34001dfc:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34001e00:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
34001e02:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34001e06:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34001e08:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34001e0a:	6083      	str	r3, [r0, #8]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34001e0c:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34001e0e:	68ca      	ldr	r2, [r1, #12]
  hxspi->Init.ChipSelectBoundary      = 0;
34001e10:	6303      	str	r3, [r0, #48]	@ 0x30
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34001e12:	2a01      	cmp	r2, #1
34001e14:	bf12      	itee	ne
34001e16:	461a      	movne	r2, r3
34001e18:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
34001e1c:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34001e20:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001e22:	62c2      	str	r2, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
34001e24:	f008 bff2 	b.w	3400ae0c <HAL_XSPI_Init>
34001e28:	5802a000 	.word	0x5802a000

34001e2c <BSP_XSPI_NOR_EnableMemoryMappedMode>:
{
34001e2c:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001e2e:	b998      	cbnz	r0, 34001e58 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001e30:	4c0b      	ldr	r4, [pc, #44]	@ (34001e60 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>)
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001e32:	78a3      	ldrb	r3, [r4, #2]
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001e34:	7861      	ldrb	r1, [r4, #1]
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001e36:	b95b      	cbnz	r3, 34001e50 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001e38:	2201      	movs	r2, #1
34001e3a:	480a      	ldr	r0, [pc, #40]	@ (34001e64 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001e3c:	f7ff fc06 	bl	3400164c <MX25UM51245G_EnableSTRMemoryMappedMode>
34001e40:	b110      	cbz	r0, 34001e48 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001e42:	f06f 0004 	mvn.w	r0, #4
}
34001e46:	bd10      	pop	{r4, pc}
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001e48:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
34001e4a:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001e4c:	7023      	strb	r3, [r4, #0]
34001e4e:	e7fa      	b.n	34001e46 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
34001e50:	4804      	ldr	r0, [pc, #16]	@ (34001e64 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001e52:	f7ff fc60 	bl	34001716 <MX25UM51245G_EnableDTRMemoryMappedMode>
34001e56:	e7f3      	b.n	34001e40 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
34001e58:	f06f 0001 	mvn.w	r0, #1
  return ret;
34001e5c:	e7f3      	b.n	34001e46 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
34001e5e:	bf00      	nop
34001e60:	34012b60 	.word	0x34012b60
34001e64:	34012b64 	.word	0x34012b64

34001e68 <BSP_XSPI_NOR_ConfigFlash>:
{
34001e68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34001e6c:	460d      	mov	r5, r1
34001e6e:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001e70:	2800      	cmp	r0, #0
34001e72:	d15d      	bne.n	34001f30 <BSP_XSPI_NOR_ConfigFlash+0xc8>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
34001e74:	4c31      	ldr	r4, [pc, #196]	@ (34001f3c <BSP_XSPI_NOR_ConfigFlash+0xd4>)
34001e76:	7823      	ldrb	r3, [r4, #0]
34001e78:	2b02      	cmp	r3, #2
34001e7a:	d05c      	beq.n	34001f36 <BSP_XSPI_NOR_ConfigFlash+0xce>
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
34001e7c:	7863      	ldrb	r3, [r4, #1]
34001e7e:	2b01      	cmp	r3, #1
34001e80:	d14d      	bne.n	34001f1e <BSP_XSPI_NOR_ConfigFlash+0xb6>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
34001e82:	2901      	cmp	r1, #1
34001e84:	78a2      	ldrb	r2, [r4, #2]
34001e86:	d109      	bne.n	34001e9c <BSP_XSPI_NOR_ConfigFlash+0x34>
34001e88:	4296      	cmp	r6, r2
34001e8a:	d107      	bne.n	34001e9c <BSP_XSPI_NOR_ConfigFlash+0x34>
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001e8c:	2301      	movs	r3, #1
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001e8e:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001e90:	7023      	strb	r3, [r4, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
34001e92:	7065      	strb	r5, [r4, #1]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001e94:	70a6      	strb	r6, [r4, #2]
}
34001e96:	b004      	add	sp, #16
34001e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001e9c:	4f28      	ldr	r7, [pc, #160]	@ (34001f40 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001e9e:	2101      	movs	r1, #1
34001ea0:	4638      	mov	r0, r7
34001ea2:	f7ff fc88 	bl	340017b6 <MX25UM51245G_WriteEnable>
34001ea6:	4603      	mov	r3, r0
34001ea8:	b9b0      	cbnz	r0, 34001ed8 <BSP_XSPI_NOR_ConfigFlash+0x70>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001eaa:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
34001eac:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001eb0:	78a2      	ldrb	r2, [r4, #2]
34001eb2:	4638      	mov	r0, r7
34001eb4:	7861      	ldrb	r1, [r4, #1]
34001eb6:	f7ff fd08 	bl	340018ca <MX25UM51245G_WriteCfg2Register>
34001eba:	4680      	mov	r8, r0
34001ebc:	b960      	cbnz	r0, 34001ed8 <BSP_XSPI_NOR_ConfigFlash+0x70>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001ebe:	2028      	movs	r0, #40	@ 0x28
34001ec0:	f000 fb3e 	bl	34002540 <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
34001ec4:	78a3      	ldrb	r3, [r4, #2]
34001ec6:	2b01      	cmp	r3, #1
34001ec8:	d009      	beq.n	34001ede <BSP_XSPI_NOR_ConfigFlash+0x76>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001eca:	2200      	movs	r2, #0
34001ecc:	481c      	ldr	r0, [pc, #112]	@ (34001f40 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001ece:	4611      	mov	r1, r2
34001ed0:	f7ff fb56 	bl	34001580 <MX25UM51245G_AutoPollingMemReady>
34001ed4:	4603      	mov	r3, r0
34001ed6:	b170      	cbz	r0, 34001ef6 <BSP_XSPI_NOR_ConfigFlash+0x8e>
            ret = XSPI_NOR_ExitOPIMode(Instance);
34001ed8:	f06f 0004 	mvn.w	r0, #4
34001edc:	e7db      	b.n	34001e96 <BSP_XSPI_NOR_ConfigFlash+0x2e>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001ede:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34001ee0:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34001ee4:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001ee8:	f008 ff90 	bl	3400ae0c <HAL_XSPI_Init>
34001eec:	2800      	cmp	r0, #0
34001eee:	d0ec      	beq.n	34001eca <BSP_XSPI_NOR_ConfigFlash+0x62>
            ret = XSPI_NOR_ExitOPIMode(Instance);
34001ef0:	f06f 0003 	mvn.w	r0, #3
34001ef4:	e7cf      	b.n	34001e96 <BSP_XSPI_NOR_ConfigFlash+0x2e>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001ef6:	aa03      	add	r2, sp, #12
34001ef8:	4601      	mov	r1, r0
34001efa:	9200      	str	r2, [sp, #0]
34001efc:	4602      	mov	r2, r0
34001efe:	4810      	ldr	r0, [pc, #64]	@ (34001f40 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001f00:	f7ff fd36 	bl	34001970 <MX25UM51245G_ReadCfg2Register>
34001f04:	2800      	cmp	r0, #0
34001f06:	d1e7      	bne.n	34001ed8 <BSP_XSPI_NOR_ConfigFlash+0x70>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
34001f08:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001f0c:	2b00      	cmp	r3, #0
34001f0e:	d1e3      	bne.n	34001ed8 <BSP_XSPI_NOR_ConfigFlash+0x70>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34001f10:	2d01      	cmp	r5, #1
34001f12:	d1bb      	bne.n	34001e8c <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001f14:	78a3      	ldrb	r3, [r4, #2]
34001f16:	b933      	cbnz	r3, 34001f26 <BSP_XSPI_NOR_ConfigFlash+0xbe>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34001f18:	f7ff ff14 	bl	34001d44 <XSPI_NOR_EnterDOPIMode.constprop.0>
34001f1c:	e005      	b.n	34001f2a <BSP_XSPI_NOR_ConfigFlash+0xc2>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34001f1e:	2901      	cmp	r1, #1
34001f20:	d1b4      	bne.n	34001e8c <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
34001f22:	2a00      	cmp	r2, #0
34001f24:	d1f8      	bne.n	34001f18 <BSP_XSPI_NOR_ConfigFlash+0xb0>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34001f26:	f7ff fec7 	bl	34001cb8 <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
34001f2a:	2800      	cmp	r0, #0
34001f2c:	d1b3      	bne.n	34001e96 <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001f2e:	e7ad      	b.n	34001e8c <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
34001f30:	f06f 0001 	mvn.w	r0, #1
34001f34:	e7af      	b.n	34001e96 <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34001f36:	f06f 0019 	mvn.w	r0, #25
  return ret;
34001f3a:	e7ac      	b.n	34001e96 <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001f3c:	34012b60 	.word	0x34012b60
34001f40:	34012b64 	.word	0x34012b64

34001f44 <BSP_XSPI_NOR_Init>:
{
34001f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34001f48:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001f4a:	4604      	mov	r4, r0
34001f4c:	4e86      	ldr	r6, [pc, #536]	@ (34002168 <BSP_XSPI_NOR_Init+0x224>)
{
34001f4e:	b08f      	sub	sp, #60	@ 0x3c
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001f50:	2800      	cmp	r0, #0
34001f52:	f040 8102 	bne.w	3400215a <BSP_XSPI_NOR_Init+0x216>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34001f56:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 34002178 <BSP_XSPI_NOR_Init+0x234>
34001f5a:	f898 3000 	ldrb.w	r3, [r8]
34001f5e:	b153      	cbz	r3, 34001f76 <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
34001f60:	2500      	movs	r5, #0
  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34001f62:	2064      	movs	r0, #100	@ 0x64
34001f64:	2100      	movs	r1, #0
34001f66:	fb00 6004 	mla	r0, r0, r4, r6
34001f6a:	f009 fb29 	bl	3400b5c0 <HAL_XSPI_SetClockPrescaler>
}
34001f6e:	4628      	mov	r0, r5
34001f70:	b00f      	add	sp, #60	@ 0x3c
34001f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001f76:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
34001f7a:	4f7c      	ldr	r7, [pc, #496]	@ (3400216c <BSP_XSPI_NOR_Init+0x228>)
  __HAL_RCC_PWR_CLK_ENABLE();
34001f7c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34001f80:	f8c7 5a60 	str.w	r5, [r7, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001f84:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001f88:	f04f 0b03 	mov.w	fp, #3
34001f8c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001f8e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
34001f90:	f7ff fe86 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34001f94:	f002 f884 	bl	340040a0 <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34001f98:	2101      	movs	r1, #1
34001f9a:	2002      	movs	r0, #2
34001f9c:	f002 f83a 	bl	34004014 <HAL_PWREx_ConfigVddIORange>
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001fa0:	4b73      	ldr	r3, [pc, #460]	@ (34002170 <BSP_XSPI_NOR_Init+0x22c>)
  XSPI_CLK_GPIO_CLK_ENABLE();
34001fa2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001fa6:	f8c7 5a20 	str.w	r5, [r7, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001faa:	f8c3 5220 	str.w	r5, [r3, #544]	@ 0x220
34001fae:	f7ff fe77 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001fb2:	2509      	movs	r5, #9
  XSPI_DQS_GPIO_CLK_ENABLE();
34001fb4:	f7ff fe74 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001fb8:	2701      	movs	r7, #1
  XSPI_CS_GPIO_CLK_ENABLE();
34001fba:	f7ff fe71 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
34001fbe:	f7ff fe6f 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34001fc2:	f7ff fe6d 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
34001fc6:	f7ff fe6b 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34001fca:	f7ff fe69 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
34001fce:	f7ff fe67 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34001fd2:	f7ff fe65 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34001fd6:	f7ff fe63 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34001fda:	f7ff fe61 	bl	34001ca0 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
34001fde:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001fe0:	4864      	ldr	r0, [pc, #400]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34001fe2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34001fe4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001fe8:	e9cd 7b07 	strd	r7, fp, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001fec:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001fee:	f001 f987 	bl	34003300 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001ff2:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001ff4:	485f      	ldr	r0, [pc, #380]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34001ff6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001ff8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34001ffa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34001ffc:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001ffe:	f001 f97f 	bl	34003300 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34002002:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34002004:	485b      	ldr	r0, [pc, #364]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34002006:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34002008:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
3400200a:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
3400200c:	f001 f978 	bl	34003300 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34002010:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34002012:	4858      	ldr	r0, [pc, #352]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34002014:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34002016:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34002018:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
3400201a:	f001 f971 	bl	34003300 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
3400201e:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34002020:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34002024:	4853      	ldr	r0, [pc, #332]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34002026:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34002028:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
3400202a:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
3400202c:	f001 f968 	bl	34003300 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34002030:	4850      	ldr	r0, [pc, #320]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34002032:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34002034:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34002038:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
3400203a:	f001 f961 	bl	34003300 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
3400203e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34002042:	484c      	ldr	r0, [pc, #304]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34002044:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34002046:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
34002048:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
3400204a:	f001 f959 	bl	34003300 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
3400204e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34002052:	4848      	ldr	r0, [pc, #288]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34002054:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34002056:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
34002058:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
3400205a:	f001 f951 	bl	34003300 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
3400205e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34002062:	4844      	ldr	r0, [pc, #272]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34002064:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34002066:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
34002068:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
3400206a:	f001 f949 	bl	34003300 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
3400206e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34002072:	4840      	ldr	r0, [pc, #256]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34002074:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34002076:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
34002078:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
3400207a:	f001 f941 	bl	34003300 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
3400207e:	483d      	ldr	r0, [pc, #244]	@ (34002174 <BSP_XSPI_NOR_Init+0x230>)
34002080:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
34002082:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
34002084:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34002086:	f001 f93b 	bl	34003300 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
3400208a:	4622      	mov	r2, r4
3400208c:	210f      	movs	r1, #15
3400208e:	20aa      	movs	r0, #170	@ 0xaa
34002090:	f000 fb9c 	bl	340027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
34002094:	20aa      	movs	r0, #170	@ 0xaa
34002096:	f000 fbf7 	bl	34002888 <HAL_NVIC_EnableIRQ>
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
3400209a:	a805      	add	r0, sp, #20
3400209c:	f7ff fa57 	bl	3400154e <MX25UM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
340020a0:	9b05      	ldr	r3, [sp, #20]
340020a2:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
340020a6:	2b00      	cmp	r3, #0
340020a8:	fab3 f283 	clz	r2, r3
340020ac:	bf08      	it	eq
340020ae:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
340020b0:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
340020b4:	4630      	mov	r0, r6
340020b6:	a901      	add	r1, sp, #4
      xspi_init.ClockPrescaler = 3;
340020b8:	f8cd b008 	str.w	fp, [sp, #8]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
340020bc:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
340020be:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
340020c0:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
340020c2:	f7ff fe93 	bl	34001dec <MX_XSPI_NOR_Init>
340020c6:	2800      	cmp	r0, #0
340020c8:	d14a      	bne.n	34002160 <BSP_XSPI_NOR_Init+0x21c>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340020ca:	4622      	mov	r2, r4
340020cc:	4621      	mov	r1, r4
340020ce:	4630      	mov	r0, r6
340020d0:	f7ff fcab 	bl	34001a2a <MX25UM51245G_ResetEnable>
340020d4:	b110      	cbz	r0, 340020dc <BSP_XSPI_NOR_Init+0x198>
        ret = BSP_ERROR_COMPONENT_FAILURE;
340020d6:	f06f 0504 	mvn.w	r5, #4
340020da:	e742      	b.n	34001f62 <BSP_XSPI_NOR_Init+0x1e>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340020dc:	4622      	mov	r2, r4
340020de:	4621      	mov	r1, r4
340020e0:	4630      	mov	r0, r6
340020e2:	f7ff fccf 	bl	34001a84 <MX25UM51245G_ResetMemory>
340020e6:	2800      	cmp	r0, #0
340020e8:	d1f5      	bne.n	340020d6 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340020ea:	4622      	mov	r2, r4
340020ec:	4639      	mov	r1, r7
340020ee:	4630      	mov	r0, r6
340020f0:	f7ff fc9b 	bl	34001a2a <MX25UM51245G_ResetEnable>
340020f4:	2800      	cmp	r0, #0
340020f6:	d1ee      	bne.n	340020d6 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340020f8:	4622      	mov	r2, r4
340020fa:	4639      	mov	r1, r7
340020fc:	4630      	mov	r0, r6
340020fe:	f7ff fcc1 	bl	34001a84 <MX25UM51245G_ResetMemory>
34002102:	2800      	cmp	r0, #0
34002104:	d1e7      	bne.n	340020d6 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002106:	463a      	mov	r2, r7
34002108:	4639      	mov	r1, r7
3400210a:	4630      	mov	r0, r6
3400210c:	f7ff fc8d 	bl	34001a2a <MX25UM51245G_ResetEnable>
34002110:	2800      	cmp	r0, #0
34002112:	d1e0      	bne.n	340020d6 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002114:	463a      	mov	r2, r7
34002116:	4639      	mov	r1, r7
34002118:	4630      	mov	r0, r6
3400211a:	f7ff fcb3 	bl	34001a84 <MX25UM51245G_ResetMemory>
3400211e:	2800      	cmp	r0, #0
34002120:	d1d9      	bne.n	340020d6 <BSP_XSPI_NOR_Init+0x192>
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34002122:	2064      	movs	r0, #100	@ 0x64
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34002124:	f888 7000 	strb.w	r7, [r8]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
34002128:	f888 4001 	strb.w	r4, [r8, #1]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
3400212c:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34002130:	f000 fa06 	bl	34002540 <HAL_Delay>
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002134:	4630      	mov	r0, r6
34002136:	f898 2002 	ldrb.w	r2, [r8, #2]
3400213a:	f898 1001 	ldrb.w	r1, [r8, #1]
3400213e:	f7ff fa1f 	bl	34001580 <MX25UM51245G_AutoPollingMemReady>
34002142:	2800      	cmp	r0, #0
34002144:	d1c7      	bne.n	340020d6 <BSP_XSPI_NOR_Init+0x192>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
34002146:	f899 2001 	ldrb.w	r2, [r9, #1]
3400214a:	f899 1000 	ldrb.w	r1, [r9]
3400214e:	f7ff fe8b 	bl	34001e68 <BSP_XSPI_NOR_ConfigFlash>
34002152:	2800      	cmp	r0, #0
34002154:	f43f af04 	beq.w	34001f60 <BSP_XSPI_NOR_Init+0x1c>
34002158:	e7bd      	b.n	340020d6 <BSP_XSPI_NOR_Init+0x192>
    ret = BSP_ERROR_WRONG_PARAM;
3400215a:	f06f 0501 	mvn.w	r5, #1
3400215e:	e700      	b.n	34001f62 <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
34002160:	f06f 0503 	mvn.w	r5, #3
34002164:	e6fd      	b.n	34001f62 <BSP_XSPI_NOR_Init+0x1e>
34002166:	bf00      	nop
34002168:	34012b64 	.word	0x34012b64
3400216c:	56028000 	.word	0x56028000
34002170:	56029000 	.word	0x56029000
34002174:	56023400 	.word	0x56023400
34002178:	34012b60 	.word	0x34012b60

3400217c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
3400217c:	4b44      	ldr	r3, [pc, #272]	@ (34002290 <SystemInit+0x114>)
3400217e:	4a45      	ldr	r2, [pc, #276]	@ (34002294 <SystemInit+0x118>)
{
34002180:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34002182:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
34002184:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
34002186:	2502      	movs	r5, #2
  SAU->RNR = 0;
34002188:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400218a:	4943      	ldr	r1, [pc, #268]	@ (34002298 <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
3400218c:	4e43      	ldr	r6, [pc, #268]	@ (3400229c <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3400218e:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34002192:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34002196:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
3400219a:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
3400219e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
340021a2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340021a6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
340021aa:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
340021ae:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340021b2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
340021b6:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
340021ba:	2503      	movs	r5, #3
  SAU->RBAR = 0;
340021bc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340021c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
340021c4:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
340021c8:	2504      	movs	r5, #4
  SAU->RBAR = 0;
340021ca:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340021ce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
340021d2:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
340021d6:	2505      	movs	r5, #5
  SAU->RBAR = 0;
340021d8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340021dc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
340021e0:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
340021e4:	2506      	movs	r5, #6
  SAU->RBAR = 0;
340021e6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340021ea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
340021ee:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
340021f2:	2507      	movs	r5, #7
  SAU->RBAR = 0;
340021f4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340021f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
340021fc:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34002200:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002204:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34002208:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
3400220c:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
34002210:	689a      	ldr	r2, [r3, #8]
34002212:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34002214:	4a22      	ldr	r2, [pc, #136]	@ (340022a0 <SystemInit+0x124>)
34002216:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34002218:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
3400221c:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
3400221e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34002220:	f045 0510 	orr.w	r5, r5, #16
34002224:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34002226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34002228:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
3400222c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34002230:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34002234:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34002238:	f042 0210 	orr.w	r2, r2, #16
3400223c:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34002240:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34002244:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34002248:	f022 0210 	bic.w	r2, r2, #16
3400224c:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34002250:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34002254:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34002258:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3400225c:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
3400225e:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34002262:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34002266:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3400226a:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3400226e:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34002270:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34002274:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
34002278:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
3400227c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34002280:	4a08      	ldr	r2, [pc, #32]	@ (340022a4 <SystemInit+0x128>)
34002282:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
34002286:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3400228a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
3400228e:	bd70      	pop	{r4, r5, r6, pc}
34002290:	e000ed00 	.word	0xe000ed00
34002294:	34000400 	.word	0x34000400
34002298:	56028000 	.word	0x56028000
3400229c:	56008000 	.word	0x56008000
340022a0:	56024800 	.word	0x56024800
340022a4:	e002ed00 	.word	0xe002ed00

340022a8 <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340022a8:	4b6e      	ldr	r3, [pc, #440]	@ (34002464 <SystemCoreClockUpdate+0x1bc>)
{
340022aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340022ac:	6a1a      	ldr	r2, [r3, #32]
340022ae:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
340022b2:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
340022b6:	f000 80b8 	beq.w	3400242a <SystemCoreClockUpdate+0x182>
340022ba:	d806      	bhi.n	340022ca <SystemCoreClockUpdate+0x22>
340022bc:	b962      	cbnz	r2, 340022d8 <SystemCoreClockUpdate+0x30>
  {
  case 0:  /* HSI used as system clock source (default after reset) */
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340022be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340022c0:	4b69      	ldr	r3, [pc, #420]	@ (34002468 <SystemCoreClockUpdate+0x1c0>)
340022c2:	f3c2 12c1 	ubfx	r2, r2, #7, #2
340022c6:	40d3      	lsrs	r3, r2
    break;
340022c8:	e003      	b.n	340022d2 <SystemCoreClockUpdate+0x2a>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340022ca:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
340022ce:	d00b      	beq.n	340022e8 <SystemCoreClockUpdate+0x40>
  uint32_t sysclk = 0;
340022d0:	2300      	movs	r3, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
340022d2:	4a66      	ldr	r2, [pc, #408]	@ (3400246c <SystemCoreClockUpdate+0x1c4>)
340022d4:	6013      	str	r3, [r2, #0]
}
340022d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
340022da:	4a65      	ldr	r2, [pc, #404]	@ (34002470 <SystemCoreClockUpdate+0x1c8>)
340022dc:	f413 7f00 	tst.w	r3, #512	@ 0x200
340022e0:	4b64      	ldr	r3, [pc, #400]	@ (34002474 <SystemCoreClockUpdate+0x1cc>)
340022e2:	bf08      	it	eq
340022e4:	4613      	moveq	r3, r2
340022e6:	e7f4      	b.n	340022d2 <SystemCoreClockUpdate+0x2a>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
340022e8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
340022ec:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
340022f0:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
340022f4:	d02a      	beq.n	3400234c <SystemCoreClockUpdate+0xa4>
340022f6:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
340022fa:	d036      	beq.n	3400236a <SystemCoreClockUpdate+0xc2>
340022fc:	2a00      	cmp	r2, #0
340022fe:	d143      	bne.n	34002388 <SystemCoreClockUpdate+0xe0>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34002300:	f8d3 7080 	ldr.w	r7, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
34002304:	013d      	lsls	r5, r7, #4
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34002306:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400230a:	f100 8096 	bmi.w	3400243a <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400230e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34002312:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34002316:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400231a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400231e:	460e      	mov	r6, r1
    switch (pllsource)
34002320:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34002324:	f3c2 65c2 	ubfx	r5, r2, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34002328:	f3c7 5105 	ubfx	r1, r7, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
3400232c:	f3c2 6202 	ubfx	r2, r2, #24, #3
    switch (pllsource)
34002330:	d04f      	beq.n	340023d2 <SystemCoreClockUpdate+0x12a>
34002332:	d87c      	bhi.n	3400242e <SystemCoreClockUpdate+0x186>
34002334:	2e00      	cmp	r6, #0
34002336:	d03c      	beq.n	340023b2 <SystemCoreClockUpdate+0x10a>
34002338:	2600      	movs	r6, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400233a:	4b4a      	ldr	r3, [pc, #296]	@ (34002464 <SystemCoreClockUpdate+0x1bc>)
        sysclk = MSI_VALUE;
3400233c:	4f4c      	ldr	r7, [pc, #304]	@ (34002470 <SystemCoreClockUpdate+0x1c8>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        sysclk = MSI_VALUE;
34002340:	f413 7f00 	tst.w	r3, #512	@ 0x200
34002344:	4b4b      	ldr	r3, [pc, #300]	@ (34002474 <SystemCoreClockUpdate+0x1cc>)
34002346:	bf08      	it	eq
34002348:	463b      	moveq	r3, r7
3400234a:	e038      	b.n	340023be <SystemCoreClockUpdate+0x116>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
3400234c:	f8d3 7090 	ldr.w	r7, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
34002350:	013c      	lsls	r4, r7, #4
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34002352:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002356:	d470      	bmi.n	3400243a <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34002358:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
3400235c:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34002360:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34002364:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34002368:	e7d9      	b.n	3400231e <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
3400236a:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
3400236e:	0138      	lsls	r0, r7, #4
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
34002370:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002374:	d461      	bmi.n	3400243a <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34002376:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
3400237a:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
3400237e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34002382:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34002386:	e7ca      	b.n	3400231e <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34002388:	f8d3 70b0 	ldr.w	r7, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
3400238c:	013a      	lsls	r2, r7, #4
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400238e:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002392:	d452      	bmi.n	3400243a <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34002394:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34002398:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
3400239c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
340023a0:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
340023a4:	e7bb      	b.n	3400231e <SystemCoreClockUpdate+0x76>
    switch (pllsource)
340023a6:	460a      	mov	r2, r1
340023a8:	460d      	mov	r5, r1
340023aa:	4608      	mov	r0, r1
340023ac:	460c      	mov	r4, r1
340023ae:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340023b2:	4b2c      	ldr	r3, [pc, #176]	@ (34002464 <SystemCoreClockUpdate+0x1bc>)
340023b4:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
340023b6:	4b2c      	ldr	r3, [pc, #176]	@ (34002468 <SystemCoreClockUpdate+0x1c0>)
340023b8:	f3c7 17c1 	ubfx	r7, r7, #7, #2
340023bc:	40fb      	lsrs	r3, r7
    if (pllbypass == 0U)
340023be:	b14e      	cbz	r6, 340023d4 <SystemCoreClockUpdate+0x12c>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
340023c0:	4a28      	ldr	r2, [pc, #160]	@ (34002464 <SystemCoreClockUpdate+0x1bc>)
340023c2:	f8d2 20c4 	ldr.w	r2, [r2, #196]	@ 0xc4
340023c6:	f3c2 4207 	ubfx	r2, r2, #16, #8
340023ca:	3201      	adds	r2, #1
    sysclk = sysclk / ic_divider;
340023cc:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
340023d0:	e77f      	b.n	340022d2 <SystemCoreClockUpdate+0x2a>
      sysclk = HSE_VALUE;
340023d2:	4b29      	ldr	r3, [pc, #164]	@ (34002478 <SystemCoreClockUpdate+0x1d0>)
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
340023d4:	ee07 0a10 	vmov	s14, r0
340023d8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
340023dc:	ee07 4a10 	vmov	s14, r4
340023e0:	ee07 3a90 	vmov	s15, r3
340023e4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 3400247c <SystemCoreClockUpdate+0x1d4>
340023e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
340023ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340023f0:	eea6 7a26 	vfma.f32	s14, s12, s13
340023f4:	ee67 7a87 	vmul.f32	s15, s15, s14
340023f8:	ee07 1a10 	vmov	s14, r1
340023fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34002400:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34002404:	ee07 5a90 	vmov	s15, r5
34002408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3400240c:	ee07 2a90 	vmov	s15, r2
34002410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34002414:	ee27 7a27 	vmul.f32	s14, s14, s15
34002418:	eec6 7a87 	vdiv.f32	s15, s13, s14
3400241c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34002420:	ee17 3a90 	vmov	r3, s15
34002424:	e7cc      	b.n	340023c0 <SystemCoreClockUpdate+0x118>
      sysclk = HSE_VALUE;
34002426:	4b14      	ldr	r3, [pc, #80]	@ (34002478 <SystemCoreClockUpdate+0x1d0>)
34002428:	e7ca      	b.n	340023c0 <SystemCoreClockUpdate+0x118>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400242a:	4b13      	ldr	r3, [pc, #76]	@ (34002478 <SystemCoreClockUpdate+0x1d0>)
3400242c:	e751      	b.n	340022d2 <SystemCoreClockUpdate+0x2a>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3400242e:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34002432:	4b13      	ldr	r3, [pc, #76]	@ (34002480 <SystemCoreClockUpdate+0x1d8>)
34002434:	bf18      	it	ne
34002436:	2300      	movne	r3, #0
34002438:	e7cc      	b.n	340023d4 <SystemCoreClockUpdate+0x12c>
    switch (pllsource)
3400243a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3400243e:	d0f2      	beq.n	34002426 <SystemCoreClockUpdate+0x17e>
34002440:	d809      	bhi.n	34002456 <SystemCoreClockUpdate+0x1ae>
34002442:	2900      	cmp	r1, #0
34002444:	d0af      	beq.n	340023a6 <SystemCoreClockUpdate+0xfe>
34002446:	2200      	movs	r2, #0
34002448:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
3400244c:	4615      	mov	r5, r2
3400244e:	4610      	mov	r0, r2
34002450:	4614      	mov	r4, r2
34002452:	4611      	mov	r1, r2
34002454:	e771      	b.n	3400233a <SystemCoreClockUpdate+0x92>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34002456:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
3400245a:	4b09      	ldr	r3, [pc, #36]	@ (34002480 <SystemCoreClockUpdate+0x1d8>)
3400245c:	bf18      	it	ne
3400245e:	2300      	movne	r3, #0
34002460:	e7ae      	b.n	340023c0 <SystemCoreClockUpdate+0x118>
34002462:	bf00      	nop
34002464:	56028000 	.word	0x56028000
34002468:	03d09000 	.word	0x03d09000
3400246c:	3401282c 	.word	0x3401282c
34002470:	003d0900 	.word	0x003d0900
34002474:	00f42400 	.word	0x00f42400
34002478:	02dc6c00 	.word	0x02dc6c00
3400247c:	33800000 	.word	0x33800000
34002480:	00bb8000 	.word	0x00bb8000

34002484 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34002484:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34002488:	b500      	push	{lr}
  SystemCoreClockUpdate();
3400248a:	f7ff ff0d 	bl	340022a8 <SystemCoreClockUpdate>

  return SystemCoreClock;
}
3400248e:	4b05      	ldr	r3, [pc, #20]	@ (340024a4 <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
34002490:	f85d eb04 	ldr.w	lr, [sp], #4
34002494:	6818      	ldr	r0, [r3, #0]
34002496:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
3400249a:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
3400249e:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
340024a2:	4774      	bxns	lr
340024a4:	3401282c 	.word	0x3401282c

340024a8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
340024a8:	4770      	bx	lr
	...

340024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
340024ac:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
340024ae:	4b0f      	ldr	r3, [pc, #60]	@ (340024ec <HAL_InitTick+0x40>)
{
340024b0:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq == 0UL)
340024b2:	781a      	ldrb	r2, [r3, #0]
340024b4:	b90a      	cbnz	r2, 340024ba <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
340024b6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
340024b8:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
340024ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
340024be:	fbb3 f3f2 	udiv	r3, r3, r2
340024c2:	4a0b      	ldr	r2, [pc, #44]	@ (340024f0 <HAL_InitTick+0x44>)
340024c4:	6810      	ldr	r0, [r2, #0]
340024c6:	fbb0 f0f3 	udiv	r0, r0, r3
340024ca:	f000 f9f1 	bl	340028b0 <HAL_SYSTICK_Config>
340024ce:	4604      	mov	r4, r0
340024d0:	2800      	cmp	r0, #0
340024d2:	d1f0      	bne.n	340024b6 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
340024d4:	2d0f      	cmp	r5, #15
340024d6:	d8ee      	bhi.n	340024b6 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
340024d8:	4602      	mov	r2, r0
340024da:	4629      	mov	r1, r5
340024dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340024e0:	f000 f974 	bl	340027cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
340024e4:	4b03      	ldr	r3, [pc, #12]	@ (340024f4 <HAL_InitTick+0x48>)
340024e6:	4620      	mov	r0, r4
340024e8:	601d      	str	r5, [r3, #0]
  return HAL_OK;
340024ea:	e7e5      	b.n	340024b8 <HAL_InitTick+0xc>
340024ec:	34012830 	.word	0x34012830
340024f0:	3401282c 	.word	0x3401282c
340024f4:	34012834 	.word	0x34012834

340024f8 <HAL_Init>:
{
340024f8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
340024fa:	2003      	movs	r0, #3
340024fc:	f000 f948 	bl	34002790 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
34002500:	f7ff fed2 	bl	340022a8 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34002504:	200f      	movs	r0, #15
34002506:	f7ff ffd1 	bl	340024ac <HAL_InitTick>
3400250a:	4604      	mov	r4, r0
3400250c:	b918      	cbnz	r0, 34002516 <HAL_Init+0x1e>
  HAL_MspInit();
3400250e:	f7ff ffcb 	bl	340024a8 <HAL_MspInit>
}
34002512:	4620      	mov	r0, r4
34002514:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
34002516:	2401      	movs	r4, #1
34002518:	e7fb      	b.n	34002512 <HAL_Init+0x1a>
	...

3400251c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
3400251c:	4a03      	ldr	r2, [pc, #12]	@ (3400252c <HAL_IncTick+0x10>)
3400251e:	4b04      	ldr	r3, [pc, #16]	@ (34002530 <HAL_IncTick+0x14>)
34002520:	6811      	ldr	r1, [r2, #0]
34002522:	781b      	ldrb	r3, [r3, #0]
34002524:	440b      	add	r3, r1
34002526:	6013      	str	r3, [r2, #0]
}
34002528:	4770      	bx	lr
3400252a:	bf00      	nop
3400252c:	34012bc8 	.word	0x34012bc8
34002530:	34012830 	.word	0x34012830

34002534 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
34002534:	4b01      	ldr	r3, [pc, #4]	@ (3400253c <HAL_GetTick+0x8>)
34002536:	6818      	ldr	r0, [r3, #0]
}
34002538:	4770      	bx	lr
3400253a:	bf00      	nop
3400253c:	34012bc8 	.word	0x34012bc8

34002540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34002540:	b538      	push	{r3, r4, r5, lr}
34002542:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
34002544:	f7ff fff6 	bl	34002534 <HAL_GetTick>
34002548:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
3400254a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
3400254c:	bf1e      	ittt	ne
3400254e:	4b04      	ldrne	r3, [pc, #16]	@ (34002560 <HAL_Delay+0x20>)
34002550:	781b      	ldrbne	r3, [r3, #0]
34002552:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
34002554:	f7ff ffee 	bl	34002534 <HAL_GetTick>
34002558:	1b43      	subs	r3, r0, r5
3400255a:	42a3      	cmp	r3, r4
3400255c:	d3fa      	bcc.n	34002554 <HAL_Delay+0x14>
  {
  }
}
3400255e:	bd38      	pop	{r3, r4, r5, pc}
34002560:	34012830 	.word	0x34012830

34002564 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34002564:	b570      	push	{r4, r5, r6, lr}
34002566:	4604      	mov	r4, r0
34002568:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
3400256a:	f7ff ffe3 	bl	34002534 <HAL_GetTick>
3400256e:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
34002570:	b12c      	cbz	r4, 3400257e <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34002572:	6822      	ldr	r2, [r4, #0]
34002574:	4b1b      	ldr	r3, [pc, #108]	@ (340025e4 <HAL_BSEC_OTP_Reload+0x80>)
34002576:	429a      	cmp	r2, r3
34002578:	d003      	beq.n	34002582 <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400257a:	2301      	movs	r3, #1
3400257c:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400257e:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
34002580:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
34002582:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
34002586:	d2f8      	bcs.n	3400257a <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
34002588:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400258a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
3400258e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34002592:	2301      	movs	r3, #1
34002594:	f005 001f 	and.w	r0, r5, #31
34002598:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400259a:	420b      	tst	r3, r1
3400259c:	d11f      	bne.n	340025de <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
3400259e:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
340025a2:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
340025a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
340025aa:	432b      	orrs	r3, r5
340025ac:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
340025b0:	6823      	ldr	r3, [r4, #0]
340025b2:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
340025b6:	07d2      	lsls	r2, r2, #31
340025b8:	d409      	bmi.n	340025ce <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
340025ba:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
340025be:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
340025c2:	d0dd      	beq.n	34002580 <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
340025c4:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340025c8:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
340025cc:	e7d6      	b.n	3400257c <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
340025ce:	f7ff ffb1 	bl	34002534 <HAL_GetTick>
340025d2:	1b80      	subs	r0, r0, r6
340025d4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
340025d8:	d9ea      	bls.n	340025b0 <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
340025da:	230a      	movs	r3, #10
340025dc:	e7ce      	b.n	3400257c <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
340025de:	2304      	movs	r3, #4
340025e0:	e7cc      	b.n	3400257c <HAL_BSEC_OTP_Reload+0x18>
340025e2:	bf00      	nop
340025e4:	56009000 	.word	0x56009000

340025e8 <HAL_BSEC_OTP_Read>:
{
340025e8:	b570      	push	{r4, r5, r6, lr}
340025ea:	460e      	mov	r6, r1
340025ec:	4615      	mov	r5, r2
  if (hbsec == NULL)
340025ee:	4604      	mov	r4, r0
340025f0:	b130      	cbz	r0, 34002600 <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
340025f2:	b11a      	cbz	r2, 340025fc <HAL_BSEC_OTP_Read+0x14>
340025f4:	6802      	ldr	r2, [r0, #0]
340025f6:	4b09      	ldr	r3, [pc, #36]	@ (3400261c <HAL_BSEC_OTP_Read+0x34>)
340025f8:	429a      	cmp	r2, r3
340025fa:	d003      	beq.n	34002604 <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340025fc:	2301      	movs	r3, #1
340025fe:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
34002600:	2001      	movs	r0, #1
}
34002602:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
34002604:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
34002608:	d2f8      	bcs.n	340025fc <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
3400260a:	f7ff ffab 	bl	34002564 <HAL_BSEC_OTP_Reload>
3400260e:	2800      	cmp	r0, #0
34002610:	d1f6      	bne.n	34002600 <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
34002612:	6823      	ldr	r3, [r4, #0]
34002614:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
34002618:	602b      	str	r3, [r5, #0]
  return HAL_OK;
3400261a:	e7f2      	b.n	34002602 <HAL_BSEC_OTP_Read+0x1a>
3400261c:	56009000 	.word	0x56009000

34002620 <HAL_BSEC_OTP_Program>:
{
34002620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
34002624:	4604      	mov	r4, r0
34002626:	460e      	mov	r6, r1
34002628:	4617      	mov	r7, r2
3400262a:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
3400262c:	f7ff ff82 	bl	34002534 <HAL_GetTick>
34002630:	4680      	mov	r8, r0
  if (hbsec == NULL)
34002632:	b12c      	cbz	r4, 34002640 <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
34002634:	6822      	ldr	r2, [r4, #0]
34002636:	4b28      	ldr	r3, [pc, #160]	@ (340026d8 <HAL_BSEC_OTP_Program+0xb8>)
34002638:	429a      	cmp	r2, r3
3400263a:	d005      	beq.n	34002648 <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400263c:	2301      	movs	r3, #1
3400263e:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
34002640:	2001      	movs	r0, #1
}
34002642:	b003      	add	sp, #12
34002644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
34002648:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
3400264c:	d004      	beq.n	34002658 <HAL_BSEC_OTP_Program+0x38>
3400264e:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
34002652:	4822      	ldr	r0, [pc, #136]	@ (340026dc <HAL_BSEC_OTP_Program+0xbc>)
34002654:	f7fe fef8 	bl	34001448 <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
34002658:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
3400265c:	d2ee      	bcs.n	3400263c <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400265e:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
34002660:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34002662:	f503 7300 	add.w	r3, r3, #512	@ 0x200
34002666:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400266a:	2301      	movs	r3, #1
3400266c:	f006 001f 	and.w	r0, r6, #31
34002670:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34002672:	420b      	tst	r3, r1
34002674:	d12e      	bne.n	340026d4 <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
34002676:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
3400267a:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
3400267e:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
34002682:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
34002686:	4335      	orrs	r5, r6
34002688:	ea45 0509 	orr.w	r5, r5, r9
3400268c:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
34002690:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34002694:	6823      	ldr	r3, [r4, #0]
34002696:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400269a:	07d2      	lsls	r2, r2, #31
3400269c:	d406      	bmi.n	340026ac <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
3400269e:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340026a2:	03db      	lsls	r3, r3, #15
340026a4:	d50b      	bpl.n	340026be <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
340026a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340026aa:	e7c8      	b.n	3400263e <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
340026ac:	f7ff ff42 	bl	34002534 <HAL_GetTick>
340026b0:	eba0 0008 	sub.w	r0, r0, r8
340026b4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
340026b8:	d9ec      	bls.n	34002694 <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
340026ba:	230a      	movs	r3, #10
340026bc:	e7bf      	b.n	3400263e <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
340026be:	4631      	mov	r1, r6
340026c0:	4620      	mov	r0, r4
340026c2:	aa01      	add	r2, sp, #4
340026c4:	f7ff ff90 	bl	340025e8 <HAL_BSEC_OTP_Read>
340026c8:	2800      	cmp	r0, #0
340026ca:	d1b9      	bne.n	34002640 <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
340026cc:	9b01      	ldr	r3, [sp, #4]
340026ce:	42bb      	cmp	r3, r7
340026d0:	d1e9      	bne.n	340026a6 <HAL_BSEC_OTP_Program+0x86>
340026d2:	e7b6      	b.n	34002642 <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
340026d4:	2304      	movs	r3, #4
340026d6:	e7b2      	b.n	3400263e <HAL_BSEC_OTP_Program+0x1e>
340026d8:	56009000 	.word	0x56009000
340026dc:	340107b3 	.word	0x340107b3

340026e0 <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
340026e0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
340026e2:	4604      	mov	r4, r0
340026e4:	b350      	cbz	r0, 3400273c <HAL_CACHEAXI_Enable+0x5c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
340026e6:	6803      	ldr	r3, [r0, #0]
340026e8:	4a15      	ldr	r2, [pc, #84]	@ (34002740 <HAL_CACHEAXI_Enable+0x60>)
340026ea:	4293      	cmp	r3, r2
340026ec:	d008      	beq.n	34002700 <HAL_CACHEAXI_Enable+0x20>
340026ee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340026f2:	4293      	cmp	r3, r2
340026f4:	d004      	beq.n	34002700 <HAL_CACHEAXI_Enable+0x20>
340026f6:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
340026fa:	4812      	ldr	r0, [pc, #72]	@ (34002744 <HAL_CACHEAXI_Enable+0x64>)
340026fc:	f7fe fea4 	bl	34001448 <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34002700:	6823      	ldr	r3, [r4, #0]
34002702:	685b      	ldr	r3, [r3, #4]
34002704:	07d9      	lsls	r1, r3, #31
34002706:	d407      	bmi.n	34002718 <HAL_CACHEAXI_Enable+0x38>
  }

  if (status == HAL_OK)
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002708:	2000      	movs	r0, #0
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
3400270a:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400270c:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
3400270e:	6813      	ldr	r3, [r2, #0]
34002710:	f043 0301 	orr.w	r3, r3, #1
34002714:	6013      	str	r3, [r2, #0]
  }

  return status;
}
34002716:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
34002718:	f7ff ff0c 	bl	34002534 <HAL_GetTick>
3400271c:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
3400271e:	6823      	ldr	r3, [r4, #0]
34002720:	685b      	ldr	r3, [r3, #4]
34002722:	07db      	lsls	r3, r3, #31
34002724:	d5f0      	bpl.n	34002708 <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
34002726:	f7ff ff05 	bl	34002534 <HAL_GetTick>
3400272a:	1b40      	subs	r0, r0, r5
3400272c:	2801      	cmp	r0, #1
3400272e:	d9f6      	bls.n	3400271e <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
34002730:	6823      	ldr	r3, [r4, #0]
34002732:	685b      	ldr	r3, [r3, #4]
34002734:	07da      	lsls	r2, r3, #31
34002736:	d4f2      	bmi.n	3400271e <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
34002738:	2310      	movs	r3, #16
3400273a:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
3400273c:	2001      	movs	r0, #1
3400273e:	e7ea      	b.n	34002716 <HAL_CACHEAXI_Enable+0x36>
34002740:	580dfc00 	.word	0x580dfc00
34002744:	3401085c 	.word	0x3401085c

34002748 <HAL_CACHEAXI_Init>:
{
34002748:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
3400274a:	4604      	mov	r4, r0
3400274c:	b1c8      	cbz	r0, 34002782 <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400274e:	6803      	ldr	r3, [r0, #0]
34002750:	4a0d      	ldr	r2, [pc, #52]	@ (34002788 <HAL_CACHEAXI_Init+0x40>)
34002752:	4293      	cmp	r3, r2
34002754:	d007      	beq.n	34002766 <HAL_CACHEAXI_Init+0x1e>
34002756:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400275a:	4293      	cmp	r3, r2
3400275c:	d003      	beq.n	34002766 <HAL_CACHEAXI_Init+0x1e>
3400275e:	21bc      	movs	r1, #188	@ 0xbc
34002760:	480a      	ldr	r0, [pc, #40]	@ (3400278c <HAL_CACHEAXI_Init+0x44>)
34002762:	f7fe fe71 	bl	34001448 <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
34002766:	7923      	ldrb	r3, [r4, #4]
34002768:	b913      	cbnz	r3, 34002770 <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
3400276a:	4620      	mov	r0, r4
3400276c:	f7fe fe52 	bl	34001414 <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002770:	2300      	movs	r3, #0
34002772:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
34002774:	2301      	movs	r3, #1
34002776:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34002778:	4620      	mov	r0, r4
}
3400277a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400277e:	f7ff bfaf 	b.w	340026e0 <HAL_CACHEAXI_Enable>
}
34002782:	2001      	movs	r0, #1
34002784:	bd10      	pop	{r4, pc}
34002786:	bf00      	nop
34002788:	580dfc00 	.word	0x580dfc00
3400278c:	3401085c 	.word	0x3401085c

34002790 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002790:	1ec3      	subs	r3, r0, #3
34002792:	2b04      	cmp	r3, #4
{
34002794:	b510      	push	{r4, lr}
34002796:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002798:	d903      	bls.n	340027a2 <HAL_NVIC_SetPriorityGrouping+0x12>
3400279a:	21e6      	movs	r1, #230	@ 0xe6
3400279c:	4809      	ldr	r0, [pc, #36]	@ (340027c4 <HAL_NVIC_SetPriorityGrouping+0x34>)
3400279e:	f7fe fe53 	bl	34001448 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
340027a2:	4909      	ldr	r1, [pc, #36]	@ (340027c8 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
340027a4:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
340027a6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
340027a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
340027ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
340027b0:	0412      	lsls	r2, r2, #16
340027b2:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
340027b4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
340027b6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
340027ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
340027be:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
340027c0:	bd10      	pop	{r4, pc}
340027c2:	bf00      	nop
340027c4:	34010909 	.word	0x34010909
340027c8:	e000ed00 	.word	0xe000ed00

340027cc <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
340027cc:	f110 0f0c 	cmn.w	r0, #12
{
340027d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340027d4:	4605      	mov	r5, r0
340027d6:	460c      	mov	r4, r1
340027d8:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
340027da:	db01      	blt.n	340027e0 <HAL_NVIC_SetPriority+0x14>
340027dc:	1d03      	adds	r3, r0, #4
340027de:	d103      	bne.n	340027e8 <HAL_NVIC_SetPriority+0x1c>
340027e0:	21ff      	movs	r1, #255	@ 0xff
340027e2:	4826      	ldr	r0, [pc, #152]	@ (3400287c <HAL_NVIC_SetPriority+0xb0>)
340027e4:	f7fe fe30 	bl	34001448 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
340027e8:	4b25      	ldr	r3, [pc, #148]	@ (34002880 <HAL_NVIC_SetPriority+0xb4>)
340027ea:	68de      	ldr	r6, [r3, #12]
340027ec:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
340027f0:	2e02      	cmp	r6, #2
340027f2:	d806      	bhi.n	34002802 <HAL_NVIC_SetPriority+0x36>
340027f4:	b157      	cbz	r7, 3400280c <HAL_NVIC_SetPriority+0x40>
340027f6:	f44f 7181 	mov.w	r1, #258	@ 0x102
340027fa:	4820      	ldr	r0, [pc, #128]	@ (3400287c <HAL_NVIC_SetPriority+0xb0>)
340027fc:	f7fe fe24 	bl	34001448 <assert_failed>
34002800:	e004      	b.n	3400280c <HAL_NVIC_SetPriority+0x40>
34002802:	2301      	movs	r3, #1
34002804:	1ef2      	subs	r2, r6, #3
34002806:	4093      	lsls	r3, r2
34002808:	42bb      	cmp	r3, r7
3400280a:	d9f4      	bls.n	340027f6 <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
3400280c:	2c0f      	cmp	r4, #15
3400280e:	f1c6 0807 	rsb	r8, r6, #7
34002812:	d804      	bhi.n	3400281e <HAL_NVIC_SetPriority+0x52>
34002814:	2301      	movs	r3, #1
34002816:	fa03 f308 	lsl.w	r3, r3, r8
3400281a:	42a3      	cmp	r3, r4
3400281c:	d804      	bhi.n	34002828 <HAL_NVIC_SetPriority+0x5c>
3400281e:	f240 1103 	movw	r1, #259	@ 0x103
34002822:	4816      	ldr	r0, [pc, #88]	@ (3400287c <HAL_NVIC_SetPriority+0xb0>)
34002824:	f7fe fe10 	bl	34001448 <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34002828:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400282c:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34002830:	bf28      	it	cs
34002832:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400283a:	2b06      	cmp	r3, #6
3400283c:	f1a6 0603 	sub.w	r6, r6, #3
34002840:	bf98      	it	ls
34002842:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002844:	fa02 f808 	lsl.w	r8, r2, r8
34002848:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
3400284c:	40b2      	lsls	r2, r6
3400284e:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002852:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
34002854:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002856:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400285a:	bfac      	ite	ge
3400285c:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002860:	4a08      	ldrlt	r2, [pc, #32]	@ (34002884 <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002862:	ea4f 1303 	mov.w	r3, r3, lsl #4
34002866:	b2db      	uxtb	r3, r3
34002868:	bfab      	itete	ge
3400286a:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400286e:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002872:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002876:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
34002878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400287c:	34010909 	.word	0x34010909
34002880:	e000ed00 	.word	0xe000ed00
34002884:	e000ed14 	.word	0xe000ed14

34002888 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34002888:	2800      	cmp	r0, #0
3400288a:	db08      	blt.n	3400289e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400288c:	2301      	movs	r3, #1
3400288e:	0941      	lsrs	r1, r0, #5
34002890:	4a05      	ldr	r2, [pc, #20]	@ (340028a8 <HAL_NVIC_EnableIRQ+0x20>)
34002892:	f000 001f 	and.w	r0, r0, #31
34002896:	4083      	lsls	r3, r0
34002898:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
3400289c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
3400289e:	f240 1115 	movw	r1, #277	@ 0x115
340028a2:	4802      	ldr	r0, [pc, #8]	@ (340028ac <HAL_NVIC_EnableIRQ+0x24>)
340028a4:	f7fe bdd0 	b.w	34001448 <assert_failed>
340028a8:	e000e100 	.word	0xe000e100
340028ac:	34010909 	.word	0x34010909

340028b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
340028b0:	3801      	subs	r0, #1
340028b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
340028b6:	d20b      	bcs.n	340028d0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
340028b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340028bc:	21f0      	movs	r1, #240	@ 0xf0
340028be:	4a05      	ldr	r2, [pc, #20]	@ (340028d4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
340028c0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340028c2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
340028c6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
340028c8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
340028ca:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
340028cc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
340028ce:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
340028d0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
340028d2:	4770      	bx	lr
340028d4:	e000ed00 	.word	0xe000ed00

340028d8 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @brief  Line Event callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340028d8:	4770      	bx	lr

340028da <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @brief  Limit callback on the Pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340028da:	4770      	bx	lr

340028dc <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @brief  Error callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340028dc:	4770      	bx	lr

340028de <HAL_DCMIPP_ErrorCallback>:
/**
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
340028de:	4770      	bx	lr

340028e0 <HAL_DCMIPP_IRQHandler>:
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340028e0:	6803      	ldr	r3, [r0, #0]
{
340028e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340028e4:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	@ 0x3f8
{
340028e8:	4604      	mov	r4, r0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
340028ea:	0472      	lsls	r2, r6, #17
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
340028ec:	f8d3 53f0 	ldr.w	r5, [r3, #1008]	@ 0x3f0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
340028f0:	d512      	bpl.n	34002918 <HAL_DCMIPP_IRQHandler+0x38>
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
340028f2:	0469      	lsls	r1, r5, #17
340028f4:	d510      	bpl.n	34002918 <HAL_DCMIPP_IRQHandler+0x38>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340028f6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340028fa:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340028fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34002900:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
34002904:	6882      	ldr	r2, [r0, #8]
34002906:	f042 0204 	orr.w	r2, r2, #4
3400290a:	6082      	str	r2, [r0, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
3400290c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34002910:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34002914:	f7ff ffe1 	bl	340028da <HAL_DCMIPP_PIPE_LimitEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
34002918:	0572      	lsls	r2, r6, #21
3400291a:	d50a      	bpl.n	34002932 <HAL_DCMIPP_IRQHandler+0x52>
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
3400291c:	056b      	lsls	r3, r5, #21
3400291e:	d508      	bpl.n	34002932 <HAL_DCMIPP_IRQHandler+0x52>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34002920:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002924:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
34002926:	2100      	movs	r1, #0
34002928:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
3400292a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
3400292e:	f009 f975 	bl	3400bc1c <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34002932:	05b0      	lsls	r0, r6, #22
34002934:	d516      	bpl.n	34002964 <HAL_DCMIPP_IRQHandler+0x84>
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
34002936:	05a9      	lsls	r1, r5, #22
34002938:	d514      	bpl.n	34002964 <HAL_DCMIPP_IRQHandler+0x84>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400293a:	6823      	ldr	r3, [r4, #0]
3400293c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
34002940:	0752      	lsls	r2, r2, #29
34002942:	d507      	bpl.n	34002954 <HAL_DCMIPP_IRQHandler+0x74>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34002944:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002948:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
3400294c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
34002950:	2201      	movs	r2, #1
34002952:	7162      	strb	r2, [r4, #5]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34002954:	f44f 7200 	mov.w	r2, #512	@ 0x200
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34002958:	2100      	movs	r1, #0
3400295a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
3400295c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34002960:	f009 f96c 	bl	3400bc3c <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
34002964:	05f3      	lsls	r3, r6, #23
34002966:	d50a      	bpl.n	3400297e <HAL_DCMIPP_IRQHandler+0x9e>
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34002968:	05e8      	lsls	r0, r5, #23
3400296a:	d508      	bpl.n	3400297e <HAL_DCMIPP_IRQHandler+0x9e>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
3400296c:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002970:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34002972:	2100      	movs	r1, #0
34002974:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34002976:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
3400297a:	f7ff ffad 	bl	340028d8 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
3400297e:	0431      	lsls	r1, r6, #16
34002980:	d516      	bpl.n	340029b0 <HAL_DCMIPP_IRQHandler+0xd0>
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34002982:	042a      	lsls	r2, r5, #16
34002984:	d514      	bpl.n	340029b0 <HAL_DCMIPP_IRQHandler+0xd0>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002986:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002988:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400298a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3400298e:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002990:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34002994:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34002998:	68a2      	ldr	r2, [r4, #8]
3400299a:	f042 0208 	orr.w	r2, r2, #8
3400299e:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
340029a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
340029a4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
340029a8:	2304      	movs	r3, #4
340029aa:	7163      	strb	r3, [r4, #5]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
340029ac:	f7ff ff96 	bl	340028dc <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
340029b0:	03f3      	lsls	r3, r6, #15
340029b2:	d50a      	bpl.n	340029ca <HAL_DCMIPP_IRQHandler+0xea>
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
340029b4:	03e8      	lsls	r0, r5, #15
340029b6:	d508      	bpl.n	340029ca <HAL_DCMIPP_IRQHandler+0xea>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
340029b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340029bc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
340029be:	2101      	movs	r1, #1
340029c0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
340029c2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
340029c6:	f7ff ff87 	bl	340028d8 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
340029ca:	0371      	lsls	r1, r6, #13
340029cc:	d50a      	bpl.n	340029e4 <HAL_DCMIPP_IRQHandler+0x104>
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
340029ce:	036a      	lsls	r2, r5, #13
340029d0:	d508      	bpl.n	340029e4 <HAL_DCMIPP_IRQHandler+0x104>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
340029d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
340029d6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
340029d8:	2101      	movs	r1, #1
340029da:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
340029dc:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
340029e0:	f009 f91c 	bl	3400bc1c <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
340029e4:	03b3      	lsls	r3, r6, #14
340029e6:	d516      	bpl.n	34002a16 <HAL_DCMIPP_IRQHandler+0x136>
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
340029e8:	03a8      	lsls	r0, r5, #14
340029ea:	d514      	bpl.n	34002a16 <HAL_DCMIPP_IRQHandler+0x136>
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029ec:	6823      	ldr	r3, [r4, #0]
340029ee:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
340029f2:	0751      	lsls	r1, r2, #29
340029f4:	d507      	bpl.n	34002a06 <HAL_DCMIPP_IRQHandler+0x126>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
340029f6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340029fa:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
340029fe:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
34002a02:	2201      	movs	r2, #1
34002a04:	71a2      	strb	r2, [r4, #6]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34002a06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34002a0a:	2101      	movs	r1, #1
34002a0c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34002a0e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34002a12:	f009 f913 	bl	3400bc3c <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
34002a16:	0232      	lsls	r2, r6, #8
34002a18:	d516      	bpl.n	34002a48 <HAL_DCMIPP_IRQHandler+0x168>
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
34002a1a:	022b      	lsls	r3, r5, #8
34002a1c:	d514      	bpl.n	34002a48 <HAL_DCMIPP_IRQHandler+0x168>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34002a1e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34002a20:	2101      	movs	r1, #1
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34002a22:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34002a26:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34002a28:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
34002a2c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
34002a30:	68a2      	ldr	r2, [r4, #8]
34002a32:	f042 0210 	orr.w	r2, r2, #16
34002a36:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
34002a38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34002a3c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002a40:	2304      	movs	r3, #4
34002a42:	71a3      	strb	r3, [r4, #6]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34002a44:	f7ff ff4a 	bl	340028dc <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34002a48:	01f0      	lsls	r0, r6, #7
34002a4a:	d50a      	bpl.n	34002a62 <HAL_DCMIPP_IRQHandler+0x182>
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
34002a4c:	01e9      	lsls	r1, r5, #7
34002a4e:	d508      	bpl.n	34002a62 <HAL_DCMIPP_IRQHandler+0x182>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34002a50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002a54:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34002a56:	2102      	movs	r1, #2
34002a58:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34002a5a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34002a5e:	f7ff ff3b 	bl	340028d8 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34002a62:	0172      	lsls	r2, r6, #5
34002a64:	d50a      	bpl.n	34002a7c <HAL_DCMIPP_IRQHandler+0x19c>
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
34002a66:	016b      	lsls	r3, r5, #5
34002a68:	d508      	bpl.n	34002a7c <HAL_DCMIPP_IRQHandler+0x19c>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34002a6a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34002a6e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002a70:	2102      	movs	r1, #2
34002a72:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34002a74:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002a78:	f009 f8d0 	bl	3400bc1c <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34002a7c:	01b0      	lsls	r0, r6, #6
34002a7e:	d516      	bpl.n	34002aae <HAL_DCMIPP_IRQHandler+0x1ce>
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34002a80:	01a9      	lsls	r1, r5, #6
34002a82:	d514      	bpl.n	34002aae <HAL_DCMIPP_IRQHandler+0x1ce>
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a84:	6823      	ldr	r3, [r4, #0]
34002a86:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
34002a8a:	0752      	lsls	r2, r2, #29
34002a8c:	d507      	bpl.n	34002a9e <HAL_DCMIPP_IRQHandler+0x1be>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34002a8e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002a92:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
34002a96:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
34002a9a:	2201      	movs	r2, #1
34002a9c:	71e2      	strb	r2, [r4, #7]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34002a9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34002aa2:	2102      	movs	r1, #2
34002aa4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34002aa6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34002aaa:	f009 f8c7 	bl	3400bc3c <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34002aae:	2e00      	cmp	r6, #0
34002ab0:	da16      	bge.n	34002ae0 <HAL_DCMIPP_IRQHandler+0x200>
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34002ab2:	2d00      	cmp	r5, #0
34002ab4:	da14      	bge.n	34002ae0 <HAL_DCMIPP_IRQHandler+0x200>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002ab6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002ab8:	2102      	movs	r1, #2
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002aba:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002abe:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002ac0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34002ac4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34002ac8:	68a2      	ldr	r2, [r4, #8]
34002aca:	f042 0220 	orr.w	r2, r2, #32
34002ace:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
34002ad0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34002ad4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002ad8:	2304      	movs	r3, #4
34002ada:	71e3      	strb	r3, [r4, #7]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002adc:	f7ff fefe 	bl	340028dc <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
34002ae0:	0670      	lsls	r0, r6, #25
34002ae2:	d514      	bpl.n	34002b0e <HAL_DCMIPP_IRQHandler+0x22e>
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
34002ae4:	0669      	lsls	r1, r5, #25
34002ae6:	d512      	bpl.n	34002b0e <HAL_DCMIPP_IRQHandler+0x22e>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34002ae8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002aea:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34002aec:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002af0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
34002af4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34002af8:	68a2      	ldr	r2, [r4, #8]
34002afa:	f042 0202 	orr.w	r2, r2, #2
34002afe:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
34002b00:	2240      	movs	r2, #64	@ 0x40
34002b02:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002b06:	2304      	movs	r3, #4
34002b08:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b0a:	f7ff fee8 	bl	340028de <HAL_DCMIPP_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
34002b0e:	06b2      	lsls	r2, r6, #26
34002b10:	d514      	bpl.n	34002b3c <HAL_DCMIPP_IRQHandler+0x25c>
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
34002b12:	06ab      	lsls	r3, r5, #26
34002b14:	d512      	bpl.n	34002b3c <HAL_DCMIPP_IRQHandler+0x25c>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34002b16:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b18:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34002b1a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002b1e:	f022 0220 	bic.w	r2, r2, #32
34002b22:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
34002b26:	68a2      	ldr	r2, [r4, #8]
34002b28:	f042 0201 	orr.w	r2, r2, #1
34002b2c:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
34002b2e:	2220      	movs	r2, #32
34002b30:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002b34:	2304      	movs	r3, #4
34002b36:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b38:	f7ff fed1 	bl	340028de <HAL_DCMIPP_ErrorCallback>
}
34002b3c:	bd70      	pop	{r4, r5, r6, pc}

34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @brief  Line Error callback on the Data Lane
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
34002b3e:	4770      	bx	lr

34002b40 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
/**
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002b40:	4770      	bx	lr

34002b42 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
/**
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002b42:	4770      	bx	lr

34002b44 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @brief  End Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34002b44:	4770      	bx	lr

34002b46 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @brief  Start Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34002b46:	4770      	bx	lr

34002b48 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @brief  Timer Counter Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
34002b48:	4770      	bx	lr

34002b4a <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @brief  Line Byte Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
34002b4a:	4770      	bx	lr

34002b4c <HAL_DCMIPP_CSI_IRQHandler>:
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34002b4c:	4bb5      	ldr	r3, [pc, #724]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
{
34002b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34002b52:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
{
34002b56:	4604      	mov	r4, r0
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34002b58:	02b2      	lsls	r2, r6, #10
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
34002b5a:	f8d3 8094 	ldr.w	r8, [r3, #148]	@ 0x94
  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
34002b5e:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
34002b62:	f8d3 7084 	ldr.w	r7, [r3, #132]	@ 0x84
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34002b66:	d50d      	bpl.n	34002b84 <HAL_DCMIPP_CSI_IRQHandler+0x38>
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
34002b68:	02a9      	lsls	r1, r5, #10
34002b6a:	d50b      	bpl.n	34002b84 <HAL_DCMIPP_CSI_IRQHandler+0x38>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
34002b6c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002b70:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
34002b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34002b78:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34002b7c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34002b80:	f7ff ffde 	bl	34002b40 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34002b84:	0732      	lsls	r2, r6, #28
34002b86:	d515      	bpl.n	34002bb4 <HAL_DCMIPP_CSI_IRQHandler+0x68>
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34002b88:	072b      	lsls	r3, r5, #28
34002b8a:	d513      	bpl.n	34002bb4 <HAL_DCMIPP_CSI_IRQHandler+0x68>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b8c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002b8e:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b90:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002b94:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b96:	f013 0f04 	tst.w	r3, #4
34002b9a:	4ba2      	ldr	r3, [pc, #648]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34002b9c:	bf1e      	ittt	ne
34002b9e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002ba2:	f022 0208 	bicne.w	r2, r2, #8
34002ba6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34002baa:	2208      	movs	r2, #8
34002bac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002bb0:	f7ff ffcb 	bl	34002b4a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34002bb4:	0770      	lsls	r0, r6, #29
34002bb6:	d515      	bpl.n	34002be4 <HAL_DCMIPP_CSI_IRQHandler+0x98>
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34002bb8:	0769      	lsls	r1, r5, #29
34002bba:	d513      	bpl.n	34002be4 <HAL_DCMIPP_CSI_IRQHandler+0x98>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bbc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002bbe:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bc0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002bc4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bc6:	f013 0f04 	tst.w	r3, #4
34002bca:	4b96      	ldr	r3, [pc, #600]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34002bcc:	bf1e      	ittt	ne
34002bce:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002bd2:	f022 0204 	bicne.w	r2, r2, #4
34002bd6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34002bda:	2204      	movs	r2, #4
34002bdc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002be0:	f7ff ffb3 	bl	34002b4a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
34002be4:	07b2      	lsls	r2, r6, #30
34002be6:	d515      	bpl.n	34002c14 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
34002be8:	07ab      	lsls	r3, r5, #30
34002bea:	d513      	bpl.n	34002c14 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bec:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002bee:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bf0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002bf4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bf6:	f013 0f04 	tst.w	r3, #4
34002bfa:	4b8a      	ldr	r3, [pc, #552]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
34002bfc:	bf1e      	ittt	ne
34002bfe:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c02:	f022 0202 	bicne.w	r2, r2, #2
34002c06:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
34002c0a:	2202      	movs	r2, #2
34002c0c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002c10:	f7ff ff9b 	bl	34002b4a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
34002c14:	07f0      	lsls	r0, r6, #31
34002c16:	d515      	bpl.n	34002c44 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
34002c18:	07e9      	lsls	r1, r5, #31
34002c1a:	d513      	bpl.n	34002c44 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c1c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002c1e:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c20:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002c24:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c26:	f013 0f04 	tst.w	r3, #4
34002c2a:	4b7e      	ldr	r3, [pc, #504]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34002c2c:	bf1e      	ittt	ne
34002c2e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c32:	f022 0201 	bicne.w	r2, r2, #1
34002c36:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34002c3a:	2201      	movs	r2, #1
34002c3c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002c40:	f7ff ff83 	bl	34002b4a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34002c44:	0432      	lsls	r2, r6, #16
34002c46:	d516      	bpl.n	34002c76 <HAL_DCMIPP_CSI_IRQHandler+0x12a>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34002c48:	042b      	lsls	r3, r5, #16
34002c4a:	d514      	bpl.n	34002c76 <HAL_DCMIPP_CSI_IRQHandler+0x12a>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c4c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002c4e:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c50:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002c54:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c56:	f013 0f04 	tst.w	r3, #4
34002c5a:	4b72      	ldr	r3, [pc, #456]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34002c5c:	bf1e      	ittt	ne
34002c5e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c62:	f422 4200 	bicne.w	r2, r2, #32768	@ 0x8000
34002c66:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34002c6a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002c6e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002c72:	f7ff ff67 	bl	34002b44 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34002c76:	0470      	lsls	r0, r6, #17
34002c78:	d516      	bpl.n	34002ca8 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34002c7a:	0469      	lsls	r1, r5, #17
34002c7c:	d514      	bpl.n	34002ca8 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c7e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002c80:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c82:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002c86:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c88:	f013 0f04 	tst.w	r3, #4
34002c8c:	4b65      	ldr	r3, [pc, #404]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
34002c8e:	bf1e      	ittt	ne
34002c90:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c94:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
34002c98:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
34002c9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34002ca0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002ca4:	f7ff ff4e 	bl	34002b44 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34002ca8:	04b2      	lsls	r2, r6, #18
34002caa:	d516      	bpl.n	34002cda <HAL_DCMIPP_CSI_IRQHandler+0x18e>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
34002cac:	04ab      	lsls	r3, r5, #18
34002cae:	d514      	bpl.n	34002cda <HAL_DCMIPP_CSI_IRQHandler+0x18e>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cb0:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002cb2:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cb4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002cb8:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cba:	f013 0f04 	tst.w	r3, #4
34002cbe:	4b59      	ldr	r3, [pc, #356]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34002cc0:	bf1e      	ittt	ne
34002cc2:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002cc6:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
34002cca:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34002cce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34002cd2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002cd6:	f7ff ff35 	bl	34002b44 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
34002cda:	04f0      	lsls	r0, r6, #19
34002cdc:	d516      	bpl.n	34002d0c <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34002cde:	04e9      	lsls	r1, r5, #19
34002ce0:	d514      	bpl.n	34002d0c <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ce2:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002ce4:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ce6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002cea:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cec:	f013 0f04 	tst.w	r3, #4
34002cf0:	4b4c      	ldr	r3, [pc, #304]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
34002cf2:	bf1e      	ittt	ne
34002cf4:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002cf8:	f422 5280 	bicne.w	r2, r2, #4096	@ 0x1000
34002cfc:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34002d00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34002d04:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002d08:	f7ff ff1c 	bl	34002b44 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34002d0c:	0532      	lsls	r2, r6, #20
34002d0e:	d516      	bpl.n	34002d3e <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34002d10:	052b      	lsls	r3, r5, #20
34002d12:	d514      	bpl.n	34002d3e <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d14:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002d16:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d18:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002d1c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d1e:	f013 0f04 	tst.w	r3, #4
34002d22:	4b40      	ldr	r3, [pc, #256]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34002d24:	bf1e      	ittt	ne
34002d26:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002d2a:	f422 6200 	bicne.w	r2, r2, #2048	@ 0x800
34002d2e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34002d32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34002d36:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002d3a:	f7ff ff04 	bl	34002b46 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34002d3e:	0570      	lsls	r0, r6, #21
34002d40:	d516      	bpl.n	34002d70 <HAL_DCMIPP_CSI_IRQHandler+0x224>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34002d42:	0569      	lsls	r1, r5, #21
34002d44:	d514      	bpl.n	34002d70 <HAL_DCMIPP_CSI_IRQHandler+0x224>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d46:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002d48:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d4a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002d4e:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d50:	f013 0f04 	tst.w	r3, #4
34002d54:	4b33      	ldr	r3, [pc, #204]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34002d56:	bf1e      	ittt	ne
34002d58:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002d5c:	f422 6280 	bicne.w	r2, r2, #1024	@ 0x400
34002d60:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34002d64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002d68:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002d6c:	f7ff feeb 	bl	34002b46 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34002d70:	05b2      	lsls	r2, r6, #22
34002d72:	d516      	bpl.n	34002da2 <HAL_DCMIPP_CSI_IRQHandler+0x256>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34002d74:	05ab      	lsls	r3, r5, #22
34002d76:	d514      	bpl.n	34002da2 <HAL_DCMIPP_CSI_IRQHandler+0x256>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d78:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002d7a:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d7c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002d80:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d82:	f013 0f04 	tst.w	r3, #4
34002d86:	4b27      	ldr	r3, [pc, #156]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34002d88:	bf1e      	ittt	ne
34002d8a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002d8e:	f422 7200 	bicne.w	r2, r2, #512	@ 0x200
34002d92:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34002d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
34002d9a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002d9e:	f7ff fed2 	bl	34002b46 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34002da2:	05f0      	lsls	r0, r6, #23
34002da4:	d516      	bpl.n	34002dd4 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34002da6:	05e9      	lsls	r1, r5, #23
34002da8:	d514      	bpl.n	34002dd4 <HAL_DCMIPP_CSI_IRQHandler+0x288>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002daa:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002dac:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002dae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002db2:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002db4:	f013 0f04 	tst.w	r3, #4
34002db8:	4b1a      	ldr	r3, [pc, #104]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34002dba:	bf1e      	ittt	ne
34002dbc:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002dc0:	f422 7280 	bicne.w	r2, r2, #256	@ 0x100
34002dc4:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34002dc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002dcc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002dd0:	f7ff feb9 	bl	34002b46 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34002dd4:	0632      	lsls	r2, r6, #24
34002dd6:	d515      	bpl.n	34002e04 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34002dd8:	062b      	lsls	r3, r5, #24
34002dda:	d513      	bpl.n	34002e04 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ddc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002dde:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002de0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002de4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002de6:	f013 0f04 	tst.w	r3, #4
34002dea:	4b0e      	ldr	r3, [pc, #56]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34002dec:	bf1e      	ittt	ne
34002dee:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002df2:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
34002df6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34002dfa:	2280      	movs	r2, #128	@ 0x80
34002dfc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002e00:	f7ff fea2 	bl	34002b48 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34002e04:	0670      	lsls	r0, r6, #25
34002e06:	d519      	bpl.n	34002e3c <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34002e08:	0669      	lsls	r1, r5, #25
34002e0a:	d517      	bpl.n	34002e3c <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e0c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002e0e:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e10:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002e14:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e16:	f013 0f04 	tst.w	r3, #4
34002e1a:	4b02      	ldr	r3, [pc, #8]	@ (34002e24 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34002e1c:	bf18      	it	ne
34002e1e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002e22:	e001      	b.n	34002e28 <HAL_DCMIPP_CSI_IRQHandler+0x2dc>
34002e24:	58006000 	.word	0x58006000
34002e28:	bf1c      	itt	ne
34002e2a:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
34002e2e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34002e32:	2240      	movs	r2, #64	@ 0x40
34002e34:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002e38:	f7ff fe86 	bl	34002b48 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34002e3c:	06b2      	lsls	r2, r6, #26
34002e3e:	d515      	bpl.n	34002e6c <HAL_DCMIPP_CSI_IRQHandler+0x320>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34002e40:	06ab      	lsls	r3, r5, #26
34002e42:	d513      	bpl.n	34002e6c <HAL_DCMIPP_CSI_IRQHandler+0x320>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e44:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002e46:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e48:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002e4c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e4e:	f013 0f04 	tst.w	r3, #4
34002e52:	4bb9      	ldr	r3, [pc, #740]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34002e54:	bf1e      	ittt	ne
34002e56:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002e5a:	f022 0220 	bicne.w	r2, r2, #32
34002e5e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34002e62:	2220      	movs	r2, #32
34002e64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002e68:	f7ff fe6e 	bl	34002b48 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34002e6c:	06f0      	lsls	r0, r6, #27
34002e6e:	d515      	bpl.n	34002e9c <HAL_DCMIPP_CSI_IRQHandler+0x350>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34002e70:	06e9      	lsls	r1, r5, #27
34002e72:	d513      	bpl.n	34002e9c <HAL_DCMIPP_CSI_IRQHandler+0x350>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e74:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002e76:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e78:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002e7c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e7e:	f013 0f04 	tst.w	r3, #4
34002e82:	4bad      	ldr	r3, [pc, #692]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34002e84:	bf1e      	ittt	ne
34002e86:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002e8a:	f022 0210 	bicne.w	r2, r2, #16
34002e8e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34002e92:	2210      	movs	r2, #16
34002e94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002e98:	f7ff fe56 	bl	34002b48 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34002e9c:	0072      	lsls	r2, r6, #1
34002e9e:	d513      	bpl.n	34002ec8 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34002ea0:	006b      	lsls	r3, r5, #1
34002ea2:	d511      	bpl.n	34002ec8 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002ea4:	4ba4      	ldr	r3, [pc, #656]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002ea6:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002ea8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002eac:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34002eb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34002eb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002eb8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34002ebc:	68a3      	ldr	r3, [r4, #8]
34002ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34002ec2:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002ec4:	f7ff fd0b 	bl	340028de <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34002ec8:	00b0      	lsls	r0, r6, #2
34002eca:	d513      	bpl.n	34002ef4 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34002ecc:	00a9      	lsls	r1, r5, #2
34002ece:	d511      	bpl.n	34002ef4 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002ed0:	4b99      	ldr	r3, [pc, #612]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002ed2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002ed4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002ed8:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
34002edc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34002ee0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34002ee4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34002ee8:	68a3      	ldr	r3, [r4, #8]
34002eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34002eee:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002ef0:	f7ff fcf5 	bl	340028de <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34002ef4:	00f2      	lsls	r2, r6, #3
34002ef6:	d513      	bpl.n	34002f20 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34002ef8:	00eb      	lsls	r3, r5, #3
34002efa:	d511      	bpl.n	34002f20 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002efc:	4b8e      	ldr	r3, [pc, #568]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002efe:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002f00:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002f04:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
34002f08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34002f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002f10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34002f14:	68a3      	ldr	r3, [r4, #8]
34002f16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
34002f1a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002f1c:	f7ff fcdf 	bl	340028de <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34002f20:	0130      	lsls	r0, r6, #4
34002f22:	d513      	bpl.n	34002f4c <HAL_DCMIPP_CSI_IRQHandler+0x400>
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34002f24:	0129      	lsls	r1, r5, #4
34002f26:	d511      	bpl.n	34002f4c <HAL_DCMIPP_CSI_IRQHandler+0x400>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002f28:	4b83      	ldr	r3, [pc, #524]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002f2a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002f2c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002f30:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
34002f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34002f38:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34002f3c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34002f40:	68a3      	ldr	r3, [r4, #8]
34002f42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
34002f46:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002f48:	f7ff fcc9 	bl	340028de <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34002f4c:	0172      	lsls	r2, r6, #5
34002f4e:	d513      	bpl.n	34002f78 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34002f50:	016b      	lsls	r3, r5, #5
34002f52:	d511      	bpl.n	34002f78 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002f54:	4b78      	ldr	r3, [pc, #480]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002f56:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002f58:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002f5c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
34002f60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34002f64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34002f68:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34002f6c:	68a3      	ldr	r3, [r4, #8]
34002f6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34002f72:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002f74:	f7ff fcb3 	bl	340028de <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34002f78:	01b0      	lsls	r0, r6, #6
34002f7a:	d513      	bpl.n	34002fa4 <HAL_DCMIPP_CSI_IRQHandler+0x458>
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34002f7c:	01a9      	lsls	r1, r5, #6
34002f7e:	d511      	bpl.n	34002fa4 <HAL_DCMIPP_CSI_IRQHandler+0x458>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002f80:	4b6d      	ldr	r3, [pc, #436]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002f82:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002f84:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002f88:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
34002f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34002f90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34002f94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34002f98:	68a3      	ldr	r3, [r4, #8]
34002f9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34002f9e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002fa0:	f7ff fc9d 	bl	340028de <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34002fa4:	01f2      	lsls	r2, r6, #7
34002fa6:	d513      	bpl.n	34002fd0 <HAL_DCMIPP_CSI_IRQHandler+0x484>
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34002fa8:	01eb      	lsls	r3, r5, #7
34002faa:	d511      	bpl.n	34002fd0 <HAL_DCMIPP_CSI_IRQHandler+0x484>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002fac:	4b62      	ldr	r3, [pc, #392]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002fae:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002fb0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002fb4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
34002fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34002fbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002fc0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34002fc4:	68a3      	ldr	r3, [r4, #8]
34002fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
34002fca:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002fcc:	f7ff fc87 	bl	340028de <HAL_DCMIPP_ErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34002fd0:	f018 0f01 	tst.w	r8, #1
34002fd4:	d014      	beq.n	34003000 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34002fd6:	07f8      	lsls	r0, r7, #31
34002fd8:	d512      	bpl.n	34003000 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002fda:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002fdc:	4b56      	ldr	r3, [pc, #344]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002fde:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002fe0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002fe4:	f022 0201 	bic.w	r2, r2, #1
34002fe8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002fec:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34002ff0:	68a3      	ldr	r3, [r4, #8]
34002ff2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34002ff6:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002ff8:	2304      	movs	r3, #4
34002ffa:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ffc:	f7ff fd9f 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34003000:	f018 0f02 	tst.w	r8, #2
34003004:	d015      	beq.n	34003032 <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34003006:	07b9      	lsls	r1, r7, #30
34003008:	d513      	bpl.n	34003032 <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
3400300a:	4b4b      	ldr	r3, [pc, #300]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400300c:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
3400300e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34003012:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34003014:	f022 0202 	bic.w	r2, r2, #2
34003018:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
3400301c:	2202      	movs	r2, #2
3400301e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34003022:	68a3      	ldr	r3, [r4, #8]
34003024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34003028:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3400302a:	2304      	movs	r3, #4
3400302c:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400302e:	f7ff fd86 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34003032:	f018 0f04 	tst.w	r8, #4
34003036:	d013      	beq.n	34003060 <HAL_DCMIPP_CSI_IRQHandler+0x514>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34003038:	077a      	lsls	r2, r7, #29
3400303a:	d511      	bpl.n	34003060 <HAL_DCMIPP_CSI_IRQHandler+0x514>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
3400303c:	4b3e      	ldr	r3, [pc, #248]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400303e:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34003040:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34003044:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34003046:	f022 0204 	bic.w	r2, r2, #4
3400304a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
3400304e:	2204      	movs	r2, #4
34003050:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34003054:	68a3      	ldr	r3, [r4, #8]
34003056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
3400305a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400305c:	f7ff fd6f 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34003060:	f018 0f08 	tst.w	r8, #8
34003064:	d013      	beq.n	3400308e <HAL_DCMIPP_CSI_IRQHandler+0x542>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34003066:	073b      	lsls	r3, r7, #28
34003068:	d511      	bpl.n	3400308e <HAL_DCMIPP_CSI_IRQHandler+0x542>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
3400306a:	4b33      	ldr	r3, [pc, #204]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400306c:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
3400306e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34003072:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34003074:	f022 0208 	bic.w	r2, r2, #8
34003078:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
3400307c:	2208      	movs	r2, #8
3400307e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34003082:	68a3      	ldr	r3, [r4, #8]
34003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34003088:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400308a:	f7ff fd58 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
3400308e:	f018 0f10 	tst.w	r8, #16
34003092:	d013      	beq.n	340030bc <HAL_DCMIPP_CSI_IRQHandler+0x570>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34003094:	06f8      	lsls	r0, r7, #27
34003096:	d511      	bpl.n	340030bc <HAL_DCMIPP_CSI_IRQHandler+0x570>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34003098:	4b27      	ldr	r3, [pc, #156]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400309a:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
3400309c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340030a0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
340030a2:	f022 0210 	bic.w	r2, r2, #16
340030a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
340030aa:	2210      	movs	r2, #16
340030ac:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340030b0:	68a3      	ldr	r3, [r4, #8]
340030b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340030b6:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340030b8:	f7ff fd41 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
340030bc:	f418 7f80 	tst.w	r8, #256	@ 0x100
340030c0:	d016      	beq.n	340030f0 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
340030c2:	05f9      	lsls	r1, r7, #23
340030c4:	d514      	bpl.n	340030f0 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340030c6:	4b1c      	ldr	r3, [pc, #112]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340030c8:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340030ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340030ce:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340030d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
340030d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
340030d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
340030dc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
340030e0:	68a3      	ldr	r3, [r4, #8]
340030e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
340030e6:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340030e8:	2304      	movs	r3, #4
340030ea:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340030ec:	f7ff fd27 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
340030f0:	f418 7f00 	tst.w	r8, #512	@ 0x200
340030f4:	d016      	beq.n	34003124 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
340030f6:	05ba      	lsls	r2, r7, #22
340030f8:	d514      	bpl.n	34003124 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
340030fa:	4b0f      	ldr	r3, [pc, #60]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340030fc:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
340030fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003102:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34003104:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34003108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
3400310c:	f44f 7200 	mov.w	r2, #512	@ 0x200
34003110:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34003114:	68a3      	ldr	r3, [r4, #8]
34003116:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
3400311a:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3400311c:	2304      	movs	r3, #4
3400311e:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003120:	f7ff fd0d 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34003124:	f418 6f80 	tst.w	r8, #1024	@ 0x400
34003128:	d017      	beq.n	3400315a <HAL_DCMIPP_CSI_IRQHandler+0x60e>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
3400312a:	057b      	lsls	r3, r7, #21
3400312c:	d515      	bpl.n	3400315a <HAL_DCMIPP_CSI_IRQHandler+0x60e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3400312e:	4b02      	ldr	r3, [pc, #8]	@ (34003138 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003130:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34003132:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34003136:	e001      	b.n	3400313c <HAL_DCMIPP_CSI_IRQHandler+0x5f0>
34003138:	58006000 	.word	0x58006000
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400313c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3400313e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34003142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34003146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3400314a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
3400314e:	68a3      	ldr	r3, [r4, #8]
34003150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34003154:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003156:	f7ff fcf2 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
3400315a:	f418 6f00 	tst.w	r8, #2048	@ 0x800
3400315e:	d014      	beq.n	3400318a <HAL_DCMIPP_CSI_IRQHandler+0x63e>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34003160:	0538      	lsls	r0, r7, #20
34003162:	d512      	bpl.n	3400318a <HAL_DCMIPP_CSI_IRQHandler+0x63e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34003164:	4b1f      	ldr	r3, [pc, #124]	@ (340031e4 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003166:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34003168:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400316c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
3400316e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34003172:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34003176:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3400317a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
3400317e:	68a3      	ldr	r3, [r4, #8]
34003180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34003184:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003186:	f7ff fcda 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
3400318a:	f418 5f80 	tst.w	r8, #4096	@ 0x1000
3400318e:	d014      	beq.n	340031ba <HAL_DCMIPP_CSI_IRQHandler+0x66e>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34003190:	04f9      	lsls	r1, r7, #19
34003192:	d512      	bpl.n	340031ba <HAL_DCMIPP_CSI_IRQHandler+0x66e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34003194:	4b13      	ldr	r3, [pc, #76]	@ (340031e4 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003196:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34003198:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400319c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
3400319e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
340031a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340031a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340031aa:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340031ae:	68a3      	ldr	r3, [r4, #8]
340031b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340031b4:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340031b6:	f7ff fcc2 	bl	34002b3e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
340031ba:	03f2      	lsls	r2, r6, #15
340031bc:	d50f      	bpl.n	340031de <HAL_DCMIPP_CSI_IRQHandler+0x692>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
340031be:	03eb      	lsls	r3, r5, #15
340031c0:	d50d      	bpl.n	340031de <HAL_DCMIPP_CSI_IRQHandler+0x692>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340031c2:	4b08      	ldr	r3, [pc, #32]	@ (340031e4 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340031c4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340031c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340031ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
340031ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
340031d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340031d6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340031da:	f7ff fcb2 	bl	34002b42 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
}
340031de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340031e2:	bf00      	nop
340031e4:	58006000 	.word	0x58006000

340031e8 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
340031e8:	4770      	bx	lr

340031ea <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
340031ea:	4770      	bx	lr

340031ec <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
340031ec:	6803      	ldr	r3, [r0, #0]
{
340031ee:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
340031f0:	685e      	ldr	r6, [r3, #4]
{
340031f2:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
340031f4:	07f2      	lsls	r2, r6, #31
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
340031f6:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
340031f8:	d514      	bpl.n	34003224 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
340031fa:	05e9      	lsls	r1, r5, #23
340031fc:	d512      	bpl.n	34003224 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
340031fe:	681a      	ldr	r2, [r3, #0]
34003200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34003204:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
34003206:	6e42      	ldr	r2, [r0, #100]	@ 0x64
34003208:	f042 0201 	orr.w	r2, r2, #1
3400320c:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
3400320e:	2201      	movs	r2, #1
34003210:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34003212:	2304      	movs	r3, #4
34003214:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34003218:	2300      	movs	r3, #0
3400321a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
3400321e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
34003220:	b103      	cbz	r3, 34003224 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
34003222:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
34003224:	06b2      	lsls	r2, r6, #26
34003226:	d516      	bpl.n	34003256 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
34003228:	04ab      	lsls	r3, r5, #18
3400322a:	d514      	bpl.n	34003256 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
3400322c:	6823      	ldr	r3, [r4, #0]
3400322e:	681a      	ldr	r2, [r3, #0]
34003230:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
34003234:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
34003236:	2220      	movs	r2, #32
34003238:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
3400323a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400323c:	f043 0302 	orr.w	r3, r3, #2
34003240:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34003242:	2304      	movs	r3, #4
34003244:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34003248:	2300      	movs	r3, #0
3400324a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
3400324e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003250:	b10b      	cbz	r3, 34003256 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
34003252:	4620      	mov	r0, r4
34003254:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
34003256:	0730      	lsls	r0, r6, #28
34003258:	d516      	bpl.n	34003288 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
3400325a:	0529      	lsls	r1, r5, #20
3400325c:	d514      	bpl.n	34003288 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
3400325e:	6823      	ldr	r3, [r4, #0]
34003260:	681a      	ldr	r2, [r3, #0]
34003262:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34003266:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
34003268:	2208      	movs	r2, #8
3400326a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
3400326c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400326e:	f043 0304 	orr.w	r3, r3, #4
34003272:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34003274:	2304      	movs	r3, #4
34003276:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
3400327a:	2300      	movs	r3, #0
3400327c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34003280:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003282:	b10b      	cbz	r3, 34003288 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
34003284:	4620      	mov	r0, r4
34003286:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
34003288:	0772      	lsls	r2, r6, #29
3400328a:	d50b      	bpl.n	340032a4 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
3400328c:	056b      	lsls	r3, r5, #21
3400328e:	d509      	bpl.n	340032a4 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34003290:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
34003292:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34003294:	681a      	ldr	r2, [r3, #0]
34003296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
3400329a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
3400329c:	2204      	movs	r2, #4
3400329e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
340032a0:	f7ff ffa2 	bl	340031e8 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
340032a4:	07b0      	lsls	r0, r6, #30
340032a6:	d514      	bpl.n	340032d2 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
340032a8:	05a9      	lsls	r1, r5, #22
340032aa:	d512      	bpl.n	340032d2 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
340032ac:	6823      	ldr	r3, [r4, #0]
340032ae:	681a      	ldr	r2, [r3, #0]
340032b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
340032b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
340032b6:	2202      	movs	r2, #2
340032b8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
340032ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340032bc:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
340032be:	2301      	movs	r3, #1
340032c0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
340032c4:	2300      	movs	r3, #0
340032c6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
340032ca:	6a23      	ldr	r3, [r4, #32]
340032cc:	b10b      	cbz	r3, 340032d2 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
340032ce:	4620      	mov	r0, r4
340032d0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
340032d2:	06f2      	lsls	r2, r6, #27
340032d4:	d513      	bpl.n	340032fe <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
340032d6:	04eb      	lsls	r3, r5, #19
340032d8:	d511      	bpl.n	340032fe <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
340032da:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
340032dc:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
340032de:	681a      	ldr	r2, [r3, #0]
340032e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
340032e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
340032e6:	2210      	movs	r2, #16
340032e8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
340032ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340032ec:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
340032ee:	2301      	movs	r3, #1
340032f0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
340032f4:	2300      	movs	r3, #0
340032f6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
340032fa:	f7ff ff76 	bl	340031ea <HAL_DMA2D_CLUTLoadingCpltCallback>
}
340032fe:	bd70      	pop	{r4, r5, r6, pc}

34003300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34003300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34003304:	4b47      	ldr	r3, [pc, #284]	@ (34003424 <HAL_GPIO_Init+0x124>)
{
34003306:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34003308:	4298      	cmp	r0, r3
{
3400330a:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
3400330c:	d054      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
3400330e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003312:	4298      	cmp	r0, r3
34003314:	d050      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003316:	4b44      	ldr	r3, [pc, #272]	@ (34003428 <HAL_GPIO_Init+0x128>)
34003318:	4298      	cmp	r0, r3
3400331a:	d04d      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
3400331c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003320:	4298      	cmp	r0, r3
34003322:	d049      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003324:	4b41      	ldr	r3, [pc, #260]	@ (3400342c <HAL_GPIO_Init+0x12c>)
34003326:	4298      	cmp	r0, r3
34003328:	d046      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
3400332a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400332e:	4298      	cmp	r0, r3
34003330:	d042      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003332:	4b3f      	ldr	r3, [pc, #252]	@ (34003430 <HAL_GPIO_Init+0x130>)
34003334:	4298      	cmp	r0, r3
34003336:	d03f      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003338:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400333c:	4298      	cmp	r0, r3
3400333e:	d03b      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003340:	4b3c      	ldr	r3, [pc, #240]	@ (34003434 <HAL_GPIO_Init+0x134>)
34003342:	4298      	cmp	r0, r3
34003344:	d038      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003346:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400334a:	4298      	cmp	r0, r3
3400334c:	d034      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
3400334e:	4b3a      	ldr	r3, [pc, #232]	@ (34003438 <HAL_GPIO_Init+0x138>)
34003350:	4298      	cmp	r0, r3
34003352:	d031      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003354:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003358:	4298      	cmp	r0, r3
3400335a:	d02d      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
3400335c:	4b37      	ldr	r3, [pc, #220]	@ (3400343c <HAL_GPIO_Init+0x13c>)
3400335e:	4298      	cmp	r0, r3
34003360:	d02a      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003362:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003366:	4298      	cmp	r0, r3
34003368:	d026      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
3400336a:	4b35      	ldr	r3, [pc, #212]	@ (34003440 <HAL_GPIO_Init+0x140>)
3400336c:	4298      	cmp	r0, r3
3400336e:	d023      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003370:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003374:	4298      	cmp	r0, r3
34003376:	d01f      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003378:	4b32      	ldr	r3, [pc, #200]	@ (34003444 <HAL_GPIO_Init+0x144>)
3400337a:	4298      	cmp	r0, r3
3400337c:	d01c      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
3400337e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003382:	4298      	cmp	r0, r3
34003384:	d018      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003386:	4b30      	ldr	r3, [pc, #192]	@ (34003448 <HAL_GPIO_Init+0x148>)
34003388:	4298      	cmp	r0, r3
3400338a:	d015      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
3400338c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003390:	4298      	cmp	r0, r3
34003392:	d011      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
34003394:	4b2d      	ldr	r3, [pc, #180]	@ (3400344c <HAL_GPIO_Init+0x14c>)
34003396:	4298      	cmp	r0, r3
34003398:	d00e      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
3400339a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400339e:	4298      	cmp	r0, r3
340033a0:	d00a      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
340033a2:	4b2b      	ldr	r3, [pc, #172]	@ (34003450 <HAL_GPIO_Init+0x150>)
340033a4:	4298      	cmp	r0, r3
340033a6:	d007      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
340033a8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033ac:	4298      	cmp	r0, r3
340033ae:	d003      	beq.n	340033b8 <HAL_GPIO_Init+0xb8>
340033b0:	21ad      	movs	r1, #173	@ 0xad
340033b2:	4828      	ldr	r0, [pc, #160]	@ (34003454 <HAL_GPIO_Init+0x154>)
340033b4:	f7fe f848 	bl	34001448 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
340033b8:	6833      	ldr	r3, [r6, #0]
340033ba:	b29a      	uxth	r2, r3
340033bc:	b112      	cbz	r2, 340033c4 <HAL_GPIO_Init+0xc4>
340033be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340033c2:	d303      	bcc.n	340033cc <HAL_GPIO_Init+0xcc>
340033c4:	21ae      	movs	r1, #174	@ 0xae
340033c6:	4823      	ldr	r0, [pc, #140]	@ (34003454 <HAL_GPIO_Init+0x154>)
340033c8:	f7fe f83e 	bl	34001448 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
340033cc:	6873      	ldr	r3, [r6, #4]
340033ce:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
340033d2:	d011      	beq.n	340033f8 <HAL_GPIO_Init+0xf8>
340033d4:	d81d      	bhi.n	34003412 <HAL_GPIO_Init+0x112>
340033d6:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
340033da:	d00d      	beq.n	340033f8 <HAL_GPIO_Init+0xf8>
340033dc:	d809      	bhi.n	340033f2 <HAL_GPIO_Init+0xf2>
340033de:	2b03      	cmp	r3, #3
340033e0:	d90a      	bls.n	340033f8 <HAL_GPIO_Init+0xf8>
340033e2:	3b11      	subs	r3, #17
340033e4:	2b01      	cmp	r3, #1
340033e6:	d907      	bls.n	340033f8 <HAL_GPIO_Init+0xf8>
340033e8:	21af      	movs	r1, #175	@ 0xaf
340033ea:	481a      	ldr	r0, [pc, #104]	@ (34003454 <HAL_GPIO_Init+0x154>)
340033ec:	f7fe f82c 	bl	34001448 <assert_failed>
340033f0:	e002      	b.n	340033f8 <HAL_GPIO_Init+0xf8>
340033f2:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
340033f6:	d1f7      	bne.n	340033e8 <HAL_GPIO_Init+0xe8>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340033f8:	f04f 0900 	mov.w	r9, #0
340033fc:	464f      	mov	r7, r9
340033fe:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 34003424 <HAL_GPIO_Init+0x124>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34003402:	f8df a054 	ldr.w	sl, [pc, #84]	@ 34003458 <HAL_GPIO_Init+0x158>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34003406:	6835      	ldr	r5, [r6, #0]
34003408:	fa35 f307 	lsrs.w	r3, r5, r7
3400340c:	d126      	bne.n	3400345c <HAL_GPIO_Init+0x15c>
      }
    }

    position++;
  }
}
3400340e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
34003412:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34003416:	d0ef      	beq.n	340033f8 <HAL_GPIO_Init+0xf8>
34003418:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3400341c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
34003420:	e7e9      	b.n	340033f6 <HAL_GPIO_Init+0xf6>
34003422:	bf00      	nop
34003424:	56020000 	.word	0x56020000
34003428:	56020400 	.word	0x56020400
3400342c:	56020800 	.word	0x56020800
34003430:	56020c00 	.word	0x56020c00
34003434:	56021000 	.word	0x56021000
34003438:	56021400 	.word	0x56021400
3400343c:	56021800 	.word	0x56021800
34003440:	56021c00 	.word	0x56021c00
34003444:	56023400 	.word	0x56023400
34003448:	56023800 	.word	0x56023800
3400344c:	56023c00 	.word	0x56023c00
34003450:	56024000 	.word	0x56024000
34003454:	340109b4 	.word	0x340109b4
34003458:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
3400345c:	f04f 0b01 	mov.w	fp, #1
34003460:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
34003464:	ea1b 0505 	ands.w	r5, fp, r5
34003468:	f000 8130 	beq.w	340036cc <HAL_GPIO_Init+0x3cc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
3400346c:	6873      	ldr	r3, [r6, #4]
3400346e:	f003 0303 	and.w	r3, r3, #3
34003472:	3b01      	subs	r3, #1
34003474:	2b01      	cmp	r3, #1
34003476:	d81a      	bhi.n	340034ae <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34003478:	68f3      	ldr	r3, [r6, #12]
3400347a:	2b03      	cmp	r3, #3
3400347c:	d903      	bls.n	34003486 <HAL_GPIO_Init+0x186>
3400347e:	21be      	movs	r1, #190	@ 0xbe
34003480:	489e      	ldr	r0, [pc, #632]	@ (340036fc <HAL_GPIO_Init+0x3fc>)
34003482:	f7fd ffe1 	bl	34001448 <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34003486:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
34003488:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3400348a:	fa03 f309 	lsl.w	r3, r3, r9
3400348e:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34003492:	68f3      	ldr	r3, [r6, #12]
34003494:	fa03 f309 	lsl.w	r3, r3, r9
34003498:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
3400349a:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3400349c:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
3400349e:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
340034a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
340034a4:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
340034a8:	40bb      	lsls	r3, r7
340034aa:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
340034ac:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
340034ae:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
340034b2:	f003 0303 	and.w	r3, r3, #3
340034b6:	2b03      	cmp	r3, #3
340034b8:	d102      	bne.n	340034c0 <HAL_GPIO_Init+0x1c0>
340034ba:	2a01      	cmp	r2, #1
340034bc:	f000 8082 	beq.w	340035c4 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
340034c0:	2a02      	cmp	r2, #2
340034c2:	d903      	bls.n	340034cc <HAL_GPIO_Init+0x1cc>
340034c4:	21d1      	movs	r1, #209	@ 0xd1
340034c6:	488d      	ldr	r0, [pc, #564]	@ (340036fc <HAL_GPIO_Init+0x3fc>)
340034c8:	f7fd ffbe 	bl	34001448 <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
340034cc:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
340034ce:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
340034d0:	fa03 f309 	lsl.w	r3, r3, r9
340034d4:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
340034d8:	68b3      	ldr	r3, [r6, #8]
340034da:	fa03 f309 	lsl.w	r3, r3, r9
340034de:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
340034e0:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
340034e2:	6873      	ldr	r3, [r6, #4]
340034e4:	f003 0303 	and.w	r3, r3, #3
340034e8:	2b02      	cmp	r3, #2
340034ea:	d16b      	bne.n	340035c4 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
340034ec:	4544      	cmp	r4, r8
340034ee:	d053      	beq.n	34003598 <HAL_GPIO_Init+0x298>
340034f0:	4b83      	ldr	r3, [pc, #524]	@ (34003700 <HAL_GPIO_Init+0x400>)
340034f2:	429c      	cmp	r4, r3
340034f4:	d050      	beq.n	34003598 <HAL_GPIO_Init+0x298>
340034f6:	4b83      	ldr	r3, [pc, #524]	@ (34003704 <HAL_GPIO_Init+0x404>)
340034f8:	429c      	cmp	r4, r3
340034fa:	d04d      	beq.n	34003598 <HAL_GPIO_Init+0x298>
340034fc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003500:	429c      	cmp	r4, r3
34003502:	d049      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003504:	4b80      	ldr	r3, [pc, #512]	@ (34003708 <HAL_GPIO_Init+0x408>)
34003506:	429c      	cmp	r4, r3
34003508:	d046      	beq.n	34003598 <HAL_GPIO_Init+0x298>
3400350a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400350e:	429c      	cmp	r4, r3
34003510:	d042      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003512:	4b7e      	ldr	r3, [pc, #504]	@ (3400370c <HAL_GPIO_Init+0x40c>)
34003514:	429c      	cmp	r4, r3
34003516:	d03f      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003518:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400351c:	429c      	cmp	r4, r3
3400351e:	d03b      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003520:	4b7b      	ldr	r3, [pc, #492]	@ (34003710 <HAL_GPIO_Init+0x410>)
34003522:	429c      	cmp	r4, r3
34003524:	d038      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003526:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400352a:	429c      	cmp	r4, r3
3400352c:	d034      	beq.n	34003598 <HAL_GPIO_Init+0x298>
3400352e:	4b79      	ldr	r3, [pc, #484]	@ (34003714 <HAL_GPIO_Init+0x414>)
34003530:	429c      	cmp	r4, r3
34003532:	d031      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003534:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003538:	429c      	cmp	r4, r3
3400353a:	d02d      	beq.n	34003598 <HAL_GPIO_Init+0x298>
3400353c:	4b76      	ldr	r3, [pc, #472]	@ (34003718 <HAL_GPIO_Init+0x418>)
3400353e:	429c      	cmp	r4, r3
34003540:	d02a      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003542:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003546:	429c      	cmp	r4, r3
34003548:	d026      	beq.n	34003598 <HAL_GPIO_Init+0x298>
3400354a:	4b74      	ldr	r3, [pc, #464]	@ (3400371c <HAL_GPIO_Init+0x41c>)
3400354c:	429c      	cmp	r4, r3
3400354e:	d023      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003550:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003554:	429c      	cmp	r4, r3
34003556:	d01f      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003558:	4b71      	ldr	r3, [pc, #452]	@ (34003720 <HAL_GPIO_Init+0x420>)
3400355a:	429c      	cmp	r4, r3
3400355c:	d01c      	beq.n	34003598 <HAL_GPIO_Init+0x298>
3400355e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003562:	429c      	cmp	r4, r3
34003564:	d018      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003566:	4b6f      	ldr	r3, [pc, #444]	@ (34003724 <HAL_GPIO_Init+0x424>)
34003568:	429c      	cmp	r4, r3
3400356a:	d015      	beq.n	34003598 <HAL_GPIO_Init+0x298>
3400356c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003570:	429c      	cmp	r4, r3
34003572:	d011      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003574:	4b6c      	ldr	r3, [pc, #432]	@ (34003728 <HAL_GPIO_Init+0x428>)
34003576:	429c      	cmp	r4, r3
34003578:	d00e      	beq.n	34003598 <HAL_GPIO_Init+0x298>
3400357a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400357e:	429c      	cmp	r4, r3
34003580:	d00a      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003582:	4b6a      	ldr	r3, [pc, #424]	@ (3400372c <HAL_GPIO_Init+0x42c>)
34003584:	429c      	cmp	r4, r3
34003586:	d007      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003588:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400358c:	429c      	cmp	r4, r3
3400358e:	d003      	beq.n	34003598 <HAL_GPIO_Init+0x298>
34003590:	21de      	movs	r1, #222	@ 0xde
34003592:	485a      	ldr	r0, [pc, #360]	@ (340036fc <HAL_GPIO_Init+0x3fc>)
34003594:	f7fd ff58 	bl	34001448 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34003598:	6933      	ldr	r3, [r6, #16]
3400359a:	2b0f      	cmp	r3, #15
3400359c:	d903      	bls.n	340035a6 <HAL_GPIO_Init+0x2a6>
3400359e:	21df      	movs	r1, #223	@ 0xdf
340035a0:	4856      	ldr	r0, [pc, #344]	@ (340036fc <HAL_GPIO_Init+0x3fc>)
340035a2:	f7fd ff51 	bl	34001448 <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
340035a6:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
340035a8:	08fa      	lsrs	r2, r7, #3
340035aa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
340035ae:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
340035b2:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
340035b4:	0089      	lsls	r1, r1, #2
340035b6:	408b      	lsls	r3, r1
340035b8:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
340035bc:	6933      	ldr	r3, [r6, #16]
340035be:	408b      	lsls	r3, r1
340035c0:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
340035c2:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
340035c4:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
340035c6:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
340035c8:	fa03 f209 	lsl.w	r2, r3, r9
340035cc:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
340035d0:	6872      	ldr	r2, [r6, #4]
340035d2:	ea02 0103 	and.w	r1, r2, r3
340035d6:	fa01 f109 	lsl.w	r1, r1, r9
340035da:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
340035dc:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
340035e0:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
340035e2:	d073      	beq.n	340036cc <HAL_GPIO_Init+0x3cc>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340035e4:	f04f 0e0f 	mov.w	lr, #15
340035e8:	f027 0103 	bic.w	r1, r7, #3
340035ec:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
340035f0:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
340035f4:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
340035f8:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340035fc:	4098      	lsls	r0, r3
340035fe:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003602:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003604:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003608:	d064      	beq.n	340036d4 <HAL_GPIO_Init+0x3d4>
3400360a:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 34003704 <HAL_GPIO_Init+0x404>
3400360e:	4574      	cmp	r4, lr
34003610:	d062      	beq.n	340036d8 <HAL_GPIO_Init+0x3d8>
34003612:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
34003616:	4574      	cmp	r4, lr
34003618:	d060      	beq.n	340036dc <HAL_GPIO_Init+0x3dc>
3400361a:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
3400361e:	4574      	cmp	r4, lr
34003620:	d020      	beq.n	34003664 <HAL_GPIO_Init+0x364>
34003622:	4b3b      	ldr	r3, [pc, #236]	@ (34003710 <HAL_GPIO_Init+0x410>)
34003624:	429c      	cmp	r4, r3
34003626:	d05b      	beq.n	340036e0 <HAL_GPIO_Init+0x3e0>
34003628:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400362c:	429c      	cmp	r4, r3
3400362e:	d059      	beq.n	340036e4 <HAL_GPIO_Init+0x3e4>
34003630:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003634:	429c      	cmp	r4, r3
34003636:	d057      	beq.n	340036e8 <HAL_GPIO_Init+0x3e8>
34003638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400363c:	429c      	cmp	r4, r3
3400363e:	d055      	beq.n	340036ec <HAL_GPIO_Init+0x3ec>
34003640:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34003644:	429c      	cmp	r4, r3
34003646:	d053      	beq.n	340036f0 <HAL_GPIO_Init+0x3f0>
34003648:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400364c:	429c      	cmp	r4, r3
3400364e:	d051      	beq.n	340036f4 <HAL_GPIO_Init+0x3f4>
34003650:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003654:	429c      	cmp	r4, r3
34003656:	d04f      	beq.n	340036f8 <HAL_GPIO_Init+0x3f8>
34003658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400365c:	429c      	cmp	r4, r3
3400365e:	bf14      	ite	ne
34003660:	2310      	movne	r3, #16
34003662:	230b      	moveq	r3, #11
34003664:	4083      	lsls	r3, r0
34003666:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
3400366a:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
3400366c:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
34003670:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
34003674:	ea23 0105 	bic.w	r1, r3, r5
34003678:	ea43 0305 	orr.w	r3, r3, r5
3400367c:	bf08      	it	eq
3400367e:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
34003680:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
34003684:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
34003688:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
3400368c:	ea23 0105 	bic.w	r1, r3, r5
34003690:	ea43 0305 	orr.w	r3, r3, r5
34003694:	bf08      	it	eq
34003696:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
34003698:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
3400369c:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
340036a0:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
340036a4:	ea23 0105 	bic.w	r1, r3, r5
340036a8:	ea43 0305 	orr.w	r3, r3, r5
340036ac:	bf08      	it	eq
340036ae:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
340036b0:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
340036b4:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
340036b8:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
340036bc:	ea23 0105 	bic.w	r1, r3, r5
340036c0:	ea45 0503 	orr.w	r5, r5, r3
340036c4:	bf08      	it	eq
340036c6:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
340036c8:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
340036cc:	3701      	adds	r7, #1
340036ce:	f109 0902 	add.w	r9, r9, #2
340036d2:	e698      	b.n	34003406 <HAL_GPIO_Init+0x106>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340036d4:	2300      	movs	r3, #0
340036d6:	e7c5      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036d8:	2301      	movs	r3, #1
340036da:	e7c3      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036dc:	2302      	movs	r3, #2
340036de:	e7c1      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036e0:	2304      	movs	r3, #4
340036e2:	e7bf      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036e4:	2305      	movs	r3, #5
340036e6:	e7bd      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036e8:	2306      	movs	r3, #6
340036ea:	e7bb      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036ec:	2307      	movs	r3, #7
340036ee:	e7b9      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036f0:	2308      	movs	r3, #8
340036f2:	e7b7      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036f4:	2309      	movs	r3, #9
340036f6:	e7b5      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036f8:	230a      	movs	r3, #10
340036fa:	e7b3      	b.n	34003664 <HAL_GPIO_Init+0x364>
340036fc:	340109b4 	.word	0x340109b4
34003700:	46020000 	.word	0x46020000
34003704:	56020400 	.word	0x56020400
34003708:	56020800 	.word	0x56020800
3400370c:	56020c00 	.word	0x56020c00
34003710:	56021000 	.word	0x56021000
34003714:	56021400 	.word	0x56021400
34003718:	56021800 	.word	0x56021800
3400371c:	56021c00 	.word	0x56021c00
34003720:	56023400 	.word	0x56023400
34003724:	56023800 	.word	0x56023800
34003728:	56023c00 	.word	0x56023c00
3400372c:	56024000 	.word	0x56024000

34003730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34003730:	b570      	push	{r4, r5, r6, lr}
34003732:	4605      	mov	r5, r0
34003734:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34003736:	460c      	mov	r4, r1
34003738:	b921      	cbnz	r1, 34003744 <HAL_GPIO_WritePin+0x14>
3400373a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
3400373e:	4808      	ldr	r0, [pc, #32]	@ (34003760 <HAL_GPIO_WritePin+0x30>)
34003740:	f7fd fe82 	bl	34001448 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34003744:	2e01      	cmp	r6, #1
34003746:	d906      	bls.n	34003756 <HAL_GPIO_WritePin+0x26>
34003748:	f240 11a1 	movw	r1, #417	@ 0x1a1
3400374c:	4804      	ldr	r0, [pc, #16]	@ (34003760 <HAL_GPIO_WritePin+0x30>)
3400374e:	f7fd fe7b 	bl	34001448 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34003752:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34003754:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
34003756:	2e00      	cmp	r6, #0
34003758:	d1fb      	bne.n	34003752 <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
3400375a:	62ac      	str	r4, [r5, #40]	@ 0x28
}
3400375c:	e7fa      	b.n	34003754 <HAL_GPIO_WritePin+0x24>
3400375e:	bf00      	nop
34003760:	340109b4 	.word	0x340109b4

34003764 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34003764:	b538      	push	{r3, r4, r5, lr}
34003766:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34003768:	460c      	mov	r4, r1
3400376a:	b921      	cbnz	r1, 34003776 <HAL_GPIO_TogglePin+0x12>
3400376c:	f240 11b9 	movw	r1, #441	@ 0x1b9
34003770:	4805      	ldr	r0, [pc, #20]	@ (34003788 <HAL_GPIO_TogglePin+0x24>)
34003772:	f7fd fe69 	bl	34001448 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
34003776:	696b      	ldr	r3, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
34003778:	ea04 0203 	and.w	r2, r4, r3
3400377c:	ea24 0403 	bic.w	r4, r4, r3
34003780:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
34003784:	61ac      	str	r4, [r5, #24]
}
34003786:	bd38      	pop	{r3, r4, r5, pc}
34003788:	340109b4 	.word	0x340109b4

3400378c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
3400378c:	b570      	push	{r4, r5, r6, lr}
3400378e:	f001 060f 	and.w	r6, r1, #15
34003792:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
34003796:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
3400379a:	4605      	mov	r5, r0
3400379c:	ea4f 0484 	mov.w	r4, r4, lsl #2
340037a0:	f04f 0024 	mov.w	r0, #36	@ 0x24
  if ((ep_addr & 0x80U) == 0x80U)
340037a4:	d020      	beq.n	340037e8 <HAL_PCD_EP_Open+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340037a6:	f104 0114 	add.w	r1, r4, #20
    ep->is_in = 1U;
340037aa:	2401      	movs	r4, #1
340037ac:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340037b0:	4429      	add	r1, r5
    ep->is_in = 1U;
340037b2:	7544      	strb	r4, [r0, #21]
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
340037b4:	f3c2 020a 	ubfx	r2, r2, #0, #11
340037b8:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

  if (ep->is_in != 0U)
340037ba:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
340037bc:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
340037be:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
340037c0:	b102      	cbz	r2, 340037c4 <HAL_PCD_EP_Open+0x38>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
340037c2:	834e      	strh	r6, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
340037c4:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
340037c6:	bf04      	itt	eq
340037c8:	2300      	moveq	r3, #0
340037ca:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
340037cc:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
340037d0:	2b01      	cmp	r3, #1
340037d2:	d012      	beq.n	340037fa <HAL_PCD_EP_Open+0x6e>
340037d4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
340037d6:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
340037d8:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
340037dc:	f007 ffcb 	bl	3400b776 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
340037e0:	2000      	movs	r0, #0
340037e2:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494

  return ret;
}
340037e6:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
340037e8:	f504 7115 	add.w	r1, r4, #596	@ 0x254
    ep->is_in = 0U;
340037ec:	2400      	movs	r4, #0
340037ee:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
340037f2:	4429      	add	r1, r5
    ep->is_in = 0U;
340037f4:	f880 4255 	strb.w	r4, [r0, #597]	@ 0x255
340037f8:	e7dc      	b.n	340037b4 <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
340037fa:	2002      	movs	r0, #2
340037fc:	e7f3      	b.n	340037e6 <HAL_PCD_EP_Open+0x5a>

340037fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
340037fe:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003800:	2424      	movs	r4, #36	@ 0x24
34003802:	f001 050f 	and.w	r5, r1, #15
34003806:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
3400380a:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
3400380e:	e9c4 2398 	strd	r2, r3, [r4, #608]	@ 0x260
  ep->xfer_count = 0U;
34003812:	2300      	movs	r3, #0
{
34003814:	4616      	mov	r6, r2
  ep->xfer_count = 0U;
34003816:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
  ep->is_in = 0U;
3400381a:	f884 3255 	strb.w	r3, [r4, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
3400381e:	f884 5254 	strb.w	r5, [r4, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
34003822:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003824:	f501 7115 	add.w	r1, r1, #596	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
34003828:	2a01      	cmp	r2, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
3400382a:	bf08      	it	eq
3400382c:	f8c4 6270 	streq.w	r6, [r4, #624]	@ 0x270
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
34003830:	6800      	ldr	r0, [r0, #0]
34003832:	f008 f833 	bl	3400b89c <USB_EPStartXfer>

  return HAL_OK;
}
34003836:	2000      	movs	r0, #0
34003838:	bd70      	pop	{r4, r5, r6, pc}

3400383a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
3400383a:	2324      	movs	r3, #36	@ 0x24
3400383c:	f001 010f 	and.w	r1, r1, #15
34003840:	fb03 0001 	mla	r0, r3, r1, r0
}
34003844:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
34003848:	4770      	bx	lr

3400384a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
3400384a:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
3400384c:	2424      	movs	r4, #36	@ 0x24
3400384e:	f001 050f 	and.w	r5, r1, #15
34003852:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
34003856:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
3400385a:	e9c4 2308 	strd	r2, r3, [r4, #32]
  ep->xfer_count = 0U;
3400385e:	2300      	movs	r3, #0
34003860:	62a3      	str	r3, [r4, #40]	@ 0x28
  ep->is_in = 1U;
34003862:	2301      	movs	r3, #1
{
34003864:	4616      	mov	r6, r2
  ep->is_in = 1U;
34003866:	7563      	strb	r3, [r4, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
34003868:	7525      	strb	r5, [r4, #20]

  if (hpcd->Init.dma_enable == 1U)
3400386a:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
3400386c:	3114      	adds	r1, #20
  if (hpcd->Init.dma_enable == 1U)
3400386e:	429a      	cmp	r2, r3
  {
    ep->dma_addr = (uint32_t)pBuf;
34003870:	bf08      	it	eq
34003872:	6326      	streq	r6, [r4, #48]	@ 0x30
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
34003874:	6800      	ldr	r0, [r0, #0]
34003876:	f008 f811 	bl	3400b89c <USB_EPStartXfer>

  return HAL_OK;
}
3400387a:	2000      	movs	r0, #0
3400387c:	bd70      	pop	{r4, r5, r6, pc}

3400387e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
3400387e:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
34003880:	7903      	ldrb	r3, [r0, #4]
34003882:	f001 050f 	and.w	r5, r1, #15
34003886:	42ab      	cmp	r3, r5
{
34003888:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
3400388a:	d32b      	bcc.n	340038e4 <HAL_PCD_EP_SetStall+0x66>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
3400388c:	f011 0f80 	tst.w	r1, #128	@ 0x80
34003890:	f04f 0024 	mov.w	r0, #36	@ 0x24
34003894:	d01d      	beq.n	340038d2 <HAL_PCD_EP_SetStall+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
34003896:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003898:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
3400389c:	fb00 4005 	mla	r0, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340038a0:	3114      	adds	r1, #20
    ep->is_in = 1U;
340038a2:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
340038a4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
340038a6:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
340038a8:	708b      	strb	r3, [r1, #2]

  __HAL_LOCK(hpcd);
340038aa:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
340038ae:	429a      	cmp	r2, r3
340038b0:	d01a      	beq.n	340038e8 <HAL_PCD_EP_SetStall+0x6a>

  (void)USB_EPSetStall(hpcd->Instance, ep);
340038b2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
340038b4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
340038b8:	f008 f917 	bl	3400baea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
340038bc:	b92d      	cbnz	r5, 340038ca <HAL_PCD_EP_SetStall+0x4c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
340038be:	79a1      	ldrb	r1, [r4, #6]
340038c0:	6820      	ldr	r0, [r4, #0]
340038c2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
340038c6:	f008 f97b 	bl	3400bbc0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
340038ca:	2000      	movs	r0, #0
340038cc:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
340038d0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
340038d2:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
340038d6:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
340038d8:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
340038dc:	2300      	movs	r3, #0
340038de:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
340038e2:	e7df      	b.n	340038a4 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
340038e4:	2001      	movs	r0, #1
340038e6:	e7f3      	b.n	340038d0 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
340038e8:	2002      	movs	r0, #2
340038ea:	e7f1      	b.n	340038d0 <HAL_PCD_EP_SetStall+0x52>

340038ec <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
340038ec:	f001 030f 	and.w	r3, r1, #15
340038f0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
340038f4:	009b      	lsls	r3, r3, #2
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340038f6:	f103 0214 	add.w	r2, r3, #20
340038fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
340038fe:	4402      	add	r2, r0
34003900:	4403      	add	r3, r0
34003902:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
34003906:	bf0c      	ite	eq
34003908:	4619      	moveq	r1, r3
3400390a:	4611      	movne	r1, r2
3400390c:	6800      	ldr	r0, [r0, #0]
3400390e:	f007 bf71 	b.w	3400b7f4 <USB_EPStopXfer>
	...

34003914 <HAL_PCD_IRQHandler>:
{
34003914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003918:	6806      	ldr	r6, [r0, #0]
{
3400391a:	4604      	mov	r4, r0
3400391c:	b087      	sub	sp, #28
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
3400391e:	4630      	mov	r0, r6
34003920:	f008 f93c 	bl	3400bb9c <USB_GetMode>
34003924:	2800      	cmp	r0, #0
34003926:	f040 8176 	bne.w	34003c16 <HAL_PCD_IRQHandler+0x302>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
3400392a:	6820      	ldr	r0, [r4, #0]
3400392c:	f008 f908 	bl	3400bb40 <USB_ReadInterrupts>
34003930:	2800      	cmp	r0, #0
34003932:	f000 8170 	beq.w	34003c16 <HAL_PCD_IRQHandler+0x302>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
34003936:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
3400393a:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
3400393c:	f3c3 230d 	ubfx	r3, r3, #8, #14
34003940:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
34003944:	f008 f8fc 	bl	3400bb40 <USB_ReadInterrupts>
34003948:	0787      	lsls	r7, r0, #30
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
3400394a:	bf48      	it	mi
3400394c:	6822      	ldrmi	r2, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
3400394e:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
34003950:	bf48      	it	mi
34003952:	6953      	ldrmi	r3, [r2, #20]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
34003954:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
34003958:	bf44      	itt	mi
3400395a:	f003 0302 	andmi.w	r3, r3, #2
3400395e:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
34003960:	f008 f8ee 	bl	3400bb40 <USB_ReadInterrupts>
34003964:	06c0      	lsls	r0, r0, #27
34003966:	d52d      	bpl.n	340039c4 <HAL_PCD_IRQHandler+0xb0>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
34003968:	6822      	ldr	r2, [r4, #0]
3400396a:	6993      	ldr	r3, [r2, #24]
3400396c:	f023 0310 	bic.w	r3, r3, #16
34003970:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
34003972:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
34003976:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
3400397a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
3400397e:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
34003982:	f040 814b 	bne.w	34003c1c <HAL_PCD_IRQHandler+0x308>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
34003986:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
3400398a:	ea18 0f03 	tst.w	r8, r3
3400398e:	d014      	beq.n	340039ba <HAL_PCD_IRQHandler+0xa6>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
34003990:	2324      	movs	r3, #36	@ 0x24
34003992:	fb03 4707 	mla	r7, r3, r7, r4
34003996:	f3c8 190a 	ubfx	r9, r8, #4, #11
3400399a:	464a      	mov	r2, r9
3400399c:	4630      	mov	r0, r6
3400399e:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
340039a2:	f008 f87d 	bl	3400baa0 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
340039a6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
340039aa:	444b      	add	r3, r9
340039ac:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
340039b0:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
340039b4:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
340039b6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
340039ba:	6822      	ldr	r2, [r4, #0]
340039bc:	6993      	ldr	r3, [r2, #24]
340039be:	f043 0310 	orr.w	r3, r3, #16
340039c2:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
340039c4:	6820      	ldr	r0, [r4, #0]
340039c6:	f008 f8bb 	bl	3400bb40 <USB_ReadInterrupts>
340039ca:	0301      	lsls	r1, r0, #12
340039cc:	f100 8139 	bmi.w	34003c42 <HAL_PCD_IRQHandler+0x32e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
340039d0:	6820      	ldr	r0, [r4, #0]
340039d2:	f008 f8b5 	bl	3400bb40 <USB_ReadInterrupts>
340039d6:	0342      	lsls	r2, r0, #13
340039d8:	d50d      	bpl.n	340039f6 <HAL_PCD_IRQHandler+0xe2>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
340039da:	6820      	ldr	r0, [r4, #0]
340039dc:	f008 f8bc 	bl	3400bb58 <USB_ReadDevAllInEpInterrupt>
340039e0:	4627      	mov	r7, r4
340039e2:	4683      	mov	fp, r0
      epnum = 0U;
340039e4:	f04f 0900 	mov.w	r9, #0
340039e8:	f506 6a10 	add.w	sl, r6, #2304	@ 0x900
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
340039ec:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
340039ee:	f1bb 0f00 	cmp.w	fp, #0
340039f2:	f040 81f0 	bne.w	34003dd6 <HAL_PCD_IRQHandler+0x4c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
340039f6:	6820      	ldr	r0, [r4, #0]
340039f8:	f008 f8a2 	bl	3400bb40 <USB_ReadInterrupts>
340039fc:	2800      	cmp	r0, #0
340039fe:	da13      	bge.n	34003a28 <HAL_PCD_IRQHandler+0x114>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003a00:	686b      	ldr	r3, [r5, #4]
34003a02:	f023 0301 	bic.w	r3, r3, #1
34003a06:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
34003a08:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
34003a0c:	2b01      	cmp	r3, #1
34003a0e:	f040 8286 	bne.w	34003f1e <HAL_PCD_IRQHandler+0x60a>
        hpcd->LPM_State = LPM_L0;
34003a12:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
34003a14:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
34003a16:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
34003a1a:	f000 fafa 	bl	34004012 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
34003a1e:	6822      	ldr	r2, [r4, #0]
34003a20:	6953      	ldr	r3, [r2, #20]
34003a22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
34003a26:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
34003a28:	6820      	ldr	r0, [r4, #0]
34003a2a:	f008 f889 	bl	3400bb40 <USB_ReadInterrupts>
34003a2e:	0502      	lsls	r2, r0, #20
34003a30:	d50a      	bpl.n	34003a48 <HAL_PCD_IRQHandler+0x134>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
34003a32:	68ab      	ldr	r3, [r5, #8]
34003a34:	07db      	lsls	r3, r3, #31
34003a36:	d502      	bpl.n	34003a3e <HAL_PCD_IRQHandler+0x12a>
        HAL_PCD_SuspendCallback(hpcd);
34003a38:	4620      	mov	r0, r4
34003a3a:	f008 fa4f 	bl	3400bedc <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
34003a3e:	6822      	ldr	r2, [r4, #0]
34003a40:	6953      	ldr	r3, [r2, #20]
34003a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34003a46:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
34003a48:	6820      	ldr	r0, [r4, #0]
34003a4a:	f008 f879 	bl	3400bb40 <USB_ReadInterrupts>
34003a4e:	0107      	lsls	r7, r0, #4
34003a50:	d514      	bpl.n	34003a7c <HAL_PCD_IRQHandler+0x168>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
34003a52:	6823      	ldr	r3, [r4, #0]
34003a54:	695a      	ldr	r2, [r3, #20]
34003a56:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
34003a5a:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
34003a5c:	f894 24cc 	ldrb.w	r2, [r4, #1228]	@ 0x4cc
34003a60:	2a00      	cmp	r2, #0
34003a62:	f040 8260 	bne.w	34003f26 <HAL_PCD_IRQHandler+0x612>
        hpcd->LPM_State = LPM_L1;
34003a66:	2101      	movs	r1, #1
34003a68:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
34003a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
34003a6e:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
34003a70:	f3c3 0383 	ubfx	r3, r3, #2, #4
34003a74:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
34003a78:	f000 facb 	bl	34004012 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
34003a7c:	6820      	ldr	r0, [r4, #0]
34003a7e:	f008 f85f 	bl	3400bb40 <USB_ReadInterrupts>
34003a82:	04c0      	lsls	r0, r0, #19
34003a84:	d537      	bpl.n	34003af6 <HAL_PCD_IRQHandler+0x1e2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003a86:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
34003a88:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003a8a:	f023 0301 	bic.w	r3, r3, #1
34003a8e:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
34003a90:	6820      	ldr	r0, [r4, #0]
34003a92:	f007 fe21 	bl	3400b6d8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003a96:	7921      	ldrb	r1, [r4, #4]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003a98:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
34003a9c:	2900      	cmp	r1, #0
34003a9e:	f101 0201 	add.w	r2, r1, #1
34003aa2:	bf08      	it	eq
34003aa4:	2201      	moveq	r2, #1
34003aa6:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003aaa:	3a01      	subs	r2, #1
34003aac:	f040 823f 	bne.w	34003f2e <HAL_PCD_IRQHandler+0x61a>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
34003ab0:	69eb      	ldr	r3, [r5, #28]
34003ab2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
34003ab6:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
34003ab8:	7be3      	ldrb	r3, [r4, #15]
34003aba:	2b00      	cmp	r3, #0
34003abc:	f000 8252 	beq.w	34003f64 <HAL_PCD_IRQHandler+0x650>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
34003ac0:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
34003ac4:	f043 030b 	orr.w	r3, r3, #11
34003ac8:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
34003acc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
34003ace:	f043 030b 	orr.w	r3, r3, #11
34003ad2:	646b      	str	r3, [r5, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
34003ad4:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003ad8:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
34003adc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
34003ae0:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003ae4:	79a1      	ldrb	r1, [r4, #6]
34003ae6:	6820      	ldr	r0, [r4, #0]
34003ae8:	f008 f86a 	bl	3400bbc0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
34003aec:	6822      	ldr	r2, [r4, #0]
34003aee:	6953      	ldr	r3, [r2, #20]
34003af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34003af4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
34003af6:	6820      	ldr	r0, [r4, #0]
34003af8:	f008 f822 	bl	3400bb40 <USB_ReadInterrupts>
34003afc:	0481      	lsls	r1, r0, #18
34003afe:	d516      	bpl.n	34003b2e <HAL_PCD_IRQHandler+0x21a>
      (void)USB_ActivateSetup(hpcd->Instance);
34003b00:	6820      	ldr	r0, [r4, #0]
34003b02:	f008 f84f 	bl	3400bba4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
34003b06:	6820      	ldr	r0, [r4, #0]
34003b08:	f007 fe2a 	bl	3400b760 <USB_GetDevSpeed>
34003b0c:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
34003b0e:	6827      	ldr	r7, [r4, #0]
34003b10:	f001 fb78 	bl	34005204 <HAL_RCC_GetHCLKFreq>
34003b14:	79e2      	ldrb	r2, [r4, #7]
34003b16:	4601      	mov	r1, r0
34003b18:	4638      	mov	r0, r7
34003b1a:	f007 fd6d 	bl	3400b5f8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
34003b1e:	4620      	mov	r0, r4
34003b20:	f008 f9a8 	bl	3400be74 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
34003b24:	6822      	ldr	r2, [r4, #0]
34003b26:	6953      	ldr	r3, [r2, #20]
34003b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34003b2c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
34003b2e:	6820      	ldr	r0, [r4, #0]
34003b30:	f008 f806 	bl	3400bb40 <USB_ReadInterrupts>
34003b34:	0702      	lsls	r2, r0, #28
34003b36:	d507      	bpl.n	34003b48 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_SOFCallback(hpcd);
34003b38:	4620      	mov	r0, r4
34003b3a:	f008 f9e3 	bl	3400bf04 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
34003b3e:	6822      	ldr	r2, [r4, #0]
34003b40:	6953      	ldr	r3, [r2, #20]
34003b42:	f003 0308 	and.w	r3, r3, #8
34003b46:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
34003b48:	6820      	ldr	r0, [r4, #0]
34003b4a:	f007 fff9 	bl	3400bb40 <USB_ReadInterrupts>
34003b4e:	0603      	lsls	r3, r0, #24
34003b50:	f100 8213 	bmi.w	34003f7a <HAL_PCD_IRQHandler+0x666>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
34003b54:	6820      	ldr	r0, [r4, #0]
34003b56:	f007 fff3 	bl	3400bb40 <USB_ReadInterrupts>
34003b5a:	02c7      	lsls	r7, r0, #11
34003b5c:	d50c      	bpl.n	34003b78 <HAL_PCD_IRQHandler+0x264>
34003b5e:	46a0      	mov	r8, r4
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003b60:	2701      	movs	r7, #1
34003b62:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
34003b66:	7923      	ldrb	r3, [r4, #4]
34003b68:	42bb      	cmp	r3, r7
34003b6a:	f200 821f 	bhi.w	34003fac <HAL_PCD_IRQHandler+0x698>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
34003b6e:	6822      	ldr	r2, [r4, #0]
34003b70:	6953      	ldr	r3, [r2, #20]
34003b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34003b76:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
34003b78:	6820      	ldr	r0, [r4, #0]
34003b7a:	f007 ffe1 	bl	3400bb40 <USB_ReadInterrupts>
34003b7e:	0280      	lsls	r0, r0, #10
34003b80:	d52c      	bpl.n	34003bdc <HAL_PCD_IRQHandler+0x2c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003b82:	7923      	ldrb	r3, [r4, #4]
34003b84:	4622      	mov	r2, r4
34003b86:	2b00      	cmp	r3, #0
34003b88:	bf08      	it	eq
34003b8a:	2301      	moveq	r3, #1
34003b8c:	f506 6c32 	add.w	ip, r6, #2848	@ 0xb20
34003b90:	3b01      	subs	r3, #1
34003b92:	d01e      	beq.n	34003bd2 <HAL_PCD_IRQHandler+0x2be>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
34003b94:	f892 727c 	ldrb.w	r7, [r2, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
34003b98:	f8dc 0000 	ldr.w	r0, [ip]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
34003b9c:	2f01      	cmp	r7, #1
34003b9e:	f040 821b 	bne.w	34003fd8 <HAL_PCD_IRQHandler+0x6c4>
34003ba2:	2800      	cmp	r0, #0
34003ba4:	f280 8218 	bge.w	34003fd8 <HAL_PCD_IRQHandler+0x6c4>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
34003ba8:	f8d4 14d4 	ldr.w	r1, [r4, #1236]	@ 0x4d4
34003bac:	ea81 4010 	eor.w	r0, r1, r0, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
34003bb0:	07c1      	lsls	r1, r0, #31
34003bb2:	f100 8211 	bmi.w	34003fd8 <HAL_PCD_IRQHandler+0x6c4>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
34003bb6:	f882 727b 	strb.w	r7, [r2, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
34003bba:	69b0      	ldr	r0, [r6, #24]
34003bbc:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
34003bc0:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
34003bc2:	6970      	ldr	r0, [r6, #20]
34003bc4:	0600      	lsls	r0, r0, #24
34003bc6:	f100 8207 	bmi.w	34003fd8 <HAL_PCD_IRQHandler+0x6c4>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
34003bca:	686b      	ldr	r3, [r5, #4]
34003bcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34003bd0:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
34003bd2:	6822      	ldr	r2, [r4, #0]
34003bd4:	6953      	ldr	r3, [r2, #20]
34003bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34003bda:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
34003bdc:	6820      	ldr	r0, [r4, #0]
34003bde:	f007 ffaf 	bl	3400bb40 <USB_ReadInterrupts>
34003be2:	0041      	lsls	r1, r0, #1
34003be4:	d507      	bpl.n	34003bf6 <HAL_PCD_IRQHandler+0x2e2>
      HAL_PCD_ConnectCallback(hpcd);
34003be6:	4620      	mov	r0, r4
34003be8:	f008 f95c 	bl	3400bea4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
34003bec:	6822      	ldr	r2, [r4, #0]
34003bee:	6953      	ldr	r3, [r2, #20]
34003bf0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34003bf4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
34003bf6:	6820      	ldr	r0, [r4, #0]
34003bf8:	f007 ffa2 	bl	3400bb40 <USB_ReadInterrupts>
34003bfc:	0742      	lsls	r2, r0, #29
34003bfe:	d50a      	bpl.n	34003c16 <HAL_PCD_IRQHandler+0x302>
      RegVal = hpcd->Instance->GOTGINT;
34003c00:	6823      	ldr	r3, [r4, #0]
34003c02:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
34003c04:	076b      	lsls	r3, r5, #29
34003c06:	d502      	bpl.n	34003c0e <HAL_PCD_IRQHandler+0x2fa>
        HAL_PCD_DisconnectCallback(hpcd);
34003c08:	4620      	mov	r0, r4
34003c0a:	f008 f955 	bl	3400beb8 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
34003c0e:	6822      	ldr	r2, [r4, #0]
34003c10:	6853      	ldr	r3, [r2, #4]
34003c12:	432b      	orrs	r3, r5
34003c14:	6053      	str	r3, [r2, #4]
}
34003c16:	b007      	add	sp, #28
34003c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
34003c1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
34003c20:	f47f aecb 	bne.w	340039ba <HAL_PCD_IRQHandler+0xa6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
34003c24:	2208      	movs	r2, #8
34003c26:	4630      	mov	r0, r6
34003c28:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
34003c2c:	f007 ff38 	bl	3400baa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003c30:	2324      	movs	r3, #36	@ 0x24
34003c32:	fb03 4707 	mla	r7, r3, r7, r4
34003c36:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
34003c3a:	f3c8 180a 	ubfx	r8, r8, #4, #11
34003c3e:	4443      	add	r3, r8
34003c40:	e6b9      	b.n	340039b6 <HAL_PCD_IRQHandler+0xa2>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
34003c42:	6820      	ldr	r0, [r4, #0]
34003c44:	f007 ff80 	bl	3400bb48 <USB_ReadDevAllOutEpInterrupt>
34003c48:	46a2      	mov	sl, r4
      epnum = 0U;
34003c4a:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
34003c4c:	9002      	str	r0, [sp, #8]
      while (ep_intr != 0U)
34003c4e:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
34003c52:	9b02      	ldr	r3, [sp, #8]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003c54:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
34003c56:	2b00      	cmp	r3, #0
34003c58:	f43f aeba 	beq.w	340039d0 <HAL_PCD_IRQHandler+0xbc>
        if ((ep_intr & 0x1U) != 0U)
34003c5c:	9b02      	ldr	r3, [sp, #8]
34003c5e:	07db      	lsls	r3, r3, #31
34003c60:	d578      	bpl.n	34003d54 <HAL_PCD_IRQHandler+0x440>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003c62:	fa5f fb87 	uxtb.w	fp, r7
34003c66:	4659      	mov	r1, fp
34003c68:	f007 ff7e 	bl	3400bb68 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003c6c:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003c70:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003c72:	d01f      	beq.n	34003cb4 <HAL_PCD_IRQHandler+0x3a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003c74:	2301      	movs	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003c76:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003c78:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
34003c7c:	f894 c006 	ldrb.w	ip, [r4, #6]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003c80:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
34003c84:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
34003c88:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003c8c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003c8e:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
34003c90:	f040 808b 	bne.w	34003daa <HAL_PCD_IRQHandler+0x496>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
34003c94:	f012 0f08 	tst.w	r2, #8
34003c98:	d007      	beq.n	34003caa <HAL_PCD_IRQHandler+0x396>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003c9a:	48b0      	ldr	r0, [pc, #704]	@ (34003f5c <HAL_PCD_IRQHandler+0x648>)
34003c9c:	4281      	cmp	r1, r0
34003c9e:	d909      	bls.n	34003cb4 <HAL_PCD_IRQHandler+0x3a0>
34003ca0:	0412      	lsls	r2, r2, #16
34003ca2:	d507      	bpl.n	34003cb4 <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003ca4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34003ca8:	e003      	b.n	34003cb2 <HAL_PCD_IRQHandler+0x39e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
34003caa:	f012 0f20 	tst.w	r2, #32
34003cae:	d05a      	beq.n	34003d66 <HAL_PCD_IRQHandler+0x452>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003cb0:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003cb2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
34003cb4:	f019 0f08 	tst.w	r9, #8
34003cb8:	d021      	beq.n	34003cfe <HAL_PCD_IRQHandler+0x3ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
34003cba:	2308      	movs	r3, #8
34003cbc:	f8c8 3008 	str.w	r3, [r8, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003cc0:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003cc2:	49a6      	ldr	r1, [pc, #664]	@ (34003f5c <HAL_PCD_IRQHandler+0x648>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003cc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
34003cca:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003cce:	428a      	cmp	r2, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003cd0:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003cd2:	d904      	bls.n	34003cde <HAL_PCD_IRQHandler+0x3ca>
34003cd4:	0400      	lsls	r0, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003cd6:	bf44      	itt	mi
34003cd8:	f44f 4000 	movmi.w	r0, #32768	@ 0x8000
34003cdc:	6098      	strmi	r0, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
34003cde:	4620      	mov	r0, r4
34003ce0:	9203      	str	r2, [sp, #12]
34003ce2:	f007 ffd1 	bl	3400bc88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
34003ce6:	9a03      	ldr	r2, [sp, #12]
34003ce8:	499c      	ldr	r1, [pc, #624]	@ (34003f5c <HAL_PCD_IRQHandler+0x648>)
34003cea:	428a      	cmp	r2, r1
34003cec:	d907      	bls.n	34003cfe <HAL_PCD_IRQHandler+0x3ea>
34003cee:	79a1      	ldrb	r1, [r4, #6]
34003cf0:	2901      	cmp	r1, #1
34003cf2:	d104      	bne.n	34003cfe <HAL_PCD_IRQHandler+0x3ea>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003cf4:	6820      	ldr	r0, [r4, #0]
34003cf6:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003cfa:	f007 ff61 	bl	3400bbc0 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
34003cfe:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
34003d02:	bf1c      	itt	ne
34003d04:	2310      	movne	r3, #16
34003d06:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
34003d0a:	f019 0f02 	tst.w	r9, #2
34003d0e:	d014      	beq.n	34003d3a <HAL_PCD_IRQHandler+0x426>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
34003d10:	6973      	ldr	r3, [r6, #20]
34003d12:	0619      	lsls	r1, r3, #24
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
34003d14:	bf42      	ittt	mi
34003d16:	686b      	ldrmi	r3, [r5, #4]
34003d18:	f443 6380 	orrmi.w	r3, r3, #1024	@ 0x400
34003d1c:	606b      	strmi	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
34003d1e:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
34003d22:	2b01      	cmp	r3, #1
34003d24:	d106      	bne.n	34003d34 <HAL_PCD_IRQHandler+0x420>
              ep->is_iso_incomplete = 0U;
34003d26:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003d28:	4659      	mov	r1, fp
34003d2a:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
34003d2c:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003d30:	f008 f912 	bl	3400bf58 <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
34003d34:	2302      	movs	r3, #2
34003d36:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003d3a:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003d3e:	bf1c      	itt	ne
34003d40:	2320      	movne	r3, #32
34003d42:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
34003d46:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
34003d4a:	bf1c      	itt	ne
34003d4c:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
34003d50:	f8c8 3008 	strne.w	r3, [r8, #8]
        ep_intr >>= 1U;
34003d54:	9b02      	ldr	r3, [sp, #8]
        epnum++;
34003d56:	3701      	adds	r7, #1
        ep_intr >>= 1U;
34003d58:	085b      	lsrs	r3, r3, #1
34003d5a:	9302      	str	r3, [sp, #8]
34003d5c:	f108 0820 	add.w	r8, r8, #32
34003d60:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
34003d64:	e775      	b.n	34003c52 <HAL_PCD_IRQHandler+0x33e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003d66:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 34003f5c <HAL_PCD_IRQHandler+0x648>
34003d6a:	4561      	cmp	r1, ip
34003d6c:	d901      	bls.n	34003d72 <HAL_PCD_IRQHandler+0x45e>
34003d6e:	0412      	lsls	r2, r2, #16
34003d70:	d498      	bmi.n	34003ca4 <HAL_PCD_IRQHandler+0x390>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
34003d72:	691a      	ldr	r2, [r3, #16]
34003d74:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
34003d78:	f3c2 0212 	ubfx	r2, r2, #0, #19
34003d7c:	1a9b      	subs	r3, r3, r2
34003d7e:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
34003d82:	b96f      	cbnz	r7, 34003da0 <HAL_PCD_IRQHandler+0x48c>
          if (ep->xfer_len == 0U)
34003d84:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
34003d88:	b92a      	cbnz	r2, 34003d96 <HAL_PCD_IRQHandler+0x482>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003d8a:	2101      	movs	r1, #1
34003d8c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003d90:	f007 ff16 	bl	3400bbc0 <USB_EP0_OutStart>
34003d94:	e004      	b.n	34003da0 <HAL_PCD_IRQHandler+0x48c>
            ep->xfer_buff += ep->xfer_count;
34003d96:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
34003d9a:	441a      	add	r2, r3
34003d9c:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003da0:	4659      	mov	r1, fp
34003da2:	4620      	mov	r0, r4
34003da4:	f008 f81c 	bl	3400bde0 <HAL_PCD_DataOutStageCallback>
34003da8:	e784      	b.n	34003cb4 <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
34003daa:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 34003f60 <HAL_PCD_IRQHandler+0x64c>
34003dae:	4561      	cmp	r1, ip
34003db0:	d107      	bne.n	34003dc2 <HAL_PCD_IRQHandler+0x4ae>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
34003db2:	0411      	lsls	r1, r2, #16
34003db4:	f53f af76 	bmi.w	34003ca4 <HAL_PCD_IRQHandler+0x390>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003db8:	0692      	lsls	r2, r2, #26
34003dba:	d5f1      	bpl.n	34003da0 <HAL_PCD_IRQHandler+0x48c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003dbc:	2220      	movs	r2, #32
34003dbe:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003dc0:	e7ee      	b.n	34003da0 <HAL_PCD_IRQHandler+0x48c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
34003dc2:	2f00      	cmp	r7, #0
34003dc4:	d1ec      	bne.n	34003da0 <HAL_PCD_IRQHandler+0x48c>
34003dc6:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
34003dca:	2b00      	cmp	r3, #0
34003dcc:	d1e8      	bne.n	34003da0 <HAL_PCD_IRQHandler+0x48c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003dce:	4639      	mov	r1, r7
34003dd0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003dd4:	e7dc      	b.n	34003d90 <HAL_PCD_IRQHandler+0x47c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
34003dd6:	f01b 0f01 	tst.w	fp, #1
34003dda:	f000 8098 	beq.w	34003f0e <HAL_PCD_IRQHandler+0x5fa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003dde:	fa5f f389 	uxtb.w	r3, r9
34003de2:	4619      	mov	r1, r3
34003de4:	9302      	str	r3, [sp, #8]
34003de6:	f007 fec8 	bl	3400bb7a <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003dea:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003dee:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003df0:	d01f      	beq.n	34003e32 <HAL_PCD_IRQHandler+0x51e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003df2:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003df4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003df6:	f009 020f 	and.w	r2, r9, #15
34003dfa:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003dfe:	ea23 0302 	bic.w	r3, r3, r2
34003e02:	636b      	str	r3, [r5, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
34003e04:	f8ca 1008 	str.w	r1, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
34003e08:	79a1      	ldrb	r1, [r4, #6]
34003e0a:	2901      	cmp	r1, #1
34003e0c:	d10d      	bne.n	34003e2a <HAL_PCD_IRQHandler+0x516>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
34003e0e:	e9d7 2307 	ldrd	r2, r3, [r7, #28]
34003e12:	4413      	add	r3, r2
34003e14:	623b      	str	r3, [r7, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
34003e16:	f1b9 0f00 	cmp.w	r9, #0
34003e1a:	d106      	bne.n	34003e2a <HAL_PCD_IRQHandler+0x516>
34003e1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003e1e:	b923      	cbnz	r3, 34003e2a <HAL_PCD_IRQHandler+0x516>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003e20:	6820      	ldr	r0, [r4, #0]
34003e22:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003e26:	f007 fecb 	bl	3400bbc0 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
34003e2a:	4620      	mov	r0, r4
34003e2c:	9902      	ldr	r1, [sp, #8]
34003e2e:	f007 ff77 	bl	3400bd20 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
34003e32:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
34003e36:	bf1c      	itt	ne
34003e38:	2308      	movne	r3, #8
34003e3a:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
34003e3e:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
34003e42:	bf1c      	itt	ne
34003e44:	2310      	movne	r3, #16
34003e46:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
34003e4a:	f018 0f40 	tst.w	r8, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
34003e4e:	bf1c      	itt	ne
34003e50:	2340      	movne	r3, #64	@ 0x40
34003e52:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
34003e56:	f018 0f02 	tst.w	r8, #2
34003e5a:	d00f      	beq.n	34003e7c <HAL_PCD_IRQHandler+0x568>
            (void)USB_FlushTxFifo(USBx, epnum);
34003e5c:	4649      	mov	r1, r9
34003e5e:	4630      	mov	r0, r6
34003e60:	f007 fc3a 	bl	3400b6d8 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
34003e64:	7dfb      	ldrb	r3, [r7, #23]
34003e66:	2b01      	cmp	r3, #1
34003e68:	d105      	bne.n	34003e76 <HAL_PCD_IRQHandler+0x562>
              ep->is_iso_incomplete = 0U;
34003e6a:	2300      	movs	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003e6c:	4620      	mov	r0, r4
34003e6e:	9902      	ldr	r1, [sp, #8]
              ep->is_iso_incomplete = 0U;
34003e70:	75fb      	strb	r3, [r7, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003e72:	f008 f851 	bl	3400bf18 <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
34003e76:	2302      	movs	r3, #2
34003e78:	f8ca 3008 	str.w	r3, [sl, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003e7c:	6823      	ldr	r3, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003e7e:	f018 0f80 	tst.w	r8, #128	@ 0x80
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003e82:	9303      	str	r3, [sp, #12]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003e84:	d043      	beq.n	34003f0e <HAL_PCD_IRQHandler+0x5fa>
  if (ep->xfer_count > ep->xfer_len)
34003e86:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
34003e8a:	429a      	cmp	r2, r3
34003e8c:	d83f      	bhi.n	34003f0e <HAL_PCD_IRQHandler+0x5fa>
  len = ep->xfer_len - ep->xfer_count;
34003e8e:	1a9b      	subs	r3, r3, r2
  if (len > ep->maxpacket)
34003e90:	69fa      	ldr	r2, [r7, #28]
34003e92:	4293      	cmp	r3, r2
34003e94:	bf28      	it	cs
34003e96:	4613      	movcs	r3, r2
  len32b = (len + 3U) / 4U;
34003e98:	3303      	adds	r3, #3
34003e9a:	089b      	lsrs	r3, r3, #2
34003e9c:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003e9e:	9b03      	ldr	r3, [sp, #12]
34003ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
34003ea4:	eb03 1349 	add.w	r3, r3, r9, lsl #5
34003ea8:	9305      	str	r3, [sp, #20]
34003eaa:	9b05      	ldr	r3, [sp, #20]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003eac:	9804      	ldr	r0, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003eae:	6999      	ldr	r1, [r3, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003eb0:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003eb4:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003eb6:	4281      	cmp	r1, r0
34003eb8:	d327      	bcc.n	34003f0a <HAL_PCD_IRQHandler+0x5f6>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003eba:	4293      	cmp	r3, r2
34003ebc:	d80b      	bhi.n	34003ed6 <HAL_PCD_IRQHandler+0x5c2>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003ebe:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003ec0:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003ec2:	f009 000f 	and.w	r0, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003ec6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003eca:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003ecc:	ea22 0201 	bic.w	r2, r2, r1
34003ed0:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
34003ed4:	e01b      	b.n	34003f0e <HAL_PCD_IRQHandler+0x5fa>
    len = ep->xfer_len - ep->xfer_count;
34003ed6:	eba3 0802 	sub.w	r8, r3, r2
    if (len > ep->maxpacket)
34003eda:	69fb      	ldr	r3, [r7, #28]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003edc:	9a02      	ldr	r2, [sp, #8]
    if (len > ep->maxpacket)
34003ede:	4598      	cmp	r8, r3
34003ee0:	bf28      	it	cs
34003ee2:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
34003ee4:	f108 0303 	add.w	r3, r8, #3
34003ee8:	089b      	lsrs	r3, r3, #2
34003eea:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003eec:	79a3      	ldrb	r3, [r4, #6]
34003eee:	9803      	ldr	r0, [sp, #12]
34003ef0:	9300      	str	r3, [sp, #0]
34003ef2:	6a39      	ldr	r1, [r7, #32]
34003ef4:	fa1f f388 	uxth.w	r3, r8
34003ef8:	f007 fcbe 	bl	3400b878 <USB_WritePacket>
    ep->xfer_buff  += len;
34003efc:	6a3b      	ldr	r3, [r7, #32]
34003efe:	4443      	add	r3, r8
34003f00:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
34003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34003f04:	4443      	add	r3, r8
34003f06:	62bb      	str	r3, [r7, #40]	@ 0x28
34003f08:	e7cf      	b.n	34003eaa <HAL_PCD_IRQHandler+0x596>
  if (ep->xfer_len <= ep->xfer_count)
34003f0a:	4293      	cmp	r3, r2
34003f0c:	d9d7      	bls.n	34003ebe <HAL_PCD_IRQHandler+0x5aa>
        epnum++;
34003f0e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
34003f12:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
34003f16:	3724      	adds	r7, #36	@ 0x24
34003f18:	f10a 0a20 	add.w	sl, sl, #32
34003f1c:	e566      	b.n	340039ec <HAL_PCD_IRQHandler+0xd8>
        HAL_PCD_ResumeCallback(hpcd);
34003f1e:	4620      	mov	r0, r4
34003f20:	f007 ffe6 	bl	3400bef0 <HAL_PCD_ResumeCallback>
34003f24:	e57b      	b.n	34003a1e <HAL_PCD_IRQHandler+0x10a>
        HAL_PCD_SuspendCallback(hpcd);
34003f26:	4620      	mov	r0, r4
34003f28:	f007 ffd8 	bl	3400bedc <HAL_PCD_SuspendCallback>
34003f2c:	e5a6      	b.n	34003a7c <HAL_PCD_IRQHandler+0x168>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003f2e:	6098      	str	r0, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
34003f30:	6819      	ldr	r1, [r3, #0]
34003f32:	3320      	adds	r3, #32
34003f34:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003f38:	f843 1c20 	str.w	r1, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
34003f3c:	f8c3 01e8 	str.w	r0, [r3, #488]	@ 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
34003f40:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003f44:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003f48:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
34003f4c:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003f50:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
34003f54:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003f58:	e5a7      	b.n	34003aaa <HAL_PCD_IRQHandler+0x196>
34003f5a:	bf00      	nop
34003f5c:	4f54300a 	.word	0x4f54300a
34003f60:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
34003f64:	696b      	ldr	r3, [r5, #20]
34003f66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34003f6a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
34003f6e:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
34003f70:	692b      	ldr	r3, [r5, #16]
34003f72:	f043 030b 	orr.w	r3, r3, #11
34003f76:	612b      	str	r3, [r5, #16]
34003f78:	e5ac      	b.n	34003ad4 <HAL_PCD_IRQHandler+0x1c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003f7a:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003f7c:	f04f 0924 	mov.w	r9, #36	@ 0x24
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003f80:	69b3      	ldr	r3, [r6, #24]
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003f82:	f204 2857 	addw	r8, r4, #599	@ 0x257
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
34003f8a:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003f8c:	7923      	ldrb	r3, [r4, #4]
34003f8e:	42bb      	cmp	r3, r7
34003f90:	f67f ade0 	bls.w	34003b54 <HAL_PCD_IRQHandler+0x240>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003f94:	fb09 f307 	mul.w	r3, r9, r7
34003f98:	f818 3003 	ldrb.w	r3, [r8, r3]
34003f9c:	2b01      	cmp	r3, #1
34003f9e:	d103      	bne.n	34003fa8 <HAL_PCD_IRQHandler+0x694>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
34003fa0:	4620      	mov	r0, r4
34003fa2:	b2f9      	uxtb	r1, r7
34003fa4:	f7ff fca2 	bl	340038ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003fa8:	3701      	adds	r7, #1
34003faa:	e7ef      	b.n	34003f8c <HAL_PCD_IRQHandler+0x678>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003fac:	f898 303c 	ldrb.w	r3, [r8, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
34003fb0:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003fb4:	2b01      	cmp	r3, #1
34003fb6:	d109      	bne.n	34003fcc <HAL_PCD_IRQHandler+0x6b8>
34003fb8:	2a00      	cmp	r2, #0
34003fba:	da07      	bge.n	34003fcc <HAL_PCD_IRQHandler+0x6b8>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003fbc:	f067 017f 	orn	r1, r7, #127	@ 0x7f
34003fc0:	4620      	mov	r0, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
34003fc2:	f888 303b 	strb.w	r3, [r8, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003fc6:	b2c9      	uxtb	r1, r1
34003fc8:	f7ff fc90 	bl	340038ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003fcc:	3701      	adds	r7, #1
34003fce:	f108 0824 	add.w	r8, r8, #36	@ 0x24
34003fd2:	f109 0920 	add.w	r9, r9, #32
34003fd6:	e5c6      	b.n	34003b66 <HAL_PCD_IRQHandler+0x252>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003fd8:	3224      	adds	r2, #36	@ 0x24
34003fda:	f10c 0c20 	add.w	ip, ip, #32
34003fde:	e5d7      	b.n	34003b90 <HAL_PCD_IRQHandler+0x27c>

34003fe0 <HAL_PCD_EP_Flush>:
{
34003fe0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
34003fe2:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
{
34003fe6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
34003fe8:	2b01      	cmp	r3, #1
34003fea:	d010      	beq.n	3400400e <HAL_PCD_EP_Flush+0x2e>
34003fec:	2301      	movs	r3, #1
34003fee:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
34003ff2:	060b      	lsls	r3, r1, #24
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003ff4:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
34003ff6:	d507      	bpl.n	34004008 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003ff8:	f001 010f 	and.w	r1, r1, #15
34003ffc:	f007 fb6c 	bl	3400b6d8 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
34004000:	2000      	movs	r0, #0
34004002:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
34004006:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
34004008:	f007 fb89 	bl	3400b71e <USB_FlushRxFifo>
3400400c:	e7f8      	b.n	34004000 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
3400400e:	2002      	movs	r0, #2
34004010:	e7f9      	b.n	34004006 <HAL_PCD_EP_Flush+0x26>

34004012 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
34004012:	4770      	bx	lr

34004014 <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34004014:	2804      	cmp	r0, #4
{
34004016:	b538      	push	{r3, r4, r5, lr}
34004018:	4605      	mov	r5, r0
3400401a:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
3400401c:	d912      	bls.n	34004044 <HAL_PWREx_ConfigVddIORange+0x30>
3400401e:	f240 316a 	movw	r1, #874	@ 0x36a
34004022:	481d      	ldr	r0, [pc, #116]	@ (34004098 <HAL_PWREx_ConfigVddIORange+0x84>)
34004024:	f7fd fa10 	bl	34001448 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34004028:	2c01      	cmp	r4, #1
3400402a:	d915      	bls.n	34004058 <HAL_PWREx_ConfigVddIORange+0x44>
3400402c:	f240 316b 	movw	r1, #875	@ 0x36b
34004030:	4819      	ldr	r0, [pc, #100]	@ (34004098 <HAL_PWREx_ConfigVddIORange+0x84>)
34004032:	f7fd fa09 	bl	34001448 <assert_failed>

  switch (VddIOPort)
34004036:	2d04      	cmp	r5, #4
34004038:	d80e      	bhi.n	34004058 <HAL_PWREx_ConfigVddIORange+0x44>
3400403a:	e8df f005 	tbb	[pc, r5]
3400403e:	0e06      	.short	0x0e06
34004040:	1c15      	.short	0x1c15
34004042:	24          	.byte	0x24
34004043:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34004044:	2901      	cmp	r1, #1
34004046:	d9f6      	bls.n	34004036 <HAL_PWREx_ConfigVddIORange+0x22>
34004048:	e7f0      	b.n	3400402c <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
3400404a:	4a14      	ldr	r2, [pc, #80]	@ (3400409c <HAL_PWREx_ConfigVddIORange+0x88>)
3400404c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
3400404e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34004052:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34004056:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
34004058:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
3400405a:	4a10      	ldr	r2, [pc, #64]	@ (3400409c <HAL_PWREx_ConfigVddIORange+0x88>)
3400405c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
3400405e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
34004062:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
34004066:	e7f6      	b.n	34004056 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34004068:	4a0c      	ldr	r2, [pc, #48]	@ (3400409c <HAL_PWREx_ConfigVddIORange+0x88>)
3400406a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
3400406c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
34004070:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
34004074:	e7ef      	b.n	34004056 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34004076:	4a09      	ldr	r2, [pc, #36]	@ (3400409c <HAL_PWREx_ConfigVddIORange+0x88>)
34004078:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400407a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3400407e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34004082:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
34004084:	e7e8      	b.n	34004058 <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34004086:	4a05      	ldr	r2, [pc, #20]	@ (3400409c <HAL_PWREx_ConfigVddIORange+0x88>)
34004088:	6b93      	ldr	r3, [r2, #56]	@ 0x38
3400408a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3400408e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34004092:	6393      	str	r3, [r2, #56]	@ 0x38
}
34004094:	e7e0      	b.n	34004058 <HAL_PWREx_ConfigVddIORange+0x44>
34004096:	bf00      	nop
34004098:	34010a5d 	.word	0x34010a5d
3400409c:	56024800 	.word	0x56024800

340040a0 <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
340040a0:	4a02      	ldr	r2, [pc, #8]	@ (340040ac <HAL_PWREx_EnableVddIO3+0xc>)
340040a2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
340040a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
340040a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
340040aa:	4770      	bx	lr
340040ac:	56024800 	.word	0x56024800

340040b0 <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
340040b0:	6803      	ldr	r3, [r0, #0]
340040b2:	4a1c      	ldr	r2, [pc, #112]	@ (34004124 <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
340040b4:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
340040b6:	4293      	cmp	r3, r2
{
340040b8:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
340040ba:	d02c      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
340040bc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340040c0:	4293      	cmp	r3, r2
340040c2:	d028      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
340040c4:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
340040c8:	3280      	adds	r2, #128	@ 0x80
340040ca:	4293      	cmp	r3, r2
340040cc:	d023      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
340040ce:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340040d2:	4293      	cmp	r3, r2
340040d4:	d01f      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
340040d6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
340040da:	3280      	adds	r2, #128	@ 0x80
340040dc:	4293      	cmp	r3, r2
340040de:	d01a      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
340040e0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340040e4:	4293      	cmp	r3, r2
340040e6:	d016      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
340040e8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
340040ec:	3280      	adds	r2, #128	@ 0x80
340040ee:	4293      	cmp	r3, r2
340040f0:	d011      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
340040f2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340040f6:	4293      	cmp	r3, r2
340040f8:	d00d      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
340040fa:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
340040fe:	3280      	adds	r2, #128	@ 0x80
34004100:	4293      	cmp	r3, r2
34004102:	d008      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
34004104:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34004108:	4293      	cmp	r3, r2
3400410a:	d004      	beq.n	34004116 <HAL_RAMCFG_EnableAXISRAM+0x66>
3400410c:	f240 4107 	movw	r1, #1031	@ 0x407
34004110:	4805      	ldr	r0, [pc, #20]	@ (34004128 <HAL_RAMCFG_EnableAXISRAM+0x78>)
34004112:	f7fd f999 	bl	34001448 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34004116:	6822      	ldr	r2, [r4, #0]
34004118:	6813      	ldr	r3, [r2, #0]
3400411a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3400411e:	6013      	str	r3, [r2, #0]
}
34004120:	bd10      	pop	{r4, pc}
34004122:	bf00      	nop
34004124:	52023080 	.word	0x52023080
34004128:	34010b08 	.word	0x34010b08

3400412c <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
3400412c:	4b02      	ldr	r3, [pc, #8]	@ (34004138 <LL_RCC_HSI_IsReady+0xc>)
3400412e:	6858      	ldr	r0, [r3, #4]
}
34004130:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34004134:	4770      	bx	lr
34004136:	bf00      	nop
34004138:	56028000 	.word	0x56028000

3400413c <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3400413c:	4b02      	ldr	r3, [pc, #8]	@ (34004148 <LL_RCC_MSI_IsReady+0xc>)
3400413e:	6858      	ldr	r0, [r3, #4]
}
34004140:	f3c0 0080 	ubfx	r0, r0, #2, #1
34004144:	4770      	bx	lr
34004146:	bf00      	nop
34004148:	56028000 	.word	0x56028000

3400414c <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3400414c:	4b02      	ldr	r3, [pc, #8]	@ (34004158 <LL_RCC_PLL1_IsReady+0xc>)
3400414e:	6858      	ldr	r0, [r3, #4]
}
34004150:	f3c0 2000 	ubfx	r0, r0, #8, #1
34004154:	4770      	bx	lr
34004156:	bf00      	nop
34004158:	56028000 	.word	0x56028000

3400415c <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
3400415c:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
3400415e:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34004160:	4d1b      	ldr	r5, [pc, #108]	@ (340041d0 <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34004162:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34004164:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34004166:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34004168:	021b      	lsls	r3, r3, #8
3400416a:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
3400416e:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34004170:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34004174:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34004178:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3400417a:	429a      	cmp	r2, r3
3400417c:	d126      	bne.n	340041cc <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3400417e:	4b15      	ldr	r3, [pc, #84]	@ (340041d4 <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34004180:	68ca      	ldr	r2, [r1, #12]
34004182:	58e3      	ldr	r3, [r4, r3]
34004184:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34004188:	4293      	cmp	r3, r2
3400418a:	d11f      	bne.n	340041cc <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3400418c:	4b12      	ldr	r3, [pc, #72]	@ (340041d8 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3400418e:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34004190:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34004194:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34004196:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
3400419a:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3400419e:	429a      	cmp	r2, r3
340041a0:	d114      	bne.n	340041cc <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340041a2:	4b0e      	ldr	r3, [pc, #56]	@ (340041dc <RCC_PLL_IsNewConfig+0x80>)
340041a4:	685a      	ldr	r2, [r3, #4]
340041a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
340041aa:	fa03 f000 	lsl.w	r0, r3, r0
340041ae:	4390      	bics	r0, r2
340041b0:	d00a      	beq.n	340041c8 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
340041b2:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
340041b4:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
340041b8:	bf0c      	ite	eq
340041ba:	2301      	moveq	r3, #1
340041bc:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
340041be:	6808      	ldr	r0, [r1, #0]
340041c0:	1ac0      	subs	r0, r0, r3
340041c2:	bf18      	it	ne
340041c4:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
340041c6:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
340041c8:	2302      	movs	r3, #2
340041ca:	e7f8      	b.n	340041be <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
340041cc:	2001      	movs	r0, #1
  return ret;
340041ce:	e7fa      	b.n	340041c6 <RCC_PLL_IsNewConfig+0x6a>
340041d0:	56028080 	.word	0x56028080
340041d4:	56028084 	.word	0x56028084
340041d8:	56028088 	.word	0x56028088
340041dc:	56028000 	.word	0x56028000

340041e0 <RCC_PLL_Enable>:
{
340041e0:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340041e2:	f44f 7480 	mov.w	r4, #256	@ 0x100
340041e6:	4e09      	ldr	r6, [pc, #36]	@ (3400420c <RCC_PLL_Enable+0x2c>)
340041e8:	4084      	lsls	r4, r0
340041ea:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
340041ee:	f7fe f9a1 	bl	34002534 <HAL_GetTick>
340041f2:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
340041f4:	6873      	ldr	r3, [r6, #4]
340041f6:	421c      	tst	r4, r3
340041f8:	d001      	beq.n	340041fe <RCC_PLL_Enable+0x1e>
  return ret;
340041fa:	2000      	movs	r0, #0
}
340041fc:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340041fe:	f7fe f999 	bl	34002534 <HAL_GetTick>
34004202:	1b40      	subs	r0, r0, r5
34004204:	2801      	cmp	r0, #1
34004206:	d9f5      	bls.n	340041f4 <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
34004208:	2003      	movs	r0, #3
3400420a:	e7f7      	b.n	340041fc <RCC_PLL_Enable+0x1c>
3400420c:	56028000 	.word	0x56028000

34004210 <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
34004210:	680b      	ldr	r3, [r1, #0]
{
34004212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
34004216:	2b02      	cmp	r3, #2
{
34004218:	4681      	mov	r9, r0
3400421a:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3400421c:	4f83      	ldr	r7, [pc, #524]	@ (3400442c <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3400421e:	4e84      	ldr	r6, [pc, #528]	@ (34004430 <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34004220:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
34004224:	f040 8099 	bne.w	3400435a <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34004228:	684b      	ldr	r3, [r1, #4]
3400422a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400422e:	d004      	beq.n	3400423a <RCC_PLL_Config+0x2a>
34004230:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34004234:	487f      	ldr	r0, [pc, #508]	@ (34004434 <RCC_PLL_Config+0x224>)
34004236:	f7fd f907 	bl	34001448 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
3400423a:	68eb      	ldr	r3, [r5, #12]
3400423c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34004240:	d304      	bcc.n	3400424c <RCC_PLL_Config+0x3c>
34004242:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34004246:	487b      	ldr	r0, [pc, #492]	@ (34004434 <RCC_PLL_Config+0x224>)
34004248:	f7fd f8fe 	bl	34001448 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
3400424c:	68ab      	ldr	r3, [r5, #8]
3400424e:	3b01      	subs	r3, #1
34004250:	2b3e      	cmp	r3, #62	@ 0x3e
34004252:	d904      	bls.n	3400425e <RCC_PLL_Config+0x4e>
34004254:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34004258:	4876      	ldr	r0, [pc, #472]	@ (34004434 <RCC_PLL_Config+0x224>)
3400425a:	f7fd f8f5 	bl	34001448 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
3400425e:	f640 12ba 	movw	r2, #2490	@ 0x9ba
34004262:	692b      	ldr	r3, [r5, #16]
34004264:	3b0a      	subs	r3, #10
34004266:	4293      	cmp	r3, r2
34004268:	d904      	bls.n	34004274 <RCC_PLL_Config+0x64>
3400426a:	f240 71fd 	movw	r1, #2045	@ 0x7fd
3400426e:	4871      	ldr	r0, [pc, #452]	@ (34004434 <RCC_PLL_Config+0x224>)
34004270:	f7fd f8ea 	bl	34001448 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34004274:	696b      	ldr	r3, [r5, #20]
34004276:	3b01      	subs	r3, #1
34004278:	2b06      	cmp	r3, #6
3400427a:	d904      	bls.n	34004286 <RCC_PLL_Config+0x76>
3400427c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
34004280:	486c      	ldr	r0, [pc, #432]	@ (34004434 <RCC_PLL_Config+0x224>)
34004282:	f7fd f8e1 	bl	34001448 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34004286:	69ab      	ldr	r3, [r5, #24]
34004288:	3b01      	subs	r3, #1
3400428a:	2b06      	cmp	r3, #6
3400428c:	d904      	bls.n	34004298 <RCC_PLL_Config+0x88>
3400428e:	f240 71ff 	movw	r1, #2047	@ 0x7ff
34004292:	4868      	ldr	r0, [pc, #416]	@ (34004434 <RCC_PLL_Config+0x224>)
34004294:	f7fd f8d8 	bl	34001448 <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004298:	f44f 7880 	mov.w	r8, #256	@ 0x100
3400429c:	4b66      	ldr	r3, [pc, #408]	@ (34004438 <RCC_PLL_Config+0x228>)
3400429e:	fa08 f809 	lsl.w	r8, r8, r9
340042a2:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
340042a6:	f7fe f945 	bl	34002534 <HAL_GetTick>
340042aa:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340042ac:	f8df a194 	ldr.w	sl, [pc, #404]	@ 34004444 <RCC_PLL_Config+0x234>
340042b0:	f8da 3004 	ldr.w	r3, [sl, #4]
340042b4:	ea38 0303 	bics.w	r3, r8, r3
340042b8:	d040      	beq.n	3400433c <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
340042ba:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
340042bc:	495f      	ldr	r1, [pc, #380]	@ (3400443c <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
340042be:	f043 0304 	orr.w	r3, r3, #4
340042c2:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
340042c4:	59e3      	ldr	r3, [r4, r7]
340042c6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
340042ca:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
340042cc:	692b      	ldr	r3, [r5, #16]
340042ce:	68aa      	ldr	r2, [r5, #8]
340042d0:	021b      	lsls	r3, r3, #8
340042d2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
340042d6:	686a      	ldr	r2, [r5, #4]
340042d8:	59e0      	ldr	r0, [r4, r7]
340042da:	4313      	orrs	r3, r2
340042dc:	4a58      	ldr	r2, [pc, #352]	@ (34004440 <RCC_PLL_Config+0x230>)
340042de:	4002      	ands	r2, r0
340042e0:	4313      	orrs	r3, r2
340042e2:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
340042e4:	59a2      	ldr	r2, [r4, r6]
340042e6:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
340042ea:	061b      	lsls	r3, r3, #24
340042ec:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
340042f0:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
340042f4:	4313      	orrs	r3, r2
340042f6:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
340042f8:	5863      	ldr	r3, [r4, r1]
340042fa:	68ea      	ldr	r2, [r5, #12]
340042fc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
34004300:	4313      	orrs	r3, r2
34004302:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34004304:	59a3      	ldr	r3, [r4, r6]
34004306:	f023 0308 	bic.w	r3, r3, #8
3400430a:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
3400430c:	68eb      	ldr	r3, [r5, #12]
3400430e:	b11b      	cbz	r3, 34004318 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34004310:	59a3      	ldr	r3, [r4, r6]
34004312:	f043 030a 	orr.w	r3, r3, #10
34004316:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34004318:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3400431a:	4d4a      	ldr	r5, [pc, #296]	@ (34004444 <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
3400431c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34004320:	f043 0301 	orr.w	r3, r3, #1
34004324:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34004326:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
3400432a:	f7fe f903 	bl	34002534 <HAL_GetTick>
3400432e:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34004330:	686b      	ldr	r3, [r5, #4]
34004332:	ea18 0f03 	tst.w	r8, r3
34004336:	d00a      	beq.n	3400434e <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
34004338:	2000      	movs	r0, #0
3400433a:	e006      	b.n	3400434a <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400433c:	f7fe f8fa 	bl	34002534 <HAL_GetTick>
34004340:	eba0 0009 	sub.w	r0, r0, r9
34004344:	2801      	cmp	r0, #1
34004346:	d9b3      	bls.n	340042b0 <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
34004348:	2003      	movs	r0, #3
}
3400434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400434e:	f7fe f8f1 	bl	34002534 <HAL_GetTick>
34004352:	1b00      	subs	r0, r0, r4
34004354:	2801      	cmp	r0, #1
34004356:	d9eb      	bls.n	34004330 <RCC_PLL_Config+0x120>
34004358:	e7f6      	b.n	34004348 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
3400435a:	2b03      	cmp	r3, #3
3400435c:	d146      	bne.n	340043ec <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
3400435e:	684b      	ldr	r3, [r1, #4]
34004360:	b37b      	cbz	r3, 340043c2 <RCC_PLL_Config+0x1b2>
34004362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004366:	d032      	beq.n	340043ce <RCC_PLL_Config+0x1be>
34004368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400436c:	d032      	beq.n	340043d4 <RCC_PLL_Config+0x1c4>
3400436e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004372:	d00d      	beq.n	34004390 <RCC_PLL_Config+0x180>
34004374:	f640 013f 	movw	r1, #2111	@ 0x83f
34004378:	482e      	ldr	r0, [pc, #184]	@ (34004434 <RCC_PLL_Config+0x224>)
3400437a:	f7fd f865 	bl	34001448 <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
3400437e:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
34004380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004384:	d026      	beq.n	340043d4 <RCC_PLL_Config+0x1c4>
34004386:	d803      	bhi.n	34004390 <RCC_PLL_Config+0x180>
34004388:	b1db      	cbz	r3, 340043c2 <RCC_PLL_Config+0x1b2>
3400438a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400438e:	d01e      	beq.n	340043ce <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004390:	f44f 7680 	mov.w	r6, #256	@ 0x100
34004394:	4b28      	ldr	r3, [pc, #160]	@ (34004438 <RCC_PLL_Config+0x228>)
34004396:	fa06 f609 	lsl.w	r6, r6, r9
3400439a:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
3400439c:	f7fe f8ca 	bl	34002534 <HAL_GetTick>
340043a0:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340043a2:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 34004444 <RCC_PLL_Config+0x234>
340043a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
340043aa:	ea36 0303 	bics.w	r3, r6, r3
340043ae:	d016      	beq.n	340043de <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
340043b0:	59e3      	ldr	r3, [r4, r7]
340043b2:	686a      	ldr	r2, [r5, #4]
340043b4:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
340043b8:	4313      	orrs	r3, r2
340043ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
340043be:	51e3      	str	r3, [r4, r7]
340043c0:	e7ba      	b.n	34004338 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
340043c2:	f7ff feb3 	bl	3400412c <LL_RCC_HSI_IsReady>
340043c6:	2800      	cmp	r0, #0
340043c8:	d1e2      	bne.n	34004390 <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
340043ca:	2001      	movs	r0, #1
340043cc:	e7bd      	b.n	3400434a <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
340043ce:	f7ff feb5 	bl	3400413c <LL_RCC_MSI_IsReady>
340043d2:	e7f8      	b.n	340043c6 <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340043d4:	4b1b      	ldr	r3, [pc, #108]	@ (34004444 <RCC_PLL_Config+0x234>)
340043d6:	685b      	ldr	r3, [r3, #4]
340043d8:	06db      	lsls	r3, r3, #27
340043da:	d5f6      	bpl.n	340043ca <RCC_PLL_Config+0x1ba>
340043dc:	e7d8      	b.n	34004390 <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340043de:	f7fe f8a9 	bl	34002534 <HAL_GetTick>
340043e2:	eba0 0008 	sub.w	r0, r0, r8
340043e6:	2801      	cmp	r0, #1
340043e8:	d9dd      	bls.n	340043a6 <RCC_PLL_Config+0x196>
340043ea:	e7ad      	b.n	34004348 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
340043ec:	2b01      	cmp	r3, #1
340043ee:	d1a3      	bne.n	34004338 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340043f0:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
340043f4:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340043f6:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
340043f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
340043fc:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340043fe:	4b0e      	ldr	r3, [pc, #56]	@ (34004438 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34004400:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 34004444 <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004404:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
34004406:	f7fe f895 	bl	34002534 <HAL_GetTick>
3400440a:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400440c:	f8d8 3004 	ldr.w	r3, [r8, #4]
34004410:	ea35 0303 	bics.w	r3, r5, r3
34004414:	d003      	beq.n	3400441e <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34004416:	59e3      	ldr	r3, [r4, r7]
34004418:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
3400441c:	e7cf      	b.n	340043be <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400441e:	f7fe f889 	bl	34002534 <HAL_GetTick>
34004422:	1b80      	subs	r0, r0, r6
34004424:	2801      	cmp	r0, #1
34004426:	d9f1      	bls.n	3400440c <RCC_PLL_Config+0x1fc>
34004428:	e78e      	b.n	34004348 <RCC_PLL_Config+0x138>
3400442a:	bf00      	nop
3400442c:	56028080 	.word	0x56028080
34004430:	56028088 	.word	0x56028088
34004434:	34010bb3 	.word	0x34010bb3
34004438:	56029000 	.word	0x56029000
3400443c:	56028084 	.word	0x56028084
34004440:	8c0000ff 	.word	0x8c0000ff
34004444:	56028000 	.word	0x56028000

34004448 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34004448:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
3400444c:	b508      	push	{r3, lr}
  switch (PLLSource1)
3400444e:	d021      	beq.n	34004494 <RCC_IC_CheckPLLSources+0x4c>
34004450:	d805      	bhi.n	3400445e <RCC_IC_CheckPLLSources+0x16>
34004452:	b9c0      	cbnz	r0, 34004486 <RCC_IC_CheckPLLSources+0x3e>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34004454:	f7ff fe7a 	bl	3400414c <LL_RCC_PLL1_IsReady>
34004458:	b178      	cbz	r0, 3400447a <RCC_IC_CheckPLLSources+0x32>
  uint32_t ret = 1U;
3400445a:	2201      	movs	r2, #1
3400445c:	e003      	b.n	34004466 <RCC_IC_CheckPLLSources+0x1e>
  switch (PLLSource1)
3400445e:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34004462:	d01e      	beq.n	340044a2 <RCC_IC_CheckPLLSources+0x5a>
34004464:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34004466:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3400446a:	d03c      	beq.n	340044e6 <RCC_IC_CheckPLLSources+0x9e>
3400446c:	d820      	bhi.n	340044b0 <RCC_IC_CheckPLLSources+0x68>
3400446e:	b349      	cbz	r1, 340044c4 <RCC_IC_CheckPLLSources+0x7c>
34004470:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
34004474:	d030      	beq.n	340044d8 <RCC_IC_CheckPLLSources+0x90>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
34004476:	2200      	movs	r2, #0
34004478:	e02c      	b.n	340044d4 <RCC_IC_CheckPLLSources+0x8c>
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400447a:	4b1e      	ldr	r3, [pc, #120]	@ (340044f4 <RCC_IC_CheckPLLSources+0xac>)
3400447c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34004480:	f3c2 62c0 	ubfx	r2, r2, #27, #1
34004484:	e7ef      	b.n	34004466 <RCC_IC_CheckPLLSources+0x1e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004486:	4b1b      	ldr	r3, [pc, #108]	@ (340044f4 <RCC_IC_CheckPLLSources+0xac>)
34004488:	685a      	ldr	r2, [r3, #4]
3400448a:	0592      	lsls	r2, r2, #22
3400448c:	d4e5      	bmi.n	3400445a <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3400448e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34004492:	e7f5      	b.n	34004480 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34004494:	4b17      	ldr	r3, [pc, #92]	@ (340044f4 <RCC_IC_CheckPLLSources+0xac>)
34004496:	685a      	ldr	r2, [r3, #4]
34004498:	0550      	lsls	r0, r2, #21
3400449a:	d4de      	bmi.n	3400445a <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400449c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
340044a0:	e7ee      	b.n	34004480 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340044a2:	4b14      	ldr	r3, [pc, #80]	@ (340044f4 <RCC_IC_CheckPLLSources+0xac>)
340044a4:	685a      	ldr	r2, [r3, #4]
340044a6:	0512      	lsls	r2, r2, #20
340044a8:	d4d7      	bmi.n	3400445a <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340044aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
340044ae:	e7e7      	b.n	34004480 <RCC_IC_CheckPLLSources+0x38>
  switch (PLLSource2)
340044b0:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
340044b4:	d1df      	bne.n	34004476 <RCC_IC_CheckPLLSources+0x2e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340044b6:	4b0f      	ldr	r3, [pc, #60]	@ (340044f4 <RCC_IC_CheckPLLSources+0xac>)
340044b8:	6859      	ldr	r1, [r3, #4]
340044ba:	0509      	lsls	r1, r1, #20
340044bc:	d40a      	bmi.n	340044d4 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340044be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340044c2:	e005      	b.n	340044d0 <RCC_IC_CheckPLLSources+0x88>
      if (LL_RCC_PLL1_IsReady() == 0U)
340044c4:	f7ff fe42 	bl	3400414c <LL_RCC_PLL1_IsReady>
340044c8:	b920      	cbnz	r0, 340044d4 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
340044ca:	4b0a      	ldr	r3, [pc, #40]	@ (340044f4 <RCC_IC_CheckPLLSources+0xac>)
340044cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340044d0:	0118      	lsls	r0, r3, #4
340044d2:	d5d0      	bpl.n	34004476 <RCC_IC_CheckPLLSources+0x2e>
      break;
  }

  return ret;
}
340044d4:	4610      	mov	r0, r2
340044d6:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340044d8:	4b06      	ldr	r3, [pc, #24]	@ (340044f4 <RCC_IC_CheckPLLSources+0xac>)
340044da:	6859      	ldr	r1, [r3, #4]
340044dc:	0589      	lsls	r1, r1, #22
340044de:	d4f9      	bmi.n	340044d4 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340044e4:	e7f4      	b.n	340044d0 <RCC_IC_CheckPLLSources+0x88>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340044e6:	4b03      	ldr	r3, [pc, #12]	@ (340044f4 <RCC_IC_CheckPLLSources+0xac>)
340044e8:	6859      	ldr	r1, [r3, #4]
340044ea:	0548      	lsls	r0, r1, #21
340044ec:	d4f2      	bmi.n	340044d4 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340044ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340044f2:	e7ed      	b.n	340044d0 <RCC_IC_CheckPLLSources+0x88>
340044f4:	56028000 	.word	0x56028000

340044f8 <HAL_RCC_OscConfig>:
{
340044f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
340044fc:	4604      	mov	r4, r0
340044fe:	b918      	cbnz	r0, 34004508 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
34004500:	2001      	movs	r0, #1
}
34004502:	b003      	add	sp, #12
34004504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
34004508:	6803      	ldr	r3, [r0, #0]
3400450a:	b133      	cbz	r3, 3400451a <HAL_RCC_OscConfig+0x22>
3400450c:	06dd      	lsls	r5, r3, #27
3400450e:	d104      	bne.n	3400451a <HAL_RCC_OscConfig+0x22>
34004510:	f44f 71b9 	mov.w	r1, #370	@ 0x172
34004514:	4893      	ldr	r0, [pc, #588]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
34004516:	f7fc ff97 	bl	34001448 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3400451a:	4b93      	ldr	r3, [pc, #588]	@ (34004768 <HAL_RCC_OscConfig+0x270>)
3400451c:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3400451e:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34004520:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004524:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34004528:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3400452c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004530:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34004534:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34004538:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400453c:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34004540:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
34004544:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34004546:	6823      	ldr	r3, [r4, #0]
34004548:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
3400454c:	07d8      	lsls	r0, r3, #31
3400454e:	d463      	bmi.n	34004618 <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34004550:	6823      	ldr	r3, [r4, #0]
34004552:	0799      	lsls	r1, r3, #30
34004554:	f100 80d4 	bmi.w	34004700 <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34004558:	6823      	ldr	r3, [r4, #0]
3400455a:	06d8      	lsls	r0, r3, #27
3400455c:	d522      	bpl.n	340045a4 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
3400455e:	69e3      	ldr	r3, [r4, #28]
34004560:	2b00      	cmp	r3, #0
34004562:	f000 8347 	beq.w	34004bf4 <HAL_RCC_OscConfig+0x6fc>
34004566:	2b04      	cmp	r3, #4
34004568:	f000 834d 	beq.w	34004c06 <HAL_RCC_OscConfig+0x70e>
3400456c:	f240 2105 	movw	r1, #517	@ 0x205
34004570:	487c      	ldr	r0, [pc, #496]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
34004572:	f7fc ff69 	bl	34001448 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34004576:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
3400457a:	f040 8148 	bne.w	3400480e <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3400457e:	69e3      	ldr	r3, [r4, #28]
34004580:	2b00      	cmp	r3, #0
34004582:	d0bd      	beq.n	34004500 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34004584:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004586:	2b1f      	cmp	r3, #31
34004588:	d904      	bls.n	34004594 <HAL_RCC_OscConfig+0x9c>
3400458a:	f44f 7106 	mov.w	r1, #536	@ 0x218
3400458e:	4875      	ldr	r0, [pc, #468]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
34004590:	f7fc ff5a 	bl	34001448 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34004594:	4a74      	ldr	r2, [pc, #464]	@ (34004768 <HAL_RCC_OscConfig+0x270>)
34004596:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34004598:	6c53      	ldr	r3, [r2, #68]	@ 0x44
3400459a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3400459e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340045a2:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
340045a4:	6823      	ldr	r3, [r4, #0]
340045a6:	0718      	lsls	r0, r3, #28
340045a8:	f100 8189 	bmi.w	340048be <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
340045ac:	6823      	ldr	r3, [r4, #0]
340045ae:	0759      	lsls	r1, r3, #29
340045b0:	f100 81b4 	bmi.w	3400491c <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
340045b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340045b6:	2b03      	cmp	r3, #3
340045b8:	d904      	bls.n	340045c4 <HAL_RCC_OscConfig+0xcc>
340045ba:	f240 21a5 	movw	r1, #677	@ 0x2a5
340045be:	4869      	ldr	r0, [pc, #420]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
340045c0:	f7fc ff42 	bl	34001448 <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
340045c4:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
340045c6:	2f00      	cmp	r7, #0
340045c8:	f040 8210 	bne.w	340049ec <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
340045cc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340045ce:	2b03      	cmp	r3, #3
340045d0:	d904      	bls.n	340045dc <HAL_RCC_OscConfig+0xe4>
340045d2:	f240 21d3 	movw	r1, #723	@ 0x2d3
340045d6:	4863      	ldr	r0, [pc, #396]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
340045d8:	f7fc ff36 	bl	34001448 <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
340045dc:	6c67      	ldr	r7, [r4, #68]	@ 0x44
340045de:	2f00      	cmp	r7, #0
340045e0:	f040 8246 	bne.w	34004a70 <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
340045e4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
340045e6:	2b03      	cmp	r3, #3
340045e8:	d904      	bls.n	340045f4 <HAL_RCC_OscConfig+0xfc>
340045ea:	f240 3101 	movw	r1, #769	@ 0x301
340045ee:	485d      	ldr	r0, [pc, #372]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
340045f0:	f7fc ff2a 	bl	34001448 <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
340045f4:	6e27      	ldr	r7, [r4, #96]	@ 0x60
340045f6:	2f00      	cmp	r7, #0
340045f8:	f040 827a 	bne.w	34004af0 <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
340045fc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340045fe:	2b03      	cmp	r3, #3
34004600:	d904      	bls.n	3400460c <HAL_RCC_OscConfig+0x114>
34004602:	f240 312e 	movw	r1, #814	@ 0x32e
34004606:	4857      	ldr	r0, [pc, #348]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
34004608:	f7fc ff1e 	bl	34001448 <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
3400460c:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
3400460e:	2f00      	cmp	r7, #0
34004610:	f040 82b0 	bne.w	34004b74 <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
34004614:	2000      	movs	r0, #0
34004616:	e774      	b.n	34004502 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
34004618:	6863      	ldr	r3, [r4, #4]
3400461a:	2b00      	cmp	r3, #0
3400461c:	f000 8313 	beq.w	34004c46 <HAL_RCC_OscConfig+0x74e>
34004620:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34004624:	2a10      	cmp	r2, #16
34004626:	f000 8305 	beq.w	34004c34 <HAL_RCC_OscConfig+0x73c>
3400462a:	4a50      	ldr	r2, [pc, #320]	@ (3400476c <HAL_RCC_OscConfig+0x274>)
3400462c:	4293      	cmp	r3, r2
3400462e:	f000 8301 	beq.w	34004c34 <HAL_RCC_OscConfig+0x73c>
34004632:	f44f 71c0 	mov.w	r1, #384	@ 0x180
34004636:	484b      	ldr	r0, [pc, #300]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
34004638:	f7fc ff06 	bl	34001448 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3400463c:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004640:	d103      	bne.n	3400464a <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
34004642:	6863      	ldr	r3, [r4, #4]
34004644:	2b00      	cmp	r3, #0
34004646:	d183      	bne.n	34004550 <HAL_RCC_OscConfig+0x58>
34004648:	e75a      	b.n	34004500 <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3400464a:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
3400464e:	d0f8      	beq.n	34004642 <HAL_RCC_OscConfig+0x14a>
34004650:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
34004654:	d101      	bne.n	3400465a <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34004656:	05fa      	lsls	r2, r7, #23
34004658:	d4f3      	bmi.n	34004642 <HAL_RCC_OscConfig+0x14a>
3400465a:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
3400465e:	d101      	bne.n	34004664 <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004660:	05bb      	lsls	r3, r7, #22
34004662:	d4ee      	bmi.n	34004642 <HAL_RCC_OscConfig+0x14a>
34004664:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
34004668:	d101      	bne.n	3400466e <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3400466a:	0578      	lsls	r0, r7, #21
3400466c:	d4e9      	bmi.n	34004642 <HAL_RCC_OscConfig+0x14a>
3400466e:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
34004672:	d101      	bne.n	34004678 <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34004674:	0539      	lsls	r1, r7, #20
34004676:	d4e4      	bmi.n	34004642 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34004678:	6862      	ldr	r2, [r4, #4]
3400467a:	4b3b      	ldr	r3, [pc, #236]	@ (34004768 <HAL_RCC_OscConfig+0x270>)
3400467c:	2a10      	cmp	r2, #16
3400467e:	d114      	bne.n	340046aa <HAL_RCC_OscConfig+0x1b2>
34004680:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004684:	f7fd ff56 	bl	34002534 <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34004688:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
3400468a:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
3400468c:	b35b      	cbz	r3, 340046e6 <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3400468e:	4b36      	ldr	r3, [pc, #216]	@ (34004768 <HAL_RCC_OscConfig+0x270>)
34004690:	685a      	ldr	r2, [r3, #4]
34004692:	06d2      	lsls	r2, r2, #27
34004694:	f53f af5c 	bmi.w	34004550 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34004698:	f7fd ff4c 	bl	34002534 <HAL_GetTick>
3400469c:	9b01      	ldr	r3, [sp, #4]
3400469e:	1ac0      	subs	r0, r0, r3
340046a0:	2864      	cmp	r0, #100	@ 0x64
340046a2:	4b31      	ldr	r3, [pc, #196]	@ (34004768 <HAL_RCC_OscConfig+0x270>)
340046a4:	d9f4      	bls.n	34004690 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
340046a6:	2003      	movs	r0, #3
340046a8:	e72b      	b.n	34004502 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
340046aa:	b93a      	cbnz	r2, 340046bc <HAL_RCC_OscConfig+0x1c4>
340046ac:	2110      	movs	r1, #16
340046ae:	4a30      	ldr	r2, [pc, #192]	@ (34004770 <HAL_RCC_OscConfig+0x278>)
340046b0:	6011      	str	r1, [r2, #0]
340046b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340046b4:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
340046b8:	655a      	str	r2, [r3, #84]	@ 0x54
340046ba:	e7e3      	b.n	34004684 <HAL_RCC_OscConfig+0x18c>
340046bc:	f248 0110 	movw	r1, #32784	@ 0x8010
340046c0:	428a      	cmp	r2, r1
340046c2:	d109      	bne.n	340046d8 <HAL_RCC_OscConfig+0x1e0>
340046c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340046c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340046ca:	655a      	str	r2, [r3, #84]	@ 0x54
340046cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340046ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
340046d2:	655a      	str	r2, [r3, #84]	@ 0x54
340046d4:	2210      	movs	r2, #16
340046d6:	e7d3      	b.n	34004680 <HAL_RCC_OscConfig+0x188>
340046d8:	4924      	ldr	r1, [pc, #144]	@ (3400476c <HAL_RCC_OscConfig+0x274>)
340046da:	428a      	cmp	r2, r1
340046dc:	d1e6      	bne.n	340046ac <HAL_RCC_OscConfig+0x1b4>
340046de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340046e0:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
340046e4:	e7f5      	b.n	340046d2 <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
340046e6:	4b20      	ldr	r3, [pc, #128]	@ (34004768 <HAL_RCC_OscConfig+0x270>)
340046e8:	685a      	ldr	r2, [r3, #4]
340046ea:	06d3      	lsls	r3, r2, #27
340046ec:	f57f af30 	bpl.w	34004550 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340046f0:	f7fd ff20 	bl	34002534 <HAL_GetTick>
340046f4:	9b01      	ldr	r3, [sp, #4]
340046f6:	1ac0      	subs	r0, r0, r3
340046f8:	2864      	cmp	r0, #100	@ 0x64
340046fa:	4b1b      	ldr	r3, [pc, #108]	@ (34004768 <HAL_RCC_OscConfig+0x270>)
340046fc:	d9f4      	bls.n	340046e8 <HAL_RCC_OscConfig+0x1f0>
340046fe:	e7d2      	b.n	340046a6 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
34004700:	68e3      	ldr	r3, [r4, #12]
34004702:	2b00      	cmp	r3, #0
34004704:	f000 8288 	beq.w	34004c18 <HAL_RCC_OscConfig+0x720>
34004708:	2b08      	cmp	r3, #8
3400470a:	f000 828c 	beq.w	34004c26 <HAL_RCC_OscConfig+0x72e>
3400470e:	f240 11b5 	movw	r1, #437	@ 0x1b5
34004712:	4814      	ldr	r0, [pc, #80]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
34004714:	f7fc fe98 	bl	34001448 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004718:	bb66      	cbnz	r6, 34004774 <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
3400471a:	68e3      	ldr	r3, [r4, #12]
3400471c:	2b00      	cmp	r3, #0
3400471e:	f43f aeef 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34004722:	6923      	ldr	r3, [r4, #16]
34004724:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
34004728:	d004      	beq.n	34004734 <HAL_RCC_OscConfig+0x23c>
3400472a:	f240 11c7 	movw	r1, #455	@ 0x1c7
3400472e:	480d      	ldr	r0, [pc, #52]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
34004730:	f7fc fe8a 	bl	34001448 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34004734:	6963      	ldr	r3, [r4, #20]
34004736:	2b7f      	cmp	r3, #127	@ 0x7f
34004738:	d904      	bls.n	34004744 <HAL_RCC_OscConfig+0x24c>
3400473a:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
3400473e:	4809      	ldr	r0, [pc, #36]	@ (34004764 <HAL_RCC_OscConfig+0x26c>)
34004740:	f7fc fe82 	bl	34001448 <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34004744:	4a08      	ldr	r2, [pc, #32]	@ (34004768 <HAL_RCC_OscConfig+0x270>)
34004746:	6921      	ldr	r1, [r4, #16]
34004748:	6c93      	ldr	r3, [r2, #72]	@ 0x48
3400474a:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
3400474e:	430b      	orrs	r3, r1
34004750:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34004752:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34004754:	6961      	ldr	r1, [r4, #20]
34004756:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
3400475a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400475e:	6493      	str	r3, [r2, #72]	@ 0x48
}
34004760:	e6fa      	b.n	34004558 <HAL_RCC_OscConfig+0x60>
34004762:	bf00      	nop
34004764:	34010bb3 	.word	0x34010bb3
34004768:	56028000 	.word	0x56028000
3400476c:	00018010 	.word	0x00018010
34004770:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004774:	2d00      	cmp	r5, #0
34004776:	d0d0      	beq.n	3400471a <HAL_RCC_OscConfig+0x222>
34004778:	f1bb 0f00 	cmp.w	fp, #0
3400477c:	d101      	bne.n	34004782 <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3400477e:	05f8      	lsls	r0, r7, #23
34004780:	d4cb      	bmi.n	3400471a <HAL_RCC_OscConfig+0x222>
34004782:	f1ba 0f00 	cmp.w	sl, #0
34004786:	d101      	bne.n	3400478c <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004788:	05b9      	lsls	r1, r7, #22
3400478a:	d4c6      	bmi.n	3400471a <HAL_RCC_OscConfig+0x222>
3400478c:	f1b9 0f00 	cmp.w	r9, #0
34004790:	d101      	bne.n	34004796 <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34004792:	057a      	lsls	r2, r7, #21
34004794:	d4c1      	bmi.n	3400471a <HAL_RCC_OscConfig+0x222>
34004796:	f1b8 0f00 	cmp.w	r8, #0
3400479a:	d101      	bne.n	340047a0 <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3400479c:	053b      	lsls	r3, r7, #20
3400479e:	d4bc      	bmi.n	3400471a <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
340047a0:	68e3      	ldr	r3, [r4, #12]
340047a2:	b313      	cbz	r3, 340047ea <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
340047a4:	6923      	ldr	r3, [r4, #16]
340047a6:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
340047aa:	d004      	beq.n	340047b6 <HAL_RCC_OscConfig+0x2be>
340047ac:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
340047b0:	48ab      	ldr	r0, [pc, #684]	@ (34004a60 <HAL_RCC_OscConfig+0x568>)
340047b2:	f7fc fe49 	bl	34001448 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
340047b6:	6963      	ldr	r3, [r4, #20]
340047b8:	2b7f      	cmp	r3, #127	@ 0x7f
340047ba:	d904      	bls.n	340047c6 <HAL_RCC_OscConfig+0x2ce>
340047bc:	f240 11d7 	movw	r1, #471	@ 0x1d7
340047c0:	48a7      	ldr	r0, [pc, #668]	@ (34004a60 <HAL_RCC_OscConfig+0x568>)
340047c2:	f7fc fe41 	bl	34001448 <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
340047c6:	2208      	movs	r2, #8
340047c8:	4ba6      	ldr	r3, [pc, #664]	@ (34004a64 <HAL_RCC_OscConfig+0x56c>)
340047ca:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
340047ce:	f7fd feb1 	bl	34002534 <HAL_GetTick>
340047d2:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
340047d4:	f7ff fcaa 	bl	3400412c <LL_RCC_HSI_IsReady>
340047d8:	2800      	cmp	r0, #0
340047da:	d1b3      	bne.n	34004744 <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
340047dc:	f7fd feaa 	bl	34002534 <HAL_GetTick>
340047e0:	9b01      	ldr	r3, [sp, #4]
340047e2:	1ac0      	subs	r0, r0, r3
340047e4:	2801      	cmp	r0, #1
340047e6:	d9f5      	bls.n	340047d4 <HAL_RCC_OscConfig+0x2dc>
340047e8:	e75d      	b.n	340046a6 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
340047ea:	2208      	movs	r2, #8
340047ec:	4b9e      	ldr	r3, [pc, #632]	@ (34004a68 <HAL_RCC_OscConfig+0x570>)
340047ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
340047f0:	f7fd fea0 	bl	34002534 <HAL_GetTick>
340047f4:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
340047f6:	f7ff fc99 	bl	3400412c <LL_RCC_HSI_IsReady>
340047fa:	2800      	cmp	r0, #0
340047fc:	f43f aeac 	beq.w	34004558 <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34004800:	f7fd fe98 	bl	34002534 <HAL_GetTick>
34004804:	9b01      	ldr	r3, [sp, #4]
34004806:	1ac0      	subs	r0, r0, r3
34004808:	2801      	cmp	r0, #1
3400480a:	d9f4      	bls.n	340047f6 <HAL_RCC_OscConfig+0x2fe>
3400480c:	e74b      	b.n	340046a6 <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3400480e:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004812:	f43f aeb4 	beq.w	3400457e <HAL_RCC_OscConfig+0x86>
34004816:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
3400481a:	d102      	bne.n	34004822 <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3400481c:	05f9      	lsls	r1, r7, #23
3400481e:	f53f aeae 	bmi.w	3400457e <HAL_RCC_OscConfig+0x86>
34004822:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
34004826:	d102      	bne.n	3400482e <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004828:	05ba      	lsls	r2, r7, #22
3400482a:	f53f aea8 	bmi.w	3400457e <HAL_RCC_OscConfig+0x86>
3400482e:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
34004832:	d102      	bne.n	3400483a <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34004834:	057b      	lsls	r3, r7, #21
34004836:	f53f aea2 	bmi.w	3400457e <HAL_RCC_OscConfig+0x86>
3400483a:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
3400483e:	d102      	bne.n	34004846 <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34004840:	053f      	lsls	r7, r7, #20
34004842:	f53f ae9c 	bmi.w	3400457e <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34004846:	69e3      	ldr	r3, [r4, #28]
34004848:	b343      	cbz	r3, 3400489c <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
3400484a:	6a23      	ldr	r3, [r4, #32]
3400484c:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
34004850:	d004      	beq.n	3400485c <HAL_RCC_OscConfig+0x364>
34004852:	f44f 7109 	mov.w	r1, #548	@ 0x224
34004856:	4882      	ldr	r0, [pc, #520]	@ (34004a60 <HAL_RCC_OscConfig+0x568>)
34004858:	f7fc fdf6 	bl	34001448 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
3400485c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400485e:	2b1f      	cmp	r3, #31
34004860:	d904      	bls.n	3400486c <HAL_RCC_OscConfig+0x374>
34004862:	f240 2125 	movw	r1, #549	@ 0x225
34004866:	487e      	ldr	r0, [pc, #504]	@ (34004a60 <HAL_RCC_OscConfig+0x568>)
34004868:	f7fc fdee 	bl	34001448 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
3400486c:	4a7d      	ldr	r2, [pc, #500]	@ (34004a64 <HAL_RCC_OscConfig+0x56c>)
3400486e:	6a21      	ldr	r1, [r4, #32]
34004870:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34004872:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
34004876:	430b      	orrs	r3, r1
34004878:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
3400487a:	2304      	movs	r3, #4
3400487c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34004880:	f7fd fe58 	bl	34002534 <HAL_GetTick>
34004884:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
34004886:	f7ff fc59 	bl	3400413c <LL_RCC_MSI_IsReady>
3400488a:	2800      	cmp	r0, #0
3400488c:	f47f ae82 	bne.w	34004594 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34004890:	f7fd fe50 	bl	34002534 <HAL_GetTick>
34004894:	1bc0      	subs	r0, r0, r7
34004896:	2801      	cmp	r0, #1
34004898:	d9f5      	bls.n	34004886 <HAL_RCC_OscConfig+0x38e>
3400489a:	e704      	b.n	340046a6 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
3400489c:	2204      	movs	r2, #4
3400489e:	4b72      	ldr	r3, [pc, #456]	@ (34004a68 <HAL_RCC_OscConfig+0x570>)
340048a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
340048a2:	f7fd fe47 	bl	34002534 <HAL_GetTick>
340048a6:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
340048a8:	f7ff fc48 	bl	3400413c <LL_RCC_MSI_IsReady>
340048ac:	2800      	cmp	r0, #0
340048ae:	f43f ae79 	beq.w	340045a4 <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
340048b2:	f7fd fe3f 	bl	34002534 <HAL_GetTick>
340048b6:	1bc0      	subs	r0, r0, r7
340048b8:	2801      	cmp	r0, #1
340048ba:	d9f5      	bls.n	340048a8 <HAL_RCC_OscConfig+0x3b0>
340048bc:	e6f3      	b.n	340046a6 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
340048be:	69a3      	ldr	r3, [r4, #24]
340048c0:	2b01      	cmp	r3, #1
340048c2:	d904      	bls.n	340048ce <HAL_RCC_OscConfig+0x3d6>
340048c4:	f240 2155 	movw	r1, #597	@ 0x255
340048c8:	4865      	ldr	r0, [pc, #404]	@ (34004a60 <HAL_RCC_OscConfig+0x568>)
340048ca:	f7fc fdbd 	bl	34001448 <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
340048ce:	69a2      	ldr	r2, [r4, #24]
340048d0:	2301      	movs	r3, #1
340048d2:	b18a      	cbz	r2, 340048f8 <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
340048d4:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 34004a64 <HAL_RCC_OscConfig+0x56c>
340048d8:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
340048dc:	f7fd fe2a 	bl	34002534 <HAL_GetTick>
340048e0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340048e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
340048e6:	07da      	lsls	r2, r3, #31
340048e8:	f53f ae60 	bmi.w	340045ac <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
340048ec:	f7fd fe22 	bl	34002534 <HAL_GetTick>
340048f0:	1bc0      	subs	r0, r0, r7
340048f2:	2801      	cmp	r0, #1
340048f4:	d9f5      	bls.n	340048e2 <HAL_RCC_OscConfig+0x3ea>
340048f6:	e6d6      	b.n	340046a6 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340048f8:	4a5b      	ldr	r2, [pc, #364]	@ (34004a68 <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340048fa:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 34004a64 <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340048fe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
34004900:	f7fd fe18 	bl	34002534 <HAL_GetTick>
34004904:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34004906:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
3400490a:	07db      	lsls	r3, r3, #31
3400490c:	f57f ae4e 	bpl.w	340045ac <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34004910:	f7fd fe10 	bl	34002534 <HAL_GetTick>
34004914:	1bc0      	subs	r0, r0, r7
34004916:	2801      	cmp	r0, #1
34004918:	d9f5      	bls.n	34004906 <HAL_RCC_OscConfig+0x40e>
3400491a:	e6c4      	b.n	340046a6 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
3400491c:	68a3      	ldr	r3, [r4, #8]
3400491e:	f033 0202 	bics.w	r2, r3, #2
34004922:	d00a      	beq.n	3400493a <HAL_RCC_OscConfig+0x442>
34004924:	f248 0202 	movw	r2, #32770	@ 0x8002
34004928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400492c:	4293      	cmp	r3, r2
3400492e:	d004      	beq.n	3400493a <HAL_RCC_OscConfig+0x442>
34004930:	f44f 7120 	mov.w	r1, #640	@ 0x280
34004934:	484a      	ldr	r0, [pc, #296]	@ (34004a60 <HAL_RCC_OscConfig+0x568>)
34004936:	f7fc fd87 	bl	34001448 <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3400493a:	68a3      	ldr	r3, [r4, #8]
3400493c:	4f49      	ldr	r7, [pc, #292]	@ (34004a64 <HAL_RCC_OscConfig+0x56c>)
3400493e:	2b02      	cmp	r3, #2
34004940:	d113      	bne.n	3400496a <HAL_RCC_OscConfig+0x472>
34004942:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004946:	f7fd fdf5 	bl	34002534 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400494a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
3400494e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34004950:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 34004a64 <HAL_RCC_OscConfig+0x56c>
34004954:	f8d9 3004 	ldr.w	r3, [r9, #4]
34004958:	0798      	lsls	r0, r3, #30
3400495a:	f53f ae2b 	bmi.w	340045b4 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400495e:	f7fd fde9 	bl	34002534 <HAL_GetTick>
34004962:	1bc3      	subs	r3, r0, r7
34004964:	4543      	cmp	r3, r8
34004966:	d9f5      	bls.n	34004954 <HAL_RCC_OscConfig+0x45c>
34004968:	e69d      	b.n	340046a6 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3400496a:	b9d3      	cbnz	r3, 340049a2 <HAL_RCC_OscConfig+0x4aa>
3400496c:	2202      	movs	r2, #2
3400496e:	4b3e      	ldr	r3, [pc, #248]	@ (34004a68 <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004970:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004974:	601a      	str	r2, [r3, #0]
34004976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004978:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400497c:	643b      	str	r3, [r7, #64]	@ 0x40
3400497e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004980:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34004984:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
34004986:	f7fd fdd5 	bl	34002534 <HAL_GetTick>
3400498a:	4680      	mov	r8, r0
3400498c:	687b      	ldr	r3, [r7, #4]
3400498e:	0799      	lsls	r1, r3, #30
34004990:	f57f ae10 	bpl.w	340045b4 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004994:	f7fd fdce 	bl	34002534 <HAL_GetTick>
34004998:	eba0 0308 	sub.w	r3, r0, r8
3400499c:	454b      	cmp	r3, r9
3400499e:	d9f5      	bls.n	3400498c <HAL_RCC_OscConfig+0x494>
340049a0:	e681      	b.n	340046a6 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
340049a2:	f248 0202 	movw	r2, #32770	@ 0x8002
340049a6:	4293      	cmp	r3, r2
340049a8:	d109      	bne.n	340049be <HAL_RCC_OscConfig+0x4c6>
340049aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340049ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340049b0:	643b      	str	r3, [r7, #64]	@ 0x40
340049b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340049b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340049b8:	643b      	str	r3, [r7, #64]	@ 0x40
340049ba:	2302      	movs	r3, #2
340049bc:	e7c1      	b.n	34004942 <HAL_RCC_OscConfig+0x44a>
340049be:	4a2b      	ldr	r2, [pc, #172]	@ (34004a6c <HAL_RCC_OscConfig+0x574>)
340049c0:	4293      	cmp	r3, r2
340049c2:	d107      	bne.n	340049d4 <HAL_RCC_OscConfig+0x4dc>
340049c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340049c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340049ca:	643b      	str	r3, [r7, #64]	@ 0x40
340049cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340049ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
340049d2:	e7f1      	b.n	340049b8 <HAL_RCC_OscConfig+0x4c0>
340049d4:	2202      	movs	r2, #2
340049d6:	4b24      	ldr	r3, [pc, #144]	@ (34004a68 <HAL_RCC_OscConfig+0x570>)
340049d8:	601a      	str	r2, [r3, #0]
340049da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340049dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
340049e0:	643b      	str	r3, [r7, #64]	@ 0x40
340049e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340049e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340049e8:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
340049ea:	e7ac      	b.n	34004946 <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
340049ec:	2000      	movs	r0, #0
340049ee:	f104 0128 	add.w	r1, r4, #40	@ 0x28
340049f2:	f7ff fbb3 	bl	3400415c <RCC_PLL_IsNewConfig>
340049f6:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
340049f8:	f7ff fba8 	bl	3400414c <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
340049fc:	2a01      	cmp	r2, #1
340049fe:	d125      	bne.n	34004a4c <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004a00:	4b18      	ldr	r3, [pc, #96]	@ (34004a64 <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34004a02:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34004a06:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004a0a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004a0e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004a12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004a16:	d103      	bne.n	34004a20 <HAL_RCC_OscConfig+0x528>
34004a18:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
34004a1c:	f43f ad70 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34004a20:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004a24:	d10b      	bne.n	34004a3e <HAL_RCC_OscConfig+0x546>
34004a26:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
34004a2a:	f43f ad69 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
34004a2e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
34004a32:	f43f ad65 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34004a36:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
34004a3a:	f43f ad61 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34004a3e:	2000      	movs	r0, #0
34004a40:	f7ff fbe6 	bl	34004210 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34004a44:	2800      	cmp	r0, #0
34004a46:	f43f adc1 	beq.w	340045cc <HAL_RCC_OscConfig+0xd4>
34004a4a:	e559      	b.n	34004500 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34004a4c:	2f02      	cmp	r7, #2
34004a4e:	f47f adbd 	bne.w	340045cc <HAL_RCC_OscConfig+0xd4>
34004a52:	2800      	cmp	r0, #0
34004a54:	f47f adba 	bne.w	340045cc <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34004a58:	f7ff fbc2 	bl	340041e0 <RCC_PLL_Enable>
34004a5c:	e7f2      	b.n	34004a44 <HAL_RCC_OscConfig+0x54c>
34004a5e:	bf00      	nop
34004a60:	34010bb3 	.word	0x34010bb3
34004a64:	56028000 	.word	0x56028000
34004a68:	56029000 	.word	0x56029000
34004a6c:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34004a70:	2001      	movs	r0, #1
34004a72:	f104 0144 	add.w	r1, r4, #68	@ 0x44
34004a76:	f7ff fb71 	bl	3400415c <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004a7a:	4b77      	ldr	r3, [pc, #476]	@ (34004c58 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004a7c:	2801      	cmp	r0, #1
34004a7e:	685a      	ldr	r2, [r3, #4]
34004a80:	d12c      	bne.n	34004adc <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34004a82:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004a86:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004a8a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004a8e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004a92:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004a96:	d105      	bne.n	34004aa4 <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004a98:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34004a9c:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34004aa0:	f43f ad2e 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34004aa4:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004aa8:	d111      	bne.n	34004ace <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004aaa:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004aae:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34004ab2:	f43f ad25 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004ab6:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004aba:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34004abe:	f43f ad1f 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004ac2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34004ac6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004aca:	f43f ad19 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34004ace:	2001      	movs	r0, #1
34004ad0:	f7ff fb9e 	bl	34004210 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004ad4:	2800      	cmp	r0, #0
34004ad6:	f43f ad85 	beq.w	340045e4 <HAL_RCC_OscConfig+0xec>
34004ada:	e511      	b.n	34004500 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34004adc:	2f02      	cmp	r7, #2
34004ade:	f47f ad81 	bne.w	340045e4 <HAL_RCC_OscConfig+0xec>
34004ae2:	0592      	lsls	r2, r2, #22
34004ae4:	f53f ad7e 	bmi.w	340045e4 <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004ae8:	2001      	movs	r0, #1
34004aea:	f7ff fb79 	bl	340041e0 <RCC_PLL_Enable>
34004aee:	e7f1      	b.n	34004ad4 <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34004af0:	2002      	movs	r0, #2
34004af2:	f104 0160 	add.w	r1, r4, #96	@ 0x60
34004af6:	f7ff fb31 	bl	3400415c <RCC_PLL_IsNewConfig>
34004afa:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34004afc:	f7ff fb26 	bl	3400414c <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34004b00:	2a01      	cmp	r2, #1
34004b02:	d12d      	bne.n	34004b60 <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004b04:	4b54      	ldr	r3, [pc, #336]	@ (34004c58 <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34004b06:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34004b0a:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004b0e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004b12:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004b16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004b1a:	d105      	bne.n	34004b28 <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004b1c:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34004b20:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
34004b24:	f43f acec 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34004b28:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004b2c:	d111      	bne.n	34004b52 <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004b2e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004b32:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34004b36:	f43f ace3 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004b3a:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004b3e:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34004b42:	f43f acdd 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004b46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34004b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004b4e:	f43f acd7 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34004b52:	2002      	movs	r0, #2
34004b54:	f7ff fb5c 	bl	34004210 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34004b58:	2800      	cmp	r0, #0
34004b5a:	f43f ad4f 	beq.w	340045fc <HAL_RCC_OscConfig+0x104>
34004b5e:	e4cf      	b.n	34004500 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34004b60:	2f02      	cmp	r7, #2
34004b62:	f47f ad4b 	bne.w	340045fc <HAL_RCC_OscConfig+0x104>
34004b66:	2800      	cmp	r0, #0
34004b68:	f47f ad48 	bne.w	340045fc <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34004b6c:	4638      	mov	r0, r7
34004b6e:	f7ff fb37 	bl	340041e0 <RCC_PLL_Enable>
34004b72:	e7f1      	b.n	34004b58 <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34004b74:	2003      	movs	r0, #3
34004b76:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
34004b7a:	f7ff faef 	bl	3400415c <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004b7e:	4b36      	ldr	r3, [pc, #216]	@ (34004c58 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004b80:	2801      	cmp	r0, #1
34004b82:	685a      	ldr	r2, [r3, #4]
34004b84:	d12c      	bne.n	34004be0 <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34004b86:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004b8a:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004b8e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004b92:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004b96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004b9a:	d105      	bne.n	34004ba8 <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004b9c:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34004ba0:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34004ba4:	f43f acac 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004ba8:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004bac:	d111      	bne.n	34004bd2 <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004bae:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004bb2:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34004bb6:	f43f aca3 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004bba:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004bbe:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34004bc2:	f43f ac9d 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004bc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004bca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004bce:	f43f ac97 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34004bd2:	2003      	movs	r0, #3
34004bd4:	f7ff fb1c 	bl	34004210 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004bd8:	3800      	subs	r0, #0
34004bda:	bf18      	it	ne
34004bdc:	2001      	movne	r0, #1
34004bde:	e490      	b.n	34004502 <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34004be0:	2f02      	cmp	r7, #2
34004be2:	f47f ad17 	bne.w	34004614 <HAL_RCC_OscConfig+0x11c>
34004be6:	0513      	lsls	r3, r2, #20
34004be8:	f53f ad14 	bmi.w	34004614 <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004bec:	2003      	movs	r0, #3
34004bee:	f7ff faf7 	bl	340041e0 <RCC_PLL_Enable>
34004bf2:	e7f1      	b.n	34004bd8 <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34004bf4:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004bf8:	f43f ac82 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
34004bfc:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004c00:	f47f ae09 	bne.w	34004816 <HAL_RCC_OscConfig+0x31e>
34004c04:	e47c      	b.n	34004500 <HAL_RCC_OscConfig+0x8>
34004c06:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004c0a:	f43f acbb 	beq.w	34004584 <HAL_RCC_OscConfig+0x8c>
34004c0e:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004c12:	f47f ae00 	bne.w	34004816 <HAL_RCC_OscConfig+0x31e>
34004c16:	e4b5      	b.n	34004584 <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004c18:	2e00      	cmp	r6, #0
34004c1a:	f43f ac71 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
34004c1e:	2d00      	cmp	r5, #0
34004c20:	f47f adaa 	bne.w	34004778 <HAL_RCC_OscConfig+0x280>
34004c24:	e46c      	b.n	34004500 <HAL_RCC_OscConfig+0x8>
34004c26:	2e00      	cmp	r6, #0
34004c28:	f43f ad7b 	beq.w	34004722 <HAL_RCC_OscConfig+0x22a>
34004c2c:	2d00      	cmp	r5, #0
34004c2e:	f43f ad78 	beq.w	34004722 <HAL_RCC_OscConfig+0x22a>
34004c32:	e5a1      	b.n	34004778 <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34004c34:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004c38:	f43f ac8a 	beq.w	34004550 <HAL_RCC_OscConfig+0x58>
34004c3c:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004c40:	f47f ad06 	bne.w	34004650 <HAL_RCC_OscConfig+0x158>
34004c44:	e484      	b.n	34004550 <HAL_RCC_OscConfig+0x58>
34004c46:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004c4a:	f43f ac59 	beq.w	34004500 <HAL_RCC_OscConfig+0x8>
34004c4e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004c52:	f47f acfd 	bne.w	34004650 <HAL_RCC_OscConfig+0x158>
34004c56:	e453      	b.n	34004500 <HAL_RCC_OscConfig+0x8>
34004c58:	56028000 	.word	0x56028000

34004c5c <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004c5c:	4b1f      	ldr	r3, [pc, #124]	@ (34004cdc <HAL_RCC_GetCpuClockFreq+0x80>)
{
34004c5e:	b510      	push	{r4, lr}
34004c60:	6a1a      	ldr	r2, [r3, #32]
34004c62:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
34004c66:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34004c6a:	d034      	beq.n	34004cd6 <HAL_RCC_GetCpuClockFreq+0x7a>
34004c6c:	d806      	bhi.n	34004c7c <HAL_RCC_GetCpuClockFreq+0x20>
34004c6e:	b952      	cbnz	r2, 34004c86 <HAL_RCC_GetCpuClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34004c72:	481b      	ldr	r0, [pc, #108]	@ (34004ce0 <HAL_RCC_GetCpuClockFreq+0x84>)
34004c74:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004c78:	40d8      	lsrs	r0, r3
}
34004c7a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetCpuClkSource())
34004c7c:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34004c80:	d009      	beq.n	34004c96 <HAL_RCC_GetCpuClockFreq+0x3a>
      switch (LL_RCC_IC1_GetSource())
34004c82:	2000      	movs	r0, #0
34004c84:	e7f9      	b.n	34004c7a <HAL_RCC_GetCpuClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34004c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34004c88:	4816      	ldr	r0, [pc, #88]	@ (34004ce4 <HAL_RCC_GetCpuClockFreq+0x88>)
34004c8a:	f413 7f00 	tst.w	r3, #512	@ 0x200
34004c8e:	4b16      	ldr	r3, [pc, #88]	@ (34004ce8 <HAL_RCC_GetCpuClockFreq+0x8c>)
34004c90:	bf08      	it	eq
34004c92:	4618      	moveq	r0, r3
34004c94:	e7f1      	b.n	34004c7a <HAL_RCC_GetCpuClockFreq+0x1e>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004c96:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004c9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004c9e:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004ca2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC1_GetSource())
34004ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004caa:	f100 0401 	add.w	r4, r0, #1
34004cae:	d00f      	beq.n	34004cd0 <HAL_RCC_GetCpuClockFreq+0x74>
34004cb0:	d805      	bhi.n	34004cbe <HAL_RCC_GetCpuClockFreq+0x62>
34004cb2:	b953      	cbnz	r3, 34004cca <HAL_RCC_GetCpuClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34004cb4:	f003 fbb6 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34004cb8:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34004cbc:	e7dd      	b.n	34004c7a <HAL_RCC_GetCpuClockFreq+0x1e>
      switch (LL_RCC_IC1_GetSource())
34004cbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004cc2:	d1de      	bne.n	34004c82 <HAL_RCC_GetCpuClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34004cc4:	f003 fc6e 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
34004cc8:	e7f6      	b.n	34004cb8 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34004cca:	f003 fbeb 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
34004cce:	e7f3      	b.n	34004cb8 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34004cd0:	f003 fc28 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34004cd4:	e7f0      	b.n	34004cb8 <HAL_RCC_GetCpuClockFreq+0x5c>
  switch (LL_RCC_GetCpuClkSource())
34004cd6:	4805      	ldr	r0, [pc, #20]	@ (34004cec <HAL_RCC_GetCpuClockFreq+0x90>)
34004cd8:	e7cf      	b.n	34004c7a <HAL_RCC_GetCpuClockFreq+0x1e>
34004cda:	bf00      	nop
34004cdc:	56028000 	.word	0x56028000
34004ce0:	03d09000 	.word	0x03d09000
34004ce4:	00f42400 	.word	0x00f42400
34004ce8:	003d0900 	.word	0x003d0900
34004cec:	02dc6c00 	.word	0x02dc6c00

34004cf0 <HAL_RCC_ClockConfig>:
{
34004cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
34004cf4:	4604      	mov	r4, r0
34004cf6:	b910      	cbnz	r0, 34004cfe <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
34004cf8:	2001      	movs	r0, #1
}
34004cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34004cfe:	6803      	ldr	r3, [r0, #0]
34004d00:	2b7f      	cmp	r3, #127	@ 0x7f
34004d02:	d904      	bls.n	34004d0e <HAL_RCC_ClockConfig+0x1e>
34004d04:	f240 317e 	movw	r1, #894	@ 0x37e
34004d08:	4893      	ldr	r0, [pc, #588]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004d0a:	f7fc fb9d 	bl	34001448 <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004d0e:	6823      	ldr	r3, [r4, #0]
34004d10:	071f      	lsls	r7, r3, #28
34004d12:	d513      	bpl.n	34004d3c <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004d14:	6923      	ldr	r3, [r4, #16]
34004d16:	2b07      	cmp	r3, #7
34004d18:	d904      	bls.n	34004d24 <HAL_RCC_ClockConfig+0x34>
34004d1a:	f240 3185 	movw	r1, #901	@ 0x385
34004d1e:	488e      	ldr	r0, [pc, #568]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004d20:	f7fc fb92 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004d24:	4a8d      	ldr	r2, [pc, #564]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004d26:	6921      	ldr	r1, [r4, #16]
34004d28:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004d2a:	f003 0307 	and.w	r3, r3, #7
34004d2e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004d30:	bf81      	itttt	hi
34004d32:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004d34:	f023 0307 	bichi.w	r3, r3, #7
34004d38:	430b      	orrhi	r3, r1
34004d3a:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004d3c:	6823      	ldr	r3, [r4, #0]
34004d3e:	06de      	lsls	r6, r3, #27
34004d40:	d516      	bpl.n	34004d70 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004d42:	6963      	ldr	r3, [r4, #20]
34004d44:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004d48:	d006      	beq.n	34004d58 <HAL_RCC_ClockConfig+0x68>
34004d4a:	2b40      	cmp	r3, #64	@ 0x40
34004d4c:	d004      	beq.n	34004d58 <HAL_RCC_ClockConfig+0x68>
34004d4e:	f240 318f 	movw	r1, #911	@ 0x38f
34004d52:	4881      	ldr	r0, [pc, #516]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004d54:	f7fc fb78 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004d58:	4a80      	ldr	r2, [pc, #512]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004d5a:	6961      	ldr	r1, [r4, #20]
34004d5c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004d5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004d62:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004d64:	bf81      	itttt	hi
34004d66:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004d68:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
34004d6c:	430b      	orrhi	r3, r1
34004d6e:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004d70:	6823      	ldr	r3, [r4, #0]
34004d72:	069d      	lsls	r5, r3, #26
34004d74:	d517      	bpl.n	34004da6 <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004d76:	69a3      	ldr	r3, [r4, #24]
34004d78:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004d7c:	d007      	beq.n	34004d8e <HAL_RCC_ClockConfig+0x9e>
34004d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004d82:	d004      	beq.n	34004d8e <HAL_RCC_ClockConfig+0x9e>
34004d84:	f240 3199 	movw	r1, #921	@ 0x399
34004d88:	4873      	ldr	r0, [pc, #460]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004d8a:	f7fc fb5d 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004d8e:	4a73      	ldr	r2, [pc, #460]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004d90:	69a1      	ldr	r1, [r4, #24]
34004d92:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004d94:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004d98:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004d9a:	bf81      	itttt	hi
34004d9c:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004d9e:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
34004da2:	430b      	orrhi	r3, r1
34004da4:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004da6:	6823      	ldr	r3, [r4, #0]
34004da8:	0658      	lsls	r0, r3, #25
34004daa:	d517      	bpl.n	34004ddc <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004dac:	69e3      	ldr	r3, [r4, #28]
34004dae:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004db2:	d007      	beq.n	34004dc4 <HAL_RCC_ClockConfig+0xd4>
34004db4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004db8:	d004      	beq.n	34004dc4 <HAL_RCC_ClockConfig+0xd4>
34004dba:	f240 31a3 	movw	r1, #931	@ 0x3a3
34004dbe:	4866      	ldr	r0, [pc, #408]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004dc0:	f7fc fb42 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004dc4:	4a65      	ldr	r2, [pc, #404]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004dc6:	69e1      	ldr	r1, [r4, #28]
34004dc8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004dca:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004dce:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004dd0:	bf81      	itttt	hi
34004dd2:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004dd4:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
34004dd8:	430b      	orrhi	r3, r1
34004dda:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004ddc:	6823      	ldr	r3, [r4, #0]
34004dde:	0759      	lsls	r1, r3, #29
34004de0:	d517      	bpl.n	34004e12 <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34004de2:	68e3      	ldr	r3, [r4, #12]
34004de4:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004de8:	d007      	beq.n	34004dfa <HAL_RCC_ClockConfig+0x10a>
34004dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004dee:	d004      	beq.n	34004dfa <HAL_RCC_ClockConfig+0x10a>
34004df0:	f240 31ad 	movw	r1, #941	@ 0x3ad
34004df4:	4858      	ldr	r0, [pc, #352]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004df6:	f7fc fb27 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34004dfa:	4a58      	ldr	r2, [pc, #352]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004dfc:	68e1      	ldr	r1, [r4, #12]
34004dfe:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004e00:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34004e04:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34004e06:	bf81      	itttt	hi
34004e08:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004e0a:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
34004e0e:	430b      	orrhi	r3, r1
34004e10:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34004e12:	6823      	ldr	r3, [r4, #0]
34004e14:	07da      	lsls	r2, r3, #31
34004e16:	d52a      	bpl.n	34004e6e <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
34004e18:	6863      	ldr	r3, [r4, #4]
34004e1a:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004e1e:	d004      	beq.n	34004e2a <HAL_RCC_ClockConfig+0x13a>
34004e20:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
34004e24:	484c      	ldr	r0, [pc, #304]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004e26:	f7fc fb0f 	bl	34001448 <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34004e2a:	6863      	ldr	r3, [r4, #4]
34004e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34004e30:	f040 809a 	bne.w	34004f68 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004e34:	4b49      	ldr	r3, [pc, #292]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004e36:	685b      	ldr	r3, [r3, #4]
34004e38:	06db      	lsls	r3, r3, #27
34004e3a:	f57f af5d 	bpl.w	34004cf8 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34004e3e:	4d47      	ldr	r5, [pc, #284]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004e40:	6862      	ldr	r2, [r4, #4]
34004e42:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004e44:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34004e48:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34004e4c:	4313      	orrs	r3, r2
34004e4e:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34004e50:	f7fd fb70 	bl	34002534 <HAL_GetTick>
34004e54:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004e56:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34004e58:	6862      	ldr	r2, [r4, #4]
34004e5a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34004e5e:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34004e62:	f040 80b7 	bne.w	34004fd4 <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34004e66:	f7ff fef9 	bl	34004c5c <HAL_RCC_GetCpuClockFreq>
34004e6a:	4b3d      	ldr	r3, [pc, #244]	@ (34004f60 <HAL_RCC_ClockConfig+0x270>)
34004e6c:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34004e6e:	6823      	ldr	r3, [r4, #0]
34004e70:	079f      	lsls	r7, r3, #30
34004e72:	f100 80b7 	bmi.w	34004fe4 <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004e76:	6823      	ldr	r3, [r4, #0]
34004e78:	075e      	lsls	r6, r3, #29
34004e7a:	f100 815c 	bmi.w	34005136 <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004e7e:	6823      	ldr	r3, [r4, #0]
34004e80:	0718      	lsls	r0, r3, #28
34004e82:	d513      	bpl.n	34004eac <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004e84:	6923      	ldr	r3, [r4, #16]
34004e86:	2b07      	cmp	r3, #7
34004e88:	d904      	bls.n	34004e94 <HAL_RCC_ClockConfig+0x1a4>
34004e8a:	f240 4163 	movw	r1, #1123	@ 0x463
34004e8e:	4832      	ldr	r0, [pc, #200]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004e90:	f7fc fada 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004e94:	4a31      	ldr	r2, [pc, #196]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004e96:	6921      	ldr	r1, [r4, #16]
34004e98:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004e9a:	f003 0307 	and.w	r3, r3, #7
34004e9e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004ea0:	bf3f      	itttt	cc
34004ea2:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004ea4:	f023 0307 	biccc.w	r3, r3, #7
34004ea8:	430b      	orrcc	r3, r1
34004eaa:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004eac:	6823      	ldr	r3, [r4, #0]
34004eae:	06d9      	lsls	r1, r3, #27
34004eb0:	d516      	bpl.n	34004ee0 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004eb2:	6963      	ldr	r3, [r4, #20]
34004eb4:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004eb8:	d006      	beq.n	34004ec8 <HAL_RCC_ClockConfig+0x1d8>
34004eba:	2b40      	cmp	r3, #64	@ 0x40
34004ebc:	d004      	beq.n	34004ec8 <HAL_RCC_ClockConfig+0x1d8>
34004ebe:	f240 416d 	movw	r1, #1133	@ 0x46d
34004ec2:	4825      	ldr	r0, [pc, #148]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004ec4:	f7fc fac0 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004ec8:	4a24      	ldr	r2, [pc, #144]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004eca:	6961      	ldr	r1, [r4, #20]
34004ecc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004ece:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004ed2:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004ed4:	bf3f      	itttt	cc
34004ed6:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004ed8:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
34004edc:	430b      	orrcc	r3, r1
34004ede:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004ee0:	6823      	ldr	r3, [r4, #0]
34004ee2:	069a      	lsls	r2, r3, #26
34004ee4:	d517      	bpl.n	34004f16 <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004ee6:	69a3      	ldr	r3, [r4, #24]
34004ee8:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004eec:	d007      	beq.n	34004efe <HAL_RCC_ClockConfig+0x20e>
34004eee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004ef2:	d004      	beq.n	34004efe <HAL_RCC_ClockConfig+0x20e>
34004ef4:	f240 4177 	movw	r1, #1143	@ 0x477
34004ef8:	4817      	ldr	r0, [pc, #92]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004efa:	f7fc faa5 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004efe:	4a17      	ldr	r2, [pc, #92]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004f00:	69a1      	ldr	r1, [r4, #24]
34004f02:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004f04:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004f08:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004f0a:	bf3f      	itttt	cc
34004f0c:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004f0e:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
34004f12:	430b      	orrcc	r3, r1
34004f14:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004f16:	6823      	ldr	r3, [r4, #0]
34004f18:	065b      	lsls	r3, r3, #25
34004f1a:	d517      	bpl.n	34004f4c <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004f1c:	69e3      	ldr	r3, [r4, #28]
34004f1e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004f22:	d007      	beq.n	34004f34 <HAL_RCC_ClockConfig+0x244>
34004f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004f28:	d004      	beq.n	34004f34 <HAL_RCC_ClockConfig+0x244>
34004f2a:	f240 4181 	movw	r1, #1153	@ 0x481
34004f2e:	480a      	ldr	r0, [pc, #40]	@ (34004f58 <HAL_RCC_ClockConfig+0x268>)
34004f30:	f7fc fa8a 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004f34:	4a09      	ldr	r2, [pc, #36]	@ (34004f5c <HAL_RCC_ClockConfig+0x26c>)
34004f36:	69e1      	ldr	r1, [r4, #28]
34004f38:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004f3a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004f3e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004f40:	bf3f      	itttt	cc
34004f42:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004f44:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34004f48:	430b      	orrcc	r3, r1
34004f4a:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34004f4c:	4b05      	ldr	r3, [pc, #20]	@ (34004f64 <HAL_RCC_ClockConfig+0x274>)
}
34004f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
34004f52:	6818      	ldr	r0, [r3, #0]
34004f54:	f7fd baaa 	b.w	340024ac <HAL_InitTick>
34004f58:	34010bb3 	.word	0x34010bb3
34004f5c:	56028000 	.word	0x56028000
34004f60:	3401282c 	.word	0x3401282c
34004f64:	34012834 	.word	0x34012834
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34004f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34004f6c:	d126      	bne.n	34004fbc <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34004f6e:	6a23      	ldr	r3, [r4, #32]
34004f70:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004f74:	d004      	beq.n	34004f80 <HAL_RCC_ClockConfig+0x290>
34004f76:	f240 31c7 	movw	r1, #967	@ 0x3c7
34004f7a:	487b      	ldr	r0, [pc, #492]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
34004f7c:	f7fc fa64 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34004f80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004f82:	3b01      	subs	r3, #1
34004f84:	2bff      	cmp	r3, #255	@ 0xff
34004f86:	d904      	bls.n	34004f92 <HAL_RCC_ClockConfig+0x2a2>
34004f88:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34004f8c:	4876      	ldr	r0, [pc, #472]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
34004f8e:	f7fc fa5b 	bl	34001448 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004f92:	4e76      	ldr	r6, [pc, #472]	@ (3400516c <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34004f94:	6a25      	ldr	r5, [r4, #32]
34004f96:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
34004f9a:	4629      	mov	r1, r5
34004f9c:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004fa0:	f7ff fa52 	bl	34004448 <RCC_IC_CheckPLLSources>
34004fa4:	2801      	cmp	r0, #1
34004fa6:	f47f aea7 	bne.w	34004cf8 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34004faa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004fac:	3b01      	subs	r3, #1
34004fae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
34004fb2:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34004fb6:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
34004fba:	e740      	b.n	34004e3e <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34004fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34004fc0:	d105      	bne.n	34004fce <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
34004fc2:	f7ff f8bb 	bl	3400413c <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
34004fc6:	2800      	cmp	r0, #0
34004fc8:	f47f af39 	bne.w	34004e3e <HAL_RCC_ClockConfig+0x14e>
34004fcc:	e694      	b.n	34004cf8 <HAL_RCC_ClockConfig+0x8>
34004fce:	f7ff f8ad 	bl	3400412c <LL_RCC_HSI_IsReady>
34004fd2:	e7f8      	b.n	34004fc6 <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004fd4:	f7fd faae 	bl	34002534 <HAL_GetTick>
34004fd8:	1b80      	subs	r0, r0, r6
34004fda:	42b8      	cmp	r0, r7
34004fdc:	f67f af3b 	bls.w	34004e56 <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
34004fe0:	2003      	movs	r0, #3
34004fe2:	e68a      	b.n	34004cfa <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34004fe4:	68a3      	ldr	r3, [r4, #8]
34004fe6:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34004fea:	d004      	beq.n	34004ff6 <HAL_RCC_ClockConfig+0x306>
34004fec:	f240 4101 	movw	r1, #1025	@ 0x401
34004ff0:	485d      	ldr	r0, [pc, #372]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
34004ff2:	f7fc fa29 	bl	34001448 <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34004ff6:	68a3      	ldr	r3, [r4, #8]
34004ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34004ffc:	d11e      	bne.n	3400503c <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004ffe:	4b5b      	ldr	r3, [pc, #364]	@ (3400516c <HAL_RCC_ClockConfig+0x47c>)
34005000:	685b      	ldr	r3, [r3, #4]
34005002:	06dd      	lsls	r5, r3, #27
34005004:	f57f ae78 	bpl.w	34004cf8 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34005008:	4d58      	ldr	r5, [pc, #352]	@ (3400516c <HAL_RCC_ClockConfig+0x47c>)
3400500a:	68a2      	ldr	r2, [r4, #8]
3400500c:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3400500e:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34005012:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34005016:	4313      	orrs	r3, r2
34005018:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
3400501a:	f7fd fa8b 	bl	34002534 <HAL_GetTick>
3400501e:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34005020:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34005022:	68a2      	ldr	r2, [r4, #8]
34005024:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34005028:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
3400502c:	f43f af23 	beq.w	34004e76 <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34005030:	f7fd fa80 	bl	34002534 <HAL_GetTick>
34005034:	1b80      	subs	r0, r0, r6
34005036:	42b8      	cmp	r0, r7
34005038:	d9f2      	bls.n	34005020 <HAL_RCC_ClockConfig+0x330>
3400503a:	e7d1      	b.n	34004fe0 <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
3400503c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34005040:	d16f      	bne.n	34005122 <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34005042:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34005044:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005048:	d004      	beq.n	34005054 <HAL_RCC_ClockConfig+0x364>
3400504a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
3400504e:	4846      	ldr	r0, [pc, #280]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
34005050:	f7fc f9fa 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34005054:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34005056:	3b01      	subs	r3, #1
34005058:	2bff      	cmp	r3, #255	@ 0xff
3400505a:	d904      	bls.n	34005066 <HAL_RCC_ClockConfig+0x376>
3400505c:	f240 4111 	movw	r1, #1041	@ 0x411
34005060:	4841      	ldr	r0, [pc, #260]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
34005062:	f7fc f9f1 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34005066:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34005068:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400506c:	d004      	beq.n	34005078 <HAL_RCC_ClockConfig+0x388>
3400506e:	f240 4112 	movw	r1, #1042	@ 0x412
34005072:	483d      	ldr	r0, [pc, #244]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
34005074:	f7fc f9e8 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34005078:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400507a:	3b01      	subs	r3, #1
3400507c:	2bff      	cmp	r3, #255	@ 0xff
3400507e:	d904      	bls.n	3400508a <HAL_RCC_ClockConfig+0x39a>
34005080:	f240 4113 	movw	r1, #1043	@ 0x413
34005084:	4838      	ldr	r0, [pc, #224]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
34005086:	f7fc f9df 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
3400508a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400508c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005090:	d004      	beq.n	3400509c <HAL_RCC_ClockConfig+0x3ac>
34005092:	f240 4114 	movw	r1, #1044	@ 0x414
34005096:	4834      	ldr	r0, [pc, #208]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
34005098:	f7fc f9d6 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
3400509c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400509e:	3b01      	subs	r3, #1
340050a0:	2bff      	cmp	r3, #255	@ 0xff
340050a2:	d904      	bls.n	340050ae <HAL_RCC_ClockConfig+0x3be>
340050a4:	f240 4115 	movw	r1, #1045	@ 0x415
340050a8:	482f      	ldr	r0, [pc, #188]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
340050aa:	f7fc f9cd 	bl	34001448 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340050ae:	4d2f      	ldr	r5, [pc, #188]	@ (3400516c <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
340050b0:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
340050b4:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
340050b8:	4641      	mov	r1, r8
340050ba:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340050be:	f7ff f9c3 	bl	34004448 <RCC_IC_CheckPLLSources>
340050c2:	2801      	cmp	r0, #1
340050c4:	f47f ae18 	bne.w	34004cf8 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340050c8:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
340050cc:	6b27      	ldr	r7, [r4, #48]	@ 0x30
340050ce:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340050d2:	4639      	mov	r1, r7
340050d4:	f7ff f9b8 	bl	34004448 <RCC_IC_CheckPLLSources>
340050d8:	2801      	cmp	r0, #1
340050da:	f47f ae0d 	bne.w	34004cf8 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340050de:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
340050e2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
340050e4:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340050e8:	4631      	mov	r1, r6
340050ea:	f7ff f9ad 	bl	34004448 <RCC_IC_CheckPLLSources>
340050ee:	2801      	cmp	r0, #1
340050f0:	f47f ae02 	bne.w	34004cf8 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
340050f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340050f6:	3b01      	subs	r3, #1
340050f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
340050fc:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34005100:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34005102:	3b01      	subs	r3, #1
34005104:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
34005108:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
3400510c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400510e:	3b01      	subs	r3, #1
34005110:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34005114:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34005118:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
3400511c:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
34005120:	e772      	b.n	34005008 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34005122:	b92b      	cbnz	r3, 34005130 <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
34005124:	f7ff f802 	bl	3400412c <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
34005128:	2800      	cmp	r0, #0
3400512a:	f47f af6d 	bne.w	34005008 <HAL_RCC_ClockConfig+0x318>
3400512e:	e5e3      	b.n	34004cf8 <HAL_RCC_ClockConfig+0x8>
34005130:	f7ff f804 	bl	3400413c <LL_RCC_MSI_IsReady>
34005134:	e7f8      	b.n	34005128 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34005136:	68e3      	ldr	r3, [r4, #12]
34005138:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3400513c:	d007      	beq.n	3400514e <HAL_RCC_ClockConfig+0x45e>
3400513e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34005142:	d004      	beq.n	3400514e <HAL_RCC_ClockConfig+0x45e>
34005144:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34005148:	4807      	ldr	r0, [pc, #28]	@ (34005168 <HAL_RCC_ClockConfig+0x478>)
3400514a:	f7fc f97d 	bl	34001448 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
3400514e:	4a07      	ldr	r2, [pc, #28]	@ (3400516c <HAL_RCC_ClockConfig+0x47c>)
34005150:	68e1      	ldr	r1, [r4, #12]
34005152:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34005154:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34005158:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3400515a:	bf3f      	itttt	cc
3400515c:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
3400515e:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
34005162:	430b      	orrcc	r3, r1
34005164:	6253      	strcc	r3, [r2, #36]	@ 0x24
34005166:	e68a      	b.n	34004e7e <HAL_RCC_ClockConfig+0x18e>
34005168:	34010bb3 	.word	0x34010bb3
3400516c:	56028000 	.word	0x56028000

34005170 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34005170:	4b1f      	ldr	r3, [pc, #124]	@ (340051f0 <HAL_RCC_GetSysClockFreq+0x80>)
{
34005172:	b510      	push	{r4, lr}
34005174:	6a1a      	ldr	r2, [r3, #32]
34005176:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
3400517a:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
3400517e:	d034      	beq.n	340051ea <HAL_RCC_GetSysClockFreq+0x7a>
34005180:	d806      	bhi.n	34005190 <HAL_RCC_GetSysClockFreq+0x20>
34005182:	b952      	cbnz	r2, 3400519a <HAL_RCC_GetSysClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34005184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34005186:	481b      	ldr	r0, [pc, #108]	@ (340051f4 <HAL_RCC_GetSysClockFreq+0x84>)
34005188:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400518c:	40d8      	lsrs	r0, r3
}
3400518e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSysClkSource())
34005190:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34005194:	d009      	beq.n	340051aa <HAL_RCC_GetSysClockFreq+0x3a>
      switch (LL_RCC_IC2_GetSource())
34005196:	2000      	movs	r0, #0
34005198:	e7f9      	b.n	3400518e <HAL_RCC_GetSysClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400519a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
3400519c:	4816      	ldr	r0, [pc, #88]	@ (340051f8 <HAL_RCC_GetSysClockFreq+0x88>)
3400519e:	f413 7f00 	tst.w	r3, #512	@ 0x200
340051a2:	4b16      	ldr	r3, [pc, #88]	@ (340051fc <HAL_RCC_GetSysClockFreq+0x8c>)
340051a4:	bf08      	it	eq
340051a6:	4618      	moveq	r0, r3
340051a8:	e7f1      	b.n	3400518e <HAL_RCC_GetSysClockFreq+0x1e>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
340051aa:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340051ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
340051b2:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340051b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC2_GetSource())
340051ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
340051be:	f100 0401 	add.w	r4, r0, #1
340051c2:	d00f      	beq.n	340051e4 <HAL_RCC_GetSysClockFreq+0x74>
340051c4:	d805      	bhi.n	340051d2 <HAL_RCC_GetSysClockFreq+0x62>
340051c6:	b953      	cbnz	r3, 340051de <HAL_RCC_GetSysClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
340051c8:	f003 f92c 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
340051cc:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
340051d0:	e7dd      	b.n	3400518e <HAL_RCC_GetSysClockFreq+0x1e>
      switch (LL_RCC_IC2_GetSource())
340051d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340051d6:	d1de      	bne.n	34005196 <HAL_RCC_GetSysClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
340051d8:	f003 f9e4 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
340051dc:	e7f6      	b.n	340051cc <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
340051de:	f003 f961 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
340051e2:	e7f3      	b.n	340051cc <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
340051e4:	f003 f99e 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
340051e8:	e7f0      	b.n	340051cc <HAL_RCC_GetSysClockFreq+0x5c>
  switch (LL_RCC_GetSysClkSource())
340051ea:	4805      	ldr	r0, [pc, #20]	@ (34005200 <HAL_RCC_GetSysClockFreq+0x90>)
340051ec:	e7cf      	b.n	3400518e <HAL_RCC_GetSysClockFreq+0x1e>
340051ee:	bf00      	nop
340051f0:	56028000 	.word	0x56028000
340051f4:	03d09000 	.word	0x03d09000
340051f8:	00f42400 	.word	0x00f42400
340051fc:	003d0900 	.word	0x003d0900
34005200:	02dc6c00 	.word	0x02dc6c00

34005204 <HAL_RCC_GetHCLKFreq>:
{
34005204:	b508      	push	{r3, lr}
  return LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler());
34005206:	f7ff ffb3 	bl	34005170 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3400520a:	4b03      	ldr	r3, [pc, #12]	@ (34005218 <HAL_RCC_GetHCLKFreq+0x14>)
3400520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400520e:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34005212:	40d8      	lsrs	r0, r3
34005214:	bd08      	pop	{r3, pc}
34005216:	bf00      	nop
34005218:	56028000 	.word	0x56028000

3400521c <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3400521c:	4a02      	ldr	r2, [pc, #8]	@ (34005228 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
3400521e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34005220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34005224:	6553      	str	r3, [r2, #84]	@ 0x54
}
34005226:	4770      	bx	lr
34005228:	56028000 	.word	0x56028000

3400522c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3400522c:	4a02      	ldr	r2, [pc, #8]	@ (34005238 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
3400522e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34005230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34005234:	6553      	str	r3, [r2, #84]	@ 0x54
}
34005236:	4770      	bx	lr
34005238:	56028000 	.word	0x56028000

3400523c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
3400523c:	4b02      	ldr	r3, [pc, #8]	@ (34005248 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
3400523e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
34005240:	f3c0 1080 	ubfx	r0, r0, #6, #1
34005244:	4770      	bx	lr
34005246:	bf00      	nop
34005248:	56028000 	.word	0x56028000

3400524c <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3400524c:	4b02      	ldr	r3, [pc, #8]	@ (34005258 <LL_RCC_HSE_IsReady+0xc>)
3400524e:	6858      	ldr	r0, [r3, #4]
}
34005250:	f3c0 1000 	ubfx	r0, r0, #4, #1
34005254:	4770      	bx	lr
34005256:	bf00      	nop
34005258:	56028000 	.word	0x56028000

3400525c <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
3400525c:	4b02      	ldr	r3, [pc, #8]	@ (34005268 <LL_RCC_HSI_IsReady+0xc>)
3400525e:	6858      	ldr	r0, [r3, #4]
}
34005260:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34005264:	4770      	bx	lr
34005266:	bf00      	nop
34005268:	56028000 	.word	0x56028000

3400526c <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3400526c:	4b02      	ldr	r3, [pc, #8]	@ (34005278 <LL_RCC_MSI_IsReady+0xc>)
3400526e:	6858      	ldr	r0, [r3, #4]
}
34005270:	f3c0 0080 	ubfx	r0, r0, #2, #1
34005274:	4770      	bx	lr
34005276:	bf00      	nop
34005278:	56028000 	.word	0x56028000

3400527c <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3400527c:	4b02      	ldr	r3, [pc, #8]	@ (34005288 <LL_RCC_LSE_IsReady+0xc>)
3400527e:	6858      	ldr	r0, [r3, #4]
}
34005280:	f3c0 0040 	ubfx	r0, r0, #1, #1
34005284:	4770      	bx	lr
34005286:	bf00      	nop
34005288:	56028000 	.word	0x56028000

3400528c <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
3400528c:	4907      	ldr	r1, [pc, #28]	@ (340052ac <LL_RCC_SetClockSource+0x20>)
{
3400528e:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34005290:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34005292:	f3c0 2504 	ubfx	r5, r0, #8, #5
34005296:	5863      	ldr	r3, [r4, r1]
34005298:	0e02      	lsrs	r2, r0, #24
3400529a:	40aa      	lsls	r2, r5
3400529c:	f3c0 4007 	ubfx	r0, r0, #16, #8
340052a0:	ea23 0302 	bic.w	r3, r3, r2
340052a4:	40a8      	lsls	r0, r5
340052a6:	4303      	orrs	r3, r0
340052a8:	5063      	str	r3, [r4, r1]
}
340052aa:	bd30      	pop	{r4, r5, pc}
340052ac:	56028144 	.word	0x56028144

340052b0 <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
340052b0:	4b05      	ldr	r3, [pc, #20]	@ (340052c8 <LL_RCC_GetClockSource+0x18>)
340052b2:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
340052b4:	58d1      	ldr	r1, [r2, r3]
340052b6:	f3c0 2204 	ubfx	r2, r0, #8, #5
340052ba:	0e03      	lsrs	r3, r0, #24
340052bc:	4093      	lsls	r3, r2
340052be:	400b      	ands	r3, r1
340052c0:	40d3      	lsrs	r3, r2
}
340052c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
340052c6:	4770      	bx	lr
340052c8:	56028144 	.word	0x56028144

340052cc <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
340052cc:	4b02      	ldr	r3, [pc, #8]	@ (340052d8 <LL_RCC_IC7_IsEnabled+0xc>)
340052ce:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340052d2:	f3c0 1080 	ubfx	r0, r0, #6, #1
340052d6:	4770      	bx	lr
340052d8:	56028000 	.word	0x56028000

340052dc <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
340052dc:	4b03      	ldr	r3, [pc, #12]	@ (340052ec <LL_RCC_IC7_GetDivider+0x10>)
340052de:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
340052e2:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340052e6:	3001      	adds	r0, #1
340052e8:	4770      	bx	lr
340052ea:	bf00      	nop
340052ec:	56028000 	.word	0x56028000

340052f0 <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
340052f0:	4b02      	ldr	r3, [pc, #8]	@ (340052fc <LL_RCC_IC8_IsEnabled+0xc>)
340052f2:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340052f6:	f3c0 10c0 	ubfx	r0, r0, #7, #1
340052fa:	4770      	bx	lr
340052fc:	56028000 	.word	0x56028000

34005300 <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34005300:	4b03      	ldr	r3, [pc, #12]	@ (34005310 <LL_RCC_IC8_GetDivider+0x10>)
34005302:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
34005306:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3400530a:	3001      	adds	r0, #1
3400530c:	4770      	bx	lr
3400530e:	bf00      	nop
34005310:	56028000 	.word	0x56028000

34005314 <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34005314:	4b02      	ldr	r3, [pc, #8]	@ (34005320 <LL_RCC_IC9_IsEnabled+0xc>)
34005316:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3400531a:	f3c0 2000 	ubfx	r0, r0, #8, #1
3400531e:	4770      	bx	lr
34005320:	56028000 	.word	0x56028000

34005324 <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34005324:	4b03      	ldr	r3, [pc, #12]	@ (34005334 <LL_RCC_IC9_GetDivider+0x10>)
34005326:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
3400532a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3400532e:	3001      	adds	r0, #1
34005330:	4770      	bx	lr
34005332:	bf00      	nop
34005334:	56028000 	.word	0x56028000

34005338 <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34005338:	4b02      	ldr	r3, [pc, #8]	@ (34005344 <LL_RCC_IC14_IsEnabled+0xc>)
3400533a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3400533e:	f3c0 3040 	ubfx	r0, r0, #13, #1
34005342:	4770      	bx	lr
34005344:	56028000 	.word	0x56028000

34005348 <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34005348:	4b03      	ldr	r3, [pc, #12]	@ (34005358 <LL_RCC_IC14_GetDivider+0x10>)
3400534a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
3400534e:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34005352:	3001      	adds	r0, #1
34005354:	4770      	bx	lr
34005356:	bf00      	nop
34005358:	56028000 	.word	0x56028000

3400535c <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
3400535c:	4b02      	ldr	r3, [pc, #8]	@ (34005368 <LL_RCC_IC15_IsEnabled+0xc>)
3400535e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34005362:	f3c0 3080 	ubfx	r0, r0, #14, #1
34005366:	4770      	bx	lr
34005368:	56028000 	.word	0x56028000

3400536c <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
3400536c:	4b03      	ldr	r3, [pc, #12]	@ (3400537c <LL_RCC_IC15_GetDivider+0x10>)
3400536e:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
34005372:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34005376:	3001      	adds	r0, #1
34005378:	4770      	bx	lr
3400537a:	bf00      	nop
3400537c:	56028000 	.word	0x56028000

34005380 <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34005380:	4b02      	ldr	r3, [pc, #8]	@ (3400538c <RCCEx_GetHCLKFreq+0xc>)
34005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34005384:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34005388:	40d8      	lsrs	r0, r3
3400538a:	4770      	bx	lr
3400538c:	56028000 	.word	0x56028000

34005390 <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
34005390:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34005394:	b508      	push	{r3, lr}
  switch (PLLsource)
34005396:	d01d      	beq.n	340053d4 <RCCEx_GetPLLSourceFreq+0x44>
34005398:	d80a      	bhi.n	340053b0 <RCCEx_GetPLLSourceFreq+0x20>
3400539a:	b970      	cbnz	r0, 340053ba <RCCEx_GetPLLSourceFreq+0x2a>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3400539c:	f7ff ff5e 	bl	3400525c <LL_RCC_HSI_IsReady>
340053a0:	b148      	cbz	r0, 340053b6 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340053a2:	4b10      	ldr	r3, [pc, #64]	@ (340053e4 <RCCEx_GetPLLSourceFreq+0x54>)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340053a4:	4810      	ldr	r0, [pc, #64]	@ (340053e8 <RCCEx_GetPLLSourceFreq+0x58>)
340053a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340053a8:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340053ac:	40d8      	lsrs	r0, r3
340053ae:	e003      	b.n	340053b8 <RCCEx_GetPLLSourceFreq+0x28>
  switch (PLLsource)
340053b0:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
340053b4:	d014      	beq.n	340053e0 <RCCEx_GetPLLSourceFreq+0x50>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
340053b6:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
340053b8:	bd08      	pop	{r3, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
340053ba:	f7ff ff57 	bl	3400526c <LL_RCC_MSI_IsReady>
340053be:	2800      	cmp	r0, #0
340053c0:	d0f9      	beq.n	340053b6 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
340053c2:	4b08      	ldr	r3, [pc, #32]	@ (340053e4 <RCCEx_GetPLLSourceFreq+0x54>)
          pllinputfreq = MSI_VALUE;
340053c4:	4809      	ldr	r0, [pc, #36]	@ (340053ec <RCCEx_GetPLLSourceFreq+0x5c>)
340053c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340053c8:	f413 7f00 	tst.w	r3, #512	@ 0x200
340053cc:	4b08      	ldr	r3, [pc, #32]	@ (340053f0 <RCCEx_GetPLLSourceFreq+0x60>)
340053ce:	bf08      	it	eq
340053d0:	4618      	moveq	r0, r3
340053d2:	e7f1      	b.n	340053b8 <RCCEx_GetPLLSourceFreq+0x28>
      if (LL_RCC_HSE_IsReady() != 0U)
340053d4:	f7ff ff3a 	bl	3400524c <LL_RCC_HSE_IsReady>
340053d8:	2800      	cmp	r0, #0
340053da:	d0ec      	beq.n	340053b6 <RCCEx_GetPLLSourceFreq+0x26>
        pllinputfreq = HSE_VALUE;
340053dc:	4805      	ldr	r0, [pc, #20]	@ (340053f4 <RCCEx_GetPLLSourceFreq+0x64>)
340053de:	e7eb      	b.n	340053b8 <RCCEx_GetPLLSourceFreq+0x28>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
340053e0:	4805      	ldr	r0, [pc, #20]	@ (340053f8 <RCCEx_GetPLLSourceFreq+0x68>)
340053e2:	e7e9      	b.n	340053b8 <RCCEx_GetPLLSourceFreq+0x28>
340053e4:	56028000 	.word	0x56028000
340053e8:	03d09000 	.word	0x03d09000
340053ec:	00f42400 	.word	0x00f42400
340053f0:	003d0900 	.word	0x003d0900
340053f4:	02dc6c00 	.word	0x02dc6c00
340053f8:	00bb8000 	.word	0x00bb8000

340053fc <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
340053fc:	ee07 2a10 	vmov	s14, r2
34005400:	ee06 3a10 	vmov	s12, r3
34005404:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34005408:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
3400540c:	eddf 5a10 	vldr	s11, [pc, #64]	@ 34005450 <RCCEx_CalcPLLFreq+0x54>
34005410:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
34005414:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34005418:	eea6 7a25 	vfma.f32	s14, s12, s11
3400541c:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005420:	ee67 7a87 	vmul.f32	s15, s15, s14
34005424:	eeb8 7a66 	vcvt.f32.u32	s14, s13
34005428:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
3400542c:	eddd 7a00 	vldr	s15, [sp]
34005430:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005434:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
34005438:	eddd 7a01 	vldr	s15, [sp, #4]
3400543c:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005440:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
34005444:	eefc 7ac7 	vcvt.u32.f32	s15, s14
34005448:	ee17 0a90 	vmov	r0, s15
3400544c:	4770      	bx	lr
3400544e:	bf00      	nop
34005450:	33800000 	.word	0x33800000

34005454 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34005454:	e9d0 2300 	ldrd	r2, r3, [r0]
34005458:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
3400545c:	431a      	orrs	r2, r3
{
3400545e:	b570      	push	{r4, r5, r6, lr}
34005460:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34005462:	d103      	bne.n	3400546c <HAL_RCCEx_PeriphCLKConfig+0x18>
34005464:	2188      	movs	r1, #136	@ 0x88
34005466:	4861      	ldr	r0, [pc, #388]	@ (340055ec <HAL_RCCEx_PeriphCLKConfig+0x198>)
34005468:	f7fb ffee 	bl	34001448 <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
3400546c:	6823      	ldr	r3, [r4, #0]
3400546e:	011a      	lsls	r2, r3, #4
34005470:	f140 808e 	bpl.w	34005590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
34005474:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34005478:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3400547c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
34005480:	d05a      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34005486:	d057      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005488:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
3400548c:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
34005490:	d052      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005492:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34005496:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
3400549a:	d04d      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400549c:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
340054a0:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
340054a4:	d048      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054a6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
340054aa:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
340054ae:	d043      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
340054b4:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
340054b8:	d03e      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340054be:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
340054c2:	d039      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054c4:	494a      	ldr	r1, [pc, #296]	@ (340055f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
340054c6:	428a      	cmp	r2, r1
340054c8:	d036      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054ca:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340054ce:	428a      	cmp	r2, r1
340054d0:	d032      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054d2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340054d6:	428a      	cmp	r2, r1
340054d8:	d02e      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054da:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
340054de:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340054e2:	4288      	cmp	r0, r1
340054e4:	d028      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054e6:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
340054ea:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
340054ee:	4288      	cmp	r0, r1
340054f0:	d022      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054f2:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
340054f6:	428a      	cmp	r2, r1
340054f8:	d01e      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340054fa:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340054fe:	428a      	cmp	r2, r1
34005500:	d01a      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005502:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005506:	428a      	cmp	r2, r1
34005508:	d016      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400550a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400550e:	428a      	cmp	r2, r1
34005510:	d012      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005512:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005516:	428a      	cmp	r2, r1
34005518:	d00e      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400551a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400551e:	428a      	cmp	r2, r1
34005520:	d00a      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005522:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005526:	428a      	cmp	r2, r1
34005528:	d006      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400552a:	4a32      	ldr	r2, [pc, #200]	@ (340055f4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
3400552c:	4293      	cmp	r3, r2
3400552e:	d003      	beq.n	34005538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005530:	218e      	movs	r1, #142	@ 0x8e
34005532:	482e      	ldr	r0, [pc, #184]	@ (340055ec <HAL_RCCEx_PeriphCLKConfig+0x198>)
34005534:	f7fb ff88 	bl	34001448 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34005538:	4b2f      	ldr	r3, [pc, #188]	@ (340055f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3400553a:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
3400553e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34005542:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
34005546:	d13b      	bne.n	340055c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34005548:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
3400554c:	d108      	bne.n	34005560 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
3400554e:	f7fc fff1 	bl	34002534 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34005552:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
34005556:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
34005558:	f7ff fe90 	bl	3400527c <LL_RCC_LSE_IsReady>
3400555c:	2800      	cmp	r0, #0
3400555e:	d03d      	beq.n	340055dc <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34005560:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34005564:	4a24      	ldr	r2, [pc, #144]	@ (340055f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
34005566:	f403 7040 	and.w	r0, r3, #768	@ 0x300
3400556a:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
3400556e:	d108      	bne.n	34005582 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34005570:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
34005574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34005578:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
3400557c:	430b      	orrs	r3, r1
3400557e:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34005582:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34005586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3400558a:	4303      	orrs	r3, r0
3400558c:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34005590:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
34005592:	6823      	ldr	r3, [r4, #0]
34005594:	075e      	lsls	r6, r3, #29
34005596:	d55f      	bpl.n	34005658 <HAL_RCCEx_PeriphCLKConfig+0x204>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
34005598:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3400559c:	2b07      	cmp	r3, #7
3400559e:	d903      	bls.n	340055a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
340055a0:	21d4      	movs	r1, #212	@ 0xd4
340055a2:	4812      	ldr	r0, [pc, #72]	@ (340055ec <HAL_RCCEx_PeriphCLKConfig+0x198>)
340055a4:	f7fb ff50 	bl	34001448 <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
340055a8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
340055ac:	3b03      	subs	r3, #3
340055ae:	2b04      	cmp	r3, #4
340055b0:	d848      	bhi.n	34005644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
340055b2:	e8df f013 	tbh	[pc, r3, lsl #1]
340055b6:	0f27      	.short	0x0f27
340055b8:	0ee10025 	.word	0x0ee10025
340055bc:	0f500f04 	.word	0x0f500f04
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
340055c0:	f401 7240 	and.w	r2, r1, #768	@ 0x300
340055c4:	429a      	cmp	r2, r3
340055c6:	d0bf      	beq.n	34005548 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
340055c8:	4b0c      	ldr	r3, [pc, #48]	@ (340055fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
340055ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
340055cc:	f042 0201 	orr.w	r2, r2, #1
340055d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
340055d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340055d4:	07db      	lsls	r3, r3, #31
340055d6:	d4b7      	bmi.n	34005548 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
340055d8:	2501      	movs	r5, #1
340055da:	e7da      	b.n	34005592 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340055dc:	f7fc ffaa 	bl	34002534 <HAL_GetTick>
340055e0:	1b40      	subs	r0, r0, r5
340055e2:	42b0      	cmp	r0, r6
340055e4:	d9b8      	bls.n	34005558 <HAL_RCCEx_PeriphCLKConfig+0x104>
        status = ret;
340055e6:	2503      	movs	r5, #3
340055e8:	e7d3      	b.n	34005592 <HAL_RCCEx_PeriphCLKConfig+0x13e>
340055ea:	bf00      	nop
340055ec:	34010c5b 	.word	0x34010c5b
340055f0:	00010300 	.word	0x00010300
340055f4:	0003e300 	.word	0x0003e300
340055f8:	56028000 	.word	0x56028000
340055fc:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34005600:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34005602:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005606:	d003      	beq.n	34005610 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
34005608:	21d9      	movs	r1, #217	@ 0xd9
3400560a:	48bd      	ldr	r0, [pc, #756]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400560c:	f7fb ff1c 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34005610:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34005612:	3b01      	subs	r3, #1
34005614:	2bff      	cmp	r3, #255	@ 0xff
34005616:	d903      	bls.n	34005620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
34005618:	21da      	movs	r1, #218	@ 0xda
3400561a:	48b9      	ldr	r0, [pc, #740]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400561c:	f7fb ff14 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34005620:	4ab8      	ldr	r2, [pc, #736]	@ (34005904 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005622:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34005624:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34005628:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
3400562a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400562e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005632:	3901      	subs	r1, #1
34005634:	4303      	orrs	r3, r0
34005636:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400563a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3400563e:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34005640:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34005644:	4aaf      	ldr	r2, [pc, #700]	@ (34005904 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005646:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
3400564a:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3400564e:	f023 0307 	bic.w	r3, r3, #7
34005652:	430b      	orrs	r3, r1
34005654:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34005658:	6863      	ldr	r3, [r4, #4]
3400565a:	0258      	lsls	r0, r3, #9
3400565c:	d539      	bpl.n	340056d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
3400565e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
34005662:	4aa9      	ldr	r2, [pc, #676]	@ (34005908 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
34005664:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005668:	4293      	cmp	r3, r2
3400566a:	d004      	beq.n	34005676 <HAL_RCCEx_PeriphCLKConfig+0x222>
3400566c:	f44f 7192 	mov.w	r1, #292	@ 0x124
34005670:	48a3      	ldr	r0, [pc, #652]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005672:	f7fb fee9 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
34005676:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
3400567a:	4aa4      	ldr	r2, [pc, #656]	@ (3400590c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
3400567c:	4293      	cmp	r3, r2
3400567e:	f041 8713 	bne.w	340074a8 <HAL_RCCEx_PeriphCLKConfig+0x2054>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005682:	69a3      	ldr	r3, [r4, #24]
34005684:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005688:	d004      	beq.n	34005694 <HAL_RCCEx_PeriphCLKConfig+0x240>
3400568a:	f240 1129 	movw	r1, #297	@ 0x129
3400568e:	489c      	ldr	r0, [pc, #624]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005690:	f7fb feda 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005694:	69e3      	ldr	r3, [r4, #28]
34005696:	3b01      	subs	r3, #1
34005698:	2bff      	cmp	r3, #255	@ 0xff
3400569a:	d904      	bls.n	340056a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
3400569c:	f44f 7195 	mov.w	r1, #298	@ 0x12a
340056a0:	4897      	ldr	r0, [pc, #604]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340056a2:	f7fb fed1 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340056a6:	4a97      	ldr	r2, [pc, #604]	@ (34005904 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340056a8:	69e1      	ldr	r1, [r4, #28]
340056aa:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340056ae:	69a0      	ldr	r0, [r4, #24]
340056b0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340056b4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340056b8:	3901      	subs	r1, #1
340056ba:	4303      	orrs	r3, r0
340056bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340056c0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340056c4:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340056c6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340056ca:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
340056ce:	f7ff fddd 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
340056d2:	6863      	ldr	r3, [r4, #4]
340056d4:	0219      	lsls	r1, r3, #8
340056d6:	d539      	bpl.n	3400574c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
340056d8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340056dc:	4a8c      	ldr	r2, [pc, #560]	@ (34005910 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
340056de:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340056e2:	4293      	cmp	r3, r2
340056e4:	d004      	beq.n	340056f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
340056e6:	f240 1151 	movw	r1, #337	@ 0x151
340056ea:	4885      	ldr	r0, [pc, #532]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340056ec:	f7fb feac 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
340056f0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340056f4:	4a87      	ldr	r2, [pc, #540]	@ (34005914 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
340056f6:	4293      	cmp	r3, r2
340056f8:	f041 8706 	bne.w	34007508 <HAL_RCCEx_PeriphCLKConfig+0x20b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340056fc:	69a3      	ldr	r3, [r4, #24]
340056fe:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005702:	d004      	beq.n	3400570e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
34005704:	f44f 71ab 	mov.w	r1, #342	@ 0x156
34005708:	487d      	ldr	r0, [pc, #500]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400570a:	f7fb fe9d 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400570e:	69e3      	ldr	r3, [r4, #28]
34005710:	3b01      	subs	r3, #1
34005712:	2bff      	cmp	r3, #255	@ 0xff
34005714:	d904      	bls.n	34005720 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
34005716:	f240 1157 	movw	r1, #343	@ 0x157
3400571a:	4879      	ldr	r0, [pc, #484]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400571c:	f7fb fe94 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34005720:	4a78      	ldr	r2, [pc, #480]	@ (34005904 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005722:	69e1      	ldr	r1, [r4, #28]
34005724:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34005728:	69a0      	ldr	r0, [r4, #24]
3400572a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400572e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005732:	3901      	subs	r1, #1
34005734:	4303      	orrs	r3, r0
34005736:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400573a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3400573e:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005740:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005744:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
34005748:	f7ff fda0 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
3400574c:	6863      	ldr	r3, [r4, #4]
3400574e:	01da      	lsls	r2, r3, #7
34005750:	d539      	bpl.n	340057c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
34005752:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
34005756:	4a70      	ldr	r2, [pc, #448]	@ (34005918 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
34005758:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400575c:	4293      	cmp	r3, r2
3400575e:	d004      	beq.n	3400576a <HAL_RCCEx_PeriphCLKConfig+0x316>
34005760:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
34005764:	4866      	ldr	r0, [pc, #408]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005766:	f7fb fe6f 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3400576a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
3400576e:	4a6b      	ldr	r2, [pc, #428]	@ (3400591c <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
34005770:	4293      	cmp	r3, r2
34005772:	f041 86f9 	bne.w	34007568 <HAL_RCCEx_PeriphCLKConfig+0x2114>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005776:	69a3      	ldr	r3, [r4, #24]
34005778:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400577c:	d004      	beq.n	34005788 <HAL_RCCEx_PeriphCLKConfig+0x334>
3400577e:	f240 1183 	movw	r1, #387	@ 0x183
34005782:	485f      	ldr	r0, [pc, #380]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005784:	f7fb fe60 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005788:	69e3      	ldr	r3, [r4, #28]
3400578a:	3b01      	subs	r3, #1
3400578c:	2bff      	cmp	r3, #255	@ 0xff
3400578e:	d904      	bls.n	3400579a <HAL_RCCEx_PeriphCLKConfig+0x346>
34005790:	f44f 71c2 	mov.w	r1, #388	@ 0x184
34005794:	485a      	ldr	r0, [pc, #360]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005796:	f7fb fe57 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400579a:	4a5a      	ldr	r2, [pc, #360]	@ (34005904 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
3400579c:	69e1      	ldr	r1, [r4, #28]
3400579e:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340057a2:	69a0      	ldr	r0, [r4, #24]
340057a4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340057a8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340057ac:	3901      	subs	r1, #1
340057ae:	4303      	orrs	r3, r0
340057b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340057b4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340057b8:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340057ba:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340057be:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
340057c2:	f7ff fd63 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
340057c6:	6823      	ldr	r3, [r4, #0]
340057c8:	051b      	lsls	r3, r3, #20
340057ca:	d53c      	bpl.n	34005846 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
340057cc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340057d0:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340057d4:	d004      	beq.n	340057e0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
340057d6:	f240 11ab 	movw	r1, #427	@ 0x1ab
340057da:	4849      	ldr	r0, [pc, #292]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340057dc:	f7fb fe34 	bl	34001448 <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
340057e0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340057e4:	2b20      	cmp	r3, #32
340057e6:	f041 86ff 	bne.w	340075e8 <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340057ea:	69a3      	ldr	r3, [r4, #24]
340057ec:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340057f0:	d004      	beq.n	340057fc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
340057f2:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
340057f6:	4842      	ldr	r0, [pc, #264]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340057f8:	f7fb fe26 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340057fc:	69e3      	ldr	r3, [r4, #28]
340057fe:	3b01      	subs	r3, #1
34005800:	2bff      	cmp	r3, #255	@ 0xff
34005802:	d904      	bls.n	3400580e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
34005804:	f240 11b1 	movw	r1, #433	@ 0x1b1
34005808:	483d      	ldr	r0, [pc, #244]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400580a:	f7fb fe1d 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400580e:	4a3d      	ldr	r2, [pc, #244]	@ (34005904 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005810:	69e1      	ldr	r1, [r4, #28]
34005812:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34005816:	69a0      	ldr	r0, [r4, #24]
34005818:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400581c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005820:	3901      	subs	r1, #1
34005822:	4303      	orrs	r3, r0
34005824:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005828:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3400582c:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400582e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34005832:	4a34      	ldr	r2, [pc, #208]	@ (34005904 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005834:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
34005838:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
3400583c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
34005840:	430b      	orrs	r3, r1
34005842:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
34005846:	6823      	ldr	r3, [r4, #0]
34005848:	005e      	lsls	r6, r3, #1
3400584a:	d539      	bpl.n	340058c0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
3400584c:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34005850:	4a33      	ldr	r2, [pc, #204]	@ (34005920 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
34005852:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005856:	4293      	cmp	r3, r2
34005858:	d004      	beq.n	34005864 <HAL_RCCEx_PeriphCLKConfig+0x410>
3400585a:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
3400585e:	4828      	ldr	r0, [pc, #160]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005860:	f7fb fdf2 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34005864:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34005868:	4a2e      	ldr	r2, [pc, #184]	@ (34005924 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
3400586a:	4293      	cmp	r3, r2
3400586c:	f041 86ea 	bne.w	34007644 <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34005870:	6a23      	ldr	r3, [r4, #32]
34005872:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005876:	d004      	beq.n	34005882 <HAL_RCCEx_PeriphCLKConfig+0x42e>
34005878:	f240 11dd 	movw	r1, #477	@ 0x1dd
3400587c:	4820      	ldr	r0, [pc, #128]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400587e:	f7fb fde3 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34005882:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34005884:	3b01      	subs	r3, #1
34005886:	2bff      	cmp	r3, #255	@ 0xff
34005888:	d904      	bls.n	34005894 <HAL_RCCEx_PeriphCLKConfig+0x440>
3400588a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400588e:	481c      	ldr	r0, [pc, #112]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005890:	f7fb fdda 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34005894:	4a1b      	ldr	r2, [pc, #108]	@ (34005904 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005896:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34005898:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400589c:	6a20      	ldr	r0, [r4, #32]
3400589e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340058a2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340058a6:	3901      	subs	r1, #1
340058a8:	4303      	orrs	r3, r0
340058aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340058ae:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340058b2:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340058b4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340058b8:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
340058bc:	f7ff fce6 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
340058c0:	6823      	ldr	r3, [r4, #0]
340058c2:	2b00      	cmp	r3, #0
340058c4:	da53      	bge.n	3400596e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
340058c6:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
340058ca:	4a17      	ldr	r2, [pc, #92]	@ (34005928 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
340058cc:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340058d0:	4293      	cmp	r3, r2
340058d2:	d004      	beq.n	340058de <HAL_RCCEx_PeriphCLKConfig+0x48a>
340058d4:	f240 2105 	movw	r1, #517	@ 0x205
340058d8:	4809      	ldr	r0, [pc, #36]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340058da:	f7fb fdb5 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
340058de:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
340058e2:	4a12      	ldr	r2, [pc, #72]	@ (3400592c <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
340058e4:	4293      	cmp	r3, r2
340058e6:	f041 86dd 	bne.w	340076a4 <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340058ea:	6a23      	ldr	r3, [r4, #32]
340058ec:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340058f0:	d01e      	beq.n	34005930 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
340058f2:	f240 210a 	movw	r1, #522	@ 0x20a
340058f6:	4802      	ldr	r0, [pc, #8]	@ (34005900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340058f8:	f7fb fda6 	bl	34001448 <assert_failed>
340058fc:	e018      	b.n	34005930 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
340058fe:	bf00      	nop
34005900:	34010c5b 	.word	0x34010c5b
34005904:	56028000 	.word	0x56028000
34005908:	03000014 	.word	0x03000014
3400590c:	03020014 	.word	0x03020014
34005910:	03000414 	.word	0x03000414
34005914:	03020414 	.word	0x03020414
34005918:	03000814 	.word	0x03000814
3400591c:	03020814 	.word	0x03020814
34005920:	0300001c 	.word	0x0300001c
34005924:	0302001c 	.word	0x0302001c
34005928:	0300041c 	.word	0x0300041c
3400592c:	0302041c 	.word	0x0302041c
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34005930:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34005932:	3b01      	subs	r3, #1
34005934:	2bff      	cmp	r3, #255	@ 0xff
34005936:	d904      	bls.n	34005942 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
34005938:	f240 210b 	movw	r1, #523	@ 0x20b
3400593c:	48c4      	ldr	r0, [pc, #784]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3400593e:	f7fb fd83 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34005942:	4ac4      	ldr	r2, [pc, #784]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005944:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34005946:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400594a:	6a20      	ldr	r0, [r4, #32]
3400594c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005950:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005954:	3901      	subs	r1, #1
34005956:	4303      	orrs	r3, r0
34005958:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400595c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005960:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34005962:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005966:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
3400596a:	f7ff fc8f 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3400596e:	6823      	ldr	r3, [r4, #0]
34005970:	07d8      	lsls	r0, r3, #31
34005972:	d54f      	bpl.n	34005a14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
34005974:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34005978:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400597c:	d006      	beq.n	3400598c <HAL_RCCEx_PeriphCLKConfig+0x538>
3400597e:	2b40      	cmp	r3, #64	@ 0x40
34005980:	d004      	beq.n	3400598c <HAL_RCCEx_PeriphCLKConfig+0x538>
34005982:	f240 2132 	movw	r1, #562	@ 0x232
34005986:	48b2      	ldr	r0, [pc, #712]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005988:	f7fb fd5e 	bl	34001448 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
3400598c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
34005990:	3b01      	subs	r3, #1
34005992:	2bff      	cmp	r3, #255	@ 0xff
34005994:	d904      	bls.n	340059a0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
34005996:	f240 2133 	movw	r1, #563	@ 0x233
3400599a:	48ad      	ldr	r0, [pc, #692]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3400599c:	f7fb fd54 	bl	34001448 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
340059a0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
340059a4:	2b20      	cmp	r3, #32
340059a6:	f041 86ad 	bne.w	34007704 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340059aa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340059ac:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340059b0:	d004      	beq.n	340059bc <HAL_RCCEx_PeriphCLKConfig+0x568>
340059b2:	f44f 710e 	mov.w	r1, #568	@ 0x238
340059b6:	48a6      	ldr	r0, [pc, #664]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340059b8:	f7fb fd46 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340059bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340059be:	3b01      	subs	r3, #1
340059c0:	2bff      	cmp	r3, #255	@ 0xff
340059c2:	d904      	bls.n	340059ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
340059c4:	f240 2139 	movw	r1, #569	@ 0x239
340059c8:	48a1      	ldr	r0, [pc, #644]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340059ca:	f7fb fd3d 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340059ce:	4aa1      	ldr	r2, [pc, #644]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
340059d0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340059d2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340059d6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340059d8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340059dc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340059e0:	3901      	subs	r1, #1
340059e2:	4303      	orrs	r3, r0
340059e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340059e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340059ec:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340059ee:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
340059f2:	4998      	ldr	r1, [pc, #608]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
340059f4:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
340059f8:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
340059fc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
34005a00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
34005a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
34005a08:	3a01      	subs	r2, #1
34005a0a:	4303      	orrs	r3, r0
34005a0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34005a10:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34005a14:	6823      	ldr	r3, [r4, #0]
34005a16:	0799      	lsls	r1, r3, #30
34005a18:	d53b      	bpl.n	34005a92 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
34005a1a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34005a1e:	2b07      	cmp	r3, #7
34005a20:	d904      	bls.n	34005a2c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
34005a22:	f240 2161 	movw	r1, #609	@ 0x261
34005a26:	488a      	ldr	r0, [pc, #552]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005a28:	f7fb fd0e 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34005a2c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34005a30:	2b02      	cmp	r3, #2
34005a32:	f041 8695 	bne.w	34007760 <HAL_RCCEx_PeriphCLKConfig+0x230c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34005a36:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34005a38:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005a3c:	d004      	beq.n	34005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
34005a3e:	f240 2166 	movw	r1, #614	@ 0x266
34005a42:	4883      	ldr	r0, [pc, #524]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005a44:	f7fb fd00 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34005a48:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34005a4a:	3b01      	subs	r3, #1
34005a4c:	2bff      	cmp	r3, #255	@ 0xff
34005a4e:	d904      	bls.n	34005a5a <HAL_RCCEx_PeriphCLKConfig+0x606>
34005a50:	f240 2167 	movw	r1, #615	@ 0x267
34005a54:	487e      	ldr	r0, [pc, #504]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005a56:	f7fb fcf7 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34005a5a:	4a7e      	ldr	r2, [pc, #504]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005a5c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34005a5e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34005a62:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34005a64:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005a68:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005a6c:	3901      	subs	r1, #1
34005a6e:	4303      	orrs	r3, r0
34005a70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005a74:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34005a78:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34005a7a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34005a7e:	4a75      	ldr	r2, [pc, #468]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005a80:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
34005a84:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005a88:	f023 0307 	bic.w	r3, r3, #7
34005a8c:	430b      	orrs	r3, r1
34005a8e:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
34005a92:	6823      	ldr	r3, [r4, #0]
34005a94:	071a      	lsls	r2, r3, #28
34005a96:	d528      	bpl.n	34005aea <HAL_RCCEx_PeriphCLKConfig+0x696>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
34005a98:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34005a9c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005aa0:	d004      	beq.n	34005aac <HAL_RCCEx_PeriphCLKConfig+0x658>
34005aa2:	f240 218e 	movw	r1, #654	@ 0x28e
34005aa6:	486a      	ldr	r0, [pc, #424]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005aa8:	f7fb fcce 	bl	34001448 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
34005aac:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
34005ab0:	3b01      	subs	r3, #1
34005ab2:	2bff      	cmp	r3, #255	@ 0xff
34005ab4:	d904      	bls.n	34005ac0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
34005ab6:	f240 218f 	movw	r1, #655	@ 0x28f
34005aba:	4865      	ldr	r0, [pc, #404]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005abc:	f7fb fcc4 	bl	34001448 <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34005ac0:	4a64      	ldr	r2, [pc, #400]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005ac2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
34005ac6:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
34005aca:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
34005ace:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005ad2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005ad6:	3901      	subs	r1, #1
34005ad8:	4303      	orrs	r3, r0
34005ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005ade:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34005ae2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34005ae6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34005aea:	6823      	ldr	r3, [r4, #0]
34005aec:	06db      	lsls	r3, r3, #27
34005aee:	d542      	bpl.n	34005b76 <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
34005af0:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34005af4:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34005af8:	d004      	beq.n	34005b04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
34005afa:	f240 219d 	movw	r1, #669	@ 0x29d
34005afe:	4854      	ldr	r0, [pc, #336]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005b00:	f7fb fca2 	bl	34001448 <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34005b04:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34005b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34005b0c:	f041 8656 	bne.w	340077bc <HAL_RCCEx_PeriphCLKConfig+0x2368>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
34005b10:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34005b14:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005b18:	d004      	beq.n	34005b24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
34005b1a:	f240 21a2 	movw	r1, #674	@ 0x2a2
34005b1e:	484c      	ldr	r0, [pc, #304]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005b20:	f7fb fc92 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
34005b24:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
34005b28:	3b01      	subs	r3, #1
34005b2a:	2bff      	cmp	r3, #255	@ 0xff
34005b2c:	d904      	bls.n	34005b38 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
34005b2e:	f240 21a3 	movw	r1, #675	@ 0x2a3
34005b32:	4847      	ldr	r0, [pc, #284]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005b34:	f7fb fc88 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34005b38:	4a46      	ldr	r2, [pc, #280]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005b3a:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
34005b3e:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
34005b42:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
34005b46:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005b4a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005b4e:	3901      	subs	r1, #1
34005b50:	4303      	orrs	r3, r0
34005b52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005b56:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34005b5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34005b5e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34005b62:	4a3c      	ldr	r2, [pc, #240]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005b64:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
34005b68:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005b6c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34005b70:	430b      	orrs	r3, r1
34005b72:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34005b76:	6823      	ldr	r3, [r4, #0]
34005b78:	069e      	lsls	r6, r3, #26
34005b7a:	d53e      	bpl.n	34005bfa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
34005b7c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34005b80:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34005b84:	d004      	beq.n	34005b90 <HAL_RCCEx_PeriphCLKConfig+0x73c>
34005b86:	f240 21bd 	movw	r1, #701	@ 0x2bd
34005b8a:	4831      	ldr	r0, [pc, #196]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005b8c:	f7fb fc5c 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34005b90:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34005b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34005b98:	f041 8619 	bne.w	340077ce <HAL_RCCEx_PeriphCLKConfig+0x237a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
34005b9c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34005b9e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005ba2:	d004      	beq.n	34005bae <HAL_RCCEx_PeriphCLKConfig+0x75a>
34005ba4:	f240 21c2 	movw	r1, #706	@ 0x2c2
34005ba8:	4829      	ldr	r0, [pc, #164]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005baa:	f7fb fc4d 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34005bae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34005bb0:	3b01      	subs	r3, #1
34005bb2:	2bff      	cmp	r3, #255	@ 0xff
34005bb4:	d904      	bls.n	34005bc0 <HAL_RCCEx_PeriphCLKConfig+0x76c>
34005bb6:	f240 21c3 	movw	r1, #707	@ 0x2c3
34005bba:	4825      	ldr	r0, [pc, #148]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005bbc:	f7fb fc44 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34005bc0:	4a24      	ldr	r2, [pc, #144]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005bc2:	6e61      	ldr	r1, [r4, #100]	@ 0x64
34005bc4:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
34005bc8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
34005bca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005bce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005bd2:	3901      	subs	r1, #1
34005bd4:	4303      	orrs	r3, r0
34005bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005bda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34005bde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34005be2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34005be6:	4a1b      	ldr	r2, [pc, #108]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005be8:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34005bec:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005bf0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
34005bf4:	430b      	orrs	r3, r1
34005bf6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34005bfa:	6823      	ldr	r3, [r4, #0]
34005bfc:	0658      	lsls	r0, r3, #25
34005bfe:	d516      	bpl.n	34005c2e <HAL_RCCEx_PeriphCLKConfig+0x7da>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
34005c00:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
34005c04:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
34005c08:	d007      	beq.n	34005c1a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34005c0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34005c0e:	d004      	beq.n	34005c1a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34005c10:	f240 21dd 	movw	r1, #733	@ 0x2dd
34005c14:	480e      	ldr	r0, [pc, #56]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005c16:	f7fb fc17 	bl	34001448 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34005c1a:	4a0e      	ldr	r2, [pc, #56]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005c1c:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
34005c20:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005c24:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34005c28:	430b      	orrs	r3, r1
34005c2a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34005c2e:	6823      	ldr	r3, [r4, #0]
34005c30:	0619      	lsls	r1, r3, #24
34005c32:	d518      	bpl.n	34005c66 <HAL_RCCEx_PeriphCLKConfig+0x812>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
34005c34:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
34005c38:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
34005c3c:	d004      	beq.n	34005c48 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
34005c3e:	f240 21e7 	movw	r1, #743	@ 0x2e7
34005c42:	4803      	ldr	r0, [pc, #12]	@ (34005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005c44:	f7fb fc00 	bl	34001448 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34005c48:	4a02      	ldr	r2, [pc, #8]	@ (34005c54 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005c4a:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
34005c4e:	e003      	b.n	34005c58 <HAL_RCCEx_PeriphCLKConfig+0x804>
34005c50:	34010c5b 	.word	0x34010c5b
34005c54:	56028000 	.word	0x56028000
34005c58:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005c5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34005c60:	430b      	orrs	r3, r1
34005c62:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34005c66:	6823      	ldr	r3, [r4, #0]
34005c68:	05da      	lsls	r2, r3, #23
34005c6a:	d513      	bpl.n	34005c94 <HAL_RCCEx_PeriphCLKConfig+0x840>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
34005c6c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
34005c70:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34005c74:	d004      	beq.n	34005c80 <HAL_RCCEx_PeriphCLKConfig+0x82c>
34005c76:	f240 21f1 	movw	r1, #753	@ 0x2f1
34005c7a:	48c1      	ldr	r0, [pc, #772]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005c7c:	f7fb fbe4 	bl	34001448 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34005c80:	4ac0      	ldr	r2, [pc, #768]	@ (34005f84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005c82:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
34005c86:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34005c8e:	430b      	orrs	r3, r1
34005c90:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34005c94:	6823      	ldr	r3, [r4, #0]
34005c96:	059b      	lsls	r3, r3, #22
34005c98:	d54b      	bpl.n	34005d32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34005c9a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005c9e:	2b03      	cmp	r3, #3
34005ca0:	d904      	bls.n	34005cac <HAL_RCCEx_PeriphCLKConfig+0x858>
34005ca2:	f240 21fb 	movw	r1, #763	@ 0x2fb
34005ca6:	48b6      	ldr	r0, [pc, #728]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005ca8:	f7fb fbce 	bl	34001448 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34005cac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
34005cb0:	3b01      	subs	r3, #1
34005cb2:	2b0f      	cmp	r3, #15
34005cb4:	d904      	bls.n	34005cc0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
34005cb6:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
34005cba:	48b1      	ldr	r0, [pc, #708]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005cbc:	f7fb fbc4 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34005cc0:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005cc4:	2b02      	cmp	r3, #2
34005cc6:	f041 858b 	bne.w	340077e0 <HAL_RCCEx_PeriphCLKConfig+0x238c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
34005cca:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
34005ccc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005cd0:	d004      	beq.n	34005cdc <HAL_RCCEx_PeriphCLKConfig+0x888>
34005cd2:	f240 3101 	movw	r1, #769	@ 0x301
34005cd6:	48aa      	ldr	r0, [pc, #680]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005cd8:	f7fb fbb6 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
34005cdc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
34005cde:	3b01      	subs	r3, #1
34005ce0:	2bff      	cmp	r3, #255	@ 0xff
34005ce2:	d904      	bls.n	34005cee <HAL_RCCEx_PeriphCLKConfig+0x89a>
34005ce4:	f240 3102 	movw	r1, #770	@ 0x302
34005ce8:	48a5      	ldr	r0, [pc, #660]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005cea:	f7fb fbad 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34005cee:	4aa5      	ldr	r2, [pc, #660]	@ (34005f84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005cf0:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
34005cf2:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
34005cf6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
34005cf8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005cfc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005d00:	3901      	subs	r1, #1
34005d02:	4303      	orrs	r3, r0
34005d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005d08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34005d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34005d10:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34005d14:	499b      	ldr	r1, [pc, #620]	@ (34005f84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005d16:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
34005d1a:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
34005d1e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
34005d22:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
34005d26:	3a01      	subs	r2, #1
34005d28:	4303      	orrs	r3, r0
34005d2a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
34005d2e:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34005d32:	6823      	ldr	r3, [r4, #0]
34005d34:	055e      	lsls	r6, r3, #21
34005d36:	d540      	bpl.n	34005dba <HAL_RCCEx_PeriphCLKConfig+0x966>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
34005d38:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005d3c:	2b03      	cmp	r3, #3
34005d3e:	d904      	bls.n	34005d4a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
34005d40:	f240 311d 	movw	r1, #797	@ 0x31d
34005d44:	488e      	ldr	r0, [pc, #568]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d46:	f7fb fb7f 	bl	34001448 <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
34005d4a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005d4e:	2b02      	cmp	r3, #2
34005d50:	f041 854e 	bne.w	340077f0 <HAL_RCCEx_PeriphCLKConfig+0x239c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34005d54:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34005d58:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005d5c:	d004      	beq.n	34005d68 <HAL_RCCEx_PeriphCLKConfig+0x914>
34005d5e:	f240 3122 	movw	r1, #802	@ 0x322
34005d62:	4887      	ldr	r0, [pc, #540]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d64:	f7fb fb70 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34005d68:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34005d6c:	3b01      	subs	r3, #1
34005d6e:	2bff      	cmp	r3, #255	@ 0xff
34005d70:	d904      	bls.n	34005d7c <HAL_RCCEx_PeriphCLKConfig+0x928>
34005d72:	f240 3123 	movw	r1, #803	@ 0x323
34005d76:	4882      	ldr	r0, [pc, #520]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d78:	f7fb fb66 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34005d7c:	4a81      	ldr	r2, [pc, #516]	@ (34005f84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005d7e:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34005d82:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34005d86:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34005d8a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005d8e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005d92:	3901      	subs	r1, #1
34005d94:	4303      	orrs	r3, r0
34005d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005d9a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34005d9e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34005da2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34005da6:	4a77      	ldr	r2, [pc, #476]	@ (34005f84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005da8:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
34005dac:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34005db0:	f023 0303 	bic.w	r3, r3, #3
34005db4:	430b      	orrs	r3, r1
34005db6:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34005dba:	6823      	ldr	r3, [r4, #0]
34005dbc:	04d8      	lsls	r0, r3, #19
34005dbe:	d540      	bpl.n	34005e42 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34005dc0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005dc4:	4a70      	ldr	r2, [pc, #448]	@ (34005f88 <HAL_RCCEx_PeriphCLKConfig+0xb34>)
34005dc6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005dca:	4291      	cmp	r1, r2
34005dcc:	d00a      	beq.n	34005de4 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005dd2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005dd6:	4293      	cmp	r3, r2
34005dd8:	d004      	beq.n	34005de4 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005dda:	f240 313d 	movw	r1, #829	@ 0x33d
34005dde:	4868      	ldr	r0, [pc, #416]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005de0:	f7fb fb32 	bl	34001448 <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34005de4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005de8:	4a68      	ldr	r2, [pc, #416]	@ (34005f8c <HAL_RCCEx_PeriphCLKConfig+0xb38>)
34005dea:	4293      	cmp	r3, r2
34005dec:	f041 8508 	bne.w	34007800 <HAL_RCCEx_PeriphCLKConfig+0x23ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005df0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005df2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005df6:	d004      	beq.n	34005e02 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
34005df8:	f240 3142 	movw	r1, #834	@ 0x342
34005dfc:	4860      	ldr	r0, [pc, #384]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005dfe:	f7fb fb23 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005e02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005e04:	3b01      	subs	r3, #1
34005e06:	2bff      	cmp	r3, #255	@ 0xff
34005e08:	d904      	bls.n	34005e14 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
34005e0a:	f240 3143 	movw	r1, #835	@ 0x343
34005e0e:	485c      	ldr	r0, [pc, #368]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005e10:	f7fb fb1a 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005e14:	4a5b      	ldr	r2, [pc, #364]	@ (34005f84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005e16:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005e18:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005e1c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005e1e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005e22:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005e26:	3901      	subs	r1, #1
34005e28:	4303      	orrs	r3, r0
34005e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005e2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005e36:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005e3a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
34005e3e:	f7ff fa25 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34005e42:	6823      	ldr	r3, [r4, #0]
34005e44:	0499      	lsls	r1, r3, #18
34005e46:	d540      	bpl.n	34005eca <HAL_RCCEx_PeriphCLKConfig+0xa76>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
34005e48:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34005e4c:	4a50      	ldr	r2, [pc, #320]	@ (34005f90 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
34005e4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005e52:	4291      	cmp	r1, r2
34005e54:	d00a      	beq.n	34005e6c <HAL_RCCEx_PeriphCLKConfig+0xa18>
34005e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005e5a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005e5e:	4293      	cmp	r3, r2
34005e60:	d004      	beq.n	34005e6c <HAL_RCCEx_PeriphCLKConfig+0xa18>
34005e62:	f240 316a 	movw	r1, #874	@ 0x36a
34005e66:	4846      	ldr	r0, [pc, #280]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005e68:	f7fb faee 	bl	34001448 <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34005e6c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34005e70:	4a48      	ldr	r2, [pc, #288]	@ (34005f94 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
34005e72:	4293      	cmp	r3, r2
34005e74:	f041 84f5 	bne.w	34007862 <HAL_RCCEx_PeriphCLKConfig+0x240e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005e78:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005e7a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005e7e:	d004      	beq.n	34005e8a <HAL_RCCEx_PeriphCLKConfig+0xa36>
34005e80:	f240 316f 	movw	r1, #879	@ 0x36f
34005e84:	483e      	ldr	r0, [pc, #248]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005e86:	f7fb fadf 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005e8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005e8c:	3b01      	subs	r3, #1
34005e8e:	2bff      	cmp	r3, #255	@ 0xff
34005e90:	d904      	bls.n	34005e9c <HAL_RCCEx_PeriphCLKConfig+0xa48>
34005e92:	f44f 715c 	mov.w	r1, #880	@ 0x370
34005e96:	483a      	ldr	r0, [pc, #232]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005e98:	f7fb fad6 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005e9c:	4a39      	ldr	r2, [pc, #228]	@ (34005f84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005e9e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005ea0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005ea4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005ea6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005eaa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005eae:	3901      	subs	r1, #1
34005eb0:	4303      	orrs	r3, r0
34005eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005eb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005eba:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005ebe:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005ec2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34005ec6:	f7ff f9e1 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34005eca:	6823      	ldr	r3, [r4, #0]
34005ecc:	045a      	lsls	r2, r3, #17
34005ece:	d540      	bpl.n	34005f52 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34005ed0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005ed4:	4a30      	ldr	r2, [pc, #192]	@ (34005f98 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
34005ed6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005eda:	4291      	cmp	r1, r2
34005edc:	d00a      	beq.n	34005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34005ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005ee2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005ee6:	4293      	cmp	r3, r2
34005ee8:	d004      	beq.n	34005ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34005eea:	f240 3197 	movw	r1, #919	@ 0x397
34005eee:	4824      	ldr	r0, [pc, #144]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005ef0:	f7fb faaa 	bl	34001448 <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34005ef4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005ef8:	4a28      	ldr	r2, [pc, #160]	@ (34005f9c <HAL_RCCEx_PeriphCLKConfig+0xb48>)
34005efa:	4293      	cmp	r3, r2
34005efc:	f041 84f6 	bne.w	340078ec <HAL_RCCEx_PeriphCLKConfig+0x2498>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005f00:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005f02:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005f06:	d004      	beq.n	34005f12 <HAL_RCCEx_PeriphCLKConfig+0xabe>
34005f08:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34005f0c:	481c      	ldr	r0, [pc, #112]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005f0e:	f7fb fa9b 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005f12:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005f14:	3b01      	subs	r3, #1
34005f16:	2bff      	cmp	r3, #255	@ 0xff
34005f18:	d904      	bls.n	34005f24 <HAL_RCCEx_PeriphCLKConfig+0xad0>
34005f1a:	f240 319d 	movw	r1, #925	@ 0x39d
34005f1e:	4818      	ldr	r0, [pc, #96]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005f20:	f7fb fa92 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005f24:	4a17      	ldr	r2, [pc, #92]	@ (34005f84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005f26:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005f28:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005f2c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005f2e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005f32:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005f36:	3901      	subs	r1, #1
34005f38:	4303      	orrs	r3, r0
34005f3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005f3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005f46:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005f4a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
34005f4e:	f7ff f99d 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34005f52:	6823      	ldr	r3, [r4, #0]
34005f54:	041b      	lsls	r3, r3, #16
34005f56:	d554      	bpl.n	34006002 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34005f58:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005f5c:	4a10      	ldr	r2, [pc, #64]	@ (34005fa0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
34005f5e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005f62:	4291      	cmp	r1, r2
34005f64:	d01e      	beq.n	34005fa4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005f6a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005f6e:	4293      	cmp	r3, r2
34005f70:	d018      	beq.n	34005fa4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005f72:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34005f76:	4802      	ldr	r0, [pc, #8]	@ (34005f80 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005f78:	f7fb fa66 	bl	34001448 <assert_failed>
34005f7c:	e012      	b.n	34005fa4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005f7e:	bf00      	nop
34005f80:	34010c5b 	.word	0x34010c5b
34005f84:	56028000 	.word	0x56028000
34005f88:	0700000c 	.word	0x0700000c
34005f8c:	0702000c 	.word	0x0702000c
34005f90:	0700040c 	.word	0x0700040c
34005f94:	0702040c 	.word	0x0702040c
34005f98:	0700080c 	.word	0x0700080c
34005f9c:	0702080c 	.word	0x0702080c
34005fa0:	07000c0c 	.word	0x07000c0c
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34005fa4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005fa8:	4abd      	ldr	r2, [pc, #756]	@ (340062a0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
34005faa:	4293      	cmp	r3, r2
34005fac:	f041 84cf 	bne.w	3400794e <HAL_RCCEx_PeriphCLKConfig+0x24fa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005fb0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005fb2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005fb6:	d004      	beq.n	34005fc2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
34005fb8:	f240 31c9 	movw	r1, #969	@ 0x3c9
34005fbc:	48b9      	ldr	r0, [pc, #740]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005fbe:	f7fb fa43 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005fc2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005fc4:	3b01      	subs	r3, #1
34005fc6:	2bff      	cmp	r3, #255	@ 0xff
34005fc8:	d904      	bls.n	34005fd4 <HAL_RCCEx_PeriphCLKConfig+0xb80>
34005fca:	f240 31ca 	movw	r1, #970	@ 0x3ca
34005fce:	48b5      	ldr	r0, [pc, #724]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005fd0:	f7fb fa3a 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005fd4:	4ab4      	ldr	r2, [pc, #720]	@ (340062a8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005fd6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005fd8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005fdc:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005fde:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005fe2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005fe6:	3901      	subs	r1, #1
34005fe8:	4303      	orrs	r3, r0
34005fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005fee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005ff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005ff6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005ffa:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
34005ffe:	f7ff f945 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34006002:	6823      	ldr	r3, [r4, #0]
34006004:	03de      	lsls	r6, r3, #15
34006006:	d540      	bpl.n	3400608a <HAL_RCCEx_PeriphCLKConfig+0xc36>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34006008:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
3400600c:	4aa7      	ldr	r2, [pc, #668]	@ (340062ac <HAL_RCCEx_PeriphCLKConfig+0xe58>)
3400600e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006012:	4291      	cmp	r1, r2
34006014:	d00a      	beq.n	3400602c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34006016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400601a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400601e:	4293      	cmp	r3, r2
34006020:	d004      	beq.n	3400602c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34006022:	f240 31f1 	movw	r1, #1009	@ 0x3f1
34006026:	489f      	ldr	r0, [pc, #636]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006028:	f7fb fa0e 	bl	34001448 <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3400602c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34006030:	4a9f      	ldr	r2, [pc, #636]	@ (340062b0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
34006032:	4293      	cmp	r3, r2
34006034:	f041 84bc 	bne.w	340079b0 <HAL_RCCEx_PeriphCLKConfig+0x255c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34006038:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3400603a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400603e:	d004      	beq.n	3400604a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
34006040:	f240 31f6 	movw	r1, #1014	@ 0x3f6
34006044:	4897      	ldr	r0, [pc, #604]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006046:	f7fb f9ff 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400604a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
3400604c:	3b01      	subs	r3, #1
3400604e:	2bff      	cmp	r3, #255	@ 0xff
34006050:	d904      	bls.n	3400605c <HAL_RCCEx_PeriphCLKConfig+0xc08>
34006052:	f240 31f7 	movw	r1, #1015	@ 0x3f7
34006056:	4893      	ldr	r0, [pc, #588]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006058:	f7fb f9f6 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400605c:	4a92      	ldr	r2, [pc, #584]	@ (340062a8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
3400605e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34006060:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34006064:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34006066:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400606a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400606e:	3901      	subs	r1, #1
34006070:	4303      	orrs	r3, r0
34006072:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006076:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3400607a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400607e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006082:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34006086:	f7ff f901 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
3400608a:	6823      	ldr	r3, [r4, #0]
3400608c:	0398      	lsls	r0, r3, #14
3400608e:	d540      	bpl.n	34006112 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34006090:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34006094:	4a87      	ldr	r2, [pc, #540]	@ (340062b4 <HAL_RCCEx_PeriphCLKConfig+0xe60>)
34006096:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400609a:	4291      	cmp	r1, r2
3400609c:	d00a      	beq.n	340060b4 <HAL_RCCEx_PeriphCLKConfig+0xc60>
3400609e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340060a2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340060a6:	4293      	cmp	r3, r2
340060a8:	d004      	beq.n	340060b4 <HAL_RCCEx_PeriphCLKConfig+0xc60>
340060aa:	f240 411e 	movw	r1, #1054	@ 0x41e
340060ae:	487d      	ldr	r0, [pc, #500]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340060b0:	f7fb f9ca 	bl	34001448 <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
340060b4:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
340060b8:	4a7f      	ldr	r2, [pc, #508]	@ (340062b8 <HAL_RCCEx_PeriphCLKConfig+0xe64>)
340060ba:	4293      	cmp	r3, r2
340060bc:	f041 84a9 	bne.w	34007a12 <HAL_RCCEx_PeriphCLKConfig+0x25be>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
340060c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
340060c2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340060c6:	d004      	beq.n	340060d2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
340060c8:	f240 4123 	movw	r1, #1059	@ 0x423
340060cc:	4875      	ldr	r0, [pc, #468]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340060ce:	f7fb f9bb 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340060d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340060d4:	3b01      	subs	r3, #1
340060d6:	2bff      	cmp	r3, #255	@ 0xff
340060d8:	d904      	bls.n	340060e4 <HAL_RCCEx_PeriphCLKConfig+0xc90>
340060da:	f240 4124 	movw	r1, #1060	@ 0x424
340060de:	4871      	ldr	r0, [pc, #452]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340060e0:	f7fb f9b2 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340060e4:	4a70      	ldr	r2, [pc, #448]	@ (340062a8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340060e6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340060e8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340060ec:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340060ee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340060f2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340060f6:	3901      	subs	r1, #1
340060f8:	4303      	orrs	r3, r0
340060fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340060fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34006102:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006106:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400610a:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
3400610e:	f7ff f8bd 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34006112:	6823      	ldr	r3, [r4, #0]
34006114:	0359      	lsls	r1, r3, #13
34006116:	d540      	bpl.n	3400619a <HAL_RCCEx_PeriphCLKConfig+0xd46>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
34006118:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
3400611c:	4a67      	ldr	r2, [pc, #412]	@ (340062bc <HAL_RCCEx_PeriphCLKConfig+0xe68>)
3400611e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006122:	4291      	cmp	r1, r2
34006124:	d00a      	beq.n	3400613c <HAL_RCCEx_PeriphCLKConfig+0xce8>
34006126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400612a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400612e:	4293      	cmp	r3, r2
34006130:	d004      	beq.n	3400613c <HAL_RCCEx_PeriphCLKConfig+0xce8>
34006132:	f240 414b 	movw	r1, #1099	@ 0x44b
34006136:	485b      	ldr	r0, [pc, #364]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006138:	f7fb f986 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3400613c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34006140:	4a5f      	ldr	r2, [pc, #380]	@ (340062c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
34006142:	4293      	cmp	r3, r2
34006144:	f041 8496 	bne.w	34007a74 <HAL_RCCEx_PeriphCLKConfig+0x2620>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006148:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400614a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400614e:	d004      	beq.n	3400615a <HAL_RCCEx_PeriphCLKConfig+0xd06>
34006150:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34006154:	4853      	ldr	r0, [pc, #332]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006156:	f7fb f977 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400615a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400615c:	3b01      	subs	r3, #1
3400615e:	2bff      	cmp	r3, #255	@ 0xff
34006160:	d904      	bls.n	3400616c <HAL_RCCEx_PeriphCLKConfig+0xd18>
34006162:	f240 4151 	movw	r1, #1105	@ 0x451
34006166:	484f      	ldr	r0, [pc, #316]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006168:	f7fb f96e 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400616c:	4a4e      	ldr	r2, [pc, #312]	@ (340062a8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
3400616e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006170:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006174:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006176:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400617a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400617e:	3901      	subs	r1, #1
34006180:	4303      	orrs	r3, r0
34006182:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006186:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400618a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400618e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006192:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
34006196:	f7ff f879 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3400619a:	6823      	ldr	r3, [r4, #0]
3400619c:	031a      	lsls	r2, r3, #12
3400619e:	d540      	bpl.n	34006222 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
340061a0:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
340061a4:	4a47      	ldr	r2, [pc, #284]	@ (340062c4 <HAL_RCCEx_PeriphCLKConfig+0xe70>)
340061a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340061aa:	4291      	cmp	r1, r2
340061ac:	d00a      	beq.n	340061c4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
340061ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340061b2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340061b6:	4293      	cmp	r3, r2
340061b8:	d004      	beq.n	340061c4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
340061ba:	f240 416b 	movw	r1, #1131	@ 0x46b
340061be:	4839      	ldr	r0, [pc, #228]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340061c0:	f7fb f942 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
340061c4:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
340061c8:	4a3f      	ldr	r2, [pc, #252]	@ (340062c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
340061ca:	4293      	cmp	r3, r2
340061cc:	f041 845b 	bne.w	34007a86 <HAL_RCCEx_PeriphCLKConfig+0x2632>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340061d0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340061d2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340061d6:	d004      	beq.n	340061e2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
340061d8:	f44f 618e 	mov.w	r1, #1136	@ 0x470
340061dc:	4831      	ldr	r0, [pc, #196]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340061de:	f7fb f933 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340061e2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340061e4:	3b01      	subs	r3, #1
340061e6:	2bff      	cmp	r3, #255	@ 0xff
340061e8:	d904      	bls.n	340061f4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
340061ea:	f240 4171 	movw	r1, #1137	@ 0x471
340061ee:	482d      	ldr	r0, [pc, #180]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340061f0:	f7fb f92a 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340061f4:	4a2c      	ldr	r2, [pc, #176]	@ (340062a8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340061f6:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340061f8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340061fc:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340061fe:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006202:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006206:	3901      	subs	r1, #1
34006208:	4303      	orrs	r3, r0
3400620a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400620e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006212:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006216:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400621a:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
3400621e:	f7ff f835 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34006222:	6823      	ldr	r3, [r4, #0]
34006224:	02db      	lsls	r3, r3, #11
34006226:	d55b      	bpl.n	340062e0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
34006228:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
3400622c:	4a27      	ldr	r2, [pc, #156]	@ (340062cc <HAL_RCCEx_PeriphCLKConfig+0xe78>)
3400622e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006232:	4291      	cmp	r1, r2
34006234:	d00a      	beq.n	3400624c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34006236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400623a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400623e:	4293      	cmp	r3, r2
34006240:	d004      	beq.n	3400624c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34006242:	f240 418b 	movw	r1, #1163	@ 0x48b
34006246:	4817      	ldr	r0, [pc, #92]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006248:	f7fb f8fe 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3400624c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34006250:	4a1f      	ldr	r2, [pc, #124]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
34006252:	4293      	cmp	r3, r2
34006254:	f041 8420 	bne.w	34007a98 <HAL_RCCEx_PeriphCLKConfig+0x2644>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006258:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400625a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400625e:	d004      	beq.n	3400626a <HAL_RCCEx_PeriphCLKConfig+0xe16>
34006260:	f44f 6192 	mov.w	r1, #1168	@ 0x490
34006264:	480f      	ldr	r0, [pc, #60]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006266:	f7fb f8ef 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400626a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400626c:	3b01      	subs	r3, #1
3400626e:	2bff      	cmp	r3, #255	@ 0xff
34006270:	d904      	bls.n	3400627c <HAL_RCCEx_PeriphCLKConfig+0xe28>
34006272:	f240 4191 	movw	r1, #1169	@ 0x491
34006276:	480b      	ldr	r0, [pc, #44]	@ (340062a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006278:	f7fb f8e6 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400627c:	4a0a      	ldr	r2, [pc, #40]	@ (340062a8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
3400627e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006280:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006284:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006286:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400628a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400628e:	3901      	subs	r1, #1
34006290:	4303      	orrs	r3, r0
34006292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006296:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400629a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400629e:	e019      	b.n	340062d4 <HAL_RCCEx_PeriphCLKConfig+0xe80>
340062a0:	07020c0c 	.word	0x07020c0c
340062a4:	34010c5b 	.word	0x34010c5b
340062a8:	56028000 	.word	0x56028000
340062ac:	0700100c 	.word	0x0700100c
340062b0:	0702100c 	.word	0x0702100c
340062b4:	0700140c 	.word	0x0700140c
340062b8:	0702140c 	.word	0x0702140c
340062bc:	0700082c 	.word	0x0700082c
340062c0:	0702082c 	.word	0x0702082c
340062c4:	07000c2c 	.word	0x07000c2c
340062c8:	07020c2c 	.word	0x07020c2c
340062cc:	0700102c 	.word	0x0700102c
340062d0:	0702102c 	.word	0x0702102c
340062d4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340062d8:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
340062dc:	f7fe ffd6 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
340062e0:	6823      	ldr	r3, [r4, #0]
340062e2:	029e      	lsls	r6, r3, #10
340062e4:	d540      	bpl.n	34006368 <HAL_RCCEx_PeriphCLKConfig+0xf14>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
340062e6:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
340062ea:	4ac2      	ldr	r2, [pc, #776]	@ (340065f4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>)
340062ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340062f0:	4291      	cmp	r1, r2
340062f2:	d00a      	beq.n	3400630a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
340062f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340062f8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340062fc:	4293      	cmp	r3, r2
340062fe:	d004      	beq.n	3400630a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34006300:	f240 41ab 	movw	r1, #1195	@ 0x4ab
34006304:	48bc      	ldr	r0, [pc, #752]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006306:	f7fb f89f 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3400630a:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
3400630e:	4abb      	ldr	r2, [pc, #748]	@ (340065fc <HAL_RCCEx_PeriphCLKConfig+0x11a8>)
34006310:	4293      	cmp	r3, r2
34006312:	f041 83ca 	bne.w	34007aaa <HAL_RCCEx_PeriphCLKConfig+0x2656>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006316:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006318:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400631c:	d004      	beq.n	34006328 <HAL_RCCEx_PeriphCLKConfig+0xed4>
3400631e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
34006322:	48b5      	ldr	r0, [pc, #724]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006324:	f7fb f890 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006328:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400632a:	3b01      	subs	r3, #1
3400632c:	2bff      	cmp	r3, #255	@ 0xff
3400632e:	d904      	bls.n	3400633a <HAL_RCCEx_PeriphCLKConfig+0xee6>
34006330:	f240 41b1 	movw	r1, #1201	@ 0x4b1
34006334:	48b0      	ldr	r0, [pc, #704]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006336:	f7fb f887 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400633a:	4ab1      	ldr	r2, [pc, #708]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400633c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400633e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006342:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006344:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006348:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400634c:	3901      	subs	r1, #1
3400634e:	4303      	orrs	r3, r0
34006350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006354:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006358:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400635c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006360:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
34006364:	f7fe ff92 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34006368:	6823      	ldr	r3, [r4, #0]
3400636a:	0258      	lsls	r0, r3, #9
3400636c:	d540      	bpl.n	340063f0 <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
3400636e:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34006372:	4aa4      	ldr	r2, [pc, #656]	@ (34006604 <HAL_RCCEx_PeriphCLKConfig+0x11b0>)
34006374:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006378:	4291      	cmp	r1, r2
3400637a:	d00a      	beq.n	34006392 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
3400637c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006380:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006384:	4293      	cmp	r3, r2
34006386:	d004      	beq.n	34006392 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34006388:	f240 41cb 	movw	r1, #1227	@ 0x4cb
3400638c:	489a      	ldr	r0, [pc, #616]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400638e:	f7fb f85b 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34006392:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34006396:	4a9c      	ldr	r2, [pc, #624]	@ (34006608 <HAL_RCCEx_PeriphCLKConfig+0x11b4>)
34006398:	4293      	cmp	r3, r2
3400639a:	f041 838f 	bne.w	34007abc <HAL_RCCEx_PeriphCLKConfig+0x2668>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400639e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340063a0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340063a4:	d004      	beq.n	340063b0 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
340063a6:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
340063aa:	4893      	ldr	r0, [pc, #588]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340063ac:	f7fb f84c 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340063b0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340063b2:	3b01      	subs	r3, #1
340063b4:	2bff      	cmp	r3, #255	@ 0xff
340063b6:	d904      	bls.n	340063c2 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
340063b8:	f240 41d1 	movw	r1, #1233	@ 0x4d1
340063bc:	488e      	ldr	r0, [pc, #568]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340063be:	f7fb f843 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340063c2:	4a8f      	ldr	r2, [pc, #572]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340063c4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340063c6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340063ca:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340063cc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340063d0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340063d4:	3901      	subs	r1, #1
340063d6:	4303      	orrs	r3, r0
340063d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340063dc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340063e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340063e4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340063e8:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
340063ec:	f7fe ff4e 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
340063f0:	6823      	ldr	r3, [r4, #0]
340063f2:	0219      	lsls	r1, r3, #8
340063f4:	d546      	bpl.n	34006484 <HAL_RCCEx_PeriphCLKConfig+0x1030>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
340063f6:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
340063fa:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
340063fe:	d00c      	beq.n	3400641a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34006400:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34006404:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
34006408:	d007      	beq.n	3400641a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
3400640a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400640e:	d004      	beq.n	3400641a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34006410:	f240 41eb 	movw	r1, #1259	@ 0x4eb
34006414:	4878      	ldr	r0, [pc, #480]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006416:	f7fb f817 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3400641a:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
3400641e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34006422:	f041 8354 	bne.w	34007ace <HAL_RCCEx_PeriphCLKConfig+0x267a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006426:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006428:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400642c:	d004      	beq.n	34006438 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
3400642e:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
34006432:	4871      	ldr	r0, [pc, #452]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006434:	f7fb f808 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006438:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400643a:	3b01      	subs	r3, #1
3400643c:	2bff      	cmp	r3, #255	@ 0xff
3400643e:	d904      	bls.n	3400644a <HAL_RCCEx_PeriphCLKConfig+0xff6>
34006440:	f240 41f1 	movw	r1, #1265	@ 0x4f1
34006444:	486c      	ldr	r0, [pc, #432]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006446:	f7fa ffff 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400644a:	4a6d      	ldr	r2, [pc, #436]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400644c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400644e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006452:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006454:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006458:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400645c:	3901      	subs	r1, #1
3400645e:	4303      	orrs	r3, r0
34006460:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006464:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006468:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400646c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34006470:	4a63      	ldr	r2, [pc, #396]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006472:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
34006476:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
3400647a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
3400647e:	430b      	orrs	r3, r1
34006480:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34006484:	6823      	ldr	r3, [r4, #0]
34006486:	01da      	lsls	r2, r3, #7
34006488:	d542      	bpl.n	34006510 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
3400648a:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
3400648e:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34006492:	d004      	beq.n	3400649e <HAL_RCCEx_PeriphCLKConfig+0x104a>
34006494:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
34006498:	4857      	ldr	r0, [pc, #348]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400649a:	f7fa ffd5 	bl	34001448 <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3400649e:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
340064a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340064a6:	f041 8343 	bne.w	34007b30 <HAL_RCCEx_PeriphCLKConfig+0x26dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
340064aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
340064ae:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340064b2:	d004      	beq.n	340064be <HAL_RCCEx_PeriphCLKConfig+0x106a>
340064b4:	f240 511d 	movw	r1, #1309	@ 0x51d
340064b8:	484f      	ldr	r0, [pc, #316]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340064ba:	f7fa ffc5 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
340064be:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
340064c2:	3b01      	subs	r3, #1
340064c4:	2bff      	cmp	r3, #255	@ 0xff
340064c6:	d904      	bls.n	340064d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
340064c8:	f240 511e 	movw	r1, #1310	@ 0x51e
340064cc:	484a      	ldr	r0, [pc, #296]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340064ce:	f7fa ffbb 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
340064d2:	4a4b      	ldr	r2, [pc, #300]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340064d4:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
340064d8:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
340064dc:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
340064e0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340064e4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340064e8:	3901      	subs	r1, #1
340064ea:	4303      	orrs	r3, r0
340064ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340064f0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
340064f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340064f8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340064fc:	4a40      	ldr	r2, [pc, #256]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340064fe:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
34006502:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
34006506:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
3400650a:	430b      	orrs	r3, r1
3400650c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34006510:	6823      	ldr	r3, [r4, #0]
34006512:	019b      	lsls	r3, r3, #6
34006514:	d540      	bpl.n	34006598 <HAL_RCCEx_PeriphCLKConfig+0x1144>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
34006516:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
3400651a:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3400651e:	d007      	beq.n	34006530 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
34006520:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34006524:	d004      	beq.n	34006530 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
34006526:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3400652a:	4833      	ldr	r0, [pc, #204]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400652c:	f7fa ff8c 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34006530:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
34006534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34006538:	f041 8303 	bne.w	34007b42 <HAL_RCCEx_PeriphCLKConfig+0x26ee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400653c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400653e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006542:	d004      	beq.n	3400654e <HAL_RCCEx_PeriphCLKConfig+0x10fa>
34006544:	f240 513d 	movw	r1, #1341	@ 0x53d
34006548:	482b      	ldr	r0, [pc, #172]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400654a:	f7fa ff7d 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400654e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006550:	3b01      	subs	r3, #1
34006552:	2bff      	cmp	r3, #255	@ 0xff
34006554:	d904      	bls.n	34006560 <HAL_RCCEx_PeriphCLKConfig+0x110c>
34006556:	f240 513e 	movw	r1, #1342	@ 0x53e
3400655a:	4827      	ldr	r0, [pc, #156]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400655c:	f7fa ff74 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006560:	4a27      	ldr	r2, [pc, #156]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006562:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006564:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006568:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400656a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400656e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006572:	3901      	subs	r1, #1
34006574:	4303      	orrs	r3, r0
34006576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400657a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400657e:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006580:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34006584:	4a1e      	ldr	r2, [pc, #120]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006586:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
3400658a:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
3400658e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34006592:	430b      	orrs	r3, r1
34006594:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34006598:	6823      	ldr	r3, [r4, #0]
3400659a:	015e      	lsls	r6, r3, #5
3400659c:	d54e      	bpl.n	3400663c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3400659e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
340065a2:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340065a6:	d004      	beq.n	340065b2 <HAL_RCCEx_PeriphCLKConfig+0x115e>
340065a8:	f240 5165 	movw	r1, #1381	@ 0x565
340065ac:	4812      	ldr	r0, [pc, #72]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340065ae:	f7fa ff4b 	bl	34001448 <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
340065b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
340065b6:	2b20      	cmp	r3, #32
340065b8:	f041 82f3 	bne.w	34007ba2 <HAL_RCCEx_PeriphCLKConfig+0x274e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
340065bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340065c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340065c4:	d004      	beq.n	340065d0 <HAL_RCCEx_PeriphCLKConfig+0x117c>
340065c6:	f240 516a 	movw	r1, #1386	@ 0x56a
340065ca:	480b      	ldr	r0, [pc, #44]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340065cc:	f7fa ff3c 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
340065d0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
340065d4:	3b01      	subs	r3, #1
340065d6:	2bff      	cmp	r3, #255	@ 0xff
340065d8:	d904      	bls.n	340065e4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
340065da:	f240 516b 	movw	r1, #1387	@ 0x56b
340065de:	4806      	ldr	r0, [pc, #24]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340065e0:	f7fa ff32 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
340065e4:	4a06      	ldr	r2, [pc, #24]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340065e6:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
340065ea:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
340065ee:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
340065f2:	e00b      	b.n	3400660c <HAL_RCCEx_PeriphCLKConfig+0x11b8>
340065f4:	0700142c 	.word	0x0700142c
340065f8:	34010c5b 	.word	0x34010c5b
340065fc:	0702142c 	.word	0x0702142c
34006600:	56028000 	.word	0x56028000
34006604:	0700182c 	.word	0x0700182c
34006608:	0702182c 	.word	0x0702182c
3400660c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006610:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006614:	3901      	subs	r1, #1
34006616:	4303      	orrs	r3, r0
34006618:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400661c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34006620:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34006624:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34006628:	4abc      	ldr	r2, [pc, #752]	@ (3400691c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3400662a:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
3400662e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34006632:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
34006636:	430b      	orrs	r3, r1
34006638:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3400663c:	6823      	ldr	r3, [r4, #0]
3400663e:	00d8      	lsls	r0, r3, #3
34006640:	d53d      	bpl.n	340066be <HAL_RCCEx_PeriphCLKConfig+0x126a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
34006642:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
34006646:	4ab6      	ldr	r2, [pc, #728]	@ (34006920 <HAL_RCCEx_PeriphCLKConfig+0x14cc>)
34006648:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400664c:	4293      	cmp	r3, r2
3400664e:	d008      	beq.n	34006662 <HAL_RCCEx_PeriphCLKConfig+0x120e>
34006650:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006654:	4293      	cmp	r3, r2
34006656:	d004      	beq.n	34006662 <HAL_RCCEx_PeriphCLKConfig+0x120e>
34006658:	f240 5185 	movw	r1, #1413	@ 0x585
3400665c:	48b1      	ldr	r0, [pc, #708]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400665e:	f7fa fef3 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
34006662:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
34006666:	4ab0      	ldr	r2, [pc, #704]	@ (34006928 <HAL_RCCEx_PeriphCLKConfig+0x14d4>)
34006668:	4293      	cmp	r3, r2
3400666a:	f041 82c1 	bne.w	34007bf0 <HAL_RCCEx_PeriphCLKConfig+0x279c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400666e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006670:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006674:	d004      	beq.n	34006680 <HAL_RCCEx_PeriphCLKConfig+0x122c>
34006676:	f240 518a 	movw	r1, #1418	@ 0x58a
3400667a:	48aa      	ldr	r0, [pc, #680]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400667c:	f7fa fee4 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006680:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006682:	3b01      	subs	r3, #1
34006684:	2bff      	cmp	r3, #255	@ 0xff
34006686:	d904      	bls.n	34006692 <HAL_RCCEx_PeriphCLKConfig+0x123e>
34006688:	f240 518b 	movw	r1, #1419	@ 0x58b
3400668c:	48a5      	ldr	r0, [pc, #660]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400668e:	f7fa fedb 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006692:	4aa2      	ldr	r2, [pc, #648]	@ (3400691c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006694:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006696:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400669a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400669c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340066a0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340066a4:	3901      	subs	r1, #1
340066a6:	4303      	orrs	r3, r0
340066a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340066ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340066b0:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340066b2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340066b6:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
340066ba:	f7fe fde7 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
340066be:	6823      	ldr	r3, [r4, #0]
340066c0:	0099      	lsls	r1, r3, #2
340066c2:	d53d      	bpl.n	34006740 <HAL_RCCEx_PeriphCLKConfig+0x12ec>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
340066c4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
340066c8:	4a98      	ldr	r2, [pc, #608]	@ (3400692c <HAL_RCCEx_PeriphCLKConfig+0x14d8>)
340066ca:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340066ce:	4293      	cmp	r3, r2
340066d0:	d008      	beq.n	340066e4 <HAL_RCCEx_PeriphCLKConfig+0x1290>
340066d2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340066d6:	4293      	cmp	r3, r2
340066d8:	d004      	beq.n	340066e4 <HAL_RCCEx_PeriphCLKConfig+0x1290>
340066da:	f240 51b2 	movw	r1, #1458	@ 0x5b2
340066de:	4891      	ldr	r0, [pc, #580]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340066e0:	f7fa feb2 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
340066e4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
340066e8:	4a91      	ldr	r2, [pc, #580]	@ (34006930 <HAL_RCCEx_PeriphCLKConfig+0x14dc>)
340066ea:	4293      	cmp	r3, r2
340066ec:	f041 82b0 	bne.w	34007c50 <HAL_RCCEx_PeriphCLKConfig+0x27fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340066f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340066f2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340066f6:	d004      	beq.n	34006702 <HAL_RCCEx_PeriphCLKConfig+0x12ae>
340066f8:	f240 51b7 	movw	r1, #1463	@ 0x5b7
340066fc:	4889      	ldr	r0, [pc, #548]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340066fe:	f7fa fea3 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006702:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006704:	3b01      	subs	r3, #1
34006706:	2bff      	cmp	r3, #255	@ 0xff
34006708:	d904      	bls.n	34006714 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
3400670a:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
3400670e:	4885      	ldr	r0, [pc, #532]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006710:	f7fa fe9a 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006714:	4a81      	ldr	r2, [pc, #516]	@ (3400691c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006716:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006718:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400671c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400671e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006722:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006726:	3901      	subs	r1, #1
34006728:	4303      	orrs	r3, r0
3400672a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400672e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006732:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006734:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006738:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
3400673c:	f7fe fda6 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34006740:	6863      	ldr	r3, [r4, #4]
34006742:	07da      	lsls	r2, r3, #31
34006744:	d53b      	bpl.n	340067be <HAL_RCCEx_PeriphCLKConfig+0x136a>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
34006746:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
3400674a:	2b06      	cmp	r3, #6
3400674c:	d904      	bls.n	34006758 <HAL_RCCEx_PeriphCLKConfig+0x1304>
3400674e:	f240 51df 	movw	r1, #1503	@ 0x5df
34006752:	4874      	ldr	r0, [pc, #464]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006754:	f7fa fe78 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34006758:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
3400675c:	2b02      	cmp	r3, #2
3400675e:	f041 82a7 	bne.w	34007cb0 <HAL_RCCEx_PeriphCLKConfig+0x285c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34006762:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006764:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006768:	d004      	beq.n	34006774 <HAL_RCCEx_PeriphCLKConfig+0x1320>
3400676a:	f240 51e4 	movw	r1, #1508	@ 0x5e4
3400676e:	486d      	ldr	r0, [pc, #436]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006770:	f7fa fe6a 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006774:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006776:	3b01      	subs	r3, #1
34006778:	2bff      	cmp	r3, #255	@ 0xff
3400677a:	d904      	bls.n	34006786 <HAL_RCCEx_PeriphCLKConfig+0x1332>
3400677c:	f240 51e5 	movw	r1, #1509	@ 0x5e5
34006780:	4868      	ldr	r0, [pc, #416]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006782:	f7fa fe61 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006786:	4a65      	ldr	r2, [pc, #404]	@ (3400691c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006788:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400678a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400678e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006790:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006794:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006798:	3901      	subs	r1, #1
3400679a:	4303      	orrs	r3, r0
3400679c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340067a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340067a4:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340067a6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
340067aa:	4a5c      	ldr	r2, [pc, #368]	@ (3400691c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340067ac:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
340067b0:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
340067b4:	f023 0307 	bic.w	r3, r3, #7
340067b8:	430b      	orrs	r3, r1
340067ba:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
340067be:	6863      	ldr	r3, [r4, #4]
340067c0:	079b      	lsls	r3, r3, #30
340067c2:	d543      	bpl.n	3400684c <HAL_RCCEx_PeriphCLKConfig+0x13f8>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
340067c4:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
340067c8:	4a5a      	ldr	r2, [pc, #360]	@ (34006934 <HAL_RCCEx_PeriphCLKConfig+0x14e0>)
340067ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340067ce:	4291      	cmp	r1, r2
340067d0:	d00e      	beq.n	340067f0 <HAL_RCCEx_PeriphCLKConfig+0x139c>
340067d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340067d6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340067da:	4291      	cmp	r1, r2
340067dc:	d008      	beq.n	340067f0 <HAL_RCCEx_PeriphCLKConfig+0x139c>
340067de:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340067e2:	4293      	cmp	r3, r2
340067e4:	d004      	beq.n	340067f0 <HAL_RCCEx_PeriphCLKConfig+0x139c>
340067e6:	f240 610c 	movw	r1, #1548	@ 0x60c
340067ea:	484e      	ldr	r0, [pc, #312]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340067ec:	f7fa fe2c 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
340067f0:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
340067f4:	4a50      	ldr	r2, [pc, #320]	@ (34006938 <HAL_RCCEx_PeriphCLKConfig+0x14e4>)
340067f6:	4293      	cmp	r3, r2
340067f8:	f041 8288 	bne.w	34007d0c <HAL_RCCEx_PeriphCLKConfig+0x28b8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340067fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340067fe:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006802:	d004      	beq.n	3400680e <HAL_RCCEx_PeriphCLKConfig+0x13ba>
34006804:	f240 6111 	movw	r1, #1553	@ 0x611
34006808:	4846      	ldr	r0, [pc, #280]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400680a:	f7fa fe1d 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400680e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006810:	3b01      	subs	r3, #1
34006812:	2bff      	cmp	r3, #255	@ 0xff
34006814:	d904      	bls.n	34006820 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
34006816:	f240 6112 	movw	r1, #1554	@ 0x612
3400681a:	4842      	ldr	r0, [pc, #264]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400681c:	f7fa fe14 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006820:	4a3e      	ldr	r2, [pc, #248]	@ (3400691c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006822:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006824:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006828:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400682a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400682e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006832:	3901      	subs	r1, #1
34006834:	4303      	orrs	r3, r0
34006836:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400683a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400683e:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006840:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006844:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
34006848:	f7fe fd20 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
3400684c:	6863      	ldr	r3, [r4, #4]
3400684e:	075e      	lsls	r6, r3, #29
34006850:	d543      	bpl.n	340068da <HAL_RCCEx_PeriphCLKConfig+0x1486>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
34006852:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34006856:	4a39      	ldr	r2, [pc, #228]	@ (3400693c <HAL_RCCEx_PeriphCLKConfig+0x14e8>)
34006858:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400685c:	4291      	cmp	r1, r2
3400685e:	d00e      	beq.n	3400687e <HAL_RCCEx_PeriphCLKConfig+0x142a>
34006860:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006864:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006868:	4291      	cmp	r1, r2
3400686a:	d008      	beq.n	3400687e <HAL_RCCEx_PeriphCLKConfig+0x142a>
3400686c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006870:	4293      	cmp	r3, r2
34006872:	d004      	beq.n	3400687e <HAL_RCCEx_PeriphCLKConfig+0x142a>
34006874:	f240 6139 	movw	r1, #1593	@ 0x639
34006878:	482a      	ldr	r0, [pc, #168]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400687a:	f7fa fde5 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3400687e:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34006882:	4a2f      	ldr	r2, [pc, #188]	@ (34006940 <HAL_RCCEx_PeriphCLKConfig+0x14ec>)
34006884:	4293      	cmp	r3, r2
34006886:	f041 8272 	bne.w	34007d6e <HAL_RCCEx_PeriphCLKConfig+0x291a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400688a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400688c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006890:	d004      	beq.n	3400689c <HAL_RCCEx_PeriphCLKConfig+0x1448>
34006892:	f240 613e 	movw	r1, #1598	@ 0x63e
34006896:	4823      	ldr	r0, [pc, #140]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006898:	f7fa fdd6 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400689c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400689e:	3b01      	subs	r3, #1
340068a0:	2bff      	cmp	r3, #255	@ 0xff
340068a2:	d904      	bls.n	340068ae <HAL_RCCEx_PeriphCLKConfig+0x145a>
340068a4:	f240 613f 	movw	r1, #1599	@ 0x63f
340068a8:	481e      	ldr	r0, [pc, #120]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340068aa:	f7fa fdcd 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340068ae:	4a1b      	ldr	r2, [pc, #108]	@ (3400691c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340068b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340068b2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340068b6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340068b8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340068bc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340068c0:	3901      	subs	r1, #1
340068c2:	4303      	orrs	r3, r0
340068c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340068c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340068cc:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340068ce:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340068d2:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
340068d6:	f7fe fcd9 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
340068da:	6863      	ldr	r3, [r4, #4]
340068dc:	0718      	lsls	r0, r3, #28
340068de:	d55d      	bpl.n	3400699c <HAL_RCCEx_PeriphCLKConfig+0x1548>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
340068e0:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
340068e4:	4a17      	ldr	r2, [pc, #92]	@ (34006944 <HAL_RCCEx_PeriphCLKConfig+0x14f0>)
340068e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340068ea:	4291      	cmp	r1, r2
340068ec:	d00e      	beq.n	3400690c <HAL_RCCEx_PeriphCLKConfig+0x14b8>
340068ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340068f2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340068f6:	4291      	cmp	r1, r2
340068f8:	d008      	beq.n	3400690c <HAL_RCCEx_PeriphCLKConfig+0x14b8>
340068fa:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340068fe:	4293      	cmp	r3, r2
34006900:	d004      	beq.n	3400690c <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34006902:	f240 6166 	movw	r1, #1638	@ 0x666
34006906:	4807      	ldr	r0, [pc, #28]	@ (34006924 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006908:	f7fa fd9e 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3400690c:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34006910:	4a0d      	ldr	r2, [pc, #52]	@ (34006948 <HAL_RCCEx_PeriphCLKConfig+0x14f4>)
34006912:	4293      	cmp	r3, r2
34006914:	f041 825c 	bne.w	34007dd0 <HAL_RCCEx_PeriphCLKConfig+0x297c>
34006918:	e018      	b.n	3400694c <HAL_RCCEx_PeriphCLKConfig+0x14f8>
3400691a:	bf00      	nop
3400691c:	56028000 	.word	0x56028000
34006920:	07001418 	.word	0x07001418
34006924:	34010c5b 	.word	0x34010c5b
34006928:	07021418 	.word	0x07021418
3400692c:	07001818 	.word	0x07001818
34006930:	07021818 	.word	0x07021818
34006934:	07000420 	.word	0x07000420
34006938:	07020420 	.word	0x07020420
3400693c:	07000820 	.word	0x07000820
34006940:	07020820 	.word	0x07020820
34006944:	07000c20 	.word	0x07000c20
34006948:	07020c20 	.word	0x07020c20
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400694c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400694e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006952:	d004      	beq.n	3400695e <HAL_RCCEx_PeriphCLKConfig+0x150a>
34006954:	f240 616b 	movw	r1, #1643	@ 0x66b
34006958:	48bb      	ldr	r0, [pc, #748]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3400695a:	f7fa fd75 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400695e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006960:	3b01      	subs	r3, #1
34006962:	2bff      	cmp	r3, #255	@ 0xff
34006964:	d904      	bls.n	34006970 <HAL_RCCEx_PeriphCLKConfig+0x151c>
34006966:	f240 616c 	movw	r1, #1644	@ 0x66c
3400696a:	48b7      	ldr	r0, [pc, #732]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3400696c:	f7fa fd6c 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006970:	4ab6      	ldr	r2, [pc, #728]	@ (34006c4c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006972:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006974:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006978:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400697a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400697e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006982:	3901      	subs	r1, #1
34006984:	4303      	orrs	r3, r0
34006986:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400698a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400698e:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006990:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006994:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
34006998:	f7fe fc78 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3400699c:	6863      	ldr	r3, [r4, #4]
3400699e:	06d9      	lsls	r1, r3, #27
340069a0:	d544      	bpl.n	34006a2c <HAL_RCCEx_PeriphCLKConfig+0x15d8>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
340069a2:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
340069a6:	4aaa      	ldr	r2, [pc, #680]	@ (34006c50 <HAL_RCCEx_PeriphCLKConfig+0x17fc>)
340069a8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340069ac:	4291      	cmp	r1, r2
340069ae:	d00e      	beq.n	340069ce <HAL_RCCEx_PeriphCLKConfig+0x157a>
340069b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340069b4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340069b8:	4291      	cmp	r1, r2
340069ba:	d008      	beq.n	340069ce <HAL_RCCEx_PeriphCLKConfig+0x157a>
340069bc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340069c0:	4293      	cmp	r3, r2
340069c2:	d004      	beq.n	340069ce <HAL_RCCEx_PeriphCLKConfig+0x157a>
340069c4:	f240 6193 	movw	r1, #1683	@ 0x693
340069c8:	489f      	ldr	r0, [pc, #636]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340069ca:	f7fa fd3d 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
340069ce:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
340069d2:	4aa0      	ldr	r2, [pc, #640]	@ (34006c54 <HAL_RCCEx_PeriphCLKConfig+0x1800>)
340069d4:	4293      	cmp	r3, r2
340069d6:	f041 822c 	bne.w	34007e32 <HAL_RCCEx_PeriphCLKConfig+0x29de>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340069da:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340069dc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340069e0:	d004      	beq.n	340069ec <HAL_RCCEx_PeriphCLKConfig+0x1598>
340069e2:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
340069e6:	4898      	ldr	r0, [pc, #608]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340069e8:	f7fa fd2e 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340069ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340069ee:	3b01      	subs	r3, #1
340069f0:	2bff      	cmp	r3, #255	@ 0xff
340069f2:	d904      	bls.n	340069fe <HAL_RCCEx_PeriphCLKConfig+0x15aa>
340069f4:	f240 6199 	movw	r1, #1689	@ 0x699
340069f8:	4893      	ldr	r0, [pc, #588]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340069fa:	f7fa fd25 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340069fe:	4a93      	ldr	r2, [pc, #588]	@ (34006c4c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006a00:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006a02:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006a06:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006a08:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006a0c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006a10:	3901      	subs	r1, #1
34006a12:	4303      	orrs	r3, r0
34006a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006a18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006a20:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006a24:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
34006a28:	f7fe fc30 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34006a2c:	6863      	ldr	r3, [r4, #4]
34006a2e:	069a      	lsls	r2, r3, #26
34006a30:	d544      	bpl.n	34006abc <HAL_RCCEx_PeriphCLKConfig+0x1668>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
34006a32:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34006a36:	4a88      	ldr	r2, [pc, #544]	@ (34006c58 <HAL_RCCEx_PeriphCLKConfig+0x1804>)
34006a38:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006a3c:	4291      	cmp	r1, r2
34006a3e:	d00e      	beq.n	34006a5e <HAL_RCCEx_PeriphCLKConfig+0x160a>
34006a40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006a44:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006a48:	4291      	cmp	r1, r2
34006a4a:	d008      	beq.n	34006a5e <HAL_RCCEx_PeriphCLKConfig+0x160a>
34006a4c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006a50:	4293      	cmp	r3, r2
34006a52:	d004      	beq.n	34006a5e <HAL_RCCEx_PeriphCLKConfig+0x160a>
34006a54:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
34006a58:	487b      	ldr	r0, [pc, #492]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a5a:	f7fa fcf5 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34006a5e:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34006a62:	4a7e      	ldr	r2, [pc, #504]	@ (34006c5c <HAL_RCCEx_PeriphCLKConfig+0x1808>)
34006a64:	4293      	cmp	r3, r2
34006a66:	f041 8231 	bne.w	34007ecc <HAL_RCCEx_PeriphCLKConfig+0x2a78>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006a6a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006a6c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006a70:	d004      	beq.n	34006a7c <HAL_RCCEx_PeriphCLKConfig+0x1628>
34006a72:	f240 61c5 	movw	r1, #1733	@ 0x6c5
34006a76:	4874      	ldr	r0, [pc, #464]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a78:	f7fa fce6 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006a7c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006a7e:	3b01      	subs	r3, #1
34006a80:	2bff      	cmp	r3, #255	@ 0xff
34006a82:	d904      	bls.n	34006a8e <HAL_RCCEx_PeriphCLKConfig+0x163a>
34006a84:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34006a88:	486f      	ldr	r0, [pc, #444]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a8a:	f7fa fcdd 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006a8e:	4a6f      	ldr	r2, [pc, #444]	@ (34006c4c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006a90:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006a92:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006a96:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006a98:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006a9c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006aa0:	3901      	subs	r1, #1
34006aa2:	4303      	orrs	r3, r0
34006aa4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006aa8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006aac:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006ab0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006ab4:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34006ab8:	f7fe fbe8 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34006abc:	6863      	ldr	r3, [r4, #4]
34006abe:	065b      	lsls	r3, r3, #25
34006ac0:	d543      	bpl.n	34006b4a <HAL_RCCEx_PeriphCLKConfig+0x16f6>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
34006ac2:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34006ac6:	4a66      	ldr	r2, [pc, #408]	@ (34006c60 <HAL_RCCEx_PeriphCLKConfig+0x180c>)
34006ac8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006acc:	4291      	cmp	r1, r2
34006ace:	d00e      	beq.n	34006aee <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006ad0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006ad4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006ad8:	4291      	cmp	r1, r2
34006ada:	d008      	beq.n	34006aee <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006adc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006ae0:	4293      	cmp	r3, r2
34006ae2:	d004      	beq.n	34006aee <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006ae4:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34006ae8:	4857      	ldr	r0, [pc, #348]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006aea:	f7fa fcad 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34006aee:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34006af2:	4a5c      	ldr	r2, [pc, #368]	@ (34006c64 <HAL_RCCEx_PeriphCLKConfig+0x1810>)
34006af4:	4293      	cmp	r3, r2
34006af6:	f041 821a 	bne.w	34007f2e <HAL_RCCEx_PeriphCLKConfig+0x2ada>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006afa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006afc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006b00:	d004      	beq.n	34006b0c <HAL_RCCEx_PeriphCLKConfig+0x16b8>
34006b02:	f240 61f2 	movw	r1, #1778	@ 0x6f2
34006b06:	4850      	ldr	r0, [pc, #320]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006b08:	f7fa fc9e 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006b0c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006b0e:	3b01      	subs	r3, #1
34006b10:	2bff      	cmp	r3, #255	@ 0xff
34006b12:	d904      	bls.n	34006b1e <HAL_RCCEx_PeriphCLKConfig+0x16ca>
34006b14:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34006b18:	484b      	ldr	r0, [pc, #300]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006b1a:	f7fa fc95 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006b1e:	4a4b      	ldr	r2, [pc, #300]	@ (34006c4c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006b20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006b22:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006b26:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006b28:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006b2c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006b30:	3901      	subs	r1, #1
34006b32:	4303      	orrs	r3, r0
34006b34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006b3c:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006b3e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006b42:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
34006b46:	f7fe fba1 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34006b4a:	6863      	ldr	r3, [r4, #4]
34006b4c:	05de      	lsls	r6, r3, #23
34006b4e:	d544      	bpl.n	34006bda <HAL_RCCEx_PeriphCLKConfig+0x1786>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
34006b50:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34006b54:	4a44      	ldr	r2, [pc, #272]	@ (34006c68 <HAL_RCCEx_PeriphCLKConfig+0x1814>)
34006b56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006b5a:	4291      	cmp	r1, r2
34006b5c:	d00e      	beq.n	34006b7c <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006b5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006b62:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006b66:	4291      	cmp	r1, r2
34006b68:	d008      	beq.n	34006b7c <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006b6a:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006b6e:	4293      	cmp	r3, r2
34006b70:	d004      	beq.n	34006b7c <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006b72:	f240 711a 	movw	r1, #1818	@ 0x71a
34006b76:	4834      	ldr	r0, [pc, #208]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006b78:	f7fa fc66 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34006b7c:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34006b80:	4a3a      	ldr	r2, [pc, #232]	@ (34006c6c <HAL_RCCEx_PeriphCLKConfig+0x1818>)
34006b82:	4293      	cmp	r3, r2
34006b84:	f041 8204 	bne.w	34007f90 <HAL_RCCEx_PeriphCLKConfig+0x2b3c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006b88:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006b8a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006b8e:	d004      	beq.n	34006b9a <HAL_RCCEx_PeriphCLKConfig+0x1746>
34006b90:	f240 711f 	movw	r1, #1823	@ 0x71f
34006b94:	482c      	ldr	r0, [pc, #176]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006b96:	f7fa fc57 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006b9a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006b9c:	3b01      	subs	r3, #1
34006b9e:	2bff      	cmp	r3, #255	@ 0xff
34006ba0:	d904      	bls.n	34006bac <HAL_RCCEx_PeriphCLKConfig+0x1758>
34006ba2:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
34006ba6:	4828      	ldr	r0, [pc, #160]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006ba8:	f7fa fc4e 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006bac:	4a27      	ldr	r2, [pc, #156]	@ (34006c4c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006bae:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006bb0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006bb4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006bb6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006bba:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006bbe:	3901      	subs	r1, #1
34006bc0:	4303      	orrs	r3, r0
34006bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006bc6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006bca:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006bce:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006bd2:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
34006bd6:	f7fe fb59 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34006bda:	6863      	ldr	r3, [r4, #4]
34006bdc:	0598      	lsls	r0, r3, #22
34006bde:	d55d      	bpl.n	34006c9c <HAL_RCCEx_PeriphCLKConfig+0x1848>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34006be0:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34006be4:	4a22      	ldr	r2, [pc, #136]	@ (34006c70 <HAL_RCCEx_PeriphCLKConfig+0x181c>)
34006be6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006bea:	4291      	cmp	r1, r2
34006bec:	d00e      	beq.n	34006c0c <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006bee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006bf2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006bf6:	4291      	cmp	r1, r2
34006bf8:	d008      	beq.n	34006c0c <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006bfa:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006bfe:	4293      	cmp	r3, r2
34006c00:	d004      	beq.n	34006c0c <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006c02:	f240 7147 	movw	r1, #1863	@ 0x747
34006c06:	4810      	ldr	r0, [pc, #64]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006c08:	f7fa fc1e 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34006c0c:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34006c10:	4a18      	ldr	r2, [pc, #96]	@ (34006c74 <HAL_RCCEx_PeriphCLKConfig+0x1820>)
34006c12:	4293      	cmp	r3, r2
34006c14:	f041 81ed 	bne.w	34007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b9e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006c18:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006c1a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006c1e:	d004      	beq.n	34006c2a <HAL_RCCEx_PeriphCLKConfig+0x17d6>
34006c20:	f240 714c 	movw	r1, #1868	@ 0x74c
34006c24:	4808      	ldr	r0, [pc, #32]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006c26:	f7fa fc0f 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006c2a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006c2c:	3b01      	subs	r3, #1
34006c2e:	2bff      	cmp	r3, #255	@ 0xff
34006c30:	d904      	bls.n	34006c3c <HAL_RCCEx_PeriphCLKConfig+0x17e8>
34006c32:	f240 714d 	movw	r1, #1869	@ 0x74d
34006c36:	4804      	ldr	r0, [pc, #16]	@ (34006c48 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006c38:	f7fa fc06 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006c3c:	4a03      	ldr	r2, [pc, #12]	@ (34006c4c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006c3e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006c40:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006c44:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006c46:	e017      	b.n	34006c78 <HAL_RCCEx_PeriphCLKConfig+0x1824>
34006c48:	34010c5b 	.word	0x34010c5b
34006c4c:	56028000 	.word	0x56028000
34006c50:	07001020 	.word	0x07001020
34006c54:	07021020 	.word	0x07021020
34006c58:	07001420 	.word	0x07001420
34006c5c:	07021420 	.word	0x07021420
34006c60:	07001820 	.word	0x07001820
34006c64:	07021820 	.word	0x07021820
34006c68:	07000030 	.word	0x07000030
34006c6c:	07020030 	.word	0x07020030
34006c70:	07000430 	.word	0x07000430
34006c74:	07020430 	.word	0x07020430
34006c78:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006c7c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006c80:	3901      	subs	r1, #1
34006c82:	4303      	orrs	r3, r0
34006c84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006c88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006c90:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006c94:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
34006c98:	f7fe faf8 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34006c9c:	6863      	ldr	r3, [r4, #4]
34006c9e:	0559      	lsls	r1, r3, #21
34006ca0:	d544      	bpl.n	34006d2c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
34006ca2:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006ca6:	4abc      	ldr	r2, [pc, #752]	@ (34006f98 <HAL_RCCEx_PeriphCLKConfig+0x1b44>)
34006ca8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006cac:	4291      	cmp	r1, r2
34006cae:	d00e      	beq.n	34006cce <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006cb0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006cb4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006cb8:	4291      	cmp	r1, r2
34006cba:	d008      	beq.n	34006cce <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006cbc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006cc0:	4293      	cmp	r3, r2
34006cc2:	d004      	beq.n	34006cce <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006cc4:	f240 7174 	movw	r1, #1908	@ 0x774
34006cc8:	48b4      	ldr	r0, [pc, #720]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006cca:	f7fa fbbd 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34006cce:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006cd2:	4ab3      	ldr	r2, [pc, #716]	@ (34006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>)
34006cd4:	4293      	cmp	r3, r2
34006cd6:	f041 81bd 	bne.w	34008054 <HAL_RCCEx_PeriphCLKConfig+0x2c00>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006cda:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006cdc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006ce0:	d004      	beq.n	34006cec <HAL_RCCEx_PeriphCLKConfig+0x1898>
34006ce2:	f240 7179 	movw	r1, #1913	@ 0x779
34006ce6:	48ad      	ldr	r0, [pc, #692]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006ce8:	f7fa fbae 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006cec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006cee:	3b01      	subs	r3, #1
34006cf0:	2bff      	cmp	r3, #255	@ 0xff
34006cf2:	d904      	bls.n	34006cfe <HAL_RCCEx_PeriphCLKConfig+0x18aa>
34006cf4:	f240 717a 	movw	r1, #1914	@ 0x77a
34006cf8:	48a8      	ldr	r0, [pc, #672]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006cfa:	f7fa fba5 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006cfe:	4aa9      	ldr	r2, [pc, #676]	@ (34006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006d00:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006d02:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006d06:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006d08:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006d0c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006d10:	3901      	subs	r1, #1
34006d12:	4303      	orrs	r3, r0
34006d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006d18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006d1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006d20:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006d24:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
34006d28:	f7fe fab0 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34006d2c:	6863      	ldr	r3, [r4, #4]
34006d2e:	051a      	lsls	r2, r3, #20
34006d30:	d544      	bpl.n	34006dbc <HAL_RCCEx_PeriphCLKConfig+0x1968>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
34006d32:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006d36:	4a9c      	ldr	r2, [pc, #624]	@ (34006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
34006d38:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006d3c:	4291      	cmp	r1, r2
34006d3e:	d00e      	beq.n	34006d5e <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006d40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006d44:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006d48:	4291      	cmp	r1, r2
34006d4a:	d008      	beq.n	34006d5e <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006d4c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006d50:	4293      	cmp	r3, r2
34006d52:	d004      	beq.n	34006d5e <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006d54:	f240 71a1 	movw	r1, #1953	@ 0x7a1
34006d58:	4890      	ldr	r0, [pc, #576]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d5a:	f7fa fb75 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34006d5e:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006d62:	4a92      	ldr	r2, [pc, #584]	@ (34006fac <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
34006d64:	4293      	cmp	r3, r2
34006d66:	f041 81a6 	bne.w	340080b6 <HAL_RCCEx_PeriphCLKConfig+0x2c62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006d6a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006d6c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006d70:	d004      	beq.n	34006d7c <HAL_RCCEx_PeriphCLKConfig+0x1928>
34006d72:	f240 71a6 	movw	r1, #1958	@ 0x7a6
34006d76:	4889      	ldr	r0, [pc, #548]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d78:	f7fa fb66 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006d7c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006d7e:	3b01      	subs	r3, #1
34006d80:	2bff      	cmp	r3, #255	@ 0xff
34006d82:	d904      	bls.n	34006d8e <HAL_RCCEx_PeriphCLKConfig+0x193a>
34006d84:	f240 71a7 	movw	r1, #1959	@ 0x7a7
34006d88:	4884      	ldr	r0, [pc, #528]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d8a:	f7fa fb5d 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006d8e:	4a85      	ldr	r2, [pc, #532]	@ (34006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006d90:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006d92:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006d96:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006d98:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006d9c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006da0:	3901      	subs	r1, #1
34006da2:	4303      	orrs	r3, r0
34006da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006da8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006dac:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006db0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006db4:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
34006db8:	f7fe fa68 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34006dbc:	6863      	ldr	r3, [r4, #4]
34006dbe:	04db      	lsls	r3, r3, #19
34006dc0:	d544      	bpl.n	34006e4c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
34006dc2:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006dc6:	4a7a      	ldr	r2, [pc, #488]	@ (34006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b5c>)
34006dc8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006dcc:	4291      	cmp	r1, r2
34006dce:	d00e      	beq.n	34006dee <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006dd0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006dd4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006dd8:	4291      	cmp	r1, r2
34006dda:	d008      	beq.n	34006dee <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006ddc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006de0:	4293      	cmp	r3, r2
34006de2:	d004      	beq.n	34006dee <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006de4:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34006de8:	486c      	ldr	r0, [pc, #432]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006dea:	f7fa fb2d 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34006dee:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006df2:	4a70      	ldr	r2, [pc, #448]	@ (34006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b60>)
34006df4:	4293      	cmp	r3, r2
34006df6:	f041 818f 	bne.w	34008118 <HAL_RCCEx_PeriphCLKConfig+0x2cc4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006dfa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006dfc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006e00:	d004      	beq.n	34006e0c <HAL_RCCEx_PeriphCLKConfig+0x19b8>
34006e02:	f240 71d3 	movw	r1, #2003	@ 0x7d3
34006e06:	4865      	ldr	r0, [pc, #404]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006e08:	f7fa fb1e 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006e0c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006e0e:	3b01      	subs	r3, #1
34006e10:	2bff      	cmp	r3, #255	@ 0xff
34006e12:	d904      	bls.n	34006e1e <HAL_RCCEx_PeriphCLKConfig+0x19ca>
34006e14:	f240 71d4 	movw	r1, #2004	@ 0x7d4
34006e18:	4860      	ldr	r0, [pc, #384]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006e1a:	f7fa fb15 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006e1e:	4a61      	ldr	r2, [pc, #388]	@ (34006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006e20:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006e22:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006e26:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006e28:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006e2c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006e30:	3901      	subs	r1, #1
34006e32:	4303      	orrs	r3, r0
34006e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006e38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006e40:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006e44:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
34006e48:	f7fe fa20 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34006e4c:	6863      	ldr	r3, [r4, #4]
34006e4e:	049e      	lsls	r6, r3, #18
34006e50:	d544      	bpl.n	34006edc <HAL_RCCEx_PeriphCLKConfig+0x1a88>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
34006e52:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34006e56:	4a58      	ldr	r2, [pc, #352]	@ (34006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
34006e58:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006e5c:	4291      	cmp	r1, r2
34006e5e:	d00e      	beq.n	34006e7e <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006e60:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006e64:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006e68:	4291      	cmp	r1, r2
34006e6a:	d008      	beq.n	34006e7e <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006e6c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006e70:	4293      	cmp	r3, r2
34006e72:	d004      	beq.n	34006e7e <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006e74:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34006e78:	4848      	ldr	r0, [pc, #288]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006e7a:	f7fa fae5 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34006e7e:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34006e82:	4a4e      	ldr	r2, [pc, #312]	@ (34006fbc <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
34006e84:	4293      	cmp	r3, r2
34006e86:	f041 8199 	bne.w	340081bc <HAL_RCCEx_PeriphCLKConfig+0x2d68>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006e8a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006e8c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006e90:	d004      	beq.n	34006e9c <HAL_RCCEx_PeriphCLKConfig+0x1a48>
34006e92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34006e96:	4841      	ldr	r0, [pc, #260]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006e98:	f7fa fad6 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006e9c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006e9e:	3b01      	subs	r3, #1
34006ea0:	2bff      	cmp	r3, #255	@ 0xff
34006ea2:	d904      	bls.n	34006eae <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
34006ea4:	f640 0101 	movw	r1, #2049	@ 0x801
34006ea8:	483c      	ldr	r0, [pc, #240]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006eaa:	f7fa facd 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006eae:	4a3d      	ldr	r2, [pc, #244]	@ (34006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006eb0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006eb2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006eb6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006eb8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006ebc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006ec0:	3901      	subs	r1, #1
34006ec2:	4303      	orrs	r3, r0
34006ec4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006ec8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006ed0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006ed4:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34006ed8:	f7fe f9d8 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34006edc:	6863      	ldr	r3, [r4, #4]
34006ede:	0458      	lsls	r0, r3, #17
34006ee0:	d544      	bpl.n	34006f6c <HAL_RCCEx_PeriphCLKConfig+0x1b18>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34006ee2:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006ee6:	4a36      	ldr	r2, [pc, #216]	@ (34006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b6c>)
34006ee8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006eec:	4291      	cmp	r1, r2
34006eee:	d00e      	beq.n	34006f0e <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006ef0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006ef4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006ef8:	4291      	cmp	r1, r2
34006efa:	d008      	beq.n	34006f0e <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006efc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006f00:	4293      	cmp	r3, r2
34006f02:	d004      	beq.n	34006f0e <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006f04:	f640 0128 	movw	r1, #2088	@ 0x828
34006f08:	4824      	ldr	r0, [pc, #144]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006f0a:	f7fa fa9d 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34006f0e:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006f12:	4a2c      	ldr	r2, [pc, #176]	@ (34006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b70>)
34006f14:	4293      	cmp	r3, r2
34006f16:	f041 8182 	bne.w	3400821e <HAL_RCCEx_PeriphCLKConfig+0x2dca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006f1a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006f1c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006f20:	d004      	beq.n	34006f2c <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
34006f22:	f640 012d 	movw	r1, #2093	@ 0x82d
34006f26:	481d      	ldr	r0, [pc, #116]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006f28:	f7fa fa8e 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006f2c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006f2e:	3b01      	subs	r3, #1
34006f30:	2bff      	cmp	r3, #255	@ 0xff
34006f32:	d904      	bls.n	34006f3e <HAL_RCCEx_PeriphCLKConfig+0x1aea>
34006f34:	f640 012e 	movw	r1, #2094	@ 0x82e
34006f38:	4818      	ldr	r0, [pc, #96]	@ (34006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006f3a:	f7fa fa85 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006f3e:	4a19      	ldr	r2, [pc, #100]	@ (34006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006f40:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006f42:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006f46:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006f48:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006f4c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006f50:	3901      	subs	r1, #1
34006f52:	4303      	orrs	r3, r0
34006f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006f58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006f5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006f60:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006f64:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
34006f68:	f7fe f990 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34006f6c:	6863      	ldr	r3, [r4, #4]
34006f6e:	0419      	lsls	r1, r3, #16
34006f70:	d560      	bpl.n	34007034 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34006f72:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006f76:	4a14      	ldr	r2, [pc, #80]	@ (34006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b74>)
34006f78:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006f7c:	4291      	cmp	r1, r2
34006f7e:	d02a      	beq.n	34006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006f80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006f84:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006f88:	4291      	cmp	r1, r2
34006f8a:	d024      	beq.n	34006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006f8c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006f90:	4293      	cmp	r3, r2
34006f92:	d020      	beq.n	34006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006f94:	e01a      	b.n	34006fcc <HAL_RCCEx_PeriphCLKConfig+0x1b78>
34006f96:	bf00      	nop
34006f98:	07000830 	.word	0x07000830
34006f9c:	34010c5b 	.word	0x34010c5b
34006fa0:	07020830 	.word	0x07020830
34006fa4:	56028000 	.word	0x56028000
34006fa8:	07000c30 	.word	0x07000c30
34006fac:	07020c30 	.word	0x07020c30
34006fb0:	07001030 	.word	0x07001030
34006fb4:	07021030 	.word	0x07021030
34006fb8:	07001430 	.word	0x07001430
34006fbc:	07021430 	.word	0x07021430
34006fc0:	07001830 	.word	0x07001830
34006fc4:	07021830 	.word	0x07021830
34006fc8:	07001c30 	.word	0x07001c30
34006fcc:	f640 0155 	movw	r1, #2133	@ 0x855
34006fd0:	48bb      	ldr	r0, [pc, #748]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006fd2:	f7fa fa39 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34006fd6:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006fda:	4aba      	ldr	r2, [pc, #744]	@ (340072c4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>)
34006fdc:	4293      	cmp	r3, r2
34006fde:	f041 814f 	bne.w	34008280 <HAL_RCCEx_PeriphCLKConfig+0x2e2c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006fe2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006fe4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006fe8:	d004      	beq.n	34006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1ba0>
34006fea:	f640 015a 	movw	r1, #2138	@ 0x85a
34006fee:	48b4      	ldr	r0, [pc, #720]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006ff0:	f7fa fa2a 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006ff4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006ff6:	3b01      	subs	r3, #1
34006ff8:	2bff      	cmp	r3, #255	@ 0xff
34006ffa:	d904      	bls.n	34007006 <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
34006ffc:	f640 015b 	movw	r1, #2139	@ 0x85b
34007000:	48af      	ldr	r0, [pc, #700]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007002:	f7fa fa21 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007006:	4ab0      	ldr	r2, [pc, #704]	@ (340072c8 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34007008:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400700a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400700e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007010:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007014:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007018:	3901      	subs	r1, #1
3400701a:	4303      	orrs	r3, r0
3400701c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007020:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007024:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007028:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400702c:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34007030:	f7fe f92c 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34007034:	6863      	ldr	r3, [r4, #4]
34007036:	03da      	lsls	r2, r3, #15
34007038:	d544      	bpl.n	340070c4 <HAL_RCCEx_PeriphCLKConfig+0x1c70>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
3400703a:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
3400703e:	4aa3      	ldr	r2, [pc, #652]	@ (340072cc <HAL_RCCEx_PeriphCLKConfig+0x1e78>)
34007040:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34007044:	4291      	cmp	r1, r2
34007046:	d00e      	beq.n	34007066 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34007048:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400704c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34007050:	4291      	cmp	r1, r2
34007052:	d008      	beq.n	34007066 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34007054:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34007058:	4293      	cmp	r3, r2
3400705a:	d004      	beq.n	34007066 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
3400705c:	f640 0182 	movw	r1, #2178	@ 0x882
34007060:	4897      	ldr	r0, [pc, #604]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007062:	f7fa f9f1 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34007066:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
3400706a:	4a99      	ldr	r2, [pc, #612]	@ (340072d0 <HAL_RCCEx_PeriphCLKConfig+0x1e7c>)
3400706c:	4293      	cmp	r3, r2
3400706e:	f041 8138 	bne.w	340082e2 <HAL_RCCEx_PeriphCLKConfig+0x2e8e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007072:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007074:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007078:	d004      	beq.n	34007084 <HAL_RCCEx_PeriphCLKConfig+0x1c30>
3400707a:	f640 0187 	movw	r1, #2183	@ 0x887
3400707e:	4890      	ldr	r0, [pc, #576]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007080:	f7fa f9e2 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007084:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007086:	3b01      	subs	r3, #1
34007088:	2bff      	cmp	r3, #255	@ 0xff
3400708a:	d904      	bls.n	34007096 <HAL_RCCEx_PeriphCLKConfig+0x1c42>
3400708c:	f640 0188 	movw	r1, #2184	@ 0x888
34007090:	488b      	ldr	r0, [pc, #556]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007092:	f7fa f9d9 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007096:	4a8c      	ldr	r2, [pc, #560]	@ (340072c8 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34007098:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400709a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400709e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340070a0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340070a4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340070a8:	3901      	subs	r1, #1
340070aa:	4303      	orrs	r3, r0
340070ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340070b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340070b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340070b8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340070bc:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
340070c0:	f7fe f8e4 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
340070c4:	6863      	ldr	r3, [r4, #4]
340070c6:	039b      	lsls	r3, r3, #14
340070c8:	d544      	bpl.n	34007154 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
340070ca:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
340070ce:	4a81      	ldr	r2, [pc, #516]	@ (340072d4 <HAL_RCCEx_PeriphCLKConfig+0x1e80>)
340070d0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340070d4:	4291      	cmp	r1, r2
340070d6:	d00e      	beq.n	340070f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
340070d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340070dc:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340070e0:	4291      	cmp	r1, r2
340070e2:	d008      	beq.n	340070f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
340070e4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340070e8:	4293      	cmp	r3, r2
340070ea:	d004      	beq.n	340070f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
340070ec:	f640 01af 	movw	r1, #2223	@ 0x8af
340070f0:	4873      	ldr	r0, [pc, #460]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340070f2:	f7fa f9a9 	bl	34001448 <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
340070f6:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
340070fa:	4a77      	ldr	r2, [pc, #476]	@ (340072d8 <HAL_RCCEx_PeriphCLKConfig+0x1e84>)
340070fc:	4293      	cmp	r3, r2
340070fe:	f041 8121 	bne.w	34008344 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007102:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007104:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007108:	d004      	beq.n	34007114 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
3400710a:	f640 01b4 	movw	r1, #2228	@ 0x8b4
3400710e:	486c      	ldr	r0, [pc, #432]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007110:	f7fa f99a 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007114:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007116:	3b01      	subs	r3, #1
34007118:	2bff      	cmp	r3, #255	@ 0xff
3400711a:	d904      	bls.n	34007126 <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
3400711c:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34007120:	4867      	ldr	r0, [pc, #412]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007122:	f7fa f991 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007126:	4a68      	ldr	r2, [pc, #416]	@ (340072c8 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34007128:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400712a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400712e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007130:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007134:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007138:	3901      	subs	r1, #1
3400713a:	4303      	orrs	r3, r0
3400713c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007140:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007144:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007148:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400714c:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
34007150:	f7fe f89c 	bl	3400528c <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34007154:	6863      	ldr	r3, [r4, #4]
34007156:	035e      	lsls	r6, r3, #13
34007158:	d51e      	bpl.n	34007198 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
3400715a:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
3400715e:	4a5f      	ldr	r2, [pc, #380]	@ (340072dc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
34007160:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34007164:	4291      	cmp	r1, r2
34007166:	d00a      	beq.n	3400717e <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34007168:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3400716c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34007170:	4293      	cmp	r3, r2
34007172:	d004      	beq.n	3400717e <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34007174:	f640 01dc 	movw	r1, #2268	@ 0x8dc
34007178:	4851      	ldr	r0, [pc, #324]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3400717a:	f7fa f965 	bl	34001448 <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3400717e:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
34007182:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007186:	f7fe f881 	bl	3400528c <LL_RCC_SetClockSource>
3400718a:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
3400718e:	2b00      	cmp	r3, #0
34007190:	f281 8109 	bge.w	340083a6 <HAL_RCCEx_PeriphCLKConfig+0x2f52>
34007194:	f7fe f84a 	bl	3400522c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34007198:	6863      	ldr	r3, [r4, #4]
3400719a:	02d8      	lsls	r0, r3, #11
3400719c:	d51e      	bpl.n	340071dc <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
3400719e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
340071a2:	4a4f      	ldr	r2, [pc, #316]	@ (340072e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8c>)
340071a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340071a8:	4291      	cmp	r1, r2
340071aa:	d00a      	beq.n	340071c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
340071ac:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
340071b0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
340071b4:	4293      	cmp	r3, r2
340071b6:	d004      	beq.n	340071c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
340071b8:	f640 01e6 	movw	r1, #2278	@ 0x8e6
340071bc:	4840      	ldr	r0, [pc, #256]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340071be:	f7fa f943 	bl	34001448 <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
340071c2:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
340071c6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
340071ca:	f7fe f85f 	bl	3400528c <LL_RCC_SetClockSource>
340071ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
340071d2:	2b00      	cmp	r3, #0
340071d4:	f281 80eb 	bge.w	340083ae <HAL_RCCEx_PeriphCLKConfig+0x2f5a>
340071d8:	f7fe f828 	bl	3400522c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
340071dc:	6863      	ldr	r3, [r4, #4]
340071de:	0319      	lsls	r1, r3, #12
340071e0:	d549      	bpl.n	34007276 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
340071e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
340071e6:	4a3f      	ldr	r2, [pc, #252]	@ (340072e4 <HAL_RCCEx_PeriphCLKConfig+0x1e90>)
340071e8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340071ec:	4291      	cmp	r1, r2
340071ee:	d00a      	beq.n	34007206 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
340071f0:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
340071f4:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
340071f8:	4293      	cmp	r3, r2
340071fa:	d004      	beq.n	34007206 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
340071fc:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
34007200:	482f      	ldr	r0, [pc, #188]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007202:	f7fa f921 	bl	34001448 <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34007206:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
3400720a:	4a37      	ldr	r2, [pc, #220]	@ (340072e8 <HAL_RCCEx_PeriphCLKConfig+0x1e94>)
3400720c:	4293      	cmp	r3, r2
3400720e:	f041 80d2 	bne.w	340083b6 <HAL_RCCEx_PeriphCLKConfig+0x2f62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007212:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007214:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007218:	d004      	beq.n	34007224 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
3400721a:	f640 01f5 	movw	r1, #2293	@ 0x8f5
3400721e:	4828      	ldr	r0, [pc, #160]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007220:	f7fa f912 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007224:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007226:	3b01      	subs	r3, #1
34007228:	2bff      	cmp	r3, #255	@ 0xff
3400722a:	d904      	bls.n	34007236 <HAL_RCCEx_PeriphCLKConfig+0x1de2>
3400722c:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34007230:	4823      	ldr	r0, [pc, #140]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007232:	f7fa f909 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007236:	4a24      	ldr	r2, [pc, #144]	@ (340072c8 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34007238:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400723a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400723e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007240:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007244:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007248:	3901      	subs	r1, #1
3400724a:	4303      	orrs	r3, r0
3400724c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007250:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007254:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007258:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3400725c:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
34007260:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007264:	f7fe f812 	bl	3400528c <LL_RCC_SetClockSource>
34007268:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
3400726c:	2b00      	cmp	r3, #0
3400726e:	f281 80ab 	bge.w	340083c8 <HAL_RCCEx_PeriphCLKConfig+0x2f74>
34007272:	f7fd ffdb 	bl	3400522c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34007276:	6863      	ldr	r3, [r4, #4]
34007278:	029a      	lsls	r2, r3, #10
3400727a:	d564      	bpl.n	34007346 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
3400727c:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34007280:	4a1a      	ldr	r2, [pc, #104]	@ (340072ec <HAL_RCCEx_PeriphCLKConfig+0x1e98>)
34007282:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34007286:	4291      	cmp	r1, r2
34007288:	d00a      	beq.n	340072a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
3400728a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3400728e:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34007292:	4293      	cmp	r3, r2
34007294:	d004      	beq.n	340072a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34007296:	f44f 6111 	mov.w	r1, #2320	@ 0x910
3400729a:	4809      	ldr	r0, [pc, #36]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3400729c:	f7fa f8d4 	bl	34001448 <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
340072a0:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
340072a4:	4a12      	ldr	r2, [pc, #72]	@ (340072f0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>)
340072a6:	4293      	cmp	r3, r2
340072a8:	f041 8092 	bne.w	340083d0 <HAL_RCCEx_PeriphCLKConfig+0x2f7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340072ac:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340072ae:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340072b2:	d01f      	beq.n	340072f4 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
340072b4:	f640 1115 	movw	r1, #2325	@ 0x915
340072b8:	4801      	ldr	r0, [pc, #4]	@ (340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340072ba:	f7fa f8c5 	bl	34001448 <assert_failed>
340072be:	e019      	b.n	340072f4 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
340072c0:	34010c5b 	.word	0x34010c5b
340072c4:	07021c30 	.word	0x07021c30
340072c8:	56028000 	.word	0x56028000
340072cc:	07000034 	.word	0x07000034
340072d0:	07020034 	.word	0x07020034
340072d4:	07000434 	.word	0x07000434
340072d8:	07020434 	.word	0x07020434
340072dc:	01001014 	.word	0x01001014
340072e0:	01001814 	.word	0x01001814
340072e4:	03000c14 	.word	0x03000c14
340072e8:	03020c14 	.word	0x03020c14
340072ec:	03001414 	.word	0x03001414
340072f0:	03021414 	.word	0x03021414
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340072f4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340072f6:	3b01      	subs	r3, #1
340072f8:	2bff      	cmp	r3, #255	@ 0xff
340072fa:	d904      	bls.n	34007306 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
340072fc:	f640 1116 	movw	r1, #2326	@ 0x916
34007300:	48b1      	ldr	r0, [pc, #708]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007302:	f7fa f8a1 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007306:	4ab1      	ldr	r2, [pc, #708]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007308:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400730a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400730e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007310:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007314:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007318:	3901      	subs	r1, #1
3400731a:	4303      	orrs	r3, r0
3400731c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007320:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007324:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007328:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3400732c:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
34007330:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007334:	f7fd ffaa 	bl	3400528c <LL_RCC_SetClockSource>
34007338:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
3400733c:	2b00      	cmp	r3, #0
3400733e:	f281 8050 	bge.w	340083e2 <HAL_RCCEx_PeriphCLKConfig+0x2f8e>
34007342:	f7fd ff73 	bl	3400522c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34007346:	6863      	ldr	r3, [r4, #4]
34007348:	061b      	lsls	r3, r3, #24
3400734a:	d511      	bpl.n	34007370 <HAL_RCCEx_PeriphCLKConfig+0x1f1c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
3400734c:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
34007350:	2b03      	cmp	r3, #3
34007352:	d904      	bls.n	3400735e <HAL_RCCEx_PeriphCLKConfig+0x1f0a>
34007354:	f44f 6113 	mov.w	r1, #2352	@ 0x930
34007358:	489b      	ldr	r0, [pc, #620]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400735a:	f7fa f875 	bl	34001448 <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
3400735e:	4a9b      	ldr	r2, [pc, #620]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007360:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
34007364:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34007366:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
3400736a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
3400736e:	6253      	str	r3, [r2, #36]	@ 0x24
}
34007370:	1e28      	subs	r0, r5, #0
34007372:	bf18      	it	ne
34007374:	2001      	movne	r0, #1
34007376:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34007378:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3400737a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400737e:	d003      	beq.n	34007388 <HAL_RCCEx_PeriphCLKConfig+0x1f34>
34007380:	21e6      	movs	r1, #230	@ 0xe6
34007382:	4891      	ldr	r0, [pc, #580]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007384:	f7fa f860 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34007388:	6d63      	ldr	r3, [r4, #84]	@ 0x54
3400738a:	3b01      	subs	r3, #1
3400738c:	2bff      	cmp	r3, #255	@ 0xff
3400738e:	d903      	bls.n	34007398 <HAL_RCCEx_PeriphCLKConfig+0x1f44>
34007390:	21e7      	movs	r1, #231	@ 0xe7
34007392:	488d      	ldr	r0, [pc, #564]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007394:	f7fa f858 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34007398:	4a8c      	ldr	r2, [pc, #560]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400739a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
3400739c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340073a0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340073a2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340073a6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340073aa:	3901      	subs	r1, #1
340073ac:	4303      	orrs	r3, r0
340073ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340073b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340073b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
340073ba:	f7fe b941 	b.w	34005640 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340073be:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340073c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340073c4:	d003      	beq.n	340073ce <HAL_RCCEx_PeriphCLKConfig+0x1f7a>
340073c6:	21f3      	movs	r1, #243	@ 0xf3
340073c8:	487f      	ldr	r0, [pc, #508]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340073ca:	f7fa f83d 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340073ce:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340073d0:	3b01      	subs	r3, #1
340073d2:	2bff      	cmp	r3, #255	@ 0xff
340073d4:	d903      	bls.n	340073de <HAL_RCCEx_PeriphCLKConfig+0x1f8a>
340073d6:	21f4      	movs	r1, #244	@ 0xf4
340073d8:	487b      	ldr	r0, [pc, #492]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340073da:	f7fa f835 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340073de:	4a7b      	ldr	r2, [pc, #492]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340073e0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340073e2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340073e6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340073e8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340073ec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340073f0:	3901      	subs	r1, #1
340073f2:	4303      	orrs	r3, r0
340073f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340073f8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340073fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007400:	f7fe b91e 	b.w	34005640 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34007404:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34007408:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400740c:	d004      	beq.n	34007418 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
3400740e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007412:	486d      	ldr	r0, [pc, #436]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007414:	f7fa f818 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34007418:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
3400741c:	3b01      	subs	r3, #1
3400741e:	2bff      	cmp	r3, #255	@ 0xff
34007420:	d904      	bls.n	3400742c <HAL_RCCEx_PeriphCLKConfig+0x1fd8>
34007422:	f240 1101 	movw	r1, #257	@ 0x101
34007426:	4868      	ldr	r0, [pc, #416]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007428:	f7fa f80e 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400742c:	4a67      	ldr	r2, [pc, #412]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400742e:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34007432:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34007436:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
3400743a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400743e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007442:	3901      	subs	r1, #1
34007444:	4303      	orrs	r3, r0
34007446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400744a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
3400744e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34007452:	f7fe b8f5 	b.w	34005640 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34007456:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
3400745a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400745e:	d004      	beq.n	3400746a <HAL_RCCEx_PeriphCLKConfig+0x2016>
34007460:	f240 110d 	movw	r1, #269	@ 0x10d
34007464:	4858      	ldr	r0, [pc, #352]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007466:	f7f9 ffef 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400746a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
3400746e:	3b01      	subs	r3, #1
34007470:	2bff      	cmp	r3, #255	@ 0xff
34007472:	d904      	bls.n	3400747e <HAL_RCCEx_PeriphCLKConfig+0x202a>
34007474:	f44f 7187 	mov.w	r1, #270	@ 0x10e
34007478:	4853      	ldr	r0, [pc, #332]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400747a:	f7f9 ffe5 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400747e:	4a53      	ldr	r2, [pc, #332]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007480:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34007484:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
34007488:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
3400748c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007490:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007494:	3901      	subs	r1, #1
34007496:	4303      	orrs	r3, r0
34007498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400749c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340074a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
340074a4:	f7fe b8cc 	b.w	34005640 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
340074a8:	4a49      	ldr	r2, [pc, #292]	@ (340075d0 <HAL_RCCEx_PeriphCLKConfig+0x217c>)
340074aa:	4293      	cmp	r3, r2
340074ac:	d123      	bne.n	340074f6 <HAL_RCCEx_PeriphCLKConfig+0x20a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340074ae:	6a23      	ldr	r3, [r4, #32]
340074b0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340074b4:	d004      	beq.n	340074c0 <HAL_RCCEx_PeriphCLKConfig+0x206c>
340074b6:	f44f 719b 	mov.w	r1, #310	@ 0x136
340074ba:	4843      	ldr	r0, [pc, #268]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340074bc:	f7f9 ffc4 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340074c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340074c2:	3b01      	subs	r3, #1
340074c4:	2bff      	cmp	r3, #255	@ 0xff
340074c6:	d904      	bls.n	340074d2 <HAL_RCCEx_PeriphCLKConfig+0x207e>
340074c8:	f240 1137 	movw	r1, #311	@ 0x137
340074cc:	483e      	ldr	r0, [pc, #248]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340074ce:	f7f9 ffbb 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340074d2:	4a3e      	ldr	r2, [pc, #248]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340074d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340074d6:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340074da:	6a20      	ldr	r0, [r4, #32]
340074dc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340074e0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340074e4:	3901      	subs	r1, #1
340074e6:	4303      	orrs	r3, r0
340074e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340074ec:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340074f0:	2308      	movs	r3, #8
340074f2:	f7fe b8e8 	b.w	340056c6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
340074f6:	4a37      	ldr	r2, [pc, #220]	@ (340075d4 <HAL_RCCEx_PeriphCLKConfig+0x2180>)
340074f8:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340074fa:	bf02      	ittt	eq
340074fc:	2240      	moveq	r2, #64	@ 0x40
340074fe:	4b33      	ldreq	r3, [pc, #204]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007500:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007504:	f7fe b8e1 	b.w	340056ca <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34007508:	4a33      	ldr	r2, [pc, #204]	@ (340075d8 <HAL_RCCEx_PeriphCLKConfig+0x2184>)
3400750a:	4293      	cmp	r3, r2
3400750c:	d123      	bne.n	34007556 <HAL_RCCEx_PeriphCLKConfig+0x2102>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400750e:	6a23      	ldr	r3, [r4, #32]
34007510:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007514:	d004      	beq.n	34007520 <HAL_RCCEx_PeriphCLKConfig+0x20cc>
34007516:	f240 1163 	movw	r1, #355	@ 0x163
3400751a:	482b      	ldr	r0, [pc, #172]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400751c:	f7f9 ff94 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007520:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007522:	3b01      	subs	r3, #1
34007524:	2bff      	cmp	r3, #255	@ 0xff
34007526:	d904      	bls.n	34007532 <HAL_RCCEx_PeriphCLKConfig+0x20de>
34007528:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400752c:	4826      	ldr	r0, [pc, #152]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400752e:	f7f9 ff8b 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007532:	4a26      	ldr	r2, [pc, #152]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007534:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34007536:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400753a:	6a20      	ldr	r0, [r4, #32]
3400753c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007540:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007544:	3901      	subs	r1, #1
34007546:	4303      	orrs	r3, r0
34007548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400754c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34007550:	2308      	movs	r3, #8
34007552:	f7fe b8f5 	b.w	34005740 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
34007556:	4a21      	ldr	r2, [pc, #132]	@ (340075dc <HAL_RCCEx_PeriphCLKConfig+0x2188>)
34007558:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400755a:	bf02      	ittt	eq
3400755c:	2240      	moveq	r2, #64	@ 0x40
3400755e:	4b1b      	ldreq	r3, [pc, #108]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007560:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007564:	f7fe b8ee 	b.w	34005744 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34007568:	4a1d      	ldr	r2, [pc, #116]	@ (340075e0 <HAL_RCCEx_PeriphCLKConfig+0x218c>)
3400756a:	4293      	cmp	r3, r2
3400756c:	d123      	bne.n	340075b6 <HAL_RCCEx_PeriphCLKConfig+0x2162>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400756e:	6a23      	ldr	r3, [r4, #32]
34007570:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007574:	d004      	beq.n	34007580 <HAL_RCCEx_PeriphCLKConfig+0x212c>
34007576:	f44f 71c8 	mov.w	r1, #400	@ 0x190
3400757a:	4813      	ldr	r0, [pc, #76]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400757c:	f7f9 ff64 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007580:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007582:	3b01      	subs	r3, #1
34007584:	2bff      	cmp	r3, #255	@ 0xff
34007586:	d904      	bls.n	34007592 <HAL_RCCEx_PeriphCLKConfig+0x213e>
34007588:	f240 1191 	movw	r1, #401	@ 0x191
3400758c:	480e      	ldr	r0, [pc, #56]	@ (340075c8 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400758e:	f7f9 ff5b 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007592:	4a0e      	ldr	r2, [pc, #56]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007594:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34007596:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400759a:	6a20      	ldr	r0, [r4, #32]
3400759c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340075a0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340075a4:	3901      	subs	r1, #1
340075a6:	4303      	orrs	r3, r0
340075a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340075ac:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340075b0:	2308      	movs	r3, #8
340075b2:	f7fe b902 	b.w	340057ba <HAL_RCCEx_PeriphCLKConfig+0x366>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
340075b6:	4a0b      	ldr	r2, [pc, #44]	@ (340075e4 <HAL_RCCEx_PeriphCLKConfig+0x2190>)
340075b8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340075ba:	bf02      	ittt	eq
340075bc:	2240      	moveq	r2, #64	@ 0x40
340075be:	4b03      	ldreq	r3, [pc, #12]	@ (340075cc <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340075c0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340075c4:	f7fe b8fb 	b.w	340057be <HAL_RCCEx_PeriphCLKConfig+0x36a>
340075c8:	34010c5b 	.word	0x34010c5b
340075cc:	56028000 	.word	0x56028000
340075d0:	03030014 	.word	0x03030014
340075d4:	03010014 	.word	0x03010014
340075d8:	03030414 	.word	0x03030414
340075dc:	03010414 	.word	0x03010414
340075e0:	03030814 	.word	0x03030814
340075e4:	03010814 	.word	0x03010814
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
340075e8:	2b30      	cmp	r3, #48	@ 0x30
340075ea:	d123      	bne.n	34007634 <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340075ec:	6a23      	ldr	r3, [r4, #32]
340075ee:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340075f2:	d004      	beq.n	340075fe <HAL_RCCEx_PeriphCLKConfig+0x21aa>
340075f4:	f240 11bd 	movw	r1, #445	@ 0x1bd
340075f8:	48b2      	ldr	r0, [pc, #712]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340075fa:	f7f9 ff25 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340075fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007600:	3b01      	subs	r3, #1
34007602:	2bff      	cmp	r3, #255	@ 0xff
34007604:	d904      	bls.n	34007610 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
34007606:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3400760a:	48ae      	ldr	r0, [pc, #696]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400760c:	f7f9 ff1c 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007610:	4aad      	ldr	r2, [pc, #692]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007612:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34007614:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34007618:	6a20      	ldr	r0, [r4, #32]
3400761a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400761e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007622:	3901      	subs	r1, #1
34007624:	4303      	orrs	r3, r0
34007626:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400762a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400762e:	2308      	movs	r3, #8
34007630:	f7fe b8fd 	b.w	3400582e <HAL_RCCEx_PeriphCLKConfig+0x3da>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34007634:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007636:	bf02      	ittt	eq
34007638:	2240      	moveq	r2, #64	@ 0x40
3400763a:	4ba3      	ldreq	r3, [pc, #652]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400763c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007640:	f7fe b8f7 	b.w	34005832 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34007644:	4aa1      	ldr	r2, [pc, #644]	@ (340078cc <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34007646:	4293      	cmp	r3, r2
34007648:	d123      	bne.n	34007692 <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400764a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400764c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007650:	d004      	beq.n	3400765c <HAL_RCCEx_PeriphCLKConfig+0x2208>
34007652:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
34007656:	489b      	ldr	r0, [pc, #620]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007658:	f7f9 fef6 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400765c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400765e:	3b01      	subs	r3, #1
34007660:	2bff      	cmp	r3, #255	@ 0xff
34007662:	d904      	bls.n	3400766e <HAL_RCCEx_PeriphCLKConfig+0x221a>
34007664:	f240 11eb 	movw	r1, #491	@ 0x1eb
34007668:	4896      	ldr	r0, [pc, #600]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400766a:	f7f9 feed 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400766e:	4a96      	ldr	r2, [pc, #600]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007670:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34007672:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34007676:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34007678:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400767c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007680:	3901      	subs	r1, #1
34007682:	4303      	orrs	r3, r0
34007684:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007688:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3400768c:	2310      	movs	r3, #16
3400768e:	f7fe b911 	b.w	340058b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
34007692:	4a8f      	ldr	r2, [pc, #572]	@ (340078d0 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34007694:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007696:	bf02      	ittt	eq
34007698:	2240      	moveq	r2, #64	@ 0x40
3400769a:	4b8b      	ldreq	r3, [pc, #556]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400769c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340076a0:	f7fe b90a 	b.w	340058b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
340076a4:	4a8b      	ldr	r2, [pc, #556]	@ (340078d4 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
340076a6:	4293      	cmp	r3, r2
340076a8:	d123      	bne.n	340076f2 <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340076aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340076ac:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340076b0:	d004      	beq.n	340076bc <HAL_RCCEx_PeriphCLKConfig+0x2268>
340076b2:	f240 2117 	movw	r1, #535	@ 0x217
340076b6:	4883      	ldr	r0, [pc, #524]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340076b8:	f7f9 fec6 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
340076bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340076be:	3b01      	subs	r3, #1
340076c0:	2bff      	cmp	r3, #255	@ 0xff
340076c2:	d904      	bls.n	340076ce <HAL_RCCEx_PeriphCLKConfig+0x227a>
340076c4:	f44f 7106 	mov.w	r1, #536	@ 0x218
340076c8:	487e      	ldr	r0, [pc, #504]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340076ca:	f7f9 febd 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340076ce:	4a7e      	ldr	r2, [pc, #504]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340076d0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340076d2:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340076d6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340076d8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340076dc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340076e0:	3901      	subs	r1, #1
340076e2:	4303      	orrs	r3, r0
340076e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340076e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340076ec:	2310      	movs	r3, #16
340076ee:	f7fe b938 	b.w	34005962 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
340076f2:	4a79      	ldr	r2, [pc, #484]	@ (340078d8 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
340076f4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340076f6:	bf02      	ittt	eq
340076f8:	2240      	moveq	r2, #64	@ 0x40
340076fa:	4b73      	ldreq	r3, [pc, #460]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340076fc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007700:	f7fe b931 	b.w	34005966 <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34007704:	2b30      	cmp	r3, #48	@ 0x30
34007706:	d123      	bne.n	34007750 <HAL_RCCEx_PeriphCLKConfig+0x22fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400770a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400770e:	d004      	beq.n	3400771a <HAL_RCCEx_PeriphCLKConfig+0x22c6>
34007710:	f240 2145 	movw	r1, #581	@ 0x245
34007714:	486b      	ldr	r0, [pc, #428]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007716:	f7f9 fe97 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400771a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400771c:	3b01      	subs	r3, #1
3400771e:	2bff      	cmp	r3, #255	@ 0xff
34007720:	d904      	bls.n	3400772c <HAL_RCCEx_PeriphCLKConfig+0x22d8>
34007722:	f240 2146 	movw	r1, #582	@ 0x246
34007726:	4867      	ldr	r0, [pc, #412]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007728:	f7f9 fe8e 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400772c:	4a66      	ldr	r2, [pc, #408]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400772e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007730:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007734:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007736:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400773a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400773e:	3901      	subs	r1, #1
34007740:	4303      	orrs	r3, r0
34007742:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400774a:	2380      	movs	r3, #128	@ 0x80
3400774c:	f7fe b94f 	b.w	340059ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34007750:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007752:	bf02      	ittt	eq
34007754:	2240      	moveq	r2, #64	@ 0x40
34007756:	4b5c      	ldreq	r3, [pc, #368]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007758:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400775c:	f7fe b949 	b.w	340059f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34007760:	2b03      	cmp	r3, #3
34007762:	d123      	bne.n	340077ac <HAL_RCCEx_PeriphCLKConfig+0x2358>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007764:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007766:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400776a:	d004      	beq.n	34007776 <HAL_RCCEx_PeriphCLKConfig+0x2322>
3400776c:	f240 2173 	movw	r1, #627	@ 0x273
34007770:	4854      	ldr	r0, [pc, #336]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007772:	f7f9 fe69 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007776:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007778:	3b01      	subs	r3, #1
3400777a:	2bff      	cmp	r3, #255	@ 0xff
3400777c:	d904      	bls.n	34007788 <HAL_RCCEx_PeriphCLKConfig+0x2334>
3400777e:	f44f 711d 	mov.w	r1, #628	@ 0x274
34007782:	4850      	ldr	r0, [pc, #320]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007784:	f7f9 fe60 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007788:	4a4f      	ldr	r2, [pc, #316]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400778a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3400778c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007790:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007792:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007796:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400779a:	3901      	subs	r1, #1
3400779c:	4303      	orrs	r3, r0
3400779e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340077a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340077a6:	2380      	movs	r3, #128	@ 0x80
340077a8:	f7fe b967 	b.w	34005a7a <HAL_RCCEx_PeriphCLKConfig+0x626>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
340077ac:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077ae:	bf02      	ittt	eq
340077b0:	2240      	moveq	r2, #64	@ 0x40
340077b2:	4b45      	ldreq	r3, [pc, #276]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340077b4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077b8:	f7fe b961 	b.w	34005a7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
340077bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077c0:	bf02      	ittt	eq
340077c2:	2240      	moveq	r2, #64	@ 0x40
340077c4:	4b40      	ldreq	r3, [pc, #256]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340077c6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077ca:	f7fe b9ca 	b.w	34005b62 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
340077ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077d2:	bf02      	ittt	eq
340077d4:	2240      	moveq	r2, #64	@ 0x40
340077d6:	4b3c      	ldreq	r3, [pc, #240]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340077d8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077dc:	f7fe ba03 	b.w	34005be6 <HAL_RCCEx_PeriphCLKConfig+0x792>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
340077e0:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077e2:	bf02      	ittt	eq
340077e4:	2240      	moveq	r2, #64	@ 0x40
340077e6:	4b38      	ldreq	r3, [pc, #224]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340077e8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077ec:	f7fe ba92 	b.w	34005d14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
340077f0:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077f2:	bf02      	ittt	eq
340077f4:	2240      	moveq	r2, #64	@ 0x40
340077f6:	4b34      	ldreq	r3, [pc, #208]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340077f8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077fc:	f7fe bad3 	b.w	34005da6 <HAL_RCCEx_PeriphCLKConfig+0x952>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34007800:	4a36      	ldr	r2, [pc, #216]	@ (340078dc <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34007802:	4293      	cmp	r3, r2
34007804:	d124      	bne.n	34007850 <HAL_RCCEx_PeriphCLKConfig+0x23fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007806:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007808:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400780c:	d004      	beq.n	34007818 <HAL_RCCEx_PeriphCLKConfig+0x23c4>
3400780e:	f240 314f 	movw	r1, #847	@ 0x34f
34007812:	482c      	ldr	r0, [pc, #176]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007814:	f7f9 fe18 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007818:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400781a:	3b01      	subs	r3, #1
3400781c:	2bff      	cmp	r3, #255	@ 0xff
3400781e:	d904      	bls.n	3400782a <HAL_RCCEx_PeriphCLKConfig+0x23d6>
34007820:	f44f 7154 	mov.w	r1, #848	@ 0x350
34007824:	4827      	ldr	r0, [pc, #156]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007826:	f7f9 fe0f 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400782a:	4a27      	ldr	r2, [pc, #156]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400782c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400782e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007832:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007834:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007838:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400783c:	3901      	subs	r1, #1
3400783e:	4303      	orrs	r3, r0
34007840:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007844:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007848:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400784c:	f7fe baf3 	b.w	34005e36 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34007850:	4a23      	ldr	r2, [pc, #140]	@ (340078e0 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34007852:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007854:	bf02      	ittt	eq
34007856:	2240      	moveq	r2, #64	@ 0x40
34007858:	4b1b      	ldreq	r3, [pc, #108]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400785a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400785e:	f7fe baec 	b.w	34005e3a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34007862:	4a20      	ldr	r2, [pc, #128]	@ (340078e4 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34007864:	4293      	cmp	r3, r2
34007866:	d124      	bne.n	340078b2 <HAL_RCCEx_PeriphCLKConfig+0x245e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007868:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400786a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400786e:	d004      	beq.n	3400787a <HAL_RCCEx_PeriphCLKConfig+0x2426>
34007870:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34007874:	4813      	ldr	r0, [pc, #76]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007876:	f7f9 fde7 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400787a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400787c:	3b01      	subs	r3, #1
3400787e:	2bff      	cmp	r3, #255	@ 0xff
34007880:	d904      	bls.n	3400788c <HAL_RCCEx_PeriphCLKConfig+0x2438>
34007882:	f240 317d 	movw	r1, #893	@ 0x37d
34007886:	480f      	ldr	r0, [pc, #60]	@ (340078c4 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007888:	f7f9 fdde 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400788c:	4a0e      	ldr	r2, [pc, #56]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400788e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007890:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007894:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007896:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400789a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400789e:	3901      	subs	r1, #1
340078a0:	4303      	orrs	r3, r0
340078a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340078a6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340078aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340078ae:	f7fe bb06 	b.w	34005ebe <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
340078b2:	4a0d      	ldr	r2, [pc, #52]	@ (340078e8 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
340078b4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078b6:	bf02      	ittt	eq
340078b8:	2240      	moveq	r2, #64	@ 0x40
340078ba:	4b03      	ldreq	r3, [pc, #12]	@ (340078c8 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340078bc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078c0:	f7fe baff 	b.w	34005ec2 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
340078c4:	34010c5b 	.word	0x34010c5b
340078c8:	56028000 	.word	0x56028000
340078cc:	0303001c 	.word	0x0303001c
340078d0:	0301001c 	.word	0x0301001c
340078d4:	0303041c 	.word	0x0303041c
340078d8:	0301041c 	.word	0x0301041c
340078dc:	0703000c 	.word	0x0703000c
340078e0:	0701000c 	.word	0x0701000c
340078e4:	0703040c 	.word	0x0703040c
340078e8:	0701040c 	.word	0x0701040c
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
340078ec:	4ab1      	ldr	r2, [pc, #708]	@ (34007bb4 <HAL_RCCEx_PeriphCLKConfig+0x2760>)
340078ee:	4293      	cmp	r3, r2
340078f0:	d124      	bne.n	3400793c <HAL_RCCEx_PeriphCLKConfig+0x24e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340078f2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340078f4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340078f8:	d004      	beq.n	34007904 <HAL_RCCEx_PeriphCLKConfig+0x24b0>
340078fa:	f240 31a9 	movw	r1, #937	@ 0x3a9
340078fe:	48ae      	ldr	r0, [pc, #696]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007900:	f7f9 fda2 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007904:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007906:	3b01      	subs	r3, #1
34007908:	2bff      	cmp	r3, #255	@ 0xff
3400790a:	d904      	bls.n	34007916 <HAL_RCCEx_PeriphCLKConfig+0x24c2>
3400790c:	f240 31aa 	movw	r1, #938	@ 0x3aa
34007910:	48a9      	ldr	r0, [pc, #676]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007912:	f7f9 fd99 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007916:	4aa9      	ldr	r2, [pc, #676]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007918:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400791a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400791e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007920:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007924:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007928:	3901      	subs	r1, #1
3400792a:	4303      	orrs	r3, r0
3400792c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007930:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007934:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007938:	f7fe bb05 	b.w	34005f46 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
3400793c:	4aa0      	ldr	r2, [pc, #640]	@ (34007bc0 <HAL_RCCEx_PeriphCLKConfig+0x276c>)
3400793e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007940:	bf02      	ittt	eq
34007942:	2240      	moveq	r2, #64	@ 0x40
34007944:	4b9d      	ldreq	r3, [pc, #628]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007946:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400794a:	f7fe bafe 	b.w	34005f4a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3400794e:	4a9d      	ldr	r2, [pc, #628]	@ (34007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2770>)
34007950:	4293      	cmp	r3, r2
34007952:	d124      	bne.n	3400799e <HAL_RCCEx_PeriphCLKConfig+0x254a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007954:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007956:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400795a:	d004      	beq.n	34007966 <HAL_RCCEx_PeriphCLKConfig+0x2512>
3400795c:	f240 31d6 	movw	r1, #982	@ 0x3d6
34007960:	4895      	ldr	r0, [pc, #596]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007962:	f7f9 fd71 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007966:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007968:	3b01      	subs	r3, #1
3400796a:	2bff      	cmp	r3, #255	@ 0xff
3400796c:	d904      	bls.n	34007978 <HAL_RCCEx_PeriphCLKConfig+0x2524>
3400796e:	f240 31d7 	movw	r1, #983	@ 0x3d7
34007972:	4891      	ldr	r0, [pc, #580]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007974:	f7f9 fd68 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007978:	4a90      	ldr	r2, [pc, #576]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400797a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400797c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007980:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007982:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007986:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400798a:	3901      	subs	r1, #1
3400798c:	4303      	orrs	r3, r0
3400798e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007992:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007996:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400799a:	f7fe bb2c 	b.w	34005ff6 <HAL_RCCEx_PeriphCLKConfig+0xba2>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3400799e:	4a8a      	ldr	r2, [pc, #552]	@ (34007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2774>)
340079a0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079a2:	bf02      	ittt	eq
340079a4:	2240      	moveq	r2, #64	@ 0x40
340079a6:	4b85      	ldreq	r3, [pc, #532]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340079a8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079ac:	f7fe bb25 	b.w	34005ffa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
340079b0:	4a86      	ldr	r2, [pc, #536]	@ (34007bcc <HAL_RCCEx_PeriphCLKConfig+0x2778>)
340079b2:	4293      	cmp	r3, r2
340079b4:	d124      	bne.n	34007a00 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340079b6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340079b8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340079bc:	d004      	beq.n	340079c8 <HAL_RCCEx_PeriphCLKConfig+0x2574>
340079be:	f240 4103 	movw	r1, #1027	@ 0x403
340079c2:	487d      	ldr	r0, [pc, #500]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340079c4:	f7f9 fd40 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340079c8:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340079ca:	3b01      	subs	r3, #1
340079cc:	2bff      	cmp	r3, #255	@ 0xff
340079ce:	d904      	bls.n	340079da <HAL_RCCEx_PeriphCLKConfig+0x2586>
340079d0:	f240 4104 	movw	r1, #1028	@ 0x404
340079d4:	4878      	ldr	r0, [pc, #480]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340079d6:	f7f9 fd37 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340079da:	4a78      	ldr	r2, [pc, #480]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340079dc:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340079de:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340079e2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340079e4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340079e8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340079ec:	3901      	subs	r1, #1
340079ee:	4303      	orrs	r3, r0
340079f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340079f4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340079f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340079fc:	f7fe bb3f 	b.w	3400607e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34007a00:	4a73      	ldr	r2, [pc, #460]	@ (34007bd0 <HAL_RCCEx_PeriphCLKConfig+0x277c>)
34007a02:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a04:	bf02      	ittt	eq
34007a06:	2240      	moveq	r2, #64	@ 0x40
34007a08:	4b6c      	ldreq	r3, [pc, #432]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007a0a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a0e:	f7fe bb38 	b.w	34006082 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34007a12:	4a70      	ldr	r2, [pc, #448]	@ (34007bd4 <HAL_RCCEx_PeriphCLKConfig+0x2780>)
34007a14:	4293      	cmp	r3, r2
34007a16:	d124      	bne.n	34007a62 <HAL_RCCEx_PeriphCLKConfig+0x260e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007a18:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007a1a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007a1e:	d004      	beq.n	34007a2a <HAL_RCCEx_PeriphCLKConfig+0x25d6>
34007a20:	f44f 6186 	mov.w	r1, #1072	@ 0x430
34007a24:	4864      	ldr	r0, [pc, #400]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007a26:	f7f9 fd0f 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007a2a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007a2c:	3b01      	subs	r3, #1
34007a2e:	2bff      	cmp	r3, #255	@ 0xff
34007a30:	d904      	bls.n	34007a3c <HAL_RCCEx_PeriphCLKConfig+0x25e8>
34007a32:	f240 4131 	movw	r1, #1073	@ 0x431
34007a36:	4860      	ldr	r0, [pc, #384]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007a38:	f7f9 fd06 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007a3c:	4a5f      	ldr	r2, [pc, #380]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007a3e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007a40:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007a44:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007a46:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007a4a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007a4e:	3901      	subs	r1, #1
34007a50:	4303      	orrs	r3, r0
34007a52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007a56:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007a5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007a5e:	f7fe bb52 	b.w	34006106 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34007a62:	4a5d      	ldr	r2, [pc, #372]	@ (34007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2784>)
34007a64:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a66:	bf02      	ittt	eq
34007a68:	2240      	moveq	r2, #64	@ 0x40
34007a6a:	4b54      	ldreq	r3, [pc, #336]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007a6c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a70:	f7fe bb4b 	b.w	3400610a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34007a74:	4a59      	ldr	r2, [pc, #356]	@ (34007bdc <HAL_RCCEx_PeriphCLKConfig+0x2788>)
34007a76:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a78:	bf02      	ittt	eq
34007a7a:	2240      	moveq	r2, #64	@ 0x40
34007a7c:	4b4f      	ldreq	r3, [pc, #316]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007a7e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a82:	f7fe bb86 	b.w	34006192 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34007a86:	4a56      	ldr	r2, [pc, #344]	@ (34007be0 <HAL_RCCEx_PeriphCLKConfig+0x278c>)
34007a88:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a8a:	bf02      	ittt	eq
34007a8c:	2240      	moveq	r2, #64	@ 0x40
34007a8e:	4b4b      	ldreq	r3, [pc, #300]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007a90:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a94:	f7fe bbc1 	b.w	3400621a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34007a98:	4a52      	ldr	r2, [pc, #328]	@ (34007be4 <HAL_RCCEx_PeriphCLKConfig+0x2790>)
34007a9a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a9c:	bf02      	ittt	eq
34007a9e:	2240      	moveq	r2, #64	@ 0x40
34007aa0:	4b46      	ldreq	r3, [pc, #280]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007aa2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007aa6:	f7fe bc17 	b.w	340062d8 <HAL_RCCEx_PeriphCLKConfig+0xe84>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34007aaa:	4a4f      	ldr	r2, [pc, #316]	@ (34007be8 <HAL_RCCEx_PeriphCLKConfig+0x2794>)
34007aac:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007aae:	bf02      	ittt	eq
34007ab0:	2240      	moveq	r2, #64	@ 0x40
34007ab2:	4b42      	ldreq	r3, [pc, #264]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007ab4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007ab8:	f7fe bc52 	b.w	34006360 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34007abc:	4a4b      	ldr	r2, [pc, #300]	@ (34007bec <HAL_RCCEx_PeriphCLKConfig+0x2798>)
34007abe:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ac0:	bf02      	ittt	eq
34007ac2:	2240      	moveq	r2, #64	@ 0x40
34007ac4:	4b3d      	ldreq	r3, [pc, #244]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007ac6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007aca:	f7fe bc8d 	b.w	340063e8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34007ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34007ad2:	d124      	bne.n	34007b1e <HAL_RCCEx_PeriphCLKConfig+0x26ca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007ad4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ad6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ada:	d004      	beq.n	34007ae6 <HAL_RCCEx_PeriphCLKConfig+0x2692>
34007adc:	f240 41fd 	movw	r1, #1277	@ 0x4fd
34007ae0:	4835      	ldr	r0, [pc, #212]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007ae2:	f7f9 fcb1 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007ae6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007ae8:	3b01      	subs	r3, #1
34007aea:	2bff      	cmp	r3, #255	@ 0xff
34007aec:	d904      	bls.n	34007af8 <HAL_RCCEx_PeriphCLKConfig+0x26a4>
34007aee:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34007af2:	4831      	ldr	r0, [pc, #196]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007af4:	f7f9 fca8 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007af8:	4a30      	ldr	r2, [pc, #192]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007afa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007afc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007b00:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007b02:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b06:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b0a:	3901      	subs	r1, #1
34007b0c:	4303      	orrs	r3, r0
34007b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b12:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007b16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007b1a:	f7fe bca7 	b.w	3400646c <HAL_RCCEx_PeriphCLKConfig+0x1018>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34007b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b22:	bf02      	ittt	eq
34007b24:	2240      	moveq	r2, #64	@ 0x40
34007b26:	4b25      	ldreq	r3, [pc, #148]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007b28:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b2c:	f7fe bca0 	b.w	34006470 <HAL_RCCEx_PeriphCLKConfig+0x101c>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34007b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b34:	bf02      	ittt	eq
34007b36:	2240      	moveq	r2, #64	@ 0x40
34007b38:	4b20      	ldreq	r3, [pc, #128]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007b3a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b3e:	f7fe bcdd 	b.w	340064fc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34007b42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34007b46:	d123      	bne.n	34007b90 <HAL_RCCEx_PeriphCLKConfig+0x273c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007b48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007b4a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007b4e:	d004      	beq.n	34007b5a <HAL_RCCEx_PeriphCLKConfig+0x2706>
34007b50:	f240 514a 	movw	r1, #1354	@ 0x54a
34007b54:	4818      	ldr	r0, [pc, #96]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007b56:	f7f9 fc77 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007b5a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007b5c:	3b01      	subs	r3, #1
34007b5e:	2bff      	cmp	r3, #255	@ 0xff
34007b60:	d904      	bls.n	34007b6c <HAL_RCCEx_PeriphCLKConfig+0x2718>
34007b62:	f240 514b 	movw	r1, #1355	@ 0x54b
34007b66:	4814      	ldr	r0, [pc, #80]	@ (34007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007b68:	f7f9 fc6e 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007b6c:	4a13      	ldr	r2, [pc, #76]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007b6e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007b70:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007b74:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007b76:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b7a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b7e:	3901      	subs	r1, #1
34007b80:	4303      	orrs	r3, r0
34007b82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007b8a:	2380      	movs	r3, #128	@ 0x80
34007b8c:	f7fe bcf8 	b.w	34006580 <HAL_RCCEx_PeriphCLKConfig+0x112c>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34007b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b94:	bf02      	ittt	eq
34007b96:	2240      	moveq	r2, #64	@ 0x40
34007b98:	4b08      	ldreq	r3, [pc, #32]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007b9a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b9e:	f7fe bcf1 	b.w	34006584 <HAL_RCCEx_PeriphCLKConfig+0x1130>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34007ba2:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ba4:	bf02      	ittt	eq
34007ba6:	2240      	moveq	r2, #64	@ 0x40
34007ba8:	4b04      	ldreq	r3, [pc, #16]	@ (34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007baa:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007bae:	f7fe bd3b 	b.w	34006628 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
34007bb2:	bf00      	nop
34007bb4:	0703080c 	.word	0x0703080c
34007bb8:	34010c5b 	.word	0x34010c5b
34007bbc:	56028000 	.word	0x56028000
34007bc0:	0701080c 	.word	0x0701080c
34007bc4:	07030c0c 	.word	0x07030c0c
34007bc8:	07010c0c 	.word	0x07010c0c
34007bcc:	0703100c 	.word	0x0703100c
34007bd0:	0701100c 	.word	0x0701100c
34007bd4:	0703140c 	.word	0x0703140c
34007bd8:	0701140c 	.word	0x0701140c
34007bdc:	0701082c 	.word	0x0701082c
34007be0:	07010c2c 	.word	0x07010c2c
34007be4:	0701102c 	.word	0x0701102c
34007be8:	0701142c 	.word	0x0701142c
34007bec:	0701182c 	.word	0x0701182c
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34007bf0:	4aa8      	ldr	r2, [pc, #672]	@ (34007e94 <HAL_RCCEx_PeriphCLKConfig+0x2a40>)
34007bf2:	4293      	cmp	r3, r2
34007bf4:	d123      	bne.n	34007c3e <HAL_RCCEx_PeriphCLKConfig+0x27ea>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007bf6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007bf8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007bfc:	d004      	beq.n	34007c08 <HAL_RCCEx_PeriphCLKConfig+0x27b4>
34007bfe:	f240 5197 	movw	r1, #1431	@ 0x597
34007c02:	48a5      	ldr	r0, [pc, #660]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c04:	f7f9 fc20 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007c08:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007c0a:	3b01      	subs	r3, #1
34007c0c:	2bff      	cmp	r3, #255	@ 0xff
34007c0e:	d904      	bls.n	34007c1a <HAL_RCCEx_PeriphCLKConfig+0x27c6>
34007c10:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
34007c14:	48a0      	ldr	r0, [pc, #640]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c16:	f7f9 fc17 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007c1a:	4aa0      	ldr	r2, [pc, #640]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007c1e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007c22:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007c24:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c28:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c2c:	3901      	subs	r1, #1
34007c2e:	4303      	orrs	r3, r0
34007c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007c38:	2380      	movs	r3, #128	@ 0x80
34007c3a:	f7fe bd3a 	b.w	340066b2 <HAL_RCCEx_PeriphCLKConfig+0x125e>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34007c3e:	4a98      	ldr	r2, [pc, #608]	@ (34007ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a4c>)
34007c40:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c42:	bf02      	ittt	eq
34007c44:	2240      	moveq	r2, #64	@ 0x40
34007c46:	4b95      	ldreq	r3, [pc, #596]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c48:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c4c:	f7fe bd33 	b.w	340066b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34007c50:	4a94      	ldr	r2, [pc, #592]	@ (34007ea4 <HAL_RCCEx_PeriphCLKConfig+0x2a50>)
34007c52:	4293      	cmp	r3, r2
34007c54:	d123      	bne.n	34007c9e <HAL_RCCEx_PeriphCLKConfig+0x284a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007c56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007c58:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007c5c:	d004      	beq.n	34007c68 <HAL_RCCEx_PeriphCLKConfig+0x2814>
34007c5e:	f240 51c4 	movw	r1, #1476	@ 0x5c4
34007c62:	488d      	ldr	r0, [pc, #564]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c64:	f7f9 fbf0 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007c68:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007c6a:	3b01      	subs	r3, #1
34007c6c:	2bff      	cmp	r3, #255	@ 0xff
34007c6e:	d904      	bls.n	34007c7a <HAL_RCCEx_PeriphCLKConfig+0x2826>
34007c70:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34007c74:	4888      	ldr	r0, [pc, #544]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c76:	f7f9 fbe7 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007c7a:	4a88      	ldr	r2, [pc, #544]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007c7e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007c82:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007c84:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c88:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c8c:	3901      	subs	r1, #1
34007c8e:	4303      	orrs	r3, r0
34007c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007c98:	2380      	movs	r3, #128	@ 0x80
34007c9a:	f7fe bd4b 	b.w	34006734 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34007c9e:	4a82      	ldr	r2, [pc, #520]	@ (34007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2a54>)
34007ca0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ca2:	bf02      	ittt	eq
34007ca4:	2240      	moveq	r2, #64	@ 0x40
34007ca6:	4b7d      	ldreq	r3, [pc, #500]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007ca8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007cac:	f7fe bd44 	b.w	34006738 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34007cb0:	2b03      	cmp	r3, #3
34007cb2:	d123      	bne.n	34007cfc <HAL_RCCEx_PeriphCLKConfig+0x28a8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007cb6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007cba:	d004      	beq.n	34007cc6 <HAL_RCCEx_PeriphCLKConfig+0x2872>
34007cbc:	f240 51f1 	movw	r1, #1521	@ 0x5f1
34007cc0:	4875      	ldr	r0, [pc, #468]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007cc2:	f7f9 fbc1 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007cc6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007cc8:	3b01      	subs	r3, #1
34007cca:	2bff      	cmp	r3, #255	@ 0xff
34007ccc:	d904      	bls.n	34007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2884>
34007cce:	f240 51f2 	movw	r1, #1522	@ 0x5f2
34007cd2:	4871      	ldr	r0, [pc, #452]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007cd4:	f7f9 fbb8 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007cd8:	4a70      	ldr	r2, [pc, #448]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007cda:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007cdc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007ce0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007ce2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007ce6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007cea:	3901      	subs	r1, #1
34007cec:	4303      	orrs	r3, r0
34007cee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007cf6:	2380      	movs	r3, #128	@ 0x80
34007cf8:	f7fe bd55 	b.w	340067a6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34007cfc:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007cfe:	bf02      	ittt	eq
34007d00:	2240      	moveq	r2, #64	@ 0x40
34007d02:	4b66      	ldreq	r3, [pc, #408]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007d04:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007d08:	f7fe bd4f 	b.w	340067aa <HAL_RCCEx_PeriphCLKConfig+0x1356>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34007d0c:	4a67      	ldr	r2, [pc, #412]	@ (34007eac <HAL_RCCEx_PeriphCLKConfig+0x2a58>)
34007d0e:	4293      	cmp	r3, r2
34007d10:	d124      	bne.n	34007d5c <HAL_RCCEx_PeriphCLKConfig+0x2908>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007d12:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007d14:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007d18:	d004      	beq.n	34007d24 <HAL_RCCEx_PeriphCLKConfig+0x28d0>
34007d1a:	f240 611e 	movw	r1, #1566	@ 0x61e
34007d1e:	485e      	ldr	r0, [pc, #376]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007d20:	f7f9 fb92 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007d24:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007d26:	3b01      	subs	r3, #1
34007d28:	2bff      	cmp	r3, #255	@ 0xff
34007d2a:	d904      	bls.n	34007d36 <HAL_RCCEx_PeriphCLKConfig+0x28e2>
34007d2c:	f240 611f 	movw	r1, #1567	@ 0x61f
34007d30:	4859      	ldr	r0, [pc, #356]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007d32:	f7f9 fb89 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007d36:	4a59      	ldr	r2, [pc, #356]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007d38:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007d3a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007d3e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007d40:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007d44:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007d48:	3901      	subs	r1, #1
34007d4a:	4303      	orrs	r3, r0
34007d4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007d50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007d58:	f7fe bd72 	b.w	34006840 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34007d5c:	4a54      	ldr	r2, [pc, #336]	@ (34007eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a5c>)
34007d5e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007d60:	bf02      	ittt	eq
34007d62:	2240      	moveq	r2, #64	@ 0x40
34007d64:	4b4d      	ldreq	r3, [pc, #308]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007d66:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007d6a:	f7fe bd6b 	b.w	34006844 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34007d6e:	4a51      	ldr	r2, [pc, #324]	@ (34007eb4 <HAL_RCCEx_PeriphCLKConfig+0x2a60>)
34007d70:	4293      	cmp	r3, r2
34007d72:	d124      	bne.n	34007dbe <HAL_RCCEx_PeriphCLKConfig+0x296a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007d74:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007d76:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007d7a:	d004      	beq.n	34007d86 <HAL_RCCEx_PeriphCLKConfig+0x2932>
34007d7c:	f240 614b 	movw	r1, #1611	@ 0x64b
34007d80:	4845      	ldr	r0, [pc, #276]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007d82:	f7f9 fb61 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007d86:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007d88:	3b01      	subs	r3, #1
34007d8a:	2bff      	cmp	r3, #255	@ 0xff
34007d8c:	d904      	bls.n	34007d98 <HAL_RCCEx_PeriphCLKConfig+0x2944>
34007d8e:	f240 614c 	movw	r1, #1612	@ 0x64c
34007d92:	4841      	ldr	r0, [pc, #260]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007d94:	f7f9 fb58 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007d98:	4a40      	ldr	r2, [pc, #256]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007d9a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007d9c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007da0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007da2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007da6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007daa:	3901      	subs	r1, #1
34007dac:	4303      	orrs	r3, r0
34007dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007db2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007db6:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007dba:	f7fe bd88 	b.w	340068ce <HAL_RCCEx_PeriphCLKConfig+0x147a>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34007dbe:	4a3e      	ldr	r2, [pc, #248]	@ (34007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2a64>)
34007dc0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007dc2:	bf02      	ittt	eq
34007dc4:	2240      	moveq	r2, #64	@ 0x40
34007dc6:	4b35      	ldreq	r3, [pc, #212]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007dc8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007dcc:	f7fe bd81 	b.w	340068d2 <HAL_RCCEx_PeriphCLKConfig+0x147e>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34007dd0:	4a3a      	ldr	r2, [pc, #232]	@ (34007ebc <HAL_RCCEx_PeriphCLKConfig+0x2a68>)
34007dd2:	4293      	cmp	r3, r2
34007dd4:	d124      	bne.n	34007e20 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007dd6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007dd8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ddc:	d004      	beq.n	34007de8 <HAL_RCCEx_PeriphCLKConfig+0x2994>
34007dde:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
34007de2:	482d      	ldr	r0, [pc, #180]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007de4:	f7f9 fb30 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007de8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007dea:	3b01      	subs	r3, #1
34007dec:	2bff      	cmp	r3, #255	@ 0xff
34007dee:	d904      	bls.n	34007dfa <HAL_RCCEx_PeriphCLKConfig+0x29a6>
34007df0:	f240 6179 	movw	r1, #1657	@ 0x679
34007df4:	4828      	ldr	r0, [pc, #160]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007df6:	f7f9 fb27 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007dfa:	4a28      	ldr	r2, [pc, #160]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007dfc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007dfe:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007e02:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007e04:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e08:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e0c:	3901      	subs	r1, #1
34007e0e:	4303      	orrs	r3, r0
34007e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007e1c:	f7fe bdb8 	b.w	34006990 <HAL_RCCEx_PeriphCLKConfig+0x153c>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34007e20:	4a27      	ldr	r2, [pc, #156]	@ (34007ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a6c>)
34007e22:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007e24:	bf02      	ittt	eq
34007e26:	2240      	moveq	r2, #64	@ 0x40
34007e28:	4b1c      	ldreq	r3, [pc, #112]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007e2a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007e2e:	f7fe bdb1 	b.w	34006994 <HAL_RCCEx_PeriphCLKConfig+0x1540>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34007e32:	4a24      	ldr	r2, [pc, #144]	@ (34007ec4 <HAL_RCCEx_PeriphCLKConfig+0x2a70>)
34007e34:	4293      	cmp	r3, r2
34007e36:	d124      	bne.n	34007e82 <HAL_RCCEx_PeriphCLKConfig+0x2a2e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007e38:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007e3a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e3e:	d004      	beq.n	34007e4a <HAL_RCCEx_PeriphCLKConfig+0x29f6>
34007e40:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34007e44:	4814      	ldr	r0, [pc, #80]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007e46:	f7f9 faff 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007e4a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007e4c:	3b01      	subs	r3, #1
34007e4e:	2bff      	cmp	r3, #255	@ 0xff
34007e50:	d904      	bls.n	34007e5c <HAL_RCCEx_PeriphCLKConfig+0x2a08>
34007e52:	f240 61a6 	movw	r1, #1702	@ 0x6a6
34007e56:	4810      	ldr	r0, [pc, #64]	@ (34007e98 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007e58:	f7f9 faf6 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007e5c:	4a0f      	ldr	r2, [pc, #60]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007e5e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007e60:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007e64:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007e66:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e6a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e6e:	3901      	subs	r1, #1
34007e70:	4303      	orrs	r3, r0
34007e72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e76:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007e7e:	f7fe bdcf 	b.w	34006a20 <HAL_RCCEx_PeriphCLKConfig+0x15cc>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34007e82:	4a11      	ldr	r2, [pc, #68]	@ (34007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a74>)
34007e84:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007e86:	bf02      	ittt	eq
34007e88:	2240      	moveq	r2, #64	@ 0x40
34007e8a:	4b04      	ldreq	r3, [pc, #16]	@ (34007e9c <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007e8c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007e90:	f7fe bdc8 	b.w	34006a24 <HAL_RCCEx_PeriphCLKConfig+0x15d0>
34007e94:	07031418 	.word	0x07031418
34007e98:	34010c5b 	.word	0x34010c5b
34007e9c:	56028000 	.word	0x56028000
34007ea0:	07011418 	.word	0x07011418
34007ea4:	07031818 	.word	0x07031818
34007ea8:	07011818 	.word	0x07011818
34007eac:	07030420 	.word	0x07030420
34007eb0:	07010420 	.word	0x07010420
34007eb4:	07030820 	.word	0x07030820
34007eb8:	07010820 	.word	0x07010820
34007ebc:	07030c20 	.word	0x07030c20
34007ec0:	07010c20 	.word	0x07010c20
34007ec4:	07031020 	.word	0x07031020
34007ec8:	07011020 	.word	0x07011020
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34007ecc:	4aab      	ldr	r2, [pc, #684]	@ (3400817c <HAL_RCCEx_PeriphCLKConfig+0x2d28>)
34007ece:	4293      	cmp	r3, r2
34007ed0:	d124      	bne.n	34007f1c <HAL_RCCEx_PeriphCLKConfig+0x2ac8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007ed2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ed4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ed8:	d004      	beq.n	34007ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a90>
34007eda:	f240 61d2 	movw	r1, #1746	@ 0x6d2
34007ede:	48a8      	ldr	r0, [pc, #672]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007ee0:	f7f9 fab2 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007ee4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007ee6:	3b01      	subs	r3, #1
34007ee8:	2bff      	cmp	r3, #255	@ 0xff
34007eea:	d904      	bls.n	34007ef6 <HAL_RCCEx_PeriphCLKConfig+0x2aa2>
34007eec:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34007ef0:	48a3      	ldr	r0, [pc, #652]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007ef2:	f7f9 faa9 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007ef6:	4aa3      	ldr	r2, [pc, #652]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007ef8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007efa:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007efe:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007f00:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007f04:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007f08:	3901      	subs	r1, #1
34007f0a:	4303      	orrs	r3, r0
34007f0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007f10:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007f14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007f18:	f7fe bdca 	b.w	34006ab0 <HAL_RCCEx_PeriphCLKConfig+0x165c>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34007f1c:	4a9a      	ldr	r2, [pc, #616]	@ (34008188 <HAL_RCCEx_PeriphCLKConfig+0x2d34>)
34007f1e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f20:	bf02      	ittt	eq
34007f22:	2240      	moveq	r2, #64	@ 0x40
34007f24:	4b97      	ldreq	r3, [pc, #604]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007f26:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f2a:	f7fe bdc3 	b.w	34006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1660>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34007f2e:	4a97      	ldr	r2, [pc, #604]	@ (3400818c <HAL_RCCEx_PeriphCLKConfig+0x2d38>)
34007f30:	4293      	cmp	r3, r2
34007f32:	d124      	bne.n	34007f7e <HAL_RCCEx_PeriphCLKConfig+0x2b2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007f34:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007f36:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007f3a:	d004      	beq.n	34007f46 <HAL_RCCEx_PeriphCLKConfig+0x2af2>
34007f3c:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34007f40:	488f      	ldr	r0, [pc, #572]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f42:	f7f9 fa81 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007f46:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007f48:	3b01      	subs	r3, #1
34007f4a:	2bff      	cmp	r3, #255	@ 0xff
34007f4c:	d904      	bls.n	34007f58 <HAL_RCCEx_PeriphCLKConfig+0x2b04>
34007f4e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34007f52:	488b      	ldr	r0, [pc, #556]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f54:	f7f9 fa78 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007f58:	4a8a      	ldr	r2, [pc, #552]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007f5a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007f5c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007f60:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007f62:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007f66:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007f6a:	3901      	subs	r1, #1
34007f6c:	4303      	orrs	r3, r0
34007f6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007f72:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007f76:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007f7a:	f7fe bde0 	b.w	34006b3e <HAL_RCCEx_PeriphCLKConfig+0x16ea>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34007f7e:	4a84      	ldr	r2, [pc, #528]	@ (34008190 <HAL_RCCEx_PeriphCLKConfig+0x2d3c>)
34007f80:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f82:	bf02      	ittt	eq
34007f84:	2240      	moveq	r2, #64	@ 0x40
34007f86:	4b7f      	ldreq	r3, [pc, #508]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007f88:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f8c:	f7fe bdd9 	b.w	34006b42 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34007f90:	4a80      	ldr	r2, [pc, #512]	@ (34008194 <HAL_RCCEx_PeriphCLKConfig+0x2d40>)
34007f92:	4293      	cmp	r3, r2
34007f94:	d124      	bne.n	34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b8c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007f96:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007f98:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007f9c:	d004      	beq.n	34007fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b54>
34007f9e:	f240 712c 	movw	r1, #1836	@ 0x72c
34007fa2:	4877      	ldr	r0, [pc, #476]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007fa4:	f7f9 fa50 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007fa8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007faa:	3b01      	subs	r3, #1
34007fac:	2bff      	cmp	r3, #255	@ 0xff
34007fae:	d904      	bls.n	34007fba <HAL_RCCEx_PeriphCLKConfig+0x2b66>
34007fb0:	f240 712d 	movw	r1, #1837	@ 0x72d
34007fb4:	4872      	ldr	r0, [pc, #456]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007fb6:	f7f9 fa47 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007fba:	4a72      	ldr	r2, [pc, #456]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007fbc:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007fbe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007fc2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007fc4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007fc8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007fcc:	3901      	subs	r1, #1
34007fce:	4303      	orrs	r3, r0
34007fd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007fd4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007fdc:	f7fe bdf7 	b.w	34006bce <HAL_RCCEx_PeriphCLKConfig+0x177a>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34007fe0:	4a6d      	ldr	r2, [pc, #436]	@ (34008198 <HAL_RCCEx_PeriphCLKConfig+0x2d44>)
34007fe2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007fe4:	bf02      	ittt	eq
34007fe6:	2240      	moveq	r2, #64	@ 0x40
34007fe8:	4b66      	ldreq	r3, [pc, #408]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007fea:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007fee:	f7fe bdf0 	b.w	34006bd2 <HAL_RCCEx_PeriphCLKConfig+0x177e>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34007ff2:	4a6a      	ldr	r2, [pc, #424]	@ (3400819c <HAL_RCCEx_PeriphCLKConfig+0x2d48>)
34007ff4:	4293      	cmp	r3, r2
34007ff6:	d124      	bne.n	34008042 <HAL_RCCEx_PeriphCLKConfig+0x2bee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007ff8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ffa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ffe:	d004      	beq.n	3400800a <HAL_RCCEx_PeriphCLKConfig+0x2bb6>
34008000:	f240 7159 	movw	r1, #1881	@ 0x759
34008004:	485e      	ldr	r0, [pc, #376]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34008006:	f7f9 fa1f 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400800a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3400800c:	3b01      	subs	r3, #1
3400800e:	2bff      	cmp	r3, #255	@ 0xff
34008010:	d904      	bls.n	3400801c <HAL_RCCEx_PeriphCLKConfig+0x2bc8>
34008012:	f240 715a 	movw	r1, #1882	@ 0x75a
34008016:	485a      	ldr	r0, [pc, #360]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34008018:	f7f9 fa16 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400801c:	4a59      	ldr	r2, [pc, #356]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3400801e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008020:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008024:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008026:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400802a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400802e:	3901      	subs	r1, #1
34008030:	4303      	orrs	r3, r0
34008032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008036:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400803a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400803e:	f7fe be27 	b.w	34006c90 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34008042:	4a57      	ldr	r2, [pc, #348]	@ (340081a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4c>)
34008044:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008046:	bf02      	ittt	eq
34008048:	2240      	moveq	r2, #64	@ 0x40
3400804a:	4b4e      	ldreq	r3, [pc, #312]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3400804c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008050:	f7fe be20 	b.w	34006c94 <HAL_RCCEx_PeriphCLKConfig+0x1840>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34008054:	4a53      	ldr	r2, [pc, #332]	@ (340081a4 <HAL_RCCEx_PeriphCLKConfig+0x2d50>)
34008056:	4293      	cmp	r3, r2
34008058:	d124      	bne.n	340080a4 <HAL_RCCEx_PeriphCLKConfig+0x2c50>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400805a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3400805c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008060:	d004      	beq.n	3400806c <HAL_RCCEx_PeriphCLKConfig+0x2c18>
34008062:	f240 7186 	movw	r1, #1926	@ 0x786
34008066:	4846      	ldr	r0, [pc, #280]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34008068:	f7f9 f9ee 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400806c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3400806e:	3b01      	subs	r3, #1
34008070:	2bff      	cmp	r3, #255	@ 0xff
34008072:	d904      	bls.n	3400807e <HAL_RCCEx_PeriphCLKConfig+0x2c2a>
34008074:	f240 7187 	movw	r1, #1927	@ 0x787
34008078:	4841      	ldr	r0, [pc, #260]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3400807a:	f7f9 f9e5 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400807e:	4a41      	ldr	r2, [pc, #260]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008080:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008082:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008086:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008088:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400808c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008090:	3901      	subs	r1, #1
34008092:	4303      	orrs	r3, r0
34008094:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008098:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400809c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340080a0:	f7fe be3e 	b.w	34006d20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
340080a4:	4a40      	ldr	r2, [pc, #256]	@ (340081a8 <HAL_RCCEx_PeriphCLKConfig+0x2d54>)
340080a6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340080a8:	bf02      	ittt	eq
340080aa:	2240      	moveq	r2, #64	@ 0x40
340080ac:	4b35      	ldreq	r3, [pc, #212]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340080ae:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340080b2:	f7fe be37 	b.w	34006d24 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
340080b6:	4a3d      	ldr	r2, [pc, #244]	@ (340081ac <HAL_RCCEx_PeriphCLKConfig+0x2d58>)
340080b8:	4293      	cmp	r3, r2
340080ba:	d124      	bne.n	34008106 <HAL_RCCEx_PeriphCLKConfig+0x2cb2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340080bc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340080be:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340080c2:	d004      	beq.n	340080ce <HAL_RCCEx_PeriphCLKConfig+0x2c7a>
340080c4:	f240 71b3 	movw	r1, #1971	@ 0x7b3
340080c8:	482d      	ldr	r0, [pc, #180]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340080ca:	f7f9 f9bd 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340080ce:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340080d0:	3b01      	subs	r3, #1
340080d2:	2bff      	cmp	r3, #255	@ 0xff
340080d4:	d904      	bls.n	340080e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8c>
340080d6:	f240 71b4 	movw	r1, #1972	@ 0x7b4
340080da:	4829      	ldr	r0, [pc, #164]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340080dc:	f7f9 f9b4 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340080e0:	4a28      	ldr	r2, [pc, #160]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340080e2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340080e4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340080e8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340080ea:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340080ee:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340080f2:	3901      	subs	r1, #1
340080f4:	4303      	orrs	r3, r0
340080f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340080fa:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340080fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008102:	f7fe be55 	b.w	34006db0 <HAL_RCCEx_PeriphCLKConfig+0x195c>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34008106:	4a2a      	ldr	r2, [pc, #168]	@ (340081b0 <HAL_RCCEx_PeriphCLKConfig+0x2d5c>)
34008108:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400810a:	bf02      	ittt	eq
3400810c:	2240      	moveq	r2, #64	@ 0x40
3400810e:	4b1d      	ldreq	r3, [pc, #116]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008110:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008114:	f7fe be4e 	b.w	34006db4 <HAL_RCCEx_PeriphCLKConfig+0x1960>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34008118:	4a26      	ldr	r2, [pc, #152]	@ (340081b4 <HAL_RCCEx_PeriphCLKConfig+0x2d60>)
3400811a:	4293      	cmp	r3, r2
3400811c:	d124      	bne.n	34008168 <HAL_RCCEx_PeriphCLKConfig+0x2d14>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400811e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008120:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008124:	d004      	beq.n	34008130 <HAL_RCCEx_PeriphCLKConfig+0x2cdc>
34008126:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
3400812a:	4815      	ldr	r0, [pc, #84]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3400812c:	f7f9 f98c 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008130:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008132:	3b01      	subs	r3, #1
34008134:	2bff      	cmp	r3, #255	@ 0xff
34008136:	d904      	bls.n	34008142 <HAL_RCCEx_PeriphCLKConfig+0x2cee>
34008138:	f240 71e1 	movw	r1, #2017	@ 0x7e1
3400813c:	4810      	ldr	r0, [pc, #64]	@ (34008180 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3400813e:	f7f9 f983 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008142:	4a10      	ldr	r2, [pc, #64]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008144:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008146:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400814a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3400814c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008150:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008154:	3901      	subs	r1, #1
34008156:	4303      	orrs	r3, r0
34008158:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400815c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008160:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008164:	f7fe be6c 	b.w	34006e40 <HAL_RCCEx_PeriphCLKConfig+0x19ec>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34008168:	4a13      	ldr	r2, [pc, #76]	@ (340081b8 <HAL_RCCEx_PeriphCLKConfig+0x2d64>)
3400816a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400816c:	bf02      	ittt	eq
3400816e:	2240      	moveq	r2, #64	@ 0x40
34008170:	4b04      	ldreq	r3, [pc, #16]	@ (34008184 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008172:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008176:	f7fe be65 	b.w	34006e44 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
3400817a:	bf00      	nop
3400817c:	07031420 	.word	0x07031420
34008180:	34010c5b 	.word	0x34010c5b
34008184:	56028000 	.word	0x56028000
34008188:	07011420 	.word	0x07011420
3400818c:	07031820 	.word	0x07031820
34008190:	07011820 	.word	0x07011820
34008194:	07030030 	.word	0x07030030
34008198:	07010030 	.word	0x07010030
3400819c:	07030430 	.word	0x07030430
340081a0:	07010430 	.word	0x07010430
340081a4:	07030830 	.word	0x07030830
340081a8:	07010830 	.word	0x07010830
340081ac:	07030c30 	.word	0x07030c30
340081b0:	07010c30 	.word	0x07010c30
340081b4:	07031030 	.word	0x07031030
340081b8:	07011030 	.word	0x07011030
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
340081bc:	4a8b      	ldr	r2, [pc, #556]	@ (340083ec <HAL_RCCEx_PeriphCLKConfig+0x2f98>)
340081be:	4293      	cmp	r3, r2
340081c0:	d124      	bne.n	3400820c <HAL_RCCEx_PeriphCLKConfig+0x2db8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340081c2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340081c4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340081c8:	d004      	beq.n	340081d4 <HAL_RCCEx_PeriphCLKConfig+0x2d80>
340081ca:	f640 010d 	movw	r1, #2061	@ 0x80d
340081ce:	4888      	ldr	r0, [pc, #544]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340081d0:	f7f9 f93a 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340081d4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340081d6:	3b01      	subs	r3, #1
340081d8:	2bff      	cmp	r3, #255	@ 0xff
340081da:	d904      	bls.n	340081e6 <HAL_RCCEx_PeriphCLKConfig+0x2d92>
340081dc:	f640 010e 	movw	r1, #2062	@ 0x80e
340081e0:	4883      	ldr	r0, [pc, #524]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340081e2:	f7f9 f931 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340081e6:	4a83      	ldr	r2, [pc, #524]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340081e8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340081ea:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340081ee:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340081f0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340081f4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340081f8:	3901      	subs	r1, #1
340081fa:	4303      	orrs	r3, r0
340081fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008200:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008204:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008208:	f7fe be62 	b.w	34006ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a7c>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3400820c:	4a7a      	ldr	r2, [pc, #488]	@ (340083f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa4>)
3400820e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008210:	bf02      	ittt	eq
34008212:	2240      	moveq	r2, #64	@ 0x40
34008214:	4b77      	ldreq	r3, [pc, #476]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008216:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400821a:	f7fe be5b 	b.w	34006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
3400821e:	4a77      	ldr	r2, [pc, #476]	@ (340083fc <HAL_RCCEx_PeriphCLKConfig+0x2fa8>)
34008220:	4293      	cmp	r3, r2
34008222:	d124      	bne.n	3400826e <HAL_RCCEx_PeriphCLKConfig+0x2e1a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008224:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008226:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400822a:	d004      	beq.n	34008236 <HAL_RCCEx_PeriphCLKConfig+0x2de2>
3400822c:	f640 013a 	movw	r1, #2106	@ 0x83a
34008230:	486f      	ldr	r0, [pc, #444]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008232:	f7f9 f909 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008236:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008238:	3b01      	subs	r3, #1
3400823a:	2bff      	cmp	r3, #255	@ 0xff
3400823c:	d904      	bls.n	34008248 <HAL_RCCEx_PeriphCLKConfig+0x2df4>
3400823e:	f640 013b 	movw	r1, #2107	@ 0x83b
34008242:	486b      	ldr	r0, [pc, #428]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008244:	f7f9 f900 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008248:	4a6a      	ldr	r2, [pc, #424]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400824a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400824c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008250:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008252:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008256:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400825a:	3901      	subs	r1, #1
3400825c:	4303      	orrs	r3, r0
3400825e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008262:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008266:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400826a:	f7fe be79 	b.w	34006f60 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3400826e:	4a64      	ldr	r2, [pc, #400]	@ (34008400 <HAL_RCCEx_PeriphCLKConfig+0x2fac>)
34008270:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008272:	bf02      	ittt	eq
34008274:	2240      	moveq	r2, #64	@ 0x40
34008276:	4b5f      	ldreq	r3, [pc, #380]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008278:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400827c:	f7fe be72 	b.w	34006f64 <HAL_RCCEx_PeriphCLKConfig+0x1b10>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34008280:	4a60      	ldr	r2, [pc, #384]	@ (34008404 <HAL_RCCEx_PeriphCLKConfig+0x2fb0>)
34008282:	4293      	cmp	r3, r2
34008284:	d124      	bne.n	340082d0 <HAL_RCCEx_PeriphCLKConfig+0x2e7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008286:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008288:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400828c:	d004      	beq.n	34008298 <HAL_RCCEx_PeriphCLKConfig+0x2e44>
3400828e:	f640 0167 	movw	r1, #2151	@ 0x867
34008292:	4857      	ldr	r0, [pc, #348]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008294:	f7f9 f8d8 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008298:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3400829a:	3b01      	subs	r3, #1
3400829c:	2bff      	cmp	r3, #255	@ 0xff
3400829e:	d904      	bls.n	340082aa <HAL_RCCEx_PeriphCLKConfig+0x2e56>
340082a0:	f640 0168 	movw	r1, #2152	@ 0x868
340082a4:	4852      	ldr	r0, [pc, #328]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340082a6:	f7f9 f8cf 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340082aa:	4a52      	ldr	r2, [pc, #328]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340082ac:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340082ae:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340082b2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340082b4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340082b8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340082bc:	3901      	subs	r1, #1
340082be:	4303      	orrs	r3, r0
340082c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340082c4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340082c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340082cc:	f7fe beac 	b.w	34007028 <HAL_RCCEx_PeriphCLKConfig+0x1bd4>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
340082d0:	4a4d      	ldr	r2, [pc, #308]	@ (34008408 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
340082d2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340082d4:	bf02      	ittt	eq
340082d6:	2240      	moveq	r2, #64	@ 0x40
340082d8:	4b46      	ldreq	r3, [pc, #280]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340082da:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340082de:	f7fe bea5 	b.w	3400702c <HAL_RCCEx_PeriphCLKConfig+0x1bd8>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
340082e2:	4a4a      	ldr	r2, [pc, #296]	@ (3400840c <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
340082e4:	4293      	cmp	r3, r2
340082e6:	d124      	bne.n	34008332 <HAL_RCCEx_PeriphCLKConfig+0x2ede>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340082e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340082ea:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340082ee:	d004      	beq.n	340082fa <HAL_RCCEx_PeriphCLKConfig+0x2ea6>
340082f0:	f640 0194 	movw	r1, #2196	@ 0x894
340082f4:	483e      	ldr	r0, [pc, #248]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340082f6:	f7f9 f8a7 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340082fa:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340082fc:	3b01      	subs	r3, #1
340082fe:	2bff      	cmp	r3, #255	@ 0xff
34008300:	d904      	bls.n	3400830c <HAL_RCCEx_PeriphCLKConfig+0x2eb8>
34008302:	f640 0195 	movw	r1, #2197	@ 0x895
34008306:	483a      	ldr	r0, [pc, #232]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008308:	f7f9 f89e 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400830c:	4a39      	ldr	r2, [pc, #228]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400830e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008310:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008314:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008316:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400831a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400831e:	3901      	subs	r1, #1
34008320:	4303      	orrs	r3, r0
34008322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008326:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400832a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400832e:	f7fe bec3 	b.w	340070b8 <HAL_RCCEx_PeriphCLKConfig+0x1c64>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34008332:	4a37      	ldr	r2, [pc, #220]	@ (34008410 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
34008334:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008336:	bf02      	ittt	eq
34008338:	2240      	moveq	r2, #64	@ 0x40
3400833a:	4b2e      	ldreq	r3, [pc, #184]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400833c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008340:	f7fe bebc 	b.w	340070bc <HAL_RCCEx_PeriphCLKConfig+0x1c68>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34008344:	4a33      	ldr	r2, [pc, #204]	@ (34008414 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
34008346:	4293      	cmp	r3, r2
34008348:	d124      	bne.n	34008394 <HAL_RCCEx_PeriphCLKConfig+0x2f40>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400834a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3400834c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008350:	d004      	beq.n	3400835c <HAL_RCCEx_PeriphCLKConfig+0x2f08>
34008352:	f640 01c1 	movw	r1, #2241	@ 0x8c1
34008356:	4826      	ldr	r0, [pc, #152]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008358:	f7f9 f876 	bl	34001448 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400835c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3400835e:	3b01      	subs	r3, #1
34008360:	2bff      	cmp	r3, #255	@ 0xff
34008362:	d904      	bls.n	3400836e <HAL_RCCEx_PeriphCLKConfig+0x2f1a>
34008364:	f640 01c2 	movw	r1, #2242	@ 0x8c2
34008368:	4821      	ldr	r0, [pc, #132]	@ (340083f0 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3400836a:	f7f9 f86d 	bl	34001448 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400836e:	4a21      	ldr	r2, [pc, #132]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008370:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008372:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008376:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008378:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400837c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008380:	3901      	subs	r1, #1
34008382:	4303      	orrs	r3, r0
34008384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008388:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400838c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008390:	f7fe beda 	b.w	34007148 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34008394:	4a20      	ldr	r2, [pc, #128]	@ (34008418 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
34008396:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008398:	bf02      	ittt	eq
3400839a:	2240      	moveq	r2, #64	@ 0x40
3400839c:	4b15      	ldreq	r3, [pc, #84]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400839e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340083a2:	f7fe bed3 	b.w	3400714c <HAL_RCCEx_PeriphCLKConfig+0x1cf8>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
340083a6:	f7fc ff39 	bl	3400521c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340083aa:	f7fe bef5 	b.w	34007198 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
340083ae:	f7fc ff35 	bl	3400521c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340083b2:	f7fe bf13 	b.w	340071dc <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
340083b6:	4a19      	ldr	r2, [pc, #100]	@ (3400841c <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
340083b8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340083ba:	bf02      	ittt	eq
340083bc:	2240      	moveq	r2, #64	@ 0x40
340083be:	4b0d      	ldreq	r3, [pc, #52]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340083c0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340083c4:	f7fe bf4a 	b.w	3400725c <HAL_RCCEx_PeriphCLKConfig+0x1e08>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
340083c8:	f7fc ff28 	bl	3400521c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340083cc:	f7fe bf53 	b.w	34007276 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
340083d0:	4a13      	ldr	r2, [pc, #76]	@ (34008420 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
340083d2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340083d4:	bf02      	ittt	eq
340083d6:	2240      	moveq	r2, #64	@ 0x40
340083d8:	4b06      	ldreq	r3, [pc, #24]	@ (340083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340083da:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340083de:	f7fe bfa5 	b.w	3400732c <HAL_RCCEx_PeriphCLKConfig+0x1ed8>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340083e2:	f7fc ff1b 	bl	3400521c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340083e6:	f7fe bfae 	b.w	34007346 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
340083ea:	bf00      	nop
340083ec:	07031430 	.word	0x07031430
340083f0:	34010c5b 	.word	0x34010c5b
340083f4:	56028000 	.word	0x56028000
340083f8:	07011430 	.word	0x07011430
340083fc:	07031830 	.word	0x07031830
34008400:	07011830 	.word	0x07011830
34008404:	07031c30 	.word	0x07031c30
34008408:	07011c30 	.word	0x07011c30
3400840c:	07030034 	.word	0x07030034
34008410:	07010034 	.word	0x07010034
34008414:	07030434 	.word	0x07030434
34008418:	07010434 	.word	0x07010434
3400841c:	03010c14 	.word	0x03010c14
34008420:	03011414 	.word	0x03011414

34008424 <HAL_RCCEx_GetPLL1CLKFreq>:
{
34008424:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34008426:	4c1e      	ldr	r4, [pc, #120]	@ (340084a0 <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
34008428:	6863      	ldr	r3, [r4, #4]
3400842a:	05d9      	lsls	r1, r3, #23
3400842c:	d506      	bpl.n	3400843c <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
3400842e:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34008432:	005a      	lsls	r2, r3, #1
34008434:	d40f      	bmi.n	34008456 <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34008436:	2000      	movs	r0, #0
}
34008438:	b003      	add	sp, #12
3400843a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400843c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34008440:	011b      	lsls	r3, r3, #4
34008442:	d5f8      	bpl.n	34008436 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34008444:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34008448:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
3400844c:	b003      	add	sp, #12
3400844e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34008452:	f7fc bf9d 	b.w	34005390 <RCCEx_GetPLLSourceFreq>
34008456:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3400845a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3400845e:	f7fc ff97 	bl	34005390 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34008462:	2800      	cmp	r0, #0
34008464:	d0e7      	beq.n	34008436 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34008466:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
3400846a:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400846e:	f3c3 5105 	ubfx	r1, r3, #20, #6
34008472:	d0e0      	beq.n	34008436 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34008474:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34008478:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
3400847c:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008480:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008484:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008488:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
3400848c:	9401      	str	r4, [sp, #4]
3400848e:	9500      	str	r5, [sp, #0]
34008490:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008494:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008498:	f7fc ffb0 	bl	340053fc <RCCEx_CalcPLLFreq>
3400849c:	e7cc      	b.n	34008438 <HAL_RCCEx_GetPLL1CLKFreq+0x14>
3400849e:	bf00      	nop
340084a0:	56028000 	.word	0x56028000

340084a4 <HAL_RCCEx_GetPLL2CLKFreq>:
{
340084a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340084a6:	4c1e      	ldr	r4, [pc, #120]	@ (34008520 <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
340084a8:	6863      	ldr	r3, [r4, #4]
340084aa:	0599      	lsls	r1, r3, #22
340084ac:	d506      	bpl.n	340084bc <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
340084ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
340084b2:	005a      	lsls	r2, r3, #1
340084b4:	d40f      	bmi.n	340084d6 <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340084b6:	2000      	movs	r0, #0
}
340084b8:	b003      	add	sp, #12
340084ba:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340084bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
340084c0:	011b      	lsls	r3, r3, #4
340084c2:	d5f8      	bpl.n	340084b6 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340084c4:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340084c8:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340084cc:	b003      	add	sp, #12
340084ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340084d2:	f7fc bf5d 	b.w	34005390 <RCCEx_GetPLLSourceFreq>
340084d6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340084da:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340084de:	f7fc ff57 	bl	34005390 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340084e2:	2800      	cmp	r0, #0
340084e4:	d0e7      	beq.n	340084b6 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
340084e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
340084ea:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340084ee:	f3c3 5105 	ubfx	r1, r3, #20, #6
340084f2:	d0e0      	beq.n	340084b6 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
340084f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
340084f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340084fc:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34008500:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34008504:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34008508:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
3400850c:	9401      	str	r4, [sp, #4]
3400850e:	9500      	str	r5, [sp, #0]
34008510:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008514:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008518:	f7fc ff70 	bl	340053fc <RCCEx_CalcPLLFreq>
3400851c:	e7cc      	b.n	340084b8 <HAL_RCCEx_GetPLL2CLKFreq+0x14>
3400851e:	bf00      	nop
34008520:	56028000 	.word	0x56028000

34008524 <HAL_RCCEx_GetPLL3CLKFreq>:
{
34008524:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34008526:	4c1e      	ldr	r4, [pc, #120]	@ (340085a0 <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
34008528:	6863      	ldr	r3, [r4, #4]
3400852a:	0559      	lsls	r1, r3, #21
3400852c:	d506      	bpl.n	3400853c <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
3400852e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34008532:	005a      	lsls	r2, r3, #1
34008534:	d40f      	bmi.n	34008556 <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34008536:	2000      	movs	r0, #0
}
34008538:	b003      	add	sp, #12
3400853a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400853c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34008540:	011b      	lsls	r3, r3, #4
34008542:	d5f8      	bpl.n	34008536 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34008544:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34008548:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
3400854c:	b003      	add	sp, #12
3400854e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34008552:	f7fc bf1d 	b.w	34005390 <RCCEx_GetPLLSourceFreq>
34008556:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3400855a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3400855e:	f7fc ff17 	bl	34005390 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34008562:	2800      	cmp	r0, #0
34008564:	d0e7      	beq.n	34008536 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34008566:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
3400856a:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400856e:	f3c3 5105 	ubfx	r1, r3, #20, #6
34008572:	d0e0      	beq.n	34008536 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34008574:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34008578:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
3400857c:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34008580:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008584:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34008588:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
3400858c:	9401      	str	r4, [sp, #4]
3400858e:	9500      	str	r5, [sp, #0]
34008590:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008594:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008598:	f7fc ff30 	bl	340053fc <RCCEx_CalcPLLFreq>
3400859c:	e7cc      	b.n	34008538 <HAL_RCCEx_GetPLL3CLKFreq+0x14>
3400859e:	bf00      	nop
340085a0:	56028000 	.word	0x56028000

340085a4 <HAL_RCCEx_GetPLL4CLKFreq>:
{
340085a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340085a6:	4c1e      	ldr	r4, [pc, #120]	@ (34008620 <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
340085a8:	6863      	ldr	r3, [r4, #4]
340085aa:	0519      	lsls	r1, r3, #20
340085ac:	d506      	bpl.n	340085bc <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
340085ae:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
340085b2:	005a      	lsls	r2, r3, #1
340085b4:	d40f      	bmi.n	340085d6 <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340085b6:	2000      	movs	r0, #0
}
340085b8:	b003      	add	sp, #12
340085ba:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340085bc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340085c0:	011b      	lsls	r3, r3, #4
340085c2:	d5f8      	bpl.n	340085b6 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
340085c4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340085c8:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340085cc:	b003      	add	sp, #12
340085ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340085d2:	f7fc bedd 	b.w	34005390 <RCCEx_GetPLLSourceFreq>
340085d6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340085da:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340085de:	f7fc fed7 	bl	34005390 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340085e2:	2800      	cmp	r0, #0
340085e4:	d0e7      	beq.n	340085b6 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
340085e6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
340085ea:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340085ee:	f3c3 5105 	ubfx	r1, r3, #20, #6
340085f2:	d0e0      	beq.n	340085b6 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
340085f4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
340085f8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340085fc:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34008600:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34008604:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34008608:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
3400860c:	9401      	str	r4, [sp, #4]
3400860e:	9500      	str	r5, [sp, #0]
34008610:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008614:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008618:	f7fc fef0 	bl	340053fc <RCCEx_CalcPLLFreq>
3400861c:	e7cc      	b.n	340085b8 <HAL_RCCEx_GetPLL4CLKFreq+0x14>
3400861e:	bf00      	nop
34008620:	56028000 	.word	0x56028000

34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34008624:	4b3e      	ldr	r3, [pc, #248]	@ (34008720 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
34008626:	b510      	push	{r4, lr}
34008628:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
3400862c:	0652      	lsls	r2, r2, #25
3400862e:	d56b      	bpl.n	34008708 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34008630:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34008634:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34008638:	3a01      	subs	r2, #1
3400863a:	2a06      	cmp	r2, #6
3400863c:	d805      	bhi.n	3400864a <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
3400863e:	e8df f002 	tbb	[pc, r2]
34008642:	150f      	.short	0x150f
34008644:	3e321b48 	.word	0x3e321b48
34008648:	54          	.byte	0x54
34008649:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
3400864a:	f7fc fe07 	bl	3400525c <LL_RCC_HSI_IsReady>
3400864e:	2800      	cmp	r0, #0
34008650:	d05a      	beq.n	34008708 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008652:	4b33      	ldr	r3, [pc, #204]	@ (34008720 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008654:	4833      	ldr	r0, [pc, #204]	@ (34008724 <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
34008656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008658:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400865c:	40d8      	lsrs	r0, r3
3400865e:	e054      	b.n	3400870a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34008660:	f7fc fe04 	bl	3400526c <LL_RCC_MSI_IsReady>
34008664:	2800      	cmp	r0, #0
34008666:	d04f      	beq.n	34008708 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = MSI_VALUE;
34008668:	482f      	ldr	r0, [pc, #188]	@ (34008728 <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
3400866a:	e04e      	b.n	3400870a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
3400866c:	f7fc fdee 	bl	3400524c <LL_RCC_HSE_IsReady>
34008670:	2800      	cmp	r0, #0
34008672:	d049      	beq.n	34008708 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = HSE_VALUE;
34008674:	482d      	ldr	r0, [pc, #180]	@ (3400872c <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
34008676:	e048      	b.n	3400870a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34008678:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400867c:	06d4      	lsls	r4, r2, #27
3400867e:	d543      	bpl.n	34008708 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008680:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34008684:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008688:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400868c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3400868e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          switch (LL_RCC_IC20_GetSource())
34008692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008696:	d03c      	beq.n	34008712 <RCCEx_GetCLKPCLKFreq.constprop.0+0xee>
34008698:	d833      	bhi.n	34008702 <RCCEx_GetCLKPCLKFreq.constprop.0+0xde>
3400869a:	bbbb      	cbnz	r3, 3400870c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe8>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400869c:	f7ff fec2 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
340086a0:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
340086a4:	e031      	b.n	3400870a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340086a6:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340086aa:	0590      	lsls	r0, r2, #22
340086ac:	d52c      	bpl.n	34008708 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340086ae:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340086b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340086b6:	f3c0 4007 	ubfx	r0, r0, #16, #8
340086ba:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340086bc:	e7e7      	b.n	3400868e <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
        if (LL_RCC_IC15_IsEnabled() != 0U)
340086be:	f7fc fe4d 	bl	3400535c <LL_RCC_IC15_IsEnabled>
340086c2:	b308      	cbz	r0, 34008708 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
          ic_divider = LL_RCC_IC15_GetDivider();
340086c4:	f7fc fe52 	bl	3400536c <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340086c8:	4b15      	ldr	r3, [pc, #84]	@ (34008720 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
340086ca:	4604      	mov	r4, r0
340086cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340086d0:	e7dd      	b.n	3400868e <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
340086d2:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340086d6:	0351      	lsls	r1, r2, #13
340086d8:	d516      	bpl.n	34008708 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340086da:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340086de:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340086e2:	f3c0 4007 	ubfx	r0, r0, #16, #8
340086e6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340086e8:	e7d1      	b.n	3400868e <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
340086ea:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340086ee:	0312      	lsls	r2, r2, #12
340086f0:	d50a      	bpl.n	34008708 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340086f2:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340086f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340086fa:	f3c0 4007 	ubfx	r0, r0, #16, #8
340086fe:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008700:	e7c5      	b.n	3400868e <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
          switch (LL_RCC_IC20_GetSource())
34008702:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008706:	d007      	beq.n	34008718 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf4>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34008708:	2000      	movs	r0, #0
}
3400870a:	bd10      	pop	{r4, pc}
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400870c:	f7ff feca 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
34008710:	e7c6      	b.n	340086a0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008712:	f7ff ff07 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34008716:	e7c3      	b.n	340086a0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008718:	f7ff ff44 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
3400871c:	e7c0      	b.n	340086a0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
3400871e:	bf00      	nop
34008720:	56028000 	.word	0x56028000
34008724:	03d09000 	.word	0x03d09000
34008728:	003d0900 	.word	0x003d0900
3400872c:	02dc6c00 	.word	0x02dc6c00

34008730 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
34008730:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34008732:	4d2b      	ldr	r5, [pc, #172]	@ (340087e0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb0>)
34008734:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
34008738:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
3400873c:	2b06      	cmp	r3, #6
3400873e:	d835      	bhi.n	340087ac <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
34008740:	e8df f003 	tbb	[pc, r3]
34008744:	28110d04 	.word	0x28110d04
34008748:	3c45      	.short	0x3c45
3400874a:	4b          	.byte	0x4b
3400874b:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400874c:	f7fc fd10 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34008750:	f7fc fe16 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008754:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34008756:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400875a:	40d8      	lsrs	r0, r3
3400875c:	e027      	b.n	340087ae <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
3400875e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008762:	f7ff bf5f 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34008766:	f7fc fdb1 	bl	340052cc <LL_RCC_IC7_IsEnabled>
3400876a:	b1f8      	cbz	r0, 340087ac <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC7_GetDivider();
3400876c:	f7fc fdb6 	bl	340052dc <LL_RCC_IC7_GetDivider>
34008770:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008772:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008776:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
3400877a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400877e:	d017      	beq.n	340087b0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x80>
34008780:	d811      	bhi.n	340087a6 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x76>
34008782:	b913      	cbnz	r3, 3400878a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008784:	f7ff fe4e 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
34008788:	e001      	b.n	3400878e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400878a:	f7ff fe8b 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3400878e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008792:	e00c      	b.n	340087ae <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008794:	f7fc fdac 	bl	340052f0 <LL_RCC_IC8_IsEnabled>
34008798:	b140      	cbz	r0, 340087ac <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC8_GetDivider();
3400879a:	f7fc fdb1 	bl	34005300 <LL_RCC_IC8_GetDivider>
3400879e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
340087a2:	4604      	mov	r4, r0
340087a4:	e7e7      	b.n	34008776 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
        switch (LL_RCC_IC8_GetSource())
340087a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340087aa:	d004      	beq.n	340087b6 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x86>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
340087ac:	2000      	movs	r0, #0
}
340087ae:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340087b0:	f7ff feb8 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
340087b4:	e7eb      	b.n	3400878e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340087b6:	f7ff fef5 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
340087ba:	e7e8      	b.n	3400878e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
      if (LL_RCC_HSI_IsReady() != 0U)
340087bc:	f7fc fd4e 	bl	3400525c <LL_RCC_HSI_IsReady>
340087c0:	2800      	cmp	r0, #0
340087c2:	d0f3      	beq.n	340087ac <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340087c4:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340087c6:	4807      	ldr	r0, [pc, #28]	@ (340087e4 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb4>)
340087c8:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340087cc:	e7c5      	b.n	3400875a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
340087ce:	f7fc fd4d 	bl	3400526c <LL_RCC_MSI_IsReady>
340087d2:	2800      	cmp	r0, #0
340087d4:	d0ea      	beq.n	340087ac <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        spdifrx_frequency = MSI_VALUE;
340087d6:	4804      	ldr	r0, [pc, #16]	@ (340087e8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
340087d8:	e7e9      	b.n	340087ae <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
340087da:	4804      	ldr	r0, [pc, #16]	@ (340087ec <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
  return spdifrx_frequency;
340087dc:	e7e7      	b.n	340087ae <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
340087de:	bf00      	nop
340087e0:	56028000 	.word	0x56028000
340087e4:	03d09000 	.word	0x03d09000
340087e8:	003d0900 	.word	0x003d0900
340087ec:	00bb8000 	.word	0x00bb8000

340087f0 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
340087f0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340087f2:	f7fc fd5d 	bl	340052b0 <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340087f6:	4b36      	ldr	r3, [pc, #216]	@ (340088d0 <RCCEx_GetXSPICLKFreq+0xe0>)
340087f8:	4298      	cmp	r0, r3
340087fa:	d028      	beq.n	3400884e <RCCEx_GetXSPICLKFreq+0x5e>
340087fc:	d81b      	bhi.n	34008836 <RCCEx_GetXSPICLKFreq+0x46>
340087fe:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008802:	4298      	cmp	r0, r3
34008804:	d013      	beq.n	3400882e <RCCEx_GetXSPICLKFreq+0x3e>
34008806:	d80b      	bhi.n	34008820 <RCCEx_GetXSPICLKFreq+0x30>
34008808:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3400880c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008810:	429a      	cmp	r2, r3
34008812:	d04a      	beq.n	340088aa <RCCEx_GetXSPICLKFreq+0xba>
34008814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008818:	4298      	cmp	r0, r3
3400881a:	d046      	beq.n	340088aa <RCCEx_GetXSPICLKFreq+0xba>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3400881c:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
3400881e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008820:	4b2c      	ldr	r3, [pc, #176]	@ (340088d4 <RCCEx_GetXSPICLKFreq+0xe4>)
34008822:	4298      	cmp	r0, r3
34008824:	d003      	beq.n	3400882e <RCCEx_GetXSPICLKFreq+0x3e>
34008826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400882a:	4298      	cmp	r0, r3
3400882c:	d1f6      	bne.n	3400881c <RCCEx_GetXSPICLKFreq+0x2c>
}
3400882e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008832:	f7ff bef7 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008836:	4b28      	ldr	r3, [pc, #160]	@ (340088d8 <RCCEx_GetXSPICLKFreq+0xe8>)
34008838:	4298      	cmp	r0, r3
3400883a:	d028      	beq.n	3400888e <RCCEx_GetXSPICLKFreq+0x9e>
3400883c:	d820      	bhi.n	34008880 <RCCEx_GetXSPICLKFreq+0x90>
3400883e:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34008842:	4298      	cmp	r0, r3
34008844:	d003      	beq.n	3400884e <RCCEx_GetXSPICLKFreq+0x5e>
34008846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400884a:	4298      	cmp	r0, r3
3400884c:	d1e6      	bne.n	3400881c <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
3400884e:	4b23      	ldr	r3, [pc, #140]	@ (340088dc <RCCEx_GetXSPICLKFreq+0xec>)
34008850:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34008854:	f010 0004 	ands.w	r0, r0, #4
34008858:	d0e1      	beq.n	3400881e <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3400885a:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3400885e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34008862:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008866:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008868:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC4_GetSource())
3400886c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008870:	d02a      	beq.n	340088c8 <RCCEx_GetXSPICLKFreq+0xd8>
34008872:	d820      	bhi.n	340088b6 <RCCEx_GetXSPICLKFreq+0xc6>
34008874:	bb2b      	cbnz	r3, 340088c2 <RCCEx_GetXSPICLKFreq+0xd2>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008876:	f7ff fdd5 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
3400887a:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
3400887e:	e7ce      	b.n	3400881e <RCCEx_GetXSPICLKFreq+0x2e>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008880:	4b17      	ldr	r3, [pc, #92]	@ (340088e0 <RCCEx_GetXSPICLKFreq+0xf0>)
34008882:	4298      	cmp	r0, r3
34008884:	d003      	beq.n	3400888e <RCCEx_GetXSPICLKFreq+0x9e>
34008886:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400888a:	4298      	cmp	r0, r3
3400888c:	d1c6      	bne.n	3400881c <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3400888e:	4b13      	ldr	r3, [pc, #76]	@ (340088dc <RCCEx_GetXSPICLKFreq+0xec>)
34008890:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34008894:	f010 0008 	ands.w	r0, r0, #8
34008898:	d0c1      	beq.n	3400881e <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3400889a:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3400889e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
340088a2:	f3c0 4007 	ubfx	r0, r0, #16, #8
340088a6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
340088a8:	e7de      	b.n	34008868 <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340088aa:	f7fc fc61 	bl	34005170 <HAL_RCC_GetSysClockFreq>
}
340088ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340088b2:	f7fc bd65 	b.w	34005380 <RCCEx_GetHCLKFreq>
        switch (LL_RCC_IC4_GetSource())
340088b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340088ba:	d1af      	bne.n	3400881c <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340088bc:	f7ff fe72 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
340088c0:	e7db      	b.n	3400887a <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340088c2:	f7ff fdef 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
340088c6:	e7d8      	b.n	3400887a <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340088c8:	f7ff fe2c 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
340088cc:	e7d5      	b.n	3400887a <RCCEx_GetXSPICLKFreq+0x8a>
340088ce:	bf00      	nop
340088d0:	03020014 	.word	0x03020014
340088d4:	03010414 	.word	0x03010414
340088d8:	03030014 	.word	0x03030014
340088dc:	56028000 	.word	0x56028000
340088e0:	03030414 	.word	0x03030414

340088e4 <RCCEx_GetOTGPHYCLKFreq>:
{
340088e4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340088e6:	f7fc fce3 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340088ea:	4b2b      	ldr	r3, [pc, #172]	@ (34008998 <RCCEx_GetOTGPHYCLKFreq+0xb4>)
340088ec:	4298      	cmp	r0, r3
340088ee:	d021      	beq.n	34008934 <RCCEx_GetOTGPHYCLKFreq+0x50>
340088f0:	d815      	bhi.n	3400891e <RCCEx_GetOTGPHYCLKFreq+0x3a>
340088f2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340088f6:	4298      	cmp	r0, r3
340088f8:	d00d      	beq.n	34008916 <RCCEx_GetOTGPHYCLKFreq+0x32>
340088fa:	d809      	bhi.n	34008910 <RCCEx_GetOTGPHYCLKFreq+0x2c>
340088fc:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008900:	4298      	cmp	r0, r3
34008902:	d02d      	beq.n	34008960 <RCCEx_GetOTGPHYCLKFreq+0x7c>
34008904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008908:	4298      	cmp	r0, r3
3400890a:	d029      	beq.n	34008960 <RCCEx_GetOTGPHYCLKFreq+0x7c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3400890c:	2000      	movs	r0, #0
}
3400890e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34008910:	4b22      	ldr	r3, [pc, #136]	@ (3400899c <RCCEx_GetOTGPHYCLKFreq+0xb8>)
34008912:	4298      	cmp	r0, r3
34008914:	d1fa      	bne.n	3400890c <RCCEx_GetOTGPHYCLKFreq+0x28>
}
34008916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400891a:	f7ff be83 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3400891e:	4b20      	ldr	r3, [pc, #128]	@ (340089a0 <RCCEx_GetOTGPHYCLKFreq+0xbc>)
34008920:	4298      	cmp	r0, r3
34008922:	d023      	beq.n	3400896c <RCCEx_GetOTGPHYCLKFreq+0x88>
34008924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008928:	4298      	cmp	r0, r3
3400892a:	d01f      	beq.n	3400896c <RCCEx_GetOTGPHYCLKFreq+0x88>
3400892c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008930:	4298      	cmp	r0, r3
34008932:	d1eb      	bne.n	3400890c <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34008934:	f7fc fd12 	bl	3400535c <LL_RCC_IC15_IsEnabled>
34008938:	2800      	cmp	r0, #0
3400893a:	d0e7      	beq.n	3400890c <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3400893c:	f7fc fd16 	bl	3400536c <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008940:	4b18      	ldr	r3, [pc, #96]	@ (340089a4 <RCCEx_GetOTGPHYCLKFreq+0xc0>)
34008942:	4604      	mov	r4, r0
34008944:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34008948:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3400894c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008950:	d01f      	beq.n	34008992 <RCCEx_GetOTGPHYCLKFreq+0xae>
34008952:	d815      	bhi.n	34008980 <RCCEx_GetOTGPHYCLKFreq+0x9c>
34008954:	b9d3      	cbnz	r3, 3400898c <RCCEx_GetOTGPHYCLKFreq+0xa8>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008956:	f7ff fd65 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
3400895a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400895e:	e7d6      	b.n	3400890e <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34008960:	f7fc fc74 	bl	3400524c <LL_RCC_HSE_IsReady>
34008964:	2800      	cmp	r0, #0
34008966:	d0d1      	beq.n	3400890c <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
34008968:	480f      	ldr	r0, [pc, #60]	@ (340089a8 <RCCEx_GetOTGPHYCLKFreq+0xc4>)
3400896a:	e7d0      	b.n	3400890e <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
3400896c:	f7fc fc6e 	bl	3400524c <LL_RCC_HSE_IsReady>
34008970:	2800      	cmp	r0, #0
34008972:	d0cb      	beq.n	3400890c <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34008974:	f7fc fc62 	bl	3400523c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34008978:	2800      	cmp	r0, #0
3400897a:	d1f5      	bne.n	34008968 <RCCEx_GetOTGPHYCLKFreq+0x84>
          usb_frequency = HSE_VALUE;
3400897c:	480b      	ldr	r0, [pc, #44]	@ (340089ac <RCCEx_GetOTGPHYCLKFreq+0xc8>)
  return usb_frequency;
3400897e:	e7c6      	b.n	3400890e <RCCEx_GetOTGPHYCLKFreq+0x2a>
        switch (LL_RCC_IC15_GetSource())
34008980:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008984:	d1c2      	bne.n	3400890c <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008986:	f7ff fe0d 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
3400898a:	e7e6      	b.n	3400895a <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400898c:	f7ff fd8a 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
34008990:	e7e3      	b.n	3400895a <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008992:	f7ff fdc7 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34008996:	e7e0      	b.n	3400895a <RCCEx_GetOTGPHYCLKFreq+0x76>
34008998:	03020c14 	.word	0x03020c14
3400899c:	03011414 	.word	0x03011414
340089a0:	03030c14 	.word	0x03030c14
340089a4:	56028000 	.word	0x56028000
340089a8:	016e3600 	.word	0x016e3600
340089ac:	02dc6c00 	.word	0x02dc6c00

340089b0 <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
340089b0:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
340089b2:	f7fc fc7d 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
340089b6:	4b11      	ldr	r3, [pc, #68]	@ (340089fc <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
340089b8:	4298      	cmp	r0, r3
340089ba:	d01c      	beq.n	340089f6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
340089bc:	d805      	bhi.n	340089ca <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
340089be:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340089c2:	4298      	cmp	r0, r3
340089c4:	d012      	beq.n	340089ec <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
340089c6:	2000      	movs	r0, #0
}
340089c8:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
340089ca:	4b0d      	ldr	r3, [pc, #52]	@ (34008a00 <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
340089cc:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
340089d0:	4298      	cmp	r0, r3
340089d2:	d1f8      	bne.n	340089c6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
340089d4:	f7fc fc3a 	bl	3400524c <LL_RCC_HSE_IsReady>
340089d8:	2800      	cmp	r0, #0
340089da:	d0f4      	beq.n	340089c6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
340089dc:	f7fc fc2e 	bl	3400523c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
340089e0:	4b08      	ldr	r3, [pc, #32]	@ (34008a04 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
340089e2:	2800      	cmp	r0, #0
340089e4:	4808      	ldr	r0, [pc, #32]	@ (34008a08 <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
340089e6:	bf08      	it	eq
340089e8:	4618      	moveq	r0, r3
340089ea:	e7ed      	b.n	340089c8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340089ec:	4807      	ldr	r0, [pc, #28]	@ (34008a0c <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
340089ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340089f2:	f7ff bf77 	b.w	340088e4 <RCCEx_GetOTGPHYCLKFreq>
340089f6:	4806      	ldr	r0, [pc, #24]	@ (34008a10 <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
340089f8:	e7f9      	b.n	340089ee <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
340089fa:	bf00      	nop
340089fc:	01001814 	.word	0x01001814
34008a00:	01011014 	.word	0x01011014
34008a04:	02dc6c00 	.word	0x02dc6c00
34008a08:	016e3600 	.word	0x016e3600
34008a0c:	03000c14 	.word	0x03000c14
34008a10:	03001414 	.word	0x03001414

34008a14 <RCCEx_GetUSARTCLKFreq>:
{
34008a14:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008a16:	f7fc fc4b 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008a1a:	4b6f      	ldr	r3, [pc, #444]	@ (34008bd8 <RCCEx_GetUSARTCLKFreq+0x1c4>)
34008a1c:	4298      	cmp	r0, r3
34008a1e:	d039      	beq.n	34008a94 <RCCEx_GetUSARTCLKFreq+0x80>
34008a20:	d852      	bhi.n	34008ac8 <RCCEx_GetUSARTCLKFreq+0xb4>
34008a22:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008a26:	4298      	cmp	r0, r3
34008a28:	f000 80b5 	beq.w	34008b96 <RCCEx_GetUSARTCLKFreq+0x182>
34008a2c:	d813      	bhi.n	34008a56 <RCCEx_GetUSARTCLKFreq+0x42>
34008a2e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008a32:	4298      	cmp	r0, r3
34008a34:	f000 80af 	beq.w	34008b96 <RCCEx_GetUSARTCLKFreq+0x182>
34008a38:	d80b      	bhi.n	34008a52 <RCCEx_GetUSARTCLKFreq+0x3e>
34008a3a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34008a3e:	4298      	cmp	r0, r3
34008a40:	f000 80a9 	beq.w	34008b96 <RCCEx_GetUSARTCLKFreq+0x182>
34008a44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008a48:	4298      	cmp	r0, r3
34008a4a:	f000 80ae 	beq.w	34008baa <RCCEx_GetUSARTCLKFreq+0x196>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34008a4e:	2000      	movs	r0, #0
}
34008a50:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008a52:	4b62      	ldr	r3, [pc, #392]	@ (34008bdc <RCCEx_GetUSARTCLKFreq+0x1c8>)
34008a54:	e7f8      	b.n	34008a48 <RCCEx_GetUSARTCLKFreq+0x34>
34008a56:	4b62      	ldr	r3, [pc, #392]	@ (34008be0 <RCCEx_GetUSARTCLKFreq+0x1cc>)
34008a58:	4298      	cmp	r0, r3
34008a5a:	d00c      	beq.n	34008a76 <RCCEx_GetUSARTCLKFreq+0x62>
34008a5c:	d80f      	bhi.n	34008a7e <RCCEx_GetUSARTCLKFreq+0x6a>
34008a5e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008a62:	4298      	cmp	r0, r3
34008a64:	d007      	beq.n	34008a76 <RCCEx_GetUSARTCLKFreq+0x62>
34008a66:	bf8e      	itee	hi
34008a68:	4b5e      	ldrhi	r3, [pc, #376]	@ (34008be4 <RCCEx_GetUSARTCLKFreq+0x1d0>)
34008a6a:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34008a6e:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34008a72:	4298      	cmp	r0, r3
34008a74:	d1eb      	bne.n	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
}
34008a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008a7a:	f7ff bdd3 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008a7e:	4b5a      	ldr	r3, [pc, #360]	@ (34008be8 <RCCEx_GetUSARTCLKFreq+0x1d4>)
34008a80:	4298      	cmp	r0, r3
34008a82:	d007      	beq.n	34008a94 <RCCEx_GetUSARTCLKFreq+0x80>
34008a84:	bf8e      	itee	hi
34008a86:	4b59      	ldrhi	r3, [pc, #356]	@ (34008bec <RCCEx_GetUSARTCLKFreq+0x1d8>)
34008a88:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34008a8c:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34008a90:	4298      	cmp	r0, r3
34008a92:	d1dc      	bne.n	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008a94:	f7fc fc3e 	bl	34005314 <LL_RCC_IC9_IsEnabled>
34008a98:	2800      	cmp	r0, #0
34008a9a:	d0d8      	beq.n	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
34008a9c:	f7fc fc42 	bl	34005324 <LL_RCC_IC9_GetDivider>
34008aa0:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008aa2:	4b53      	ldr	r3, [pc, #332]	@ (34008bf0 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008aa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008aa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008ab0:	f000 808e 	beq.w	34008bd0 <RCCEx_GetUSARTCLKFreq+0x1bc>
34008ab4:	f200 8082 	bhi.w	34008bbc <RCCEx_GetUSARTCLKFreq+0x1a8>
34008ab8:	2b00      	cmp	r3, #0
34008aba:	f040 8086 	bne.w	34008bca <RCCEx_GetUSARTCLKFreq+0x1b6>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008abe:	f7ff fcb1 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
34008ac2:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008ac6:	e7c3      	b.n	34008a50 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008ac8:	4b4a      	ldr	r3, [pc, #296]	@ (34008bf4 <RCCEx_GetUSARTCLKFreq+0x1e0>)
34008aca:	4298      	cmp	r0, r3
34008acc:	d045      	beq.n	34008b5a <RCCEx_GetUSARTCLKFreq+0x146>
34008ace:	d833      	bhi.n	34008b38 <RCCEx_GetUSARTCLKFreq+0x124>
34008ad0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008ad4:	4298      	cmp	r0, r3
34008ad6:	d028      	beq.n	34008b2a <RCCEx_GetUSARTCLKFreq+0x116>
34008ad8:	d81c      	bhi.n	34008b14 <RCCEx_GetUSARTCLKFreq+0x100>
34008ada:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
34008ade:	3bfc      	subs	r3, #252	@ 0xfc
34008ae0:	4298      	cmp	r0, r3
34008ae2:	d006      	beq.n	34008af2 <RCCEx_GetUSARTCLKFreq+0xde>
34008ae4:	d810      	bhi.n	34008b08 <RCCEx_GetUSARTCLKFreq+0xf4>
34008ae6:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008aea:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34008aee:	4298      	cmp	r0, r3
34008af0:	d1ad      	bne.n	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008af2:	f7fc fc21 	bl	34005338 <LL_RCC_IC14_IsEnabled>
34008af6:	2800      	cmp	r0, #0
34008af8:	d0a9      	beq.n	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
34008afa:	f7fc fc25 	bl	34005348 <LL_RCC_IC14_GetDivider>
34008afe:	4b3c      	ldr	r3, [pc, #240]	@ (34008bf0 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008b00:	4604      	mov	r4, r0
34008b02:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008b06:	e7cf      	b.n	34008aa8 <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008b08:	4b3b      	ldr	r3, [pc, #236]	@ (34008bf8 <RCCEx_GetUSARTCLKFreq+0x1e4>)
34008b0a:	4298      	cmp	r0, r3
34008b0c:	d0f1      	beq.n	34008af2 <RCCEx_GetUSARTCLKFreq+0xde>
34008b0e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
34008b12:	e7ec      	b.n	34008aee <RCCEx_GetUSARTCLKFreq+0xda>
34008b14:	4b39      	ldr	r3, [pc, #228]	@ (34008bfc <RCCEx_GetUSARTCLKFreq+0x1e8>)
34008b16:	4298      	cmp	r0, r3
34008b18:	d007      	beq.n	34008b2a <RCCEx_GetUSARTCLKFreq+0x116>
34008b1a:	bf8e      	itee	hi
34008b1c:	4b38      	ldrhi	r3, [pc, #224]	@ (34008c00 <RCCEx_GetUSARTCLKFreq+0x1ec>)
34008b1e:	f020 0004 	bicls.w	r0, r0, #4
34008b22:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008b26:	4298      	cmp	r0, r3
34008b28:	d191      	bne.n	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
34008b2a:	f7fc fba7 	bl	3400527c <LL_RCC_LSE_IsReady>
34008b2e:	3800      	subs	r0, #0
34008b30:	bf18      	it	ne
34008b32:	2001      	movne	r0, #1
34008b34:	03c0      	lsls	r0, r0, #15
34008b36:	e78b      	b.n	34008a50 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008b38:	4b32      	ldr	r3, [pc, #200]	@ (34008c04 <RCCEx_GetUSARTCLKFreq+0x1f0>)
34008b3a:	4298      	cmp	r0, r3
34008b3c:	d020      	beq.n	34008b80 <RCCEx_GetUSARTCLKFreq+0x16c>
34008b3e:	d813      	bhi.n	34008b68 <RCCEx_GetUSARTCLKFreq+0x154>
34008b40:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34008b44:	4298      	cmp	r0, r3
34008b46:	d008      	beq.n	34008b5a <RCCEx_GetUSARTCLKFreq+0x146>
34008b48:	bf8e      	itee	hi
34008b4a:	4b2f      	ldrhi	r3, [pc, #188]	@ (34008c08 <RCCEx_GetUSARTCLKFreq+0x1f4>)
34008b4c:	f020 0004 	bicls.w	r0, r0, #4
34008b50:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008b54:	4298      	cmp	r0, r3
34008b56:	f47f af7a 	bne.w	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
34008b5a:	f7fc fb87 	bl	3400526c <LL_RCC_MSI_IsReady>
34008b5e:	2800      	cmp	r0, #0
34008b60:	f43f af75 	beq.w	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
34008b64:	4829      	ldr	r0, [pc, #164]	@ (34008c0c <RCCEx_GetUSARTCLKFreq+0x1f8>)
  return usart_frequency;
34008b66:	e773      	b.n	34008a50 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008b68:	4b29      	ldr	r3, [pc, #164]	@ (34008c10 <RCCEx_GetUSARTCLKFreq+0x1fc>)
34008b6a:	4298      	cmp	r0, r3
34008b6c:	d008      	beq.n	34008b80 <RCCEx_GetUSARTCLKFreq+0x16c>
34008b6e:	bf8e      	itee	hi
34008b70:	4b28      	ldrhi	r3, [pc, #160]	@ (34008c14 <RCCEx_GetUSARTCLKFreq+0x200>)
34008b72:	f020 0004 	bicls.w	r0, r0, #4
34008b76:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008b7a:	4298      	cmp	r0, r3
34008b7c:	f47f af67 	bne.w	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
34008b80:	f7fc fb6c 	bl	3400525c <LL_RCC_HSI_IsReady>
34008b84:	2800      	cmp	r0, #0
34008b86:	f43f af62 	beq.w	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008b8a:	4b19      	ldr	r3, [pc, #100]	@ (34008bf0 <RCCEx_GetUSARTCLKFreq+0x1dc>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008b8c:	4822      	ldr	r0, [pc, #136]	@ (34008c18 <RCCEx_GetUSARTCLKFreq+0x204>)
34008b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008b90:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008b94:	e007      	b.n	34008ba6 <RCCEx_GetUSARTCLKFreq+0x192>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008b96:	f7fc faeb 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34008b9a:	f7fc fbf1 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008b9e:	4b14      	ldr	r3, [pc, #80]	@ (34008bf0 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008ba2:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008ba6:	40d8      	lsrs	r0, r3
34008ba8:	e752      	b.n	34008a50 <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008baa:	f7fc fae1 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34008bae:	f7fc fbe7 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008bb2:	4b0f      	ldr	r3, [pc, #60]	@ (34008bf0 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008bb6:	f003 0307 	and.w	r3, r3, #7
34008bba:	e7f4      	b.n	34008ba6 <RCCEx_GetUSARTCLKFreq+0x192>
        switch (LL_RCC_IC14_GetSource())
34008bbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008bc0:	f47f af45 	bne.w	34008a4e <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008bc4:	f7ff fcee 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
34008bc8:	e77b      	b.n	34008ac2 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008bca:	f7ff fc6b 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
34008bce:	e778      	b.n	34008ac2 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008bd0:	f7ff fca8 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34008bd4:	e775      	b.n	34008ac2 <RCCEx_GetUSARTCLKFreq+0xae>
34008bd6:	bf00      	nop
34008bd8:	07021430 	.word	0x07021430
34008bdc:	07000830 	.word	0x07000830
34008be0:	07011430 	.word	0x07011430
34008be4:	07010830 	.word	0x07010830
34008be8:	07020434 	.word	0x07020434
34008bec:	07020830 	.word	0x07020830
34008bf0:	56028000 	.word	0x56028000
34008bf4:	07050030 	.word	0x07050030
34008bf8:	07030830 	.word	0x07030830
34008bfc:	07040830 	.word	0x07040830
34008c00:	07041430 	.word	0x07041430
34008c04:	07060030 	.word	0x07060030
34008c08:	07051430 	.word	0x07051430
34008c0c:	003d0900 	.word	0x003d0900
34008c10:	07060830 	.word	0x07060830
34008c14:	07061430 	.word	0x07061430
34008c18:	03d09000 	.word	0x03d09000

34008c1c <RCCEx_GetUARTCLKFreq>:
{
34008c1c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008c1e:	f7fc fb47 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008c22:	4b77      	ldr	r3, [pc, #476]	@ (34008e00 <RCCEx_GetUARTCLKFreq+0x1e4>)
34008c24:	4298      	cmp	r0, r3
34008c26:	d03e      	beq.n	34008ca6 <RCCEx_GetUARTCLKFreq+0x8a>
34008c28:	d859      	bhi.n	34008cde <RCCEx_GetUARTCLKFreq+0xc2>
34008c2a:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008c2e:	4298      	cmp	r0, r3
34008c30:	f000 80c6 	beq.w	34008dc0 <RCCEx_GetUARTCLKFreq+0x1a4>
34008c34:	d814      	bhi.n	34008c60 <RCCEx_GetUARTCLKFreq+0x44>
34008c36:	4b73      	ldr	r3, [pc, #460]	@ (34008e04 <RCCEx_GetUARTCLKFreq+0x1e8>)
34008c38:	4298      	cmp	r0, r3
34008c3a:	f000 80cb 	beq.w	34008dd4 <RCCEx_GetUARTCLKFreq+0x1b8>
34008c3e:	3b01      	subs	r3, #1
34008c40:	4298      	cmp	r0, r3
34008c42:	d90b      	bls.n	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
34008c44:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
34008c48:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34008c4c:	429a      	cmp	r2, r3
34008c4e:	f000 80b7 	beq.w	34008dc0 <RCCEx_GetUARTCLKFreq+0x1a4>
34008c52:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008c56:	4298      	cmp	r0, r3
34008c58:	f000 80b2 	beq.w	34008dc0 <RCCEx_GetUARTCLKFreq+0x1a4>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34008c5c:	2000      	movs	r0, #0
}
34008c5e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008c60:	4b69      	ldr	r3, [pc, #420]	@ (34008e08 <RCCEx_GetUARTCLKFreq+0x1ec>)
34008c62:	4298      	cmp	r0, r3
34008c64:	d00d      	beq.n	34008c82 <RCCEx_GetUARTCLKFreq+0x66>
34008c66:	d812      	bhi.n	34008c8e <RCCEx_GetUARTCLKFreq+0x72>
34008c68:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008c6c:	4298      	cmp	r0, r3
34008c6e:	d008      	beq.n	34008c82 <RCCEx_GetUARTCLKFreq+0x66>
34008c70:	d80b      	bhi.n	34008c8a <RCCEx_GetUARTCLKFreq+0x6e>
34008c72:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008c76:	4298      	cmp	r0, r3
34008c78:	d003      	beq.n	34008c82 <RCCEx_GetUARTCLKFreq+0x66>
34008c7a:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008c7e:	4298      	cmp	r0, r3
34008c80:	d1ec      	bne.n	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
}
34008c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008c86:	f7ff bccd 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008c8a:	4b60      	ldr	r3, [pc, #384]	@ (34008e0c <RCCEx_GetUARTCLKFreq+0x1f0>)
34008c8c:	e7f7      	b.n	34008c7e <RCCEx_GetUARTCLKFreq+0x62>
34008c8e:	4b60      	ldr	r3, [pc, #384]	@ (34008e10 <RCCEx_GetUARTCLKFreq+0x1f4>)
34008c90:	4298      	cmp	r0, r3
34008c92:	d008      	beq.n	34008ca6 <RCCEx_GetUARTCLKFreq+0x8a>
34008c94:	d821      	bhi.n	34008cda <RCCEx_GetUARTCLKFreq+0xbe>
34008c96:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008c9a:	4298      	cmp	r0, r3
34008c9c:	d003      	beq.n	34008ca6 <RCCEx_GetUARTCLKFreq+0x8a>
34008c9e:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008ca2:	4298      	cmp	r0, r3
34008ca4:	d1da      	bne.n	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008ca6:	f7fc fb35 	bl	34005314 <LL_RCC_IC9_IsEnabled>
34008caa:	2800      	cmp	r0, #0
34008cac:	d0d6      	beq.n	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
34008cae:	f7fc fb39 	bl	34005324 <LL_RCC_IC9_GetDivider>
34008cb2:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008cb4:	4b57      	ldr	r3, [pc, #348]	@ (34008e14 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008cb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008cba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008cc2:	f000 809a 	beq.w	34008dfa <RCCEx_GetUARTCLKFreq+0x1de>
34008cc6:	f200 808e 	bhi.w	34008de6 <RCCEx_GetUARTCLKFreq+0x1ca>
34008cca:	2b00      	cmp	r3, #0
34008ccc:	f040 8092 	bne.w	34008df4 <RCCEx_GetUARTCLKFreq+0x1d8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008cd0:	f7ff fba8 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
34008cd4:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008cd8:	e7c1      	b.n	34008c5e <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008cda:	4b4f      	ldr	r3, [pc, #316]	@ (34008e18 <RCCEx_GetUARTCLKFreq+0x1fc>)
34008cdc:	e7e1      	b.n	34008ca2 <RCCEx_GetUARTCLKFreq+0x86>
34008cde:	4b4f      	ldr	r3, [pc, #316]	@ (34008e1c <RCCEx_GetUARTCLKFreq+0x200>)
34008ce0:	4298      	cmp	r0, r3
34008ce2:	d04a      	beq.n	34008d7a <RCCEx_GetUARTCLKFreq+0x15e>
34008ce4:	d836      	bhi.n	34008d54 <RCCEx_GetUARTCLKFreq+0x138>
34008ce6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008cea:	4298      	cmp	r0, r3
34008cec:	d029      	beq.n	34008d42 <RCCEx_GetUARTCLKFreq+0x126>
34008cee:	d81c      	bhi.n	34008d2a <RCCEx_GetUARTCLKFreq+0x10e>
34008cf0:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008cf4:	3b04      	subs	r3, #4
34008cf6:	4298      	cmp	r0, r3
34008cf8:	d008      	beq.n	34008d0c <RCCEx_GetUARTCLKFreq+0xf0>
34008cfa:	d812      	bhi.n	34008d22 <RCCEx_GetUARTCLKFreq+0x106>
34008cfc:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008d00:	4298      	cmp	r0, r3
34008d02:	d003      	beq.n	34008d0c <RCCEx_GetUARTCLKFreq+0xf0>
34008d04:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008d08:	4298      	cmp	r0, r3
34008d0a:	d1a7      	bne.n	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008d0c:	f7fc fb14 	bl	34005338 <LL_RCC_IC14_IsEnabled>
34008d10:	2800      	cmp	r0, #0
34008d12:	d0a3      	beq.n	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
34008d14:	f7fc fb18 	bl	34005348 <LL_RCC_IC14_GetDivider>
34008d18:	4b3e      	ldr	r3, [pc, #248]	@ (34008e14 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008d1a:	4604      	mov	r4, r0
34008d1c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008d20:	e7cb      	b.n	34008cba <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008d22:	4b3f      	ldr	r3, [pc, #252]	@ (34008e20 <RCCEx_GetUARTCLKFreq+0x204>)
34008d24:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008d28:	e7ee      	b.n	34008d08 <RCCEx_GetUARTCLKFreq+0xec>
34008d2a:	4b3e      	ldr	r3, [pc, #248]	@ (34008e24 <RCCEx_GetUARTCLKFreq+0x208>)
34008d2c:	4298      	cmp	r0, r3
34008d2e:	d008      	beq.n	34008d42 <RCCEx_GetUARTCLKFreq+0x126>
34008d30:	d80e      	bhi.n	34008d50 <RCCEx_GetUARTCLKFreq+0x134>
34008d32:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008d36:	4298      	cmp	r0, r3
34008d38:	d003      	beq.n	34008d42 <RCCEx_GetUARTCLKFreq+0x126>
34008d3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008d3e:	4298      	cmp	r0, r3
34008d40:	d18c      	bne.n	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
34008d42:	f7fc fa9b 	bl	3400527c <LL_RCC_LSE_IsReady>
34008d46:	3800      	subs	r0, #0
34008d48:	bf18      	it	ne
34008d4a:	2001      	movne	r0, #1
34008d4c:	03c0      	lsls	r0, r0, #15
34008d4e:	e786      	b.n	34008c5e <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008d50:	4b35      	ldr	r3, [pc, #212]	@ (34008e28 <RCCEx_GetUARTCLKFreq+0x20c>)
34008d52:	e7f4      	b.n	34008d3e <RCCEx_GetUARTCLKFreq+0x122>
34008d54:	4b35      	ldr	r3, [pc, #212]	@ (34008e2c <RCCEx_GetUARTCLKFreq+0x210>)
34008d56:	4298      	cmp	r0, r3
34008d58:	d025      	beq.n	34008da6 <RCCEx_GetUARTCLKFreq+0x18a>
34008d5a:	d817      	bhi.n	34008d8c <RCCEx_GetUARTCLKFreq+0x170>
34008d5c:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
34008d60:	3b04      	subs	r3, #4
34008d62:	4298      	cmp	r0, r3
34008d64:	d009      	beq.n	34008d7a <RCCEx_GetUARTCLKFreq+0x15e>
34008d66:	d80f      	bhi.n	34008d88 <RCCEx_GetUARTCLKFreq+0x16c>
34008d68:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008d6c:	4298      	cmp	r0, r3
34008d6e:	d004      	beq.n	34008d7a <RCCEx_GetUARTCLKFreq+0x15e>
34008d70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008d74:	4298      	cmp	r0, r3
34008d76:	f47f af71 	bne.w	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
34008d7a:	f7fc fa77 	bl	3400526c <LL_RCC_MSI_IsReady>
34008d7e:	2800      	cmp	r0, #0
34008d80:	f43f af6c 	beq.w	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
34008d84:	482a      	ldr	r0, [pc, #168]	@ (34008e30 <RCCEx_GetUARTCLKFreq+0x214>)
  return uart_frequency;
34008d86:	e76a      	b.n	34008c5e <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008d88:	4b2a      	ldr	r3, [pc, #168]	@ (34008e34 <RCCEx_GetUARTCLKFreq+0x218>)
34008d8a:	e7f3      	b.n	34008d74 <RCCEx_GetUARTCLKFreq+0x158>
34008d8c:	4b2a      	ldr	r3, [pc, #168]	@ (34008e38 <RCCEx_GetUARTCLKFreq+0x21c>)
34008d8e:	4298      	cmp	r0, r3
34008d90:	d009      	beq.n	34008da6 <RCCEx_GetUARTCLKFreq+0x18a>
34008d92:	d813      	bhi.n	34008dbc <RCCEx_GetUARTCLKFreq+0x1a0>
34008d94:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008d98:	4298      	cmp	r0, r3
34008d9a:	d004      	beq.n	34008da6 <RCCEx_GetUARTCLKFreq+0x18a>
34008d9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008da0:	4298      	cmp	r0, r3
34008da2:	f47f af5b 	bne.w	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
34008da6:	f7fc fa59 	bl	3400525c <LL_RCC_HSI_IsReady>
34008daa:	2800      	cmp	r0, #0
34008dac:	f43f af56 	beq.w	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008db0:	4b18      	ldr	r3, [pc, #96]	@ (34008e14 <RCCEx_GetUARTCLKFreq+0x1f8>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008db2:	4822      	ldr	r0, [pc, #136]	@ (34008e3c <RCCEx_GetUARTCLKFreq+0x220>)
34008db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008db6:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008dba:	e009      	b.n	34008dd0 <RCCEx_GetUARTCLKFreq+0x1b4>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008dbc:	4b20      	ldr	r3, [pc, #128]	@ (34008e40 <RCCEx_GetUARTCLKFreq+0x224>)
34008dbe:	e7ef      	b.n	34008da0 <RCCEx_GetUARTCLKFreq+0x184>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008dc0:	f7fc f9d6 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34008dc4:	f7fc fadc 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008dc8:	4b12      	ldr	r3, [pc, #72]	@ (34008e14 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008dcc:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008dd0:	40d8      	lsrs	r0, r3
34008dd2:	e744      	b.n	34008c5e <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008dd4:	f7fc f9cc 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34008dd8:	f7fc fad2 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008ddc:	4b0d      	ldr	r3, [pc, #52]	@ (34008e14 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008de0:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008de4:	e7f4      	b.n	34008dd0 <RCCEx_GetUARTCLKFreq+0x1b4>
        switch (LL_RCC_IC14_GetSource())
34008de6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008dea:	f47f af37 	bne.w	34008c5c <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008dee:	f7ff fbd9 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
34008df2:	e76f      	b.n	34008cd4 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008df4:	f7ff fb56 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
34008df8:	e76c      	b.n	34008cd4 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008dfa:	f7ff fb93 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34008dfe:	e769      	b.n	34008cd4 <RCCEx_GetUARTCLKFreq+0xb8>
34008e00:	07021c30 	.word	0x07021c30
34008e04:	07000034 	.word	0x07000034
34008e08:	07011c30 	.word	0x07011c30
34008e0c:	07011830 	.word	0x07011830
34008e10:	07021030 	.word	0x07021030
34008e14:	56028000 	.word	0x56028000
34008e18:	07021830 	.word	0x07021830
34008e1c:	07050034 	.word	0x07050034
34008e20:	07031830 	.word	0x07031830
34008e24:	07041830 	.word	0x07041830
34008e28:	07041c30 	.word	0x07041c30
34008e2c:	07060034 	.word	0x07060034
34008e30:	003d0900 	.word	0x003d0900
34008e34:	07051c30 	.word	0x07051c30
34008e38:	07061830 	.word	0x07061830
34008e3c:	03d09000 	.word	0x03d09000
34008e40:	07061c30 	.word	0x07061c30

34008e44 <RCCEx_GetSPICLKFreq>:
{
34008e44:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008e46:	f7fc fa33 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008e4a:	4b89      	ldr	r3, [pc, #548]	@ (34009070 <RCCEx_GetSPICLKFreq+0x22c>)
34008e4c:	4298      	cmp	r0, r3
34008e4e:	d055      	beq.n	34008efc <RCCEx_GetSPICLKFreq+0xb8>
34008e50:	d865      	bhi.n	34008f1e <RCCEx_GetSPICLKFreq+0xda>
34008e52:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
34008e56:	4298      	cmp	r0, r3
34008e58:	f000 80ca 	beq.w	34008ff0 <RCCEx_GetSPICLKFreq+0x1ac>
34008e5c:	d81e      	bhi.n	34008e9c <RCCEx_GetSPICLKFreq+0x58>
34008e5e:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008e62:	4298      	cmp	r0, r3
34008e64:	f000 80ba 	beq.w	34008fdc <RCCEx_GetSPICLKFreq+0x198>
34008e68:	d80a      	bhi.n	34008e80 <RCCEx_GetSPICLKFreq+0x3c>
34008e6a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008e6e:	4298      	cmp	r0, r3
34008e70:	d00b      	beq.n	34008e8a <RCCEx_GetSPICLKFreq+0x46>
34008e72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008e76:	4298      	cmp	r0, r3
34008e78:	f000 80b0 	beq.w	34008fdc <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34008e7c:	2000      	movs	r0, #0
}
34008e7e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008e80:	4b7c      	ldr	r3, [pc, #496]	@ (34009074 <RCCEx_GetSPICLKFreq+0x230>)
34008e82:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008e86:	4298      	cmp	r0, r3
34008e88:	d1f8      	bne.n	34008e7c <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008e8a:	f7fc f971 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34008e8e:	f7fc fa77 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008e92:	4b79      	ldr	r3, [pc, #484]	@ (34009078 <RCCEx_GetSPICLKFreq+0x234>)
34008e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008e96:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008e9a:	e0a7      	b.n	34008fec <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008e9c:	4b77      	ldr	r3, [pc, #476]	@ (3400907c <RCCEx_GetSPICLKFreq+0x238>)
34008e9e:	4298      	cmp	r0, r3
34008ea0:	f000 80af 	beq.w	34009002 <RCCEx_GetSPICLKFreq+0x1be>
34008ea4:	d81d      	bhi.n	34008ee2 <RCCEx_GetSPICLKFreq+0x9e>
34008ea6:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34008eaa:	4298      	cmp	r0, r3
34008eac:	d00a      	beq.n	34008ec4 <RCCEx_GetSPICLKFreq+0x80>
34008eae:	d80d      	bhi.n	34008ecc <RCCEx_GetSPICLKFreq+0x88>
34008eb0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008eb4:	4298      	cmp	r0, r3
34008eb6:	d005      	beq.n	34008ec4 <RCCEx_GetSPICLKFreq+0x80>
34008eb8:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34008ebc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008ec0:	4298      	cmp	r0, r3
34008ec2:	d1db      	bne.n	34008e7c <RCCEx_GetSPICLKFreq+0x38>
}
34008ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008ec8:	f7ff bbac 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008ecc:	4b6c      	ldr	r3, [pc, #432]	@ (34009080 <RCCEx_GetSPICLKFreq+0x23c>)
34008ece:	4298      	cmp	r0, r3
34008ed0:	d0f8      	beq.n	34008ec4 <RCCEx_GetSPICLKFreq+0x80>
34008ed2:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008ed6:	4298      	cmp	r0, r3
34008ed8:	f000 8093 	beq.w	34009002 <RCCEx_GetSPICLKFreq+0x1be>
34008edc:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008ee0:	e7ee      	b.n	34008ec0 <RCCEx_GetSPICLKFreq+0x7c>
34008ee2:	4b68      	ldr	r3, [pc, #416]	@ (34009084 <RCCEx_GetSPICLKFreq+0x240>)
34008ee4:	4298      	cmp	r0, r3
34008ee6:	d009      	beq.n	34008efc <RCCEx_GetSPICLKFreq+0xb8>
34008ee8:	d813      	bhi.n	34008f12 <RCCEx_GetSPICLKFreq+0xce>
34008eea:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008eee:	4298      	cmp	r0, r3
34008ef0:	f000 8087 	beq.w	34009002 <RCCEx_GetSPICLKFreq+0x1be>
34008ef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008ef8:	4298      	cmp	r0, r3
34008efa:	d1bf      	bne.n	34008e7c <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008efc:	f7fc fa0a 	bl	34005314 <LL_RCC_IC9_IsEnabled>
34008f00:	2800      	cmp	r0, #0
34008f02:	d0bb      	beq.n	34008e7c <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
34008f04:	f7fc fa0e 	bl	34005324 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008f08:	4b5b      	ldr	r3, [pc, #364]	@ (34009078 <RCCEx_GetSPICLKFreq+0x234>)
34008f0a:	4604      	mov	r4, r0
34008f0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34008f10:	e082      	b.n	34009018 <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008f12:	4b5d      	ldr	r3, [pc, #372]	@ (34009088 <RCCEx_GetSPICLKFreq+0x244>)
34008f14:	4298      	cmp	r0, r3
34008f16:	d074      	beq.n	34009002 <RCCEx_GetSPICLKFreq+0x1be>
34008f18:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008f1c:	e7ec      	b.n	34008ef8 <RCCEx_GetSPICLKFreq+0xb4>
34008f1e:	4b5b      	ldr	r3, [pc, #364]	@ (3400908c <RCCEx_GetSPICLKFreq+0x248>)
34008f20:	4298      	cmp	r0, r3
34008f22:	d043      	beq.n	34008fac <RCCEx_GetSPICLKFreq+0x168>
34008f24:	d830      	bhi.n	34008f88 <RCCEx_GetSPICLKFreq+0x144>
34008f26:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
34008f2a:	4298      	cmp	r0, r3
34008f2c:	d0e6      	beq.n	34008efc <RCCEx_GetSPICLKFreq+0xb8>
34008f2e:	d808      	bhi.n	34008f42 <RCCEx_GetSPICLKFreq+0xfe>
34008f30:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34008f34:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008f38:	429a      	cmp	r2, r3
34008f3a:	d079      	beq.n	34009030 <RCCEx_GetSPICLKFreq+0x1ec>
34008f3c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008f40:	e7da      	b.n	34008ef8 <RCCEx_GetSPICLKFreq+0xb4>
34008f42:	4b53      	ldr	r3, [pc, #332]	@ (34009090 <RCCEx_GetSPICLKFreq+0x24c>)
34008f44:	4298      	cmp	r0, r3
34008f46:	d00d      	beq.n	34008f64 <RCCEx_GetSPICLKFreq+0x120>
34008f48:	d814      	bhi.n	34008f74 <RCCEx_GetSPICLKFreq+0x130>
34008f4a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008f4e:	4298      	cmp	r0, r3
34008f50:	d008      	beq.n	34008f64 <RCCEx_GetSPICLKFreq+0x120>
34008f52:	d80d      	bhi.n	34008f70 <RCCEx_GetSPICLKFreq+0x12c>
34008f54:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008f58:	4298      	cmp	r0, r3
34008f5a:	d003      	beq.n	34008f64 <RCCEx_GetSPICLKFreq+0x120>
34008f5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f60:	4298      	cmp	r0, r3
34008f62:	d18b      	bne.n	34008e7c <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34008f64:	f7fc f982 	bl	3400526c <LL_RCC_MSI_IsReady>
34008f68:	2800      	cmp	r0, #0
34008f6a:	d087      	beq.n	34008e7c <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34008f6c:	4849      	ldr	r0, [pc, #292]	@ (34009094 <RCCEx_GetSPICLKFreq+0x250>)
  return spi_frequency;
34008f6e:	e786      	b.n	34008e7e <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008f70:	4b49      	ldr	r3, [pc, #292]	@ (34009098 <RCCEx_GetSPICLKFreq+0x254>)
34008f72:	e7f5      	b.n	34008f60 <RCCEx_GetSPICLKFreq+0x11c>
34008f74:	4b49      	ldr	r3, [pc, #292]	@ (3400909c <RCCEx_GetSPICLKFreq+0x258>)
34008f76:	4298      	cmp	r0, r3
34008f78:	d018      	beq.n	34008fac <RCCEx_GetSPICLKFreq+0x168>
34008f7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f7e:	4298      	cmp	r0, r3
34008f80:	d014      	beq.n	34008fac <RCCEx_GetSPICLKFreq+0x168>
34008f82:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008f86:	e7eb      	b.n	34008f60 <RCCEx_GetSPICLKFreq+0x11c>
34008f88:	4b45      	ldr	r3, [pc, #276]	@ (340090a0 <RCCEx_GetSPICLKFreq+0x25c>)
34008f8a:	4298      	cmp	r0, r3
34008f8c:	d069      	beq.n	34009062 <RCCEx_GetSPICLKFreq+0x21e>
34008f8e:	d81e      	bhi.n	34008fce <RCCEx_GetSPICLKFreq+0x18a>
34008f90:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008f94:	4298      	cmp	r0, r3
34008f96:	d018      	beq.n	34008fca <RCCEx_GetSPICLKFreq+0x186>
34008f98:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34008f9c:	d811      	bhi.n	34008fc2 <RCCEx_GetSPICLKFreq+0x17e>
34008f9e:	4a41      	ldr	r2, [pc, #260]	@ (340090a4 <RCCEx_GetSPICLKFreq+0x260>)
34008fa0:	4293      	cmp	r3, r2
34008fa2:	d003      	beq.n	34008fac <RCCEx_GetSPICLKFreq+0x168>
34008fa4:	4b40      	ldr	r3, [pc, #256]	@ (340090a8 <RCCEx_GetSPICLKFreq+0x264>)
34008fa6:	4298      	cmp	r0, r3
34008fa8:	f47f af68 	bne.w	34008e7c <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
34008fac:	f7fc f956 	bl	3400525c <LL_RCC_HSI_IsReady>
34008fb0:	2800      	cmp	r0, #0
34008fb2:	f43f af63 	beq.w	34008e7c <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008fb6:	4b30      	ldr	r3, [pc, #192]	@ (34009078 <RCCEx_GetSPICLKFreq+0x234>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008fb8:	483c      	ldr	r0, [pc, #240]	@ (340090ac <RCCEx_GetSPICLKFreq+0x268>)
34008fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008fbc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008fc0:	e014      	b.n	34008fec <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008fc2:	4a3b      	ldr	r2, [pc, #236]	@ (340090b0 <RCCEx_GetSPICLKFreq+0x26c>)
34008fc4:	4293      	cmp	r3, r2
34008fc6:	f47f af59 	bne.w	34008e7c <RCCEx_GetSPICLKFreq+0x38>
34008fca:	483a      	ldr	r0, [pc, #232]	@ (340090b4 <RCCEx_GetSPICLKFreq+0x270>)
34008fcc:	e757      	b.n	34008e7e <RCCEx_GetSPICLKFreq+0x3a>
34008fce:	4b3a      	ldr	r3, [pc, #232]	@ (340090b8 <RCCEx_GetSPICLKFreq+0x274>)
34008fd0:	4298      	cmp	r0, r3
34008fd2:	d046      	beq.n	34009062 <RCCEx_GetSPICLKFreq+0x21e>
34008fd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008fd8:	4298      	cmp	r0, r3
34008fda:	e7f4      	b.n	34008fc6 <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008fdc:	f7fc f8c8 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34008fe0:	f7fc f9ce 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008fe4:	4b24      	ldr	r3, [pc, #144]	@ (34009078 <RCCEx_GetSPICLKFreq+0x234>)
34008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008fe8:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008fec:	40d8      	lsrs	r0, r3
      break;
34008fee:	e746      	b.n	34008e7e <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008ff0:	f7fc f8be 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34008ff4:	f7fc f9c4 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34008ff8:	4b1f      	ldr	r3, [pc, #124]	@ (34009078 <RCCEx_GetSPICLKFreq+0x234>)
34008ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34008ffc:	f3c3 3302 	ubfx	r3, r3, #12, #3
34009000:	e7f4      	b.n	34008fec <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009002:	f7fc f975 	bl	340052f0 <LL_RCC_IC8_IsEnabled>
34009006:	2800      	cmp	r0, #0
34009008:	f43f af38 	beq.w	34008e7c <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
3400900c:	f7fc f978 	bl	34005300 <LL_RCC_IC8_GetDivider>
34009010:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009012:	4b19      	ldr	r3, [pc, #100]	@ (34009078 <RCCEx_GetSPICLKFreq+0x234>)
34009014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34009018:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
3400901c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009020:	d01c      	beq.n	3400905c <RCCEx_GetSPICLKFreq+0x218>
34009022:	d811      	bhi.n	34009048 <RCCEx_GetSPICLKFreq+0x204>
34009024:	b9bb      	cbnz	r3, 34009056 <RCCEx_GetSPICLKFreq+0x212>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009026:	f7ff f9fd 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
3400902a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400902e:	e726      	b.n	34008e7e <RCCEx_GetSPICLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34009030:	f7fc f982 	bl	34005338 <LL_RCC_IC14_IsEnabled>
34009034:	2800      	cmp	r0, #0
34009036:	f43f af21 	beq.w	34008e7c <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
3400903a:	f7fc f985 	bl	34005348 <LL_RCC_IC14_GetDivider>
3400903e:	4b0e      	ldr	r3, [pc, #56]	@ (34009078 <RCCEx_GetSPICLKFreq+0x234>)
34009040:	4604      	mov	r4, r0
34009042:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34009046:	e7e7      	b.n	34009018 <RCCEx_GetSPICLKFreq+0x1d4>
        switch (LL_RCC_IC14_GetSource())
34009048:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400904c:	f47f af16 	bne.w	34008e7c <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009050:	f7ff faa8 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
34009054:	e7e9      	b.n	3400902a <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009056:	f7ff fa25 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
3400905a:	e7e6      	b.n	3400902a <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400905c:	f7ff fa62 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34009060:	e7e3      	b.n	3400902a <RCCEx_GetSPICLKFreq+0x1e6>
      if (LL_RCC_HSE_IsReady() != 0U)
34009062:	f7fc f8f3 	bl	3400524c <LL_RCC_HSE_IsReady>
34009066:	2800      	cmp	r0, #0
34009068:	f43f af08 	beq.w	34008e7c <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
3400906c:	4813      	ldr	r0, [pc, #76]	@ (340090bc <RCCEx_GetSPICLKFreq+0x278>)
3400906e:	e706      	b.n	34008e7e <RCCEx_GetSPICLKFreq+0x3a>
34009070:	07030820 	.word	0x07030820
34009074:	07001020 	.word	0x07001020
34009078:	56028000 	.word	0x56028000
3400907c:	07020820 	.word	0x07020820
34009080:	07011820 	.word	0x07011820
34009084:	07021420 	.word	0x07021420
34009088:	07021820 	.word	0x07021820
3400908c:	07050c20 	.word	0x07050c20
34009090:	07041420 	.word	0x07041420
34009094:	003d0900 	.word	0x003d0900
34009098:	07041020 	.word	0x07041020
3400909c:	07050420 	.word	0x07050420
340090a0:	07061020 	.word	0x07061020
340090a4:	07051020 	.word	0x07051020
340090a8:	07051820 	.word	0x07051820
340090ac:	03d09000 	.word	0x03d09000
340090b0:	07060820 	.word	0x07060820
340090b4:	00bb8000 	.word	0x00bb8000
340090b8:	07061420 	.word	0x07061420
340090bc:	02dc6c00 	.word	0x02dc6c00

340090c0 <RCCEx_GetSAICLKFreq>:
{
340090c0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340090c2:	f7fc f8f5 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
340090c6:	4b49      	ldr	r3, [pc, #292]	@ (340091ec <RCCEx_GetSAICLKFreq+0x12c>)
340090c8:	4298      	cmp	r0, r3
340090ca:	d04a      	beq.n	34009162 <RCCEx_GetSAICLKFreq+0xa2>
340090cc:	d839      	bhi.n	34009142 <RCCEx_GetSAICLKFreq+0x82>
340090ce:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
340090d2:	4298      	cmp	r0, r3
340090d4:	d021      	beq.n	3400911a <RCCEx_GetSAICLKFreq+0x5a>
340090d6:	d815      	bhi.n	34009104 <RCCEx_GetSAICLKFreq+0x44>
340090d8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340090dc:	4298      	cmp	r0, r3
340090de:	d00d      	beq.n	340090fc <RCCEx_GetSAICLKFreq+0x3c>
340090e0:	d809      	bhi.n	340090f6 <RCCEx_GetSAICLKFreq+0x36>
340090e2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340090e6:	4298      	cmp	r0, r3
340090e8:	d04e      	beq.n	34009188 <RCCEx_GetSAICLKFreq+0xc8>
340090ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340090ee:	4298      	cmp	r0, r3
340090f0:	d04a      	beq.n	34009188 <RCCEx_GetSAICLKFreq+0xc8>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
340090f2:	2000      	movs	r0, #0
}
340090f4:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
340090f6:	4b3e      	ldr	r3, [pc, #248]	@ (340091f0 <RCCEx_GetSAICLKFreq+0x130>)
340090f8:	4298      	cmp	r0, r3
340090fa:	d1fa      	bne.n	340090f2 <RCCEx_GetSAICLKFreq+0x32>
}
340090fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009100:	f7ff ba90 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34009104:	4b3b      	ldr	r3, [pc, #236]	@ (340091f4 <RCCEx_GetSAICLKFreq+0x134>)
34009106:	4298      	cmp	r0, r3
34009108:	d04d      	beq.n	340091a6 <RCCEx_GetSAICLKFreq+0xe6>
3400910a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400910e:	4298      	cmp	r0, r3
34009110:	d049      	beq.n	340091a6 <RCCEx_GetSAICLKFreq+0xe6>
34009112:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009116:	4298      	cmp	r0, r3
34009118:	d1eb      	bne.n	340090f2 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3400911a:	f7fc f8d7 	bl	340052cc <LL_RCC_IC7_IsEnabled>
3400911e:	2800      	cmp	r0, #0
34009120:	d0e7      	beq.n	340090f2 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
34009122:	f7fc f8db 	bl	340052dc <LL_RCC_IC7_GetDivider>
34009126:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009128:	4b33      	ldr	r3, [pc, #204]	@ (340091f8 <RCCEx_GetSAICLKFreq+0x138>)
3400912a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3400912e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34009132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009136:	d047      	beq.n	340091c8 <RCCEx_GetSAICLKFreq+0x108>
34009138:	d840      	bhi.n	340091bc <RCCEx_GetSAICLKFreq+0xfc>
3400913a:	bb7b      	cbnz	r3, 3400919c <RCCEx_GetSAICLKFreq+0xdc>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400913c:	f7ff f972 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
34009140:	e02e      	b.n	340091a0 <RCCEx_GetSAICLKFreq+0xe0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34009142:	4b2e      	ldr	r3, [pc, #184]	@ (340091fc <RCCEx_GetSAICLKFreq+0x13c>)
34009144:	4298      	cmp	r0, r3
34009146:	d01d      	beq.n	34009184 <RCCEx_GetSAICLKFreq+0xc4>
34009148:	d811      	bhi.n	3400916e <RCCEx_GetSAICLKFreq+0xae>
3400914a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400914e:	4298      	cmp	r0, r3
34009150:	d03d      	beq.n	340091ce <RCCEx_GetSAICLKFreq+0x10e>
34009152:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009156:	4298      	cmp	r0, r3
34009158:	d039      	beq.n	340091ce <RCCEx_GetSAICLKFreq+0x10e>
3400915a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400915e:	4298      	cmp	r0, r3
34009160:	d1c7      	bne.n	340090f2 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
34009162:	f7fc f883 	bl	3400526c <LL_RCC_MSI_IsReady>
34009166:	2800      	cmp	r0, #0
34009168:	d0c3      	beq.n	340090f2 <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
3400916a:	4825      	ldr	r0, [pc, #148]	@ (34009200 <RCCEx_GetSAICLKFreq+0x140>)
  return sai_frequency;
3400916c:	e7c2      	b.n	340090f4 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3400916e:	4b25      	ldr	r3, [pc, #148]	@ (34009204 <RCCEx_GetSAICLKFreq+0x144>)
34009170:	4298      	cmp	r0, r3
34009172:	d036      	beq.n	340091e2 <RCCEx_GetSAICLKFreq+0x122>
34009174:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009178:	4298      	cmp	r0, r3
3400917a:	d032      	beq.n	340091e2 <RCCEx_GetSAICLKFreq+0x122>
3400917c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009180:	4298      	cmp	r0, r3
34009182:	d1b6      	bne.n	340090f2 <RCCEx_GetSAICLKFreq+0x32>
34009184:	4820      	ldr	r0, [pc, #128]	@ (34009208 <RCCEx_GetSAICLKFreq+0x148>)
34009186:	e7b5      	b.n	340090f4 <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009188:	f7fb fff2 	bl	34005170 <HAL_RCC_GetSysClockFreq>
3400918c:	f7fc f8f8 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34009190:	4b19      	ldr	r3, [pc, #100]	@ (340091f8 <RCCEx_GetSAICLKFreq+0x138>)
34009192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34009194:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009198:	40d8      	lsrs	r0, r3
3400919a:	e7ab      	b.n	340090f4 <RCCEx_GetSAICLKFreq+0x34>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400919c:	f7ff f982 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
340091a0:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340091a4:	e7a6      	b.n	340090f4 <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340091a6:	f7fc f8a3 	bl	340052f0 <LL_RCC_IC8_IsEnabled>
340091aa:	2800      	cmp	r0, #0
340091ac:	d0a1      	beq.n	340090f2 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
340091ae:	f7fc f8a7 	bl	34005300 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340091b2:	4b11      	ldr	r3, [pc, #68]	@ (340091f8 <RCCEx_GetSAICLKFreq+0x138>)
340091b4:	4604      	mov	r4, r0
340091b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
340091ba:	e7b8      	b.n	3400912e <RCCEx_GetSAICLKFreq+0x6e>
        switch (LL_RCC_IC8_GetSource())
340091bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340091c0:	d197      	bne.n	340090f2 <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340091c2:	f7ff f9ef 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
340091c6:	e7eb      	b.n	340091a0 <RCCEx_GetSAICLKFreq+0xe0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340091c8:	f7ff f9ac 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
340091cc:	e7e8      	b.n	340091a0 <RCCEx_GetSAICLKFreq+0xe0>
      if (LL_RCC_HSI_IsReady() != 0U)
340091ce:	f7fc f845 	bl	3400525c <LL_RCC_HSI_IsReady>
340091d2:	2800      	cmp	r0, #0
340091d4:	d08d      	beq.n	340090f2 <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340091d6:	4b08      	ldr	r3, [pc, #32]	@ (340091f8 <RCCEx_GetSAICLKFreq+0x138>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340091d8:	480c      	ldr	r0, [pc, #48]	@ (3400920c <RCCEx_GetSAICLKFreq+0x14c>)
340091da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340091dc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340091e0:	e7da      	b.n	34009198 <RCCEx_GetSAICLKFreq+0xd8>
}
340091e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
340091e6:	f7ff baa3 	b.w	34008730 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
340091ea:	bf00      	nop
340091ec:	07041418 	.word	0x07041418
340091f0:	07011818 	.word	0x07011818
340091f4:	07031418 	.word	0x07031418
340091f8:	56028000 	.word	0x56028000
340091fc:	07061418 	.word	0x07061418
34009200:	003d0900 	.word	0x003d0900
34009204:	07071418 	.word	0x07071418
34009208:	00bb8000 	.word	0x00bb8000
3400920c:	03d09000 	.word	0x03d09000

34009210 <RCCEx_GetI3CCLKFreq>:
{
34009210:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009212:	f7fc f84d 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34009216:	4b3d      	ldr	r3, [pc, #244]	@ (3400930c <RCCEx_GetI3CCLKFreq+0xfc>)
34009218:	4298      	cmp	r0, r3
3400921a:	d060      	beq.n	340092de <RCCEx_GetI3CCLKFreq+0xce>
3400921c:	d830      	bhi.n	34009280 <RCCEx_GetI3CCLKFreq+0x70>
3400921e:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34009222:	4298      	cmp	r0, r3
34009224:	d057      	beq.n	340092d6 <RCCEx_GetI3CCLKFreq+0xc6>
34009226:	d80d      	bhi.n	34009244 <RCCEx_GetI3CCLKFreq+0x34>
34009228:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400922c:	4298      	cmp	r0, r3
3400922e:	d048      	beq.n	340092c2 <RCCEx_GetI3CCLKFreq+0xb2>
34009230:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34009234:	4298      	cmp	r0, r3
34009236:	d04e      	beq.n	340092d6 <RCCEx_GetI3CCLKFreq+0xc6>
34009238:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400923c:	4298      	cmp	r0, r3
3400923e:	d040      	beq.n	340092c2 <RCCEx_GetI3CCLKFreq+0xb2>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34009240:	2000      	movs	r0, #0
}
34009242:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34009244:	4b32      	ldr	r3, [pc, #200]	@ (34009310 <RCCEx_GetI3CCLKFreq+0x100>)
34009246:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400924a:	4298      	cmp	r0, r3
3400924c:	d1f8      	bne.n	34009240 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3400924e:	4b31      	ldr	r3, [pc, #196]	@ (34009314 <RCCEx_GetI3CCLKFreq+0x104>)
34009250:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009254:	0592      	lsls	r2, r2, #22
34009256:	d5f3      	bpl.n	34009240 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009258:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3400925c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009260:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009264:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009266:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3400926a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400926e:	d04a      	beq.n	34009306 <RCCEx_GetI3CCLKFreq+0xf6>
34009270:	d840      	bhi.n	340092f4 <RCCEx_GetI3CCLKFreq+0xe4>
34009272:	2b00      	cmp	r3, #0
34009274:	d144      	bne.n	34009300 <RCCEx_GetI3CCLKFreq+0xf0>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009276:	f7ff f8d5 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
3400927a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400927e:	e7e0      	b.n	34009242 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34009280:	4b25      	ldr	r3, [pc, #148]	@ (34009318 <RCCEx_GetI3CCLKFreq+0x108>)
34009282:	4298      	cmp	r0, r3
34009284:	d008      	beq.n	34009298 <RCCEx_GetI3CCLKFreq+0x88>
34009286:	d80d      	bhi.n	340092a4 <RCCEx_GetI3CCLKFreq+0x94>
34009288:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400928c:	4298      	cmp	r0, r3
3400928e:	d026      	beq.n	340092de <RCCEx_GetI3CCLKFreq+0xce>
34009290:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34009294:	4298      	cmp	r0, r3
34009296:	d1d3      	bne.n	34009240 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
34009298:	f7fb ffe8 	bl	3400526c <LL_RCC_MSI_IsReady>
3400929c:	2800      	cmp	r0, #0
3400929e:	d0cf      	beq.n	34009240 <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
340092a0:	481e      	ldr	r0, [pc, #120]	@ (3400931c <RCCEx_GetI3CCLKFreq+0x10c>)
  return i3c_frequency;
340092a2:	e7ce      	b.n	34009242 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340092a4:	4b1e      	ldr	r3, [pc, #120]	@ (34009320 <RCCEx_GetI3CCLKFreq+0x110>)
340092a6:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340092aa:	4298      	cmp	r0, r3
340092ac:	d1c8      	bne.n	34009240 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
340092ae:	f7fb ffd5 	bl	3400525c <LL_RCC_HSI_IsReady>
340092b2:	2800      	cmp	r0, #0
340092b4:	d0c4      	beq.n	34009240 <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340092b6:	4b17      	ldr	r3, [pc, #92]	@ (34009314 <RCCEx_GetI3CCLKFreq+0x104>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340092b8:	481a      	ldr	r0, [pc, #104]	@ (34009324 <RCCEx_GetI3CCLKFreq+0x114>)
340092ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340092bc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340092c0:	e007      	b.n	340092d2 <RCCEx_GetI3CCLKFreq+0xc2>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340092c2:	f7fb ff55 	bl	34005170 <HAL_RCC_GetSysClockFreq>
340092c6:	f7fc f85b 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340092ca:	4b12      	ldr	r3, [pc, #72]	@ (34009314 <RCCEx_GetI3CCLKFreq+0x104>)
340092cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340092ce:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340092d2:	40d8      	lsrs	r0, r3
340092d4:	e7b5      	b.n	34009242 <RCCEx_GetI3CCLKFreq+0x32>
}
340092d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340092da:	f7ff b9a3 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340092de:	f7fc f83d 	bl	3400535c <LL_RCC_IC15_IsEnabled>
340092e2:	2800      	cmp	r0, #0
340092e4:	d0ac      	beq.n	34009240 <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
340092e6:	f7fc f841 	bl	3400536c <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340092ea:	4b0a      	ldr	r3, [pc, #40]	@ (34009314 <RCCEx_GetI3CCLKFreq+0x104>)
340092ec:	4604      	mov	r4, r0
340092ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340092f2:	e7b8      	b.n	34009266 <RCCEx_GetI3CCLKFreq+0x56>
        switch (LL_RCC_IC15_GetSource())
340092f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340092f8:	d1a2      	bne.n	34009240 <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340092fa:	f7ff f953 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
340092fe:	e7bc      	b.n	3400927a <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009300:	f7ff f8d0 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
34009304:	e7b9      	b.n	3400927a <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009306:	f7ff f90d 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
3400930a:	e7b6      	b.n	3400927a <RCCEx_GetI3CCLKFreq+0x6a>
3400930c:	0703100c 	.word	0x0703100c
34009310:	0702100c 	.word	0x0702100c
34009314:	56028000 	.word	0x56028000
34009318:	0704140c 	.word	0x0704140c
3400931c:	003d0900 	.word	0x003d0900
34009320:	0705100c 	.word	0x0705100c
34009324:	03d09000 	.word	0x03d09000

34009328 <RCCEx_GetSDMMCCLKFreq>:
{
34009328:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400932a:	f7fb ffc1 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3400932e:	4b2d      	ldr	r3, [pc, #180]	@ (340093e4 <RCCEx_GetSDMMCCLKFreq+0xbc>)
34009330:	4298      	cmp	r0, r3
34009332:	d01d      	beq.n	34009370 <RCCEx_GetSDMMCCLKFreq+0x48>
34009334:	d813      	bhi.n	3400935e <RCCEx_GetSDMMCCLKFreq+0x36>
34009336:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400933a:	4298      	cmp	r0, r3
3400933c:	d00b      	beq.n	34009356 <RCCEx_GetSDMMCCLKFreq+0x2e>
3400933e:	d807      	bhi.n	34009350 <RCCEx_GetSDMMCCLKFreq+0x28>
34009340:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009344:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009348:	4298      	cmp	r0, r3
3400934a:	d02a      	beq.n	340093a2 <RCCEx_GetSDMMCCLKFreq+0x7a>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3400934c:	2000      	movs	r0, #0
}
3400934e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34009350:	4b25      	ldr	r3, [pc, #148]	@ (340093e8 <RCCEx_GetSDMMCCLKFreq+0xc0>)
34009352:	4298      	cmp	r0, r3
34009354:	d1fa      	bne.n	3400934c <RCCEx_GetSDMMCCLKFreq+0x24>
}
34009356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400935a:	f7ff b963 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3400935e:	4b23      	ldr	r3, [pc, #140]	@ (340093ec <RCCEx_GetSDMMCCLKFreq+0xc4>)
34009360:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34009364:	429a      	cmp	r2, r3
34009366:	d022      	beq.n	340093ae <RCCEx_GetSDMMCCLKFreq+0x86>
34009368:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3400936c:	4298      	cmp	r0, r3
3400936e:	d1ed      	bne.n	3400934c <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009370:	4b1f      	ldr	r3, [pc, #124]	@ (340093f0 <RCCEx_GetSDMMCCLKFreq+0xc8>)
34009372:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34009376:	f010 0008 	ands.w	r0, r0, #8
3400937a:	d0e8      	beq.n	3400934e <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3400937c:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009380:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009384:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009388:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3400938a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC5_GetSource())
3400938e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009392:	d023      	beq.n	340093dc <RCCEx_GetSDMMCCLKFreq+0xb4>
34009394:	d819      	bhi.n	340093ca <RCCEx_GetSDMMCCLKFreq+0xa2>
34009396:	b9f3      	cbnz	r3, 340093d6 <RCCEx_GetSDMMCCLKFreq+0xae>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009398:	f7ff f844 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3400939c:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
340093a0:	e7d5      	b.n	3400934e <RCCEx_GetSDMMCCLKFreq+0x26>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340093a2:	f7fb fee5 	bl	34005170 <HAL_RCC_GetSysClockFreq>
}
340093a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340093aa:	f7fb bfe9 	b.w	34005380 <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
340093ae:	4b10      	ldr	r3, [pc, #64]	@ (340093f0 <RCCEx_GetSDMMCCLKFreq+0xc8>)
340093b0:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
340093b4:	f010 0010 	ands.w	r0, r0, #16
340093b8:	d0c9      	beq.n	3400934e <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340093ba:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340093be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340093c2:	f3c0 4007 	ubfx	r0, r0, #16, #8
340093c6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340093c8:	e7df      	b.n	3400938a <RCCEx_GetSDMMCCLKFreq+0x62>
        switch (LL_RCC_IC5_GetSource())
340093ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340093ce:	d1bd      	bne.n	3400934c <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340093d0:	f7ff f8e8 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
340093d4:	e7e2      	b.n	3400939c <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340093d6:	f7ff f865 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
340093da:	e7df      	b.n	3400939c <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340093dc:	f7ff f8a2 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
340093e0:	e7dc      	b.n	3400939c <RCCEx_GetSDMMCCLKFreq+0x74>
340093e2:	bf00      	nop
340093e4:	0302001c 	.word	0x0302001c
340093e8:	0301041c 	.word	0x0301041c
340093ec:	0303001c 	.word	0x0303001c
340093f0:	56028000 	.word	0x56028000

340093f4 <RCCEx_GetI2CCLKFreq>:
{
340093f4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340093f6:	f7fb ff5b 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340093fa:	4b50      	ldr	r3, [pc, #320]	@ (3400953c <RCCEx_GetI2CCLKFreq+0x148>)
340093fc:	4298      	cmp	r0, r3
340093fe:	f000 8085 	beq.w	3400950c <RCCEx_GetI2CCLKFreq+0x118>
34009402:	d84b      	bhi.n	3400949c <RCCEx_GetI2CCLKFreq+0xa8>
34009404:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
34009408:	4298      	cmp	r0, r3
3400940a:	d01a      	beq.n	34009442 <RCCEx_GetI2CCLKFreq+0x4e>
3400940c:	d81d      	bhi.n	3400944a <RCCEx_GetI2CCLKFreq+0x56>
3400940e:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009412:	4298      	cmp	r0, r3
34009414:	d008      	beq.n	34009428 <RCCEx_GetI2CCLKFreq+0x34>
34009416:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
3400941a:	d80f      	bhi.n	3400943c <RCCEx_GetI2CCLKFreq+0x48>
3400941c:	4a48      	ldr	r2, [pc, #288]	@ (34009540 <RCCEx_GetI2CCLKFreq+0x14c>)
3400941e:	4293      	cmp	r3, r2
34009420:	d002      	beq.n	34009428 <RCCEx_GetI2CCLKFreq+0x34>
34009422:	4b48      	ldr	r3, [pc, #288]	@ (34009544 <RCCEx_GetI2CCLKFreq+0x150>)
34009424:	4298      	cmp	r0, r3
34009426:	d14a      	bne.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009428:	f7fb fea2 	bl	34005170 <HAL_RCC_GetSysClockFreq>
3400942c:	f7fb ffa8 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009430:	4b45      	ldr	r3, [pc, #276]	@ (34009548 <RCCEx_GetI2CCLKFreq+0x154>)
34009432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009434:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009438:	40d8      	lsrs	r0, r3
3400943a:	e041      	b.n	340094c0 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400943c:	4a43      	ldr	r2, [pc, #268]	@ (3400954c <RCCEx_GetI2CCLKFreq+0x158>)
3400943e:	4293      	cmp	r3, r2
34009440:	d13d      	bne.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
}
34009442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009446:	f7ff b8ed 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400944a:	4b41      	ldr	r3, [pc, #260]	@ (34009550 <RCCEx_GetI2CCLKFreq+0x15c>)
3400944c:	4298      	cmp	r0, r3
3400944e:	d008      	beq.n	34009462 <RCCEx_GetI2CCLKFreq+0x6e>
34009450:	d820      	bhi.n	34009494 <RCCEx_GetI2CCLKFreq+0xa0>
34009452:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34009456:	4298      	cmp	r0, r3
34009458:	d0f3      	beq.n	34009442 <RCCEx_GetI2CCLKFreq+0x4e>
3400945a:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
3400945e:	4298      	cmp	r0, r3
34009460:	d12d      	bne.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34009462:	4b39      	ldr	r3, [pc, #228]	@ (34009548 <RCCEx_GetI2CCLKFreq+0x154>)
34009464:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009468:	0592      	lsls	r2, r2, #22
3400946a:	d528      	bpl.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400946c:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34009470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009474:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009478:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400947a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3400947e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009482:	d057      	beq.n	34009534 <RCCEx_GetI2CCLKFreq+0x140>
34009484:	d84d      	bhi.n	34009522 <RCCEx_GetI2CCLKFreq+0x12e>
34009486:	2b00      	cmp	r3, #0
34009488:	d151      	bne.n	3400952e <RCCEx_GetI2CCLKFreq+0x13a>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400948a:	f7fe ffcb 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
3400948e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009492:	e015      	b.n	340094c0 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009494:	4b2f      	ldr	r3, [pc, #188]	@ (34009554 <RCCEx_GetI2CCLKFreq+0x160>)
34009496:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400949a:	e7e0      	b.n	3400945e <RCCEx_GetI2CCLKFreq+0x6a>
3400949c:	4b2e      	ldr	r3, [pc, #184]	@ (34009558 <RCCEx_GetI2CCLKFreq+0x164>)
3400949e:	4298      	cmp	r0, r3
340094a0:	d014      	beq.n	340094cc <RCCEx_GetI2CCLKFreq+0xd8>
340094a2:	d819      	bhi.n	340094d8 <RCCEx_GetI2CCLKFreq+0xe4>
340094a4:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340094a8:	4298      	cmp	r0, r3
340094aa:	d02f      	beq.n	3400950c <RCCEx_GetI2CCLKFreq+0x118>
340094ac:	d809      	bhi.n	340094c2 <RCCEx_GetI2CCLKFreq+0xce>
340094ae:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340094b2:	4298      	cmp	r0, r3
340094b4:	d02a      	beq.n	3400950c <RCCEx_GetI2CCLKFreq+0x118>
340094b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340094ba:	4298      	cmp	r0, r3
340094bc:	d026      	beq.n	3400950c <RCCEx_GetI2CCLKFreq+0x118>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
340094be:	2000      	movs	r0, #0
}
340094c0:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340094c2:	4b26      	ldr	r3, [pc, #152]	@ (3400955c <RCCEx_GetI2CCLKFreq+0x168>)
340094c4:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340094c8:	4298      	cmp	r0, r3
340094ca:	d1f8      	bne.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_MSI_IsReady() != 0U)
340094cc:	f7fb fece 	bl	3400526c <LL_RCC_MSI_IsReady>
340094d0:	2800      	cmp	r0, #0
340094d2:	d0f4      	beq.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
        i2c_frequency = MSI_VALUE;
340094d4:	4822      	ldr	r0, [pc, #136]	@ (34009560 <RCCEx_GetI2CCLKFreq+0x16c>)
  return i2c_frequency;
340094d6:	e7f3      	b.n	340094c0 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340094d8:	4b22      	ldr	r3, [pc, #136]	@ (34009564 <RCCEx_GetI2CCLKFreq+0x170>)
340094da:	4298      	cmp	r0, r3
340094dc:	d008      	beq.n	340094f0 <RCCEx_GetI2CCLKFreq+0xfc>
340094de:	d811      	bhi.n	34009504 <RCCEx_GetI2CCLKFreq+0x110>
340094e0:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
340094e4:	4298      	cmp	r0, r3
340094e6:	d0f1      	beq.n	340094cc <RCCEx_GetI2CCLKFreq+0xd8>
340094e8:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
340094ec:	4298      	cmp	r0, r3
340094ee:	d1e6      	bne.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_HSI_IsReady() != 0U)
340094f0:	f7fb feb4 	bl	3400525c <LL_RCC_HSI_IsReady>
340094f4:	2800      	cmp	r0, #0
340094f6:	d0e2      	beq.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340094f8:	4b13      	ldr	r3, [pc, #76]	@ (34009548 <RCCEx_GetI2CCLKFreq+0x154>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340094fa:	481b      	ldr	r0, [pc, #108]	@ (34009568 <RCCEx_GetI2CCLKFreq+0x174>)
340094fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340094fe:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009502:	e799      	b.n	34009438 <RCCEx_GetI2CCLKFreq+0x44>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009504:	4b19      	ldr	r3, [pc, #100]	@ (3400956c <RCCEx_GetI2CCLKFreq+0x178>)
34009506:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400950a:	e7ef      	b.n	340094ec <RCCEx_GetI2CCLKFreq+0xf8>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3400950c:	f7fb ff26 	bl	3400535c <LL_RCC_IC15_IsEnabled>
34009510:	2800      	cmp	r0, #0
34009512:	d0d4      	beq.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
        ic_divider = LL_RCC_IC15_GetDivider();
34009514:	f7fb ff2a 	bl	3400536c <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009518:	4b0b      	ldr	r3, [pc, #44]	@ (34009548 <RCCEx_GetI2CCLKFreq+0x154>)
3400951a:	4604      	mov	r4, r0
3400951c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34009520:	e7ab      	b.n	3400947a <RCCEx_GetI2CCLKFreq+0x86>
        switch (LL_RCC_IC15_GetSource())
34009522:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009526:	d1ca      	bne.n	340094be <RCCEx_GetI2CCLKFreq+0xca>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009528:	f7ff f83c 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
3400952c:	e7af      	b.n	3400948e <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400952e:	f7fe ffb9 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
34009532:	e7ac      	b.n	3400948e <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009534:	f7fe fff6 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34009538:	e7a9      	b.n	3400948e <RCCEx_GetI2CCLKFreq+0x9a>
3400953a:	bf00      	nop
3400953c:	0703000c 	.word	0x0703000c
34009540:	0700000c 	.word	0x0700000c
34009544:	0700080c 	.word	0x0700080c
34009548:	56028000 	.word	0x56028000
3400954c:	0701000c 	.word	0x0701000c
34009550:	0702040c 	.word	0x0702040c
34009554:	0702080c 	.word	0x0702080c
34009558:	0704080c 	.word	0x0704080c
3400955c:	0704000c 	.word	0x0704000c
34009560:	003d0900 	.word	0x003d0900
34009564:	0705040c 	.word	0x0705040c
34009568:	03d09000 	.word	0x03d09000
3400956c:	0705080c 	.word	0x0705080c

34009570 <RCCEx_GetLPTIMCLKFreq>:
{
34009570:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009572:	f7fb fe9d 	bl	340052b0 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009576:	4b63      	ldr	r3, [pc, #396]	@ (34009704 <RCCEx_GetLPTIMCLKFreq+0x194>)
34009578:	4298      	cmp	r0, r3
3400957a:	d03a      	beq.n	340095f2 <RCCEx_GetLPTIMCLKFreq+0x82>
3400957c:	d850      	bhi.n	34009620 <RCCEx_GetLPTIMCLKFreq+0xb0>
3400957e:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34009582:	4298      	cmp	r0, r3
34009584:	f000 80a7 	beq.w	340096d6 <RCCEx_GetLPTIMCLKFreq+0x166>
34009588:	d813      	bhi.n	340095b2 <RCCEx_GetLPTIMCLKFreq+0x42>
3400958a:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3400958e:	4298      	cmp	r0, r3
34009590:	f000 8097 	beq.w	340096c2 <RCCEx_GetLPTIMCLKFreq+0x152>
34009594:	3b01      	subs	r3, #1
34009596:	4298      	cmp	r0, r3
34009598:	d909      	bls.n	340095ae <RCCEx_GetLPTIMCLKFreq+0x3e>
3400959a:	f203 4301 	addw	r3, r3, #1025	@ 0x401
3400959e:	4298      	cmp	r0, r3
340095a0:	f000 8099 	beq.w	340096d6 <RCCEx_GetLPTIMCLKFreq+0x166>
340095a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340095a8:	4298      	cmp	r0, r3
340095aa:	f000 8094 	beq.w	340096d6 <RCCEx_GetLPTIMCLKFreq+0x166>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
340095ae:	2000      	movs	r0, #0
}
340095b0:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340095b2:	4b55      	ldr	r3, [pc, #340]	@ (34009708 <RCCEx_GetLPTIMCLKFreq+0x198>)
340095b4:	4298      	cmp	r0, r3
340095b6:	d015      	beq.n	340095e4 <RCCEx_GetLPTIMCLKFreq+0x74>
340095b8:	d808      	bhi.n	340095cc <RCCEx_GetLPTIMCLKFreq+0x5c>
340095ba:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340095be:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340095c2:	429a      	cmp	r2, r3
340095c4:	d00e      	beq.n	340095e4 <RCCEx_GetLPTIMCLKFreq+0x74>
340095c6:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
340095ca:	e7ed      	b.n	340095a8 <RCCEx_GetLPTIMCLKFreq+0x38>
340095cc:	4b4f      	ldr	r3, [pc, #316]	@ (3400970c <RCCEx_GetLPTIMCLKFreq+0x19c>)
340095ce:	4298      	cmp	r0, r3
340095d0:	d00f      	beq.n	340095f2 <RCCEx_GetLPTIMCLKFreq+0x82>
340095d2:	d80b      	bhi.n	340095ec <RCCEx_GetLPTIMCLKFreq+0x7c>
340095d4:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340095d8:	4298      	cmp	r0, r3
340095da:	d003      	beq.n	340095e4 <RCCEx_GetLPTIMCLKFreq+0x74>
340095dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340095e0:	4298      	cmp	r0, r3
340095e2:	d1e4      	bne.n	340095ae <RCCEx_GetLPTIMCLKFreq+0x3e>
}
340095e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340095e8:	f7ff b81c 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340095ec:	4b48      	ldr	r3, [pc, #288]	@ (34009710 <RCCEx_GetLPTIMCLKFreq+0x1a0>)
340095ee:	4298      	cmp	r0, r3
340095f0:	d1dd      	bne.n	340095ae <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340095f2:	f7fb feb3 	bl	3400535c <LL_RCC_IC15_IsEnabled>
340095f6:	2800      	cmp	r0, #0
340095f8:	d0d9      	beq.n	340095ae <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
340095fa:	f7fb feb7 	bl	3400536c <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340095fe:	4b45      	ldr	r3, [pc, #276]	@ (34009714 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009600:	4604      	mov	r4, r0
34009602:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34009606:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3400960a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400960e:	d075      	beq.n	340096fc <RCCEx_GetLPTIMCLKFreq+0x18c>
34009610:	d86a      	bhi.n	340096e8 <RCCEx_GetLPTIMCLKFreq+0x178>
34009612:	2b00      	cmp	r3, #0
34009614:	d16f      	bne.n	340096f6 <RCCEx_GetLPTIMCLKFreq+0x186>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009616:	f7fe ff05 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
3400961a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400961e:	e7c7      	b.n	340095b0 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009620:	4b3d      	ldr	r3, [pc, #244]	@ (34009718 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
34009622:	4298      	cmp	r0, r3
34009624:	d034      	beq.n	34009690 <RCCEx_GetLPTIMCLKFreq+0x120>
34009626:	d824      	bhi.n	34009672 <RCCEx_GetLPTIMCLKFreq+0x102>
34009628:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3400962c:	4298      	cmp	r0, r3
3400962e:	d00f      	beq.n	34009650 <RCCEx_GetLPTIMCLKFreq+0xe0>
34009630:	d815      	bhi.n	3400965e <RCCEx_GetLPTIMCLKFreq+0xee>
34009632:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34009636:	4298      	cmp	r0, r3
34009638:	d00a      	beq.n	34009650 <RCCEx_GetLPTIMCLKFreq+0xe0>
3400963a:	d806      	bhi.n	3400964a <RCCEx_GetLPTIMCLKFreq+0xda>
3400963c:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009640:	4298      	cmp	r0, r3
34009642:	d0d6      	beq.n	340095f2 <RCCEx_GetLPTIMCLKFreq+0x82>
34009644:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009648:	e7d1      	b.n	340095ee <RCCEx_GetLPTIMCLKFreq+0x7e>
3400964a:	4b34      	ldr	r3, [pc, #208]	@ (3400971c <RCCEx_GetLPTIMCLKFreq+0x1ac>)
3400964c:	4298      	cmp	r0, r3
3400964e:	d1ae      	bne.n	340095ae <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
34009650:	f7fb fe14 	bl	3400527c <LL_RCC_LSE_IsReady>
34009654:	3800      	subs	r0, #0
34009656:	bf18      	it	ne
34009658:	2001      	movne	r0, #1
3400965a:	03c0      	lsls	r0, r0, #15
3400965c:	e7a8      	b.n	340095b0 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400965e:	4b30      	ldr	r3, [pc, #192]	@ (34009720 <RCCEx_GetLPTIMCLKFreq+0x1b0>)
34009660:	4298      	cmp	r0, r3
34009662:	d0f5      	beq.n	34009650 <RCCEx_GetLPTIMCLKFreq+0xe0>
34009664:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
34009668:	4298      	cmp	r0, r3
3400966a:	d011      	beq.n	34009690 <RCCEx_GetLPTIMCLKFreq+0x120>
3400966c:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009670:	e7ec      	b.n	3400964c <RCCEx_GetLPTIMCLKFreq+0xdc>
34009672:	4b2c      	ldr	r3, [pc, #176]	@ (34009724 <RCCEx_GetLPTIMCLKFreq+0x1b4>)
34009674:	4298      	cmp	r0, r3
34009676:	d015      	beq.n	340096a4 <RCCEx_GetLPTIMCLKFreq+0x134>
34009678:	d81b      	bhi.n	340096b2 <RCCEx_GetLPTIMCLKFreq+0x142>
3400967a:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3400967e:	4298      	cmp	r0, r3
34009680:	d006      	beq.n	34009690 <RCCEx_GetLPTIMCLKFreq+0x120>
34009682:	d80c      	bhi.n	3400969e <RCCEx_GetLPTIMCLKFreq+0x12e>
34009684:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009688:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400968c:	4298      	cmp	r0, r3
3400968e:	d18e      	bne.n	340095ae <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34009690:	4b20      	ldr	r3, [pc, #128]	@ (34009714 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009692:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34009694:	07db      	lsls	r3, r3, #31
34009696:	d58a      	bpl.n	340095ae <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
34009698:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
3400969c:	e788      	b.n	340095b0 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400969e:	4b22      	ldr	r3, [pc, #136]	@ (34009728 <RCCEx_GetLPTIMCLKFreq+0x1b8>)
340096a0:	4298      	cmp	r0, r3
340096a2:	d184      	bne.n	340095ae <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340096a4:	f7fb fd64 	bl	34005170 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
340096a8:	4b1a      	ldr	r3, [pc, #104]	@ (34009714 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340096aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340096ac:	f3c3 6301 	ubfx	r3, r3, #24, #2
340096b0:	e00f      	b.n	340096d2 <RCCEx_GetLPTIMCLKFreq+0x162>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340096b2:	4b1e      	ldr	r3, [pc, #120]	@ (3400972c <RCCEx_GetLPTIMCLKFreq+0x1bc>)
340096b4:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340096b8:	429a      	cmp	r2, r3
340096ba:	d0f3      	beq.n	340096a4 <RCCEx_GetLPTIMCLKFreq+0x134>
340096bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340096c0:	e7ee      	b.n	340096a0 <RCCEx_GetLPTIMCLKFreq+0x130>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340096c2:	f7fb fd55 	bl	34005170 <HAL_RCC_GetSysClockFreq>
340096c6:	f7fb fe5b 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340096ca:	4b12      	ldr	r3, [pc, #72]	@ (34009714 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340096cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340096ce:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
340096d2:	40d8      	lsrs	r0, r3
      break;
340096d4:	e76c      	b.n	340095b0 <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340096d6:	f7fb fd4b 	bl	34005170 <HAL_RCC_GetSysClockFreq>
340096da:	f7fb fe51 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
340096de:	4b0d      	ldr	r3, [pc, #52]	@ (34009714 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340096e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
340096e2:	f3c3 3302 	ubfx	r3, r3, #12, #3
340096e6:	e7f4      	b.n	340096d2 <RCCEx_GetLPTIMCLKFreq+0x162>
        switch (LL_RCC_IC15_GetSource())
340096e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340096ec:	f47f af5f 	bne.w	340095ae <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340096f0:	f7fe ff58 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
340096f4:	e791      	b.n	3400961a <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340096f6:	f7fe fed5 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
340096fa:	e78e      	b.n	3400961a <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340096fc:	f7fe ff12 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34009700:	e78b      	b.n	3400961a <RCCEx_GetLPTIMCLKFreq+0xaa>
34009702:	bf00      	nop
34009704:	0702102c 	.word	0x0702102c
34009708:	0701102c 	.word	0x0701102c
3400970c:	0702082c 	.word	0x0702082c
34009710:	07020c2c 	.word	0x07020c2c
34009714:	56028000 	.word	0x56028000
34009718:	07040c2c 	.word	0x07040c2c
3400971c:	07030c2c 	.word	0x07030c2c
34009720:	0703182c 	.word	0x0703182c
34009724:	07050c2c 	.word	0x07050c2c
34009728:	0705082c 	.word	0x0705082c
3400972c:	0705102c 	.word	0x0705102c

34009730 <HAL_RCCEx_GetPeriphCLKFreq>:
{
34009730:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
34009732:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
34009736:	430b      	orrs	r3, r1
34009738:	f000 8447 	beq.w	34009fca <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
3400973c:	4bbf      	ldr	r3, [pc, #764]	@ (34009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
3400973e:	4298      	cmp	r0, r3
34009740:	f171 0300 	sbcs.w	r3, r1, #0
34009744:	f080 80e6 	bcs.w	34009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
34009748:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
3400974c:	430b      	orrs	r3, r1
3400974e:	f000 835b 	beq.w	34009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34009752:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34009756:	f171 0300 	sbcs.w	r3, r1, #0
3400975a:	d26a      	bcs.n	34009832 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
3400975c:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
34009760:	430b      	orrs	r3, r1
34009762:	f000 82b9 	beq.w	34009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
34009766:	f240 2301 	movw	r3, #513	@ 0x201
3400976a:	4298      	cmp	r0, r3
3400976c:	f171 0300 	sbcs.w	r3, r1, #0
34009770:	d224      	bcs.n	340097bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
34009772:	2809      	cmp	r0, #9
34009774:	f171 0300 	sbcs.w	r3, r1, #0
34009778:	d215      	bcs.n	340097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
3400977a:	ea50 0301 	orrs.w	r3, r0, r1
3400977e:	d01b      	beq.n	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34009780:	3801      	subs	r0, #1
34009782:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
34009786:	2808      	cmp	r0, #8
34009788:	f171 0100 	sbcs.w	r1, r1, #0
3400978c:	d214      	bcs.n	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
3400978e:	2807      	cmp	r0, #7
34009790:	d812      	bhi.n	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34009792:	e8df f010 	tbh	[pc, r0, lsl #1]
34009796:	01a6      	.short	0x01a6
34009798:	0011020f 	.word	0x0011020f
3400979c:	00110285 	.word	0x00110285
340097a0:	00110011 	.word	0x00110011
340097a4:	0235      	.short	0x0235
340097a6:	f1a0 0310 	sub.w	r3, r0, #16
340097aa:	430b      	orrs	r3, r1
340097ac:	f000 8242 	beq.w	34009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
340097b0:	3820      	subs	r0, #32
340097b2:	4308      	orrs	r0, r1
340097b4:	f000 8268 	beq.w	34009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
340097b8:	2000      	movs	r0, #0
340097ba:	e219      	b.n	34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
340097bc:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
340097c0:	430b      	orrs	r3, r1
340097c2:	f000 831d 	beq.w	34009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
340097c6:	f242 0301 	movw	r3, #8193	@ 0x2001
340097ca:	4298      	cmp	r0, r3
340097cc:	f171 0300 	sbcs.w	r3, r1, #0
340097d0:	d224      	bcs.n	3400981c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
340097d2:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
340097d6:	430b      	orrs	r3, r1
340097d8:	f000 82df 	beq.w	34009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
340097dc:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
340097e0:	430b      	orrs	r3, r1
340097e2:	f000 8308 	beq.w	34009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
340097e6:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
340097ea:	4308      	orrs	r0, r1
340097ec:	d1e4      	bne.n	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
340097ee:	4d94      	ldr	r5, [pc, #592]	@ (34009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
340097f0:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
340097f4:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
340097f8:	2b02      	cmp	r3, #2
340097fa:	f000 82c1 	beq.w	34009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
340097fe:	2b03      	cmp	r3, #3
34009800:	f000 8256 	beq.w	34009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
34009804:	2b01      	cmp	r3, #1
34009806:	f000 824b 	beq.w	34009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400980a:	f7fb fcb1 	bl	34005170 <HAL_RCC_GetSysClockFreq>
3400980e:	f7fb fdb7 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009812:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009814:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009818:	40d8      	lsrs	r0, r3
3400981a:	e1e9      	b.n	34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
3400981c:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
34009820:	430b      	orrs	r3, r1
34009822:	f000 82ef 	beq.w	34009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
34009826:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
3400982a:	4308      	orrs	r0, r1
3400982c:	d1c4      	bne.n	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3400982e:	4885      	ldr	r0, [pc, #532]	@ (34009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
34009830:	e2e2      	b.n	34009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
  switch (PeriphClk)
34009832:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
34009836:	430b      	orrs	r3, r1
34009838:	f000 82f6 	beq.w	34009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
3400983c:	4b82      	ldr	r3, [pc, #520]	@ (34009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
3400983e:	4298      	cmp	r0, r3
34009840:	f171 0300 	sbcs.w	r3, r1, #0
34009844:	d224      	bcs.n	34009890 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
34009846:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
3400984a:	430b      	orrs	r3, r1
3400984c:	f000 82e8 	beq.w	34009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
34009850:	4b7e      	ldr	r3, [pc, #504]	@ (34009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
34009852:	4298      	cmp	r0, r3
34009854:	f171 0300 	sbcs.w	r3, r1, #0
34009858:	d20f      	bcs.n	3400987a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
3400985a:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
3400985e:	430b      	orrs	r3, r1
34009860:	f000 82d7 	beq.w	34009e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34009864:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
34009868:	430b      	orrs	r3, r1
3400986a:	f000 82d7 	beq.w	34009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3400986e:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
34009872:	4308      	orrs	r0, r1
34009874:	d1a0      	bne.n	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34009876:	4876      	ldr	r0, [pc, #472]	@ (34009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
34009878:	e2c7      	b.n	34009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
  switch (PeriphClk)
3400987a:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
3400987e:	430b      	orrs	r3, r1
34009880:	f000 82d0 	beq.w	34009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
34009884:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
34009888:	4308      	orrs	r0, r1
3400988a:	d195      	bne.n	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
3400988c:	4871      	ldr	r0, [pc, #452]	@ (34009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
3400988e:	e2c1      	b.n	34009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  switch (PeriphClk)
34009890:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
34009894:	430b      	orrs	r3, r1
34009896:	f000 834d 	beq.w	34009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
3400989a:	4b6f      	ldr	r3, [pc, #444]	@ (34009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
3400989c:	4298      	cmp	r0, r3
3400989e:	f171 0300 	sbcs.w	r3, r1, #0
340098a2:	d228      	bcs.n	340098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
340098a4:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
340098a8:	430b      	orrs	r3, r1
340098aa:	f000 8302 	beq.w	34009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
340098ae:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
340098b2:	4308      	orrs	r0, r1
340098b4:	d180      	bne.n	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
340098b6:	4d62      	ldr	r5, [pc, #392]	@ (34009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
340098b8:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
340098bc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
340098c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340098c4:	f000 8195 	beq.w	34009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
340098c8:	f200 8319 	bhi.w	34009efe <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
340098cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340098d0:	f000 831f 	beq.w	34009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
340098d4:	f240 81e1 	bls.w	34009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
340098d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340098dc:	f47f af6c 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340098e0:	f7fb fd06 	bl	340052f0 <LL_RCC_IC8_IsEnabled>
340098e4:	2800      	cmp	r0, #0
340098e6:	f43f af67 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
340098ea:	f7fb fd09 	bl	34005300 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340098ee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
340098f2:	4604      	mov	r4, r0
340098f4:	e191      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (PeriphClk)
340098f6:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
340098fa:	430b      	orrs	r3, r1
340098fc:	f000 8344 	beq.w	34009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34009900:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
34009904:	4308      	orrs	r0, r1
34009906:	f47f af57 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
3400990a:	4854      	ldr	r0, [pc, #336]	@ (34009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
}
3400990c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34009910:	f7ff bbd6 	b.w	340090c0 <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
34009914:	2300      	movs	r3, #0
34009916:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400991a:	4291      	cmp	r1, r2
3400991c:	bf08      	it	eq
3400991e:	4298      	cmpeq	r0, r3
34009920:	f000 836f 	beq.w	3400a002 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
34009924:	4283      	cmp	r3, r0
34009926:	418a      	sbcs	r2, r1
34009928:	d35f      	bcc.n	340099ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
3400992a:	2210      	movs	r2, #16
3400992c:	4291      	cmp	r1, r2
3400992e:	bf08      	it	eq
34009930:	4298      	cmpeq	r0, r3
34009932:	f000 8359 	beq.w	34009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
34009936:	4283      	cmp	r3, r0
34009938:	418a      	sbcs	r2, r1
3400993a:	d329      	bcc.n	34009990 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
3400993c:	2202      	movs	r2, #2
3400993e:	4291      	cmp	r1, r2
34009940:	bf08      	it	eq
34009942:	4298      	cmpeq	r0, r3
34009944:	f000 8349 	beq.w	34009fda <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
34009948:	4283      	cmp	r3, r0
3400994a:	418a      	sbcs	r2, r1
3400994c:	d314      	bcc.n	34009978 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
3400994e:	4299      	cmp	r1, r3
34009950:	bf08      	it	eq
34009952:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
34009956:	f000 833a 	beq.w	34009fce <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
3400995a:	2901      	cmp	r1, #1
3400995c:	bf08      	it	eq
3400995e:	4298      	cmpeq	r0, r3
34009960:	f000 8337 	beq.w	34009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
34009964:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
34009968:	4308      	orrs	r0, r1
3400996a:	f47f af25 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
3400996e:	483c      	ldr	r0, [pc, #240]	@ (34009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
}
34009970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34009974:	f7ff bcd8 	b.w	34009328 <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
34009978:	2904      	cmp	r1, #4
3400997a:	bf08      	it	eq
3400997c:	4298      	cmpeq	r0, r3
3400997e:	f000 8331 	beq.w	34009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
34009982:	2908      	cmp	r1, #8
34009984:	bf08      	it	eq
34009986:	4298      	cmpeq	r0, r3
34009988:	f47f af16 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
3400998c:	4835      	ldr	r0, [pc, #212]	@ (34009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
3400998e:	e325      	b.n	34009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34009990:	f44f 7200 	mov.w	r2, #512	@ 0x200
34009994:	4291      	cmp	r1, r2
34009996:	bf08      	it	eq
34009998:	4298      	cmpeq	r0, r3
3400999a:	f000 832e 	beq.w	34009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
3400999e:	4283      	cmp	r3, r0
340099a0:	418a      	sbcs	r2, r1
340099a2:	d311      	bcc.n	340099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
340099a4:	2940      	cmp	r1, #64	@ 0x40
340099a6:	bf08      	it	eq
340099a8:	4298      	cmpeq	r0, r3
340099aa:	f000 831f 	beq.w	34009fec <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
340099ae:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
340099b2:	bf08      	it	eq
340099b4:	4298      	cmpeq	r0, r3
340099b6:	f000 831b 	beq.w	34009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
340099ba:	2920      	cmp	r1, #32
340099bc:	bf08      	it	eq
340099be:	2800      	cmpeq	r0, #0
340099c0:	f47f aefa 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
340099c4:	4828      	ldr	r0, [pc, #160]	@ (34009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
340099c6:	e309      	b.n	34009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
340099c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
340099cc:	bf08      	it	eq
340099ce:	4298      	cmpeq	r0, r3
340099d0:	f000 8315 	beq.w	34009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
340099d4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
340099d8:	bf08      	it	eq
340099da:	4298      	cmpeq	r0, r3
340099dc:	f47f aeec 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
340099e0:	4822      	ldr	r0, [pc, #136]	@ (34009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
}
340099e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
340099e6:	f7ff b919 	b.w	34008c1c <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
340099ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
340099ee:	4291      	cmp	r1, r2
340099f0:	bf08      	it	eq
340099f2:	4298      	cmpeq	r0, r3
340099f4:	f000 830f 	beq.w	3400a016 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
340099f8:	4283      	cmp	r3, r0
340099fa:	418a      	sbcs	r2, r1
340099fc:	d34b      	bcc.n	34009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
340099fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34009a02:	4291      	cmp	r1, r2
34009a04:	bf08      	it	eq
34009a06:	4298      	cmpeq	r0, r3
34009a08:	f000 8301 	beq.w	3400a00e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
34009a0c:	4283      	cmp	r3, r0
34009a0e:	418a      	sbcs	r2, r1
34009a10:	d330      	bcc.n	34009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
34009a12:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
34009a16:	bf08      	it	eq
34009a18:	4298      	cmpeq	r0, r3
34009a1a:	f000 82f4 	beq.w	3400a006 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
34009a1e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
34009a22:	bf08      	it	eq
34009a24:	4298      	cmpeq	r0, r3
34009a26:	f000 82f0 	beq.w	3400a00a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
34009a2a:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
34009a2e:	bf08      	it	eq
34009a30:	2800      	cmpeq	r0, #0
34009a32:	f47f aec1 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34009a36:	480e      	ldr	r0, [pc, #56]	@ (34009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
34009a38:	e2db      	b.n	34009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
34009a3a:	bf00      	nop
34009a3c:	20000001 	.word	0x20000001
34009a40:	56028000 	.word	0x56028000
34009a44:	07000c0c 	.word	0x07000c0c
34009a48:	00800001 	.word	0x00800001
34009a4c:	00100001 	.word	0x00100001
34009a50:	0700140c 	.word	0x0700140c
34009a54:	0700182c 	.word	0x0700182c
34009a58:	04000001 	.word	0x04000001
34009a5c:	07001418 	.word	0x07001418
34009a60:	0300001c 	.word	0x0300001c
34009a64:	07000c20 	.word	0x07000c20
34009a68:	07001420 	.word	0x07001420
34009a6c:	07000c30 	.word	0x07000c30
34009a70:	07001430 	.word	0x07001430
  switch (PeriphClk)
34009a74:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
34009a78:	bf08      	it	eq
34009a7a:	4298      	cmpeq	r0, r3
34009a7c:	f000 82c9 	beq.w	3400a012 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
34009a80:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
34009a84:	bf08      	it	eq
34009a86:	4298      	cmpeq	r0, r3
34009a88:	f47f ae96 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34009a8c:	48b4      	ldr	r0, [pc, #720]	@ (34009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
}
34009a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34009a92:	f7fe bf8d 	b.w	340089b0 <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
34009a96:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
34009a9a:	4291      	cmp	r1, r2
34009a9c:	bf08      	it	eq
34009a9e:	4298      	cmpeq	r0, r3
34009aa0:	f000 82c0 	beq.w	3400a024 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
34009aa4:	4283      	cmp	r3, r0
34009aa6:	418a      	sbcs	r2, r1
34009aa8:	d30d      	bcc.n	34009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
34009aaa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
34009aae:	bf08      	it	eq
34009ab0:	4298      	cmpeq	r0, r3
34009ab2:	f000 82b5 	beq.w	3400a020 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
34009ab6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
34009aba:	bf08      	it	eq
34009abc:	4298      	cmpeq	r0, r3
34009abe:	f47f ae7b 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34009ac2:	48a8      	ldr	r0, [pc, #672]	@ (34009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
34009ac4:	e2a8      	b.n	3400a018 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  switch (PeriphClk)
34009ac6:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34009aca:	bf08      	it	eq
34009acc:	4298      	cmpeq	r0, r3
34009ace:	f000 82ae 	beq.w	3400a02e <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
34009ad2:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
34009ad6:	bf08      	it	eq
34009ad8:	4298      	cmpeq	r0, r3
34009ada:	f47f ae6d 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34009ade:	48a2      	ldr	r0, [pc, #648]	@ (34009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
34009ae0:	e2a1      	b.n	3400a026 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34009ae2:	4da2      	ldr	r5, [pc, #648]	@ (34009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009ae4:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009aec:	2b40      	cmp	r3, #64	@ 0x40
34009aee:	d053      	beq.n	34009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
34009af0:	d814      	bhi.n	34009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
34009af2:	2b20      	cmp	r3, #32
34009af4:	d025      	beq.n	34009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
34009af6:	d805      	bhi.n	34009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
34009af8:	bb03      	cbnz	r3, 34009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009afa:	f7fb fb39 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34009afe:	f7fb fc3f 	bl	34005380 <RCCEx_GetHCLKFreq>
      break;
34009b02:	e002      	b.n	34009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009b04:	2b30      	cmp	r3, #48	@ 0x30
34009b06:	d034      	beq.n	34009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34009b08:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34009b0a:	4b98      	ldr	r3, [pc, #608]	@ (34009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009b0c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34009b10:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34009b14:	3301      	adds	r3, #1
34009b16:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
34009b1a:	e069      	b.n	34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009b1c:	2b60      	cmp	r3, #96	@ 0x60
34009b1e:	d047      	beq.n	34009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
34009b20:	2b70      	cmp	r3, #112	@ 0x70
34009b22:	d03f      	beq.n	34009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
34009b24:	2b50      	cmp	r3, #80	@ 0x50
34009b26:	d1ef      	bne.n	34009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34009b28:	f7fb fb98 	bl	3400525c <LL_RCC_HSI_IsReady>
34009b2c:	2800      	cmp	r0, #0
34009b2e:	d0eb      	beq.n	34009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009b30:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009b32:	488f      	ldr	r0, [pc, #572]	@ (34009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
34009b34:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009b38:	40d8      	lsrs	r0, r3
      break;
34009b3a:	e7e6      	b.n	34009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009b3c:	f7fe fd72 	bl	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34009b40:	e7e3      	b.n	34009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34009b42:	f7fb fbc3 	bl	340052cc <LL_RCC_IC7_IsEnabled>
34009b46:	2800      	cmp	r0, #0
34009b48:	d0de      	beq.n	34009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC7_GetDivider();
34009b4a:	f7fb fbc7 	bl	340052dc <LL_RCC_IC7_GetDivider>
34009b4e:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009b50:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34009b58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009b5c:	d019      	beq.n	34009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
34009b5e:	d812      	bhi.n	34009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
34009b60:	b913      	cbnz	r3, 34009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009b62:	f7fe fc5f 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
34009b66:	e001      	b.n	34009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009b68:	f7fe fc9c 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
34009b6c:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009b70:	e7cb      	b.n	34009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009b72:	f7fb fbbd 	bl	340052f0 <LL_RCC_IC8_IsEnabled>
34009b76:	2800      	cmp	r0, #0
34009b78:	d0c6      	beq.n	34009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34009b7a:	f7fb fbc1 	bl	34005300 <LL_RCC_IC8_GetDivider>
34009b7e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34009b82:	4604      	mov	r4, r0
34009b84:	e7e6      	b.n	34009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
        switch (LL_RCC_IC8_GetSource())
34009b86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009b8a:	d1bd      	bne.n	34009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009b8c:	f7fe fd0a 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
34009b90:	e7ec      	b.n	34009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009b92:	f7fe fcc7 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34009b96:	e7e9      	b.n	34009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
      if (LL_RCC_MSI_IsReady() != 0U)
34009b98:	f7fb fb68 	bl	3400526c <LL_RCC_MSI_IsReady>
34009b9c:	2800      	cmp	r0, #0
34009b9e:	d0b3      	beq.n	34009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        adc_frequency = MSI_VALUE;
34009ba0:	4874      	ldr	r0, [pc, #464]	@ (34009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34009ba2:	e7b2      	b.n	34009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009ba4:	f7fb fae4 	bl	34005170 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009ba8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009baa:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009bae:	e7c3      	b.n	34009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009bb0:	4871      	ldr	r0, [pc, #452]	@ (34009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x648>)
34009bb2:	e7aa      	b.n	34009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34009bb4:	4d6d      	ldr	r5, [pc, #436]	@ (34009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009bb6:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009bba:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
34009bbe:	3b01      	subs	r3, #1
34009bc0:	2b06      	cmp	r3, #6
34009bc2:	f200 80f5 	bhi.w	34009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
34009bc6:	a201      	add	r2, pc, #4	@ (adr r2, 34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>)
34009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34009bcc:	34009ca1 	.word	0x34009ca1
34009bd0:	34009f13 	.word	0x34009f13
34009bd4:	340098e1 	.word	0x340098e1
34009bd8:	34009bf3 	.word	0x34009bf3
34009bdc:	34009c61 	.word	0x34009c61
34009be0:	3400a033 	.word	0x3400a033
34009be4:	34009f29 	.word	0x34009f29
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009be8:	f7fe fc5c 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34009bec:	fbb0 f0f4 	udiv	r0, r0, r4
}
34009bf0:	bd38      	pop	{r3, r4, r5, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34009bf2:	f7fb fb3b 	bl	3400526c <LL_RCC_MSI_IsReady>
34009bf6:	2800      	cmp	r0, #0
34009bf8:	f43f adde 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
34009bfc:	485d      	ldr	r0, [pc, #372]	@ (34009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34009bfe:	e7f7      	b.n	34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34009c00:	4b5a      	ldr	r3, [pc, #360]	@ (34009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009c02:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009c06:	0395      	lsls	r5, r2, #14
34009c08:	f57f add6 	bpl.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009c0c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34009c10:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009c14:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009c18:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009c1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC20_GetSource())
34009c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009c22:	f000 81ae 	beq.w	34009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
34009c26:	f200 81a5 	bhi.w	34009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34009c2a:	2b00      	cmp	r3, #0
34009c2c:	d1dc      	bne.n	34009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009c2e:	f7fe fbf9 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
34009c32:	e7db      	b.n	34009bec <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34009c34:	4d4d      	ldr	r5, [pc, #308]	@ (34009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009c36:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009c3a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34009c42:	d014      	beq.n	34009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
34009c44:	d808      	bhi.n	34009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34009c46:	bb5b      	cbnz	r3, 34009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009c48:	f7fb fa92 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34009c4c:	f7fb fb98 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34009c50:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34009c52:	f3c3 4302 	ubfx	r3, r3, #16, #3
34009c56:	e5df      	b.n	34009818 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009c58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009c5c:	f47f adac 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009c60:	f7fb fafc 	bl	3400525c <LL_RCC_HSI_IsReady>
34009c64:	2800      	cmp	r0, #0
34009c66:	f43f ada7 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009c6a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
34009c6c:	e136      	b.n	34009edc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34009c6e:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009c72:	03dc      	lsls	r4, r3, #15
34009c74:	f57f ada0 	bpl.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009c78:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009c7c:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009c80:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009c84:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009c86:	e7c8      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34009c88:	4a38      	ldr	r2, [pc, #224]	@ (34009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009c8a:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009c8e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34009c96:	d012      	beq.n	34009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
34009c98:	d806      	bhi.n	34009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009c9a:	2b00      	cmp	r3, #0
34009c9c:	f000 8088 	beq.w	34009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
}
34009ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009ca4:	f7fe bcbe 	b.w	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009ca8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34009cac:	f47f ad84 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
34009cb0:	f7fb facc 	bl	3400524c <LL_RCC_HSE_IsReady>
34009cb4:	2800      	cmp	r0, #0
34009cb6:	f43f ad7f 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
34009cba:	4830      	ldr	r0, [pc, #192]	@ (34009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009cbc:	e798      	b.n	34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34009cbe:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009cc2:	0518      	lsls	r0, r3, #20
34009cc4:	f57f ad78 	bpl.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009cc8:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009ccc:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009cd0:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009cd4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009cd6:	e7a0      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34009cd8:	4a24      	ldr	r2, [pc, #144]	@ (34009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009cda:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009cde:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34009ce2:	2b02      	cmp	r3, #2
34009ce4:	d010      	beq.n	34009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
34009ce6:	2b03      	cmp	r3, #3
34009ce8:	d034      	beq.n	34009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
34009cea:	2b01      	cmp	r3, #1
34009cec:	d009      	beq.n	34009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009cee:	f7fb fa3f 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34009cf2:	f7fb fb45 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34009cf6:	4b1d      	ldr	r3, [pc, #116]	@ (34009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009cf8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34009cfc:	f3c3 1303 	ubfx	r3, r3, #4, #4
34009d00:	e708      	b.n	34009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009d02:	f7fe fc8f 	bl	34008624 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34009d06:	e7f6      	b.n	34009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34009d08:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009d0c:	04d9      	lsls	r1, r3, #19
34009d0e:	d516      	bpl.n	34009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009d10:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009d14:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009d18:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009d1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC13_GetSource())
34009d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009d24:	f100 0401 	add.w	r4, r0, #1
34009d28:	d00e      	beq.n	34009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
34009d2a:	d805      	bhi.n	34009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
34009d2c:	b94b      	cbnz	r3, 34009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009d2e:	f7fe fb79 	bl	34008424 <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34009d32:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009d36:	e7de      	b.n	34009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        switch (LL_RCC_IC13_GetSource())
34009d38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009d3c:	d007      	beq.n	34009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
        eth1ptp_frequency = HSE_VALUE;
34009d3e:	2000      	movs	r0, #0
34009d40:	e7d9      	b.n	34009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009d42:	f7fe fbaf 	bl	340084a4 <HAL_RCCEx_GetPLL2CLKFreq>
34009d46:	e7f4      	b.n	34009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009d48:	f7fe fbec 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34009d4c:	e7f1      	b.n	34009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009d4e:	f7fe fc29 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
34009d52:	e7ee      	b.n	34009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
      if (LL_RCC_HSE_IsReady() != 0U)
34009d54:	f7fb fa7a 	bl	3400524c <LL_RCC_HSE_IsReady>
34009d58:	2800      	cmp	r0, #0
34009d5a:	d0f0      	beq.n	34009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        eth1ptp_frequency = HSE_VALUE;
34009d5c:	4807      	ldr	r0, [pc, #28]	@ (34009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009d5e:	e7ca      	b.n	34009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
34009d60:	01001014 	.word	0x01001014
34009d64:	03001414 	.word	0x03001414
34009d68:	03000814 	.word	0x03000814
34009d6c:	56028000 	.word	0x56028000
34009d70:	03d09000 	.word	0x03d09000
34009d74:	003d0900 	.word	0x003d0900
34009d78:	00bb8000 	.word	0x00bb8000
34009d7c:	02dc6c00 	.word	0x02dc6c00
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34009d80:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009d84:	035b      	lsls	r3, r3, #13
34009d86:	f57f ad17 	bpl.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009d8a:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009d8e:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009d92:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009d96:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009d98:	e73f      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34009d9a:	4ba7      	ldr	r3, [pc, #668]	@ (3400a038 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009d9c:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
34009da0:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009da4:	2a20      	cmp	r2, #32
34009da6:	d019      	beq.n	34009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
34009da8:	d808      	bhi.n	34009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
34009daa:	2a00      	cmp	r2, #0
34009dac:	f47f af78 	bne.w	34009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009db0:	f7fb f9de 	bl	34005170 <HAL_RCC_GetSysClockFreq>
}
34009db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009db8:	f7fb bae2 	b.w	34005380 <RCCEx_GetHCLKFreq>
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009dbc:	2a30      	cmp	r2, #48	@ 0x30
34009dbe:	f47f acfb 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009dc2:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009dc6:	0714      	lsls	r4, r2, #28
34009dc8:	f57f acf6 	bpl.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009dcc:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009dd0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009dd4:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009dd8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009dda:	e71e      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34009ddc:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009de0:	0755      	lsls	r5, r2, #29
34009de2:	f57f ace9 	bpl.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009de6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009dea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009dee:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009df2:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009df4:	e711      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34009df6:	4891      	ldr	r0, [pc, #580]	@ (3400a03c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
}
34009df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34009dfc:	f7ff bafa 	b.w	340093f4 <RCCEx_GetI2CCLKFreq>
34009e00:	488f      	ldr	r0, [pc, #572]	@ (3400a040 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34009e02:	e7f9      	b.n	34009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34009e04:	488f      	ldr	r0, [pc, #572]	@ (3400a044 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34009e06:	e7f7      	b.n	34009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34009e08:	488f      	ldr	r0, [pc, #572]	@ (3400a048 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
}
34009e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34009e0e:	f7ff b9ff 	b.w	34009210 <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34009e12:	488e      	ldr	r0, [pc, #568]	@ (3400a04c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
}
34009e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34009e18:	f7ff bbaa 	b.w	34009570 <RCCEx_GetLPTIMCLKFreq>
34009e1c:	488c      	ldr	r0, [pc, #560]	@ (3400a050 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009e1e:	e7f9      	b.n	34009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34009e20:	488c      	ldr	r0, [pc, #560]	@ (3400a054 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34009e22:	e7f7      	b.n	34009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34009e24:	488c      	ldr	r0, [pc, #560]	@ (3400a058 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34009e26:	e7f5      	b.n	34009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34009e28:	4a83      	ldr	r2, [pc, #524]	@ (3400a038 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009e2a:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34009e2e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34009e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009e36:	d031      	beq.n	34009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
34009e38:	d812      	bhi.n	34009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
34009e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009e3e:	f43f af2f 	beq.w	34009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
34009e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009e46:	d01d      	beq.n	34009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
34009e48:	2b00      	cmp	r3, #0
34009e4a:	f47f acb5 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009e4e:	f7fb f98f 	bl	34005170 <HAL_RCC_GetSysClockFreq>
34009e52:	f7fb fa95 	bl	34005380 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34009e56:	4b78      	ldr	r3, [pc, #480]	@ (3400a038 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009e5a:	f3c3 3302 	ubfx	r3, r3, #12, #3
34009e5e:	e4db      	b.n	34009818 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34009e60:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34009e64:	f43f aec5 	beq.w	34009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34009e68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34009e6c:	d02f      	beq.n	34009ece <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
34009e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
34009e72:	f47f aca1 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
34009e76:	f7fb fa01 	bl	3400527c <LL_RCC_LSE_IsReady>
34009e7a:	3800      	subs	r0, #0
34009e7c:	bf18      	it	ne
34009e7e:	2001      	movne	r0, #1
34009e80:	03c0      	lsls	r0, r0, #15
34009e82:	e6b5      	b.n	34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34009e84:	f7fb fa46 	bl	34005314 <LL_RCC_IC9_IsEnabled>
34009e88:	2800      	cmp	r0, #0
34009e8a:	f43f ac95 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
34009e8e:	f7fb fa49 	bl	34005324 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34009e92:	4b69      	ldr	r3, [pc, #420]	@ (3400a038 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009e94:	4604      	mov	r4, r0
34009e96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34009e9a:	e6be      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34009e9c:	f7fb fa4c 	bl	34005338 <LL_RCC_IC14_IsEnabled>
34009ea0:	2800      	cmp	r0, #0
34009ea2:	f43f ac89 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
34009ea6:	f7fb fa4f 	bl	34005348 <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34009eaa:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34009eae:	4604      	mov	r4, r0
34009eb0:	e6b3      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34009eb2:	4d61      	ldr	r5, [pc, #388]	@ (3400a038 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009eb4:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
34009eb8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34009ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34009ec0:	d010      	beq.n	34009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
34009ec2:	f67f aec0 	bls.w	34009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
34009ec6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34009eca:	f47f ac75 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009ece:	f7fb f9c5 	bl	3400525c <LL_RCC_HSI_IsReady>
34009ed2:	2800      	cmp	r0, #0
34009ed4:	f43f ac70 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009ed8:	4b57      	ldr	r3, [pc, #348]	@ (3400a038 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009edc:	485f      	ldr	r0, [pc, #380]	@ (3400a05c <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34009ede:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009ee2:	e499      	b.n	34009818 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34009ee4:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009ee8:	0418      	lsls	r0, r3, #16
34009eea:	f57f ac65 	bpl.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009eee:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009ef2:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009ef6:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009efa:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009efc:	e68d      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009efe:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34009f02:	f000 8096 	beq.w	3400a032 <HAL_RCCEx_GetPeriphCLKFreq+0x902>
34009f06:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34009f0a:	d00d      	beq.n	34009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
34009f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34009f10:	e6a4      	b.n	34009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34009f12:	f7fb f9db 	bl	340052cc <LL_RCC_IC7_IsEnabled>
34009f16:	2800      	cmp	r0, #0
34009f18:	f43f ac4e 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
34009f1c:	f7fb f9de 	bl	340052dc <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009f20:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
34009f24:	4604      	mov	r4, r0
34009f26:	e678      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009f28:	f7fb f922 	bl	34005170 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009f2c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009f2e:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009f32:	e471      	b.n	34009818 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34009f34:	4a40      	ldr	r2, [pc, #256]	@ (3400a038 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009f36:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009f3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009f3e:	2b20      	cmp	r3, #32
34009f40:	d00b      	beq.n	34009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
34009f42:	f67f aeaa 	bls.w	34009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34009f46:	2b30      	cmp	r3, #48	@ 0x30
34009f48:	f47f ac36 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009f4c:	f7fb f986 	bl	3400525c <LL_RCC_HSI_IsReady>
34009f50:	2800      	cmp	r0, #0
34009f52:	f43f ac31 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009f56:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34009f58:	e7c0      	b.n	34009edc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34009f5a:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009f5e:	0319      	lsls	r1, r3, #12
34009f60:	f57f ac2a 	bpl.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009f64:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009f68:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009f6c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009f70:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009f72:	e652      	b.n	34009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        switch (LL_RCC_IC20_GetSource())
34009f74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009f78:	f47f ac1e 	bne.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009f7c:	f7fe fb12 	bl	340085a4 <HAL_RCCEx_GetPLL4CLKFreq>
34009f80:	e634      	b.n	34009bec <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009f82:	f7fe facf 	bl	34008524 <HAL_RCCEx_GetPLL3CLKFreq>
34009f86:	e631      	b.n	34009bec <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34009f88:	4a2b      	ldr	r2, [pc, #172]	@ (3400a038 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009f8a:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
34009f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009f96:	d005      	beq.n	34009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
34009f98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009f9c:	d009      	beq.n	34009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
34009f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009fa2:	e766      	b.n	34009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34009fa4:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34009fa6:	07db      	lsls	r3, r3, #31
34009fa8:	f57f ac06 	bpl.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
34009fac:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
34009fb0:	e61e      	b.n	34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_HSE_IsReady() != 0U)
34009fb2:	f7fb f94b 	bl	3400524c <LL_RCC_HSE_IsReady>
34009fb6:	2800      	cmp	r0, #0
34009fb8:	f43f abfe 	beq.w	340097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009fbc:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
34009fc0:	4827      	ldr	r0, [pc, #156]	@ (3400a060 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009fc2:	f3c3 3305 	ubfx	r3, r3, #12, #6
34009fc6:	3301      	adds	r3, #1
34009fc8:	e5a5      	b.n	34009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34009fca:	4826      	ldr	r0, [pc, #152]	@ (3400a064 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34009fcc:	e49e      	b.n	3400990c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34009fce:	4826      	ldr	r0, [pc, #152]	@ (3400a068 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
34009fd0:	e4ce      	b.n	34009970 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
34009fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34009fd6:	f7fe bbab 	b.w	34008730 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34009fda:	4824      	ldr	r0, [pc, #144]	@ (3400a06c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
}
34009fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009fe0:	f7fe bf30 	b.w	34008e44 <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34009fe4:	4822      	ldr	r0, [pc, #136]	@ (3400a070 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
34009fe6:	e7f9      	b.n	34009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34009fe8:	4822      	ldr	r0, [pc, #136]	@ (3400a074 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
34009fea:	e7f7      	b.n	34009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009fec:	4822      	ldr	r0, [pc, #136]	@ (3400a078 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
34009fee:	e7f5      	b.n	34009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34009ff0:	4822      	ldr	r0, [pc, #136]	@ (3400a07c <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
}
34009ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34009ff6:	f7fe bd0d 	b.w	34008a14 <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34009ffa:	4821      	ldr	r0, [pc, #132]	@ (3400a080 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
34009ffc:	e7f9      	b.n	34009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34009ffe:	4821      	ldr	r0, [pc, #132]	@ (3400a084 <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
3400a000:	e7f7      	b.n	34009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
3400a002:	4821      	ldr	r0, [pc, #132]	@ (3400a088 <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
3400a004:	e4ed      	b.n	340099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
3400a006:	4821      	ldr	r0, [pc, #132]	@ (3400a08c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
3400a008:	e4eb      	b.n	340099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
3400a00a:	4821      	ldr	r0, [pc, #132]	@ (3400a090 <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
3400a00c:	e4e9      	b.n	340099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3400a00e:	4821      	ldr	r0, [pc, #132]	@ (3400a094 <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
3400a010:	e4e7      	b.n	340099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
3400a012:	4821      	ldr	r0, [pc, #132]	@ (3400a098 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
3400a014:	e7ed      	b.n	34009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3400a016:	4821      	ldr	r0, [pc, #132]	@ (3400a09c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
}
3400a018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3400a01c:	f7fe bc62 	b.w	340088e4 <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3400a020:	481f      	ldr	r0, [pc, #124]	@ (3400a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
3400a022:	e534      	b.n	34009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
3400a024:	481f      	ldr	r0, [pc, #124]	@ (3400a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
}
3400a026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3400a02a:	f7fe bbe1 	b.w	340087f0 <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
3400a02e:	481e      	ldr	r0, [pc, #120]	@ (3400a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
3400a030:	e7f9      	b.n	3400a026 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3400a032:	481e      	ldr	r0, [pc, #120]	@ (3400a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
3400a034:	e5dc      	b.n	34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
3400a036:	bf00      	nop
3400a038:	56028000 	.word	0x56028000
3400a03c:	0700000c 	.word	0x0700000c
3400a040:	0700040c 	.word	0x0700040c
3400a044:	0700080c 	.word	0x0700080c
3400a048:	0700100c 	.word	0x0700100c
3400a04c:	0700082c 	.word	0x0700082c
3400a050:	07000c2c 	.word	0x07000c2c
3400a054:	0700102c 	.word	0x0700102c
3400a058:	0700142c 	.word	0x0700142c
3400a05c:	03d09000 	.word	0x03d09000
3400a060:	02dc6c00 	.word	0x02dc6c00
3400a064:	07001818 	.word	0x07001818
3400a068:	0300041c 	.word	0x0300041c
3400a06c:	07000420 	.word	0x07000420
3400a070:	07000820 	.word	0x07000820
3400a074:	07001020 	.word	0x07001020
3400a078:	07001820 	.word	0x07001820
3400a07c:	07000030 	.word	0x07000030
3400a080:	07000430 	.word	0x07000430
3400a084:	07000830 	.word	0x07000830
3400a088:	07001030 	.word	0x07001030
3400a08c:	07001830 	.word	0x07001830
3400a090:	07001c30 	.word	0x07001c30
3400a094:	07000034 	.word	0x07000034
3400a098:	07000434 	.word	0x07000434
3400a09c:	03000c14 	.word	0x03000c14
3400a0a0:	01001814 	.word	0x01001814
3400a0a4:	03000014 	.word	0x03000014
3400a0a8:	03000414 	.word	0x03000414
3400a0ac:	00bb8000 	.word	0x00bb8000

3400a0b0 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
3400a0b0:	b538      	push	{r3, r4, r5, lr}
3400a0b2:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
3400a0b4:	460d      	mov	r5, r1
3400a0b6:	b921      	cbnz	r1, 3400a0c2 <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
3400a0b8:	f240 1111 	movw	r1, #273	@ 0x111
3400a0bc:	4825      	ldr	r0, [pc, #148]	@ (3400a154 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a0be:	f7f7 f9c3 	bl	34001448 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
3400a0c2:	2c0c      	cmp	r4, #12
3400a0c4:	d904      	bls.n	3400a0d0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
3400a0c6:	f44f 7189 	mov.w	r1, #274	@ 0x112
3400a0ca:	4822      	ldr	r0, [pc, #136]	@ (3400a154 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a0cc:	f7f7 f9bc 	bl	34001448 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3400a0d0:	682b      	ldr	r3, [r5, #0]
3400a0d2:	2b20      	cmp	r3, #32
3400a0d4:	d838      	bhi.n	3400a148 <HAL_RIF_RIMC_ConfigMasterAttributes+0x98>
3400a0d6:	2b03      	cmp	r3, #3
3400a0d8:	d82a      	bhi.n	3400a130 <HAL_RIF_RIMC_ConfigMasterAttributes+0x80>
3400a0da:	3b01      	subs	r3, #1
3400a0dc:	2b01      	cmp	r3, #1
3400a0de:	d82d      	bhi.n	3400a13c <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
3400a0e0:	682b      	ldr	r3, [r5, #0]
3400a0e2:	2b80      	cmp	r3, #128	@ 0x80
3400a0e4:	d001      	beq.n	3400a0ea <HAL_RIF_RIMC_ConfigMasterAttributes+0x3a>
3400a0e6:	2bff      	cmp	r3, #255	@ 0xff
3400a0e8:	d904      	bls.n	3400a0f4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x44>
3400a0ea:	f44f 718a 	mov.w	r1, #276	@ 0x114
3400a0ee:	4819      	ldr	r0, [pc, #100]	@ (3400a154 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a0f0:	f7f7 f9aa 	bl	34001448 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
3400a0f4:	686b      	ldr	r3, [r5, #4]
3400a0f6:	2b03      	cmp	r3, #3
3400a0f8:	d904      	bls.n	3400a104 <HAL_RIF_RIMC_ConfigMasterAttributes+0x54>
3400a0fa:	f240 1115 	movw	r1, #277	@ 0x115
3400a0fe:	4815      	ldr	r0, [pc, #84]	@ (3400a154 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a100:	f7f7 f9a2 	bl	34001448 <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3400a104:	682b      	ldr	r3, [r5, #0]
3400a106:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
3400a10a:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3400a10e:	00a0      	lsls	r0, r4, #2
3400a110:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3400a114:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3400a118:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3400a11c:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3400a11e:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3400a122:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3400a126:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3400a12a:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
3400a12e:	bd38      	pop	{r3, r4, r5, pc}
3400a130:	4a09      	ldr	r2, [pc, #36]	@ (3400a158 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa8>)
3400a132:	3b04      	subs	r3, #4
3400a134:	fa22 f303 	lsr.w	r3, r2, r3
3400a138:	07db      	lsls	r3, r3, #31
3400a13a:	d4d1      	bmi.n	3400a0e0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3400a13c:	f240 1113 	movw	r1, #275	@ 0x113
3400a140:	4804      	ldr	r0, [pc, #16]	@ (3400a154 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a142:	f7f7 f981 	bl	34001448 <assert_failed>
3400a146:	e7cb      	b.n	3400a0e0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3400a148:	2b40      	cmp	r3, #64	@ 0x40
3400a14a:	d0c9      	beq.n	3400a0e0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3400a14c:	2b80      	cmp	r3, #128	@ 0x80
3400a14e:	d1f5      	bne.n	3400a13c <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
3400a150:	e7c6      	b.n	3400a0e0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3400a152:	bf00      	nop
3400a154:	34010d06 	.word	0x34010d06
3400a158:	10001011 	.word	0x10001011

3400a15c <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3400a15c:	4b38      	ldr	r3, [pc, #224]	@ (3400a240 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
3400a15e:	b537      	push	{r0, r1, r2, r4, r5, lr}
3400a160:	4298      	cmp	r0, r3
3400a162:	4604      	mov	r4, r0
3400a164:	460d      	mov	r5, r1
3400a166:	d85c      	bhi.n	3400a222 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
3400a168:	3b1e      	subs	r3, #30
3400a16a:	4298      	cmp	r0, r3
3400a16c:	d83b      	bhi.n	3400a1e6 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
3400a16e:	4b35      	ldr	r3, [pc, #212]	@ (3400a244 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
3400a170:	4298      	cmp	r0, r3
3400a172:	d84b      	bhi.n	3400a20c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
3400a174:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
3400a178:	d23a      	bcs.n	3400a1f0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
3400a17a:	4b33      	ldr	r3, [pc, #204]	@ (3400a248 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
3400a17c:	4298      	cmp	r0, r3
3400a17e:	d840      	bhi.n	3400a202 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
3400a180:	1fc2      	subs	r2, r0, #7
3400a182:	3b22      	subs	r3, #34	@ 0x22
3400a184:	429a      	cmp	r2, r3
3400a186:	d937      	bls.n	3400a1f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
3400a188:	2d03      	cmp	r5, #3
3400a18a:	d904      	bls.n	3400a196 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
3400a18c:	f44f 71ba 	mov.w	r1, #372	@ 0x174
3400a190:	482e      	ldr	r0, [pc, #184]	@ (3400a24c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3400a192:	f7f7 f959 	bl	34001448 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a196:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a198:	0f20      	lsrs	r0, r4, #28
3400a19a:	0080      	lsls	r0, r0, #2
3400a19c:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3400a1a0:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3400a1a4:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a1a6:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a1aa:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a1ac:	9b01      	ldr	r3, [sp, #4]
3400a1ae:	40a2      	lsls	r2, r4
3400a1b0:	ea23 0302 	bic.w	r3, r3, r2
3400a1b4:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a1b6:	9901      	ldr	r1, [sp, #4]
3400a1b8:	f005 0301 	and.w	r3, r5, #1
3400a1bc:	40a3      	lsls	r3, r4
3400a1be:	430b      	orrs	r3, r1
3400a1c0:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a1c2:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a1c4:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a1c8:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a1ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a1cc:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a1ce:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a1d0:	9b01      	ldr	r3, [sp, #4]
3400a1d2:	ea23 0302 	bic.w	r3, r3, r2
3400a1d6:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a1d8:	9b01      	ldr	r3, [sp, #4]
3400a1da:	4319      	orrs	r1, r3
3400a1dc:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a1de:	9b01      	ldr	r3, [sp, #4]
3400a1e0:	6303      	str	r3, [r0, #48]	@ 0x30
}
3400a1e2:	b003      	add	sp, #12
3400a1e4:	bd30      	pop	{r4, r5, pc}
3400a1e6:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
3400a1ea:	4b19      	ldr	r3, [pc, #100]	@ (3400a250 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
3400a1ec:	3a02      	subs	r2, #2
3400a1ee:	e01d      	b.n	3400a22c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a1f0:	4b18      	ldr	r3, [pc, #96]	@ (3400a254 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
3400a1f2:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
3400a1f6:	e019      	b.n	3400a22c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a1f8:	f1a0 0308 	sub.w	r3, r0, #8
3400a1fc:	2b17      	cmp	r3, #23
3400a1fe:	d9c3      	bls.n	3400a188 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a200:	e017      	b.n	3400a232 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a202:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
3400a206:	3b1c      	subs	r3, #28
3400a208:	2b02      	cmp	r3, #2
3400a20a:	e7f8      	b.n	3400a1fe <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
3400a20c:	4b12      	ldr	r3, [pc, #72]	@ (3400a258 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
3400a20e:	4298      	cmp	r0, r3
3400a210:	d803      	bhi.n	3400a21a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
3400a212:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3400a216:	d2b7      	bcs.n	3400a188 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a218:	e00b      	b.n	3400a232 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a21a:	4b10      	ldr	r3, [pc, #64]	@ (3400a25c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
3400a21c:	4298      	cmp	r0, r3
3400a21e:	d0b3      	beq.n	3400a188 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a220:	e007      	b.n	3400a232 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a222:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
3400a226:	2a1e      	cmp	r2, #30
3400a228:	d803      	bhi.n	3400a232 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a22a:	4b0d      	ldr	r3, [pc, #52]	@ (3400a260 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
3400a22c:	40d3      	lsrs	r3, r2
3400a22e:	07db      	lsls	r3, r3, #31
3400a230:	d4aa      	bmi.n	3400a188 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3400a232:	f240 1173 	movw	r1, #371	@ 0x173
3400a236:	4805      	ldr	r0, [pc, #20]	@ (3400a24c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3400a238:	f7f7 f906 	bl	34001448 <assert_failed>
3400a23c:	e7a4      	b.n	3400a188 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a23e:	bf00      	nop
3400a240:	4000001f 	.word	0x4000001f
3400a244:	2000001e 	.word	0x2000001e
3400a248:	1000001a 	.word	0x1000001a
3400a24c:	34010d06 	.word	0x34010d06
3400a250:	2e838c0b 	.word	0x2e838c0b
3400a254:	77dff03b 	.word	0x77dff03b
3400a258:	30000008 	.word	0x30000008
3400a25c:	3000000a 	.word	0x3000000a
3400a260:	49deef7f 	.word	0x49deef7f

3400a264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3400a264:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a266:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a268:	e852 3f00 	ldrex	r3, [r2]
3400a26c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a270:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a274:	6802      	ldr	r2, [r0, #0]
3400a276:	2900      	cmp	r1, #0
3400a278:	d1f5      	bne.n	3400a266 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3400a27a:	4c0f      	ldr	r4, [pc, #60]	@ (3400a2b8 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a27c:	f102 0308 	add.w	r3, r2, #8
3400a280:	e853 3f00 	ldrex	r3, [r3]
3400a284:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a286:	f102 0c08 	add.w	ip, r2, #8
3400a28a:	e84c 3100 	strex	r1, r3, [ip]
3400a28e:	2900      	cmp	r1, #0
3400a290:	d1f4      	bne.n	3400a27c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3400a292:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
3400a294:	2b01      	cmp	r3, #1
3400a296:	d107      	bne.n	3400a2a8 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a298:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3400a29c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a2a0:	e842 3100 	strex	r1, r3, [r2]
3400a2a4:	2900      	cmp	r1, #0
3400a2a6:	d1f7      	bne.n	3400a298 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3400a2a8:	2320      	movs	r3, #32
3400a2aa:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a2ae:	2300      	movs	r3, #0
3400a2b0:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3400a2b2:	6743      	str	r3, [r0, #116]	@ 0x74
}
3400a2b4:	bd10      	pop	{r4, pc}
3400a2b6:	bf00      	nop
3400a2b8:	effffffe 	.word	0xeffffffe

3400a2bc <HAL_UART_MspInit>:
}
3400a2bc:	4770      	bx	lr
	...

3400a2c0 <UART_SetConfig>:
{
3400a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a2c2:	6842      	ldr	r2, [r0, #4]
3400a2c4:	4bb0      	ldr	r3, [pc, #704]	@ (3400a588 <UART_SetConfig+0x2c8>)
{
3400a2c6:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a2c8:	429a      	cmp	r2, r3
3400a2ca:	d904      	bls.n	3400a2d6 <UART_SetConfig+0x16>
3400a2cc:	f640 414f 	movw	r1, #3151	@ 0xc4f
3400a2d0:	48ae      	ldr	r0, [pc, #696]	@ (3400a58c <UART_SetConfig+0x2cc>)
3400a2d2:	f7f7 f8b9 	bl	34001448 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
3400a2d6:	68a3      	ldr	r3, [r4, #8]
3400a2d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a2dc:	d007      	beq.n	3400a2ee <UART_SetConfig+0x2e>
3400a2de:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a2e2:	d004      	beq.n	3400a2ee <UART_SetConfig+0x2e>
3400a2e4:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
3400a2e8:	48a8      	ldr	r0, [pc, #672]	@ (3400a58c <UART_SetConfig+0x2cc>)
3400a2ea:	f7f7 f8ad 	bl	34001448 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a2ee:	6822      	ldr	r2, [r4, #0]
3400a2f0:	49a7      	ldr	r1, [pc, #668]	@ (3400a590 <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a2f2:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
3400a2f4:	428a      	cmp	r2, r1
3400a2f6:	d004      	beq.n	3400a302 <UART_SetConfig+0x42>
3400a2f8:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3400a2fc:	428a      	cmp	r2, r1
3400a2fe:	f040 80af 	bne.w	3400a460 <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3400a302:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a306:	d004      	beq.n	3400a312 <UART_SetConfig+0x52>
3400a308:	f640 4153 	movw	r1, #3155	@ 0xc53
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a30c:	489f      	ldr	r0, [pc, #636]	@ (3400a58c <UART_SetConfig+0x2cc>)
3400a30e:	f7f7 f89b 	bl	34001448 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
3400a312:	6923      	ldr	r3, [r4, #16]
3400a314:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
3400a318:	d007      	beq.n	3400a32a <UART_SetConfig+0x6a>
3400a31a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400a31e:	d004      	beq.n	3400a32a <UART_SetConfig+0x6a>
3400a320:	f640 415b 	movw	r1, #3163	@ 0xc5b
3400a324:	4899      	ldr	r0, [pc, #612]	@ (3400a58c <UART_SetConfig+0x2cc>)
3400a326:	f7f7 f88f 	bl	34001448 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3400a32a:	6963      	ldr	r3, [r4, #20]
3400a32c:	f033 020c 	bics.w	r2, r3, #12
3400a330:	d100      	bne.n	3400a334 <UART_SetConfig+0x74>
3400a332:	b923      	cbnz	r3, 3400a33e <UART_SetConfig+0x7e>
3400a334:	f640 415c 	movw	r1, #3164	@ 0xc5c
3400a338:	4894      	ldr	r0, [pc, #592]	@ (3400a58c <UART_SetConfig+0x2cc>)
3400a33a:	f7f7 f885 	bl	34001448 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
3400a33e:	69a3      	ldr	r3, [r4, #24]
3400a340:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
3400a344:	d004      	beq.n	3400a350 <UART_SetConfig+0x90>
3400a346:	f640 415d 	movw	r1, #3165	@ 0xc5d
3400a34a:	4890      	ldr	r0, [pc, #576]	@ (3400a58c <UART_SetConfig+0x2cc>)
3400a34c:	f7f7 f87c 	bl	34001448 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
3400a350:	69e3      	ldr	r3, [r4, #28]
3400a352:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a356:	d004      	beq.n	3400a362 <UART_SetConfig+0xa2>
3400a358:	f640 415e 	movw	r1, #3166	@ 0xc5e
3400a35c:	488b      	ldr	r0, [pc, #556]	@ (3400a58c <UART_SetConfig+0x2cc>)
3400a35e:	f7f7 f873 	bl	34001448 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
3400a362:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a364:	2b0b      	cmp	r3, #11
3400a366:	d904      	bls.n	3400a372 <UART_SetConfig+0xb2>
3400a368:	f640 415f 	movw	r1, #3167	@ 0xc5f
3400a36c:	4887      	ldr	r0, [pc, #540]	@ (3400a58c <UART_SetConfig+0x2cc>)
3400a36e:	f7f7 f86b 	bl	34001448 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a372:	6921      	ldr	r1, [r4, #16]
3400a374:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a376:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a378:	430a      	orrs	r2, r1
3400a37a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a37c:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a37e:	69e5      	ldr	r5, [r4, #28]
3400a380:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a382:	4984      	ldr	r1, [pc, #528]	@ (3400a594 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a384:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a386:	4001      	ands	r1, r0
3400a388:	430a      	orrs	r2, r1
3400a38a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3400a38c:	685a      	ldr	r2, [r3, #4]
3400a38e:	68e1      	ldr	r1, [r4, #12]
3400a390:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
3400a394:	430a      	orrs	r2, r1
3400a396:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a398:	4a7d      	ldr	r2, [pc, #500]	@ (3400a590 <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3400a39a:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a39c:	4293      	cmp	r3, r2
3400a39e:	d005      	beq.n	3400a3ac <UART_SetConfig+0xec>
3400a3a0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a3a4:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
3400a3a6:	bf1c      	itt	ne
3400a3a8:	6a22      	ldrne	r2, [r4, #32]
3400a3aa:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3400a3ac:	689a      	ldr	r2, [r3, #8]
3400a3ae:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
3400a3b2:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
3400a3b6:	430a      	orrs	r2, r1
3400a3b8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3400a3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400a3bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a3be:	f022 020f 	bic.w	r2, r2, #15
3400a3c2:	430a      	orrs	r2, r1
3400a3c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a3c6:	4a74      	ldr	r2, [pc, #464]	@ (3400a598 <UART_SetConfig+0x2d8>)
3400a3c8:	4293      	cmp	r3, r2
3400a3ca:	d07a      	beq.n	3400a4c2 <UART_SetConfig+0x202>
3400a3cc:	4a73      	ldr	r2, [pc, #460]	@ (3400a59c <UART_SetConfig+0x2dc>)
3400a3ce:	4293      	cmp	r3, r2
3400a3d0:	f000 809c 	beq.w	3400a50c <UART_SetConfig+0x24c>
3400a3d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a3d8:	4293      	cmp	r3, r2
3400a3da:	f000 809b 	beq.w	3400a514 <UART_SetConfig+0x254>
3400a3de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a3e2:	4293      	cmp	r3, r2
3400a3e4:	f000 809a 	beq.w	3400a51c <UART_SetConfig+0x25c>
3400a3e8:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a3ec:	f000 809a 	beq.w	3400a524 <UART_SetConfig+0x264>
3400a3f0:	4a6b      	ldr	r2, [pc, #428]	@ (3400a5a0 <UART_SetConfig+0x2e0>)
3400a3f2:	4293      	cmp	r3, r2
3400a3f4:	f000 809a 	beq.w	3400a52c <UART_SetConfig+0x26c>
3400a3f8:	4a6a      	ldr	r2, [pc, #424]	@ (3400a5a4 <UART_SetConfig+0x2e4>)
3400a3fa:	4293      	cmp	r3, r2
3400a3fc:	f000 809a 	beq.w	3400a534 <UART_SetConfig+0x274>
3400a400:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a404:	4293      	cmp	r3, r2
3400a406:	f000 8099 	beq.w	3400a53c <UART_SetConfig+0x27c>
3400a40a:	4a67      	ldr	r2, [pc, #412]	@ (3400a5a8 <UART_SetConfig+0x2e8>)
3400a40c:	4293      	cmp	r3, r2
3400a40e:	f000 8099 	beq.w	3400a544 <UART_SetConfig+0x284>
3400a412:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a416:	4293      	cmp	r3, r2
3400a418:	f000 8098 	beq.w	3400a54c <UART_SetConfig+0x28c>
3400a41c:	4a5c      	ldr	r2, [pc, #368]	@ (3400a590 <UART_SetConfig+0x2d0>)
3400a41e:	4293      	cmp	r3, r2
3400a420:	d02e      	beq.n	3400a480 <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a422:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a426:	4293      	cmp	r3, r2
3400a428:	f04f 0000 	mov.w	r0, #0
3400a42c:	f04f 0100 	mov.w	r1, #0
3400a430:	d14a      	bne.n	3400a4c8 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a432:	f7ff f97d 	bl	34009730 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a436:	2800      	cmp	r0, #0
3400a438:	d041      	beq.n	3400a4be <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a43a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a43c:	4a5b      	ldr	r2, [pc, #364]	@ (3400a5ac <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a43e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a440:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a444:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a448:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a44c:	4299      	cmp	r1, r3
3400a44e:	d91b      	bls.n	3400a488 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
3400a450:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
3400a452:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
3400a456:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
3400a458:	2300      	movs	r3, #0
  huart->TxISR = NULL;
3400a45a:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
3400a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a460:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400a464:	d004      	beq.n	3400a470 <UART_SetConfig+0x1b0>
3400a466:	f640 4157 	movw	r1, #3159	@ 0xc57
3400a46a:	4848      	ldr	r0, [pc, #288]	@ (3400a58c <UART_SetConfig+0x2cc>)
3400a46c:	f7f6 ffec 	bl	34001448 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a470:	6a23      	ldr	r3, [r4, #32]
3400a472:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400a476:	f43f af4c 	beq.w	3400a312 <UART_SetConfig+0x52>
3400a47a:	f640 4158 	movw	r1, #3160	@ 0xc58
3400a47e:	e745      	b.n	3400a30c <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a480:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
3400a484:	2100      	movs	r1, #0
3400a486:	e7d4      	b.n	3400a432 <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a488:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
3400a48c:	d8e0      	bhi.n	3400a450 <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a48e:	2300      	movs	r3, #0
3400a490:	4619      	mov	r1, r3
3400a492:	f7f6 f985 	bl	340007a0 <__aeabi_uldivmod>
3400a496:	4606      	mov	r6, r0
3400a498:	460f      	mov	r7, r1
3400a49a:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
3400a49e:	0868      	lsrs	r0, r5, #1
3400a4a0:	1830      	adds	r0, r6, r0
3400a4a2:	462a      	mov	r2, r5
3400a4a4:	f04f 0300 	mov.w	r3, #0
3400a4a8:	f147 0100 	adc.w	r1, r7, #0
3400a4ac:	f7f6 f978 	bl	340007a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3400a4b0:	4b3f      	ldr	r3, [pc, #252]	@ (3400a5b0 <UART_SetConfig+0x2f0>)
3400a4b2:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
3400a4b6:	429a      	cmp	r2, r3
3400a4b8:	d8ca      	bhi.n	3400a450 <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
3400a4ba:	6823      	ldr	r3, [r4, #0]
3400a4bc:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
3400a4be:	2000      	movs	r0, #0
3400a4c0:	e7c7      	b.n	3400a452 <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a4c2:	2000      	movs	r0, #0
3400a4c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3400a4c8:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
3400a4cc:	d142      	bne.n	3400a554 <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a4ce:	f7ff f92f 	bl	34009730 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a4d2:	2800      	cmp	r0, #0
3400a4d4:	d0f3      	beq.n	3400a4be <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a4d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a4d8:	4b34      	ldr	r3, [pc, #208]	@ (3400a5ac <UART_SetConfig+0x2ec>)
3400a4da:	6862      	ldr	r2, [r4, #4]
3400a4dc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a4e0:	fbb0 f0f3 	udiv	r0, r0, r3
3400a4e4:	0853      	lsrs	r3, r2, #1
3400a4e6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
3400a4ea:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a4ee:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a4f2:	f1a3 0110 	sub.w	r1, r3, #16
3400a4f6:	4291      	cmp	r1, r2
3400a4f8:	d8aa      	bhi.n	3400a450 <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a4fa:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
3400a4fe:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a500:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3400a502:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
3400a506:	4313      	orrs	r3, r2
3400a508:	60cb      	str	r3, [r1, #12]
3400a50a:	e7d8      	b.n	3400a4be <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a50c:	2000      	movs	r0, #0
3400a50e:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400a512:	e7d9      	b.n	3400a4c8 <UART_SetConfig+0x208>
3400a514:	2000      	movs	r0, #0
3400a516:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3400a51a:	e7d5      	b.n	3400a4c8 <UART_SetConfig+0x208>
3400a51c:	2000      	movs	r0, #0
3400a51e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400a522:	e7d1      	b.n	3400a4c8 <UART_SetConfig+0x208>
3400a524:	2000      	movs	r0, #0
3400a526:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3400a52a:	e7cd      	b.n	3400a4c8 <UART_SetConfig+0x208>
3400a52c:	2000      	movs	r0, #0
3400a52e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3400a532:	e7c9      	b.n	3400a4c8 <UART_SetConfig+0x208>
3400a534:	2000      	movs	r0, #0
3400a536:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
3400a53a:	e7c5      	b.n	3400a4c8 <UART_SetConfig+0x208>
3400a53c:	2000      	movs	r0, #0
3400a53e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3400a542:	e7c1      	b.n	3400a4c8 <UART_SetConfig+0x208>
3400a544:	2000      	movs	r0, #0
3400a546:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
3400a54a:	e7bd      	b.n	3400a4c8 <UART_SetConfig+0x208>
3400a54c:	2000      	movs	r0, #0
3400a54e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3400a552:	e7b9      	b.n	3400a4c8 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a554:	f7ff f8ec 	bl	34009730 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a558:	2800      	cmp	r0, #0
3400a55a:	d0b0      	beq.n	3400a4be <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a55c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a55e:	4b13      	ldr	r3, [pc, #76]	@ (3400a5ac <UART_SetConfig+0x2ec>)
3400a560:	6862      	ldr	r2, [r4, #4]
3400a562:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a566:	fbb0 f3f3 	udiv	r3, r0, r3
3400a56a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
3400a56e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a572:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a576:	f1a3 0110 	sub.w	r1, r3, #16
3400a57a:	4291      	cmp	r1, r2
3400a57c:	f63f af68 	bhi.w	3400a450 <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
3400a580:	6822      	ldr	r2, [r4, #0]
3400a582:	60d3      	str	r3, [r2, #12]
3400a584:	e79b      	b.n	3400a4be <UART_SetConfig+0x1fe>
3400a586:	bf00      	nop
3400a588:	00bebc1f 	.word	0x00bebc1f
3400a58c:	34010dae 	.word	0x34010dae
3400a590:	56000c00 	.word	0x56000c00
3400a594:	cfff69f3 	.word	0xcfff69f3
3400a598:	52001000 	.word	0x52001000
3400a59c:	50004400 	.word	0x50004400
3400a5a0:	52001400 	.word	0x52001400
3400a5a4:	50007800 	.word	0x50007800
3400a5a8:	52001800 	.word	0x52001800
3400a5ac:	3401242e 	.word	0x3401242e
3400a5b0:	000ffcff 	.word	0x000ffcff

3400a5b4 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a5b4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
3400a5b6:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a5b8:	2bff      	cmp	r3, #255	@ 0xff
{
3400a5ba:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a5bc:	d904      	bls.n	3400a5c8 <UART_AdvFeatureConfig+0x14>
3400a5be:	f640 41e4 	movw	r1, #3300	@ 0xce4
3400a5c2:	487e      	ldr	r0, [pc, #504]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a5c4:	f7f6 ff40 	bl	34001448 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3400a5c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a5ca:	0718      	lsls	r0, r3, #28
3400a5cc:	d50f      	bpl.n	3400a5ee <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3400a5ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400a5d0:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a5d4:	d004      	beq.n	3400a5e0 <UART_AdvFeatureConfig+0x2c>
3400a5d6:	f640 41e9 	movw	r1, #3305	@ 0xce9
3400a5da:	4878      	ldr	r0, [pc, #480]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a5dc:	f7f6 ff34 	bl	34001448 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3400a5e0:	6822      	ldr	r2, [r4, #0]
3400a5e2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400a5e4:	6853      	ldr	r3, [r2, #4]
3400a5e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3400a5ea:	430b      	orrs	r3, r1
3400a5ec:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3400a5ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a5f0:	07d9      	lsls	r1, r3, #31
3400a5f2:	d50f      	bpl.n	3400a614 <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3400a5f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a5f6:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
3400a5fa:	d004      	beq.n	3400a606 <UART_AdvFeatureConfig+0x52>
3400a5fc:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
3400a600:	486e      	ldr	r0, [pc, #440]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a602:	f7f6 ff21 	bl	34001448 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3400a606:	6822      	ldr	r2, [r4, #0]
3400a608:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400a60a:	6853      	ldr	r3, [r2, #4]
3400a60c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3400a610:	430b      	orrs	r3, r1
3400a612:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3400a614:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a616:	079a      	lsls	r2, r3, #30
3400a618:	d50f      	bpl.n	3400a63a <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3400a61a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a61c:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3400a620:	d004      	beq.n	3400a62c <UART_AdvFeatureConfig+0x78>
3400a622:	f640 41f7 	movw	r1, #3319	@ 0xcf7
3400a626:	4865      	ldr	r0, [pc, #404]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a628:	f7f6 ff0e 	bl	34001448 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3400a62c:	6822      	ldr	r2, [r4, #0]
3400a62e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3400a630:	6853      	ldr	r3, [r2, #4]
3400a632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400a636:	430b      	orrs	r3, r1
3400a638:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3400a63a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a63c:	075b      	lsls	r3, r3, #29
3400a63e:	d50f      	bpl.n	3400a660 <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3400a640:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400a642:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
3400a646:	d004      	beq.n	3400a652 <UART_AdvFeatureConfig+0x9e>
3400a648:	f640 41fe 	movw	r1, #3326	@ 0xcfe
3400a64c:	485b      	ldr	r0, [pc, #364]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a64e:	f7f6 fefb 	bl	34001448 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3400a652:	6822      	ldr	r2, [r4, #0]
3400a654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400a656:	6853      	ldr	r3, [r2, #4]
3400a658:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
3400a65c:	430b      	orrs	r3, r1
3400a65e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3400a660:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a662:	06d8      	lsls	r0, r3, #27
3400a664:	d50f      	bpl.n	3400a686 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3400a666:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a668:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a66c:	d004      	beq.n	3400a678 <UART_AdvFeatureConfig+0xc4>
3400a66e:	f640 5105 	movw	r1, #3333	@ 0xd05
3400a672:	4852      	ldr	r0, [pc, #328]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a674:	f7f6 fee8 	bl	34001448 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3400a678:	6822      	ldr	r2, [r4, #0]
3400a67a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400a67c:	6893      	ldr	r3, [r2, #8]
3400a67e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400a682:	430b      	orrs	r3, r1
3400a684:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3400a686:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a688:	0699      	lsls	r1, r3, #26
3400a68a:	d50f      	bpl.n	3400a6ac <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3400a68c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400a68e:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a692:	d004      	beq.n	3400a69e <UART_AdvFeatureConfig+0xea>
3400a694:	f640 510d 	movw	r1, #3341	@ 0xd0d
3400a698:	4848      	ldr	r0, [pc, #288]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a69a:	f7f6 fed5 	bl	34001448 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3400a69e:	6822      	ldr	r2, [r4, #0]
3400a6a0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
3400a6a2:	6893      	ldr	r3, [r2, #8]
3400a6a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
3400a6a8:	430b      	orrs	r3, r1
3400a6aa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3400a6ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a6ae:	065a      	lsls	r2, r3, #25
3400a6b0:	d56f      	bpl.n	3400a792 <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3400a6b2:	6823      	ldr	r3, [r4, #0]
3400a6b4:	4a42      	ldr	r2, [pc, #264]	@ (3400a7c0 <UART_AdvFeatureConfig+0x20c>)
3400a6b6:	4293      	cmp	r3, r2
3400a6b8:	d047      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6ba:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6be:	4293      	cmp	r3, r2
3400a6c0:	d043      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6c2:	4a40      	ldr	r2, [pc, #256]	@ (3400a7c4 <UART_AdvFeatureConfig+0x210>)
3400a6c4:	4293      	cmp	r3, r2
3400a6c6:	d040      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6c8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6cc:	4293      	cmp	r3, r2
3400a6ce:	d03c      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6d0:	4a3d      	ldr	r2, [pc, #244]	@ (3400a7c8 <UART_AdvFeatureConfig+0x214>)
3400a6d2:	4293      	cmp	r3, r2
3400a6d4:	d039      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6d6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6da:	4293      	cmp	r3, r2
3400a6dc:	d035      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6de:	4a3b      	ldr	r2, [pc, #236]	@ (3400a7cc <UART_AdvFeatureConfig+0x218>)
3400a6e0:	4293      	cmp	r3, r2
3400a6e2:	d032      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6e4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6e8:	4293      	cmp	r3, r2
3400a6ea:	d02e      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6ec:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a6f0:	d02b      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a6f6:	4293      	cmp	r3, r2
3400a6f8:	d027      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a6fa:	4a35      	ldr	r2, [pc, #212]	@ (3400a7d0 <UART_AdvFeatureConfig+0x21c>)
3400a6fc:	4293      	cmp	r3, r2
3400a6fe:	d024      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a700:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a704:	4293      	cmp	r3, r2
3400a706:	d020      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a708:	4a32      	ldr	r2, [pc, #200]	@ (3400a7d4 <UART_AdvFeatureConfig+0x220>)
3400a70a:	4293      	cmp	r3, r2
3400a70c:	d01d      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a70e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a712:	4293      	cmp	r3, r2
3400a714:	d019      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a716:	4a30      	ldr	r2, [pc, #192]	@ (3400a7d8 <UART_AdvFeatureConfig+0x224>)
3400a718:	4293      	cmp	r3, r2
3400a71a:	d016      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a71c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a720:	4293      	cmp	r3, r2
3400a722:	d012      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a724:	4a2d      	ldr	r2, [pc, #180]	@ (3400a7dc <UART_AdvFeatureConfig+0x228>)
3400a726:	4293      	cmp	r3, r2
3400a728:	d00f      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a72a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a72e:	4293      	cmp	r3, r2
3400a730:	d00b      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a732:	4a2b      	ldr	r2, [pc, #172]	@ (3400a7e0 <UART_AdvFeatureConfig+0x22c>)
3400a734:	4293      	cmp	r3, r2
3400a736:	d008      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a738:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a73c:	4293      	cmp	r3, r2
3400a73e:	d004      	beq.n	3400a74a <UART_AdvFeatureConfig+0x196>
3400a740:	f640 5115 	movw	r1, #3349	@ 0xd15
3400a744:	481d      	ldr	r0, [pc, #116]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a746:	f7f6 fe7f 	bl	34001448 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3400a74a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400a74c:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
3400a750:	d004      	beq.n	3400a75c <UART_AdvFeatureConfig+0x1a8>
3400a752:	f640 5116 	movw	r1, #3350	@ 0xd16
3400a756:	4819      	ldr	r0, [pc, #100]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a758:	f7f6 fe76 	bl	34001448 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a75c:	6821      	ldr	r1, [r4, #0]
3400a75e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3400a760:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a762:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a766:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3400a76a:	ea43 0302 	orr.w	r3, r3, r2
3400a76e:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a770:	d10f      	bne.n	3400a792 <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3400a772:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400a774:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
3400a778:	d004      	beq.n	3400a784 <UART_AdvFeatureConfig+0x1d0>
3400a77a:	f640 511b 	movw	r1, #3355	@ 0xd1b
3400a77e:	480f      	ldr	r0, [pc, #60]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a780:	f7f6 fe62 	bl	34001448 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3400a784:	6822      	ldr	r2, [r4, #0]
3400a786:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3400a788:	6853      	ldr	r3, [r2, #4]
3400a78a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
3400a78e:	430b      	orrs	r3, r1
3400a790:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3400a792:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a794:	061b      	lsls	r3, r3, #24
3400a796:	d50f      	bpl.n	3400a7b8 <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3400a798:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400a79a:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400a79e:	d004      	beq.n	3400a7aa <UART_AdvFeatureConfig+0x1f6>
3400a7a0:	f640 5123 	movw	r1, #3363	@ 0xd23
3400a7a4:	4805      	ldr	r0, [pc, #20]	@ (3400a7bc <UART_AdvFeatureConfig+0x208>)
3400a7a6:	f7f6 fe4f 	bl	34001448 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3400a7aa:	6822      	ldr	r2, [r4, #0]
3400a7ac:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400a7ae:	6853      	ldr	r3, [r2, #4]
3400a7b0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
3400a7b4:	430b      	orrs	r3, r1
3400a7b6:	6053      	str	r3, [r2, #4]
}
3400a7b8:	bd10      	pop	{r4, pc}
3400a7ba:	bf00      	nop
3400a7bc:	34010dae 	.word	0x34010dae
3400a7c0:	52001000 	.word	0x52001000
3400a7c4:	50004400 	.word	0x50004400
3400a7c8:	50004800 	.word	0x50004800
3400a7cc:	50004c00 	.word	0x50004c00
3400a7d0:	52001400 	.word	0x52001400
3400a7d4:	50007800 	.word	0x50007800
3400a7d8:	50007c00 	.word	0x50007c00
3400a7dc:	52001800 	.word	0x52001800
3400a7e0:	52001c00 	.word	0x52001c00

3400a7e4 <UART_WaitOnFlagUntilTimeout>:
{
3400a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400a7e8:	4604      	mov	r4, r0
3400a7ea:	460d      	mov	r5, r1
3400a7ec:	4617      	mov	r7, r2
3400a7ee:	4698      	mov	r8, r3
3400a7f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3400a7f4:	6822      	ldr	r2, [r4, #0]
3400a7f6:	69d3      	ldr	r3, [r2, #28]
3400a7f8:	ea35 0303 	bics.w	r3, r5, r3
3400a7fc:	bf0c      	ite	eq
3400a7fe:	2301      	moveq	r3, #1
3400a800:	2300      	movne	r3, #0
3400a802:	42bb      	cmp	r3, r7
3400a804:	d001      	beq.n	3400a80a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
3400a806:	2000      	movs	r0, #0
3400a808:	e022      	b.n	3400a850 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
3400a80a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
3400a80e:	d0f2      	beq.n	3400a7f6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400a810:	f7f7 fe90 	bl	34002534 <HAL_GetTick>
3400a814:	eba0 0008 	sub.w	r0, r0, r8
3400a818:	4548      	cmp	r0, r9
3400a81a:	d829      	bhi.n	3400a870 <UART_WaitOnFlagUntilTimeout+0x8c>
3400a81c:	f1b9 0f00 	cmp.w	r9, #0
3400a820:	d026      	beq.n	3400a870 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3400a822:	6821      	ldr	r1, [r4, #0]
3400a824:	680b      	ldr	r3, [r1, #0]
3400a826:	075a      	lsls	r2, r3, #29
3400a828:	d5e4      	bpl.n	3400a7f4 <UART_WaitOnFlagUntilTimeout+0x10>
3400a82a:	2d80      	cmp	r5, #128	@ 0x80
3400a82c:	d0e2      	beq.n	3400a7f4 <UART_WaitOnFlagUntilTimeout+0x10>
3400a82e:	2d40      	cmp	r5, #64	@ 0x40
3400a830:	d0e0      	beq.n	3400a7f4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3400a832:	69ce      	ldr	r6, [r1, #28]
3400a834:	f016 0608 	ands.w	r6, r6, #8
3400a838:	d00c      	beq.n	3400a854 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a83a:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
3400a83c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a83e:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3400a840:	f7ff fd10 	bl	3400a264 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
3400a844:	2300      	movs	r3, #0
          return HAL_ERROR;
3400a846:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
3400a848:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
3400a84c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3400a854:	69cb      	ldr	r3, [r1, #28]
3400a856:	051b      	lsls	r3, r3, #20
3400a858:	d5cc      	bpl.n	3400a7f4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a85a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
3400a85e:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a860:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
3400a862:	f7ff fcff 	bl	3400a264 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a866:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
3400a868:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a86c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
3400a870:	2003      	movs	r0, #3
3400a872:	e7ed      	b.n	3400a850 <UART_WaitOnFlagUntilTimeout+0x6c>

3400a874 <HAL_UART_Transmit>:
{
3400a874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400a878:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
3400a87a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
3400a87e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
3400a880:	2b20      	cmp	r3, #32
{
3400a882:	460d      	mov	r5, r1
3400a884:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
3400a886:	d148      	bne.n	3400a91a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
3400a888:	2900      	cmp	r1, #0
3400a88a:	d048      	beq.n	3400a91e <HAL_UART_Transmit+0xaa>
3400a88c:	2a00      	cmp	r2, #0
3400a88e:	d046      	beq.n	3400a91e <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a890:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a892:	f04f 0900 	mov.w	r9, #0
3400a896:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a89a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
3400a89e:	f7f7 fe49 	bl	34002534 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a8a2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
3400a8a4:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a8a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
3400a8ac:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
3400a8b0:	4607      	mov	r7, r0
      pdata16bits = NULL;
3400a8b2:	464e      	mov	r6, r9
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a8b4:	d103      	bne.n	3400a8be <HAL_UART_Transmit+0x4a>
3400a8b6:	6923      	ldr	r3, [r4, #16]
3400a8b8:	b90b      	cbnz	r3, 3400a8be <HAL_UART_Transmit+0x4a>
      pdata16bits = (const uint16_t *) pData;
3400a8ba:	462e      	mov	r6, r5
      pdata8bits  = NULL;
3400a8bc:	461d      	mov	r5, r3
    while (huart->TxXferCount > 0U)
3400a8be:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a8c2:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
3400a8c4:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a8c6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
3400a8ca:	b942      	cbnz	r2, 3400a8de <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3400a8cc:	2140      	movs	r1, #64	@ 0x40
3400a8ce:	4620      	mov	r0, r4
3400a8d0:	f7ff ff88 	bl	3400a7e4 <UART_WaitOnFlagUntilTimeout>
3400a8d4:	2320      	movs	r3, #32
3400a8d6:	b948      	cbnz	r0, 3400a8ec <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
3400a8d8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
3400a8dc:	e009      	b.n	3400a8f2 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a8de:	2200      	movs	r2, #0
3400a8e0:	2180      	movs	r1, #128	@ 0x80
3400a8e2:	4620      	mov	r0, r4
3400a8e4:	f7ff ff7e 	bl	3400a7e4 <UART_WaitOnFlagUntilTimeout>
3400a8e8:	b130      	cbz	r0, 3400a8f8 <HAL_UART_Transmit+0x84>
        huart->gState = HAL_UART_STATE_READY;
3400a8ea:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
3400a8ec:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
3400a8ee:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
3400a8f2:	b003      	add	sp, #12
3400a8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a8f8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
3400a8fa:	b95d      	cbnz	r5, 3400a914 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a8fc:	f836 3b02 	ldrh.w	r3, [r6], #2
3400a900:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a904:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
3400a906:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
3400a90a:	3a01      	subs	r2, #1
3400a90c:	b292      	uxth	r2, r2
3400a90e:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
3400a912:	e7d4      	b.n	3400a8be <HAL_UART_Transmit+0x4a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a914:	f815 3b01 	ldrb.w	r3, [r5], #1
3400a918:	e7f4      	b.n	3400a904 <HAL_UART_Transmit+0x90>
    return HAL_BUSY;
3400a91a:	2002      	movs	r0, #2
3400a91c:	e7e9      	b.n	3400a8f2 <HAL_UART_Transmit+0x7e>
      return  HAL_ERROR;
3400a91e:	2001      	movs	r0, #1
3400a920:	e7e7      	b.n	3400a8f2 <HAL_UART_Transmit+0x7e>

3400a922 <UART_CheckIdleState>:
{
3400a922:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a924:	2600      	movs	r6, #0
{
3400a926:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a928:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
3400a92c:	f7f7 fe02 	bl	34002534 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a930:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
3400a932:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a934:	681b      	ldr	r3, [r3, #0]
3400a936:	071a      	lsls	r2, r3, #28
3400a938:	d51c      	bpl.n	3400a974 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a93a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a93e:	4632      	mov	r2, r6
3400a940:	9300      	str	r3, [sp, #0]
3400a942:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400a946:	4603      	mov	r3, r0
3400a948:	4620      	mov	r0, r4
3400a94a:	f7ff ff4b 	bl	3400a7e4 <UART_WaitOnFlagUntilTimeout>
3400a94e:	b188      	cbz	r0, 3400a974 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3400a950:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a952:	e852 3f00 	ldrex	r3, [r2]
3400a956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a95a:	e842 3100 	strex	r1, r3, [r2]
3400a95e:	2900      	cmp	r1, #0
3400a960:	d1f6      	bne.n	3400a950 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
3400a962:	2320      	movs	r3, #32
3400a964:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
3400a968:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
3400a96a:	2300      	movs	r3, #0
3400a96c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a970:	b002      	add	sp, #8
3400a972:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3400a974:	6823      	ldr	r3, [r4, #0]
3400a976:	681b      	ldr	r3, [r3, #0]
3400a978:	075b      	lsls	r3, r3, #29
3400a97a:	d524      	bpl.n	3400a9c6 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a97c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a980:	2200      	movs	r2, #0
3400a982:	9300      	str	r3, [sp, #0]
3400a984:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400a988:	462b      	mov	r3, r5
3400a98a:	4620      	mov	r0, r4
3400a98c:	f7ff ff2a 	bl	3400a7e4 <UART_WaitOnFlagUntilTimeout>
3400a990:	b1c8      	cbz	r0, 3400a9c6 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a992:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a994:	e852 3f00 	ldrex	r3, [r2]
3400a998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a99c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a9a0:	6822      	ldr	r2, [r4, #0]
3400a9a2:	2900      	cmp	r1, #0
3400a9a4:	d1f5      	bne.n	3400a992 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a9a6:	f102 0308 	add.w	r3, r2, #8
3400a9aa:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3400a9ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a9b2:	f102 0008 	add.w	r0, r2, #8
3400a9b6:	e840 3100 	strex	r1, r3, [r0]
3400a9ba:	2900      	cmp	r1, #0
3400a9bc:	d1f3      	bne.n	3400a9a6 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3400a9be:	2320      	movs	r3, #32
3400a9c0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
3400a9c4:	e7d0      	b.n	3400a968 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
3400a9c6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a9c8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
3400a9ca:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3400a9ce:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a9d2:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3400a9d4:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
3400a9d6:	e7c8      	b.n	3400a96a <UART_CheckIdleState+0x48>

3400a9d8 <HAL_UART_Init>:
{
3400a9d8:	b510      	push	{r4, lr}
  if (huart == NULL)
3400a9da:	4604      	mov	r4, r0
3400a9dc:	2800      	cmp	r0, #0
3400a9de:	f000 80d0 	beq.w	3400ab82 <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a9e2:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a9e4:	6803      	ldr	r3, [r0, #0]
3400a9e6:	4a68      	ldr	r2, [pc, #416]	@ (3400ab88 <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a9e8:	2900      	cmp	r1, #0
3400a9ea:	d07c      	beq.n	3400aae6 <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a9ec:	4293      	cmp	r3, r2
3400a9ee:	d04e      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400a9f0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9f4:	4293      	cmp	r3, r2
3400a9f6:	d04a      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400a9f8:	4a64      	ldr	r2, [pc, #400]	@ (3400ab8c <HAL_UART_Init+0x1b4>)
3400a9fa:	4293      	cmp	r3, r2
3400a9fc:	d047      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400a9fe:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa02:	4293      	cmp	r3, r2
3400aa04:	d043      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa06:	4a62      	ldr	r2, [pc, #392]	@ (3400ab90 <HAL_UART_Init+0x1b8>)
3400aa08:	4293      	cmp	r3, r2
3400aa0a:	d040      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa0c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa10:	4293      	cmp	r3, r2
3400aa12:	d03c      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa14:	4a5f      	ldr	r2, [pc, #380]	@ (3400ab94 <HAL_UART_Init+0x1bc>)
3400aa16:	4293      	cmp	r3, r2
3400aa18:	d039      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa1a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa1e:	4293      	cmp	r3, r2
3400aa20:	d035      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa22:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400aa26:	d032      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400aa2c:	4293      	cmp	r3, r2
3400aa2e:	d02e      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa30:	4a59      	ldr	r2, [pc, #356]	@ (3400ab98 <HAL_UART_Init+0x1c0>)
3400aa32:	4293      	cmp	r3, r2
3400aa34:	d02b      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa36:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa3a:	4293      	cmp	r3, r2
3400aa3c:	d027      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa3e:	4a57      	ldr	r2, [pc, #348]	@ (3400ab9c <HAL_UART_Init+0x1c4>)
3400aa40:	4293      	cmp	r3, r2
3400aa42:	d024      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa44:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa48:	4293      	cmp	r3, r2
3400aa4a:	d020      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa4c:	4a54      	ldr	r2, [pc, #336]	@ (3400aba0 <HAL_UART_Init+0x1c8>)
3400aa4e:	4293      	cmp	r3, r2
3400aa50:	d01d      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa52:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa56:	4293      	cmp	r3, r2
3400aa58:	d019      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa5a:	4a52      	ldr	r2, [pc, #328]	@ (3400aba4 <HAL_UART_Init+0x1cc>)
3400aa5c:	4293      	cmp	r3, r2
3400aa5e:	d016      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa60:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa64:	4293      	cmp	r3, r2
3400aa66:	d012      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa68:	4a4f      	ldr	r2, [pc, #316]	@ (3400aba8 <HAL_UART_Init+0x1d0>)
3400aa6a:	4293      	cmp	r3, r2
3400aa6c:	d00f      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa6e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa72:	4293      	cmp	r3, r2
3400aa74:	d00b      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa76:	4a4d      	ldr	r2, [pc, #308]	@ (3400abac <HAL_UART_Init+0x1d4>)
3400aa78:	4293      	cmp	r3, r2
3400aa7a:	d008      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa7c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa80:	4293      	cmp	r3, r2
3400aa82:	d004      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aa84:	f240 113f 	movw	r1, #319	@ 0x13f
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400aa88:	4849      	ldr	r0, [pc, #292]	@ (3400abb0 <HAL_UART_Init+0x1d8>)
3400aa8a:	f7f6 fcdd 	bl	34001448 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3400aa8e:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3400aa92:	b923      	cbnz	r3, 3400aa9e <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
3400aa94:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
3400aa96:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3400aa9a:	f7ff fc0f 	bl	3400a2bc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3400aa9e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
3400aaa0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3400aaa2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
3400aaa6:	6813      	ldr	r3, [r2, #0]
3400aaa8:	f023 0301 	bic.w	r3, r3, #1
3400aaac:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3400aaae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400aab0:	b113      	cbz	r3, 3400aab8 <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
3400aab2:	4620      	mov	r0, r4
3400aab4:	f7ff fd7e 	bl	3400a5b4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
3400aab8:	4620      	mov	r0, r4
3400aaba:	f7ff fc01 	bl	3400a2c0 <UART_SetConfig>
3400aabe:	2801      	cmp	r0, #1
3400aac0:	d05f      	beq.n	3400ab82 <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400aac2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
3400aac4:	4620      	mov	r0, r4
}
3400aac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400aaca:	685a      	ldr	r2, [r3, #4]
3400aacc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3400aad0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3400aad2:	689a      	ldr	r2, [r3, #8]
3400aad4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3400aad8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3400aada:	681a      	ldr	r2, [r3, #0]
3400aadc:	f042 0201 	orr.w	r2, r2, #1
3400aae0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
3400aae2:	f7ff bf1e 	b.w	3400a922 <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400aae6:	4293      	cmp	r3, r2
3400aae8:	d0d1      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aaea:	4a32      	ldr	r2, [pc, #200]	@ (3400abb4 <HAL_UART_Init+0x1dc>)
3400aaec:	4293      	cmp	r3, r2
3400aaee:	d0ce      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aaf0:	4a26      	ldr	r2, [pc, #152]	@ (3400ab8c <HAL_UART_Init+0x1b4>)
3400aaf2:	4293      	cmp	r3, r2
3400aaf4:	d0cb      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aaf6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aafa:	4293      	cmp	r3, r2
3400aafc:	d0c7      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400aafe:	4a24      	ldr	r2, [pc, #144]	@ (3400ab90 <HAL_UART_Init+0x1b8>)
3400ab00:	4293      	cmp	r3, r2
3400ab02:	d0c4      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab04:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab08:	4293      	cmp	r3, r2
3400ab0a:	d0c0      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab0c:	4a21      	ldr	r2, [pc, #132]	@ (3400ab94 <HAL_UART_Init+0x1bc>)
3400ab0e:	4293      	cmp	r3, r2
3400ab10:	d0bd      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab12:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab16:	4293      	cmp	r3, r2
3400ab18:	d0b9      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab1a:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400ab1e:	d0b6      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400ab24:	4293      	cmp	r3, r2
3400ab26:	d0b2      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab28:	4a1b      	ldr	r2, [pc, #108]	@ (3400ab98 <HAL_UART_Init+0x1c0>)
3400ab2a:	4293      	cmp	r3, r2
3400ab2c:	d0af      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab2e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab32:	4293      	cmp	r3, r2
3400ab34:	d0ab      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab36:	4a19      	ldr	r2, [pc, #100]	@ (3400ab9c <HAL_UART_Init+0x1c4>)
3400ab38:	4293      	cmp	r3, r2
3400ab3a:	d0a8      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab3c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab40:	4293      	cmp	r3, r2
3400ab42:	d0a4      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab44:	4a16      	ldr	r2, [pc, #88]	@ (3400aba0 <HAL_UART_Init+0x1c8>)
3400ab46:	4293      	cmp	r3, r2
3400ab48:	d0a1      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab4a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab4e:	4293      	cmp	r3, r2
3400ab50:	d09d      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab52:	4a14      	ldr	r2, [pc, #80]	@ (3400aba4 <HAL_UART_Init+0x1cc>)
3400ab54:	4293      	cmp	r3, r2
3400ab56:	d09a      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab58:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab5c:	4293      	cmp	r3, r2
3400ab5e:	d096      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab60:	4a11      	ldr	r2, [pc, #68]	@ (3400aba8 <HAL_UART_Init+0x1d0>)
3400ab62:	4293      	cmp	r3, r2
3400ab64:	d093      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab66:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab6a:	4293      	cmp	r3, r2
3400ab6c:	d08f      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab6e:	4a0f      	ldr	r2, [pc, #60]	@ (3400abac <HAL_UART_Init+0x1d4>)
3400ab70:	4293      	cmp	r3, r2
3400ab72:	d08c      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab74:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab78:	4293      	cmp	r3, r2
3400ab7a:	d088      	beq.n	3400aa8e <HAL_UART_Init+0xb6>
3400ab7c:	f44f 71a2 	mov.w	r1, #324	@ 0x144
3400ab80:	e782      	b.n	3400aa88 <HAL_UART_Init+0xb0>
}
3400ab82:	2001      	movs	r0, #1
3400ab84:	bd10      	pop	{r4, pc}
3400ab86:	bf00      	nop
3400ab88:	52001000 	.word	0x52001000
3400ab8c:	50004400 	.word	0x50004400
3400ab90:	50004800 	.word	0x50004800
3400ab94:	50004c00 	.word	0x50004c00
3400ab98:	52001400 	.word	0x52001400
3400ab9c:	50007800 	.word	0x50007800
3400aba0:	50007c00 	.word	0x50007c00
3400aba4:	52001800 	.word	0x52001800
3400aba8:	52001c00 	.word	0x52001c00
3400abac:	56000c00 	.word	0x56000c00
3400abb0:	34010dae 	.word	0x34010dae
3400abb4:	42001000 	.word	0x42001000

3400abb8 <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400abb8:	6802      	ldr	r2, [r0, #0]
{
3400abba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400abbe:	6813      	ldr	r3, [r2, #0]
{
3400abc0:	4606      	mov	r6, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400abc2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400abc6:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400abc8:	6883      	ldr	r3, [r0, #8]
{
3400abca:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400abcc:	b97b      	cbnz	r3, 3400abee <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400abce:	684b      	ldr	r3, [r1, #4]
3400abd0:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400abd4:	d004      	beq.n	3400abe0 <XSPI_ConfigCmd+0x28>
3400abd6:	f640 41a4 	movw	r1, #3236	@ 0xca4
3400abda:	4876      	ldr	r0, [pc, #472]	@ (3400adb4 <XSPI_ConfigCmd+0x1fc>)
3400abdc:	f7f6 fc34 	bl	34001448 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3400abe0:	6832      	ldr	r2, [r6, #0]
3400abe2:	6861      	ldr	r1, [r4, #4]
3400abe4:	6813      	ldr	r3, [r2, #0]
3400abe6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
3400abea:	430b      	orrs	r3, r1
3400abec:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400abee:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3400abf0:	6831      	ldr	r1, [r6, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400abf2:	2b02      	cmp	r3, #2
3400abf4:	d158      	bne.n	3400aca8 <XSPI_ConfigCmd+0xf0>
    ccr_reg = &(hxspi->Instance->WCCR);
3400abf6:	f501 72c0 	add.w	r2, r1, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
3400abfa:	f501 70c4 	add.w	r0, r1, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
3400abfe:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
3400ac02:	f501 73d0 	add.w	r3, r1, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3400ac06:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
3400ac08:	6017      	str	r7, [r2, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400ac0a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
3400ac0c:	b167      	cbz	r7, 3400ac28 <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3400ac0e:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3400ac10:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3400ac12:	6b67      	ldr	r7, [r4, #52]	@ 0x34
3400ac14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ac16:	f8d2 c000 	ldr.w	ip, [r2]
3400ac1a:	433b      	orrs	r3, r7
3400ac1c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3400ac1e:	433b      	orrs	r3, r7
3400ac20:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
3400ac24:	433b      	orrs	r3, r7
3400ac26:	6013      	str	r3, [r2, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3400ac28:	6803      	ldr	r3, [r0, #0]
3400ac2a:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3400ac2c:	f023 031f 	bic.w	r3, r3, #31
3400ac30:	433b      	orrs	r3, r7
3400ac32:	6003      	str	r3, [r0, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ac34:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
3400ac38:	f1be 0f00 	cmp.w	lr, #0
3400ac3c:	d00e      	beq.n	3400ac5c <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400ac3e:	6823      	ldr	r3, [r4, #0]
3400ac40:	b913      	cbnz	r3, 3400ac48 <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3400ac42:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400ac44:	3b01      	subs	r3, #1
3400ac46:	640b      	str	r3, [r1, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3400ac48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400ac4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400ac4e:	d13f      	bne.n	3400acd0 <XSPI_ConfigCmd+0x118>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400ac50:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400ac54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400ac58:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400ac5c:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400ac5e:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400ac62:	2b00      	cmp	r3, #0
3400ac64:	f000 8083 	beq.w	3400ad6e <XSPI_ConfigCmd+0x1b6>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ac68:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400ac6c:	f1b9 0f00 	cmp.w	r9, #0
3400ac70:	d053      	beq.n	3400ad1a <XSPI_ConfigCmd+0x162>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ac72:	e9d4 0708 	ldrd	r0, r7, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ac76:	f1be 0f00 	cmp.w	lr, #0
3400ac7a:	d032      	beq.n	3400ace2 <XSPI_ConfigCmd+0x12a>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ac7c:	ea4e 0303 	orr.w	r3, lr, r3
3400ac80:	ea43 0309 	orr.w	r3, r3, r9
3400ac84:	ea43 0308 	orr.w	r3, r3, r8
3400ac88:	ea43 030c 	orr.w	r3, r3, ip
3400ac8c:	433b      	orrs	r3, r7
3400ac8e:	4303      	orrs	r3, r0
3400ac90:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400ac92:	6816      	ldr	r6, [r2, #0]
3400ac94:	4303      	orrs	r3, r0
3400ac96:	4848      	ldr	r0, [pc, #288]	@ (3400adb8 <XSPI_ConfigCmd+0x200>)
3400ac98:	4030      	ands	r0, r6
3400ac9a:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ac9c:	6013      	str	r3, [r2, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3400ac9e:	68a3      	ldr	r3, [r4, #8]
3400aca0:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3400aca2:	69a3      	ldr	r3, [r4, #24]
3400aca4:	648b      	str	r3, [r1, #72]	@ 0x48
3400aca6:	e04c      	b.n	3400ad42 <XSPI_ConfigCmd+0x18a>
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3400aca8:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
3400acaa:	bf01      	itttt	eq
3400acac:	f501 72a0 	addeq.w	r2, r1, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
3400acb0:	f501 70a4 	addeq.w	r0, r1, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
3400acb4:	f501 75a8 	addeq.w	r5, r1, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
3400acb8:	f501 73b0 	addeq.w	r3, r1, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
3400acbc:	bf1f      	itttt	ne
3400acbe:	f501 7280 	addne.w	r2, r1, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
3400acc2:	f501 7084 	addne.w	r0, r1, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
3400acc6:	f501 7588 	addne.w	r5, r1, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
3400acca:	f501 7390 	addne.w	r3, r1, #288	@ 0x120
3400acce:	e79a      	b.n	3400ac06 <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3400acd0:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3400acd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400acd6:	d1c1      	bne.n	3400ac5c <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400acd8:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400acdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3400ace0:	e7ba      	b.n	3400ac58 <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ace2:	ea43 0309 	orr.w	r3, r3, r9
3400ace6:	f8d2 e000 	ldr.w	lr, [r2]
3400acea:	ea43 0308 	orr.w	r3, r3, r8
3400acee:	ea43 030c 	orr.w	r3, r3, ip
3400acf2:	433b      	orrs	r3, r7
3400acf4:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
3400acf8:	4303      	orrs	r3, r0
3400acfa:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
3400acfe:	ea43 030e 	orr.w	r3, r3, lr
3400ad02:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400ad04:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400ad06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ad0a:	d1c8      	bne.n	3400ac9e <XSPI_ConfigCmd+0xe6>
3400ad0c:	6963      	ldr	r3, [r4, #20]
3400ad0e:	2b08      	cmp	r3, #8
3400ad10:	d1c5      	bne.n	3400ac9e <XSPI_ConfigCmd+0xe6>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ad12:	6813      	ldr	r3, [r2, #0]
3400ad14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400ad18:	e7c0      	b.n	3400ac9c <XSPI_ConfigCmd+0xe4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400ad1a:	6811      	ldr	r1, [r2, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ad1c:	f1be 0f00 	cmp.w	lr, #0
3400ad20:	d012      	beq.n	3400ad48 <XSPI_ConfigCmd+0x190>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400ad22:	ea4e 0303 	orr.w	r3, lr, r3
3400ad26:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400ad28:	ea43 0308 	orr.w	r3, r3, r8
3400ad2c:	ea43 030c 	orr.w	r3, r3, ip
3400ad30:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
3400ad34:	4303      	orrs	r3, r0
3400ad36:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400ad3a:	430b      	orrs	r3, r1
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ad3c:	6013      	str	r3, [r2, #0]
      *ir_reg = pCmd->Instruction;
3400ad3e:	68a3      	ldr	r3, [r4, #8]
3400ad40:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
3400ad42:	2000      	movs	r0, #0
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  return status;
}
3400ad44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3400ad48:	ea43 0308 	orr.w	r3, r3, r8
3400ad4c:	ea43 030c 	orr.w	r3, r3, ip
3400ad50:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400ad54:	430b      	orrs	r3, r1
3400ad56:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400ad58:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400ad5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ad5e:	d1ee      	bne.n	3400ad3e <XSPI_ConfigCmd+0x186>
3400ad60:	6963      	ldr	r3, [r4, #20]
3400ad62:	2b08      	cmp	r3, #8
3400ad64:	d1eb      	bne.n	3400ad3e <XSPI_ConfigCmd+0x186>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ad66:	6813      	ldr	r3, [r2, #0]
3400ad68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400ad6c:	e7e6      	b.n	3400ad3c <XSPI_ConfigCmd+0x184>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400ad6e:	f1b9 0f00 	cmp.w	r9, #0
3400ad72:	d01b      	beq.n	3400adac <XSPI_ConfigCmd+0x1f4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ad74:	e9d4 6008 	ldrd	r6, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ad78:	f1be 0f00 	cmp.w	lr, #0
3400ad7c:	d00d      	beq.n	3400ad9a <XSPI_ConfigCmd+0x1e2>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3400ad7e:	ea4e 0309 	orr.w	r3, lr, r9
3400ad82:	6815      	ldr	r5, [r2, #0]
3400ad84:	4303      	orrs	r3, r0
3400ad86:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400ad88:	4333      	orrs	r3, r6
3400ad8a:	4303      	orrs	r3, r0
3400ad8c:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
3400ad90:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
3400ad94:	4303      	orrs	r3, r0
3400ad96:	6013      	str	r3, [r2, #0]
3400ad98:	e783      	b.n	3400aca2 <XSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3400ad9a:	6813      	ldr	r3, [r2, #0]
3400ad9c:	ea40 0009 	orr.w	r0, r0, r9
3400ada0:	4330      	orrs	r0, r6
3400ada2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400ada6:	4318      	orrs	r0, r3
3400ada8:	6010      	str	r0, [r2, #0]
3400adaa:	e77a      	b.n	3400aca2 <XSPI_ConfigCmd+0xea>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400adac:	2308      	movs	r3, #8
      status = HAL_ERROR;
3400adae:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400adb0:	65f3      	str	r3, [r6, #92]	@ 0x5c
3400adb2:	e7c7      	b.n	3400ad44 <XSPI_ConfigCmd+0x18c>
3400adb4:	34010de3 	.word	0x34010de3
3400adb8:	f0ffc0c0 	.word	0xf0ffc0c0

3400adbc <XSPI_WaitFlagStateUntilTimeout>:
{
3400adbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400adc0:	4604      	mov	r4, r0
3400adc2:	460e      	mov	r6, r1
3400adc4:	4615      	mov	r5, r2
3400adc6:	461f      	mov	r7, r3
3400adc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3400adcc:	6822      	ldr	r2, [r4, #0]
3400adce:	6a13      	ldr	r3, [r2, #32]
3400add0:	4233      	tst	r3, r6
3400add2:	bf14      	ite	ne
3400add4:	2301      	movne	r3, #1
3400add6:	2300      	moveq	r3, #0
3400add8:	42ab      	cmp	r3, r5
3400adda:	d101      	bne.n	3400ade0 <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
3400addc:	2000      	movs	r0, #0
3400adde:	e00e      	b.n	3400adfe <XSPI_WaitFlagStateUntilTimeout+0x42>
    if (Timeout != HAL_MAX_DELAY)
3400ade0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
3400ade4:	d0f3      	beq.n	3400adce <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400ade6:	f7f7 fba5 	bl	34002534 <HAL_GetTick>
3400adea:	1bc0      	subs	r0, r0, r7
3400adec:	4540      	cmp	r0, r8
3400adee:	d908      	bls.n	3400ae02 <XSPI_WaitFlagStateUntilTimeout+0x46>
        hxspi->State     = HAL_XSPI_STATE_READY;
3400adf0:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400adf2:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
3400adf4:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400adf6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3400adf8:	f043 0301 	orr.w	r3, r3, #1
3400adfc:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
3400adfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400ae02:	f1b8 0f00 	cmp.w	r8, #0
3400ae06:	d1e1      	bne.n	3400adcc <XSPI_WaitFlagStateUntilTimeout+0x10>
3400ae08:	e7f2      	b.n	3400adf0 <XSPI_WaitFlagStateUntilTimeout+0x34>

3400ae0a <HAL_XSPI_MspInit>:
}
3400ae0a:	4770      	bx	lr

3400ae0c <HAL_XSPI_Init>:
{
3400ae0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400ae0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3400ae10:	f7f7 fb90 	bl	34002534 <HAL_GetTick>
3400ae14:	4606      	mov	r6, r0
  if (hxspi == NULL)
3400ae16:	2c00      	cmp	r4, #0
3400ae18:	f000 812a 	beq.w	3400b070 <HAL_XSPI_Init+0x264>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3400ae1c:	68a3      	ldr	r3, [r4, #8]
3400ae1e:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3400ae22:	d004      	beq.n	3400ae2e <HAL_XSPI_Init+0x22>
3400ae24:	f240 1161 	movw	r1, #353	@ 0x161
3400ae28:	4892      	ldr	r0, [pc, #584]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400ae2a:	f7f6 fb0d 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3400ae2e:	68e3      	ldr	r3, [r4, #12]
3400ae30:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
3400ae34:	d009      	beq.n	3400ae4a <HAL_XSPI_Init+0x3e>
3400ae36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3400ae3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400ae3e:	d004      	beq.n	3400ae4a <HAL_XSPI_Init+0x3e>
3400ae40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400ae44:	488b      	ldr	r0, [pc, #556]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400ae46:	f7f6 faff 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3400ae4a:	6923      	ldr	r3, [r4, #16]
3400ae4c:	2b1f      	cmp	r3, #31
3400ae4e:	d904      	bls.n	3400ae5a <HAL_XSPI_Init+0x4e>
3400ae50:	f240 1163 	movw	r1, #355	@ 0x163
3400ae54:	4887      	ldr	r0, [pc, #540]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400ae56:	f7f6 faf7 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3400ae5a:	6963      	ldr	r3, [r4, #20]
3400ae5c:	3b01      	subs	r3, #1
3400ae5e:	2b3f      	cmp	r3, #63	@ 0x3f
3400ae60:	d904      	bls.n	3400ae6c <HAL_XSPI_Init+0x60>
3400ae62:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400ae66:	4883      	ldr	r0, [pc, #524]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400ae68:	f7f6 faee 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
3400ae6c:	69a3      	ldr	r3, [r4, #24]
3400ae6e:	f033 0302 	bics.w	r3, r3, #2
3400ae72:	d004      	beq.n	3400ae7e <HAL_XSPI_Init+0x72>
3400ae74:	f240 1165 	movw	r1, #357	@ 0x165
3400ae78:	487e      	ldr	r0, [pc, #504]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400ae7a:	f7f6 fae5 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3400ae7e:	69e3      	ldr	r3, [r4, #28]
3400ae80:	2b01      	cmp	r3, #1
3400ae82:	d904      	bls.n	3400ae8e <HAL_XSPI_Init+0x82>
3400ae84:	f44f 71b3 	mov.w	r1, #358	@ 0x166
3400ae88:	487a      	ldr	r0, [pc, #488]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400ae8a:	f7f6 fadd 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3400ae8e:	6a23      	ldr	r3, [r4, #32]
3400ae90:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
3400ae94:	d00c      	beq.n	3400aeb0 <HAL_XSPI_Init+0xa4>
3400ae96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400ae9a:	d009      	beq.n	3400aeb0 <HAL_XSPI_Init+0xa4>
3400ae9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400aea0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400aea4:	d004      	beq.n	3400aeb0 <HAL_XSPI_Init+0xa4>
3400aea6:	f240 1167 	movw	r1, #359	@ 0x167
3400aeaa:	4872      	ldr	r0, [pc, #456]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400aeac:	f7f6 facc 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
3400aeb0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400aeb2:	2bff      	cmp	r3, #255	@ 0xff
3400aeb4:	d904      	bls.n	3400aec0 <HAL_XSPI_Init+0xb4>
3400aeb6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3400aeba:	486e      	ldr	r0, [pc, #440]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400aebc:	f7f6 fac4 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
3400aec0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400aec2:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
3400aec6:	d004      	beq.n	3400aed2 <HAL_XSPI_Init+0xc6>
3400aec8:	f240 1169 	movw	r1, #361	@ 0x169
3400aecc:	4869      	ldr	r0, [pc, #420]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400aece:	f7f6 fabb 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
3400aed2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400aed4:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
3400aed8:	d004      	beq.n	3400aee4 <HAL_XSPI_Init+0xd8>
3400aeda:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400aede:	4865      	ldr	r0, [pc, #404]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400aee0:	f7f6 fab2 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
3400aee4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400aee6:	2b1f      	cmp	r3, #31
3400aee8:	d904      	bls.n	3400aef4 <HAL_XSPI_Init+0xe8>
3400aeea:	f240 116b 	movw	r1, #363	@ 0x16b
3400aeee:	4861      	ldr	r0, [pc, #388]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400aef0:	f7f6 faaa 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
3400aef4:	6863      	ldr	r3, [r4, #4]
3400aef6:	3b01      	subs	r3, #1
3400aef8:	2b3f      	cmp	r3, #63	@ 0x3f
3400aefa:	d904      	bls.n	3400af06 <HAL_XSPI_Init+0xfa>
3400aefc:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3400af00:	485c      	ldr	r0, [pc, #368]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400af02:	f7f6 faa1 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3400af06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400af08:	2bff      	cmp	r3, #255	@ 0xff
3400af0a:	d904      	bls.n	3400af16 <HAL_XSPI_Init+0x10a>
3400af0c:	f240 116d 	movw	r1, #365	@ 0x16d
3400af10:	4858      	ldr	r0, [pc, #352]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400af12:	f7f6 fa99 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3400af16:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400af18:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3400af1c:	d004      	beq.n	3400af28 <HAL_XSPI_Init+0x11c>
3400af1e:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3400af22:	4854      	ldr	r0, [pc, #336]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400af24:	f7f6 fa90 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
3400af28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400af2a:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3400af2e:	d004      	beq.n	3400af3a <HAL_XSPI_Init+0x12e>
3400af30:	f240 116f 	movw	r1, #367	@ 0x16f
3400af34:	484f      	ldr	r0, [pc, #316]	@ (3400b074 <HAL_XSPI_Init+0x268>)
3400af36:	f7f6 fa87 	bl	34001448 <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400af3a:	2300      	movs	r3, #0
3400af3c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3400af3e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3400af40:	2f00      	cmp	r7, #0
3400af42:	f040 8087 	bne.w	3400b054 <HAL_XSPI_Init+0x248>
      HAL_XSPI_MspInit(hxspi);
3400af46:	4620      	mov	r0, r4
3400af48:	f7ff ff5f 	bl	3400ae0a <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
3400af4c:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3400af50:	69e3      	ldr	r3, [r4, #28]
3400af52:	68e5      	ldr	r5, [r4, #12]
3400af54:	6821      	ldr	r1, [r4, #0]
3400af56:	431d      	orrs	r5, r3
3400af58:	6923      	ldr	r3, [r4, #16]
3400af5a:	6888      	ldr	r0, [r1, #8]
3400af5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3400af60:	4b45      	ldr	r3, [pc, #276]	@ (3400b078 <HAL_XSPI_Init+0x26c>)
  hxspi->Timeout = Timeout;
3400af62:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
3400af64:	4003      	ands	r3, r0
3400af66:	431d      	orrs	r5, r3
3400af68:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400af6a:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
3400af6c:	3b01      	subs	r3, #1
3400af6e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3400af72:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400af74:	68cb      	ldr	r3, [r1, #12]
3400af76:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3400af7a:	4303      	orrs	r3, r0
3400af7c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3400af7e:	690b      	ldr	r3, [r1, #16]
3400af80:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3400af82:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3400af86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400af8a:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3400af8c:	690b      	ldr	r3, [r1, #16]
3400af8e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3400af90:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400af94:	4303      	orrs	r3, r0
3400af96:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400af98:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400af9a:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400af9c:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400af9e:	680b      	ldr	r3, [r1, #0]
3400afa0:	3801      	subs	r0, #1
3400afa2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400afa6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
3400afaa:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400afac:	4620      	mov	r0, r4
3400afae:	9200      	str	r2, [sp, #0]
3400afb0:	4633      	mov	r3, r6
3400afb2:	463a      	mov	r2, r7
3400afb4:	2120      	movs	r1, #32
3400afb6:	f7ff ff01 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400afba:	2800      	cmp	r0, #0
3400afbc:	d156      	bne.n	3400b06c <HAL_XSPI_Init+0x260>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400afbe:	6823      	ldr	r3, [r4, #0]
3400afc0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400afc2:	68da      	ldr	r2, [r3, #12]
3400afc4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
3400afc8:	430a      	orrs	r2, r1
3400afca:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3400afcc:	4a2b      	ldr	r2, [pc, #172]	@ (3400b07c <HAL_XSPI_Init+0x270>)
3400afce:	4293      	cmp	r3, r2
3400afd0:	d042      	beq.n	3400b058 <HAL_XSPI_Init+0x24c>
3400afd2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400afd6:	4293      	cmp	r3, r2
3400afd8:	d03e      	beq.n	3400b058 <HAL_XSPI_Init+0x24c>
3400afda:	4a29      	ldr	r2, [pc, #164]	@ (3400b080 <HAL_XSPI_Init+0x274>)
3400afdc:	4293      	cmp	r3, r2
3400afde:	d03b      	beq.n	3400b058 <HAL_XSPI_Init+0x24c>
3400afe0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400afe4:	4293      	cmp	r3, r2
3400afe6:	d037      	beq.n	3400b058 <HAL_XSPI_Init+0x24c>
3400afe8:	4a26      	ldr	r2, [pc, #152]	@ (3400b084 <HAL_XSPI_Init+0x278>)
3400afea:	4293      	cmp	r3, r2
3400afec:	d034      	beq.n	3400b058 <HAL_XSPI_Init+0x24c>
3400afee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aff2:	4293      	cmp	r3, r2
3400aff4:	d030      	beq.n	3400b058 <HAL_XSPI_Init+0x24c>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3400aff6:	6823      	ldr	r3, [r4, #0]
3400aff8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
3400affa:	6819      	ldr	r1, [r3, #0]
3400affc:	68a2      	ldr	r2, [r4, #8]
3400affe:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400b002:	4302      	orrs	r2, r0
3400b004:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3400b008:	430a      	orrs	r2, r1
3400b00a:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3400b00c:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
3400b010:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
3400b014:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
3400b018:	4302      	orrs	r2, r0
3400b01a:	430a      	orrs	r2, r1
3400b01c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3400b020:	681a      	ldr	r2, [r3, #0]
3400b022:	f042 0201 	orr.w	r2, r2, #1
3400b026:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3400b028:	69a2      	ldr	r2, [r4, #24]
3400b02a:	2a02      	cmp	r2, #2
3400b02c:	d103      	bne.n	3400b036 <HAL_XSPI_Init+0x22a>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3400b02e:	689a      	ldr	r2, [r3, #8]
3400b030:	f042 0202 	orr.w	r2, r2, #2
3400b034:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3400b036:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400b038:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3400b03c:	bf02      	ittt	eq
3400b03e:	689a      	ldreq	r2, [r3, #8]
3400b040:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
3400b044:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b046:	68e3      	ldr	r3, [r4, #12]
3400b048:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3400b04c:	bf0c      	ite	eq
3400b04e:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3400b050:	2302      	movne	r3, #2
3400b052:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
3400b054:	2000      	movs	r0, #0
3400b056:	e009      	b.n	3400b06c <HAL_XSPI_Init+0x260>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400b058:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3400b05a:	2200      	movs	r2, #0
3400b05c:	9300      	str	r3, [sp, #0]
3400b05e:	2120      	movs	r1, #32
3400b060:	4633      	mov	r3, r6
3400b062:	4620      	mov	r0, r4
3400b064:	f7ff feaa 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
3400b068:	2800      	cmp	r0, #0
3400b06a:	d0c4      	beq.n	3400aff6 <HAL_XSPI_Init+0x1ea>
}
3400b06c:	b003      	add	sp, #12
3400b06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3400b070:	2001      	movs	r0, #1
3400b072:	e7fb      	b.n	3400b06c <HAL_XSPI_Init+0x260>
3400b074:	34010de3 	.word	0x34010de3
3400b078:	f8e0c0fc 	.word	0xf8e0c0fc
3400b07c:	58025000 	.word	0x58025000
3400b080:	5802a000 	.word	0x5802a000
3400b084:	5802d000 	.word	0x5802d000

3400b088 <HAL_XSPI_Command>:
{
3400b088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400b08a:	460c      	mov	r4, r1
3400b08c:	4605      	mov	r5, r0
3400b08e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400b090:	f7f7 fa50 	bl	34002534 <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400b094:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b096:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400b098:	2b03      	cmp	r3, #3
3400b09a:	d904      	bls.n	3400b0a6 <HAL_XSPI_Command+0x1e>
3400b09c:	f240 313e 	movw	r1, #830	@ 0x33e
3400b0a0:	4884      	ldr	r0, [pc, #528]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b0a2:	f7f6 f9d1 	bl	34001448 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400b0a6:	68ab      	ldr	r3, [r5, #8]
3400b0a8:	b943      	cbnz	r3, 3400b0bc <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400b0aa:	6863      	ldr	r3, [r4, #4]
3400b0ac:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400b0b0:	d004      	beq.n	3400b0bc <HAL_XSPI_Command+0x34>
3400b0b2:	f240 3141 	movw	r1, #833	@ 0x341
3400b0b6:	487f      	ldr	r0, [pc, #508]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b0b8:	f7f6 f9c6 	bl	34001448 <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3400b0bc:	68e3      	ldr	r3, [r4, #12]
3400b0be:	2b04      	cmp	r3, #4
3400b0c0:	d904      	bls.n	3400b0cc <HAL_XSPI_Command+0x44>
3400b0c2:	f44f 7151 	mov.w	r1, #836	@ 0x344
3400b0c6:	487b      	ldr	r0, [pc, #492]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b0c8:	f7f6 f9be 	bl	34001448 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400b0cc:	68e3      	ldr	r3, [r4, #12]
3400b0ce:	b18b      	cbz	r3, 3400b0f4 <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
3400b0d0:	6923      	ldr	r3, [r4, #16]
3400b0d2:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400b0d6:	d004      	beq.n	3400b0e2 <HAL_XSPI_Command+0x5a>
3400b0d8:	f240 3147 	movw	r1, #839	@ 0x347
3400b0dc:	4875      	ldr	r0, [pc, #468]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b0de:	f7f6 f9b3 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3400b0e2:	6963      	ldr	r3, [r4, #20]
3400b0e4:	f033 0308 	bics.w	r3, r3, #8
3400b0e8:	d004      	beq.n	3400b0f4 <HAL_XSPI_Command+0x6c>
3400b0ea:	f44f 7152 	mov.w	r1, #840	@ 0x348
3400b0ee:	4871      	ldr	r0, [pc, #452]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b0f0:	f7f6 f9aa 	bl	34001448 <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400b0f4:	69e3      	ldr	r3, [r4, #28]
3400b0f6:	b303      	cbz	r3, 3400b13a <HAL_XSPI_Command+0xb2>
3400b0f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3400b0fc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3400b100:	d10d      	bne.n	3400b11e <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400b102:	6a23      	ldr	r3, [r4, #32]
3400b104:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400b108:	d12c      	bne.n	3400b164 <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3400b10a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400b10c:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400b110:	d013      	beq.n	3400b13a <HAL_XSPI_Command+0xb2>
3400b112:	f240 314f 	movw	r1, #847	@ 0x34f
3400b116:	4867      	ldr	r0, [pc, #412]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b118:	f7f6 f996 	bl	34001448 <assert_failed>
3400b11c:	e00d      	b.n	3400b13a <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400b11e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400b122:	d0ee      	beq.n	3400b102 <HAL_XSPI_Command+0x7a>
3400b124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400b128:	d0eb      	beq.n	3400b102 <HAL_XSPI_Command+0x7a>
3400b12a:	f240 314b 	movw	r1, #843	@ 0x34b
3400b12e:	4861      	ldr	r0, [pc, #388]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b130:	f7f6 f98a 	bl	34001448 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400b134:	69e3      	ldr	r3, [r4, #28]
3400b136:	2b00      	cmp	r3, #0
3400b138:	d1e3      	bne.n	3400b102 <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400b13a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400b13c:	b333      	cbz	r3, 3400b18c <HAL_XSPI_Command+0x104>
3400b13e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3400b142:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3400b146:	d113      	bne.n	3400b170 <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400b148:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400b14a:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3400b14e:	d13d      	bne.n	3400b1cc <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3400b150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400b152:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400b156:	d019      	beq.n	3400b18c <HAL_XSPI_Command+0x104>
3400b158:	f240 3156 	movw	r1, #854	@ 0x356
3400b15c:	4855      	ldr	r0, [pc, #340]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b15e:	f7f6 f973 	bl	34001448 <assert_failed>
3400b162:	e013      	b.n	3400b18c <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400b164:	f240 314e 	movw	r1, #846	@ 0x34e
3400b168:	4852      	ldr	r0, [pc, #328]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b16a:	f7f6 f96d 	bl	34001448 <assert_failed>
3400b16e:	e7cc      	b.n	3400b10a <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400b170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400b174:	d0e8      	beq.n	3400b148 <HAL_XSPI_Command+0xc0>
3400b176:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400b17a:	d0e5      	beq.n	3400b148 <HAL_XSPI_Command+0xc0>
3400b17c:	f240 3152 	movw	r1, #850	@ 0x352
3400b180:	484c      	ldr	r0, [pc, #304]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b182:	f7f6 f961 	bl	34001448 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400b186:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400b188:	2b00      	cmp	r3, #0
3400b18a:	d1dd      	bne.n	3400b148 <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400b18c:	68eb      	ldr	r3, [r5, #12]
3400b18e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400b190:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400b194:	d120      	bne.n	3400b1d8 <HAL_XSPI_Command+0x150>
3400b196:	b389      	cbz	r1, 3400b1fc <HAL_XSPI_Command+0x174>
3400b198:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400b19c:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
3400b1a0:	d124      	bne.n	3400b1ec <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b1a2:	6823      	ldr	r3, [r4, #0]
3400b1a4:	2b00      	cmp	r3, #0
3400b1a6:	d03d      	beq.n	3400b224 <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3400b1a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400b1aa:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
3400b1ae:	d004      	beq.n	3400b1ba <HAL_XSPI_Command+0x132>
3400b1b0:	f240 3161 	movw	r1, #865	@ 0x361
3400b1b4:	483f      	ldr	r0, [pc, #252]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b1b6:	f7f6 f947 	bl	34001448 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3400b1ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b1bc:	2b1f      	cmp	r3, #31
3400b1be:	d91d      	bls.n	3400b1fc <HAL_XSPI_Command+0x174>
3400b1c0:	f240 3162 	movw	r1, #866	@ 0x362
3400b1c4:	483b      	ldr	r0, [pc, #236]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b1c6:	f7f6 f93f 	bl	34001448 <assert_failed>
3400b1ca:	e017      	b.n	3400b1fc <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400b1cc:	f240 3155 	movw	r1, #853	@ 0x355
3400b1d0:	4838      	ldr	r0, [pc, #224]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b1d2:	f7f6 f939 	bl	34001448 <assert_failed>
3400b1d6:	e7bb      	b.n	3400b150 <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400b1d8:	b181      	cbz	r1, 3400b1fc <HAL_XSPI_Command+0x174>
3400b1da:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
3400b1de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400b1e2:	d0de      	beq.n	3400b1a2 <HAL_XSPI_Command+0x11a>
3400b1e4:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
3400b1e8:	d1d6      	bne.n	3400b198 <HAL_XSPI_Command+0x110>
3400b1ea:	e7da      	b.n	3400b1a2 <HAL_XSPI_Command+0x11a>
3400b1ec:	f240 3159 	movw	r1, #857	@ 0x359
3400b1f0:	4830      	ldr	r0, [pc, #192]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b1f2:	f7f6 f929 	bl	34001448 <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400b1f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b1f8:	2b00      	cmp	r3, #0
3400b1fa:	d1d2      	bne.n	3400b1a2 <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3400b1fc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400b1fe:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3400b202:	d004      	beq.n	3400b20e <HAL_XSPI_Command+0x186>
3400b204:	f240 3165 	movw	r1, #869	@ 0x365
3400b208:	482a      	ldr	r0, [pc, #168]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b20a:	f7f6 f91d 	bl	34001448 <assert_failed>
  state = hxspi->State;
3400b20e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b210:	2b02      	cmp	r3, #2
3400b212:	d110      	bne.n	3400b236 <HAL_XSPI_Command+0x1ae>
3400b214:	68eb      	ldr	r3, [r5, #12]
3400b216:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400b21a:	d112      	bne.n	3400b242 <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b21c:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b21e:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b220:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b222:	e028      	b.n	3400b276 <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3400b224:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400b226:	2b00      	cmp	r3, #0
3400b228:	d1be      	bne.n	3400b1a8 <HAL_XSPI_Command+0x120>
3400b22a:	f240 315f 	movw	r1, #863	@ 0x35f
3400b22e:	4821      	ldr	r0, [pc, #132]	@ (3400b2b4 <HAL_XSPI_Command+0x22c>)
3400b230:	f7f6 f90a 	bl	34001448 <assert_failed>
3400b234:	e7b8      	b.n	3400b1a8 <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b236:	2b14      	cmp	r3, #20
3400b238:	d11f      	bne.n	3400b27a <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3400b23a:	6823      	ldr	r3, [r4, #0]
3400b23c:	3b02      	subs	r3, #2
3400b23e:	2b01      	cmp	r3, #1
3400b240:	d8ec      	bhi.n	3400b21c <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b242:	4633      	mov	r3, r6
3400b244:	2200      	movs	r2, #0
3400b246:	2120      	movs	r1, #32
3400b248:	4628      	mov	r0, r5
3400b24a:	9700      	str	r7, [sp, #0]
3400b24c:	f7ff fdb6 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b250:	bb70      	cbnz	r0, 3400b2b0 <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400b252:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
3400b254:	4621      	mov	r1, r4
3400b256:	4628      	mov	r0, r5
3400b258:	f7ff fcae 	bl	3400abb8 <XSPI_ConfigCmd>
      if (status == HAL_OK)
3400b25c:	b958      	cbnz	r0, 3400b276 <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3400b25e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b260:	b99b      	cbnz	r3, 3400b28a <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b262:	4602      	mov	r2, r0
3400b264:	4633      	mov	r3, r6
3400b266:	2120      	movs	r1, #32
3400b268:	4628      	mov	r0, r5
3400b26a:	9700      	str	r7, [sp, #0]
3400b26c:	f7ff fda6 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b270:	2202      	movs	r2, #2
3400b272:	682b      	ldr	r3, [r5, #0]
3400b274:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400b276:	b003      	add	sp, #12
3400b278:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3400b27a:	2b24      	cmp	r3, #36	@ 0x24
3400b27c:	d1ce      	bne.n	3400b21c <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3400b27e:	6823      	ldr	r3, [r4, #0]
3400b280:	f023 0302 	bic.w	r3, r3, #2
3400b284:	2b01      	cmp	r3, #1
3400b286:	d1c9      	bne.n	3400b21c <HAL_XSPI_Command+0x194>
3400b288:	e7db      	b.n	3400b242 <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b28a:	6823      	ldr	r3, [r4, #0]
3400b28c:	b90b      	cbnz	r3, 3400b292 <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3400b28e:	2304      	movs	r3, #4
3400b290:	e005      	b.n	3400b29e <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3400b292:	2b01      	cmp	r3, #1
3400b294:	d105      	bne.n	3400b2a2 <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3400b296:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b298:	2b24      	cmp	r3, #36	@ 0x24
3400b29a:	d0f8      	beq.n	3400b28e <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3400b29c:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b29e:	65ab      	str	r3, [r5, #88]	@ 0x58
3400b2a0:	e7e9      	b.n	3400b276 <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400b2a2:	2b02      	cmp	r3, #2
3400b2a4:	d1e7      	bne.n	3400b276 <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3400b2a6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b2a8:	2b14      	cmp	r3, #20
3400b2aa:	d0f0      	beq.n	3400b28e <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b2ac:	2324      	movs	r3, #36	@ 0x24
3400b2ae:	e7f6      	b.n	3400b29e <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
3400b2b0:	2002      	movs	r0, #2
3400b2b2:	e7e0      	b.n	3400b276 <HAL_XSPI_Command+0x1ee>
3400b2b4:	34010de3 	.word	0x34010de3

3400b2b8 <HAL_XSPI_Transmit>:
{
3400b2b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b2bc:	4604      	mov	r4, r0
3400b2be:	4688      	mov	r8, r1
3400b2c0:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
3400b2c2:	f7f7 f937 	bl	34002534 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b2c6:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b2c8:	4605      	mov	r5, r0
  if (pData == NULL)
3400b2ca:	f1b8 0f00 	cmp.w	r8, #0
3400b2ce:	d103      	bne.n	3400b2d8 <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b2d0:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b2d2:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b2d4:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b2d6:	e02e      	b.n	3400b336 <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b2d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b2da:	2b04      	cmp	r3, #4
3400b2dc:	d12e      	bne.n	3400b33c <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b2de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
3400b2e0:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b2e4:	3301      	adds	r3, #1
3400b2e6:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b2e8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b2ea:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3400b2ec:	683b      	ldr	r3, [r7, #0]
3400b2ee:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b2f2:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3400b2f4:	462b      	mov	r3, r5
3400b2f6:	2201      	movs	r2, #1
3400b2f8:	2104      	movs	r1, #4
3400b2fa:	4620      	mov	r0, r4
3400b2fc:	9600      	str	r6, [sp, #0]
3400b2fe:	f7ff fd5d 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b302:	b9c0      	cbnz	r0, 3400b336 <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3400b304:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b306:	781b      	ldrb	r3, [r3, #0]
3400b308:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
3400b30c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b30e:	3301      	adds	r3, #1
3400b310:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b312:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b314:	3b01      	subs	r3, #1
3400b316:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b318:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b31a:	2b00      	cmp	r3, #0
3400b31c:	d1ea      	bne.n	3400b2f4 <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b31e:	462b      	mov	r3, r5
3400b320:	2201      	movs	r2, #1
3400b322:	2102      	movs	r1, #2
3400b324:	4620      	mov	r0, r4
3400b326:	9600      	str	r6, [sp, #0]
3400b328:	f7ff fd48 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b32c:	b918      	cbnz	r0, 3400b336 <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b32e:	2302      	movs	r3, #2
3400b330:	6822      	ldr	r2, [r4, #0]
3400b332:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b334:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b336:	b002      	add	sp, #8
3400b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b33c:	2310      	movs	r3, #16
3400b33e:	e7c8      	b.n	3400b2d2 <HAL_XSPI_Transmit+0x1a>

3400b340 <HAL_XSPI_Receive>:
{
3400b340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b344:	4604      	mov	r4, r0
3400b346:	4616      	mov	r6, r2
3400b348:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
3400b34a:	f7f7 f8f3 	bl	34002534 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b34e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b350:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b352:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b354:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
3400b358:	f1b8 0f00 	cmp.w	r8, #0
3400b35c:	d103      	bne.n	3400b366 <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b35e:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b360:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b362:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b364:	e035      	b.n	3400b3d2 <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b366:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b368:	2b04      	cmp	r3, #4
3400b36a:	d13d      	bne.n	3400b3e8 <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b36c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3400b36e:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b372:	3301      	adds	r3, #1
3400b374:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b376:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b378:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b37a:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b37c:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b37e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3400b382:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b386:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b38a:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b38c:	d124      	bne.n	3400b3d8 <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b38e:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3400b390:	463b      	mov	r3, r7
3400b392:	2201      	movs	r2, #1
3400b394:	2106      	movs	r1, #6
3400b396:	4620      	mov	r0, r4
3400b398:	9600      	str	r6, [sp, #0]
3400b39a:	f7ff fd0f 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b39e:	b9c0      	cbnz	r0, 3400b3d2 <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3400b3a0:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
3400b3a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b3a6:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3400b3a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b3aa:	3301      	adds	r3, #1
3400b3ac:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b3ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b3b0:	3b01      	subs	r3, #1
3400b3b2:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b3b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b3b6:	2b00      	cmp	r3, #0
3400b3b8:	d1ea      	bne.n	3400b390 <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b3ba:	463b      	mov	r3, r7
3400b3bc:	2201      	movs	r2, #1
3400b3be:	2102      	movs	r1, #2
3400b3c0:	4620      	mov	r0, r4
3400b3c2:	9600      	str	r6, [sp, #0]
3400b3c4:	f7ff fcfa 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b3c8:	b918      	cbnz	r0, 3400b3d2 <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b3ca:	2302      	movs	r3, #2
3400b3cc:	6822      	ldr	r2, [r4, #0]
3400b3ce:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b3d0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b3d2:	b002      	add	sp, #8
3400b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b3d8:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
3400b3dc:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b3e0:	d1d5      	bne.n	3400b38e <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b3e2:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
3400b3e6:	e7d3      	b.n	3400b390 <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b3e8:	2310      	movs	r3, #16
3400b3ea:	e7b9      	b.n	3400b360 <HAL_XSPI_Receive+0x20>

3400b3ec <HAL_XSPI_AutoPolling>:
{
3400b3ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3400b3f0:	4604      	mov	r4, r0
3400b3f2:	460d      	mov	r5, r1
3400b3f4:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400b3f6:	f7f7 f89d 	bl	34002534 <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
3400b3fa:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b3fc:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b3fe:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b402:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
3400b406:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
3400b40a:	68ab      	ldr	r3, [r5, #8]
3400b40c:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3400b410:	d004      	beq.n	3400b41c <HAL_XSPI_AutoPolling+0x30>
3400b412:	f240 7134 	movw	r1, #1844	@ 0x734
3400b416:	4832      	ldr	r0, [pc, #200]	@ (3400b4e0 <HAL_XSPI_AutoPolling+0xf4>)
3400b418:	f7f6 f816 	bl	34001448 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3400b41c:	68eb      	ldr	r3, [r5, #12]
3400b41e:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3400b422:	d004      	beq.n	3400b42e <HAL_XSPI_AutoPolling+0x42>
3400b424:	f240 7135 	movw	r1, #1845	@ 0x735
3400b428:	482d      	ldr	r0, [pc, #180]	@ (3400b4e0 <HAL_XSPI_AutoPolling+0xf4>)
3400b42a:	f7f6 f80d 	bl	34001448 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3400b42e:	692b      	ldr	r3, [r5, #16]
3400b430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b434:	d304      	bcc.n	3400b440 <HAL_XSPI_AutoPolling+0x54>
3400b436:	f240 7136 	movw	r1, #1846	@ 0x736
3400b43a:	4829      	ldr	r0, [pc, #164]	@ (3400b4e0 <HAL_XSPI_AutoPolling+0xf4>)
3400b43c:	f7f6 f804 	bl	34001448 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3400b440:	f1ba 0f03 	cmp.w	sl, #3
3400b444:	d904      	bls.n	3400b450 <HAL_XSPI_AutoPolling+0x64>
3400b446:	f240 7137 	movw	r1, #1847	@ 0x737
3400b44a:	4825      	ldr	r0, [pc, #148]	@ (3400b4e0 <HAL_XSPI_AutoPolling+0xf4>)
3400b44c:	f7f5 fffc 	bl	34001448 <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3400b450:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b452:	2b04      	cmp	r3, #4
3400b454:	d13e      	bne.n	3400b4d4 <HAL_XSPI_AutoPolling+0xe8>
3400b456:	68eb      	ldr	r3, [r5, #12]
3400b458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3400b45c:	d13a      	bne.n	3400b4d4 <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b45e:	4633      	mov	r3, r6
3400b460:	2200      	movs	r2, #0
3400b462:	2120      	movs	r1, #32
3400b464:	4620      	mov	r0, r4
3400b466:	9700      	str	r7, [sp, #0]
3400b468:	f7ff fca8 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b46c:	2800      	cmp	r0, #0
3400b46e:	d135      	bne.n	3400b4dc <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3400b470:	682b      	ldr	r3, [r5, #0]
3400b472:	6821      	ldr	r1, [r4, #0]
3400b474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3400b478:	686b      	ldr	r3, [r5, #4]
3400b47a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3400b47e:	692b      	ldr	r3, [r5, #16]
3400b480:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b484:	680a      	ldr	r2, [r1, #0]
3400b486:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
3400b48a:	431d      	orrs	r5, r3
3400b48c:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3400b490:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b492:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b494:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b498:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b49c:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b49e:	d111      	bne.n	3400b4c4 <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b4a0:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3400b4a4:	4633      	mov	r3, r6
3400b4a6:	2201      	movs	r2, #1
3400b4a8:	2108      	movs	r1, #8
3400b4aa:	4620      	mov	r0, r4
3400b4ac:	9700      	str	r7, [sp, #0]
3400b4ae:	f7ff fc85 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400b4b2:	b920      	cbnz	r0, 3400b4be <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3400b4b4:	2208      	movs	r2, #8
3400b4b6:	6823      	ldr	r3, [r4, #0]
3400b4b8:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
3400b4ba:	2302      	movs	r3, #2
3400b4bc:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b4be:	b002      	add	sp, #8
3400b4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b4c4:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
3400b4c8:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b4cc:	d1e8      	bne.n	3400b4a0 <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b4ce:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
3400b4d2:	e7e7      	b.n	3400b4a4 <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b4d4:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b4d6:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b4d8:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b4da:	e7f0      	b.n	3400b4be <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
3400b4dc:	2002      	movs	r0, #2
3400b4de:	e7ee      	b.n	3400b4be <HAL_XSPI_AutoPolling+0xd2>
3400b4e0:	34010de3 	.word	0x34010de3

3400b4e4 <HAL_XSPI_MemoryMapped>:
{
3400b4e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400b4e6:	460c      	mov	r4, r1
3400b4e8:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
3400b4ea:	f7f7 f823 	bl	34002534 <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b4ee:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b4f0:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b4f2:	f033 0308 	bics.w	r3, r3, #8
3400b4f6:	d004      	beq.n	3400b502 <HAL_XSPI_MemoryMapped+0x1e>
3400b4f8:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
3400b4fc:	482f      	ldr	r0, [pc, #188]	@ (3400b5bc <HAL_XSPI_MemoryMapped+0xd8>)
3400b4fe:	f7f5 ffa3 	bl	34001448 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3400b502:	68a3      	ldr	r3, [r4, #8]
3400b504:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
3400b508:	d004      	beq.n	3400b514 <HAL_XSPI_MemoryMapped+0x30>
3400b50a:	f240 71c9 	movw	r1, #1993	@ 0x7c9
3400b50e:	482b      	ldr	r0, [pc, #172]	@ (3400b5bc <HAL_XSPI_MemoryMapped+0xd8>)
3400b510:	f7f5 ff9a 	bl	34001448 <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b514:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b516:	2b04      	cmp	r3, #4
3400b518:	d14b      	bne.n	3400b5b2 <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400b51a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
3400b51c:	2200      	movs	r2, #0
3400b51e:	9300      	str	r3, [sp, #0]
3400b520:	2120      	movs	r1, #32
3400b522:	4633      	mov	r3, r6
3400b524:	4628      	mov	r0, r5
3400b526:	f7ff fc49 	bl	3400adbc <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b52a:	4606      	mov	r6, r0
3400b52c:	bb58      	cbnz	r0, 3400b586 <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3400b52e:	2388      	movs	r3, #136	@ 0x88
3400b530:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3400b532:	68a3      	ldr	r3, [r4, #8]
3400b534:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400b538:	d128      	bne.n	3400b58c <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3400b53a:	682a      	ldr	r2, [r5, #0]
3400b53c:	6813      	ldr	r3, [r2, #0]
3400b53e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3400b542:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3400b544:	6823      	ldr	r3, [r4, #0]
3400b546:	2b08      	cmp	r3, #8
3400b548:	d112      	bne.n	3400b570 <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3400b54a:	6863      	ldr	r3, [r4, #4]
3400b54c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b550:	d304      	bcc.n	3400b55c <HAL_XSPI_MemoryMapped+0x78>
3400b552:	f240 71e5 	movw	r1, #2021	@ 0x7e5
3400b556:	4819      	ldr	r0, [pc, #100]	@ (3400b5bc <HAL_XSPI_MemoryMapped+0xd8>)
3400b558:	f7f5 ff76 	bl	34001448 <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3400b55c:	682b      	ldr	r3, [r5, #0]
3400b55e:	6862      	ldr	r2, [r4, #4]
3400b560:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3400b564:	2210      	movs	r2, #16
3400b566:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3400b568:	681a      	ldr	r2, [r3, #0]
3400b56a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3400b56e:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3400b570:	682a      	ldr	r2, [r5, #0]
3400b572:	6821      	ldr	r1, [r4, #0]
3400b574:	6813      	ldr	r3, [r2, #0]
3400b576:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b57a:	f023 0308 	bic.w	r3, r3, #8
3400b57e:	430b      	orrs	r3, r1
3400b580:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
3400b584:	6013      	str	r3, [r2, #0]
}
3400b586:	4630      	mov	r0, r6
3400b588:	b002      	add	sp, #8
3400b58a:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
3400b58c:	68e3      	ldr	r3, [r4, #12]
3400b58e:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3400b592:	d004      	beq.n	3400b59e <HAL_XSPI_MemoryMapped+0xba>
3400b594:	f240 71dd 	movw	r1, #2013	@ 0x7dd
3400b598:	4808      	ldr	r0, [pc, #32]	@ (3400b5bc <HAL_XSPI_MemoryMapped+0xd8>)
3400b59a:	f7f5 ff55 	bl	34001448 <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3400b59e:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
3400b5a2:	6829      	ldr	r1, [r5, #0]
3400b5a4:	4303      	orrs	r3, r0
3400b5a6:	680a      	ldr	r2, [r1, #0]
3400b5a8:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
3400b5ac:	4313      	orrs	r3, r2
3400b5ae:	600b      	str	r3, [r1, #0]
3400b5b0:	e7c8      	b.n	3400b544 <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b5b2:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b5b4:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b5b6:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b5b8:	e7e5      	b.n	3400b586 <HAL_XSPI_MemoryMapped+0xa2>
3400b5ba:	bf00      	nop
3400b5bc:	34010de3 	.word	0x34010de3

3400b5c0 <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b5c0:	29ff      	cmp	r1, #255	@ 0xff
{
3400b5c2:	b538      	push	{r3, r4, r5, lr}
3400b5c4:	4604      	mov	r4, r0
3400b5c6:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b5c8:	d904      	bls.n	3400b5d4 <HAL_XSPI_SetClockPrescaler+0x14>
3400b5ca:	f640 2193 	movw	r1, #2707	@ 0xa93
3400b5ce:	4809      	ldr	r0, [pc, #36]	@ (3400b5f4 <HAL_XSPI_SetClockPrescaler+0x34>)
3400b5d0:	f7f5 ff3a 	bl	34001448 <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3400b5d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400b5d6:	f010 0008 	ands.w	r0, r0, #8
3400b5da:	d107      	bne.n	3400b5ec <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b5dc:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
3400b5de:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b5e0:	68d3      	ldr	r3, [r2, #12]
3400b5e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400b5e6:	432b      	orrs	r3, r5
3400b5e8:	60d3      	str	r3, [r2, #12]
}
3400b5ea:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b5ec:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b5ee:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b5f0:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b5f2:	e7fa      	b.n	3400b5ea <HAL_XSPI_SetClockPrescaler+0x2a>
3400b5f4:	34010de3 	.word	0x34010de3

3400b5f8 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
3400b5f8:	2a02      	cmp	r2, #2
3400b5fa:	d14a      	bne.n	3400b692 <USB_SetTurnaroundTime+0x9a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
3400b5fc:	4b27      	ldr	r3, [pc, #156]	@ (3400b69c <USB_SetTurnaroundTime+0xa4>)
3400b5fe:	4a28      	ldr	r2, [pc, #160]	@ (3400b6a0 <USB_SetTurnaroundTime+0xa8>)
3400b600:	440b      	add	r3, r1
3400b602:	4293      	cmp	r3, r2
3400b604:	d939      	bls.n	3400b67a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
3400b606:	4b27      	ldr	r3, [pc, #156]	@ (3400b6a4 <USB_SetTurnaroundTime+0xac>)
3400b608:	4a27      	ldr	r2, [pc, #156]	@ (3400b6a8 <USB_SetTurnaroundTime+0xb0>)
3400b60a:	440b      	add	r3, r1
3400b60c:	4293      	cmp	r3, r2
3400b60e:	d936      	bls.n	3400b67e <USB_SetTurnaroundTime+0x86>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
3400b610:	4a26      	ldr	r2, [pc, #152]	@ (3400b6ac <USB_SetTurnaroundTime+0xb4>)
3400b612:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
3400b616:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
3400b61a:	4293      	cmp	r3, r2
3400b61c:	d931      	bls.n	3400b682 <USB_SetTurnaroundTime+0x8a>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
3400b61e:	4a24      	ldr	r2, [pc, #144]	@ (3400b6b0 <USB_SetTurnaroundTime+0xb8>)
3400b620:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
3400b624:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
3400b628:	4293      	cmp	r3, r2
3400b62a:	d32c      	bcc.n	3400b686 <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
3400b62c:	4b21      	ldr	r3, [pc, #132]	@ (3400b6b4 <USB_SetTurnaroundTime+0xbc>)
3400b62e:	4a22      	ldr	r2, [pc, #136]	@ (3400b6b8 <USB_SetTurnaroundTime+0xc0>)
3400b630:	440b      	add	r3, r1
3400b632:	4293      	cmp	r3, r2
3400b634:	d929      	bls.n	3400b68a <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
3400b636:	4b21      	ldr	r3, [pc, #132]	@ (3400b6bc <USB_SetTurnaroundTime+0xc4>)
3400b638:	4a21      	ldr	r2, [pc, #132]	@ (3400b6c0 <USB_SetTurnaroundTime+0xc8>)
3400b63a:	440b      	add	r3, r1
3400b63c:	4293      	cmp	r3, r2
3400b63e:	d326      	bcc.n	3400b68e <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
3400b640:	4b20      	ldr	r3, [pc, #128]	@ (3400b6c4 <USB_SetTurnaroundTime+0xcc>)
3400b642:	4a21      	ldr	r2, [pc, #132]	@ (3400b6c8 <USB_SetTurnaroundTime+0xd0>)
3400b644:	440b      	add	r3, r1
3400b646:	4293      	cmp	r3, r2
3400b648:	d323      	bcc.n	3400b692 <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
3400b64a:	4a20      	ldr	r2, [pc, #128]	@ (3400b6cc <USB_SetTurnaroundTime+0xd4>)
3400b64c:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
3400b650:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
3400b654:	4293      	cmp	r3, r2
3400b656:	d31e      	bcc.n	3400b696 <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
3400b658:	4b1d      	ldr	r3, [pc, #116]	@ (3400b6d0 <USB_SetTurnaroundTime+0xd8>)
3400b65a:	4a1e      	ldr	r2, [pc, #120]	@ (3400b6d4 <USB_SetTurnaroundTime+0xdc>)
3400b65c:	440b      	add	r3, r1
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
3400b65e:	4293      	cmp	r3, r2
3400b660:	bf2c      	ite	cs
3400b662:	2306      	movcs	r3, #6
3400b664:	2307      	movcc	r3, #7
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
3400b666:	68c2      	ldr	r2, [r0, #12]
3400b668:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
3400b66c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
3400b66e:	68c2      	ldr	r2, [r0, #12]
3400b670:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
3400b674:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
3400b676:	2000      	movs	r0, #0
3400b678:	4770      	bx	lr
      UsbTrd = 0xFU;
3400b67a:	230f      	movs	r3, #15
3400b67c:	e7f3      	b.n	3400b666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
3400b67e:	230e      	movs	r3, #14
3400b680:	e7f1      	b.n	3400b666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
3400b682:	230d      	movs	r3, #13
3400b684:	e7ef      	b.n	3400b666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
3400b686:	230c      	movs	r3, #12
3400b688:	e7ed      	b.n	3400b666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
3400b68a:	230b      	movs	r3, #11
3400b68c:	e7eb      	b.n	3400b666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
3400b68e:	230a      	movs	r3, #10
3400b690:	e7e9      	b.n	3400b666 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
3400b692:	2309      	movs	r3, #9
3400b694:	e7e7      	b.n	3400b666 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
3400b696:	2308      	movs	r3, #8
3400b698:	e7e5      	b.n	3400b666 <USB_SetTurnaroundTime+0x6e>
3400b69a:	bf00      	nop
3400b69c:	ff275340 	.word	0xff275340
3400b6a0:	000c34ff 	.word	0x000c34ff
3400b6a4:	ff1b1e40 	.word	0xff1b1e40
3400b6a8:	000f423f 	.word	0x000f423f
3400b6ac:	00124f7f 	.word	0x00124f7f
3400b6b0:	0013d620 	.word	0x0013d620
3400b6b4:	fee5b660 	.word	0xfee5b660
3400b6b8:	0016e35f 	.word	0x0016e35f
3400b6bc:	feced300 	.word	0xfeced300
3400b6c0:	001b7740 	.word	0x001b7740
3400b6c4:	feb35bc0 	.word	0xfeb35bc0
3400b6c8:	002191c0 	.word	0x002191c0
3400b6cc:	00387520 	.word	0x00387520
3400b6d0:	fe5954e0 	.word	0xfe5954e0
3400b6d4:	00419ce0 	.word	0x00419ce0

3400b6d8 <USB_FlushTxFifo>:
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  __IO uint32_t count = 0U;
3400b6d8:	2300      	movs	r3, #0
{
3400b6da:	4602      	mov	r2, r0
3400b6dc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b6de:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b6e0:	9b01      	ldr	r3, [sp, #4]
3400b6e2:	3301      	adds	r3, #1
3400b6e4:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b6e6:	9b01      	ldr	r3, [sp, #4]
3400b6e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b6ec:	d815      	bhi.n	3400b71a <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b6ee:	6913      	ldr	r3, [r2, #16]
3400b6f0:	2b00      	cmp	r3, #0
3400b6f2:	daf5      	bge.n	3400b6e0 <USB_FlushTxFifo+0x8>

  /* Flush TX Fifo */
  count = 0U;
3400b6f4:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b6f6:	0189      	lsls	r1, r1, #6
3400b6f8:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
3400b6fc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b6fe:	6111      	str	r1, [r2, #16]

  do
  {
    count++;
3400b700:	9b01      	ldr	r3, [sp, #4]
3400b702:	3301      	adds	r3, #1
3400b704:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b706:	9b01      	ldr	r3, [sp, #4]
3400b708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b70c:	d805      	bhi.n	3400b71a <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
3400b70e:	6910      	ldr	r0, [r2, #16]
3400b710:	f010 0020 	ands.w	r0, r0, #32
3400b714:	d1f4      	bne.n	3400b700 <USB_FlushTxFifo+0x28>

  return HAL_OK;
}
3400b716:	b002      	add	sp, #8
3400b718:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b71a:	2003      	movs	r0, #3
3400b71c:	e7fb      	b.n	3400b716 <USB_FlushTxFifo+0x3e>

3400b71e <USB_FlushRxFifo>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
3400b71e:	2300      	movs	r3, #0
{
3400b720:	4602      	mov	r2, r0
3400b722:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b724:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b726:	9b01      	ldr	r3, [sp, #4]
3400b728:	3301      	adds	r3, #1
3400b72a:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b72c:	9b01      	ldr	r3, [sp, #4]
3400b72e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b732:	d813      	bhi.n	3400b75c <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b734:	6913      	ldr	r3, [r2, #16]
3400b736:	2b00      	cmp	r3, #0
3400b738:	daf5      	bge.n	3400b726 <USB_FlushRxFifo+0x8>

  /* Flush RX Fifo */
  count = 0U;
3400b73a:	2300      	movs	r3, #0
3400b73c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
3400b73e:	2310      	movs	r3, #16
3400b740:	6113      	str	r3, [r2, #16]

  do
  {
    count++;
3400b742:	9b01      	ldr	r3, [sp, #4]
3400b744:	3301      	adds	r3, #1
3400b746:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b748:	9b01      	ldr	r3, [sp, #4]
3400b74a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b74e:	d805      	bhi.n	3400b75c <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
3400b750:	6910      	ldr	r0, [r2, #16]
3400b752:	f010 0010 	ands.w	r0, r0, #16
3400b756:	d1f4      	bne.n	3400b742 <USB_FlushRxFifo+0x24>

  return HAL_OK;
}
3400b758:	b002      	add	sp, #8
3400b75a:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b75c:	2003      	movs	r0, #3
3400b75e:	e7fb      	b.n	3400b758 <USB_FlushRxFifo+0x3a>

3400b760 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
3400b760:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
3400b764:	f013 0006 	ands.w	r0, r3, #6
3400b768:	d004      	beq.n	3400b774 <USB_GetDevSpeed+0x14>
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
3400b76a:	f013 0f02 	tst.w	r3, #2
3400b76e:	bf14      	ite	ne
3400b770:	2002      	movne	r0, #2
3400b772:	200f      	moveq	r0, #15
  }

  return speed;
}
3400b774:	4770      	bx	lr

3400b776 <USB_ActivateEndpoint>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b776:	2201      	movs	r2, #1
{
3400b778:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
3400b77a:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b77c:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
3400b780:	f004 050f 	and.w	r5, r4, #15
3400b784:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
3400b786:	784d      	ldrb	r5, [r1, #1]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b788:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
3400b78c:	2d01      	cmp	r5, #1
3400b78e:	d119      	bne.n	3400b7c4 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b790:	69dd      	ldr	r5, [r3, #28]
3400b792:	432a      	orrs	r2, r5
3400b794:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b796:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b79a:	041a      	lsls	r2, r3, #16
3400b79c:	d410      	bmi.n	3400b7c0 <USB_ActivateEndpoint+0x4a>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b79e:	688a      	ldr	r2, [r1, #8]
3400b7a0:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
3400b7a4:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
3400b7a8:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b7aa:	432b      	orrs	r3, r5
3400b7ac:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b7b0:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
3400b7b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b7b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b7bc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
3400b7c0:	2000      	movs	r0, #0
3400b7c2:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
3400b7c4:	69dc      	ldr	r4, [r3, #28]
3400b7c6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
3400b7ca:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
3400b7cc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b7d0:	041b      	lsls	r3, r3, #16
3400b7d2:	d4f5      	bmi.n	3400b7c0 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b7d4:	688b      	ldr	r3, [r1, #8]
3400b7d6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b7da:	f3c3 030a 	ubfx	r3, r3, #0, #11
3400b7de:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
3400b7e0:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b7e2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b7e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b7ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b7ee:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b7f2:	e7e5      	b.n	3400b7c0 <USB_ActivateEndpoint+0x4a>

3400b7f4 <USB_EPStopXfer>:
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  __IO uint32_t count = 0U;
3400b7f4:	2300      	movs	r3, #0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* IN endpoint */
  if (ep->is_in == 1U)
3400b7f6:	784a      	ldrb	r2, [r1, #1]
{
3400b7f8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b7fa:	9301      	str	r3, [sp, #4]
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b7fc:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400b7fe:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b800:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
3400b804:	d11e      	bne.n	3400b844 <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b806:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
3400b80a:	58c2      	ldr	r2, [r0, r3]
3400b80c:	18c1      	adds	r1, r0, r3
3400b80e:	2a00      	cmp	r2, #0
3400b810:	db02      	blt.n	3400b818 <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
3400b812:	2000      	movs	r0, #0
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
    }
  }

  return ret;
}
3400b814:	b002      	add	sp, #8
3400b816:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
3400b818:	58c2      	ldr	r2, [r0, r3]
3400b81a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b81e:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
3400b820:	58c2      	ldr	r2, [r0, r3]
3400b822:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b826:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b828:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b82c:	9b01      	ldr	r3, [sp, #4]
3400b82e:	3301      	adds	r3, #1
3400b830:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b832:	9b01      	ldr	r3, [sp, #4]
3400b834:	4293      	cmp	r3, r2
3400b836:	d901      	bls.n	3400b83c <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
3400b838:	2001      	movs	r0, #1
3400b83a:	e7eb      	b.n	3400b814 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
3400b83c:	680b      	ldr	r3, [r1, #0]
3400b83e:	2b00      	cmp	r3, #0
3400b840:	dbf4      	blt.n	3400b82c <USB_EPStopXfer+0x38>
3400b842:	e7e6      	b.n	3400b812 <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400b844:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
3400b848:	58c2      	ldr	r2, [r0, r3]
3400b84a:	18c1      	adds	r1, r0, r3
3400b84c:	2a00      	cmp	r2, #0
3400b84e:	dae0      	bge.n	3400b812 <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
3400b850:	58c2      	ldr	r2, [r0, r3]
3400b852:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b856:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
3400b858:	58c2      	ldr	r2, [r0, r3]
3400b85a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b85e:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b860:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b864:	9b01      	ldr	r3, [sp, #4]
3400b866:	3301      	adds	r3, #1
3400b868:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b86a:	9b01      	ldr	r3, [sp, #4]
3400b86c:	4293      	cmp	r3, r2
3400b86e:	d8e3      	bhi.n	3400b838 <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
3400b870:	680b      	ldr	r3, [r1, #0]
3400b872:	2b00      	cmp	r3, #0
3400b874:	dbf6      	blt.n	3400b864 <USB_EPStopXfer+0x70>
3400b876:	e7cc      	b.n	3400b812 <USB_EPStopXfer+0x1e>

3400b878 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
3400b878:	b510      	push	{r4, lr}
3400b87a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t *pSrc = src;
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
3400b87e:	b93c      	cbnz	r4, 3400b890 <USB_WritePacket+0x18>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
3400b880:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b882:	3201      	adds	r2, #1
3400b884:	089b      	lsrs	r3, r3, #2
3400b886:	eb00 3002 	add.w	r0, r0, r2, lsl #12
3400b88a:	3301      	adds	r3, #1
    for (i = 0U; i < count32b; i++)
3400b88c:	3b01      	subs	r3, #1
3400b88e:	d101      	bne.n	3400b894 <USB_WritePacket+0x1c>
      pSrc++;
    }
  }

  return HAL_OK;
}
3400b890:	2000      	movs	r0, #0
3400b892:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b894:	f851 2b04 	ldr.w	r2, [r1], #4
3400b898:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
3400b89a:	e7f7      	b.n	3400b88c <USB_WritePacket+0x14>

3400b89c <USB_EPStartXfer>:
{
3400b89c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
3400b8a0:	784b      	ldrb	r3, [r1, #1]
{
3400b8a2:	4616      	mov	r6, r2
  uint32_t epnum = (uint32_t)ep->num;
3400b8a4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
3400b8a6:	2b01      	cmp	r3, #1
    if (ep->xfer_len == 0U)
3400b8a8:	690c      	ldr	r4, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b8aa:	790f      	ldrb	r7, [r1, #4]
3400b8ac:	f8df e1e8 	ldr.w	lr, [pc, #488]	@ 3400ba98 <USB_EPStartXfer+0x1fc>
3400b8b0:	f8df 81e8 	ldr.w	r8, [pc, #488]	@ 3400ba9c <USB_EPStartXfer+0x200>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b8b4:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
3400b8b8:	f040 8097 	bne.w	3400b9ea <USB_EPStartXfer+0x14e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b8bc:	f505 6c10 	add.w	ip, r5, #2304	@ 0x900
3400b8c0:	f8dc 3010 	ldr.w	r3, [ip, #16]
    if (ep->xfer_len == 0U)
3400b8c4:	bb74      	cbnz	r4, 3400b924 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b8c6:	ea03 030e 	and.w	r3, r3, lr
3400b8ca:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b8ce:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b8d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
3400b8d6:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b8da:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b8de:	ea03 0308 	and.w	r3, r3, r8
    if (dma == 1U)
3400b8e2:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b8e4:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400b8e8:	d157      	bne.n	3400b99a <USB_EPStartXfer+0xfe>
      if ((uint32_t)ep->dma_addr != 0U)
3400b8ea:	69cb      	ldr	r3, [r1, #28]
3400b8ec:	b10b      	cbz	r3, 3400b8f2 <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
3400b8ee:	f8cc 3014 	str.w	r3, [ip, #20]
      if (ep->type == EP_TYPE_ISOC)
3400b8f2:	2f01      	cmp	r7, #1
3400b8f4:	d10c      	bne.n	3400b910 <USB_EPStartXfer+0x74>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b8f6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400b8fa:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b8fe:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b902:	bf0c      	ite	eq
3400b904:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b908:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400b90c:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b910:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b914:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b918:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
}
3400b91c:	2000      	movs	r0, #0
3400b91e:	b002      	add	sp, #8
3400b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b924:	ea03 0308 	and.w	r3, r3, r8
3400b928:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b92c:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b930:	ea03 030e 	and.w	r3, r3, lr
3400b934:	f8cc 3010 	str.w	r3, [ip, #16]
        if (ep->xfer_len > ep->maxpacket)
3400b938:	688b      	ldr	r3, [r1, #8]
      if (epnum == 0U)
3400b93a:	b97a      	cbnz	r2, 3400b95c <USB_EPStartXfer+0xc0>
        if (ep->xfer_len > ep->maxpacket)
3400b93c:	42a3      	cmp	r3, r4
          ep->xfer_len = ep->maxpacket;
3400b93e:	bf38      	it	cc
3400b940:	610b      	strcc	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b942:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b946:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b94a:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b94e:	690b      	ldr	r3, [r1, #16]
3400b950:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b954:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b958:	4323      	orrs	r3, r4
3400b95a:	e7c2      	b.n	3400b8e2 <USB_EPStartXfer+0x46>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400b95c:	441c      	add	r4, r3
3400b95e:	3c01      	subs	r4, #1
3400b960:	fbb4 f4f3 	udiv	r4, r4, r3
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b964:	4b4b      	ldr	r3, [pc, #300]	@ (3400ba94 <USB_EPStartXfer+0x1f8>)
3400b966:	f8dc e010 	ldr.w	lr, [ip, #16]
3400b96a:	fa1f f884 	uxth.w	r8, r4
3400b96e:	ea03 44c4 	and.w	r4, r3, r4, lsl #19
3400b972:	ea44 040e 	orr.w	r4, r4, lr
        if (ep->type == EP_TYPE_ISOC)
3400b976:	2f01      	cmp	r7, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b978:	f8cc 4010 	str.w	r4, [ip, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b97c:	d1e7      	bne.n	3400b94e <USB_EPStartXfer+0xb2>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
3400b97e:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b982:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
3400b986:	f8cc 3010 	str.w	r3, [ip, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b98a:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b98e:	ea4f 7348 	mov.w	r3, r8, lsl #29
3400b992:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
3400b996:	4323      	orrs	r3, r4
3400b998:	e7d7      	b.n	3400b94a <USB_EPStartXfer+0xae>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b99a:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
3400b99e:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b9a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b9a4:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
3400b9a8:	690b      	ldr	r3, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
3400b9aa:	d00b      	beq.n	3400b9c4 <USB_EPStartXfer+0x128>
        if (ep->xfer_len > 0U)
3400b9ac:	2b00      	cmp	r3, #0
3400b9ae:	d0b5      	beq.n	3400b91c <USB_EPStartXfer+0x80>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
3400b9b0:	2301      	movs	r3, #1
3400b9b2:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
3400b9b6:	f002 020f 	and.w	r2, r2, #15
3400b9ba:	4093      	lsls	r3, r2
3400b9bc:	430b      	orrs	r3, r1
3400b9be:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
3400b9c2:	e7ab      	b.n	3400b91c <USB_EPStartXfer+0x80>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b9c4:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b9c8:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b9ca:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b9ce:	f8d5 4900 	ldr.w	r4, [r5, #2304]	@ 0x900
3400b9d2:	bf0c      	ite	eq
3400b9d4:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b9d8:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
3400b9dc:	f8c5 4900 	str.w	r4, [r5, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b9e0:	9600      	str	r6, [sp, #0]
3400b9e2:	68c9      	ldr	r1, [r1, #12]
3400b9e4:	f7ff ff48 	bl	3400b878 <USB_WritePacket>
3400b9e8:	e798      	b.n	3400b91c <USB_EPStartXfer+0x80>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
3400b9ea:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
3400b9ee:	f505 6c30 	add.w	ip, r5, #2816	@ 0xb00
3400b9f2:	ea03 0308 	and.w	r3, r3, r8
3400b9f6:	f8cc 3010 	str.w	r3, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
3400b9fa:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b9fe:	ea03 030e 	and.w	r3, r3, lr
3400ba02:	f8cc 3010 	str.w	r3, [ip, #16]
        ep->xfer_len = ep->maxpacket;
3400ba06:	688b      	ldr	r3, [r1, #8]
    if (epnum == 0U)
3400ba08:	bb5a      	cbnz	r2, 3400ba62 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
3400ba0a:	b104      	cbz	r4, 3400ba0e <USB_EPStartXfer+0x172>
        ep->xfer_len = ep->maxpacket;
3400ba0c:	610b      	str	r3, [r1, #16]
      ep->xfer_size = ep->maxpacket;
3400ba0e:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
3400ba10:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400ba14:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400ba18:	4313      	orrs	r3, r2
3400ba1a:	f8cc 3010 	str.w	r3, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400ba1e:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400ba22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    if (dma == 1U)
3400ba26:	2e01      	cmp	r6, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400ba28:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400ba2c:	d103      	bne.n	3400ba36 <USB_EPStartXfer+0x19a>
      if ((uint32_t)ep->xfer_buff != 0U)
3400ba2e:	68cb      	ldr	r3, [r1, #12]
3400ba30:	b10b      	cbz	r3, 3400ba36 <USB_EPStartXfer+0x19a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
3400ba32:	f8cc 3014 	str.w	r3, [ip, #20]
    if (ep->type == EP_TYPE_ISOC)
3400ba36:	2f01      	cmp	r7, #1
3400ba38:	d10c      	bne.n	3400ba54 <USB_EPStartXfer+0x1b8>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400ba3a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400ba3e:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
3400ba42:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400ba46:	bf0c      	ite	eq
3400ba48:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
3400ba4c:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400ba50:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
3400ba54:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400ba58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400ba5c:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
3400ba60:	e75c      	b.n	3400b91c <USB_EPStartXfer+0x80>
      if (ep->xfer_len == 0U)
3400ba62:	2c00      	cmp	r4, #0
3400ba64:	d0d4      	beq.n	3400ba10 <USB_EPStartXfer+0x174>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400ba66:	441c      	add	r4, r3
3400ba68:	3c01      	subs	r4, #1
3400ba6a:	fbb4 f4f3 	udiv	r4, r4, r3
3400ba6e:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
3400ba70:	4363      	muls	r3, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400ba72:	4a08      	ldr	r2, [pc, #32]	@ (3400ba94 <USB_EPStartXfer+0x1f8>)
3400ba74:	f8dc e010 	ldr.w	lr, [ip, #16]
3400ba78:	ea02 42c4 	and.w	r2, r2, r4, lsl #19
3400ba7c:	ea42 020e 	orr.w	r2, r2, lr
        ep->xfer_size = ep->maxpacket * pktcnt;
3400ba80:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400ba82:	f8cc 2010 	str.w	r2, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400ba86:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400ba8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400ba8e:	4313      	orrs	r3, r2
3400ba90:	e7c9      	b.n	3400ba26 <USB_EPStartXfer+0x18a>
3400ba92:	bf00      	nop
3400ba94:	1ff80000 	.word	0x1ff80000
3400ba98:	e007ffff 	.word	0xe007ffff
3400ba9c:	fff80000 	.word	0xfff80000

3400baa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
3400baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
  uint16_t remaining_bytes = len % 4U;

  for (i = 0U; i < count32b; i++)
3400baa2:	2500      	movs	r5, #0
  uint32_t count32b = (uint32_t)len >> 2U;
3400baa4:	0894      	lsrs	r4, r2, #2
  uint16_t remaining_bytes = len % 4U;
3400baa6:	42ac      	cmp	r4, r5
{
3400baa8:	4603      	mov	r3, r0
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400baaa:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
3400baae:	f104 0001 	add.w	r0, r4, #1
3400bab2:	bf08      	it	eq
3400bab4:	2001      	moveq	r0, #1
  uint16_t remaining_bytes = len % 4U;
3400bab6:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
3400baba:	3801      	subs	r0, #1
3400babc:	d110      	bne.n	3400bae0 <USB_ReadPacket+0x40>
3400babe:	eb01 0084 	add.w	r0, r1, r4, lsl #2
    pDest++;
    pDest++;
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
3400bac2:	b162      	cbz	r2, 3400bade <USB_ReadPacket+0x3e>
  {
    i = 0U;
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
3400bac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400bac8:	681c      	ldr	r4, [r3, #0]
    i = 0U;
3400baca:	2300      	movs	r3, #0

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
3400bacc:	00d9      	lsls	r1, r3, #3
3400bace:	fa24 f101 	lsr.w	r1, r4, r1
3400bad2:	54c1      	strb	r1, [r0, r3]
      i++;
3400bad4:	3301      	adds	r3, #1
      pDest++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
3400bad6:	b299      	uxth	r1, r3
3400bad8:	428a      	cmp	r2, r1
3400bada:	d1f7      	bne.n	3400bacc <USB_ReadPacket+0x2c>
3400badc:	4410      	add	r0, r2
  }

  return ((void *)pDest);
}
3400bade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400bae0:	6837      	ldr	r7, [r6, #0]
3400bae2:	f841 7025 	str.w	r7, [r1, r5, lsl #2]
  for (i = 0U; i < count32b; i++)
3400bae6:	3501      	adds	r5, #1
3400bae8:	e7e7      	b.n	3400baba <USB_ReadPacket+0x1a>

3400baea <USB_EPSetStall>:
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
3400baea:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
3400baec:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400baee:	2a01      	cmp	r2, #1
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400baf0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
3400baf4:	d112      	bne.n	3400bb1c <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400baf6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
3400bafa:	2a00      	cmp	r2, #0
3400bafc:	db06      	blt.n	3400bb0c <USB_EPSetStall+0x22>
3400bafe:	b12b      	cbz	r3, 3400bb0c <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
3400bb00:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400bb04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400bb08:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
3400bb0c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400bb10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400bb14:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
  }

  return HAL_OK;
}
3400bb18:	2000      	movs	r0, #0
3400bb1a:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
3400bb1c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400bb20:	2a00      	cmp	r2, #0
3400bb22:	db06      	blt.n	3400bb32 <USB_EPSetStall+0x48>
3400bb24:	b12b      	cbz	r3, 3400bb32 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
3400bb26:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400bb2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400bb2e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
3400bb32:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400bb36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400bb3a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400bb3e:	e7eb      	b.n	3400bb18 <USB_EPSetStall+0x2e>

3400bb40 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
3400bb40:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
3400bb42:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
3400bb44:	4010      	ands	r0, r2
3400bb46:	4770      	bx	lr

3400bb48 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400bb48:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400bb4c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400bb50:	69c0      	ldr	r0, [r0, #28]
3400bb52:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
3400bb54:	0c00      	lsrs	r0, r0, #16
3400bb56:	4770      	bx	lr

3400bb58 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400bb58:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400bb5c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400bb60:	69c0      	ldr	r0, [r0, #28]
3400bb62:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
3400bb64:	b280      	uxth	r0, r0
3400bb66:	4770      	bx	lr

3400bb68 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400bb68:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400bb6c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400bb70:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400bb74:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
3400bb76:	4010      	ands	r0, r2
3400bb78:	4770      	bx	lr

3400bb7a <USB_ReadDevInEPInterrupt>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
3400bb7a:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
3400bb7e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400bb82:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400bb86:	f001 010f 	and.w	r1, r1, #15
3400bb8a:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400bb8c:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400bb90:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400bb92:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400bb94:	b2db      	uxtb	r3, r3
3400bb96:	4313      	orrs	r3, r2

  return tmpreg;
}
3400bb98:	4018      	ands	r0, r3
3400bb9a:	4770      	bx	lr

3400bb9c <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
3400bb9c:	6940      	ldr	r0, [r0, #20]
}
3400bb9e:	f000 0001 	and.w	r0, r0, #1
3400bba2:	4770      	bx	lr

3400bba4 <USB_ActivateSetup>:
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
3400bba4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400bba8:	f36f 030a 	bfc	r3, #0, #11
3400bbac:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
3400bbb0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
3400bbb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3400bbb8:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804

  return HAL_OK;
}
3400bbbc:	2000      	movs	r0, #0
3400bbbe:	4770      	bx	lr

3400bbc0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
3400bbc0:	b530      	push	{r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
3400bbc2:	6c05      	ldr	r5, [r0, #64]	@ 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400bbc4:	4c10      	ldr	r4, [pc, #64]	@ (3400bc08 <USB_EP0_OutStart+0x48>)
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400bbc6:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400bbca:	42a5      	cmp	r5, r4
3400bbcc:	d903      	bls.n	3400bbd6 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400bbce:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
3400bbd2:	2c00      	cmp	r4, #0
3400bbd4:	db16      	blt.n	3400bc04 <USB_EP0_OutStart+0x44>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
3400bbd6:	2400      	movs	r4, #0
3400bbd8:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400bbda:	691c      	ldr	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;

  if (dma == 1U)
3400bbdc:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400bbde:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
3400bbe2:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
3400bbe4:	691c      	ldr	r4, [r3, #16]
3400bbe6:	f044 0418 	orr.w	r4, r4, #24
3400bbea:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
3400bbec:	691c      	ldr	r4, [r3, #16]
3400bbee:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
3400bbf2:	611c      	str	r4, [r3, #16]
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
3400bbf4:	bf01      	itttt	eq
3400bbf6:	615a      	streq	r2, [r3, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
3400bbf8:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	@ 0xb00
3400bbfc:	f043 2380 	orreq.w	r3, r3, #2147516416	@ 0x80008000
3400bc00:	f8c0 3b00 	streq.w	r3, [r0, #2816]	@ 0xb00
  }

  return HAL_OK;
}
3400bc04:	2000      	movs	r0, #0
3400bc06:	bd30      	pop	{r4, r5, pc}
3400bc08:	4f54300a 	.word	0x4f54300a

3400bc0c <CMW_CAMERA_GetDCMIPPHandle>:
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
    return &hcamera_dcmipp;
}
3400bc0c:	4800      	ldr	r0, [pc, #0]	@ (3400bc10 <CMW_CAMERA_GetDCMIPPHandle+0x4>)
3400bc0e:	4770      	bx	lr
3400bc10:	34012d78 	.word	0x34012d78

3400bc14 <CMW_CAMERA_PIPE_VsyncEventCallback>:
/**
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
3400bc14:	2000      	movs	r0, #0
3400bc16:	4770      	bx	lr

3400bc18 <CMW_CAMERA_PIPE_FrameEventCallback>:
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
  UNUSED(pipe);

  return HAL_OK;
}
3400bc18:	2000      	movs	r0, #0
3400bc1a:	4770      	bx	lr

3400bc1c <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
3400bc1c:	4b05      	ldr	r3, [pc, #20]	@ (3400bc34 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x18>)
{
3400bc1e:	b510      	push	{r4, lr}
  if(Camera_Drv.VsyncEventCallback != NULL)
3400bc20:	691b      	ldr	r3, [r3, #16]
{
3400bc22:	460c      	mov	r4, r1
  if(Camera_Drv.VsyncEventCallback != NULL)
3400bc24:	b10b      	cbz	r3, 3400bc2a <HAL_DCMIPP_PIPE_VsyncEventCallback+0xe>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
3400bc26:	4804      	ldr	r0, [pc, #16]	@ (3400bc38 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>)
3400bc28:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
3400bc2a:	4620      	mov	r0, r4
3400bc2c:	f7ff fff2 	bl	3400bc14 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
3400bc30:	bd10      	pop	{r4, pc}
3400bc32:	bf00      	nop
3400bc34:	34012d10 	.word	0x34012d10
3400bc38:	34012bcc 	.word	0x34012bcc

3400bc3c <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
3400bc3c:	4b05      	ldr	r3, [pc, #20]	@ (3400bc54 <HAL_DCMIPP_PIPE_FrameEventCallback+0x18>)
{
3400bc3e:	b510      	push	{r4, lr}
  if(Camera_Drv.FrameEventCallback != NULL)
3400bc40:	695b      	ldr	r3, [r3, #20]
{
3400bc42:	460c      	mov	r4, r1
  if(Camera_Drv.FrameEventCallback != NULL)
3400bc44:	b10b      	cbz	r3, 3400bc4a <HAL_DCMIPP_PIPE_FrameEventCallback+0xe>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
3400bc46:	4804      	ldr	r0, [pc, #16]	@ (3400bc58 <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>)
3400bc48:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
3400bc4a:	4620      	mov	r0, r4
3400bc4c:	f7ff ffe4 	bl	3400bc18 <CMW_CAMERA_PIPE_FrameEventCallback>
}
3400bc50:	bd10      	pop	{r4, pc}
3400bc52:	bf00      	nop
3400bc54:	34012d10 	.word	0x34012d10
3400bc58:	34012bcc 	.word	0x34012bcc

3400bc5c <DMA2D_IRQHandler>:
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(dma2d_current);
3400bc5c:	4b01      	ldr	r3, [pc, #4]	@ (3400bc64 <DMA2D_IRQHandler+0x8>)
3400bc5e:	6818      	ldr	r0, [r3, #0]
3400bc60:	f7f7 bac4 	b.w	340031ec <HAL_DMA2D_IRQHandler>
3400bc64:	34012d84 	.word	0x34012d84

3400bc68 <USB1_OTG_HS_IRQHandler>:
  HAL_NVIC_EnableIRQ(USB1_OTG_HS_IRQn);
}

void USB1_OTG_HS_IRQHandler(void)
{
  UVCL_IRQHandler();
3400bc68:	f000 b800 	b.w	3400bc6c <UVCL_IRQHandler>

3400bc6c <UVCL_IRQHandler>:
void UVCL_IRQHandler()
{
#if defined(UVCL_USBD_USE_THREADX) || defined(UVCL_USBD_USE_FREERTOS)
  UVCL_stm32_usbd_IRQHandler();
#elif defined(UVC_LIB_USE_USBX)
  UVCL_stm32_usbx_IRQHandler();
3400bc6c:	f000 b800 	b.w	3400bc70 <UVCL_stm32_usbx_IRQHandler>

3400bc70 <UVCL_stm32_usbx_IRQHandler>:
    __enable_irq();
}
#endif

void UVCL_stm32_usbx_IRQHandler()
{
3400bc70:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&uvcl_pcd_handle);
3400bc72:	4804      	ldr	r0, [pc, #16]	@ (3400bc84 <UVCL_stm32_usbx_IRQHandler+0x14>)
3400bc74:	f7f7 fe4e 	bl	34003914 <HAL_PCD_IRQHandler>
    assert(ret == pdTRUE);
    HAL_NVIC_DisableIRQ(irqn_type);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  }
#else
  ux_system_tasks_run();
3400bc78:	f000 fa76 	bl	3400c168 <_ux_system_tasks_run>
  ux_system_tasks_run();
#endif
#endif
}
3400bc7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ux_system_tasks_run();
3400bc80:	f000 ba72 	b.w	3400c168 <_ux_system_tasks_run>
3400bc84:	34012d88 	.word	0x34012d88

3400bc88 <HAL_PCD_SetupStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bc88:	4b24      	ldr	r3, [pc, #144]	@ (3400bd1c <HAL_PCD_SetupStageCallback+0x94>)
{
3400bc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bc8e:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bc90:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bc94:	69dd      	ldr	r5, [r3, #28]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bc96:	2208      	movs	r2, #8
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
3400bc98:	686c      	ldr	r4, [r5, #4]
{
3400bc9a:	4606      	mov	r6, r0
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bc9c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
3400bca0:	f000 fa96 	bl	3400c1d0 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bca4:	2301      	movs	r3, #1
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bca6:	2200      	movs	r2, #0
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bca8:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bcaa:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bcac:	63a2      	str	r2, [r4, #56]	@ 0x38
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bcae:	f023 030e 	bic.w	r3, r3, #14
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bcb2:	6462      	str	r2, [r4, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bcb4:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
3400bcb6:	f994 105c 	ldrsb.w	r1, [r4, #92]	@ 0x5c
3400bcba:	4291      	cmp	r1, r2
3400bcbc:	da04      	bge.n	3400bcc8 <HAL_PCD_SetupStageCallback+0x40>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
3400bcbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bcc2:	60ab      	str	r3, [r5, #8]
                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
            }
        }
    }
}
3400bcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
3400bcc8:	73aa      	strb	r2, [r5, #14]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
3400bcca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
3400bcce:	b92a      	cbnz	r2, 3400bcdc <HAL_PCD_SetupStageCallback+0x54>
3400bcd0:	f894 2063 	ldrb.w	r2, [r4, #99]	@ 0x63
3400bcd4:	b912      	cbnz	r2, 3400bcdc <HAL_PCD_SetupStageCallback+0x54>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bcd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3400bcda:	e7f2      	b.n	3400bcc2 <HAL_PCD_SetupStageCallback+0x3a>
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bcdc:	f104 0062 	add.w	r0, r4, #98	@ 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bce0:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bce2:	f000 fa7f 	bl	3400c1e4 <_ux_utility_short_get>
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bce6:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bcea:	4603      	mov	r3, r0
3400bcec:	f04f 0800 	mov.w	r8, #0
3400bcf0:	6360      	str	r0, [r4, #52]	@ 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bcf2:	d907      	bls.n	3400bd04 <HAL_PCD_SetupStageCallback+0x7c>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
3400bcf4:	4639      	mov	r1, r7
3400bcf6:	4628      	mov	r0, r5
3400bcf8:	f000 f94e 	bl	3400bf98 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bcfc:	68ab      	ldr	r3, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
3400bcfe:	f885 800c 	strb.w	r8, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bd02:	e7e8      	b.n	3400bcd6 <HAL_PCD_SetupStageCallback+0x4e>
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bd04:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bd06:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bd0a:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Receive(hpcd,
3400bd0c:	4630      	mov	r0, r6
3400bd0e:	7bb9      	ldrb	r1, [r7, #14]
3400bd10:	f7f7 fd75 	bl	340037fe <HAL_PCD_EP_Receive>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
3400bd14:	2302      	movs	r3, #2
3400bd16:	732b      	strb	r3, [r5, #12]
3400bd18:	e7d4      	b.n	3400bcc4 <HAL_PCD_SetupStageCallback+0x3c>
3400bd1a:	bf00      	nop
3400bd1c:	3401326c 	.word	0x3401326c

3400bd20 <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bd20:	4b2e      	ldr	r3, [pc, #184]	@ (3400bddc <HAL_PCD_DataInStageCallback+0xbc>)
{
3400bd22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bd26:	681b      	ldr	r3, [r3, #0]
3400bd28:	f001 020f 	and.w	r2, r1, #15
3400bd2c:	69df      	ldr	r7, [r3, #28]
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bd2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
3400bd32:	eb07 0282 	add.w	r2, r7, r2, lsl #2
{
3400bd36:	4606      	mov	r6, r0
3400bd38:	460d      	mov	r5, r1
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bd3a:	6854      	ldr	r4, [r2, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400bd3c:	2900      	cmp	r1, #0
3400bd3e:	d13b      	bne.n	3400bdb8 <HAL_PCD_DataInStageCallback+0x98>

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
3400bd40:	7b3b      	ldrb	r3, [r7, #12]
3400bd42:	2b01      	cmp	r3, #1
3400bd44:	d115      	bne.n	3400bd72 <HAL_PCD_DataInStageCallback+0x52>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bd46:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
3400bd4a:	460b      	mov	r3, r1
3400bd4c:	460a      	mov	r2, r1
3400bd4e:	f7f7 fd56 	bl	340037fe <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
3400bd52:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400bd54:	f8b8 0010 	ldrh.w	r0, [r8, #16]
3400bd58:	4281      	cmp	r1, r0
3400bd5a:	d81d      	bhi.n	3400bd98 <HAL_PCD_DataInStageCallback+0x78>
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
3400bd5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400bd5e:	2b01      	cmp	r3, #1
3400bd60:	d109      	bne.n	3400bd76 <HAL_PCD_DataInStageCallback+0x56>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
3400bd62:	462b      	mov	r3, r5
3400bd64:	462a      	mov	r2, r5
3400bd66:	4630      	mov	r0, r6
3400bd68:	f898 100e 	ldrb.w	r1, [r8, #14]
3400bd6c:	f7f7 fd6d 	bl	3400384a <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400bd70:	65a5      	str	r5, [r4, #88]	@ 0x58
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
3400bd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bd76:	2302      	movs	r3, #2
3400bd78:	6223      	str	r3, [r4, #32]
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400bd7a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bd7c:	6465      	str	r5, [r4, #68]	@ 0x44
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400bd7e:	63a3      	str	r3, [r4, #56]	@ 0x38
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bd80:	68bb      	ldr	r3, [r7, #8]
3400bd82:	f043 0308 	orr.w	r3, r3, #8
3400bd86:	60bb      	str	r3, [r7, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
3400bd88:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400bd8a:	b113      	cbz	r3, 3400bd92 <HAL_PCD_DataInStageCallback+0x72>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bd8c:	f104 0020 	add.w	r0, r4, #32
3400bd90:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
3400bd92:	2304      	movs	r3, #4
3400bd94:	733b      	strb	r3, [r7, #12]
3400bd96:	e7ec      	b.n	3400bd72 <HAL_PCD_DataInStageCallback+0x52>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bd98:	1a0b      	subs	r3, r1, r0
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
3400bd9a:	4283      	cmp	r3, r0
3400bd9c:	bf28      	it	cs
3400bd9e:	4603      	movcs	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bda0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400bda2:	1ac9      	subs	r1, r1, r3
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bda4:	4402      	add	r2, r0
                HAL_PCD_EP_Transmit(hpcd,
3400bda6:	4630      	mov	r0, r6
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bda8:	6322      	str	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400bdaa:	63e1      	str	r1, [r4, #60]	@ 0x3c
                HAL_PCD_EP_Transmit(hpcd,
3400bdac:	f898 100e 	ldrb.w	r1, [r8, #14]
}
3400bdb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bdb4:	f7f7 bd49 	b.w	3400384a <HAL_PCD_EP_Transmit>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400bdb8:	6da6      	ldr	r6, [r4, #88]	@ 0x58
3400bdba:	2300      	movs	r3, #0
            transfer_request -> ux_slave_transfer_request_requested_length)
3400bdbc:	6b65      	ldr	r5, [r4, #52]	@ 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400bdbe:	b126      	cbz	r6, 3400bdca <HAL_PCD_DataInStageCallback+0xaa>
3400bdc0:	b11d      	cbz	r5, 3400bdca <HAL_PCD_DataInStageCallback+0xaa>
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bdc2:	461a      	mov	r2, r3
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400bdc4:	65a3      	str	r3, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
3400bdc6:	63e3      	str	r3, [r4, #60]	@ 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bdc8:	e7f2      	b.n	3400bdb0 <HAL_PCD_DataInStageCallback+0x90>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bdca:	6463      	str	r3, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bdcc:	2302      	movs	r3, #2
3400bdce:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bdd0:	6893      	ldr	r3, [r2, #8]
            transfer_request -> ux_slave_transfer_request_actual_length =
3400bdd2:	63a5      	str	r5, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bdd4:	f043 0308 	orr.w	r3, r3, #8
3400bdd8:	6093      	str	r3, [r2, #8]
}
3400bdda:	e7ca      	b.n	3400bd72 <HAL_PCD_DataInStageCallback+0x52>
3400bddc:	3401326c 	.word	0x3401326c

3400bde0 <HAL_PCD_DataOutStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bde0:	4a23      	ldr	r2, [pc, #140]	@ (3400be70 <HAL_PCD_DataOutStageCallback+0x90>)
{
3400bde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bde6:	6812      	ldr	r2, [r2, #0]
3400bde8:	f001 050f 	and.w	r5, r1, #15
3400bdec:	69d6      	ldr	r6, [r2, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bdee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3400bdf2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
{
3400bdf6:	4607      	mov	r7, r0
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bdf8:	686c      	ldr	r4, [r5, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400bdfa:	bb61      	cbnz	r1, 3400be56 <HAL_PCD_DataOutStageCallback+0x76>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
3400bdfc:	7b33      	ldrb	r3, [r6, #12]
3400bdfe:	2b02      	cmp	r3, #2
3400be00:	d110      	bne.n	3400be24 <HAL_PCD_DataOutStageCallback+0x44>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
3400be02:	6aa5      	ldr	r5, [r4, #40]	@ 0x28

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400be04:	f7f7 fd19 	bl	3400383a <HAL_PCD_EP_GetRxCount>

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400be08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
                transfer_request -> ux_slave_transfer_request_requested_length)
3400be0a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400be0c:	4403      	add	r3, r0
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400be0e:	4293      	cmp	r3, r2
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400be10:	63a3      	str	r3, [r4, #56]	@ 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400be12:	d812      	bhi.n	3400be3a <HAL_PCD_DataOutStageCallback+0x5a>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
3400be14:	d002      	beq.n	3400be1c <HAL_PCD_DataOutStageCallback+0x3c>
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
3400be16:	8a2b      	ldrh	r3, [r5, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
3400be18:	4283      	cmp	r3, r0
3400be1a:	d005      	beq.n	3400be28 <HAL_PCD_DataOutStageCallback+0x48>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
3400be1c:	68b3      	ldr	r3, [r6, #8]
3400be1e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
3400be22:	60b3      	str	r3, [r6, #8]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
3400be24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400be28:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400be2a:	4638      	mov	r0, r7
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400be2c:	441a      	add	r2, r3
3400be2e:	6322      	str	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400be30:	7ba9      	ldrb	r1, [r5, #14]
}
3400be32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    HAL_PCD_EP_Receive(hpcd,
3400be36:	f7f7 bce2 	b.w	340037fe <HAL_PCD_EP_Receive>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
3400be3a:	2327      	movs	r3, #39	@ 0x27
3400be3c:	6463      	str	r3, [r4, #68]	@ 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400be3e:	68b3      	ldr	r3, [r6, #8]
3400be40:	f043 0308 	orr.w	r3, r3, #8
3400be44:	60b3      	str	r3, [r6, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
3400be46:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400be48:	2b00      	cmp	r3, #0
3400be4a:	d0eb      	beq.n	3400be24 <HAL_PCD_DataOutStageCallback+0x44>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400be4c:	f104 0020 	add.w	r0, r4, #32
}
3400be50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400be54:	4718      	bx	r3
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400be56:	f7f7 fcf0 	bl	3400383a <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400be5a:	2300      	movs	r3, #0
3400be5c:	6463      	str	r3, [r4, #68]	@ 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400be5e:	2302      	movs	r3, #2
3400be60:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400be62:	68ab      	ldr	r3, [r5, #8]
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400be64:	63a0      	str	r0, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400be66:	f043 0308 	orr.w	r3, r3, #8
3400be6a:	60ab      	str	r3, [r5, #8]
}
3400be6c:	e7da      	b.n	3400be24 <HAL_PCD_DataOutStageCallback+0x44>
3400be6e:	bf00      	nop
3400be70:	3401326c 	.word	0x3401326c

3400be74 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
3400be74:	b538      	push	{r3, r4, r5, lr}

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400be76:	4c0a      	ldr	r4, [pc, #40]	@ (3400bea0 <HAL_PCD_ResetCallback+0x2c>)
{
3400be78:	4605      	mov	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400be7a:	6823      	ldr	r3, [r4, #0]
3400be7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400be7e:	b10b      	cbz	r3, 3400be84 <HAL_PCD_ResetCallback+0x10>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
3400be80:	f000 f902 	bl	3400c088 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
3400be84:	79ea      	ldrb	r2, [r5, #7]
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400be86:	6823      	ldr	r3, [r4, #0]
    switch(hpcd -> Init.speed)
3400be88:	2a00      	cmp	r2, #0
3400be8a:	bf0c      	ite	eq
3400be8c:	2202      	moveq	r2, #2
3400be8e:	2201      	movne	r2, #1
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400be90:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
3400be94:	f000 f88e 	bl	3400bfb4 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400be98:	2201      	movs	r2, #1
3400be9a:	6823      	ldr	r3, [r4, #0]
3400be9c:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400be9e:	bd38      	pop	{r3, r4, r5, pc}
3400bea0:	3401326c 	.word	0x3401326c

3400bea4 <HAL_PCD_ConnectCallback>:
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bea4:	4b03      	ldr	r3, [pc, #12]	@ (3400beb4 <HAL_PCD_ConnectCallback+0x10>)
3400bea6:	681b      	ldr	r3, [r3, #0]
3400bea8:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400beac:	b10b      	cbz	r3, 3400beb2 <HAL_PCD_ConnectCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
3400beae:	20f1      	movs	r0, #241	@ 0xf1
3400beb0:	4718      	bx	r3
    }
}
3400beb2:	4770      	bx	lr
3400beb4:	3401326c 	.word	0x3401326c

3400beb8 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
3400beb8:	b510      	push	{r4, lr}

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400beba:	4c07      	ldr	r4, [pc, #28]	@ (3400bed8 <HAL_PCD_DisconnectCallback+0x20>)
3400bebc:	6823      	ldr	r3, [r4, #0]
3400bebe:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bec2:	b10b      	cbz	r3, 3400bec8 <HAL_PCD_DisconnectCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
3400bec4:	20f2      	movs	r0, #242	@ 0xf2
3400bec6:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bec8:	6823      	ldr	r3, [r4, #0]
3400beca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400becc:	b11b      	cbz	r3, 3400bed6 <HAL_PCD_DisconnectCallback+0x1e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
    }
}
3400bece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _ux_device_stack_disconnect();
3400bed2:	f000 b8d9 	b.w	3400c088 <_ux_device_stack_disconnect>
}
3400bed6:	bd10      	pop	{r4, pc}
3400bed8:	3401326c 	.word	0x3401326c

3400bedc <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bedc:	4b03      	ldr	r3, [pc, #12]	@ (3400beec <HAL_PCD_SuspendCallback+0x10>)
3400bede:	681b      	ldr	r3, [r3, #0]
3400bee0:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bee4:	b10b      	cbz	r3, 3400beea <HAL_PCD_SuspendCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
3400bee6:	20f4      	movs	r0, #244	@ 0xf4
3400bee8:	4718      	bx	r3
    }
}
3400beea:	4770      	bx	lr
3400beec:	3401326c 	.word	0x3401326c

3400bef0 <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bef0:	4b03      	ldr	r3, [pc, #12]	@ (3400bf00 <HAL_PCD_ResumeCallback+0x10>)
3400bef2:	681b      	ldr	r3, [r3, #0]
3400bef4:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bef8:	b10b      	cbz	r3, 3400befe <HAL_PCD_ResumeCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
3400befa:	20f3      	movs	r0, #243	@ 0xf3
3400befc:	4718      	bx	r3
    }
}
3400befe:	4770      	bx	lr
3400bf00:	3401326c 	.word	0x3401326c

3400bf04 <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bf04:	4b03      	ldr	r3, [pc, #12]	@ (3400bf14 <HAL_PCD_SOFCallback+0x10>)
3400bf06:	681b      	ldr	r3, [r3, #0]
3400bf08:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bf0c:	b10b      	cbz	r3, 3400bf12 <HAL_PCD_SOFCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
3400bf0e:	20f0      	movs	r0, #240	@ 0xf0
3400bf10:	4718      	bx	r3
    }
}
3400bf12:	4770      	bx	lr
3400bf14:	3401326c 	.word	0x3401326c

3400bf18 <HAL_PCD_ISOINIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bf18:	4b0e      	ldr	r3, [pc, #56]	@ (3400bf54 <HAL_PCD_ISOINIncompleteCallback+0x3c>)
3400bf1a:	f001 010f 	and.w	r1, r1, #15
3400bf1e:	681b      	ldr	r3, [r3, #0]
3400bf20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400bf24:	69d8      	ldr	r0, [r3, #28]
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
#else
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0U)
3400bf26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400bf2a:	688b      	ldr	r3, [r1, #8]
3400bf2c:	07db      	lsls	r3, r3, #31
3400bf2e:	d50f      	bpl.n	3400bf50 <HAL_PCD_ISOINIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400bf30:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bf32:	7bd3      	ldrb	r3, [r2, #15]
3400bf34:	f003 0303 	and.w	r3, r3, #3
3400bf38:	2b01      	cmp	r3, #1
3400bf3a:	d109      	bne.n	3400bf50 <HAL_PCD_ISOINIncompleteCallback+0x38>
3400bf3c:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != 0)
3400bf40:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bf42:	2b00      	cmp	r3, #0
3400bf44:	da04      	bge.n	3400bf50 <HAL_PCD_ISOINIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
3400bf46:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400bf48:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400bf4a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400bf4c:	f7f7 bc7d 	b.w	3400384a <HAL_PCD_EP_Transmit>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400bf50:	4770      	bx	lr
3400bf52:	bf00      	nop
3400bf54:	3401326c 	.word	0x3401326c

3400bf58 <HAL_PCD_ISOOUTIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bf58:	4b0e      	ldr	r3, [pc, #56]	@ (3400bf94 <HAL_PCD_ISOOUTIncompleteCallback+0x3c>)
3400bf5a:	f001 010f 	and.w	r1, r1, #15
3400bf5e:	681b      	ldr	r3, [r3, #0]
3400bf60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400bf64:	69d8      	ldr	r0, [r3, #28]

    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
3400bf66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400bf6a:	688b      	ldr	r3, [r1, #8]
3400bf6c:	07db      	lsls	r3, r3, #31
3400bf6e:	d50f      	bpl.n	3400bf90 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400bf70:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bf72:	7bd3      	ldrb	r3, [r2, #15]
3400bf74:	f003 0303 	and.w	r3, r3, #3
3400bf78:	2b01      	cmp	r3, #1
3400bf7a:	d109      	bne.n	3400bf90 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
3400bf7c:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == 0)
3400bf80:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bf82:	2b00      	cmp	r3, #0
3400bf84:	db04      	blt.n	3400bf90 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
3400bf86:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400bf88:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400bf8a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400bf8c:	f7f7 bc37 	b.w	340037fe <HAL_PCD_EP_Receive>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400bf90:	4770      	bx	lr
3400bf92:	bf00      	nop
3400bf94:	3401326c 	.word	0x3401326c

3400bf98 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
3400bf98:	b508      	push	{r3, lr}

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
3400bf9a:	688b      	ldr	r3, [r1, #8]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400bf9c:	6f00      	ldr	r0, [r0, #112]	@ 0x70
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
3400bf9e:	685a      	ldr	r2, [r3, #4]
3400bfa0:	f042 0204 	orr.w	r2, r2, #4
3400bfa4:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400bfa6:	7b89      	ldrb	r1, [r1, #14]
3400bfa8:	7a9b      	ldrb	r3, [r3, #10]
3400bfaa:	4319      	orrs	r1, r3
3400bfac:	f7f7 fc67 	bl	3400387e <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
3400bfb0:	2000      	movs	r0, #0
3400bfb2:	bd08      	pop	{r3, pc}

3400bfb4 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
3400bfb4:	b570      	push	{r4, r5, r6, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400bfb6:	4e32      	ldr	r6, [pc, #200]	@ (3400c080 <_ux_dcd_stm32_initialize_complete+0xcc>)
3400bfb8:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400bfba:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bfbe:	69e5      	ldr	r5, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400bfc0:	2b01      	cmp	r3, #1
3400bfc2:	d147      	bne.n	3400c054 <_ux_dcd_stm32_initialize_complete+0xa0>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
3400bfc4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
3400bfc8:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400bfcc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
3400bfd0:	220e      	movs	r2, #14
3400bfd2:	492c      	ldr	r1, [pc, #176]	@ (3400c084 <_ux_dcd_stm32_initialize_complete+0xd0>)
3400bfd4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400bfd8:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
    _ux_utility_descriptor_parse(device_framework,
3400bfdc:	f104 0328 	add.w	r3, r4, #40	@ 0x28
3400bfe0:	f000 f8c7 	bl	3400c172 <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
3400bfe4:	f242 7310 	movw	r3, #10000	@ 0x2710
3400bfe8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400bfec:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
                            transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400bfee:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400bff2:	66e3      	str	r3, [r4, #108]	@ 0x6c

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400bff4:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400bff8:	6662      	str	r2, [r4, #100]	@ 0x64

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400bffa:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400bffc:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400c000:	6723      	str	r3, [r4, #112]	@ 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400c002:	4620      	mov	r0, r4
3400c004:	69a3      	ldr	r3, [r4, #24]
3400c006:	4798      	blx	r3
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
3400c008:	2100      	movs	r1, #0
3400c00a:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400c00c:	f7f7 ffe8 	bl	34003fe0 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400c010:	2300      	movs	r3, #0
3400c012:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400c016:	4619      	mov	r1, r3
3400c018:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400c01a:	f7f7 fbb7 	bl	3400378c <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
3400c01e:	2180      	movs	r1, #128	@ 0x80
3400c020:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400c022:	f7f7 ffdd 	bl	34003fe0 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400c026:	2300      	movs	r3, #0
3400c028:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400c02c:	2180      	movs	r1, #128	@ 0x80
3400c02e:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400c030:	f7f7 fbac 	bl	3400378c <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400c034:	2300      	movs	r3, #0

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400c036:	2208      	movs	r2, #8
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400c038:	2001      	movs	r0, #1
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400c03a:	e9c4 321d 	strd	r3, r2, [r4, #116]	@ 0x74
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400c03e:	6423      	str	r3, [r4, #64]	@ 0x40

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c040:	6833      	ldr	r3, [r6, #0]
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
3400c042:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c046:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400c04a:	6722      	str	r2, [r4, #112]	@ 0x70
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c04c:	b103      	cbz	r3, 3400c050 <_ux_dcd_stm32_initialize_complete+0x9c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
3400c04e:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
3400c050:	2000      	movs	r0, #0
3400c052:	bd70      	pop	{r4, r5, r6, pc}
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
3400c054:	2300      	movs	r3, #0
3400c056:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
3400c05a:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400c05e:	2b01      	cmp	r3, #1
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400c060:	bf0b      	itete	eq
3400c062:	f8d4 30d4 	ldreq.w	r3, [r4, #212]	@ 0xd4
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400c066:	f8d4 30dc 	ldrne.w	r3, [r4, #220]	@ 0xdc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400c06a:	f8c4 30cc 	streq.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400c06e:	f8c4 30cc 	strne.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
3400c072:	bf0c      	ite	eq
3400c074:	f8d4 30d8 	ldreq.w	r3, [r4, #216]	@ 0xd8
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
3400c078:	f8d4 30e0 	ldrne.w	r3, [r4, #224]	@ 0xe0
3400c07c:	e7a8      	b.n	3400bfd0 <_ux_dcd_stm32_initialize_complete+0x1c>
3400c07e:	bf00      	nop
3400c080:	3401326c 	.word	0x3401326c
3400c084:	34012838 	.word	0x34012838

3400c088 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
3400c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400c08c:	4f19      	ldr	r7, [pc, #100]	@ (3400c0f4 <_ux_device_stack_disconnect+0x6c>)
{
3400c08e:	b08c      	sub	sp, #48	@ 0x30
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400c090:	683c      	ldr	r4, [r7, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
3400c092:	6a66      	ldr	r6, [r4, #36]	@ 0x24
3400c094:	2e03      	cmp	r6, #3
3400c096:	d128      	bne.n	3400c0ea <_ux_device_stack_disconnect+0x62>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
3400c098:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
3400c09c:	b9b5      	cbnz	r5, 3400c0cc <_ux_device_stack_disconnect+0x44>
            interface_ptr =  next_interface;
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400c09e:	2301      	movs	r3, #1
3400c0a0:	6263      	str	r3, [r4, #36]	@ 0x24

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
3400c0a2:	210f      	movs	r1, #15
3400c0a4:	4620      	mov	r0, r4
3400c0a6:	69a3      	ldr	r3, [r4, #24]
3400c0a8:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
3400c0ac:	4798      	blx	r3
3400c0ae:	4605      	mov	r5, r0
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
3400c0b0:	2300      	movs	r3, #0
3400c0b2:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
3400c0b6:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c0b8:	683b      	ldr	r3, [r7, #0]
3400c0ba:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400c0be:	b10b      	cbz	r3, 3400c0c4 <_ux_device_stack_disconnect+0x3c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
3400c0c0:	200a      	movs	r0, #10
3400c0c2:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
3400c0c4:	4628      	mov	r0, r5
3400c0c6:	b00c      	add	sp, #48	@ 0x30
3400c0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            class_ptr =  interface_ptr -> ux_slave_interface_class;
3400c0cc:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
3400c0ce:	9601      	str	r6, [sp, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
3400c0d0:	9503      	str	r5, [sp, #12]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
3400c0d2:	9309      	str	r3, [sp, #36]	@ 0x24
            if (class_ptr != UX_NULL)
3400c0d4:	b113      	cbz	r3, 3400c0dc <_ux_device_stack_disconnect+0x54>
                class_ptr -> ux_slave_class_entry_function(&class_command);
3400c0d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400c0d8:	a801      	add	r0, sp, #4
3400c0da:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400c0dc:	f8d5 8018 	ldr.w	r8, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
3400c0e0:	4628      	mov	r0, r5
3400c0e2:	f000 f809 	bl	3400c0f8 <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
3400c0e6:	4645      	mov	r5, r8
3400c0e8:	e7d8      	b.n	3400c09c <_ux_device_stack_disconnect+0x14>
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
3400c0ea:	2e01      	cmp	r6, #1
3400c0ec:	d0d9      	beq.n	3400c0a2 <_ux_device_stack_disconnect+0x1a>
UINT                        status = UX_ERROR;
3400c0ee:	25ff      	movs	r5, #255	@ 0xff
3400c0f0:	e7de      	b.n	3400c0b0 <_ux_device_stack_disconnect+0x28>
3400c0f2:	bf00      	nop
3400c0f4:	3401326c 	.word	0x3401326c

3400c0f8 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
3400c0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400c0fc:	4605      	mov	r5, r0

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
3400c0fe:	2600      	movs	r6, #0
    device =  &_ux_system_slave -> ux_system_slave_device;
3400c100:	4f0e      	ldr	r7, [pc, #56]	@ (3400c13c <_ux_device_stack_interface_delete+0x44>)
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
3400c102:	69c4      	ldr	r4, [r0, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
3400c104:	f8d7 8000 	ldr.w	r8, [r7]
    while (next_endpoint != UX_NULL)
3400c108:	b954      	cbnz	r4, 3400c120 <_ux_device_stack_interface_delete+0x28>
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400c10a:	69ab      	ldr	r3, [r5, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
3400c10c:	4620      	mov	r0, r4
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400c10e:	f8c8 30b4 	str.w	r3, [r8, #180]	@ 0xb4
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
3400c112:	e9c5 4401 	strd	r4, r4, [r5, #4]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
3400c116:	e9c5 4406 	strd	r4, r4, [r5, #24]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
3400c11a:	602c      	str	r4, [r5, #0]
}
3400c11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
3400c120:	6838      	ldr	r0, [r7, #0]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400c122:	f8d4 9014 	ldr.w	r9, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
3400c126:	4622      	mov	r2, r4
3400c128:	210f      	movs	r1, #15
3400c12a:	6983      	ldr	r3, [r0, #24]
3400c12c:	4798      	blx	r3
        endpoint -> ux_slave_endpoint_state =  0;
3400c12e:	e9c4 6600 	strd	r6, r6, [r4]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
3400c132:	e9c4 6605 	strd	r6, r6, [r4, #20]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
3400c136:	61e6      	str	r6, [r4, #28]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400c138:	464c      	mov	r4, r9
3400c13a:	e7e5      	b.n	3400c108 <_ux_device_stack_interface_delete+0x10>
3400c13c:	3401326c 	.word	0x3401326c

3400c140 <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
3400c140:	b510      	push	{r4, lr}


    status = UX_STATE_RESET;

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400c142:	4c08      	ldr	r4, [pc, #32]	@ (3400c164 <_ux_device_stack_tasks_run+0x24>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400c144:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400c146:	6820      	ldr	r0, [r4, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400c148:	2112      	movs	r1, #18
3400c14a:	6983      	ldr	r3, [r0, #24]
3400c14c:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400c14e:	6823      	ldr	r3, [r4, #0]
    status = UX_STATE_RESET;
3400c150:	2000      	movs	r0, #0
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400c152:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
3400c156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400c158:	b11a      	cbz	r2, 3400c162 <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
3400c15a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c15c:	b10a      	cbz	r2, 3400c162 <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
3400c15e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
3400c160:	4790      	blx	r2
        class_instance ++;
    }

    /* Return overall status.  */
    return(status);
}
3400c162:	bd10      	pop	{r4, pc}
3400c164:	3401326c 	.word	0x3401326c

3400c168 <_ux_system_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_tasks_run(VOID)
{
3400c168:	b508      	push	{r3, lr}
#if defined(UX_DEVICE_STANDALONE) && !defined(UX_HOST_SIDE_ONLY)
    _ux_device_stack_tasks_run();
3400c16a:	f7ff ffe9 	bl	3400c140 <_ux_device_stack_tasks_run>
    _ux_otg_tasks_run();
#endif

   /* Return code not used now.  */
   return(0);
}
3400c16e:	2000      	movs	r0, #0
3400c170:	bd08      	pop	{r3, pc}

3400c172 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
3400c172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400c176:	4605      	mov	r5, r0
3400c178:	460e      	mov	r6, r1
3400c17a:	461c      	mov	r4, r3
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
                *descriptor++ =  0;
3400c17c:	f04f 0800 	mov.w	r8, #0
3400c180:	188f      	adds	r7, r1, r2
    while(descriptor_entries--)
3400c182:	42be      	cmp	r6, r7
3400c184:	d101      	bne.n	3400c18a <_ux_utility_descriptor_parse+0x18>
        }
    }

    /* Return to caller.  */
    return;
}
3400c186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(*descriptor_structure++)
3400c18a:	f816 3b01 	ldrb.w	r3, [r6], #1
3400c18e:	2b02      	cmp	r3, #2
3400c190:	d013      	beq.n	3400c1ba <_ux_utility_descriptor_parse+0x48>
3400c192:	2b04      	cmp	r3, #4
3400c194:	d006      	beq.n	3400c1a4 <_ux_utility_descriptor_parse+0x32>
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
3400c196:	f815 3b01 	ldrb.w	r3, [r5], #1
3400c19a:	f804 3b01 	strb.w	r3, [r4], #1
            descriptor ++;
3400c19e:	e7f0      	b.n	3400c182 <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c1a0:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 3u)
3400c1a4:	07a2      	lsls	r2, r4, #30
3400c1a6:	d1fb      	bne.n	3400c1a0 <_ux_utility_descriptor_parse+0x2e>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c1a8:	4628      	mov	r0, r5
3400c1aa:	f000 f80f 	bl	3400c1cc <_ux_utility_long_get>
            raw_descriptor +=  4;
3400c1ae:	3504      	adds	r5, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c1b0:	f844 0b04 	str.w	r0, [r4], #4
            break;
3400c1b4:	e7e5      	b.n	3400c182 <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c1b6:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 1u)
3400c1ba:	07e3      	lsls	r3, r4, #31
3400c1bc:	d4fb      	bmi.n	3400c1b6 <_ux_utility_descriptor_parse+0x44>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c1be:	4628      	mov	r0, r5
3400c1c0:	f000 f810 	bl	3400c1e4 <_ux_utility_short_get>
            raw_descriptor += 2;
3400c1c4:	3502      	adds	r5, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c1c6:	f824 0b02 	strh.w	r0, [r4], #2
            break;
3400c1ca:	e7da      	b.n	3400c182 <_ux_utility_descriptor_parse+0x10>

3400c1cc <_ux_utility_long_get>:
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;

    /* Return 32-bit value.  */
    return(value);
}
3400c1cc:	6800      	ldr	r0, [r0, #0]
3400c1ce:	4770      	bx	lr

3400c1d0 <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
3400c1d0:	3801      	subs	r0, #1
3400c1d2:	3201      	adds	r2, #1
3400c1d4:	3a01      	subs	r2, #1
3400c1d6:	d100      	bne.n	3400c1da <_ux_utility_memory_copy+0xa>
        *destination++ =  *source++;
    }

    /* Return to caller.  */
    return; 
}
3400c1d8:	4770      	bx	lr
        *destination++ =  *source++;
3400c1da:	f811 3b01 	ldrb.w	r3, [r1], #1
3400c1de:	f800 3f01 	strb.w	r3, [r0, #1]!
3400c1e2:	e7f7      	b.n	3400c1d4 <_ux_utility_memory_copy+0x4>

3400c1e4 <_ux_utility_short_get>:
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);

    /* Return to caller.  */
    return((ULONG) value);
}
3400c1e4:	8800      	ldrh	r0, [r0, #0]
3400c1e6:	4770      	bx	lr

3400c1e8 <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
3400c1e8:	b510      	push	{r4, lr}
  if (done != 0)
3400c1ea:	4ba3      	ldr	r3, [pc, #652]	@ (3400c478 <LL_ATON_Init+0x290>)
{
3400c1ec:	b088      	sub	sp, #32
  if (done != 0)
3400c1ee:	781a      	ldrb	r2, [r3, #0]
3400c1f0:	b90a      	cbnz	r2, 3400c1f6 <LL_ATON_Init+0xe>
  done = 1;
3400c1f2:	2201      	movs	r2, #1
3400c1f4:	701a      	strb	r2, [r3, #0]
  int i;

  ll_aton_static_checks();

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
3400c1f6:	4ba1      	ldr	r3, [pc, #644]	@ (3400c47c <LL_ATON_Init+0x294>)
3400c1f8:	681a      	ldr	r2, [r3, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
3400c1fa:	f042 0202 	orr.w	r2, r2, #2
  ATON_CLKCTRL_CTRL_SET(0, t);
3400c1fe:	601a      	str	r2, [r3, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
3400c200:	2201      	movs	r2, #1
3400c202:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
3400c204:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400c208:	609a      	str	r2, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
3400c20a:	60da      	str	r2, [r3, #12]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
3400c20c:	2200      	movs	r2, #0
3400c20e:	611a      	str	r2, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c210:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
3400c214:	685c      	ldr	r4, [r3, #4]
3400c216:	2c00      	cmp	r4, #0
3400c218:	d0fc      	beq.n	3400c214 <LL_ATON_Init+0x2c>
3400c21a:	f245 0301 	movw	r3, #20481	@ 0x5001
3400c21e:	b2a2      	uxth	r2, r4
3400c220:	429a      	cmp	r2, r3
3400c222:	f040 8092 	bne.w	3400c34a <LL_ATON_Init+0x162>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c226:	4b96      	ldr	r3, [pc, #600]	@ (3400c480 <LL_ATON_Init+0x298>)
3400c228:	685c      	ldr	r4, [r3, #4]
3400c22a:	2c00      	cmp	r4, #0
3400c22c:	d0fc      	beq.n	3400c228 <LL_ATON_Init+0x40>
3400c22e:	f245 1317 	movw	r3, #20759	@ 0x5117
3400c232:	b2a2      	uxth	r2, r4
3400c234:	429a      	cmp	r2, r3
3400c236:	f040 80b0 	bne.w	3400c39a <LL_ATON_Init+0x1b2>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c23a:	4b92      	ldr	r3, [pc, #584]	@ (3400c484 <LL_ATON_Init+0x29c>)
3400c23c:	685c      	ldr	r4, [r3, #4]
3400c23e:	2c00      	cmp	r4, #0
3400c240:	d0fc      	beq.n	3400c23c <LL_ATON_Init+0x54>
3400c242:	f241 131c 	movw	r3, #4380	@ 0x111c
3400c246:	b2a2      	uxth	r2, r4
3400c248:	429a      	cmp	r2, r3
3400c24a:	f040 80cc 	bne.w	3400c3e6 <LL_ATON_Init+0x1fe>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c24e:	4b8e      	ldr	r3, [pc, #568]	@ (3400c488 <LL_ATON_Init+0x2a0>)
3400c250:	685c      	ldr	r4, [r3, #4]
3400c252:	2c00      	cmp	r4, #0
3400c254:	d0fc      	beq.n	3400c250 <LL_ATON_Init+0x68>
3400c256:	f241 031a 	movw	r3, #4122	@ 0x101a
3400c25a:	b2a2      	uxth	r2, r4
3400c25c:	429a      	cmp	r2, r3
3400c25e:	f040 80e6 	bne.w	3400c42e <LL_ATON_Init+0x246>
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c262:	4b8a      	ldr	r3, [pc, #552]	@ (3400c48c <LL_ATON_Init+0x2a4>)
3400c264:	685c      	ldr	r4, [r3, #4]
3400c266:	2c00      	cmp	r4, #0
3400c268:	d0fc      	beq.n	3400c264 <LL_ATON_Init+0x7c>
3400c26a:	f241 131b 	movw	r3, #4379	@ 0x111b
3400c26e:	b2a2      	uxth	r2, r4
3400c270:	429a      	cmp	r2, r3
3400c272:	f040 812d 	bne.w	3400c4d0 <LL_ATON_Init+0x2e8>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c276:	4b86      	ldr	r3, [pc, #536]	@ (3400c490 <LL_ATON_Init+0x2a8>)
3400c278:	685c      	ldr	r4, [r3, #4]
3400c27a:	2c00      	cmp	r4, #0
3400c27c:	d0fc      	beq.n	3400c278 <LL_ATON_Init+0x90>
3400c27e:	f641 2319 	movw	r3, #6681	@ 0x1a19
3400c282:	b2a2      	uxth	r2, r4
3400c284:	429a      	cmp	r2, r3
3400c286:	f040 8147 	bne.w	3400c518 <LL_ATON_Init+0x330>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c28a:	4b82      	ldr	r3, [pc, #520]	@ (3400c494 <LL_ATON_Init+0x2ac>)
3400c28c:	685c      	ldr	r4, [r3, #4]
3400c28e:	2c00      	cmp	r4, #0
3400c290:	d0fc      	beq.n	3400c28c <LL_ATON_Init+0xa4>
3400c292:	f241 1321 	movw	r3, #4385	@ 0x1121
3400c296:	b2a2      	uxth	r2, r4
3400c298:	429a      	cmp	r2, r3
3400c29a:	f040 8162 	bne.w	3400c562 <LL_ATON_Init+0x37a>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c29e:	4b7e      	ldr	r3, [pc, #504]	@ (3400c498 <LL_ATON_Init+0x2b0>)
3400c2a0:	685c      	ldr	r4, [r3, #4]
3400c2a2:	2c00      	cmp	r4, #0
3400c2a4:	d0fc      	beq.n	3400c2a0 <LL_ATON_Init+0xb8>
3400c2a6:	f243 2320 	movw	r3, #12832	@ 0x3220
3400c2aa:	b2a2      	uxth	r2, r4
3400c2ac:	429a      	cmp	r2, r3
3400c2ae:	f040 817c 	bne.w	3400c5aa <LL_ATON_Init+0x3c2>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c2b2:	4b72      	ldr	r3, [pc, #456]	@ (3400c47c <LL_ATON_Init+0x294>)
3400c2b4:	685c      	ldr	r4, [r3, #4]
3400c2b6:	2c00      	cmp	r4, #0
3400c2b8:	d0fc      	beq.n	3400c2b4 <LL_ATON_Init+0xcc>
3400c2ba:	f241 231f 	movw	r3, #4639	@ 0x121f
3400c2be:	b2a2      	uxth	r2, r4
3400c2c0:	429a      	cmp	r2, r3
3400c2c2:	f040 8198 	bne.w	3400c5f6 <LL_ATON_Init+0x40e>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c2c6:	4b75      	ldr	r3, [pc, #468]	@ (3400c49c <LL_ATON_Init+0x2b4>)
3400c2c8:	685c      	ldr	r4, [r3, #4]
3400c2ca:	2c00      	cmp	r4, #0
3400c2cc:	d0fc      	beq.n	3400c2c8 <LL_ATON_Init+0xe0>
3400c2ce:	f241 131e 	movw	r3, #4382	@ 0x111e
3400c2d2:	b2a2      	uxth	r2, r4
3400c2d4:	429a      	cmp	r2, r3
3400c2d6:	f040 81b4 	bne.w	3400c642 <LL_ATON_Init+0x45a>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c2da:	4b71      	ldr	r3, [pc, #452]	@ (3400c4a0 <LL_ATON_Init+0x2b8>)
3400c2dc:	685c      	ldr	r4, [r3, #4]
3400c2de:	2c00      	cmp	r4, #0
3400c2e0:	d0fc      	beq.n	3400c2dc <LL_ATON_Init+0xf4>
3400c2e2:	b2a3      	uxth	r3, r4
3400c2e4:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
3400c2e8:	f040 81cf 	bne.w	3400c68a <LL_ATON_Init+0x4a2>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c2ec:	4a6d      	ldr	r2, [pc, #436]	@ (3400c4a4 <LL_ATON_Init+0x2bc>)
3400c2ee:	6854      	ldr	r4, [r2, #4]
3400c2f0:	2c00      	cmp	r4, #0
3400c2f2:	d0fc      	beq.n	3400c2ee <LL_ATON_Init+0x106>
3400c2f4:	f245 031d 	movw	r3, #20509	@ 0x501d
3400c2f8:	b2a1      	uxth	r1, r4
3400c2fa:	4299      	cmp	r1, r3
3400c2fc:	f000 81ec 	beq.w	3400c6d8 <LL_ATON_Init+0x4f0>
3400c300:	f002 fd24 	bl	3400ed4c <__errno>
3400c304:	6803      	ldr	r3, [r0, #0]
3400c306:	2b00      	cmp	r3, #0
3400c308:	f000 81e4 	beq.w	3400c6d4 <LL_ATON_Init+0x4ec>
3400c30c:	f002 fd1e 	bl	3400ed4c <__errno>
3400c310:	6800      	ldr	r0, [r0, #0]
3400c312:	f002 fcb5 	bl	3400ec80 <strerror>
3400c316:	4603      	mov	r3, r0
3400c318:	2205      	movs	r2, #5
3400c31a:	2100      	movs	r1, #0
3400c31c:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c320:	221d      	movs	r2, #29
3400c322:	9204      	str	r2, [sp, #16]
3400c324:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c328:	9203      	str	r2, [sp, #12]
3400c32a:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c32e:	9202      	str	r2, [sp, #8]
3400c330:	4a5d      	ldr	r2, [pc, #372]	@ (3400c4a8 <LL_ATON_Init+0x2c0>)
3400c332:	b2e4      	uxtb	r4, r4
3400c334:	495d      	ldr	r1, [pc, #372]	@ (3400c4ac <LL_ATON_Init+0x2c4>)
3400c336:	9200      	str	r2, [sp, #0]
3400c338:	485d      	ldr	r0, [pc, #372]	@ (3400c4b0 <LL_ATON_Init+0x2c8>)
3400c33a:	22fb      	movs	r2, #251	@ 0xfb
3400c33c:	9401      	str	r4, [sp, #4]
3400c33e:	f002 f969 	bl	3400e614 <iprintf>
3400c342:	21fb      	movs	r1, #251	@ 0xfb
3400c344:	4b5b      	ldr	r3, [pc, #364]	@ (3400c4b4 <LL_ATON_Init+0x2cc>)
3400c346:	4a5c      	ldr	r2, [pc, #368]	@ (3400c4b8 <LL_ATON_Init+0x2d0>)
3400c348:	e022      	b.n	3400c390 <LL_ATON_Init+0x1a8>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c34a:	f002 fcff 	bl	3400ed4c <__errno>
3400c34e:	6803      	ldr	r3, [r0, #0]
3400c350:	b30b      	cbz	r3, 3400c396 <LL_ATON_Init+0x1ae>
3400c352:	f002 fcfb 	bl	3400ed4c <__errno>
3400c356:	6800      	ldr	r0, [r0, #0]
3400c358:	f002 fc92 	bl	3400ec80 <strerror>
3400c35c:	4603      	mov	r3, r0
3400c35e:	2205      	movs	r2, #5
3400c360:	f04f 0e00 	mov.w	lr, #0
3400c364:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c368:	2201      	movs	r2, #1
3400c36a:	9204      	str	r2, [sp, #16]
3400c36c:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c370:	9203      	str	r2, [sp, #12]
3400c372:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c376:	9202      	str	r2, [sp, #8]
3400c378:	4a50      	ldr	r2, [pc, #320]	@ (3400c4bc <LL_ATON_Init+0x2d4>)
3400c37a:	b2e4      	uxtb	r4, r4
3400c37c:	494b      	ldr	r1, [pc, #300]	@ (3400c4ac <LL_ATON_Init+0x2c4>)
3400c37e:	9200      	str	r2, [sp, #0]
3400c380:	484b      	ldr	r0, [pc, #300]	@ (3400c4b0 <LL_ATON_Init+0x2c8>)
3400c382:	22c7      	movs	r2, #199	@ 0xc7
3400c384:	9401      	str	r4, [sp, #4]
3400c386:	f002 f945 	bl	3400e614 <iprintf>
3400c38a:	21c7      	movs	r1, #199	@ 0xc7
3400c38c:	4b49      	ldr	r3, [pc, #292]	@ (3400c4b4 <LL_ATON_Init+0x2cc>)
3400c38e:	4a4a      	ldr	r2, [pc, #296]	@ (3400c4b8 <LL_ATON_Init+0x2d0>)
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c390:	4846      	ldr	r0, [pc, #280]	@ (3400c4ac <LL_ATON_Init+0x2c4>)
3400c392:	f001 fa9f 	bl	3400d8d4 <__assert_func>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c396:	4b4a      	ldr	r3, [pc, #296]	@ (3400c4c0 <LL_ATON_Init+0x2d8>)
3400c398:	e7e1      	b.n	3400c35e <LL_ATON_Init+0x176>
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c39a:	f002 fcd7 	bl	3400ed4c <__errno>
3400c39e:	6803      	ldr	r3, [r0, #0]
3400c3a0:	b1fb      	cbz	r3, 3400c3e2 <LL_ATON_Init+0x1fa>
3400c3a2:	f002 fcd3 	bl	3400ed4c <__errno>
3400c3a6:	6800      	ldr	r0, [r0, #0]
3400c3a8:	f002 fc6a 	bl	3400ec80 <strerror>
3400c3ac:	4603      	mov	r3, r0
3400c3ae:	2205      	movs	r2, #5
3400c3b0:	f04f 0c01 	mov.w	ip, #1
3400c3b4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c3b8:	2217      	movs	r2, #23
3400c3ba:	9204      	str	r2, [sp, #16]
3400c3bc:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c3c0:	9203      	str	r2, [sp, #12]
3400c3c2:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c3c6:	9202      	str	r2, [sp, #8]
3400c3c8:	4a3e      	ldr	r2, [pc, #248]	@ (3400c4c4 <LL_ATON_Init+0x2dc>)
3400c3ca:	b2e4      	uxtb	r4, r4
3400c3cc:	4937      	ldr	r1, [pc, #220]	@ (3400c4ac <LL_ATON_Init+0x2c4>)
3400c3ce:	9200      	str	r2, [sp, #0]
3400c3d0:	4837      	ldr	r0, [pc, #220]	@ (3400c4b0 <LL_ATON_Init+0x2c8>)
3400c3d2:	22ca      	movs	r2, #202	@ 0xca
3400c3d4:	9401      	str	r4, [sp, #4]
3400c3d6:	f002 f91d 	bl	3400e614 <iprintf>
3400c3da:	21ca      	movs	r1, #202	@ 0xca
3400c3dc:	4b35      	ldr	r3, [pc, #212]	@ (3400c4b4 <LL_ATON_Init+0x2cc>)
3400c3de:	4a36      	ldr	r2, [pc, #216]	@ (3400c4b8 <LL_ATON_Init+0x2d0>)
3400c3e0:	e7d6      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c3e2:	4b37      	ldr	r3, [pc, #220]	@ (3400c4c0 <LL_ATON_Init+0x2d8>)
3400c3e4:	e7e3      	b.n	3400c3ae <LL_ATON_Init+0x1c6>
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c3e6:	f002 fcb1 	bl	3400ed4c <__errno>
3400c3ea:	6803      	ldr	r3, [r0, #0]
3400c3ec:	b1eb      	cbz	r3, 3400c42a <LL_ATON_Init+0x242>
3400c3ee:	f002 fcad 	bl	3400ed4c <__errno>
3400c3f2:	6800      	ldr	r0, [r0, #0]
3400c3f4:	f002 fc44 	bl	3400ec80 <strerror>
3400c3f8:	4603      	mov	r3, r0
3400c3fa:	2201      	movs	r2, #1
3400c3fc:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c400:	221c      	movs	r2, #28
3400c402:	9204      	str	r2, [sp, #16]
3400c404:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c408:	9203      	str	r2, [sp, #12]
3400c40a:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c40e:	9202      	str	r2, [sp, #8]
3400c410:	4a2d      	ldr	r2, [pc, #180]	@ (3400c4c8 <LL_ATON_Init+0x2e0>)
3400c412:	b2e4      	uxtb	r4, r4
3400c414:	4925      	ldr	r1, [pc, #148]	@ (3400c4ac <LL_ATON_Init+0x2c4>)
3400c416:	9200      	str	r2, [sp, #0]
3400c418:	4825      	ldr	r0, [pc, #148]	@ (3400c4b0 <LL_ATON_Init+0x2c8>)
3400c41a:	22ce      	movs	r2, #206	@ 0xce
3400c41c:	9401      	str	r4, [sp, #4]
3400c41e:	f002 f8f9 	bl	3400e614 <iprintf>
3400c422:	21ce      	movs	r1, #206	@ 0xce
3400c424:	4b23      	ldr	r3, [pc, #140]	@ (3400c4b4 <LL_ATON_Init+0x2cc>)
3400c426:	4a24      	ldr	r2, [pc, #144]	@ (3400c4b8 <LL_ATON_Init+0x2d0>)
3400c428:	e7b2      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c42a:	4b25      	ldr	r3, [pc, #148]	@ (3400c4c0 <LL_ATON_Init+0x2d8>)
3400c42c:	e7e5      	b.n	3400c3fa <LL_ATON_Init+0x212>
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c42e:	f002 fc8d 	bl	3400ed4c <__errno>
3400c432:	6803      	ldr	r3, [r0, #0]
3400c434:	b1f3      	cbz	r3, 3400c474 <LL_ATON_Init+0x28c>
3400c436:	f002 fc89 	bl	3400ed4c <__errno>
3400c43a:	6800      	ldr	r0, [r0, #0]
3400c43c:	f002 fc20 	bl	3400ec80 <strerror>
3400c440:	4603      	mov	r3, r0
3400c442:	2201      	movs	r2, #1
3400c444:	2000      	movs	r0, #0
3400c446:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c44a:	221a      	movs	r2, #26
3400c44c:	9204      	str	r2, [sp, #16]
3400c44e:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c452:	9203      	str	r2, [sp, #12]
3400c454:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c458:	9202      	str	r2, [sp, #8]
3400c45a:	4a1c      	ldr	r2, [pc, #112]	@ (3400c4cc <LL_ATON_Init+0x2e4>)
3400c45c:	b2e4      	uxtb	r4, r4
3400c45e:	4913      	ldr	r1, [pc, #76]	@ (3400c4ac <LL_ATON_Init+0x2c4>)
3400c460:	9200      	str	r2, [sp, #0]
3400c462:	4813      	ldr	r0, [pc, #76]	@ (3400c4b0 <LL_ATON_Init+0x2c8>)
3400c464:	22d2      	movs	r2, #210	@ 0xd2
3400c466:	9401      	str	r4, [sp, #4]
3400c468:	f002 f8d4 	bl	3400e614 <iprintf>
3400c46c:	21d2      	movs	r1, #210	@ 0xd2
3400c46e:	4b11      	ldr	r3, [pc, #68]	@ (3400c4b4 <LL_ATON_Init+0x2cc>)
3400c470:	4a11      	ldr	r2, [pc, #68]	@ (3400c4b8 <LL_ATON_Init+0x2d0>)
3400c472:	e78d      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c474:	4b12      	ldr	r3, [pc, #72]	@ (3400c4c0 <LL_ATON_Init+0x2d8>)
3400c476:	e7e4      	b.n	3400c442 <LL_ATON_Init+0x25a>
3400c478:	34013270 	.word	0x34013270
3400c47c:	580e0000 	.word	0x580e0000
3400c480:	580ef000 	.word	0x580ef000
3400c484:	580fb000 	.word	0x580fb000
3400c488:	580f7000 	.word	0x580f7000
3400c48c:	580f5000 	.word	0x580f5000
3400c490:	580f3000 	.word	0x580f3000
3400c494:	580fe000 	.word	0x580fe000
3400c498:	580fd000 	.word	0x580fd000
3400c49c:	580e1000 	.word	0x580e1000
3400c4a0:	580e4000 	.word	0x580e4000
3400c4a4:	580e2000 	.word	0x580e2000
3400c4a8:	34010fd6 	.word	0x34010fd6
3400c4ac:	34010e91 	.word	0x34010e91
3400c4b0:	34010f21 	.word	0x34010f21
3400c4b4:	340111b4 	.word	0x340111b4
3400c4b8:	34012446 	.word	0x34012446
3400c4bc:	34010f85 	.word	0x34010f85
3400c4c0:	34010e8c 	.word	0x34010e8c
3400c4c4:	34010f8c 	.word	0x34010f8c
3400c4c8:	34010f94 	.word	0x34010f94
3400c4cc:	34010f99 	.word	0x34010f99
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c4d0:	f002 fc3c 	bl	3400ed4c <__errno>
3400c4d4:	6803      	ldr	r3, [r0, #0]
3400c4d6:	b1eb      	cbz	r3, 3400c514 <LL_ATON_Init+0x32c>
3400c4d8:	f002 fc38 	bl	3400ed4c <__errno>
3400c4dc:	6800      	ldr	r0, [r0, #0]
3400c4de:	f002 fbcf 	bl	3400ec80 <strerror>
3400c4e2:	4603      	mov	r3, r0
3400c4e4:	2201      	movs	r2, #1
3400c4e6:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c4ea:	221b      	movs	r2, #27
3400c4ec:	9204      	str	r2, [sp, #16]
3400c4ee:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c4f2:	9203      	str	r2, [sp, #12]
3400c4f4:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c4f8:	9202      	str	r2, [sp, #8]
3400c4fa:	4a7c      	ldr	r2, [pc, #496]	@ (3400c6ec <LL_ATON_Init+0x504>)
3400c4fc:	b2e4      	uxtb	r4, r4
3400c4fe:	497c      	ldr	r1, [pc, #496]	@ (3400c6f0 <LL_ATON_Init+0x508>)
3400c500:	9200      	str	r2, [sp, #0]
3400c502:	487c      	ldr	r0, [pc, #496]	@ (3400c6f4 <LL_ATON_Init+0x50c>)
3400c504:	22d6      	movs	r2, #214	@ 0xd6
3400c506:	9401      	str	r4, [sp, #4]
3400c508:	f002 f884 	bl	3400e614 <iprintf>
3400c50c:	21d6      	movs	r1, #214	@ 0xd6
3400c50e:	4b7a      	ldr	r3, [pc, #488]	@ (3400c6f8 <LL_ATON_Init+0x510>)
3400c510:	4a7a      	ldr	r2, [pc, #488]	@ (3400c6fc <LL_ATON_Init+0x514>)
3400c512:	e73d      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c514:	4b7a      	ldr	r3, [pc, #488]	@ (3400c700 <LL_ATON_Init+0x518>)
3400c516:	e7e5      	b.n	3400c4e4 <LL_ATON_Init+0x2fc>
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c518:	f002 fc18 	bl	3400ed4c <__errno>
3400c51c:	6803      	ldr	r3, [r0, #0]
3400c51e:	b1f3      	cbz	r3, 3400c55e <LL_ATON_Init+0x376>
3400c520:	f002 fc14 	bl	3400ed4c <__errno>
3400c524:	6800      	ldr	r0, [r0, #0]
3400c526:	f002 fbab 	bl	3400ec80 <strerror>
3400c52a:	4603      	mov	r3, r0
3400c52c:	2201      	movs	r2, #1
3400c52e:	210a      	movs	r1, #10
3400c530:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c534:	2219      	movs	r2, #25
3400c536:	9204      	str	r2, [sp, #16]
3400c538:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c53c:	9203      	str	r2, [sp, #12]
3400c53e:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c542:	9202      	str	r2, [sp, #8]
3400c544:	4a6f      	ldr	r2, [pc, #444]	@ (3400c704 <LL_ATON_Init+0x51c>)
3400c546:	b2e4      	uxtb	r4, r4
3400c548:	4969      	ldr	r1, [pc, #420]	@ (3400c6f0 <LL_ATON_Init+0x508>)
3400c54a:	9200      	str	r2, [sp, #0]
3400c54c:	4869      	ldr	r0, [pc, #420]	@ (3400c6f4 <LL_ATON_Init+0x50c>)
3400c54e:	22da      	movs	r2, #218	@ 0xda
3400c550:	9401      	str	r4, [sp, #4]
3400c552:	f002 f85f 	bl	3400e614 <iprintf>
3400c556:	21da      	movs	r1, #218	@ 0xda
3400c558:	4b67      	ldr	r3, [pc, #412]	@ (3400c6f8 <LL_ATON_Init+0x510>)
3400c55a:	4a68      	ldr	r2, [pc, #416]	@ (3400c6fc <LL_ATON_Init+0x514>)
3400c55c:	e718      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c55e:	4b68      	ldr	r3, [pc, #416]	@ (3400c700 <LL_ATON_Init+0x518>)
3400c560:	e7e4      	b.n	3400c52c <LL_ATON_Init+0x344>
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c562:	f002 fbf3 	bl	3400ed4c <__errno>
3400c566:	6803      	ldr	r3, [r0, #0]
3400c568:	b1eb      	cbz	r3, 3400c5a6 <LL_ATON_Init+0x3be>
3400c56a:	f002 fbef 	bl	3400ed4c <__errno>
3400c56e:	6800      	ldr	r0, [r0, #0]
3400c570:	f002 fb86 	bl	3400ec80 <strerror>
3400c574:	4603      	mov	r3, r0
3400c576:	2201      	movs	r2, #1
3400c578:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c57c:	2221      	movs	r2, #33	@ 0x21
3400c57e:	9204      	str	r2, [sp, #16]
3400c580:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c584:	9203      	str	r2, [sp, #12]
3400c586:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c58a:	9202      	str	r2, [sp, #8]
3400c58c:	4a5e      	ldr	r2, [pc, #376]	@ (3400c708 <LL_ATON_Init+0x520>)
3400c58e:	b2e4      	uxtb	r4, r4
3400c590:	4957      	ldr	r1, [pc, #348]	@ (3400c6f0 <LL_ATON_Init+0x508>)
3400c592:	9200      	str	r2, [sp, #0]
3400c594:	4857      	ldr	r0, [pc, #348]	@ (3400c6f4 <LL_ATON_Init+0x50c>)
3400c596:	22de      	movs	r2, #222	@ 0xde
3400c598:	9401      	str	r4, [sp, #4]
3400c59a:	f002 f83b 	bl	3400e614 <iprintf>
3400c59e:	21de      	movs	r1, #222	@ 0xde
3400c5a0:	4b55      	ldr	r3, [pc, #340]	@ (3400c6f8 <LL_ATON_Init+0x510>)
3400c5a2:	4a56      	ldr	r2, [pc, #344]	@ (3400c6fc <LL_ATON_Init+0x514>)
3400c5a4:	e6f4      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c5a6:	4b56      	ldr	r3, [pc, #344]	@ (3400c700 <LL_ATON_Init+0x518>)
3400c5a8:	e7e5      	b.n	3400c576 <LL_ATON_Init+0x38e>
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c5aa:	f002 fbcf 	bl	3400ed4c <__errno>
3400c5ae:	6803      	ldr	r3, [r0, #0]
3400c5b0:	b1fb      	cbz	r3, 3400c5f2 <LL_ATON_Init+0x40a>
3400c5b2:	f002 fbcb 	bl	3400ed4c <__errno>
3400c5b6:	6800      	ldr	r0, [r0, #0]
3400c5b8:	f002 fb62 	bl	3400ec80 <strerror>
3400c5bc:	4603      	mov	r3, r0
3400c5be:	2203      	movs	r2, #3
3400c5c0:	f04f 0e02 	mov.w	lr, #2
3400c5c4:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c5c8:	2220      	movs	r2, #32
3400c5ca:	9204      	str	r2, [sp, #16]
3400c5cc:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c5d0:	9203      	str	r2, [sp, #12]
3400c5d2:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c5d6:	9202      	str	r2, [sp, #8]
3400c5d8:	4a4c      	ldr	r2, [pc, #304]	@ (3400c70c <LL_ATON_Init+0x524>)
3400c5da:	b2e4      	uxtb	r4, r4
3400c5dc:	4944      	ldr	r1, [pc, #272]	@ (3400c6f0 <LL_ATON_Init+0x508>)
3400c5de:	9200      	str	r2, [sp, #0]
3400c5e0:	4844      	ldr	r0, [pc, #272]	@ (3400c6f4 <LL_ATON_Init+0x50c>)
3400c5e2:	22e2      	movs	r2, #226	@ 0xe2
3400c5e4:	9401      	str	r4, [sp, #4]
3400c5e6:	f002 f815 	bl	3400e614 <iprintf>
3400c5ea:	21e2      	movs	r1, #226	@ 0xe2
3400c5ec:	4b42      	ldr	r3, [pc, #264]	@ (3400c6f8 <LL_ATON_Init+0x510>)
3400c5ee:	4a43      	ldr	r2, [pc, #268]	@ (3400c6fc <LL_ATON_Init+0x514>)
3400c5f0:	e6ce      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c5f2:	4b43      	ldr	r3, [pc, #268]	@ (3400c700 <LL_ATON_Init+0x518>)
3400c5f4:	e7e3      	b.n	3400c5be <LL_ATON_Init+0x3d6>
  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c5f6:	f002 fba9 	bl	3400ed4c <__errno>
3400c5fa:	6803      	ldr	r3, [r0, #0]
3400c5fc:	b1fb      	cbz	r3, 3400c63e <LL_ATON_Init+0x456>
3400c5fe:	f002 fba5 	bl	3400ed4c <__errno>
3400c602:	6800      	ldr	r0, [r0, #0]
3400c604:	f002 fb3c 	bl	3400ec80 <strerror>
3400c608:	4603      	mov	r3, r0
3400c60a:	2201      	movs	r2, #1
3400c60c:	f04f 0c02 	mov.w	ip, #2
3400c610:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c614:	221f      	movs	r2, #31
3400c616:	9204      	str	r2, [sp, #16]
3400c618:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c61c:	9203      	str	r2, [sp, #12]
3400c61e:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c622:	9202      	str	r2, [sp, #8]
3400c624:	4a3a      	ldr	r2, [pc, #232]	@ (3400c710 <LL_ATON_Init+0x528>)
3400c626:	b2e4      	uxtb	r4, r4
3400c628:	4931      	ldr	r1, [pc, #196]	@ (3400c6f0 <LL_ATON_Init+0x508>)
3400c62a:	9200      	str	r2, [sp, #0]
3400c62c:	4831      	ldr	r0, [pc, #196]	@ (3400c6f4 <LL_ATON_Init+0x50c>)
3400c62e:	22f5      	movs	r2, #245	@ 0xf5
3400c630:	9401      	str	r4, [sp, #4]
3400c632:	f001 ffef 	bl	3400e614 <iprintf>
3400c636:	21f5      	movs	r1, #245	@ 0xf5
3400c638:	4b2f      	ldr	r3, [pc, #188]	@ (3400c6f8 <LL_ATON_Init+0x510>)
3400c63a:	4a30      	ldr	r2, [pc, #192]	@ (3400c6fc <LL_ATON_Init+0x514>)
3400c63c:	e6a8      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c63e:	4b30      	ldr	r3, [pc, #192]	@ (3400c700 <LL_ATON_Init+0x518>)
3400c640:	e7e3      	b.n	3400c60a <LL_ATON_Init+0x422>
  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c642:	f002 fb83 	bl	3400ed4c <__errno>
3400c646:	6803      	ldr	r3, [r0, #0]
3400c648:	b1eb      	cbz	r3, 3400c686 <LL_ATON_Init+0x49e>
3400c64a:	f002 fb7f 	bl	3400ed4c <__errno>
3400c64e:	6800      	ldr	r0, [r0, #0]
3400c650:	f002 fb16 	bl	3400ec80 <strerror>
3400c654:	4603      	mov	r3, r0
3400c656:	2201      	movs	r2, #1
3400c658:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c65c:	221e      	movs	r2, #30
3400c65e:	9204      	str	r2, [sp, #16]
3400c660:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c664:	9203      	str	r2, [sp, #12]
3400c666:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c66a:	9202      	str	r2, [sp, #8]
3400c66c:	4a29      	ldr	r2, [pc, #164]	@ (3400c714 <LL_ATON_Init+0x52c>)
3400c66e:	b2e4      	uxtb	r4, r4
3400c670:	491f      	ldr	r1, [pc, #124]	@ (3400c6f0 <LL_ATON_Init+0x508>)
3400c672:	9200      	str	r2, [sp, #0]
3400c674:	481f      	ldr	r0, [pc, #124]	@ (3400c6f4 <LL_ATON_Init+0x50c>)
3400c676:	22f7      	movs	r2, #247	@ 0xf7
3400c678:	9401      	str	r4, [sp, #4]
3400c67a:	f001 ffcb 	bl	3400e614 <iprintf>
3400c67e:	21f7      	movs	r1, #247	@ 0xf7
3400c680:	4b1d      	ldr	r3, [pc, #116]	@ (3400c6f8 <LL_ATON_Init+0x510>)
3400c682:	4a1e      	ldr	r2, [pc, #120]	@ (3400c6fc <LL_ATON_Init+0x514>)
3400c684:	e684      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c686:	4b1e      	ldr	r3, [pc, #120]	@ (3400c700 <LL_ATON_Init+0x518>)
3400c688:	e7e5      	b.n	3400c656 <LL_ATON_Init+0x46e>
  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c68a:	f002 fb5f 	bl	3400ed4c <__errno>
3400c68e:	6803      	ldr	r3, [r0, #0]
3400c690:	b1f3      	cbz	r3, 3400c6d0 <LL_ATON_Init+0x4e8>
3400c692:	f002 fb5b 	bl	3400ed4c <__errno>
3400c696:	6800      	ldr	r0, [r0, #0]
3400c698:	f002 faf2 	bl	3400ec80 <strerror>
3400c69c:	4603      	mov	r3, r0
3400c69e:	2201      	movs	r2, #1
3400c6a0:	2006      	movs	r0, #6
3400c6a2:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c6a6:	2200      	movs	r2, #0
3400c6a8:	9204      	str	r2, [sp, #16]
3400c6aa:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c6ae:	9203      	str	r2, [sp, #12]
3400c6b0:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c6b4:	9202      	str	r2, [sp, #8]
3400c6b6:	4a18      	ldr	r2, [pc, #96]	@ (3400c718 <LL_ATON_Init+0x530>)
3400c6b8:	b2e4      	uxtb	r4, r4
3400c6ba:	490d      	ldr	r1, [pc, #52]	@ (3400c6f0 <LL_ATON_Init+0x508>)
3400c6bc:	9200      	str	r2, [sp, #0]
3400c6be:	480d      	ldr	r0, [pc, #52]	@ (3400c6f4 <LL_ATON_Init+0x50c>)
3400c6c0:	22f9      	movs	r2, #249	@ 0xf9
3400c6c2:	9401      	str	r4, [sp, #4]
3400c6c4:	f001 ffa6 	bl	3400e614 <iprintf>
3400c6c8:	21f9      	movs	r1, #249	@ 0xf9
3400c6ca:	4b0b      	ldr	r3, [pc, #44]	@ (3400c6f8 <LL_ATON_Init+0x510>)
3400c6cc:	4a0b      	ldr	r2, [pc, #44]	@ (3400c6fc <LL_ATON_Init+0x514>)
3400c6ce:	e65f      	b.n	3400c390 <LL_ATON_Init+0x1a8>
3400c6d0:	4b0b      	ldr	r3, [pc, #44]	@ (3400c700 <LL_ATON_Init+0x518>)
3400c6d2:	e7e4      	b.n	3400c69e <LL_ATON_Init+0x4b6>
  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c6d4:	4b0a      	ldr	r3, [pc, #40]	@ (3400c700 <LL_ATON_Init+0x518>)
3400c6d6:	e61f      	b.n	3400c318 <LL_ATON_Init+0x130>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 1);
3400c6d8:	2301      	movs	r3, #1

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);

  return 0;
}
3400c6da:	2000      	movs	r0, #0
    ATON_BUSIF_CTRL_SET(i, 1);
3400c6dc:	6013      	str	r3, [r2, #0]
3400c6de:	4a0f      	ldr	r2, [pc, #60]	@ (3400c71c <LL_ATON_Init+0x534>)
3400c6e0:	6013      	str	r3, [r2, #0]
  ATON_INTCTRL_CTRL_SET(0, 1);
3400c6e2:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
3400c6e6:	6013      	str	r3, [r2, #0]
}
3400c6e8:	b008      	add	sp, #32
3400c6ea:	bd10      	pop	{r4, pc}
3400c6ec:	34010f9f 	.word	0x34010f9f
3400c6f0:	34010e91 	.word	0x34010e91
3400c6f4:	34010f21 	.word	0x34010f21
3400c6f8:	340111b4 	.word	0x340111b4
3400c6fc:	34012446 	.word	0x34012446
3400c700:	34010e8c 	.word	0x34010e8c
3400c704:	34010fa5 	.word	0x34010fa5
3400c708:	34010fab 	.word	0x34010fab
3400c70c:	34010fb5 	.word	0x34010fb5
3400c710:	34010fbc 	.word	0x34010fbc
3400c714:	34010fc4 	.word	0x34010fc4
3400c718:	34010fcc 	.word	0x34010fcc
3400c71c:	580e3000 	.word	0x580e3000

3400c720 <LL_ATON_DeInit>:
int LL_ATON_DeInit(void)
{
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
3400c720:	2000      	movs	r0, #0
3400c722:	4b07      	ldr	r3, [pc, #28]	@ (3400c740 <LL_ATON_DeInit+0x20>)
3400c724:	6018      	str	r0, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 0);
3400c726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c72a:	6018      	str	r0, [r3, #0]
3400c72c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c730:	6018      	str	r0, [r3, #0]
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
3400c732:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
3400c736:	6098      	str	r0, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
3400c738:	60d8      	str	r0, [r3, #12]
  ATON_CLKCTRL_BGATES_SET(0, 0);
3400c73a:	6118      	str	r0, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
3400c73c:	6018      	str	r0, [r3, #0]

  return 0;
}
3400c73e:	4770      	bx	lr
3400c740:	580e1000 	.word	0x580e1000

3400c744 <LL_ATON_EnableUnits_Init>:
 * @param  n Lenght of the initialization array
 * @retval Error code
 * @todo   Add boundary checks
 */
int LL_ATON_EnableUnits_Init(const LL_ATON_EnableUnits_InitTypeDef *LL_ATON_EnableUnits_InitStruct, int n)
{
3400c744:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;

  for (i = 0; i < n; i++)
3400c746:	2400      	movs	r4, #0
3400c748:	42a1      	cmp	r1, r4
3400c74a:	f101 0201 	add.w	r2, r1, #1
3400c74e:	bfb8      	it	lt
3400c750:	2201      	movlt	r2, #1
#endif // !POOL_RC14
      break;
#endif
#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_ENABLE(RECBUF, unitId);
3400c752:	4d1e      	ldr	r5, [pc, #120]	@ (3400c7cc <LL_ATON_EnableUnits_Init+0x88>)
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
3400c754:	4f1e      	ldr	r7, [pc, #120]	@ (3400c7d0 <LL_ATON_EnableUnits_Init+0x8c>)
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
3400c756:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
3400c758:	3a01      	subs	r2, #1
3400c75a:	d101      	bne.n	3400c760 <LL_ATON_EnableUnits_Init+0x1c>
      break;
    }
  }

  return 0;
}
3400c75c:	2000      	movs	r0, #0
3400c75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (unitType)
3400c760:	f810 1024 	ldrb.w	r1, [r0, r4, lsl #2]
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
3400c764:	f836 3024 	ldrh.w	r3, [r6, r4, lsl #2]
    switch (unitType)
3400c768:	2908      	cmp	r1, #8
3400c76a:	d818      	bhi.n	3400c79e <LL_ATON_EnableUnits_Init+0x5a>
3400c76c:	e8df f001 	tbb	[pc, r1]
3400c770:	190e1705 	.word	0x190e1705
3400c774:	1725211d 	.word	0x1725211d
3400c778:	29          	.byte	0x29
3400c779:	00          	.byte	0x00
      ATON_ENABLE(STRENG, unitId);
3400c77a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c77e:	33e5      	adds	r3, #229	@ 0xe5
      ATON_ENABLE(DECUN, unitId);
3400c780:	031b      	lsls	r3, r3, #12
3400c782:	6819      	ldr	r1, [r3, #0]
3400c784:	f041 0101 	orr.w	r1, r1, #1
3400c788:	6019      	str	r1, [r3, #0]
      break;
3400c78a:	e008      	b.n	3400c79e <LL_ATON_EnableUnits_Init+0x5a>
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
3400c78c:	f503 21b0 	add.w	r1, r3, #360448	@ 0x58000
3400c790:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
3400c794:	31ef      	adds	r1, #239	@ 0xef
3400c796:	0309      	lsls	r1, r1, #12
3400c798:	f043 0301 	orr.w	r3, r3, #1
3400c79c:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
3400c79e:	3401      	adds	r4, #1
3400c7a0:	e7da      	b.n	3400c758 <LL_ATON_EnableUnits_Init+0x14>
      ATON_ENABLE(DECUN, unitId);
3400c7a2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c7a6:	33f3      	adds	r3, #243	@ 0xf3
3400c7a8:	e7ea      	b.n	3400c780 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ACTIV, unitId);
3400c7aa:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c7ae:	33f5      	adds	r3, #245	@ 0xf5
3400c7b0:	e7e6      	b.n	3400c780 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ARITH, unitId);
3400c7b2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c7b6:	33f7      	adds	r3, #247	@ 0xf7
3400c7b8:	e7e2      	b.n	3400c780 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(POOL, unitId);
3400c7ba:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c7be:	33fb      	adds	r3, #251	@ 0xfb
3400c7c0:	e7de      	b.n	3400c780 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(RECBUF, unitId);
3400c7c2:	682b      	ldr	r3, [r5, #0]
3400c7c4:	f043 0301 	orr.w	r3, r3, #1
3400c7c8:	602b      	str	r3, [r5, #0]
      break;
3400c7ca:	e7e8      	b.n	3400c79e <LL_ATON_EnableUnits_Init+0x5a>
3400c7cc:	580fd000 	.word	0x580fd000
3400c7d0:	34013274 	.word	0x34013274

3400c7d4 <LL_Switch_Init_NoReset>:
  unsigned int fnr_mask[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_MASK, ATON_STRSWITCH_DST_FNR1_MASK};

  /* Enable Switch */
  t = ATON_STRSWITCH_CTRL_DT;
  t = ATON_STRSWITCH_CTRL_SET_EN(t, 1);
  ATON_STRSWITCH_CTRL_SET(0, t);
3400c7d4:	2301      	movs	r3, #1
3400c7d6:	4a13      	ldr	r2, [pc, #76]	@ (3400c824 <LL_Switch_Init_NoReset+0x50>)
3400c7d8:	2900      	cmp	r1, #0
{
3400c7da:	b530      	push	{r4, r5, lr}
  ATON_STRSWITCH_CTRL_SET(0, t);
3400c7dc:	6013      	str	r3, [r2, #0]

  for (i = 0; i < n; i++)
3400c7de:	eb01 0203 	add.w	r2, r1, r3
3400c7e2:	bfb8      	it	lt
3400c7e4:	461a      	movlt	r2, r3
3400c7e6:	3a01      	subs	r2, #1
3400c7e8:	d101      	bne.n	3400c7ee <LL_Switch_Init_NoReset+0x1a>

    ATON_REG_WRITE(reg, t);
  }

  return 0;
}
3400c7ea:	2000      	movs	r0, #0
3400c7ec:	bd30      	pop	{r4, r5, pc}
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
3400c7ee:	7b84      	ldrb	r4, [r0, #14]
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source1) << link_shift[1]);
3400c7f0:	e9d0 5300 	ldrd	r5, r3, [r0]
3400c7f4:	045b      	lsls	r3, r3, #17
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c7f6:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
3400c7fa:	f004 0501 	and.w	r5, r4, #1
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c7fe:	432b      	orrs	r3, r5
    t |= ((LL_Switch_InitStruct[i].frames0 << fnr_shift[0]) & fnr_mask[0]);
3400c800:	7b05      	ldrb	r5, [r0, #12]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c802:	6881      	ldr	r1, [r0, #8]
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c804:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
3400c808:	7b45      	ldrb	r5, [r0, #13]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c80a:	f101 41b0 	add.w	r1, r1, #1476395008	@ 0x58000000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c80e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    t |= ((LL_Switch_InitStruct[i].context1 != 0) << en_shift[1]);
3400c812:	f3c4 0440 	ubfx	r4, r4, #1, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c816:	f501 2164 	add.w	r1, r1, #933888	@ 0xe4000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c81a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    ATON_REG_WRITE(reg, t);
3400c81e:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
3400c820:	3010      	adds	r0, #16
3400c822:	e7e0      	b.n	3400c7e6 <LL_Switch_Init_NoReset+0x12>
3400c824:	580e4000 	.word	0x580e4000

3400c828 <LL_Switch_Init>:
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ll_aton_static_checks();
#endif

  /* Clear Configuration */
  ATON_DISABLE_CLR_CONFCLR(STRSWITCH, 0);
3400c828:	2202      	movs	r2, #2
3400c82a:	4b06      	ldr	r3, [pc, #24]	@ (3400c844 <LL_Switch_Init+0x1c>)
3400c82c:	601a      	str	r2, [r3, #0]
3400c82e:	681a      	ldr	r2, [r3, #0]
3400c830:	0792      	lsls	r2, r2, #30
3400c832:	d4fc      	bmi.n	3400c82e <LL_Switch_Init+0x6>
3400c834:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400c838:	601a      	str	r2, [r3, #0]
3400c83a:	681a      	ldr	r2, [r3, #0]
3400c83c:	0052      	lsls	r2, r2, #1
3400c83e:	d4fc      	bmi.n	3400c83a <LL_Switch_Init+0x12>

  return LL_Switch_Init_NoReset(LL_Switch_InitStruct, n);
3400c840:	f7ff bfc8 	b.w	3400c7d4 <LL_Switch_Init_NoReset>
3400c844:	580e4000 	.word	0x580e4000

3400c848 <LL_Switch_Deinit>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be disconnected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Deinit(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
3400c848:	b530      	push	{r4, r5, lr}
  int i;
  volatile uint32_t *reg;

  for (i = 0; i < n; i++)
3400c84a:	2400      	movs	r4, #0
3400c84c:	42a1      	cmp	r1, r4
3400c84e:	f101 0301 	add.w	r3, r1, #1
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));

    /* Disable contexts */
    ATON_REG_WRITE(reg, 0);
3400c852:	4625      	mov	r5, r4
3400c854:	bfb8      	it	lt
3400c856:	2301      	movlt	r3, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c858:	3008      	adds	r0, #8
  for (i = 0; i < n; i++)
3400c85a:	3b01      	subs	r3, #1
3400c85c:	d101      	bne.n	3400c862 <LL_Switch_Deinit+0x1a>
  }

  return 0;
}
3400c85e:	2000      	movs	r0, #0
3400c860:	bd30      	pop	{r4, r5, pc}
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c862:	0122      	lsls	r2, r4, #4
3400c864:	5882      	ldr	r2, [r0, r2]
  for (i = 0; i < n; i++)
3400c866:	3401      	adds	r4, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c868:	f102 42b0 	add.w	r2, r2, #1476395008	@ 0x58000000
3400c86c:	f502 2264 	add.w	r2, r2, #933888	@ 0xe4000
    ATON_REG_WRITE(reg, 0);
3400c870:	6015      	str	r5, [r2, #0]
  for (i = 0; i < n; i++)
3400c872:	e7f2      	b.n	3400c85a <LL_Switch_Deinit+0x12>

3400c874 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
3400c874:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
3400c876:	2401      	movs	r4, #1
3400c878:	2500      	movs	r5, #0
3400c87a:	2301      	movs	r3, #1
3400c87c:	ea54 050d 	orrs.w	r5, r4, sp
3400c880:	4a03      	ldr	r2, [pc, #12]	@ (3400c890 <LL_ATON_EnableClock+0x1c>)
3400c882:	4083      	lsls	r3, r0
3400c884:	6911      	ldr	r1, [r2, #16]
3400c886:	404b      	eors	r3, r1
3400c888:	4023      	ands	r3, r4
3400c88a:	404b      	eors	r3, r1
3400c88c:	6113      	str	r3, [r2, #16]
#endif
}
3400c88e:	bd30      	pop	{r4, r5, pc}
3400c890:	580e0000 	.word	0x580e0000

3400c894 <LL_Streng_TensorInit>:
  if (id >= ATON_STRENG_NUM)
3400c894:	2809      	cmp	r0, #9
{
3400c896:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400c89a:	4604      	mov	r4, r0
3400c89c:	460d      	mov	r5, r1
3400c89e:	4616      	mov	r6, r2
  if (id >= ATON_STRENG_NUM)
3400c8a0:	dd04      	ble.n	3400c8ac <LL_Streng_TensorInit+0x18>
    return LL_ATON_INVALID_ID;
3400c8a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
3400c8a6:	b003      	add	sp, #12
3400c8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LL_ATON_EnableClock(ATON_STRENG_CLKB_CLK(id));
3400c8ac:	f7ff ffe2 	bl	3400c874 <LL_ATON_EnableClock>
  if (n != 1)
3400c8b0:	2e01      	cmp	r6, #1
3400c8b2:	d1f6      	bne.n	3400c8a2 <LL_Streng_TensorInit+0xe>
  if (conf->nbits_in > 24 || conf->nbits_out > 24)
3400c8b4:	f895 603c 	ldrb.w	r6, [r5, #60]	@ 0x3c
3400c8b8:	2e18      	cmp	r6, #24
3400c8ba:	d8f2      	bhi.n	3400c8a2 <LL_Streng_TensorInit+0xe>
3400c8bc:	f895 c03d 	ldrb.w	ip, [r5, #61]	@ 0x3d
3400c8c0:	f1bc 0f18 	cmp.w	ip, #24
3400c8c4:	d8ed      	bhi.n	3400c8a2 <LL_Streng_TensorInit+0xe>
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400c8c6:	7828      	ldrb	r0, [r5, #0]
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400c8c8:	f8d5 a038 	ldr.w	sl, [r5, #56]	@ 0x38
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400c8cc:	01c2      	lsls	r2, r0, #7
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400c8ce:	00c3      	lsls	r3, r0, #3
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400c8d0:	f402 7180 	and.w	r1, r2, #256	@ 0x100
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400c8d4:	f003 0308 	and.w	r3, r3, #8
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400c8d8:	430b      	orrs	r3, r1
  t = ATON_STRENG_CTRL_SET_RAW_OUT(t, conf->raw_out);
3400c8da:	f3c0 0180 	ubfx	r1, r0, #2, #1
3400c8de:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  t = ATON_STRENG_CTRL_SET_NOBLK(t, (conf->noblk != 0));
3400c8e2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
3400c8e6:	431a      	orrs	r2, r3
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
3400c8e8:	0843      	lsrs	r3, r0, #1
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400c8ea:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
3400c8ee:	f003 0310 	and.w	r3, r3, #16
3400c8f2:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400c8f4:	424a      	negs	r2, r1
3400c8f6:	414a      	adcs	r2, r1
3400c8f8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
3400c8fc:	0102      	lsls	r2, r0, #4
3400c8fe:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400c902:	f8b5 8000 	ldrh.w	r8, [r5]
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
3400c906:	0207      	lsls	r7, r0, #8
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
3400c908:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
3400c90a:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
3400c90e:	431f      	orrs	r7, r3
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400c910:	f408 7310 	and.w	r3, r8, #576	@ 0x240
3400c914:	f1a3 0e40 	sub.w	lr, r3, #64	@ 0x40
3400c918:	f1de 0300 	rsbs	r3, lr, #0
3400c91c:	eb43 030e 	adc.w	r3, r3, lr
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400c920:	f010 0201 	ands.w	r2, r0, #1
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400c924:	ea47 37c3 	orr.w	r7, r7, r3, lsl #15
  int nbits_in = conf->nbits_in;
3400c928:	4631      	mov	r1, r6
  int nbits_out = conf->nbits_out;
3400c92a:	4663      	mov	r3, ip
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400c92c:	9201      	str	r2, [sp, #4]
3400c92e:	f000 0940 	and.w	r9, r0, #64	@ 0x40
3400c932:	f040 80a9 	bne.w	3400ca88 <LL_Streng_TensorInit+0x1f4>
3400c936:	4566      	cmp	r6, ip
3400c938:	bf8c      	ite	hi
3400c93a:	2200      	movhi	r2, #0
3400c93c:	2201      	movls	r2, #1
  switch (io_case)
3400c93e:	2a03      	cmp	r2, #3
3400c940:	f000 80b2 	beq.w	3400caa8 <LL_Streng_TensorInit+0x214>
3400c944:	2a01      	cmp	r2, #1
3400c946:	f000 80aa 	beq.w	3400ca9e <LL_Streng_TensorInit+0x20a>
    nbits_in = nbits_out;
3400c94a:	4661      	mov	r1, ip
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400c94c:	eba6 020c 	sub.w	r2, r6, ip
    if (conf->mem_lsb)
3400c950:	0603      	lsls	r3, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400c952:	bf4b      	itete	mi
3400c954:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
3400c956:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400c958:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
3400c95c:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    in_bits[0] = _LL_min(8, nbits_in);
3400c960:	2908      	cmp	r1, #8
3400c962:	468e      	mov	lr, r1
3400c964:	bfa8      	it	ge
3400c966:	f04f 0e08 	movge.w	lr, #8
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400c96a:	2908      	cmp	r1, #8
3400c96c:	f340 8099 	ble.w	3400caa2 <LL_Streng_TensorInit+0x20e>
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
3400c970:	2910      	cmp	r1, #16
3400c972:	bfcb      	itete	gt
3400c974:	f1a1 0310 	subgt.w	r3, r1, #16
3400c978:	2300      	movle	r3, #0
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400c97a:	2108      	movgt	r1, #8
3400c97c:	3908      	suble	r1, #8
    if (conf->align_right)
3400c97e:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
3400c982:	f1b9 0f00 	cmp.w	r9, #0
3400c986:	d10b      	bne.n	3400c9a0 <LL_Streng_TensorInit+0x10c>
      if (nbits_out > 16)
3400c988:	f1bc 0f10 	cmp.w	ip, #16
3400c98c:	f300 80b2 	bgt.w	3400caf4 <LL_Streng_TensorInit+0x260>
      else if (nbits_out > 8)
3400c990:	f1bc 0f08 	cmp.w	ip, #8
      else if (nbits_in > 8)
3400c994:	f340 80b2 	ble.w	3400cafc <LL_Streng_TensorInit+0x268>
3400c998:	4673      	mov	r3, lr
        ch_bits[0] = out_bits[1];
3400c99a:	468e      	mov	lr, r1
        ch_bits[1] = out_bits[0];
3400c99c:	4619      	mov	r1, r3
  int ch_bits[3] = {0, 0, 0};
3400c99e:	465b      	mov	r3, fp
  t = ATON_STRENG_CTRL_SET_SIZE0(t, ch_bits[0]);
3400c9a0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
  ATON_STRENG_CTRL_SET(id, t);
3400c9a4:	f504 24b0 	add.w	r4, r4, #360448	@ 0x58000
  t = ATON_STRENG_CTRL_SET_SIZE1(t, ch_bits[1]);
3400c9a8:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
  ATON_STRENG_CTRL_SET(id, t);
3400c9ac:	34e5      	adds	r4, #229	@ 0xe5
  t = ATON_STRENG_CTRL_SET_SIZE2(t, ch_bits[2]);
3400c9ae:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
  ATON_STRENG_CTRL_SET(id, t);
3400c9b2:	0324      	lsls	r4, r4, #12
3400c9b4:	6027      	str	r7, [r4, #0]
  ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_ADDR_ADDR(id)), conf->addr_base.i,
3400c9b6:	e9d5 7e01 	ldrd	r7, lr, [r5, #4]
3400c9ba:	eb07 030e 	add.w	r3, r7, lr
3400c9be:	60a3      	str	r3, [r4, #8]
  if (conf->raw)
3400c9c0:	0783      	lsls	r3, r0, #30
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400c9c2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
  if (conf->raw)
3400c9c4:	f140 809d 	bpl.w	3400cb02 <LL_Streng_TensorInit+0x26e>
    if (conf->frame_count)
3400c9c8:	696b      	ldr	r3, [r5, #20]
3400c9ca:	b94b      	cbnz	r3, 3400c9e0 <LL_Streng_TensorInit+0x14c>
      t = (LL_Streng_len(conf) * 8) / (conf->dir == 0 ? conf->nbits_in : conf->nbits_out);
3400c9cc:	f010 0f01 	tst.w	r0, #1
3400c9d0:	bf18      	it	ne
3400c9d2:	4666      	movne	r6, ip
    return conf->addr_base.p + conf->offset_limit;
  }

  static inline uint32_t LL_Streng_len(const LL_Streng_TensorInitTypeDef *conf)
  {
    return conf->offset_end - conf->offset_start;
3400c9d4:	68eb      	ldr	r3, [r5, #12]
3400c9d6:	eba3 030e 	sub.w	r3, r3, lr
3400c9da:	00db      	lsls	r3, r3, #3
3400c9dc:	fbb3 f3f6 	udiv	r3, r3, r6
  uint32_t t_streng_cid_cache = ATON_STRENG_CID_CACHE_DT;
3400c9e0:	2000      	movs	r0, #0
    ATON_STRENG_FSIZE_SET(id, t);
3400c9e2:	60e3      	str	r3, [r4, #12]
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
3400c9e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
3400c9e6:	f36f 010f 	bfc	r1, #0, #16
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
3400c9ea:	6223      	str	r3, [r4, #32]
  ATON_STRENG_FRAME_RPT_SET(id, conf->frame_loop_cnt);
3400c9ec:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
3400c9ee:	61e3      	str	r3, [r4, #28]
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
3400c9f0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
3400c9f2:	61a3      	str	r3, [r4, #24]
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
3400c9f4:	f041 0306 	orr.w	r3, r1, #6
  ATON_STRENG_LIMITEN_SET(id, t);
3400c9f8:	6323      	str	r3, [r4, #48]	@ 0x30
  if (/*(conf->dir == 0) && */ (conf->offset_limit != 0x0))
3400c9fa:	692b      	ldr	r3, [r5, #16]
3400c9fc:	b12b      	cbz	r3, 3400ca0a <LL_Streng_TensorInit+0x176>
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400c9fe:	441f      	add	r7, r3
    t = ATON_STRENG_LIMITEN_SET_STOPPREFTC(t, 1);
3400ca00:	f041 0107 	orr.w	r1, r1, #7
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400ca04:	3f01      	subs	r7, #1
    ATON_STRENG_LIMITEN_SET(id, t);
3400ca06:	6321      	str	r1, [r4, #48]	@ 0x30
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400ca08:	63a7      	str	r7, [r4, #56]	@ 0x38
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
3400ca0a:	7869      	ldrb	r1, [r5, #1]
  if ((conf->dir == 0) && conf->sync_with_other)
3400ca0c:	f028 08fe 	bic.w	r8, r8, #254	@ 0xfe
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
3400ca10:	f3c1 1380 	ubfx	r3, r1, #6, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
3400ca14:	f3c1 1640 	ubfx	r6, r1, #5, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
3400ca18:	011b      	lsls	r3, r3, #4
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400ca1a:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CID(t_streng_cid_cache, conf->bus_cid);
3400ca1e:	f3c1 0682 	ubfx	r6, r1, #2, #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400ca22:	4333      	orrs	r3, r6
3400ca24:	78ae      	ldrb	r6, [r5, #2]
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_PFETCH(t_streng_cid_cache, conf->bus_pfetch);
3400ca26:	09c9      	lsrs	r1, r1, #7
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400ca28:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  if ((conf->dir == 0) && conf->sync_with_other)
3400ca2c:	ea4f 58c8 	mov.w	r8, r8, lsl #23
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400ca30:	f006 0103 	and.w	r1, r6, #3
3400ca34:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
  if ((conf->dir == 0) && conf->sync_with_other)
3400ca38:	ea4f 58d8 	mov.w	r8, r8, lsr #23
  if (conf->dir == 1)
3400ca3c:	9901      	ldr	r1, [sp, #4]
  ATON_STRENG_LIMIT_SET(id, conf->frame_tot_cnt);
3400ca3e:	f8c4 a034 	str.w	sl, [r4, #52]	@ 0x34
  if ((conf->dir == 0) && conf->sync_with_other)
3400ca42:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400ca46:	ea43 0300 	orr.w	r3, r3, r0
  if (conf->dir == 1)
3400ca4a:	ea4f 40c1 	mov.w	r0, r1, lsl #19
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400ca4e:	bf09      	itett	eq
3400ca50:	78e9      	ldrbeq	r1, [r5, #3]
  t = ATON_STRENG_EVENT_SET_EN_ILLCFG(t, 1); // Enable Illegal Configuration interrupt
3400ca52:	f440 1180 	orrne.w	r1, r0, #1048576	@ 0x100000
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400ca56:	0609      	lsleq	r1, r1, #24
3400ca58:	f001 51f8 	andeq.w	r1, r1, #520093696	@ 0x1f000000
3400ca5c:	bf08      	it	eq
3400ca5e:	4301      	orreq	r1, r0
  ATON_STRENG_POS_SET(id, t);
3400ca60:	f04f 0024 	mov.w	r0, #36	@ 0x24
3400ca64:	6260      	str	r0, [r4, #36]	@ 0x24
  ATON_STRENG_STRD_SET(id, t_streng_strd);
3400ca66:	6162      	str	r2, [r4, #20]
  ATON_STRENG_CID_CACHE_SET(id, t_streng_cid_cache);
3400ca68:	64a3      	str	r3, [r4, #72]	@ 0x48
  t = ATON_STRENG_ENCR_MSB_SET_EN(t, conf->cipher_en);
3400ca6a:	f3c6 0380 	ubfx	r3, r6, #2, #1
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
3400ca6e:	f3c6 06c0 	ubfx	r6, r6, #3, #1
3400ca72:	ea4f 3686 	mov.w	r6, r6, lsl #14
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400ca76:	bf08      	it	eq
3400ca78:	f441 0110 	orreq.w	r1, r1, #9437184	@ 0x900000
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
3400ca7c:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  ATON_STRENG_EVENT_SET(id, t_streng_event);
3400ca80:	62a1      	str	r1, [r4, #40]	@ 0x28
  return 0;
3400ca82:	2000      	movs	r0, #0
  ATON_STRENG_ENCR_MSB_SET(id, t);
3400ca84:	6466      	str	r6, [r4, #68]	@ 0x44
  return 0;
3400ca86:	e70e      	b.n	3400c8a6 <LL_Streng_TensorInit+0x12>
  int io_case = ((conf->dir != 0) << 1);
3400ca88:	0042      	lsls	r2, r0, #1
3400ca8a:	f002 0202 	and.w	r2, r2, #2
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400ca8e:	4566      	cmp	r6, ip
3400ca90:	ea52 9222 			@ <UNDEFINED> instruction: 0xea529222
  switch (io_case)
3400ca94:	2a02      	cmp	r2, #2
3400ca96:	f47f af52 	bne.w	3400c93e <LL_Streng_TensorInit+0xaa>
3400ca9a:	2200      	movs	r2, #0
3400ca9c:	e00f      	b.n	3400cabe <LL_Streng_TensorInit+0x22a>
3400ca9e:	2200      	movs	r2, #0
3400caa0:	e75e      	b.n	3400c960 <LL_Streng_TensorInit+0xcc>
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400caa2:	2100      	movs	r1, #0
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
3400caa4:	460b      	mov	r3, r1
3400caa6:	e76a      	b.n	3400c97e <LL_Streng_TensorInit+0xea>
    nbits_out = nbits_in;
3400caa8:	4633      	mov	r3, r6
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400caaa:	ebac 0206 	sub.w	r2, ip, r6
    if (conf->mem_lsb)
3400caae:	0601      	lsls	r1, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400cab0:	bf4b      	itete	mi
3400cab2:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
3400cab4:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400cab6:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
3400caba:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    out_bits[0] = _LL_min(8, nbits_out);
3400cabe:	2b08      	cmp	r3, #8
3400cac0:	469e      	mov	lr, r3
3400cac2:	bfa8      	it	ge
3400cac4:	f04f 0e08 	movge.w	lr, #8
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400cac8:	2b08      	cmp	r3, #8
3400caca:	dd10      	ble.n	3400caee <LL_Streng_TensorInit+0x25a>
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400cacc:	2b10      	cmp	r3, #16
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400cace:	bfd5      	itete	le
3400cad0:	f1a3 0108 	suble.w	r1, r3, #8
3400cad4:	2108      	movgt	r1, #8
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400cad6:	2300      	movle	r3, #0
3400cad8:	3b10      	subgt	r3, #16
    if (conf->align_right)
3400cada:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
3400cade:	f1b9 0f00 	cmp.w	r9, #0
3400cae2:	f47f af5d 	bne.w	3400c9a0 <LL_Streng_TensorInit+0x10c>
      if (nbits_in > 16)
3400cae6:	2e10      	cmp	r6, #16
3400cae8:	dc04      	bgt.n	3400caf4 <LL_Streng_TensorInit+0x260>
      else if (nbits_in > 8)
3400caea:	2e08      	cmp	r6, #8
3400caec:	e752      	b.n	3400c994 <LL_Streng_TensorInit+0x100>
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400caee:	2100      	movs	r1, #0
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400caf0:	460b      	mov	r3, r1
3400caf2:	e7f2      	b.n	3400cada <LL_Streng_TensorInit+0x246>
3400caf4:	46f1      	mov	r9, lr
        ch_bits[0] = out_bits[2];
3400caf6:	469e      	mov	lr, r3
        ch_bits[2] = out_bits[0];
3400caf8:	464b      	mov	r3, r9
3400cafa:	e751      	b.n	3400c9a0 <LL_Streng_TensorInit+0x10c>
  int ch_bits[3] = {0, 0, 0};
3400cafc:	465b      	mov	r3, fp
3400cafe:	4659      	mov	r1, fp
3400cb00:	e74e      	b.n	3400c9a0 <LL_Streng_TensorInit+0x10c>
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
3400cb02:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
    t = ATON_STRENG_FSIZE_SET_WIDTH(t, conf->fwidth);
3400cb06:	b2b0      	uxth	r0, r6
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400cb08:	434e      	muls	r6, r1
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
3400cb0a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400cb0e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
    ATON_STRENG_FSIZE_SET(id, t);
3400cb10:	60e3      	str	r3, [r4, #12]
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400cb12:	2800      	cmp	r0, #0
3400cb14:	bf08      	it	eq
3400cb16:	4630      	moveq	r0, r6
    t_streng_strd = ATON_STRENG_STRD_SET_LOFF(t_streng_strd, line_offset);
3400cb18:	b283      	uxth	r3, r0
3400cb1a:	431a      	orrs	r2, r3
    t = ATON_STRENG_DEPTH_SET_SIZE(t, conf->batch_depth);
3400cb1c:	8c2b      	ldrh	r3, [r5, #32]
    t = ATON_STRENG_CID_CACHE_SET_LOFF_MSB(t, (line_offset >> ATON_STRENG_STRD_LOFF_W));
3400cb1e:	f36f 000f 	bfc	r0, #0, #16
    t = ATON_STRENG_DEPTH_SET_OFFSET(t, conf->batch_offset);
3400cb22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ATON_STRENG_DEPTH_SET(id, t);
3400cb26:	6123      	str	r3, [r4, #16]
3400cb28:	e75c      	b.n	3400c9e4 <LL_Streng_TensorInit+0x150>
	...

3400cb2c <LL_Convacc_Init>:
  if (id >= ATON_CONVACC_NUM)
3400cb2c:	2803      	cmp	r0, #3
{
3400cb2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400cb32:	4606      	mov	r6, r0
3400cb34:	460c      	mov	r4, r1
  if (id >= ATON_CONVACC_NUM)
3400cb36:	f300 814e 	bgt.w	3400cdd6 <LL_Convacc_Init+0x2aa>
  LL_ATON_EnableClock(ATON_CONVACC_CLKB_CLK(id));
3400cb3a:	300a      	adds	r0, #10
3400cb3c:	f7ff fe9a 	bl	3400c874 <LL_ATON_EnableClock>
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
3400cb40:	78a5      	ldrb	r5, [r4, #2]
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
3400cb42:	7862      	ldrb	r2, [r4, #1]
  t = ATON_CONVACC_CTRL_SET_KT1(t, (conf->kt1_mode != 0));
3400cb44:	f005 0308 	and.w	r3, r5, #8
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
3400cb48:	f3c2 1101 	ubfx	r1, r2, #4, #2
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cb4c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
3400cb50:	78e1      	ldrb	r1, [r4, #3]
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
3400cb52:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
3400cb56:	f001 0103 	and.w	r1, r1, #3
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cb5a:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
  t = ATON_CONVACC_CTRL_SET_FUNSIGNED(t, conf->f_unsigned);
3400cb5e:	f3c5 1180 	ubfx	r1, r5, #6, #1
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cb62:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
3400cb66:	09e9      	lsrs	r1, r5, #7
3400cb68:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  t = ATON_CONVACC_CTRL_SET_NOSUM(t, (conf->accumulate == 0));
3400cb6c:	f3c2 1180 	ubfx	r1, r2, #6, #1
3400cb70:	f081 0101 	eor.w	r1, r1, #1
3400cb74:	b2c9      	uxtb	r1, r1
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cb76:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  t = ATON_CONVACC_CTRL_SET_NO1SUM(t, (conf->accumulate_first == 0));
3400cb7a:	f082 0180 	eor.w	r1, r2, #128	@ 0x80
3400cb7e:	09c9      	lsrs	r1, r1, #7
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cb80:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
3400cb84:	02a9      	lsls	r1, r5, #10
3400cb86:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cb8a:	430b      	orrs	r3, r1
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
3400cb8c:	0201      	lsls	r1, r0, #8
3400cb8e:	f401 7140 	and.w	r1, r1, #768	@ 0x300
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cb92:	430b      	orrs	r3, r1
  t = ATON_CONVACC_CTRL_SET_FSTAT(t, (conf->fstat != 0));
3400cb94:	05e9      	lsls	r1, r5, #23
3400cb96:	f001 7180 	and.w	r1, r1, #16777216	@ 0x1000000
3400cb9a:	4319      	orrs	r1, r3
  t = ATON_CONVACC_CTRL_SET_DEEPMODE(t, (conf->deepmode != 0));
3400cb9c:	062b      	lsls	r3, r5, #24
3400cb9e:	f003 5780 	and.w	r7, r3, #268435456	@ 0x10000000
3400cba2:	4339      	orrs	r1, r7
  if ((conf->fstat != 0) && (conf->deepmode != 0))
3400cba4:	f005 0712 	and.w	r7, r5, #18
3400cba8:	2f12      	cmp	r7, #18
3400cbaa:	f000 8117 	beq.w	3400cddc <LL_Convacc_Init+0x2b0>
  t = ATON_CONVACC_CTRL_SET_DSS2MODE(t, (conf->dss2mode != 0));
3400cbae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
3400cbb2:	430b      	orrs	r3, r1
  if ((conf->fstat != 0) && (conf->dss2mode != 0))
3400cbb4:	f005 0122 	and.w	r1, r5, #34	@ 0x22
3400cbb8:	2922      	cmp	r1, #34	@ 0x22
3400cbba:	f000 810f 	beq.w	3400cddc <LL_Convacc_Init+0x2b0>
  if ((conf->dss2mode != 0) && (conf->deepmode != 0))
3400cbbe:	f005 0130 	and.w	r1, r5, #48	@ 0x30
3400cbc2:	2930      	cmp	r1, #48	@ 0x30
3400cbc4:	f000 810a 	beq.w	3400cddc <LL_Convacc_Init+0x2b0>
  ATON_CONVACC_CTRL_SET(id, t);
3400cbc8:	f506 21b0 	add.w	r1, r6, #360448	@ 0x58000
  Conv_ctrl_bits[id] = t;
3400cbcc:	4f85      	ldr	r7, [pc, #532]	@ (3400cde4 <LL_Convacc_Init+0x2b8>)
  ATON_CONVACC_CTRL_SET(id, t);
3400cbce:	31ef      	adds	r1, #239	@ 0xef
3400cbd0:	0309      	lsls	r1, r1, #12
3400cbd2:	600b      	str	r3, [r1, #0]
  Conv_ctrl_bits[id] = t;
3400cbd4:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
  if (conf->afilt_mode != AFILT_MODE_NONE)
3400cbd8:	b150      	cbz	r0, 3400cbf0 <LL_Convacc_Init+0xc4>
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400cbda:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
    t = ATON_CONVACC_AFILT_SET_FIRST(t, conf->afilt_first);
3400cbde:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400cbe2:	041b      	lsls	r3, r3, #16
3400cbe4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    t = ATON_CONVACC_AFILT_SET_TOT(t, conf->afilt_tot);
3400cbe8:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400cbec:	4303      	orrs	r3, r0
    ATON_CONVACC_AFILT_SET(id, t);
3400cbee:	624b      	str	r3, [r1, #36]	@ 0x24
  if (conf->kfilt_tot > 0)
3400cbf0:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
3400cbf4:	b140      	cbz	r0, 3400cc08 <LL_Convacc_Init+0xdc>
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
3400cbf6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
    t = ATON_CONVACC_KFILT_SET_FIRST(t, conf->kfilt_first);
3400cbfa:	f894 602f 	ldrb.w	r6, [r4, #47]	@ 0x2f
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
3400cbfe:	041b      	lsls	r3, r3, #16
3400cc00:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
3400cc04:	4303      	orrs	r3, r0
    ATON_CONVACC_KFILT_SET(id, t);
3400cc06:	620b      	str	r3, [r1, #32]
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400cc08:	7923      	ldrb	r3, [r4, #4]
  t = ATON_CONVACC_DFORMAT_SET_ROUND(t, conf->rounding_o);
3400cc0a:	7826      	ldrb	r6, [r4, #0]
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400cc0c:	3310      	adds	r3, #16
  t = ATON_CONVACC_DFORMAT_SET_SAT(t, conf->saturation_o);
3400cc0e:	02b0      	lsls	r0, r6, #10
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400cc10:	061b      	lsls	r3, r3, #24
3400cc12:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
3400cc16:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
3400cc1a:	4318      	orrs	r0, r3
3400cc1c:	f002 0303 	and.w	r3, r2, #3
3400cc20:	ea40 3083 	orr.w	r0, r0, r3, lsl #14
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
3400cc24:	f3c6 1301 	ubfx	r3, r6, #4, #2
  t = ATON_CONVACC_DFORMAT_SET_FROUND(t, conf->rounding_f);
3400cc28:	f006 0701 	and.w	r7, r6, #1
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
3400cc2c:	059b      	lsls	r3, r3, #22
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400cc2e:	ea43 7387 	orr.w	r3, r3, r7, lsl #30
  t = ATON_CONVACC_DFORMAT_SET_FSAT(t, conf->saturation_f);
3400cc32:	f3c6 0740 	ubfx	r7, r6, #1, #1
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400cc36:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
  t = ATON_CONVACC_DFORMAT_SET_FRNDMODE(t, conf->round_mode_f);
3400cc3a:	f3c6 0681 	ubfx	r6, r6, #2, #2
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400cc3e:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
3400cc42:	4303      	orrs	r3, r0
  t = ATON_CONVACC_DFORMAT_SET_OBYTES(t, conf->outbytes_o);
3400cc44:	f3c2 0281 	ubfx	r2, r2, #2, #2
3400cc48:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
3400cc4c:	79a2      	ldrb	r2, [r4, #6]
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
3400cc4e:	f3c5 0080 	ubfx	r0, r5, #2, #1
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
3400cc52:	0212      	lsls	r2, r2, #8
3400cc54:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
3400cc58:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
3400cc5c:	4313      	orrs	r3, r2
3400cc5e:	7962      	ldrb	r2, [r4, #5]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cc60:	8aa0      	ldrh	r0, [r4, #20]
  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
3400cc62:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
3400cc66:	4313      	orrs	r3, r2
  ATON_CONVACC_DFORMAT_SET(id, t);
3400cc68:	610b      	str	r3, [r1, #16]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cc6a:	68a3      	ldr	r3, [r4, #8]
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
3400cc6c:	68e2      	ldr	r2, [r4, #12]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cc6e:	4343      	muls	r3, r0
3400cc70:	b29b      	uxth	r3, r3
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
3400cc72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  ATON_CONVACC_FFORMAT_SET(id, t);
3400cc76:	614b      	str	r3, [r1, #20]
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cc78:	8a27      	ldrh	r7, [r4, #16]
  t = ATON_CONVACC_KFORMAT_SET_BTCDEPTH(t, conf->batchDepth);
3400cc7a:	0403      	lsls	r3, r0, #16
3400cc7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  t = ATON_CONVACC_KFORMAT_SET_HEIGHT(t, conf->kernelHeight);
3400cc80:	7c62      	ldrb	r2, [r4, #17]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cc82:	f8b4 801c 	ldrh.w	r8, [r4, #28]
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cc86:	433b      	orrs	r3, r7
3400cc88:	7ca7      	ldrb	r7, [r4, #18]
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cc8a:	f8b4 a01e 	ldrh.w	sl, [r4, #30]
  t = ATON_CONVACC_KFORMAT_SET_WIDTH(t, conf->kernelWidth);
3400cc8e:	7c26      	ldrb	r6, [r4, #16]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cc90:	4590      	cmp	r8, r2
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cc92:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
3400cc96:	f8b4 9018 	ldrh.w	r9, [r4, #24]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cc9a:	f102 37ff 	add.w	r7, r2, #4294967295	@ 0xffffffff
3400cc9e:	bf2c      	ite	cs
3400cca0:	46bc      	movcs	ip, r7
3400cca2:	46c4      	movcc	ip, r8
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cca4:	4552      	cmp	r2, sl
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
3400cca6:	8b62      	ldrh	r2, [r4, #26]
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cca8:	bf88      	it	hi
3400ccaa:	4657      	movhi	r7, sl
  ATON_CONVACC_KFORMAT_SET(id, t);
3400ccac:	608b      	str	r3, [r1, #8]
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
3400ccae:	45b1      	cmp	r9, r6
3400ccb0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
3400ccb4:	bf2c      	ite	cs
3400ccb6:	469e      	movcs	lr, r3
3400ccb8:	46ce      	movcc	lr, r9
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
3400ccba:	4296      	cmp	r6, r2
3400ccbc:	bf88      	it	hi
3400ccbe:	4613      	movhi	r3, r2
  if (conf->deepmode != 0)
3400ccc0:	06ee      	lsls	r6, r5, #27
3400ccc2:	f100 8083 	bmi.w	3400cdcc <LL_Convacc_Init+0x2a0>
  p_top = (p_top <= 2 ? p_top : 2);
3400ccc6:	f1bc 0f02 	cmp.w	ip, #2
3400ccca:	bfa8      	it	ge
3400cccc:	f04f 0c02 	movge.w	ip, #2
  p_bot = (p_bot <= 2 ? p_bot : 2);
3400ccd0:	2f02      	cmp	r7, #2
3400ccd2:	bfa8      	it	ge
3400ccd4:	2702      	movge	r7, #2
  p_left = (p_left <= 2 ? p_left : 2);
3400ccd6:	f1be 0f02 	cmp.w	lr, #2
3400ccda:	bfa8      	it	ge
3400ccdc:	f04f 0e02 	movge.w	lr, #2
  p_right = (p_right <= 2 ? p_right : 2);
3400cce0:	2b02      	cmp	r3, #2
3400cce2:	bfa8      	it	ge
3400cce4:	2302      	movge	r3, #2
  if (conf->dss2mode != 0)
3400cce6:	06ae      	lsls	r6, r5, #26
    p_top = p_bot = p_left = p_right = 0;
3400cce8:	bf48      	it	mi
3400ccea:	2300      	movmi	r3, #0
  if (conf->zfbias != 0)
3400ccec:	f9b4 6038 	ldrsh.w	r6, [r4, #56]	@ 0x38
    p_top = p_bot = p_left = p_right = 0;
3400ccf0:	bf42      	ittt	mi
3400ccf2:	469e      	movmi	lr, r3
3400ccf4:	461f      	movmi	r7, r3
3400ccf6:	469c      	movmi	ip, r3
  if (conf->zfbias != 0)
3400ccf8:	b11e      	cbz	r6, 3400cd02 <LL_Convacc_Init+0x1d6>
    p_top = p_bot = p_left = p_right = 0;
3400ccfa:	2300      	movs	r3, #0
3400ccfc:	469e      	mov	lr, r3
3400ccfe:	461f      	mov	r7, r3
3400cd00:	469c      	mov	ip, r3
  int z_left = (conf->left_padding - p_left);
3400cd02:	eba9 090e 	sub.w	r9, r9, lr
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cd06:	fb00 f909 	mul.w	r9, r0, r9
  int z_right = (conf->right_padding - p_right);
3400cd0a:	1ad2      	subs	r2, r2, r3
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cd0c:	4342      	muls	r2, r0
  int z_top = (conf->top_padding - p_top);
3400cd0e:	eba8 080c 	sub.w	r8, r8, ip
  t = ATON_CONVACC_ZFRAME_SET_TOP(t, z_top);
3400cd12:	ea4f 4808 	mov.w	r8, r8, lsl #16
3400cd16:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cd1a:	fa5f f989 	uxtb.w	r9, r9
  int z_bot = (conf->bot_padding - p_bot);
3400cd1e:	ebaa 0a07 	sub.w	sl, sl, r7
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cd22:	ea48 0809 	orr.w	r8, r8, r9
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cd26:	0212      	lsls	r2, r2, #8
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cd28:	ea48 680a 	orr.w	r8, r8, sl, lsl #24
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cd2c:	b292      	uxth	r2, r2
3400cd2e:	ea42 0208 	orr.w	r2, r2, r8
  ATON_CONVACC_ZFRAME_SET(id, t);
3400cd32:	628a      	str	r2, [r1, #40]	@ 0x28
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
3400cd34:	7da2      	ldrb	r2, [r4, #22]
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
3400cd36:	009b      	lsls	r3, r3, #2
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
3400cd38:	0212      	lsls	r2, r2, #8
3400cd3a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
3400cd3e:	f003 030c 	and.w	r3, r3, #12
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cd42:	4313      	orrs	r3, r2
  t = ATON_CONVACC_SAMPLE_SET_LPAD(t, p_left);
3400cd44:	f00e 0e03 	and.w	lr, lr, #3
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cd48:	7de2      	ldrb	r2, [r4, #23]
  t = ATON_CONVACC_SAMPLE_SET_TPAD(t, p_top);
3400cd4a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
3400cd4e:	f00c 0c30 	and.w	ip, ip, #48	@ 0x30
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cd52:	ea43 030e 	orr.w	r3, r3, lr
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
3400cd56:	01bf      	lsls	r7, r7, #6
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cd58:	ea43 030c 	orr.w	r3, r3, ip
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
3400cd5c:	b2ff      	uxtb	r7, r7
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cd5e:	0312      	lsls	r2, r2, #12
3400cd60:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
3400cd64:	433b      	orrs	r3, r7
3400cd66:	4313      	orrs	r3, r2
  if (conf->fstat != 0)
3400cd68:	07aa      	lsls	r2, r5, #30
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
3400cd6a:	bf48      	it	mi
3400cd6c:	8d22      	ldrhmi	r2, [r4, #40]	@ 0x28
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
3400cd6e:	4f1e      	ldr	r7, [pc, #120]	@ (3400cde8 <LL_Convacc_Init+0x2bc>)
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
3400cd70:	bf48      	it	mi
3400cd72:	ea43 4302 	orrmi.w	r3, r3, r2, lsl #16
  if (conf->left_crop > 0)
3400cd76:	8c22      	ldrh	r2, [r4, #32]
  ATON_CONVACC_SAMPLE_SET(id, t);
3400cd78:	60cb      	str	r3, [r1, #12]
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
3400cd7a:	fb00 f302 	mul.w	r3, r0, r2
3400cd7e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
3400cd82:	2a00      	cmp	r2, #0
3400cd84:	ea6f 4313 	mvn.w	r3, r3, lsr #16
3400cd88:	bf08      	it	eq
3400cd8a:	463b      	moveq	r3, r7
  if (conf->right_crop > 0)
3400cd8c:	f8b4 c022 	ldrh.w	ip, [r4, #34]	@ 0x22
    t = ATON_CONVACC_FHCROP_SET_RIGHT(t, conf->right_crop * conf->batchDepth + (conf->batchDepth - 1));
3400cd90:	1e45      	subs	r5, r0, #1
3400cd92:	fb00 500c 	mla	r0, r0, ip, r5
3400cd96:	b29a      	uxth	r2, r3
3400cd98:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
3400cd9c:	f1bc 0f00 	cmp.w	ip, #0
3400cda0:	bf18      	it	ne
3400cda2:	4613      	movne	r3, r2
  if (conf->bot_crop > 0)
3400cda4:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
  if (conf->top_crop > 0)
3400cda6:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
3400cda8:	2800      	cmp	r0, #0
3400cdaa:	ea42 0207 	orr.w	r2, r2, r7
  ATON_CONVACC_FHCROP_SET(id, t);
3400cdae:	618b      	str	r3, [r1, #24]
    t = ATON_CONVACC_FVCROP_SET_BOTTOM(t, conf->bot_crop);
3400cdb0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
3400cdb2:	bf08      	it	eq
3400cdb4:	4613      	moveq	r3, r2
  ATON_CONVACC_FVCROP_SET(id, t);
3400cdb6:	61cb      	str	r3, [r1, #28]
  if (conf->fsub != 0)
3400cdb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400cdba:	b113      	cbz	r3, 3400cdc2 <LL_Convacc_Init+0x296>
    t = ATON_CONVACC_FSUB_SET_FSUB(t, conf->fsub);
3400cdbc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    ATON_CONVACC_FSUB_SET(id, t);
3400cdc0:	630b      	str	r3, [r1, #48]	@ 0x30
  return 0;
3400cdc2:	2000      	movs	r0, #0
    t = ATON_CONVACC_ZFBIAS_SET_ZFBIAS(t, conf->zfbias);
3400cdc4:	b2b6      	uxth	r6, r6
  ATON_CONVACC_ZFBIAS_SET(id, t);
3400cdc6:	634e      	str	r6, [r1, #52]	@ 0x34
}
3400cdc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_top = p_bot = p_left = p_right = 0;
3400cdcc:	2300      	movs	r3, #0
3400cdce:	469e      	mov	lr, r3
3400cdd0:	461f      	mov	r7, r3
3400cdd2:	469c      	mov	ip, r3
3400cdd4:	e787      	b.n	3400cce6 <LL_Convacc_Init+0x1ba>
    return LL_ATON_INVALID_ID;
3400cdd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400cdda:	e7f5      	b.n	3400cdc8 <LL_Convacc_Init+0x29c>
    return LL_ATON_INVALID_PARAM;
3400cddc:	f06f 0001 	mvn.w	r0, #1
3400cde0:	e7f2      	b.n	3400cdc8 <LL_Convacc_Init+0x29c>
3400cde2:	bf00      	nop
3400cde4:	34013274 	.word	0x34013274
3400cde8:	ffff0000 	.word	0xffff0000

3400cdec <LL_EpochCtrl_Init>:
  if (id >= ATON_EPOCHCTRL_NUM)
3400cdec:	2800      	cmp	r0, #0
{
3400cdee:	b510      	push	{r4, lr}
3400cdf0:	460c      	mov	r4, r1
  if (id >= ATON_EPOCHCTRL_NUM)
3400cdf2:	dc0e      	bgt.n	3400ce12 <LL_EpochCtrl_Init+0x26>
  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
3400cdf4:	3019      	adds	r0, #25
3400cdf6:	f7ff fd3d 	bl	3400c874 <LL_ATON_EnableClock>
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400cdfa:	7923      	ldrb	r3, [r4, #4]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400cdfc:	4a08      	ldr	r2, [pc, #32]	@ (3400ce20 <LL_EpochCtrl_Init+0x34>)
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400cdfe:	f003 0301 	and.w	r3, r3, #1
3400ce02:	00db      	lsls	r3, r3, #3
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400ce04:	6013      	str	r3, [r2, #0]
  if (conf->blobaddr & 0x7)
3400ce06:	6823      	ldr	r3, [r4, #0]
3400ce08:	f013 0007 	ands.w	r0, r3, #7
3400ce0c:	d104      	bne.n	3400ce18 <LL_EpochCtrl_Init+0x2c>
  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
3400ce0e:	6093      	str	r3, [r2, #8]
}
3400ce10:	bd10      	pop	{r4, pc}
    return LL_ATON_INVALID_ID;
3400ce12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400ce16:	e7fb      	b.n	3400ce10 <LL_EpochCtrl_Init+0x24>
    return LL_ATON_INVALID_PARAM;
3400ce18:	f06f 0001 	mvn.w	r0, #1
3400ce1c:	e7f8      	b.n	3400ce10 <LL_EpochCtrl_Init+0x24>
3400ce1e:	bf00      	nop
3400ce20:	580fe000 	.word	0x580fe000

3400ce24 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
3400ce24:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
3400ce26:	2401      	movs	r4, #1
3400ce28:	2500      	movs	r5, #0
3400ce2a:	ea54 050d 	orrs.w	r5, r4, sp
3400ce2e:	4a03      	ldr	r2, [pc, #12]	@ (3400ce3c <LL_ATON_DisableClock+0x18>)
3400ce30:	6913      	ldr	r3, [r2, #16]
3400ce32:	ea23 0304 	bic.w	r3, r3, r4
3400ce36:	6113      	str	r3, [r2, #16]
#endif
}
3400ce38:	bd30      	pop	{r4, r5, pc}
3400ce3a:	bf00      	nop
3400ce3c:	580e0000 	.word	0x580e0000

3400ce40 <LL_ATON_DisableUnits_Init>:
{
3400ce40:	b570      	push	{r4, r5, r6, lr}
3400ce42:	4605      	mov	r5, r0
  for (i = 0; i < n; i++)
3400ce44:	2400      	movs	r4, #0
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
3400ce46:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
3400ce48:	428c      	cmp	r4, r1
3400ce4a:	db01      	blt.n	3400ce50 <LL_ATON_DisableUnits_Init+0x10>
  return LL_ATON_OK;
3400ce4c:	2000      	movs	r0, #0
}
3400ce4e:	bd70      	pop	{r4, r5, r6, pc}
    switch (unitType)
3400ce50:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
3400ce54:	f836 0024 	ldrh.w	r0, [r6, r4, lsl #2]
    switch (unitType)
3400ce58:	2b08      	cmp	r3, #8
3400ce5a:	d87a      	bhi.n	3400cf52 <LL_ATON_DisableUnits_Init+0x112>
3400ce5c:	e8df f003 	tbb	[pc, r3]
3400ce60:	29187905 	.word	0x29187905
3400ce64:	795b4a3a 	.word	0x795b4a3a
3400ce68:	6b          	.byte	0x6b
3400ce69:	00          	.byte	0x00
      ATON_DISABLE_CLR_CONFCLR(STRENG, unitId);
3400ce6a:	2202      	movs	r2, #2
3400ce6c:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400ce70:	33e5      	adds	r3, #229	@ 0xe5
3400ce72:	031b      	lsls	r3, r3, #12
3400ce74:	601a      	str	r2, [r3, #0]
3400ce76:	681a      	ldr	r2, [r3, #0]
3400ce78:	0792      	lsls	r2, r2, #30
3400ce7a:	d4fc      	bmi.n	3400ce76 <LL_ATON_DisableUnits_Init+0x36>
3400ce7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400ce80:	601a      	str	r2, [r3, #0]
3400ce82:	681a      	ldr	r2, [r3, #0]
3400ce84:	0052      	lsls	r2, r2, #1
3400ce86:	d4fc      	bmi.n	3400ce82 <LL_ATON_DisableUnits_Init+0x42>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
3400ce88:	f7ff ffcc 	bl	3400ce24 <LL_ATON_DisableClock>
  for (i = 0; i < n; i++)
3400ce8c:	3401      	adds	r4, #1
3400ce8e:	e7db      	b.n	3400ce48 <LL_ATON_DisableUnits_Init+0x8>
      ATON_DISABLE_CLR_CONFCLR(CONVACC, unitId);
3400ce90:	2202      	movs	r2, #2
3400ce92:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400ce96:	33ef      	adds	r3, #239	@ 0xef
3400ce98:	031b      	lsls	r3, r3, #12
3400ce9a:	601a      	str	r2, [r3, #0]
3400ce9c:	681a      	ldr	r2, [r3, #0]
3400ce9e:	0792      	lsls	r2, r2, #30
3400cea0:	d4fc      	bmi.n	3400ce9c <LL_ATON_DisableUnits_Init+0x5c>
3400cea2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cea6:	601a      	str	r2, [r3, #0]
3400cea8:	681a      	ldr	r2, [r3, #0]
3400ceaa:	0052      	lsls	r2, r2, #1
3400ceac:	d4fc      	bmi.n	3400cea8 <LL_ATON_DisableUnits_Init+0x68>
      LL_ATON_DisableClock(ATON_CONVACC_CLKB_CLK(unitId));
3400ceae:	300a      	adds	r0, #10
3400ceb0:	e7ea      	b.n	3400ce88 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(DECUN, unitId);
3400ceb2:	2202      	movs	r2, #2
3400ceb4:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400ceb8:	33f3      	adds	r3, #243	@ 0xf3
3400ceba:	031b      	lsls	r3, r3, #12
3400cebc:	601a      	str	r2, [r3, #0]
3400cebe:	681a      	ldr	r2, [r3, #0]
3400cec0:	0792      	lsls	r2, r2, #30
3400cec2:	d4fc      	bmi.n	3400cebe <LL_ATON_DisableUnits_Init+0x7e>
3400cec4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cec8:	601a      	str	r2, [r3, #0]
3400ceca:	681a      	ldr	r2, [r3, #0]
3400cecc:	0052      	lsls	r2, r2, #1
3400cece:	d4fc      	bmi.n	3400ceca <LL_ATON_DisableUnits_Init+0x8a>
      LL_ATON_DisableClock(ATON_DECUN_CLKB_CLK(unitId));
3400ced0:	300e      	adds	r0, #14
3400ced2:	e7d9      	b.n	3400ce88 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ACTIV, unitId);
3400ced4:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400ced8:	4a1f      	ldr	r2, [pc, #124]	@ (3400cf58 <LL_ATON_DisableUnits_Init+0x118>)
3400ceda:	33f5      	adds	r3, #245	@ 0xf5
3400cedc:	031b      	lsls	r3, r3, #12
3400cede:	601a      	str	r2, [r3, #0]
3400cee0:	681a      	ldr	r2, [r3, #0]
3400cee2:	0792      	lsls	r2, r2, #30
3400cee4:	d4fc      	bmi.n	3400cee0 <LL_ATON_DisableUnits_Init+0xa0>
3400cee6:	4a1d      	ldr	r2, [pc, #116]	@ (3400cf5c <LL_ATON_DisableUnits_Init+0x11c>)
3400cee8:	601a      	str	r2, [r3, #0]
3400ceea:	681a      	ldr	r2, [r3, #0]
3400ceec:	0052      	lsls	r2, r2, #1
3400ceee:	d4fc      	bmi.n	3400ceea <LL_ATON_DisableUnits_Init+0xaa>
      LL_ATON_DisableClock(ATON_ACTIV_CLKB_CLK(unitId));
3400cef0:	3010      	adds	r0, #16
3400cef2:	e7c9      	b.n	3400ce88 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ARITH, unitId);
3400cef4:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cef8:	4a19      	ldr	r2, [pc, #100]	@ (3400cf60 <LL_ATON_DisableUnits_Init+0x120>)
3400cefa:	33f7      	adds	r3, #247	@ 0xf7
3400cefc:	031b      	lsls	r3, r3, #12
3400cefe:	601a      	str	r2, [r3, #0]
3400cf00:	681a      	ldr	r2, [r3, #0]
3400cf02:	0792      	lsls	r2, r2, #30
3400cf04:	d4fc      	bmi.n	3400cf00 <LL_ATON_DisableUnits_Init+0xc0>
3400cf06:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
3400cf0a:	601a      	str	r2, [r3, #0]
3400cf0c:	681a      	ldr	r2, [r3, #0]
3400cf0e:	0052      	lsls	r2, r2, #1
3400cf10:	d4fc      	bmi.n	3400cf0c <LL_ATON_DisableUnits_Init+0xcc>
      LL_ATON_DisableClock(ATON_ARITH_CLKB_CLK(unitId));
3400cf12:	3012      	adds	r0, #18
3400cf14:	e7b8      	b.n	3400ce88 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(POOL, unitId);
3400cf16:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cf1a:	4a12      	ldr	r2, [pc, #72]	@ (3400cf64 <LL_ATON_DisableUnits_Init+0x124>)
3400cf1c:	33fb      	adds	r3, #251	@ 0xfb
3400cf1e:	031b      	lsls	r3, r3, #12
3400cf20:	601a      	str	r2, [r3, #0]
3400cf22:	681a      	ldr	r2, [r3, #0]
3400cf24:	0792      	lsls	r2, r2, #30
3400cf26:	d4fc      	bmi.n	3400cf22 <LL_ATON_DisableUnits_Init+0xe2>
3400cf28:	4a0f      	ldr	r2, [pc, #60]	@ (3400cf68 <LL_ATON_DisableUnits_Init+0x128>)
3400cf2a:	601a      	str	r2, [r3, #0]
3400cf2c:	681a      	ldr	r2, [r3, #0]
3400cf2e:	0052      	lsls	r2, r2, #1
3400cf30:	d4fc      	bmi.n	3400cf2c <LL_ATON_DisableUnits_Init+0xec>
      LL_ATON_DisableClock(ATON_POOL_CLKB_CLK(unitId));
3400cf32:	3016      	adds	r0, #22
3400cf34:	e7a8      	b.n	3400ce88 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(RECBUF, unitId);
3400cf36:	2202      	movs	r2, #2
3400cf38:	4b0c      	ldr	r3, [pc, #48]	@ (3400cf6c <LL_ATON_DisableUnits_Init+0x12c>)
3400cf3a:	601a      	str	r2, [r3, #0]
3400cf3c:	681a      	ldr	r2, [r3, #0]
3400cf3e:	0792      	lsls	r2, r2, #30
3400cf40:	d4fc      	bmi.n	3400cf3c <LL_ATON_DisableUnits_Init+0xfc>
3400cf42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cf46:	601a      	str	r2, [r3, #0]
3400cf48:	681a      	ldr	r2, [r3, #0]
3400cf4a:	0052      	lsls	r2, r2, #1
3400cf4c:	d4fc      	bmi.n	3400cf48 <LL_ATON_DisableUnits_Init+0x108>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
3400cf4e:	3018      	adds	r0, #24
3400cf50:	e79a      	b.n	3400ce88 <LL_ATON_DisableUnits_Init+0x48>
    switch (unitType)
3400cf52:	f06f 0001 	mvn.w	r0, #1
3400cf56:	e77a      	b.n	3400ce4e <LL_ATON_DisableUnits_Init+0xe>
3400cf58:	00881082 	.word	0x00881082
3400cf5c:	40881080 	.word	0x40881080
3400cf60:	08000002 	.word	0x08000002
3400cf64:	00420002 	.word	0x00420002
3400cf68:	40420000 	.word	0x40420000
3400cf6c:	580fd000 	.word	0x580fd000

3400cf70 <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
3400cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
3400cf72:	4604      	mov	r4, r0
3400cf74:	b928      	cbnz	r0, 3400cf82 <LL_ATON_RT_Main+0x12>
3400cf76:	213c      	movs	r1, #60	@ 0x3c
3400cf78:	4b14      	ldr	r3, [pc, #80]	@ (3400cfcc <LL_ATON_RT_Main+0x5c>)
3400cf7a:	4a15      	ldr	r2, [pc, #84]	@ (3400cfd0 <LL_ATON_RT_Main+0x60>)
  LL_ATON_ASSERT(network_instance->network != NULL);
3400cf7c:	4815      	ldr	r0, [pc, #84]	@ (3400cfd4 <LL_ATON_RT_Main+0x64>)
3400cf7e:	f000 fca9 	bl	3400d8d4 <__assert_func>
3400cf82:	6803      	ldr	r3, [r0, #0]
3400cf84:	b91b      	cbnz	r3, 3400cf8e <LL_ATON_RT_Main+0x1e>
3400cf86:	213d      	movs	r1, #61	@ 0x3d
3400cf88:	4b13      	ldr	r3, [pc, #76]	@ (3400cfd8 <LL_ATON_RT_Main+0x68>)
3400cf8a:	4a11      	ldr	r2, [pc, #68]	@ (3400cfd0 <LL_ATON_RT_Main+0x60>)
3400cf8c:	e7f6      	b.n	3400cf7c <LL_ATON_RT_Main+0xc>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
3400cf8e:	f000 fa21 	bl	3400d3d4 <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
3400cf92:	4620      	mov	r0, r4
3400cf94:	f000 f9dc 	bl	3400d350 <LL_ATON_RT_Init_Network>
  size_t epochCount = 0;
3400cf98:	2600      	movs	r6, #0
    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
    }
    printf("Epoch: %5d, Return: %d\n\r", epochCount, ll_aton_rt_ret);
3400cf9a:	4f10      	ldr	r7, [pc, #64]	@ (3400cfdc <LL_ATON_RT_Main+0x6c>)
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
3400cf9c:	4620      	mov	r0, r4
3400cf9e:	f000 fa93 	bl	3400d4c8 <LL_ATON_RT_RunEpochBlock>
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
3400cfa2:	2801      	cmp	r0, #1
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
3400cfa4:	4605      	mov	r5, r0
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
3400cfa6:	d100      	bne.n	3400cfaa <LL_ATON_RT_Main+0x3a>
      LL_ATON_OSAL_WFE();
3400cfa8:	bf20      	wfe
    printf("Epoch: %5d, Return: %d\n\r", epochCount, ll_aton_rt_ret);
3400cfaa:	4631      	mov	r1, r6
3400cfac:	462a      	mov	r2, r5
3400cfae:	4638      	mov	r0, r7
3400cfb0:	f001 fb30 	bl	3400e614 <iprintf>
    epochCount++;
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3400cfb4:	2d02      	cmp	r5, #2
    epochCount++;
3400cfb6:	f106 0601 	add.w	r6, r6, #1
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3400cfba:	d1ef      	bne.n	3400cf9c <LL_ATON_RT_Main+0x2c>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
3400cfbc:	4620      	mov	r0, r4
3400cfbe:	f000 f9eb 	bl	3400d398 <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
3400cfc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
3400cfc6:	f000 ba4f 	b.w	3400d468 <LL_ATON_RT_RuntimeDeInit>
3400cfca:	bf00      	nop
3400cfcc:	34010fdc 	.word	0x34010fdc
3400cfd0:	34012453 	.word	0x34012453
3400cfd4:	34010ffc 	.word	0x34010ffc
3400cfd8:	34011094 	.word	0x34011094
3400cfdc:	340110bd 	.word	0x340110bd

3400cfe0 <__LL_ATON_RT_Init_Network>:
                          // wait for
  }
}

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3400cfe0:	b510      	push	{r4, lr}
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3400cfe2:	4604      	mov	r4, r0
3400cfe4:	b310      	cbz	r0, 3400d02c <__LL_ATON_RT_Init_Network+0x4c>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3400cfe6:	6803      	ldr	r3, [r0, #0]
3400cfe8:	b303      	cbz	r3, 3400d02c <__LL_ATON_RT_Init_Network+0x4c>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
3400cfea:	69db      	ldr	r3, [r3, #28]
3400cfec:	4798      	blx	r3
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
  nn_instance->exec_state.first_epoch_block = eb_list;
  nn_instance->exec_state.next_epoch_block = NULL;
3400cfee:	2300      	movs	r3, #0
  nn_instance->exec_state.current_epoch_block = eb_list;
3400cff0:	6060      	str	r0, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400cff2:	60a0      	str	r0, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400cff4:	60e3      	str	r3, [r4, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400cff6:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400cff8:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400cffa:	6863      	ldr	r3, [r4, #4]
  if (list != NULL)
3400cffc:	b9a3      	cbnz	r3, 3400d028 <__LL_ATON_RT_Init_Network+0x48>
  int i = 0;
3400cffe:	461a      	mov	r2, r3
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400d000:	6262      	str	r2, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d002:	2200      	movs	r2, #0
  nn_instance->exec_state.triggered_events = 0x0;
  nn_instance->exec_state.current_epoch_block_started = false;
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d004:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d006:	62a2      	str	r2, [r4, #40]	@ 0x28
  nn_instance->exec_state.inference_started = false;
3400d008:	7622      	strb	r2, [r4, #24]
  nn_instance->exec_state.triggered_events = 0x0;
3400d00a:	61e2      	str	r2, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d00c:	f884 2020 	strb.w	r2, [r4, #32]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d010:	b163      	cbz	r3, 3400d02c <__LL_ATON_RT_Init_Network+0x4c>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400d012:	4621      	mov	r1, r4
  }
}
3400d014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400d018:	2004      	movs	r0, #4
3400d01a:	4718      	bx	r3
      list++;
3400d01c:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400d01e:	3201      	adds	r2, #1
3400d020:	8a19      	ldrh	r1, [r3, #16]
3400d022:	0709      	lsls	r1, r1, #28
3400d024:	d5fa      	bpl.n	3400d01c <__LL_ATON_RT_Init_Network+0x3c>
3400d026:	e7eb      	b.n	3400d000 <__LL_ATON_RT_Init_Network+0x20>
3400d028:	2201      	movs	r2, #1
3400d02a:	e7f9      	b.n	3400d020 <__LL_ATON_RT_Init_Network+0x40>
}
3400d02c:	bd10      	pop	{r4, pc}
	...

3400d030 <__ll_clear_aton_owner>:

    __ll_current_aton_ip_owner = new_owner;
  }

  static inline void __ll_clear_aton_owner(NN_Instance_TypeDef *current_owner)
  {
3400d030:	b508      	push	{r3, lr}
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
3400d032:	4b09      	ldr	r3, [pc, #36]	@ (3400d058 <__ll_clear_aton_owner+0x28>)
3400d034:	681a      	ldr	r2, [r3, #0]
3400d036:	4282      	cmp	r2, r0
3400d038:	d005      	beq.n	3400d046 <__ll_clear_aton_owner+0x16>
3400d03a:	2142      	movs	r1, #66	@ 0x42
3400d03c:	4b07      	ldr	r3, [pc, #28]	@ (3400d05c <__ll_clear_aton_owner+0x2c>)
3400d03e:	4a08      	ldr	r2, [pc, #32]	@ (3400d060 <__ll_clear_aton_owner+0x30>)

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d040:	4808      	ldr	r0, [pc, #32]	@ (3400d064 <__ll_clear_aton_owner+0x34>)
3400d042:	f000 fc47 	bl	3400d8d4 <__assert_func>
3400d046:	4a08      	ldr	r2, [pc, #32]	@ (3400d068 <__ll_clear_aton_owner+0x38>)
3400d048:	6812      	ldr	r2, [r2, #0]
3400d04a:	b11a      	cbz	r2, 3400d054 <__ll_clear_aton_owner+0x24>
3400d04c:	2146      	movs	r1, #70	@ 0x46
3400d04e:	4b07      	ldr	r3, [pc, #28]	@ (3400d06c <__ll_clear_aton_owner+0x3c>)
3400d050:	4a03      	ldr	r2, [pc, #12]	@ (3400d060 <__ll_clear_aton_owner+0x30>)
3400d052:	e7f5      	b.n	3400d040 <__ll_clear_aton_owner+0x10>
#endif // NDEBUG

    __ll_current_aton_ip_owner = NULL;
3400d054:	601a      	str	r2, [r3, #0]
    LL_ATON_OSAL_UNLOCK_ATON();
  }
3400d056:	bd08      	pop	{r3, pc}
3400d058:	3401328c 	.word	0x3401328c
3400d05c:	340110d6 	.word	0x340110d6
3400d060:	340125b1 	.word	0x340125b1
3400d064:	34011102 	.word	0x34011102
3400d068:	34013288 	.word	0x34013288
3400d06c:	3401119a 	.word	0x3401119a

3400d070 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
3400d070:	b508      	push	{r3, lr}
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400d072:	4b07      	ldr	r3, [pc, #28]	@ (3400d090 <__LL_ATON_RT_SetWaitMask+0x20>)
3400d074:	681b      	ldr	r3, [r3, #0]
3400d076:	b92b      	cbnz	r3, 3400d084 <__LL_ATON_RT_SetWaitMask+0x14>
3400d078:	2175      	movs	r1, #117	@ 0x75
3400d07a:	4b06      	ldr	r3, [pc, #24]	@ (3400d094 <__LL_ATON_RT_SetWaitMask+0x24>)
3400d07c:	4a06      	ldr	r2, [pc, #24]	@ (3400d098 <__LL_ATON_RT_SetWaitMask+0x28>)
3400d07e:	4807      	ldr	r0, [pc, #28]	@ (3400d09c <__LL_ATON_RT_SetWaitMask+0x2c>)
3400d080:	f000 fc28 	bl	3400d8d4 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
3400d084:	4b06      	ldr	r3, [pc, #24]	@ (3400d0a0 <__LL_ATON_RT_SetWaitMask+0x30>)
3400d086:	6018      	str	r0, [r3, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3400d088:	43c0      	mvns	r0, r0
3400d08a:	4b06      	ldr	r3, [pc, #24]	@ (3400d0a4 <__LL_ATON_RT_SetWaitMask+0x34>)
3400d08c:	6258      	str	r0, [r3, #36]	@ 0x24
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
3400d08e:	bd08      	pop	{r3, pc}
3400d090:	3401328c 	.word	0x3401328c
3400d094:	340111b6 	.word	0x340111b6
3400d098:	34012504 	.word	0x34012504
3400d09c:	34011102 	.word	0x34011102
3400d0a0:	34013288 	.word	0x34013288
3400d0a4:	580e1000 	.word	0x580e1000

3400d0a8 <EpochBlock_EpochControllerUnit>:
  {
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
  }

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3400d0a8:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3400d0aa:	8a03      	ldrh	r3, [r0, #16]
3400d0ac:	075b      	lsls	r3, r3, #29
3400d0ae:	d406      	bmi.n	3400d0be <EpochBlock_EpochControllerUnit+0x16>
3400d0b0:	f240 212f 	movw	r1, #559	@ 0x22f
3400d0b4:	4b03      	ldr	r3, [pc, #12]	@ (3400d0c4 <EpochBlock_EpochControllerUnit+0x1c>)
3400d0b6:	4a04      	ldr	r2, [pc, #16]	@ (3400d0c8 <EpochBlock_EpochControllerUnit+0x20>)
3400d0b8:	4804      	ldr	r0, [pc, #16]	@ (3400d0cc <EpochBlock_EpochControllerUnit+0x24>)
3400d0ba:	f000 fc0b 	bl	3400d8d4 <__assert_func>
    return eb->wait_mask;
  }
3400d0be:	68c0      	ldr	r0, [r0, #12]
3400d0c0:	bd08      	pop	{r3, pc}
3400d0c2:	bf00      	nop
3400d0c4:	340111e0 	.word	0x340111e0
3400d0c8:	340124e5 	.word	0x340124e5
3400d0cc:	340111fb 	.word	0x340111fb

3400d0d0 <__LL_ATON_RT_ExecEndEpochBlock>:
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d0d0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
{
3400d0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400d0d6:	4605      	mov	r5, r0
3400d0d8:	460c      	mov	r4, r1
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d0da:	b113      	cbz	r3, 3400d0e2 <__LL_ATON_RT_ExecEndEpochBlock+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
3400d0dc:	4602      	mov	r2, r0
3400d0de:	2002      	movs	r0, #2
3400d0e0:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400d0e2:	8a2b      	ldrh	r3, [r5, #16]
3400d0e4:	0758      	lsls	r0, r3, #29
3400d0e6:	d518      	bpl.n	3400d11a <__LL_ATON_RT_ExecEndEpochBlock+0x4a>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400d0e8:	4628      	mov	r0, r5
3400d0ea:	f7ff ffdd 	bl	3400d0a8 <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d0ee:	b128      	cbz	r0, 3400d0fc <__LL_ATON_RT_ExecEndEpochBlock+0x2c>
3400d0f0:	21c2      	movs	r1, #194	@ 0xc2
3400d0f2:	4b25      	ldr	r3, [pc, #148]	@ (3400d188 <__LL_ATON_RT_ExecEndEpochBlock+0xb8>)
3400d0f4:	4a25      	ldr	r2, [pc, #148]	@ (3400d18c <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400d0f6:	4826      	ldr	r0, [pc, #152]	@ (3400d190 <__LL_ATON_RT_ExecEndEpochBlock+0xc0>)
3400d0f8:	f000 fbec 	bl	3400d8d4 <__assert_func>
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
3400d0fc:	2202      	movs	r2, #2
3400d0fe:	4b25      	ldr	r3, [pc, #148]	@ (3400d194 <__LL_ATON_RT_ExecEndEpochBlock+0xc4>)
3400d100:	601a      	str	r2, [r3, #0]
3400d102:	681a      	ldr	r2, [r3, #0]
3400d104:	0791      	lsls	r1, r2, #30
3400d106:	d4fc      	bmi.n	3400d102 <__LL_ATON_RT_ExecEndEpochBlock+0x32>
3400d108:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d10c:	601a      	str	r2, [r3, #0]
3400d10e:	681a      	ldr	r2, [r3, #0]
3400d110:	0052      	lsls	r2, r2, #1
3400d112:	d4fc      	bmi.n	3400d10e <__LL_ATON_RT_ExecEndEpochBlock+0x3e>
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
3400d114:	2019      	movs	r0, #25
3400d116:	f7ff fe85 	bl	3400ce24 <LL_ATON_DisableClock>
  if (eb->end_epoch_block != NULL)
3400d11a:	686b      	ldr	r3, [r5, #4]
3400d11c:	b10b      	cbz	r3, 3400d122 <__LL_ATON_RT_ExecEndEpochBlock+0x52>
    eb->end_epoch_block((const void *)eb);
3400d11e:	4628      	mov	r0, r5
3400d120:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
3400d122:	8a2e      	ldrh	r6, [r5, #16]
  if (EpochBlock_IsEpochPureHW(eb) ||
3400d124:	f016 0f90 	tst.w	r6, #144	@ 0x90
3400d128:	f006 07c0 	and.w	r7, r6, #192	@ 0xc0
3400d12c:	d108      	bne.n	3400d140 <__LL_ATON_RT_ExecEndEpochBlock+0x70>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400d12e:	bb0f      	cbnz	r7, 3400d174 <__LL_ATON_RT_ExecEndEpochBlock+0xa4>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400d130:	4b19      	ldr	r3, [pc, #100]	@ (3400d198 <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400d132:	681b      	ldr	r3, [r3, #0]
3400d134:	42a3      	cmp	r3, r4
3400d136:	d115      	bne.n	3400d164 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400d138:	21ed      	movs	r1, #237	@ 0xed
3400d13a:	4b18      	ldr	r3, [pc, #96]	@ (3400d19c <__LL_ATON_RT_ExecEndEpochBlock+0xcc>)
3400d13c:	4a13      	ldr	r2, [pc, #76]	@ (3400d18c <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400d13e:	e7da      	b.n	3400d0f6 <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400d140:	4b15      	ldr	r3, [pc, #84]	@ (3400d198 <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400d142:	681b      	ldr	r3, [r3, #0]
3400d144:	42a3      	cmp	r3, r4
3400d146:	d003      	beq.n	3400d150 <__LL_ATON_RT_ExecEndEpochBlock+0x80>
3400d148:	21e1      	movs	r1, #225	@ 0xe1
3400d14a:	4b15      	ldr	r3, [pc, #84]	@ (3400d1a0 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>)
3400d14c:	4a0f      	ldr	r2, [pc, #60]	@ (3400d18c <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400d14e:	e7d2      	b.n	3400d0f6 <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    __LL_ATON_RT_SetWaitMask(0);
3400d150:	2000      	movs	r0, #0
3400d152:	f7ff ff8d 	bl	3400d070 <__LL_ATON_RT_SetWaitMask>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400d156:	06f3      	lsls	r3, r6, #27
3400d158:	d5e9      	bpl.n	3400d12e <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
    __ll_clear_aton_owner(nn_instance);
3400d15a:	4620      	mov	r0, r4
3400d15c:	f7ff ff68 	bl	3400d030 <__ll_clear_aton_owner>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400d160:	2f00      	cmp	r7, #0
3400d162:	d0e5      	beq.n	3400d130 <__LL_ATON_RT_ExecEndEpochBlock+0x60>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d164:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d166:	b163      	cbz	r3, 3400d182 <__LL_ATON_RT_ExecEndEpochBlock+0xb2>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400d168:	462a      	mov	r2, r5
3400d16a:	4621      	mov	r1, r4
}
3400d16c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400d170:	2003      	movs	r0, #3
3400d172:	4718      	bx	r3
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400d174:	6923      	ldr	r3, [r4, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400d176:	2b00      	cmp	r3, #0
3400d178:	d1f4      	bne.n	3400d164 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
                                       (nn_instance->exec_state.next_epoch_block ==
3400d17a:	68e3      	ldr	r3, [r4, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400d17c:	2b00      	cmp	r3, #0
3400d17e:	d1f1      	bne.n	3400d164 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400d180:	e7eb      	b.n	3400d15a <__LL_ATON_RT_ExecEndEpochBlock+0x8a>
}
3400d182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400d186:	bf00      	nop
3400d188:	34011298 	.word	0x34011298
3400d18c:	340124c6 	.word	0x340124c6
3400d190:	340112a1 	.word	0x340112a1
3400d194:	580fe000 	.word	0x580fe000
3400d198:	3401328c 	.word	0x3401328c
3400d19c:	34011363 	.word	0x34011363
3400d1a0:	34011339 	.word	0x34011339

3400d1a4 <__LL_ATON_RT_DetermineNextEpochBlock>:
{
3400d1a4:	b508      	push	{r3, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400d1a6:	b928      	cbnz	r0, 3400d1b4 <__LL_ATON_RT_DetermineNextEpochBlock+0x10>
3400d1a8:	21f8      	movs	r1, #248	@ 0xf8
3400d1aa:	4b1a      	ldr	r3, [pc, #104]	@ (3400d214 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
3400d1ac:	4a1a      	ldr	r2, [pc, #104]	@ (3400d218 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400d1ae:	481b      	ldr	r0, [pc, #108]	@ (3400d21c <__LL_ATON_RT_DetermineNextEpochBlock+0x78>)
3400d1b0:	f000 fb90 	bl	3400d8d4 <__assert_func>
3400d1b4:	69c3      	ldr	r3, [r0, #28]
3400d1b6:	b11b      	cbz	r3, 3400d1c0 <__LL_ATON_RT_DetermineNextEpochBlock+0x1c>
3400d1b8:	21fa      	movs	r1, #250	@ 0xfa
3400d1ba:	4b19      	ldr	r3, [pc, #100]	@ (3400d220 <__LL_ATON_RT_DetermineNextEpochBlock+0x7c>)
3400d1bc:	4a16      	ldr	r2, [pc, #88]	@ (3400d218 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400d1be:	e7f6      	b.n	3400d1ae <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
  if ((nn_instance->exec_state.next_epoch_block != NULL))
3400d1c0:	68c3      	ldr	r3, [r0, #12]
3400d1c2:	b313      	cbz	r3, 3400d20a <__LL_ATON_RT_DetermineNextEpochBlock+0x66>
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
3400d1c4:	6903      	ldr	r3, [r0, #16]
3400d1c6:	b123      	cbz	r3, 3400d1d2 <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
3400d1c8:	f44f 7181 	mov.w	r1, #258	@ 0x102
3400d1cc:	4b15      	ldr	r3, [pc, #84]	@ (3400d224 <__LL_ATON_RT_DetermineNextEpochBlock+0x80>)
3400d1ce:	4a12      	ldr	r2, [pc, #72]	@ (3400d218 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400d1d0:	e7ed      	b.n	3400d1ae <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
3400d1d2:	6843      	ldr	r3, [r0, #4]
3400d1d4:	6103      	str	r3, [r0, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3400d1d6:	6883      	ldr	r3, [r0, #8]
3400d1d8:	6143      	str	r3, [r0, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
3400d1da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
3400d1dc:	6283      	str	r3, [r0, #40]	@ 0x28
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
3400d1de:	68c3      	ldr	r3, [r0, #12]
3400d1e0:	6043      	str	r3, [r0, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
3400d1e2:	68c3      	ldr	r3, [r0, #12]
3400d1e4:	6083      	str	r3, [r0, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400d1e6:	6883      	ldr	r3, [r0, #8]
  if (list != NULL)
3400d1e8:	b96b      	cbnz	r3, 3400d206 <__LL_ATON_RT_DetermineNextEpochBlock+0x62>
  int i = 0;
3400d1ea:	461a      	mov	r2, r3
    nn_instance->exec_state.next_epoch_block = NULL;
3400d1ec:	2300      	movs	r3, #0
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400d1ee:	6242      	str	r2, [r0, #36]	@ 0x24
    nn_instance->exec_state.next_epoch_block = NULL;
3400d1f0:	60c3      	str	r3, [r0, #12]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d1f2:	2300      	movs	r3, #0
3400d1f4:	f880 3020 	strb.w	r3, [r0, #32]
}
3400d1f8:	bd08      	pop	{r3, pc}
      list++;
3400d1fa:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400d1fc:	3201      	adds	r2, #1
3400d1fe:	8a19      	ldrh	r1, [r3, #16]
3400d200:	0709      	lsls	r1, r1, #28
3400d202:	d5fa      	bpl.n	3400d1fa <__LL_ATON_RT_DetermineNextEpochBlock+0x56>
3400d204:	e7f2      	b.n	3400d1ec <__LL_ATON_RT_DetermineNextEpochBlock+0x48>
3400d206:	2201      	movs	r2, #1
3400d208:	e7f9      	b.n	3400d1fe <__LL_ATON_RT_DetermineNextEpochBlock+0x5a>
    nn_instance->exec_state.current_epoch_block++;
3400d20a:	6843      	ldr	r3, [r0, #4]
3400d20c:	3314      	adds	r3, #20
3400d20e:	6043      	str	r3, [r0, #4]
3400d210:	e7ef      	b.n	3400d1f2 <__LL_ATON_RT_DetermineNextEpochBlock+0x4e>
3400d212:	bf00      	nop
3400d214:	340113d1 	.word	0x340113d1
3400d218:	340124a1 	.word	0x340124a1
3400d21c:	340112a1 	.word	0x340112a1
3400d220:	340113ec 	.word	0x340113ec
3400d224:	3401141c 	.word	0x3401141c

3400d228 <dump_dma_state>:
LL_ATON_WEAK void dump_dma_state(void){};
3400d228:	4770      	bx	lr
	...

3400d22c <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3400d22c:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3400d22e:	4604      	mov	r4, r0
3400d230:	2800      	cmp	r0, #0
3400d232:	d060      	beq.n	3400d2f6 <__LL_ATON_RT_IrqErr+0xca>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3400d234:	4b30      	ldr	r3, [pc, #192]	@ (3400d2f8 <__LL_ATON_RT_IrqErr+0xcc>)
3400d236:	4003      	ands	r3, r0
3400d238:	d007      	beq.n	3400d24a <__LL_ATON_RT_IrqErr+0x1e>

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3400d23a:	4259      	negs	r1, r3
3400d23c:	4019      	ands	r1, r3
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3400d23e:	4b2f      	ldr	r3, [pc, #188]	@ (3400d2fc <__LL_ATON_RT_IrqErr+0xd0>)
3400d240:	030a      	lsls	r2, r1, #12
3400d242:	58d2      	ldr	r2, [r2, r3]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
3400d244:	482e      	ldr	r0, [pc, #184]	@ (3400d300 <__LL_ATON_RT_IrqErr+0xd4>)
3400d246:	f001 f9e5 	bl	3400e614 <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3400d24a:	f3c4 0309 	ubfx	r3, r4, #0, #10
3400d24e:	b113      	cbz	r3, 3400d256 <__LL_ATON_RT_IrqErr+0x2a>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3400d250:	482c      	ldr	r0, [pc, #176]	@ (3400d304 <__LL_ATON_RT_IrqErr+0xd8>)
3400d252:	f001 fa47 	bl	3400e6e4 <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3400d256:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
3400d25a:	d002      	beq.n	3400d262 <__LL_ATON_RT_IrqErr+0x36>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3400d25c:	482a      	ldr	r0, [pc, #168]	@ (3400d308 <__LL_ATON_RT_IrqErr+0xdc>)
3400d25e:	f001 fa41 	bl	3400e6e4 <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3400d262:	01e5      	lsls	r5, r4, #7
3400d264:	d502      	bpl.n	3400d26c <__LL_ATON_RT_IrqErr+0x40>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3400d266:	4829      	ldr	r0, [pc, #164]	@ (3400d30c <__LL_ATON_RT_IrqErr+0xe0>)
3400d268:	f001 fa3c 	bl	3400e6e4 <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3400d26c:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
3400d270:	d00e      	beq.n	3400d290 <__LL_ATON_RT_IrqErr+0x64>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3400d272:	4827      	ldr	r0, [pc, #156]	@ (3400d310 <__LL_ATON_RT_IrqErr+0xe4>)
3400d274:	f001 fa36 	bl	3400e6e4 <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3400d278:	4b26      	ldr	r3, [pc, #152]	@ (3400d314 <__LL_ATON_RT_IrqErr+0xe8>)
3400d27a:	2100      	movs	r1, #0
3400d27c:	691a      	ldr	r2, [r3, #16]
3400d27e:	4826      	ldr	r0, [pc, #152]	@ (3400d318 <__LL_ATON_RT_IrqErr+0xec>)
3400d280:	f001 f9c8 	bl	3400e614 <iprintf>
3400d284:	4b25      	ldr	r3, [pc, #148]	@ (3400d31c <__LL_ATON_RT_IrqErr+0xf0>)
3400d286:	2101      	movs	r1, #1
3400d288:	691a      	ldr	r2, [r3, #16]
3400d28a:	4823      	ldr	r0, [pc, #140]	@ (3400d318 <__LL_ATON_RT_IrqErr+0xec>)
3400d28c:	f001 f9c2 	bl	3400e614 <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3400d290:	0120      	lsls	r0, r4, #4
3400d292:	d502      	bpl.n	3400d29a <__LL_ATON_RT_IrqErr+0x6e>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3400d294:	4822      	ldr	r0, [pc, #136]	@ (3400d320 <__LL_ATON_RT_IrqErr+0xf4>)
3400d296:	f001 fa25 	bl	3400e6e4 <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d29a:	0061      	lsls	r1, r4, #1
3400d29c:	d50c      	bpl.n	3400d2b8 <__LL_ATON_RT_IrqErr+0x8c>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3400d29e:	4d21      	ldr	r5, [pc, #132]	@ (3400d324 <__LL_ATON_RT_IrqErr+0xf8>)
3400d2a0:	4821      	ldr	r0, [pc, #132]	@ (3400d328 <__LL_ATON_RT_IrqErr+0xfc>)
3400d2a2:	68e9      	ldr	r1, [r5, #12]
3400d2a4:	f001 f9b6 	bl	3400e614 <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3400d2a8:	6a29      	ldr	r1, [r5, #32]
3400d2aa:	4820      	ldr	r0, [pc, #128]	@ (3400d32c <__LL_ATON_RT_IrqErr+0x100>)
3400d2ac:	f001 f9b2 	bl	3400e614 <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3400d2b0:	69e9      	ldr	r1, [r5, #28]
3400d2b2:	481f      	ldr	r0, [pc, #124]	@ (3400d330 <__LL_ATON_RT_IrqErr+0x104>)
3400d2b4:	f001 f9ae 	bl	3400e614 <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d2b8:	00a2      	lsls	r2, r4, #2
3400d2ba:	d502      	bpl.n	3400d2c2 <__LL_ATON_RT_IrqErr+0x96>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3400d2bc:	481d      	ldr	r0, [pc, #116]	@ (3400d334 <__LL_ATON_RT_IrqErr+0x108>)
3400d2be:	f001 fa11 	bl	3400e6e4 <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d2c2:	00e3      	lsls	r3, r4, #3
3400d2c4:	d502      	bpl.n	3400d2cc <__LL_ATON_RT_IrqErr+0xa0>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3400d2c6:	481c      	ldr	r0, [pc, #112]	@ (3400d338 <__LL_ATON_RT_IrqErr+0x10c>)
3400d2c8:	f001 fa0c 	bl	3400e6e4 <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3400d2cc:	f7ff ffac 	bl	3400d228 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3400d2d0:	4622      	mov	r2, r4
3400d2d2:	f240 314a 	movw	r1, #842	@ 0x34a
3400d2d6:	2300      	movs	r3, #0
3400d2d8:	4818      	ldr	r0, [pc, #96]	@ (3400d33c <__LL_ATON_RT_IrqErr+0x110>)
3400d2da:	f001 f99b 	bl	3400e614 <iprintf>
//#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
3400d2de:	4b18      	ldr	r3, [pc, #96]	@ (3400d340 <__LL_ATON_RT_IrqErr+0x114>)
3400d2e0:	681b      	ldr	r3, [r3, #0]
3400d2e2:	6898      	ldr	r0, [r3, #8]
3400d2e4:	f001 f8ae 	bl	3400e444 <fflush>
//#endif
  LL_ATON_ASSERT(false); // may never happen
3400d2e8:	f240 314e 	movw	r1, #846	@ 0x34e
3400d2ec:	4b15      	ldr	r3, [pc, #84]	@ (3400d344 <__LL_ATON_RT_IrqErr+0x118>)
3400d2ee:	4a16      	ldr	r2, [pc, #88]	@ (3400d348 <__LL_ATON_RT_IrqErr+0x11c>)
3400d2f0:	4816      	ldr	r0, [pc, #88]	@ (3400d34c <__LL_ATON_RT_IrqErr+0x120>)
3400d2f2:	f000 faef 	bl	3400d8d4 <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3400d2f6:	bd38      	pop	{r3, r4, r5, pc}
3400d2f8:	000ffc00 	.word	0x000ffc00
3400d2fc:	580e503c 	.word	0x580e503c
3400d300:	3401145d 	.word	0x3401145d
3400d304:	3401148a 	.word	0x3401148a
3400d308:	340114b0 	.word	0x340114b0
3400d30c:	340114d4 	.word	0x340114d4
3400d310:	340114f4 	.word	0x340114f4
3400d314:	580e2000 	.word	0x580e2000
3400d318:	3401150c 	.word	0x3401150c
3400d31c:	580e3000 	.word	0x580e3000
3400d320:	34011521 	.word	0x34011521
3400d324:	580fe000 	.word	0x580fe000
3400d328:	34011539 	.word	0x34011539
3400d32c:	3401156d 	.word	0x3401156d
3400d330:	34011597 	.word	0x34011597
3400d334:	340115b8 	.word	0x340115b8
3400d338:	340115d9 	.word	0x340115d9
3400d33c:	340115f4 	.word	0x340115f4
3400d340:	34012854 	.word	0x34012854
3400d344:	340111b4 	.word	0x340111b4
3400d348:	3401247d 	.word	0x3401247d
3400d34c:	340112a1 	.word	0x340112a1

3400d350 <LL_ATON_RT_Init_Network>:
{
3400d350:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400d352:	4604      	mov	r4, r0
3400d354:	b1b0      	cbz	r0, 3400d384 <LL_ATON_RT_Init_Network+0x34>
  if (nn_instance->network == NULL)
3400d356:	6803      	ldr	r3, [r0, #0]
3400d358:	b1a3      	cbz	r3, 3400d384 <LL_ATON_RT_Init_Network+0x34>
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
3400d35a:	685b      	ldr	r3, [r3, #4]
3400d35c:	b933      	cbnz	r3, 3400d36c <LL_ATON_RT_Init_Network+0x1c>
3400d35e:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
3400d362:	4b09      	ldr	r3, [pc, #36]	@ (3400d388 <LL_ATON_RT_Init_Network+0x38>)
3400d364:	4a09      	ldr	r2, [pc, #36]	@ (3400d38c <LL_ATON_RT_Init_Network+0x3c>)
  LL_ATON_ASSERT(ret == true);
3400d366:	480a      	ldr	r0, [pc, #40]	@ (3400d390 <LL_ATON_RT_Init_Network+0x40>)
3400d368:	f000 fab4 	bl	3400d8d4 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
3400d36c:	4798      	blx	r3
  LL_ATON_ASSERT(ret == true);
3400d36e:	b920      	cbnz	r0, 3400d37a <LL_ATON_RT_Init_Network+0x2a>
3400d370:	f240 11a9 	movw	r1, #425	@ 0x1a9
3400d374:	4b07      	ldr	r3, [pc, #28]	@ (3400d394 <LL_ATON_RT_Init_Network+0x44>)
3400d376:	4a05      	ldr	r2, [pc, #20]	@ (3400d38c <LL_ATON_RT_Init_Network+0x3c>)
3400d378:	e7f5      	b.n	3400d366 <LL_ATON_RT_Init_Network+0x16>
  __LL_ATON_RT_Init_Network(nn_instance);
3400d37a:	4620      	mov	r0, r4
}
3400d37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __LL_ATON_RT_Init_Network(nn_instance);
3400d380:	f7ff be2e 	b.w	3400cfe0 <__LL_ATON_RT_Init_Network>
}
3400d384:	bd10      	pop	{r4, pc}
3400d386:	bf00      	nop
3400d388:	3401161b 	.word	0x3401161b
3400d38c:	340125c7 	.word	0x340125c7
3400d390:	340112a1 	.word	0x340112a1
3400d394:	34011650 	.word	0x34011650

3400d398 <LL_ATON_RT_DeInit_Network>:
{
3400d398:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400d39a:	4604      	mov	r4, r0
3400d39c:	b1b8      	cbz	r0, 3400d3ce <LL_ATON_RT_DeInit_Network+0x36>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d39e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400d3a0:	b11b      	cbz	r3, 3400d3aa <LL_ATON_RT_DeInit_Network+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
3400d3a2:	4601      	mov	r1, r0
3400d3a4:	2200      	movs	r2, #0
3400d3a6:	2005      	movs	r0, #5
3400d3a8:	4798      	blx	r3
  if (nn_instance == __ll_current_aton_ip_owner)
3400d3aa:	4b09      	ldr	r3, [pc, #36]	@ (3400d3d0 <LL_ATON_RT_DeInit_Network+0x38>)
3400d3ac:	681b      	ldr	r3, [r3, #0]
3400d3ae:	42a3      	cmp	r3, r4
3400d3b0:	d102      	bne.n	3400d3b8 <LL_ATON_RT_DeInit_Network+0x20>
    __ll_clear_aton_owner(nn_instance);
3400d3b2:	4620      	mov	r0, r4
3400d3b4:	f7ff fe3c 	bl	3400d030 <__ll_clear_aton_owner>
  nn_instance->exec_state.current_epoch_block = eb_list;
3400d3b8:	2300      	movs	r3, #0
3400d3ba:	6063      	str	r3, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400d3bc:	60a3      	str	r3, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400d3be:	60e3      	str	r3, [r4, #12]
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400d3c0:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400d3c2:	6163      	str	r3, [r4, #20]
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
3400d3c4:	6263      	str	r3, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d3c6:	62a3      	str	r3, [r4, #40]	@ 0x28
  nn_instance->exec_state.triggered_events = 0x0;
3400d3c8:	61e3      	str	r3, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d3ca:	f884 3020 	strb.w	r3, [r4, #32]
}
3400d3ce:	bd10      	pop	{r4, pc}
3400d3d0:	3401328c 	.word	0x3401328c

3400d3d4 <LL_ATON_RT_RuntimeInit>:
{
3400d3d4:	b510      	push	{r4, lr}
  LL_ATON_Init();
3400d3d6:	f7fe ff07 	bl	3400c1e8 <LL_ATON_Init>
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
3400d3da:	2202      	movs	r2, #2
3400d3dc:	4b1f      	ldr	r3, [pc, #124]	@ (3400d45c <LL_ATON_RT_RuntimeInit+0x88>)
3400d3de:	601a      	str	r2, [r3, #0]
3400d3e0:	681a      	ldr	r2, [r3, #0]
3400d3e2:	0791      	lsls	r1, r2, #30
3400d3e4:	d4fc      	bmi.n	3400d3e0 <LL_ATON_RT_RuntimeInit+0xc>
3400d3e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d3ea:	601a      	str	r2, [r3, #0]
3400d3ec:	681a      	ldr	r2, [r3, #0]
3400d3ee:	0052      	lsls	r2, r2, #1
3400d3f0:	d4fc      	bmi.n	3400d3ec <LL_ATON_RT_RuntimeInit+0x18>
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3400d3f2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3400d3f6:	615a      	str	r2, [r3, #20]
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
3400d3f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400d3fc:	625a      	str	r2, [r3, #36]	@ 0x24
    ATON_ENABLE(INTCTRL, 0);
3400d3fe:	681a      	ldr	r2, [r3, #0]
3400d400:	f042 0201 	orr.w	r2, r2, #1
3400d404:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d406:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400d40a:	4b15      	ldr	r3, [pc, #84]	@ (3400d460 <LL_ATON_RT_RuntimeInit+0x8c>)
3400d40c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d410:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d414:	f3bf 8f6f 	isb	sy
3400d418:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400d41c:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d424:	f3bf 8f6f 	isb	sy
3400d428:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
3400d42c:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d430:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d434:	f3bf 8f6f 	isb	sy
3400d438:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
3400d43c:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d444:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d448:	605a      	str	r2, [r3, #4]
  if (ll_aton_init_deinit_trace)
3400d44a:	4b06      	ldr	r3, [pc, #24]	@ (3400d464 <LL_ATON_RT_RuntimeInit+0x90>)
3400d44c:	681b      	ldr	r3, [r3, #0]
3400d44e:	b11b      	cbz	r3, 3400d458 <LL_ATON_RT_RuntimeInit+0x84>
}
3400d450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
3400d454:	2006      	movs	r0, #6
3400d456:	4718      	bx	r3
}
3400d458:	bd10      	pop	{r4, pc}
3400d45a:	bf00      	nop
3400d45c:	580e1000 	.word	0x580e1000
3400d460:	e000e100 	.word	0xe000e100
3400d464:	34013284 	.word	0x34013284

3400d468 <LL_ATON_RT_RuntimeDeInit>:
{
3400d468:	b508      	push	{r3, lr}
  if (ll_aton_init_deinit_trace)
3400d46a:	4b15      	ldr	r3, [pc, #84]	@ (3400d4c0 <LL_ATON_RT_RuntimeDeInit+0x58>)
3400d46c:	681b      	ldr	r3, [r3, #0]
3400d46e:	b10b      	cbz	r3, 3400d474 <LL_ATON_RT_RuntimeDeInit+0xc>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
3400d470:	2007      	movs	r0, #7
3400d472:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d474:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400d478:	4b12      	ldr	r3, [pc, #72]	@ (3400d4c4 <LL_ATON_RT_RuntimeDeInit+0x5c>)
3400d47a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d47e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d482:	f3bf 8f6f 	isb	sy
3400d486:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
3400d48a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d48e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d492:	f3bf 8f6f 	isb	sy
3400d496:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400d49a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d49e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d4a2:	f3bf 8f6f 	isb	sy
3400d4a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400d4aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d4ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d4b2:	f3bf 8f6f 	isb	sy
}
3400d4b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DeInit();
3400d4ba:	f7ff b931 	b.w	3400c720 <LL_ATON_DeInit>
3400d4be:	bf00      	nop
3400d4c0:	34013284 	.word	0x34013284
3400d4c4:	e000e100 	.word	0xe000e100

3400d4c8 <LL_ATON_RT_RunEpochBlock>:
{
3400d4c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400d4ca:	4604      	mov	r4, r0
3400d4cc:	b930      	cbnz	r0, 3400d4dc <LL_ATON_RT_RunEpochBlock+0x14>
3400d4ce:	f44f 7110 	mov.w	r1, #576	@ 0x240
3400d4d2:	4b8c      	ldr	r3, [pc, #560]	@ (3400d704 <LL_ATON_RT_RunEpochBlock+0x23c>)
3400d4d4:	4a8c      	ldr	r2, [pc, #560]	@ (3400d708 <LL_ATON_RT_RunEpochBlock+0x240>)
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
3400d4d6:	488d      	ldr	r0, [pc, #564]	@ (3400d70c <LL_ATON_RT_RunEpochBlock+0x244>)
3400d4d8:	f000 f9fc 	bl	3400d8d4 <__assert_func>
3400d4dc:	6843      	ldr	r3, [r0, #4]
3400d4de:	b923      	cbnz	r3, 3400d4ea <LL_ATON_RT_RunEpochBlock+0x22>
3400d4e0:	f240 2143 	movw	r1, #579	@ 0x243
3400d4e4:	4b8a      	ldr	r3, [pc, #552]	@ (3400d710 <LL_ATON_RT_RunEpochBlock+0x248>)
3400d4e6:	4a88      	ldr	r2, [pc, #544]	@ (3400d708 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d4e8:	e7f5      	b.n	3400d4d6 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.inference_started == false)
3400d4ea:	7e03      	ldrb	r3, [r0, #24]
3400d4ec:	b98b      	cbnz	r3, 3400d512 <LL_ATON_RT_RunEpochBlock+0x4a>
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3400d4ee:	6803      	ldr	r3, [r0, #0]
3400d4f0:	b10b      	cbz	r3, 3400d4f6 <LL_ATON_RT_RunEpochBlock+0x2e>
3400d4f2:	689b      	ldr	r3, [r3, #8]
3400d4f4:	b923      	cbnz	r3, 3400d500 <LL_ATON_RT_RunEpochBlock+0x38>
3400d4f6:	f240 2155 	movw	r1, #597	@ 0x255
3400d4fa:	4b86      	ldr	r3, [pc, #536]	@ (3400d714 <LL_ATON_RT_RunEpochBlock+0x24c>)
3400d4fc:	4a82      	ldr	r2, [pc, #520]	@ (3400d708 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d4fe:	e7ea      	b.n	3400d4d6 <LL_ATON_RT_RunEpochBlock+0xe>
    bool ret = nn_instance->network->ec_inference_init();
3400d500:	4798      	blx	r3
    LL_ATON_ASSERT(ret == true);
3400d502:	b920      	cbnz	r0, 3400d50e <LL_ATON_RT_RunEpochBlock+0x46>
3400d504:	f240 2159 	movw	r1, #601	@ 0x259
3400d508:	4b83      	ldr	r3, [pc, #524]	@ (3400d718 <LL_ATON_RT_RunEpochBlock+0x250>)
3400d50a:	4a7f      	ldr	r2, [pc, #508]	@ (3400d708 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d50c:	e7e3      	b.n	3400d4d6 <LL_ATON_RT_RunEpochBlock+0xe>
    nn_instance->exec_state.inference_started = true;
3400d50e:	2301      	movs	r3, #1
3400d510:	7623      	strb	r3, [r4, #24]
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
3400d512:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400d514:	8a03      	ldrh	r3, [r0, #16]
3400d516:	075a      	lsls	r2, r3, #29
3400d518:	d512      	bpl.n	3400d540 <LL_ATON_RT_RunEpochBlock+0x78>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400d51a:	f7ff fdc5 	bl	3400d0a8 <EpochBlock_EpochControllerUnit>
3400d51e:	2301      	movs	r3, #1
3400d520:	fa03 f000 	lsl.w	r0, r3, r0
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
3400d524:	f894 3020 	ldrb.w	r3, [r4, #32]
3400d528:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
3400d52c:	b343      	cbz	r3, 3400d580 <LL_ATON_RT_RunEpochBlock+0xb8>
3400d52e:	2800      	cmp	r0, #0
3400d530:	d036      	beq.n	3400d5a0 <LL_ATON_RT_RunEpochBlock+0xd8>
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
3400d532:	69e3      	ldr	r3, [r4, #28]
3400d534:	ea30 0303 	bics.w	r3, r0, r3
3400d538:	d004      	beq.n	3400d544 <LL_ATON_RT_RunEpochBlock+0x7c>
        return LL_ATON_RT_WFE;
3400d53a:	2001      	movs	r0, #1
}
3400d53c:	b002      	add	sp, #8
3400d53e:	bd70      	pop	{r4, r5, r6, pc}
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400d540:	68c0      	ldr	r0, [r0, #12]
3400d542:	e7ef      	b.n	3400d524 <LL_ATON_RT_RunEpochBlock+0x5c>
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
3400d544:	4b75      	ldr	r3, [pc, #468]	@ (3400d71c <LL_ATON_RT_RunEpochBlock+0x254>)
3400d546:	681b      	ldr	r3, [r3, #0]
3400d548:	42a3      	cmp	r3, r4
3400d54a:	d004      	beq.n	3400d556 <LL_ATON_RT_RunEpochBlock+0x8e>
3400d54c:	f240 2171 	movw	r1, #625	@ 0x271
3400d550:	4b73      	ldr	r3, [pc, #460]	@ (3400d720 <LL_ATON_RT_RunEpochBlock+0x258>)
3400d552:	4a6d      	ldr	r2, [pc, #436]	@ (3400d708 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d554:	e7bf      	b.n	3400d4d6 <LL_ATON_RT_RunEpochBlock+0xe>
3400d556:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400d55a:	4a72      	ldr	r2, [pc, #456]	@ (3400d724 <LL_ATON_RT_RunEpochBlock+0x25c>)
3400d55c:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d560:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d564:	f3bf 8f6f 	isb	sy
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
3400d568:	69e3      	ldr	r3, [r4, #28]
3400d56a:	ea23 0300 	bic.w	r3, r3, r0
3400d56e:	61e3      	str	r3, [r4, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d570:	6051      	str	r1, [r2, #4]
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d572:	6860      	ldr	r0, [r4, #4]
3400d574:	4621      	mov	r1, r4
3400d576:	f7ff fdab 	bl	3400d0d0 <__LL_ATON_RT_ExecEndEpochBlock>
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400d57a:	4620      	mov	r0, r4
3400d57c:	f7ff fe12 	bl	3400d1a4 <__LL_ATON_RT_DetermineNextEpochBlock>
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
3400d580:	6863      	ldr	r3, [r4, #4]
3400d582:	8a1b      	ldrh	r3, [r3, #16]
3400d584:	071b      	lsls	r3, r3, #28
3400d586:	d534      	bpl.n	3400d5f2 <LL_ATON_RT_RunEpochBlock+0x12a>
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
3400d588:	6923      	ldr	r3, [r4, #16]
3400d58a:	2b00      	cmp	r3, #0
3400d58c:	f000 80b7 	beq.w	3400d6fe <LL_ATON_RT_RunEpochBlock+0x236>
      LL_ATON_ASSERT(nn_instance == NULL);

      nn_instance = __ll_current_aton_ip_owner;
    }

    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400d590:	4b62      	ldr	r3, [pc, #392]	@ (3400d71c <LL_ATON_RT_RunEpochBlock+0x254>)
3400d592:	681a      	ldr	r2, [r3, #0]
3400d594:	b932      	cbnz	r2, 3400d5a4 <LL_ATON_RT_RunEpochBlock+0xdc>
3400d596:	2197      	movs	r1, #151	@ 0x97
3400d598:	4b63      	ldr	r3, [pc, #396]	@ (3400d728 <LL_ATON_RT_RunEpochBlock+0x260>)
3400d59a:	4a64      	ldr	r2, [pc, #400]	@ (3400d72c <LL_ATON_RT_RunEpochBlock+0x264>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d59c:	4864      	ldr	r0, [pc, #400]	@ (3400d730 <LL_ATON_RT_RunEpochBlock+0x268>)
3400d59e:	e79b      	b.n	3400d4d8 <LL_ATON_RT_RunEpochBlock+0x10>
  bool this_run_executed_end_epoch = false;
3400d5a0:	4606      	mov	r6, r0
3400d5a2:	e7ed      	b.n	3400d580 <LL_ATON_RT_RunEpochBlock+0xb8>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
3400d5a4:	6862      	ldr	r2, [r4, #4]
3400d5a6:	8a12      	ldrh	r2, [r2, #16]
3400d5a8:	0716      	lsls	r6, r2, #28
3400d5aa:	d403      	bmi.n	3400d5b4 <LL_ATON_RT_RunEpochBlock+0xec>
3400d5ac:	2198      	movs	r1, #152	@ 0x98
3400d5ae:	4b61      	ldr	r3, [pc, #388]	@ (3400d734 <LL_ATON_RT_RunEpochBlock+0x26c>)
3400d5b0:	4a5e      	ldr	r2, [pc, #376]	@ (3400d72c <LL_ATON_RT_RunEpochBlock+0x264>)
3400d5b2:	e7f3      	b.n	3400d59c <LL_ATON_RT_RunEpochBlock+0xd4>
                          : EpochBlock_IsEpochInternal(nn_instance->exec_state.current_epoch_block));
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
3400d5b4:	6922      	ldr	r2, [r4, #16]
3400d5b6:	8a12      	ldrh	r2, [r2, #16]
3400d5b8:	0655      	lsls	r5, r2, #25
3400d5ba:	d403      	bmi.n	3400d5c4 <LL_ATON_RT_RunEpochBlock+0xfc>
3400d5bc:	219a      	movs	r1, #154	@ 0x9a
3400d5be:	4b5e      	ldr	r3, [pc, #376]	@ (3400d738 <LL_ATON_RT_RunEpochBlock+0x270>)
3400d5c0:	4a5a      	ldr	r2, [pc, #360]	@ (3400d72c <LL_ATON_RT_RunEpochBlock+0x264>)
3400d5c2:	e7eb      	b.n	3400d59c <LL_ATON_RT_RunEpochBlock+0xd4>

    /* Clear owner */
    if (unlock)
    {
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
3400d5c4:	6818      	ldr	r0, [r3, #0]
3400d5c6:	f7ff fd33 	bl	3400d030 <__ll_clear_aton_owner>
    }

    /* set old context */
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400d5ca:	68e3      	ldr	r3, [r4, #12]
3400d5cc:	b11b      	cbz	r3, 3400d5d6 <LL_ATON_RT_RunEpochBlock+0x10e>
3400d5ce:	21a3      	movs	r1, #163	@ 0xa3
3400d5d0:	4b5a      	ldr	r3, [pc, #360]	@ (3400d73c <LL_ATON_RT_RunEpochBlock+0x274>)
3400d5d2:	4a56      	ldr	r2, [pc, #344]	@ (3400d72c <LL_ATON_RT_RunEpochBlock+0x264>)
3400d5d4:	e7e2      	b.n	3400d59c <LL_ATON_RT_RunEpochBlock+0xd4>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
3400d5d6:	6922      	ldr	r2, [r4, #16]
3400d5d8:	6062      	str	r2, [r4, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3400d5da:	6962      	ldr	r2, [r4, #20]
3400d5dc:	60a2      	str	r2, [r4, #8]

#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
3400d5de:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
3400d5e0:	6262      	str	r2, [r4, #36]	@ 0x24
#endif

    /* reset saved context */
    nn_instance->exec_state.saved_current_epoch_block = NULL;
3400d5e2:	6123      	str	r3, [r4, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
3400d5e4:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d5e6:	62a3      	str	r3, [r4, #40]	@ 0x28
        nn_instance->exec_state.current_epoch_block++;
3400d5e8:	6863      	ldr	r3, [r4, #4]
3400d5ea:	3314      	adds	r3, #20
3400d5ec:	6063      	str	r3, [r4, #4]
        return LL_ATON_RT_NO_WFE;
3400d5ee:	2000      	movs	r0, #0
3400d5f0:	e7a4      	b.n	3400d53c <LL_ATON_RT_RunEpochBlock+0x74>
    if (this_run_executed_end_epoch)
3400d5f2:	2e00      	cmp	r6, #0
3400d5f4:	d1fb      	bne.n	3400d5ee <LL_ATON_RT_RunEpochBlock+0x126>
    if (!nn_instance->exec_state.current_epoch_block_started)
3400d5f6:	f894 3020 	ldrb.w	r3, [r4, #32]
3400d5fa:	2b00      	cmp	r3, #0
3400d5fc:	d169      	bne.n	3400d6d2 <LL_ATON_RT_RunEpochBlock+0x20a>
      nn_instance->exec_state.current_epoch_block_started = true;
3400d5fe:	2301      	movs	r3, #1
3400d600:	f884 3020 	strb.w	r3, [r4, #32]
      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d604:	6865      	ldr	r5, [r4, #4]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400d606:	68e3      	ldr	r3, [r4, #12]
3400d608:	b11b      	cbz	r3, 3400d612 <LL_ATON_RT_RunEpochBlock+0x14a>
3400d60a:	2161      	movs	r1, #97	@ 0x61
3400d60c:	4b4b      	ldr	r3, [pc, #300]	@ (3400d73c <LL_ATON_RT_RunEpochBlock+0x274>)
3400d60e:	4a4c      	ldr	r2, [pc, #304]	@ (3400d740 <LL_ATON_RT_RunEpochBlock+0x278>)
3400d610:	e761      	b.n	3400d4d6 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d612:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d614:	b11b      	cbz	r3, 3400d61e <LL_ATON_RT_RunEpochBlock+0x156>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
3400d616:	462a      	mov	r2, r5
3400d618:	4621      	mov	r1, r4
3400d61a:	4630      	mov	r0, r6
3400d61c:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
3400d61e:	8a2b      	ldrh	r3, [r5, #16]
  if (EpochBlock_IsEpochStart(eb))
3400d620:	07d8      	lsls	r0, r3, #31
3400d622:	d505      	bpl.n	3400d630 <LL_ATON_RT_RunEpochBlock+0x168>
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400d624:	69e2      	ldr	r2, [r4, #28]
3400d626:	b11a      	cbz	r2, 3400d630 <LL_ATON_RT_RunEpochBlock+0x168>
3400d628:	2156      	movs	r1, #86	@ 0x56
3400d62a:	4b46      	ldr	r3, [pc, #280]	@ (3400d744 <LL_ATON_RT_RunEpochBlock+0x27c>)
3400d62c:	4a46      	ldr	r2, [pc, #280]	@ (3400d748 <LL_ATON_RT_RunEpochBlock+0x280>)
3400d62e:	e7b5      	b.n	3400d59c <LL_ATON_RT_RunEpochBlock+0xd4>
  if (EpochBlock_IsEpochPureHW(eb) ||
3400d630:	f013 0f50 	tst.w	r3, #80	@ 0x50
3400d634:	d015      	beq.n	3400d662 <LL_ATON_RT_RunEpochBlock+0x19a>
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
3400d636:	4a39      	ldr	r2, [pc, #228]	@ (3400d71c <LL_ATON_RT_RunEpochBlock+0x254>)
3400d638:	6811      	ldr	r1, [r2, #0]
3400d63a:	428c      	cmp	r4, r1
3400d63c:	d103      	bne.n	3400d646 <LL_ATON_RT_RunEpochBlock+0x17e>
3400d63e:	2131      	movs	r1, #49	@ 0x31
3400d640:	4b42      	ldr	r3, [pc, #264]	@ (3400d74c <LL_ATON_RT_RunEpochBlock+0x284>)
3400d642:	4a43      	ldr	r2, [pc, #268]	@ (3400d750 <LL_ATON_RT_RunEpochBlock+0x288>)
3400d644:	e7aa      	b.n	3400d59c <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
3400d646:	6811      	ldr	r1, [r2, #0]
3400d648:	b119      	cbz	r1, 3400d652 <LL_ATON_RT_RunEpochBlock+0x18a>
3400d64a:	2135      	movs	r1, #53	@ 0x35
3400d64c:	4b41      	ldr	r3, [pc, #260]	@ (3400d754 <LL_ATON_RT_RunEpochBlock+0x28c>)
3400d64e:	4a40      	ldr	r2, [pc, #256]	@ (3400d750 <LL_ATON_RT_RunEpochBlock+0x288>)
3400d650:	e7a4      	b.n	3400d59c <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d652:	4941      	ldr	r1, [pc, #260]	@ (3400d758 <LL_ATON_RT_RunEpochBlock+0x290>)
3400d654:	6809      	ldr	r1, [r1, #0]
3400d656:	b119      	cbz	r1, 3400d660 <LL_ATON_RT_RunEpochBlock+0x198>
3400d658:	2139      	movs	r1, #57	@ 0x39
3400d65a:	4b40      	ldr	r3, [pc, #256]	@ (3400d75c <LL_ATON_RT_RunEpochBlock+0x294>)
3400d65c:	4a3c      	ldr	r2, [pc, #240]	@ (3400d750 <LL_ATON_RT_RunEpochBlock+0x288>)
3400d65e:	e79d      	b.n	3400d59c <LL_ATON_RT_RunEpochBlock+0xd4>
    __ll_current_aton_ip_owner = new_owner;
3400d660:	6014      	str	r4, [r2, #0]
  if (!EpochBlock_IsEpochBlob(eb))
3400d662:	0759      	lsls	r1, r3, #29
3400d664:	d41c      	bmi.n	3400d6a0 <LL_ATON_RT_RunEpochBlock+0x1d8>
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
3400d666:	f013 0f90 	tst.w	r3, #144	@ 0x90
3400d66a:	d00a      	beq.n	3400d682 <LL_ATON_RT_RunEpochBlock+0x1ba>
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
3400d66c:	4b2b      	ldr	r3, [pc, #172]	@ (3400d71c <LL_ATON_RT_RunEpochBlock+0x254>)
3400d66e:	681b      	ldr	r3, [r3, #0]
3400d670:	429c      	cmp	r4, r3
3400d672:	d003      	beq.n	3400d67c <LL_ATON_RT_RunEpochBlock+0x1b4>
3400d674:	2178      	movs	r1, #120	@ 0x78
3400d676:	4b2a      	ldr	r3, [pc, #168]	@ (3400d720 <LL_ATON_RT_RunEpochBlock+0x258>)
3400d678:	4a31      	ldr	r2, [pc, #196]	@ (3400d740 <LL_ATON_RT_RunEpochBlock+0x278>)
3400d67a:	e72c      	b.n	3400d4d6 <LL_ATON_RT_RunEpochBlock+0xe>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3400d67c:	68e8      	ldr	r0, [r5, #12]
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400d67e:	f7ff fcf7 	bl	3400d070 <__LL_ATON_RT_SetWaitMask>
  if (eb->start_epoch_block != NULL)
3400d682:	682b      	ldr	r3, [r5, #0]
3400d684:	b10b      	cbz	r3, 3400d68a <LL_ATON_RT_RunEpochBlock+0x1c2>
    eb->start_epoch_block((const void *)eb);
3400d686:	4628      	mov	r0, r5
3400d688:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400d68a:	8a2b      	ldrh	r3, [r5, #16]
3400d68c:	075a      	lsls	r2, r3, #29
3400d68e:	d51a      	bpl.n	3400d6c6 <LL_ATON_RT_RunEpochBlock+0x1fe>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400d690:	4628      	mov	r0, r5
3400d692:	f7ff fd09 	bl	3400d0a8 <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d696:	b130      	cbz	r0, 3400d6a6 <LL_ATON_RT_RunEpochBlock+0x1de>
3400d698:	21a4      	movs	r1, #164	@ 0xa4
3400d69a:	4b31      	ldr	r3, [pc, #196]	@ (3400d760 <LL_ATON_RT_RunEpochBlock+0x298>)
3400d69c:	4a28      	ldr	r2, [pc, #160]	@ (3400d740 <LL_ATON_RT_RunEpochBlock+0x278>)
3400d69e:	e71a      	b.n	3400d4d6 <LL_ATON_RT_RunEpochBlock+0xe>
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400d6a0:	f240 30ff 	movw	r0, #1023	@ 0x3ff
3400d6a4:	e7eb      	b.n	3400d67e <LL_ATON_RT_RunEpochBlock+0x1b6>
    conf.stepmode = 0;
3400d6a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400d6aa:	68ab      	ldr	r3, [r5, #8]
    conf.stepmode = 0;
3400d6ac:	f360 0200 	bfi	r2, r0, #0, #1
    LL_EpochCtrl_Init(ecId, &conf);
3400d6b0:	4669      	mov	r1, sp
    conf.stepmode = 0;
3400d6b2:	f88d 2004 	strb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400d6b6:	9300      	str	r3, [sp, #0]
    LL_EpochCtrl_Init(ecId, &conf);
3400d6b8:	f7ff fb98 	bl	3400cdec <LL_EpochCtrl_Init>
    ATON_ENABLE(EPOCHCTRL, ecId);
3400d6bc:	4a29      	ldr	r2, [pc, #164]	@ (3400d764 <LL_ATON_RT_RunEpochBlock+0x29c>)
3400d6be:	6813      	ldr	r3, [r2, #0]
3400d6c0:	f043 0301 	orr.w	r3, r3, #1
3400d6c4:	6013      	str	r3, [r2, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d6c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d6c8:	b11b      	cbz	r3, 3400d6d2 <LL_ATON_RT_RunEpochBlock+0x20a>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3400d6ca:	462a      	mov	r2, r5
3400d6cc:	4621      	mov	r1, r4
3400d6ce:	2001      	movs	r0, #1
3400d6d0:	4798      	blx	r3
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400d6d2:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400d6d4:	8a03      	ldrh	r3, [r0, #16]
3400d6d6:	075b      	lsls	r3, r3, #29
3400d6d8:	d50f      	bpl.n	3400d6fa <LL_ATON_RT_RunEpochBlock+0x232>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400d6da:	f7ff fce5 	bl	3400d0a8 <EpochBlock_EpochControllerUnit>
3400d6de:	2301      	movs	r3, #1
3400d6e0:	fa03 f000 	lsl.w	r0, r3, r0
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400d6e4:	2800      	cmp	r0, #0
3400d6e6:	f47f af28 	bne.w	3400d53a <LL_ATON_RT_RunEpochBlock+0x72>
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d6ea:	6860      	ldr	r0, [r4, #4]
3400d6ec:	4621      	mov	r1, r4
3400d6ee:	f7ff fcef 	bl	3400d0d0 <__LL_ATON_RT_ExecEndEpochBlock>
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400d6f2:	4620      	mov	r0, r4
3400d6f4:	f7ff fd56 	bl	3400d1a4 <__LL_ATON_RT_DetermineNextEpochBlock>
      return LL_ATON_RT_NO_WFE;
3400d6f8:	e779      	b.n	3400d5ee <LL_ATON_RT_RunEpochBlock+0x126>
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400d6fa:	68c0      	ldr	r0, [r0, #12]
3400d6fc:	e7f2      	b.n	3400d6e4 <LL_ATON_RT_RunEpochBlock+0x21c>
        return LL_ATON_RT_DONE;
3400d6fe:	2002      	movs	r0, #2
3400d700:	e71c      	b.n	3400d53c <LL_ATON_RT_RunEpochBlock+0x74>
3400d702:	bf00      	nop
3400d704:	340113d1 	.word	0x340113d1
3400d708:	34012598 	.word	0x34012598
3400d70c:	340112a1 	.word	0x340112a1
3400d710:	34011659 	.word	0x34011659
3400d714:	34011694 	.word	0x34011694
3400d718:	34011650 	.word	0x34011650
3400d71c:	3401328c 	.word	0x3401328c
3400d720:	340116f6 	.word	0x340116f6
3400d724:	e000e100 	.word	0xe000e100
3400d728:	340111b6 	.word	0x340111b6
3400d72c:	34012571 	.word	0x34012571
3400d730:	34011102 	.word	0x34011102
3400d734:	34011720 	.word	0x34011720
3400d738:	340117bc 	.word	0x340117bc
3400d73c:	34011808 	.word	0x34011808
3400d740:	34012550 	.word	0x34012550
3400d744:	340113ec 	.word	0x340113ec
3400d748:	34012531 	.word	0x34012531
3400d74c:	34011840 	.word	0x34011840
3400d750:	3401251d 	.word	0x3401251d
3400d754:	34011868 	.word	0x34011868
3400d758:	34013288 	.word	0x34013288
3400d75c:	3401119a 	.word	0x3401119a
3400d760:	34011298 	.word	0x34011298
3400d764:	580fe000 	.word	0x580fe000

3400d768 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3400d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400d76a:	4b38      	ldr	r3, [pc, #224]	@ (3400d84c <NPU0_IRQHandler+0xe4>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3400d76c:	4c38      	ldr	r4, [pc, #224]	@ (3400d850 <NPU0_IRQHandler+0xe8>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400d76e:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
3400d770:	6823      	ldr	r3, [r4, #0]
3400d772:	b343      	cbz	r3, 3400d7c6 <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3400d774:	6823      	ldr	r3, [r4, #0]
3400d776:	685b      	ldr	r3, [r3, #4]
3400d778:	b933      	cbnz	r3, 3400d788 <NPU0_IRQHandler+0x20>
3400d77a:	f240 31b1 	movw	r1, #945	@ 0x3b1
3400d77e:	4b35      	ldr	r3, [pc, #212]	@ (3400d854 <NPU0_IRQHandler+0xec>)
3400d780:	4a35      	ldr	r2, [pc, #212]	@ (3400d858 <NPU0_IRQHandler+0xf0>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d782:	4836      	ldr	r0, [pc, #216]	@ (3400d85c <NPU0_IRQHandler+0xf4>)
3400d784:	f000 f8a6 	bl	3400d8d4 <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400d788:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3400d78a:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400d78c:	8a1b      	ldrh	r3, [r3, #16]
3400d78e:	075b      	lsls	r3, r3, #29
3400d790:	d40c      	bmi.n	3400d7ac <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
3400d792:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
3400d796:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400d79a:	f7ff fd47 	bl	3400d22c <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400d79e:	6823      	ldr	r3, [r4, #0]
3400d7a0:	b99b      	cbnz	r3, 3400d7ca <NPU0_IRQHandler+0x62>
3400d7a2:	f240 31d2 	movw	r1, #978	@ 0x3d2
3400d7a6:	4b2e      	ldr	r3, [pc, #184]	@ (3400d860 <NPU0_IRQHandler+0xf8>)
3400d7a8:	4a2b      	ldr	r2, [pc, #172]	@ (3400d858 <NPU0_IRQHandler+0xf0>)
3400d7aa:	e7ea      	b.n	3400d782 <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400d7ac:	6823      	ldr	r3, [r4, #0]
3400d7ae:	6858      	ldr	r0, [r3, #4]
3400d7b0:	f7ff fc7a 	bl	3400d0a8 <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d7b4:	b120      	cbz	r0, 3400d7c0 <NPU0_IRQHandler+0x58>
3400d7b6:	f240 31be 	movw	r1, #958	@ 0x3be
3400d7ba:	4b2a      	ldr	r3, [pc, #168]	@ (3400d864 <NPU0_IRQHandler+0xfc>)
3400d7bc:	4a26      	ldr	r2, [pc, #152]	@ (3400d858 <NPU0_IRQHandler+0xf0>)
3400d7be:	e7e0      	b.n	3400d782 <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
3400d7c0:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
3400d7c4:	e7e9      	b.n	3400d79a <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400d7c6:	4628      	mov	r0, r5
3400d7c8:	e7e7      	b.n	3400d79a <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3400d7ca:	6823      	ldr	r3, [r4, #0]
3400d7cc:	685b      	ldr	r3, [r3, #4]
3400d7ce:	8a1b      	ldrh	r3, [r3, #16]
3400d7d0:	f013 0304 	ands.w	r3, r3, #4
3400d7d4:	d123      	bne.n	3400d81e <NPU0_IRQHandler+0xb6>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3400d7d6:	6822      	ldr	r2, [r4, #0]
3400d7d8:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
3400d7da:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
3400d7dc:	402a      	ands	r2, r5
3400d7de:	d017      	beq.n	3400d810 <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
3400d7e0:	f04f 0c01 	mov.w	ip, #1
3400d7e4:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400d7e6:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400d7e8:	4e1f      	ldr	r6, [pc, #124]	@ (3400d868 <NPU0_IRQHandler+0x100>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400d7ea:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
3400d7ec:	fa22 f703 	lsr.w	r7, r2, r3
3400d7f0:	07ff      	lsls	r7, r7, #31
3400d7f2:	d507      	bpl.n	3400d804 <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400d7f4:	031f      	lsls	r7, r3, #12
3400d7f6:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
3400d7fa:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
3400d7fe:	fa0c f703 	lsl.w	r7, ip, r3
3400d802:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
3400d804:	3801      	subs	r0, #1
3400d806:	f103 0301 	add.w	r3, r3, #1
3400d80a:	d1ef      	bne.n	3400d7ec <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400d80c:	6823      	ldr	r3, [r4, #0]
3400d80e:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
3400d810:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3400d814:	4b0d      	ldr	r3, [pc, #52]	@ (3400d84c <NPU0_IRQHandler+0xe4>)
3400d816:	611d      	str	r5, [r3, #16]
3400d818:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
3400d81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400d81e:	6823      	ldr	r3, [r4, #0]
3400d820:	6858      	ldr	r0, [r3, #4]
3400d822:	f7ff fc41 	bl	3400d0a8 <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d826:	b120      	cbz	r0, 3400d832 <NPU0_IRQHandler+0xca>
3400d828:	f240 3191 	movw	r1, #913	@ 0x391
3400d82c:	4b0d      	ldr	r3, [pc, #52]	@ (3400d864 <NPU0_IRQHandler+0xfc>)
3400d82e:	4a0f      	ldr	r2, [pc, #60]	@ (3400d86c <NPU0_IRQHandler+0x104>)
3400d830:	e7a7      	b.n	3400d782 <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3400d832:	00eb      	lsls	r3, r5, #3
3400d834:	d5ec      	bpl.n	3400d810 <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3400d836:	4b0e      	ldr	r3, [pc, #56]	@ (3400d870 <NPU0_IRQHandler+0x108>)
3400d838:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3400d83a:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400d83c:	6823      	ldr	r3, [r4, #0]
3400d83e:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400d840:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
3400d842:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400d846:	61d3      	str	r3, [r2, #28]
3400d848:	e7e2      	b.n	3400d810 <NPU0_IRQHandler+0xa8>
3400d84a:	bf00      	nop
3400d84c:	580e1000 	.word	0x580e1000
3400d850:	3401328c 	.word	0x3401328c
3400d854:	34011892 	.word	0x34011892
3400d858:	34012491 	.word	0x34012491
3400d85c:	340112a1 	.word	0x340112a1
3400d860:	340111b6 	.word	0x340111b6
3400d864:	34011298 	.word	0x34011298
3400d868:	580e503c 	.word	0x580e503c
3400d86c:	34012463 	.word	0x34012463
3400d870:	580fe000 	.word	0x580fe000

3400d874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3400d874:	480f      	ldr	r0, [pc, #60]	@ (3400d8b4 <LoopForever+0x4>)
  msr   MSPLIM, r0
3400d876:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3400d87a:	480f      	ldr	r0, [pc, #60]	@ (3400d8b8 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3400d87c:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3400d87e:	f7f4 fc7d 	bl	3400217c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3400d882:	480e      	ldr	r0, [pc, #56]	@ (3400d8bc <LoopForever+0xc>)
  ldr r1, =_edata
3400d884:	490e      	ldr	r1, [pc, #56]	@ (3400d8c0 <LoopForever+0x10>)
  ldr r2, =_sidata
3400d886:	4a0f      	ldr	r2, [pc, #60]	@ (3400d8c4 <LoopForever+0x14>)
  movs r3, #0
3400d888:	2300      	movs	r3, #0
  b LoopCopyDataInit
3400d88a:	e002      	b.n	3400d892 <LoopCopyDataInit>

3400d88c <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3400d88c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3400d88e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3400d890:	3304      	adds	r3, #4

3400d892 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3400d892:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3400d894:	428c      	cmp	r4, r1
  bcc CopyDataInit
3400d896:	d3f9      	bcc.n	3400d88c <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3400d898:	4a0b      	ldr	r2, [pc, #44]	@ (3400d8c8 <LoopForever+0x18>)
  ldr r4, =_ebss
3400d89a:	4c0c      	ldr	r4, [pc, #48]	@ (3400d8cc <LoopForever+0x1c>)
  movs r3, #0
3400d89c:	2300      	movs	r3, #0
  b LoopFillZerobss
3400d89e:	e001      	b.n	3400d8a4 <LoopFillZerobss>

3400d8a0 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3400d8a0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3400d8a2:	3204      	adds	r2, #4

3400d8a4 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3400d8a4:	42a2      	cmp	r2, r4
  bcc FillZerobss
3400d8a6:	d3fb      	bcc.n	3400d8a0 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3400d8a8:	f001 fa56 	bl	3400ed58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3400d8ac:	f7f3 fb2e 	bl	34000f0c <main>

3400d8b0 <LoopForever>:

LoopForever:
  b LoopForever
3400d8b0:	e7fe      	b.n	3400d8b0 <LoopForever>
3400d8b2:	0000      	.short	0x0000
  ldr   r0, =_sstack
3400d8b4:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3400d8b8:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3400d8bc:	340127f4 	.word	0x340127f4
  ldr r1, =_edata
3400d8c0:	34012a10 	.word	0x34012a10
  ldr r2, =_sidata
3400d8c4:	340127f4 	.word	0x340127f4
  ldr r2, =_sbss
3400d8c8:	34012a10 	.word	0x34012a10
  ldr r4, =_ebss
3400d8cc:	340133e0 	.word	0x340133e0

3400d8d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3400d8d0:	e7fe      	b.n	3400d8d0 <ADC1_2_IRQHandler>
	...

3400d8d4 <__assert_func>:
3400d8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400d8d6:	4614      	mov	r4, r2
3400d8d8:	461a      	mov	r2, r3
3400d8da:	4b09      	ldr	r3, [pc, #36]	@ (3400d900 <__assert_func+0x2c>)
3400d8dc:	4605      	mov	r5, r0
3400d8de:	681b      	ldr	r3, [r3, #0]
3400d8e0:	68d8      	ldr	r0, [r3, #12]
3400d8e2:	b14c      	cbz	r4, 3400d8f8 <__assert_func+0x24>
3400d8e4:	4b07      	ldr	r3, [pc, #28]	@ (3400d904 <__assert_func+0x30>)
3400d8e6:	9100      	str	r1, [sp, #0]
3400d8e8:	4907      	ldr	r1, [pc, #28]	@ (3400d908 <__assert_func+0x34>)
3400d8ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400d8ee:	462b      	mov	r3, r5
3400d8f0:	f000 fe60 	bl	3400e5b4 <fiprintf>
3400d8f4:	f001 fa72 	bl	3400eddc <abort>
3400d8f8:	4b04      	ldr	r3, [pc, #16]	@ (3400d90c <__assert_func+0x38>)
3400d8fa:	461c      	mov	r4, r3
3400d8fc:	e7f3      	b.n	3400d8e6 <__assert_func+0x12>
3400d8fe:	bf00      	nop
3400d900:	34012854 	.word	0x34012854
3400d904:	340118dc 	.word	0x340118dc
3400d908:	340118e9 	.word	0x340118e9
3400d90c:	34010f84 	.word	0x34010f84

3400d910 <malloc>:
3400d910:	4b02      	ldr	r3, [pc, #8]	@ (3400d91c <malloc+0xc>)
3400d912:	4601      	mov	r1, r0
3400d914:	6818      	ldr	r0, [r3, #0]
3400d916:	f000 b825 	b.w	3400d964 <_malloc_r>
3400d91a:	bf00      	nop
3400d91c:	34012854 	.word	0x34012854

3400d920 <sbrk_aligned>:
3400d920:	b570      	push	{r4, r5, r6, lr}
3400d922:	4e0f      	ldr	r6, [pc, #60]	@ (3400d960 <sbrk_aligned+0x40>)
3400d924:	460c      	mov	r4, r1
3400d926:	4605      	mov	r5, r0
3400d928:	6831      	ldr	r1, [r6, #0]
3400d92a:	b911      	cbnz	r1, 3400d932 <sbrk_aligned+0x12>
3400d92c:	f001 f9ec 	bl	3400ed08 <_sbrk_r>
3400d930:	6030      	str	r0, [r6, #0]
3400d932:	4621      	mov	r1, r4
3400d934:	4628      	mov	r0, r5
3400d936:	f001 f9e7 	bl	3400ed08 <_sbrk_r>
3400d93a:	1c43      	adds	r3, r0, #1
3400d93c:	d103      	bne.n	3400d946 <sbrk_aligned+0x26>
3400d93e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3400d942:	4620      	mov	r0, r4
3400d944:	bd70      	pop	{r4, r5, r6, pc}
3400d946:	1cc4      	adds	r4, r0, #3
3400d948:	f024 0403 	bic.w	r4, r4, #3
3400d94c:	42a0      	cmp	r0, r4
3400d94e:	d0f8      	beq.n	3400d942 <sbrk_aligned+0x22>
3400d950:	1a21      	subs	r1, r4, r0
3400d952:	4628      	mov	r0, r5
3400d954:	f001 f9d8 	bl	3400ed08 <_sbrk_r>
3400d958:	3001      	adds	r0, #1
3400d95a:	d1f2      	bne.n	3400d942 <sbrk_aligned+0x22>
3400d95c:	e7ef      	b.n	3400d93e <sbrk_aligned+0x1e>
3400d95e:	bf00      	nop
3400d960:	34013290 	.word	0x34013290

3400d964 <_malloc_r>:
3400d964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400d968:	1ccd      	adds	r5, r1, #3
3400d96a:	4606      	mov	r6, r0
3400d96c:	f025 0503 	bic.w	r5, r5, #3
3400d970:	3508      	adds	r5, #8
3400d972:	2d0c      	cmp	r5, #12
3400d974:	bf38      	it	cc
3400d976:	250c      	movcc	r5, #12
3400d978:	2d00      	cmp	r5, #0
3400d97a:	db01      	blt.n	3400d980 <_malloc_r+0x1c>
3400d97c:	42a9      	cmp	r1, r5
3400d97e:	d904      	bls.n	3400d98a <_malloc_r+0x26>
3400d980:	230c      	movs	r3, #12
3400d982:	6033      	str	r3, [r6, #0]
3400d984:	2000      	movs	r0, #0
3400d986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400d98a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3400da60 <_malloc_r+0xfc>
3400d98e:	f000 f869 	bl	3400da64 <__malloc_lock>
3400d992:	f8d8 3000 	ldr.w	r3, [r8]
3400d996:	461c      	mov	r4, r3
3400d998:	bb44      	cbnz	r4, 3400d9ec <_malloc_r+0x88>
3400d99a:	4629      	mov	r1, r5
3400d99c:	4630      	mov	r0, r6
3400d99e:	f7ff ffbf 	bl	3400d920 <sbrk_aligned>
3400d9a2:	1c43      	adds	r3, r0, #1
3400d9a4:	4604      	mov	r4, r0
3400d9a6:	d158      	bne.n	3400da5a <_malloc_r+0xf6>
3400d9a8:	f8d8 4000 	ldr.w	r4, [r8]
3400d9ac:	4627      	mov	r7, r4
3400d9ae:	2f00      	cmp	r7, #0
3400d9b0:	d143      	bne.n	3400da3a <_malloc_r+0xd6>
3400d9b2:	2c00      	cmp	r4, #0
3400d9b4:	d04b      	beq.n	3400da4e <_malloc_r+0xea>
3400d9b6:	6823      	ldr	r3, [r4, #0]
3400d9b8:	4639      	mov	r1, r7
3400d9ba:	4630      	mov	r0, r6
3400d9bc:	eb04 0903 	add.w	r9, r4, r3
3400d9c0:	f001 f9a2 	bl	3400ed08 <_sbrk_r>
3400d9c4:	4581      	cmp	r9, r0
3400d9c6:	d142      	bne.n	3400da4e <_malloc_r+0xea>
3400d9c8:	6821      	ldr	r1, [r4, #0]
3400d9ca:	4630      	mov	r0, r6
3400d9cc:	1a6d      	subs	r5, r5, r1
3400d9ce:	4629      	mov	r1, r5
3400d9d0:	f7ff ffa6 	bl	3400d920 <sbrk_aligned>
3400d9d4:	3001      	adds	r0, #1
3400d9d6:	d03a      	beq.n	3400da4e <_malloc_r+0xea>
3400d9d8:	6823      	ldr	r3, [r4, #0]
3400d9da:	442b      	add	r3, r5
3400d9dc:	6023      	str	r3, [r4, #0]
3400d9de:	f8d8 3000 	ldr.w	r3, [r8]
3400d9e2:	685a      	ldr	r2, [r3, #4]
3400d9e4:	bb62      	cbnz	r2, 3400da40 <_malloc_r+0xdc>
3400d9e6:	f8c8 7000 	str.w	r7, [r8]
3400d9ea:	e00f      	b.n	3400da0c <_malloc_r+0xa8>
3400d9ec:	6822      	ldr	r2, [r4, #0]
3400d9ee:	1b52      	subs	r2, r2, r5
3400d9f0:	d420      	bmi.n	3400da34 <_malloc_r+0xd0>
3400d9f2:	2a0b      	cmp	r2, #11
3400d9f4:	d917      	bls.n	3400da26 <_malloc_r+0xc2>
3400d9f6:	1961      	adds	r1, r4, r5
3400d9f8:	42a3      	cmp	r3, r4
3400d9fa:	6025      	str	r5, [r4, #0]
3400d9fc:	bf18      	it	ne
3400d9fe:	6059      	strne	r1, [r3, #4]
3400da00:	6863      	ldr	r3, [r4, #4]
3400da02:	bf08      	it	eq
3400da04:	f8c8 1000 	streq.w	r1, [r8]
3400da08:	5162      	str	r2, [r4, r5]
3400da0a:	604b      	str	r3, [r1, #4]
3400da0c:	4630      	mov	r0, r6
3400da0e:	f000 f82f 	bl	3400da70 <__malloc_unlock>
3400da12:	f104 000b 	add.w	r0, r4, #11
3400da16:	1d23      	adds	r3, r4, #4
3400da18:	f020 0007 	bic.w	r0, r0, #7
3400da1c:	1ac2      	subs	r2, r0, r3
3400da1e:	bf1c      	itt	ne
3400da20:	1a1b      	subne	r3, r3, r0
3400da22:	50a3      	strne	r3, [r4, r2]
3400da24:	e7af      	b.n	3400d986 <_malloc_r+0x22>
3400da26:	6862      	ldr	r2, [r4, #4]
3400da28:	42a3      	cmp	r3, r4
3400da2a:	bf0c      	ite	eq
3400da2c:	f8c8 2000 	streq.w	r2, [r8]
3400da30:	605a      	strne	r2, [r3, #4]
3400da32:	e7eb      	b.n	3400da0c <_malloc_r+0xa8>
3400da34:	4623      	mov	r3, r4
3400da36:	6864      	ldr	r4, [r4, #4]
3400da38:	e7ae      	b.n	3400d998 <_malloc_r+0x34>
3400da3a:	463c      	mov	r4, r7
3400da3c:	687f      	ldr	r7, [r7, #4]
3400da3e:	e7b6      	b.n	3400d9ae <_malloc_r+0x4a>
3400da40:	461a      	mov	r2, r3
3400da42:	685b      	ldr	r3, [r3, #4]
3400da44:	42a3      	cmp	r3, r4
3400da46:	d1fb      	bne.n	3400da40 <_malloc_r+0xdc>
3400da48:	2300      	movs	r3, #0
3400da4a:	6053      	str	r3, [r2, #4]
3400da4c:	e7de      	b.n	3400da0c <_malloc_r+0xa8>
3400da4e:	230c      	movs	r3, #12
3400da50:	4630      	mov	r0, r6
3400da52:	6033      	str	r3, [r6, #0]
3400da54:	f000 f80c 	bl	3400da70 <__malloc_unlock>
3400da58:	e794      	b.n	3400d984 <_malloc_r+0x20>
3400da5a:	6005      	str	r5, [r0, #0]
3400da5c:	e7d6      	b.n	3400da0c <_malloc_r+0xa8>
3400da5e:	bf00      	nop
3400da60:	34013294 	.word	0x34013294

3400da64 <__malloc_lock>:
3400da64:	4801      	ldr	r0, [pc, #4]	@ (3400da6c <__malloc_lock+0x8>)
3400da66:	f001 b99c 	b.w	3400eda2 <__retarget_lock_acquire_recursive>
3400da6a:	bf00      	nop
3400da6c:	340133d8 	.word	0x340133d8

3400da70 <__malloc_unlock>:
3400da70:	4801      	ldr	r0, [pc, #4]	@ (3400da78 <__malloc_unlock+0x8>)
3400da72:	f001 b997 	b.w	3400eda4 <__retarget_lock_release_recursive>
3400da76:	bf00      	nop
3400da78:	340133d8 	.word	0x340133d8

3400da7c <__cvt>:
3400da7c:	b5f0      	push	{r4, r5, r6, r7, lr}
3400da7e:	ed2d 8b02 	vpush	{d8}
3400da82:	eeb0 8b40 	vmov.f64	d8, d0
3400da86:	b085      	sub	sp, #20
3400da88:	4617      	mov	r7, r2
3400da8a:	460c      	mov	r4, r1
3400da8c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3400da8e:	ee18 2a90 	vmov	r2, s17
3400da92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400da94:	f025 0520 	bic.w	r5, r5, #32
3400da98:	2a00      	cmp	r2, #0
3400da9a:	bfb6      	itet	lt
3400da9c:	222d      	movlt	r2, #45	@ 0x2d
3400da9e:	2200      	movge	r2, #0
3400daa0:	eeb1 8b40 	vneglt.f64	d8, d0
3400daa4:	2d46      	cmp	r5, #70	@ 0x46
3400daa6:	701a      	strb	r2, [r3, #0]
3400daa8:	d004      	beq.n	3400dab4 <__cvt+0x38>
3400daaa:	2d45      	cmp	r5, #69	@ 0x45
3400daac:	d100      	bne.n	3400dab0 <__cvt+0x34>
3400daae:	3401      	adds	r4, #1
3400dab0:	2102      	movs	r1, #2
3400dab2:	e000      	b.n	3400dab6 <__cvt+0x3a>
3400dab4:	2103      	movs	r1, #3
3400dab6:	ab03      	add	r3, sp, #12
3400dab8:	eeb0 0b48 	vmov.f64	d0, d8
3400dabc:	4622      	mov	r2, r4
3400dabe:	9301      	str	r3, [sp, #4]
3400dac0:	ab02      	add	r3, sp, #8
3400dac2:	9300      	str	r3, [sp, #0]
3400dac4:	4633      	mov	r3, r6
3400dac6:	f001 fa1f 	bl	3400ef08 <_dtoa_r>
3400daca:	2d47      	cmp	r5, #71	@ 0x47
3400dacc:	d114      	bne.n	3400daf8 <__cvt+0x7c>
3400dace:	07fb      	lsls	r3, r7, #31
3400dad0:	d50a      	bpl.n	3400dae8 <__cvt+0x6c>
3400dad2:	1902      	adds	r2, r0, r4
3400dad4:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400dad8:	2130      	movs	r1, #48	@ 0x30
3400dada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dade:	bf08      	it	eq
3400dae0:	9203      	streq	r2, [sp, #12]
3400dae2:	9b03      	ldr	r3, [sp, #12]
3400dae4:	4293      	cmp	r3, r2
3400dae6:	d319      	bcc.n	3400db1c <__cvt+0xa0>
3400dae8:	9b03      	ldr	r3, [sp, #12]
3400daea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400daec:	1a1b      	subs	r3, r3, r0
3400daee:	6013      	str	r3, [r2, #0]
3400daf0:	b005      	add	sp, #20
3400daf2:	ecbd 8b02 	vpop	{d8}
3400daf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400daf8:	2d46      	cmp	r5, #70	@ 0x46
3400dafa:	eb00 0204 	add.w	r2, r0, r4
3400dafe:	d1e9      	bne.n	3400dad4 <__cvt+0x58>
3400db00:	7803      	ldrb	r3, [r0, #0]
3400db02:	2b30      	cmp	r3, #48	@ 0x30
3400db04:	d107      	bne.n	3400db16 <__cvt+0x9a>
3400db06:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400db0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400db0e:	bf1c      	itt	ne
3400db10:	f1c4 0401 	rsbne	r4, r4, #1
3400db14:	6034      	strne	r4, [r6, #0]
3400db16:	6833      	ldr	r3, [r6, #0]
3400db18:	441a      	add	r2, r3
3400db1a:	e7db      	b.n	3400dad4 <__cvt+0x58>
3400db1c:	1c5c      	adds	r4, r3, #1
3400db1e:	9403      	str	r4, [sp, #12]
3400db20:	7019      	strb	r1, [r3, #0]
3400db22:	e7de      	b.n	3400dae2 <__cvt+0x66>

3400db24 <__exponent>:
3400db24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400db26:	2900      	cmp	r1, #0
3400db28:	7002      	strb	r2, [r0, #0]
3400db2a:	bfba      	itte	lt
3400db2c:	4249      	neglt	r1, r1
3400db2e:	232d      	movlt	r3, #45	@ 0x2d
3400db30:	232b      	movge	r3, #43	@ 0x2b
3400db32:	2909      	cmp	r1, #9
3400db34:	7043      	strb	r3, [r0, #1]
3400db36:	dd28      	ble.n	3400db8a <__exponent+0x66>
3400db38:	f10d 0307 	add.w	r3, sp, #7
3400db3c:	270a      	movs	r7, #10
3400db3e:	461d      	mov	r5, r3
3400db40:	461a      	mov	r2, r3
3400db42:	3b01      	subs	r3, #1
3400db44:	fbb1 f6f7 	udiv	r6, r1, r7
3400db48:	fb07 1416 	mls	r4, r7, r6, r1
3400db4c:	3430      	adds	r4, #48	@ 0x30
3400db4e:	f802 4c01 	strb.w	r4, [r2, #-1]
3400db52:	460c      	mov	r4, r1
3400db54:	4631      	mov	r1, r6
3400db56:	2c63      	cmp	r4, #99	@ 0x63
3400db58:	dcf2      	bgt.n	3400db40 <__exponent+0x1c>
3400db5a:	3130      	adds	r1, #48	@ 0x30
3400db5c:	1e94      	subs	r4, r2, #2
3400db5e:	f803 1c01 	strb.w	r1, [r3, #-1]
3400db62:	1c41      	adds	r1, r0, #1
3400db64:	4623      	mov	r3, r4
3400db66:	42ab      	cmp	r3, r5
3400db68:	d30a      	bcc.n	3400db80 <__exponent+0x5c>
3400db6a:	f10d 0309 	add.w	r3, sp, #9
3400db6e:	1a9b      	subs	r3, r3, r2
3400db70:	42ac      	cmp	r4, r5
3400db72:	bf88      	it	hi
3400db74:	2300      	movhi	r3, #0
3400db76:	3302      	adds	r3, #2
3400db78:	4403      	add	r3, r0
3400db7a:	1a18      	subs	r0, r3, r0
3400db7c:	b003      	add	sp, #12
3400db7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400db80:	f813 6b01 	ldrb.w	r6, [r3], #1
3400db84:	f801 6f01 	strb.w	r6, [r1, #1]!
3400db88:	e7ed      	b.n	3400db66 <__exponent+0x42>
3400db8a:	2330      	movs	r3, #48	@ 0x30
3400db8c:	3130      	adds	r1, #48	@ 0x30
3400db8e:	7083      	strb	r3, [r0, #2]
3400db90:	1d03      	adds	r3, r0, #4
3400db92:	70c1      	strb	r1, [r0, #3]
3400db94:	e7f1      	b.n	3400db7a <__exponent+0x56>
	...

3400db98 <_printf_float>:
3400db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400db9c:	b08d      	sub	sp, #52	@ 0x34
3400db9e:	460c      	mov	r4, r1
3400dba0:	4616      	mov	r6, r2
3400dba2:	461f      	mov	r7, r3
3400dba4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3400dba8:	4605      	mov	r5, r0
3400dbaa:	f001 f875 	bl	3400ec98 <_localeconv_r>
3400dbae:	f8d0 b000 	ldr.w	fp, [r0]
3400dbb2:	4658      	mov	r0, fp
3400dbb4:	f7f2 fdec 	bl	34000790 <strlen>
3400dbb8:	2300      	movs	r3, #0
3400dbba:	f894 9018 	ldrb.w	r9, [r4, #24]
3400dbbe:	930a      	str	r3, [sp, #40]	@ 0x28
3400dbc0:	f8d8 3000 	ldr.w	r3, [r8]
3400dbc4:	6822      	ldr	r2, [r4, #0]
3400dbc6:	3307      	adds	r3, #7
3400dbc8:	9005      	str	r0, [sp, #20]
3400dbca:	f023 0307 	bic.w	r3, r3, #7
3400dbce:	f103 0108 	add.w	r1, r3, #8
3400dbd2:	f8c8 1000 	str.w	r1, [r8]
3400dbd6:	ed93 0b00 	vldr	d0, [r3]
3400dbda:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3400de38 <_printf_float+0x2a0>
3400dbde:	eeb0 7bc0 	vabs.f64	d7, d0
3400dbe2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3400dbe6:	eeb4 7b46 	vcmp.f64	d7, d6
3400dbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dbee:	dd24      	ble.n	3400dc3a <_printf_float+0xa2>
3400dbf0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3400dbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dbf8:	d502      	bpl.n	3400dc00 <_printf_float+0x68>
3400dbfa:	232d      	movs	r3, #45	@ 0x2d
3400dbfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400dc00:	498f      	ldr	r1, [pc, #572]	@ (3400de40 <_printf_float+0x2a8>)
3400dc02:	4b90      	ldr	r3, [pc, #576]	@ (3400de44 <_printf_float+0x2ac>)
3400dc04:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3400dc08:	bf8c      	ite	hi
3400dc0a:	4688      	movhi	r8, r1
3400dc0c:	4698      	movls	r8, r3
3400dc0e:	f022 0204 	bic.w	r2, r2, #4
3400dc12:	2303      	movs	r3, #3
3400dc14:	f04f 0a00 	mov.w	sl, #0
3400dc18:	6022      	str	r2, [r4, #0]
3400dc1a:	6123      	str	r3, [r4, #16]
3400dc1c:	4633      	mov	r3, r6
3400dc1e:	aa0b      	add	r2, sp, #44	@ 0x2c
3400dc20:	4621      	mov	r1, r4
3400dc22:	4628      	mov	r0, r5
3400dc24:	9700      	str	r7, [sp, #0]
3400dc26:	f000 f9d1 	bl	3400dfcc <_printf_common>
3400dc2a:	3001      	adds	r0, #1
3400dc2c:	f040 8089 	bne.w	3400dd42 <_printf_float+0x1aa>
3400dc30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400dc34:	b00d      	add	sp, #52	@ 0x34
3400dc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400dc3a:	eeb4 0b40 	vcmp.f64	d0, d0
3400dc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dc42:	d709      	bvc.n	3400dc58 <_printf_float+0xc0>
3400dc44:	ee10 3a90 	vmov	r3, s1
3400dc48:	497f      	ldr	r1, [pc, #508]	@ (3400de48 <_printf_float+0x2b0>)
3400dc4a:	2b00      	cmp	r3, #0
3400dc4c:	bfbc      	itt	lt
3400dc4e:	232d      	movlt	r3, #45	@ 0x2d
3400dc50:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3400dc54:	4b7d      	ldr	r3, [pc, #500]	@ (3400de4c <_printf_float+0x2b4>)
3400dc56:	e7d5      	b.n	3400dc04 <_printf_float+0x6c>
3400dc58:	6863      	ldr	r3, [r4, #4]
3400dc5a:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3400dc5e:	1c59      	adds	r1, r3, #1
3400dc60:	d139      	bne.n	3400dcd6 <_printf_float+0x13e>
3400dc62:	2306      	movs	r3, #6
3400dc64:	6063      	str	r3, [r4, #4]
3400dc66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3400dc6a:	2300      	movs	r3, #0
3400dc6c:	4628      	mov	r0, r5
3400dc6e:	6022      	str	r2, [r4, #0]
3400dc70:	9303      	str	r3, [sp, #12]
3400dc72:	ab0a      	add	r3, sp, #40	@ 0x28
3400dc74:	e9cd 9301 	strd	r9, r3, [sp, #4]
3400dc78:	ab09      	add	r3, sp, #36	@ 0x24
3400dc7a:	9300      	str	r3, [sp, #0]
3400dc7c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3400dc80:	6861      	ldr	r1, [r4, #4]
3400dc82:	f7ff fefb 	bl	3400da7c <__cvt>
3400dc86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400dc8a:	4680      	mov	r8, r0
3400dc8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
3400dc8e:	d129      	bne.n	3400dce4 <_printf_float+0x14c>
3400dc90:	1cc8      	adds	r0, r1, #3
3400dc92:	db02      	blt.n	3400dc9a <_printf_float+0x102>
3400dc94:	6863      	ldr	r3, [r4, #4]
3400dc96:	4299      	cmp	r1, r3
3400dc98:	dd41      	ble.n	3400dd1e <_printf_float+0x186>
3400dc9a:	f1a9 0902 	sub.w	r9, r9, #2
3400dc9e:	fa5f f989 	uxtb.w	r9, r9
3400dca2:	3901      	subs	r1, #1
3400dca4:	464a      	mov	r2, r9
3400dca6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3400dcaa:	9109      	str	r1, [sp, #36]	@ 0x24
3400dcac:	f7ff ff3a 	bl	3400db24 <__exponent>
3400dcb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400dcb2:	4682      	mov	sl, r0
3400dcb4:	1813      	adds	r3, r2, r0
3400dcb6:	2a01      	cmp	r2, #1
3400dcb8:	6123      	str	r3, [r4, #16]
3400dcba:	dc02      	bgt.n	3400dcc2 <_printf_float+0x12a>
3400dcbc:	6822      	ldr	r2, [r4, #0]
3400dcbe:	07d2      	lsls	r2, r2, #31
3400dcc0:	d501      	bpl.n	3400dcc6 <_printf_float+0x12e>
3400dcc2:	3301      	adds	r3, #1
3400dcc4:	6123      	str	r3, [r4, #16]
3400dcc6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3400dcca:	2b00      	cmp	r3, #0
3400dccc:	d0a6      	beq.n	3400dc1c <_printf_float+0x84>
3400dcce:	232d      	movs	r3, #45	@ 0x2d
3400dcd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400dcd4:	e7a2      	b.n	3400dc1c <_printf_float+0x84>
3400dcd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400dcda:	d1c4      	bne.n	3400dc66 <_printf_float+0xce>
3400dcdc:	2b00      	cmp	r3, #0
3400dcde:	d1c2      	bne.n	3400dc66 <_printf_float+0xce>
3400dce0:	2301      	movs	r3, #1
3400dce2:	e7bf      	b.n	3400dc64 <_printf_float+0xcc>
3400dce4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400dce8:	d9db      	bls.n	3400dca2 <_printf_float+0x10a>
3400dcea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3400dcee:	d118      	bne.n	3400dd22 <_printf_float+0x18a>
3400dcf0:	2900      	cmp	r1, #0
3400dcf2:	6863      	ldr	r3, [r4, #4]
3400dcf4:	dd0b      	ble.n	3400dd0e <_printf_float+0x176>
3400dcf6:	6121      	str	r1, [r4, #16]
3400dcf8:	b913      	cbnz	r3, 3400dd00 <_printf_float+0x168>
3400dcfa:	6822      	ldr	r2, [r4, #0]
3400dcfc:	07d0      	lsls	r0, r2, #31
3400dcfe:	d502      	bpl.n	3400dd06 <_printf_float+0x16e>
3400dd00:	3301      	adds	r3, #1
3400dd02:	440b      	add	r3, r1
3400dd04:	6123      	str	r3, [r4, #16]
3400dd06:	f04f 0a00 	mov.w	sl, #0
3400dd0a:	65a1      	str	r1, [r4, #88]	@ 0x58
3400dd0c:	e7db      	b.n	3400dcc6 <_printf_float+0x12e>
3400dd0e:	b913      	cbnz	r3, 3400dd16 <_printf_float+0x17e>
3400dd10:	6822      	ldr	r2, [r4, #0]
3400dd12:	07d2      	lsls	r2, r2, #31
3400dd14:	d501      	bpl.n	3400dd1a <_printf_float+0x182>
3400dd16:	3302      	adds	r3, #2
3400dd18:	e7f4      	b.n	3400dd04 <_printf_float+0x16c>
3400dd1a:	2301      	movs	r3, #1
3400dd1c:	e7f2      	b.n	3400dd04 <_printf_float+0x16c>
3400dd1e:	f04f 0967 	mov.w	r9, #103	@ 0x67
3400dd22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400dd24:	4299      	cmp	r1, r3
3400dd26:	db05      	blt.n	3400dd34 <_printf_float+0x19c>
3400dd28:	6823      	ldr	r3, [r4, #0]
3400dd2a:	6121      	str	r1, [r4, #16]
3400dd2c:	07d8      	lsls	r0, r3, #31
3400dd2e:	d5ea      	bpl.n	3400dd06 <_printf_float+0x16e>
3400dd30:	1c4b      	adds	r3, r1, #1
3400dd32:	e7e7      	b.n	3400dd04 <_printf_float+0x16c>
3400dd34:	2900      	cmp	r1, #0
3400dd36:	bfd4      	ite	le
3400dd38:	f1c1 0202 	rsble	r2, r1, #2
3400dd3c:	2201      	movgt	r2, #1
3400dd3e:	4413      	add	r3, r2
3400dd40:	e7e0      	b.n	3400dd04 <_printf_float+0x16c>
3400dd42:	6823      	ldr	r3, [r4, #0]
3400dd44:	055a      	lsls	r2, r3, #21
3400dd46:	d407      	bmi.n	3400dd58 <_printf_float+0x1c0>
3400dd48:	6923      	ldr	r3, [r4, #16]
3400dd4a:	4642      	mov	r2, r8
3400dd4c:	4631      	mov	r1, r6
3400dd4e:	4628      	mov	r0, r5
3400dd50:	47b8      	blx	r7
3400dd52:	3001      	adds	r0, #1
3400dd54:	d12a      	bne.n	3400ddac <_printf_float+0x214>
3400dd56:	e76b      	b.n	3400dc30 <_printf_float+0x98>
3400dd58:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400dd5c:	f240 80e0 	bls.w	3400df20 <_printf_float+0x388>
3400dd60:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400dd64:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400dd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dd6c:	d133      	bne.n	3400ddd6 <_printf_float+0x23e>
3400dd6e:	2301      	movs	r3, #1
3400dd70:	4a37      	ldr	r2, [pc, #220]	@ (3400de50 <_printf_float+0x2b8>)
3400dd72:	4631      	mov	r1, r6
3400dd74:	4628      	mov	r0, r5
3400dd76:	47b8      	blx	r7
3400dd78:	3001      	adds	r0, #1
3400dd7a:	f43f af59 	beq.w	3400dc30 <_printf_float+0x98>
3400dd7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3400dd82:	4543      	cmp	r3, r8
3400dd84:	db02      	blt.n	3400dd8c <_printf_float+0x1f4>
3400dd86:	6823      	ldr	r3, [r4, #0]
3400dd88:	07d8      	lsls	r0, r3, #31
3400dd8a:	d50f      	bpl.n	3400ddac <_printf_float+0x214>
3400dd8c:	9b05      	ldr	r3, [sp, #20]
3400dd8e:	465a      	mov	r2, fp
3400dd90:	4631      	mov	r1, r6
3400dd92:	4628      	mov	r0, r5
3400dd94:	47b8      	blx	r7
3400dd96:	3001      	adds	r0, #1
3400dd98:	f43f af4a 	beq.w	3400dc30 <_printf_float+0x98>
3400dd9c:	f04f 0900 	mov.w	r9, #0
3400dda0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400dda4:	f104 0a1a 	add.w	sl, r4, #26
3400dda8:	45c8      	cmp	r8, r9
3400ddaa:	dc09      	bgt.n	3400ddc0 <_printf_float+0x228>
3400ddac:	6823      	ldr	r3, [r4, #0]
3400ddae:	079b      	lsls	r3, r3, #30
3400ddb0:	f100 8107 	bmi.w	3400dfc2 <_printf_float+0x42a>
3400ddb4:	68e0      	ldr	r0, [r4, #12]
3400ddb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400ddb8:	4298      	cmp	r0, r3
3400ddba:	bfb8      	it	lt
3400ddbc:	4618      	movlt	r0, r3
3400ddbe:	e739      	b.n	3400dc34 <_printf_float+0x9c>
3400ddc0:	2301      	movs	r3, #1
3400ddc2:	4652      	mov	r2, sl
3400ddc4:	4631      	mov	r1, r6
3400ddc6:	4628      	mov	r0, r5
3400ddc8:	47b8      	blx	r7
3400ddca:	3001      	adds	r0, #1
3400ddcc:	f43f af30 	beq.w	3400dc30 <_printf_float+0x98>
3400ddd0:	f109 0901 	add.w	r9, r9, #1
3400ddd4:	e7e8      	b.n	3400dda8 <_printf_float+0x210>
3400ddd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400ddd8:	2b00      	cmp	r3, #0
3400ddda:	dc3b      	bgt.n	3400de54 <_printf_float+0x2bc>
3400dddc:	2301      	movs	r3, #1
3400ddde:	4a1c      	ldr	r2, [pc, #112]	@ (3400de50 <_printf_float+0x2b8>)
3400dde0:	4631      	mov	r1, r6
3400dde2:	4628      	mov	r0, r5
3400dde4:	47b8      	blx	r7
3400dde6:	3001      	adds	r0, #1
3400dde8:	f43f af22 	beq.w	3400dc30 <_printf_float+0x98>
3400ddec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3400ddf0:	ea59 0303 	orrs.w	r3, r9, r3
3400ddf4:	d102      	bne.n	3400ddfc <_printf_float+0x264>
3400ddf6:	6823      	ldr	r3, [r4, #0]
3400ddf8:	07d9      	lsls	r1, r3, #31
3400ddfa:	d5d7      	bpl.n	3400ddac <_printf_float+0x214>
3400ddfc:	9b05      	ldr	r3, [sp, #20]
3400ddfe:	465a      	mov	r2, fp
3400de00:	4631      	mov	r1, r6
3400de02:	4628      	mov	r0, r5
3400de04:	47b8      	blx	r7
3400de06:	3001      	adds	r0, #1
3400de08:	f43f af12 	beq.w	3400dc30 <_printf_float+0x98>
3400de0c:	f04f 0a00 	mov.w	sl, #0
3400de10:	f104 0b1a 	add.w	fp, r4, #26
3400de14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400de16:	425b      	negs	r3, r3
3400de18:	4553      	cmp	r3, sl
3400de1a:	dc01      	bgt.n	3400de20 <_printf_float+0x288>
3400de1c:	464b      	mov	r3, r9
3400de1e:	e794      	b.n	3400dd4a <_printf_float+0x1b2>
3400de20:	2301      	movs	r3, #1
3400de22:	465a      	mov	r2, fp
3400de24:	4631      	mov	r1, r6
3400de26:	4628      	mov	r0, r5
3400de28:	47b8      	blx	r7
3400de2a:	3001      	adds	r0, #1
3400de2c:	f43f af00 	beq.w	3400dc30 <_printf_float+0x98>
3400de30:	f10a 0a01 	add.w	sl, sl, #1
3400de34:	e7ee      	b.n	3400de14 <_printf_float+0x27c>
3400de36:	bf00      	nop
3400de38:	ffffffff 	.word	0xffffffff
3400de3c:	7fefffff 	.word	0x7fefffff
3400de40:	3401191c 	.word	0x3401191c
3400de44:	34011918 	.word	0x34011918
3400de48:	34011924 	.word	0x34011924
3400de4c:	34011920 	.word	0x34011920
3400de50:	340111b4 	.word	0x340111b4
3400de54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400de56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3400de5a:	4553      	cmp	r3, sl
3400de5c:	bfa8      	it	ge
3400de5e:	4653      	movge	r3, sl
3400de60:	2b00      	cmp	r3, #0
3400de62:	4699      	mov	r9, r3
3400de64:	dc37      	bgt.n	3400ded6 <_printf_float+0x33e>
3400de66:	2300      	movs	r3, #0
3400de68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400de6c:	f104 021a 	add.w	r2, r4, #26
3400de70:	9307      	str	r3, [sp, #28]
3400de72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400de74:	9907      	ldr	r1, [sp, #28]
3400de76:	9306      	str	r3, [sp, #24]
3400de78:	eba3 0309 	sub.w	r3, r3, r9
3400de7c:	428b      	cmp	r3, r1
3400de7e:	dc31      	bgt.n	3400dee4 <_printf_float+0x34c>
3400de80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400de82:	459a      	cmp	sl, r3
3400de84:	dc3b      	bgt.n	3400defe <_printf_float+0x366>
3400de86:	6823      	ldr	r3, [r4, #0]
3400de88:	07da      	lsls	r2, r3, #31
3400de8a:	d438      	bmi.n	3400defe <_printf_float+0x366>
3400de8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400de8e:	ebaa 0903 	sub.w	r9, sl, r3
3400de92:	9b06      	ldr	r3, [sp, #24]
3400de94:	ebaa 0303 	sub.w	r3, sl, r3
3400de98:	4599      	cmp	r9, r3
3400de9a:	bfa8      	it	ge
3400de9c:	4699      	movge	r9, r3
3400de9e:	f1b9 0f00 	cmp.w	r9, #0
3400dea2:	dc34      	bgt.n	3400df0e <_printf_float+0x376>
3400dea4:	f04f 0800 	mov.w	r8, #0
3400dea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400deac:	f104 0b1a 	add.w	fp, r4, #26
3400deb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400deb2:	ebaa 0303 	sub.w	r3, sl, r3
3400deb6:	eba3 0309 	sub.w	r3, r3, r9
3400deba:	4543      	cmp	r3, r8
3400debc:	f77f af76 	ble.w	3400ddac <_printf_float+0x214>
3400dec0:	2301      	movs	r3, #1
3400dec2:	465a      	mov	r2, fp
3400dec4:	4631      	mov	r1, r6
3400dec6:	4628      	mov	r0, r5
3400dec8:	47b8      	blx	r7
3400deca:	3001      	adds	r0, #1
3400decc:	f43f aeb0 	beq.w	3400dc30 <_printf_float+0x98>
3400ded0:	f108 0801 	add.w	r8, r8, #1
3400ded4:	e7ec      	b.n	3400deb0 <_printf_float+0x318>
3400ded6:	4642      	mov	r2, r8
3400ded8:	4631      	mov	r1, r6
3400deda:	4628      	mov	r0, r5
3400dedc:	47b8      	blx	r7
3400dede:	3001      	adds	r0, #1
3400dee0:	d1c1      	bne.n	3400de66 <_printf_float+0x2ce>
3400dee2:	e6a5      	b.n	3400dc30 <_printf_float+0x98>
3400dee4:	2301      	movs	r3, #1
3400dee6:	4631      	mov	r1, r6
3400dee8:	4628      	mov	r0, r5
3400deea:	9206      	str	r2, [sp, #24]
3400deec:	47b8      	blx	r7
3400deee:	3001      	adds	r0, #1
3400def0:	f43f ae9e 	beq.w	3400dc30 <_printf_float+0x98>
3400def4:	9b07      	ldr	r3, [sp, #28]
3400def6:	9a06      	ldr	r2, [sp, #24]
3400def8:	3301      	adds	r3, #1
3400defa:	9307      	str	r3, [sp, #28]
3400defc:	e7b9      	b.n	3400de72 <_printf_float+0x2da>
3400defe:	9b05      	ldr	r3, [sp, #20]
3400df00:	465a      	mov	r2, fp
3400df02:	4631      	mov	r1, r6
3400df04:	4628      	mov	r0, r5
3400df06:	47b8      	blx	r7
3400df08:	3001      	adds	r0, #1
3400df0a:	d1bf      	bne.n	3400de8c <_printf_float+0x2f4>
3400df0c:	e690      	b.n	3400dc30 <_printf_float+0x98>
3400df0e:	9a06      	ldr	r2, [sp, #24]
3400df10:	464b      	mov	r3, r9
3400df12:	4631      	mov	r1, r6
3400df14:	4628      	mov	r0, r5
3400df16:	4442      	add	r2, r8
3400df18:	47b8      	blx	r7
3400df1a:	3001      	adds	r0, #1
3400df1c:	d1c2      	bne.n	3400dea4 <_printf_float+0x30c>
3400df1e:	e687      	b.n	3400dc30 <_printf_float+0x98>
3400df20:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3400df24:	f1b9 0f01 	cmp.w	r9, #1
3400df28:	dc01      	bgt.n	3400df2e <_printf_float+0x396>
3400df2a:	07db      	lsls	r3, r3, #31
3400df2c:	d536      	bpl.n	3400df9c <_printf_float+0x404>
3400df2e:	2301      	movs	r3, #1
3400df30:	4642      	mov	r2, r8
3400df32:	4631      	mov	r1, r6
3400df34:	4628      	mov	r0, r5
3400df36:	47b8      	blx	r7
3400df38:	3001      	adds	r0, #1
3400df3a:	f43f ae79 	beq.w	3400dc30 <_printf_float+0x98>
3400df3e:	9b05      	ldr	r3, [sp, #20]
3400df40:	465a      	mov	r2, fp
3400df42:	4631      	mov	r1, r6
3400df44:	4628      	mov	r0, r5
3400df46:	47b8      	blx	r7
3400df48:	3001      	adds	r0, #1
3400df4a:	f43f ae71 	beq.w	3400dc30 <_printf_float+0x98>
3400df4e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3400df52:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400df56:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400df5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400df5e:	d018      	beq.n	3400df92 <_printf_float+0x3fa>
3400df60:	464b      	mov	r3, r9
3400df62:	f108 0201 	add.w	r2, r8, #1
3400df66:	4631      	mov	r1, r6
3400df68:	4628      	mov	r0, r5
3400df6a:	47b8      	blx	r7
3400df6c:	3001      	adds	r0, #1
3400df6e:	d10c      	bne.n	3400df8a <_printf_float+0x3f2>
3400df70:	e65e      	b.n	3400dc30 <_printf_float+0x98>
3400df72:	2301      	movs	r3, #1
3400df74:	465a      	mov	r2, fp
3400df76:	4631      	mov	r1, r6
3400df78:	4628      	mov	r0, r5
3400df7a:	47b8      	blx	r7
3400df7c:	3001      	adds	r0, #1
3400df7e:	f43f ae57 	beq.w	3400dc30 <_printf_float+0x98>
3400df82:	f108 0801 	add.w	r8, r8, #1
3400df86:	45c8      	cmp	r8, r9
3400df88:	dbf3      	blt.n	3400df72 <_printf_float+0x3da>
3400df8a:	4653      	mov	r3, sl
3400df8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3400df90:	e6dc      	b.n	3400dd4c <_printf_float+0x1b4>
3400df92:	f04f 0800 	mov.w	r8, #0
3400df96:	f104 0b1a 	add.w	fp, r4, #26
3400df9a:	e7f4      	b.n	3400df86 <_printf_float+0x3ee>
3400df9c:	2301      	movs	r3, #1
3400df9e:	4642      	mov	r2, r8
3400dfa0:	e7e1      	b.n	3400df66 <_printf_float+0x3ce>
3400dfa2:	2301      	movs	r3, #1
3400dfa4:	464a      	mov	r2, r9
3400dfa6:	4631      	mov	r1, r6
3400dfa8:	4628      	mov	r0, r5
3400dfaa:	47b8      	blx	r7
3400dfac:	3001      	adds	r0, #1
3400dfae:	f43f ae3f 	beq.w	3400dc30 <_printf_float+0x98>
3400dfb2:	f108 0801 	add.w	r8, r8, #1
3400dfb6:	68e3      	ldr	r3, [r4, #12]
3400dfb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3400dfba:	1a5b      	subs	r3, r3, r1
3400dfbc:	4543      	cmp	r3, r8
3400dfbe:	dcf0      	bgt.n	3400dfa2 <_printf_float+0x40a>
3400dfc0:	e6f8      	b.n	3400ddb4 <_printf_float+0x21c>
3400dfc2:	f04f 0800 	mov.w	r8, #0
3400dfc6:	f104 0919 	add.w	r9, r4, #25
3400dfca:	e7f4      	b.n	3400dfb6 <_printf_float+0x41e>

3400dfcc <_printf_common>:
3400dfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400dfd0:	4616      	mov	r6, r2
3400dfd2:	4698      	mov	r8, r3
3400dfd4:	688a      	ldr	r2, [r1, #8]
3400dfd6:	4607      	mov	r7, r0
3400dfd8:	690b      	ldr	r3, [r1, #16]
3400dfda:	460c      	mov	r4, r1
3400dfdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
3400dfe0:	4293      	cmp	r3, r2
3400dfe2:	bfb8      	it	lt
3400dfe4:	4613      	movlt	r3, r2
3400dfe6:	6033      	str	r3, [r6, #0]
3400dfe8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3400dfec:	b10a      	cbz	r2, 3400dff2 <_printf_common+0x26>
3400dfee:	3301      	adds	r3, #1
3400dff0:	6033      	str	r3, [r6, #0]
3400dff2:	6823      	ldr	r3, [r4, #0]
3400dff4:	0699      	lsls	r1, r3, #26
3400dff6:	bf42      	ittt	mi
3400dff8:	6833      	ldrmi	r3, [r6, #0]
3400dffa:	3302      	addmi	r3, #2
3400dffc:	6033      	strmi	r3, [r6, #0]
3400dffe:	6825      	ldr	r5, [r4, #0]
3400e000:	f015 0506 	ands.w	r5, r5, #6
3400e004:	d106      	bne.n	3400e014 <_printf_common+0x48>
3400e006:	f104 0a19 	add.w	sl, r4, #25
3400e00a:	68e3      	ldr	r3, [r4, #12]
3400e00c:	6832      	ldr	r2, [r6, #0]
3400e00e:	1a9b      	subs	r3, r3, r2
3400e010:	42ab      	cmp	r3, r5
3400e012:	dc2b      	bgt.n	3400e06c <_printf_common+0xa0>
3400e014:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3400e018:	6822      	ldr	r2, [r4, #0]
3400e01a:	3b00      	subs	r3, #0
3400e01c:	bf18      	it	ne
3400e01e:	2301      	movne	r3, #1
3400e020:	0692      	lsls	r2, r2, #26
3400e022:	d430      	bmi.n	3400e086 <_printf_common+0xba>
3400e024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3400e028:	4641      	mov	r1, r8
3400e02a:	4638      	mov	r0, r7
3400e02c:	47c8      	blx	r9
3400e02e:	3001      	adds	r0, #1
3400e030:	d023      	beq.n	3400e07a <_printf_common+0xae>
3400e032:	6823      	ldr	r3, [r4, #0]
3400e034:	341a      	adds	r4, #26
3400e036:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3400e03a:	f003 0306 	and.w	r3, r3, #6
3400e03e:	2b04      	cmp	r3, #4
3400e040:	bf0a      	itet	eq
3400e042:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3400e046:	2500      	movne	r5, #0
3400e048:	6833      	ldreq	r3, [r6, #0]
3400e04a:	f04f 0600 	mov.w	r6, #0
3400e04e:	bf08      	it	eq
3400e050:	1aed      	subeq	r5, r5, r3
3400e052:	f854 3c12 	ldr.w	r3, [r4, #-18]
3400e056:	bf08      	it	eq
3400e058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3400e05c:	4293      	cmp	r3, r2
3400e05e:	bfc4      	itt	gt
3400e060:	1a9b      	subgt	r3, r3, r2
3400e062:	18ed      	addgt	r5, r5, r3
3400e064:	42b5      	cmp	r5, r6
3400e066:	d11a      	bne.n	3400e09e <_printf_common+0xd2>
3400e068:	2000      	movs	r0, #0
3400e06a:	e008      	b.n	3400e07e <_printf_common+0xb2>
3400e06c:	2301      	movs	r3, #1
3400e06e:	4652      	mov	r2, sl
3400e070:	4641      	mov	r1, r8
3400e072:	4638      	mov	r0, r7
3400e074:	47c8      	blx	r9
3400e076:	3001      	adds	r0, #1
3400e078:	d103      	bne.n	3400e082 <_printf_common+0xb6>
3400e07a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400e082:	3501      	adds	r5, #1
3400e084:	e7c1      	b.n	3400e00a <_printf_common+0x3e>
3400e086:	18e1      	adds	r1, r4, r3
3400e088:	1c5a      	adds	r2, r3, #1
3400e08a:	2030      	movs	r0, #48	@ 0x30
3400e08c:	3302      	adds	r3, #2
3400e08e:	4422      	add	r2, r4
3400e090:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3400e094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3400e098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3400e09c:	e7c2      	b.n	3400e024 <_printf_common+0x58>
3400e09e:	2301      	movs	r3, #1
3400e0a0:	4622      	mov	r2, r4
3400e0a2:	4641      	mov	r1, r8
3400e0a4:	4638      	mov	r0, r7
3400e0a6:	47c8      	blx	r9
3400e0a8:	3001      	adds	r0, #1
3400e0aa:	d0e6      	beq.n	3400e07a <_printf_common+0xae>
3400e0ac:	3601      	adds	r6, #1
3400e0ae:	e7d9      	b.n	3400e064 <_printf_common+0x98>

3400e0b0 <_printf_i>:
3400e0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3400e0b4:	7e0f      	ldrb	r7, [r1, #24]
3400e0b6:	4691      	mov	r9, r2
3400e0b8:	4680      	mov	r8, r0
3400e0ba:	460c      	mov	r4, r1
3400e0bc:	2f78      	cmp	r7, #120	@ 0x78
3400e0be:	469a      	mov	sl, r3
3400e0c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400e0c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3400e0c6:	d807      	bhi.n	3400e0d8 <_printf_i+0x28>
3400e0c8:	2f62      	cmp	r7, #98	@ 0x62
3400e0ca:	d80a      	bhi.n	3400e0e2 <_printf_i+0x32>
3400e0cc:	2f00      	cmp	r7, #0
3400e0ce:	f000 80d1 	beq.w	3400e274 <_printf_i+0x1c4>
3400e0d2:	2f58      	cmp	r7, #88	@ 0x58
3400e0d4:	f000 80b8 	beq.w	3400e248 <_printf_i+0x198>
3400e0d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400e0dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3400e0e0:	e03a      	b.n	3400e158 <_printf_i+0xa8>
3400e0e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3400e0e6:	2b15      	cmp	r3, #21
3400e0e8:	d8f6      	bhi.n	3400e0d8 <_printf_i+0x28>
3400e0ea:	a101      	add	r1, pc, #4	@ (adr r1, 3400e0f0 <_printf_i+0x40>)
3400e0ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3400e0f0:	3400e149 	.word	0x3400e149
3400e0f4:	3400e15d 	.word	0x3400e15d
3400e0f8:	3400e0d9 	.word	0x3400e0d9
3400e0fc:	3400e0d9 	.word	0x3400e0d9
3400e100:	3400e0d9 	.word	0x3400e0d9
3400e104:	3400e0d9 	.word	0x3400e0d9
3400e108:	3400e15d 	.word	0x3400e15d
3400e10c:	3400e0d9 	.word	0x3400e0d9
3400e110:	3400e0d9 	.word	0x3400e0d9
3400e114:	3400e0d9 	.word	0x3400e0d9
3400e118:	3400e0d9 	.word	0x3400e0d9
3400e11c:	3400e25b 	.word	0x3400e25b
3400e120:	3400e187 	.word	0x3400e187
3400e124:	3400e215 	.word	0x3400e215
3400e128:	3400e0d9 	.word	0x3400e0d9
3400e12c:	3400e0d9 	.word	0x3400e0d9
3400e130:	3400e27d 	.word	0x3400e27d
3400e134:	3400e0d9 	.word	0x3400e0d9
3400e138:	3400e187 	.word	0x3400e187
3400e13c:	3400e0d9 	.word	0x3400e0d9
3400e140:	3400e0d9 	.word	0x3400e0d9
3400e144:	3400e21d 	.word	0x3400e21d
3400e148:	6833      	ldr	r3, [r6, #0]
3400e14a:	1d1a      	adds	r2, r3, #4
3400e14c:	681b      	ldr	r3, [r3, #0]
3400e14e:	6032      	str	r2, [r6, #0]
3400e150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400e154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3400e158:	2301      	movs	r3, #1
3400e15a:	e09c      	b.n	3400e296 <_printf_i+0x1e6>
3400e15c:	6833      	ldr	r3, [r6, #0]
3400e15e:	6820      	ldr	r0, [r4, #0]
3400e160:	1d19      	adds	r1, r3, #4
3400e162:	6031      	str	r1, [r6, #0]
3400e164:	0606      	lsls	r6, r0, #24
3400e166:	d501      	bpl.n	3400e16c <_printf_i+0xbc>
3400e168:	681d      	ldr	r5, [r3, #0]
3400e16a:	e003      	b.n	3400e174 <_printf_i+0xc4>
3400e16c:	0645      	lsls	r5, r0, #25
3400e16e:	d5fb      	bpl.n	3400e168 <_printf_i+0xb8>
3400e170:	f9b3 5000 	ldrsh.w	r5, [r3]
3400e174:	2d00      	cmp	r5, #0
3400e176:	da03      	bge.n	3400e180 <_printf_i+0xd0>
3400e178:	232d      	movs	r3, #45	@ 0x2d
3400e17a:	426d      	negs	r5, r5
3400e17c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e180:	4858      	ldr	r0, [pc, #352]	@ (3400e2e4 <_printf_i+0x234>)
3400e182:	230a      	movs	r3, #10
3400e184:	e011      	b.n	3400e1aa <_printf_i+0xfa>
3400e186:	6821      	ldr	r1, [r4, #0]
3400e188:	6833      	ldr	r3, [r6, #0]
3400e18a:	0608      	lsls	r0, r1, #24
3400e18c:	f853 5b04 	ldr.w	r5, [r3], #4
3400e190:	d402      	bmi.n	3400e198 <_printf_i+0xe8>
3400e192:	0649      	lsls	r1, r1, #25
3400e194:	bf48      	it	mi
3400e196:	b2ad      	uxthmi	r5, r5
3400e198:	2f6f      	cmp	r7, #111	@ 0x6f
3400e19a:	6033      	str	r3, [r6, #0]
3400e19c:	4851      	ldr	r0, [pc, #324]	@ (3400e2e4 <_printf_i+0x234>)
3400e19e:	bf14      	ite	ne
3400e1a0:	230a      	movne	r3, #10
3400e1a2:	2308      	moveq	r3, #8
3400e1a4:	2100      	movs	r1, #0
3400e1a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3400e1aa:	6866      	ldr	r6, [r4, #4]
3400e1ac:	2e00      	cmp	r6, #0
3400e1ae:	60a6      	str	r6, [r4, #8]
3400e1b0:	db05      	blt.n	3400e1be <_printf_i+0x10e>
3400e1b2:	6821      	ldr	r1, [r4, #0]
3400e1b4:	432e      	orrs	r6, r5
3400e1b6:	f021 0104 	bic.w	r1, r1, #4
3400e1ba:	6021      	str	r1, [r4, #0]
3400e1bc:	d04b      	beq.n	3400e256 <_printf_i+0x1a6>
3400e1be:	4616      	mov	r6, r2
3400e1c0:	fbb5 f1f3 	udiv	r1, r5, r3
3400e1c4:	fb03 5711 	mls	r7, r3, r1, r5
3400e1c8:	5dc7      	ldrb	r7, [r0, r7]
3400e1ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
3400e1ce:	462f      	mov	r7, r5
3400e1d0:	460d      	mov	r5, r1
3400e1d2:	42bb      	cmp	r3, r7
3400e1d4:	d9f4      	bls.n	3400e1c0 <_printf_i+0x110>
3400e1d6:	2b08      	cmp	r3, #8
3400e1d8:	d10b      	bne.n	3400e1f2 <_printf_i+0x142>
3400e1da:	6823      	ldr	r3, [r4, #0]
3400e1dc:	07df      	lsls	r7, r3, #31
3400e1de:	d508      	bpl.n	3400e1f2 <_printf_i+0x142>
3400e1e0:	6923      	ldr	r3, [r4, #16]
3400e1e2:	6861      	ldr	r1, [r4, #4]
3400e1e4:	4299      	cmp	r1, r3
3400e1e6:	bfde      	ittt	le
3400e1e8:	2330      	movle	r3, #48	@ 0x30
3400e1ea:	f806 3c01 	strble.w	r3, [r6, #-1]
3400e1ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3400e1f2:	1b92      	subs	r2, r2, r6
3400e1f4:	6122      	str	r2, [r4, #16]
3400e1f6:	464b      	mov	r3, r9
3400e1f8:	aa03      	add	r2, sp, #12
3400e1fa:	4621      	mov	r1, r4
3400e1fc:	4640      	mov	r0, r8
3400e1fe:	f8cd a000 	str.w	sl, [sp]
3400e202:	f7ff fee3 	bl	3400dfcc <_printf_common>
3400e206:	3001      	adds	r0, #1
3400e208:	d14a      	bne.n	3400e2a0 <_printf_i+0x1f0>
3400e20a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e20e:	b004      	add	sp, #16
3400e210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400e214:	6823      	ldr	r3, [r4, #0]
3400e216:	f043 0320 	orr.w	r3, r3, #32
3400e21a:	6023      	str	r3, [r4, #0]
3400e21c:	2778      	movs	r7, #120	@ 0x78
3400e21e:	4832      	ldr	r0, [pc, #200]	@ (3400e2e8 <_printf_i+0x238>)
3400e220:	6823      	ldr	r3, [r4, #0]
3400e222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3400e226:	061f      	lsls	r7, r3, #24
3400e228:	6831      	ldr	r1, [r6, #0]
3400e22a:	f851 5b04 	ldr.w	r5, [r1], #4
3400e22e:	d402      	bmi.n	3400e236 <_printf_i+0x186>
3400e230:	065f      	lsls	r7, r3, #25
3400e232:	bf48      	it	mi
3400e234:	b2ad      	uxthmi	r5, r5
3400e236:	6031      	str	r1, [r6, #0]
3400e238:	07d9      	lsls	r1, r3, #31
3400e23a:	bf44      	itt	mi
3400e23c:	f043 0320 	orrmi.w	r3, r3, #32
3400e240:	6023      	strmi	r3, [r4, #0]
3400e242:	b11d      	cbz	r5, 3400e24c <_printf_i+0x19c>
3400e244:	2310      	movs	r3, #16
3400e246:	e7ad      	b.n	3400e1a4 <_printf_i+0xf4>
3400e248:	4826      	ldr	r0, [pc, #152]	@ (3400e2e4 <_printf_i+0x234>)
3400e24a:	e7e9      	b.n	3400e220 <_printf_i+0x170>
3400e24c:	6823      	ldr	r3, [r4, #0]
3400e24e:	f023 0320 	bic.w	r3, r3, #32
3400e252:	6023      	str	r3, [r4, #0]
3400e254:	e7f6      	b.n	3400e244 <_printf_i+0x194>
3400e256:	4616      	mov	r6, r2
3400e258:	e7bd      	b.n	3400e1d6 <_printf_i+0x126>
3400e25a:	6833      	ldr	r3, [r6, #0]
3400e25c:	6825      	ldr	r5, [r4, #0]
3400e25e:	1d18      	adds	r0, r3, #4
3400e260:	6961      	ldr	r1, [r4, #20]
3400e262:	6030      	str	r0, [r6, #0]
3400e264:	062e      	lsls	r6, r5, #24
3400e266:	681b      	ldr	r3, [r3, #0]
3400e268:	d501      	bpl.n	3400e26e <_printf_i+0x1be>
3400e26a:	6019      	str	r1, [r3, #0]
3400e26c:	e002      	b.n	3400e274 <_printf_i+0x1c4>
3400e26e:	0668      	lsls	r0, r5, #25
3400e270:	d5fb      	bpl.n	3400e26a <_printf_i+0x1ba>
3400e272:	8019      	strh	r1, [r3, #0]
3400e274:	2300      	movs	r3, #0
3400e276:	4616      	mov	r6, r2
3400e278:	6123      	str	r3, [r4, #16]
3400e27a:	e7bc      	b.n	3400e1f6 <_printf_i+0x146>
3400e27c:	6833      	ldr	r3, [r6, #0]
3400e27e:	2100      	movs	r1, #0
3400e280:	1d1a      	adds	r2, r3, #4
3400e282:	6032      	str	r2, [r6, #0]
3400e284:	681e      	ldr	r6, [r3, #0]
3400e286:	6862      	ldr	r2, [r4, #4]
3400e288:	4630      	mov	r0, r6
3400e28a:	f000 fd8c 	bl	3400eda6 <memchr>
3400e28e:	b108      	cbz	r0, 3400e294 <_printf_i+0x1e4>
3400e290:	1b80      	subs	r0, r0, r6
3400e292:	6060      	str	r0, [r4, #4]
3400e294:	6863      	ldr	r3, [r4, #4]
3400e296:	6123      	str	r3, [r4, #16]
3400e298:	2300      	movs	r3, #0
3400e29a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e29e:	e7aa      	b.n	3400e1f6 <_printf_i+0x146>
3400e2a0:	6923      	ldr	r3, [r4, #16]
3400e2a2:	4632      	mov	r2, r6
3400e2a4:	4649      	mov	r1, r9
3400e2a6:	4640      	mov	r0, r8
3400e2a8:	47d0      	blx	sl
3400e2aa:	3001      	adds	r0, #1
3400e2ac:	d0ad      	beq.n	3400e20a <_printf_i+0x15a>
3400e2ae:	6823      	ldr	r3, [r4, #0]
3400e2b0:	079b      	lsls	r3, r3, #30
3400e2b2:	d413      	bmi.n	3400e2dc <_printf_i+0x22c>
3400e2b4:	68e0      	ldr	r0, [r4, #12]
3400e2b6:	9b03      	ldr	r3, [sp, #12]
3400e2b8:	4298      	cmp	r0, r3
3400e2ba:	bfb8      	it	lt
3400e2bc:	4618      	movlt	r0, r3
3400e2be:	e7a6      	b.n	3400e20e <_printf_i+0x15e>
3400e2c0:	2301      	movs	r3, #1
3400e2c2:	4632      	mov	r2, r6
3400e2c4:	4649      	mov	r1, r9
3400e2c6:	4640      	mov	r0, r8
3400e2c8:	47d0      	blx	sl
3400e2ca:	3001      	adds	r0, #1
3400e2cc:	d09d      	beq.n	3400e20a <_printf_i+0x15a>
3400e2ce:	3501      	adds	r5, #1
3400e2d0:	68e3      	ldr	r3, [r4, #12]
3400e2d2:	9903      	ldr	r1, [sp, #12]
3400e2d4:	1a5b      	subs	r3, r3, r1
3400e2d6:	42ab      	cmp	r3, r5
3400e2d8:	dcf2      	bgt.n	3400e2c0 <_printf_i+0x210>
3400e2da:	e7eb      	b.n	3400e2b4 <_printf_i+0x204>
3400e2dc:	2500      	movs	r5, #0
3400e2de:	f104 0619 	add.w	r6, r4, #25
3400e2e2:	e7f5      	b.n	3400e2d0 <_printf_i+0x220>
3400e2e4:	34011928 	.word	0x34011928
3400e2e8:	34011939 	.word	0x34011939

3400e2ec <__sflush_r>:
3400e2ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3400e2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400e2f4:	0716      	lsls	r6, r2, #28
3400e2f6:	4605      	mov	r5, r0
3400e2f8:	460c      	mov	r4, r1
3400e2fa:	d454      	bmi.n	3400e3a6 <__sflush_r+0xba>
3400e2fc:	684b      	ldr	r3, [r1, #4]
3400e2fe:	2b00      	cmp	r3, #0
3400e300:	dc02      	bgt.n	3400e308 <__sflush_r+0x1c>
3400e302:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3400e304:	2b00      	cmp	r3, #0
3400e306:	dd48      	ble.n	3400e39a <__sflush_r+0xae>
3400e308:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400e30a:	2e00      	cmp	r6, #0
3400e30c:	d045      	beq.n	3400e39a <__sflush_r+0xae>
3400e30e:	2300      	movs	r3, #0
3400e310:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3400e314:	682f      	ldr	r7, [r5, #0]
3400e316:	6a21      	ldr	r1, [r4, #32]
3400e318:	602b      	str	r3, [r5, #0]
3400e31a:	d030      	beq.n	3400e37e <__sflush_r+0x92>
3400e31c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3400e31e:	89a3      	ldrh	r3, [r4, #12]
3400e320:	0759      	lsls	r1, r3, #29
3400e322:	d505      	bpl.n	3400e330 <__sflush_r+0x44>
3400e324:	6863      	ldr	r3, [r4, #4]
3400e326:	1ad2      	subs	r2, r2, r3
3400e328:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400e32a:	b10b      	cbz	r3, 3400e330 <__sflush_r+0x44>
3400e32c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400e32e:	1ad2      	subs	r2, r2, r3
3400e330:	2300      	movs	r3, #0
3400e332:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400e334:	6a21      	ldr	r1, [r4, #32]
3400e336:	4628      	mov	r0, r5
3400e338:	47b0      	blx	r6
3400e33a:	1c43      	adds	r3, r0, #1
3400e33c:	89a3      	ldrh	r3, [r4, #12]
3400e33e:	d106      	bne.n	3400e34e <__sflush_r+0x62>
3400e340:	6829      	ldr	r1, [r5, #0]
3400e342:	291d      	cmp	r1, #29
3400e344:	d82b      	bhi.n	3400e39e <__sflush_r+0xb2>
3400e346:	4a2a      	ldr	r2, [pc, #168]	@ (3400e3f0 <__sflush_r+0x104>)
3400e348:	40ca      	lsrs	r2, r1
3400e34a:	07d6      	lsls	r6, r2, #31
3400e34c:	d527      	bpl.n	3400e39e <__sflush_r+0xb2>
3400e34e:	2200      	movs	r2, #0
3400e350:	04d9      	lsls	r1, r3, #19
3400e352:	6062      	str	r2, [r4, #4]
3400e354:	6922      	ldr	r2, [r4, #16]
3400e356:	6022      	str	r2, [r4, #0]
3400e358:	d504      	bpl.n	3400e364 <__sflush_r+0x78>
3400e35a:	1c42      	adds	r2, r0, #1
3400e35c:	d101      	bne.n	3400e362 <__sflush_r+0x76>
3400e35e:	682b      	ldr	r3, [r5, #0]
3400e360:	b903      	cbnz	r3, 3400e364 <__sflush_r+0x78>
3400e362:	6560      	str	r0, [r4, #84]	@ 0x54
3400e364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400e366:	602f      	str	r7, [r5, #0]
3400e368:	b1b9      	cbz	r1, 3400e39a <__sflush_r+0xae>
3400e36a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400e36e:	4299      	cmp	r1, r3
3400e370:	d002      	beq.n	3400e378 <__sflush_r+0x8c>
3400e372:	4628      	mov	r0, r5
3400e374:	f001 fb26 	bl	3400f9c4 <_free_r>
3400e378:	2300      	movs	r3, #0
3400e37a:	6363      	str	r3, [r4, #52]	@ 0x34
3400e37c:	e00d      	b.n	3400e39a <__sflush_r+0xae>
3400e37e:	2301      	movs	r3, #1
3400e380:	4628      	mov	r0, r5
3400e382:	47b0      	blx	r6
3400e384:	4602      	mov	r2, r0
3400e386:	1c50      	adds	r0, r2, #1
3400e388:	d1c9      	bne.n	3400e31e <__sflush_r+0x32>
3400e38a:	682b      	ldr	r3, [r5, #0]
3400e38c:	2b00      	cmp	r3, #0
3400e38e:	d0c6      	beq.n	3400e31e <__sflush_r+0x32>
3400e390:	2b1d      	cmp	r3, #29
3400e392:	d001      	beq.n	3400e398 <__sflush_r+0xac>
3400e394:	2b16      	cmp	r3, #22
3400e396:	d11d      	bne.n	3400e3d4 <__sflush_r+0xe8>
3400e398:	602f      	str	r7, [r5, #0]
3400e39a:	2000      	movs	r0, #0
3400e39c:	e021      	b.n	3400e3e2 <__sflush_r+0xf6>
3400e39e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e3a2:	b21b      	sxth	r3, r3
3400e3a4:	e01a      	b.n	3400e3dc <__sflush_r+0xf0>
3400e3a6:	690f      	ldr	r7, [r1, #16]
3400e3a8:	2f00      	cmp	r7, #0
3400e3aa:	d0f6      	beq.n	3400e39a <__sflush_r+0xae>
3400e3ac:	0793      	lsls	r3, r2, #30
3400e3ae:	680e      	ldr	r6, [r1, #0]
3400e3b0:	600f      	str	r7, [r1, #0]
3400e3b2:	bf0c      	ite	eq
3400e3b4:	694b      	ldreq	r3, [r1, #20]
3400e3b6:	2300      	movne	r3, #0
3400e3b8:	eba6 0807 	sub.w	r8, r6, r7
3400e3bc:	608b      	str	r3, [r1, #8]
3400e3be:	f1b8 0f00 	cmp.w	r8, #0
3400e3c2:	ddea      	ble.n	3400e39a <__sflush_r+0xae>
3400e3c4:	4643      	mov	r3, r8
3400e3c6:	463a      	mov	r2, r7
3400e3c8:	6a21      	ldr	r1, [r4, #32]
3400e3ca:	4628      	mov	r0, r5
3400e3cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3400e3ce:	47b0      	blx	r6
3400e3d0:	2800      	cmp	r0, #0
3400e3d2:	dc08      	bgt.n	3400e3e6 <__sflush_r+0xfa>
3400e3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e3d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e3dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e3e0:	81a3      	strh	r3, [r4, #12]
3400e3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400e3e6:	4407      	add	r7, r0
3400e3e8:	eba8 0800 	sub.w	r8, r8, r0
3400e3ec:	e7e7      	b.n	3400e3be <__sflush_r+0xd2>
3400e3ee:	bf00      	nop
3400e3f0:	20400001 	.word	0x20400001

3400e3f4 <_fflush_r>:
3400e3f4:	b538      	push	{r3, r4, r5, lr}
3400e3f6:	690b      	ldr	r3, [r1, #16]
3400e3f8:	4605      	mov	r5, r0
3400e3fa:	460c      	mov	r4, r1
3400e3fc:	b913      	cbnz	r3, 3400e404 <_fflush_r+0x10>
3400e3fe:	2500      	movs	r5, #0
3400e400:	4628      	mov	r0, r5
3400e402:	bd38      	pop	{r3, r4, r5, pc}
3400e404:	b118      	cbz	r0, 3400e40e <_fflush_r+0x1a>
3400e406:	6a03      	ldr	r3, [r0, #32]
3400e408:	b90b      	cbnz	r3, 3400e40e <_fflush_r+0x1a>
3400e40a:	f000 f8bb 	bl	3400e584 <__sinit>
3400e40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e412:	2b00      	cmp	r3, #0
3400e414:	d0f3      	beq.n	3400e3fe <_fflush_r+0xa>
3400e416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3400e418:	07d0      	lsls	r0, r2, #31
3400e41a:	d404      	bmi.n	3400e426 <_fflush_r+0x32>
3400e41c:	0599      	lsls	r1, r3, #22
3400e41e:	d402      	bmi.n	3400e426 <_fflush_r+0x32>
3400e420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e422:	f000 fcbe 	bl	3400eda2 <__retarget_lock_acquire_recursive>
3400e426:	4628      	mov	r0, r5
3400e428:	4621      	mov	r1, r4
3400e42a:	f7ff ff5f 	bl	3400e2ec <__sflush_r>
3400e42e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e430:	4605      	mov	r5, r0
3400e432:	07da      	lsls	r2, r3, #31
3400e434:	d4e4      	bmi.n	3400e400 <_fflush_r+0xc>
3400e436:	89a3      	ldrh	r3, [r4, #12]
3400e438:	059b      	lsls	r3, r3, #22
3400e43a:	d4e1      	bmi.n	3400e400 <_fflush_r+0xc>
3400e43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e43e:	f000 fcb1 	bl	3400eda4 <__retarget_lock_release_recursive>
3400e442:	e7dd      	b.n	3400e400 <_fflush_r+0xc>

3400e444 <fflush>:
3400e444:	4601      	mov	r1, r0
3400e446:	b920      	cbnz	r0, 3400e452 <fflush+0xe>
3400e448:	4a04      	ldr	r2, [pc, #16]	@ (3400e45c <fflush+0x18>)
3400e44a:	4905      	ldr	r1, [pc, #20]	@ (3400e460 <fflush+0x1c>)
3400e44c:	4805      	ldr	r0, [pc, #20]	@ (3400e464 <fflush+0x20>)
3400e44e:	f000 b8c3 	b.w	3400e5d8 <_fwalk_sglue>
3400e452:	4b05      	ldr	r3, [pc, #20]	@ (3400e468 <fflush+0x24>)
3400e454:	6818      	ldr	r0, [r3, #0]
3400e456:	f7ff bfcd 	b.w	3400e3f4 <_fflush_r>
3400e45a:	bf00      	nop
3400e45c:	34012848 	.word	0x34012848
3400e460:	3400e3f5 	.word	0x3400e3f5
3400e464:	34012858 	.word	0x34012858
3400e468:	34012854 	.word	0x34012854

3400e46c <std>:
3400e46c:	2300      	movs	r3, #0
3400e46e:	b510      	push	{r4, lr}
3400e470:	4604      	mov	r4, r0
3400e472:	6083      	str	r3, [r0, #8]
3400e474:	8181      	strh	r1, [r0, #12]
3400e476:	4619      	mov	r1, r3
3400e478:	6643      	str	r3, [r0, #100]	@ 0x64
3400e47a:	81c2      	strh	r2, [r0, #14]
3400e47c:	2208      	movs	r2, #8
3400e47e:	6183      	str	r3, [r0, #24]
3400e480:	e9c0 3300 	strd	r3, r3, [r0]
3400e484:	e9c0 3304 	strd	r3, r3, [r0, #16]
3400e488:	305c      	adds	r0, #92	@ 0x5c
3400e48a:	f000 fa0b 	bl	3400e8a4 <memset>
3400e48e:	4b0d      	ldr	r3, [pc, #52]	@ (3400e4c4 <std+0x58>)
3400e490:	6224      	str	r4, [r4, #32]
3400e492:	6263      	str	r3, [r4, #36]	@ 0x24
3400e494:	4b0c      	ldr	r3, [pc, #48]	@ (3400e4c8 <std+0x5c>)
3400e496:	62a3      	str	r3, [r4, #40]	@ 0x28
3400e498:	4b0c      	ldr	r3, [pc, #48]	@ (3400e4cc <std+0x60>)
3400e49a:	62e3      	str	r3, [r4, #44]	@ 0x2c
3400e49c:	4b0c      	ldr	r3, [pc, #48]	@ (3400e4d0 <std+0x64>)
3400e49e:	6323      	str	r3, [r4, #48]	@ 0x30
3400e4a0:	4b0c      	ldr	r3, [pc, #48]	@ (3400e4d4 <std+0x68>)
3400e4a2:	429c      	cmp	r4, r3
3400e4a4:	d006      	beq.n	3400e4b4 <std+0x48>
3400e4a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3400e4aa:	4294      	cmp	r4, r2
3400e4ac:	d002      	beq.n	3400e4b4 <std+0x48>
3400e4ae:	33d0      	adds	r3, #208	@ 0xd0
3400e4b0:	429c      	cmp	r4, r3
3400e4b2:	d105      	bne.n	3400e4c0 <std+0x54>
3400e4b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3400e4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e4bc:	f000 bc70 	b.w	3400eda0 <__retarget_lock_init_recursive>
3400e4c0:	bd10      	pop	{r4, pc}
3400e4c2:	bf00      	nop
3400e4c4:	3400e6f5 	.word	0x3400e6f5
3400e4c8:	3400e717 	.word	0x3400e717
3400e4cc:	3400e74f 	.word	0x3400e74f
3400e4d0:	3400e773 	.word	0x3400e773
3400e4d4:	34013298 	.word	0x34013298

3400e4d8 <stdio_exit_handler>:
3400e4d8:	4a02      	ldr	r2, [pc, #8]	@ (3400e4e4 <stdio_exit_handler+0xc>)
3400e4da:	4903      	ldr	r1, [pc, #12]	@ (3400e4e8 <stdio_exit_handler+0x10>)
3400e4dc:	4803      	ldr	r0, [pc, #12]	@ (3400e4ec <stdio_exit_handler+0x14>)
3400e4de:	f000 b87b 	b.w	3400e5d8 <_fwalk_sglue>
3400e4e2:	bf00      	nop
3400e4e4:	34012848 	.word	0x34012848
3400e4e8:	3400e3f5 	.word	0x3400e3f5
3400e4ec:	34012858 	.word	0x34012858

3400e4f0 <cleanup_stdio>:
3400e4f0:	6841      	ldr	r1, [r0, #4]
3400e4f2:	4b0c      	ldr	r3, [pc, #48]	@ (3400e524 <cleanup_stdio+0x34>)
3400e4f4:	4299      	cmp	r1, r3
3400e4f6:	b510      	push	{r4, lr}
3400e4f8:	4604      	mov	r4, r0
3400e4fa:	d001      	beq.n	3400e500 <cleanup_stdio+0x10>
3400e4fc:	f7ff ff7a 	bl	3400e3f4 <_fflush_r>
3400e500:	68a1      	ldr	r1, [r4, #8]
3400e502:	4b09      	ldr	r3, [pc, #36]	@ (3400e528 <cleanup_stdio+0x38>)
3400e504:	4299      	cmp	r1, r3
3400e506:	d002      	beq.n	3400e50e <cleanup_stdio+0x1e>
3400e508:	4620      	mov	r0, r4
3400e50a:	f7ff ff73 	bl	3400e3f4 <_fflush_r>
3400e50e:	68e1      	ldr	r1, [r4, #12]
3400e510:	4b06      	ldr	r3, [pc, #24]	@ (3400e52c <cleanup_stdio+0x3c>)
3400e512:	4299      	cmp	r1, r3
3400e514:	d004      	beq.n	3400e520 <cleanup_stdio+0x30>
3400e516:	4620      	mov	r0, r4
3400e518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e51c:	f7ff bf6a 	b.w	3400e3f4 <_fflush_r>
3400e520:	bd10      	pop	{r4, pc}
3400e522:	bf00      	nop
3400e524:	34013298 	.word	0x34013298
3400e528:	34013300 	.word	0x34013300
3400e52c:	34013368 	.word	0x34013368

3400e530 <global_stdio_init.part.0>:
3400e530:	b510      	push	{r4, lr}
3400e532:	4b0b      	ldr	r3, [pc, #44]	@ (3400e560 <global_stdio_init.part.0+0x30>)
3400e534:	2104      	movs	r1, #4
3400e536:	4c0b      	ldr	r4, [pc, #44]	@ (3400e564 <global_stdio_init.part.0+0x34>)
3400e538:	4a0b      	ldr	r2, [pc, #44]	@ (3400e568 <global_stdio_init.part.0+0x38>)
3400e53a:	4620      	mov	r0, r4
3400e53c:	601a      	str	r2, [r3, #0]
3400e53e:	2200      	movs	r2, #0
3400e540:	f7ff ff94 	bl	3400e46c <std>
3400e544:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3400e548:	2201      	movs	r2, #1
3400e54a:	2109      	movs	r1, #9
3400e54c:	f7ff ff8e 	bl	3400e46c <std>
3400e550:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3400e554:	2202      	movs	r2, #2
3400e556:	2112      	movs	r1, #18
3400e558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e55c:	f7ff bf86 	b.w	3400e46c <std>
3400e560:	340133d0 	.word	0x340133d0
3400e564:	34013298 	.word	0x34013298
3400e568:	3400e4d9 	.word	0x3400e4d9

3400e56c <__sfp_lock_acquire>:
3400e56c:	4801      	ldr	r0, [pc, #4]	@ (3400e574 <__sfp_lock_acquire+0x8>)
3400e56e:	f000 bc18 	b.w	3400eda2 <__retarget_lock_acquire_recursive>
3400e572:	bf00      	nop
3400e574:	340133d9 	.word	0x340133d9

3400e578 <__sfp_lock_release>:
3400e578:	4801      	ldr	r0, [pc, #4]	@ (3400e580 <__sfp_lock_release+0x8>)
3400e57a:	f000 bc13 	b.w	3400eda4 <__retarget_lock_release_recursive>
3400e57e:	bf00      	nop
3400e580:	340133d9 	.word	0x340133d9

3400e584 <__sinit>:
3400e584:	b510      	push	{r4, lr}
3400e586:	4604      	mov	r4, r0
3400e588:	f7ff fff0 	bl	3400e56c <__sfp_lock_acquire>
3400e58c:	6a23      	ldr	r3, [r4, #32]
3400e58e:	b11b      	cbz	r3, 3400e598 <__sinit+0x14>
3400e590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e594:	f7ff bff0 	b.w	3400e578 <__sfp_lock_release>
3400e598:	4b04      	ldr	r3, [pc, #16]	@ (3400e5ac <__sinit+0x28>)
3400e59a:	6223      	str	r3, [r4, #32]
3400e59c:	4b04      	ldr	r3, [pc, #16]	@ (3400e5b0 <__sinit+0x2c>)
3400e59e:	681b      	ldr	r3, [r3, #0]
3400e5a0:	2b00      	cmp	r3, #0
3400e5a2:	d1f5      	bne.n	3400e590 <__sinit+0xc>
3400e5a4:	f7ff ffc4 	bl	3400e530 <global_stdio_init.part.0>
3400e5a8:	e7f2      	b.n	3400e590 <__sinit+0xc>
3400e5aa:	bf00      	nop
3400e5ac:	3400e4f1 	.word	0x3400e4f1
3400e5b0:	340133d0 	.word	0x340133d0

3400e5b4 <fiprintf>:
3400e5b4:	b40e      	push	{r1, r2, r3}
3400e5b6:	b503      	push	{r0, r1, lr}
3400e5b8:	ab03      	add	r3, sp, #12
3400e5ba:	4601      	mov	r1, r0
3400e5bc:	4805      	ldr	r0, [pc, #20]	@ (3400e5d4 <fiprintf+0x20>)
3400e5be:	f853 2b04 	ldr.w	r2, [r3], #4
3400e5c2:	6800      	ldr	r0, [r0, #0]
3400e5c4:	9301      	str	r3, [sp, #4]
3400e5c6:	f001 fdf3 	bl	340101b0 <_vfiprintf_r>
3400e5ca:	b002      	add	sp, #8
3400e5cc:	f85d eb04 	ldr.w	lr, [sp], #4
3400e5d0:	b003      	add	sp, #12
3400e5d2:	4770      	bx	lr
3400e5d4:	34012854 	.word	0x34012854

3400e5d8 <_fwalk_sglue>:
3400e5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400e5dc:	4607      	mov	r7, r0
3400e5de:	4688      	mov	r8, r1
3400e5e0:	4614      	mov	r4, r2
3400e5e2:	2600      	movs	r6, #0
3400e5e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3400e5e8:	f1b9 0901 	subs.w	r9, r9, #1
3400e5ec:	d505      	bpl.n	3400e5fa <_fwalk_sglue+0x22>
3400e5ee:	6824      	ldr	r4, [r4, #0]
3400e5f0:	2c00      	cmp	r4, #0
3400e5f2:	d1f7      	bne.n	3400e5e4 <_fwalk_sglue+0xc>
3400e5f4:	4630      	mov	r0, r6
3400e5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400e5fa:	89ab      	ldrh	r3, [r5, #12]
3400e5fc:	2b01      	cmp	r3, #1
3400e5fe:	d907      	bls.n	3400e610 <_fwalk_sglue+0x38>
3400e600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3400e604:	3301      	adds	r3, #1
3400e606:	d003      	beq.n	3400e610 <_fwalk_sglue+0x38>
3400e608:	4629      	mov	r1, r5
3400e60a:	4638      	mov	r0, r7
3400e60c:	47c0      	blx	r8
3400e60e:	4306      	orrs	r6, r0
3400e610:	3568      	adds	r5, #104	@ 0x68
3400e612:	e7e9      	b.n	3400e5e8 <_fwalk_sglue+0x10>

3400e614 <iprintf>:
3400e614:	b40f      	push	{r0, r1, r2, r3}
3400e616:	b507      	push	{r0, r1, r2, lr}
3400e618:	4906      	ldr	r1, [pc, #24]	@ (3400e634 <iprintf+0x20>)
3400e61a:	ab04      	add	r3, sp, #16
3400e61c:	6808      	ldr	r0, [r1, #0]
3400e61e:	f853 2b04 	ldr.w	r2, [r3], #4
3400e622:	6881      	ldr	r1, [r0, #8]
3400e624:	9301      	str	r3, [sp, #4]
3400e626:	f001 fdc3 	bl	340101b0 <_vfiprintf_r>
3400e62a:	b003      	add	sp, #12
3400e62c:	f85d eb04 	ldr.w	lr, [sp], #4
3400e630:	b004      	add	sp, #16
3400e632:	4770      	bx	lr
3400e634:	34012854 	.word	0x34012854

3400e638 <_puts_r>:
3400e638:	6a03      	ldr	r3, [r0, #32]
3400e63a:	b570      	push	{r4, r5, r6, lr}
3400e63c:	4605      	mov	r5, r0
3400e63e:	460e      	mov	r6, r1
3400e640:	6884      	ldr	r4, [r0, #8]
3400e642:	b90b      	cbnz	r3, 3400e648 <_puts_r+0x10>
3400e644:	f7ff ff9e 	bl	3400e584 <__sinit>
3400e648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e64a:	07db      	lsls	r3, r3, #31
3400e64c:	d405      	bmi.n	3400e65a <_puts_r+0x22>
3400e64e:	89a3      	ldrh	r3, [r4, #12]
3400e650:	0598      	lsls	r0, r3, #22
3400e652:	d402      	bmi.n	3400e65a <_puts_r+0x22>
3400e654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e656:	f000 fba4 	bl	3400eda2 <__retarget_lock_acquire_recursive>
3400e65a:	89a3      	ldrh	r3, [r4, #12]
3400e65c:	0719      	lsls	r1, r3, #28
3400e65e:	d502      	bpl.n	3400e666 <_puts_r+0x2e>
3400e660:	6923      	ldr	r3, [r4, #16]
3400e662:	2b00      	cmp	r3, #0
3400e664:	d135      	bne.n	3400e6d2 <_puts_r+0x9a>
3400e666:	4621      	mov	r1, r4
3400e668:	4628      	mov	r0, r5
3400e66a:	f000 f8c5 	bl	3400e7f8 <__swsetup_r>
3400e66e:	b380      	cbz	r0, 3400e6d2 <_puts_r+0x9a>
3400e670:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3400e674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e676:	07da      	lsls	r2, r3, #31
3400e678:	d405      	bmi.n	3400e686 <_puts_r+0x4e>
3400e67a:	89a3      	ldrh	r3, [r4, #12]
3400e67c:	059b      	lsls	r3, r3, #22
3400e67e:	d402      	bmi.n	3400e686 <_puts_r+0x4e>
3400e680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e682:	f000 fb8f 	bl	3400eda4 <__retarget_lock_release_recursive>
3400e686:	4628      	mov	r0, r5
3400e688:	bd70      	pop	{r4, r5, r6, pc}
3400e68a:	2b00      	cmp	r3, #0
3400e68c:	da04      	bge.n	3400e698 <_puts_r+0x60>
3400e68e:	69a2      	ldr	r2, [r4, #24]
3400e690:	429a      	cmp	r2, r3
3400e692:	dc17      	bgt.n	3400e6c4 <_puts_r+0x8c>
3400e694:	290a      	cmp	r1, #10
3400e696:	d015      	beq.n	3400e6c4 <_puts_r+0x8c>
3400e698:	6823      	ldr	r3, [r4, #0]
3400e69a:	1c5a      	adds	r2, r3, #1
3400e69c:	6022      	str	r2, [r4, #0]
3400e69e:	7019      	strb	r1, [r3, #0]
3400e6a0:	68a3      	ldr	r3, [r4, #8]
3400e6a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400e6a6:	3b01      	subs	r3, #1
3400e6a8:	60a3      	str	r3, [r4, #8]
3400e6aa:	2900      	cmp	r1, #0
3400e6ac:	d1ed      	bne.n	3400e68a <_puts_r+0x52>
3400e6ae:	2b00      	cmp	r3, #0
3400e6b0:	da11      	bge.n	3400e6d6 <_puts_r+0x9e>
3400e6b2:	4622      	mov	r2, r4
3400e6b4:	210a      	movs	r1, #10
3400e6b6:	4628      	mov	r0, r5
3400e6b8:	f000 f85f 	bl	3400e77a <__swbuf_r>
3400e6bc:	3001      	adds	r0, #1
3400e6be:	d0d7      	beq.n	3400e670 <_puts_r+0x38>
3400e6c0:	250a      	movs	r5, #10
3400e6c2:	e7d7      	b.n	3400e674 <_puts_r+0x3c>
3400e6c4:	4622      	mov	r2, r4
3400e6c6:	4628      	mov	r0, r5
3400e6c8:	f000 f857 	bl	3400e77a <__swbuf_r>
3400e6cc:	3001      	adds	r0, #1
3400e6ce:	d1e7      	bne.n	3400e6a0 <_puts_r+0x68>
3400e6d0:	e7ce      	b.n	3400e670 <_puts_r+0x38>
3400e6d2:	3e01      	subs	r6, #1
3400e6d4:	e7e4      	b.n	3400e6a0 <_puts_r+0x68>
3400e6d6:	6823      	ldr	r3, [r4, #0]
3400e6d8:	1c5a      	adds	r2, r3, #1
3400e6da:	6022      	str	r2, [r4, #0]
3400e6dc:	220a      	movs	r2, #10
3400e6de:	701a      	strb	r2, [r3, #0]
3400e6e0:	e7ee      	b.n	3400e6c0 <_puts_r+0x88>
	...

3400e6e4 <puts>:
3400e6e4:	4b02      	ldr	r3, [pc, #8]	@ (3400e6f0 <puts+0xc>)
3400e6e6:	4601      	mov	r1, r0
3400e6e8:	6818      	ldr	r0, [r3, #0]
3400e6ea:	f7ff bfa5 	b.w	3400e638 <_puts_r>
3400e6ee:	bf00      	nop
3400e6f0:	34012854 	.word	0x34012854

3400e6f4 <__sread>:
3400e6f4:	b510      	push	{r4, lr}
3400e6f6:	460c      	mov	r4, r1
3400e6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e6fc:	f000 faf2 	bl	3400ece4 <_read_r>
3400e700:	2800      	cmp	r0, #0
3400e702:	bfab      	itete	ge
3400e704:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3400e706:	89a3      	ldrhlt	r3, [r4, #12]
3400e708:	181b      	addge	r3, r3, r0
3400e70a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3400e70e:	bfac      	ite	ge
3400e710:	6563      	strge	r3, [r4, #84]	@ 0x54
3400e712:	81a3      	strhlt	r3, [r4, #12]
3400e714:	bd10      	pop	{r4, pc}

3400e716 <__swrite>:
3400e716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400e71a:	461f      	mov	r7, r3
3400e71c:	898b      	ldrh	r3, [r1, #12]
3400e71e:	4605      	mov	r5, r0
3400e720:	460c      	mov	r4, r1
3400e722:	05db      	lsls	r3, r3, #23
3400e724:	4616      	mov	r6, r2
3400e726:	d505      	bpl.n	3400e734 <__swrite+0x1e>
3400e728:	2302      	movs	r3, #2
3400e72a:	2200      	movs	r2, #0
3400e72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e730:	f000 fac6 	bl	3400ecc0 <_lseek_r>
3400e734:	89a3      	ldrh	r3, [r4, #12]
3400e736:	4632      	mov	r2, r6
3400e738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400e73c:	4628      	mov	r0, r5
3400e73e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400e742:	81a3      	strh	r3, [r4, #12]
3400e744:	463b      	mov	r3, r7
3400e746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3400e74a:	f000 baed 	b.w	3400ed28 <_write_r>

3400e74e <__sseek>:
3400e74e:	b510      	push	{r4, lr}
3400e750:	460c      	mov	r4, r1
3400e752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e756:	f000 fab3 	bl	3400ecc0 <_lseek_r>
3400e75a:	1c43      	adds	r3, r0, #1
3400e75c:	89a3      	ldrh	r3, [r4, #12]
3400e75e:	bf15      	itete	ne
3400e760:	6560      	strne	r0, [r4, #84]	@ 0x54
3400e762:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3400e766:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3400e76a:	81a3      	strheq	r3, [r4, #12]
3400e76c:	bf18      	it	ne
3400e76e:	81a3      	strhne	r3, [r4, #12]
3400e770:	bd10      	pop	{r4, pc}

3400e772 <__sclose>:
3400e772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e776:	f000 ba93 	b.w	3400eca0 <_close_r>

3400e77a <__swbuf_r>:
3400e77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400e77c:	460e      	mov	r6, r1
3400e77e:	4614      	mov	r4, r2
3400e780:	4605      	mov	r5, r0
3400e782:	b118      	cbz	r0, 3400e78c <__swbuf_r+0x12>
3400e784:	6a03      	ldr	r3, [r0, #32]
3400e786:	b90b      	cbnz	r3, 3400e78c <__swbuf_r+0x12>
3400e788:	f7ff fefc 	bl	3400e584 <__sinit>
3400e78c:	69a3      	ldr	r3, [r4, #24]
3400e78e:	60a3      	str	r3, [r4, #8]
3400e790:	89a3      	ldrh	r3, [r4, #12]
3400e792:	071a      	lsls	r2, r3, #28
3400e794:	d501      	bpl.n	3400e79a <__swbuf_r+0x20>
3400e796:	6923      	ldr	r3, [r4, #16]
3400e798:	b943      	cbnz	r3, 3400e7ac <__swbuf_r+0x32>
3400e79a:	4621      	mov	r1, r4
3400e79c:	4628      	mov	r0, r5
3400e79e:	f000 f82b 	bl	3400e7f8 <__swsetup_r>
3400e7a2:	b118      	cbz	r0, 3400e7ac <__swbuf_r+0x32>
3400e7a4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3400e7a8:	4638      	mov	r0, r7
3400e7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400e7ac:	6823      	ldr	r3, [r4, #0]
3400e7ae:	b2f6      	uxtb	r6, r6
3400e7b0:	6922      	ldr	r2, [r4, #16]
3400e7b2:	4637      	mov	r7, r6
3400e7b4:	1a98      	subs	r0, r3, r2
3400e7b6:	6963      	ldr	r3, [r4, #20]
3400e7b8:	4283      	cmp	r3, r0
3400e7ba:	dc05      	bgt.n	3400e7c8 <__swbuf_r+0x4e>
3400e7bc:	4621      	mov	r1, r4
3400e7be:	4628      	mov	r0, r5
3400e7c0:	f7ff fe18 	bl	3400e3f4 <_fflush_r>
3400e7c4:	2800      	cmp	r0, #0
3400e7c6:	d1ed      	bne.n	3400e7a4 <__swbuf_r+0x2a>
3400e7c8:	68a3      	ldr	r3, [r4, #8]
3400e7ca:	3b01      	subs	r3, #1
3400e7cc:	60a3      	str	r3, [r4, #8]
3400e7ce:	6823      	ldr	r3, [r4, #0]
3400e7d0:	1c5a      	adds	r2, r3, #1
3400e7d2:	6022      	str	r2, [r4, #0]
3400e7d4:	701e      	strb	r6, [r3, #0]
3400e7d6:	1c43      	adds	r3, r0, #1
3400e7d8:	6962      	ldr	r2, [r4, #20]
3400e7da:	429a      	cmp	r2, r3
3400e7dc:	d004      	beq.n	3400e7e8 <__swbuf_r+0x6e>
3400e7de:	89a3      	ldrh	r3, [r4, #12]
3400e7e0:	07db      	lsls	r3, r3, #31
3400e7e2:	d5e1      	bpl.n	3400e7a8 <__swbuf_r+0x2e>
3400e7e4:	2e0a      	cmp	r6, #10
3400e7e6:	d1df      	bne.n	3400e7a8 <__swbuf_r+0x2e>
3400e7e8:	4621      	mov	r1, r4
3400e7ea:	4628      	mov	r0, r5
3400e7ec:	f7ff fe02 	bl	3400e3f4 <_fflush_r>
3400e7f0:	2800      	cmp	r0, #0
3400e7f2:	d0d9      	beq.n	3400e7a8 <__swbuf_r+0x2e>
3400e7f4:	e7d6      	b.n	3400e7a4 <__swbuf_r+0x2a>
	...

3400e7f8 <__swsetup_r>:
3400e7f8:	b538      	push	{r3, r4, r5, lr}
3400e7fa:	4b29      	ldr	r3, [pc, #164]	@ (3400e8a0 <__swsetup_r+0xa8>)
3400e7fc:	4605      	mov	r5, r0
3400e7fe:	460c      	mov	r4, r1
3400e800:	6818      	ldr	r0, [r3, #0]
3400e802:	b118      	cbz	r0, 3400e80c <__swsetup_r+0x14>
3400e804:	6a03      	ldr	r3, [r0, #32]
3400e806:	b90b      	cbnz	r3, 3400e80c <__swsetup_r+0x14>
3400e808:	f7ff febc 	bl	3400e584 <__sinit>
3400e80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e810:	0719      	lsls	r1, r3, #28
3400e812:	d422      	bmi.n	3400e85a <__swsetup_r+0x62>
3400e814:	06da      	lsls	r2, r3, #27
3400e816:	d407      	bmi.n	3400e828 <__swsetup_r+0x30>
3400e818:	2209      	movs	r2, #9
3400e81a:	602a      	str	r2, [r5, #0]
3400e81c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e824:	81a3      	strh	r3, [r4, #12]
3400e826:	e033      	b.n	3400e890 <__swsetup_r+0x98>
3400e828:	0758      	lsls	r0, r3, #29
3400e82a:	d512      	bpl.n	3400e852 <__swsetup_r+0x5a>
3400e82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400e82e:	b141      	cbz	r1, 3400e842 <__swsetup_r+0x4a>
3400e830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400e834:	4299      	cmp	r1, r3
3400e836:	d002      	beq.n	3400e83e <__swsetup_r+0x46>
3400e838:	4628      	mov	r0, r5
3400e83a:	f001 f8c3 	bl	3400f9c4 <_free_r>
3400e83e:	2300      	movs	r3, #0
3400e840:	6363      	str	r3, [r4, #52]	@ 0x34
3400e842:	89a3      	ldrh	r3, [r4, #12]
3400e844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3400e848:	81a3      	strh	r3, [r4, #12]
3400e84a:	2300      	movs	r3, #0
3400e84c:	6063      	str	r3, [r4, #4]
3400e84e:	6923      	ldr	r3, [r4, #16]
3400e850:	6023      	str	r3, [r4, #0]
3400e852:	89a3      	ldrh	r3, [r4, #12]
3400e854:	f043 0308 	orr.w	r3, r3, #8
3400e858:	81a3      	strh	r3, [r4, #12]
3400e85a:	6923      	ldr	r3, [r4, #16]
3400e85c:	b94b      	cbnz	r3, 3400e872 <__swsetup_r+0x7a>
3400e85e:	89a3      	ldrh	r3, [r4, #12]
3400e860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3400e864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400e868:	d003      	beq.n	3400e872 <__swsetup_r+0x7a>
3400e86a:	4621      	mov	r1, r4
3400e86c:	4628      	mov	r0, r5
3400e86e:	f001 fddc 	bl	3401042a <__smakebuf_r>
3400e872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e876:	f013 0201 	ands.w	r2, r3, #1
3400e87a:	d00a      	beq.n	3400e892 <__swsetup_r+0x9a>
3400e87c:	2200      	movs	r2, #0
3400e87e:	60a2      	str	r2, [r4, #8]
3400e880:	6962      	ldr	r2, [r4, #20]
3400e882:	4252      	negs	r2, r2
3400e884:	61a2      	str	r2, [r4, #24]
3400e886:	6922      	ldr	r2, [r4, #16]
3400e888:	b942      	cbnz	r2, 3400e89c <__swsetup_r+0xa4>
3400e88a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3400e88e:	d1c5      	bne.n	3400e81c <__swsetup_r+0x24>
3400e890:	bd38      	pop	{r3, r4, r5, pc}
3400e892:	0799      	lsls	r1, r3, #30
3400e894:	bf58      	it	pl
3400e896:	6962      	ldrpl	r2, [r4, #20]
3400e898:	60a2      	str	r2, [r4, #8]
3400e89a:	e7f4      	b.n	3400e886 <__swsetup_r+0x8e>
3400e89c:	2000      	movs	r0, #0
3400e89e:	e7f7      	b.n	3400e890 <__swsetup_r+0x98>
3400e8a0:	34012854 	.word	0x34012854

3400e8a4 <memset>:
3400e8a4:	4402      	add	r2, r0
3400e8a6:	4603      	mov	r3, r0
3400e8a8:	4293      	cmp	r3, r2
3400e8aa:	d100      	bne.n	3400e8ae <memset+0xa>
3400e8ac:	4770      	bx	lr
3400e8ae:	f803 1b01 	strb.w	r1, [r3], #1
3400e8b2:	e7f9      	b.n	3400e8a8 <memset+0x4>

3400e8b4 <_strerror_r>:
3400e8b4:	b510      	push	{r4, lr}
3400e8b6:	4604      	mov	r4, r0
3400e8b8:	4608      	mov	r0, r1
3400e8ba:	4611      	mov	r1, r2
3400e8bc:	461a      	mov	r2, r3
3400e8be:	288e      	cmp	r0, #142	@ 0x8e
3400e8c0:	f200 8130 	bhi.w	3400eb24 <_strerror_r+0x270>
3400e8c4:	e8df f010 	tbh	[pc, r0, lsl #1]
3400e8c8:	0138008f 	.word	0x0138008f
3400e8cc:	00940092 	.word	0x00940092
3400e8d0:	00980096 	.word	0x00980096
3400e8d4:	009c009a 	.word	0x009c009a
3400e8d8:	00a2009e 	.word	0x00a2009e
3400e8dc:	00a800a4 	.word	0x00a800a4
3400e8e0:	00ac00aa 	.word	0x00ac00aa
3400e8e4:	012e00ae 	.word	0x012e00ae
3400e8e8:	00b200b0 	.word	0x00b200b0
3400e8ec:	00b600b4 	.word	0x00b600b4
3400e8f0:	00be00b8 	.word	0x00be00b8
3400e8f4:	00c600c0 	.word	0x00c600c0
3400e8f8:	00ca00c8 	.word	0x00ca00c8
3400e8fc:	00ce00cc 	.word	0x00ce00cc
3400e900:	00d600d2 	.word	0x00d600d2
3400e904:	00da00d8 	.word	0x00da00d8
3400e908:	00de00dc 	.word	0x00de00dc
3400e90c:	00e200e0 	.word	0x00e200e0
3400e910:	012e00e4 	.word	0x012e00e4
3400e914:	012e012e 	.word	0x012e012e
3400e918:	012e012e 	.word	0x012e012e
3400e91c:	012e012e 	.word	0x012e012e
3400e920:	00e8012e 	.word	0x00e8012e
3400e924:	012e00ec 	.word	0x012e00ec
3400e928:	012e012e 	.word	0x012e012e
3400e92c:	012e012e 	.word	0x012e012e
3400e930:	012e012e 	.word	0x012e012e
3400e934:	012e012e 	.word	0x012e012e
3400e938:	012e012e 	.word	0x012e012e
3400e93c:	012e012e 	.word	0x012e012e
3400e940:	010800ee 	.word	0x010800ee
3400e944:	00f200f0 	.word	0x00f200f0
3400e948:	012e012e 	.word	0x012e012e
3400e94c:	00f4012e 	.word	0x00f4012e
3400e950:	012e012e 	.word	0x012e012e
3400e954:	00f6012e 	.word	0x00f6012e
3400e958:	012e012e 	.word	0x012e012e
3400e95c:	012e00fa 	.word	0x012e00fa
3400e960:	00fc012e 	.word	0x00fc012e
3400e964:	012e012e 	.word	0x012e012e
3400e968:	012e012e 	.word	0x012e012e
3400e96c:	012e012e 	.word	0x012e012e
3400e970:	012e012e 	.word	0x012e012e
3400e974:	012e012e 	.word	0x012e012e
3400e978:	012e00fe 	.word	0x012e00fe
3400e97c:	01020100 	.word	0x01020100
3400e980:	012e0104 	.word	0x012e0104
3400e984:	0126012e 	.word	0x0126012e
3400e988:	012e012e 	.word	0x012e012e
3400e98c:	012e012e 	.word	0x012e012e
3400e990:	012e012e 	.word	0x012e012e
3400e994:	012e012e 	.word	0x012e012e
3400e998:	01060114 	.word	0x01060114
3400e99c:	010c010a 	.word	0x010c010a
3400e9a0:	0110010e 	.word	0x0110010e
3400e9a4:	0112012e 	.word	0x0112012e
3400e9a8:	011a0116 	.word	0x011a0116
3400e9ac:	00c200ea 	.word	0x00c200ea
3400e9b0:	00ba012c 	.word	0x00ba012c
3400e9b4:	00bc00d0 	.word	0x00bc00d0
3400e9b8:	00a600a0 	.word	0x00a600a0
3400e9bc:	00f8012a 	.word	0x00f8012a
3400e9c0:	0118012e 	.word	0x0118012e
3400e9c4:	011e00c4 	.word	0x011e00c4
3400e9c8:	012e011c 	.word	0x012e011c
3400e9cc:	012e012e 	.word	0x012e012e
3400e9d0:	012e012e 	.word	0x012e012e
3400e9d4:	012e00d4 	.word	0x012e00d4
3400e9d8:	012e012e 	.word	0x012e012e
3400e9dc:	012800e6 	.word	0x012800e6
3400e9e0:	01220120 	.word	0x01220120
3400e9e4:	0124      	.short	0x0124
3400e9e6:	4b55      	ldr	r3, [pc, #340]	@ (3400eb3c <_strerror_r+0x288>)
3400e9e8:	4618      	mov	r0, r3
3400e9ea:	bd10      	pop	{r4, pc}
3400e9ec:	4b54      	ldr	r3, [pc, #336]	@ (3400eb40 <_strerror_r+0x28c>)
3400e9ee:	e7fb      	b.n	3400e9e8 <_strerror_r+0x134>
3400e9f0:	4b54      	ldr	r3, [pc, #336]	@ (3400eb44 <_strerror_r+0x290>)
3400e9f2:	e7f9      	b.n	3400e9e8 <_strerror_r+0x134>
3400e9f4:	4b54      	ldr	r3, [pc, #336]	@ (3400eb48 <_strerror_r+0x294>)
3400e9f6:	e7f7      	b.n	3400e9e8 <_strerror_r+0x134>
3400e9f8:	4b54      	ldr	r3, [pc, #336]	@ (3400eb4c <_strerror_r+0x298>)
3400e9fa:	e7f5      	b.n	3400e9e8 <_strerror_r+0x134>
3400e9fc:	4b54      	ldr	r3, [pc, #336]	@ (3400eb50 <_strerror_r+0x29c>)
3400e9fe:	e7f3      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea00:	4b54      	ldr	r3, [pc, #336]	@ (3400eb54 <_strerror_r+0x2a0>)
3400ea02:	e7f1      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea04:	4b54      	ldr	r3, [pc, #336]	@ (3400eb58 <_strerror_r+0x2a4>)
3400ea06:	e7ef      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea08:	4b54      	ldr	r3, [pc, #336]	@ (3400eb5c <_strerror_r+0x2a8>)
3400ea0a:	e7ed      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea0c:	4b54      	ldr	r3, [pc, #336]	@ (3400eb60 <_strerror_r+0x2ac>)
3400ea0e:	e7eb      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea10:	4b54      	ldr	r3, [pc, #336]	@ (3400eb64 <_strerror_r+0x2b0>)
3400ea12:	e7e9      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea14:	4b54      	ldr	r3, [pc, #336]	@ (3400eb68 <_strerror_r+0x2b4>)
3400ea16:	e7e7      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea18:	4b54      	ldr	r3, [pc, #336]	@ (3400eb6c <_strerror_r+0x2b8>)
3400ea1a:	e7e5      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea1c:	4b54      	ldr	r3, [pc, #336]	@ (3400eb70 <_strerror_r+0x2bc>)
3400ea1e:	e7e3      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea20:	4b54      	ldr	r3, [pc, #336]	@ (3400eb74 <_strerror_r+0x2c0>)
3400ea22:	e7e1      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea24:	4b54      	ldr	r3, [pc, #336]	@ (3400eb78 <_strerror_r+0x2c4>)
3400ea26:	e7df      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea28:	4b54      	ldr	r3, [pc, #336]	@ (3400eb7c <_strerror_r+0x2c8>)
3400ea2a:	e7dd      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea2c:	4b54      	ldr	r3, [pc, #336]	@ (3400eb80 <_strerror_r+0x2cc>)
3400ea2e:	e7db      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea30:	4b54      	ldr	r3, [pc, #336]	@ (3400eb84 <_strerror_r+0x2d0>)
3400ea32:	e7d9      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea34:	4b54      	ldr	r3, [pc, #336]	@ (3400eb88 <_strerror_r+0x2d4>)
3400ea36:	e7d7      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea38:	4b54      	ldr	r3, [pc, #336]	@ (3400eb8c <_strerror_r+0x2d8>)
3400ea3a:	e7d5      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea3c:	4b54      	ldr	r3, [pc, #336]	@ (3400eb90 <_strerror_r+0x2dc>)
3400ea3e:	e7d3      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea40:	4b54      	ldr	r3, [pc, #336]	@ (3400eb94 <_strerror_r+0x2e0>)
3400ea42:	e7d1      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea44:	4b54      	ldr	r3, [pc, #336]	@ (3400eb98 <_strerror_r+0x2e4>)
3400ea46:	e7cf      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea48:	4b54      	ldr	r3, [pc, #336]	@ (3400eb9c <_strerror_r+0x2e8>)
3400ea4a:	e7cd      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea4c:	4b54      	ldr	r3, [pc, #336]	@ (3400eba0 <_strerror_r+0x2ec>)
3400ea4e:	e7cb      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea50:	4b54      	ldr	r3, [pc, #336]	@ (3400eba4 <_strerror_r+0x2f0>)
3400ea52:	e7c9      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea54:	4b54      	ldr	r3, [pc, #336]	@ (3400eba8 <_strerror_r+0x2f4>)
3400ea56:	e7c7      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea58:	4b54      	ldr	r3, [pc, #336]	@ (3400ebac <_strerror_r+0x2f8>)
3400ea5a:	e7c5      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea5c:	4b54      	ldr	r3, [pc, #336]	@ (3400ebb0 <_strerror_r+0x2fc>)
3400ea5e:	e7c3      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea60:	4b54      	ldr	r3, [pc, #336]	@ (3400ebb4 <_strerror_r+0x300>)
3400ea62:	e7c1      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea64:	4b54      	ldr	r3, [pc, #336]	@ (3400ebb8 <_strerror_r+0x304>)
3400ea66:	e7bf      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea68:	4b54      	ldr	r3, [pc, #336]	@ (3400ebbc <_strerror_r+0x308>)
3400ea6a:	e7bd      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea6c:	4b54      	ldr	r3, [pc, #336]	@ (3400ebc0 <_strerror_r+0x30c>)
3400ea6e:	e7bb      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea70:	4b54      	ldr	r3, [pc, #336]	@ (3400ebc4 <_strerror_r+0x310>)
3400ea72:	e7b9      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea74:	4b54      	ldr	r3, [pc, #336]	@ (3400ebc8 <_strerror_r+0x314>)
3400ea76:	e7b7      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea78:	4b54      	ldr	r3, [pc, #336]	@ (3400ebcc <_strerror_r+0x318>)
3400ea7a:	e7b5      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea7c:	4b54      	ldr	r3, [pc, #336]	@ (3400ebd0 <_strerror_r+0x31c>)
3400ea7e:	e7b3      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea80:	4b54      	ldr	r3, [pc, #336]	@ (3400ebd4 <_strerror_r+0x320>)
3400ea82:	e7b1      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea84:	4b54      	ldr	r3, [pc, #336]	@ (3400ebd8 <_strerror_r+0x324>)
3400ea86:	e7af      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea88:	4b54      	ldr	r3, [pc, #336]	@ (3400ebdc <_strerror_r+0x328>)
3400ea8a:	e7ad      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea8c:	4b54      	ldr	r3, [pc, #336]	@ (3400ebe0 <_strerror_r+0x32c>)
3400ea8e:	e7ab      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea90:	4b54      	ldr	r3, [pc, #336]	@ (3400ebe4 <_strerror_r+0x330>)
3400ea92:	e7a9      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea94:	4b54      	ldr	r3, [pc, #336]	@ (3400ebe8 <_strerror_r+0x334>)
3400ea96:	e7a7      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea98:	4b54      	ldr	r3, [pc, #336]	@ (3400ebec <_strerror_r+0x338>)
3400ea9a:	e7a5      	b.n	3400e9e8 <_strerror_r+0x134>
3400ea9c:	4b54      	ldr	r3, [pc, #336]	@ (3400ebf0 <_strerror_r+0x33c>)
3400ea9e:	e7a3      	b.n	3400e9e8 <_strerror_r+0x134>
3400eaa0:	4b54      	ldr	r3, [pc, #336]	@ (3400ebf4 <_strerror_r+0x340>)
3400eaa2:	e7a1      	b.n	3400e9e8 <_strerror_r+0x134>
3400eaa4:	4b54      	ldr	r3, [pc, #336]	@ (3400ebf8 <_strerror_r+0x344>)
3400eaa6:	e79f      	b.n	3400e9e8 <_strerror_r+0x134>
3400eaa8:	4b54      	ldr	r3, [pc, #336]	@ (3400ebfc <_strerror_r+0x348>)
3400eaaa:	e79d      	b.n	3400e9e8 <_strerror_r+0x134>
3400eaac:	4b54      	ldr	r3, [pc, #336]	@ (3400ec00 <_strerror_r+0x34c>)
3400eaae:	e79b      	b.n	3400e9e8 <_strerror_r+0x134>
3400eab0:	4b54      	ldr	r3, [pc, #336]	@ (3400ec04 <_strerror_r+0x350>)
3400eab2:	e799      	b.n	3400e9e8 <_strerror_r+0x134>
3400eab4:	4b54      	ldr	r3, [pc, #336]	@ (3400ec08 <_strerror_r+0x354>)
3400eab6:	e797      	b.n	3400e9e8 <_strerror_r+0x134>
3400eab8:	4b54      	ldr	r3, [pc, #336]	@ (3400ec0c <_strerror_r+0x358>)
3400eaba:	e795      	b.n	3400e9e8 <_strerror_r+0x134>
3400eabc:	4b54      	ldr	r3, [pc, #336]	@ (3400ec10 <_strerror_r+0x35c>)
3400eabe:	e793      	b.n	3400e9e8 <_strerror_r+0x134>
3400eac0:	4b54      	ldr	r3, [pc, #336]	@ (3400ec14 <_strerror_r+0x360>)
3400eac2:	e791      	b.n	3400e9e8 <_strerror_r+0x134>
3400eac4:	4b54      	ldr	r3, [pc, #336]	@ (3400ec18 <_strerror_r+0x364>)
3400eac6:	e78f      	b.n	3400e9e8 <_strerror_r+0x134>
3400eac8:	4b54      	ldr	r3, [pc, #336]	@ (3400ec1c <_strerror_r+0x368>)
3400eaca:	e78d      	b.n	3400e9e8 <_strerror_r+0x134>
3400eacc:	4b54      	ldr	r3, [pc, #336]	@ (3400ec20 <_strerror_r+0x36c>)
3400eace:	e78b      	b.n	3400e9e8 <_strerror_r+0x134>
3400ead0:	4b54      	ldr	r3, [pc, #336]	@ (3400ec24 <_strerror_r+0x370>)
3400ead2:	e789      	b.n	3400e9e8 <_strerror_r+0x134>
3400ead4:	4b54      	ldr	r3, [pc, #336]	@ (3400ec28 <_strerror_r+0x374>)
3400ead6:	e787      	b.n	3400e9e8 <_strerror_r+0x134>
3400ead8:	4b54      	ldr	r3, [pc, #336]	@ (3400ec2c <_strerror_r+0x378>)
3400eada:	e785      	b.n	3400e9e8 <_strerror_r+0x134>
3400eadc:	4b54      	ldr	r3, [pc, #336]	@ (3400ec30 <_strerror_r+0x37c>)
3400eade:	e783      	b.n	3400e9e8 <_strerror_r+0x134>
3400eae0:	4b54      	ldr	r3, [pc, #336]	@ (3400ec34 <_strerror_r+0x380>)
3400eae2:	e781      	b.n	3400e9e8 <_strerror_r+0x134>
3400eae4:	4b54      	ldr	r3, [pc, #336]	@ (3400ec38 <_strerror_r+0x384>)
3400eae6:	e77f      	b.n	3400e9e8 <_strerror_r+0x134>
3400eae8:	4b54      	ldr	r3, [pc, #336]	@ (3400ec3c <_strerror_r+0x388>)
3400eaea:	e77d      	b.n	3400e9e8 <_strerror_r+0x134>
3400eaec:	4b54      	ldr	r3, [pc, #336]	@ (3400ec40 <_strerror_r+0x38c>)
3400eaee:	e77b      	b.n	3400e9e8 <_strerror_r+0x134>
3400eaf0:	4b54      	ldr	r3, [pc, #336]	@ (3400ec44 <_strerror_r+0x390>)
3400eaf2:	e779      	b.n	3400e9e8 <_strerror_r+0x134>
3400eaf4:	4b54      	ldr	r3, [pc, #336]	@ (3400ec48 <_strerror_r+0x394>)
3400eaf6:	e777      	b.n	3400e9e8 <_strerror_r+0x134>
3400eaf8:	4b54      	ldr	r3, [pc, #336]	@ (3400ec4c <_strerror_r+0x398>)
3400eafa:	e775      	b.n	3400e9e8 <_strerror_r+0x134>
3400eafc:	4b54      	ldr	r3, [pc, #336]	@ (3400ec50 <_strerror_r+0x39c>)
3400eafe:	e773      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb00:	4b54      	ldr	r3, [pc, #336]	@ (3400ec54 <_strerror_r+0x3a0>)
3400eb02:	e771      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb04:	4b54      	ldr	r3, [pc, #336]	@ (3400ec58 <_strerror_r+0x3a4>)
3400eb06:	e76f      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb08:	4b54      	ldr	r3, [pc, #336]	@ (3400ec5c <_strerror_r+0x3a8>)
3400eb0a:	e76d      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb0c:	4b54      	ldr	r3, [pc, #336]	@ (3400ec60 <_strerror_r+0x3ac>)
3400eb0e:	e76b      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb10:	4b54      	ldr	r3, [pc, #336]	@ (3400ec64 <_strerror_r+0x3b0>)
3400eb12:	e769      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb14:	4b54      	ldr	r3, [pc, #336]	@ (3400ec68 <_strerror_r+0x3b4>)
3400eb16:	e767      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb18:	4b54      	ldr	r3, [pc, #336]	@ (3400ec6c <_strerror_r+0x3b8>)
3400eb1a:	e765      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb1c:	4b54      	ldr	r3, [pc, #336]	@ (3400ec70 <_strerror_r+0x3bc>)
3400eb1e:	e763      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb20:	4b54      	ldr	r3, [pc, #336]	@ (3400ec74 <_strerror_r+0x3c0>)
3400eb22:	e761      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb24:	2a00      	cmp	r2, #0
3400eb26:	bf08      	it	eq
3400eb28:	4622      	moveq	r2, r4
3400eb2a:	f000 f8b3 	bl	3400ec94 <_user_strerror>
3400eb2e:	4b52      	ldr	r3, [pc, #328]	@ (3400ec78 <_strerror_r+0x3c4>)
3400eb30:	2800      	cmp	r0, #0
3400eb32:	bf18      	it	ne
3400eb34:	4603      	movne	r3, r0
3400eb36:	e757      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb38:	4b50      	ldr	r3, [pc, #320]	@ (3400ec7c <_strerror_r+0x3c8>)
3400eb3a:	e755      	b.n	3400e9e8 <_strerror_r+0x134>
3400eb3c:	3401194a 	.word	0x3401194a
3400eb40:	3401195c 	.word	0x3401195c
3400eb44:	34011976 	.word	0x34011976
3400eb48:	34011986 	.word	0x34011986
3400eb4c:	3401199e 	.word	0x3401199e
3400eb50:	340119a8 	.word	0x340119a8
3400eb54:	340119c2 	.word	0x340119c2
3400eb58:	340119d4 	.word	0x340119d4
3400eb5c:	340119e6 	.word	0x340119e6
3400eb60:	340119ff 	.word	0x340119ff
3400eb64:	34011a0f 	.word	0x34011a0f
3400eb68:	34011a1b 	.word	0x34011a1b
3400eb6c:	34011a38 	.word	0x34011a38
3400eb70:	34011a4a 	.word	0x34011a4a
3400eb74:	34011a5b 	.word	0x34011a5b
3400eb78:	34011a6d 	.word	0x34011a6d
3400eb7c:	34011a79 	.word	0x34011a79
3400eb80:	34011a91 	.word	0x34011a91
3400eb84:	34011a9d 	.word	0x34011a9d
3400eb88:	34011aaf 	.word	0x34011aaf
3400eb8c:	34011abe 	.word	0x34011abe
3400eb90:	34011ace 	.word	0x34011ace
3400eb94:	34011adb 	.word	0x34011adb
3400eb98:	34011afa 	.word	0x34011afa
3400eb9c:	34011b09 	.word	0x34011b09
3400eba0:	34011b1a 	.word	0x34011b1a
3400eba4:	34011b3e 	.word	0x34011b3e
3400eba8:	34011b5c 	.word	0x34011b5c
3400ebac:	34011b7a 	.word	0x34011b7a
3400ebb0:	34011b9a 	.word	0x34011b9a
3400ebb4:	34011bb1 	.word	0x34011bb1
3400ebb8:	34011bc0 	.word	0x34011bc0
3400ebbc:	34011bcf 	.word	0x34011bcf
3400ebc0:	34011be3 	.word	0x34011be3
3400ebc4:	34011bfb 	.word	0x34011bfb
3400ebc8:	34011c09 	.word	0x34011c09
3400ebcc:	34011c16 	.word	0x34011c16
3400ebd0:	34011c2c 	.word	0x34011c2c
3400ebd4:	34011c3b 	.word	0x34011c3b
3400ebd8:	34011c47 	.word	0x34011c47
3400ebdc:	34011c76 	.word	0x34011c76
3400ebe0:	34011c87 	.word	0x34011c87
3400ebe4:	34011ca2 	.word	0x34011ca2
3400ebe8:	34011cb5 	.word	0x34011cb5
3400ebec:	34011ccb 	.word	0x34011ccb
3400ebf0:	34011cd4 	.word	0x34011cd4
3400ebf4:	34011ceb 	.word	0x34011ceb
3400ebf8:	34011cf3 	.word	0x34011cf3
3400ebfc:	34011d00 	.word	0x34011d00
3400ec00:	34011d15 	.word	0x34011d15
3400ec04:	34011d29 	.word	0x34011d29
3400ec08:	34011d41 	.word	0x34011d41
3400ec0c:	34011d50 	.word	0x34011d50
3400ec10:	34011d61 	.word	0x34011d61
3400ec14:	34011d74 	.word	0x34011d74
3400ec18:	34011d80 	.word	0x34011d80
3400ec1c:	34011d99 	.word	0x34011d99
3400ec20:	34011dad 	.word	0x34011dad
3400ec24:	34011dc8 	.word	0x34011dc8
3400ec28:	34011de0 	.word	0x34011de0
3400ec2c:	34011dfa 	.word	0x34011dfa
3400ec30:	34011e02 	.word	0x34011e02
3400ec34:	34011e32 	.word	0x34011e32
3400ec38:	34011e51 	.word	0x34011e51
3400ec3c:	34011e70 	.word	0x34011e70
3400ec40:	34011e87 	.word	0x34011e87
3400ec44:	34011e9a 	.word	0x34011e9a
3400ec48:	34011eb3 	.word	0x34011eb3
3400ec4c:	34011eca 	.word	0x34011eca
3400ec50:	34011ee0 	.word	0x34011ee0
3400ec54:	34011f01 	.word	0x34011f01
3400ec58:	34011f19 	.word	0x34011f19
3400ec5c:	34011f35 	.word	0x34011f35
3400ec60:	34011f48 	.word	0x34011f48
3400ec64:	34011f5e 	.word	0x34011f5e
3400ec68:	34011f72 	.word	0x34011f72
3400ec6c:	34011f94 	.word	0x34011f94
3400ec70:	34011fba 	.word	0x34011fba
3400ec74:	34011fcb 	.word	0x34011fcb
3400ec78:	34010f84 	.word	0x34010f84
3400ec7c:	34011952 	.word	0x34011952

3400ec80 <strerror>:
3400ec80:	4601      	mov	r1, r0
3400ec82:	2300      	movs	r3, #0
3400ec84:	4802      	ldr	r0, [pc, #8]	@ (3400ec90 <strerror+0x10>)
3400ec86:	461a      	mov	r2, r3
3400ec88:	6800      	ldr	r0, [r0, #0]
3400ec8a:	f7ff be13 	b.w	3400e8b4 <_strerror_r>
3400ec8e:	bf00      	nop
3400ec90:	34012854 	.word	0x34012854

3400ec94 <_user_strerror>:
3400ec94:	2000      	movs	r0, #0
3400ec96:	4770      	bx	lr

3400ec98 <_localeconv_r>:
3400ec98:	4800      	ldr	r0, [pc, #0]	@ (3400ec9c <_localeconv_r+0x4>)
3400ec9a:	4770      	bx	lr
3400ec9c:	34012994 	.word	0x34012994

3400eca0 <_close_r>:
3400eca0:	b538      	push	{r3, r4, r5, lr}
3400eca2:	2300      	movs	r3, #0
3400eca4:	4d05      	ldr	r5, [pc, #20]	@ (3400ecbc <_close_r+0x1c>)
3400eca6:	4604      	mov	r4, r0
3400eca8:	4608      	mov	r0, r1
3400ecaa:	602b      	str	r3, [r5, #0]
3400ecac:	f7f2 fc43 	bl	34001536 <_close>
3400ecb0:	1c43      	adds	r3, r0, #1
3400ecb2:	d102      	bne.n	3400ecba <_close_r+0x1a>
3400ecb4:	682b      	ldr	r3, [r5, #0]
3400ecb6:	b103      	cbz	r3, 3400ecba <_close_r+0x1a>
3400ecb8:	6023      	str	r3, [r4, #0]
3400ecba:	bd38      	pop	{r3, r4, r5, pc}
3400ecbc:	340133d4 	.word	0x340133d4

3400ecc0 <_lseek_r>:
3400ecc0:	b538      	push	{r3, r4, r5, lr}
3400ecc2:	4604      	mov	r4, r0
3400ecc4:	4d06      	ldr	r5, [pc, #24]	@ (3400ece0 <_lseek_r+0x20>)
3400ecc6:	4608      	mov	r0, r1
3400ecc8:	4611      	mov	r1, r2
3400ecca:	2200      	movs	r2, #0
3400eccc:	602a      	str	r2, [r5, #0]
3400ecce:	461a      	mov	r2, r3
3400ecd0:	f7f2 fc3b 	bl	3400154a <_lseek>
3400ecd4:	1c43      	adds	r3, r0, #1
3400ecd6:	d102      	bne.n	3400ecde <_lseek_r+0x1e>
3400ecd8:	682b      	ldr	r3, [r5, #0]
3400ecda:	b103      	cbz	r3, 3400ecde <_lseek_r+0x1e>
3400ecdc:	6023      	str	r3, [r4, #0]
3400ecde:	bd38      	pop	{r3, r4, r5, pc}
3400ece0:	340133d4 	.word	0x340133d4

3400ece4 <_read_r>:
3400ece4:	b538      	push	{r3, r4, r5, lr}
3400ece6:	4604      	mov	r4, r0
3400ece8:	4d06      	ldr	r5, [pc, #24]	@ (3400ed04 <_read_r+0x20>)
3400ecea:	4608      	mov	r0, r1
3400ecec:	4611      	mov	r1, r2
3400ecee:	2200      	movs	r2, #0
3400ecf0:	602a      	str	r2, [r5, #0]
3400ecf2:	461a      	mov	r2, r3
3400ecf4:	f7f2 fc11 	bl	3400151a <_read>
3400ecf8:	1c43      	adds	r3, r0, #1
3400ecfa:	d102      	bne.n	3400ed02 <_read_r+0x1e>
3400ecfc:	682b      	ldr	r3, [r5, #0]
3400ecfe:	b103      	cbz	r3, 3400ed02 <_read_r+0x1e>
3400ed00:	6023      	str	r3, [r4, #0]
3400ed02:	bd38      	pop	{r3, r4, r5, pc}
3400ed04:	340133d4 	.word	0x340133d4

3400ed08 <_sbrk_r>:
3400ed08:	b538      	push	{r3, r4, r5, lr}
3400ed0a:	2300      	movs	r3, #0
3400ed0c:	4d05      	ldr	r5, [pc, #20]	@ (3400ed24 <_sbrk_r+0x1c>)
3400ed0e:	4604      	mov	r4, r0
3400ed10:	4608      	mov	r0, r1
3400ed12:	602b      	str	r3, [r5, #0]
3400ed14:	f001 fc60 	bl	340105d8 <_sbrk>
3400ed18:	1c43      	adds	r3, r0, #1
3400ed1a:	d102      	bne.n	3400ed22 <_sbrk_r+0x1a>
3400ed1c:	682b      	ldr	r3, [r5, #0]
3400ed1e:	b103      	cbz	r3, 3400ed22 <_sbrk_r+0x1a>
3400ed20:	6023      	str	r3, [r4, #0]
3400ed22:	bd38      	pop	{r3, r4, r5, pc}
3400ed24:	340133d4 	.word	0x340133d4

3400ed28 <_write_r>:
3400ed28:	b538      	push	{r3, r4, r5, lr}
3400ed2a:	4604      	mov	r4, r0
3400ed2c:	4d06      	ldr	r5, [pc, #24]	@ (3400ed48 <_write_r+0x20>)
3400ed2e:	4608      	mov	r0, r1
3400ed30:	4611      	mov	r1, r2
3400ed32:	2200      	movs	r2, #0
3400ed34:	602a      	str	r2, [r5, #0]
3400ed36:	461a      	mov	r2, r3
3400ed38:	f7f2 fb5e 	bl	340013f8 <_write>
3400ed3c:	1c43      	adds	r3, r0, #1
3400ed3e:	d102      	bne.n	3400ed46 <_write_r+0x1e>
3400ed40:	682b      	ldr	r3, [r5, #0]
3400ed42:	b103      	cbz	r3, 3400ed46 <_write_r+0x1e>
3400ed44:	6023      	str	r3, [r4, #0]
3400ed46:	bd38      	pop	{r3, r4, r5, pc}
3400ed48:	340133d4 	.word	0x340133d4

3400ed4c <__errno>:
3400ed4c:	4b01      	ldr	r3, [pc, #4]	@ (3400ed54 <__errno+0x8>)
3400ed4e:	6818      	ldr	r0, [r3, #0]
3400ed50:	4770      	bx	lr
3400ed52:	bf00      	nop
3400ed54:	34012854 	.word	0x34012854

3400ed58 <__libc_init_array>:
3400ed58:	b570      	push	{r4, r5, r6, lr}
3400ed5a:	4d0d      	ldr	r5, [pc, #52]	@ (3400ed90 <__libc_init_array+0x38>)
3400ed5c:	2600      	movs	r6, #0
3400ed5e:	4c0d      	ldr	r4, [pc, #52]	@ (3400ed94 <__libc_init_array+0x3c>)
3400ed60:	1b64      	subs	r4, r4, r5
3400ed62:	10a4      	asrs	r4, r4, #2
3400ed64:	42a6      	cmp	r6, r4
3400ed66:	d109      	bne.n	3400ed7c <__libc_init_array+0x24>
3400ed68:	4d0b      	ldr	r5, [pc, #44]	@ (3400ed98 <__libc_init_array+0x40>)
3400ed6a:	2600      	movs	r6, #0
3400ed6c:	4c0b      	ldr	r4, [pc, #44]	@ (3400ed9c <__libc_init_array+0x44>)
3400ed6e:	f001 fc41 	bl	340105f4 <_init>
3400ed72:	1b64      	subs	r4, r4, r5
3400ed74:	10a4      	asrs	r4, r4, #2
3400ed76:	42a6      	cmp	r6, r4
3400ed78:	d105      	bne.n	3400ed86 <__libc_init_array+0x2e>
3400ed7a:	bd70      	pop	{r4, r5, r6, pc}
3400ed7c:	f855 3b04 	ldr.w	r3, [r5], #4
3400ed80:	3601      	adds	r6, #1
3400ed82:	4798      	blx	r3
3400ed84:	e7ee      	b.n	3400ed64 <__libc_init_array+0xc>
3400ed86:	f855 3b04 	ldr.w	r3, [r5], #4
3400ed8a:	3601      	adds	r6, #1
3400ed8c:	4798      	blx	r3
3400ed8e:	e7f2      	b.n	3400ed76 <__libc_init_array+0x1e>
3400ed90:	340127ec 	.word	0x340127ec
3400ed94:	340127ec 	.word	0x340127ec
3400ed98:	340127ec 	.word	0x340127ec
3400ed9c:	340127f0 	.word	0x340127f0

3400eda0 <__retarget_lock_init_recursive>:
3400eda0:	4770      	bx	lr

3400eda2 <__retarget_lock_acquire_recursive>:
3400eda2:	4770      	bx	lr

3400eda4 <__retarget_lock_release_recursive>:
3400eda4:	4770      	bx	lr

3400eda6 <memchr>:
3400eda6:	b2c9      	uxtb	r1, r1
3400eda8:	4603      	mov	r3, r0
3400edaa:	4402      	add	r2, r0
3400edac:	b510      	push	{r4, lr}
3400edae:	4293      	cmp	r3, r2
3400edb0:	4618      	mov	r0, r3
3400edb2:	d101      	bne.n	3400edb8 <memchr+0x12>
3400edb4:	2000      	movs	r0, #0
3400edb6:	e003      	b.n	3400edc0 <memchr+0x1a>
3400edb8:	7804      	ldrb	r4, [r0, #0]
3400edba:	3301      	adds	r3, #1
3400edbc:	428c      	cmp	r4, r1
3400edbe:	d1f6      	bne.n	3400edae <memchr+0x8>
3400edc0:	bd10      	pop	{r4, pc}

3400edc2 <memcpy>:
3400edc2:	440a      	add	r2, r1
3400edc4:	1e43      	subs	r3, r0, #1
3400edc6:	4291      	cmp	r1, r2
3400edc8:	d100      	bne.n	3400edcc <memcpy+0xa>
3400edca:	4770      	bx	lr
3400edcc:	b510      	push	{r4, lr}
3400edce:	f811 4b01 	ldrb.w	r4, [r1], #1
3400edd2:	4291      	cmp	r1, r2
3400edd4:	f803 4f01 	strb.w	r4, [r3, #1]!
3400edd8:	d1f9      	bne.n	3400edce <memcpy+0xc>
3400edda:	bd10      	pop	{r4, pc}

3400eddc <abort>:
3400eddc:	2006      	movs	r0, #6
3400edde:	b508      	push	{r3, lr}
3400ede0:	f001 fb88 	bl	340104f4 <raise>
3400ede4:	2001      	movs	r0, #1
3400ede6:	f7f2 fb92 	bl	3400150e <_exit>

3400edea <quorem>:
3400edea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400edee:	6903      	ldr	r3, [r0, #16]
3400edf0:	4607      	mov	r7, r0
3400edf2:	690c      	ldr	r4, [r1, #16]
3400edf4:	42a3      	cmp	r3, r4
3400edf6:	f2c0 8083 	blt.w	3400ef00 <quorem+0x116>
3400edfa:	3c01      	subs	r4, #1
3400edfc:	f100 0514 	add.w	r5, r0, #20
3400ee00:	f101 0814 	add.w	r8, r1, #20
3400ee04:	00a3      	lsls	r3, r4, #2
3400ee06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400ee0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3400ee0e:	9300      	str	r3, [sp, #0]
3400ee10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400ee14:	9301      	str	r3, [sp, #4]
3400ee16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3400ee1a:	3301      	adds	r3, #1
3400ee1c:	429a      	cmp	r2, r3
3400ee1e:	fbb2 f6f3 	udiv	r6, r2, r3
3400ee22:	d331      	bcc.n	3400ee88 <quorem+0x9e>
3400ee24:	f04f 0a00 	mov.w	sl, #0
3400ee28:	46c4      	mov	ip, r8
3400ee2a:	46ae      	mov	lr, r5
3400ee2c:	46d3      	mov	fp, sl
3400ee2e:	f85c 3b04 	ldr.w	r3, [ip], #4
3400ee32:	b298      	uxth	r0, r3
3400ee34:	45e1      	cmp	r9, ip
3400ee36:	ea4f 4313 	mov.w	r3, r3, lsr #16
3400ee3a:	fb06 a000 	mla	r0, r6, r0, sl
3400ee3e:	ea4f 4210 	mov.w	r2, r0, lsr #16
3400ee42:	b280      	uxth	r0, r0
3400ee44:	fb06 2303 	mla	r3, r6, r3, r2
3400ee48:	f8de 2000 	ldr.w	r2, [lr]
3400ee4c:	b292      	uxth	r2, r2
3400ee4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400ee52:	eba2 0200 	sub.w	r2, r2, r0
3400ee56:	b29b      	uxth	r3, r3
3400ee58:	f8de 0000 	ldr.w	r0, [lr]
3400ee5c:	445a      	add	r2, fp
3400ee5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3400ee62:	b292      	uxth	r2, r2
3400ee64:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3400ee68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3400ee6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
3400ee70:	f84e 2b04 	str.w	r2, [lr], #4
3400ee74:	d2db      	bcs.n	3400ee2e <quorem+0x44>
3400ee76:	9b00      	ldr	r3, [sp, #0]
3400ee78:	58eb      	ldr	r3, [r5, r3]
3400ee7a:	b92b      	cbnz	r3, 3400ee88 <quorem+0x9e>
3400ee7c:	9b01      	ldr	r3, [sp, #4]
3400ee7e:	3b04      	subs	r3, #4
3400ee80:	429d      	cmp	r5, r3
3400ee82:	461a      	mov	r2, r3
3400ee84:	d330      	bcc.n	3400eee8 <quorem+0xfe>
3400ee86:	613c      	str	r4, [r7, #16]
3400ee88:	4638      	mov	r0, r7
3400ee8a:	f001 f85b 	bl	3400ff44 <__mcmp>
3400ee8e:	2800      	cmp	r0, #0
3400ee90:	db26      	blt.n	3400eee0 <quorem+0xf6>
3400ee92:	4629      	mov	r1, r5
3400ee94:	2000      	movs	r0, #0
3400ee96:	f858 2b04 	ldr.w	r2, [r8], #4
3400ee9a:	f8d1 c000 	ldr.w	ip, [r1]
3400ee9e:	fa1f fe82 	uxth.w	lr, r2
3400eea2:	45c1      	cmp	r9, r8
3400eea4:	fa1f f38c 	uxth.w	r3, ip
3400eea8:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400eeac:	eba3 030e 	sub.w	r3, r3, lr
3400eeb0:	4403      	add	r3, r0
3400eeb2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3400eeb6:	b29b      	uxth	r3, r3
3400eeb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3400eebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400eec0:	ea4f 4022 	mov.w	r0, r2, asr #16
3400eec4:	f841 3b04 	str.w	r3, [r1], #4
3400eec8:	d2e5      	bcs.n	3400ee96 <quorem+0xac>
3400eeca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400eece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400eed2:	b922      	cbnz	r2, 3400eede <quorem+0xf4>
3400eed4:	3b04      	subs	r3, #4
3400eed6:	429d      	cmp	r5, r3
3400eed8:	461a      	mov	r2, r3
3400eeda:	d30b      	bcc.n	3400eef4 <quorem+0x10a>
3400eedc:	613c      	str	r4, [r7, #16]
3400eede:	3601      	adds	r6, #1
3400eee0:	4630      	mov	r0, r6
3400eee2:	b003      	add	sp, #12
3400eee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400eee8:	6812      	ldr	r2, [r2, #0]
3400eeea:	3b04      	subs	r3, #4
3400eeec:	2a00      	cmp	r2, #0
3400eeee:	d1ca      	bne.n	3400ee86 <quorem+0x9c>
3400eef0:	3c01      	subs	r4, #1
3400eef2:	e7c5      	b.n	3400ee80 <quorem+0x96>
3400eef4:	6812      	ldr	r2, [r2, #0]
3400eef6:	3b04      	subs	r3, #4
3400eef8:	2a00      	cmp	r2, #0
3400eefa:	d1ef      	bne.n	3400eedc <quorem+0xf2>
3400eefc:	3c01      	subs	r4, #1
3400eefe:	e7ea      	b.n	3400eed6 <quorem+0xec>
3400ef00:	2000      	movs	r0, #0
3400ef02:	e7ee      	b.n	3400eee2 <quorem+0xf8>
3400ef04:	0000      	movs	r0, r0
	...

3400ef08 <_dtoa_r>:
3400ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400ef0c:	69c7      	ldr	r7, [r0, #28]
3400ef0e:	4681      	mov	r9, r0
3400ef10:	ed2d 8b02 	vpush	{d8}
3400ef14:	b091      	sub	sp, #68	@ 0x44
3400ef16:	ec55 4b10 	vmov	r4, r5, d0
3400ef1a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3400ef1c:	9107      	str	r1, [sp, #28]
3400ef1e:	9209      	str	r2, [sp, #36]	@ 0x24
3400ef20:	930d      	str	r3, [sp, #52]	@ 0x34
3400ef22:	ed8d 0b02 	vstr	d0, [sp, #8]
3400ef26:	b97f      	cbnz	r7, 3400ef48 <_dtoa_r+0x40>
3400ef28:	2010      	movs	r0, #16
3400ef2a:	f7fe fcf1 	bl	3400d910 <malloc>
3400ef2e:	4602      	mov	r2, r0
3400ef30:	f8c9 001c 	str.w	r0, [r9, #28]
3400ef34:	b920      	cbnz	r0, 3400ef40 <_dtoa_r+0x38>
3400ef36:	4ba0      	ldr	r3, [pc, #640]	@ (3400f1b8 <_dtoa_r+0x2b0>)
3400ef38:	21ef      	movs	r1, #239	@ 0xef
3400ef3a:	48a0      	ldr	r0, [pc, #640]	@ (3400f1bc <_dtoa_r+0x2b4>)
3400ef3c:	f7fe fcca 	bl	3400d8d4 <__assert_func>
3400ef40:	e9c0 7701 	strd	r7, r7, [r0, #4]
3400ef44:	6007      	str	r7, [r0, #0]
3400ef46:	60c7      	str	r7, [r0, #12]
3400ef48:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400ef4c:	6819      	ldr	r1, [r3, #0]
3400ef4e:	b159      	cbz	r1, 3400ef68 <_dtoa_r+0x60>
3400ef50:	685a      	ldr	r2, [r3, #4]
3400ef52:	2301      	movs	r3, #1
3400ef54:	4648      	mov	r0, r9
3400ef56:	4093      	lsls	r3, r2
3400ef58:	604a      	str	r2, [r1, #4]
3400ef5a:	608b      	str	r3, [r1, #8]
3400ef5c:	f000 fdbc 	bl	3400fad8 <_Bfree>
3400ef60:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400ef64:	2200      	movs	r2, #0
3400ef66:	601a      	str	r2, [r3, #0]
3400ef68:	1e2b      	subs	r3, r5, #0
3400ef6a:	bfb7      	itett	lt
3400ef6c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3400ef70:	2300      	movge	r3, #0
3400ef72:	2201      	movlt	r2, #1
3400ef74:	9303      	strlt	r3, [sp, #12]
3400ef76:	bfac      	ite	ge
3400ef78:	6033      	strge	r3, [r6, #0]
3400ef7a:	6032      	strlt	r2, [r6, #0]
3400ef7c:	4b90      	ldr	r3, [pc, #576]	@ (3400f1c0 <_dtoa_r+0x2b8>)
3400ef7e:	9e03      	ldr	r6, [sp, #12]
3400ef80:	43b3      	bics	r3, r6
3400ef82:	d110      	bne.n	3400efa6 <_dtoa_r+0x9e>
3400ef84:	f242 730f 	movw	r3, #9999	@ 0x270f
3400ef88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400ef8a:	6013      	str	r3, [r2, #0]
3400ef8c:	f3c6 0313 	ubfx	r3, r6, #0, #20
3400ef90:	4323      	orrs	r3, r4
3400ef92:	f000 84e6 	beq.w	3400f962 <_dtoa_r+0xa5a>
3400ef96:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400ef98:	4f8a      	ldr	r7, [pc, #552]	@ (3400f1c4 <_dtoa_r+0x2bc>)
3400ef9a:	2b00      	cmp	r3, #0
3400ef9c:	f000 84e8 	beq.w	3400f970 <_dtoa_r+0xa68>
3400efa0:	1cfb      	adds	r3, r7, #3
3400efa2:	f000 bce3 	b.w	3400f96c <_dtoa_r+0xa64>
3400efa6:	ed9d 8b02 	vldr	d8, [sp, #8]
3400efaa:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400efb2:	d10a      	bne.n	3400efca <_dtoa_r+0xc2>
3400efb4:	2301      	movs	r3, #1
3400efb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400efb8:	6013      	str	r3, [r2, #0]
3400efba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400efbc:	b113      	cbz	r3, 3400efc4 <_dtoa_r+0xbc>
3400efbe:	4b82      	ldr	r3, [pc, #520]	@ (3400f1c8 <_dtoa_r+0x2c0>)
3400efc0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400efc2:	6013      	str	r3, [r2, #0]
3400efc4:	4f81      	ldr	r7, [pc, #516]	@ (3400f1cc <_dtoa_r+0x2c4>)
3400efc6:	f000 bcd3 	b.w	3400f970 <_dtoa_r+0xa68>
3400efca:	aa0e      	add	r2, sp, #56	@ 0x38
3400efcc:	eeb0 0b48 	vmov.f64	d0, d8
3400efd0:	a90f      	add	r1, sp, #60	@ 0x3c
3400efd2:	4648      	mov	r0, r9
3400efd4:	f001 f86a 	bl	340100ac <__d2b>
3400efd8:	f3c6 530a 	ubfx	r3, r6, #20, #11
3400efdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400efde:	9001      	str	r0, [sp, #4]
3400efe0:	2b00      	cmp	r3, #0
3400efe2:	d045      	beq.n	3400f070 <_dtoa_r+0x168>
3400efe4:	ee18 1a90 	vmov	r1, s17
3400efe8:	eeb0 7b48 	vmov.f64	d7, d8
3400efec:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3400eff0:	2500      	movs	r5, #0
3400eff2:	f3c1 0113 	ubfx	r1, r1, #0, #20
3400eff6:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3400effa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3400effe:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3400f002:	ee07 1a90 	vmov	s15, r1
3400f006:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3400f1a0 <_dtoa_r+0x298>
3400f00a:	ee37 7b46 	vsub.f64	d7, d7, d6
3400f00e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3400f1a8 <_dtoa_r+0x2a0>
3400f012:	eea7 6b05 	vfma.f64	d6, d7, d5
3400f016:	ee07 3a90 	vmov	s15, r3
3400f01a:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3400f01e:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3400f1b0 <_dtoa_r+0x2a8>
3400f022:	eeb0 7b46 	vmov.f64	d7, d6
3400f026:	eea4 7b05 	vfma.f64	d7, d4, d5
3400f02a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3400f02e:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3400f032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f036:	ee16 8a90 	vmov	r8, s13
3400f03a:	d508      	bpl.n	3400f04e <_dtoa_r+0x146>
3400f03c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3400f040:	eeb4 6b47 	vcmp.f64	d6, d7
3400f044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f048:	bf18      	it	ne
3400f04a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3400f04e:	f1b8 0f16 	cmp.w	r8, #22
3400f052:	d82d      	bhi.n	3400f0b0 <_dtoa_r+0x1a8>
3400f054:	495e      	ldr	r1, [pc, #376]	@ (3400f1d0 <_dtoa_r+0x2c8>)
3400f056:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3400f05a:	ed91 7b00 	vldr	d7, [r1]
3400f05e:	eeb4 8bc7 	vcmpe.f64	d8, d7
3400f062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f066:	d501      	bpl.n	3400f06c <_dtoa_r+0x164>
3400f068:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400f06c:	2100      	movs	r1, #0
3400f06e:	e020      	b.n	3400f0b2 <_dtoa_r+0x1aa>
3400f070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3400f072:	2501      	movs	r5, #1
3400f074:	4413      	add	r3, r2
3400f076:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3400f07a:	2920      	cmp	r1, #32
3400f07c:	bfc9      	itett	gt
3400f07e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3400f082:	f1c1 0120 	rsble	r1, r1, #32
3400f086:	408e      	lslgt	r6, r1
3400f088:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3400f08c:	bfd8      	it	le
3400f08e:	fa04 f101 	lslle.w	r1, r4, r1
3400f092:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3400f096:	bfc4      	itt	gt
3400f098:	fa24 f101 	lsrgt.w	r1, r4, r1
3400f09c:	4331      	orrgt	r1, r6
3400f09e:	ee07 1a90 	vmov	s15, r1
3400f0a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3400f0a6:	ee17 1a90 	vmov	r1, s15
3400f0aa:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3400f0ae:	e7a6      	b.n	3400effe <_dtoa_r+0xf6>
3400f0b0:	2101      	movs	r1, #1
3400f0b2:	1ad2      	subs	r2, r2, r3
3400f0b4:	910c      	str	r1, [sp, #48]	@ 0x30
3400f0b6:	1e53      	subs	r3, r2, #1
3400f0b8:	9306      	str	r3, [sp, #24]
3400f0ba:	bf49      	itett	mi
3400f0bc:	f1c2 0301 	rsbmi	r3, r2, #1
3400f0c0:	2300      	movpl	r3, #0
3400f0c2:	9304      	strmi	r3, [sp, #16]
3400f0c4:	2300      	movmi	r3, #0
3400f0c6:	bf54      	ite	pl
3400f0c8:	9304      	strpl	r3, [sp, #16]
3400f0ca:	9306      	strmi	r3, [sp, #24]
3400f0cc:	f1b8 0f00 	cmp.w	r8, #0
3400f0d0:	db16      	blt.n	3400f100 <_dtoa_r+0x1f8>
3400f0d2:	9b06      	ldr	r3, [sp, #24]
3400f0d4:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3400f0d8:	4443      	add	r3, r8
3400f0da:	9306      	str	r3, [sp, #24]
3400f0dc:	2300      	movs	r3, #0
3400f0de:	9a07      	ldr	r2, [sp, #28]
3400f0e0:	2a09      	cmp	r2, #9
3400f0e2:	d843      	bhi.n	3400f16c <_dtoa_r+0x264>
3400f0e4:	2a05      	cmp	r2, #5
3400f0e6:	bfc5      	ittet	gt
3400f0e8:	3a04      	subgt	r2, #4
3400f0ea:	2400      	movgt	r4, #0
3400f0ec:	2401      	movle	r4, #1
3400f0ee:	9207      	strgt	r2, [sp, #28]
3400f0f0:	9a07      	ldr	r2, [sp, #28]
3400f0f2:	3a02      	subs	r2, #2
3400f0f4:	2a03      	cmp	r2, #3
3400f0f6:	d844      	bhi.n	3400f182 <_dtoa_r+0x27a>
3400f0f8:	e8df f002 	tbb	[pc, r2]
3400f0fc:	0b173634 	.word	0x0b173634
3400f100:	9b04      	ldr	r3, [sp, #16]
3400f102:	2200      	movs	r2, #0
3400f104:	eba3 0308 	sub.w	r3, r3, r8
3400f108:	920a      	str	r2, [sp, #40]	@ 0x28
3400f10a:	9304      	str	r3, [sp, #16]
3400f10c:	f1c8 0300 	rsb	r3, r8, #0
3400f110:	e7e5      	b.n	3400f0de <_dtoa_r+0x1d6>
3400f112:	2201      	movs	r2, #1
3400f114:	9208      	str	r2, [sp, #32]
3400f116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f118:	eb08 0b02 	add.w	fp, r8, r2
3400f11c:	f10b 0a01 	add.w	sl, fp, #1
3400f120:	4652      	mov	r2, sl
3400f122:	2a01      	cmp	r2, #1
3400f124:	bfb8      	it	lt
3400f126:	2201      	movlt	r2, #1
3400f128:	e006      	b.n	3400f138 <_dtoa_r+0x230>
3400f12a:	2201      	movs	r2, #1
3400f12c:	9208      	str	r2, [sp, #32]
3400f12e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f130:	2a00      	cmp	r2, #0
3400f132:	dd29      	ble.n	3400f188 <_dtoa_r+0x280>
3400f134:	4693      	mov	fp, r2
3400f136:	4692      	mov	sl, r2
3400f138:	f8d9 701c 	ldr.w	r7, [r9, #28]
3400f13c:	2100      	movs	r1, #0
3400f13e:	2004      	movs	r0, #4
3400f140:	f100 0614 	add.w	r6, r0, #20
3400f144:	4296      	cmp	r6, r2
3400f146:	d926      	bls.n	3400f196 <_dtoa_r+0x28e>
3400f148:	6079      	str	r1, [r7, #4]
3400f14a:	4648      	mov	r0, r9
3400f14c:	9305      	str	r3, [sp, #20]
3400f14e:	f000 fc83 	bl	3400fa58 <_Balloc>
3400f152:	9b05      	ldr	r3, [sp, #20]
3400f154:	4607      	mov	r7, r0
3400f156:	2800      	cmp	r0, #0
3400f158:	d13e      	bne.n	3400f1d8 <_dtoa_r+0x2d0>
3400f15a:	4b1e      	ldr	r3, [pc, #120]	@ (3400f1d4 <_dtoa_r+0x2cc>)
3400f15c:	4602      	mov	r2, r0
3400f15e:	f240 11af 	movw	r1, #431	@ 0x1af
3400f162:	e6ea      	b.n	3400ef3a <_dtoa_r+0x32>
3400f164:	2200      	movs	r2, #0
3400f166:	e7e1      	b.n	3400f12c <_dtoa_r+0x224>
3400f168:	2200      	movs	r2, #0
3400f16a:	e7d3      	b.n	3400f114 <_dtoa_r+0x20c>
3400f16c:	2401      	movs	r4, #1
3400f16e:	2200      	movs	r2, #0
3400f170:	e9cd 2407 	strd	r2, r4, [sp, #28]
3400f174:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3400f178:	2100      	movs	r1, #0
3400f17a:	2212      	movs	r2, #18
3400f17c:	46da      	mov	sl, fp
3400f17e:	9109      	str	r1, [sp, #36]	@ 0x24
3400f180:	e7da      	b.n	3400f138 <_dtoa_r+0x230>
3400f182:	2201      	movs	r2, #1
3400f184:	9208      	str	r2, [sp, #32]
3400f186:	e7f5      	b.n	3400f174 <_dtoa_r+0x26c>
3400f188:	f04f 0b01 	mov.w	fp, #1
3400f18c:	46da      	mov	sl, fp
3400f18e:	465a      	mov	r2, fp
3400f190:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3400f194:	e7d0      	b.n	3400f138 <_dtoa_r+0x230>
3400f196:	3101      	adds	r1, #1
3400f198:	0040      	lsls	r0, r0, #1
3400f19a:	e7d1      	b.n	3400f140 <_dtoa_r+0x238>
3400f19c:	f3af 8000 	nop.w
3400f1a0:	636f4361 	.word	0x636f4361
3400f1a4:	3fd287a7 	.word	0x3fd287a7
3400f1a8:	8b60c8b3 	.word	0x8b60c8b3
3400f1ac:	3fc68a28 	.word	0x3fc68a28
3400f1b0:	509f79fb 	.word	0x509f79fb
3400f1b4:	3fd34413 	.word	0x3fd34413
3400f1b8:	34011fed 	.word	0x34011fed
3400f1bc:	34012004 	.word	0x34012004
3400f1c0:	7ff00000 	.word	0x7ff00000
3400f1c4:	34011fe9 	.word	0x34011fe9
3400f1c8:	340111b5 	.word	0x340111b5
3400f1cc:	340111b4 	.word	0x340111b4
3400f1d0:	34012618 	.word	0x34012618
3400f1d4:	3401205c 	.word	0x3401205c
3400f1d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
3400f1dc:	f1ba 0f0e 	cmp.w	sl, #14
3400f1e0:	6010      	str	r0, [r2, #0]
3400f1e2:	d86e      	bhi.n	3400f2c2 <_dtoa_r+0x3ba>
3400f1e4:	2c00      	cmp	r4, #0
3400f1e6:	d06c      	beq.n	3400f2c2 <_dtoa_r+0x3ba>
3400f1e8:	f1b8 0f00 	cmp.w	r8, #0
3400f1ec:	f340 80b4 	ble.w	3400f358 <_dtoa_r+0x450>
3400f1f0:	f008 010f 	and.w	r1, r8, #15
3400f1f4:	4ac7      	ldr	r2, [pc, #796]	@ (3400f514 <_dtoa_r+0x60c>)
3400f1f6:	f418 7f80 	tst.w	r8, #256	@ 0x100
3400f1fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3400f1fe:	ea4f 1128 	mov.w	r1, r8, asr #4
3400f202:	ed92 7b00 	vldr	d7, [r2]
3400f206:	f000 809b 	beq.w	3400f340 <_dtoa_r+0x438>
3400f20a:	4ac3      	ldr	r2, [pc, #780]	@ (3400f518 <_dtoa_r+0x610>)
3400f20c:	f001 010f 	and.w	r1, r1, #15
3400f210:	ed92 6b08 	vldr	d6, [r2, #32]
3400f214:	2203      	movs	r2, #3
3400f216:	ee88 6b06 	vdiv.f64	d6, d8, d6
3400f21a:	ed8d 6b02 	vstr	d6, [sp, #8]
3400f21e:	48be      	ldr	r0, [pc, #760]	@ (3400f518 <_dtoa_r+0x610>)
3400f220:	2900      	cmp	r1, #0
3400f222:	f040 808f 	bne.w	3400f344 <_dtoa_r+0x43c>
3400f226:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f22a:	ee86 7b07 	vdiv.f64	d7, d6, d7
3400f22e:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f232:	990c      	ldr	r1, [sp, #48]	@ 0x30
3400f234:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f238:	2900      	cmp	r1, #0
3400f23a:	f000 80b3 	beq.w	3400f3a4 <_dtoa_r+0x49c>
3400f23e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3400f242:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f24a:	f140 80ab 	bpl.w	3400f3a4 <_dtoa_r+0x49c>
3400f24e:	f1ba 0f00 	cmp.w	sl, #0
3400f252:	f000 80a7 	beq.w	3400f3a4 <_dtoa_r+0x49c>
3400f256:	f1bb 0f00 	cmp.w	fp, #0
3400f25a:	dd30      	ble.n	3400f2be <_dtoa_r+0x3b6>
3400f25c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3400f260:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3400f264:	3201      	adds	r2, #1
3400f266:	465c      	mov	r4, fp
3400f268:	9105      	str	r1, [sp, #20]
3400f26a:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f26e:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f272:	ee07 2a90 	vmov	s15, r2
3400f276:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3400f27a:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f27e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3400f282:	eea7 5b06 	vfma.f64	d5, d7, d6
3400f286:	ee15 2a90 	vmov	r2, s11
3400f28a:	ec51 0b15 	vmov	r0, r1, d5
3400f28e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3400f292:	2c00      	cmp	r4, #0
3400f294:	f040 808a 	bne.w	3400f3ac <_dtoa_r+0x4a4>
3400f298:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f29c:	ee36 6b47 	vsub.f64	d6, d6, d7
3400f2a0:	ec41 0b17 	vmov	d7, r0, r1
3400f2a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f2ac:	f300 826a 	bgt.w	3400f784 <_dtoa_r+0x87c>
3400f2b0:	eeb1 7b47 	vneg.f64	d7, d7
3400f2b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f2bc:	d423      	bmi.n	3400f306 <_dtoa_r+0x3fe>
3400f2be:	ed8d 8b02 	vstr	d8, [sp, #8]
3400f2c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3400f2c4:	2a00      	cmp	r2, #0
3400f2c6:	f2c0 8129 	blt.w	3400f51c <_dtoa_r+0x614>
3400f2ca:	f1b8 0f0e 	cmp.w	r8, #14
3400f2ce:	f300 8125 	bgt.w	3400f51c <_dtoa_r+0x614>
3400f2d2:	4b90      	ldr	r3, [pc, #576]	@ (3400f514 <_dtoa_r+0x60c>)
3400f2d4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3400f2d8:	ed93 6b00 	vldr	d6, [r3]
3400f2dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f2de:	2b00      	cmp	r3, #0
3400f2e0:	f280 80c8 	bge.w	3400f474 <_dtoa_r+0x56c>
3400f2e4:	f1ba 0f00 	cmp.w	sl, #0
3400f2e8:	f300 80c4 	bgt.w	3400f474 <_dtoa_r+0x56c>
3400f2ec:	d10b      	bne.n	3400f306 <_dtoa_r+0x3fe>
3400f2ee:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f2f2:	ee26 6b07 	vmul.f64	d6, d6, d7
3400f2f6:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f2fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f302:	f2c0 823c 	blt.w	3400f77e <_dtoa_r+0x876>
3400f306:	2400      	movs	r4, #0
3400f308:	4625      	mov	r5, r4
3400f30a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f30c:	463e      	mov	r6, r7
3400f30e:	43db      	mvns	r3, r3
3400f310:	9305      	str	r3, [sp, #20]
3400f312:	f04f 0800 	mov.w	r8, #0
3400f316:	4621      	mov	r1, r4
3400f318:	4648      	mov	r0, r9
3400f31a:	f000 fbdd 	bl	3400fad8 <_Bfree>
3400f31e:	2d00      	cmp	r5, #0
3400f320:	f000 80a2 	beq.w	3400f468 <_dtoa_r+0x560>
3400f324:	f1b8 0f00 	cmp.w	r8, #0
3400f328:	d005      	beq.n	3400f336 <_dtoa_r+0x42e>
3400f32a:	45a8      	cmp	r8, r5
3400f32c:	d003      	beq.n	3400f336 <_dtoa_r+0x42e>
3400f32e:	4641      	mov	r1, r8
3400f330:	4648      	mov	r0, r9
3400f332:	f000 fbd1 	bl	3400fad8 <_Bfree>
3400f336:	4629      	mov	r1, r5
3400f338:	4648      	mov	r0, r9
3400f33a:	f000 fbcd 	bl	3400fad8 <_Bfree>
3400f33e:	e093      	b.n	3400f468 <_dtoa_r+0x560>
3400f340:	2202      	movs	r2, #2
3400f342:	e76c      	b.n	3400f21e <_dtoa_r+0x316>
3400f344:	07cc      	lsls	r4, r1, #31
3400f346:	d504      	bpl.n	3400f352 <_dtoa_r+0x44a>
3400f348:	3201      	adds	r2, #1
3400f34a:	ed90 6b00 	vldr	d6, [r0]
3400f34e:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f352:	1049      	asrs	r1, r1, #1
3400f354:	3008      	adds	r0, #8
3400f356:	e763      	b.n	3400f220 <_dtoa_r+0x318>
3400f358:	d022      	beq.n	3400f3a0 <_dtoa_r+0x498>
3400f35a:	f1c8 0100 	rsb	r1, r8, #0
3400f35e:	4a6d      	ldr	r2, [pc, #436]	@ (3400f514 <_dtoa_r+0x60c>)
3400f360:	2400      	movs	r4, #0
3400f362:	f001 000f 	and.w	r0, r1, #15
3400f366:	1109      	asrs	r1, r1, #4
3400f368:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3400f36c:	486a      	ldr	r0, [pc, #424]	@ (3400f518 <_dtoa_r+0x610>)
3400f36e:	ed92 7b00 	vldr	d7, [r2]
3400f372:	2202      	movs	r2, #2
3400f374:	ee28 7b07 	vmul.f64	d7, d8, d7
3400f378:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f37c:	b929      	cbnz	r1, 3400f38a <_dtoa_r+0x482>
3400f37e:	2c00      	cmp	r4, #0
3400f380:	f43f af57 	beq.w	3400f232 <_dtoa_r+0x32a>
3400f384:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f388:	e753      	b.n	3400f232 <_dtoa_r+0x32a>
3400f38a:	07ce      	lsls	r6, r1, #31
3400f38c:	d505      	bpl.n	3400f39a <_dtoa_r+0x492>
3400f38e:	3201      	adds	r2, #1
3400f390:	2401      	movs	r4, #1
3400f392:	ed90 6b00 	vldr	d6, [r0]
3400f396:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f39a:	1049      	asrs	r1, r1, #1
3400f39c:	3008      	adds	r0, #8
3400f39e:	e7ed      	b.n	3400f37c <_dtoa_r+0x474>
3400f3a0:	2202      	movs	r2, #2
3400f3a2:	e746      	b.n	3400f232 <_dtoa_r+0x32a>
3400f3a4:	4654      	mov	r4, sl
3400f3a6:	f8cd 8014 	str.w	r8, [sp, #20]
3400f3aa:	e762      	b.n	3400f272 <_dtoa_r+0x36a>
3400f3ac:	4a59      	ldr	r2, [pc, #356]	@ (3400f514 <_dtoa_r+0x60c>)
3400f3ae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3400f3b2:	443c      	add	r4, r7
3400f3b4:	ed12 4b02 	vldr	d4, [r2, #-8]
3400f3b8:	9a08      	ldr	r2, [sp, #32]
3400f3ba:	ec41 0b17 	vmov	d7, r0, r1
3400f3be:	b34a      	cbz	r2, 3400f414 <_dtoa_r+0x50c>
3400f3c0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3400f3c4:	463e      	mov	r6, r7
3400f3c6:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3400f3ca:	ee83 5b04 	vdiv.f64	d5, d3, d4
3400f3ce:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f3d2:	ee35 7b47 	vsub.f64	d7, d5, d7
3400f3d6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f3da:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f3de:	ee14 2a90 	vmov	r2, s9
3400f3e2:	3230      	adds	r2, #48	@ 0x30
3400f3e4:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f3e8:	f806 2b01 	strb.w	r2, [r6], #1
3400f3ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f3f4:	d438      	bmi.n	3400f468 <_dtoa_r+0x560>
3400f3f6:	ee32 5b46 	vsub.f64	d5, d2, d6
3400f3fa:	eeb4 5bc7 	vcmpe.f64	d5, d7
3400f3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f402:	d46e      	bmi.n	3400f4e2 <_dtoa_r+0x5da>
3400f404:	42a6      	cmp	r6, r4
3400f406:	f43f af5a 	beq.w	3400f2be <_dtoa_r+0x3b6>
3400f40a:	ee27 7b03 	vmul.f64	d7, d7, d3
3400f40e:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f412:	e7e0      	b.n	3400f3d6 <_dtoa_r+0x4ce>
3400f414:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f418:	4621      	mov	r1, r4
3400f41a:	463e      	mov	r6, r7
3400f41c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f420:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f424:	ee14 2a90 	vmov	r2, s9
3400f428:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f42c:	3230      	adds	r2, #48	@ 0x30
3400f42e:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f432:	f806 2b01 	strb.w	r2, [r6], #1
3400f436:	42a6      	cmp	r6, r4
3400f438:	d119      	bne.n	3400f46e <_dtoa_r+0x566>
3400f43a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3400f43e:	ee37 4b05 	vadd.f64	d4, d7, d5
3400f442:	eeb4 6bc4 	vcmpe.f64	d6, d4
3400f446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f44a:	dc4a      	bgt.n	3400f4e2 <_dtoa_r+0x5da>
3400f44c:	ee35 5b47 	vsub.f64	d5, d5, d7
3400f450:	eeb4 6bc5 	vcmpe.f64	d6, d5
3400f454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f458:	f57f af31 	bpl.w	3400f2be <_dtoa_r+0x3b6>
3400f45c:	460e      	mov	r6, r1
3400f45e:	3901      	subs	r1, #1
3400f460:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3400f464:	2b30      	cmp	r3, #48	@ 0x30
3400f466:	d0f9      	beq.n	3400f45c <_dtoa_r+0x554>
3400f468:	f8dd 8014 	ldr.w	r8, [sp, #20]
3400f46c:	e027      	b.n	3400f4be <_dtoa_r+0x5b6>
3400f46e:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f472:	e7d5      	b.n	3400f420 <_dtoa_r+0x518>
3400f474:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f478:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3400f47c:	463e      	mov	r6, r7
3400f47e:	ee87 5b06 	vdiv.f64	d5, d7, d6
3400f482:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3400f486:	ee15 3a10 	vmov	r3, s10
3400f48a:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3400f48e:	3330      	adds	r3, #48	@ 0x30
3400f490:	eea3 7b46 	vfms.f64	d7, d3, d6
3400f494:	f806 3b01 	strb.w	r3, [r6], #1
3400f498:	1bf3      	subs	r3, r6, r7
3400f49a:	459a      	cmp	sl, r3
3400f49c:	d132      	bne.n	3400f504 <_dtoa_r+0x5fc>
3400f49e:	ee37 7b07 	vadd.f64	d7, d7, d7
3400f4a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f4aa:	dc18      	bgt.n	3400f4de <_dtoa_r+0x5d6>
3400f4ac:	eeb4 7b46 	vcmp.f64	d7, d6
3400f4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f4b4:	d103      	bne.n	3400f4be <_dtoa_r+0x5b6>
3400f4b6:	ee15 3a10 	vmov	r3, s10
3400f4ba:	07db      	lsls	r3, r3, #31
3400f4bc:	d40f      	bmi.n	3400f4de <_dtoa_r+0x5d6>
3400f4be:	9901      	ldr	r1, [sp, #4]
3400f4c0:	4648      	mov	r0, r9
3400f4c2:	f000 fb09 	bl	3400fad8 <_Bfree>
3400f4c6:	2300      	movs	r3, #0
3400f4c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400f4ca:	7033      	strb	r3, [r6, #0]
3400f4cc:	f108 0301 	add.w	r3, r8, #1
3400f4d0:	6013      	str	r3, [r2, #0]
3400f4d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f4d4:	2b00      	cmp	r3, #0
3400f4d6:	f000 824b 	beq.w	3400f970 <_dtoa_r+0xa68>
3400f4da:	601e      	str	r6, [r3, #0]
3400f4dc:	e248      	b.n	3400f970 <_dtoa_r+0xa68>
3400f4de:	f8cd 8014 	str.w	r8, [sp, #20]
3400f4e2:	4633      	mov	r3, r6
3400f4e4:	461e      	mov	r6, r3
3400f4e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400f4ea:	2a39      	cmp	r2, #57	@ 0x39
3400f4ec:	d106      	bne.n	3400f4fc <_dtoa_r+0x5f4>
3400f4ee:	429f      	cmp	r7, r3
3400f4f0:	d1f8      	bne.n	3400f4e4 <_dtoa_r+0x5dc>
3400f4f2:	9a05      	ldr	r2, [sp, #20]
3400f4f4:	3201      	adds	r2, #1
3400f4f6:	9205      	str	r2, [sp, #20]
3400f4f8:	2230      	movs	r2, #48	@ 0x30
3400f4fa:	703a      	strb	r2, [r7, #0]
3400f4fc:	781a      	ldrb	r2, [r3, #0]
3400f4fe:	3201      	adds	r2, #1
3400f500:	701a      	strb	r2, [r3, #0]
3400f502:	e7b1      	b.n	3400f468 <_dtoa_r+0x560>
3400f504:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f508:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400f50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f510:	d1b5      	bne.n	3400f47e <_dtoa_r+0x576>
3400f512:	e7d4      	b.n	3400f4be <_dtoa_r+0x5b6>
3400f514:	34012618 	.word	0x34012618
3400f518:	340125f0 	.word	0x340125f0
3400f51c:	9908      	ldr	r1, [sp, #32]
3400f51e:	2900      	cmp	r1, #0
3400f520:	f000 80e9 	beq.w	3400f6f6 <_dtoa_r+0x7ee>
3400f524:	9907      	ldr	r1, [sp, #28]
3400f526:	2901      	cmp	r1, #1
3400f528:	f300 80cb 	bgt.w	3400f6c2 <_dtoa_r+0x7ba>
3400f52c:	2d00      	cmp	r5, #0
3400f52e:	f000 80c4 	beq.w	3400f6ba <_dtoa_r+0x7b2>
3400f532:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3400f536:	461c      	mov	r4, r3
3400f538:	9e04      	ldr	r6, [sp, #16]
3400f53a:	9305      	str	r3, [sp, #20]
3400f53c:	2101      	movs	r1, #1
3400f53e:	9b04      	ldr	r3, [sp, #16]
3400f540:	4648      	mov	r0, r9
3400f542:	4413      	add	r3, r2
3400f544:	9304      	str	r3, [sp, #16]
3400f546:	9b06      	ldr	r3, [sp, #24]
3400f548:	4413      	add	r3, r2
3400f54a:	9306      	str	r3, [sp, #24]
3400f54c:	f000 fb7a 	bl	3400fc44 <__i2b>
3400f550:	9b05      	ldr	r3, [sp, #20]
3400f552:	4605      	mov	r5, r0
3400f554:	b166      	cbz	r6, 3400f570 <_dtoa_r+0x668>
3400f556:	9a06      	ldr	r2, [sp, #24]
3400f558:	2a00      	cmp	r2, #0
3400f55a:	dd09      	ble.n	3400f570 <_dtoa_r+0x668>
3400f55c:	42b2      	cmp	r2, r6
3400f55e:	9904      	ldr	r1, [sp, #16]
3400f560:	bfa8      	it	ge
3400f562:	4632      	movge	r2, r6
3400f564:	1a89      	subs	r1, r1, r2
3400f566:	1ab6      	subs	r6, r6, r2
3400f568:	9104      	str	r1, [sp, #16]
3400f56a:	9906      	ldr	r1, [sp, #24]
3400f56c:	1a8a      	subs	r2, r1, r2
3400f56e:	9206      	str	r2, [sp, #24]
3400f570:	b30b      	cbz	r3, 3400f5b6 <_dtoa_r+0x6ae>
3400f572:	9a08      	ldr	r2, [sp, #32]
3400f574:	2a00      	cmp	r2, #0
3400f576:	f000 80c5 	beq.w	3400f704 <_dtoa_r+0x7fc>
3400f57a:	2c00      	cmp	r4, #0
3400f57c:	f000 80bf 	beq.w	3400f6fe <_dtoa_r+0x7f6>
3400f580:	4629      	mov	r1, r5
3400f582:	4622      	mov	r2, r4
3400f584:	4648      	mov	r0, r9
3400f586:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f588:	f000 fc16 	bl	3400fdb8 <__pow5mult>
3400f58c:	9a01      	ldr	r2, [sp, #4]
3400f58e:	4601      	mov	r1, r0
3400f590:	4605      	mov	r5, r0
3400f592:	4648      	mov	r0, r9
3400f594:	f000 fb6c 	bl	3400fc70 <__multiply>
3400f598:	9901      	ldr	r1, [sp, #4]
3400f59a:	9005      	str	r0, [sp, #20]
3400f59c:	4648      	mov	r0, r9
3400f59e:	f000 fa9b 	bl	3400fad8 <_Bfree>
3400f5a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400f5a4:	1b1b      	subs	r3, r3, r4
3400f5a6:	f000 80b0 	beq.w	3400f70a <_dtoa_r+0x802>
3400f5aa:	461a      	mov	r2, r3
3400f5ac:	9905      	ldr	r1, [sp, #20]
3400f5ae:	4648      	mov	r0, r9
3400f5b0:	f000 fc02 	bl	3400fdb8 <__pow5mult>
3400f5b4:	9001      	str	r0, [sp, #4]
3400f5b6:	2101      	movs	r1, #1
3400f5b8:	4648      	mov	r0, r9
3400f5ba:	f000 fb43 	bl	3400fc44 <__i2b>
3400f5be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f5c0:	4604      	mov	r4, r0
3400f5c2:	2b00      	cmp	r3, #0
3400f5c4:	f000 81da 	beq.w	3400f97c <_dtoa_r+0xa74>
3400f5c8:	461a      	mov	r2, r3
3400f5ca:	4601      	mov	r1, r0
3400f5cc:	4648      	mov	r0, r9
3400f5ce:	f000 fbf3 	bl	3400fdb8 <__pow5mult>
3400f5d2:	9b07      	ldr	r3, [sp, #28]
3400f5d4:	4604      	mov	r4, r0
3400f5d6:	2b01      	cmp	r3, #1
3400f5d8:	f300 80a0 	bgt.w	3400f71c <_dtoa_r+0x814>
3400f5dc:	9b02      	ldr	r3, [sp, #8]
3400f5de:	2b00      	cmp	r3, #0
3400f5e0:	f040 8096 	bne.w	3400f710 <_dtoa_r+0x808>
3400f5e4:	9b03      	ldr	r3, [sp, #12]
3400f5e6:	f3c3 0213 	ubfx	r2, r3, #0, #20
3400f5ea:	2a00      	cmp	r2, #0
3400f5ec:	f040 8092 	bne.w	3400f714 <_dtoa_r+0x80c>
3400f5f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3400f5f4:	0d12      	lsrs	r2, r2, #20
3400f5f6:	0512      	lsls	r2, r2, #20
3400f5f8:	2a00      	cmp	r2, #0
3400f5fa:	f000 808d 	beq.w	3400f718 <_dtoa_r+0x810>
3400f5fe:	9b04      	ldr	r3, [sp, #16]
3400f600:	3301      	adds	r3, #1
3400f602:	9304      	str	r3, [sp, #16]
3400f604:	9b06      	ldr	r3, [sp, #24]
3400f606:	3301      	adds	r3, #1
3400f608:	9306      	str	r3, [sp, #24]
3400f60a:	2301      	movs	r3, #1
3400f60c:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f60e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f610:	2b00      	cmp	r3, #0
3400f612:	f000 81b9 	beq.w	3400f988 <_dtoa_r+0xa80>
3400f616:	6922      	ldr	r2, [r4, #16]
3400f618:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3400f61c:	6910      	ldr	r0, [r2, #16]
3400f61e:	f000 fac5 	bl	3400fbac <__hi0bits>
3400f622:	f1c0 0020 	rsb	r0, r0, #32
3400f626:	9b06      	ldr	r3, [sp, #24]
3400f628:	4418      	add	r0, r3
3400f62a:	f010 001f 	ands.w	r0, r0, #31
3400f62e:	f000 8081 	beq.w	3400f734 <_dtoa_r+0x82c>
3400f632:	f1c0 0220 	rsb	r2, r0, #32
3400f636:	2a04      	cmp	r2, #4
3400f638:	dd73      	ble.n	3400f722 <_dtoa_r+0x81a>
3400f63a:	f1c0 001c 	rsb	r0, r0, #28
3400f63e:	9b04      	ldr	r3, [sp, #16]
3400f640:	4403      	add	r3, r0
3400f642:	4406      	add	r6, r0
3400f644:	9304      	str	r3, [sp, #16]
3400f646:	9b06      	ldr	r3, [sp, #24]
3400f648:	4403      	add	r3, r0
3400f64a:	9306      	str	r3, [sp, #24]
3400f64c:	9b04      	ldr	r3, [sp, #16]
3400f64e:	2b00      	cmp	r3, #0
3400f650:	dd05      	ble.n	3400f65e <_dtoa_r+0x756>
3400f652:	461a      	mov	r2, r3
3400f654:	9901      	ldr	r1, [sp, #4]
3400f656:	4648      	mov	r0, r9
3400f658:	f000 fc08 	bl	3400fe6c <__lshift>
3400f65c:	9001      	str	r0, [sp, #4]
3400f65e:	9b06      	ldr	r3, [sp, #24]
3400f660:	2b00      	cmp	r3, #0
3400f662:	dd05      	ble.n	3400f670 <_dtoa_r+0x768>
3400f664:	4621      	mov	r1, r4
3400f666:	461a      	mov	r2, r3
3400f668:	4648      	mov	r0, r9
3400f66a:	f000 fbff 	bl	3400fe6c <__lshift>
3400f66e:	4604      	mov	r4, r0
3400f670:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400f672:	2b00      	cmp	r3, #0
3400f674:	d060      	beq.n	3400f738 <_dtoa_r+0x830>
3400f676:	4621      	mov	r1, r4
3400f678:	9801      	ldr	r0, [sp, #4]
3400f67a:	f000 fc63 	bl	3400ff44 <__mcmp>
3400f67e:	2800      	cmp	r0, #0
3400f680:	da5a      	bge.n	3400f738 <_dtoa_r+0x830>
3400f682:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3400f686:	220a      	movs	r2, #10
3400f688:	9901      	ldr	r1, [sp, #4]
3400f68a:	4648      	mov	r0, r9
3400f68c:	9305      	str	r3, [sp, #20]
3400f68e:	2300      	movs	r3, #0
3400f690:	f000 fa44 	bl	3400fb1c <__multadd>
3400f694:	9b08      	ldr	r3, [sp, #32]
3400f696:	9001      	str	r0, [sp, #4]
3400f698:	2b00      	cmp	r3, #0
3400f69a:	f000 8177 	beq.w	3400f98c <_dtoa_r+0xa84>
3400f69e:	4629      	mov	r1, r5
3400f6a0:	2300      	movs	r3, #0
3400f6a2:	220a      	movs	r2, #10
3400f6a4:	4648      	mov	r0, r9
3400f6a6:	f000 fa39 	bl	3400fb1c <__multadd>
3400f6aa:	f1bb 0f00 	cmp.w	fp, #0
3400f6ae:	4605      	mov	r5, r0
3400f6b0:	dc6e      	bgt.n	3400f790 <_dtoa_r+0x888>
3400f6b2:	9b07      	ldr	r3, [sp, #28]
3400f6b4:	2b02      	cmp	r3, #2
3400f6b6:	dc48      	bgt.n	3400f74a <_dtoa_r+0x842>
3400f6b8:	e06a      	b.n	3400f790 <_dtoa_r+0x888>
3400f6ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400f6bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3400f6c0:	e739      	b.n	3400f536 <_dtoa_r+0x62e>
3400f6c2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3400f6c6:	42a3      	cmp	r3, r4
3400f6c8:	db07      	blt.n	3400f6da <_dtoa_r+0x7d2>
3400f6ca:	f1ba 0f00 	cmp.w	sl, #0
3400f6ce:	eba3 0404 	sub.w	r4, r3, r4
3400f6d2:	db0b      	blt.n	3400f6ec <_dtoa_r+0x7e4>
3400f6d4:	9e04      	ldr	r6, [sp, #16]
3400f6d6:	4652      	mov	r2, sl
3400f6d8:	e72f      	b.n	3400f53a <_dtoa_r+0x632>
3400f6da:	1ae2      	subs	r2, r4, r3
3400f6dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f6de:	9e04      	ldr	r6, [sp, #16]
3400f6e0:	4413      	add	r3, r2
3400f6e2:	4652      	mov	r2, sl
3400f6e4:	930a      	str	r3, [sp, #40]	@ 0x28
3400f6e6:	4623      	mov	r3, r4
3400f6e8:	2400      	movs	r4, #0
3400f6ea:	e726      	b.n	3400f53a <_dtoa_r+0x632>
3400f6ec:	9a04      	ldr	r2, [sp, #16]
3400f6ee:	eba2 060a 	sub.w	r6, r2, sl
3400f6f2:	2200      	movs	r2, #0
3400f6f4:	e721      	b.n	3400f53a <_dtoa_r+0x632>
3400f6f6:	461c      	mov	r4, r3
3400f6f8:	9e04      	ldr	r6, [sp, #16]
3400f6fa:	9d08      	ldr	r5, [sp, #32]
3400f6fc:	e72a      	b.n	3400f554 <_dtoa_r+0x64c>
3400f6fe:	9a01      	ldr	r2, [sp, #4]
3400f700:	9205      	str	r2, [sp, #20]
3400f702:	e752      	b.n	3400f5aa <_dtoa_r+0x6a2>
3400f704:	461a      	mov	r2, r3
3400f706:	9901      	ldr	r1, [sp, #4]
3400f708:	e751      	b.n	3400f5ae <_dtoa_r+0x6a6>
3400f70a:	9b05      	ldr	r3, [sp, #20]
3400f70c:	9301      	str	r3, [sp, #4]
3400f70e:	e752      	b.n	3400f5b6 <_dtoa_r+0x6ae>
3400f710:	2300      	movs	r3, #0
3400f712:	e77b      	b.n	3400f60c <_dtoa_r+0x704>
3400f714:	9b02      	ldr	r3, [sp, #8]
3400f716:	e779      	b.n	3400f60c <_dtoa_r+0x704>
3400f718:	920b      	str	r2, [sp, #44]	@ 0x2c
3400f71a:	e778      	b.n	3400f60e <_dtoa_r+0x706>
3400f71c:	2300      	movs	r3, #0
3400f71e:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f720:	e779      	b.n	3400f616 <_dtoa_r+0x70e>
3400f722:	d093      	beq.n	3400f64c <_dtoa_r+0x744>
3400f724:	321c      	adds	r2, #28
3400f726:	9b04      	ldr	r3, [sp, #16]
3400f728:	4413      	add	r3, r2
3400f72a:	4416      	add	r6, r2
3400f72c:	9304      	str	r3, [sp, #16]
3400f72e:	9b06      	ldr	r3, [sp, #24]
3400f730:	4413      	add	r3, r2
3400f732:	e78a      	b.n	3400f64a <_dtoa_r+0x742>
3400f734:	4602      	mov	r2, r0
3400f736:	e7f5      	b.n	3400f724 <_dtoa_r+0x81c>
3400f738:	f1ba 0f00 	cmp.w	sl, #0
3400f73c:	46d3      	mov	fp, sl
3400f73e:	f8cd 8014 	str.w	r8, [sp, #20]
3400f742:	dc21      	bgt.n	3400f788 <_dtoa_r+0x880>
3400f744:	9b07      	ldr	r3, [sp, #28]
3400f746:	2b02      	cmp	r3, #2
3400f748:	dd1e      	ble.n	3400f788 <_dtoa_r+0x880>
3400f74a:	f1bb 0f00 	cmp.w	fp, #0
3400f74e:	f47f addc 	bne.w	3400f30a <_dtoa_r+0x402>
3400f752:	4621      	mov	r1, r4
3400f754:	465b      	mov	r3, fp
3400f756:	2205      	movs	r2, #5
3400f758:	4648      	mov	r0, r9
3400f75a:	f000 f9df 	bl	3400fb1c <__multadd>
3400f75e:	4601      	mov	r1, r0
3400f760:	4604      	mov	r4, r0
3400f762:	9801      	ldr	r0, [sp, #4]
3400f764:	f000 fbee 	bl	3400ff44 <__mcmp>
3400f768:	2800      	cmp	r0, #0
3400f76a:	f77f adce 	ble.w	3400f30a <_dtoa_r+0x402>
3400f76e:	2331      	movs	r3, #49	@ 0x31
3400f770:	463e      	mov	r6, r7
3400f772:	f806 3b01 	strb.w	r3, [r6], #1
3400f776:	9b05      	ldr	r3, [sp, #20]
3400f778:	3301      	adds	r3, #1
3400f77a:	9305      	str	r3, [sp, #20]
3400f77c:	e5c9      	b.n	3400f312 <_dtoa_r+0x40a>
3400f77e:	4654      	mov	r4, sl
3400f780:	f8cd 8014 	str.w	r8, [sp, #20]
3400f784:	4625      	mov	r5, r4
3400f786:	e7f2      	b.n	3400f76e <_dtoa_r+0x866>
3400f788:	9b08      	ldr	r3, [sp, #32]
3400f78a:	2b00      	cmp	r3, #0
3400f78c:	f000 8102 	beq.w	3400f994 <_dtoa_r+0xa8c>
3400f790:	2e00      	cmp	r6, #0
3400f792:	dd05      	ble.n	3400f7a0 <_dtoa_r+0x898>
3400f794:	4629      	mov	r1, r5
3400f796:	4632      	mov	r2, r6
3400f798:	4648      	mov	r0, r9
3400f79a:	f000 fb67 	bl	3400fe6c <__lshift>
3400f79e:	4605      	mov	r5, r0
3400f7a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400f7a2:	2b00      	cmp	r3, #0
3400f7a4:	d058      	beq.n	3400f858 <_dtoa_r+0x950>
3400f7a6:	6869      	ldr	r1, [r5, #4]
3400f7a8:	4648      	mov	r0, r9
3400f7aa:	f000 f955 	bl	3400fa58 <_Balloc>
3400f7ae:	4606      	mov	r6, r0
3400f7b0:	b928      	cbnz	r0, 3400f7be <_dtoa_r+0x8b6>
3400f7b2:	4b82      	ldr	r3, [pc, #520]	@ (3400f9bc <_dtoa_r+0xab4>)
3400f7b4:	4602      	mov	r2, r0
3400f7b6:	f240 21ef 	movw	r1, #751	@ 0x2ef
3400f7ba:	f7ff bbbe 	b.w	3400ef3a <_dtoa_r+0x32>
3400f7be:	692a      	ldr	r2, [r5, #16]
3400f7c0:	f105 010c 	add.w	r1, r5, #12
3400f7c4:	300c      	adds	r0, #12
3400f7c6:	3202      	adds	r2, #2
3400f7c8:	0092      	lsls	r2, r2, #2
3400f7ca:	f7ff fafa 	bl	3400edc2 <memcpy>
3400f7ce:	2201      	movs	r2, #1
3400f7d0:	4631      	mov	r1, r6
3400f7d2:	4648      	mov	r0, r9
3400f7d4:	f000 fb4a 	bl	3400fe6c <__lshift>
3400f7d8:	1c7b      	adds	r3, r7, #1
3400f7da:	46a8      	mov	r8, r5
3400f7dc:	4605      	mov	r5, r0
3400f7de:	9304      	str	r3, [sp, #16]
3400f7e0:	eb07 030b 	add.w	r3, r7, fp
3400f7e4:	9309      	str	r3, [sp, #36]	@ 0x24
3400f7e6:	9b02      	ldr	r3, [sp, #8]
3400f7e8:	f003 0301 	and.w	r3, r3, #1
3400f7ec:	9308      	str	r3, [sp, #32]
3400f7ee:	9b04      	ldr	r3, [sp, #16]
3400f7f0:	4621      	mov	r1, r4
3400f7f2:	9801      	ldr	r0, [sp, #4]
3400f7f4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3400f7f8:	f7ff faf7 	bl	3400edea <quorem>
3400f7fc:	4641      	mov	r1, r8
3400f7fe:	9002      	str	r0, [sp, #8]
3400f800:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400f804:	9801      	ldr	r0, [sp, #4]
3400f806:	f000 fb9d 	bl	3400ff44 <__mcmp>
3400f80a:	462a      	mov	r2, r5
3400f80c:	9006      	str	r0, [sp, #24]
3400f80e:	4621      	mov	r1, r4
3400f810:	4648      	mov	r0, r9
3400f812:	f000 fbb3 	bl	3400ff7c <__mdiff>
3400f816:	68c2      	ldr	r2, [r0, #12]
3400f818:	4606      	mov	r6, r0
3400f81a:	b9fa      	cbnz	r2, 3400f85c <_dtoa_r+0x954>
3400f81c:	4601      	mov	r1, r0
3400f81e:	9801      	ldr	r0, [sp, #4]
3400f820:	f000 fb90 	bl	3400ff44 <__mcmp>
3400f824:	4602      	mov	r2, r0
3400f826:	4631      	mov	r1, r6
3400f828:	4648      	mov	r0, r9
3400f82a:	920a      	str	r2, [sp, #40]	@ 0x28
3400f82c:	f000 f954 	bl	3400fad8 <_Bfree>
3400f830:	9b07      	ldr	r3, [sp, #28]
3400f832:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400f834:	9e04      	ldr	r6, [sp, #16]
3400f836:	ea42 0103 	orr.w	r1, r2, r3
3400f83a:	9b08      	ldr	r3, [sp, #32]
3400f83c:	4319      	orrs	r1, r3
3400f83e:	d10f      	bne.n	3400f860 <_dtoa_r+0x958>
3400f840:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400f844:	d028      	beq.n	3400f898 <_dtoa_r+0x990>
3400f846:	9b06      	ldr	r3, [sp, #24]
3400f848:	2b00      	cmp	r3, #0
3400f84a:	dd02      	ble.n	3400f852 <_dtoa_r+0x94a>
3400f84c:	9b02      	ldr	r3, [sp, #8]
3400f84e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3400f852:	f88b a000 	strb.w	sl, [fp]
3400f856:	e55e      	b.n	3400f316 <_dtoa_r+0x40e>
3400f858:	4628      	mov	r0, r5
3400f85a:	e7bd      	b.n	3400f7d8 <_dtoa_r+0x8d0>
3400f85c:	2201      	movs	r2, #1
3400f85e:	e7e2      	b.n	3400f826 <_dtoa_r+0x91e>
3400f860:	9b06      	ldr	r3, [sp, #24]
3400f862:	2b00      	cmp	r3, #0
3400f864:	db04      	blt.n	3400f870 <_dtoa_r+0x968>
3400f866:	9907      	ldr	r1, [sp, #28]
3400f868:	430b      	orrs	r3, r1
3400f86a:	9908      	ldr	r1, [sp, #32]
3400f86c:	430b      	orrs	r3, r1
3400f86e:	d120      	bne.n	3400f8b2 <_dtoa_r+0x9aa>
3400f870:	2a00      	cmp	r2, #0
3400f872:	ddee      	ble.n	3400f852 <_dtoa_r+0x94a>
3400f874:	2201      	movs	r2, #1
3400f876:	9901      	ldr	r1, [sp, #4]
3400f878:	4648      	mov	r0, r9
3400f87a:	f000 faf7 	bl	3400fe6c <__lshift>
3400f87e:	4621      	mov	r1, r4
3400f880:	9001      	str	r0, [sp, #4]
3400f882:	f000 fb5f 	bl	3400ff44 <__mcmp>
3400f886:	2800      	cmp	r0, #0
3400f888:	dc03      	bgt.n	3400f892 <_dtoa_r+0x98a>
3400f88a:	d1e2      	bne.n	3400f852 <_dtoa_r+0x94a>
3400f88c:	f01a 0f01 	tst.w	sl, #1
3400f890:	d0df      	beq.n	3400f852 <_dtoa_r+0x94a>
3400f892:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400f896:	d1d9      	bne.n	3400f84c <_dtoa_r+0x944>
3400f898:	2339      	movs	r3, #57	@ 0x39
3400f89a:	f88b 3000 	strb.w	r3, [fp]
3400f89e:	4633      	mov	r3, r6
3400f8a0:	461e      	mov	r6, r3
3400f8a2:	3b01      	subs	r3, #1
3400f8a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3400f8a8:	2a39      	cmp	r2, #57	@ 0x39
3400f8aa:	d052      	beq.n	3400f952 <_dtoa_r+0xa4a>
3400f8ac:	3201      	adds	r2, #1
3400f8ae:	701a      	strb	r2, [r3, #0]
3400f8b0:	e531      	b.n	3400f316 <_dtoa_r+0x40e>
3400f8b2:	2a00      	cmp	r2, #0
3400f8b4:	dd07      	ble.n	3400f8c6 <_dtoa_r+0x9be>
3400f8b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400f8ba:	d0ed      	beq.n	3400f898 <_dtoa_r+0x990>
3400f8bc:	f10a 0301 	add.w	r3, sl, #1
3400f8c0:	f88b 3000 	strb.w	r3, [fp]
3400f8c4:	e527      	b.n	3400f316 <_dtoa_r+0x40e>
3400f8c6:	9b04      	ldr	r3, [sp, #16]
3400f8c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f8ca:	f803 ac01 	strb.w	sl, [r3, #-1]
3400f8ce:	4293      	cmp	r3, r2
3400f8d0:	d029      	beq.n	3400f926 <_dtoa_r+0xa1e>
3400f8d2:	2300      	movs	r3, #0
3400f8d4:	220a      	movs	r2, #10
3400f8d6:	9901      	ldr	r1, [sp, #4]
3400f8d8:	4648      	mov	r0, r9
3400f8da:	f000 f91f 	bl	3400fb1c <__multadd>
3400f8de:	45a8      	cmp	r8, r5
3400f8e0:	9001      	str	r0, [sp, #4]
3400f8e2:	f04f 0300 	mov.w	r3, #0
3400f8e6:	f04f 020a 	mov.w	r2, #10
3400f8ea:	4641      	mov	r1, r8
3400f8ec:	4648      	mov	r0, r9
3400f8ee:	d107      	bne.n	3400f900 <_dtoa_r+0x9f8>
3400f8f0:	f000 f914 	bl	3400fb1c <__multadd>
3400f8f4:	4680      	mov	r8, r0
3400f8f6:	4605      	mov	r5, r0
3400f8f8:	9b04      	ldr	r3, [sp, #16]
3400f8fa:	3301      	adds	r3, #1
3400f8fc:	9304      	str	r3, [sp, #16]
3400f8fe:	e776      	b.n	3400f7ee <_dtoa_r+0x8e6>
3400f900:	f000 f90c 	bl	3400fb1c <__multadd>
3400f904:	4629      	mov	r1, r5
3400f906:	4680      	mov	r8, r0
3400f908:	2300      	movs	r3, #0
3400f90a:	220a      	movs	r2, #10
3400f90c:	4648      	mov	r0, r9
3400f90e:	f000 f905 	bl	3400fb1c <__multadd>
3400f912:	4605      	mov	r5, r0
3400f914:	e7f0      	b.n	3400f8f8 <_dtoa_r+0x9f0>
3400f916:	f1bb 0f00 	cmp.w	fp, #0
3400f91a:	f04f 0800 	mov.w	r8, #0
3400f91e:	bfcc      	ite	gt
3400f920:	465e      	movgt	r6, fp
3400f922:	2601      	movle	r6, #1
3400f924:	443e      	add	r6, r7
3400f926:	2201      	movs	r2, #1
3400f928:	9901      	ldr	r1, [sp, #4]
3400f92a:	4648      	mov	r0, r9
3400f92c:	f000 fa9e 	bl	3400fe6c <__lshift>
3400f930:	4621      	mov	r1, r4
3400f932:	9001      	str	r0, [sp, #4]
3400f934:	f000 fb06 	bl	3400ff44 <__mcmp>
3400f938:	2800      	cmp	r0, #0
3400f93a:	dcb0      	bgt.n	3400f89e <_dtoa_r+0x996>
3400f93c:	d102      	bne.n	3400f944 <_dtoa_r+0xa3c>
3400f93e:	f01a 0f01 	tst.w	sl, #1
3400f942:	d1ac      	bne.n	3400f89e <_dtoa_r+0x996>
3400f944:	4633      	mov	r3, r6
3400f946:	461e      	mov	r6, r3
3400f948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400f94c:	2a30      	cmp	r2, #48	@ 0x30
3400f94e:	d0fa      	beq.n	3400f946 <_dtoa_r+0xa3e>
3400f950:	e4e1      	b.n	3400f316 <_dtoa_r+0x40e>
3400f952:	429f      	cmp	r7, r3
3400f954:	d1a4      	bne.n	3400f8a0 <_dtoa_r+0x998>
3400f956:	9b05      	ldr	r3, [sp, #20]
3400f958:	3301      	adds	r3, #1
3400f95a:	9305      	str	r3, [sp, #20]
3400f95c:	2331      	movs	r3, #49	@ 0x31
3400f95e:	703b      	strb	r3, [r7, #0]
3400f960:	e4d9      	b.n	3400f316 <_dtoa_r+0x40e>
3400f962:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f964:	4f16      	ldr	r7, [pc, #88]	@ (3400f9c0 <_dtoa_r+0xab8>)
3400f966:	b11b      	cbz	r3, 3400f970 <_dtoa_r+0xa68>
3400f968:	f107 0308 	add.w	r3, r7, #8
3400f96c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400f96e:	6013      	str	r3, [r2, #0]
3400f970:	4638      	mov	r0, r7
3400f972:	b011      	add	sp, #68	@ 0x44
3400f974:	ecbd 8b02 	vpop	{d8}
3400f978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400f97c:	9b07      	ldr	r3, [sp, #28]
3400f97e:	2b01      	cmp	r3, #1
3400f980:	f77f ae2c 	ble.w	3400f5dc <_dtoa_r+0x6d4>
3400f984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f986:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f988:	2001      	movs	r0, #1
3400f98a:	e64c      	b.n	3400f626 <_dtoa_r+0x71e>
3400f98c:	f1bb 0f00 	cmp.w	fp, #0
3400f990:	f77f aed8 	ble.w	3400f744 <_dtoa_r+0x83c>
3400f994:	463e      	mov	r6, r7
3400f996:	4621      	mov	r1, r4
3400f998:	9801      	ldr	r0, [sp, #4]
3400f99a:	f7ff fa26 	bl	3400edea <quorem>
3400f99e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400f9a2:	f806 ab01 	strb.w	sl, [r6], #1
3400f9a6:	1bf2      	subs	r2, r6, r7
3400f9a8:	4593      	cmp	fp, r2
3400f9aa:	ddb4      	ble.n	3400f916 <_dtoa_r+0xa0e>
3400f9ac:	2300      	movs	r3, #0
3400f9ae:	220a      	movs	r2, #10
3400f9b0:	9901      	ldr	r1, [sp, #4]
3400f9b2:	4648      	mov	r0, r9
3400f9b4:	f000 f8b2 	bl	3400fb1c <__multadd>
3400f9b8:	9001      	str	r0, [sp, #4]
3400f9ba:	e7ec      	b.n	3400f996 <_dtoa_r+0xa8e>
3400f9bc:	3401205c 	.word	0x3401205c
3400f9c0:	34011fe0 	.word	0x34011fe0

3400f9c4 <_free_r>:
3400f9c4:	b538      	push	{r3, r4, r5, lr}
3400f9c6:	4605      	mov	r5, r0
3400f9c8:	2900      	cmp	r1, #0
3400f9ca:	d041      	beq.n	3400fa50 <_free_r+0x8c>
3400f9cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
3400f9d0:	1f0c      	subs	r4, r1, #4
3400f9d2:	2b00      	cmp	r3, #0
3400f9d4:	bfb8      	it	lt
3400f9d6:	18e4      	addlt	r4, r4, r3
3400f9d8:	f7fe f844 	bl	3400da64 <__malloc_lock>
3400f9dc:	4a1d      	ldr	r2, [pc, #116]	@ (3400fa54 <_free_r+0x90>)
3400f9de:	6813      	ldr	r3, [r2, #0]
3400f9e0:	b933      	cbnz	r3, 3400f9f0 <_free_r+0x2c>
3400f9e2:	6063      	str	r3, [r4, #4]
3400f9e4:	6014      	str	r4, [r2, #0]
3400f9e6:	4628      	mov	r0, r5
3400f9e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400f9ec:	f7fe b840 	b.w	3400da70 <__malloc_unlock>
3400f9f0:	42a3      	cmp	r3, r4
3400f9f2:	d908      	bls.n	3400fa06 <_free_r+0x42>
3400f9f4:	6820      	ldr	r0, [r4, #0]
3400f9f6:	1821      	adds	r1, r4, r0
3400f9f8:	428b      	cmp	r3, r1
3400f9fa:	bf01      	itttt	eq
3400f9fc:	6819      	ldreq	r1, [r3, #0]
3400f9fe:	685b      	ldreq	r3, [r3, #4]
3400fa00:	1809      	addeq	r1, r1, r0
3400fa02:	6021      	streq	r1, [r4, #0]
3400fa04:	e7ed      	b.n	3400f9e2 <_free_r+0x1e>
3400fa06:	461a      	mov	r2, r3
3400fa08:	685b      	ldr	r3, [r3, #4]
3400fa0a:	b10b      	cbz	r3, 3400fa10 <_free_r+0x4c>
3400fa0c:	42a3      	cmp	r3, r4
3400fa0e:	d9fa      	bls.n	3400fa06 <_free_r+0x42>
3400fa10:	6811      	ldr	r1, [r2, #0]
3400fa12:	1850      	adds	r0, r2, r1
3400fa14:	42a0      	cmp	r0, r4
3400fa16:	d10b      	bne.n	3400fa30 <_free_r+0x6c>
3400fa18:	6820      	ldr	r0, [r4, #0]
3400fa1a:	4401      	add	r1, r0
3400fa1c:	1850      	adds	r0, r2, r1
3400fa1e:	6011      	str	r1, [r2, #0]
3400fa20:	4283      	cmp	r3, r0
3400fa22:	d1e0      	bne.n	3400f9e6 <_free_r+0x22>
3400fa24:	6818      	ldr	r0, [r3, #0]
3400fa26:	685b      	ldr	r3, [r3, #4]
3400fa28:	4408      	add	r0, r1
3400fa2a:	6053      	str	r3, [r2, #4]
3400fa2c:	6010      	str	r0, [r2, #0]
3400fa2e:	e7da      	b.n	3400f9e6 <_free_r+0x22>
3400fa30:	d902      	bls.n	3400fa38 <_free_r+0x74>
3400fa32:	230c      	movs	r3, #12
3400fa34:	602b      	str	r3, [r5, #0]
3400fa36:	e7d6      	b.n	3400f9e6 <_free_r+0x22>
3400fa38:	6820      	ldr	r0, [r4, #0]
3400fa3a:	1821      	adds	r1, r4, r0
3400fa3c:	428b      	cmp	r3, r1
3400fa3e:	bf02      	ittt	eq
3400fa40:	6819      	ldreq	r1, [r3, #0]
3400fa42:	685b      	ldreq	r3, [r3, #4]
3400fa44:	1809      	addeq	r1, r1, r0
3400fa46:	6063      	str	r3, [r4, #4]
3400fa48:	bf08      	it	eq
3400fa4a:	6021      	streq	r1, [r4, #0]
3400fa4c:	6054      	str	r4, [r2, #4]
3400fa4e:	e7ca      	b.n	3400f9e6 <_free_r+0x22>
3400fa50:	bd38      	pop	{r3, r4, r5, pc}
3400fa52:	bf00      	nop
3400fa54:	34013294 	.word	0x34013294

3400fa58 <_Balloc>:
3400fa58:	b570      	push	{r4, r5, r6, lr}
3400fa5a:	69c6      	ldr	r6, [r0, #28]
3400fa5c:	4604      	mov	r4, r0
3400fa5e:	460d      	mov	r5, r1
3400fa60:	b976      	cbnz	r6, 3400fa80 <_Balloc+0x28>
3400fa62:	2010      	movs	r0, #16
3400fa64:	f7fd ff54 	bl	3400d910 <malloc>
3400fa68:	4602      	mov	r2, r0
3400fa6a:	61e0      	str	r0, [r4, #28]
3400fa6c:	b920      	cbnz	r0, 3400fa78 <_Balloc+0x20>
3400fa6e:	4b18      	ldr	r3, [pc, #96]	@ (3400fad0 <_Balloc+0x78>)
3400fa70:	216b      	movs	r1, #107	@ 0x6b
3400fa72:	4818      	ldr	r0, [pc, #96]	@ (3400fad4 <_Balloc+0x7c>)
3400fa74:	f7fd ff2e 	bl	3400d8d4 <__assert_func>
3400fa78:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400fa7c:	6006      	str	r6, [r0, #0]
3400fa7e:	60c6      	str	r6, [r0, #12]
3400fa80:	69e6      	ldr	r6, [r4, #28]
3400fa82:	68f3      	ldr	r3, [r6, #12]
3400fa84:	b183      	cbz	r3, 3400faa8 <_Balloc+0x50>
3400fa86:	69e3      	ldr	r3, [r4, #28]
3400fa88:	68db      	ldr	r3, [r3, #12]
3400fa8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3400fa8e:	b9b8      	cbnz	r0, 3400fac0 <_Balloc+0x68>
3400fa90:	2101      	movs	r1, #1
3400fa92:	4620      	mov	r0, r4
3400fa94:	fa01 f605 	lsl.w	r6, r1, r5
3400fa98:	1d72      	adds	r2, r6, #5
3400fa9a:	0092      	lsls	r2, r2, #2
3400fa9c:	f000 fd68 	bl	34010570 <_calloc_r>
3400faa0:	b160      	cbz	r0, 3400fabc <_Balloc+0x64>
3400faa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
3400faa6:	e00e      	b.n	3400fac6 <_Balloc+0x6e>
3400faa8:	2221      	movs	r2, #33	@ 0x21
3400faaa:	2104      	movs	r1, #4
3400faac:	4620      	mov	r0, r4
3400faae:	f000 fd5f 	bl	34010570 <_calloc_r>
3400fab2:	69e3      	ldr	r3, [r4, #28]
3400fab4:	60f0      	str	r0, [r6, #12]
3400fab6:	68db      	ldr	r3, [r3, #12]
3400fab8:	2b00      	cmp	r3, #0
3400faba:	d1e4      	bne.n	3400fa86 <_Balloc+0x2e>
3400fabc:	2000      	movs	r0, #0
3400fabe:	bd70      	pop	{r4, r5, r6, pc}
3400fac0:	6802      	ldr	r2, [r0, #0]
3400fac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3400fac6:	2300      	movs	r3, #0
3400fac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
3400facc:	e7f7      	b.n	3400fabe <_Balloc+0x66>
3400face:	bf00      	nop
3400fad0:	34011fed 	.word	0x34011fed
3400fad4:	3401206d 	.word	0x3401206d

3400fad8 <_Bfree>:
3400fad8:	b570      	push	{r4, r5, r6, lr}
3400fada:	69c6      	ldr	r6, [r0, #28]
3400fadc:	4605      	mov	r5, r0
3400fade:	460c      	mov	r4, r1
3400fae0:	b976      	cbnz	r6, 3400fb00 <_Bfree+0x28>
3400fae2:	2010      	movs	r0, #16
3400fae4:	f7fd ff14 	bl	3400d910 <malloc>
3400fae8:	4602      	mov	r2, r0
3400faea:	61e8      	str	r0, [r5, #28]
3400faec:	b920      	cbnz	r0, 3400faf8 <_Bfree+0x20>
3400faee:	4b09      	ldr	r3, [pc, #36]	@ (3400fb14 <_Bfree+0x3c>)
3400faf0:	218f      	movs	r1, #143	@ 0x8f
3400faf2:	4809      	ldr	r0, [pc, #36]	@ (3400fb18 <_Bfree+0x40>)
3400faf4:	f7fd feee 	bl	3400d8d4 <__assert_func>
3400faf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400fafc:	6006      	str	r6, [r0, #0]
3400fafe:	60c6      	str	r6, [r0, #12]
3400fb00:	b13c      	cbz	r4, 3400fb12 <_Bfree+0x3a>
3400fb02:	69eb      	ldr	r3, [r5, #28]
3400fb04:	6862      	ldr	r2, [r4, #4]
3400fb06:	68db      	ldr	r3, [r3, #12]
3400fb08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3400fb0c:	6021      	str	r1, [r4, #0]
3400fb0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3400fb12:	bd70      	pop	{r4, r5, r6, pc}
3400fb14:	34011fed 	.word	0x34011fed
3400fb18:	3401206d 	.word	0x3401206d

3400fb1c <__multadd>:
3400fb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400fb20:	f101 0c14 	add.w	ip, r1, #20
3400fb24:	4607      	mov	r7, r0
3400fb26:	460c      	mov	r4, r1
3400fb28:	461e      	mov	r6, r3
3400fb2a:	690d      	ldr	r5, [r1, #16]
3400fb2c:	2000      	movs	r0, #0
3400fb2e:	f8dc 3000 	ldr.w	r3, [ip]
3400fb32:	3001      	adds	r0, #1
3400fb34:	b299      	uxth	r1, r3
3400fb36:	4285      	cmp	r5, r0
3400fb38:	fb02 6101 	mla	r1, r2, r1, r6
3400fb3c:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400fb40:	ea4f 4311 	mov.w	r3, r1, lsr #16
3400fb44:	b289      	uxth	r1, r1
3400fb46:	fb02 3306 	mla	r3, r2, r6, r3
3400fb4a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3400fb4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400fb52:	f84c 1b04 	str.w	r1, [ip], #4
3400fb56:	dcea      	bgt.n	3400fb2e <__multadd+0x12>
3400fb58:	b30e      	cbz	r6, 3400fb9e <__multadd+0x82>
3400fb5a:	68a3      	ldr	r3, [r4, #8]
3400fb5c:	42ab      	cmp	r3, r5
3400fb5e:	dc19      	bgt.n	3400fb94 <__multadd+0x78>
3400fb60:	6861      	ldr	r1, [r4, #4]
3400fb62:	4638      	mov	r0, r7
3400fb64:	3101      	adds	r1, #1
3400fb66:	f7ff ff77 	bl	3400fa58 <_Balloc>
3400fb6a:	4680      	mov	r8, r0
3400fb6c:	b928      	cbnz	r0, 3400fb7a <__multadd+0x5e>
3400fb6e:	4602      	mov	r2, r0
3400fb70:	4b0c      	ldr	r3, [pc, #48]	@ (3400fba4 <__multadd+0x88>)
3400fb72:	21ba      	movs	r1, #186	@ 0xba
3400fb74:	480c      	ldr	r0, [pc, #48]	@ (3400fba8 <__multadd+0x8c>)
3400fb76:	f7fd fead 	bl	3400d8d4 <__assert_func>
3400fb7a:	6922      	ldr	r2, [r4, #16]
3400fb7c:	f104 010c 	add.w	r1, r4, #12
3400fb80:	300c      	adds	r0, #12
3400fb82:	3202      	adds	r2, #2
3400fb84:	0092      	lsls	r2, r2, #2
3400fb86:	f7ff f91c 	bl	3400edc2 <memcpy>
3400fb8a:	4621      	mov	r1, r4
3400fb8c:	4644      	mov	r4, r8
3400fb8e:	4638      	mov	r0, r7
3400fb90:	f7ff ffa2 	bl	3400fad8 <_Bfree>
3400fb94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3400fb98:	3501      	adds	r5, #1
3400fb9a:	615e      	str	r6, [r3, #20]
3400fb9c:	6125      	str	r5, [r4, #16]
3400fb9e:	4620      	mov	r0, r4
3400fba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400fba4:	3401205c 	.word	0x3401205c
3400fba8:	3401206d 	.word	0x3401206d

3400fbac <__hi0bits>:
3400fbac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3400fbb0:	4603      	mov	r3, r0
3400fbb2:	bf36      	itet	cc
3400fbb4:	0403      	lslcc	r3, r0, #16
3400fbb6:	2000      	movcs	r0, #0
3400fbb8:	2010      	movcc	r0, #16
3400fbba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400fbbe:	bf3c      	itt	cc
3400fbc0:	021b      	lslcc	r3, r3, #8
3400fbc2:	3008      	addcc	r0, #8
3400fbc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fbc8:	bf3c      	itt	cc
3400fbca:	011b      	lslcc	r3, r3, #4
3400fbcc:	3004      	addcc	r0, #4
3400fbce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400fbd2:	bf3c      	itt	cc
3400fbd4:	009b      	lslcc	r3, r3, #2
3400fbd6:	3002      	addcc	r0, #2
3400fbd8:	2b00      	cmp	r3, #0
3400fbda:	db05      	blt.n	3400fbe8 <__hi0bits+0x3c>
3400fbdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3400fbe0:	f100 0001 	add.w	r0, r0, #1
3400fbe4:	bf08      	it	eq
3400fbe6:	2020      	moveq	r0, #32
3400fbe8:	4770      	bx	lr

3400fbea <__lo0bits>:
3400fbea:	6803      	ldr	r3, [r0, #0]
3400fbec:	4602      	mov	r2, r0
3400fbee:	f013 0007 	ands.w	r0, r3, #7
3400fbf2:	d00b      	beq.n	3400fc0c <__lo0bits+0x22>
3400fbf4:	07d9      	lsls	r1, r3, #31
3400fbf6:	d421      	bmi.n	3400fc3c <__lo0bits+0x52>
3400fbf8:	0798      	lsls	r0, r3, #30
3400fbfa:	bf47      	ittee	mi
3400fbfc:	085b      	lsrmi	r3, r3, #1
3400fbfe:	2001      	movmi	r0, #1
3400fc00:	089b      	lsrpl	r3, r3, #2
3400fc02:	2002      	movpl	r0, #2
3400fc04:	bf4c      	ite	mi
3400fc06:	6013      	strmi	r3, [r2, #0]
3400fc08:	6013      	strpl	r3, [r2, #0]
3400fc0a:	4770      	bx	lr
3400fc0c:	b299      	uxth	r1, r3
3400fc0e:	b909      	cbnz	r1, 3400fc14 <__lo0bits+0x2a>
3400fc10:	0c1b      	lsrs	r3, r3, #16
3400fc12:	2010      	movs	r0, #16
3400fc14:	b2d9      	uxtb	r1, r3
3400fc16:	b909      	cbnz	r1, 3400fc1c <__lo0bits+0x32>
3400fc18:	3008      	adds	r0, #8
3400fc1a:	0a1b      	lsrs	r3, r3, #8
3400fc1c:	0719      	lsls	r1, r3, #28
3400fc1e:	bf04      	itt	eq
3400fc20:	091b      	lsreq	r3, r3, #4
3400fc22:	3004      	addeq	r0, #4
3400fc24:	0799      	lsls	r1, r3, #30
3400fc26:	bf04      	itt	eq
3400fc28:	089b      	lsreq	r3, r3, #2
3400fc2a:	3002      	addeq	r0, #2
3400fc2c:	07d9      	lsls	r1, r3, #31
3400fc2e:	d403      	bmi.n	3400fc38 <__lo0bits+0x4e>
3400fc30:	085b      	lsrs	r3, r3, #1
3400fc32:	f100 0001 	add.w	r0, r0, #1
3400fc36:	d003      	beq.n	3400fc40 <__lo0bits+0x56>
3400fc38:	6013      	str	r3, [r2, #0]
3400fc3a:	4770      	bx	lr
3400fc3c:	2000      	movs	r0, #0
3400fc3e:	4770      	bx	lr
3400fc40:	2020      	movs	r0, #32
3400fc42:	4770      	bx	lr

3400fc44 <__i2b>:
3400fc44:	b510      	push	{r4, lr}
3400fc46:	460c      	mov	r4, r1
3400fc48:	2101      	movs	r1, #1
3400fc4a:	f7ff ff05 	bl	3400fa58 <_Balloc>
3400fc4e:	4602      	mov	r2, r0
3400fc50:	b928      	cbnz	r0, 3400fc5e <__i2b+0x1a>
3400fc52:	4b05      	ldr	r3, [pc, #20]	@ (3400fc68 <__i2b+0x24>)
3400fc54:	f240 1145 	movw	r1, #325	@ 0x145
3400fc58:	4804      	ldr	r0, [pc, #16]	@ (3400fc6c <__i2b+0x28>)
3400fc5a:	f7fd fe3b 	bl	3400d8d4 <__assert_func>
3400fc5e:	2301      	movs	r3, #1
3400fc60:	6144      	str	r4, [r0, #20]
3400fc62:	6103      	str	r3, [r0, #16]
3400fc64:	bd10      	pop	{r4, pc}
3400fc66:	bf00      	nop
3400fc68:	3401205c 	.word	0x3401205c
3400fc6c:	3401206d 	.word	0x3401206d

3400fc70 <__multiply>:
3400fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400fc74:	4617      	mov	r7, r2
3400fc76:	690a      	ldr	r2, [r1, #16]
3400fc78:	4689      	mov	r9, r1
3400fc7a:	b085      	sub	sp, #20
3400fc7c:	693b      	ldr	r3, [r7, #16]
3400fc7e:	429a      	cmp	r2, r3
3400fc80:	bfa2      	ittt	ge
3400fc82:	463b      	movge	r3, r7
3400fc84:	460f      	movge	r7, r1
3400fc86:	4699      	movge	r9, r3
3400fc88:	693d      	ldr	r5, [r7, #16]
3400fc8a:	68bb      	ldr	r3, [r7, #8]
3400fc8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
3400fc90:	6879      	ldr	r1, [r7, #4]
3400fc92:	eb05 060a 	add.w	r6, r5, sl
3400fc96:	42b3      	cmp	r3, r6
3400fc98:	bfb8      	it	lt
3400fc9a:	3101      	addlt	r1, #1
3400fc9c:	f7ff fedc 	bl	3400fa58 <_Balloc>
3400fca0:	b930      	cbnz	r0, 3400fcb0 <__multiply+0x40>
3400fca2:	4602      	mov	r2, r0
3400fca4:	4b42      	ldr	r3, [pc, #264]	@ (3400fdb0 <__multiply+0x140>)
3400fca6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400fcaa:	4842      	ldr	r0, [pc, #264]	@ (3400fdb4 <__multiply+0x144>)
3400fcac:	f7fd fe12 	bl	3400d8d4 <__assert_func>
3400fcb0:	f100 0414 	add.w	r4, r0, #20
3400fcb4:	2200      	movs	r2, #0
3400fcb6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3400fcba:	4623      	mov	r3, r4
3400fcbc:	4573      	cmp	r3, lr
3400fcbe:	d320      	bcc.n	3400fd02 <__multiply+0x92>
3400fcc0:	f107 0814 	add.w	r8, r7, #20
3400fcc4:	f109 0114 	add.w	r1, r9, #20
3400fcc8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3400fccc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3400fcd0:	9302      	str	r3, [sp, #8]
3400fcd2:	1beb      	subs	r3, r5, r7
3400fcd4:	3715      	adds	r7, #21
3400fcd6:	3b15      	subs	r3, #21
3400fcd8:	f023 0303 	bic.w	r3, r3, #3
3400fcdc:	3304      	adds	r3, #4
3400fcde:	42bd      	cmp	r5, r7
3400fce0:	bf38      	it	cc
3400fce2:	2304      	movcc	r3, #4
3400fce4:	9301      	str	r3, [sp, #4]
3400fce6:	9b02      	ldr	r3, [sp, #8]
3400fce8:	9103      	str	r1, [sp, #12]
3400fcea:	428b      	cmp	r3, r1
3400fcec:	d80c      	bhi.n	3400fd08 <__multiply+0x98>
3400fcee:	2e00      	cmp	r6, #0
3400fcf0:	dd03      	ble.n	3400fcfa <__multiply+0x8a>
3400fcf2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3400fcf6:	2b00      	cmp	r3, #0
3400fcf8:	d057      	beq.n	3400fdaa <__multiply+0x13a>
3400fcfa:	6106      	str	r6, [r0, #16]
3400fcfc:	b005      	add	sp, #20
3400fcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400fd02:	f843 2b04 	str.w	r2, [r3], #4
3400fd06:	e7d9      	b.n	3400fcbc <__multiply+0x4c>
3400fd08:	f8b1 a000 	ldrh.w	sl, [r1]
3400fd0c:	f1ba 0f00 	cmp.w	sl, #0
3400fd10:	d021      	beq.n	3400fd56 <__multiply+0xe6>
3400fd12:	46c4      	mov	ip, r8
3400fd14:	46a1      	mov	r9, r4
3400fd16:	2700      	movs	r7, #0
3400fd18:	f85c 2b04 	ldr.w	r2, [ip], #4
3400fd1c:	f8d9 3000 	ldr.w	r3, [r9]
3400fd20:	fa1f fb82 	uxth.w	fp, r2
3400fd24:	4565      	cmp	r5, ip
3400fd26:	b29b      	uxth	r3, r3
3400fd28:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400fd2c:	fb0a 330b 	mla	r3, sl, fp, r3
3400fd30:	443b      	add	r3, r7
3400fd32:	f8d9 7000 	ldr.w	r7, [r9]
3400fd36:	ea4f 4717 	mov.w	r7, r7, lsr #16
3400fd3a:	fb0a 7202 	mla	r2, sl, r2, r7
3400fd3e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3400fd42:	b29b      	uxth	r3, r3
3400fd44:	ea4f 4712 	mov.w	r7, r2, lsr #16
3400fd48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400fd4c:	f849 3b04 	str.w	r3, [r9], #4
3400fd50:	d8e2      	bhi.n	3400fd18 <__multiply+0xa8>
3400fd52:	9b01      	ldr	r3, [sp, #4]
3400fd54:	50e7      	str	r7, [r4, r3]
3400fd56:	9b03      	ldr	r3, [sp, #12]
3400fd58:	3104      	adds	r1, #4
3400fd5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3400fd5e:	f1b9 0f00 	cmp.w	r9, #0
3400fd62:	d020      	beq.n	3400fda6 <__multiply+0x136>
3400fd64:	6823      	ldr	r3, [r4, #0]
3400fd66:	4647      	mov	r7, r8
3400fd68:	46a4      	mov	ip, r4
3400fd6a:	f04f 0a00 	mov.w	sl, #0
3400fd6e:	f8b7 b000 	ldrh.w	fp, [r7]
3400fd72:	b29b      	uxth	r3, r3
3400fd74:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3400fd78:	fb09 220b 	mla	r2, r9, fp, r2
3400fd7c:	4452      	add	r2, sl
3400fd7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400fd82:	f84c 3b04 	str.w	r3, [ip], #4
3400fd86:	f857 3b04 	ldr.w	r3, [r7], #4
3400fd8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400fd8e:	f8bc 3000 	ldrh.w	r3, [ip]
3400fd92:	42bd      	cmp	r5, r7
3400fd94:	fb09 330a 	mla	r3, r9, sl, r3
3400fd98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
3400fd9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400fda0:	d8e5      	bhi.n	3400fd6e <__multiply+0xfe>
3400fda2:	9a01      	ldr	r2, [sp, #4]
3400fda4:	50a3      	str	r3, [r4, r2]
3400fda6:	3404      	adds	r4, #4
3400fda8:	e79d      	b.n	3400fce6 <__multiply+0x76>
3400fdaa:	3e01      	subs	r6, #1
3400fdac:	e79f      	b.n	3400fcee <__multiply+0x7e>
3400fdae:	bf00      	nop
3400fdb0:	3401205c 	.word	0x3401205c
3400fdb4:	3401206d 	.word	0x3401206d

3400fdb8 <__pow5mult>:
3400fdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400fdbc:	4615      	mov	r5, r2
3400fdbe:	f012 0203 	ands.w	r2, r2, #3
3400fdc2:	4607      	mov	r7, r0
3400fdc4:	460e      	mov	r6, r1
3400fdc6:	d007      	beq.n	3400fdd8 <__pow5mult+0x20>
3400fdc8:	3a01      	subs	r2, #1
3400fdca:	4c25      	ldr	r4, [pc, #148]	@ (3400fe60 <__pow5mult+0xa8>)
3400fdcc:	2300      	movs	r3, #0
3400fdce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3400fdd2:	f7ff fea3 	bl	3400fb1c <__multadd>
3400fdd6:	4606      	mov	r6, r0
3400fdd8:	10ad      	asrs	r5, r5, #2
3400fdda:	d03d      	beq.n	3400fe58 <__pow5mult+0xa0>
3400fddc:	69fc      	ldr	r4, [r7, #28]
3400fdde:	b97c      	cbnz	r4, 3400fe00 <__pow5mult+0x48>
3400fde0:	2010      	movs	r0, #16
3400fde2:	f7fd fd95 	bl	3400d910 <malloc>
3400fde6:	4602      	mov	r2, r0
3400fde8:	61f8      	str	r0, [r7, #28]
3400fdea:	b928      	cbnz	r0, 3400fdf8 <__pow5mult+0x40>
3400fdec:	4b1d      	ldr	r3, [pc, #116]	@ (3400fe64 <__pow5mult+0xac>)
3400fdee:	f240 11b3 	movw	r1, #435	@ 0x1b3
3400fdf2:	481d      	ldr	r0, [pc, #116]	@ (3400fe68 <__pow5mult+0xb0>)
3400fdf4:	f7fd fd6e 	bl	3400d8d4 <__assert_func>
3400fdf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
3400fdfc:	6004      	str	r4, [r0, #0]
3400fdfe:	60c4      	str	r4, [r0, #12]
3400fe00:	f8d7 801c 	ldr.w	r8, [r7, #28]
3400fe04:	f8d8 4008 	ldr.w	r4, [r8, #8]
3400fe08:	b94c      	cbnz	r4, 3400fe1e <__pow5mult+0x66>
3400fe0a:	f240 2171 	movw	r1, #625	@ 0x271
3400fe0e:	4638      	mov	r0, r7
3400fe10:	f7ff ff18 	bl	3400fc44 <__i2b>
3400fe14:	2300      	movs	r3, #0
3400fe16:	4604      	mov	r4, r0
3400fe18:	f8c8 0008 	str.w	r0, [r8, #8]
3400fe1c:	6003      	str	r3, [r0, #0]
3400fe1e:	f04f 0900 	mov.w	r9, #0
3400fe22:	07eb      	lsls	r3, r5, #31
3400fe24:	d50a      	bpl.n	3400fe3c <__pow5mult+0x84>
3400fe26:	4631      	mov	r1, r6
3400fe28:	4622      	mov	r2, r4
3400fe2a:	4638      	mov	r0, r7
3400fe2c:	f7ff ff20 	bl	3400fc70 <__multiply>
3400fe30:	4680      	mov	r8, r0
3400fe32:	4631      	mov	r1, r6
3400fe34:	4638      	mov	r0, r7
3400fe36:	4646      	mov	r6, r8
3400fe38:	f7ff fe4e 	bl	3400fad8 <_Bfree>
3400fe3c:	106d      	asrs	r5, r5, #1
3400fe3e:	d00b      	beq.n	3400fe58 <__pow5mult+0xa0>
3400fe40:	6820      	ldr	r0, [r4, #0]
3400fe42:	b938      	cbnz	r0, 3400fe54 <__pow5mult+0x9c>
3400fe44:	4622      	mov	r2, r4
3400fe46:	4621      	mov	r1, r4
3400fe48:	4638      	mov	r0, r7
3400fe4a:	f7ff ff11 	bl	3400fc70 <__multiply>
3400fe4e:	6020      	str	r0, [r4, #0]
3400fe50:	f8c0 9000 	str.w	r9, [r0]
3400fe54:	4604      	mov	r4, r0
3400fe56:	e7e4      	b.n	3400fe22 <__pow5mult+0x6a>
3400fe58:	4630      	mov	r0, r6
3400fe5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400fe5e:	bf00      	nop
3400fe60:	340125e0 	.word	0x340125e0
3400fe64:	34011fed 	.word	0x34011fed
3400fe68:	3401206d 	.word	0x3401206d

3400fe6c <__lshift>:
3400fe6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400fe70:	460c      	mov	r4, r1
3400fe72:	4607      	mov	r7, r0
3400fe74:	4691      	mov	r9, r2
3400fe76:	ea4f 1a62 	mov.w	sl, r2, asr #5
3400fe7a:	6923      	ldr	r3, [r4, #16]
3400fe7c:	6849      	ldr	r1, [r1, #4]
3400fe7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
3400fe82:	68a3      	ldr	r3, [r4, #8]
3400fe84:	f108 0601 	add.w	r6, r8, #1
3400fe88:	42b3      	cmp	r3, r6
3400fe8a:	db0b      	blt.n	3400fea4 <__lshift+0x38>
3400fe8c:	4638      	mov	r0, r7
3400fe8e:	f7ff fde3 	bl	3400fa58 <_Balloc>
3400fe92:	4605      	mov	r5, r0
3400fe94:	b948      	cbnz	r0, 3400feaa <__lshift+0x3e>
3400fe96:	4602      	mov	r2, r0
3400fe98:	4b28      	ldr	r3, [pc, #160]	@ (3400ff3c <__lshift+0xd0>)
3400fe9a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400fe9e:	4828      	ldr	r0, [pc, #160]	@ (3400ff40 <__lshift+0xd4>)
3400fea0:	f7fd fd18 	bl	3400d8d4 <__assert_func>
3400fea4:	3101      	adds	r1, #1
3400fea6:	005b      	lsls	r3, r3, #1
3400fea8:	e7ee      	b.n	3400fe88 <__lshift+0x1c>
3400feaa:	2300      	movs	r3, #0
3400feac:	f100 0114 	add.w	r1, r0, #20
3400feb0:	f100 0210 	add.w	r2, r0, #16
3400feb4:	4618      	mov	r0, r3
3400feb6:	4553      	cmp	r3, sl
3400feb8:	db33      	blt.n	3400ff22 <__lshift+0xb6>
3400feba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3400febe:	f104 0314 	add.w	r3, r4, #20
3400fec2:	6920      	ldr	r0, [r4, #16]
3400fec4:	f019 091f 	ands.w	r9, r9, #31
3400fec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3400fecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3400fed0:	d02b      	beq.n	3400ff2a <__lshift+0xbe>
3400fed2:	f1c9 0e20 	rsb	lr, r9, #32
3400fed6:	468a      	mov	sl, r1
3400fed8:	2200      	movs	r2, #0
3400feda:	6818      	ldr	r0, [r3, #0]
3400fedc:	fa00 f009 	lsl.w	r0, r0, r9
3400fee0:	4310      	orrs	r0, r2
3400fee2:	f84a 0b04 	str.w	r0, [sl], #4
3400fee6:	f853 2b04 	ldr.w	r2, [r3], #4
3400feea:	459c      	cmp	ip, r3
3400feec:	fa22 f20e 	lsr.w	r2, r2, lr
3400fef0:	d8f3      	bhi.n	3400feda <__lshift+0x6e>
3400fef2:	ebac 0304 	sub.w	r3, ip, r4
3400fef6:	f104 0015 	add.w	r0, r4, #21
3400fefa:	3b15      	subs	r3, #21
3400fefc:	f023 0303 	bic.w	r3, r3, #3
3400ff00:	3304      	adds	r3, #4
3400ff02:	4560      	cmp	r0, ip
3400ff04:	bf88      	it	hi
3400ff06:	2304      	movhi	r3, #4
3400ff08:	50ca      	str	r2, [r1, r3]
3400ff0a:	b10a      	cbz	r2, 3400ff10 <__lshift+0xa4>
3400ff0c:	f108 0602 	add.w	r6, r8, #2
3400ff10:	3e01      	subs	r6, #1
3400ff12:	4638      	mov	r0, r7
3400ff14:	4621      	mov	r1, r4
3400ff16:	612e      	str	r6, [r5, #16]
3400ff18:	f7ff fdde 	bl	3400fad8 <_Bfree>
3400ff1c:	4628      	mov	r0, r5
3400ff1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400ff22:	3301      	adds	r3, #1
3400ff24:	f842 0f04 	str.w	r0, [r2, #4]!
3400ff28:	e7c5      	b.n	3400feb6 <__lshift+0x4a>
3400ff2a:	3904      	subs	r1, #4
3400ff2c:	f853 2b04 	ldr.w	r2, [r3], #4
3400ff30:	459c      	cmp	ip, r3
3400ff32:	f841 2f04 	str.w	r2, [r1, #4]!
3400ff36:	d8f9      	bhi.n	3400ff2c <__lshift+0xc0>
3400ff38:	e7ea      	b.n	3400ff10 <__lshift+0xa4>
3400ff3a:	bf00      	nop
3400ff3c:	3401205c 	.word	0x3401205c
3400ff40:	3401206d 	.word	0x3401206d

3400ff44 <__mcmp>:
3400ff44:	4603      	mov	r3, r0
3400ff46:	690a      	ldr	r2, [r1, #16]
3400ff48:	6900      	ldr	r0, [r0, #16]
3400ff4a:	1a80      	subs	r0, r0, r2
3400ff4c:	b530      	push	{r4, r5, lr}
3400ff4e:	d10e      	bne.n	3400ff6e <__mcmp+0x2a>
3400ff50:	3314      	adds	r3, #20
3400ff52:	3114      	adds	r1, #20
3400ff54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3400ff58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3400ff5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3400ff60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3400ff64:	4295      	cmp	r5, r2
3400ff66:	d003      	beq.n	3400ff70 <__mcmp+0x2c>
3400ff68:	d205      	bcs.n	3400ff76 <__mcmp+0x32>
3400ff6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400ff6e:	bd30      	pop	{r4, r5, pc}
3400ff70:	42a3      	cmp	r3, r4
3400ff72:	d3f3      	bcc.n	3400ff5c <__mcmp+0x18>
3400ff74:	e7fb      	b.n	3400ff6e <__mcmp+0x2a>
3400ff76:	2001      	movs	r0, #1
3400ff78:	e7f9      	b.n	3400ff6e <__mcmp+0x2a>
	...

3400ff7c <__mdiff>:
3400ff7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400ff80:	4689      	mov	r9, r1
3400ff82:	4606      	mov	r6, r0
3400ff84:	4611      	mov	r1, r2
3400ff86:	4614      	mov	r4, r2
3400ff88:	4648      	mov	r0, r9
3400ff8a:	f7ff ffdb 	bl	3400ff44 <__mcmp>
3400ff8e:	1e05      	subs	r5, r0, #0
3400ff90:	d112      	bne.n	3400ffb8 <__mdiff+0x3c>
3400ff92:	4629      	mov	r1, r5
3400ff94:	4630      	mov	r0, r6
3400ff96:	f7ff fd5f 	bl	3400fa58 <_Balloc>
3400ff9a:	4602      	mov	r2, r0
3400ff9c:	b928      	cbnz	r0, 3400ffaa <__mdiff+0x2e>
3400ff9e:	4b41      	ldr	r3, [pc, #260]	@ (340100a4 <__mdiff+0x128>)
3400ffa0:	f240 2137 	movw	r1, #567	@ 0x237
3400ffa4:	4840      	ldr	r0, [pc, #256]	@ (340100a8 <__mdiff+0x12c>)
3400ffa6:	f7fd fc95 	bl	3400d8d4 <__assert_func>
3400ffaa:	2301      	movs	r3, #1
3400ffac:	e9c0 3504 	strd	r3, r5, [r0, #16]
3400ffb0:	4610      	mov	r0, r2
3400ffb2:	b003      	add	sp, #12
3400ffb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400ffb8:	bfbc      	itt	lt
3400ffba:	464b      	movlt	r3, r9
3400ffbc:	46a1      	movlt	r9, r4
3400ffbe:	4630      	mov	r0, r6
3400ffc0:	bfb8      	it	lt
3400ffc2:	2501      	movlt	r5, #1
3400ffc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
3400ffc8:	bfb4      	ite	lt
3400ffca:	461c      	movlt	r4, r3
3400ffcc:	2500      	movge	r5, #0
3400ffce:	f7ff fd43 	bl	3400fa58 <_Balloc>
3400ffd2:	4602      	mov	r2, r0
3400ffd4:	b918      	cbnz	r0, 3400ffde <__mdiff+0x62>
3400ffd6:	4b33      	ldr	r3, [pc, #204]	@ (340100a4 <__mdiff+0x128>)
3400ffd8:	f240 2145 	movw	r1, #581	@ 0x245
3400ffdc:	e7e2      	b.n	3400ffa4 <__mdiff+0x28>
3400ffde:	f8d9 7010 	ldr.w	r7, [r9, #16]
3400ffe2:	f104 0e14 	add.w	lr, r4, #20
3400ffe6:	6926      	ldr	r6, [r4, #16]
3400ffe8:	f100 0b14 	add.w	fp, r0, #20
3400ffec:	60c5      	str	r5, [r0, #12]
3400ffee:	f109 0514 	add.w	r5, r9, #20
3400fff2:	f109 0310 	add.w	r3, r9, #16
3400fff6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3400fffa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3400fffe:	46d9      	mov	r9, fp
34010000:	f04f 0c00 	mov.w	ip, #0
34010004:	9301      	str	r3, [sp, #4]
34010006:	9b01      	ldr	r3, [sp, #4]
34010008:	f85e 0b04 	ldr.w	r0, [lr], #4
3401000c:	f853 af04 	ldr.w	sl, [r3, #4]!
34010010:	4576      	cmp	r6, lr
34010012:	9301      	str	r3, [sp, #4]
34010014:	fa1f f38a 	uxth.w	r3, sl
34010018:	4619      	mov	r1, r3
3401001a:	b283      	uxth	r3, r0
3401001c:	ea4f 4010 	mov.w	r0, r0, lsr #16
34010020:	eba1 0303 	sub.w	r3, r1, r3
34010024:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
34010028:	4463      	add	r3, ip
3401002a:	eb00 4023 	add.w	r0, r0, r3, asr #16
3401002e:	b29b      	uxth	r3, r3
34010030:	ea4f 4c20 	mov.w	ip, r0, asr #16
34010034:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34010038:	f849 3b04 	str.w	r3, [r9], #4
3401003c:	d8e3      	bhi.n	34010006 <__mdiff+0x8a>
3401003e:	1b33      	subs	r3, r6, r4
34010040:	3415      	adds	r4, #21
34010042:	3b15      	subs	r3, #21
34010044:	f023 0303 	bic.w	r3, r3, #3
34010048:	3304      	adds	r3, #4
3401004a:	42a6      	cmp	r6, r4
3401004c:	bf38      	it	cc
3401004e:	2304      	movcc	r3, #4
34010050:	441d      	add	r5, r3
34010052:	445b      	add	r3, fp
34010054:	462c      	mov	r4, r5
34010056:	461e      	mov	r6, r3
34010058:	4544      	cmp	r4, r8
3401005a:	d30e      	bcc.n	3401007a <__mdiff+0xfe>
3401005c:	f108 0103 	add.w	r1, r8, #3
34010060:	1b49      	subs	r1, r1, r5
34010062:	3d03      	subs	r5, #3
34010064:	f021 0103 	bic.w	r1, r1, #3
34010068:	45a8      	cmp	r8, r5
3401006a:	bf38      	it	cc
3401006c:	2100      	movcc	r1, #0
3401006e:	440b      	add	r3, r1
34010070:	f853 1d04 	ldr.w	r1, [r3, #-4]!
34010074:	b199      	cbz	r1, 3401009e <__mdiff+0x122>
34010076:	6117      	str	r7, [r2, #16]
34010078:	e79a      	b.n	3400ffb0 <__mdiff+0x34>
3401007a:	f854 1b04 	ldr.w	r1, [r4], #4
3401007e:	46e6      	mov	lr, ip
34010080:	fa1f fc81 	uxth.w	ip, r1
34010084:	0c08      	lsrs	r0, r1, #16
34010086:	4471      	add	r1, lr
34010088:	44f4      	add	ip, lr
3401008a:	b289      	uxth	r1, r1
3401008c:	eb00 402c 	add.w	r0, r0, ip, asr #16
34010090:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
34010094:	ea4f 4c20 	mov.w	ip, r0, asr #16
34010098:	f846 1b04 	str.w	r1, [r6], #4
3401009c:	e7dc      	b.n	34010058 <__mdiff+0xdc>
3401009e:	3f01      	subs	r7, #1
340100a0:	e7e6      	b.n	34010070 <__mdiff+0xf4>
340100a2:	bf00      	nop
340100a4:	3401205c 	.word	0x3401205c
340100a8:	3401206d 	.word	0x3401206d

340100ac <__d2b>:
340100ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
340100b0:	460f      	mov	r7, r1
340100b2:	2101      	movs	r1, #1
340100b4:	4616      	mov	r6, r2
340100b6:	ec59 8b10 	vmov	r8, r9, d0
340100ba:	f7ff fccd 	bl	3400fa58 <_Balloc>
340100be:	4604      	mov	r4, r0
340100c0:	b930      	cbnz	r0, 340100d0 <__d2b+0x24>
340100c2:	4602      	mov	r2, r0
340100c4:	4b23      	ldr	r3, [pc, #140]	@ (34010154 <__d2b+0xa8>)
340100c6:	f240 310f 	movw	r1, #783	@ 0x30f
340100ca:	4823      	ldr	r0, [pc, #140]	@ (34010158 <__d2b+0xac>)
340100cc:	f7fd fc02 	bl	3400d8d4 <__assert_func>
340100d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
340100d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
340100d8:	b10d      	cbz	r5, 340100de <__d2b+0x32>
340100da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
340100de:	9301      	str	r3, [sp, #4]
340100e0:	f1b8 0300 	subs.w	r3, r8, #0
340100e4:	d023      	beq.n	3401012e <__d2b+0x82>
340100e6:	4668      	mov	r0, sp
340100e8:	9300      	str	r3, [sp, #0]
340100ea:	f7ff fd7e 	bl	3400fbea <__lo0bits>
340100ee:	e9dd 1200 	ldrd	r1, r2, [sp]
340100f2:	b1d0      	cbz	r0, 3401012a <__d2b+0x7e>
340100f4:	f1c0 0320 	rsb	r3, r0, #32
340100f8:	fa02 f303 	lsl.w	r3, r2, r3
340100fc:	40c2      	lsrs	r2, r0
340100fe:	430b      	orrs	r3, r1
34010100:	9201      	str	r2, [sp, #4]
34010102:	6163      	str	r3, [r4, #20]
34010104:	9b01      	ldr	r3, [sp, #4]
34010106:	2b00      	cmp	r3, #0
34010108:	61a3      	str	r3, [r4, #24]
3401010a:	bf0c      	ite	eq
3401010c:	2201      	moveq	r2, #1
3401010e:	2202      	movne	r2, #2
34010110:	6122      	str	r2, [r4, #16]
34010112:	b1a5      	cbz	r5, 3401013e <__d2b+0x92>
34010114:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
34010118:	4405      	add	r5, r0
3401011a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3401011e:	603d      	str	r5, [r7, #0]
34010120:	6030      	str	r0, [r6, #0]
34010122:	4620      	mov	r0, r4
34010124:	b003      	add	sp, #12
34010126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3401012a:	6161      	str	r1, [r4, #20]
3401012c:	e7ea      	b.n	34010104 <__d2b+0x58>
3401012e:	a801      	add	r0, sp, #4
34010130:	f7ff fd5b 	bl	3400fbea <__lo0bits>
34010134:	9b01      	ldr	r3, [sp, #4]
34010136:	3020      	adds	r0, #32
34010138:	2201      	movs	r2, #1
3401013a:	6163      	str	r3, [r4, #20]
3401013c:	e7e8      	b.n	34010110 <__d2b+0x64>
3401013e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
34010142:	eb04 0382 	add.w	r3, r4, r2, lsl #2
34010146:	6038      	str	r0, [r7, #0]
34010148:	6918      	ldr	r0, [r3, #16]
3401014a:	f7ff fd2f 	bl	3400fbac <__hi0bits>
3401014e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
34010152:	e7e5      	b.n	34010120 <__d2b+0x74>
34010154:	3401205c 	.word	0x3401205c
34010158:	3401206d 	.word	0x3401206d

3401015c <__sfputc_r>:
3401015c:	6893      	ldr	r3, [r2, #8]
3401015e:	3b01      	subs	r3, #1
34010160:	2b00      	cmp	r3, #0
34010162:	b410      	push	{r4}
34010164:	6093      	str	r3, [r2, #8]
34010166:	da08      	bge.n	3401017a <__sfputc_r+0x1e>
34010168:	6994      	ldr	r4, [r2, #24]
3401016a:	42a3      	cmp	r3, r4
3401016c:	db01      	blt.n	34010172 <__sfputc_r+0x16>
3401016e:	290a      	cmp	r1, #10
34010170:	d103      	bne.n	3401017a <__sfputc_r+0x1e>
34010172:	f85d 4b04 	ldr.w	r4, [sp], #4
34010176:	f7fe bb00 	b.w	3400e77a <__swbuf_r>
3401017a:	6813      	ldr	r3, [r2, #0]
3401017c:	1c58      	adds	r0, r3, #1
3401017e:	6010      	str	r0, [r2, #0]
34010180:	4608      	mov	r0, r1
34010182:	7019      	strb	r1, [r3, #0]
34010184:	f85d 4b04 	ldr.w	r4, [sp], #4
34010188:	4770      	bx	lr

3401018a <__sfputs_r>:
3401018a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401018c:	4606      	mov	r6, r0
3401018e:	460f      	mov	r7, r1
34010190:	4614      	mov	r4, r2
34010192:	18d5      	adds	r5, r2, r3
34010194:	42ac      	cmp	r4, r5
34010196:	d101      	bne.n	3401019c <__sfputs_r+0x12>
34010198:	2000      	movs	r0, #0
3401019a:	e007      	b.n	340101ac <__sfputs_r+0x22>
3401019c:	463a      	mov	r2, r7
3401019e:	f814 1b01 	ldrb.w	r1, [r4], #1
340101a2:	4630      	mov	r0, r6
340101a4:	f7ff ffda 	bl	3401015c <__sfputc_r>
340101a8:	1c43      	adds	r3, r0, #1
340101aa:	d1f3      	bne.n	34010194 <__sfputs_r+0xa>
340101ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

340101b0 <_vfiprintf_r>:
340101b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340101b4:	460d      	mov	r5, r1
340101b6:	b09d      	sub	sp, #116	@ 0x74
340101b8:	4614      	mov	r4, r2
340101ba:	4698      	mov	r8, r3
340101bc:	4606      	mov	r6, r0
340101be:	b118      	cbz	r0, 340101c8 <_vfiprintf_r+0x18>
340101c0:	6a03      	ldr	r3, [r0, #32]
340101c2:	b90b      	cbnz	r3, 340101c8 <_vfiprintf_r+0x18>
340101c4:	f7fe f9de 	bl	3400e584 <__sinit>
340101c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
340101ca:	07d9      	lsls	r1, r3, #31
340101cc:	d405      	bmi.n	340101da <_vfiprintf_r+0x2a>
340101ce:	89ab      	ldrh	r3, [r5, #12]
340101d0:	059a      	lsls	r2, r3, #22
340101d2:	d402      	bmi.n	340101da <_vfiprintf_r+0x2a>
340101d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
340101d6:	f7fe fde4 	bl	3400eda2 <__retarget_lock_acquire_recursive>
340101da:	89ab      	ldrh	r3, [r5, #12]
340101dc:	071b      	lsls	r3, r3, #28
340101de:	d501      	bpl.n	340101e4 <_vfiprintf_r+0x34>
340101e0:	692b      	ldr	r3, [r5, #16]
340101e2:	b99b      	cbnz	r3, 3401020c <_vfiprintf_r+0x5c>
340101e4:	4629      	mov	r1, r5
340101e6:	4630      	mov	r0, r6
340101e8:	f7fe fb06 	bl	3400e7f8 <__swsetup_r>
340101ec:	b170      	cbz	r0, 3401020c <_vfiprintf_r+0x5c>
340101ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
340101f0:	07dc      	lsls	r4, r3, #31
340101f2:	d504      	bpl.n	340101fe <_vfiprintf_r+0x4e>
340101f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340101f8:	b01d      	add	sp, #116	@ 0x74
340101fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
340101fe:	89ab      	ldrh	r3, [r5, #12]
34010200:	0598      	lsls	r0, r3, #22
34010202:	d4f7      	bmi.n	340101f4 <_vfiprintf_r+0x44>
34010204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34010206:	f7fe fdcd 	bl	3400eda4 <__retarget_lock_release_recursive>
3401020a:	e7f3      	b.n	340101f4 <_vfiprintf_r+0x44>
3401020c:	2300      	movs	r3, #0
3401020e:	f8cd 800c 	str.w	r8, [sp, #12]
34010212:	f04f 0901 	mov.w	r9, #1
34010216:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 340103cc <_vfiprintf_r+0x21c>
3401021a:	9309      	str	r3, [sp, #36]	@ 0x24
3401021c:	2320      	movs	r3, #32
3401021e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
34010222:	2330      	movs	r3, #48	@ 0x30
34010224:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
34010228:	4623      	mov	r3, r4
3401022a:	469a      	mov	sl, r3
3401022c:	f813 2b01 	ldrb.w	r2, [r3], #1
34010230:	b10a      	cbz	r2, 34010236 <_vfiprintf_r+0x86>
34010232:	2a25      	cmp	r2, #37	@ 0x25
34010234:	d1f9      	bne.n	3401022a <_vfiprintf_r+0x7a>
34010236:	ebba 0b04 	subs.w	fp, sl, r4
3401023a:	d00b      	beq.n	34010254 <_vfiprintf_r+0xa4>
3401023c:	465b      	mov	r3, fp
3401023e:	4622      	mov	r2, r4
34010240:	4629      	mov	r1, r5
34010242:	4630      	mov	r0, r6
34010244:	f7ff ffa1 	bl	3401018a <__sfputs_r>
34010248:	3001      	adds	r0, #1
3401024a:	f000 80a7 	beq.w	3401039c <_vfiprintf_r+0x1ec>
3401024e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34010250:	445a      	add	r2, fp
34010252:	9209      	str	r2, [sp, #36]	@ 0x24
34010254:	f89a 3000 	ldrb.w	r3, [sl]
34010258:	2b00      	cmp	r3, #0
3401025a:	f000 809f 	beq.w	3401039c <_vfiprintf_r+0x1ec>
3401025e:	2300      	movs	r3, #0
34010260:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34010264:	f10a 0a01 	add.w	sl, sl, #1
34010268:	9304      	str	r3, [sp, #16]
3401026a:	9307      	str	r3, [sp, #28]
3401026c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
34010270:	931a      	str	r3, [sp, #104]	@ 0x68
34010272:	e9cd 2305 	strd	r2, r3, [sp, #20]
34010276:	4654      	mov	r4, sl
34010278:	2205      	movs	r2, #5
3401027a:	4854      	ldr	r0, [pc, #336]	@ (340103cc <_vfiprintf_r+0x21c>)
3401027c:	f814 1b01 	ldrb.w	r1, [r4], #1
34010280:	f7fe fd91 	bl	3400eda6 <memchr>
34010284:	9a04      	ldr	r2, [sp, #16]
34010286:	b9d8      	cbnz	r0, 340102c0 <_vfiprintf_r+0x110>
34010288:	06d1      	lsls	r1, r2, #27
3401028a:	bf44      	itt	mi
3401028c:	2320      	movmi	r3, #32
3401028e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34010292:	0713      	lsls	r3, r2, #28
34010294:	bf44      	itt	mi
34010296:	232b      	movmi	r3, #43	@ 0x2b
34010298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401029c:	f89a 3000 	ldrb.w	r3, [sl]
340102a0:	2b2a      	cmp	r3, #42	@ 0x2a
340102a2:	d015      	beq.n	340102d0 <_vfiprintf_r+0x120>
340102a4:	9a07      	ldr	r2, [sp, #28]
340102a6:	4654      	mov	r4, sl
340102a8:	2000      	movs	r0, #0
340102aa:	f04f 0c0a 	mov.w	ip, #10
340102ae:	4621      	mov	r1, r4
340102b0:	f811 3b01 	ldrb.w	r3, [r1], #1
340102b4:	3b30      	subs	r3, #48	@ 0x30
340102b6:	2b09      	cmp	r3, #9
340102b8:	d94b      	bls.n	34010352 <_vfiprintf_r+0x1a2>
340102ba:	b1b0      	cbz	r0, 340102ea <_vfiprintf_r+0x13a>
340102bc:	9207      	str	r2, [sp, #28]
340102be:	e014      	b.n	340102ea <_vfiprintf_r+0x13a>
340102c0:	eba0 0308 	sub.w	r3, r0, r8
340102c4:	46a2      	mov	sl, r4
340102c6:	fa09 f303 	lsl.w	r3, r9, r3
340102ca:	4313      	orrs	r3, r2
340102cc:	9304      	str	r3, [sp, #16]
340102ce:	e7d2      	b.n	34010276 <_vfiprintf_r+0xc6>
340102d0:	9b03      	ldr	r3, [sp, #12]
340102d2:	1d19      	adds	r1, r3, #4
340102d4:	681b      	ldr	r3, [r3, #0]
340102d6:	2b00      	cmp	r3, #0
340102d8:	9103      	str	r1, [sp, #12]
340102da:	bfbb      	ittet	lt
340102dc:	425b      	neglt	r3, r3
340102de:	f042 0202 	orrlt.w	r2, r2, #2
340102e2:	9307      	strge	r3, [sp, #28]
340102e4:	9307      	strlt	r3, [sp, #28]
340102e6:	bfb8      	it	lt
340102e8:	9204      	strlt	r2, [sp, #16]
340102ea:	7823      	ldrb	r3, [r4, #0]
340102ec:	2b2e      	cmp	r3, #46	@ 0x2e
340102ee:	d10a      	bne.n	34010306 <_vfiprintf_r+0x156>
340102f0:	7863      	ldrb	r3, [r4, #1]
340102f2:	2b2a      	cmp	r3, #42	@ 0x2a
340102f4:	d132      	bne.n	3401035c <_vfiprintf_r+0x1ac>
340102f6:	9b03      	ldr	r3, [sp, #12]
340102f8:	3402      	adds	r4, #2
340102fa:	1d1a      	adds	r2, r3, #4
340102fc:	681b      	ldr	r3, [r3, #0]
340102fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
34010302:	9203      	str	r2, [sp, #12]
34010304:	9305      	str	r3, [sp, #20]
34010306:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 340103dc <_vfiprintf_r+0x22c>
3401030a:	2203      	movs	r2, #3
3401030c:	7821      	ldrb	r1, [r4, #0]
3401030e:	4650      	mov	r0, sl
34010310:	f7fe fd49 	bl	3400eda6 <memchr>
34010314:	b138      	cbz	r0, 34010326 <_vfiprintf_r+0x176>
34010316:	eba0 000a 	sub.w	r0, r0, sl
3401031a:	2240      	movs	r2, #64	@ 0x40
3401031c:	9b04      	ldr	r3, [sp, #16]
3401031e:	3401      	adds	r4, #1
34010320:	4082      	lsls	r2, r0
34010322:	4313      	orrs	r3, r2
34010324:	9304      	str	r3, [sp, #16]
34010326:	f814 1b01 	ldrb.w	r1, [r4], #1
3401032a:	2206      	movs	r2, #6
3401032c:	4828      	ldr	r0, [pc, #160]	@ (340103d0 <_vfiprintf_r+0x220>)
3401032e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
34010332:	f7fe fd38 	bl	3400eda6 <memchr>
34010336:	2800      	cmp	r0, #0
34010338:	d03f      	beq.n	340103ba <_vfiprintf_r+0x20a>
3401033a:	4b26      	ldr	r3, [pc, #152]	@ (340103d4 <_vfiprintf_r+0x224>)
3401033c:	bb1b      	cbnz	r3, 34010386 <_vfiprintf_r+0x1d6>
3401033e:	9b03      	ldr	r3, [sp, #12]
34010340:	3307      	adds	r3, #7
34010342:	f023 0307 	bic.w	r3, r3, #7
34010346:	3308      	adds	r3, #8
34010348:	9303      	str	r3, [sp, #12]
3401034a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401034c:	443b      	add	r3, r7
3401034e:	9309      	str	r3, [sp, #36]	@ 0x24
34010350:	e76a      	b.n	34010228 <_vfiprintf_r+0x78>
34010352:	fb0c 3202 	mla	r2, ip, r2, r3
34010356:	460c      	mov	r4, r1
34010358:	2001      	movs	r0, #1
3401035a:	e7a8      	b.n	340102ae <_vfiprintf_r+0xfe>
3401035c:	2300      	movs	r3, #0
3401035e:	3401      	adds	r4, #1
34010360:	f04f 0c0a 	mov.w	ip, #10
34010364:	4619      	mov	r1, r3
34010366:	9305      	str	r3, [sp, #20]
34010368:	4620      	mov	r0, r4
3401036a:	f810 2b01 	ldrb.w	r2, [r0], #1
3401036e:	3a30      	subs	r2, #48	@ 0x30
34010370:	2a09      	cmp	r2, #9
34010372:	d903      	bls.n	3401037c <_vfiprintf_r+0x1cc>
34010374:	2b00      	cmp	r3, #0
34010376:	d0c6      	beq.n	34010306 <_vfiprintf_r+0x156>
34010378:	9105      	str	r1, [sp, #20]
3401037a:	e7c4      	b.n	34010306 <_vfiprintf_r+0x156>
3401037c:	fb0c 2101 	mla	r1, ip, r1, r2
34010380:	4604      	mov	r4, r0
34010382:	2301      	movs	r3, #1
34010384:	e7f0      	b.n	34010368 <_vfiprintf_r+0x1b8>
34010386:	ab03      	add	r3, sp, #12
34010388:	462a      	mov	r2, r5
3401038a:	a904      	add	r1, sp, #16
3401038c:	4630      	mov	r0, r6
3401038e:	9300      	str	r3, [sp, #0]
34010390:	4b11      	ldr	r3, [pc, #68]	@ (340103d8 <_vfiprintf_r+0x228>)
34010392:	f7fd fc01 	bl	3400db98 <_printf_float>
34010396:	4607      	mov	r7, r0
34010398:	1c78      	adds	r0, r7, #1
3401039a:	d1d6      	bne.n	3401034a <_vfiprintf_r+0x19a>
3401039c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401039e:	07d9      	lsls	r1, r3, #31
340103a0:	d405      	bmi.n	340103ae <_vfiprintf_r+0x1fe>
340103a2:	89ab      	ldrh	r3, [r5, #12]
340103a4:	059a      	lsls	r2, r3, #22
340103a6:	d402      	bmi.n	340103ae <_vfiprintf_r+0x1fe>
340103a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
340103aa:	f7fe fcfb 	bl	3400eda4 <__retarget_lock_release_recursive>
340103ae:	89ab      	ldrh	r3, [r5, #12]
340103b0:	065b      	lsls	r3, r3, #25
340103b2:	f53f af1f 	bmi.w	340101f4 <_vfiprintf_r+0x44>
340103b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
340103b8:	e71e      	b.n	340101f8 <_vfiprintf_r+0x48>
340103ba:	ab03      	add	r3, sp, #12
340103bc:	462a      	mov	r2, r5
340103be:	a904      	add	r1, sp, #16
340103c0:	4630      	mov	r0, r6
340103c2:	9300      	str	r3, [sp, #0]
340103c4:	4b04      	ldr	r3, [pc, #16]	@ (340103d8 <_vfiprintf_r+0x228>)
340103c6:	f7fd fe73 	bl	3400e0b0 <_printf_i>
340103ca:	e7e4      	b.n	34010396 <_vfiprintf_r+0x1e6>
340103cc:	340120c6 	.word	0x340120c6
340103d0:	340120d0 	.word	0x340120d0
340103d4:	3400db99 	.word	0x3400db99
340103d8:	3401018b 	.word	0x3401018b
340103dc:	340120cc 	.word	0x340120cc

340103e0 <__swhatbuf_r>:
340103e0:	b570      	push	{r4, r5, r6, lr}
340103e2:	460c      	mov	r4, r1
340103e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
340103e8:	b096      	sub	sp, #88	@ 0x58
340103ea:	4615      	mov	r5, r2
340103ec:	2900      	cmp	r1, #0
340103ee:	461e      	mov	r6, r3
340103f0:	da0c      	bge.n	3401040c <__swhatbuf_r+0x2c>
340103f2:	89a3      	ldrh	r3, [r4, #12]
340103f4:	2100      	movs	r1, #0
340103f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
340103fa:	bf14      	ite	ne
340103fc:	2340      	movne	r3, #64	@ 0x40
340103fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
34010402:	2000      	movs	r0, #0
34010404:	6031      	str	r1, [r6, #0]
34010406:	602b      	str	r3, [r5, #0]
34010408:	b016      	add	sp, #88	@ 0x58
3401040a:	bd70      	pop	{r4, r5, r6, pc}
3401040c:	466a      	mov	r2, sp
3401040e:	f000 f879 	bl	34010504 <_fstat_r>
34010412:	2800      	cmp	r0, #0
34010414:	dbed      	blt.n	340103f2 <__swhatbuf_r+0x12>
34010416:	9901      	ldr	r1, [sp, #4]
34010418:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3401041c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
34010420:	4259      	negs	r1, r3
34010422:	4159      	adcs	r1, r3
34010424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34010428:	e7eb      	b.n	34010402 <__swhatbuf_r+0x22>

3401042a <__smakebuf_r>:
3401042a:	898b      	ldrh	r3, [r1, #12]
3401042c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401042e:	079d      	lsls	r5, r3, #30
34010430:	4606      	mov	r6, r0
34010432:	460c      	mov	r4, r1
34010434:	d507      	bpl.n	34010446 <__smakebuf_r+0x1c>
34010436:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3401043a:	6023      	str	r3, [r4, #0]
3401043c:	6123      	str	r3, [r4, #16]
3401043e:	2301      	movs	r3, #1
34010440:	6163      	str	r3, [r4, #20]
34010442:	b003      	add	sp, #12
34010444:	bdf0      	pop	{r4, r5, r6, r7, pc}
34010446:	ab01      	add	r3, sp, #4
34010448:	466a      	mov	r2, sp
3401044a:	f7ff ffc9 	bl	340103e0 <__swhatbuf_r>
3401044e:	9f00      	ldr	r7, [sp, #0]
34010450:	4605      	mov	r5, r0
34010452:	4630      	mov	r0, r6
34010454:	4639      	mov	r1, r7
34010456:	f7fd fa85 	bl	3400d964 <_malloc_r>
3401045a:	b948      	cbnz	r0, 34010470 <__smakebuf_r+0x46>
3401045c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34010460:	059a      	lsls	r2, r3, #22
34010462:	d4ee      	bmi.n	34010442 <__smakebuf_r+0x18>
34010464:	f023 0303 	bic.w	r3, r3, #3
34010468:	f043 0302 	orr.w	r3, r3, #2
3401046c:	81a3      	strh	r3, [r4, #12]
3401046e:	e7e2      	b.n	34010436 <__smakebuf_r+0xc>
34010470:	89a3      	ldrh	r3, [r4, #12]
34010472:	6020      	str	r0, [r4, #0]
34010474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34010478:	81a3      	strh	r3, [r4, #12]
3401047a:	9b01      	ldr	r3, [sp, #4]
3401047c:	e9c4 0704 	strd	r0, r7, [r4, #16]
34010480:	b15b      	cbz	r3, 3401049a <__smakebuf_r+0x70>
34010482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34010486:	4630      	mov	r0, r6
34010488:	f000 f84e 	bl	34010528 <_isatty_r>
3401048c:	b128      	cbz	r0, 3401049a <__smakebuf_r+0x70>
3401048e:	89a3      	ldrh	r3, [r4, #12]
34010490:	f023 0303 	bic.w	r3, r3, #3
34010494:	f043 0301 	orr.w	r3, r3, #1
34010498:	81a3      	strh	r3, [r4, #12]
3401049a:	89a3      	ldrh	r3, [r4, #12]
3401049c:	431d      	orrs	r5, r3
3401049e:	81a5      	strh	r5, [r4, #12]
340104a0:	e7cf      	b.n	34010442 <__smakebuf_r+0x18>

340104a2 <_raise_r>:
340104a2:	291f      	cmp	r1, #31
340104a4:	b538      	push	{r3, r4, r5, lr}
340104a6:	4605      	mov	r5, r0
340104a8:	460c      	mov	r4, r1
340104aa:	d904      	bls.n	340104b6 <_raise_r+0x14>
340104ac:	2316      	movs	r3, #22
340104ae:	6003      	str	r3, [r0, #0]
340104b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340104b4:	bd38      	pop	{r3, r4, r5, pc}
340104b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
340104b8:	b112      	cbz	r2, 340104c0 <_raise_r+0x1e>
340104ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
340104be:	b94b      	cbnz	r3, 340104d4 <_raise_r+0x32>
340104c0:	4628      	mov	r0, r5
340104c2:	f000 f853 	bl	3401056c <_getpid_r>
340104c6:	4622      	mov	r2, r4
340104c8:	4601      	mov	r1, r0
340104ca:	4628      	mov	r0, r5
340104cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
340104d0:	f000 b83a 	b.w	34010548 <_kill_r>
340104d4:	2b01      	cmp	r3, #1
340104d6:	d00a      	beq.n	340104ee <_raise_r+0x4c>
340104d8:	1c59      	adds	r1, r3, #1
340104da:	d103      	bne.n	340104e4 <_raise_r+0x42>
340104dc:	2316      	movs	r3, #22
340104de:	6003      	str	r3, [r0, #0]
340104e0:	2001      	movs	r0, #1
340104e2:	e7e7      	b.n	340104b4 <_raise_r+0x12>
340104e4:	2100      	movs	r1, #0
340104e6:	4620      	mov	r0, r4
340104e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
340104ec:	4798      	blx	r3
340104ee:	2000      	movs	r0, #0
340104f0:	e7e0      	b.n	340104b4 <_raise_r+0x12>
	...

340104f4 <raise>:
340104f4:	4b02      	ldr	r3, [pc, #8]	@ (34010500 <raise+0xc>)
340104f6:	4601      	mov	r1, r0
340104f8:	6818      	ldr	r0, [r3, #0]
340104fa:	f7ff bfd2 	b.w	340104a2 <_raise_r>
340104fe:	bf00      	nop
34010500:	34012854 	.word	0x34012854

34010504 <_fstat_r>:
34010504:	b538      	push	{r3, r4, r5, lr}
34010506:	2300      	movs	r3, #0
34010508:	4d06      	ldr	r5, [pc, #24]	@ (34010524 <_fstat_r+0x20>)
3401050a:	4604      	mov	r4, r0
3401050c:	4608      	mov	r0, r1
3401050e:	4611      	mov	r1, r2
34010510:	602b      	str	r3, [r5, #0]
34010512:	f7f1 f813 	bl	3400153c <_fstat>
34010516:	1c43      	adds	r3, r0, #1
34010518:	d102      	bne.n	34010520 <_fstat_r+0x1c>
3401051a:	682b      	ldr	r3, [r5, #0]
3401051c:	b103      	cbz	r3, 34010520 <_fstat_r+0x1c>
3401051e:	6023      	str	r3, [r4, #0]
34010520:	bd38      	pop	{r3, r4, r5, pc}
34010522:	bf00      	nop
34010524:	340133d4 	.word	0x340133d4

34010528 <_isatty_r>:
34010528:	b538      	push	{r3, r4, r5, lr}
3401052a:	2300      	movs	r3, #0
3401052c:	4d05      	ldr	r5, [pc, #20]	@ (34010544 <_isatty_r+0x1c>)
3401052e:	4604      	mov	r4, r0
34010530:	4608      	mov	r0, r1
34010532:	602b      	str	r3, [r5, #0]
34010534:	f7f1 f807 	bl	34001546 <_isatty>
34010538:	1c43      	adds	r3, r0, #1
3401053a:	d102      	bne.n	34010542 <_isatty_r+0x1a>
3401053c:	682b      	ldr	r3, [r5, #0]
3401053e:	b103      	cbz	r3, 34010542 <_isatty_r+0x1a>
34010540:	6023      	str	r3, [r4, #0]
34010542:	bd38      	pop	{r3, r4, r5, pc}
34010544:	340133d4 	.word	0x340133d4

34010548 <_kill_r>:
34010548:	b538      	push	{r3, r4, r5, lr}
3401054a:	2300      	movs	r3, #0
3401054c:	4d06      	ldr	r5, [pc, #24]	@ (34010568 <_kill_r+0x20>)
3401054e:	4604      	mov	r4, r0
34010550:	4608      	mov	r0, r1
34010552:	4611      	mov	r1, r2
34010554:	602b      	str	r3, [r5, #0]
34010556:	f7f0 ffd2 	bl	340014fe <_kill>
3401055a:	1c43      	adds	r3, r0, #1
3401055c:	d102      	bne.n	34010564 <_kill_r+0x1c>
3401055e:	682b      	ldr	r3, [r5, #0]
34010560:	b103      	cbz	r3, 34010564 <_kill_r+0x1c>
34010562:	6023      	str	r3, [r4, #0]
34010564:	bd38      	pop	{r3, r4, r5, pc}
34010566:	bf00      	nop
34010568:	340133d4 	.word	0x340133d4

3401056c <_getpid_r>:
3401056c:	f7f0 bfc5 	b.w	340014fa <_getpid>

34010570 <_calloc_r>:
34010570:	b570      	push	{r4, r5, r6, lr}
34010572:	fba1 5402 	umull	r5, r4, r1, r2
34010576:	b934      	cbnz	r4, 34010586 <_calloc_r+0x16>
34010578:	4629      	mov	r1, r5
3401057a:	f7fd f9f3 	bl	3400d964 <_malloc_r>
3401057e:	4606      	mov	r6, r0
34010580:	b928      	cbnz	r0, 3401058e <_calloc_r+0x1e>
34010582:	4630      	mov	r0, r6
34010584:	bd70      	pop	{r4, r5, r6, pc}
34010586:	220c      	movs	r2, #12
34010588:	2600      	movs	r6, #0
3401058a:	6002      	str	r2, [r0, #0]
3401058c:	e7f9      	b.n	34010582 <_calloc_r+0x12>
3401058e:	462a      	mov	r2, r5
34010590:	4621      	mov	r1, r4
34010592:	f7fe f987 	bl	3400e8a4 <memset>
34010596:	e7f4      	b.n	34010582 <_calloc_r+0x12>

34010598 <__ascii_mbtowc>:
34010598:	b082      	sub	sp, #8
3401059a:	b901      	cbnz	r1, 3401059e <__ascii_mbtowc+0x6>
3401059c:	a901      	add	r1, sp, #4
3401059e:	b142      	cbz	r2, 340105b2 <__ascii_mbtowc+0x1a>
340105a0:	b14b      	cbz	r3, 340105b6 <__ascii_mbtowc+0x1e>
340105a2:	7813      	ldrb	r3, [r2, #0]
340105a4:	600b      	str	r3, [r1, #0]
340105a6:	7812      	ldrb	r2, [r2, #0]
340105a8:	1e10      	subs	r0, r2, #0
340105aa:	bf18      	it	ne
340105ac:	2001      	movne	r0, #1
340105ae:	b002      	add	sp, #8
340105b0:	4770      	bx	lr
340105b2:	4610      	mov	r0, r2
340105b4:	e7fb      	b.n	340105ae <__ascii_mbtowc+0x16>
340105b6:	f06f 0001 	mvn.w	r0, #1
340105ba:	e7f8      	b.n	340105ae <__ascii_mbtowc+0x16>

340105bc <__ascii_wctomb>:
340105bc:	4603      	mov	r3, r0
340105be:	4608      	mov	r0, r1
340105c0:	b141      	cbz	r1, 340105d4 <__ascii_wctomb+0x18>
340105c2:	2aff      	cmp	r2, #255	@ 0xff
340105c4:	d904      	bls.n	340105d0 <__ascii_wctomb+0x14>
340105c6:	228a      	movs	r2, #138	@ 0x8a
340105c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340105cc:	601a      	str	r2, [r3, #0]
340105ce:	4770      	bx	lr
340105d0:	2001      	movs	r0, #1
340105d2:	700a      	strb	r2, [r1, #0]
340105d4:	4770      	bx	lr
	...

340105d8 <_sbrk>:
340105d8:	4a04      	ldr	r2, [pc, #16]	@ (340105ec <_sbrk+0x14>)
340105da:	4603      	mov	r3, r0
340105dc:	6811      	ldr	r1, [r2, #0]
340105de:	b909      	cbnz	r1, 340105e4 <_sbrk+0xc>
340105e0:	4903      	ldr	r1, [pc, #12]	@ (340105f0 <_sbrk+0x18>)
340105e2:	6011      	str	r1, [r2, #0]
340105e4:	6810      	ldr	r0, [r2, #0]
340105e6:	4403      	add	r3, r0
340105e8:	6013      	str	r3, [r2, #0]
340105ea:	4770      	bx	lr
340105ec:	340133dc 	.word	0x340133dc
340105f0:	340133e0 	.word	0x340133e0

340105f4 <_init>:
340105f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340105f6:	bf00      	nop
340105f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
340105fa:	bc08      	pop	{r3}
340105fc:	469e      	mov	lr, r3
340105fe:	4770      	bx	lr

34010600 <_fini>:
34010600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010602:	bf00      	nop
34010604:	bcf8      	pop	{r3, r4, r5, r6, r7}
34010606:	bc08      	pop	{r3}
34010608:	469e      	mov	lr, r3
3401060a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

34010620 <SECURE_SystemCoreClockUpdate>:
34010620:	e97f e97f 	sg
34010624:	f7f1 bf2e 	b.w	34002484 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
