
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd44  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  340104a0  340104a0  000104a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001e8c  340104c0  340104c0  000104c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  3401234c  3401234c  00012578  2**0
                  CONTENTS
  5 .ARM          00000008  3401234c  3401234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  34012354  34012578  00012578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  34012354  34012354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  34012358  34012358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000021c  3401235c  3401235c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000a00  34012578  34012578  00012578  2**2
                  ALLOC
 11 ._user_heap_stack 00004200  34012f78  34012f78  00012578  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  00012578  2**0
                  CONTENTS, READONLY
 13 .debug_info   00067887  00000000  00000000  000125b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009db6  00000000  00000000  00079e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00021bfe  00000000  00000000  00083bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029a0  00000000  00000000  000a57f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000034ec  00000000  00000000  000a8190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0007f5ed  00000000  00000000  000ab67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c46c  00000000  00000000  0012ac69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    003b1c3b  00000000  00000000  001770d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00528d10  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000083a8  00000000  00000000  00528d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000156  00000000  00000000  005310fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	34012578 	.word	0x34012578
3400076c:	00000000 	.word	0x00000000
34000770:	3401047c 	.word	0x3401047c

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	3401257c 	.word	0x3401257c
3400078c:	3401047c 	.word	0x3401047c

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b9b0 	b.w	34000b18 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	4688      	mov	r8, r1
340007d8:	4604      	mov	r4, r0
340007da:	468e      	mov	lr, r1
340007dc:	2b00      	cmp	r3, #0
340007de:	d14a      	bne.n	34000876 <__udivmoddi4+0xa6>
340007e0:	428a      	cmp	r2, r1
340007e2:	4617      	mov	r7, r2
340007e4:	d95f      	bls.n	340008a6 <__udivmoddi4+0xd6>
340007e6:	fab2 f682 	clz	r6, r2
340007ea:	b14e      	cbz	r6, 34000800 <__udivmoddi4+0x30>
340007ec:	f1c6 0320 	rsb	r3, r6, #32
340007f0:	fa01 fe06 	lsl.w	lr, r1, r6
340007f4:	40b7      	lsls	r7, r6
340007f6:	40b4      	lsls	r4, r6
340007f8:	fa20 f303 	lsr.w	r3, r0, r3
340007fc:	ea43 0e0e 	orr.w	lr, r3, lr
34000800:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000804:	fa1f fc87 	uxth.w	ip, r7
34000808:	0c23      	lsrs	r3, r4, #16
3400080a:	fbbe f1f8 	udiv	r1, lr, r8
3400080e:	fb08 ee11 	mls	lr, r8, r1, lr
34000812:	fb01 f20c 	mul.w	r2, r1, ip
34000816:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
3400081a:	429a      	cmp	r2, r3
3400081c:	d907      	bls.n	3400082e <__udivmoddi4+0x5e>
3400081e:	18fb      	adds	r3, r7, r3
34000820:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34000824:	d202      	bcs.n	3400082c <__udivmoddi4+0x5c>
34000826:	429a      	cmp	r2, r3
34000828:	f200 8154 	bhi.w	34000ad4 <__udivmoddi4+0x304>
3400082c:	4601      	mov	r1, r0
3400082e:	1a9b      	subs	r3, r3, r2
34000830:	b2a2      	uxth	r2, r4
34000832:	fbb3 f0f8 	udiv	r0, r3, r8
34000836:	fb08 3310 	mls	r3, r8, r0, r3
3400083a:	fb00 fc0c 	mul.w	ip, r0, ip
3400083e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34000842:	4594      	cmp	ip, r2
34000844:	d90b      	bls.n	3400085e <__udivmoddi4+0x8e>
34000846:	18ba      	adds	r2, r7, r2
34000848:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
3400084c:	bf2c      	ite	cs
3400084e:	2401      	movcs	r4, #1
34000850:	2400      	movcc	r4, #0
34000852:	4594      	cmp	ip, r2
34000854:	d902      	bls.n	3400085c <__udivmoddi4+0x8c>
34000856:	2c00      	cmp	r4, #0
34000858:	f000 813f 	beq.w	34000ada <__udivmoddi4+0x30a>
3400085c:	4618      	mov	r0, r3
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	eba2 020c 	sub.w	r2, r2, ip
34000866:	2100      	movs	r1, #0
34000868:	b11d      	cbz	r5, 34000872 <__udivmoddi4+0xa2>
3400086a:	40f2      	lsrs	r2, r6
3400086c:	2300      	movs	r3, #0
3400086e:	e9c5 2300 	strd	r2, r3, [r5]
34000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000876:	428b      	cmp	r3, r1
34000878:	d905      	bls.n	34000886 <__udivmoddi4+0xb6>
3400087a:	b10d      	cbz	r5, 34000880 <__udivmoddi4+0xb0>
3400087c:	e9c5 0100 	strd	r0, r1, [r5]
34000880:	2100      	movs	r1, #0
34000882:	4608      	mov	r0, r1
34000884:	e7f5      	b.n	34000872 <__udivmoddi4+0xa2>
34000886:	fab3 f183 	clz	r1, r3
3400088a:	2900      	cmp	r1, #0
3400088c:	d14e      	bne.n	3400092c <__udivmoddi4+0x15c>
3400088e:	4543      	cmp	r3, r8
34000890:	f0c0 8112 	bcc.w	34000ab8 <__udivmoddi4+0x2e8>
34000894:	4282      	cmp	r2, r0
34000896:	f240 810f 	bls.w	34000ab8 <__udivmoddi4+0x2e8>
3400089a:	4608      	mov	r0, r1
3400089c:	2d00      	cmp	r5, #0
3400089e:	d0e8      	beq.n	34000872 <__udivmoddi4+0xa2>
340008a0:	e9c5 4e00 	strd	r4, lr, [r5]
340008a4:	e7e5      	b.n	34000872 <__udivmoddi4+0xa2>
340008a6:	2a00      	cmp	r2, #0
340008a8:	f000 80ac 	beq.w	34000a04 <__udivmoddi4+0x234>
340008ac:	fab2 f682 	clz	r6, r2
340008b0:	2e00      	cmp	r6, #0
340008b2:	f040 80bb 	bne.w	34000a2c <__udivmoddi4+0x25c>
340008b6:	1a8b      	subs	r3, r1, r2
340008b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
340008bc:	b2bc      	uxth	r4, r7
340008be:	2101      	movs	r1, #1
340008c0:	0c02      	lsrs	r2, r0, #16
340008c2:	b280      	uxth	r0, r0
340008c4:	fbb3 fcfe 	udiv	ip, r3, lr
340008c8:	fb0e 331c 	mls	r3, lr, ip, r3
340008cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
340008d0:	fb04 f20c 	mul.w	r2, r4, ip
340008d4:	429a      	cmp	r2, r3
340008d6:	d90e      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d8:	18fb      	adds	r3, r7, r3
340008da:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	429a      	cmp	r2, r3
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80ec 	beq.w	34000acc <__udivmoddi4+0x2fc>
340008f4:	46c4      	mov	ip, r8
340008f6:	1a9b      	subs	r3, r3, r2
340008f8:	fbb3 f8fe 	udiv	r8, r3, lr
340008fc:	fb0e 3318 	mls	r3, lr, r8, r3
34000900:	fb04 f408 	mul.w	r4, r4, r8
34000904:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34000908:	4294      	cmp	r4, r2
3400090a:	d90b      	bls.n	34000924 <__udivmoddi4+0x154>
3400090c:	18ba      	adds	r2, r7, r2
3400090e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34000912:	bf2c      	ite	cs
34000914:	2001      	movcs	r0, #1
34000916:	2000      	movcc	r0, #0
34000918:	4294      	cmp	r4, r2
3400091a:	d902      	bls.n	34000922 <__udivmoddi4+0x152>
3400091c:	2800      	cmp	r0, #0
3400091e:	f000 80d1 	beq.w	34000ac4 <__udivmoddi4+0x2f4>
34000922:	4698      	mov	r8, r3
34000924:	1b12      	subs	r2, r2, r4
34000926:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa08 f401 	lsl.w	r4, r8, r1
34000936:	fa00 f901 	lsl.w	r9, r0, r1
3400093a:	fa22 f706 	lsr.w	r7, r2, r6
3400093e:	fa28 f806 	lsr.w	r8, r8, r6
34000942:	408a      	lsls	r2, r1
34000944:	431f      	orrs	r7, r3
34000946:	fa20 f306 	lsr.w	r3, r0, r6
3400094a:	0c38      	lsrs	r0, r7, #16
3400094c:	4323      	orrs	r3, r4
3400094e:	fa1f fc87 	uxth.w	ip, r7
34000952:	0c1c      	lsrs	r4, r3, #16
34000954:	fbb8 fef0 	udiv	lr, r8, r0
34000958:	fb00 881e 	mls	r8, r0, lr, r8
3400095c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34000960:	fb0e f80c 	mul.w	r8, lr, ip
34000964:	45a0      	cmp	r8, r4
34000966:	d90e      	bls.n	34000986 <__udivmoddi4+0x1b6>
34000968:	193c      	adds	r4, r7, r4
3400096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3400096e:	bf2c      	ite	cs
34000970:	f04f 0b01 	movcs.w	fp, #1
34000974:	f04f 0b00 	movcc.w	fp, #0
34000978:	45a0      	cmp	r8, r4
3400097a:	d903      	bls.n	34000984 <__udivmoddi4+0x1b4>
3400097c:	f1bb 0f00 	cmp.w	fp, #0
34000980:	f000 80b8 	beq.w	34000af4 <__udivmoddi4+0x324>
34000984:	46d6      	mov	lr, sl
34000986:	eba4 0408 	sub.w	r4, r4, r8
3400098a:	fa1f f883 	uxth.w	r8, r3
3400098e:	fbb4 f3f0 	udiv	r3, r4, r0
34000992:	fb00 4413 	mls	r4, r0, r3, r4
34000996:	fb03 fc0c 	mul.w	ip, r3, ip
3400099a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3400099e:	45a4      	cmp	ip, r4
340009a0:	d90e      	bls.n	340009c0 <__udivmoddi4+0x1f0>
340009a2:	193c      	adds	r4, r7, r4
340009a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
340009a8:	bf2c      	ite	cs
340009aa:	f04f 0801 	movcs.w	r8, #1
340009ae:	f04f 0800 	movcc.w	r8, #0
340009b2:	45a4      	cmp	ip, r4
340009b4:	d903      	bls.n	340009be <__udivmoddi4+0x1ee>
340009b6:	f1b8 0f00 	cmp.w	r8, #0
340009ba:	f000 809f 	beq.w	34000afc <__udivmoddi4+0x32c>
340009be:	4603      	mov	r3, r0
340009c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
340009c4:	eba4 040c 	sub.w	r4, r4, ip
340009c8:	fba0 ec02 	umull	lr, ip, r0, r2
340009cc:	4564      	cmp	r4, ip
340009ce:	4673      	mov	r3, lr
340009d0:	46e0      	mov	r8, ip
340009d2:	d302      	bcc.n	340009da <__udivmoddi4+0x20a>
340009d4:	d107      	bne.n	340009e6 <__udivmoddi4+0x216>
340009d6:	45f1      	cmp	r9, lr
340009d8:	d205      	bcs.n	340009e6 <__udivmoddi4+0x216>
340009da:	ebbe 0302 	subs.w	r3, lr, r2
340009de:	eb6c 0c07 	sbc.w	ip, ip, r7
340009e2:	3801      	subs	r0, #1
340009e4:	46e0      	mov	r8, ip
340009e6:	b15d      	cbz	r5, 34000a00 <__udivmoddi4+0x230>
340009e8:	ebb9 0203 	subs.w	r2, r9, r3
340009ec:	eb64 0408 	sbc.w	r4, r4, r8
340009f0:	fa04 f606 	lsl.w	r6, r4, r6
340009f4:	fa22 f301 	lsr.w	r3, r2, r1
340009f8:	40cc      	lsrs	r4, r1
340009fa:	431e      	orrs	r6, r3
340009fc:	e9c5 6400 	strd	r6, r4, [r5]
34000a00:	2100      	movs	r1, #0
34000a02:	e736      	b.n	34000872 <__udivmoddi4+0xa2>
34000a04:	fbb1 fcf2 	udiv	ip, r1, r2
34000a08:	0c01      	lsrs	r1, r0, #16
34000a0a:	4614      	mov	r4, r2
34000a0c:	b280      	uxth	r0, r0
34000a0e:	4696      	mov	lr, r2
34000a10:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a14:	2620      	movs	r6, #32
34000a16:	4690      	mov	r8, r2
34000a18:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34000a1c:	4610      	mov	r0, r2
34000a1e:	fbb1 f1f2 	udiv	r1, r1, r2
34000a22:	eba3 0308 	sub.w	r3, r3, r8
34000a26:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34000a2a:	e74b      	b.n	340008c4 <__udivmoddi4+0xf4>
34000a2c:	40b7      	lsls	r7, r6
34000a2e:	f1c6 0320 	rsb	r3, r6, #32
34000a32:	fa01 f206 	lsl.w	r2, r1, r6
34000a36:	fa21 f803 	lsr.w	r8, r1, r3
34000a3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34000a3e:	fa20 f303 	lsr.w	r3, r0, r3
34000a42:	b2bc      	uxth	r4, r7
34000a44:	40b0      	lsls	r0, r6
34000a46:	4313      	orrs	r3, r2
34000a48:	0c02      	lsrs	r2, r0, #16
34000a4a:	0c19      	lsrs	r1, r3, #16
34000a4c:	b280      	uxth	r0, r0
34000a4e:	fbb8 f9fe 	udiv	r9, r8, lr
34000a52:	fb0e 8819 	mls	r8, lr, r9, r8
34000a56:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a5a:	fb09 f804 	mul.w	r8, r9, r4
34000a5e:	4588      	cmp	r8, r1
34000a60:	d951      	bls.n	34000b06 <__udivmoddi4+0x336>
34000a62:	1879      	adds	r1, r7, r1
34000a64:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34000a68:	bf2c      	ite	cs
34000a6a:	f04f 0a01 	movcs.w	sl, #1
34000a6e:	f04f 0a00 	movcc.w	sl, #0
34000a72:	4588      	cmp	r8, r1
34000a74:	d902      	bls.n	34000a7c <__udivmoddi4+0x2ac>
34000a76:	f1ba 0f00 	cmp.w	sl, #0
34000a7a:	d031      	beq.n	34000ae0 <__udivmoddi4+0x310>
34000a7c:	eba1 0108 	sub.w	r1, r1, r8
34000a80:	fbb1 f9fe 	udiv	r9, r1, lr
34000a84:	fb09 f804 	mul.w	r8, r9, r4
34000a88:	fb0e 1119 	mls	r1, lr, r9, r1
34000a8c:	b29b      	uxth	r3, r3
34000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34000a92:	4543      	cmp	r3, r8
34000a94:	d235      	bcs.n	34000b02 <__udivmoddi4+0x332>
34000a96:	18fb      	adds	r3, r7, r3
34000a98:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34000a9c:	bf2c      	ite	cs
34000a9e:	f04f 0a01 	movcs.w	sl, #1
34000aa2:	f04f 0a00 	movcc.w	sl, #0
34000aa6:	4543      	cmp	r3, r8
34000aa8:	d2bb      	bcs.n	34000a22 <__udivmoddi4+0x252>
34000aaa:	f1ba 0f00 	cmp.w	sl, #0
34000aae:	d1b8      	bne.n	34000a22 <__udivmoddi4+0x252>
34000ab0:	f1a9 0102 	sub.w	r1, r9, #2
34000ab4:	443b      	add	r3, r7
34000ab6:	e7b4      	b.n	34000a22 <__udivmoddi4+0x252>
34000ab8:	1a84      	subs	r4, r0, r2
34000aba:	eb68 0203 	sbc.w	r2, r8, r3
34000abe:	2001      	movs	r0, #1
34000ac0:	4696      	mov	lr, r2
34000ac2:	e6eb      	b.n	3400089c <__udivmoddi4+0xcc>
34000ac4:	443a      	add	r2, r7
34000ac6:	f1a8 0802 	sub.w	r8, r8, #2
34000aca:	e72b      	b.n	34000924 <__udivmoddi4+0x154>
34000acc:	f1ac 0c02 	sub.w	ip, ip, #2
34000ad0:	443b      	add	r3, r7
34000ad2:	e710      	b.n	340008f6 <__udivmoddi4+0x126>
34000ad4:	3902      	subs	r1, #2
34000ad6:	443b      	add	r3, r7
34000ad8:	e6a9      	b.n	3400082e <__udivmoddi4+0x5e>
34000ada:	443a      	add	r2, r7
34000adc:	3802      	subs	r0, #2
34000ade:	e6be      	b.n	3400085e <__udivmoddi4+0x8e>
34000ae0:	eba7 0808 	sub.w	r8, r7, r8
34000ae4:	f1a9 0c02 	sub.w	ip, r9, #2
34000ae8:	4441      	add	r1, r8
34000aea:	fbb1 f9fe 	udiv	r9, r1, lr
34000aee:	fb09 f804 	mul.w	r8, r9, r4
34000af2:	e7c9      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000af4:	f1ae 0e02 	sub.w	lr, lr, #2
34000af8:	443c      	add	r4, r7
34000afa:	e744      	b.n	34000986 <__udivmoddi4+0x1b6>
34000afc:	3b02      	subs	r3, #2
34000afe:	443c      	add	r4, r7
34000b00:	e75e      	b.n	340009c0 <__udivmoddi4+0x1f0>
34000b02:	4649      	mov	r1, r9
34000b04:	e78d      	b.n	34000a22 <__udivmoddi4+0x252>
34000b06:	eba1 0108 	sub.w	r1, r1, r8
34000b0a:	46cc      	mov	ip, r9
34000b0c:	fbb1 f9fe 	udiv	r9, r1, lr
34000b10:	fb09 f804 	mul.w	r8, r9, r4
34000b14:	e7b8      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000b16:	bf00      	nop

34000b18 <__aeabi_idiv0>:
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop

34000b1c <update_weights_int8>:
    memcpy(NNweights, new_weights, Num_weights * sizeof(float));
    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
    SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(float));
}

void update_weights_int8(int8_t* NNweights, const int8_t *new_weights,size_t Num_weights) {
34000b1c:	b538      	push	{r3, r4, r5, lr}
34000b1e:	4615      	mov	r5, r2
34000b20:	4604      	mov	r4, r0
    memcpy(NNweights, new_weights, Num_weights * sizeof(int8_t));
34000b22:	f00e f892 	bl	3400ec4a <memcpy>
    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
34000b26:	462a      	mov	r2, r5
34000b28:	4621      	mov	r1, r4
34000b2a:	4811      	ldr	r0, [pc, #68]	@ (34000b70 <update_weights_int8+0x54>)
34000b2c:	f00d fcb6 	bl	3400e49c <iprintf>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34000b30:	2d00      	cmp	r5, #0
34000b32:	dd1c      	ble.n	34000b6e <update_weights_int8+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000b34:	f004 031f 	and.w	r3, r4, #31
34000b38:	195a      	adds	r2, r3, r5
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000b3a:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34000b3e:	4620      	mov	r0, r4

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34000b40:	43c3      	mvns	r3, r0
34000b42:	4414      	add	r4, r2
34000b44:	4423      	add	r3, r4
34000b46:	3a20      	subs	r2, #32
34000b48:	095b      	lsrs	r3, r3, #5
34000b4a:	3220      	adds	r2, #32
34000b4c:	f103 0e01 	add.w	lr, r3, #1
34000b50:	bfd8      	it	le
34000b52:	f04f 0e01 	movle.w	lr, #1
34000b56:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000b5a:	4906      	ldr	r1, [pc, #24]	@ (34000b74 <update_weights_int8+0x58>)
34000b5c:	f8c1 0268 	str.w	r0, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000b60:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34000b62:	f00f c805 	le	lr, 34000b5c <update_weights_int8+0x40>
34000b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000b6a:	f3bf 8f6f 	isb	sy
	SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(int8_t));
}
34000b6e:	bd38      	pop	{r3, r4, r5, pc}
34000b70:	340104c0 	.word	0x340104c0
34000b74:	e000ed00 	.word	0xe000ed00

34000b78 <calcAdresses>:

void calcAdresses(size_t insize, size_t outsize,size_t bytesOfType,volatile Matmul_info* infoStruct){
	infoStruct->bytes = bytesOfType;
34000b78:	601a      	str	r2, [r3, #0]
	infoStruct->insize = insize;
34000b7a:	6058      	str	r0, [r3, #4]
	infoStruct->outsize = outsize;
34000b7c:	6099      	str	r1, [r3, #8]

	int inBytes = bytesOfType * insize;
34000b7e:	4350      	muls	r0, r2
	int outBytes = bytesOfType * outsize;
34000b80:	434a      	muls	r2, r1

	infoStruct->weight_start = 0;
34000b82:	2100      	movs	r1, #0
34000b84:	60d9      	str	r1, [r3, #12]
	infoStruct->weight_end   = infoStruct->weight_start + inBytes * outBytes;
34000b86:	68d9      	ldr	r1, [r3, #12]
34000b88:	fb02 1100 	mla	r1, r2, r0, r1
34000b8c:	6119      	str	r1, [r3, #16]
	infoStruct->weight_limit = infoStruct->weight_end + inBytes;
34000b8e:	6919      	ldr	r1, [r3, #16]
34000b90:	4401      	add	r1, r0
34000b92:	6159      	str	r1, [r3, #20]

	infoStruct->input_start = infoStruct->weight_limit ;
34000b94:	6959      	ldr	r1, [r3, #20]
34000b96:	6199      	str	r1, [r3, #24]
	infoStruct->input_end   = infoStruct->input_start + inBytes;
34000b98:	6999      	ldr	r1, [r3, #24]
34000b9a:	4401      	add	r1, r0
34000b9c:	61d9      	str	r1, [r3, #28]
	infoStruct->input_limit = infoStruct->input_end + inBytes;
34000b9e:	69d9      	ldr	r1, [r3, #28]
34000ba0:	4401      	add	r1, r0
34000ba2:	6219      	str	r1, [r3, #32]

	infoStruct->output_start = infoStruct->input_limit;
34000ba4:	6a19      	ldr	r1, [r3, #32]
34000ba6:	6259      	str	r1, [r3, #36]	@ 0x24
	infoStruct->output_end   = infoStruct->output_start + outBytes;
34000ba8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
34000baa:	4411      	add	r1, r2
34000bac:	6299      	str	r1, [r3, #40]	@ 0x28
	infoStruct->output_limit = infoStruct->output_end + outBytes;
34000bae:	6a99      	ldr	r1, [r3, #40]	@ 0x28
34000bb0:	440a      	add	r2, r1
34000bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
34000bb4:	4770      	bx	lr
	...

34000bb8 <npu_matvec_int8_init>:
	extern volatile Matmul_info matmulInfo_int;
	size_t insizeNPU = 0;
	size_t outsizeNPU = 0;

	// Calculate valid insize and outsize. At the moment only 8,16,24 are valid
	if((insize > 24) || (outsize > 24)){
34000bb8:	2818      	cmp	r0, #24
int npu_matvec_int8_init(size_t insize,size_t outsize){
34000bba:	b510      	push	{r4, lr}
	if((insize > 24) || (outsize > 24)){
34000bbc:	d801      	bhi.n	34000bc2 <npu_matvec_int8_init+0xa>
34000bbe:	2918      	cmp	r1, #24
34000bc0:	d905      	bls.n	34000bce <npu_matvec_int8_init+0x16>
		printf("Insize or Outsize too big. Has to be lower or equal to 24");
34000bc2:	4810      	ldr	r0, [pc, #64]	@ (34000c04 <npu_matvec_int8_init+0x4c>)
		return -1;
	}

	if((insize < 1) || (outsize < 1)){
		printf("Insize or Outsize too small. Has to be higher or equal to 1");
34000bc4:	f00d fc6a 	bl	3400e49c <iprintf>
		return -1;
34000bc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}

	// Calculate Adresses
	calcAdresses(insizeNPU,outsizeNPU,1,&matmulInfo_int);
	return 0;
}
34000bcc:	bd10      	pop	{r4, pc}
	if((insize < 1) || (outsize < 1)){
34000bce:	b100      	cbz	r0, 34000bd2 <npu_matvec_int8_init+0x1a>
34000bd0:	b909      	cbnz	r1, 34000bd6 <npu_matvec_int8_init+0x1e>
		printf("Insize or Outsize too small. Has to be higher or equal to 1");
34000bd2:	480d      	ldr	r0, [pc, #52]	@ (34000c08 <npu_matvec_int8_init+0x50>)
34000bd4:	e7f6      	b.n	34000bc4 <npu_matvec_int8_init+0xc>
		insizeNPU = ((insize/8) + 1) * 8;
34000bd6:	f020 0307 	bic.w	r3, r0, #7
34000bda:	f010 0f07 	tst.w	r0, #7
		outsizeNPU = ((outsize/8) + 1) * 8;
34000bde:	f021 0407 	bic.w	r4, r1, #7
		insizeNPU = ((insize/8) + 1) * 8;
34000be2:	f103 0308 	add.w	r3, r3, #8
34000be6:	bf18      	it	ne
34000be8:	4618      	movne	r0, r3
		outsizeNPU = ((outsize/8) + 1) * 8;
34000bea:	3408      	adds	r4, #8
34000bec:	f011 0f07 	tst.w	r1, #7
	calcAdresses(insizeNPU,outsizeNPU,1,&matmulInfo_int);
34000bf0:	f04f 0201 	mov.w	r2, #1
34000bf4:	bf18      	it	ne
34000bf6:	4621      	movne	r1, r4
34000bf8:	4b04      	ldr	r3, [pc, #16]	@ (34000c0c <npu_matvec_int8_init+0x54>)
34000bfa:	f7ff ffbd 	bl	34000b78 <calcAdresses>
	return 0;
34000bfe:	2000      	movs	r0, #0
34000c00:	e7e4      	b.n	34000bcc <npu_matvec_int8_init+0x14>
34000c02:	bf00      	nop
34000c04:	340104e2 	.word	0x340104e2
34000c08:	3401051c 	.word	0x3401051c
34000c0c:	34012594 	.word	0x34012594

34000c10 <npu_matvec_int8_run>:

int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34000c12:	460c      	mov	r4, r1
	//LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(int8);
	extern volatile Matmul_info matmulInfo_int;

	// Prepare input buffer: 0x34200000UL is the base address
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000c14:	4f1f      	ldr	r7, [pc, #124]	@ (34000c94 <npu_matvec_int8_run+0x84>)
int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000c16:	461d      	mov	r5, r3
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000c18:	69bb      	ldr	r3, [r7, #24]
34000c1a:	4601      	mov	r1, r0
34000c1c:	f103 5050 	add.w	r0, r3, #872415232	@ 0x34000000
int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000c20:	4616      	mov	r6, r2
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000c22:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
34000c26:	687a      	ldr	r2, [r7, #4]
34000c28:	f00e f80f 	bl	3400ec4a <memcpy>
    if ( dsize > 0 ) {
34000c2c:	2c00      	cmp	r4, #0
	SCB_CleanDCache_by_Addr((void*)(0x34200000UL + matmulInfo_int.input_start), insizeVec);
34000c2e:	69bb      	ldr	r3, [r7, #24]
34000c30:	dd20      	ble.n	34000c74 <npu_matvec_int8_run+0x64>
34000c32:	f103 5250 	add.w	r2, r3, #872415232	@ 0x34000000
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000c36:	f003 001f 	and.w	r0, r3, #31
34000c3a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
34000c3e:	4420      	add	r0, r4
  __ASM volatile ("dsb 0xF":::"memory");
34000c40:	f3bf 8f4f 	dsb	sy
34000c44:	f003 031f 	and.w	r3, r3, #31
34000c48:	4423      	add	r3, r4
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000c4a:	3801      	subs	r0, #1
34000c4c:	3b20      	subs	r3, #32
34000c4e:	0940      	lsrs	r0, r0, #5
34000c50:	3320      	adds	r3, #32
34000c52:	f100 0e01 	add.w	lr, r0, #1
34000c56:	bfd8      	it	le
34000c58:	f04f 0e01 	movle.w	lr, #1
34000c5c:	f04e e001 	dls	lr, lr
34000c60:	490d      	ldr	r1, [pc, #52]	@ (34000c98 <npu_matvec_int8_run+0x88>)
34000c62:	f8c1 2268 	str.w	r2, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000c66:	3220      	adds	r2, #32
      } while ( op_size > 0 );
34000c68:	f00f c805 	le	lr, 34000c62 <npu_matvec_int8_run+0x52>
34000c6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000c70:	f3bf 8f6f 	isb	sy

	// Prepare Matrix
	update_weights_int8((int8_t*)(0x34200000UL), inMat, insizeVec * outSize);
34000c74:	4629      	mov	r1, r5
34000c76:	fb06 f204 	mul.w	r2, r6, r4
34000c7a:	4808      	ldr	r0, [pc, #32]	@ (34000c9c <npu_matvec_int8_run+0x8c>)
34000c7c:	f7ff ff4e 	bl	34000b1c <update_weights_int8>

	LL_ATON_RT_Main(&NN_Instance_int8);
34000c80:	4807      	ldr	r0, [pc, #28]	@ (34000ca0 <npu_matvec_int8_run+0x90>)
34000c82:	f00c f8c3 	bl	3400ce0c <LL_ATON_RT_Main>

	return (int8_t*)(0x34200000UL + matmulInfo_int.output_start);
34000c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
}
34000c88:	f100 5050 	add.w	r0, r0, #872415232	@ 0x34000000
34000c8c:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
34000c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34000c92:	bf00      	nop
34000c94:	34012594 	.word	0x34012594
34000c98:	e000ed00 	.word	0xe000ed00
34000c9c:	34200000 	.word	0x34200000
34000ca0:	3401235c 	.word	0x3401235c

34000ca4 <getIdentityWeights_int8>:
	LL_ATON_RT_Main(&NN_Instance_int8);

	return (float*)(matmulInfo_Float.output_start);
}

int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000ca6:	fb01 f700 	mul.w	r7, r1, r0
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000caa:	4606      	mov	r6, r0
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000cac:	4638      	mov	r0, r7
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000cae:	460d      	mov	r5, r1
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000cb0:	f00c fd70 	bl	3400d794 <malloc>
    if (identity == NULL) {
34000cb4:	4604      	mov	r4, r0
34000cb6:	b1c8      	cbz	r0, 34000cec <getIdentityWeights_int8+0x48>
        return NULL;
    }

    // Initialize the entire matrix to 0
    memset(identity, 0, insize * outsize * sizeof(int8_t));
34000cb8:	463a      	mov	r2, r7
34000cba:	2100      	movs	r1, #0
34000cbc:	f00d fd36 	bl	3400e72c <memset>

    // Set 1 on the diagonal
    for (size_t i = 0; i < insize; i++) {
34000cc0:	2300      	movs	r3, #0
34000cc2:	461a      	mov	r2, r3
34000cc4:	42b2      	cmp	r2, r6
34000cc6:	d011      	beq.n	34000cec <getIdentityWeights_int8+0x48>
        for (size_t j = 0; j < outsize; j++) {
34000cc8:	2000      	movs	r0, #0
34000cca:	18e7      	adds	r7, r4, r3
34000ccc:	1c69      	adds	r1, r5, #1
34000cce:	e008      	b.n	34000ce2 <getIdentityWeights_int8+0x3e>
            if (i == j) {
34000cd0:	4282      	cmp	r2, r0
34000cd2:	bf14      	ite	ne
34000cd4:	f04f 0c00 	movne.w	ip, #0
34000cd8:	f04f 0c01 	moveq.w	ip, #1
        for (size_t j = 0; j < outsize; j++) {
34000cdc:	3001      	adds	r0, #1
            if (i == j) {
34000cde:	f807 cb01 	strb.w	ip, [r7], #1
        for (size_t j = 0; j < outsize; j++) {
34000ce2:	3901      	subs	r1, #1
34000ce4:	d1f4      	bne.n	34000cd0 <getIdentityWeights_int8+0x2c>
    for (size_t i = 0; i < insize; i++) {
34000ce6:	3201      	adds	r2, #1
34000ce8:	442b      	add	r3, r5
34000cea:	e7eb      	b.n	34000cc4 <getIdentityWeights_int8+0x20>
//	    printf("\n\r");
//	}
//

    return identity;
}
34000cec:	4620      	mov	r0, r4
34000cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

34000cf0 <LL_ATON_End_EpochBlock_int8>:
  };
  LL_ATON_EnableUnits_Init(enable_units, 4);
}

static void LL_ATON_End_EpochBlock_int8(const void *epoch_block)
{
34000cf0:	b508      	push	{r3, lr}

    { LL_Switch_Init_Dest() = ATONN_DSTPORT(STRSWITCH, 0, STRENG, 3, 0),
      LL_Switch_Init_Source(0) = ATONN_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0),
      LL_Switch_Init_Context(0) = 1, LL_Switch_Init_Frames(0) = 0 },
  };
  LL_Switch_Deinit(switch_deinit, 3);
34000cf2:	2103      	movs	r1, #3
34000cf4:	4804      	ldr	r0, [pc, #16]	@ (34000d08 <LL_ATON_End_EpochBlock_int8+0x18>)
34000cf6:	f00b fcf5 	bl	3400c6e4 <LL_Switch_Deinit>
    { {CONVACC, 0} },
    { {STRENG, 1} },
    { {STRENG, 9} },
  };
  LL_ATON_DisableUnits_Init(disable_units, 4);
}
34000cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DisableUnits_Init(disable_units, 4);
34000cfe:	2104      	movs	r1, #4
34000d00:	4802      	ldr	r0, [pc, #8]	@ (34000d0c <LL_ATON_End_EpochBlock_int8+0x1c>)
34000d02:	f00b bfeb 	b.w	3400ccdc <LL_ATON_DisableUnits_Init>
34000d06:	bf00      	nop
34000d08:	34011f40 	.word	0x34011f40
34000d0c:	34011f30 	.word	0x34011f30

34000d10 <LL_ATON_Start_EpochBlock_int8>:
{
34000d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34000d14:	b0c1      	sub	sp, #260	@ 0x104
  LL_Convacc_InitTypeDef conv_init = {
34000d16:	223c      	movs	r2, #60	@ 0x3c
34000d18:	2100      	movs	r1, #0
34000d1a:	a801      	add	r0, sp, #4
34000d1c:	f00d fd06 	bl	3400e72c <memset>
34000d20:	4b42      	ldr	r3, [pc, #264]	@ (34000e2c <LL_ATON_Start_EpochBlock_int8+0x11c>)
34000d22:	2501      	movs	r5, #1
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d24:	2640      	movs	r6, #64	@ 0x40
  LL_Convacc_InitTypeDef conv_init = {
34000d26:	9301      	str	r3, [sp, #4]
34000d28:	f240 1301 	movw	r3, #257	@ 0x101
    .nKernels = matmulInfo_int.insize,
34000d2c:	4c40      	ldr	r4, [pc, #256]	@ (34000e30 <LL_ATON_Start_EpochBlock_int8+0x120>)
  LL_Convacc_Init(0, &conv_init);
34000d2e:	a901      	add	r1, sp, #4
    .nKernels = matmulInfo_int.insize,
34000d30:	6862      	ldr	r2, [r4, #4]
  LL_Convacc_Init(0, &conv_init);
34000d32:	2000      	movs	r0, #0
  LL_Convacc_InitTypeDef conv_init = {
34000d34:	f88d 2016 	strb.w	r2, [sp, #22]
    .batchDepth = matmulInfo_int.outsize,
34000d38:	68a2      	ldr	r2, [r4, #8]
  LL_Convacc_InitTypeDef conv_init = {
34000d3a:	f8ad 3014 	strh.w	r3, [sp, #20]
34000d3e:	f8ad 301a 	strh.w	r3, [sp, #26]
34000d42:	f8ad 2018 	strh.w	r2, [sp, #24]
34000d46:	e9cd 5503 	strd	r5, r5, [sp, #12]
  LL_Convacc_Init(0, &conv_init);
34000d4a:	f00b fe3d 	bl	3400c9c8 <LL_Convacc_Init>
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d4e:	4632      	mov	r2, r6
34000d50:	eb0d 0006 	add.w	r0, sp, r6
34000d54:	2100      	movs	r1, #0
34000d56:	f00d fce9 	bl	3400e72c <memset>
34000d5a:	2302      	movs	r3, #2
34000d5c:	f640 0708 	movw	r7, #2056	@ 0x808
34000d60:	f04f 0910 	mov.w	r9, #16
34000d64:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
    .offset_start = matmulInfo_int.input_start,
34000d68:	69a3      	ldr	r3, [r4, #24]
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 34000e40 <LL_ATON_Start_EpochBlock_int8+0x130>
34000d6e:	9312      	str	r3, [sp, #72]	@ 0x48
    .offset_end = matmulInfo_int.input_end,
34000d70:	69e3      	ldr	r3, [r4, #28]
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000d72:	eb0d 0106 	add.w	r1, sp, r6
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d76:	9313      	str	r3, [sp, #76]	@ 0x4c
    .offset_limit = matmulInfo_int.input_limit,
34000d78:	6a23      	ldr	r3, [r4, #32]
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000d7a:	462a      	mov	r2, r5
34000d7c:	4628      	mov	r0, r5
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d7e:	9314      	str	r3, [sp, #80]	@ 0x50
34000d80:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
34000d84:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
34000d88:	951e      	str	r5, [sp, #120]	@ 0x78
34000d8a:	f8ad 707c 	strh.w	r7, [sp, #124]	@ 0x7c
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000d8e:	f00b fccf 	bl	3400c730 <LL_Streng_TensorInit>
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000d92:	4632      	mov	r2, r6
34000d94:	2100      	movs	r1, #0
34000d96:	a820      	add	r0, sp, #128	@ 0x80
34000d98:	f00d fcc8 	bl	3400e72c <memset>
34000d9c:	230a      	movs	r3, #10
34000d9e:	f88d 3080 	strb.w	r3, [sp, #128]	@ 0x80
    .offset_start = matmulInfo_int.weight_start,
34000da2:	68e3      	ldr	r3, [r4, #12]
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000da4:	462a      	mov	r2, r5
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000da6:	9322      	str	r3, [sp, #136]	@ 0x88
    .offset_end = matmulInfo_int.weight_end,
34000da8:	6923      	ldr	r3, [r4, #16]
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000daa:	a920      	add	r1, sp, #128	@ 0x80
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000dac:	9323      	str	r3, [sp, #140]	@ 0x8c
    .offset_limit = matmulInfo_int.weight_limit,
34000dae:	6963      	ldr	r3, [r4, #20]
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000db0:	2009      	movs	r0, #9
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000db2:	9324      	str	r3, [sp, #144]	@ 0x90
34000db4:	f8cd 8084 	str.w	r8, [sp, #132]	@ 0x84
34000db8:	952e      	str	r5, [sp, #184]	@ 0xb8
34000dba:	f8ad 70bc 	strh.w	r7, [sp, #188]	@ 0xbc
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000dbe:	f00b fcb7 	bl	3400c730 <LL_Streng_TensorInit>
  LL_Streng_TensorInitTypeDef output_tensor = {
34000dc2:	4632      	mov	r2, r6
34000dc4:	2603      	movs	r6, #3
34000dc6:	2100      	movs	r1, #0
34000dc8:	a830      	add	r0, sp, #192	@ 0xc0
34000dca:	f00d fcaf 	bl	3400e72c <memset>
    .offset_start = matmulInfo_int.output_start,
34000dce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000dd0:	462a      	mov	r2, r5
  LL_Streng_TensorInitTypeDef output_tensor = {
34000dd2:	9332      	str	r3, [sp, #200]	@ 0xc8
    .offset_end = matmulInfo_int.output_end,
34000dd4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000dd6:	a930      	add	r1, sp, #192	@ 0xc0
  LL_Streng_TensorInitTypeDef output_tensor = {
34000dd8:	9333      	str	r3, [sp, #204]	@ 0xcc
    .offset_limit = matmulInfo_int.output_limit,
34000dda:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000ddc:	4630      	mov	r0, r6
  LL_Streng_TensorInitTypeDef output_tensor = {
34000dde:	9334      	str	r3, [sp, #208]	@ 0xd0
34000de0:	f88d 60c0 	strb.w	r6, [sp, #192]	@ 0xc0
34000de4:	f8cd 80c4 	str.w	r8, [sp, #196]	@ 0xc4
34000de8:	f8cd 90e8 	str.w	r9, [sp, #232]	@ 0xe8
34000dec:	953e      	str	r5, [sp, #248]	@ 0xf8
34000dee:	f8ad 70fc 	strh.w	r7, [sp, #252]	@ 0xfc
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000df2:	f00b fc9d 	bl	3400c730 <LL_Streng_TensorInit>
  printf("Output Start: %d",matmulInfo_int.output_start);
34000df6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34000df8:	480e      	ldr	r0, [pc, #56]	@ (34000e34 <LL_ATON_Start_EpochBlock_int8+0x124>)
34000dfa:	f00d fb4f 	bl	3400e49c <iprintf>
  LL_Switch_Init(switch_init, 3);
34000dfe:	4631      	mov	r1, r6
34000e00:	480d      	ldr	r0, [pc, #52]	@ (34000e38 <LL_ATON_Start_EpochBlock_int8+0x128>)
34000e02:	f00b fc5f 	bl	3400c6c4 <LL_Switch_Init>
  LL_ATON_Cache_MCU_Invalidate_Range((uintptr_t)(0x34200000UL + matmulInfo_int.input_start), matmulInfo_int.output_end - matmulInfo_int.input_start); /// Very Important!!
34000e06:	69a0      	ldr	r0, [r4, #24]
34000e08:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
34000e0a:	69a3      	ldr	r3, [r4, #24]
34000e0c:	f100 5050 	add.w	r0, r0, #872415232	@ 0x34000000
34000e10:	1ac9      	subs	r1, r1, r3
34000e12:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
34000e16:	4401      	add	r1, r0
34000e18:	f000 faca 	bl	340013b0 <mcu_cache_invalidate_range>
  LL_ATON_EnableUnits_Init(enable_units, 4);
34000e1c:	2104      	movs	r1, #4
34000e1e:	4807      	ldr	r0, [pc, #28]	@ (34000e3c <LL_ATON_Start_EpochBlock_int8+0x12c>)
34000e20:	f00b fbde 	bl	3400c5e0 <LL_ATON_EnableUnits_Init>
}
34000e24:	b041      	add	sp, #260	@ 0x104
34000e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
34000e2a:	bf00      	nop
34000e2c:	004015d0 	.word	0x004015d0
34000e30:	34012594 	.word	0x34012594
34000e34:	3401055d 	.word	0x3401055d
34000e38:	34011f00 	.word	0x34011f00
34000e3c:	34011ef0 	.word	0x34011ef0
34000e40:	34200000 	.word	0x34200000

34000e44 <LL_ATON_Set_User_Input_Buffer_int8>:
}
34000e44:	2003      	movs	r0, #3
34000e46:	4770      	bx	lr

34000e48 <LL_ATON_Get_User_Input_Buffer_int8>:
}
34000e48:	2000      	movs	r0, #0
34000e4a:	4770      	bx	lr

34000e4c <LL_ATON_Set_User_Output_Buffer_int8>:
LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_int8(uint32_t num, void* buffer, uint32_t size)
34000e4c:	2003      	movs	r0, #3
34000e4e:	4770      	bx	lr

34000e50 <LL_ATON_Get_User_Output_Buffer_int8>:
void *LL_ATON_Get_User_Output_Buffer_int8(uint32_t num)
34000e50:	2000      	movs	r0, #0
34000e52:	4770      	bx	lr

34000e54 <LL_ATON_EC_Network_Init_int8>:
}
34000e54:	2001      	movs	r0, #1
34000e56:	4770      	bx	lr

34000e58 <LL_ATON_EC_Inference_Init_int8>:
bool LL_ATON_EC_Inference_Init_int8(void)
34000e58:	2001      	movs	r0, #1
34000e5a:	4770      	bx	lr

34000e5c <LL_ATON_EpochBlockItems_int8>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
34000e5c:	4800      	ldr	r0, [pc, #0]	@ (34000e60 <LL_ATON_EpochBlockItems_int8+0x4>)
34000e5e:	4770      	bx	lr
34000e60:	34011f70 	.word	0x34011f70

34000e64 <LL_ATON_Input_Buffers_Info_int8>:
#endif // LL_ATON_DBG_BUFFER_INFO_EXCLUDED == 0
  LL_Buffer_InfoTypeDef buff_info[] = {
    {
      .name = "Input_0_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
34000e64:	4b02      	ldr	r3, [pc, #8]	@ (34000e70 <LL_ATON_Input_Buffers_Info_int8+0xc>)
      .name = NULL,
    }
  };

  return buff_info;
}
34000e66:	2000      	movs	r0, #0
      .offset_start = matmulInfo_int.input_start,
34000e68:	699a      	ldr	r2, [r3, #24]
      .offset_end = matmulInfo_int.input_end,
34000e6a:	69da      	ldr	r2, [r3, #28]
      .offset_limit = matmulInfo_int.input_limit,
34000e6c:	6a1b      	ldr	r3, [r3, #32]
}
34000e6e:	4770      	bx	lr
34000e70:	34012594 	.word	0x34012594

34000e74 <LL_ATON_Output_Buffers_Info_int8>:
  static const int16_t buff_info_Quantize_3_out_0_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
    {
      .name = "Quantize_3_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.output_start,
34000e74:	4b02      	ldr	r3, [pc, #8]	@ (34000e80 <LL_ATON_Output_Buffers_Info_int8+0xc>)
      .name = NULL,
    }
  };

  return buff_info;
}
34000e76:	2000      	movs	r0, #0
      .offset_start = matmulInfo_int.output_start,
34000e78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      .offset_end = matmulInfo_int.output_end,
34000e7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      .offset_limit = matmulInfo_int.output_limit,
34000e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
34000e7e:	4770      	bx	lr
34000e80:	34012594 	.word	0x34012594

34000e84 <LL_ATON_Internal_Buffers_Info_int8>:
  static const int16_t buff_info_Gemm_2_conv_4_off_bias_out_13_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
    {
      .name = "Gemm_2_reshape_x_2",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
34000e84:	4b04      	ldr	r3, [pc, #16]	@ (34000e98 <LL_ATON_Internal_Buffers_Info_int8+0x14>)
      .name = NULL,
    }
  };

  return buff_info;
}
34000e86:	2000      	movs	r0, #0
      .offset_start = matmulInfo_int.input_start,
34000e88:	699a      	ldr	r2, [r3, #24]
      .offset_end = matmulInfo_int.input_end,
34000e8a:	69da      	ldr	r2, [r3, #28]
      .offset_limit = matmulInfo_int.input_limit,
34000e8c:	6a1a      	ldr	r2, [r3, #32]
      .offset_start = matmulInfo_int.output_start,
34000e8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      .offset_end = matmulInfo_int.output_end,
34000e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      .offset_limit = matmulInfo_int.output_limit,
34000e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
34000e94:	4770      	bx	lr
34000e96:	bf00      	nop
34000e98:	34012594 	.word	0x34012594

34000e9c <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34000e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
34000e9e:	4b15      	ldr	r3, [pc, #84]	@ (34000ef4 <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000ea0:	217c      	movs	r1, #124	@ 0x7c
34000ea2:	aa01      	add	r2, sp, #4
34000ea4:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
34000ea6:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000ea8:	f001 fb00 	bl	340024ac <HAL_BSEC_OTP_Read>
34000eac:	4603      	mov	r3, r0
34000eae:	b9e0      	cbnz	r0, 34000eea <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
34000eb0:	9a01      	ldr	r2, [sp, #4]
34000eb2:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
34000eb6:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
34000eba:	d017      	beq.n	34000eec <Fuse_Programming+0x50>
    {
      data |= bit_mask;
34000ebc:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000ec0:	217c      	movs	r1, #124	@ 0x7c
34000ec2:	a802      	add	r0, sp, #8
      data |= bit_mask;
34000ec4:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000ec6:	f001 fb0d 	bl	340024e4 <HAL_BSEC_OTP_Program>
34000eca:	b968      	cbnz	r0, 34000ee8 <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000ecc:	217c      	movs	r1, #124	@ 0x7c
34000ece:	aa01      	add	r2, sp, #4
34000ed0:	a802      	add	r0, sp, #8
34000ed2:	f001 faeb 	bl	340024ac <HAL_BSEC_OTP_Read>
34000ed6:	b930      	cbnz	r0, 34000ee6 <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
34000ed8:	9b01      	ldr	r3, [sp, #4]
34000eda:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
34000ede:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
34000ee2:	d003      	beq.n	34000eec <Fuse_Programming+0x50>
34000ee4:	e7fe      	b.n	34000ee4 <Fuse_Programming+0x48>
34000ee6:	e7fe      	b.n	34000ee6 <Fuse_Programming+0x4a>
34000ee8:	e7fe      	b.n	34000ee8 <Fuse_Programming+0x4c>
34000eea:	e7fe      	b.n	34000eea <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
34000eec:	b005      	add	sp, #20
34000eee:	f85d fb04 	ldr.w	pc, [sp], #4
34000ef2:	bf00      	nop
34000ef4:	56009000 	.word	0x56009000

34000ef8 <LL_MEM_EnableClock>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34000ef8:	4b04      	ldr	r3, [pc, #16]	@ (34000f0c <LL_MEM_EnableClock+0x14>)
{
34000efa:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
34000efc:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34000f00:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34000f04:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000f06:	9b01      	ldr	r3, [sp, #4]
}
34000f08:	b002      	add	sp, #8
34000f0a:	4770      	bx	lr
34000f0c:	56028000 	.word	0x56028000

34000f10 <LL_MEM_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000f10:	4b04      	ldr	r3, [pc, #16]	@ (34000f24 <LL_MEM_EnableClockLowPower+0x14>)
{
34000f12:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000f14:	f8c3 0a8c 	str.w	r0, [r3, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
34000f18:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34000f1c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000f1e:	9b01      	ldr	r3, [sp, #4]
}
34000f20:	b002      	add	sp, #8
34000f22:	4770      	bx	lr
34000f24:	56028000 	.word	0x56028000

34000f28 <LL_AHB5_GRP1_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000f28:	4b04      	ldr	r3, [pc, #16]	@ (34000f3c <LL_AHB5_GRP1_EnableClockLowPower+0x14>)
{
34000f2a:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000f2c:	f8c3 0aa0 	str.w	r0, [r3, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34000f30:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34000f34:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000f36:	9b01      	ldr	r3, [sp, #4]
}
34000f38:	b002      	add	sp, #8
34000f3a:	4770      	bx	lr
34000f3c:	56028000 	.word	0x56028000

34000f40 <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
34000f40:	b530      	push	{r4, r5, lr}
34000f42:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34000f46:	2240      	movs	r2, #64	@ 0x40
34000f48:	2100      	movs	r1, #0
34000f4a:	4668      	mov	r0, sp
34000f4c:	f00d fbee 	bl	3400e72c <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34000f50:	2298      	movs	r2, #152	@ 0x98
34000f52:	2100      	movs	r1, #0
34000f54:	a810      	add	r0, sp, #64	@ 0x40
34000f56:	f00d fbe9 	bl	3400e72c <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34000f5a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
34000f5e:	2100      	movs	r1, #0
34000f60:	a836      	add	r0, sp, #216	@ 0xd8
34000f62:	f00d fbe3 	bl	3400e72c <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
34000f66:	2001      	movs	r0, #1
34000f68:	f000 fd78 	bl	34001a5c <BSP_SMPS_Init>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34000f6c:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000f6e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34000f70:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
34000f72:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34000f74:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34000f76:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34000f7a:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
34000f7e:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
34000f80:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34000f82:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34000f86:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34000f8a:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
34000f8e:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34000f92:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
34000f96:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
34000f9a:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000f9e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
34000fa0:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000fa2:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34000fa4:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34000fa8:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
34000fac:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
34000fb0:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
34000fb4:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
34000fb6:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000fb8:	f003 f9ec 	bl	34004394 <HAL_RCC_OscConfig>
34000fbc:	b100      	cbz	r0, 34000fc0 <SystemClock_Config+0x80>
  {
    while(1);
34000fbe:	e7fe      	b.n	34000fbe <SystemClock_Config+0x7e>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34000fc0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34000fc4:	227f      	movs	r2, #127	@ 0x7f
34000fc6:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34000fca:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34000fce:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
34000fd0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
34000fd4:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
34000fd8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
34000fdc:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34000fe0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
34000fe4:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
34000fe8:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34000fec:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34000ff0:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34000ff4:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34000ff6:	4668      	mov	r0, sp
34000ff8:	f003 fdc8 	bl	34004b8c <HAL_RCC_ClockConfig>
34000ffc:	b100      	cbz	r0, 34001000 <SystemClock_Config+0xc0>
  {
    while(1);
34000ffe:	e7fe      	b.n	34000ffe <SystemClock_Config+0xbe>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34001000:	4b08      	ldr	r3, [pc, #32]	@ (34001024 <SystemClock_Config+0xe4>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34001002:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34001004:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34001006:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
3400100a:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
3400100e:	4b06      	ldr	r3, [pc, #24]	@ (34001028 <SystemClock_Config+0xe8>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34001010:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34001012:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34001014:	f004 f96c 	bl	340052f0 <HAL_RCCEx_PeriphCLKConfig>
34001018:	b100      	cbz	r0, 3400101c <SystemClock_Config+0xdc>
  {
    while (1);
3400101a:	e7fe      	b.n	3400101a <SystemClock_Config+0xda>
  }
}
3400101c:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
34001020:	bd30      	pop	{r4, r5, pc}
34001022:	bf00      	nop
34001024:	03000014 	.word	0x03000014
34001028:	03000414 	.word	0x03000414

3400102c <Hardware_init>:
{
3400102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34001030:	4a89      	ldr	r2, [pc, #548]	@ (34001258 <Hardware_init+0x22c>)
{
34001032:	b08d      	sub	sp, #52	@ 0x34
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34001034:	6813      	ldr	r3, [r2, #0]
34001036:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
3400103a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
3400103c:	4b87      	ldr	r3, [pc, #540]	@ (3400125c <Hardware_init+0x230>)
3400103e:	6a1a      	ldr	r2, [r3, #32]
34001040:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
34001044:	621a      	str	r2, [r3, #32]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
34001046:	6a1a      	ldr	r2, [r3, #32]
34001048:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
3400104c:	621a      	str	r2, [r3, #32]
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
3400104e:	2210      	movs	r2, #16
34001050:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34001054:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34001058:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400105a:	9b01      	ldr	r3, [sp, #4]
  HAL_Init();
3400105c:	f001 f9ae 	bl	340023bc <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34001060:	4b7f      	ldr	r3, [pc, #508]	@ (34001260 <Hardware_init+0x234>)
34001062:	695a      	ldr	r2, [r3, #20]
34001064:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
34001068:	d111      	bne.n	3400108e <Hardware_init+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
3400106a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400106e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34001072:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34001076:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400107a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
3400107e:	695a      	ldr	r2, [r3, #20]
34001080:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34001084:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34001086:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400108a:	f3bf 8f6f 	isb	sy
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400108e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34001092:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
  RAMCFG_HandleTypeDef hramcfg = {0};
34001096:	2600      	movs	r6, #0
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001098:	4c70      	ldr	r4, [pc, #448]	@ (3400125c <Hardware_init+0x230>)
  SystemClock_Config();
3400109a:	f7ff ff51 	bl	34000f40 <SystemClock_Config>
3400109e:	f8c4 7a60 	str.w	r7, [r4, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
340010a2:	f8d4 3260 	ldr.w	r3, [r4, #608]	@ 0x260
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340010a6:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 34001294 <Hardware_init+0x268>
  tmpreg = READ_REG(RCC->AHB5ENR);
340010aa:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
340010ac:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
340010ae:	2001      	movs	r0, #1
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340010b0:	f8c4 7a20 	str.w	r7, [r4, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340010b4:	f8cb 7220 	str.w	r7, [fp, #544]	@ 0x220
340010b8:	f7ff ff1e 	bl	34000ef8 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
340010bc:	2002      	movs	r0, #2
340010be:	f7ff ff1b 	bl	34000ef8 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
340010c2:	2004      	movs	r0, #4
340010c4:	f7ff ff18 	bl	34000ef8 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
340010c8:	2008      	movs	r0, #8
340010ca:	f7ff ff15 	bl	34000ef8 <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
340010ce:	f8c4 aa54 	str.w	sl, [r4, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
340010d2:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340010d6:	a808      	add	r0, sp, #32
340010d8:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
340010da:	9b02      	ldr	r3, [sp, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
340010dc:	4b61      	ldr	r3, [pc, #388]	@ (34001264 <Hardware_init+0x238>)
  RAMCFG_HandleTypeDef hramcfg = {0};
340010de:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
340010e2:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340010e4:	f002 ff32 	bl	34003f4c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
340010e8:	4b5f      	ldr	r3, [pc, #380]	@ (34001268 <Hardware_init+0x23c>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340010ea:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
340010ec:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340010ee:	f002 ff2d 	bl	34003f4c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
340010f2:	4b5e      	ldr	r3, [pc, #376]	@ (3400126c <Hardware_init+0x240>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340010f4:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
340010f6:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340010f8:	f002 ff28 	bl	34003f4c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
340010fc:	4b5c      	ldr	r3, [pc, #368]	@ (34001270 <Hardware_init+0x244>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340010fe:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34001100:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001102:	f002 ff23 	bl	34003f4c <HAL_RAMCFG_EnableAXISRAM>
  Fuse_Programming();
34001106:	f7ff fec9 	bl	34000e9c <Fuse_Programming>
  npu_cache_init();
3400110a:	f000 f97b 	bl	34001404 <npu_cache_init>
  npu_cache_enable();
3400110e:	f000 f983 	bl	34001418 <npu_cache_enable>
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
34001112:	f240 1301 	movw	r3, #257	@ 0x101
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34001116:	f44f 7900 	mov.w	r9, #512	@ 0x200
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3400111a:	2503      	movs	r5, #3
3400111c:	f04f 0802 	mov.w	r8, #2
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001120:	4669      	mov	r1, sp
34001122:	4630      	mov	r0, r6
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
34001124:	f8ad 3000 	strh.w	r3, [sp]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001128:	f000 fe6e 	bl	34001e08 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
3400112c:	4630      	mov	r0, r6
3400112e:	f000 fddf 	bl	34001cf0 <BSP_XSPI_NOR_EnableMemoryMappedMode>
34001132:	f8c4 9a58 	str.w	r9, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
34001136:	f8d4 3258 	ldr.w	r3, [r4, #600]	@ 0x258
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3400113a:	a908      	add	r1, sp, #32
3400113c:	9304      	str	r3, [sp, #16]
3400113e:	2001      	movs	r0, #1
  (void)tmpreg;
34001140:	9b04      	ldr	r3, [sp, #16]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34001142:	e9cd 8508 	strd	r8, r5, [sp, #32]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34001146:	f008 ff01 	bl	34009f4c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
3400114a:	a908      	add	r1, sp, #32
3400114c:	2008      	movs	r0, #8
3400114e:	f008 fefd 	bl	34009f4c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
34001152:	a908      	add	r1, sp, #32
34001154:	2009      	movs	r0, #9
34001156:	f008 fef9 	bl	34009f4c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
3400115a:	a908      	add	r1, sp, #32
3400115c:	200a      	movs	r0, #10
3400115e:	f008 fef5 	bl	34009f4c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
34001162:	a908      	add	r1, sp, #32
34001164:	200b      	movs	r0, #11
34001166:	f008 fef1 	bl	34009f4c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
3400116a:	a908      	add	r1, sp, #32
3400116c:	2004      	movs	r0, #4
3400116e:	f008 feed 	bl	34009f4c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001172:	4629      	mov	r1, r5
34001174:	483f      	ldr	r0, [pc, #252]	@ (34001274 <Hardware_init+0x248>)
34001176:	f008 ff3f 	bl	34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400117a:	4629      	mov	r1, r5
3400117c:	483e      	ldr	r0, [pc, #248]	@ (34001278 <Hardware_init+0x24c>)
3400117e:	f008 ff3b 	bl	34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001182:	4629      	mov	r1, r5
34001184:	483d      	ldr	r0, [pc, #244]	@ (3400127c <Hardware_init+0x250>)
34001186:	f008 ff37 	bl	34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400118a:	4629      	mov	r1, r5
3400118c:	483c      	ldr	r0, [pc, #240]	@ (34001280 <Hardware_init+0x254>)
3400118e:	f008 ff33 	bl	34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001192:	4629      	mov	r1, r5
34001194:	483b      	ldr	r0, [pc, #236]	@ (34001284 <Hardware_init+0x258>)
34001196:	f008 ff2f 	bl	34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400119a:	4629      	mov	r1, r5
3400119c:	483a      	ldr	r0, [pc, #232]	@ (34001288 <Hardware_init+0x25c>)
3400119e:	f008 ff2b 	bl	34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011a2:	4629      	mov	r1, r5
340011a4:	4839      	ldr	r0, [pc, #228]	@ (3400128c <Hardware_init+0x260>)
340011a6:	f008 ff27 	bl	34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011aa:	4629      	mov	r1, r5
340011ac:	4838      	ldr	r0, [pc, #224]	@ (34001290 <Hardware_init+0x264>)
340011ae:	f008 ff23 	bl	34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011b2:	4629      	mov	r1, r5
340011b4:	2004      	movs	r0, #4
340011b6:	f008 ff1f 	bl	34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
340011ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340011be:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
340011c2:	f8d4 2258 	ldr.w	r2, [r4, #600]	@ 0x258
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
340011c6:	2020      	movs	r0, #32
340011c8:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
340011ca:	9a05      	ldr	r2, [sp, #20]
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
340011cc:	2204      	movs	r2, #4
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
340011ce:	f8c4 3a18 	str.w	r3, [r4, #2584]	@ 0xa18
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
340011d2:	f8cb 3218 	str.w	r3, [fp, #536]	@ 0x218
340011d6:	f7ff fea7 	bl	34000f28 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
340011da:	4650      	mov	r0, sl
340011dc:	f7ff fea4 	bl	34000f28 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
340011e0:	4638      	mov	r0, r7
340011e2:	f7ff fea1 	bl	34000f28 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
340011e6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
340011ea:	f7ff fe9d 	bl	34000f28 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
340011ee:	4640      	mov	r0, r8
340011f0:	f7ff fe9a 	bl	34000f28 <LL_AHB5_GRP1_EnableClockLowPower>
  WRITE_REG(RCC->APB5LPENSR, Periphs);
340011f4:	f8c4 2abc 	str.w	r2, [r4, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
340011f8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
340011fc:	4648      	mov	r0, r9
340011fe:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
34001200:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34001202:	2340      	movs	r3, #64	@ 0x40
34001204:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34001208:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  BSP_COM_Init(COM1, &com_config);
3400120c:	a908      	add	r1, sp, #32
3400120e:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
34001210:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34001212:	f7ff fe7d 	bl	34000f10 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
34001216:	2080      	movs	r0, #128	@ 0x80
34001218:	f7ff fe7a 	bl	34000f10 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
3400121c:	f44f 7080 	mov.w	r0, #256	@ 0x100
34001220:	f7ff fe76 	bl	34000f10 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
34001224:	2001      	movs	r0, #1
34001226:	f7ff fe73 	bl	34000f10 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
3400122a:	4640      	mov	r0, r8
3400122c:	f7ff fe70 	bl	34000f10 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
34001230:	4610      	mov	r0, r2
34001232:	f7ff fe6d 	bl	34000f10 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
34001236:	2008      	movs	r0, #8
34001238:	f7ff fe6a 	bl	34000f10 <LL_MEM_EnableClockLowPower>
  COM_InitTypeDef com_config = {
3400123c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  BSP_COM_Init(COM1, &com_config);
34001240:	4630      	mov	r0, r6
  COM_InitTypeDef com_config = {
34001242:	e9cd 3608 	strd	r3, r6, [sp, #32]
34001246:	960a      	str	r6, [sp, #40]	@ 0x28
34001248:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
  BSP_COM_Init(COM1, &com_config);
3400124c:	f000 fc3c 	bl	34001ac8 <BSP_COM_Init>
}
34001250:	b00d      	add	sp, #52	@ 0x34
34001252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34001256:	bf00      	nop
34001258:	e001e000 	.word	0xe001e000
3400125c:	56028000 	.word	0x56028000
34001260:	e000ed00 	.word	0xe000ed00
34001264:	52023100 	.word	0x52023100
34001268:	52023180 	.word	0x52023180
3400126c:	52023200 	.word	0x52023200
34001270:	52023280 	.word	0x52023280
34001274:	3000000a 	.word	0x3000000a
34001278:	30000005 	.word	0x30000005
3400127c:	2000001c 	.word	0x2000001c
34001280:	2000001d 	.word	0x2000001d
34001284:	30000006 	.word	0x30000006
34001288:	30000007 	.word	0x30000007
3400128c:	30000008 	.word	0x30000008
34001290:	10000018 	.word	0x10000018
34001294:	56029000 	.word	0x56029000

34001298 <enableTiming_Cyc>:
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
34001298:	4a06      	ldr	r2, [pc, #24]	@ (340012b4 <enableTiming_Cyc+0x1c>)
3400129a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400129e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
340012a2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
340012a6:	f5a2 425d 	sub.w	r2, r2, #56576	@ 0xdd00
340012aa:	6813      	ldr	r3, [r2, #0]
340012ac:	f043 0301 	orr.w	r3, r3, #1
340012b0:	6013      	str	r3, [r2, #0]
}
340012b2:	4770      	bx	lr
340012b4:	e000ed00 	.word	0xe000ed00

340012b8 <NPU_MatMul_int8>:
int NPU_MatMul_int8(size_t insize,size_t outsize){
340012b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340012bc:	4604      	mov	r4, r0
340012be:	b083      	sub	sp, #12
340012c0:	af00      	add	r7, sp, #0
340012c2:	460d      	mov	r5, r1
	Hardware_init();
340012c4:	f7ff feb2 	bl	3400102c <Hardware_init>
	printf("=== MatMul int8 Main ===\n\r");
340012c8:	481b      	ldr	r0, [pc, #108]	@ (34001338 <NPU_MatMul_int8+0x80>)
340012ca:	f00d f8e7 	bl	3400e49c <iprintf>
    int8_t inVec[insize];
340012ce:	1de3      	adds	r3, r4, #7
340012d0:	f023 0307 	bic.w	r3, r3, #7
340012d4:	ebad 0d03 	sub.w	sp, sp, r3
340012d8:	46e9      	mov	r9, sp
    for (int i = 0; i < insize; i++) {
340012da:	2300      	movs	r3, #0
340012dc:	1c62      	adds	r2, r4, #1
340012de:	3a01      	subs	r2, #1
340012e0:	d126      	bne.n	34001330 <NPU_MatMul_int8+0x78>
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
340012e2:	4629      	mov	r1, r5
340012e4:	4620      	mov	r0, r4
340012e6:	f7ff fcdd 	bl	34000ca4 <getIdentityWeights_int8>
	npu_matvec_int8_init(insize,outsize);
340012ea:	4629      	mov	r1, r5
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
340012ec:	4606      	mov	r6, r0
	npu_matvec_int8_init(insize,outsize);
340012ee:	4620      	mov	r0, r4
340012f0:	f7ff fc62 	bl	34000bb8 <npu_matvec_int8_init>
	DWT->CYCCNT = 0; // Reset counter
340012f4:	f04f 0b00 	mov.w	fp, #0
340012f8:	f8df a048 	ldr.w	sl, [pc, #72]	@ 34001344 <NPU_MatMul_int8+0x8c>
		outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
340012fc:	4633      	mov	r3, r6
340012fe:	462a      	mov	r2, r5
34001300:	4621      	mov	r1, r4
34001302:	4648      	mov	r0, r9
	DWT->CYCCNT = 0; // Reset counter
34001304:	f8ca b004 	str.w	fp, [sl, #4]
		outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
34001308:	f7ff fc82 	bl	34000c10 <npu_matvec_int8_run>
	uint32_t cycles = DWT->CYCCNT;
3400130c:	f8da 1004 	ldr.w	r1, [sl, #4]
		outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
34001310:	4680      	mov	r8, r0
		printf("NPU int8 Cycles: %4d",cycles);
34001312:	480a      	ldr	r0, [pc, #40]	@ (3400133c <NPU_MatMul_int8+0x84>)
34001314:	f00d f8c2 	bl	3400e49c <iprintf>
		for(size_t i = 0;i < outsize;i++){
34001318:	2100      	movs	r1, #0
3400131a:	42a9      	cmp	r1, r5
3400131c:	d0ee      	beq.n	340012fc <NPU_MatMul_int8+0x44>
			printf("Output %2d: %4d\n\r",i,output);
3400131e:	f918 2001 	ldrsb.w	r2, [r8, r1]
34001322:	4807      	ldr	r0, [pc, #28]	@ (34001340 <NPU_MatMul_int8+0x88>)
34001324:	6079      	str	r1, [r7, #4]
34001326:	f00d f8b9 	bl	3400e49c <iprintf>
		for(size_t i = 0;i < outsize;i++){
3400132a:	6879      	ldr	r1, [r7, #4]
3400132c:	3101      	adds	r1, #1
3400132e:	e7f4      	b.n	3400131a <NPU_MatMul_int8+0x62>
    	inVec[i] = (int8_t)((i) % 256);  // Example input: cycles through -128 to 127
34001330:	f809 3003 	strb.w	r3, [r9, r3]
    for (int i = 0; i < insize; i++) {
34001334:	3301      	adds	r3, #1
34001336:	e7d2      	b.n	340012de <NPU_MatMul_int8+0x26>
34001338:	3401056e 	.word	0x3401056e
3400133c:	34010589 	.word	0x34010589
34001340:	3401059e 	.word	0x3401059e
34001344:	e0001000 	.word	0xe0001000

34001348 <main>:
{
34001348:	b508      	push	{r3, lr}
	Hardware_init();
3400134a:	f7ff fe6f 	bl	3400102c <Hardware_init>
	NPU_MatMul_int8(insize,outsize);
3400134e:	2108      	movs	r1, #8
34001350:	4608      	mov	r0, r1
	enableTiming_Cyc();
34001352:	f7ff ffa1 	bl	34001298 <enableTiming_Cyc>
	NPU_MatMul_int8(insize,outsize);
34001356:	f7ff ffaf 	bl	340012b8 <NPU_MatMul_int8>
	...

3400135c <_write>:
{
3400135c:	b510      	push	{r4, lr}
3400135e:	4614      	mov	r4, r2
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
34001360:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001364:	b292      	uxth	r2, r2
34001366:	4802      	ldr	r0, [pc, #8]	@ (34001370 <_write+0x14>)
34001368:	f009 f9d2 	bl	3400a710 <HAL_UART_Transmit>
}
3400136c:	4620      	mov	r0, r4
3400136e:	bd10      	pop	{r4, pc}
34001370:	340125d0 	.word	0x340125d0

34001374 <IAC_IRQHandler>:
  while (1)
34001374:	e7fe      	b.n	34001374 <IAC_IRQHandler>
	...

34001378 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34001378:	b507      	push	{r0, r1, r2, lr}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400137a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
3400137e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001382:	f7ff fdb9 	bl	34000ef8 <LL_MEM_EnableClock>
34001386:	4b08      	ldr	r3, [pc, #32]	@ (340013a8 <HAL_CACHEAXI_MspInit+0x30>)
34001388:	f8c3 2a60 	str.w	r2, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400138c:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
34001390:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
34001392:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001394:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400139c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
340013a0:	b003      	add	sp, #12
340013a2:	f85d fb04 	ldr.w	pc, [sp], #4
340013a6:	bf00      	nop
340013a8:	56028000 	.word	0x56028000

340013ac <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
340013ac:	be00      	bkpt	0x0000
  while (1)
340013ae:	e7fe      	b.n	340013ae <assert_failed+0x2>

340013b0 <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
340013b0:	b530      	push	{r4, r5, lr}

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
340013b2:	4d13      	ldr	r5, [pc, #76]	@ (34001400 <mcu_cache_invalidate_range+0x50>)
340013b4:	696b      	ldr	r3, [r5, #20]
340013b6:	03db      	lsls	r3, r3, #15
340013b8:	d51f      	bpl.n	340013fa <mcu_cache_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
340013ba:	1a0a      	subs	r2, r1, r0
    if ( dsize > 0 ) {
340013bc:	2a00      	cmp	r2, #0
340013be:	dd1c      	ble.n	340013fa <mcu_cache_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
340013c0:	f000 031f 	and.w	r3, r0, #31
340013c4:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
340013c6:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
340013ca:	1884      	adds	r4, r0, r2
340013cc:	43c2      	mvns	r2, r0
340013ce:	1a1b      	subs	r3, r3, r0
340013d0:	440b      	add	r3, r1
340013d2:	4422      	add	r2, r4
340013d4:	3b20      	subs	r3, #32
340013d6:	0952      	lsrs	r2, r2, #5
340013d8:	3320      	adds	r3, #32
340013da:	f102 0e01 	add.w	lr, r2, #1
340013de:	bfd8      	it	le
340013e0:	f04f 0e01 	movle.w	lr, #1
340013e4:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
340013e8:	f8c5 025c 	str.w	r0, [r5, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
340013ec:	3020      	adds	r0, #32
      } while ( op_size > 0 );
340013ee:	f00f c805 	le	lr, 340013e8 <mcu_cache_invalidate_range+0x38>
340013f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340013f6:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
340013fa:	2000      	movs	r0, #0
340013fc:	bd30      	pop	{r4, r5, pc}
340013fe:	bf00      	nop
34001400:	e000ed00 	.word	0xe000ed00

34001404 <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
34001404:	4802      	ldr	r0, [pc, #8]	@ (34001410 <npu_cache_init+0xc>)
34001406:	4b03      	ldr	r3, [pc, #12]	@ (34001414 <npu_cache_init+0x10>)
34001408:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
3400140a:	f001 b8ff 	b.w	3400260c <HAL_CACHEAXI_Init>
3400140e:	bf00      	nop
34001410:	340125c4 	.word	0x340125c4
34001414:	580dfc00 	.word	0x580dfc00

34001418 <npu_cache_enable>:
}

void npu_cache_enable(void)
{
34001418:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
3400141a:	4c03      	ldr	r4, [pc, #12]	@ (34001428 <npu_cache_enable+0x10>)
3400141c:	4620      	mov	r0, r4
3400141e:	f001 f8c1 	bl	340025a4 <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
34001422:	2802      	cmp	r0, #2
34001424:	d0fa      	beq.n	3400141c <npu_cache_enable+0x4>
}
34001426:	bd10      	pop	{r4, pc}
34001428:	340125c4 	.word	0x340125c4

3400142c <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
3400142c:	4770      	bx	lr

3400142e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
3400142e:	e7fe      	b.n	3400142e <HardFault_Handler>

34001430 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
34001430:	e7fe      	b.n	34001430 <MemManage_Handler>

34001432 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
34001432:	e7fe      	b.n	34001432 <BusFault_Handler>

34001434 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
34001434:	e7fe      	b.n	34001434 <UsageFault_Handler>

34001436 <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
34001436:	e7fe      	b.n	34001436 <SecureFault_Handler>

34001438 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
34001438:	4770      	bx	lr

3400143a <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
3400143a:	e7fe      	b.n	3400143a <DebugMon_Handler>

3400143c <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
  while (1)
3400143c:	e7fe      	b.n	3400143c <PendSV_Handler>

3400143e <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
3400143e:	f000 bfcf 	b.w	340023e0 <HAL_IncTick>

34001442 <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
34001442:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001444:	f00a fb30 	bl	3400baa8 <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
}
34001448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
3400144c:	f001 bae0 	b.w	34002a10 <HAL_DCMIPP_CSI_IRQHandler>

34001450 <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
34001450:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001452:	f00a fb29 	bl	3400baa8 <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
34001456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
3400145a:	f001 b9a3 	b.w	340027a4 <HAL_DCMIPP_IRQHandler>

3400145e <_getpid>:
}

int _getpid(void)
{
  return 1;
}
3400145e:	2001      	movs	r0, #1
34001460:	4770      	bx	lr

34001462 <_kill>:

int _kill(int pid, int sig)
{
34001462:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
34001464:	f00d fbb6 	bl	3400ebd4 <__errno>
34001468:	2316      	movs	r3, #22
3400146a:	6003      	str	r3, [r0, #0]
  return -1;
}
3400146c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001470:	bd08      	pop	{r3, pc}

34001472 <_exit>:

void _exit (int status)
{
34001472:	b508      	push	{r3, lr}
  errno = EINVAL;
34001474:	f00d fbae 	bl	3400ebd4 <__errno>
34001478:	2316      	movs	r3, #22
3400147a:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
3400147c:	e7fe      	b.n	3400147c <_exit+0xa>

3400147e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
3400147e:	b570      	push	{r4, r5, r6, lr}
34001480:	460d      	mov	r5, r1
34001482:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001484:	460e      	mov	r6, r1
34001486:	1b73      	subs	r3, r6, r5
34001488:	429c      	cmp	r4, r3
3400148a:	dc01      	bgt.n	34001490 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
3400148c:	4620      	mov	r0, r4
3400148e:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
34001490:	f3af 8000 	nop.w
34001494:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001498:	e7f5      	b.n	34001486 <_read+0x8>

3400149a <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
3400149a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400149e:	4770      	bx	lr

340014a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
340014a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
340014a4:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
340014a6:	604b      	str	r3, [r1, #4]
}
340014a8:	4770      	bx	lr

340014aa <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
340014aa:	2001      	movs	r0, #1
340014ac:	4770      	bx	lr

340014ae <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
340014ae:	2000      	movs	r0, #0
340014b0:	4770      	bx	lr

340014b2 <MX25UM51245G_GetFlashInfo>:
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
340014b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
340014b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340014ba:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
340014be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340014c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340014c6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
340014ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
340014ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
340014d2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
340014d6:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
340014d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
340014dc:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25UM51245G_OK;
};
340014e0:	2000      	movs	r0, #0
340014e2:	4770      	bx	lr

340014e4 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
340014e4:	b570      	push	{r4, r5, r6, lr}
340014e6:	460d      	mov	r5, r1
340014e8:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef  s_command = {0};
340014ea:	2100      	movs	r1, #0
{
340014ec:	4606      	mov	r6, r0
340014ee:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef  s_command = {0};
340014f0:	a805      	add	r0, sp, #20
340014f2:	224c      	movs	r2, #76	@ 0x4c
340014f4:	f00d f91a 	bl	3400e72c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
340014f8:	2214      	movs	r2, #20
340014fa:	2100      	movs	r1, #0
340014fc:	4668      	mov	r0, sp
340014fe:	f00d f915 	bl	3400e72c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001502:	b935      	cbnz	r5, 34001512 <MX25UM51245G_AutoPollingMemReady+0x2e>
  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001504:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001506:	429c      	cmp	r4, r3
34001508:	d104      	bne.n	34001514 <MX25UM51245G_AutoPollingMemReady+0x30>
    return MX25UM51245G_ERROR;
3400150a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
3400150e:	b018      	add	sp, #96	@ 0x60
34001510:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001512:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001514:	1e60      	subs	r0, r4, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001516:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001518:	4243      	negs	r3, r0
3400151a:	4143      	adcs	r3, r0
3400151c:	00da      	lsls	r2, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400151e:	920a      	str	r2, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001520:	2d00      	cmp	r5, #0
34001522:	d03a      	beq.n	3400159a <MX25UM51245G_AutoPollingMemReady+0xb6>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001524:	2210      	movs	r2, #16
34001526:	f240 51fa 	movw	r1, #1530	@ 0x5fa
3400152a:	9209      	str	r2, [sp, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400152c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34001530:	920c      	str	r2, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001532:	02da      	lsls	r2, r3, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001534:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001536:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400153a:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400153c:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400153e:	bf14      	ite	ne
34001540:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
34001544:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001548:	ea4f 63c3 	mov.w	r3, r3, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400154c:	9107      	str	r1, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400154e:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001550:	9315      	str	r3, [sp, #84]	@ 0x54
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001552:	d02a      	beq.n	340015aa <MX25UM51245G_AutoPollingMemReady+0xc6>
34001554:	2c01      	cmp	r4, #1
34001556:	d123      	bne.n	340015a0 <MX25UM51245G_AutoPollingMemReady+0xbc>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001558:	2305      	movs	r3, #5
3400155a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400155c:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400155e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001562:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001564:	2301      	movs	r3, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001566:	2110      	movs	r1, #16
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001568:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400156a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3400156e:	9214      	str	r2, [sp, #80]	@ 0x50
34001570:	e9cd 3103 	strd	r3, r1, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001574:	f241 3288 	movw	r2, #5000	@ 0x1388
34001578:	4630      	mov	r0, r6
3400157a:	a905      	add	r1, sp, #20
3400157c:	f009 fcd2 	bl	3400af24 <HAL_XSPI_Command>
34001580:	2800      	cmp	r0, #0
34001582:	d1c2      	bne.n	3400150a <MX25UM51245G_AutoPollingMemReady+0x26>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001584:	f241 3288 	movw	r2, #5000	@ 0x1388
34001588:	4669      	mov	r1, sp
3400158a:	4630      	mov	r0, r6
3400158c:	f009 fe7c 	bl	3400b288 <HAL_XSPI_AutoPolling>
34001590:	3800      	subs	r0, #0
34001592:	bf18      	it	ne
34001594:	2001      	movne	r0, #1
34001596:	4240      	negs	r0, r0
34001598:	e7b9      	b.n	3400150e <MX25UM51245G_AutoPollingMemReady+0x2a>
3400159a:	2105      	movs	r1, #5
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400159c:	462a      	mov	r2, r5
3400159e:	e7c7      	b.n	34001530 <MX25UM51245G_AutoPollingMemReady+0x4c>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
340015a0:	2304      	movs	r3, #4
340015a2:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340015a4:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340015a6:	2300      	movs	r3, #0
340015a8:	e7db      	b.n	34001562 <MX25UM51245G_AutoPollingMemReady+0x7e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340015aa:	2c01      	cmp	r4, #1
340015ac:	d1fa      	bne.n	340015a4 <MX25UM51245G_AutoPollingMemReady+0xc0>
340015ae:	e7d5      	b.n	3400155c <MX25UM51245G_AutoPollingMemReady+0x78>

340015b0 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
340015b0:	b570      	push	{r4, r5, r6, lr}
340015b2:	460c      	mov	r4, r1
340015b4:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef      s_command = {0};
340015b6:	2100      	movs	r1, #0
{
340015b8:	4606      	mov	r6, r0
340015ba:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef      s_command = {0};
340015bc:	a805      	add	r0, sp, #20
340015be:	224c      	movs	r2, #76	@ 0x4c
340015c0:	f00d f8b4 	bl	3400e72c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
340015c4:	2210      	movs	r2, #16
340015c6:	2100      	movs	r1, #0
340015c8:	a801      	add	r0, sp, #4
340015ca:	f00d f8af 	bl	3400e72c <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
340015ce:	2c01      	cmp	r4, #1
340015d0:	d144      	bne.n	3400165c <MX25UM51245G_EnableSTRMemoryMappedMode+0xac>
340015d2:	b91d      	cbnz	r5, 340015dc <MX25UM51245G_EnableSTRMemoryMappedMode+0x2c>
  {
    return MX25UM51245G_ERROR;
340015d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340015d8:	b018      	add	sp, #96	@ 0x60
340015da:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340015dc:	9405      	str	r4, [sp, #20]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340015de:	2204      	movs	r2, #4
340015e0:	2310      	movs	r3, #16
340015e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
340015e6:	f64e 4213 	movw	r2, #60435	@ 0xec13
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340015ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                                 : HAL_XSPI_ADDRESS_32_BITS;
340015ee:	2d00      	cmp	r5, #0
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340015f0:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_32_BITS;
340015f2:	bf14      	ite	ne
340015f4:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
340015f8:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340015fc:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340015fe:	9207      	str	r2, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001600:	bf0c      	ite	eq
34001602:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
34001606:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
3400160a:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400160c:	bf0c      	ite	eq
3400160e:	2308      	moveq	r3, #8
34001610:	2306      	movne	r3, #6
34001612:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001614:	4630      	mov	r0, r6
34001616:	f241 3288 	movw	r2, #5000	@ 0x1388
3400161a:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
3400161c:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400161e:	f009 fc81 	bl	3400af24 <HAL_XSPI_Command>
34001622:	2800      	cmp	r0, #0
34001624:	d1d6      	bne.n	340015d4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
34001626:	2302      	movs	r3, #2
34001628:	9305      	str	r3, [sp, #20]
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
3400162a:	bb1c      	cbnz	r4, 34001674 <MX25UM51245G_EnableSTRMemoryMappedMode+0xc4>
3400162c:	2d00      	cmp	r5, #0
3400162e:	bf18      	it	ne
34001630:	2312      	movne	r3, #18
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001632:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles        = 0U;
34001634:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001636:	f241 3288 	movw	r2, #5000	@ 0x1388
3400163a:	4630      	mov	r0, r6
3400163c:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = 0U;
3400163e:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001640:	f009 fc70 	bl	3400af24 <HAL_XSPI_Command>
34001644:	2800      	cmp	r0, #0
34001646:	d1c5      	bne.n	340015d4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001648:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
3400164a:	a901      	add	r1, sp, #4
3400164c:	4630      	mov	r0, r6
3400164e:	f009 fe97 	bl	3400b380 <HAL_XSPI_MemoryMapped>
34001652:	3800      	subs	r0, #0
34001654:	bf18      	it	ne
34001656:	2001      	movne	r0, #1
34001658:	4240      	negs	r0, r0
3400165a:	e7bd      	b.n	340015d8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x28>
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
3400165c:	2301      	movs	r3, #1
3400165e:	9305      	str	r3, [sp, #20]
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001660:	2c00      	cmp	r4, #0
34001662:	d1bc      	bne.n	340015de <MX25UM51245G_EnableSTRMemoryMappedMode+0x2e>
                                 : MX25UM51245G_OCTA_READ_CMD;
34001664:	2d00      	cmp	r5, #0
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001666:	9308      	str	r3, [sp, #32]
                                 : MX25UM51245G_OCTA_READ_CMD;
34001668:	bf14      	ite	ne
3400166a:	220c      	movne	r2, #12
3400166c:	220b      	moveq	r2, #11
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400166e:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001672:	e7bc      	b.n	340015ee <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001674:	f241 23ed 	movw	r3, #4845	@ 0x12ed
34001678:	e7db      	b.n	34001632 <MX25UM51245G_EnableSTRMemoryMappedMode+0x82>

3400167a <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
3400167a:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400167c:	2510      	movs	r5, #16
{
3400167e:	b099      	sub	sp, #100	@ 0x64
34001680:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef      s_command = {0};
34001682:	223c      	movs	r2, #60	@ 0x3c
34001684:	2100      	movs	r1, #0
34001686:	a806      	add	r0, sp, #24
34001688:	f00d f850 	bl	3400e72c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400168c:	462a      	mov	r2, r5
3400168e:	2100      	movs	r1, #0
34001690:	a801      	add	r0, sp, #4
34001692:	f00d f84b 	bl	3400e72c <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001696:	2301      	movs	r3, #1
34001698:	9305      	str	r3, [sp, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3400169a:	2304      	movs	r3, #4
3400169c:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3400169e:	2308      	movs	r3, #8
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
340016a0:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
340016a4:	f64e 6311 	movw	r3, #60945	@ 0xee11
340016a8:	9307      	str	r3, [sp, #28]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
340016aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340016ae:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
340016b2:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340016b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340016b8:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
340016bc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
340016c0:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
340016c4:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
340016c6:	2306      	movs	r3, #6
340016c8:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
340016cc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016d0:	f241 3288 	movw	r2, #5000	@ 0x1388
340016d4:	4620      	mov	r0, r4
340016d6:	a905      	add	r1, sp, #20
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
340016d8:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016da:	f009 fc23 	bl	3400af24 <HAL_XSPI_Command>
340016de:	b118      	cbz	r0, 340016e8 <MX25UM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25UM51245G_ERROR;
340016e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340016e4:	b019      	add	sp, #100	@ 0x64
340016e6:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
340016e8:	2302      	movs	r3, #2
340016ea:	9305      	str	r3, [sp, #20]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
340016ec:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
340016f0:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016f4:	f241 3288 	movw	r2, #5000	@ 0x1388
340016f8:	4620      	mov	r0, r4
340016fa:	a905      	add	r1, sp, #20
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
340016fc:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016fe:	f009 fc11 	bl	3400af24 <HAL_XSPI_Command>
34001702:	2800      	cmp	r0, #0
34001704:	d1ec      	bne.n	340016e0 <MX25UM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001706:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001708:	a901      	add	r1, sp, #4
3400170a:	4620      	mov	r0, r4
3400170c:	f009 fe38 	bl	3400b380 <HAL_XSPI_MemoryMapped>
34001710:	3800      	subs	r0, #0
34001712:	bf18      	it	ne
34001714:	2001      	movne	r0, #1
34001716:	4240      	negs	r0, r0
34001718:	e7e4      	b.n	340016e4 <MX25UM51245G_EnableDTRMemoryMappedMode+0x6a>

3400171a <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
3400171a:	b5f0      	push	{r4, r5, r6, r7, lr}
3400171c:	460c      	mov	r4, r1
3400171e:	b099      	sub	sp, #100	@ 0x64
  XSPI_RegularCmdTypeDef     s_command = {0};
34001720:	2100      	movs	r1, #0
{
34001722:	4606      	mov	r6, r0
34001724:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef     s_command = {0};
34001726:	a805      	add	r0, sp, #20
34001728:	224c      	movs	r2, #76	@ 0x4c
3400172a:	f00c ffff 	bl	3400e72c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
3400172e:	2214      	movs	r2, #20
34001730:	2100      	movs	r1, #0
34001732:	4668      	mov	r0, sp
34001734:	f00c fffa 	bl	3400e72c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001738:	b934      	cbnz	r4, 34001748 <MX25UM51245G_WriteEnable+0x2e>
  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400173a:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400173c:	429d      	cmp	r5, r3
3400173e:	d104      	bne.n	3400174a <MX25UM51245G_WriteEnable+0x30>
    return MX25UM51245G_ERROR;
34001740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001744:	b019      	add	sp, #100	@ 0x64
34001746:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001748:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400174a:	f105 3cff 	add.w	ip, r5, #4294967295	@ 0xffffffff
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400174e:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001750:	f1dc 0300 	rsbs	r3, ip, #0
34001754:	eb43 030c 	adc.w	r3, r3, ip
34001758:	00db      	lsls	r3, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400175a:	930a      	str	r3, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400175c:	2c00      	cmp	r4, #0
3400175e:	d045      	beq.n	340017ec <MX25UM51245G_WriteEnable+0xd2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001760:	2310      	movs	r3, #16
34001762:	9309      	str	r3, [sp, #36]	@ 0x24
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001764:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001768:	f241 3288 	movw	r2, #5000	@ 0x1388
3400176c:	4630      	mov	r0, r6
3400176e:	a905      	add	r1, sp, #20
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001770:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001772:	f009 fbd7 	bl	3400af24 <HAL_XSPI_Command>
34001776:	4603      	mov	r3, r0
34001778:	2800      	cmp	r0, #0
3400177a:	d1e1      	bne.n	34001740 <MX25UM51245G_WriteEnable+0x26>
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
3400177c:	2c00      	cmp	r4, #0
3400177e:	d037      	beq.n	340017f0 <MX25UM51245G_WriteEnable+0xd6>
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001780:	2d01      	cmp	r5, #1
34001782:	f240 5cfa 	movw	ip, #1530	@ 0x5fa
34001786:	d03d      	beq.n	34001804 <MX25UM51245G_WriteEnable+0xea>
34001788:	4607      	mov	r7, r0
3400178a:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
3400178e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001792:	2004      	movs	r0, #4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001794:	2101      	movs	r1, #1
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001796:	461a      	mov	r2, r3
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001798:	940c      	str	r4, [sp, #48]	@ 0x30
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
3400179a:	f44f 5440 	mov.w	r4, #12288	@ 0x3000
3400179e:	940d      	str	r4, [sp, #52]	@ 0x34
  s_command.Address        = 0U;
340017a0:	2400      	movs	r4, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
340017a2:	e9cd 3015 	strd	r3, r0, [sp, #84]	@ 0x54
340017a6:	9114      	str	r1, [sp, #80]	@ 0x50
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340017a8:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340017aa:	4630      	mov	r0, r6
340017ac:	f241 3288 	movw	r2, #5000	@ 0x1388
340017b0:	a905      	add	r1, sp, #20
340017b2:	f8cd c01c 	str.w	ip, [sp, #28]
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340017b6:	970e      	str	r7, [sp, #56]	@ 0x38
  s_command.Address        = 0U;
340017b8:	940b      	str	r4, [sp, #44]	@ 0x2c
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340017ba:	9513      	str	r5, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340017bc:	f009 fbb2 	bl	3400af24 <HAL_XSPI_Command>
340017c0:	2800      	cmp	r0, #0
340017c2:	d1bd      	bne.n	34001740 <MX25UM51245G_WriteEnable+0x26>
  s_config.MatchValue      = 2U;
340017c4:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340017c6:	2210      	movs	r2, #16
  s_config.MatchMask       = 2U;
340017c8:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340017cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
340017d0:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340017d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340017d6:	4669      	mov	r1, sp
340017d8:	f241 3288 	movw	r2, #5000	@ 0x1388
340017dc:	4630      	mov	r0, r6
340017de:	f009 fd53 	bl	3400b288 <HAL_XSPI_AutoPolling>
340017e2:	1b00      	subs	r0, r0, r4
340017e4:	bf18      	it	ne
340017e6:	2001      	movne	r0, #1
340017e8:	4240      	negs	r0, r0
340017ea:	e7ab      	b.n	34001744 <MX25UM51245G_WriteEnable+0x2a>
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
340017ec:	2306      	movs	r3, #6
340017ee:	e7bb      	b.n	34001768 <MX25UM51245G_WriteEnable+0x4e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340017f0:	2d01      	cmp	r5, #1
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
340017f2:	f04f 0c05 	mov.w	ip, #5
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340017f6:	d012      	beq.n	3400181e <MX25UM51245G_WriteEnable+0x104>
340017f8:	4623      	mov	r3, r4
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
340017fa:	4627      	mov	r7, r4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340017fc:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
34001800:	4620      	mov	r0, r4
34001802:	e7c7      	b.n	34001794 <MX25UM51245G_WriteEnable+0x7a>
34001804:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001808:	f44f 6700 	mov.w	r7, #2048	@ 0x800
3400180c:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
34001810:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001814:	2005      	movs	r0, #5
34001816:	2102      	movs	r1, #2
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001818:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
3400181c:	e7bc      	b.n	34001798 <MX25UM51245G_WriteEnable+0x7e>
3400181e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001822:	f44f 6700 	mov.w	r7, #2048	@ 0x800
34001826:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
3400182a:	4620      	mov	r0, r4
3400182c:	e7f3      	b.n	34001816 <MX25UM51245G_WriteEnable+0xfc>

3400182e <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
3400182e:	b5f0      	push	{r4, r5, r6, r7, lr}
34001830:	460d      	mov	r5, r1
34001832:	b095      	sub	sp, #84	@ 0x54
34001834:	4606      	mov	r6, r0
34001836:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001838:	2100      	movs	r1, #0
3400183a:	224c      	movs	r2, #76	@ 0x4c
3400183c:	a801      	add	r0, sp, #4
{
3400183e:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
34001840:	f00c ff74 	bl	3400e72c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001844:	b935      	cbnz	r5, 34001854 <MX25UM51245G_WriteCfg2Register+0x26>
  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001846:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001848:	429c      	cmp	r4, r3
3400184a:	d104      	bne.n	34001856 <MX25UM51245G_WriteCfg2Register+0x28>
    return MX25UM51245G_ERROR;
3400184c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001850:	b015      	add	sp, #84	@ 0x54
34001852:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001854:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001856:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001858:	1e63      	subs	r3, r4, #1
3400185a:	425a      	negs	r2, r3
3400185c:	415a      	adcs	r2, r3
3400185e:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001860:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001862:	2d00      	cmp	r5, #0
34001864:	d030      	beq.n	340018c8 <MX25UM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001866:	2310      	movs	r3, #16
34001868:	f247 218d 	movw	r1, #29325	@ 0x728d
3400186c:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400186e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001872:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001874:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001876:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001878:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400187c:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400187e:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001880:	bf14      	ite	ne
34001882:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
34001886:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
3400188a:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400188e:	9103      	str	r1, [sp, #12]
  s_command.Address            = WriteAddr;
34001890:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001892:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001894:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34001896:	d01b      	beq.n	340018d0 <MX25UM51245G_WriteCfg2Register+0xa2>
34001898:	2c01      	cmp	r4, #1
3400189a:	bf0c      	ite	eq
3400189c:	2302      	moveq	r3, #2
3400189e:	2301      	movne	r3, #1
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340018a0:	f241 3288 	movw	r2, #5000	@ 0x1388
340018a4:	4630      	mov	r0, r6
340018a6:	a901      	add	r1, sp, #4
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
340018a8:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340018aa:	f009 fb3b 	bl	3400af24 <HAL_XSPI_Command>
340018ae:	2800      	cmp	r0, #0
340018b0:	d1cc      	bne.n	3400184c <MX25UM51245G_WriteCfg2Register+0x1e>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340018b2:	f241 3288 	movw	r2, #5000	@ 0x1388
340018b6:	4630      	mov	r0, r6
340018b8:	a91a      	add	r1, sp, #104	@ 0x68
340018ba:	f009 fc4b 	bl	3400b154 <HAL_XSPI_Transmit>
340018be:	3800      	subs	r0, #0
340018c0:	bf18      	it	ne
340018c2:	2001      	movne	r0, #1
340018c4:	4240      	negs	r0, r0
340018c6:	e7c3      	b.n	34001850 <MX25UM51245G_WriteCfg2Register+0x22>
340018c8:	2172      	movs	r1, #114	@ 0x72
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340018ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
340018ce:	e7d0      	b.n	34001872 <MX25UM51245G_WriteCfg2Register+0x44>
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
340018d0:	2301      	movs	r3, #1
340018d2:	e7e5      	b.n	340018a0 <MX25UM51245G_WriteCfg2Register+0x72>

340018d4 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
340018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
340018d6:	460d      	mov	r5, r1
340018d8:	b095      	sub	sp, #84	@ 0x54
340018da:	4606      	mov	r6, r0
340018dc:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340018de:	2100      	movs	r1, #0
340018e0:	224c      	movs	r2, #76	@ 0x4c
340018e2:	a801      	add	r0, sp, #4
{
340018e4:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
340018e6:	f00c ff21 	bl	3400e72c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340018ea:	b935      	cbnz	r5, 340018fa <MX25UM51245G_ReadCfg2Register+0x26>
  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340018ec:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340018ee:	429c      	cmp	r4, r3
340018f0:	d104      	bne.n	340018fc <MX25UM51245G_ReadCfg2Register+0x28>
    return MX25UM51245G_ERROR;
340018f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340018f6:	b015      	add	sp, #84	@ 0x54
340018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340018fa:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340018fc:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340018fe:	1e63      	subs	r3, r4, #1
34001900:	425a      	negs	r2, r3
34001902:	415a      	adcs	r2, r3
34001904:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001906:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001908:	2d00      	cmp	r5, #0
3400190a:	d034      	beq.n	34001976 <MX25UM51245G_ReadCfg2Register+0xa2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400190c:	2310      	movs	r3, #16
3400190e:	f247 118e 	movw	r1, #29070	@ 0x718e
34001912:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001914:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001918:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400191a:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
3400191c:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400191e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001922:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001924:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001926:	bf14      	ite	ne
34001928:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
3400192c:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001930:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001934:	9103      	str	r1, [sp, #12]
  s_command.Address            = ReadAddr;
34001936:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001938:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
3400193a:	9211      	str	r2, [sp, #68]	@ 0x44
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
3400193c:	d024      	beq.n	34001988 <MX25UM51245G_ReadCfg2Register+0xb4>
3400193e:	2c01      	cmp	r4, #1
34001940:	d11d      	bne.n	3400197e <MX25UM51245G_ReadCfg2Register+0xaa>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001942:	2305      	movs	r3, #5
34001944:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001946:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001948:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400194c:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400194e:	4630      	mov	r0, r6
34001950:	f241 3288 	movw	r2, #5000	@ 0x1388
34001954:	a901      	add	r1, sp, #4
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001956:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001958:	f009 fae4 	bl	3400af24 <HAL_XSPI_Command>
3400195c:	2800      	cmp	r0, #0
3400195e:	d1c8      	bne.n	340018f2 <MX25UM51245G_ReadCfg2Register+0x1e>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001960:	f241 3288 	movw	r2, #5000	@ 0x1388
34001964:	4630      	mov	r0, r6
34001966:	991a      	ldr	r1, [sp, #104]	@ 0x68
34001968:	f009 fc38 	bl	3400b1dc <HAL_XSPI_Receive>
3400196c:	3800      	subs	r0, #0
3400196e:	bf18      	it	ne
34001970:	2001      	movne	r0, #1
34001972:	4240      	negs	r0, r0
34001974:	e7bf      	b.n	340018f6 <MX25UM51245G_ReadCfg2Register+0x22>
34001976:	2171      	movs	r1, #113	@ 0x71
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001978:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400197c:	e7cc      	b.n	34001918 <MX25UM51245G_ReadCfg2Register+0x44>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
3400197e:	2304      	movs	r3, #4
34001980:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001982:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001984:	2300      	movs	r3, #0
34001986:	e7e1      	b.n	3400194c <MX25UM51245G_ReadCfg2Register+0x78>
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001988:	2c01      	cmp	r4, #1
3400198a:	d1fa      	bne.n	34001982 <MX25UM51245G_ReadCfg2Register+0xae>
3400198c:	e7db      	b.n	34001946 <MX25UM51245G_ReadCfg2Register+0x72>

3400198e <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
3400198e:	b570      	push	{r4, r5, r6, lr}
34001990:	460d      	mov	r5, r1
34001992:	b094      	sub	sp, #80	@ 0x50
34001994:	4606      	mov	r6, r0
34001996:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001998:	2100      	movs	r1, #0
3400199a:	224c      	movs	r2, #76	@ 0x4c
3400199c:	a801      	add	r0, sp, #4
3400199e:	f00c fec5 	bl	3400e72c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340019a2:	b9d5      	cbnz	r5, 340019da <MX25UM51245G_ResetEnable+0x4c>
340019a4:	2c01      	cmp	r4, #1
340019a6:	d01c      	beq.n	340019e2 <MX25UM51245G_ResetEnable+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340019a8:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340019aa:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340019ac:	1e63      	subs	r3, r4, #1
340019ae:	425c      	negs	r4, r3
340019b0:	415c      	adcs	r4, r3
340019b2:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340019b4:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340019b6:	b195      	cbz	r5, 340019de <MX25UM51245G_ResetEnable+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340019b8:	2310      	movs	r3, #16
340019ba:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
340019bc:	f246 6399 	movw	r3, #26265	@ 0x6699
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340019c0:	f241 3288 	movw	r2, #5000	@ 0x1388
340019c4:	4630      	mov	r0, r6
340019c6:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340019c8:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340019ca:	f009 faab 	bl	3400af24 <HAL_XSPI_Command>
340019ce:	3800      	subs	r0, #0
340019d0:	bf18      	it	ne
340019d2:	2001      	movne	r0, #1
340019d4:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340019d6:	b014      	add	sp, #80	@ 0x50
340019d8:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340019da:	2304      	movs	r3, #4
340019dc:	e7e5      	b.n	340019aa <MX25UM51245G_ResetEnable+0x1c>
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
340019de:	2366      	movs	r3, #102	@ 0x66
340019e0:	e7ee      	b.n	340019c0 <MX25UM51245G_ResetEnable+0x32>
    return MX25UM51245G_ERROR;
340019e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340019e6:	e7f6      	b.n	340019d6 <MX25UM51245G_ResetEnable+0x48>

340019e8 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340019e8:	b570      	push	{r4, r5, r6, lr}
340019ea:	460d      	mov	r5, r1
340019ec:	b094      	sub	sp, #80	@ 0x50
340019ee:	4606      	mov	r6, r0
340019f0:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340019f2:	2100      	movs	r1, #0
340019f4:	224c      	movs	r2, #76	@ 0x4c
340019f6:	a801      	add	r0, sp, #4
340019f8:	f00c fe98 	bl	3400e72c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340019fc:	b9d5      	cbnz	r5, 34001a34 <MX25UM51245G_ResetMemory+0x4c>
340019fe:	2c01      	cmp	r4, #1
34001a00:	d01c      	beq.n	34001a3c <MX25UM51245G_ResetMemory+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001a02:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001a04:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001a06:	1e63      	subs	r3, r4, #1
34001a08:	425c      	negs	r4, r3
34001a0a:	415c      	adcs	r4, r3
34001a0c:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001a0e:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001a10:	b195      	cbz	r5, 34001a38 <MX25UM51245G_ResetMemory+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001a12:	2310      	movs	r3, #16
34001a14:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34001a16:	f649 1366 	movw	r3, #39270	@ 0x9966
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
34001a1e:	4630      	mov	r0, r6
34001a20:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001a22:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a24:	f009 fa7e 	bl	3400af24 <HAL_XSPI_Command>
34001a28:	3800      	subs	r0, #0
34001a2a:	bf18      	it	ne
34001a2c:	2001      	movne	r0, #1
34001a2e:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001a30:	b014      	add	sp, #80	@ 0x50
34001a32:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001a34:	2304      	movs	r3, #4
34001a36:	e7e5      	b.n	34001a04 <MX25UM51245G_ResetMemory+0x1c>
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34001a38:	2399      	movs	r3, #153	@ 0x99
34001a3a:	e7ee      	b.n	34001a1a <MX25UM51245G_ResetMemory+0x32>
    return MX25UM51245G_ERROR;
34001a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001a40:	e7f6      	b.n	34001a30 <MX25UM51245G_ResetMemory+0x48>
	...

34001a44 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001a44:	4b04      	ldr	r3, [pc, #16]	@ (34001a58 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001a46:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001a48:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001a4c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001a50:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001a52:	9b01      	ldr	r3, [sp, #4]
}
34001a54:	b002      	add	sp, #8
34001a56:	4770      	bx	lr
34001a58:	56028000 	.word	0x56028000

34001a5c <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34001a5c:	b570      	push	{r4, r5, r6, lr}
34001a5e:	4604      	mov	r4, r0
34001a60:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
34001a62:	2002      	movs	r0, #2
34001a64:	f7ff ffee 	bl	34001a44 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001a68:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001a6a:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001a6e:	9303      	str	r3, [sp, #12]
34001a70:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001a72:	2301      	movs	r3, #1
34001a74:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001a78:	2303      	movs	r3, #3
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001a7a:	4d06      	ldr	r5, [pc, #24]	@ (34001a94 <BSP_SMPS_Init+0x38>)
34001a7c:	a901      	add	r1, sp, #4
34001a7e:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001a80:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001a82:	f001 fb9f 	bl	340031c4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
34001a86:	4622      	mov	r2, r4
34001a88:	4631      	mov	r1, r6
34001a8a:	4628      	mov	r0, r5
34001a8c:	f001 fdb2 	bl	340035f4 <HAL_GPIO_WritePin>
}
34001a90:	b006      	add	sp, #24
34001a92:	bd70      	pop	{r4, r5, r6, pc}
34001a94:	56020400 	.word	0x56020400

34001a98 <MX_USART1_Init>:
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
34001a98:	4a0a      	ldr	r2, [pc, #40]	@ (34001ac4 <MX_USART1_Init+0x2c>)
34001a9a:	6812      	ldr	r2, [r2, #0]
34001a9c:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
34001a9e:	680a      	ldr	r2, [r1, #0]
34001aa0:	6042      	str	r2, [r0, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
34001aa2:	220c      	movs	r2, #12
34001aa4:	6142      	str	r2, [r0, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
34001aa6:	894a      	ldrh	r2, [r1, #10]
34001aa8:	6102      	str	r2, [r0, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
34001aaa:	684a      	ldr	r2, [r1, #4]
34001aac:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
34001aae:	890a      	ldrh	r2, [r1, #8]
34001ab0:	60c2      	str	r2, [r0, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
34001ab2:	898a      	ldrh	r2, [r1, #12]
34001ab4:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
34001ab6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34001aba:	61c2      	str	r2, [r0, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
34001abc:	2200      	movs	r2, #0
34001abe:	6242      	str	r2, [r0, #36]	@ 0x24
  return HAL_UART_Init(huart);
34001ac0:	f008 bed8 	b.w	3400a874 <HAL_UART_Init>
34001ac4:	3401238c 	.word	0x3401238c

34001ac8 <BSP_COM_Init>:
{
34001ac8:	b570      	push	{r4, r5, r6, lr}
34001aca:	4604      	mov	r4, r0
  if (COM_Init == NULL)
34001acc:	460d      	mov	r5, r1
{
34001ace:	b086      	sub	sp, #24
  if (COM_Init == NULL)
34001ad0:	2900      	cmp	r1, #0
34001ad2:	d034      	beq.n	34001b3e <BSP_COM_Init+0x76>
    hcom_uart[COM].Instance = COM_UART[COM];
34001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (34001b4c <BSP_COM_Init+0x84>)
34001ad6:	491e      	ldr	r1, [pc, #120]	@ (34001b50 <BSP_COM_Init+0x88>)
34001ad8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
34001adc:	2394      	movs	r3, #148	@ 0x94
34001ade:	4343      	muls	r3, r0
34001ae0:	50ca      	str	r2, [r1, r3]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
34001ae2:	4b1c      	ldr	r3, [pc, #112]	@ (34001b54 <BSP_COM_Init+0x8c>)
34001ae4:	429a      	cmp	r2, r3
34001ae6:	d121      	bne.n	34001b2c <BSP_COM_Init+0x64>
  WRITE_REG(RCC->APB2ENSR, Periphs);
34001ae8:	2210      	movs	r2, #16
  {
    COM = COM1;
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
34001aea:	2010      	movs	r0, #16
34001aec:	f7ff ffaa 	bl	34001a44 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
34001af0:	2008      	movs	r0, #8
34001af2:	f7ff ffa7 	bl	34001a44 <LL_AHB4_GRP1_EnableClock>
34001af6:	4b18      	ldr	r3, [pc, #96]	@ (34001b58 <BSP_COM_Init+0x90>)
  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001af8:	2607      	movs	r6, #7
34001afa:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
34001afe:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
34001b02:	2220      	movs	r2, #32
34001b04:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001b06:	9b00      	ldr	r3, [sp, #0]
34001b08:	2302      	movs	r3, #2
34001b0a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
34001b0e:	9304      	str	r3, [sp, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;
34001b10:	2301      	movs	r3, #1
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34001b12:	4812      	ldr	r0, [pc, #72]	@ (34001b5c <BSP_COM_Init+0x94>)
34001b14:	a901      	add	r1, sp, #4
  GPIO_Init.Pull      = GPIO_PULLUP;
34001b16:	9303      	str	r3, [sp, #12]
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001b18:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34001b1a:	f001 fb53 	bl	340031c4 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34001b1e:	2340      	movs	r3, #64	@ 0x40
  GPIO_Init.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34001b20:	480f      	ldr	r0, [pc, #60]	@ (34001b60 <BSP_COM_Init+0x98>)
34001b22:	a901      	add	r1, sp, #4
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34001b24:	9301      	str	r3, [sp, #4]
  GPIO_Init.Alternate = COM_RX_AF[COM];
34001b26:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34001b28:	f001 fb4c 	bl	340031c4 <HAL_GPIO_Init>
      if (COM == COM1)
34001b2c:	b924      	cbnz	r4, 34001b38 <BSP_COM_Init+0x70>
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
34001b2e:	4629      	mov	r1, r5
34001b30:	4807      	ldr	r0, [pc, #28]	@ (34001b50 <BSP_COM_Init+0x88>)
34001b32:	f7ff ffb1 	bl	34001a98 <MX_USART1_Init>
34001b36:	b928      	cbnz	r0, 34001b44 <BSP_COM_Init+0x7c>
  int32_t status = BSP_ERROR_NONE;
34001b38:	2000      	movs	r0, #0
}
34001b3a:	b006      	add	sp, #24
34001b3c:	bd70      	pop	{r4, r5, r6, pc}
    status = BSP_ERROR_WRONG_PARAM;
34001b3e:	f06f 0001 	mvn.w	r0, #1
34001b42:	e7fa      	b.n	34001b3a <BSP_COM_Init+0x72>
          status = BSP_ERROR_PERIPH_FAILURE;
34001b44:	f06f 0003 	mvn.w	r0, #3
  return status;
34001b48:	e7f7      	b.n	34001b3a <BSP_COM_Init+0x72>
34001b4a:	bf00      	nop
34001b4c:	3401238c 	.word	0x3401238c
34001b50:	340125d0 	.word	0x340125d0
34001b54:	52001000 	.word	0x52001000
34001b58:	56028000 	.word	0x56028000
34001b5c:	56021000 	.word	0x56021000
34001b60:	56020c00 	.word	0x56020c00

34001b64 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001b64:	4b04      	ldr	r3, [pc, #16]	@ (34001b78 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001b66:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001b68:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001b6c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001b70:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001b72:	9b01      	ldr	r3, [sp, #4]
}
34001b74:	b002      	add	sp, #8
34001b76:	4770      	bx	lr
34001b78:	56028000 	.word	0x56028000

34001b7c <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001b7c:	b530      	push	{r4, r5, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001b7e:	4c20      	ldr	r4, [pc, #128]	@ (34001c00 <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001b80:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001b82:	78a2      	ldrb	r2, [r4, #2]
34001b84:	7861      	ldrb	r1, [r4, #1]
34001b86:	481f      	ldr	r0, [pc, #124]	@ (34001c04 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001b88:	f7ff fdc7 	bl	3400171a <MX25UM51245G_WriteEnable>
34001b8c:	b118      	cbz	r0, 34001b96 <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001b8e:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
34001b92:	b005      	add	sp, #20
34001b94:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001b96:	9000      	str	r0, [sp, #0]
34001b98:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001b9c:	78a2      	ldrb	r2, [r4, #2]
34001b9e:	7861      	ldrb	r1, [r4, #1]
34001ba0:	4818      	ldr	r0, [pc, #96]	@ (34001c04 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001ba2:	f7ff fe44 	bl	3400182e <MX25UM51245G_WriteCfg2Register>
34001ba6:	2800      	cmp	r0, #0
34001ba8:	d1f1      	bne.n	34001b8e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001baa:	78a2      	ldrb	r2, [r4, #2]
34001bac:	7861      	ldrb	r1, [r4, #1]
34001bae:	4815      	ldr	r0, [pc, #84]	@ (34001c04 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001bb0:	f7ff fdb3 	bl	3400171a <MX25UM51245G_WriteEnable>
34001bb4:	4603      	mov	r3, r0
34001bb6:	2800      	cmp	r0, #0
34001bb8:	d1e9      	bne.n	34001b8e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001bba:	2501      	movs	r5, #1
34001bbc:	9500      	str	r5, [sp, #0]
34001bbe:	78a2      	ldrb	r2, [r4, #2]
34001bc0:	7861      	ldrb	r1, [r4, #1]
34001bc2:	4810      	ldr	r0, [pc, #64]	@ (34001c04 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001bc4:	f7ff fe33 	bl	3400182e <MX25UM51245G_WriteCfg2Register>
34001bc8:	4604      	mov	r4, r0
34001bca:	2800      	cmp	r0, #0
34001bcc:	d1df      	bne.n	34001b8e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001bce:	2028      	movs	r0, #40	@ 0x28
34001bd0:	f000 fc18 	bl	34002404 <HAL_Delay>
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001bd4:	4622      	mov	r2, r4
34001bd6:	4629      	mov	r1, r5
34001bd8:	480a      	ldr	r0, [pc, #40]	@ (34001c04 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001bda:	f7ff fc83 	bl	340014e4 <MX25UM51245G_AutoPollingMemReady>
34001bde:	4603      	mov	r3, r0
34001be0:	2800      	cmp	r0, #0
34001be2:	d1d4      	bne.n	34001b8e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001be4:	aa03      	add	r2, sp, #12
34001be6:	9200      	str	r2, [sp, #0]
34001be8:	4629      	mov	r1, r5
34001bea:	4602      	mov	r2, r0
34001bec:	4805      	ldr	r0, [pc, #20]	@ (34001c04 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001bee:	f7ff fe71 	bl	340018d4 <MX25UM51245G_ReadCfg2Register>
34001bf2:	2800      	cmp	r0, #0
34001bf4:	d1cb      	bne.n	34001b8e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
34001bf6:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001bfa:	42ab      	cmp	r3, r5
34001bfc:	d0c9      	beq.n	34001b92 <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
34001bfe:	e7c6      	b.n	34001b8e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
34001c00:	340126f8 	.word	0x340126f8
34001c04:	340126fc 	.word	0x340126fc

34001c08 <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001c08:	b530      	push	{r4, r5, lr}
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001c0a:	4d27      	ldr	r5, [pc, #156]	@ (34001ca8 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
34001c0c:	4c27      	ldr	r4, [pc, #156]	@ (34001cac <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001c0e:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001c10:	4620      	mov	r0, r4
34001c12:	78aa      	ldrb	r2, [r5, #2]
34001c14:	7869      	ldrb	r1, [r5, #1]
34001c16:	f7ff fd80 	bl	3400171a <MX25UM51245G_WriteEnable>
34001c1a:	b118      	cbz	r0, 34001c24 <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001c1c:	f06f 0004 	mvn.w	r0, #4
}
34001c20:	b005      	add	sp, #20
34001c22:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001c24:	9000      	str	r0, [sp, #0]
34001c26:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001c2a:	4620      	mov	r0, r4
34001c2c:	78aa      	ldrb	r2, [r5, #2]
34001c2e:	7869      	ldrb	r1, [r5, #1]
34001c30:	f7ff fdfd 	bl	3400182e <MX25UM51245G_WriteCfg2Register>
34001c34:	2800      	cmp	r0, #0
34001c36:	d1f1      	bne.n	34001c1c <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001c38:	4620      	mov	r0, r4
34001c3a:	78aa      	ldrb	r2, [r5, #2]
34001c3c:	7869      	ldrb	r1, [r5, #1]
34001c3e:	f7ff fd6c 	bl	3400171a <MX25UM51245G_WriteEnable>
34001c42:	4603      	mov	r3, r0
34001c44:	2800      	cmp	r0, #0
34001c46:	d1e9      	bne.n	34001c1c <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001c48:	2202      	movs	r2, #2
34001c4a:	9200      	str	r2, [sp, #0]
34001c4c:	4620      	mov	r0, r4
34001c4e:	78aa      	ldrb	r2, [r5, #2]
34001c50:	7869      	ldrb	r1, [r5, #1]
34001c52:	f7ff fdec 	bl	3400182e <MX25UM51245G_WriteCfg2Register>
34001c56:	2800      	cmp	r0, #0
34001c58:	d1e0      	bne.n	34001c1c <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001c5a:	2028      	movs	r0, #40	@ 0x28
34001c5c:	f000 fbd2 	bl	34002404 <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34001c60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001c64:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001c66:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001c6a:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001c6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001c6e:	f009 f81b 	bl	3400aca8 <HAL_XSPI_Init>
34001c72:	b9a8      	cbnz	r0, 34001ca0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001c74:	2201      	movs	r2, #1
34001c76:	4620      	mov	r0, r4
34001c78:	4611      	mov	r1, r2
34001c7a:	f7ff fc33 	bl	340014e4 <MX25UM51245G_AutoPollingMemReady>
34001c7e:	4603      	mov	r3, r0
34001c80:	2800      	cmp	r0, #0
34001c82:	d1cb      	bne.n	34001c1c <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34001c84:	aa03      	add	r2, sp, #12
34001c86:	9200      	str	r2, [sp, #0]
34001c88:	2201      	movs	r2, #1
34001c8a:	4620      	mov	r0, r4
34001c8c:	4611      	mov	r1, r2
34001c8e:	f7ff fe21 	bl	340018d4 <MX25UM51245G_ReadCfg2Register>
34001c92:	2800      	cmp	r0, #0
34001c94:	d1c2      	bne.n	34001c1c <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
34001c96:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001c9a:	2b02      	cmp	r3, #2
34001c9c:	d0c0      	beq.n	34001c20 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34001c9e:	e7bd      	b.n	34001c1c <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
34001ca0:	f06f 0003 	mvn.w	r0, #3
  return ret;
34001ca4:	e7bc      	b.n	34001c20 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34001ca6:	bf00      	nop
34001ca8:	340126f8 	.word	0x340126f8
34001cac:	340126fc 	.word	0x340126fc

34001cb0 <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 4;
34001cb0:	2304      	movs	r3, #4
34001cb2:	4a0e      	ldr	r2, [pc, #56]	@ (34001cec <MX_XSPI_NOR_Init+0x3c>)
34001cb4:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34001cb8:	680a      	ldr	r2, [r1, #0]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34001cba:	2300      	movs	r3, #0
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34001cbc:	6102      	str	r2, [r0, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
34001cbe:	2202      	movs	r2, #2
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34001cc0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34001cc4:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
34001cc6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34001cca:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34001ccc:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34001cce:	6083      	str	r3, [r0, #8]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34001cd0:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34001cd2:	68ca      	ldr	r2, [r1, #12]
  hxspi->Init.ChipSelectBoundary      = 0;
34001cd4:	6303      	str	r3, [r0, #48]	@ 0x30
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34001cd6:	2a01      	cmp	r2, #1
34001cd8:	bf12      	itee	ne
34001cda:	461a      	movne	r2, r3
34001cdc:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
34001ce0:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34001ce4:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001ce6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
34001ce8:	f008 bfde 	b.w	3400aca8 <HAL_XSPI_Init>
34001cec:	5802a000 	.word	0x5802a000

34001cf0 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
{
34001cf0:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001cf2:	b998      	cbnz	r0, 34001d1c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cf4:	4c0b      	ldr	r4, [pc, #44]	@ (34001d24 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>)
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001cf6:	78a3      	ldrb	r3, [r4, #2]
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cf8:	7861      	ldrb	r1, [r4, #1]
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001cfa:	b95b      	cbnz	r3, 34001d14 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cfc:	2201      	movs	r2, #1
34001cfe:	480a      	ldr	r0, [pc, #40]	@ (34001d28 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001d00:	f7ff fc56 	bl	340015b0 <MX25UM51245G_EnableSTRMemoryMappedMode>
34001d04:	b110      	cbz	r0, 34001d0c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001d06:	f06f 0004 	mvn.w	r0, #4
}
34001d0a:	bd10      	pop	{r4, pc}
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001d0c:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
34001d0e:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001d10:	7023      	strb	r3, [r4, #0]
34001d12:	e7fa      	b.n	34001d0a <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
34001d14:	4804      	ldr	r0, [pc, #16]	@ (34001d28 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001d16:	f7ff fcb0 	bl	3400167a <MX25UM51245G_EnableDTRMemoryMappedMode>
34001d1a:	e7f3      	b.n	34001d04 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
34001d1c:	f06f 0001 	mvn.w	r0, #1
  return ret;
34001d20:	e7f3      	b.n	34001d0a <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
34001d22:	bf00      	nop
34001d24:	340126f8 	.word	0x340126f8
34001d28:	340126fc 	.word	0x340126fc

34001d2c <BSP_XSPI_NOR_ConfigFlash>:
{
34001d2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34001d30:	460d      	mov	r5, r1
34001d32:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001d34:	2800      	cmp	r0, #0
34001d36:	d15d      	bne.n	34001df4 <BSP_XSPI_NOR_ConfigFlash+0xc8>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
34001d38:	4c31      	ldr	r4, [pc, #196]	@ (34001e00 <BSP_XSPI_NOR_ConfigFlash+0xd4>)
34001d3a:	7823      	ldrb	r3, [r4, #0]
34001d3c:	2b02      	cmp	r3, #2
34001d3e:	d05c      	beq.n	34001dfa <BSP_XSPI_NOR_ConfigFlash+0xce>
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
34001d40:	7863      	ldrb	r3, [r4, #1]
34001d42:	2b01      	cmp	r3, #1
34001d44:	d14d      	bne.n	34001de2 <BSP_XSPI_NOR_ConfigFlash+0xb6>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
34001d46:	2901      	cmp	r1, #1
34001d48:	78a2      	ldrb	r2, [r4, #2]
34001d4a:	d109      	bne.n	34001d60 <BSP_XSPI_NOR_ConfigFlash+0x34>
34001d4c:	4296      	cmp	r6, r2
34001d4e:	d107      	bne.n	34001d60 <BSP_XSPI_NOR_ConfigFlash+0x34>
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001d50:	2301      	movs	r3, #1
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001d52:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001d54:	7023      	strb	r3, [r4, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
34001d56:	7065      	strb	r5, [r4, #1]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001d58:	70a6      	strb	r6, [r4, #2]
}
34001d5a:	b004      	add	sp, #16
34001d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d60:	4f28      	ldr	r7, [pc, #160]	@ (34001e04 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001d62:	2101      	movs	r1, #1
34001d64:	4638      	mov	r0, r7
34001d66:	f7ff fcd8 	bl	3400171a <MX25UM51245G_WriteEnable>
34001d6a:	4603      	mov	r3, r0
34001d6c:	b9b0      	cbnz	r0, 34001d9c <BSP_XSPI_NOR_ConfigFlash+0x70>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d6e:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
34001d70:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d74:	78a2      	ldrb	r2, [r4, #2]
34001d76:	4638      	mov	r0, r7
34001d78:	7861      	ldrb	r1, [r4, #1]
34001d7a:	f7ff fd58 	bl	3400182e <MX25UM51245G_WriteCfg2Register>
34001d7e:	4680      	mov	r8, r0
34001d80:	b960      	cbnz	r0, 34001d9c <BSP_XSPI_NOR_ConfigFlash+0x70>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001d82:	2028      	movs	r0, #40	@ 0x28
34001d84:	f000 fb3e 	bl	34002404 <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
34001d88:	78a3      	ldrb	r3, [r4, #2]
34001d8a:	2b01      	cmp	r3, #1
34001d8c:	d009      	beq.n	34001da2 <BSP_XSPI_NOR_ConfigFlash+0x76>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001d8e:	2200      	movs	r2, #0
34001d90:	481c      	ldr	r0, [pc, #112]	@ (34001e04 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001d92:	4611      	mov	r1, r2
34001d94:	f7ff fba6 	bl	340014e4 <MX25UM51245G_AutoPollingMemReady>
34001d98:	4603      	mov	r3, r0
34001d9a:	b170      	cbz	r0, 34001dba <BSP_XSPI_NOR_ConfigFlash+0x8e>
            ret = XSPI_NOR_ExitOPIMode(Instance);
34001d9c:	f06f 0004 	mvn.w	r0, #4
34001da0:	e7db      	b.n	34001d5a <BSP_XSPI_NOR_ConfigFlash+0x2e>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001da2:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34001da4:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34001da8:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001dac:	f008 ff7c 	bl	3400aca8 <HAL_XSPI_Init>
34001db0:	2800      	cmp	r0, #0
34001db2:	d0ec      	beq.n	34001d8e <BSP_XSPI_NOR_ConfigFlash+0x62>
            ret = XSPI_NOR_ExitOPIMode(Instance);
34001db4:	f06f 0003 	mvn.w	r0, #3
34001db8:	e7cf      	b.n	34001d5a <BSP_XSPI_NOR_ConfigFlash+0x2e>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001dba:	aa03      	add	r2, sp, #12
34001dbc:	4601      	mov	r1, r0
34001dbe:	9200      	str	r2, [sp, #0]
34001dc0:	4602      	mov	r2, r0
34001dc2:	4810      	ldr	r0, [pc, #64]	@ (34001e04 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001dc4:	f7ff fd86 	bl	340018d4 <MX25UM51245G_ReadCfg2Register>
34001dc8:	2800      	cmp	r0, #0
34001dca:	d1e7      	bne.n	34001d9c <BSP_XSPI_NOR_ConfigFlash+0x70>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
34001dcc:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001dd0:	2b00      	cmp	r3, #0
34001dd2:	d1e3      	bne.n	34001d9c <BSP_XSPI_NOR_ConfigFlash+0x70>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34001dd4:	2d01      	cmp	r5, #1
34001dd6:	d1bb      	bne.n	34001d50 <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001dd8:	78a3      	ldrb	r3, [r4, #2]
34001dda:	b933      	cbnz	r3, 34001dea <BSP_XSPI_NOR_ConfigFlash+0xbe>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34001ddc:	f7ff ff14 	bl	34001c08 <XSPI_NOR_EnterDOPIMode.constprop.0>
34001de0:	e005      	b.n	34001dee <BSP_XSPI_NOR_ConfigFlash+0xc2>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34001de2:	2901      	cmp	r1, #1
34001de4:	d1b4      	bne.n	34001d50 <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
34001de6:	2a00      	cmp	r2, #0
34001de8:	d1f8      	bne.n	34001ddc <BSP_XSPI_NOR_ConfigFlash+0xb0>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34001dea:	f7ff fec7 	bl	34001b7c <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
34001dee:	2800      	cmp	r0, #0
34001df0:	d1b3      	bne.n	34001d5a <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001df2:	e7ad      	b.n	34001d50 <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
34001df4:	f06f 0001 	mvn.w	r0, #1
34001df8:	e7af      	b.n	34001d5a <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34001dfa:	f06f 0019 	mvn.w	r0, #25
  return ret;
34001dfe:	e7ac      	b.n	34001d5a <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001e00:	340126f8 	.word	0x340126f8
34001e04:	340126fc 	.word	0x340126fc

34001e08 <BSP_XSPI_NOR_Init>:
{
34001e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34001e0c:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001e0e:	4604      	mov	r4, r0
34001e10:	4e86      	ldr	r6, [pc, #536]	@ (3400202c <BSP_XSPI_NOR_Init+0x224>)
{
34001e12:	b08f      	sub	sp, #60	@ 0x3c
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001e14:	2800      	cmp	r0, #0
34001e16:	f040 8102 	bne.w	3400201e <BSP_XSPI_NOR_Init+0x216>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34001e1a:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 3400203c <BSP_XSPI_NOR_Init+0x234>
34001e1e:	f898 3000 	ldrb.w	r3, [r8]
34001e22:	b153      	cbz	r3, 34001e3a <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
34001e24:	2500      	movs	r5, #0
  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34001e26:	2064      	movs	r0, #100	@ 0x64
34001e28:	2100      	movs	r1, #0
34001e2a:	fb00 6004 	mla	r0, r0, r4, r6
34001e2e:	f009 fb15 	bl	3400b45c <HAL_XSPI_SetClockPrescaler>
}
34001e32:	4628      	mov	r0, r5
34001e34:	b00f      	add	sp, #60	@ 0x3c
34001e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001e3a:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
34001e3e:	4f7c      	ldr	r7, [pc, #496]	@ (34002030 <BSP_XSPI_NOR_Init+0x228>)
  __HAL_RCC_PWR_CLK_ENABLE();
34001e40:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34001e44:	f8c7 5a60 	str.w	r5, [r7, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001e48:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001e4c:	f04f 0b03 	mov.w	fp, #3
34001e50:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001e52:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
34001e54:	f7ff fe86 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34001e58:	f002 f870 	bl	34003f3c <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34001e5c:	2101      	movs	r1, #1
34001e5e:	2002      	movs	r0, #2
34001e60:	f002 f826 	bl	34003eb0 <HAL_PWREx_ConfigVddIORange>
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001e64:	4b73      	ldr	r3, [pc, #460]	@ (34002034 <BSP_XSPI_NOR_Init+0x22c>)
  XSPI_CLK_GPIO_CLK_ENABLE();
34001e66:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001e6a:	f8c7 5a20 	str.w	r5, [r7, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001e6e:	f8c3 5220 	str.w	r5, [r3, #544]	@ 0x220
34001e72:	f7ff fe77 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001e76:	2509      	movs	r5, #9
  XSPI_DQS_GPIO_CLK_ENABLE();
34001e78:	f7ff fe74 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001e7c:	2701      	movs	r7, #1
  XSPI_CS_GPIO_CLK_ENABLE();
34001e7e:	f7ff fe71 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
34001e82:	f7ff fe6f 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34001e86:	f7ff fe6d 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
34001e8a:	f7ff fe6b 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34001e8e:	f7ff fe69 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
34001e92:	f7ff fe67 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34001e96:	f7ff fe65 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34001e9a:	f7ff fe63 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34001e9e:	f7ff fe61 	bl	34001b64 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
34001ea2:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001ea4:	4864      	ldr	r0, [pc, #400]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001ea6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34001ea8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001eac:	e9cd 7b07 	strd	r7, fp, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001eb0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001eb2:	f001 f987 	bl	340031c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001eb6:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001eb8:	485f      	ldr	r0, [pc, #380]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001eba:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001ebc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34001ebe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34001ec0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001ec2:	f001 f97f 	bl	340031c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34001ec6:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34001ec8:	485b      	ldr	r0, [pc, #364]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001eca:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34001ecc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
34001ece:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34001ed0:	f001 f978 	bl	340031c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34001ed4:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34001ed6:	4858      	ldr	r0, [pc, #352]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001ed8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34001eda:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34001edc:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34001ede:	f001 f971 	bl	340031c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34001ee2:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34001ee4:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34001ee8:	4853      	ldr	r0, [pc, #332]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001eea:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34001eec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
34001eee:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34001ef0:	f001 f968 	bl	340031c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34001ef4:	4850      	ldr	r0, [pc, #320]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001ef6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34001ef8:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34001efc:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34001efe:	f001 f961 	bl	340031c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34001f02:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34001f06:	484c      	ldr	r0, [pc, #304]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001f08:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34001f0a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
34001f0c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34001f0e:	f001 f959 	bl	340031c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34001f12:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34001f16:	4848      	ldr	r0, [pc, #288]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001f18:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34001f1a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
34001f1c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34001f1e:	f001 f951 	bl	340031c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34001f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34001f26:	4844      	ldr	r0, [pc, #272]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001f28:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34001f2a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
34001f2c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34001f2e:	f001 f949 	bl	340031c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34001f32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34001f36:	4840      	ldr	r0, [pc, #256]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001f38:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34001f3a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
34001f3c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34001f3e:	f001 f941 	bl	340031c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34001f42:	483d      	ldr	r0, [pc, #244]	@ (34002038 <BSP_XSPI_NOR_Init+0x230>)
34001f44:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
34001f46:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
34001f48:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34001f4a:	f001 f93b 	bl	340031c4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
34001f4e:	4622      	mov	r2, r4
34001f50:	210f      	movs	r1, #15
34001f52:	20aa      	movs	r0, #170	@ 0xaa
34001f54:	f000 fb9c 	bl	34002690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
34001f58:	20aa      	movs	r0, #170	@ 0xaa
34001f5a:	f000 fbf7 	bl	3400274c <HAL_NVIC_EnableIRQ>
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
34001f5e:	a805      	add	r0, sp, #20
34001f60:	f7ff faa7 	bl	340014b2 <MX25UM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34001f64:	9b05      	ldr	r3, [sp, #20]
34001f66:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
34001f6a:	2b00      	cmp	r3, #0
34001f6c:	fab3 f283 	clz	r2, r3
34001f70:	bf08      	it	eq
34001f72:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34001f74:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001f78:	4630      	mov	r0, r6
34001f7a:	a901      	add	r1, sp, #4
      xspi_init.ClockPrescaler = 3;
34001f7c:	f8cd b008 	str.w	fp, [sp, #8]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
34001f80:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34001f82:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34001f84:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001f86:	f7ff fe93 	bl	34001cb0 <MX_XSPI_NOR_Init>
34001f8a:	2800      	cmp	r0, #0
34001f8c:	d14a      	bne.n	34002024 <BSP_XSPI_NOR_Init+0x21c>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001f8e:	4622      	mov	r2, r4
34001f90:	4621      	mov	r1, r4
34001f92:	4630      	mov	r0, r6
34001f94:	f7ff fcfb 	bl	3400198e <MX25UM51245G_ResetEnable>
34001f98:	b110      	cbz	r0, 34001fa0 <BSP_XSPI_NOR_Init+0x198>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001f9a:	f06f 0504 	mvn.w	r5, #4
34001f9e:	e742      	b.n	34001e26 <BSP_XSPI_NOR_Init+0x1e>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001fa0:	4622      	mov	r2, r4
34001fa2:	4621      	mov	r1, r4
34001fa4:	4630      	mov	r0, r6
34001fa6:	f7ff fd1f 	bl	340019e8 <MX25UM51245G_ResetMemory>
34001faa:	2800      	cmp	r0, #0
34001fac:	d1f5      	bne.n	34001f9a <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001fae:	4622      	mov	r2, r4
34001fb0:	4639      	mov	r1, r7
34001fb2:	4630      	mov	r0, r6
34001fb4:	f7ff fceb 	bl	3400198e <MX25UM51245G_ResetEnable>
34001fb8:	2800      	cmp	r0, #0
34001fba:	d1ee      	bne.n	34001f9a <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001fbc:	4622      	mov	r2, r4
34001fbe:	4639      	mov	r1, r7
34001fc0:	4630      	mov	r0, r6
34001fc2:	f7ff fd11 	bl	340019e8 <MX25UM51245G_ResetMemory>
34001fc6:	2800      	cmp	r0, #0
34001fc8:	d1e7      	bne.n	34001f9a <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001fca:	463a      	mov	r2, r7
34001fcc:	4639      	mov	r1, r7
34001fce:	4630      	mov	r0, r6
34001fd0:	f7ff fcdd 	bl	3400198e <MX25UM51245G_ResetEnable>
34001fd4:	2800      	cmp	r0, #0
34001fd6:	d1e0      	bne.n	34001f9a <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001fd8:	463a      	mov	r2, r7
34001fda:	4639      	mov	r1, r7
34001fdc:	4630      	mov	r0, r6
34001fde:	f7ff fd03 	bl	340019e8 <MX25UM51245G_ResetMemory>
34001fe2:	2800      	cmp	r0, #0
34001fe4:	d1d9      	bne.n	34001f9a <BSP_XSPI_NOR_Init+0x192>
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34001fe6:	2064      	movs	r0, #100	@ 0x64
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34001fe8:	f888 7000 	strb.w	r7, [r8]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
34001fec:	f888 4001 	strb.w	r4, [r8, #1]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
34001ff0:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34001ff4:	f000 fa06 	bl	34002404 <HAL_Delay>
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001ff8:	4630      	mov	r0, r6
34001ffa:	f898 2002 	ldrb.w	r2, [r8, #2]
34001ffe:	f898 1001 	ldrb.w	r1, [r8, #1]
34002002:	f7ff fa6f 	bl	340014e4 <MX25UM51245G_AutoPollingMemReady>
34002006:	2800      	cmp	r0, #0
34002008:	d1c7      	bne.n	34001f9a <BSP_XSPI_NOR_Init+0x192>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
3400200a:	f899 2001 	ldrb.w	r2, [r9, #1]
3400200e:	f899 1000 	ldrb.w	r1, [r9]
34002012:	f7ff fe8b 	bl	34001d2c <BSP_XSPI_NOR_ConfigFlash>
34002016:	2800      	cmp	r0, #0
34002018:	f43f af04 	beq.w	34001e24 <BSP_XSPI_NOR_Init+0x1c>
3400201c:	e7bd      	b.n	34001f9a <BSP_XSPI_NOR_Init+0x192>
    ret = BSP_ERROR_WRONG_PARAM;
3400201e:	f06f 0501 	mvn.w	r5, #1
34002022:	e700      	b.n	34001e26 <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
34002024:	f06f 0503 	mvn.w	r5, #3
34002028:	e6fd      	b.n	34001e26 <BSP_XSPI_NOR_Init+0x1e>
3400202a:	bf00      	nop
3400202c:	340126fc 	.word	0x340126fc
34002030:	56028000 	.word	0x56028000
34002034:	56029000 	.word	0x56029000
34002038:	56023400 	.word	0x56023400
3400203c:	340126f8 	.word	0x340126f8

34002040 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34002040:	4b44      	ldr	r3, [pc, #272]	@ (34002154 <SystemInit+0x114>)
34002042:	4a45      	ldr	r2, [pc, #276]	@ (34002158 <SystemInit+0x118>)
{
34002044:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34002046:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
34002048:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
3400204a:	2502      	movs	r5, #2
  SAU->RNR = 0;
3400204c:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400204e:	4943      	ldr	r1, [pc, #268]	@ (3400215c <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34002050:	4e43      	ldr	r6, [pc, #268]	@ (34002160 <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34002052:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34002056:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3400205a:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
3400205e:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
34002062:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34002066:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400206a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
3400206e:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34002072:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002076:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
3400207a:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
3400207e:	2503      	movs	r5, #3
  SAU->RBAR = 0;
34002080:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002084:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
34002088:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
3400208c:	2504      	movs	r5, #4
  SAU->RBAR = 0;
3400208e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002092:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
34002096:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
3400209a:	2505      	movs	r5, #5
  SAU->RBAR = 0;
3400209c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340020a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
340020a4:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
340020a8:	2506      	movs	r5, #6
  SAU->RBAR = 0;
340020aa:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340020ae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
340020b2:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
340020b6:	2507      	movs	r5, #7
  SAU->RBAR = 0;
340020b8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340020bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
340020c0:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
340020c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340020c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
340020cc:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
340020d0:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
340020d4:	689a      	ldr	r2, [r3, #8]
340020d6:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
340020d8:	4a22      	ldr	r2, [pc, #136]	@ (34002164 <SystemInit+0x124>)
340020da:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
340020dc:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
340020e0:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
340020e2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
340020e4:	f045 0510 	orr.w	r5, r5, #16
340020e8:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
340020ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
340020ec:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
340020f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340020f4:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
340020f8:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
340020fc:	f042 0210 	orr.w	r2, r2, #16
34002100:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34002104:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34002108:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
3400210c:	f022 0210 	bic.w	r2, r2, #16
34002110:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34002114:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34002118:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
3400211c:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34002120:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34002122:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34002126:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
3400212a:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3400212e:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
34002132:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34002134:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34002138:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3400213c:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
34002140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34002144:	4a08      	ldr	r2, [pc, #32]	@ (34002168 <SystemInit+0x128>)
34002146:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
3400214a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3400214e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34002152:	bd70      	pop	{r4, r5, r6, pc}
34002154:	e000ed00 	.word	0xe000ed00
34002158:	34000400 	.word	0x34000400
3400215c:	56028000 	.word	0x56028000
34002160:	56008000 	.word	0x56008000
34002164:	56024800 	.word	0x56024800
34002168:	e002ed00 	.word	0xe002ed00

3400216c <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400216c:	4b6e      	ldr	r3, [pc, #440]	@ (34002328 <SystemCoreClockUpdate+0x1bc>)
{
3400216e:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34002170:	6a1a      	ldr	r2, [r3, #32]
34002172:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
34002176:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
3400217a:	f000 80b8 	beq.w	340022ee <SystemCoreClockUpdate+0x182>
3400217e:	d806      	bhi.n	3400218e <SystemCoreClockUpdate+0x22>
34002180:	b962      	cbnz	r2, 3400219c <SystemCoreClockUpdate+0x30>
  {
  case 0:  /* HSI used as system clock source (default after reset) */
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34002182:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34002184:	4b69      	ldr	r3, [pc, #420]	@ (3400232c <SystemCoreClockUpdate+0x1c0>)
34002186:	f3c2 12c1 	ubfx	r2, r2, #7, #2
3400218a:	40d3      	lsrs	r3, r2
    break;
3400218c:	e003      	b.n	34002196 <SystemCoreClockUpdate+0x2a>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400218e:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34002192:	d00b      	beq.n	340021ac <SystemCoreClockUpdate+0x40>
  uint32_t sysclk = 0;
34002194:	2300      	movs	r3, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34002196:	4a66      	ldr	r2, [pc, #408]	@ (34002330 <SystemCoreClockUpdate+0x1c4>)
34002198:	6013      	str	r3, [r2, #0]
}
3400219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
3400219e:	4a65      	ldr	r2, [pc, #404]	@ (34002334 <SystemCoreClockUpdate+0x1c8>)
340021a0:	f413 7f00 	tst.w	r3, #512	@ 0x200
340021a4:	4b64      	ldr	r3, [pc, #400]	@ (34002338 <SystemCoreClockUpdate+0x1cc>)
340021a6:	bf08      	it	eq
340021a8:	4613      	moveq	r3, r2
340021aa:	e7f4      	b.n	34002196 <SystemCoreClockUpdate+0x2a>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
340021ac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
340021b0:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
340021b4:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
340021b8:	d02a      	beq.n	34002210 <SystemCoreClockUpdate+0xa4>
340021ba:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
340021be:	d036      	beq.n	3400222e <SystemCoreClockUpdate+0xc2>
340021c0:	2a00      	cmp	r2, #0
340021c2:	d143      	bne.n	3400224c <SystemCoreClockUpdate+0xe0>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
340021c4:	f8d3 7080 	ldr.w	r7, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
340021c8:	013d      	lsls	r5, r7, #4
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
340021ca:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340021ce:	f100 8096 	bmi.w	340022fe <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
340021d2:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
340021d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
340021da:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
340021de:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
340021e2:	460e      	mov	r6, r1
    switch (pllsource)
340021e4:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
340021e8:	f3c2 65c2 	ubfx	r5, r2, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
340021ec:	f3c7 5105 	ubfx	r1, r7, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
340021f0:	f3c2 6202 	ubfx	r2, r2, #24, #3
    switch (pllsource)
340021f4:	d04f      	beq.n	34002296 <SystemCoreClockUpdate+0x12a>
340021f6:	d87c      	bhi.n	340022f2 <SystemCoreClockUpdate+0x186>
340021f8:	2e00      	cmp	r6, #0
340021fa:	d03c      	beq.n	34002276 <SystemCoreClockUpdate+0x10a>
340021fc:	2600      	movs	r6, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340021fe:	4b4a      	ldr	r3, [pc, #296]	@ (34002328 <SystemCoreClockUpdate+0x1bc>)
        sysclk = MSI_VALUE;
34002200:	4f4c      	ldr	r7, [pc, #304]	@ (34002334 <SystemCoreClockUpdate+0x1c8>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        sysclk = MSI_VALUE;
34002204:	f413 7f00 	tst.w	r3, #512	@ 0x200
34002208:	4b4b      	ldr	r3, [pc, #300]	@ (34002338 <SystemCoreClockUpdate+0x1cc>)
3400220a:	bf08      	it	eq
3400220c:	463b      	moveq	r3, r7
3400220e:	e038      	b.n	34002282 <SystemCoreClockUpdate+0x116>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
34002210:	f8d3 7090 	ldr.w	r7, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
34002214:	013c      	lsls	r4, r7, #4
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34002216:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400221a:	d470      	bmi.n	340022fe <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
3400221c:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
34002220:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34002224:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34002228:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
3400222c:	e7d9      	b.n	340021e2 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
3400222e:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
34002232:	0138      	lsls	r0, r7, #4
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
34002234:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002238:	d461      	bmi.n	340022fe <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
3400223a:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
3400223e:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34002242:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34002246:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
3400224a:	e7ca      	b.n	340021e2 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
3400224c:	f8d3 70b0 	ldr.w	r7, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
34002250:	013a      	lsls	r2, r7, #4
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34002252:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002256:	d452      	bmi.n	340022fe <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34002258:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
3400225c:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34002260:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34002264:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34002268:	e7bb      	b.n	340021e2 <SystemCoreClockUpdate+0x76>
    switch (pllsource)
3400226a:	460a      	mov	r2, r1
3400226c:	460d      	mov	r5, r1
3400226e:	4608      	mov	r0, r1
34002270:	460c      	mov	r4, r1
34002272:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34002276:	4b2c      	ldr	r3, [pc, #176]	@ (34002328 <SystemCoreClockUpdate+0x1bc>)
34002278:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
3400227a:	4b2c      	ldr	r3, [pc, #176]	@ (3400232c <SystemCoreClockUpdate+0x1c0>)
3400227c:	f3c7 17c1 	ubfx	r7, r7, #7, #2
34002280:	40fb      	lsrs	r3, r7
    if (pllbypass == 0U)
34002282:	b14e      	cbz	r6, 34002298 <SystemCoreClockUpdate+0x12c>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34002284:	4a28      	ldr	r2, [pc, #160]	@ (34002328 <SystemCoreClockUpdate+0x1bc>)
34002286:	f8d2 20c4 	ldr.w	r2, [r2, #196]	@ 0xc4
3400228a:	f3c2 4207 	ubfx	r2, r2, #16, #8
3400228e:	3201      	adds	r2, #1
    sysclk = sysclk / ic_divider;
34002290:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
34002294:	e77f      	b.n	34002196 <SystemCoreClockUpdate+0x2a>
      sysclk = HSE_VALUE;
34002296:	4b29      	ldr	r3, [pc, #164]	@ (3400233c <SystemCoreClockUpdate+0x1d0>)
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34002298:	ee07 0a10 	vmov	s14, r0
3400229c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
340022a0:	ee07 4a10 	vmov	s14, r4
340022a4:	ee07 3a90 	vmov	s15, r3
340022a8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 34002340 <SystemCoreClockUpdate+0x1d4>
340022ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
340022b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340022b4:	eea6 7a26 	vfma.f32	s14, s12, s13
340022b8:	ee67 7a87 	vmul.f32	s15, s15, s14
340022bc:	ee07 1a10 	vmov	s14, r1
340022c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
340022c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
340022c8:	ee07 5a90 	vmov	s15, r5
340022cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
340022d0:	ee07 2a90 	vmov	s15, r2
340022d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340022d8:	ee27 7a27 	vmul.f32	s14, s14, s15
340022dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
340022e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340022e4:	ee17 3a90 	vmov	r3, s15
340022e8:	e7cc      	b.n	34002284 <SystemCoreClockUpdate+0x118>
      sysclk = HSE_VALUE;
340022ea:	4b14      	ldr	r3, [pc, #80]	@ (3400233c <SystemCoreClockUpdate+0x1d0>)
340022ec:	e7ca      	b.n	34002284 <SystemCoreClockUpdate+0x118>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340022ee:	4b13      	ldr	r3, [pc, #76]	@ (3400233c <SystemCoreClockUpdate+0x1d0>)
340022f0:	e751      	b.n	34002196 <SystemCoreClockUpdate+0x2a>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
340022f2:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
340022f6:	4b13      	ldr	r3, [pc, #76]	@ (34002344 <SystemCoreClockUpdate+0x1d8>)
340022f8:	bf18      	it	ne
340022fa:	2300      	movne	r3, #0
340022fc:	e7cc      	b.n	34002298 <SystemCoreClockUpdate+0x12c>
    switch (pllsource)
340022fe:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
34002302:	d0f2      	beq.n	340022ea <SystemCoreClockUpdate+0x17e>
34002304:	d809      	bhi.n	3400231a <SystemCoreClockUpdate+0x1ae>
34002306:	2900      	cmp	r1, #0
34002308:	d0af      	beq.n	3400226a <SystemCoreClockUpdate+0xfe>
3400230a:	2200      	movs	r2, #0
3400230c:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
34002310:	4615      	mov	r5, r2
34002312:	4610      	mov	r0, r2
34002314:	4614      	mov	r4, r2
34002316:	4611      	mov	r1, r2
34002318:	e771      	b.n	340021fe <SystemCoreClockUpdate+0x92>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3400231a:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
3400231e:	4b09      	ldr	r3, [pc, #36]	@ (34002344 <SystemCoreClockUpdate+0x1d8>)
34002320:	bf18      	it	ne
34002322:	2300      	movne	r3, #0
34002324:	e7ae      	b.n	34002284 <SystemCoreClockUpdate+0x118>
34002326:	bf00      	nop
34002328:	56028000 	.word	0x56028000
3400232c:	03d09000 	.word	0x03d09000
34002330:	34012394 	.word	0x34012394
34002334:	003d0900 	.word	0x003d0900
34002338:	00f42400 	.word	0x00f42400
3400233c:	02dc6c00 	.word	0x02dc6c00
34002340:	33800000 	.word	0x33800000
34002344:	00bb8000 	.word	0x00bb8000

34002348 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34002348:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
3400234c:	b500      	push	{lr}
  SystemCoreClockUpdate();
3400234e:	f7ff ff0d 	bl	3400216c <SystemCoreClockUpdate>

  return SystemCoreClock;
}
34002352:	4b05      	ldr	r3, [pc, #20]	@ (34002368 <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
34002354:	f85d eb04 	ldr.w	lr, [sp], #4
34002358:	6818      	ldr	r0, [r3, #0]
3400235a:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
3400235e:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34002362:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34002366:	4774      	bxns	lr
34002368:	34012394 	.word	0x34012394

3400236c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
3400236c:	4770      	bx	lr
	...

34002370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34002370:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34002372:	4b0f      	ldr	r3, [pc, #60]	@ (340023b0 <HAL_InitTick+0x40>)
{
34002374:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq == 0UL)
34002376:	781a      	ldrb	r2, [r3, #0]
34002378:	b90a      	cbnz	r2, 3400237e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
3400237a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
3400237c:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
3400237e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34002382:	fbb3 f3f2 	udiv	r3, r3, r2
34002386:	4a0b      	ldr	r2, [pc, #44]	@ (340023b4 <HAL_InitTick+0x44>)
34002388:	6810      	ldr	r0, [r2, #0]
3400238a:	fbb0 f0f3 	udiv	r0, r0, r3
3400238e:	f000 f9f1 	bl	34002774 <HAL_SYSTICK_Config>
34002392:	4604      	mov	r4, r0
34002394:	2800      	cmp	r0, #0
34002396:	d1f0      	bne.n	3400237a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34002398:	2d0f      	cmp	r5, #15
3400239a:	d8ee      	bhi.n	3400237a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
3400239c:	4602      	mov	r2, r0
3400239e:	4629      	mov	r1, r5
340023a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340023a4:	f000 f974 	bl	34002690 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
340023a8:	4b03      	ldr	r3, [pc, #12]	@ (340023b8 <HAL_InitTick+0x48>)
340023aa:	4620      	mov	r0, r4
340023ac:	601d      	str	r5, [r3, #0]
  return HAL_OK;
340023ae:	e7e5      	b.n	3400237c <HAL_InitTick+0xc>
340023b0:	34012398 	.word	0x34012398
340023b4:	34012394 	.word	0x34012394
340023b8:	3401239c 	.word	0x3401239c

340023bc <HAL_Init>:
{
340023bc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
340023be:	2003      	movs	r0, #3
340023c0:	f000 f948 	bl	34002654 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
340023c4:	f7ff fed2 	bl	3400216c <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
340023c8:	200f      	movs	r0, #15
340023ca:	f7ff ffd1 	bl	34002370 <HAL_InitTick>
340023ce:	4604      	mov	r4, r0
340023d0:	b918      	cbnz	r0, 340023da <HAL_Init+0x1e>
  HAL_MspInit();
340023d2:	f7ff ffcb 	bl	3400236c <HAL_MspInit>
}
340023d6:	4620      	mov	r0, r4
340023d8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
340023da:	2401      	movs	r4, #1
340023dc:	e7fb      	b.n	340023d6 <HAL_Init+0x1a>
	...

340023e0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
340023e0:	4a03      	ldr	r2, [pc, #12]	@ (340023f0 <HAL_IncTick+0x10>)
340023e2:	4b04      	ldr	r3, [pc, #16]	@ (340023f4 <HAL_IncTick+0x14>)
340023e4:	6811      	ldr	r1, [r2, #0]
340023e6:	781b      	ldrb	r3, [r3, #0]
340023e8:	440b      	add	r3, r1
340023ea:	6013      	str	r3, [r2, #0]
}
340023ec:	4770      	bx	lr
340023ee:	bf00      	nop
340023f0:	34012760 	.word	0x34012760
340023f4:	34012398 	.word	0x34012398

340023f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
340023f8:	4b01      	ldr	r3, [pc, #4]	@ (34002400 <HAL_GetTick+0x8>)
340023fa:	6818      	ldr	r0, [r3, #0]
}
340023fc:	4770      	bx	lr
340023fe:	bf00      	nop
34002400:	34012760 	.word	0x34012760

34002404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34002404:	b538      	push	{r3, r4, r5, lr}
34002406:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
34002408:	f7ff fff6 	bl	340023f8 <HAL_GetTick>
3400240c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
3400240e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
34002410:	bf1e      	ittt	ne
34002412:	4b04      	ldrne	r3, [pc, #16]	@ (34002424 <HAL_Delay+0x20>)
34002414:	781b      	ldrbne	r3, [r3, #0]
34002416:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
34002418:	f7ff ffee 	bl	340023f8 <HAL_GetTick>
3400241c:	1b43      	subs	r3, r0, r5
3400241e:	42a3      	cmp	r3, r4
34002420:	d3fa      	bcc.n	34002418 <HAL_Delay+0x14>
  {
  }
}
34002422:	bd38      	pop	{r3, r4, r5, pc}
34002424:	34012398 	.word	0x34012398

34002428 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34002428:	b570      	push	{r4, r5, r6, lr}
3400242a:	4604      	mov	r4, r0
3400242c:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
3400242e:	f7ff ffe3 	bl	340023f8 <HAL_GetTick>
34002432:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
34002434:	b12c      	cbz	r4, 34002442 <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34002436:	6822      	ldr	r2, [r4, #0]
34002438:	4b1b      	ldr	r3, [pc, #108]	@ (340024a8 <HAL_BSEC_OTP_Reload+0x80>)
3400243a:	429a      	cmp	r2, r3
3400243c:	d003      	beq.n	34002446 <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400243e:	2301      	movs	r3, #1
34002440:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
34002442:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
34002444:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
34002446:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
3400244a:	d2f8      	bcs.n	3400243e <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
3400244c:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400244e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
34002452:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34002456:	2301      	movs	r3, #1
34002458:	f005 001f 	and.w	r0, r5, #31
3400245c:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400245e:	420b      	tst	r3, r1
34002460:	d11f      	bne.n	340024a2 <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34002462:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
34002466:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
3400246a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3400246e:	432b      	orrs	r3, r5
34002470:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34002474:	6823      	ldr	r3, [r4, #0]
34002476:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400247a:	07d2      	lsls	r2, r2, #31
3400247c:	d409      	bmi.n	34002492 <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
3400247e:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
34002482:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
34002486:	d0dd      	beq.n	34002444 <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
34002488:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400248c:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
34002490:	e7d6      	b.n	34002440 <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34002492:	f7ff ffb1 	bl	340023f8 <HAL_GetTick>
34002496:	1b80      	subs	r0, r0, r6
34002498:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
3400249c:	d9ea      	bls.n	34002474 <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
3400249e:	230a      	movs	r3, #10
340024a0:	e7ce      	b.n	34002440 <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
340024a2:	2304      	movs	r3, #4
340024a4:	e7cc      	b.n	34002440 <HAL_BSEC_OTP_Reload+0x18>
340024a6:	bf00      	nop
340024a8:	56009000 	.word	0x56009000

340024ac <HAL_BSEC_OTP_Read>:
{
340024ac:	b570      	push	{r4, r5, r6, lr}
340024ae:	460e      	mov	r6, r1
340024b0:	4615      	mov	r5, r2
  if (hbsec == NULL)
340024b2:	4604      	mov	r4, r0
340024b4:	b130      	cbz	r0, 340024c4 <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
340024b6:	b11a      	cbz	r2, 340024c0 <HAL_BSEC_OTP_Read+0x14>
340024b8:	6802      	ldr	r2, [r0, #0]
340024ba:	4b09      	ldr	r3, [pc, #36]	@ (340024e0 <HAL_BSEC_OTP_Read+0x34>)
340024bc:	429a      	cmp	r2, r3
340024be:	d003      	beq.n	340024c8 <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340024c0:	2301      	movs	r3, #1
340024c2:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340024c4:	2001      	movs	r0, #1
}
340024c6:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
340024c8:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
340024cc:	d2f8      	bcs.n	340024c0 <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
340024ce:	f7ff ffab 	bl	34002428 <HAL_BSEC_OTP_Reload>
340024d2:	2800      	cmp	r0, #0
340024d4:	d1f6      	bne.n	340024c4 <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
340024d6:	6823      	ldr	r3, [r4, #0]
340024d8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
340024dc:	602b      	str	r3, [r5, #0]
  return HAL_OK;
340024de:	e7f2      	b.n	340024c6 <HAL_BSEC_OTP_Read+0x1a>
340024e0:	56009000 	.word	0x56009000

340024e4 <HAL_BSEC_OTP_Program>:
{
340024e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
340024e8:	4604      	mov	r4, r0
340024ea:	460e      	mov	r6, r1
340024ec:	4617      	mov	r7, r2
340024ee:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
340024f0:	f7ff ff82 	bl	340023f8 <HAL_GetTick>
340024f4:	4680      	mov	r8, r0
  if (hbsec == NULL)
340024f6:	b12c      	cbz	r4, 34002504 <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
340024f8:	6822      	ldr	r2, [r4, #0]
340024fa:	4b28      	ldr	r3, [pc, #160]	@ (3400259c <HAL_BSEC_OTP_Program+0xb8>)
340024fc:	429a      	cmp	r2, r3
340024fe:	d005      	beq.n	3400250c <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34002500:	2301      	movs	r3, #1
34002502:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
34002504:	2001      	movs	r0, #1
}
34002506:	b003      	add	sp, #12
34002508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
3400250c:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
34002510:	d004      	beq.n	3400251c <HAL_BSEC_OTP_Program+0x38>
34002512:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
34002516:	4822      	ldr	r0, [pc, #136]	@ (340025a0 <HAL_BSEC_OTP_Program+0xbc>)
34002518:	f7fe ff48 	bl	340013ac <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
3400251c:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
34002520:	d2ee      	bcs.n	34002500 <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34002522:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
34002524:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34002526:	f503 7300 	add.w	r3, r3, #512	@ 0x200
3400252a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400252e:	2301      	movs	r3, #1
34002530:	f006 001f 	and.w	r0, r6, #31
34002534:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34002536:	420b      	tst	r3, r1
34002538:	d12e      	bne.n	34002598 <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
3400253a:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
3400253e:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
34002542:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
34002546:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
3400254a:	4335      	orrs	r5, r6
3400254c:	ea45 0509 	orr.w	r5, r5, r9
34002550:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
34002554:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34002558:	6823      	ldr	r3, [r4, #0]
3400255a:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400255e:	07d2      	lsls	r2, r2, #31
34002560:	d406      	bmi.n	34002570 <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
34002562:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34002566:	03db      	lsls	r3, r3, #15
34002568:	d50b      	bpl.n	34002582 <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
3400256a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3400256e:	e7c8      	b.n	34002502 <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34002570:	f7ff ff42 	bl	340023f8 <HAL_GetTick>
34002574:	eba0 0008 	sub.w	r0, r0, r8
34002578:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
3400257c:	d9ec      	bls.n	34002558 <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
3400257e:	230a      	movs	r3, #10
34002580:	e7bf      	b.n	34002502 <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
34002582:	4631      	mov	r1, r6
34002584:	4620      	mov	r0, r4
34002586:	aa01      	add	r2, sp, #4
34002588:	f7ff ff90 	bl	340024ac <HAL_BSEC_OTP_Read>
3400258c:	2800      	cmp	r0, #0
3400258e:	d1b9      	bne.n	34002504 <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
34002590:	9b01      	ldr	r3, [sp, #4]
34002592:	42bb      	cmp	r3, r7
34002594:	d1e9      	bne.n	3400256a <HAL_BSEC_OTP_Program+0x86>
34002596:	e7b6      	b.n	34002506 <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34002598:	2304      	movs	r3, #4
3400259a:	e7b2      	b.n	34002502 <HAL_BSEC_OTP_Program+0x1e>
3400259c:	56009000 	.word	0x56009000
340025a0:	340105b0 	.word	0x340105b0

340025a4 <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
340025a4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
340025a6:	4604      	mov	r4, r0
340025a8:	b350      	cbz	r0, 34002600 <HAL_CACHEAXI_Enable+0x5c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
340025aa:	6803      	ldr	r3, [r0, #0]
340025ac:	4a15      	ldr	r2, [pc, #84]	@ (34002604 <HAL_CACHEAXI_Enable+0x60>)
340025ae:	4293      	cmp	r3, r2
340025b0:	d008      	beq.n	340025c4 <HAL_CACHEAXI_Enable+0x20>
340025b2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340025b6:	4293      	cmp	r3, r2
340025b8:	d004      	beq.n	340025c4 <HAL_CACHEAXI_Enable+0x20>
340025ba:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
340025be:	4812      	ldr	r0, [pc, #72]	@ (34002608 <HAL_CACHEAXI_Enable+0x64>)
340025c0:	f7fe fef4 	bl	340013ac <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340025c4:	6823      	ldr	r3, [r4, #0]
340025c6:	685b      	ldr	r3, [r3, #4]
340025c8:	07d9      	lsls	r1, r3, #31
340025ca:	d407      	bmi.n	340025dc <HAL_CACHEAXI_Enable+0x38>
  }

  if (status == HAL_OK)
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340025cc:	2000      	movs	r0, #0
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340025ce:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340025d0:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340025d2:	6813      	ldr	r3, [r2, #0]
340025d4:	f043 0301 	orr.w	r3, r3, #1
340025d8:	6013      	str	r3, [r2, #0]
  }

  return status;
}
340025da:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
340025dc:	f7ff ff0c 	bl	340023f8 <HAL_GetTick>
340025e0:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340025e2:	6823      	ldr	r3, [r4, #0]
340025e4:	685b      	ldr	r3, [r3, #4]
340025e6:	07db      	lsls	r3, r3, #31
340025e8:	d5f0      	bpl.n	340025cc <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
340025ea:	f7ff ff05 	bl	340023f8 <HAL_GetTick>
340025ee:	1b40      	subs	r0, r0, r5
340025f0:	2801      	cmp	r0, #1
340025f2:	d9f6      	bls.n	340025e2 <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
340025f4:	6823      	ldr	r3, [r4, #0]
340025f6:	685b      	ldr	r3, [r3, #4]
340025f8:	07da      	lsls	r2, r3, #31
340025fa:	d4f2      	bmi.n	340025e2 <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
340025fc:	2310      	movs	r3, #16
340025fe:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
34002600:	2001      	movs	r0, #1
34002602:	e7ea      	b.n	340025da <HAL_CACHEAXI_Enable+0x36>
34002604:	580dfc00 	.word	0x580dfc00
34002608:	34010659 	.word	0x34010659

3400260c <HAL_CACHEAXI_Init>:
{
3400260c:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
3400260e:	4604      	mov	r4, r0
34002610:	b1c8      	cbz	r0, 34002646 <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34002612:	6803      	ldr	r3, [r0, #0]
34002614:	4a0d      	ldr	r2, [pc, #52]	@ (3400264c <HAL_CACHEAXI_Init+0x40>)
34002616:	4293      	cmp	r3, r2
34002618:	d007      	beq.n	3400262a <HAL_CACHEAXI_Init+0x1e>
3400261a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400261e:	4293      	cmp	r3, r2
34002620:	d003      	beq.n	3400262a <HAL_CACHEAXI_Init+0x1e>
34002622:	21bc      	movs	r1, #188	@ 0xbc
34002624:	480a      	ldr	r0, [pc, #40]	@ (34002650 <HAL_CACHEAXI_Init+0x44>)
34002626:	f7fe fec1 	bl	340013ac <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
3400262a:	7923      	ldrb	r3, [r4, #4]
3400262c:	b913      	cbnz	r3, 34002634 <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
3400262e:	4620      	mov	r0, r4
34002630:	f7fe fea2 	bl	34001378 <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002634:	2300      	movs	r3, #0
34002636:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
34002638:	2301      	movs	r3, #1
3400263a:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400263c:	4620      	mov	r0, r4
}
3400263e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34002642:	f7ff bfaf 	b.w	340025a4 <HAL_CACHEAXI_Enable>
}
34002646:	2001      	movs	r0, #1
34002648:	bd10      	pop	{r4, pc}
3400264a:	bf00      	nop
3400264c:	580dfc00 	.word	0x580dfc00
34002650:	34010659 	.word	0x34010659

34002654 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002654:	1ec3      	subs	r3, r0, #3
34002656:	2b04      	cmp	r3, #4
{
34002658:	b510      	push	{r4, lr}
3400265a:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
3400265c:	d903      	bls.n	34002666 <HAL_NVIC_SetPriorityGrouping+0x12>
3400265e:	21e6      	movs	r1, #230	@ 0xe6
34002660:	4809      	ldr	r0, [pc, #36]	@ (34002688 <HAL_NVIC_SetPriorityGrouping+0x34>)
34002662:	f7fe fea3 	bl	340013ac <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34002666:	4909      	ldr	r1, [pc, #36]	@ (3400268c <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34002668:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400266a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3400266c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34002670:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
34002674:	0412      	lsls	r2, r2, #16
34002676:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34002678:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
3400267a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
3400267e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
34002682:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
34002684:	bd10      	pop	{r4, pc}
34002686:	bf00      	nop
34002688:	34010706 	.word	0x34010706
3400268c:	e000ed00 	.word	0xe000ed00

34002690 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34002690:	f110 0f0c 	cmn.w	r0, #12
{
34002694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34002698:	4605      	mov	r5, r0
3400269a:	460c      	mov	r4, r1
3400269c:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400269e:	db01      	blt.n	340026a4 <HAL_NVIC_SetPriority+0x14>
340026a0:	1d03      	adds	r3, r0, #4
340026a2:	d103      	bne.n	340026ac <HAL_NVIC_SetPriority+0x1c>
340026a4:	21ff      	movs	r1, #255	@ 0xff
340026a6:	4826      	ldr	r0, [pc, #152]	@ (34002740 <HAL_NVIC_SetPriority+0xb0>)
340026a8:	f7fe fe80 	bl	340013ac <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
340026ac:	4b25      	ldr	r3, [pc, #148]	@ (34002744 <HAL_NVIC_SetPriority+0xb4>)
340026ae:	68de      	ldr	r6, [r3, #12]
340026b0:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
340026b4:	2e02      	cmp	r6, #2
340026b6:	d806      	bhi.n	340026c6 <HAL_NVIC_SetPriority+0x36>
340026b8:	b157      	cbz	r7, 340026d0 <HAL_NVIC_SetPriority+0x40>
340026ba:	f44f 7181 	mov.w	r1, #258	@ 0x102
340026be:	4820      	ldr	r0, [pc, #128]	@ (34002740 <HAL_NVIC_SetPriority+0xb0>)
340026c0:	f7fe fe74 	bl	340013ac <assert_failed>
340026c4:	e004      	b.n	340026d0 <HAL_NVIC_SetPriority+0x40>
340026c6:	2301      	movs	r3, #1
340026c8:	1ef2      	subs	r2, r6, #3
340026ca:	4093      	lsls	r3, r2
340026cc:	42bb      	cmp	r3, r7
340026ce:	d9f4      	bls.n	340026ba <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
340026d0:	2c0f      	cmp	r4, #15
340026d2:	f1c6 0807 	rsb	r8, r6, #7
340026d6:	d804      	bhi.n	340026e2 <HAL_NVIC_SetPriority+0x52>
340026d8:	2301      	movs	r3, #1
340026da:	fa03 f308 	lsl.w	r3, r3, r8
340026de:	42a3      	cmp	r3, r4
340026e0:	d804      	bhi.n	340026ec <HAL_NVIC_SetPriority+0x5c>
340026e2:	f240 1103 	movw	r1, #259	@ 0x103
340026e6:	4816      	ldr	r0, [pc, #88]	@ (34002740 <HAL_NVIC_SetPriority+0xb0>)
340026e8:	f7fe fe60 	bl	340013ac <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
340026ec:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
340026f0:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
340026f4:	bf28      	it	cs
340026f6:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340026fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
340026fe:	2b06      	cmp	r3, #6
34002700:	f1a6 0603 	sub.w	r6, r6, #3
34002704:	bf98      	it	ls
34002706:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002708:	fa02 f808 	lsl.w	r8, r2, r8
3400270c:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34002710:	40b2      	lsls	r2, r6
34002712:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002716:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
34002718:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400271a:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400271e:	bfac      	ite	ge
34002720:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002724:	4a08      	ldrlt	r2, [pc, #32]	@ (34002748 <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002726:	ea4f 1303 	mov.w	r3, r3, lsl #4
3400272a:	b2db      	uxtb	r3, r3
3400272c:	bfab      	itete	ge
3400272e:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002732:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002736:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400273a:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
3400273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34002740:	34010706 	.word	0x34010706
34002744:	e000ed00 	.word	0xe000ed00
34002748:	e000ed14 	.word	0xe000ed14

3400274c <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
3400274c:	2800      	cmp	r0, #0
3400274e:	db08      	blt.n	34002762 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34002750:	2301      	movs	r3, #1
34002752:	0941      	lsrs	r1, r0, #5
34002754:	4a05      	ldr	r2, [pc, #20]	@ (3400276c <HAL_NVIC_EnableIRQ+0x20>)
34002756:	f000 001f 	and.w	r0, r0, #31
3400275a:	4083      	lsls	r3, r0
3400275c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
34002760:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34002762:	f240 1115 	movw	r1, #277	@ 0x115
34002766:	4802      	ldr	r0, [pc, #8]	@ (34002770 <HAL_NVIC_EnableIRQ+0x24>)
34002768:	f7fe be20 	b.w	340013ac <assert_failed>
3400276c:	e000e100 	.word	0xe000e100
34002770:	34010706 	.word	0x34010706

34002774 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34002774:	3801      	subs	r0, #1
34002776:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
3400277a:	d20b      	bcs.n	34002794 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
3400277c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002780:	21f0      	movs	r1, #240	@ 0xf0
34002782:	4a05      	ldr	r2, [pc, #20]	@ (34002798 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002784:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002786:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3400278a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
3400278c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3400278e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34002790:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34002792:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
34002794:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
34002796:	4770      	bx	lr
34002798:	e000ed00 	.word	0xe000ed00

3400279c <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @brief  Line Event callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
3400279c:	4770      	bx	lr

3400279e <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @brief  Limit callback on the Pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
3400279e:	4770      	bx	lr

340027a0 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @brief  Error callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340027a0:	4770      	bx	lr

340027a2 <HAL_DCMIPP_ErrorCallback>:
/**
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
340027a2:	4770      	bx	lr

340027a4 <HAL_DCMIPP_IRQHandler>:
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340027a4:	6803      	ldr	r3, [r0, #0]
{
340027a6:	b570      	push	{r4, r5, r6, lr}
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340027a8:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	@ 0x3f8
{
340027ac:	4604      	mov	r4, r0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
340027ae:	0472      	lsls	r2, r6, #17
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
340027b0:	f8d3 53f0 	ldr.w	r5, [r3, #1008]	@ 0x3f0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
340027b4:	d512      	bpl.n	340027dc <HAL_DCMIPP_IRQHandler+0x38>
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
340027b6:	0469      	lsls	r1, r5, #17
340027b8:	d510      	bpl.n	340027dc <HAL_DCMIPP_IRQHandler+0x38>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340027ba:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340027be:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340027c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
340027c4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
340027c8:	6882      	ldr	r2, [r0, #8]
340027ca:	f042 0204 	orr.w	r2, r2, #4
340027ce:	6082      	str	r2, [r0, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
340027d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340027d4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340027d8:	f7ff ffe1 	bl	3400279e <HAL_DCMIPP_PIPE_LimitEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
340027dc:	0572      	lsls	r2, r6, #21
340027de:	d50a      	bpl.n	340027f6 <HAL_DCMIPP_IRQHandler+0x52>
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
340027e0:	056b      	lsls	r3, r5, #21
340027e2:	d508      	bpl.n	340027f6 <HAL_DCMIPP_IRQHandler+0x52>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
340027e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340027e8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
340027ea:	2100      	movs	r1, #0
340027ec:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
340027ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
340027f2:	f009 f961 	bl	3400bab8 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
340027f6:	05b0      	lsls	r0, r6, #22
340027f8:	d516      	bpl.n	34002828 <HAL_DCMIPP_IRQHandler+0x84>
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
340027fa:	05a9      	lsls	r1, r5, #22
340027fc:	d514      	bpl.n	34002828 <HAL_DCMIPP_IRQHandler+0x84>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340027fe:	6823      	ldr	r3, [r4, #0]
34002800:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
34002804:	0752      	lsls	r2, r2, #29
34002806:	d507      	bpl.n	34002818 <HAL_DCMIPP_IRQHandler+0x74>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34002808:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400280c:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
34002810:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
34002814:	2201      	movs	r2, #1
34002816:	7162      	strb	r2, [r4, #5]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34002818:	f44f 7200 	mov.w	r2, #512	@ 0x200
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
3400281c:	2100      	movs	r1, #0
3400281e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34002820:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34002824:	f009 f958 	bl	3400bad8 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
34002828:	05f3      	lsls	r3, r6, #23
3400282a:	d50a      	bpl.n	34002842 <HAL_DCMIPP_IRQHandler+0x9e>
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
3400282c:	05e8      	lsls	r0, r5, #23
3400282e:	d508      	bpl.n	34002842 <HAL_DCMIPP_IRQHandler+0x9e>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34002830:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002834:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34002836:	2100      	movs	r1, #0
34002838:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
3400283a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
3400283e:	f7ff ffad 	bl	3400279c <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
34002842:	0431      	lsls	r1, r6, #16
34002844:	d516      	bpl.n	34002874 <HAL_DCMIPP_IRQHandler+0xd0>
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34002846:	042a      	lsls	r2, r5, #16
34002848:	d514      	bpl.n	34002874 <HAL_DCMIPP_IRQHandler+0xd0>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400284a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3400284c:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400284e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002852:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002854:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34002858:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
3400285c:	68a2      	ldr	r2, [r4, #8]
3400285e:	f042 0208 	orr.w	r2, r2, #8
34002862:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34002864:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002868:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
3400286c:	2304      	movs	r3, #4
3400286e:	7163      	strb	r3, [r4, #5]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002870:	f7ff ff96 	bl	340027a0 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34002874:	03f3      	lsls	r3, r6, #15
34002876:	d50a      	bpl.n	3400288e <HAL_DCMIPP_IRQHandler+0xea>
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34002878:	03e8      	lsls	r0, r5, #15
3400287a:	d508      	bpl.n	3400288e <HAL_DCMIPP_IRQHandler+0xea>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
3400287c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34002880:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34002882:	2101      	movs	r1, #1
34002884:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34002886:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
3400288a:	f7ff ff87 	bl	3400279c <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
3400288e:	0371      	lsls	r1, r6, #13
34002890:	d50a      	bpl.n	340028a8 <HAL_DCMIPP_IRQHandler+0x104>
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
34002892:	036a      	lsls	r2, r5, #13
34002894:	d508      	bpl.n	340028a8 <HAL_DCMIPP_IRQHandler+0x104>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34002896:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3400289a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
3400289c:	2101      	movs	r1, #1
3400289e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
340028a0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
340028a4:	f009 f908 	bl	3400bab8 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
340028a8:	03b3      	lsls	r3, r6, #14
340028aa:	d516      	bpl.n	340028da <HAL_DCMIPP_IRQHandler+0x136>
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
340028ac:	03a8      	lsls	r0, r5, #14
340028ae:	d514      	bpl.n	340028da <HAL_DCMIPP_IRQHandler+0x136>
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340028b0:	6823      	ldr	r3, [r4, #0]
340028b2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
340028b6:	0751      	lsls	r1, r2, #29
340028b8:	d507      	bpl.n	340028ca <HAL_DCMIPP_IRQHandler+0x126>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
340028ba:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340028be:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
340028c2:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
340028c6:	2201      	movs	r2, #1
340028c8:	71a2      	strb	r2, [r4, #6]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340028ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340028ce:	2101      	movs	r1, #1
340028d0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340028d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340028d6:	f009 f8ff 	bl	3400bad8 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
340028da:	0232      	lsls	r2, r6, #8
340028dc:	d516      	bpl.n	3400290c <HAL_DCMIPP_IRQHandler+0x168>
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
340028de:	022b      	lsls	r3, r5, #8
340028e0:	d514      	bpl.n	3400290c <HAL_DCMIPP_IRQHandler+0x168>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340028e2:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340028e4:	2101      	movs	r1, #1
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340028e6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340028ea:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340028ec:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
340028f0:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
340028f4:	68a2      	ldr	r2, [r4, #8]
340028f6:	f042 0210 	orr.w	r2, r2, #16
340028fa:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
340028fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34002900:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002904:	2304      	movs	r3, #4
34002906:	71a3      	strb	r3, [r4, #6]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34002908:	f7ff ff4a 	bl	340027a0 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
3400290c:	01f0      	lsls	r0, r6, #7
3400290e:	d50a      	bpl.n	34002926 <HAL_DCMIPP_IRQHandler+0x182>
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
34002910:	01e9      	lsls	r1, r5, #7
34002912:	d508      	bpl.n	34002926 <HAL_DCMIPP_IRQHandler+0x182>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34002914:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002918:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
3400291a:	2102      	movs	r1, #2
3400291c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
3400291e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34002922:	f7ff ff3b 	bl	3400279c <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34002926:	0172      	lsls	r2, r6, #5
34002928:	d50a      	bpl.n	34002940 <HAL_DCMIPP_IRQHandler+0x19c>
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
3400292a:	016b      	lsls	r3, r5, #5
3400292c:	d508      	bpl.n	34002940 <HAL_DCMIPP_IRQHandler+0x19c>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
3400292e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34002932:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002934:	2102      	movs	r1, #2
34002936:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34002938:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
3400293c:	f009 f8bc 	bl	3400bab8 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34002940:	01b0      	lsls	r0, r6, #6
34002942:	d516      	bpl.n	34002972 <HAL_DCMIPP_IRQHandler+0x1ce>
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34002944:	01a9      	lsls	r1, r5, #6
34002946:	d514      	bpl.n	34002972 <HAL_DCMIPP_IRQHandler+0x1ce>
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002948:	6823      	ldr	r3, [r4, #0]
3400294a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
3400294e:	0752      	lsls	r2, r2, #29
34002950:	d507      	bpl.n	34002962 <HAL_DCMIPP_IRQHandler+0x1be>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34002952:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002956:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
3400295a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
3400295e:	2201      	movs	r2, #1
34002960:	71e2      	strb	r2, [r4, #7]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34002962:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34002966:	2102      	movs	r1, #2
34002968:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
3400296a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
3400296e:	f009 f8b3 	bl	3400bad8 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34002972:	2e00      	cmp	r6, #0
34002974:	da16      	bge.n	340029a4 <HAL_DCMIPP_IRQHandler+0x200>
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34002976:	2d00      	cmp	r5, #0
34002978:	da14      	bge.n	340029a4 <HAL_DCMIPP_IRQHandler+0x200>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3400297a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
3400297c:	2102      	movs	r1, #2
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3400297e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002982:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002984:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34002988:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
3400298c:	68a2      	ldr	r2, [r4, #8]
3400298e:	f042 0220 	orr.w	r2, r2, #32
34002992:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
34002994:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34002998:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
3400299c:	2304      	movs	r3, #4
3400299e:	71e3      	strb	r3, [r4, #7]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
340029a0:	f7ff fefe 	bl	340027a0 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
340029a4:	0670      	lsls	r0, r6, #25
340029a6:	d514      	bpl.n	340029d2 <HAL_DCMIPP_IRQHandler+0x22e>
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
340029a8:	0669      	lsls	r1, r5, #25
340029aa:	d512      	bpl.n	340029d2 <HAL_DCMIPP_IRQHandler+0x22e>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
340029ac:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340029ae:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
340029b0:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340029b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
340029b8:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
340029bc:	68a2      	ldr	r2, [r4, #8]
340029be:	f042 0202 	orr.w	r2, r2, #2
340029c2:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
340029c4:	2240      	movs	r2, #64	@ 0x40
340029c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340029ca:	2304      	movs	r3, #4
340029cc:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340029ce:	f7ff fee8 	bl	340027a2 <HAL_DCMIPP_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
340029d2:	06b2      	lsls	r2, r6, #26
340029d4:	d514      	bpl.n	34002a00 <HAL_DCMIPP_IRQHandler+0x25c>
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
340029d6:	06ab      	lsls	r3, r5, #26
340029d8:	d512      	bpl.n	34002a00 <HAL_DCMIPP_IRQHandler+0x25c>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
340029da:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340029dc:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
340029de:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340029e2:	f022 0220 	bic.w	r2, r2, #32
340029e6:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
340029ea:	68a2      	ldr	r2, [r4, #8]
340029ec:	f042 0201 	orr.w	r2, r2, #1
340029f0:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
340029f2:	2220      	movs	r2, #32
340029f4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340029f8:	2304      	movs	r3, #4
340029fa:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340029fc:	f7ff fed1 	bl	340027a2 <HAL_DCMIPP_ErrorCallback>
}
34002a00:	bd70      	pop	{r4, r5, r6, pc}

34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @brief  Line Error callback on the Data Lane
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
34002a02:	4770      	bx	lr

34002a04 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
/**
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002a04:	4770      	bx	lr

34002a06 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
/**
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002a06:	4770      	bx	lr

34002a08 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @brief  End Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34002a08:	4770      	bx	lr

34002a0a <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @brief  Start Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34002a0a:	4770      	bx	lr

34002a0c <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @brief  Timer Counter Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
34002a0c:	4770      	bx	lr

34002a0e <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @brief  Line Byte Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
34002a0e:	4770      	bx	lr

34002a10 <HAL_DCMIPP_CSI_IRQHandler>:
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34002a10:	4bb5      	ldr	r3, [pc, #724]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
{
34002a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34002a16:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
{
34002a1a:	4604      	mov	r4, r0
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34002a1c:	02b2      	lsls	r2, r6, #10
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
34002a1e:	f8d3 8094 	ldr.w	r8, [r3, #148]	@ 0x94
  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
34002a22:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
34002a26:	f8d3 7084 	ldr.w	r7, [r3, #132]	@ 0x84
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34002a2a:	d50d      	bpl.n	34002a48 <HAL_DCMIPP_CSI_IRQHandler+0x38>
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
34002a2c:	02a9      	lsls	r1, r5, #10
34002a2e:	d50b      	bpl.n	34002a48 <HAL_DCMIPP_CSI_IRQHandler+0x38>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
34002a30:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002a34:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
34002a38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34002a3c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34002a40:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34002a44:	f7ff ffde 	bl	34002a04 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34002a48:	0732      	lsls	r2, r6, #28
34002a4a:	d515      	bpl.n	34002a78 <HAL_DCMIPP_CSI_IRQHandler+0x68>
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34002a4c:	072b      	lsls	r3, r5, #28
34002a4e:	d513      	bpl.n	34002a78 <HAL_DCMIPP_CSI_IRQHandler+0x68>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a50:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002a52:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a54:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002a58:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a5a:	f013 0f04 	tst.w	r3, #4
34002a5e:	4ba2      	ldr	r3, [pc, #648]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34002a60:	bf1e      	ittt	ne
34002a62:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a66:	f022 0208 	bicne.w	r2, r2, #8
34002a6a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34002a6e:	2208      	movs	r2, #8
34002a70:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002a74:	f7ff ffcb 	bl	34002a0e <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34002a78:	0770      	lsls	r0, r6, #29
34002a7a:	d515      	bpl.n	34002aa8 <HAL_DCMIPP_CSI_IRQHandler+0x98>
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34002a7c:	0769      	lsls	r1, r5, #29
34002a7e:	d513      	bpl.n	34002aa8 <HAL_DCMIPP_CSI_IRQHandler+0x98>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a80:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002a82:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a84:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002a88:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a8a:	f013 0f04 	tst.w	r3, #4
34002a8e:	4b96      	ldr	r3, [pc, #600]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34002a90:	bf1e      	ittt	ne
34002a92:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a96:	f022 0204 	bicne.w	r2, r2, #4
34002a9a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34002a9e:	2204      	movs	r2, #4
34002aa0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002aa4:	f7ff ffb3 	bl	34002a0e <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
34002aa8:	07b2      	lsls	r2, r6, #30
34002aaa:	d515      	bpl.n	34002ad8 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
34002aac:	07ab      	lsls	r3, r5, #30
34002aae:	d513      	bpl.n	34002ad8 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ab0:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002ab2:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ab4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002ab8:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002aba:	f013 0f04 	tst.w	r3, #4
34002abe:	4b8a      	ldr	r3, [pc, #552]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
34002ac0:	bf1e      	ittt	ne
34002ac2:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002ac6:	f022 0202 	bicne.w	r2, r2, #2
34002aca:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
34002ace:	2202      	movs	r2, #2
34002ad0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002ad4:	f7ff ff9b 	bl	34002a0e <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
34002ad8:	07f0      	lsls	r0, r6, #31
34002ada:	d515      	bpl.n	34002b08 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
34002adc:	07e9      	lsls	r1, r5, #31
34002ade:	d513      	bpl.n	34002b08 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ae0:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002ae2:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ae4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002ae8:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002aea:	f013 0f04 	tst.w	r3, #4
34002aee:	4b7e      	ldr	r3, [pc, #504]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34002af0:	bf1e      	ittt	ne
34002af2:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002af6:	f022 0201 	bicne.w	r2, r2, #1
34002afa:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34002afe:	2201      	movs	r2, #1
34002b00:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002b04:	f7ff ff83 	bl	34002a0e <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34002b08:	0432      	lsls	r2, r6, #16
34002b0a:	d516      	bpl.n	34002b3a <HAL_DCMIPP_CSI_IRQHandler+0x12a>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34002b0c:	042b      	lsls	r3, r5, #16
34002b0e:	d514      	bpl.n	34002b3a <HAL_DCMIPP_CSI_IRQHandler+0x12a>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b10:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002b12:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b14:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002b18:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b1a:	f013 0f04 	tst.w	r3, #4
34002b1e:	4b72      	ldr	r3, [pc, #456]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34002b20:	bf1e      	ittt	ne
34002b22:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b26:	f422 4200 	bicne.w	r2, r2, #32768	@ 0x8000
34002b2a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34002b2e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002b32:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002b36:	f7ff ff67 	bl	34002a08 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34002b3a:	0470      	lsls	r0, r6, #17
34002b3c:	d516      	bpl.n	34002b6c <HAL_DCMIPP_CSI_IRQHandler+0x15c>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34002b3e:	0469      	lsls	r1, r5, #17
34002b40:	d514      	bpl.n	34002b6c <HAL_DCMIPP_CSI_IRQHandler+0x15c>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b42:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002b44:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b46:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002b4a:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b4c:	f013 0f04 	tst.w	r3, #4
34002b50:	4b65      	ldr	r3, [pc, #404]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
34002b52:	bf1e      	ittt	ne
34002b54:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b58:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
34002b5c:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
34002b60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34002b64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002b68:	f7ff ff4e 	bl	34002a08 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34002b6c:	04b2      	lsls	r2, r6, #18
34002b6e:	d516      	bpl.n	34002b9e <HAL_DCMIPP_CSI_IRQHandler+0x18e>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
34002b70:	04ab      	lsls	r3, r5, #18
34002b72:	d514      	bpl.n	34002b9e <HAL_DCMIPP_CSI_IRQHandler+0x18e>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b74:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002b76:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b78:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002b7c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b7e:	f013 0f04 	tst.w	r3, #4
34002b82:	4b59      	ldr	r3, [pc, #356]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34002b84:	bf1e      	ittt	ne
34002b86:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b8a:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
34002b8e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34002b92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34002b96:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002b9a:	f7ff ff35 	bl	34002a08 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
34002b9e:	04f0      	lsls	r0, r6, #19
34002ba0:	d516      	bpl.n	34002bd0 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34002ba2:	04e9      	lsls	r1, r5, #19
34002ba4:	d514      	bpl.n	34002bd0 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ba6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002ba8:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002baa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002bae:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bb0:	f013 0f04 	tst.w	r3, #4
34002bb4:	4b4c      	ldr	r3, [pc, #304]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
34002bb6:	bf1e      	ittt	ne
34002bb8:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002bbc:	f422 5280 	bicne.w	r2, r2, #4096	@ 0x1000
34002bc0:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34002bc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34002bc8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002bcc:	f7ff ff1c 	bl	34002a08 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34002bd0:	0532      	lsls	r2, r6, #20
34002bd2:	d516      	bpl.n	34002c02 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34002bd4:	052b      	lsls	r3, r5, #20
34002bd6:	d514      	bpl.n	34002c02 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bd8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002bda:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bdc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002be0:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002be2:	f013 0f04 	tst.w	r3, #4
34002be6:	4b40      	ldr	r3, [pc, #256]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34002be8:	bf1e      	ittt	ne
34002bea:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002bee:	f422 6200 	bicne.w	r2, r2, #2048	@ 0x800
34002bf2:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34002bf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34002bfa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002bfe:	f7ff ff04 	bl	34002a0a <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34002c02:	0570      	lsls	r0, r6, #21
34002c04:	d516      	bpl.n	34002c34 <HAL_DCMIPP_CSI_IRQHandler+0x224>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34002c06:	0569      	lsls	r1, r5, #21
34002c08:	d514      	bpl.n	34002c34 <HAL_DCMIPP_CSI_IRQHandler+0x224>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c0a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002c0c:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c0e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002c12:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c14:	f013 0f04 	tst.w	r3, #4
34002c18:	4b33      	ldr	r3, [pc, #204]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34002c1a:	bf1e      	ittt	ne
34002c1c:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c20:	f422 6280 	bicne.w	r2, r2, #1024	@ 0x400
34002c24:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34002c28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002c2c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002c30:	f7ff feeb 	bl	34002a0a <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34002c34:	05b2      	lsls	r2, r6, #22
34002c36:	d516      	bpl.n	34002c66 <HAL_DCMIPP_CSI_IRQHandler+0x256>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34002c38:	05ab      	lsls	r3, r5, #22
34002c3a:	d514      	bpl.n	34002c66 <HAL_DCMIPP_CSI_IRQHandler+0x256>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c3c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002c3e:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c40:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002c44:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c46:	f013 0f04 	tst.w	r3, #4
34002c4a:	4b27      	ldr	r3, [pc, #156]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34002c4c:	bf1e      	ittt	ne
34002c4e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c52:	f422 7200 	bicne.w	r2, r2, #512	@ 0x200
34002c56:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34002c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
34002c5e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002c62:	f7ff fed2 	bl	34002a0a <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34002c66:	05f0      	lsls	r0, r6, #23
34002c68:	d516      	bpl.n	34002c98 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34002c6a:	05e9      	lsls	r1, r5, #23
34002c6c:	d514      	bpl.n	34002c98 <HAL_DCMIPP_CSI_IRQHandler+0x288>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c6e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002c70:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c72:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002c76:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c78:	f013 0f04 	tst.w	r3, #4
34002c7c:	4b1a      	ldr	r3, [pc, #104]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34002c7e:	bf1e      	ittt	ne
34002c80:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c84:	f422 7280 	bicne.w	r2, r2, #256	@ 0x100
34002c88:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34002c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002c90:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002c94:	f7ff feb9 	bl	34002a0a <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34002c98:	0632      	lsls	r2, r6, #24
34002c9a:	d515      	bpl.n	34002cc8 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34002c9c:	062b      	lsls	r3, r5, #24
34002c9e:	d513      	bpl.n	34002cc8 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ca0:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002ca2:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ca4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002ca8:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002caa:	f013 0f04 	tst.w	r3, #4
34002cae:	4b0e      	ldr	r3, [pc, #56]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34002cb0:	bf1e      	ittt	ne
34002cb2:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002cb6:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
34002cba:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34002cbe:	2280      	movs	r2, #128	@ 0x80
34002cc0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002cc4:	f7ff fea2 	bl	34002a0c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34002cc8:	0670      	lsls	r0, r6, #25
34002cca:	d519      	bpl.n	34002d00 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34002ccc:	0669      	lsls	r1, r5, #25
34002cce:	d517      	bpl.n	34002d00 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cd0:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002cd2:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cd4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002cd8:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cda:	f013 0f04 	tst.w	r3, #4
34002cde:	4b02      	ldr	r3, [pc, #8]	@ (34002ce8 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34002ce0:	bf18      	it	ne
34002ce2:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002ce6:	e001      	b.n	34002cec <HAL_DCMIPP_CSI_IRQHandler+0x2dc>
34002ce8:	58006000 	.word	0x58006000
34002cec:	bf1c      	itt	ne
34002cee:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
34002cf2:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34002cf6:	2240      	movs	r2, #64	@ 0x40
34002cf8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002cfc:	f7ff fe86 	bl	34002a0c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34002d00:	06b2      	lsls	r2, r6, #26
34002d02:	d515      	bpl.n	34002d30 <HAL_DCMIPP_CSI_IRQHandler+0x320>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34002d04:	06ab      	lsls	r3, r5, #26
34002d06:	d513      	bpl.n	34002d30 <HAL_DCMIPP_CSI_IRQHandler+0x320>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d08:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002d0a:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d0c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002d10:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d12:	f013 0f04 	tst.w	r3, #4
34002d16:	4bb9      	ldr	r3, [pc, #740]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34002d18:	bf1e      	ittt	ne
34002d1a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002d1e:	f022 0220 	bicne.w	r2, r2, #32
34002d22:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34002d26:	2220      	movs	r2, #32
34002d28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002d2c:	f7ff fe6e 	bl	34002a0c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34002d30:	06f0      	lsls	r0, r6, #27
34002d32:	d515      	bpl.n	34002d60 <HAL_DCMIPP_CSI_IRQHandler+0x350>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34002d34:	06e9      	lsls	r1, r5, #27
34002d36:	d513      	bpl.n	34002d60 <HAL_DCMIPP_CSI_IRQHandler+0x350>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d38:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002d3a:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d3c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002d40:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d42:	f013 0f04 	tst.w	r3, #4
34002d46:	4bad      	ldr	r3, [pc, #692]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34002d48:	bf1e      	ittt	ne
34002d4a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002d4e:	f022 0210 	bicne.w	r2, r2, #16
34002d52:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34002d56:	2210      	movs	r2, #16
34002d58:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002d5c:	f7ff fe56 	bl	34002a0c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34002d60:	0072      	lsls	r2, r6, #1
34002d62:	d513      	bpl.n	34002d8c <HAL_DCMIPP_CSI_IRQHandler+0x37c>
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34002d64:	006b      	lsls	r3, r5, #1
34002d66:	d511      	bpl.n	34002d8c <HAL_DCMIPP_CSI_IRQHandler+0x37c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002d68:	4ba4      	ldr	r3, [pc, #656]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d6a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002d6c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d70:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34002d74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34002d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002d7c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34002d80:	68a3      	ldr	r3, [r4, #8]
34002d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34002d86:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d88:	f7ff fd0b 	bl	340027a2 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34002d8c:	00b0      	lsls	r0, r6, #2
34002d8e:	d513      	bpl.n	34002db8 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34002d90:	00a9      	lsls	r1, r5, #2
34002d92:	d511      	bpl.n	34002db8 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002d94:	4b99      	ldr	r3, [pc, #612]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d96:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002d98:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d9c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
34002da0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34002da4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34002da8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34002dac:	68a3      	ldr	r3, [r4, #8]
34002dae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34002db2:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002db4:	f7ff fcf5 	bl	340027a2 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34002db8:	00f2      	lsls	r2, r6, #3
34002dba:	d513      	bpl.n	34002de4 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34002dbc:	00eb      	lsls	r3, r5, #3
34002dbe:	d511      	bpl.n	34002de4 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002dc0:	4b8e      	ldr	r3, [pc, #568]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002dc2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002dc4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002dc8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
34002dcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34002dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002dd4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34002dd8:	68a3      	ldr	r3, [r4, #8]
34002dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
34002dde:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002de0:	f7ff fcdf 	bl	340027a2 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34002de4:	0130      	lsls	r0, r6, #4
34002de6:	d513      	bpl.n	34002e10 <HAL_DCMIPP_CSI_IRQHandler+0x400>
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34002de8:	0129      	lsls	r1, r5, #4
34002dea:	d511      	bpl.n	34002e10 <HAL_DCMIPP_CSI_IRQHandler+0x400>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002dec:	4b83      	ldr	r3, [pc, #524]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002dee:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002df0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002df4:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
34002df8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34002dfc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34002e00:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34002e04:	68a3      	ldr	r3, [r4, #8]
34002e06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
34002e0a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e0c:	f7ff fcc9 	bl	340027a2 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34002e10:	0172      	lsls	r2, r6, #5
34002e12:	d513      	bpl.n	34002e3c <HAL_DCMIPP_CSI_IRQHandler+0x42c>
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34002e14:	016b      	lsls	r3, r5, #5
34002e16:	d511      	bpl.n	34002e3c <HAL_DCMIPP_CSI_IRQHandler+0x42c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002e18:	4b78      	ldr	r3, [pc, #480]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e1a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002e1c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002e20:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
34002e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34002e28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34002e2c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34002e30:	68a3      	ldr	r3, [r4, #8]
34002e32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34002e36:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e38:	f7ff fcb3 	bl	340027a2 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34002e3c:	01b0      	lsls	r0, r6, #6
34002e3e:	d513      	bpl.n	34002e68 <HAL_DCMIPP_CSI_IRQHandler+0x458>
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34002e40:	01a9      	lsls	r1, r5, #6
34002e42:	d511      	bpl.n	34002e68 <HAL_DCMIPP_CSI_IRQHandler+0x458>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002e44:	4b6d      	ldr	r3, [pc, #436]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e46:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002e48:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002e4c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
34002e50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34002e54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34002e58:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34002e5c:	68a3      	ldr	r3, [r4, #8]
34002e5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34002e62:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e64:	f7ff fc9d 	bl	340027a2 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34002e68:	01f2      	lsls	r2, r6, #7
34002e6a:	d513      	bpl.n	34002e94 <HAL_DCMIPP_CSI_IRQHandler+0x484>
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34002e6c:	01eb      	lsls	r3, r5, #7
34002e6e:	d511      	bpl.n	34002e94 <HAL_DCMIPP_CSI_IRQHandler+0x484>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002e70:	4b62      	ldr	r3, [pc, #392]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e72:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002e74:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002e78:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
34002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34002e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002e84:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34002e88:	68a3      	ldr	r3, [r4, #8]
34002e8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
34002e8e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e90:	f7ff fc87 	bl	340027a2 <HAL_DCMIPP_ErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34002e94:	f018 0f01 	tst.w	r8, #1
34002e98:	d014      	beq.n	34002ec4 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34002e9a:	07f8      	lsls	r0, r7, #31
34002e9c:	d512      	bpl.n	34002ec4 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002e9e:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002ea0:	4b56      	ldr	r3, [pc, #344]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ea2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002ea4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002ea8:	f022 0201 	bic.w	r2, r2, #1
34002eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002eb0:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34002eb4:	68a3      	ldr	r3, [r4, #8]
34002eb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34002eba:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002ebc:	2304      	movs	r3, #4
34002ebe:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ec0:	f7ff fd9f 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34002ec4:	f018 0f02 	tst.w	r8, #2
34002ec8:	d015      	beq.n	34002ef6 <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34002eca:	07b9      	lsls	r1, r7, #30
34002ecc:	d513      	bpl.n	34002ef6 <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002ece:	4b4b      	ldr	r3, [pc, #300]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ed0:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002ed2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ed6:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002ed8:	f022 0202 	bic.w	r2, r2, #2
34002edc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34002ee0:	2202      	movs	r2, #2
34002ee2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34002ee6:	68a3      	ldr	r3, [r4, #8]
34002ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34002eec:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002eee:	2304      	movs	r3, #4
34002ef0:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ef2:	f7ff fd86 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34002ef6:	f018 0f04 	tst.w	r8, #4
34002efa:	d013      	beq.n	34002f24 <HAL_DCMIPP_CSI_IRQHandler+0x514>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34002efc:	077a      	lsls	r2, r7, #29
34002efe:	d511      	bpl.n	34002f24 <HAL_DCMIPP_CSI_IRQHandler+0x514>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002f00:	4b3e      	ldr	r3, [pc, #248]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f02:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002f04:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f08:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002f0a:	f022 0204 	bic.w	r2, r2, #4
34002f0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34002f12:	2204      	movs	r2, #4
34002f14:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34002f18:	68a3      	ldr	r3, [r4, #8]
34002f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34002f1e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f20:	f7ff fd6f 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34002f24:	f018 0f08 	tst.w	r8, #8
34002f28:	d013      	beq.n	34002f52 <HAL_DCMIPP_CSI_IRQHandler+0x542>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34002f2a:	073b      	lsls	r3, r7, #28
34002f2c:	d511      	bpl.n	34002f52 <HAL_DCMIPP_CSI_IRQHandler+0x542>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002f2e:	4b33      	ldr	r3, [pc, #204]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f30:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002f32:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f36:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002f38:	f022 0208 	bic.w	r2, r2, #8
34002f3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34002f40:	2208      	movs	r2, #8
34002f42:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34002f46:	68a3      	ldr	r3, [r4, #8]
34002f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34002f4c:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f4e:	f7ff fd58 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34002f52:	f018 0f10 	tst.w	r8, #16
34002f56:	d013      	beq.n	34002f80 <HAL_DCMIPP_CSI_IRQHandler+0x570>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34002f58:	06f8      	lsls	r0, r7, #27
34002f5a:	d511      	bpl.n	34002f80 <HAL_DCMIPP_CSI_IRQHandler+0x570>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002f5c:	4b27      	ldr	r3, [pc, #156]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f5e:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002f60:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f64:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002f66:	f022 0210 	bic.w	r2, r2, #16
34002f6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34002f6e:	2210      	movs	r2, #16
34002f70:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34002f74:	68a3      	ldr	r3, [r4, #8]
34002f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34002f7a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f7c:	f7ff fd41 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34002f80:	f418 7f80 	tst.w	r8, #256	@ 0x100
34002f84:	d016      	beq.n	34002fb4 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34002f86:	05f9      	lsls	r1, r7, #23
34002f88:	d514      	bpl.n	34002fb4 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002f8a:	4b1c      	ldr	r3, [pc, #112]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f8c:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002f8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f92:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002f94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34002f98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34002f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002fa0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34002fa4:	68a3      	ldr	r3, [r4, #8]
34002fa6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34002faa:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002fac:	2304      	movs	r3, #4
34002fae:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002fb0:	f7ff fd27 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34002fb4:	f418 7f00 	tst.w	r8, #512	@ 0x200
34002fb8:	d016      	beq.n	34002fe8 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34002fba:	05ba      	lsls	r2, r7, #22
34002fbc:	d514      	bpl.n	34002fe8 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002fbe:	4b0f      	ldr	r3, [pc, #60]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002fc0:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002fc2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002fc6:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002fc8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34002fcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34002fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
34002fd4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34002fd8:	68a3      	ldr	r3, [r4, #8]
34002fda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34002fde:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002fe0:	2304      	movs	r3, #4
34002fe2:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002fe4:	f7ff fd0d 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34002fe8:	f418 6f80 	tst.w	r8, #1024	@ 0x400
34002fec:	d017      	beq.n	3400301e <HAL_DCMIPP_CSI_IRQHandler+0x60e>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34002fee:	057b      	lsls	r3, r7, #21
34002ff0:	d515      	bpl.n	3400301e <HAL_DCMIPP_CSI_IRQHandler+0x60e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002ff2:	4b02      	ldr	r3, [pc, #8]	@ (34002ffc <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002ff4:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002ff6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002ffa:	e001      	b.n	34003000 <HAL_DCMIPP_CSI_IRQHandler+0x5f0>
34002ffc:	58006000 	.word	0x58006000
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003000:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34003002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34003006:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
3400300a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3400300e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34003012:	68a3      	ldr	r3, [r4, #8]
34003014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34003018:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400301a:	f7ff fcf2 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
3400301e:	f418 6f00 	tst.w	r8, #2048	@ 0x800
34003022:	d014      	beq.n	3400304e <HAL_DCMIPP_CSI_IRQHandler+0x63e>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34003024:	0538      	lsls	r0, r7, #20
34003026:	d512      	bpl.n	3400304e <HAL_DCMIPP_CSI_IRQHandler+0x63e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34003028:	4b1f      	ldr	r3, [pc, #124]	@ (340030a8 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400302a:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
3400302c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003030:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34003032:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34003036:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
3400303a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3400303e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34003042:	68a3      	ldr	r3, [r4, #8]
34003044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34003048:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400304a:	f7ff fcda 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
3400304e:	f418 5f80 	tst.w	r8, #4096	@ 0x1000
34003052:	d014      	beq.n	3400307e <HAL_DCMIPP_CSI_IRQHandler+0x66e>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34003054:	04f9      	lsls	r1, r7, #19
34003056:	d512      	bpl.n	3400307e <HAL_DCMIPP_CSI_IRQHandler+0x66e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34003058:	4b13      	ldr	r3, [pc, #76]	@ (340030a8 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400305a:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
3400305c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003060:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34003062:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34003066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
3400306a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400306e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34003072:	68a3      	ldr	r3, [r4, #8]
34003074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34003078:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400307a:	f7ff fcc2 	bl	34002a02 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
3400307e:	03f2      	lsls	r2, r6, #15
34003080:	d50f      	bpl.n	340030a2 <HAL_DCMIPP_CSI_IRQHandler+0x692>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
34003082:	03eb      	lsls	r3, r5, #15
34003084:	d50d      	bpl.n	340030a2 <HAL_DCMIPP_CSI_IRQHandler+0x692>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34003086:	4b08      	ldr	r3, [pc, #32]	@ (340030a8 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34003088:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
3400308a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400308e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34003092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
34003096:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400309a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
3400309e:	f7ff fcb2 	bl	34002a06 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
}
340030a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340030a6:	bf00      	nop
340030a8:	58006000 	.word	0x58006000

340030ac <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
340030ac:	4770      	bx	lr

340030ae <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
340030ae:	4770      	bx	lr

340030b0 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
340030b0:	6803      	ldr	r3, [r0, #0]
{
340030b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
340030b4:	685e      	ldr	r6, [r3, #4]
{
340030b6:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
340030b8:	07f2      	lsls	r2, r6, #31
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
340030ba:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
340030bc:	d514      	bpl.n	340030e8 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
340030be:	05e9      	lsls	r1, r5, #23
340030c0:	d512      	bpl.n	340030e8 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
340030c2:	681a      	ldr	r2, [r3, #0]
340030c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
340030c8:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
340030ca:	6e42      	ldr	r2, [r0, #100]	@ 0x64
340030cc:	f042 0201 	orr.w	r2, r2, #1
340030d0:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
340030d2:	2201      	movs	r2, #1
340030d4:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
340030d6:	2304      	movs	r3, #4
340030d8:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
340030dc:	2300      	movs	r3, #0
340030de:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
340030e2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
340030e4:	b103      	cbz	r3, 340030e8 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
340030e6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
340030e8:	06b2      	lsls	r2, r6, #26
340030ea:	d516      	bpl.n	3400311a <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
340030ec:	04ab      	lsls	r3, r5, #18
340030ee:	d514      	bpl.n	3400311a <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
340030f0:	6823      	ldr	r3, [r4, #0]
340030f2:	681a      	ldr	r2, [r3, #0]
340030f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
340030f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
340030fa:	2220      	movs	r2, #32
340030fc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
340030fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003100:	f043 0302 	orr.w	r3, r3, #2
34003104:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34003106:	2304      	movs	r3, #4
34003108:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
3400310c:	2300      	movs	r3, #0
3400310e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34003112:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003114:	b10b      	cbz	r3, 3400311a <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
34003116:	4620      	mov	r0, r4
34003118:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
3400311a:	0730      	lsls	r0, r6, #28
3400311c:	d516      	bpl.n	3400314c <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
3400311e:	0529      	lsls	r1, r5, #20
34003120:	d514      	bpl.n	3400314c <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
34003122:	6823      	ldr	r3, [r4, #0]
34003124:	681a      	ldr	r2, [r3, #0]
34003126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
3400312a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
3400312c:	2208      	movs	r2, #8
3400312e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
34003130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003132:	f043 0304 	orr.w	r3, r3, #4
34003136:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34003138:	2304      	movs	r3, #4
3400313a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
3400313e:	2300      	movs	r3, #0
34003140:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34003144:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003146:	b10b      	cbz	r3, 3400314c <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
34003148:	4620      	mov	r0, r4
3400314a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
3400314c:	0772      	lsls	r2, r6, #29
3400314e:	d50b      	bpl.n	34003168 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
34003150:	056b      	lsls	r3, r5, #21
34003152:	d509      	bpl.n	34003168 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34003154:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
34003156:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34003158:	681a      	ldr	r2, [r3, #0]
3400315a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
3400315e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
34003160:	2204      	movs	r2, #4
34003162:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
34003164:	f7ff ffa2 	bl	340030ac <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
34003168:	07b0      	lsls	r0, r6, #30
3400316a:	d514      	bpl.n	34003196 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
3400316c:	05a9      	lsls	r1, r5, #22
3400316e:	d512      	bpl.n	34003196 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
34003170:	6823      	ldr	r3, [r4, #0]
34003172:	681a      	ldr	r2, [r3, #0]
34003174:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34003178:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
3400317a:	2202      	movs	r2, #2
3400317c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
3400317e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003180:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
34003182:	2301      	movs	r3, #1
34003184:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34003188:	2300      	movs	r3, #0
3400318a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
3400318e:	6a23      	ldr	r3, [r4, #32]
34003190:	b10b      	cbz	r3, 34003196 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
34003192:	4620      	mov	r0, r4
34003194:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
34003196:	06f2      	lsls	r2, r6, #27
34003198:	d513      	bpl.n	340031c2 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
3400319a:	04eb      	lsls	r3, r5, #19
3400319c:	d511      	bpl.n	340031c2 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
3400319e:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
340031a0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
340031a2:	681a      	ldr	r2, [r3, #0]
340031a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
340031a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
340031aa:	2210      	movs	r2, #16
340031ac:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
340031ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340031b0:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
340031b2:	2301      	movs	r3, #1
340031b4:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
340031b8:	2300      	movs	r3, #0
340031ba:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
340031be:	f7ff ff76 	bl	340030ae <HAL_DMA2D_CLUTLoadingCpltCallback>
}
340031c2:	bd70      	pop	{r4, r5, r6, pc}

340031c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
340031c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340031c8:	4b47      	ldr	r3, [pc, #284]	@ (340032e8 <HAL_GPIO_Init+0x124>)
{
340031ca:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340031cc:	4298      	cmp	r0, r3
{
340031ce:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340031d0:	d054      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
340031d2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031d6:	4298      	cmp	r0, r3
340031d8:	d050      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
340031da:	4b44      	ldr	r3, [pc, #272]	@ (340032ec <HAL_GPIO_Init+0x128>)
340031dc:	4298      	cmp	r0, r3
340031de:	d04d      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
340031e0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031e4:	4298      	cmp	r0, r3
340031e6:	d049      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
340031e8:	4b41      	ldr	r3, [pc, #260]	@ (340032f0 <HAL_GPIO_Init+0x12c>)
340031ea:	4298      	cmp	r0, r3
340031ec:	d046      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
340031ee:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031f2:	4298      	cmp	r0, r3
340031f4:	d042      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
340031f6:	4b3f      	ldr	r3, [pc, #252]	@ (340032f4 <HAL_GPIO_Init+0x130>)
340031f8:	4298      	cmp	r0, r3
340031fa:	d03f      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
340031fc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003200:	4298      	cmp	r0, r3
34003202:	d03b      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003204:	4b3c      	ldr	r3, [pc, #240]	@ (340032f8 <HAL_GPIO_Init+0x134>)
34003206:	4298      	cmp	r0, r3
34003208:	d038      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
3400320a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400320e:	4298      	cmp	r0, r3
34003210:	d034      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003212:	4b3a      	ldr	r3, [pc, #232]	@ (340032fc <HAL_GPIO_Init+0x138>)
34003214:	4298      	cmp	r0, r3
34003216:	d031      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003218:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400321c:	4298      	cmp	r0, r3
3400321e:	d02d      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003220:	4b37      	ldr	r3, [pc, #220]	@ (34003300 <HAL_GPIO_Init+0x13c>)
34003222:	4298      	cmp	r0, r3
34003224:	d02a      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003226:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400322a:	4298      	cmp	r0, r3
3400322c:	d026      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
3400322e:	4b35      	ldr	r3, [pc, #212]	@ (34003304 <HAL_GPIO_Init+0x140>)
34003230:	4298      	cmp	r0, r3
34003232:	d023      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003234:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003238:	4298      	cmp	r0, r3
3400323a:	d01f      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
3400323c:	4b32      	ldr	r3, [pc, #200]	@ (34003308 <HAL_GPIO_Init+0x144>)
3400323e:	4298      	cmp	r0, r3
34003240:	d01c      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003242:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003246:	4298      	cmp	r0, r3
34003248:	d018      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
3400324a:	4b30      	ldr	r3, [pc, #192]	@ (3400330c <HAL_GPIO_Init+0x148>)
3400324c:	4298      	cmp	r0, r3
3400324e:	d015      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003250:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003254:	4298      	cmp	r0, r3
34003256:	d011      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003258:	4b2d      	ldr	r3, [pc, #180]	@ (34003310 <HAL_GPIO_Init+0x14c>)
3400325a:	4298      	cmp	r0, r3
3400325c:	d00e      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
3400325e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003262:	4298      	cmp	r0, r3
34003264:	d00a      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003266:	4b2b      	ldr	r3, [pc, #172]	@ (34003314 <HAL_GPIO_Init+0x150>)
34003268:	4298      	cmp	r0, r3
3400326a:	d007      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
3400326c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003270:	4298      	cmp	r0, r3
34003272:	d003      	beq.n	3400327c <HAL_GPIO_Init+0xb8>
34003274:	21ad      	movs	r1, #173	@ 0xad
34003276:	4828      	ldr	r0, [pc, #160]	@ (34003318 <HAL_GPIO_Init+0x154>)
34003278:	f7fe f898 	bl	340013ac <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
3400327c:	6833      	ldr	r3, [r6, #0]
3400327e:	b29a      	uxth	r2, r3
34003280:	b112      	cbz	r2, 34003288 <HAL_GPIO_Init+0xc4>
34003282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34003286:	d303      	bcc.n	34003290 <HAL_GPIO_Init+0xcc>
34003288:	21ae      	movs	r1, #174	@ 0xae
3400328a:	4823      	ldr	r0, [pc, #140]	@ (34003318 <HAL_GPIO_Init+0x154>)
3400328c:	f7fe f88e 	bl	340013ac <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
34003290:	6873      	ldr	r3, [r6, #4]
34003292:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
34003296:	d011      	beq.n	340032bc <HAL_GPIO_Init+0xf8>
34003298:	d81d      	bhi.n	340032d6 <HAL_GPIO_Init+0x112>
3400329a:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
3400329e:	d00d      	beq.n	340032bc <HAL_GPIO_Init+0xf8>
340032a0:	d809      	bhi.n	340032b6 <HAL_GPIO_Init+0xf2>
340032a2:	2b03      	cmp	r3, #3
340032a4:	d90a      	bls.n	340032bc <HAL_GPIO_Init+0xf8>
340032a6:	3b11      	subs	r3, #17
340032a8:	2b01      	cmp	r3, #1
340032aa:	d907      	bls.n	340032bc <HAL_GPIO_Init+0xf8>
340032ac:	21af      	movs	r1, #175	@ 0xaf
340032ae:	481a      	ldr	r0, [pc, #104]	@ (34003318 <HAL_GPIO_Init+0x154>)
340032b0:	f7fe f87c 	bl	340013ac <assert_failed>
340032b4:	e002      	b.n	340032bc <HAL_GPIO_Init+0xf8>
340032b6:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
340032ba:	d1f7      	bne.n	340032ac <HAL_GPIO_Init+0xe8>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340032bc:	f04f 0900 	mov.w	r9, #0
340032c0:	464f      	mov	r7, r9
340032c2:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 340032e8 <HAL_GPIO_Init+0x124>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
340032c6:	f8df a054 	ldr.w	sl, [pc, #84]	@ 3400331c <HAL_GPIO_Init+0x158>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
340032ca:	6835      	ldr	r5, [r6, #0]
340032cc:	fa35 f307 	lsrs.w	r3, r5, r7
340032d0:	d126      	bne.n	34003320 <HAL_GPIO_Init+0x15c>
      }
    }

    position++;
  }
}
340032d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
340032d6:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
340032da:	d0ef      	beq.n	340032bc <HAL_GPIO_Init+0xf8>
340032dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
340032e0:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
340032e4:	e7e9      	b.n	340032ba <HAL_GPIO_Init+0xf6>
340032e6:	bf00      	nop
340032e8:	56020000 	.word	0x56020000
340032ec:	56020400 	.word	0x56020400
340032f0:	56020800 	.word	0x56020800
340032f4:	56020c00 	.word	0x56020c00
340032f8:	56021000 	.word	0x56021000
340032fc:	56021400 	.word	0x56021400
34003300:	56021800 	.word	0x56021800
34003304:	56021c00 	.word	0x56021c00
34003308:	56023400 	.word	0x56023400
3400330c:	56023800 	.word	0x56023800
34003310:	56023c00 	.word	0x56023c00
34003314:	56024000 	.word	0x56024000
34003318:	340107b1 	.word	0x340107b1
3400331c:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34003320:	f04f 0b01 	mov.w	fp, #1
34003324:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
34003328:	ea1b 0505 	ands.w	r5, fp, r5
3400332c:	f000 8130 	beq.w	34003590 <HAL_GPIO_Init+0x3cc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34003330:	6873      	ldr	r3, [r6, #4]
34003332:	f003 0303 	and.w	r3, r3, #3
34003336:	3b01      	subs	r3, #1
34003338:	2b01      	cmp	r3, #1
3400333a:	d81a      	bhi.n	34003372 <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
3400333c:	68f3      	ldr	r3, [r6, #12]
3400333e:	2b03      	cmp	r3, #3
34003340:	d903      	bls.n	3400334a <HAL_GPIO_Init+0x186>
34003342:	21be      	movs	r1, #190	@ 0xbe
34003344:	489e      	ldr	r0, [pc, #632]	@ (340035c0 <HAL_GPIO_Init+0x3fc>)
34003346:	f7fe f831 	bl	340013ac <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3400334a:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
3400334c:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3400334e:	fa03 f309 	lsl.w	r3, r3, r9
34003352:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34003356:	68f3      	ldr	r3, [r6, #12]
34003358:	fa03 f309 	lsl.w	r3, r3, r9
3400335c:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
3400335e:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34003360:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
34003362:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34003364:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34003368:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3400336c:	40bb      	lsls	r3, r7
3400336e:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
34003370:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34003372:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
34003376:	f003 0303 	and.w	r3, r3, #3
3400337a:	2b03      	cmp	r3, #3
3400337c:	d102      	bne.n	34003384 <HAL_GPIO_Init+0x1c0>
3400337e:	2a01      	cmp	r2, #1
34003380:	f000 8082 	beq.w	34003488 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34003384:	2a02      	cmp	r2, #2
34003386:	d903      	bls.n	34003390 <HAL_GPIO_Init+0x1cc>
34003388:	21d1      	movs	r1, #209	@ 0xd1
3400338a:	488d      	ldr	r0, [pc, #564]	@ (340035c0 <HAL_GPIO_Init+0x3fc>)
3400338c:	f7fe f80e 	bl	340013ac <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34003390:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
34003392:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34003394:	fa03 f309 	lsl.w	r3, r3, r9
34003398:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
3400339c:	68b3      	ldr	r3, [r6, #8]
3400339e:	fa03 f309 	lsl.w	r3, r3, r9
340033a2:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
340033a4:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
340033a6:	6873      	ldr	r3, [r6, #4]
340033a8:	f003 0303 	and.w	r3, r3, #3
340033ac:	2b02      	cmp	r3, #2
340033ae:	d16b      	bne.n	34003488 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
340033b0:	4544      	cmp	r4, r8
340033b2:	d053      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033b4:	4b83      	ldr	r3, [pc, #524]	@ (340035c4 <HAL_GPIO_Init+0x400>)
340033b6:	429c      	cmp	r4, r3
340033b8:	d050      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033ba:	4b83      	ldr	r3, [pc, #524]	@ (340035c8 <HAL_GPIO_Init+0x404>)
340033bc:	429c      	cmp	r4, r3
340033be:	d04d      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033c0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033c4:	429c      	cmp	r4, r3
340033c6:	d049      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033c8:	4b80      	ldr	r3, [pc, #512]	@ (340035cc <HAL_GPIO_Init+0x408>)
340033ca:	429c      	cmp	r4, r3
340033cc:	d046      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033ce:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033d2:	429c      	cmp	r4, r3
340033d4:	d042      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033d6:	4b7e      	ldr	r3, [pc, #504]	@ (340035d0 <HAL_GPIO_Init+0x40c>)
340033d8:	429c      	cmp	r4, r3
340033da:	d03f      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033dc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033e0:	429c      	cmp	r4, r3
340033e2:	d03b      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033e4:	4b7b      	ldr	r3, [pc, #492]	@ (340035d4 <HAL_GPIO_Init+0x410>)
340033e6:	429c      	cmp	r4, r3
340033e8:	d038      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033ea:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033ee:	429c      	cmp	r4, r3
340033f0:	d034      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033f2:	4b79      	ldr	r3, [pc, #484]	@ (340035d8 <HAL_GPIO_Init+0x414>)
340033f4:	429c      	cmp	r4, r3
340033f6:	d031      	beq.n	3400345c <HAL_GPIO_Init+0x298>
340033f8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033fc:	429c      	cmp	r4, r3
340033fe:	d02d      	beq.n	3400345c <HAL_GPIO_Init+0x298>
34003400:	4b76      	ldr	r3, [pc, #472]	@ (340035dc <HAL_GPIO_Init+0x418>)
34003402:	429c      	cmp	r4, r3
34003404:	d02a      	beq.n	3400345c <HAL_GPIO_Init+0x298>
34003406:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400340a:	429c      	cmp	r4, r3
3400340c:	d026      	beq.n	3400345c <HAL_GPIO_Init+0x298>
3400340e:	4b74      	ldr	r3, [pc, #464]	@ (340035e0 <HAL_GPIO_Init+0x41c>)
34003410:	429c      	cmp	r4, r3
34003412:	d023      	beq.n	3400345c <HAL_GPIO_Init+0x298>
34003414:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003418:	429c      	cmp	r4, r3
3400341a:	d01f      	beq.n	3400345c <HAL_GPIO_Init+0x298>
3400341c:	4b71      	ldr	r3, [pc, #452]	@ (340035e4 <HAL_GPIO_Init+0x420>)
3400341e:	429c      	cmp	r4, r3
34003420:	d01c      	beq.n	3400345c <HAL_GPIO_Init+0x298>
34003422:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003426:	429c      	cmp	r4, r3
34003428:	d018      	beq.n	3400345c <HAL_GPIO_Init+0x298>
3400342a:	4b6f      	ldr	r3, [pc, #444]	@ (340035e8 <HAL_GPIO_Init+0x424>)
3400342c:	429c      	cmp	r4, r3
3400342e:	d015      	beq.n	3400345c <HAL_GPIO_Init+0x298>
34003430:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003434:	429c      	cmp	r4, r3
34003436:	d011      	beq.n	3400345c <HAL_GPIO_Init+0x298>
34003438:	4b6c      	ldr	r3, [pc, #432]	@ (340035ec <HAL_GPIO_Init+0x428>)
3400343a:	429c      	cmp	r4, r3
3400343c:	d00e      	beq.n	3400345c <HAL_GPIO_Init+0x298>
3400343e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003442:	429c      	cmp	r4, r3
34003444:	d00a      	beq.n	3400345c <HAL_GPIO_Init+0x298>
34003446:	4b6a      	ldr	r3, [pc, #424]	@ (340035f0 <HAL_GPIO_Init+0x42c>)
34003448:	429c      	cmp	r4, r3
3400344a:	d007      	beq.n	3400345c <HAL_GPIO_Init+0x298>
3400344c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003450:	429c      	cmp	r4, r3
34003452:	d003      	beq.n	3400345c <HAL_GPIO_Init+0x298>
34003454:	21de      	movs	r1, #222	@ 0xde
34003456:	485a      	ldr	r0, [pc, #360]	@ (340035c0 <HAL_GPIO_Init+0x3fc>)
34003458:	f7fd ffa8 	bl	340013ac <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
3400345c:	6933      	ldr	r3, [r6, #16]
3400345e:	2b0f      	cmp	r3, #15
34003460:	d903      	bls.n	3400346a <HAL_GPIO_Init+0x2a6>
34003462:	21df      	movs	r1, #223	@ 0xdf
34003464:	4856      	ldr	r0, [pc, #344]	@ (340035c0 <HAL_GPIO_Init+0x3fc>)
34003466:	f7fd ffa1 	bl	340013ac <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3400346a:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
3400346c:	08fa      	lsrs	r2, r7, #3
3400346e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003472:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
34003476:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003478:	0089      	lsls	r1, r1, #2
3400347a:	408b      	lsls	r3, r1
3400347c:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003480:	6933      	ldr	r3, [r6, #16]
34003482:	408b      	lsls	r3, r1
34003484:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
34003486:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34003488:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
3400348a:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
3400348c:	fa03 f209 	lsl.w	r2, r3, r9
34003490:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34003494:	6872      	ldr	r2, [r6, #4]
34003496:	ea02 0103 	and.w	r1, r2, r3
3400349a:	fa01 f109 	lsl.w	r1, r1, r9
3400349e:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
340034a0:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
340034a4:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
340034a6:	d073      	beq.n	34003590 <HAL_GPIO_Init+0x3cc>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340034a8:	f04f 0e0f 	mov.w	lr, #15
340034ac:	f027 0103 	bic.w	r1, r7, #3
340034b0:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
340034b4:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
340034b8:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
340034bc:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340034c0:	4098      	lsls	r0, r3
340034c2:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340034c6:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340034c8:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340034cc:	d064      	beq.n	34003598 <HAL_GPIO_Init+0x3d4>
340034ce:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 340035c8 <HAL_GPIO_Init+0x404>
340034d2:	4574      	cmp	r4, lr
340034d4:	d062      	beq.n	3400359c <HAL_GPIO_Init+0x3d8>
340034d6:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340034da:	4574      	cmp	r4, lr
340034dc:	d060      	beq.n	340035a0 <HAL_GPIO_Init+0x3dc>
340034de:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340034e2:	4574      	cmp	r4, lr
340034e4:	d020      	beq.n	34003528 <HAL_GPIO_Init+0x364>
340034e6:	4b3b      	ldr	r3, [pc, #236]	@ (340035d4 <HAL_GPIO_Init+0x410>)
340034e8:	429c      	cmp	r4, r3
340034ea:	d05b      	beq.n	340035a4 <HAL_GPIO_Init+0x3e0>
340034ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340034f0:	429c      	cmp	r4, r3
340034f2:	d059      	beq.n	340035a8 <HAL_GPIO_Init+0x3e4>
340034f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340034f8:	429c      	cmp	r4, r3
340034fa:	d057      	beq.n	340035ac <HAL_GPIO_Init+0x3e8>
340034fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003500:	429c      	cmp	r4, r3
34003502:	d055      	beq.n	340035b0 <HAL_GPIO_Init+0x3ec>
34003504:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34003508:	429c      	cmp	r4, r3
3400350a:	d053      	beq.n	340035b4 <HAL_GPIO_Init+0x3f0>
3400350c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003510:	429c      	cmp	r4, r3
34003512:	d051      	beq.n	340035b8 <HAL_GPIO_Init+0x3f4>
34003514:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003518:	429c      	cmp	r4, r3
3400351a:	d04f      	beq.n	340035bc <HAL_GPIO_Init+0x3f8>
3400351c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003520:	429c      	cmp	r4, r3
34003522:	bf14      	ite	ne
34003524:	2310      	movne	r3, #16
34003526:	230b      	moveq	r3, #11
34003528:	4083      	lsls	r3, r0
3400352a:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
3400352e:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
34003530:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
34003534:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
34003538:	ea23 0105 	bic.w	r1, r3, r5
3400353c:	ea43 0305 	orr.w	r3, r3, r5
34003540:	bf08      	it	eq
34003542:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
34003544:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
34003548:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
3400354c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
34003550:	ea23 0105 	bic.w	r1, r3, r5
34003554:	ea43 0305 	orr.w	r3, r3, r5
34003558:	bf08      	it	eq
3400355a:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
3400355c:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
34003560:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
34003564:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
34003568:	ea23 0105 	bic.w	r1, r3, r5
3400356c:	ea43 0305 	orr.w	r3, r3, r5
34003570:	bf08      	it	eq
34003572:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
34003574:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
34003578:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
3400357c:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
34003580:	ea23 0105 	bic.w	r1, r3, r5
34003584:	ea45 0503 	orr.w	r5, r5, r3
34003588:	bf08      	it	eq
3400358a:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
3400358c:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
34003590:	3701      	adds	r7, #1
34003592:	f109 0902 	add.w	r9, r9, #2
34003596:	e698      	b.n	340032ca <HAL_GPIO_Init+0x106>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003598:	2300      	movs	r3, #0
3400359a:	e7c5      	b.n	34003528 <HAL_GPIO_Init+0x364>
3400359c:	2301      	movs	r3, #1
3400359e:	e7c3      	b.n	34003528 <HAL_GPIO_Init+0x364>
340035a0:	2302      	movs	r3, #2
340035a2:	e7c1      	b.n	34003528 <HAL_GPIO_Init+0x364>
340035a4:	2304      	movs	r3, #4
340035a6:	e7bf      	b.n	34003528 <HAL_GPIO_Init+0x364>
340035a8:	2305      	movs	r3, #5
340035aa:	e7bd      	b.n	34003528 <HAL_GPIO_Init+0x364>
340035ac:	2306      	movs	r3, #6
340035ae:	e7bb      	b.n	34003528 <HAL_GPIO_Init+0x364>
340035b0:	2307      	movs	r3, #7
340035b2:	e7b9      	b.n	34003528 <HAL_GPIO_Init+0x364>
340035b4:	2308      	movs	r3, #8
340035b6:	e7b7      	b.n	34003528 <HAL_GPIO_Init+0x364>
340035b8:	2309      	movs	r3, #9
340035ba:	e7b5      	b.n	34003528 <HAL_GPIO_Init+0x364>
340035bc:	230a      	movs	r3, #10
340035be:	e7b3      	b.n	34003528 <HAL_GPIO_Init+0x364>
340035c0:	340107b1 	.word	0x340107b1
340035c4:	46020000 	.word	0x46020000
340035c8:	56020400 	.word	0x56020400
340035cc:	56020800 	.word	0x56020800
340035d0:	56020c00 	.word	0x56020c00
340035d4:	56021000 	.word	0x56021000
340035d8:	56021400 	.word	0x56021400
340035dc:	56021800 	.word	0x56021800
340035e0:	56021c00 	.word	0x56021c00
340035e4:	56023400 	.word	0x56023400
340035e8:	56023800 	.word	0x56023800
340035ec:	56023c00 	.word	0x56023c00
340035f0:	56024000 	.word	0x56024000

340035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
340035f4:	b570      	push	{r4, r5, r6, lr}
340035f6:	4605      	mov	r5, r0
340035f8:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
340035fa:	460c      	mov	r4, r1
340035fc:	b921      	cbnz	r1, 34003608 <HAL_GPIO_WritePin+0x14>
340035fe:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
34003602:	4808      	ldr	r0, [pc, #32]	@ (34003624 <HAL_GPIO_WritePin+0x30>)
34003604:	f7fd fed2 	bl	340013ac <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34003608:	2e01      	cmp	r6, #1
3400360a:	d906      	bls.n	3400361a <HAL_GPIO_WritePin+0x26>
3400360c:	f240 11a1 	movw	r1, #417	@ 0x1a1
34003610:	4804      	ldr	r0, [pc, #16]	@ (34003624 <HAL_GPIO_WritePin+0x30>)
34003612:	f7fd fecb 	bl	340013ac <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34003616:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34003618:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
3400361a:	2e00      	cmp	r6, #0
3400361c:	d1fb      	bne.n	34003616 <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
3400361e:	62ac      	str	r4, [r5, #40]	@ 0x28
}
34003620:	e7fa      	b.n	34003618 <HAL_GPIO_WritePin+0x24>
34003622:	bf00      	nop
34003624:	340107b1 	.word	0x340107b1

34003628 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
34003628:	b570      	push	{r4, r5, r6, lr}
3400362a:	f001 060f 	and.w	r6, r1, #15
3400362e:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
34003632:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
34003636:	4605      	mov	r5, r0
34003638:	ea4f 0484 	mov.w	r4, r4, lsl #2
3400363c:	f04f 0024 	mov.w	r0, #36	@ 0x24
  if ((ep_addr & 0x80U) == 0x80U)
34003640:	d020      	beq.n	34003684 <HAL_PCD_EP_Open+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003642:	f104 0114 	add.w	r1, r4, #20
    ep->is_in = 1U;
34003646:	2401      	movs	r4, #1
34003648:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
3400364c:	4429      	add	r1, r5
    ep->is_in = 1U;
3400364e:	7544      	strb	r4, [r0, #21]
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
34003650:	f3c2 020a 	ubfx	r2, r2, #0, #11
34003654:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

  if (ep->is_in != 0U)
34003656:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
34003658:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
3400365a:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
3400365c:	b102      	cbz	r2, 34003660 <HAL_PCD_EP_Open+0x38>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
3400365e:	834e      	strh	r6, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
34003660:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
34003662:	bf04      	itt	eq
34003664:	2300      	moveq	r3, #0
34003666:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
34003668:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
3400366c:	2b01      	cmp	r3, #1
3400366e:	d012      	beq.n	34003696 <HAL_PCD_EP_Open+0x6e>
34003670:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
34003672:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
34003674:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
34003678:	f007 ffcb 	bl	3400b612 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
3400367c:	2000      	movs	r0, #0
3400367e:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494

  return ret;
}
34003682:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003684:	f504 7115 	add.w	r1, r4, #596	@ 0x254
    ep->is_in = 0U;
34003688:	2400      	movs	r4, #0
3400368a:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
3400368e:	4429      	add	r1, r5
    ep->is_in = 0U;
34003690:	f880 4255 	strb.w	r4, [r0, #597]	@ 0x255
34003694:	e7dc      	b.n	34003650 <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
34003696:	2002      	movs	r0, #2
34003698:	e7f3      	b.n	34003682 <HAL_PCD_EP_Open+0x5a>

3400369a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
3400369a:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
3400369c:	2424      	movs	r4, #36	@ 0x24
3400369e:	f001 050f 	and.w	r5, r1, #15
340036a2:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
340036a6:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
340036aa:	e9c4 2398 	strd	r2, r3, [r4, #608]	@ 0x260
  ep->xfer_count = 0U;
340036ae:	2300      	movs	r3, #0
{
340036b0:	4616      	mov	r6, r2
  ep->xfer_count = 0U;
340036b2:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
  ep->is_in = 0U;
340036b6:	f884 3255 	strb.w	r3, [r4, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
340036ba:	f884 5254 	strb.w	r5, [r4, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
340036be:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
340036c0:	f501 7115 	add.w	r1, r1, #596	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
340036c4:	2a01      	cmp	r2, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
340036c6:	bf08      	it	eq
340036c8:	f8c4 6270 	streq.w	r6, [r4, #624]	@ 0x270
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
340036cc:	6800      	ldr	r0, [r0, #0]
340036ce:	f008 f833 	bl	3400b738 <USB_EPStartXfer>

  return HAL_OK;
}
340036d2:	2000      	movs	r0, #0
340036d4:	bd70      	pop	{r4, r5, r6, pc}

340036d6 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
340036d6:	2324      	movs	r3, #36	@ 0x24
340036d8:	f001 010f 	and.w	r1, r1, #15
340036dc:	fb03 0001 	mla	r0, r3, r1, r0
}
340036e0:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
340036e4:	4770      	bx	lr

340036e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
340036e6:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340036e8:	2424      	movs	r4, #36	@ 0x24
340036ea:	f001 050f 	and.w	r5, r1, #15
340036ee:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
340036f2:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
340036f6:	e9c4 2308 	strd	r2, r3, [r4, #32]
  ep->xfer_count = 0U;
340036fa:	2300      	movs	r3, #0
340036fc:	62a3      	str	r3, [r4, #40]	@ 0x28
  ep->is_in = 1U;
340036fe:	2301      	movs	r3, #1
{
34003700:	4616      	mov	r6, r2
  ep->is_in = 1U;
34003702:	7563      	strb	r3, [r4, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
34003704:	7525      	strb	r5, [r4, #20]

  if (hpcd->Init.dma_enable == 1U)
34003706:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003708:	3114      	adds	r1, #20
  if (hpcd->Init.dma_enable == 1U)
3400370a:	429a      	cmp	r2, r3
  {
    ep->dma_addr = (uint32_t)pBuf;
3400370c:	bf08      	it	eq
3400370e:	6326      	streq	r6, [r4, #48]	@ 0x30
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
34003710:	6800      	ldr	r0, [r0, #0]
34003712:	f008 f811 	bl	3400b738 <USB_EPStartXfer>

  return HAL_OK;
}
34003716:	2000      	movs	r0, #0
34003718:	bd70      	pop	{r4, r5, r6, pc}

3400371a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
3400371a:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
3400371c:	7903      	ldrb	r3, [r0, #4]
3400371e:	f001 050f 	and.w	r5, r1, #15
34003722:	42ab      	cmp	r3, r5
{
34003724:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
34003726:	d32b      	bcc.n	34003780 <HAL_PCD_EP_SetStall+0x66>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
34003728:	f011 0f80 	tst.w	r1, #128	@ 0x80
3400372c:	f04f 0024 	mov.w	r0, #36	@ 0x24
34003730:	d01d      	beq.n	3400376e <HAL_PCD_EP_SetStall+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
34003732:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003734:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
34003738:	fb00 4005 	mla	r0, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
3400373c:	3114      	adds	r1, #20
    ep->is_in = 1U;
3400373e:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
34003740:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
34003742:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
34003744:	708b      	strb	r3, [r1, #2]

  __HAL_LOCK(hpcd);
34003746:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
3400374a:	429a      	cmp	r2, r3
3400374c:	d01a      	beq.n	34003784 <HAL_PCD_EP_SetStall+0x6a>

  (void)USB_EPSetStall(hpcd->Instance, ep);
3400374e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
34003750:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
34003754:	f008 f917 	bl	3400b986 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
34003758:	b92d      	cbnz	r5, 34003766 <HAL_PCD_EP_SetStall+0x4c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
3400375a:	79a1      	ldrb	r1, [r4, #6]
3400375c:	6820      	ldr	r0, [r4, #0]
3400375e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003762:	f008 f97b 	bl	3400ba5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
34003766:	2000      	movs	r0, #0
34003768:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
3400376c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
3400376e:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
34003772:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
34003774:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
34003778:	2300      	movs	r3, #0
3400377a:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
3400377e:	e7df      	b.n	34003740 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
34003780:	2001      	movs	r0, #1
34003782:	e7f3      	b.n	3400376c <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
34003784:	2002      	movs	r0, #2
34003786:	e7f1      	b.n	3400376c <HAL_PCD_EP_SetStall+0x52>

34003788 <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
34003788:	f001 030f 	and.w	r3, r1, #15
3400378c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
34003790:	009b      	lsls	r3, r3, #2
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003792:	f103 0214 	add.w	r2, r3, #20
34003796:	f503 7315 	add.w	r3, r3, #596	@ 0x254
3400379a:	4402      	add	r2, r0
3400379c:	4403      	add	r3, r0
3400379e:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
340037a2:	bf0c      	ite	eq
340037a4:	4619      	moveq	r1, r3
340037a6:	4611      	movne	r1, r2
340037a8:	6800      	ldr	r0, [r0, #0]
340037aa:	f007 bf71 	b.w	3400b690 <USB_EPStopXfer>
	...

340037b0 <HAL_PCD_IRQHandler>:
{
340037b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
340037b4:	6806      	ldr	r6, [r0, #0]
{
340037b6:	4604      	mov	r4, r0
340037b8:	b087      	sub	sp, #28
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
340037ba:	4630      	mov	r0, r6
340037bc:	f008 f93c 	bl	3400ba38 <USB_GetMode>
340037c0:	2800      	cmp	r0, #0
340037c2:	f040 8176 	bne.w	34003ab2 <HAL_PCD_IRQHandler+0x302>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
340037c6:	6820      	ldr	r0, [r4, #0]
340037c8:	f008 f908 	bl	3400b9dc <USB_ReadInterrupts>
340037cc:	2800      	cmp	r0, #0
340037ce:	f000 8170 	beq.w	34003ab2 <HAL_PCD_IRQHandler+0x302>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
340037d2:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
340037d6:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
340037d8:	f3c3 230d 	ubfx	r3, r3, #8, #14
340037dc:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
340037e0:	f008 f8fc 	bl	3400b9dc <USB_ReadInterrupts>
340037e4:	0787      	lsls	r7, r0, #30
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340037e6:	bf48      	it	mi
340037e8:	6822      	ldrmi	r2, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
340037ea:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340037ec:	bf48      	it	mi
340037ee:	6953      	ldrmi	r3, [r2, #20]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
340037f0:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340037f4:	bf44      	itt	mi
340037f6:	f003 0302 	andmi.w	r3, r3, #2
340037fa:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
340037fc:	f008 f8ee 	bl	3400b9dc <USB_ReadInterrupts>
34003800:	06c0      	lsls	r0, r0, #27
34003802:	d52d      	bpl.n	34003860 <HAL_PCD_IRQHandler+0xb0>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
34003804:	6822      	ldr	r2, [r4, #0]
34003806:	6993      	ldr	r3, [r2, #24]
34003808:	f023 0310 	bic.w	r3, r3, #16
3400380c:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
3400380e:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
34003812:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
34003816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
3400381a:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
3400381e:	f040 814b 	bne.w	34003ab8 <HAL_PCD_IRQHandler+0x308>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
34003822:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
34003826:	ea18 0f03 	tst.w	r8, r3
3400382a:	d014      	beq.n	34003856 <HAL_PCD_IRQHandler+0xa6>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
3400382c:	2324      	movs	r3, #36	@ 0x24
3400382e:	fb03 4707 	mla	r7, r3, r7, r4
34003832:	f3c8 190a 	ubfx	r9, r8, #4, #11
34003836:	464a      	mov	r2, r9
34003838:	4630      	mov	r0, r6
3400383a:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
3400383e:	f008 f87d 	bl	3400b93c <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003842:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
34003846:	444b      	add	r3, r9
34003848:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
3400384c:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
34003850:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003852:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
34003856:	6822      	ldr	r2, [r4, #0]
34003858:	6993      	ldr	r3, [r2, #24]
3400385a:	f043 0310 	orr.w	r3, r3, #16
3400385e:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
34003860:	6820      	ldr	r0, [r4, #0]
34003862:	f008 f8bb 	bl	3400b9dc <USB_ReadInterrupts>
34003866:	0301      	lsls	r1, r0, #12
34003868:	f100 8139 	bmi.w	34003ade <HAL_PCD_IRQHandler+0x32e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
3400386c:	6820      	ldr	r0, [r4, #0]
3400386e:	f008 f8b5 	bl	3400b9dc <USB_ReadInterrupts>
34003872:	0342      	lsls	r2, r0, #13
34003874:	d50d      	bpl.n	34003892 <HAL_PCD_IRQHandler+0xe2>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
34003876:	6820      	ldr	r0, [r4, #0]
34003878:	f008 f8bc 	bl	3400b9f4 <USB_ReadDevAllInEpInterrupt>
3400387c:	4627      	mov	r7, r4
3400387e:	4683      	mov	fp, r0
      epnum = 0U;
34003880:	f04f 0900 	mov.w	r9, #0
34003884:	f506 6a10 	add.w	sl, r6, #2304	@ 0x900
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003888:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
3400388a:	f1bb 0f00 	cmp.w	fp, #0
3400388e:	f040 81f0 	bne.w	34003c72 <HAL_PCD_IRQHandler+0x4c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
34003892:	6820      	ldr	r0, [r4, #0]
34003894:	f008 f8a2 	bl	3400b9dc <USB_ReadInterrupts>
34003898:	2800      	cmp	r0, #0
3400389a:	da13      	bge.n	340038c4 <HAL_PCD_IRQHandler+0x114>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
3400389c:	686b      	ldr	r3, [r5, #4]
3400389e:	f023 0301 	bic.w	r3, r3, #1
340038a2:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
340038a4:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
340038a8:	2b01      	cmp	r3, #1
340038aa:	f040 8286 	bne.w	34003dba <HAL_PCD_IRQHandler+0x60a>
        hpcd->LPM_State = LPM_L0;
340038ae:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
340038b0:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
340038b2:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
340038b6:	f000 fafa 	bl	34003eae <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
340038ba:	6822      	ldr	r2, [r4, #0]
340038bc:	6953      	ldr	r3, [r2, #20]
340038be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
340038c2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
340038c4:	6820      	ldr	r0, [r4, #0]
340038c6:	f008 f889 	bl	3400b9dc <USB_ReadInterrupts>
340038ca:	0502      	lsls	r2, r0, #20
340038cc:	d50a      	bpl.n	340038e4 <HAL_PCD_IRQHandler+0x134>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
340038ce:	68ab      	ldr	r3, [r5, #8]
340038d0:	07db      	lsls	r3, r3, #31
340038d2:	d502      	bpl.n	340038da <HAL_PCD_IRQHandler+0x12a>
        HAL_PCD_SuspendCallback(hpcd);
340038d4:	4620      	mov	r0, r4
340038d6:	f008 fa4f 	bl	3400bd78 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
340038da:	6822      	ldr	r2, [r4, #0]
340038dc:	6953      	ldr	r3, [r2, #20]
340038de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340038e2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
340038e4:	6820      	ldr	r0, [r4, #0]
340038e6:	f008 f879 	bl	3400b9dc <USB_ReadInterrupts>
340038ea:	0107      	lsls	r7, r0, #4
340038ec:	d514      	bpl.n	34003918 <HAL_PCD_IRQHandler+0x168>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
340038ee:	6823      	ldr	r3, [r4, #0]
340038f0:	695a      	ldr	r2, [r3, #20]
340038f2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
340038f6:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
340038f8:	f894 24cc 	ldrb.w	r2, [r4, #1228]	@ 0x4cc
340038fc:	2a00      	cmp	r2, #0
340038fe:	f040 8260 	bne.w	34003dc2 <HAL_PCD_IRQHandler+0x612>
        hpcd->LPM_State = LPM_L1;
34003902:	2101      	movs	r1, #1
34003904:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
34003908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
3400390a:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
3400390c:	f3c3 0383 	ubfx	r3, r3, #2, #4
34003910:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
34003914:	f000 facb 	bl	34003eae <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
34003918:	6820      	ldr	r0, [r4, #0]
3400391a:	f008 f85f 	bl	3400b9dc <USB_ReadInterrupts>
3400391e:	04c0      	lsls	r0, r0, #19
34003920:	d537      	bpl.n	34003992 <HAL_PCD_IRQHandler+0x1e2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003922:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
34003924:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003926:	f023 0301 	bic.w	r3, r3, #1
3400392a:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
3400392c:	6820      	ldr	r0, [r4, #0]
3400392e:	f007 fe21 	bl	3400b574 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003932:	7921      	ldrb	r1, [r4, #4]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003934:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
34003938:	2900      	cmp	r1, #0
3400393a:	f101 0201 	add.w	r2, r1, #1
3400393e:	bf08      	it	eq
34003940:	2201      	moveq	r2, #1
34003942:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003946:	3a01      	subs	r2, #1
34003948:	f040 823f 	bne.w	34003dca <HAL_PCD_IRQHandler+0x61a>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
3400394c:	69eb      	ldr	r3, [r5, #28]
3400394e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
34003952:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
34003954:	7be3      	ldrb	r3, [r4, #15]
34003956:	2b00      	cmp	r3, #0
34003958:	f000 8252 	beq.w	34003e00 <HAL_PCD_IRQHandler+0x650>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
3400395c:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
34003960:	f043 030b 	orr.w	r3, r3, #11
34003964:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
34003968:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
3400396a:	f043 030b 	orr.w	r3, r3, #11
3400396e:	646b      	str	r3, [r5, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
34003970:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003974:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
34003978:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
3400397c:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003980:	79a1      	ldrb	r1, [r4, #6]
34003982:	6820      	ldr	r0, [r4, #0]
34003984:	f008 f86a 	bl	3400ba5c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
34003988:	6822      	ldr	r2, [r4, #0]
3400398a:	6953      	ldr	r3, [r2, #20]
3400398c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34003990:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
34003992:	6820      	ldr	r0, [r4, #0]
34003994:	f008 f822 	bl	3400b9dc <USB_ReadInterrupts>
34003998:	0481      	lsls	r1, r0, #18
3400399a:	d516      	bpl.n	340039ca <HAL_PCD_IRQHandler+0x21a>
      (void)USB_ActivateSetup(hpcd->Instance);
3400399c:	6820      	ldr	r0, [r4, #0]
3400399e:	f008 f84f 	bl	3400ba40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
340039a2:	6820      	ldr	r0, [r4, #0]
340039a4:	f007 fe2a 	bl	3400b5fc <USB_GetDevSpeed>
340039a8:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
340039aa:	6827      	ldr	r7, [r4, #0]
340039ac:	f001 fb78 	bl	340050a0 <HAL_RCC_GetHCLKFreq>
340039b0:	79e2      	ldrb	r2, [r4, #7]
340039b2:	4601      	mov	r1, r0
340039b4:	4638      	mov	r0, r7
340039b6:	f007 fd6d 	bl	3400b494 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
340039ba:	4620      	mov	r0, r4
340039bc:	f008 f9a8 	bl	3400bd10 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
340039c0:	6822      	ldr	r2, [r4, #0]
340039c2:	6953      	ldr	r3, [r2, #20]
340039c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340039c8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
340039ca:	6820      	ldr	r0, [r4, #0]
340039cc:	f008 f806 	bl	3400b9dc <USB_ReadInterrupts>
340039d0:	0702      	lsls	r2, r0, #28
340039d2:	d507      	bpl.n	340039e4 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_SOFCallback(hpcd);
340039d4:	4620      	mov	r0, r4
340039d6:	f008 f9e3 	bl	3400bda0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
340039da:	6822      	ldr	r2, [r4, #0]
340039dc:	6953      	ldr	r3, [r2, #20]
340039de:	f003 0308 	and.w	r3, r3, #8
340039e2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
340039e4:	6820      	ldr	r0, [r4, #0]
340039e6:	f007 fff9 	bl	3400b9dc <USB_ReadInterrupts>
340039ea:	0603      	lsls	r3, r0, #24
340039ec:	f100 8213 	bmi.w	34003e16 <HAL_PCD_IRQHandler+0x666>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
340039f0:	6820      	ldr	r0, [r4, #0]
340039f2:	f007 fff3 	bl	3400b9dc <USB_ReadInterrupts>
340039f6:	02c7      	lsls	r7, r0, #11
340039f8:	d50c      	bpl.n	34003a14 <HAL_PCD_IRQHandler+0x264>
340039fa:	46a0      	mov	r8, r4
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
340039fc:	2701      	movs	r7, #1
340039fe:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
34003a02:	7923      	ldrb	r3, [r4, #4]
34003a04:	42bb      	cmp	r3, r7
34003a06:	f200 821f 	bhi.w	34003e48 <HAL_PCD_IRQHandler+0x698>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
34003a0a:	6822      	ldr	r2, [r4, #0]
34003a0c:	6953      	ldr	r3, [r2, #20]
34003a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34003a12:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
34003a14:	6820      	ldr	r0, [r4, #0]
34003a16:	f007 ffe1 	bl	3400b9dc <USB_ReadInterrupts>
34003a1a:	0280      	lsls	r0, r0, #10
34003a1c:	d52c      	bpl.n	34003a78 <HAL_PCD_IRQHandler+0x2c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003a1e:	7923      	ldrb	r3, [r4, #4]
34003a20:	4622      	mov	r2, r4
34003a22:	2b00      	cmp	r3, #0
34003a24:	bf08      	it	eq
34003a26:	2301      	moveq	r3, #1
34003a28:	f506 6c32 	add.w	ip, r6, #2848	@ 0xb20
34003a2c:	3b01      	subs	r3, #1
34003a2e:	d01e      	beq.n	34003a6e <HAL_PCD_IRQHandler+0x2be>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
34003a30:	f892 727c 	ldrb.w	r7, [r2, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
34003a34:	f8dc 0000 	ldr.w	r0, [ip]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
34003a38:	2f01      	cmp	r7, #1
34003a3a:	f040 821b 	bne.w	34003e74 <HAL_PCD_IRQHandler+0x6c4>
34003a3e:	2800      	cmp	r0, #0
34003a40:	f280 8218 	bge.w	34003e74 <HAL_PCD_IRQHandler+0x6c4>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
34003a44:	f8d4 14d4 	ldr.w	r1, [r4, #1236]	@ 0x4d4
34003a48:	ea81 4010 	eor.w	r0, r1, r0, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
34003a4c:	07c1      	lsls	r1, r0, #31
34003a4e:	f100 8211 	bmi.w	34003e74 <HAL_PCD_IRQHandler+0x6c4>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
34003a52:	f882 727b 	strb.w	r7, [r2, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
34003a56:	69b0      	ldr	r0, [r6, #24]
34003a58:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
34003a5c:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
34003a5e:	6970      	ldr	r0, [r6, #20]
34003a60:	0600      	lsls	r0, r0, #24
34003a62:	f100 8207 	bmi.w	34003e74 <HAL_PCD_IRQHandler+0x6c4>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
34003a66:	686b      	ldr	r3, [r5, #4]
34003a68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34003a6c:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
34003a6e:	6822      	ldr	r2, [r4, #0]
34003a70:	6953      	ldr	r3, [r2, #20]
34003a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34003a76:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
34003a78:	6820      	ldr	r0, [r4, #0]
34003a7a:	f007 ffaf 	bl	3400b9dc <USB_ReadInterrupts>
34003a7e:	0041      	lsls	r1, r0, #1
34003a80:	d507      	bpl.n	34003a92 <HAL_PCD_IRQHandler+0x2e2>
      HAL_PCD_ConnectCallback(hpcd);
34003a82:	4620      	mov	r0, r4
34003a84:	f008 f95c 	bl	3400bd40 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
34003a88:	6822      	ldr	r2, [r4, #0]
34003a8a:	6953      	ldr	r3, [r2, #20]
34003a8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34003a90:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
34003a92:	6820      	ldr	r0, [r4, #0]
34003a94:	f007 ffa2 	bl	3400b9dc <USB_ReadInterrupts>
34003a98:	0742      	lsls	r2, r0, #29
34003a9a:	d50a      	bpl.n	34003ab2 <HAL_PCD_IRQHandler+0x302>
      RegVal = hpcd->Instance->GOTGINT;
34003a9c:	6823      	ldr	r3, [r4, #0]
34003a9e:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
34003aa0:	076b      	lsls	r3, r5, #29
34003aa2:	d502      	bpl.n	34003aaa <HAL_PCD_IRQHandler+0x2fa>
        HAL_PCD_DisconnectCallback(hpcd);
34003aa4:	4620      	mov	r0, r4
34003aa6:	f008 f955 	bl	3400bd54 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
34003aaa:	6822      	ldr	r2, [r4, #0]
34003aac:	6853      	ldr	r3, [r2, #4]
34003aae:	432b      	orrs	r3, r5
34003ab0:	6053      	str	r3, [r2, #4]
}
34003ab2:	b007      	add	sp, #28
34003ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
34003ab8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
34003abc:	f47f aecb 	bne.w	34003856 <HAL_PCD_IRQHandler+0xa6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
34003ac0:	2208      	movs	r2, #8
34003ac2:	4630      	mov	r0, r6
34003ac4:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
34003ac8:	f007 ff38 	bl	3400b93c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003acc:	2324      	movs	r3, #36	@ 0x24
34003ace:	fb03 4707 	mla	r7, r3, r7, r4
34003ad2:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
34003ad6:	f3c8 180a 	ubfx	r8, r8, #4, #11
34003ada:	4443      	add	r3, r8
34003adc:	e6b9      	b.n	34003852 <HAL_PCD_IRQHandler+0xa2>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
34003ade:	6820      	ldr	r0, [r4, #0]
34003ae0:	f007 ff80 	bl	3400b9e4 <USB_ReadDevAllOutEpInterrupt>
34003ae4:	46a2      	mov	sl, r4
      epnum = 0U;
34003ae6:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
34003ae8:	9002      	str	r0, [sp, #8]
      while (ep_intr != 0U)
34003aea:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
34003aee:	9b02      	ldr	r3, [sp, #8]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003af0:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
34003af2:	2b00      	cmp	r3, #0
34003af4:	f43f aeba 	beq.w	3400386c <HAL_PCD_IRQHandler+0xbc>
        if ((ep_intr & 0x1U) != 0U)
34003af8:	9b02      	ldr	r3, [sp, #8]
34003afa:	07db      	lsls	r3, r3, #31
34003afc:	d578      	bpl.n	34003bf0 <HAL_PCD_IRQHandler+0x440>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003afe:	fa5f fb87 	uxtb.w	fp, r7
34003b02:	4659      	mov	r1, fp
34003b04:	f007 ff7e 	bl	3400ba04 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003b08:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003b0c:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003b0e:	d01f      	beq.n	34003b50 <HAL_PCD_IRQHandler+0x3a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003b10:	2301      	movs	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003b12:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003b14:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
34003b18:	f894 c006 	ldrb.w	ip, [r4, #6]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003b1c:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
34003b20:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
34003b24:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003b28:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003b2a:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
34003b2c:	f040 808b 	bne.w	34003c46 <HAL_PCD_IRQHandler+0x496>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
34003b30:	f012 0f08 	tst.w	r2, #8
34003b34:	d007      	beq.n	34003b46 <HAL_PCD_IRQHandler+0x396>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003b36:	48b0      	ldr	r0, [pc, #704]	@ (34003df8 <HAL_PCD_IRQHandler+0x648>)
34003b38:	4281      	cmp	r1, r0
34003b3a:	d909      	bls.n	34003b50 <HAL_PCD_IRQHandler+0x3a0>
34003b3c:	0412      	lsls	r2, r2, #16
34003b3e:	d507      	bpl.n	34003b50 <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003b40:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34003b44:	e003      	b.n	34003b4e <HAL_PCD_IRQHandler+0x39e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
34003b46:	f012 0f20 	tst.w	r2, #32
34003b4a:	d05a      	beq.n	34003c02 <HAL_PCD_IRQHandler+0x452>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003b4c:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003b4e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
34003b50:	f019 0f08 	tst.w	r9, #8
34003b54:	d021      	beq.n	34003b9a <HAL_PCD_IRQHandler+0x3ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
34003b56:	2308      	movs	r3, #8
34003b58:	f8c8 3008 	str.w	r3, [r8, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003b5c:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003b5e:	49a6      	ldr	r1, [pc, #664]	@ (34003df8 <HAL_PCD_IRQHandler+0x648>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
34003b66:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003b6a:	428a      	cmp	r2, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003b6c:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003b6e:	d904      	bls.n	34003b7a <HAL_PCD_IRQHandler+0x3ca>
34003b70:	0400      	lsls	r0, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003b72:	bf44      	itt	mi
34003b74:	f44f 4000 	movmi.w	r0, #32768	@ 0x8000
34003b78:	6098      	strmi	r0, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
34003b7a:	4620      	mov	r0, r4
34003b7c:	9203      	str	r2, [sp, #12]
34003b7e:	f007 ffd1 	bl	3400bb24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
34003b82:	9a03      	ldr	r2, [sp, #12]
34003b84:	499c      	ldr	r1, [pc, #624]	@ (34003df8 <HAL_PCD_IRQHandler+0x648>)
34003b86:	428a      	cmp	r2, r1
34003b88:	d907      	bls.n	34003b9a <HAL_PCD_IRQHandler+0x3ea>
34003b8a:	79a1      	ldrb	r1, [r4, #6]
34003b8c:	2901      	cmp	r1, #1
34003b8e:	d104      	bne.n	34003b9a <HAL_PCD_IRQHandler+0x3ea>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003b90:	6820      	ldr	r0, [r4, #0]
34003b92:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003b96:	f007 ff61 	bl	3400ba5c <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
34003b9a:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
34003b9e:	bf1c      	itt	ne
34003ba0:	2310      	movne	r3, #16
34003ba2:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
34003ba6:	f019 0f02 	tst.w	r9, #2
34003baa:	d014      	beq.n	34003bd6 <HAL_PCD_IRQHandler+0x426>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
34003bac:	6973      	ldr	r3, [r6, #20]
34003bae:	0619      	lsls	r1, r3, #24
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
34003bb0:	bf42      	ittt	mi
34003bb2:	686b      	ldrmi	r3, [r5, #4]
34003bb4:	f443 6380 	orrmi.w	r3, r3, #1024	@ 0x400
34003bb8:	606b      	strmi	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
34003bba:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
34003bbe:	2b01      	cmp	r3, #1
34003bc0:	d106      	bne.n	34003bd0 <HAL_PCD_IRQHandler+0x420>
              ep->is_iso_incomplete = 0U;
34003bc2:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003bc4:	4659      	mov	r1, fp
34003bc6:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
34003bc8:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003bcc:	f008 f912 	bl	3400bdf4 <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
34003bd0:	2302      	movs	r3, #2
34003bd2:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003bd6:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003bda:	bf1c      	itt	ne
34003bdc:	2320      	movne	r3, #32
34003bde:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
34003be2:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
34003be6:	bf1c      	itt	ne
34003be8:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
34003bec:	f8c8 3008 	strne.w	r3, [r8, #8]
        ep_intr >>= 1U;
34003bf0:	9b02      	ldr	r3, [sp, #8]
        epnum++;
34003bf2:	3701      	adds	r7, #1
        ep_intr >>= 1U;
34003bf4:	085b      	lsrs	r3, r3, #1
34003bf6:	9302      	str	r3, [sp, #8]
34003bf8:	f108 0820 	add.w	r8, r8, #32
34003bfc:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
34003c00:	e775      	b.n	34003aee <HAL_PCD_IRQHandler+0x33e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003c02:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 34003df8 <HAL_PCD_IRQHandler+0x648>
34003c06:	4561      	cmp	r1, ip
34003c08:	d901      	bls.n	34003c0e <HAL_PCD_IRQHandler+0x45e>
34003c0a:	0412      	lsls	r2, r2, #16
34003c0c:	d498      	bmi.n	34003b40 <HAL_PCD_IRQHandler+0x390>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
34003c0e:	691a      	ldr	r2, [r3, #16]
34003c10:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
34003c14:	f3c2 0212 	ubfx	r2, r2, #0, #19
34003c18:	1a9b      	subs	r3, r3, r2
34003c1a:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
34003c1e:	b96f      	cbnz	r7, 34003c3c <HAL_PCD_IRQHandler+0x48c>
          if (ep->xfer_len == 0U)
34003c20:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
34003c24:	b92a      	cbnz	r2, 34003c32 <HAL_PCD_IRQHandler+0x482>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003c26:	2101      	movs	r1, #1
34003c28:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003c2c:	f007 ff16 	bl	3400ba5c <USB_EP0_OutStart>
34003c30:	e004      	b.n	34003c3c <HAL_PCD_IRQHandler+0x48c>
            ep->xfer_buff += ep->xfer_count;
34003c32:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
34003c36:	441a      	add	r2, r3
34003c38:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003c3c:	4659      	mov	r1, fp
34003c3e:	4620      	mov	r0, r4
34003c40:	f008 f81c 	bl	3400bc7c <HAL_PCD_DataOutStageCallback>
34003c44:	e784      	b.n	34003b50 <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
34003c46:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 34003dfc <HAL_PCD_IRQHandler+0x64c>
34003c4a:	4561      	cmp	r1, ip
34003c4c:	d107      	bne.n	34003c5e <HAL_PCD_IRQHandler+0x4ae>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
34003c4e:	0411      	lsls	r1, r2, #16
34003c50:	f53f af76 	bmi.w	34003b40 <HAL_PCD_IRQHandler+0x390>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003c54:	0692      	lsls	r2, r2, #26
34003c56:	d5f1      	bpl.n	34003c3c <HAL_PCD_IRQHandler+0x48c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003c58:	2220      	movs	r2, #32
34003c5a:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003c5c:	e7ee      	b.n	34003c3c <HAL_PCD_IRQHandler+0x48c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
34003c5e:	2f00      	cmp	r7, #0
34003c60:	d1ec      	bne.n	34003c3c <HAL_PCD_IRQHandler+0x48c>
34003c62:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
34003c66:	2b00      	cmp	r3, #0
34003c68:	d1e8      	bne.n	34003c3c <HAL_PCD_IRQHandler+0x48c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003c6a:	4639      	mov	r1, r7
34003c6c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003c70:	e7dc      	b.n	34003c2c <HAL_PCD_IRQHandler+0x47c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
34003c72:	f01b 0f01 	tst.w	fp, #1
34003c76:	f000 8098 	beq.w	34003daa <HAL_PCD_IRQHandler+0x5fa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003c7a:	fa5f f389 	uxtb.w	r3, r9
34003c7e:	4619      	mov	r1, r3
34003c80:	9302      	str	r3, [sp, #8]
34003c82:	f007 fec8 	bl	3400ba16 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003c86:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003c8a:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003c8c:	d01f      	beq.n	34003cce <HAL_PCD_IRQHandler+0x51e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003c8e:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003c90:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003c92:	f009 020f 	and.w	r2, r9, #15
34003c96:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003c9a:	ea23 0302 	bic.w	r3, r3, r2
34003c9e:	636b      	str	r3, [r5, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
34003ca0:	f8ca 1008 	str.w	r1, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
34003ca4:	79a1      	ldrb	r1, [r4, #6]
34003ca6:	2901      	cmp	r1, #1
34003ca8:	d10d      	bne.n	34003cc6 <HAL_PCD_IRQHandler+0x516>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
34003caa:	e9d7 2307 	ldrd	r2, r3, [r7, #28]
34003cae:	4413      	add	r3, r2
34003cb0:	623b      	str	r3, [r7, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
34003cb2:	f1b9 0f00 	cmp.w	r9, #0
34003cb6:	d106      	bne.n	34003cc6 <HAL_PCD_IRQHandler+0x516>
34003cb8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003cba:	b923      	cbnz	r3, 34003cc6 <HAL_PCD_IRQHandler+0x516>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003cbc:	6820      	ldr	r0, [r4, #0]
34003cbe:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003cc2:	f007 fecb 	bl	3400ba5c <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
34003cc6:	4620      	mov	r0, r4
34003cc8:	9902      	ldr	r1, [sp, #8]
34003cca:	f007 ff77 	bl	3400bbbc <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
34003cce:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
34003cd2:	bf1c      	itt	ne
34003cd4:	2308      	movne	r3, #8
34003cd6:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
34003cda:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
34003cde:	bf1c      	itt	ne
34003ce0:	2310      	movne	r3, #16
34003ce2:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
34003ce6:	f018 0f40 	tst.w	r8, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
34003cea:	bf1c      	itt	ne
34003cec:	2340      	movne	r3, #64	@ 0x40
34003cee:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
34003cf2:	f018 0f02 	tst.w	r8, #2
34003cf6:	d00f      	beq.n	34003d18 <HAL_PCD_IRQHandler+0x568>
            (void)USB_FlushTxFifo(USBx, epnum);
34003cf8:	4649      	mov	r1, r9
34003cfa:	4630      	mov	r0, r6
34003cfc:	f007 fc3a 	bl	3400b574 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
34003d00:	7dfb      	ldrb	r3, [r7, #23]
34003d02:	2b01      	cmp	r3, #1
34003d04:	d105      	bne.n	34003d12 <HAL_PCD_IRQHandler+0x562>
              ep->is_iso_incomplete = 0U;
34003d06:	2300      	movs	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003d08:	4620      	mov	r0, r4
34003d0a:	9902      	ldr	r1, [sp, #8]
              ep->is_iso_incomplete = 0U;
34003d0c:	75fb      	strb	r3, [r7, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003d0e:	f008 f851 	bl	3400bdb4 <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
34003d12:	2302      	movs	r3, #2
34003d14:	f8ca 3008 	str.w	r3, [sl, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003d18:	6823      	ldr	r3, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003d1a:	f018 0f80 	tst.w	r8, #128	@ 0x80
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003d1e:	9303      	str	r3, [sp, #12]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003d20:	d043      	beq.n	34003daa <HAL_PCD_IRQHandler+0x5fa>
  if (ep->xfer_count > ep->xfer_len)
34003d22:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
34003d26:	429a      	cmp	r2, r3
34003d28:	d83f      	bhi.n	34003daa <HAL_PCD_IRQHandler+0x5fa>
  len = ep->xfer_len - ep->xfer_count;
34003d2a:	1a9b      	subs	r3, r3, r2
  if (len > ep->maxpacket)
34003d2c:	69fa      	ldr	r2, [r7, #28]
34003d2e:	4293      	cmp	r3, r2
34003d30:	bf28      	it	cs
34003d32:	4613      	movcs	r3, r2
  len32b = (len + 3U) / 4U;
34003d34:	3303      	adds	r3, #3
34003d36:	089b      	lsrs	r3, r3, #2
34003d38:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003d3a:	9b03      	ldr	r3, [sp, #12]
34003d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
34003d40:	eb03 1349 	add.w	r3, r3, r9, lsl #5
34003d44:	9305      	str	r3, [sp, #20]
34003d46:	9b05      	ldr	r3, [sp, #20]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003d48:	9804      	ldr	r0, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003d4a:	6999      	ldr	r1, [r3, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003d4c:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003d50:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003d52:	4281      	cmp	r1, r0
34003d54:	d327      	bcc.n	34003da6 <HAL_PCD_IRQHandler+0x5f6>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003d56:	4293      	cmp	r3, r2
34003d58:	d80b      	bhi.n	34003d72 <HAL_PCD_IRQHandler+0x5c2>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003d5a:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003d5c:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003d5e:	f009 000f 	and.w	r0, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003d62:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003d66:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003d68:	ea22 0201 	bic.w	r2, r2, r1
34003d6c:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
34003d70:	e01b      	b.n	34003daa <HAL_PCD_IRQHandler+0x5fa>
    len = ep->xfer_len - ep->xfer_count;
34003d72:	eba3 0802 	sub.w	r8, r3, r2
    if (len > ep->maxpacket)
34003d76:	69fb      	ldr	r3, [r7, #28]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003d78:	9a02      	ldr	r2, [sp, #8]
    if (len > ep->maxpacket)
34003d7a:	4598      	cmp	r8, r3
34003d7c:	bf28      	it	cs
34003d7e:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
34003d80:	f108 0303 	add.w	r3, r8, #3
34003d84:	089b      	lsrs	r3, r3, #2
34003d86:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003d88:	79a3      	ldrb	r3, [r4, #6]
34003d8a:	9803      	ldr	r0, [sp, #12]
34003d8c:	9300      	str	r3, [sp, #0]
34003d8e:	6a39      	ldr	r1, [r7, #32]
34003d90:	fa1f f388 	uxth.w	r3, r8
34003d94:	f007 fcbe 	bl	3400b714 <USB_WritePacket>
    ep->xfer_buff  += len;
34003d98:	6a3b      	ldr	r3, [r7, #32]
34003d9a:	4443      	add	r3, r8
34003d9c:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
34003d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34003da0:	4443      	add	r3, r8
34003da2:	62bb      	str	r3, [r7, #40]	@ 0x28
34003da4:	e7cf      	b.n	34003d46 <HAL_PCD_IRQHandler+0x596>
  if (ep->xfer_len <= ep->xfer_count)
34003da6:	4293      	cmp	r3, r2
34003da8:	d9d7      	bls.n	34003d5a <HAL_PCD_IRQHandler+0x5aa>
        epnum++;
34003daa:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
34003dae:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
34003db2:	3724      	adds	r7, #36	@ 0x24
34003db4:	f10a 0a20 	add.w	sl, sl, #32
34003db8:	e566      	b.n	34003888 <HAL_PCD_IRQHandler+0xd8>
        HAL_PCD_ResumeCallback(hpcd);
34003dba:	4620      	mov	r0, r4
34003dbc:	f007 ffe6 	bl	3400bd8c <HAL_PCD_ResumeCallback>
34003dc0:	e57b      	b.n	340038ba <HAL_PCD_IRQHandler+0x10a>
        HAL_PCD_SuspendCallback(hpcd);
34003dc2:	4620      	mov	r0, r4
34003dc4:	f007 ffd8 	bl	3400bd78 <HAL_PCD_SuspendCallback>
34003dc8:	e5a6      	b.n	34003918 <HAL_PCD_IRQHandler+0x168>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003dca:	6098      	str	r0, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
34003dcc:	6819      	ldr	r1, [r3, #0]
34003dce:	3320      	adds	r3, #32
34003dd0:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003dd4:	f843 1c20 	str.w	r1, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
34003dd8:	f8c3 01e8 	str.w	r0, [r3, #488]	@ 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
34003ddc:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003de0:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003de4:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
34003de8:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003dec:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
34003df0:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003df4:	e5a7      	b.n	34003946 <HAL_PCD_IRQHandler+0x196>
34003df6:	bf00      	nop
34003df8:	4f54300a 	.word	0x4f54300a
34003dfc:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
34003e00:	696b      	ldr	r3, [r5, #20]
34003e02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34003e06:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
34003e0a:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
34003e0c:	692b      	ldr	r3, [r5, #16]
34003e0e:	f043 030b 	orr.w	r3, r3, #11
34003e12:	612b      	str	r3, [r5, #16]
34003e14:	e5ac      	b.n	34003970 <HAL_PCD_IRQHandler+0x1c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003e16:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003e18:	f04f 0924 	mov.w	r9, #36	@ 0x24
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003e1c:	69b3      	ldr	r3, [r6, #24]
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003e1e:	f204 2857 	addw	r8, r4, #599	@ 0x257
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
34003e26:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003e28:	7923      	ldrb	r3, [r4, #4]
34003e2a:	42bb      	cmp	r3, r7
34003e2c:	f67f ade0 	bls.w	340039f0 <HAL_PCD_IRQHandler+0x240>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003e30:	fb09 f307 	mul.w	r3, r9, r7
34003e34:	f818 3003 	ldrb.w	r3, [r8, r3]
34003e38:	2b01      	cmp	r3, #1
34003e3a:	d103      	bne.n	34003e44 <HAL_PCD_IRQHandler+0x694>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
34003e3c:	4620      	mov	r0, r4
34003e3e:	b2f9      	uxtb	r1, r7
34003e40:	f7ff fca2 	bl	34003788 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003e44:	3701      	adds	r7, #1
34003e46:	e7ef      	b.n	34003e28 <HAL_PCD_IRQHandler+0x678>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003e48:	f898 303c 	ldrb.w	r3, [r8, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
34003e4c:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003e50:	2b01      	cmp	r3, #1
34003e52:	d109      	bne.n	34003e68 <HAL_PCD_IRQHandler+0x6b8>
34003e54:	2a00      	cmp	r2, #0
34003e56:	da07      	bge.n	34003e68 <HAL_PCD_IRQHandler+0x6b8>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003e58:	f067 017f 	orn	r1, r7, #127	@ 0x7f
34003e5c:	4620      	mov	r0, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
34003e5e:	f888 303b 	strb.w	r3, [r8, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003e62:	b2c9      	uxtb	r1, r1
34003e64:	f7ff fc90 	bl	34003788 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003e68:	3701      	adds	r7, #1
34003e6a:	f108 0824 	add.w	r8, r8, #36	@ 0x24
34003e6e:	f109 0920 	add.w	r9, r9, #32
34003e72:	e5c6      	b.n	34003a02 <HAL_PCD_IRQHandler+0x252>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003e74:	3224      	adds	r2, #36	@ 0x24
34003e76:	f10c 0c20 	add.w	ip, ip, #32
34003e7a:	e5d7      	b.n	34003a2c <HAL_PCD_IRQHandler+0x27c>

34003e7c <HAL_PCD_EP_Flush>:
{
34003e7c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
34003e7e:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
{
34003e82:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
34003e84:	2b01      	cmp	r3, #1
34003e86:	d010      	beq.n	34003eaa <HAL_PCD_EP_Flush+0x2e>
34003e88:	2301      	movs	r3, #1
34003e8a:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
34003e8e:	060b      	lsls	r3, r1, #24
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003e90:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
34003e92:	d507      	bpl.n	34003ea4 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003e94:	f001 010f 	and.w	r1, r1, #15
34003e98:	f007 fb6c 	bl	3400b574 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
34003e9c:	2000      	movs	r0, #0
34003e9e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
34003ea2:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
34003ea4:	f007 fb89 	bl	3400b5ba <USB_FlushRxFifo>
34003ea8:	e7f8      	b.n	34003e9c <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
34003eaa:	2002      	movs	r0, #2
34003eac:	e7f9      	b.n	34003ea2 <HAL_PCD_EP_Flush+0x26>

34003eae <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
34003eae:	4770      	bx	lr

34003eb0 <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34003eb0:	2804      	cmp	r0, #4
{
34003eb2:	b538      	push	{r3, r4, r5, lr}
34003eb4:	4605      	mov	r5, r0
34003eb6:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
34003eb8:	d912      	bls.n	34003ee0 <HAL_PWREx_ConfigVddIORange+0x30>
34003eba:	f240 316a 	movw	r1, #874	@ 0x36a
34003ebe:	481d      	ldr	r0, [pc, #116]	@ (34003f34 <HAL_PWREx_ConfigVddIORange+0x84>)
34003ec0:	f7fd fa74 	bl	340013ac <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34003ec4:	2c01      	cmp	r4, #1
34003ec6:	d915      	bls.n	34003ef4 <HAL_PWREx_ConfigVddIORange+0x44>
34003ec8:	f240 316b 	movw	r1, #875	@ 0x36b
34003ecc:	4819      	ldr	r0, [pc, #100]	@ (34003f34 <HAL_PWREx_ConfigVddIORange+0x84>)
34003ece:	f7fd fa6d 	bl	340013ac <assert_failed>

  switch (VddIOPort)
34003ed2:	2d04      	cmp	r5, #4
34003ed4:	d80e      	bhi.n	34003ef4 <HAL_PWREx_ConfigVddIORange+0x44>
34003ed6:	e8df f005 	tbb	[pc, r5]
34003eda:	0e06      	.short	0x0e06
34003edc:	1c15      	.short	0x1c15
34003ede:	24          	.byte	0x24
34003edf:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34003ee0:	2901      	cmp	r1, #1
34003ee2:	d9f6      	bls.n	34003ed2 <HAL_PWREx_ConfigVddIORange+0x22>
34003ee4:	e7f0      	b.n	34003ec8 <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34003ee6:	4a14      	ldr	r2, [pc, #80]	@ (34003f38 <HAL_PWREx_ConfigVddIORange+0x88>)
34003ee8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003eee:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34003ef2:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
34003ef4:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34003ef6:	4a10      	ldr	r2, [pc, #64]	@ (34003f38 <HAL_PWREx_ConfigVddIORange+0x88>)
34003ef8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003efa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
34003efe:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
34003f02:	e7f6      	b.n	34003ef2 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34003f04:	4a0c      	ldr	r2, [pc, #48]	@ (34003f38 <HAL_PWREx_ConfigVddIORange+0x88>)
34003f06:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003f08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
34003f0c:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
34003f10:	e7ef      	b.n	34003ef2 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34003f12:	4a09      	ldr	r2, [pc, #36]	@ (34003f38 <HAL_PWREx_ConfigVddIORange+0x88>)
34003f14:	6b53      	ldr	r3, [r2, #52]	@ 0x34
34003f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003f1a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34003f1e:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
34003f20:	e7e8      	b.n	34003ef4 <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34003f22:	4a05      	ldr	r2, [pc, #20]	@ (34003f38 <HAL_PWREx_ConfigVddIORange+0x88>)
34003f24:	6b93      	ldr	r3, [r2, #56]	@ 0x38
34003f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003f2a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34003f2e:	6393      	str	r3, [r2, #56]	@ 0x38
}
34003f30:	e7e0      	b.n	34003ef4 <HAL_PWREx_ConfigVddIORange+0x44>
34003f32:	bf00      	nop
34003f34:	3401085a 	.word	0x3401085a
34003f38:	56024800 	.word	0x56024800

34003f3c <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34003f3c:	4a02      	ldr	r2, [pc, #8]	@ (34003f48 <HAL_PWREx_EnableVddIO3+0xc>)
34003f3e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003f40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34003f44:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34003f46:	4770      	bx	lr
34003f48:	56024800 	.word	0x56024800

34003f4c <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003f4c:	6803      	ldr	r3, [r0, #0]
34003f4e:	4a1c      	ldr	r2, [pc, #112]	@ (34003fc0 <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
34003f50:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003f52:	4293      	cmp	r3, r2
{
34003f54:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003f56:	d02c      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f58:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003f5c:	4293      	cmp	r3, r2
34003f5e:	d028      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f60:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003f64:	3280      	adds	r2, #128	@ 0x80
34003f66:	4293      	cmp	r3, r2
34003f68:	d023      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f6a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003f6e:	4293      	cmp	r3, r2
34003f70:	d01f      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f72:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003f76:	3280      	adds	r2, #128	@ 0x80
34003f78:	4293      	cmp	r3, r2
34003f7a:	d01a      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f7c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003f80:	4293      	cmp	r3, r2
34003f82:	d016      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f84:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003f88:	3280      	adds	r2, #128	@ 0x80
34003f8a:	4293      	cmp	r3, r2
34003f8c:	d011      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f8e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003f92:	4293      	cmp	r3, r2
34003f94:	d00d      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f96:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003f9a:	3280      	adds	r2, #128	@ 0x80
34003f9c:	4293      	cmp	r3, r2
34003f9e:	d008      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003fa0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003fa4:	4293      	cmp	r3, r2
34003fa6:	d004      	beq.n	34003fb2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003fa8:	f240 4107 	movw	r1, #1031	@ 0x407
34003fac:	4805      	ldr	r0, [pc, #20]	@ (34003fc4 <HAL_RAMCFG_EnableAXISRAM+0x78>)
34003fae:	f7fd f9fd 	bl	340013ac <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34003fb2:	6822      	ldr	r2, [r4, #0]
34003fb4:	6813      	ldr	r3, [r2, #0]
34003fb6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34003fba:	6013      	str	r3, [r2, #0]
}
34003fbc:	bd10      	pop	{r4, pc}
34003fbe:	bf00      	nop
34003fc0:	52023080 	.word	0x52023080
34003fc4:	34010905 	.word	0x34010905

34003fc8 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34003fc8:	4b02      	ldr	r3, [pc, #8]	@ (34003fd4 <LL_RCC_HSI_IsReady+0xc>)
34003fca:	6858      	ldr	r0, [r3, #4]
}
34003fcc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34003fd0:	4770      	bx	lr
34003fd2:	bf00      	nop
34003fd4:	56028000 	.word	0x56028000

34003fd8 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34003fd8:	4b02      	ldr	r3, [pc, #8]	@ (34003fe4 <LL_RCC_MSI_IsReady+0xc>)
34003fda:	6858      	ldr	r0, [r3, #4]
}
34003fdc:	f3c0 0080 	ubfx	r0, r0, #2, #1
34003fe0:	4770      	bx	lr
34003fe2:	bf00      	nop
34003fe4:	56028000 	.word	0x56028000

34003fe8 <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34003fe8:	4b02      	ldr	r3, [pc, #8]	@ (34003ff4 <LL_RCC_PLL1_IsReady+0xc>)
34003fea:	6858      	ldr	r0, [r3, #4]
}
34003fec:	f3c0 2000 	ubfx	r0, r0, #8, #1
34003ff0:	4770      	bx	lr
34003ff2:	bf00      	nop
34003ff4:	56028000 	.word	0x56028000

34003ff8 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34003ff8:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003ffa:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003ffc:	4d1b      	ldr	r5, [pc, #108]	@ (3400406c <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34003ffe:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34004000:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34004002:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34004004:	021b      	lsls	r3, r3, #8
34004006:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
3400400a:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3400400c:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34004010:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34004014:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34004016:	429a      	cmp	r2, r3
34004018:	d126      	bne.n	34004068 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3400401a:	4b15      	ldr	r3, [pc, #84]	@ (34004070 <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3400401c:	68ca      	ldr	r2, [r1, #12]
3400401e:	58e3      	ldr	r3, [r4, r3]
34004020:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34004024:	4293      	cmp	r3, r2
34004026:	d11f      	bne.n	34004068 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34004028:	4b12      	ldr	r3, [pc, #72]	@ (34004074 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3400402a:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
3400402c:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34004030:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34004032:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34004036:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3400403a:	429a      	cmp	r2, r3
3400403c:	d114      	bne.n	34004068 <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400403e:	4b0e      	ldr	r3, [pc, #56]	@ (34004078 <RCC_PLL_IsNewConfig+0x80>)
34004040:	685a      	ldr	r2, [r3, #4]
34004042:	f44f 7380 	mov.w	r3, #256	@ 0x100
34004046:	fa03 f000 	lsl.w	r0, r3, r0
3400404a:	4390      	bics	r0, r2
3400404c:	d00a      	beq.n	34004064 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
3400404e:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
34004050:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
34004054:	bf0c      	ite	eq
34004056:	2301      	moveq	r3, #1
34004058:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3400405a:	6808      	ldr	r0, [r1, #0]
3400405c:	1ac0      	subs	r0, r0, r3
3400405e:	bf18      	it	ne
34004060:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
34004062:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
34004064:	2302      	movs	r3, #2
34004066:	e7f8      	b.n	3400405a <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
34004068:	2001      	movs	r0, #1
  return ret;
3400406a:	e7fa      	b.n	34004062 <RCC_PLL_IsNewConfig+0x6a>
3400406c:	56028080 	.word	0x56028080
34004070:	56028084 	.word	0x56028084
34004074:	56028088 	.word	0x56028088
34004078:	56028000 	.word	0x56028000

3400407c <RCC_PLL_Enable>:
{
3400407c:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3400407e:	f44f 7480 	mov.w	r4, #256	@ 0x100
34004082:	4e09      	ldr	r6, [pc, #36]	@ (340040a8 <RCC_PLL_Enable+0x2c>)
34004084:	4084      	lsls	r4, r0
34004086:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
3400408a:	f7fe f9b5 	bl	340023f8 <HAL_GetTick>
3400408e:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34004090:	6873      	ldr	r3, [r6, #4]
34004092:	421c      	tst	r4, r3
34004094:	d001      	beq.n	3400409a <RCC_PLL_Enable+0x1e>
  return ret;
34004096:	2000      	movs	r0, #0
}
34004098:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400409a:	f7fe f9ad 	bl	340023f8 <HAL_GetTick>
3400409e:	1b40      	subs	r0, r0, r5
340040a0:	2801      	cmp	r0, #1
340040a2:	d9f5      	bls.n	34004090 <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
340040a4:	2003      	movs	r0, #3
340040a6:	e7f7      	b.n	34004098 <RCC_PLL_Enable+0x1c>
340040a8:	56028000 	.word	0x56028000

340040ac <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
340040ac:	680b      	ldr	r3, [r1, #0]
{
340040ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
340040b2:	2b02      	cmp	r3, #2
{
340040b4:	4681      	mov	r9, r0
340040b6:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340040b8:	4f83      	ldr	r7, [pc, #524]	@ (340042c8 <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
340040ba:	4e84      	ldr	r6, [pc, #528]	@ (340042cc <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340040bc:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
340040c0:	f040 8099 	bne.w	340041f6 <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
340040c4:	684b      	ldr	r3, [r1, #4]
340040c6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340040ca:	d004      	beq.n	340040d6 <RCC_PLL_Config+0x2a>
340040cc:	f240 71fa 	movw	r1, #2042	@ 0x7fa
340040d0:	487f      	ldr	r0, [pc, #508]	@ (340042d0 <RCC_PLL_Config+0x224>)
340040d2:	f7fd f96b 	bl	340013ac <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
340040d6:	68eb      	ldr	r3, [r5, #12]
340040d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340040dc:	d304      	bcc.n	340040e8 <RCC_PLL_Config+0x3c>
340040de:	f240 71fb 	movw	r1, #2043	@ 0x7fb
340040e2:	487b      	ldr	r0, [pc, #492]	@ (340042d0 <RCC_PLL_Config+0x224>)
340040e4:	f7fd f962 	bl	340013ac <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
340040e8:	68ab      	ldr	r3, [r5, #8]
340040ea:	3b01      	subs	r3, #1
340040ec:	2b3e      	cmp	r3, #62	@ 0x3e
340040ee:	d904      	bls.n	340040fa <RCC_PLL_Config+0x4e>
340040f0:	f240 71fc 	movw	r1, #2044	@ 0x7fc
340040f4:	4876      	ldr	r0, [pc, #472]	@ (340042d0 <RCC_PLL_Config+0x224>)
340040f6:	f7fd f959 	bl	340013ac <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
340040fa:	f640 12ba 	movw	r2, #2490	@ 0x9ba
340040fe:	692b      	ldr	r3, [r5, #16]
34004100:	3b0a      	subs	r3, #10
34004102:	4293      	cmp	r3, r2
34004104:	d904      	bls.n	34004110 <RCC_PLL_Config+0x64>
34004106:	f240 71fd 	movw	r1, #2045	@ 0x7fd
3400410a:	4871      	ldr	r0, [pc, #452]	@ (340042d0 <RCC_PLL_Config+0x224>)
3400410c:	f7fd f94e 	bl	340013ac <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34004110:	696b      	ldr	r3, [r5, #20]
34004112:	3b01      	subs	r3, #1
34004114:	2b06      	cmp	r3, #6
34004116:	d904      	bls.n	34004122 <RCC_PLL_Config+0x76>
34004118:	f240 71fe 	movw	r1, #2046	@ 0x7fe
3400411c:	486c      	ldr	r0, [pc, #432]	@ (340042d0 <RCC_PLL_Config+0x224>)
3400411e:	f7fd f945 	bl	340013ac <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34004122:	69ab      	ldr	r3, [r5, #24]
34004124:	3b01      	subs	r3, #1
34004126:	2b06      	cmp	r3, #6
34004128:	d904      	bls.n	34004134 <RCC_PLL_Config+0x88>
3400412a:	f240 71ff 	movw	r1, #2047	@ 0x7ff
3400412e:	4868      	ldr	r0, [pc, #416]	@ (340042d0 <RCC_PLL_Config+0x224>)
34004130:	f7fd f93c 	bl	340013ac <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004134:	f44f 7880 	mov.w	r8, #256	@ 0x100
34004138:	4b66      	ldr	r3, [pc, #408]	@ (340042d4 <RCC_PLL_Config+0x228>)
3400413a:	fa08 f809 	lsl.w	r8, r8, r9
3400413e:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
34004142:	f7fe f959 	bl	340023f8 <HAL_GetTick>
34004146:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34004148:	f8df a194 	ldr.w	sl, [pc, #404]	@ 340042e0 <RCC_PLL_Config+0x234>
3400414c:	f8da 3004 	ldr.w	r3, [sl, #4]
34004150:	ea38 0303 	bics.w	r3, r8, r3
34004154:	d040      	beq.n	340041d8 <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34004156:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34004158:	495f      	ldr	r1, [pc, #380]	@ (340042d8 <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3400415a:	f043 0304 	orr.w	r3, r3, #4
3400415e:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34004160:	59e3      	ldr	r3, [r4, r7]
34004162:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34004166:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34004168:	692b      	ldr	r3, [r5, #16]
3400416a:	68aa      	ldr	r2, [r5, #8]
3400416c:	021b      	lsls	r3, r3, #8
3400416e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
34004172:	686a      	ldr	r2, [r5, #4]
34004174:	59e0      	ldr	r0, [r4, r7]
34004176:	4313      	orrs	r3, r2
34004178:	4a58      	ldr	r2, [pc, #352]	@ (340042dc <RCC_PLL_Config+0x230>)
3400417a:	4002      	ands	r2, r0
3400417c:	4313      	orrs	r3, r2
3400417e:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34004180:	59a2      	ldr	r2, [r4, r6]
34004182:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
34004186:	061b      	lsls	r3, r3, #24
34004188:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
3400418c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
34004190:	4313      	orrs	r3, r2
34004192:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34004194:	5863      	ldr	r3, [r4, r1]
34004196:	68ea      	ldr	r2, [r5, #12]
34004198:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
3400419c:	4313      	orrs	r3, r2
3400419e:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
340041a0:	59a3      	ldr	r3, [r4, r6]
340041a2:	f023 0308 	bic.w	r3, r3, #8
340041a6:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
340041a8:	68eb      	ldr	r3, [r5, #12]
340041aa:	b11b      	cbz	r3, 340041b4 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
340041ac:	59a3      	ldr	r3, [r4, r6]
340041ae:	f043 030a 	orr.w	r3, r3, #10
340041b2:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
340041b4:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340041b6:	4d4a      	ldr	r5, [pc, #296]	@ (340042e0 <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
340041b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
340041bc:	f043 0301 	orr.w	r3, r3, #1
340041c0:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340041c2:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
340041c6:	f7fe f917 	bl	340023f8 <HAL_GetTick>
340041ca:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
340041cc:	686b      	ldr	r3, [r5, #4]
340041ce:	ea18 0f03 	tst.w	r8, r3
340041d2:	d00a      	beq.n	340041ea <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
340041d4:	2000      	movs	r0, #0
340041d6:	e006      	b.n	340041e6 <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340041d8:	f7fe f90e 	bl	340023f8 <HAL_GetTick>
340041dc:	eba0 0009 	sub.w	r0, r0, r9
340041e0:	2801      	cmp	r0, #1
340041e2:	d9b3      	bls.n	3400414c <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
340041e4:	2003      	movs	r0, #3
}
340041e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340041ea:	f7fe f905 	bl	340023f8 <HAL_GetTick>
340041ee:	1b00      	subs	r0, r0, r4
340041f0:	2801      	cmp	r0, #1
340041f2:	d9eb      	bls.n	340041cc <RCC_PLL_Config+0x120>
340041f4:	e7f6      	b.n	340041e4 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
340041f6:	2b03      	cmp	r3, #3
340041f8:	d146      	bne.n	34004288 <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
340041fa:	684b      	ldr	r3, [r1, #4]
340041fc:	b37b      	cbz	r3, 3400425e <RCC_PLL_Config+0x1b2>
340041fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004202:	d032      	beq.n	3400426a <RCC_PLL_Config+0x1be>
34004204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004208:	d032      	beq.n	34004270 <RCC_PLL_Config+0x1c4>
3400420a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400420e:	d00d      	beq.n	3400422c <RCC_PLL_Config+0x180>
34004210:	f640 013f 	movw	r1, #2111	@ 0x83f
34004214:	482e      	ldr	r0, [pc, #184]	@ (340042d0 <RCC_PLL_Config+0x224>)
34004216:	f7fd f8c9 	bl	340013ac <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
3400421a:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
3400421c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004220:	d026      	beq.n	34004270 <RCC_PLL_Config+0x1c4>
34004222:	d803      	bhi.n	3400422c <RCC_PLL_Config+0x180>
34004224:	b1db      	cbz	r3, 3400425e <RCC_PLL_Config+0x1b2>
34004226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400422a:	d01e      	beq.n	3400426a <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400422c:	f44f 7680 	mov.w	r6, #256	@ 0x100
34004230:	4b28      	ldr	r3, [pc, #160]	@ (340042d4 <RCC_PLL_Config+0x228>)
34004232:	fa06 f609 	lsl.w	r6, r6, r9
34004236:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
34004238:	f7fe f8de 	bl	340023f8 <HAL_GetTick>
3400423c:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400423e:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 340042e0 <RCC_PLL_Config+0x234>
34004242:	f8d9 3004 	ldr.w	r3, [r9, #4]
34004246:	ea36 0303 	bics.w	r3, r6, r3
3400424a:	d016      	beq.n	3400427a <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
3400424c:	59e3      	ldr	r3, [r4, r7]
3400424e:	686a      	ldr	r2, [r5, #4]
34004250:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
34004254:	4313      	orrs	r3, r2
34004256:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400425a:	51e3      	str	r3, [r4, r7]
3400425c:	e7ba      	b.n	340041d4 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
3400425e:	f7ff feb3 	bl	34003fc8 <LL_RCC_HSI_IsReady>
34004262:	2800      	cmp	r0, #0
34004264:	d1e2      	bne.n	3400422c <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
34004266:	2001      	movs	r0, #1
34004268:	e7bd      	b.n	340041e6 <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
3400426a:	f7ff feb5 	bl	34003fd8 <LL_RCC_MSI_IsReady>
3400426e:	e7f8      	b.n	34004262 <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004270:	4b1b      	ldr	r3, [pc, #108]	@ (340042e0 <RCC_PLL_Config+0x234>)
34004272:	685b      	ldr	r3, [r3, #4]
34004274:	06db      	lsls	r3, r3, #27
34004276:	d5f6      	bpl.n	34004266 <RCC_PLL_Config+0x1ba>
34004278:	e7d8      	b.n	3400422c <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400427a:	f7fe f8bd 	bl	340023f8 <HAL_GetTick>
3400427e:	eba0 0008 	sub.w	r0, r0, r8
34004282:	2801      	cmp	r0, #1
34004284:	d9dd      	bls.n	34004242 <RCC_PLL_Config+0x196>
34004286:	e7ad      	b.n	340041e4 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34004288:	2b01      	cmp	r3, #1
3400428a:	d1a3      	bne.n	340041d4 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400428c:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34004290:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004292:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34004294:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
34004298:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400429a:	4b0e      	ldr	r3, [pc, #56]	@ (340042d4 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400429c:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 340042e0 <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340042a0:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
340042a2:	f7fe f8a9 	bl	340023f8 <HAL_GetTick>
340042a6:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340042a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
340042ac:	ea35 0303 	bics.w	r3, r5, r3
340042b0:	d003      	beq.n	340042ba <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
340042b2:	59e3      	ldr	r3, [r4, r7]
340042b4:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
340042b8:	e7cf      	b.n	3400425a <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340042ba:	f7fe f89d 	bl	340023f8 <HAL_GetTick>
340042be:	1b80      	subs	r0, r0, r6
340042c0:	2801      	cmp	r0, #1
340042c2:	d9f1      	bls.n	340042a8 <RCC_PLL_Config+0x1fc>
340042c4:	e78e      	b.n	340041e4 <RCC_PLL_Config+0x138>
340042c6:	bf00      	nop
340042c8:	56028080 	.word	0x56028080
340042cc:	56028088 	.word	0x56028088
340042d0:	340109b0 	.word	0x340109b0
340042d4:	56029000 	.word	0x56029000
340042d8:	56028084 	.word	0x56028084
340042dc:	8c0000ff 	.word	0x8c0000ff
340042e0:	56028000 	.word	0x56028000

340042e4 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
340042e4:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
340042e8:	b508      	push	{r3, lr}
  switch (PLLSource1)
340042ea:	d021      	beq.n	34004330 <RCC_IC_CheckPLLSources+0x4c>
340042ec:	d805      	bhi.n	340042fa <RCC_IC_CheckPLLSources+0x16>
340042ee:	b9c0      	cbnz	r0, 34004322 <RCC_IC_CheckPLLSources+0x3e>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
340042f0:	f7ff fe7a 	bl	34003fe8 <LL_RCC_PLL1_IsReady>
340042f4:	b178      	cbz	r0, 34004316 <RCC_IC_CheckPLLSources+0x32>
  uint32_t ret = 1U;
340042f6:	2201      	movs	r2, #1
340042f8:	e003      	b.n	34004302 <RCC_IC_CheckPLLSources+0x1e>
  switch (PLLSource1)
340042fa:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
340042fe:	d01e      	beq.n	3400433e <RCC_IC_CheckPLLSources+0x5a>
34004300:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34004302:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
34004306:	d03c      	beq.n	34004382 <RCC_IC_CheckPLLSources+0x9e>
34004308:	d820      	bhi.n	3400434c <RCC_IC_CheckPLLSources+0x68>
3400430a:	b349      	cbz	r1, 34004360 <RCC_IC_CheckPLLSources+0x7c>
3400430c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
34004310:	d030      	beq.n	34004374 <RCC_IC_CheckPLLSources+0x90>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
34004312:	2200      	movs	r2, #0
34004314:	e02c      	b.n	34004370 <RCC_IC_CheckPLLSources+0x8c>
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34004316:	4b1e      	ldr	r3, [pc, #120]	@ (34004390 <RCC_IC_CheckPLLSources+0xac>)
34004318:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3400431c:	f3c2 62c0 	ubfx	r2, r2, #27, #1
34004320:	e7ef      	b.n	34004302 <RCC_IC_CheckPLLSources+0x1e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004322:	4b1b      	ldr	r3, [pc, #108]	@ (34004390 <RCC_IC_CheckPLLSources+0xac>)
34004324:	685a      	ldr	r2, [r3, #4]
34004326:	0592      	lsls	r2, r2, #22
34004328:	d4e5      	bmi.n	340042f6 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3400432a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3400432e:	e7f5      	b.n	3400431c <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34004330:	4b17      	ldr	r3, [pc, #92]	@ (34004390 <RCC_IC_CheckPLLSources+0xac>)
34004332:	685a      	ldr	r2, [r3, #4]
34004334:	0550      	lsls	r0, r2, #21
34004336:	d4de      	bmi.n	340042f6 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34004338:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400433c:	e7ee      	b.n	3400431c <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3400433e:	4b14      	ldr	r3, [pc, #80]	@ (34004390 <RCC_IC_CheckPLLSources+0xac>)
34004340:	685a      	ldr	r2, [r3, #4]
34004342:	0512      	lsls	r2, r2, #20
34004344:	d4d7      	bmi.n	340042f6 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34004346:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400434a:	e7e7      	b.n	3400431c <RCC_IC_CheckPLLSources+0x38>
  switch (PLLSource2)
3400434c:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
34004350:	d1df      	bne.n	34004312 <RCC_IC_CheckPLLSources+0x2e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004352:	4b0f      	ldr	r3, [pc, #60]	@ (34004390 <RCC_IC_CheckPLLSources+0xac>)
34004354:	6859      	ldr	r1, [r3, #4]
34004356:	0509      	lsls	r1, r1, #20
34004358:	d40a      	bmi.n	34004370 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3400435a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400435e:	e005      	b.n	3400436c <RCC_IC_CheckPLLSources+0x88>
      if (LL_RCC_PLL1_IsReady() == 0U)
34004360:	f7ff fe42 	bl	34003fe8 <LL_RCC_PLL1_IsReady>
34004364:	b920      	cbnz	r0, 34004370 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34004366:	4b0a      	ldr	r3, [pc, #40]	@ (34004390 <RCC_IC_CheckPLLSources+0xac>)
34004368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400436c:	0118      	lsls	r0, r3, #4
3400436e:	d5d0      	bpl.n	34004312 <RCC_IC_CheckPLLSources+0x2e>
      break;
  }

  return ret;
}
34004370:	4610      	mov	r0, r2
34004372:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004374:	4b06      	ldr	r3, [pc, #24]	@ (34004390 <RCC_IC_CheckPLLSources+0xac>)
34004376:	6859      	ldr	r1, [r3, #4]
34004378:	0589      	lsls	r1, r1, #22
3400437a:	d4f9      	bmi.n	34004370 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3400437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34004380:	e7f4      	b.n	3400436c <RCC_IC_CheckPLLSources+0x88>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34004382:	4b03      	ldr	r3, [pc, #12]	@ (34004390 <RCC_IC_CheckPLLSources+0xac>)
34004384:	6859      	ldr	r1, [r3, #4]
34004386:	0548      	lsls	r0, r1, #21
34004388:	d4f2      	bmi.n	34004370 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400438a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400438e:	e7ed      	b.n	3400436c <RCC_IC_CheckPLLSources+0x88>
34004390:	56028000 	.word	0x56028000

34004394 <HAL_RCC_OscConfig>:
{
34004394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
34004398:	4604      	mov	r4, r0
3400439a:	b918      	cbnz	r0, 340043a4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
3400439c:	2001      	movs	r0, #1
}
3400439e:	b003      	add	sp, #12
340043a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
340043a4:	6803      	ldr	r3, [r0, #0]
340043a6:	b133      	cbz	r3, 340043b6 <HAL_RCC_OscConfig+0x22>
340043a8:	06dd      	lsls	r5, r3, #27
340043aa:	d104      	bne.n	340043b6 <HAL_RCC_OscConfig+0x22>
340043ac:	f44f 71b9 	mov.w	r1, #370	@ 0x172
340043b0:	4893      	ldr	r0, [pc, #588]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
340043b2:	f7fc fffb 	bl	340013ac <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340043b6:	4b93      	ldr	r3, [pc, #588]	@ (34004604 <HAL_RCC_OscConfig+0x270>)
340043b8:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340043ba:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340043bc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340043c0:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340043c4:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340043c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340043cc:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340043d0:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
340043d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
340043d8:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
340043dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
340043e0:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
340043e2:	6823      	ldr	r3, [r4, #0]
340043e4:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
340043e8:	07d8      	lsls	r0, r3, #31
340043ea:	d463      	bmi.n	340044b4 <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
340043ec:	6823      	ldr	r3, [r4, #0]
340043ee:	0799      	lsls	r1, r3, #30
340043f0:	f100 80d4 	bmi.w	3400459c <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
340043f4:	6823      	ldr	r3, [r4, #0]
340043f6:	06d8      	lsls	r0, r3, #27
340043f8:	d522      	bpl.n	34004440 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
340043fa:	69e3      	ldr	r3, [r4, #28]
340043fc:	2b00      	cmp	r3, #0
340043fe:	f000 8347 	beq.w	34004a90 <HAL_RCC_OscConfig+0x6fc>
34004402:	2b04      	cmp	r3, #4
34004404:	f000 834d 	beq.w	34004aa2 <HAL_RCC_OscConfig+0x70e>
34004408:	f240 2105 	movw	r1, #517	@ 0x205
3400440c:	487c      	ldr	r0, [pc, #496]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
3400440e:	f7fc ffcd 	bl	340013ac <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34004412:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004416:	f040 8148 	bne.w	340046aa <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3400441a:	69e3      	ldr	r3, [r4, #28]
3400441c:	2b00      	cmp	r3, #0
3400441e:	d0bd      	beq.n	3400439c <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34004420:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004422:	2b1f      	cmp	r3, #31
34004424:	d904      	bls.n	34004430 <HAL_RCC_OscConfig+0x9c>
34004426:	f44f 7106 	mov.w	r1, #536	@ 0x218
3400442a:	4875      	ldr	r0, [pc, #468]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
3400442c:	f7fc ffbe 	bl	340013ac <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34004430:	4a74      	ldr	r2, [pc, #464]	@ (34004604 <HAL_RCC_OscConfig+0x270>)
34004432:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34004434:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34004436:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3400443a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400443e:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34004440:	6823      	ldr	r3, [r4, #0]
34004442:	0718      	lsls	r0, r3, #28
34004444:	f100 8189 	bmi.w	3400475a <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34004448:	6823      	ldr	r3, [r4, #0]
3400444a:	0759      	lsls	r1, r3, #29
3400444c:	f100 81b4 	bmi.w	340047b8 <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
34004450:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34004452:	2b03      	cmp	r3, #3
34004454:	d904      	bls.n	34004460 <HAL_RCC_OscConfig+0xcc>
34004456:	f240 21a5 	movw	r1, #677	@ 0x2a5
3400445a:	4869      	ldr	r0, [pc, #420]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
3400445c:	f7fc ffa6 	bl	340013ac <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34004460:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
34004462:	2f00      	cmp	r7, #0
34004464:	f040 8210 	bne.w	34004888 <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34004468:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400446a:	2b03      	cmp	r3, #3
3400446c:	d904      	bls.n	34004478 <HAL_RCC_OscConfig+0xe4>
3400446e:	f240 21d3 	movw	r1, #723	@ 0x2d3
34004472:	4863      	ldr	r0, [pc, #396]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
34004474:	f7fc ff9a 	bl	340013ac <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34004478:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3400447a:	2f00      	cmp	r7, #0
3400447c:	f040 8246 	bne.w	3400490c <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
34004480:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34004482:	2b03      	cmp	r3, #3
34004484:	d904      	bls.n	34004490 <HAL_RCC_OscConfig+0xfc>
34004486:	f240 3101 	movw	r1, #769	@ 0x301
3400448a:	485d      	ldr	r0, [pc, #372]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
3400448c:	f7fc ff8e 	bl	340013ac <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34004490:	6e27      	ldr	r7, [r4, #96]	@ 0x60
34004492:	2f00      	cmp	r7, #0
34004494:	f040 827a 	bne.w	3400498c <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
34004498:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400449a:	2b03      	cmp	r3, #3
3400449c:	d904      	bls.n	340044a8 <HAL_RCC_OscConfig+0x114>
3400449e:	f240 312e 	movw	r1, #814	@ 0x32e
340044a2:	4857      	ldr	r0, [pc, #348]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
340044a4:	f7fc ff82 	bl	340013ac <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
340044a8:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
340044aa:	2f00      	cmp	r7, #0
340044ac:	f040 82b0 	bne.w	34004a10 <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
340044b0:	2000      	movs	r0, #0
340044b2:	e774      	b.n	3400439e <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
340044b4:	6863      	ldr	r3, [r4, #4]
340044b6:	2b00      	cmp	r3, #0
340044b8:	f000 8313 	beq.w	34004ae2 <HAL_RCC_OscConfig+0x74e>
340044bc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
340044c0:	2a10      	cmp	r2, #16
340044c2:	f000 8305 	beq.w	34004ad0 <HAL_RCC_OscConfig+0x73c>
340044c6:	4a50      	ldr	r2, [pc, #320]	@ (34004608 <HAL_RCC_OscConfig+0x274>)
340044c8:	4293      	cmp	r3, r2
340044ca:	f000 8301 	beq.w	34004ad0 <HAL_RCC_OscConfig+0x73c>
340044ce:	f44f 71c0 	mov.w	r1, #384	@ 0x180
340044d2:	484b      	ldr	r0, [pc, #300]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
340044d4:	f7fc ff6a 	bl	340013ac <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340044d8:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
340044dc:	d103      	bne.n	340044e6 <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
340044de:	6863      	ldr	r3, [r4, #4]
340044e0:	2b00      	cmp	r3, #0
340044e2:	d183      	bne.n	340043ec <HAL_RCC_OscConfig+0x58>
340044e4:	e75a      	b.n	3400439c <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340044e6:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
340044ea:	d0f8      	beq.n	340044de <HAL_RCC_OscConfig+0x14a>
340044ec:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
340044f0:	d101      	bne.n	340044f6 <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340044f2:	05fa      	lsls	r2, r7, #23
340044f4:	d4f3      	bmi.n	340044de <HAL_RCC_OscConfig+0x14a>
340044f6:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
340044fa:	d101      	bne.n	34004500 <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340044fc:	05bb      	lsls	r3, r7, #22
340044fe:	d4ee      	bmi.n	340044de <HAL_RCC_OscConfig+0x14a>
34004500:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
34004504:	d101      	bne.n	3400450a <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34004506:	0578      	lsls	r0, r7, #21
34004508:	d4e9      	bmi.n	340044de <HAL_RCC_OscConfig+0x14a>
3400450a:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
3400450e:	d101      	bne.n	34004514 <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34004510:	0539      	lsls	r1, r7, #20
34004512:	d4e4      	bmi.n	340044de <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34004514:	6862      	ldr	r2, [r4, #4]
34004516:	4b3b      	ldr	r3, [pc, #236]	@ (34004604 <HAL_RCC_OscConfig+0x270>)
34004518:	2a10      	cmp	r2, #16
3400451a:	d114      	bne.n	34004546 <HAL_RCC_OscConfig+0x1b2>
3400451c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004520:	f7fd ff6a 	bl	340023f8 <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34004524:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
34004526:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34004528:	b35b      	cbz	r3, 34004582 <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3400452a:	4b36      	ldr	r3, [pc, #216]	@ (34004604 <HAL_RCC_OscConfig+0x270>)
3400452c:	685a      	ldr	r2, [r3, #4]
3400452e:	06d2      	lsls	r2, r2, #27
34004530:	f53f af5c 	bmi.w	340043ec <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34004534:	f7fd ff60 	bl	340023f8 <HAL_GetTick>
34004538:	9b01      	ldr	r3, [sp, #4]
3400453a:	1ac0      	subs	r0, r0, r3
3400453c:	2864      	cmp	r0, #100	@ 0x64
3400453e:	4b31      	ldr	r3, [pc, #196]	@ (34004604 <HAL_RCC_OscConfig+0x270>)
34004540:	d9f4      	bls.n	3400452c <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
34004542:	2003      	movs	r0, #3
34004544:	e72b      	b.n	3400439e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34004546:	b93a      	cbnz	r2, 34004558 <HAL_RCC_OscConfig+0x1c4>
34004548:	2110      	movs	r1, #16
3400454a:	4a30      	ldr	r2, [pc, #192]	@ (3400460c <HAL_RCC_OscConfig+0x278>)
3400454c:	6011      	str	r1, [r2, #0]
3400454e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004550:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
34004554:	655a      	str	r2, [r3, #84]	@ 0x54
34004556:	e7e3      	b.n	34004520 <HAL_RCC_OscConfig+0x18c>
34004558:	f248 0110 	movw	r1, #32784	@ 0x8010
3400455c:	428a      	cmp	r2, r1
3400455e:	d109      	bne.n	34004574 <HAL_RCC_OscConfig+0x1e0>
34004560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004562:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34004566:	655a      	str	r2, [r3, #84]	@ 0x54
34004568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3400456a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
3400456e:	655a      	str	r2, [r3, #84]	@ 0x54
34004570:	2210      	movs	r2, #16
34004572:	e7d3      	b.n	3400451c <HAL_RCC_OscConfig+0x188>
34004574:	4924      	ldr	r1, [pc, #144]	@ (34004608 <HAL_RCC_OscConfig+0x274>)
34004576:	428a      	cmp	r2, r1
34004578:	d1e6      	bne.n	34004548 <HAL_RCC_OscConfig+0x1b4>
3400457a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3400457c:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
34004580:	e7f5      	b.n	3400456e <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34004582:	4b20      	ldr	r3, [pc, #128]	@ (34004604 <HAL_RCC_OscConfig+0x270>)
34004584:	685a      	ldr	r2, [r3, #4]
34004586:	06d3      	lsls	r3, r2, #27
34004588:	f57f af30 	bpl.w	340043ec <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3400458c:	f7fd ff34 	bl	340023f8 <HAL_GetTick>
34004590:	9b01      	ldr	r3, [sp, #4]
34004592:	1ac0      	subs	r0, r0, r3
34004594:	2864      	cmp	r0, #100	@ 0x64
34004596:	4b1b      	ldr	r3, [pc, #108]	@ (34004604 <HAL_RCC_OscConfig+0x270>)
34004598:	d9f4      	bls.n	34004584 <HAL_RCC_OscConfig+0x1f0>
3400459a:	e7d2      	b.n	34004542 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
3400459c:	68e3      	ldr	r3, [r4, #12]
3400459e:	2b00      	cmp	r3, #0
340045a0:	f000 8288 	beq.w	34004ab4 <HAL_RCC_OscConfig+0x720>
340045a4:	2b08      	cmp	r3, #8
340045a6:	f000 828c 	beq.w	34004ac2 <HAL_RCC_OscConfig+0x72e>
340045aa:	f240 11b5 	movw	r1, #437	@ 0x1b5
340045ae:	4814      	ldr	r0, [pc, #80]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
340045b0:	f7fc fefc 	bl	340013ac <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340045b4:	bb66      	cbnz	r6, 34004610 <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
340045b6:	68e3      	ldr	r3, [r4, #12]
340045b8:	2b00      	cmp	r3, #0
340045ba:	f43f aeef 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
340045be:	6923      	ldr	r3, [r4, #16]
340045c0:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
340045c4:	d004      	beq.n	340045d0 <HAL_RCC_OscConfig+0x23c>
340045c6:	f240 11c7 	movw	r1, #455	@ 0x1c7
340045ca:	480d      	ldr	r0, [pc, #52]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
340045cc:	f7fc feee 	bl	340013ac <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
340045d0:	6963      	ldr	r3, [r4, #20]
340045d2:	2b7f      	cmp	r3, #127	@ 0x7f
340045d4:	d904      	bls.n	340045e0 <HAL_RCC_OscConfig+0x24c>
340045d6:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
340045da:	4809      	ldr	r0, [pc, #36]	@ (34004600 <HAL_RCC_OscConfig+0x26c>)
340045dc:	f7fc fee6 	bl	340013ac <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
340045e0:	4a08      	ldr	r2, [pc, #32]	@ (34004604 <HAL_RCC_OscConfig+0x270>)
340045e2:	6921      	ldr	r1, [r4, #16]
340045e4:	6c93      	ldr	r3, [r2, #72]	@ 0x48
340045e6:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
340045ea:	430b      	orrs	r3, r1
340045ec:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
340045ee:	6c93      	ldr	r3, [r2, #72]	@ 0x48
340045f0:	6961      	ldr	r1, [r4, #20]
340045f2:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
340045f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340045fa:	6493      	str	r3, [r2, #72]	@ 0x48
}
340045fc:	e6fa      	b.n	340043f4 <HAL_RCC_OscConfig+0x60>
340045fe:	bf00      	nop
34004600:	340109b0 	.word	0x340109b0
34004604:	56028000 	.word	0x56028000
34004608:	00018010 	.word	0x00018010
3400460c:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004610:	2d00      	cmp	r5, #0
34004612:	d0d0      	beq.n	340045b6 <HAL_RCC_OscConfig+0x222>
34004614:	f1bb 0f00 	cmp.w	fp, #0
34004618:	d101      	bne.n	3400461e <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3400461a:	05f8      	lsls	r0, r7, #23
3400461c:	d4cb      	bmi.n	340045b6 <HAL_RCC_OscConfig+0x222>
3400461e:	f1ba 0f00 	cmp.w	sl, #0
34004622:	d101      	bne.n	34004628 <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004624:	05b9      	lsls	r1, r7, #22
34004626:	d4c6      	bmi.n	340045b6 <HAL_RCC_OscConfig+0x222>
34004628:	f1b9 0f00 	cmp.w	r9, #0
3400462c:	d101      	bne.n	34004632 <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3400462e:	057a      	lsls	r2, r7, #21
34004630:	d4c1      	bmi.n	340045b6 <HAL_RCC_OscConfig+0x222>
34004632:	f1b8 0f00 	cmp.w	r8, #0
34004636:	d101      	bne.n	3400463c <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34004638:	053b      	lsls	r3, r7, #20
3400463a:	d4bc      	bmi.n	340045b6 <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
3400463c:	68e3      	ldr	r3, [r4, #12]
3400463e:	b313      	cbz	r3, 34004686 <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34004640:	6923      	ldr	r3, [r4, #16]
34004642:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
34004646:	d004      	beq.n	34004652 <HAL_RCC_OscConfig+0x2be>
34004648:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
3400464c:	48ab      	ldr	r0, [pc, #684]	@ (340048fc <HAL_RCC_OscConfig+0x568>)
3400464e:	f7fc fead 	bl	340013ac <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34004652:	6963      	ldr	r3, [r4, #20]
34004654:	2b7f      	cmp	r3, #127	@ 0x7f
34004656:	d904      	bls.n	34004662 <HAL_RCC_OscConfig+0x2ce>
34004658:	f240 11d7 	movw	r1, #471	@ 0x1d7
3400465c:	48a7      	ldr	r0, [pc, #668]	@ (340048fc <HAL_RCC_OscConfig+0x568>)
3400465e:	f7fc fea5 	bl	340013ac <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34004662:	2208      	movs	r2, #8
34004664:	4ba6      	ldr	r3, [pc, #664]	@ (34004900 <HAL_RCC_OscConfig+0x56c>)
34004666:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
3400466a:	f7fd fec5 	bl	340023f8 <HAL_GetTick>
3400466e:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
34004670:	f7ff fcaa 	bl	34003fc8 <LL_RCC_HSI_IsReady>
34004674:	2800      	cmp	r0, #0
34004676:	d1b3      	bne.n	340045e0 <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34004678:	f7fd febe 	bl	340023f8 <HAL_GetTick>
3400467c:	9b01      	ldr	r3, [sp, #4]
3400467e:	1ac0      	subs	r0, r0, r3
34004680:	2801      	cmp	r0, #1
34004682:	d9f5      	bls.n	34004670 <HAL_RCC_OscConfig+0x2dc>
34004684:	e75d      	b.n	34004542 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34004686:	2208      	movs	r2, #8
34004688:	4b9e      	ldr	r3, [pc, #632]	@ (34004904 <HAL_RCC_OscConfig+0x570>)
3400468a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
3400468c:	f7fd feb4 	bl	340023f8 <HAL_GetTick>
34004690:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
34004692:	f7ff fc99 	bl	34003fc8 <LL_RCC_HSI_IsReady>
34004696:	2800      	cmp	r0, #0
34004698:	f43f aeac 	beq.w	340043f4 <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3400469c:	f7fd feac 	bl	340023f8 <HAL_GetTick>
340046a0:	9b01      	ldr	r3, [sp, #4]
340046a2:	1ac0      	subs	r0, r0, r3
340046a4:	2801      	cmp	r0, #1
340046a6:	d9f4      	bls.n	34004692 <HAL_RCC_OscConfig+0x2fe>
340046a8:	e74b      	b.n	34004542 <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340046aa:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340046ae:	f43f aeb4 	beq.w	3400441a <HAL_RCC_OscConfig+0x86>
340046b2:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
340046b6:	d102      	bne.n	340046be <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340046b8:	05f9      	lsls	r1, r7, #23
340046ba:	f53f aeae 	bmi.w	3400441a <HAL_RCC_OscConfig+0x86>
340046be:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
340046c2:	d102      	bne.n	340046ca <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340046c4:	05ba      	lsls	r2, r7, #22
340046c6:	f53f aea8 	bmi.w	3400441a <HAL_RCC_OscConfig+0x86>
340046ca:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
340046ce:	d102      	bne.n	340046d6 <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340046d0:	057b      	lsls	r3, r7, #21
340046d2:	f53f aea2 	bmi.w	3400441a <HAL_RCC_OscConfig+0x86>
340046d6:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
340046da:	d102      	bne.n	340046e2 <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340046dc:	053f      	lsls	r7, r7, #20
340046de:	f53f ae9c 	bmi.w	3400441a <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
340046e2:	69e3      	ldr	r3, [r4, #28]
340046e4:	b343      	cbz	r3, 34004738 <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
340046e6:	6a23      	ldr	r3, [r4, #32]
340046e8:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
340046ec:	d004      	beq.n	340046f8 <HAL_RCC_OscConfig+0x364>
340046ee:	f44f 7109 	mov.w	r1, #548	@ 0x224
340046f2:	4882      	ldr	r0, [pc, #520]	@ (340048fc <HAL_RCC_OscConfig+0x568>)
340046f4:	f7fc fe5a 	bl	340013ac <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
340046f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340046fa:	2b1f      	cmp	r3, #31
340046fc:	d904      	bls.n	34004708 <HAL_RCC_OscConfig+0x374>
340046fe:	f240 2125 	movw	r1, #549	@ 0x225
34004702:	487e      	ldr	r0, [pc, #504]	@ (340048fc <HAL_RCC_OscConfig+0x568>)
34004704:	f7fc fe52 	bl	340013ac <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34004708:	4a7d      	ldr	r2, [pc, #500]	@ (34004900 <HAL_RCC_OscConfig+0x56c>)
3400470a:	6a21      	ldr	r1, [r4, #32]
3400470c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
3400470e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
34004712:	430b      	orrs	r3, r1
34004714:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34004716:	2304      	movs	r3, #4
34004718:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
3400471c:	f7fd fe6c 	bl	340023f8 <HAL_GetTick>
34004720:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
34004722:	f7ff fc59 	bl	34003fd8 <LL_RCC_MSI_IsReady>
34004726:	2800      	cmp	r0, #0
34004728:	f47f ae82 	bne.w	34004430 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3400472c:	f7fd fe64 	bl	340023f8 <HAL_GetTick>
34004730:	1bc0      	subs	r0, r0, r7
34004732:	2801      	cmp	r0, #1
34004734:	d9f5      	bls.n	34004722 <HAL_RCC_OscConfig+0x38e>
34004736:	e704      	b.n	34004542 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34004738:	2204      	movs	r2, #4
3400473a:	4b72      	ldr	r3, [pc, #456]	@ (34004904 <HAL_RCC_OscConfig+0x570>)
3400473c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
3400473e:	f7fd fe5b 	bl	340023f8 <HAL_GetTick>
34004742:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
34004744:	f7ff fc48 	bl	34003fd8 <LL_RCC_MSI_IsReady>
34004748:	2800      	cmp	r0, #0
3400474a:	f43f ae79 	beq.w	34004440 <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3400474e:	f7fd fe53 	bl	340023f8 <HAL_GetTick>
34004752:	1bc0      	subs	r0, r0, r7
34004754:	2801      	cmp	r0, #1
34004756:	d9f5      	bls.n	34004744 <HAL_RCC_OscConfig+0x3b0>
34004758:	e6f3      	b.n	34004542 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
3400475a:	69a3      	ldr	r3, [r4, #24]
3400475c:	2b01      	cmp	r3, #1
3400475e:	d904      	bls.n	3400476a <HAL_RCC_OscConfig+0x3d6>
34004760:	f240 2155 	movw	r1, #597	@ 0x255
34004764:	4865      	ldr	r0, [pc, #404]	@ (340048fc <HAL_RCC_OscConfig+0x568>)
34004766:	f7fc fe21 	bl	340013ac <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
3400476a:	69a2      	ldr	r2, [r4, #24]
3400476c:	2301      	movs	r3, #1
3400476e:	b18a      	cbz	r2, 34004794 <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34004770:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 34004900 <HAL_RCC_OscConfig+0x56c>
34004774:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004778:	f7fd fe3e 	bl	340023f8 <HAL_GetTick>
3400477c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3400477e:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
34004782:	07da      	lsls	r2, r3, #31
34004784:	f53f ae60 	bmi.w	34004448 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34004788:	f7fd fe36 	bl	340023f8 <HAL_GetTick>
3400478c:	1bc0      	subs	r0, r0, r7
3400478e:	2801      	cmp	r0, #1
34004790:	d9f5      	bls.n	3400477e <HAL_RCC_OscConfig+0x3ea>
34004792:	e6d6      	b.n	34004542 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34004794:	4a5b      	ldr	r2, [pc, #364]	@ (34004904 <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34004796:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 34004900 <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
3400479a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
3400479c:	f7fd fe2c 	bl	340023f8 <HAL_GetTick>
340047a0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340047a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
340047a6:	07db      	lsls	r3, r3, #31
340047a8:	f57f ae4e 	bpl.w	34004448 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
340047ac:	f7fd fe24 	bl	340023f8 <HAL_GetTick>
340047b0:	1bc0      	subs	r0, r0, r7
340047b2:	2801      	cmp	r0, #1
340047b4:	d9f5      	bls.n	340047a2 <HAL_RCC_OscConfig+0x40e>
340047b6:	e6c4      	b.n	34004542 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
340047b8:	68a3      	ldr	r3, [r4, #8]
340047ba:	f033 0202 	bics.w	r2, r3, #2
340047be:	d00a      	beq.n	340047d6 <HAL_RCC_OscConfig+0x442>
340047c0:	f248 0202 	movw	r2, #32770	@ 0x8002
340047c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340047c8:	4293      	cmp	r3, r2
340047ca:	d004      	beq.n	340047d6 <HAL_RCC_OscConfig+0x442>
340047cc:	f44f 7120 	mov.w	r1, #640	@ 0x280
340047d0:	484a      	ldr	r0, [pc, #296]	@ (340048fc <HAL_RCC_OscConfig+0x568>)
340047d2:	f7fc fdeb 	bl	340013ac <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
340047d6:	68a3      	ldr	r3, [r4, #8]
340047d8:	4f49      	ldr	r7, [pc, #292]	@ (34004900 <HAL_RCC_OscConfig+0x56c>)
340047da:	2b02      	cmp	r3, #2
340047dc:	d113      	bne.n	34004806 <HAL_RCC_OscConfig+0x472>
340047de:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
340047e2:	f7fd fe09 	bl	340023f8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340047e6:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
340047ea:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
340047ec:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 34004900 <HAL_RCC_OscConfig+0x56c>
340047f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
340047f4:	0798      	lsls	r0, r3, #30
340047f6:	f53f ae2b 	bmi.w	34004450 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340047fa:	f7fd fdfd 	bl	340023f8 <HAL_GetTick>
340047fe:	1bc3      	subs	r3, r0, r7
34004800:	4543      	cmp	r3, r8
34004802:	d9f5      	bls.n	340047f0 <HAL_RCC_OscConfig+0x45c>
34004804:	e69d      	b.n	34004542 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004806:	b9d3      	cbnz	r3, 3400483e <HAL_RCC_OscConfig+0x4aa>
34004808:	2202      	movs	r2, #2
3400480a:	4b3e      	ldr	r3, [pc, #248]	@ (34004904 <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400480c:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004810:	601a      	str	r2, [r3, #0]
34004812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004818:	643b      	str	r3, [r7, #64]	@ 0x40
3400481a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400481c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34004820:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
34004822:	f7fd fde9 	bl	340023f8 <HAL_GetTick>
34004826:	4680      	mov	r8, r0
34004828:	687b      	ldr	r3, [r7, #4]
3400482a:	0799      	lsls	r1, r3, #30
3400482c:	f57f ae10 	bpl.w	34004450 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004830:	f7fd fde2 	bl	340023f8 <HAL_GetTick>
34004834:	eba0 0308 	sub.w	r3, r0, r8
34004838:	454b      	cmp	r3, r9
3400483a:	d9f5      	bls.n	34004828 <HAL_RCC_OscConfig+0x494>
3400483c:	e681      	b.n	34004542 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3400483e:	f248 0202 	movw	r2, #32770	@ 0x8002
34004842:	4293      	cmp	r3, r2
34004844:	d109      	bne.n	3400485a <HAL_RCC_OscConfig+0x4c6>
34004846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400484c:	643b      	str	r3, [r7, #64]	@ 0x40
3400484e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004854:	643b      	str	r3, [r7, #64]	@ 0x40
34004856:	2302      	movs	r3, #2
34004858:	e7c1      	b.n	340047de <HAL_RCC_OscConfig+0x44a>
3400485a:	4a2b      	ldr	r2, [pc, #172]	@ (34004908 <HAL_RCC_OscConfig+0x574>)
3400485c:	4293      	cmp	r3, r2
3400485e:	d107      	bne.n	34004870 <HAL_RCC_OscConfig+0x4dc>
34004860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34004866:	643b      	str	r3, [r7, #64]	@ 0x40
34004868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400486a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3400486e:	e7f1      	b.n	34004854 <HAL_RCC_OscConfig+0x4c0>
34004870:	2202      	movs	r2, #2
34004872:	4b24      	ldr	r3, [pc, #144]	@ (34004904 <HAL_RCC_OscConfig+0x570>)
34004874:	601a      	str	r2, [r3, #0]
34004876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004878:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3400487c:	643b      	str	r3, [r7, #64]	@ 0x40
3400487e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004884:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34004886:	e7ac      	b.n	340047e2 <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34004888:	2000      	movs	r0, #0
3400488a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
3400488e:	f7ff fbb3 	bl	34003ff8 <RCC_PLL_IsNewConfig>
34004892:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34004894:	f7ff fba8 	bl	34003fe8 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34004898:	2a01      	cmp	r2, #1
3400489a:	d125      	bne.n	340048e8 <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400489c:	4b18      	ldr	r3, [pc, #96]	@ (34004900 <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
3400489e:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
340048a2:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340048a6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340048aa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340048ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340048b2:	d103      	bne.n	340048bc <HAL_RCC_OscConfig+0x528>
340048b4:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
340048b8:	f43f ad70 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
340048bc:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
340048c0:	d10b      	bne.n	340048da <HAL_RCC_OscConfig+0x546>
340048c2:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
340048c6:	f43f ad69 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
340048ca:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
340048ce:	f43f ad65 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
340048d2:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
340048d6:	f43f ad61 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
340048da:	2000      	movs	r0, #0
340048dc:	f7ff fbe6 	bl	340040ac <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
340048e0:	2800      	cmp	r0, #0
340048e2:	f43f adc1 	beq.w	34004468 <HAL_RCC_OscConfig+0xd4>
340048e6:	e559      	b.n	3400439c <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
340048e8:	2f02      	cmp	r7, #2
340048ea:	f47f adbd 	bne.w	34004468 <HAL_RCC_OscConfig+0xd4>
340048ee:	2800      	cmp	r0, #0
340048f0:	f47f adba 	bne.w	34004468 <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
340048f4:	f7ff fbc2 	bl	3400407c <RCC_PLL_Enable>
340048f8:	e7f2      	b.n	340048e0 <HAL_RCC_OscConfig+0x54c>
340048fa:	bf00      	nop
340048fc:	340109b0 	.word	0x340109b0
34004900:	56028000 	.word	0x56028000
34004904:	56029000 	.word	0x56029000
34004908:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
3400490c:	2001      	movs	r0, #1
3400490e:	f104 0144 	add.w	r1, r4, #68	@ 0x44
34004912:	f7ff fb71 	bl	34003ff8 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004916:	4b77      	ldr	r3, [pc, #476]	@ (34004af4 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004918:	2801      	cmp	r0, #1
3400491a:	685a      	ldr	r2, [r3, #4]
3400491c:	d12c      	bne.n	34004978 <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
3400491e:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004922:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004926:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400492a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400492e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004932:	d105      	bne.n	34004940 <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004934:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34004938:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
3400493c:	f43f ad2e 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34004940:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004944:	d111      	bne.n	3400496a <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004946:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
3400494a:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
3400494e:	f43f ad25 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004952:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004956:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
3400495a:	f43f ad1f 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400495e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34004962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004966:	f43f ad19 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
3400496a:	2001      	movs	r0, #1
3400496c:	f7ff fb9e 	bl	340040ac <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004970:	2800      	cmp	r0, #0
34004972:	f43f ad85 	beq.w	34004480 <HAL_RCC_OscConfig+0xec>
34004976:	e511      	b.n	3400439c <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34004978:	2f02      	cmp	r7, #2
3400497a:	f47f ad81 	bne.w	34004480 <HAL_RCC_OscConfig+0xec>
3400497e:	0592      	lsls	r2, r2, #22
34004980:	f53f ad7e 	bmi.w	34004480 <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004984:	2001      	movs	r0, #1
34004986:	f7ff fb79 	bl	3400407c <RCC_PLL_Enable>
3400498a:	e7f1      	b.n	34004970 <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
3400498c:	2002      	movs	r0, #2
3400498e:	f104 0160 	add.w	r1, r4, #96	@ 0x60
34004992:	f7ff fb31 	bl	34003ff8 <RCC_PLL_IsNewConfig>
34004996:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34004998:	f7ff fb26 	bl	34003fe8 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
3400499c:	2a01      	cmp	r2, #1
3400499e:	d12d      	bne.n	340049fc <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340049a0:	4b54      	ldr	r3, [pc, #336]	@ (34004af4 <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
340049a2:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
340049a6:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340049aa:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340049ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340049b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340049b6:	d105      	bne.n	340049c4 <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340049b8:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
340049bc:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
340049c0:	f43f acec 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
340049c4:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
340049c8:	d111      	bne.n	340049ee <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340049ca:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340049ce:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
340049d2:	f43f ace3 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340049d6:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
340049da:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
340049de:	f43f acdd 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340049e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
340049e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340049ea:	f43f acd7 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
340049ee:	2002      	movs	r0, #2
340049f0:	f7ff fb5c 	bl	340040ac <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
340049f4:	2800      	cmp	r0, #0
340049f6:	f43f ad4f 	beq.w	34004498 <HAL_RCC_OscConfig+0x104>
340049fa:	e4cf      	b.n	3400439c <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
340049fc:	2f02      	cmp	r7, #2
340049fe:	f47f ad4b 	bne.w	34004498 <HAL_RCC_OscConfig+0x104>
34004a02:	2800      	cmp	r0, #0
34004a04:	f47f ad48 	bne.w	34004498 <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34004a08:	4638      	mov	r0, r7
34004a0a:	f7ff fb37 	bl	3400407c <RCC_PLL_Enable>
34004a0e:	e7f1      	b.n	340049f4 <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34004a10:	2003      	movs	r0, #3
34004a12:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
34004a16:	f7ff faef 	bl	34003ff8 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004a1a:	4b36      	ldr	r3, [pc, #216]	@ (34004af4 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004a1c:	2801      	cmp	r0, #1
34004a1e:	685a      	ldr	r2, [r3, #4]
34004a20:	d12c      	bne.n	34004a7c <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34004a22:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004a26:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004a2a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004a2e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004a32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004a36:	d105      	bne.n	34004a44 <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004a38:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34004a3c:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34004a40:	f43f acac 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004a44:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004a48:	d111      	bne.n	34004a6e <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004a4a:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004a4e:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34004a52:	f43f aca3 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004a56:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004a5a:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34004a5e:	f43f ac9d 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004a62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004a66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004a6a:	f43f ac97 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34004a6e:	2003      	movs	r0, #3
34004a70:	f7ff fb1c 	bl	340040ac <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004a74:	3800      	subs	r0, #0
34004a76:	bf18      	it	ne
34004a78:	2001      	movne	r0, #1
34004a7a:	e490      	b.n	3400439e <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34004a7c:	2f02      	cmp	r7, #2
34004a7e:	f47f ad17 	bne.w	340044b0 <HAL_RCC_OscConfig+0x11c>
34004a82:	0513      	lsls	r3, r2, #20
34004a84:	f53f ad14 	bmi.w	340044b0 <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004a88:	2003      	movs	r0, #3
34004a8a:	f7ff faf7 	bl	3400407c <RCC_PLL_Enable>
34004a8e:	e7f1      	b.n	34004a74 <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34004a90:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004a94:	f43f ac82 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
34004a98:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004a9c:	f47f ae09 	bne.w	340046b2 <HAL_RCC_OscConfig+0x31e>
34004aa0:	e47c      	b.n	3400439c <HAL_RCC_OscConfig+0x8>
34004aa2:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004aa6:	f43f acbb 	beq.w	34004420 <HAL_RCC_OscConfig+0x8c>
34004aaa:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004aae:	f47f ae00 	bne.w	340046b2 <HAL_RCC_OscConfig+0x31e>
34004ab2:	e4b5      	b.n	34004420 <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004ab4:	2e00      	cmp	r6, #0
34004ab6:	f43f ac71 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
34004aba:	2d00      	cmp	r5, #0
34004abc:	f47f adaa 	bne.w	34004614 <HAL_RCC_OscConfig+0x280>
34004ac0:	e46c      	b.n	3400439c <HAL_RCC_OscConfig+0x8>
34004ac2:	2e00      	cmp	r6, #0
34004ac4:	f43f ad7b 	beq.w	340045be <HAL_RCC_OscConfig+0x22a>
34004ac8:	2d00      	cmp	r5, #0
34004aca:	f43f ad78 	beq.w	340045be <HAL_RCC_OscConfig+0x22a>
34004ace:	e5a1      	b.n	34004614 <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34004ad0:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004ad4:	f43f ac8a 	beq.w	340043ec <HAL_RCC_OscConfig+0x58>
34004ad8:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004adc:	f47f ad06 	bne.w	340044ec <HAL_RCC_OscConfig+0x158>
34004ae0:	e484      	b.n	340043ec <HAL_RCC_OscConfig+0x58>
34004ae2:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004ae6:	f43f ac59 	beq.w	3400439c <HAL_RCC_OscConfig+0x8>
34004aea:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004aee:	f47f acfd 	bne.w	340044ec <HAL_RCC_OscConfig+0x158>
34004af2:	e453      	b.n	3400439c <HAL_RCC_OscConfig+0x8>
34004af4:	56028000 	.word	0x56028000

34004af8 <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004af8:	4b1f      	ldr	r3, [pc, #124]	@ (34004b78 <HAL_RCC_GetCpuClockFreq+0x80>)
{
34004afa:	b510      	push	{r4, lr}
34004afc:	6a1a      	ldr	r2, [r3, #32]
34004afe:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
34004b02:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34004b06:	d034      	beq.n	34004b72 <HAL_RCC_GetCpuClockFreq+0x7a>
34004b08:	d806      	bhi.n	34004b18 <HAL_RCC_GetCpuClockFreq+0x20>
34004b0a:	b952      	cbnz	r2, 34004b22 <HAL_RCC_GetCpuClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34004b0e:	481b      	ldr	r0, [pc, #108]	@ (34004b7c <HAL_RCC_GetCpuClockFreq+0x84>)
34004b10:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004b14:	40d8      	lsrs	r0, r3
}
34004b16:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetCpuClkSource())
34004b18:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34004b1c:	d009      	beq.n	34004b32 <HAL_RCC_GetCpuClockFreq+0x3a>
      switch (LL_RCC_IC1_GetSource())
34004b1e:	2000      	movs	r0, #0
34004b20:	e7f9      	b.n	34004b16 <HAL_RCC_GetCpuClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34004b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34004b24:	4816      	ldr	r0, [pc, #88]	@ (34004b80 <HAL_RCC_GetCpuClockFreq+0x88>)
34004b26:	f413 7f00 	tst.w	r3, #512	@ 0x200
34004b2a:	4b16      	ldr	r3, [pc, #88]	@ (34004b84 <HAL_RCC_GetCpuClockFreq+0x8c>)
34004b2c:	bf08      	it	eq
34004b2e:	4618      	moveq	r0, r3
34004b30:	e7f1      	b.n	34004b16 <HAL_RCC_GetCpuClockFreq+0x1e>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004b32:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004b36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004b3a:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004b3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC1_GetSource())
34004b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004b46:	f100 0401 	add.w	r4, r0, #1
34004b4a:	d00f      	beq.n	34004b6c <HAL_RCC_GetCpuClockFreq+0x74>
34004b4c:	d805      	bhi.n	34004b5a <HAL_RCC_GetCpuClockFreq+0x62>
34004b4e:	b953      	cbnz	r3, 34004b66 <HAL_RCC_GetCpuClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34004b50:	f003 fbb6 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34004b54:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34004b58:	e7dd      	b.n	34004b16 <HAL_RCC_GetCpuClockFreq+0x1e>
      switch (LL_RCC_IC1_GetSource())
34004b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004b5e:	d1de      	bne.n	34004b1e <HAL_RCC_GetCpuClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34004b60:	f003 fc6e 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34004b64:	e7f6      	b.n	34004b54 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34004b66:	f003 fbeb 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
34004b6a:	e7f3      	b.n	34004b54 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34004b6c:	f003 fc28 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34004b70:	e7f0      	b.n	34004b54 <HAL_RCC_GetCpuClockFreq+0x5c>
  switch (LL_RCC_GetCpuClkSource())
34004b72:	4805      	ldr	r0, [pc, #20]	@ (34004b88 <HAL_RCC_GetCpuClockFreq+0x90>)
34004b74:	e7cf      	b.n	34004b16 <HAL_RCC_GetCpuClockFreq+0x1e>
34004b76:	bf00      	nop
34004b78:	56028000 	.word	0x56028000
34004b7c:	03d09000 	.word	0x03d09000
34004b80:	00f42400 	.word	0x00f42400
34004b84:	003d0900 	.word	0x003d0900
34004b88:	02dc6c00 	.word	0x02dc6c00

34004b8c <HAL_RCC_ClockConfig>:
{
34004b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
34004b90:	4604      	mov	r4, r0
34004b92:	b910      	cbnz	r0, 34004b9a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
34004b94:	2001      	movs	r0, #1
}
34004b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34004b9a:	6803      	ldr	r3, [r0, #0]
34004b9c:	2b7f      	cmp	r3, #127	@ 0x7f
34004b9e:	d904      	bls.n	34004baa <HAL_RCC_ClockConfig+0x1e>
34004ba0:	f240 317e 	movw	r1, #894	@ 0x37e
34004ba4:	4893      	ldr	r0, [pc, #588]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004ba6:	f7fc fc01 	bl	340013ac <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004baa:	6823      	ldr	r3, [r4, #0]
34004bac:	071f      	lsls	r7, r3, #28
34004bae:	d513      	bpl.n	34004bd8 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004bb0:	6923      	ldr	r3, [r4, #16]
34004bb2:	2b07      	cmp	r3, #7
34004bb4:	d904      	bls.n	34004bc0 <HAL_RCC_ClockConfig+0x34>
34004bb6:	f240 3185 	movw	r1, #901	@ 0x385
34004bba:	488e      	ldr	r0, [pc, #568]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004bbc:	f7fc fbf6 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004bc0:	4a8d      	ldr	r2, [pc, #564]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004bc2:	6921      	ldr	r1, [r4, #16]
34004bc4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004bc6:	f003 0307 	and.w	r3, r3, #7
34004bca:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004bcc:	bf81      	itttt	hi
34004bce:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004bd0:	f023 0307 	bichi.w	r3, r3, #7
34004bd4:	430b      	orrhi	r3, r1
34004bd6:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004bd8:	6823      	ldr	r3, [r4, #0]
34004bda:	06de      	lsls	r6, r3, #27
34004bdc:	d516      	bpl.n	34004c0c <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004bde:	6963      	ldr	r3, [r4, #20]
34004be0:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004be4:	d006      	beq.n	34004bf4 <HAL_RCC_ClockConfig+0x68>
34004be6:	2b40      	cmp	r3, #64	@ 0x40
34004be8:	d004      	beq.n	34004bf4 <HAL_RCC_ClockConfig+0x68>
34004bea:	f240 318f 	movw	r1, #911	@ 0x38f
34004bee:	4881      	ldr	r0, [pc, #516]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004bf0:	f7fc fbdc 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004bf4:	4a80      	ldr	r2, [pc, #512]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004bf6:	6961      	ldr	r1, [r4, #20]
34004bf8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004bfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004bfe:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004c00:	bf81      	itttt	hi
34004c02:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004c04:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
34004c08:	430b      	orrhi	r3, r1
34004c0a:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004c0c:	6823      	ldr	r3, [r4, #0]
34004c0e:	069d      	lsls	r5, r3, #26
34004c10:	d517      	bpl.n	34004c42 <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004c12:	69a3      	ldr	r3, [r4, #24]
34004c14:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004c18:	d007      	beq.n	34004c2a <HAL_RCC_ClockConfig+0x9e>
34004c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004c1e:	d004      	beq.n	34004c2a <HAL_RCC_ClockConfig+0x9e>
34004c20:	f240 3199 	movw	r1, #921	@ 0x399
34004c24:	4873      	ldr	r0, [pc, #460]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004c26:	f7fc fbc1 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004c2a:	4a73      	ldr	r2, [pc, #460]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004c2c:	69a1      	ldr	r1, [r4, #24]
34004c2e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004c30:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004c34:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004c36:	bf81      	itttt	hi
34004c38:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004c3a:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
34004c3e:	430b      	orrhi	r3, r1
34004c40:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004c42:	6823      	ldr	r3, [r4, #0]
34004c44:	0658      	lsls	r0, r3, #25
34004c46:	d517      	bpl.n	34004c78 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004c48:	69e3      	ldr	r3, [r4, #28]
34004c4a:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004c4e:	d007      	beq.n	34004c60 <HAL_RCC_ClockConfig+0xd4>
34004c50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004c54:	d004      	beq.n	34004c60 <HAL_RCC_ClockConfig+0xd4>
34004c56:	f240 31a3 	movw	r1, #931	@ 0x3a3
34004c5a:	4866      	ldr	r0, [pc, #408]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004c5c:	f7fc fba6 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004c60:	4a65      	ldr	r2, [pc, #404]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004c62:	69e1      	ldr	r1, [r4, #28]
34004c64:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004c66:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004c6a:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004c6c:	bf81      	itttt	hi
34004c6e:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004c70:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
34004c74:	430b      	orrhi	r3, r1
34004c76:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004c78:	6823      	ldr	r3, [r4, #0]
34004c7a:	0759      	lsls	r1, r3, #29
34004c7c:	d517      	bpl.n	34004cae <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34004c7e:	68e3      	ldr	r3, [r4, #12]
34004c80:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004c84:	d007      	beq.n	34004c96 <HAL_RCC_ClockConfig+0x10a>
34004c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004c8a:	d004      	beq.n	34004c96 <HAL_RCC_ClockConfig+0x10a>
34004c8c:	f240 31ad 	movw	r1, #941	@ 0x3ad
34004c90:	4858      	ldr	r0, [pc, #352]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004c92:	f7fc fb8b 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34004c96:	4a58      	ldr	r2, [pc, #352]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004c98:	68e1      	ldr	r1, [r4, #12]
34004c9a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004c9c:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34004ca0:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34004ca2:	bf81      	itttt	hi
34004ca4:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004ca6:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
34004caa:	430b      	orrhi	r3, r1
34004cac:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34004cae:	6823      	ldr	r3, [r4, #0]
34004cb0:	07da      	lsls	r2, r3, #31
34004cb2:	d52a      	bpl.n	34004d0a <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
34004cb4:	6863      	ldr	r3, [r4, #4]
34004cb6:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004cba:	d004      	beq.n	34004cc6 <HAL_RCC_ClockConfig+0x13a>
34004cbc:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
34004cc0:	484c      	ldr	r0, [pc, #304]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004cc2:	f7fc fb73 	bl	340013ac <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34004cc6:	6863      	ldr	r3, [r4, #4]
34004cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34004ccc:	f040 809a 	bne.w	34004e04 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004cd0:	4b49      	ldr	r3, [pc, #292]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004cd2:	685b      	ldr	r3, [r3, #4]
34004cd4:	06db      	lsls	r3, r3, #27
34004cd6:	f57f af5d 	bpl.w	34004b94 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34004cda:	4d47      	ldr	r5, [pc, #284]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004cdc:	6862      	ldr	r2, [r4, #4]
34004cde:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004ce0:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34004ce4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34004ce8:	4313      	orrs	r3, r2
34004cea:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34004cec:	f7fd fb84 	bl	340023f8 <HAL_GetTick>
34004cf0:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004cf2:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34004cf4:	6862      	ldr	r2, [r4, #4]
34004cf6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34004cfa:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34004cfe:	f040 80b7 	bne.w	34004e70 <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34004d02:	f7ff fef9 	bl	34004af8 <HAL_RCC_GetCpuClockFreq>
34004d06:	4b3d      	ldr	r3, [pc, #244]	@ (34004dfc <HAL_RCC_ClockConfig+0x270>)
34004d08:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34004d0a:	6823      	ldr	r3, [r4, #0]
34004d0c:	079f      	lsls	r7, r3, #30
34004d0e:	f100 80b7 	bmi.w	34004e80 <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004d12:	6823      	ldr	r3, [r4, #0]
34004d14:	075e      	lsls	r6, r3, #29
34004d16:	f100 815c 	bmi.w	34004fd2 <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004d1a:	6823      	ldr	r3, [r4, #0]
34004d1c:	0718      	lsls	r0, r3, #28
34004d1e:	d513      	bpl.n	34004d48 <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004d20:	6923      	ldr	r3, [r4, #16]
34004d22:	2b07      	cmp	r3, #7
34004d24:	d904      	bls.n	34004d30 <HAL_RCC_ClockConfig+0x1a4>
34004d26:	f240 4163 	movw	r1, #1123	@ 0x463
34004d2a:	4832      	ldr	r0, [pc, #200]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004d2c:	f7fc fb3e 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004d30:	4a31      	ldr	r2, [pc, #196]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004d32:	6921      	ldr	r1, [r4, #16]
34004d34:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004d36:	f003 0307 	and.w	r3, r3, #7
34004d3a:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004d3c:	bf3f      	itttt	cc
34004d3e:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004d40:	f023 0307 	biccc.w	r3, r3, #7
34004d44:	430b      	orrcc	r3, r1
34004d46:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004d48:	6823      	ldr	r3, [r4, #0]
34004d4a:	06d9      	lsls	r1, r3, #27
34004d4c:	d516      	bpl.n	34004d7c <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004d4e:	6963      	ldr	r3, [r4, #20]
34004d50:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004d54:	d006      	beq.n	34004d64 <HAL_RCC_ClockConfig+0x1d8>
34004d56:	2b40      	cmp	r3, #64	@ 0x40
34004d58:	d004      	beq.n	34004d64 <HAL_RCC_ClockConfig+0x1d8>
34004d5a:	f240 416d 	movw	r1, #1133	@ 0x46d
34004d5e:	4825      	ldr	r0, [pc, #148]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004d60:	f7fc fb24 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004d64:	4a24      	ldr	r2, [pc, #144]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004d66:	6961      	ldr	r1, [r4, #20]
34004d68:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004d6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004d6e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004d70:	bf3f      	itttt	cc
34004d72:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004d74:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
34004d78:	430b      	orrcc	r3, r1
34004d7a:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004d7c:	6823      	ldr	r3, [r4, #0]
34004d7e:	069a      	lsls	r2, r3, #26
34004d80:	d517      	bpl.n	34004db2 <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004d82:	69a3      	ldr	r3, [r4, #24]
34004d84:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004d88:	d007      	beq.n	34004d9a <HAL_RCC_ClockConfig+0x20e>
34004d8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004d8e:	d004      	beq.n	34004d9a <HAL_RCC_ClockConfig+0x20e>
34004d90:	f240 4177 	movw	r1, #1143	@ 0x477
34004d94:	4817      	ldr	r0, [pc, #92]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004d96:	f7fc fb09 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004d9a:	4a17      	ldr	r2, [pc, #92]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004d9c:	69a1      	ldr	r1, [r4, #24]
34004d9e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004da0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004da4:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004da6:	bf3f      	itttt	cc
34004da8:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004daa:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
34004dae:	430b      	orrcc	r3, r1
34004db0:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004db2:	6823      	ldr	r3, [r4, #0]
34004db4:	065b      	lsls	r3, r3, #25
34004db6:	d517      	bpl.n	34004de8 <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004db8:	69e3      	ldr	r3, [r4, #28]
34004dba:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004dbe:	d007      	beq.n	34004dd0 <HAL_RCC_ClockConfig+0x244>
34004dc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004dc4:	d004      	beq.n	34004dd0 <HAL_RCC_ClockConfig+0x244>
34004dc6:	f240 4181 	movw	r1, #1153	@ 0x481
34004dca:	480a      	ldr	r0, [pc, #40]	@ (34004df4 <HAL_RCC_ClockConfig+0x268>)
34004dcc:	f7fc faee 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004dd0:	4a09      	ldr	r2, [pc, #36]	@ (34004df8 <HAL_RCC_ClockConfig+0x26c>)
34004dd2:	69e1      	ldr	r1, [r4, #28]
34004dd4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004dd6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004dda:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004ddc:	bf3f      	itttt	cc
34004dde:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004de0:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34004de4:	430b      	orrcc	r3, r1
34004de6:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34004de8:	4b05      	ldr	r3, [pc, #20]	@ (34004e00 <HAL_RCC_ClockConfig+0x274>)
}
34004dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
34004dee:	6818      	ldr	r0, [r3, #0]
34004df0:	f7fd babe 	b.w	34002370 <HAL_InitTick>
34004df4:	340109b0 	.word	0x340109b0
34004df8:	56028000 	.word	0x56028000
34004dfc:	34012394 	.word	0x34012394
34004e00:	3401239c 	.word	0x3401239c
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34004e04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34004e08:	d126      	bne.n	34004e58 <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34004e0a:	6a23      	ldr	r3, [r4, #32]
34004e0c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004e10:	d004      	beq.n	34004e1c <HAL_RCC_ClockConfig+0x290>
34004e12:	f240 31c7 	movw	r1, #967	@ 0x3c7
34004e16:	487b      	ldr	r0, [pc, #492]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004e18:	f7fc fac8 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34004e1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004e1e:	3b01      	subs	r3, #1
34004e20:	2bff      	cmp	r3, #255	@ 0xff
34004e22:	d904      	bls.n	34004e2e <HAL_RCC_ClockConfig+0x2a2>
34004e24:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34004e28:	4876      	ldr	r0, [pc, #472]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004e2a:	f7fc fabf 	bl	340013ac <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004e2e:	4e76      	ldr	r6, [pc, #472]	@ (34005008 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34004e30:	6a25      	ldr	r5, [r4, #32]
34004e32:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
34004e36:	4629      	mov	r1, r5
34004e38:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004e3c:	f7ff fa52 	bl	340042e4 <RCC_IC_CheckPLLSources>
34004e40:	2801      	cmp	r0, #1
34004e42:	f47f aea7 	bne.w	34004b94 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34004e46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004e48:	3b01      	subs	r3, #1
34004e4a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
34004e4e:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34004e52:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
34004e56:	e740      	b.n	34004cda <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34004e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34004e5c:	d105      	bne.n	34004e6a <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
34004e5e:	f7ff f8bb 	bl	34003fd8 <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
34004e62:	2800      	cmp	r0, #0
34004e64:	f47f af39 	bne.w	34004cda <HAL_RCC_ClockConfig+0x14e>
34004e68:	e694      	b.n	34004b94 <HAL_RCC_ClockConfig+0x8>
34004e6a:	f7ff f8ad 	bl	34003fc8 <LL_RCC_HSI_IsReady>
34004e6e:	e7f8      	b.n	34004e62 <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004e70:	f7fd fac2 	bl	340023f8 <HAL_GetTick>
34004e74:	1b80      	subs	r0, r0, r6
34004e76:	42b8      	cmp	r0, r7
34004e78:	f67f af3b 	bls.w	34004cf2 <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
34004e7c:	2003      	movs	r0, #3
34004e7e:	e68a      	b.n	34004b96 <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34004e80:	68a3      	ldr	r3, [r4, #8]
34004e82:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34004e86:	d004      	beq.n	34004e92 <HAL_RCC_ClockConfig+0x306>
34004e88:	f240 4101 	movw	r1, #1025	@ 0x401
34004e8c:	485d      	ldr	r0, [pc, #372]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004e8e:	f7fc fa8d 	bl	340013ac <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34004e92:	68a3      	ldr	r3, [r4, #8]
34004e94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34004e98:	d11e      	bne.n	34004ed8 <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004e9a:	4b5b      	ldr	r3, [pc, #364]	@ (34005008 <HAL_RCC_ClockConfig+0x47c>)
34004e9c:	685b      	ldr	r3, [r3, #4]
34004e9e:	06dd      	lsls	r5, r3, #27
34004ea0:	f57f ae78 	bpl.w	34004b94 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34004ea4:	4d58      	ldr	r5, [pc, #352]	@ (34005008 <HAL_RCC_ClockConfig+0x47c>)
34004ea6:	68a2      	ldr	r2, [r4, #8]
34004ea8:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004eaa:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34004eae:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34004eb2:	4313      	orrs	r3, r2
34004eb4:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34004eb6:	f7fd fa9f 	bl	340023f8 <HAL_GetTick>
34004eba:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004ebc:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34004ebe:	68a2      	ldr	r2, [r4, #8]
34004ec0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34004ec4:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34004ec8:	f43f af23 	beq.w	34004d12 <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004ecc:	f7fd fa94 	bl	340023f8 <HAL_GetTick>
34004ed0:	1b80      	subs	r0, r0, r6
34004ed2:	42b8      	cmp	r0, r7
34004ed4:	d9f2      	bls.n	34004ebc <HAL_RCC_ClockConfig+0x330>
34004ed6:	e7d1      	b.n	34004e7c <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34004ed8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34004edc:	d16f      	bne.n	34004fbe <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34004ede:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34004ee0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004ee4:	d004      	beq.n	34004ef0 <HAL_RCC_ClockConfig+0x364>
34004ee6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34004eea:	4846      	ldr	r0, [pc, #280]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004eec:	f7fc fa5e 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34004ef0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004ef2:	3b01      	subs	r3, #1
34004ef4:	2bff      	cmp	r3, #255	@ 0xff
34004ef6:	d904      	bls.n	34004f02 <HAL_RCC_ClockConfig+0x376>
34004ef8:	f240 4111 	movw	r1, #1041	@ 0x411
34004efc:	4841      	ldr	r0, [pc, #260]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004efe:	f7fc fa55 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34004f02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34004f04:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004f08:	d004      	beq.n	34004f14 <HAL_RCC_ClockConfig+0x388>
34004f0a:	f240 4112 	movw	r1, #1042	@ 0x412
34004f0e:	483d      	ldr	r0, [pc, #244]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004f10:	f7fc fa4c 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34004f14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34004f16:	3b01      	subs	r3, #1
34004f18:	2bff      	cmp	r3, #255	@ 0xff
34004f1a:	d904      	bls.n	34004f26 <HAL_RCC_ClockConfig+0x39a>
34004f1c:	f240 4113 	movw	r1, #1043	@ 0x413
34004f20:	4838      	ldr	r0, [pc, #224]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004f22:	f7fc fa43 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
34004f26:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34004f28:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004f2c:	d004      	beq.n	34004f38 <HAL_RCC_ClockConfig+0x3ac>
34004f2e:	f240 4114 	movw	r1, #1044	@ 0x414
34004f32:	4834      	ldr	r0, [pc, #208]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004f34:	f7fc fa3a 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34004f38:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34004f3a:	3b01      	subs	r3, #1
34004f3c:	2bff      	cmp	r3, #255	@ 0xff
34004f3e:	d904      	bls.n	34004f4a <HAL_RCC_ClockConfig+0x3be>
34004f40:	f240 4115 	movw	r1, #1045	@ 0x415
34004f44:	482f      	ldr	r0, [pc, #188]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004f46:	f7fc fa31 	bl	340013ac <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004f4a:	4d2f      	ldr	r5, [pc, #188]	@ (34005008 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34004f4c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
34004f50:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
34004f54:	4641      	mov	r1, r8
34004f56:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004f5a:	f7ff f9c3 	bl	340042e4 <RCC_IC_CheckPLLSources>
34004f5e:	2801      	cmp	r0, #1
34004f60:	f47f ae18 	bne.w	34004b94 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004f64:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34004f68:	6b27      	ldr	r7, [r4, #48]	@ 0x30
34004f6a:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004f6e:	4639      	mov	r1, r7
34004f70:	f7ff f9b8 	bl	340042e4 <RCC_IC_CheckPLLSources>
34004f74:	2801      	cmp	r0, #1
34004f76:	f47f ae0d 	bne.w	34004b94 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004f7a:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34004f7e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
34004f80:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004f84:	4631      	mov	r1, r6
34004f86:	f7ff f9ad 	bl	340042e4 <RCC_IC_CheckPLLSources>
34004f8a:	2801      	cmp	r0, #1
34004f8c:	f47f ae02 	bne.w	34004b94 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34004f90:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004f92:	3b01      	subs	r3, #1
34004f94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
34004f98:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34004f9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34004f9e:	3b01      	subs	r3, #1
34004fa0:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
34004fa4:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34004fa8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34004faa:	3b01      	subs	r3, #1
34004fac:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34004fb0:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34004fb4:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34004fb8:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
34004fbc:	e772      	b.n	34004ea4 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34004fbe:	b92b      	cbnz	r3, 34004fcc <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
34004fc0:	f7ff f802 	bl	34003fc8 <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
34004fc4:	2800      	cmp	r0, #0
34004fc6:	f47f af6d 	bne.w	34004ea4 <HAL_RCC_ClockConfig+0x318>
34004fca:	e5e3      	b.n	34004b94 <HAL_RCC_ClockConfig+0x8>
34004fcc:	f7ff f804 	bl	34003fd8 <LL_RCC_MSI_IsReady>
34004fd0:	e7f8      	b.n	34004fc4 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34004fd2:	68e3      	ldr	r3, [r4, #12]
34004fd4:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004fd8:	d007      	beq.n	34004fea <HAL_RCC_ClockConfig+0x45e>
34004fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004fde:	d004      	beq.n	34004fea <HAL_RCC_ClockConfig+0x45e>
34004fe0:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34004fe4:	4807      	ldr	r0, [pc, #28]	@ (34005004 <HAL_RCC_ClockConfig+0x478>)
34004fe6:	f7fc f9e1 	bl	340013ac <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34004fea:	4a07      	ldr	r2, [pc, #28]	@ (34005008 <HAL_RCC_ClockConfig+0x47c>)
34004fec:	68e1      	ldr	r1, [r4, #12]
34004fee:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004ff0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34004ff4:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34004ff6:	bf3f      	itttt	cc
34004ff8:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004ffa:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
34004ffe:	430b      	orrcc	r3, r1
34005000:	6253      	strcc	r3, [r2, #36]	@ 0x24
34005002:	e68a      	b.n	34004d1a <HAL_RCC_ClockConfig+0x18e>
34005004:	340109b0 	.word	0x340109b0
34005008:	56028000 	.word	0x56028000

3400500c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3400500c:	4b1f      	ldr	r3, [pc, #124]	@ (3400508c <HAL_RCC_GetSysClockFreq+0x80>)
{
3400500e:	b510      	push	{r4, lr}
34005010:	6a1a      	ldr	r2, [r3, #32]
34005012:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
34005016:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
3400501a:	d034      	beq.n	34005086 <HAL_RCC_GetSysClockFreq+0x7a>
3400501c:	d806      	bhi.n	3400502c <HAL_RCC_GetSysClockFreq+0x20>
3400501e:	b952      	cbnz	r2, 34005036 <HAL_RCC_GetSysClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34005020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34005022:	481b      	ldr	r0, [pc, #108]	@ (34005090 <HAL_RCC_GetSysClockFreq+0x84>)
34005024:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34005028:	40d8      	lsrs	r0, r3
}
3400502a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSysClkSource())
3400502c:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34005030:	d009      	beq.n	34005046 <HAL_RCC_GetSysClockFreq+0x3a>
      switch (LL_RCC_IC2_GetSource())
34005032:	2000      	movs	r0, #0
34005034:	e7f9      	b.n	3400502a <HAL_RCC_GetSysClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34005036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34005038:	4816      	ldr	r0, [pc, #88]	@ (34005094 <HAL_RCC_GetSysClockFreq+0x88>)
3400503a:	f413 7f00 	tst.w	r3, #512	@ 0x200
3400503e:	4b16      	ldr	r3, [pc, #88]	@ (34005098 <HAL_RCC_GetSysClockFreq+0x8c>)
34005040:	bf08      	it	eq
34005042:	4618      	moveq	r0, r3
34005044:	e7f1      	b.n	3400502a <HAL_RCC_GetSysClockFreq+0x1e>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34005046:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400504a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3400504e:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34005052:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC2_GetSource())
34005056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3400505a:	f100 0401 	add.w	r4, r0, #1
3400505e:	d00f      	beq.n	34005080 <HAL_RCC_GetSysClockFreq+0x74>
34005060:	d805      	bhi.n	3400506e <HAL_RCC_GetSysClockFreq+0x62>
34005062:	b953      	cbnz	r3, 3400507a <HAL_RCC_GetSysClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34005064:	f003 f92c 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34005068:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
3400506c:	e7dd      	b.n	3400502a <HAL_RCC_GetSysClockFreq+0x1e>
      switch (LL_RCC_IC2_GetSource())
3400506e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34005072:	d1de      	bne.n	34005032 <HAL_RCC_GetSysClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34005074:	f003 f9e4 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34005078:	e7f6      	b.n	34005068 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400507a:	f003 f961 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
3400507e:	e7f3      	b.n	34005068 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34005080:	f003 f99e 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34005084:	e7f0      	b.n	34005068 <HAL_RCC_GetSysClockFreq+0x5c>
  switch (LL_RCC_GetSysClkSource())
34005086:	4805      	ldr	r0, [pc, #20]	@ (3400509c <HAL_RCC_GetSysClockFreq+0x90>)
34005088:	e7cf      	b.n	3400502a <HAL_RCC_GetSysClockFreq+0x1e>
3400508a:	bf00      	nop
3400508c:	56028000 	.word	0x56028000
34005090:	03d09000 	.word	0x03d09000
34005094:	00f42400 	.word	0x00f42400
34005098:	003d0900 	.word	0x003d0900
3400509c:	02dc6c00 	.word	0x02dc6c00

340050a0 <HAL_RCC_GetHCLKFreq>:
{
340050a0:	b508      	push	{r3, lr}
  return LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler());
340050a2:	f7ff ffb3 	bl	3400500c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
340050a6:	4b03      	ldr	r3, [pc, #12]	@ (340050b4 <HAL_RCC_GetHCLKFreq+0x14>)
340050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340050aa:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
340050ae:	40d8      	lsrs	r0, r3
340050b0:	bd08      	pop	{r3, pc}
340050b2:	bf00      	nop
340050b4:	56028000 	.word	0x56028000

340050b8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
340050b8:	4a02      	ldr	r2, [pc, #8]	@ (340050c4 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
340050ba:	6d53      	ldr	r3, [r2, #84]	@ 0x54
340050bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
340050c0:	6553      	str	r3, [r2, #84]	@ 0x54
}
340050c2:	4770      	bx	lr
340050c4:	56028000 	.word	0x56028000

340050c8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
340050c8:	4a02      	ldr	r2, [pc, #8]	@ (340050d4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
340050ca:	6d53      	ldr	r3, [r2, #84]	@ 0x54
340050cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
340050d0:	6553      	str	r3, [r2, #84]	@ 0x54
}
340050d2:	4770      	bx	lr
340050d4:	56028000 	.word	0x56028000

340050d8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
340050d8:	4b02      	ldr	r3, [pc, #8]	@ (340050e4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
340050da:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
340050dc:	f3c0 1080 	ubfx	r0, r0, #6, #1
340050e0:	4770      	bx	lr
340050e2:	bf00      	nop
340050e4:	56028000 	.word	0x56028000

340050e8 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340050e8:	4b02      	ldr	r3, [pc, #8]	@ (340050f4 <LL_RCC_HSE_IsReady+0xc>)
340050ea:	6858      	ldr	r0, [r3, #4]
}
340050ec:	f3c0 1000 	ubfx	r0, r0, #4, #1
340050f0:	4770      	bx	lr
340050f2:	bf00      	nop
340050f4:	56028000 	.word	0x56028000

340050f8 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
340050f8:	4b02      	ldr	r3, [pc, #8]	@ (34005104 <LL_RCC_HSI_IsReady+0xc>)
340050fa:	6858      	ldr	r0, [r3, #4]
}
340050fc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34005100:	4770      	bx	lr
34005102:	bf00      	nop
34005104:	56028000 	.word	0x56028000

34005108 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34005108:	4b02      	ldr	r3, [pc, #8]	@ (34005114 <LL_RCC_MSI_IsReady+0xc>)
3400510a:	6858      	ldr	r0, [r3, #4]
}
3400510c:	f3c0 0080 	ubfx	r0, r0, #2, #1
34005110:	4770      	bx	lr
34005112:	bf00      	nop
34005114:	56028000 	.word	0x56028000

34005118 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34005118:	4b02      	ldr	r3, [pc, #8]	@ (34005124 <LL_RCC_LSE_IsReady+0xc>)
3400511a:	6858      	ldr	r0, [r3, #4]
}
3400511c:	f3c0 0040 	ubfx	r0, r0, #1, #1
34005120:	4770      	bx	lr
34005122:	bf00      	nop
34005124:	56028000 	.word	0x56028000

34005128 <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34005128:	4907      	ldr	r1, [pc, #28]	@ (34005148 <LL_RCC_SetClockSource+0x20>)
{
3400512a:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
3400512c:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3400512e:	f3c0 2504 	ubfx	r5, r0, #8, #5
34005132:	5863      	ldr	r3, [r4, r1]
34005134:	0e02      	lsrs	r2, r0, #24
34005136:	40aa      	lsls	r2, r5
34005138:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400513c:	ea23 0302 	bic.w	r3, r3, r2
34005140:	40a8      	lsls	r0, r5
34005142:	4303      	orrs	r3, r0
34005144:	5063      	str	r3, [r4, r1]
}
34005146:	bd30      	pop	{r4, r5, pc}
34005148:	56028144 	.word	0x56028144

3400514c <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
3400514c:	4b05      	ldr	r3, [pc, #20]	@ (34005164 <LL_RCC_GetClockSource+0x18>)
3400514e:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34005150:	58d1      	ldr	r1, [r2, r3]
34005152:	f3c0 2204 	ubfx	r2, r0, #8, #5
34005156:	0e03      	lsrs	r3, r0, #24
34005158:	4093      	lsls	r3, r2
3400515a:	400b      	ands	r3, r1
3400515c:	40d3      	lsrs	r3, r2
}
3400515e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
34005162:	4770      	bx	lr
34005164:	56028144 	.word	0x56028144

34005168 <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34005168:	4b02      	ldr	r3, [pc, #8]	@ (34005174 <LL_RCC_IC7_IsEnabled+0xc>)
3400516a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3400516e:	f3c0 1080 	ubfx	r0, r0, #6, #1
34005172:	4770      	bx	lr
34005174:	56028000 	.word	0x56028000

34005178 <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34005178:	4b03      	ldr	r3, [pc, #12]	@ (34005188 <LL_RCC_IC7_GetDivider+0x10>)
3400517a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
3400517e:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34005182:	3001      	adds	r0, #1
34005184:	4770      	bx	lr
34005186:	bf00      	nop
34005188:	56028000 	.word	0x56028000

3400518c <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
3400518c:	4b02      	ldr	r3, [pc, #8]	@ (34005198 <LL_RCC_IC8_IsEnabled+0xc>)
3400518e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34005192:	f3c0 10c0 	ubfx	r0, r0, #7, #1
34005196:	4770      	bx	lr
34005198:	56028000 	.word	0x56028000

3400519c <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
3400519c:	4b03      	ldr	r3, [pc, #12]	@ (340051ac <LL_RCC_IC8_GetDivider+0x10>)
3400519e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
340051a2:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340051a6:	3001      	adds	r0, #1
340051a8:	4770      	bx	lr
340051aa:	bf00      	nop
340051ac:	56028000 	.word	0x56028000

340051b0 <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
340051b0:	4b02      	ldr	r3, [pc, #8]	@ (340051bc <LL_RCC_IC9_IsEnabled+0xc>)
340051b2:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340051b6:	f3c0 2000 	ubfx	r0, r0, #8, #1
340051ba:	4770      	bx	lr
340051bc:	56028000 	.word	0x56028000

340051c0 <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
340051c0:	4b03      	ldr	r3, [pc, #12]	@ (340051d0 <LL_RCC_IC9_GetDivider+0x10>)
340051c2:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
340051c6:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340051ca:	3001      	adds	r0, #1
340051cc:	4770      	bx	lr
340051ce:	bf00      	nop
340051d0:	56028000 	.word	0x56028000

340051d4 <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
340051d4:	4b02      	ldr	r3, [pc, #8]	@ (340051e0 <LL_RCC_IC14_IsEnabled+0xc>)
340051d6:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340051da:	f3c0 3040 	ubfx	r0, r0, #13, #1
340051de:	4770      	bx	lr
340051e0:	56028000 	.word	0x56028000

340051e4 <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
340051e4:	4b03      	ldr	r3, [pc, #12]	@ (340051f4 <LL_RCC_IC14_GetDivider+0x10>)
340051e6:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
340051ea:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340051ee:	3001      	adds	r0, #1
340051f0:	4770      	bx	lr
340051f2:	bf00      	nop
340051f4:	56028000 	.word	0x56028000

340051f8 <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
340051f8:	4b02      	ldr	r3, [pc, #8]	@ (34005204 <LL_RCC_IC15_IsEnabled+0xc>)
340051fa:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340051fe:	f3c0 3080 	ubfx	r0, r0, #14, #1
34005202:	4770      	bx	lr
34005204:	56028000 	.word	0x56028000

34005208 <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34005208:	4b03      	ldr	r3, [pc, #12]	@ (34005218 <LL_RCC_IC15_GetDivider+0x10>)
3400520a:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
3400520e:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34005212:	3001      	adds	r0, #1
34005214:	4770      	bx	lr
34005216:	bf00      	nop
34005218:	56028000 	.word	0x56028000

3400521c <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3400521c:	4b02      	ldr	r3, [pc, #8]	@ (34005228 <RCCEx_GetHCLKFreq+0xc>)
3400521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34005220:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34005224:	40d8      	lsrs	r0, r3
34005226:	4770      	bx	lr
34005228:	56028000 	.word	0x56028000

3400522c <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
3400522c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34005230:	b508      	push	{r3, lr}
  switch (PLLsource)
34005232:	d01d      	beq.n	34005270 <RCCEx_GetPLLSourceFreq+0x44>
34005234:	d80a      	bhi.n	3400524c <RCCEx_GetPLLSourceFreq+0x20>
34005236:	b970      	cbnz	r0, 34005256 <RCCEx_GetPLLSourceFreq+0x2a>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34005238:	f7ff ff5e 	bl	340050f8 <LL_RCC_HSI_IsReady>
3400523c:	b148      	cbz	r0, 34005252 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400523e:	4b10      	ldr	r3, [pc, #64]	@ (34005280 <RCCEx_GetPLLSourceFreq+0x54>)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34005240:	4810      	ldr	r0, [pc, #64]	@ (34005284 <RCCEx_GetPLLSourceFreq+0x58>)
34005242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005244:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34005248:	40d8      	lsrs	r0, r3
3400524a:	e003      	b.n	34005254 <RCCEx_GetPLLSourceFreq+0x28>
  switch (PLLsource)
3400524c:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34005250:	d014      	beq.n	3400527c <RCCEx_GetPLLSourceFreq+0x50>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34005252:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
34005254:	bd08      	pop	{r3, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34005256:	f7ff ff57 	bl	34005108 <LL_RCC_MSI_IsReady>
3400525a:	2800      	cmp	r0, #0
3400525c:	d0f9      	beq.n	34005252 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400525e:	4b08      	ldr	r3, [pc, #32]	@ (34005280 <RCCEx_GetPLLSourceFreq+0x54>)
          pllinputfreq = MSI_VALUE;
34005260:	4809      	ldr	r0, [pc, #36]	@ (34005288 <RCCEx_GetPLLSourceFreq+0x5c>)
34005262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34005264:	f413 7f00 	tst.w	r3, #512	@ 0x200
34005268:	4b08      	ldr	r3, [pc, #32]	@ (3400528c <RCCEx_GetPLLSourceFreq+0x60>)
3400526a:	bf08      	it	eq
3400526c:	4618      	moveq	r0, r3
3400526e:	e7f1      	b.n	34005254 <RCCEx_GetPLLSourceFreq+0x28>
      if (LL_RCC_HSE_IsReady() != 0U)
34005270:	f7ff ff3a 	bl	340050e8 <LL_RCC_HSE_IsReady>
34005274:	2800      	cmp	r0, #0
34005276:	d0ec      	beq.n	34005252 <RCCEx_GetPLLSourceFreq+0x26>
        pllinputfreq = HSE_VALUE;
34005278:	4805      	ldr	r0, [pc, #20]	@ (34005290 <RCCEx_GetPLLSourceFreq+0x64>)
3400527a:	e7eb      	b.n	34005254 <RCCEx_GetPLLSourceFreq+0x28>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
3400527c:	4805      	ldr	r0, [pc, #20]	@ (34005294 <RCCEx_GetPLLSourceFreq+0x68>)
3400527e:	e7e9      	b.n	34005254 <RCCEx_GetPLLSourceFreq+0x28>
34005280:	56028000 	.word	0x56028000
34005284:	03d09000 	.word	0x03d09000
34005288:	00f42400 	.word	0x00f42400
3400528c:	003d0900 	.word	0x003d0900
34005290:	02dc6c00 	.word	0x02dc6c00
34005294:	00bb8000 	.word	0x00bb8000

34005298 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34005298:	ee07 2a10 	vmov	s14, r2
3400529c:	ee06 3a10 	vmov	s12, r3
340052a0:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
340052a4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
340052a8:	eddf 5a10 	vldr	s11, [pc, #64]	@ 340052ec <RCCEx_CalcPLLFreq+0x54>
340052ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
340052b0:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
340052b4:	eea6 7a25 	vfma.f32	s14, s12, s11
340052b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
340052bc:	ee67 7a87 	vmul.f32	s15, s15, s14
340052c0:	eeb8 7a66 	vcvt.f32.u32	s14, s13
340052c4:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
340052c8:	eddd 7a00 	vldr	s15, [sp]
340052cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
340052d0:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
340052d4:	eddd 7a01 	vldr	s15, [sp, #4]
340052d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
340052dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
340052e0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
340052e4:	ee17 0a90 	vmov	r0, s15
340052e8:	4770      	bx	lr
340052ea:	bf00      	nop
340052ec:	33800000 	.word	0x33800000

340052f0 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
340052f0:	e9d0 2300 	ldrd	r2, r3, [r0]
340052f4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
340052f8:	431a      	orrs	r2, r3
{
340052fa:	b570      	push	{r4, r5, r6, lr}
340052fc:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
340052fe:	d103      	bne.n	34005308 <HAL_RCCEx_PeriphCLKConfig+0x18>
34005300:	2188      	movs	r1, #136	@ 0x88
34005302:	4861      	ldr	r0, [pc, #388]	@ (34005488 <HAL_RCCEx_PeriphCLKConfig+0x198>)
34005304:	f7fc f852 	bl	340013ac <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34005308:	6823      	ldr	r3, [r4, #0]
3400530a:	011a      	lsls	r2, r3, #4
3400530c:	f140 808e 	bpl.w	3400542c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
34005310:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34005314:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34005318:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3400531c:	d05a      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400531e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34005322:	d057      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005324:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
34005328:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
3400532c:	d052      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400532e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34005332:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
34005336:	d04d      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005338:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
3400533c:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
34005340:	d048      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005342:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34005346:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
3400534a:	d043      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400534c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34005350:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
34005354:	d03e      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005356:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400535a:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
3400535e:	d039      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005360:	494a      	ldr	r1, [pc, #296]	@ (3400548c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
34005362:	428a      	cmp	r2, r1
34005364:	d036      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005366:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400536a:	428a      	cmp	r2, r1
3400536c:	d032      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400536e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005372:	428a      	cmp	r2, r1
34005374:	d02e      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005376:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
3400537a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400537e:	4288      	cmp	r0, r1
34005380:	d028      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005382:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
34005386:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
3400538a:	4288      	cmp	r0, r1
3400538c:	d022      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400538e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
34005392:	428a      	cmp	r2, r1
34005394:	d01e      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005396:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400539a:	428a      	cmp	r2, r1
3400539c:	d01a      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400539e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340053a2:	428a      	cmp	r2, r1
340053a4:	d016      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340053a6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340053aa:	428a      	cmp	r2, r1
340053ac:	d012      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340053ae:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340053b2:	428a      	cmp	r2, r1
340053b4:	d00e      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340053b6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340053ba:	428a      	cmp	r2, r1
340053bc:	d00a      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340053be:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340053c2:	428a      	cmp	r2, r1
340053c4:	d006      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340053c6:	4a32      	ldr	r2, [pc, #200]	@ (34005490 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
340053c8:	4293      	cmp	r3, r2
340053ca:	d003      	beq.n	340053d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340053cc:	218e      	movs	r1, #142	@ 0x8e
340053ce:	482e      	ldr	r0, [pc, #184]	@ (34005488 <HAL_RCCEx_PeriphCLKConfig+0x198>)
340053d0:	f7fb ffec 	bl	340013ac <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
340053d4:	4b2f      	ldr	r3, [pc, #188]	@ (34005494 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
340053d6:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
340053da:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340053de:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
340053e2:	d13b      	bne.n	3400545c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
340053e4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
340053e8:	d108      	bne.n	340053fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
340053ea:	f7fd f805 	bl	340023f8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340053ee:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
340053f2:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
340053f4:	f7ff fe90 	bl	34005118 <LL_RCC_LSE_IsReady>
340053f8:	2800      	cmp	r0, #0
340053fa:	d03d      	beq.n	34005478 <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
340053fc:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34005400:	4a24      	ldr	r2, [pc, #144]	@ (34005494 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
34005402:	f403 7040 	and.w	r0, r3, #768	@ 0x300
34005406:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
3400540a:	d108      	bne.n	3400541e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
3400540c:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
34005410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34005414:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
34005418:	430b      	orrs	r3, r1
3400541a:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
3400541e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34005422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34005426:	4303      	orrs	r3, r0
34005428:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
3400542c:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3400542e:	6823      	ldr	r3, [r4, #0]
34005430:	075e      	lsls	r6, r3, #29
34005432:	d55f      	bpl.n	340054f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
34005434:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34005438:	2b07      	cmp	r3, #7
3400543a:	d903      	bls.n	34005444 <HAL_RCCEx_PeriphCLKConfig+0x154>
3400543c:	21d4      	movs	r1, #212	@ 0xd4
3400543e:	4812      	ldr	r0, [pc, #72]	@ (34005488 <HAL_RCCEx_PeriphCLKConfig+0x198>)
34005440:	f7fb ffb4 	bl	340013ac <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34005444:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34005448:	3b03      	subs	r3, #3
3400544a:	2b04      	cmp	r3, #4
3400544c:	d848      	bhi.n	340054e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
3400544e:	e8df f013 	tbh	[pc, r3, lsl #1]
34005452:	0f27      	.short	0x0f27
34005454:	0ee10025 	.word	0x0ee10025
34005458:	0f500f04 	.word	0x0f500f04
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3400545c:	f401 7240 	and.w	r2, r1, #768	@ 0x300
34005460:	429a      	cmp	r2, r3
34005462:	d0bf      	beq.n	340053e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34005464:	4b0c      	ldr	r3, [pc, #48]	@ (34005498 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
34005466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34005468:	f042 0201 	orr.w	r2, r2, #1
3400546c:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3400546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34005470:	07db      	lsls	r3, r3, #31
34005472:	d4b7      	bmi.n	340053e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
34005474:	2501      	movs	r5, #1
34005476:	e7da      	b.n	3400542e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34005478:	f7fc ffbe 	bl	340023f8 <HAL_GetTick>
3400547c:	1b40      	subs	r0, r0, r5
3400547e:	42b0      	cmp	r0, r6
34005480:	d9b8      	bls.n	340053f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
        status = ret;
34005482:	2503      	movs	r5, #3
34005484:	e7d3      	b.n	3400542e <HAL_RCCEx_PeriphCLKConfig+0x13e>
34005486:	bf00      	nop
34005488:	34010a58 	.word	0x34010a58
3400548c:	00010300 	.word	0x00010300
34005490:	0003e300 	.word	0x0003e300
34005494:	56028000 	.word	0x56028000
34005498:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400549c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400549e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340054a2:	d003      	beq.n	340054ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
340054a4:	21d9      	movs	r1, #217	@ 0xd9
340054a6:	48bd      	ldr	r0, [pc, #756]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340054a8:	f7fb ff80 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
340054ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340054ae:	3b01      	subs	r3, #1
340054b0:	2bff      	cmp	r3, #255	@ 0xff
340054b2:	d903      	bls.n	340054bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
340054b4:	21da      	movs	r1, #218	@ 0xda
340054b6:	48b9      	ldr	r0, [pc, #740]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340054b8:	f7fb ff78 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340054bc:	4ab8      	ldr	r2, [pc, #736]	@ (340057a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340054be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340054c0:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340054c4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340054c6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340054ca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340054ce:	3901      	subs	r1, #1
340054d0:	4303      	orrs	r3, r0
340054d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340054d6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340054da:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340054dc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340054e0:	4aaf      	ldr	r2, [pc, #700]	@ (340057a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340054e2:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
340054e6:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340054ea:	f023 0307 	bic.w	r3, r3, #7
340054ee:	430b      	orrs	r3, r1
340054f0:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
340054f4:	6863      	ldr	r3, [r4, #4]
340054f6:	0258      	lsls	r0, r3, #9
340054f8:	d539      	bpl.n	3400556e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
340054fa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
340054fe:	4aa9      	ldr	r2, [pc, #676]	@ (340057a4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
34005500:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005504:	4293      	cmp	r3, r2
34005506:	d004      	beq.n	34005512 <HAL_RCCEx_PeriphCLKConfig+0x222>
34005508:	f44f 7192 	mov.w	r1, #292	@ 0x124
3400550c:	48a3      	ldr	r0, [pc, #652]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400550e:	f7fb ff4d 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
34005512:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
34005516:	4aa4      	ldr	r2, [pc, #656]	@ (340057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
34005518:	4293      	cmp	r3, r2
3400551a:	f041 8713 	bne.w	34007344 <HAL_RCCEx_PeriphCLKConfig+0x2054>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400551e:	69a3      	ldr	r3, [r4, #24]
34005520:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005524:	d004      	beq.n	34005530 <HAL_RCCEx_PeriphCLKConfig+0x240>
34005526:	f240 1129 	movw	r1, #297	@ 0x129
3400552a:	489c      	ldr	r0, [pc, #624]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400552c:	f7fb ff3e 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005530:	69e3      	ldr	r3, [r4, #28]
34005532:	3b01      	subs	r3, #1
34005534:	2bff      	cmp	r3, #255	@ 0xff
34005536:	d904      	bls.n	34005542 <HAL_RCCEx_PeriphCLKConfig+0x252>
34005538:	f44f 7195 	mov.w	r1, #298	@ 0x12a
3400553c:	4897      	ldr	r0, [pc, #604]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400553e:	f7fb ff35 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34005542:	4a97      	ldr	r2, [pc, #604]	@ (340057a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005544:	69e1      	ldr	r1, [r4, #28]
34005546:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
3400554a:	69a0      	ldr	r0, [r4, #24]
3400554c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005550:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005554:	3901      	subs	r1, #1
34005556:	4303      	orrs	r3, r0
34005558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400555c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34005560:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005562:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005566:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
3400556a:	f7ff fddd 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3400556e:	6863      	ldr	r3, [r4, #4]
34005570:	0219      	lsls	r1, r3, #8
34005572:	d539      	bpl.n	340055e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
34005574:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34005578:	4a8c      	ldr	r2, [pc, #560]	@ (340057ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
3400557a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400557e:	4293      	cmp	r3, r2
34005580:	d004      	beq.n	3400558c <HAL_RCCEx_PeriphCLKConfig+0x29c>
34005582:	f240 1151 	movw	r1, #337	@ 0x151
34005586:	4885      	ldr	r0, [pc, #532]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005588:	f7fb ff10 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
3400558c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34005590:	4a87      	ldr	r2, [pc, #540]	@ (340057b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
34005592:	4293      	cmp	r3, r2
34005594:	f041 8706 	bne.w	340073a4 <HAL_RCCEx_PeriphCLKConfig+0x20b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005598:	69a3      	ldr	r3, [r4, #24]
3400559a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400559e:	d004      	beq.n	340055aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
340055a0:	f44f 71ab 	mov.w	r1, #342	@ 0x156
340055a4:	487d      	ldr	r0, [pc, #500]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340055a6:	f7fb ff01 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340055aa:	69e3      	ldr	r3, [r4, #28]
340055ac:	3b01      	subs	r3, #1
340055ae:	2bff      	cmp	r3, #255	@ 0xff
340055b0:	d904      	bls.n	340055bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
340055b2:	f240 1157 	movw	r1, #343	@ 0x157
340055b6:	4879      	ldr	r0, [pc, #484]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340055b8:	f7fb fef8 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340055bc:	4a78      	ldr	r2, [pc, #480]	@ (340057a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340055be:	69e1      	ldr	r1, [r4, #28]
340055c0:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340055c4:	69a0      	ldr	r0, [r4, #24]
340055c6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340055ca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340055ce:	3901      	subs	r1, #1
340055d0:	4303      	orrs	r3, r0
340055d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340055d6:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340055da:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340055dc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340055e0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
340055e4:	f7ff fda0 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
340055e8:	6863      	ldr	r3, [r4, #4]
340055ea:	01da      	lsls	r2, r3, #7
340055ec:	d539      	bpl.n	34005662 <HAL_RCCEx_PeriphCLKConfig+0x372>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
340055ee:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
340055f2:	4a70      	ldr	r2, [pc, #448]	@ (340057b4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
340055f4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340055f8:	4293      	cmp	r3, r2
340055fa:	d004      	beq.n	34005606 <HAL_RCCEx_PeriphCLKConfig+0x316>
340055fc:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
34005600:	4866      	ldr	r0, [pc, #408]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005602:	f7fb fed3 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34005606:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
3400560a:	4a6b      	ldr	r2, [pc, #428]	@ (340057b8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
3400560c:	4293      	cmp	r3, r2
3400560e:	f041 86f9 	bne.w	34007404 <HAL_RCCEx_PeriphCLKConfig+0x2114>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005612:	69a3      	ldr	r3, [r4, #24]
34005614:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005618:	d004      	beq.n	34005624 <HAL_RCCEx_PeriphCLKConfig+0x334>
3400561a:	f240 1183 	movw	r1, #387	@ 0x183
3400561e:	485f      	ldr	r0, [pc, #380]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005620:	f7fb fec4 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005624:	69e3      	ldr	r3, [r4, #28]
34005626:	3b01      	subs	r3, #1
34005628:	2bff      	cmp	r3, #255	@ 0xff
3400562a:	d904      	bls.n	34005636 <HAL_RCCEx_PeriphCLKConfig+0x346>
3400562c:	f44f 71c2 	mov.w	r1, #388	@ 0x184
34005630:	485a      	ldr	r0, [pc, #360]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005632:	f7fb febb 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34005636:	4a5a      	ldr	r2, [pc, #360]	@ (340057a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005638:	69e1      	ldr	r1, [r4, #28]
3400563a:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
3400563e:	69a0      	ldr	r0, [r4, #24]
34005640:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005644:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005648:	3901      	subs	r1, #1
3400564a:	4303      	orrs	r3, r0
3400564c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005650:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34005654:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005656:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400565a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
3400565e:	f7ff fd63 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34005662:	6823      	ldr	r3, [r4, #0]
34005664:	051b      	lsls	r3, r3, #20
34005666:	d53c      	bpl.n	340056e2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
34005668:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
3400566c:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34005670:	d004      	beq.n	3400567c <HAL_RCCEx_PeriphCLKConfig+0x38c>
34005672:	f240 11ab 	movw	r1, #427	@ 0x1ab
34005676:	4849      	ldr	r0, [pc, #292]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005678:	f7fb fe98 	bl	340013ac <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
3400567c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34005680:	2b20      	cmp	r3, #32
34005682:	f041 86ff 	bne.w	34007484 <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005686:	69a3      	ldr	r3, [r4, #24]
34005688:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400568c:	d004      	beq.n	34005698 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
3400568e:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
34005692:	4842      	ldr	r0, [pc, #264]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005694:	f7fb fe8a 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005698:	69e3      	ldr	r3, [r4, #28]
3400569a:	3b01      	subs	r3, #1
3400569c:	2bff      	cmp	r3, #255	@ 0xff
3400569e:	d904      	bls.n	340056aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
340056a0:	f240 11b1 	movw	r1, #433	@ 0x1b1
340056a4:	483d      	ldr	r0, [pc, #244]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340056a6:	f7fb fe81 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340056aa:	4a3d      	ldr	r2, [pc, #244]	@ (340057a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340056ac:	69e1      	ldr	r1, [r4, #28]
340056ae:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340056b2:	69a0      	ldr	r0, [r4, #24]
340056b4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340056b8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340056bc:	3901      	subs	r1, #1
340056be:	4303      	orrs	r3, r0
340056c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340056c4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340056c8:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340056ca:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
340056ce:	4a34      	ldr	r2, [pc, #208]	@ (340057a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340056d0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
340056d4:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
340056d8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340056dc:	430b      	orrs	r3, r1
340056de:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
340056e2:	6823      	ldr	r3, [r4, #0]
340056e4:	005e      	lsls	r6, r3, #1
340056e6:	d539      	bpl.n	3400575c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
340056e8:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
340056ec:	4a33      	ldr	r2, [pc, #204]	@ (340057bc <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
340056ee:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340056f2:	4293      	cmp	r3, r2
340056f4:	d004      	beq.n	34005700 <HAL_RCCEx_PeriphCLKConfig+0x410>
340056f6:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
340056fa:	4828      	ldr	r0, [pc, #160]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340056fc:	f7fb fe56 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34005700:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34005704:	4a2e      	ldr	r2, [pc, #184]	@ (340057c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
34005706:	4293      	cmp	r3, r2
34005708:	f041 86ea 	bne.w	340074e0 <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400570c:	6a23      	ldr	r3, [r4, #32]
3400570e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005712:	d004      	beq.n	3400571e <HAL_RCCEx_PeriphCLKConfig+0x42e>
34005714:	f240 11dd 	movw	r1, #477	@ 0x1dd
34005718:	4820      	ldr	r0, [pc, #128]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400571a:	f7fb fe47 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400571e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34005720:	3b01      	subs	r3, #1
34005722:	2bff      	cmp	r3, #255	@ 0xff
34005724:	d904      	bls.n	34005730 <HAL_RCCEx_PeriphCLKConfig+0x440>
34005726:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400572a:	481c      	ldr	r0, [pc, #112]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400572c:	f7fb fe3e 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34005730:	4a1b      	ldr	r2, [pc, #108]	@ (340057a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005732:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34005734:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34005738:	6a20      	ldr	r0, [r4, #32]
3400573a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400573e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005742:	3901      	subs	r1, #1
34005744:	4303      	orrs	r3, r0
34005746:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400574a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400574e:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34005750:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005754:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
34005758:	f7ff fce6 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3400575c:	6823      	ldr	r3, [r4, #0]
3400575e:	2b00      	cmp	r3, #0
34005760:	da53      	bge.n	3400580a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
34005762:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34005766:	4a17      	ldr	r2, [pc, #92]	@ (340057c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
34005768:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400576c:	4293      	cmp	r3, r2
3400576e:	d004      	beq.n	3400577a <HAL_RCCEx_PeriphCLKConfig+0x48a>
34005770:	f240 2105 	movw	r1, #517	@ 0x205
34005774:	4809      	ldr	r0, [pc, #36]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005776:	f7fb fe19 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3400577a:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
3400577e:	4a12      	ldr	r2, [pc, #72]	@ (340057c8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
34005780:	4293      	cmp	r3, r2
34005782:	f041 86dd 	bne.w	34007540 <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34005786:	6a23      	ldr	r3, [r4, #32]
34005788:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400578c:	d01e      	beq.n	340057cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
3400578e:	f240 210a 	movw	r1, #522	@ 0x20a
34005792:	4802      	ldr	r0, [pc, #8]	@ (3400579c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005794:	f7fb fe0a 	bl	340013ac <assert_failed>
34005798:	e018      	b.n	340057cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
3400579a:	bf00      	nop
3400579c:	34010a58 	.word	0x34010a58
340057a0:	56028000 	.word	0x56028000
340057a4:	03000014 	.word	0x03000014
340057a8:	03020014 	.word	0x03020014
340057ac:	03000414 	.word	0x03000414
340057b0:	03020414 	.word	0x03020414
340057b4:	03000814 	.word	0x03000814
340057b8:	03020814 	.word	0x03020814
340057bc:	0300001c 	.word	0x0300001c
340057c0:	0302001c 	.word	0x0302001c
340057c4:	0300041c 	.word	0x0300041c
340057c8:	0302041c 	.word	0x0302041c
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340057cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340057ce:	3b01      	subs	r3, #1
340057d0:	2bff      	cmp	r3, #255	@ 0xff
340057d2:	d904      	bls.n	340057de <HAL_RCCEx_PeriphCLKConfig+0x4ee>
340057d4:	f240 210b 	movw	r1, #523	@ 0x20b
340057d8:	48c4      	ldr	r0, [pc, #784]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340057da:	f7fb fde7 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340057de:	4ac4      	ldr	r2, [pc, #784]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
340057e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340057e2:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340057e6:	6a20      	ldr	r0, [r4, #32]
340057e8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340057ec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340057f0:	3901      	subs	r1, #1
340057f2:	4303      	orrs	r3, r0
340057f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340057f8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340057fc:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340057fe:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005802:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
34005806:	f7ff fc8f 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3400580a:	6823      	ldr	r3, [r4, #0]
3400580c:	07d8      	lsls	r0, r3, #31
3400580e:	d54f      	bpl.n	340058b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
34005810:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34005814:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34005818:	d006      	beq.n	34005828 <HAL_RCCEx_PeriphCLKConfig+0x538>
3400581a:	2b40      	cmp	r3, #64	@ 0x40
3400581c:	d004      	beq.n	34005828 <HAL_RCCEx_PeriphCLKConfig+0x538>
3400581e:	f240 2132 	movw	r1, #562	@ 0x232
34005822:	48b2      	ldr	r0, [pc, #712]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005824:	f7fb fdc2 	bl	340013ac <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
34005828:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
3400582c:	3b01      	subs	r3, #1
3400582e:	2bff      	cmp	r3, #255	@ 0xff
34005830:	d904      	bls.n	3400583c <HAL_RCCEx_PeriphCLKConfig+0x54c>
34005832:	f240 2133 	movw	r1, #563	@ 0x233
34005836:	48ad      	ldr	r0, [pc, #692]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005838:	f7fb fdb8 	bl	340013ac <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3400583c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34005840:	2b20      	cmp	r3, #32
34005842:	f041 86ad 	bne.w	340075a0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34005846:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34005848:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400584c:	d004      	beq.n	34005858 <HAL_RCCEx_PeriphCLKConfig+0x568>
3400584e:	f44f 710e 	mov.w	r1, #568	@ 0x238
34005852:	48a6      	ldr	r0, [pc, #664]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005854:	f7fb fdaa 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34005858:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400585a:	3b01      	subs	r3, #1
3400585c:	2bff      	cmp	r3, #255	@ 0xff
3400585e:	d904      	bls.n	3400586a <HAL_RCCEx_PeriphCLKConfig+0x57a>
34005860:	f240 2139 	movw	r1, #569	@ 0x239
34005864:	48a1      	ldr	r0, [pc, #644]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005866:	f7fb fda1 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400586a:	4aa1      	ldr	r2, [pc, #644]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
3400586c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400586e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34005872:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34005874:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005878:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400587c:	3901      	subs	r1, #1
3400587e:	4303      	orrs	r3, r0
34005880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005884:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34005888:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400588a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3400588e:	4998      	ldr	r1, [pc, #608]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005890:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
34005894:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
34005898:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
3400589c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
340058a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
340058a4:	3a01      	subs	r2, #1
340058a6:	4303      	orrs	r3, r0
340058a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
340058ac:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
340058b0:	6823      	ldr	r3, [r4, #0]
340058b2:	0799      	lsls	r1, r3, #30
340058b4:	d53b      	bpl.n	3400592e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
340058b6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
340058ba:	2b07      	cmp	r3, #7
340058bc:	d904      	bls.n	340058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
340058be:	f240 2161 	movw	r1, #609	@ 0x261
340058c2:	488a      	ldr	r0, [pc, #552]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340058c4:	f7fb fd72 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
340058c8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
340058cc:	2b02      	cmp	r3, #2
340058ce:	f041 8695 	bne.w	340075fc <HAL_RCCEx_PeriphCLKConfig+0x230c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340058d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340058d4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340058d8:	d004      	beq.n	340058e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
340058da:	f240 2166 	movw	r1, #614	@ 0x266
340058de:	4883      	ldr	r0, [pc, #524]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340058e0:	f7fb fd64 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340058e4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340058e6:	3b01      	subs	r3, #1
340058e8:	2bff      	cmp	r3, #255	@ 0xff
340058ea:	d904      	bls.n	340058f6 <HAL_RCCEx_PeriphCLKConfig+0x606>
340058ec:	f240 2167 	movw	r1, #615	@ 0x267
340058f0:	487e      	ldr	r0, [pc, #504]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340058f2:	f7fb fd5b 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340058f6:	4a7e      	ldr	r2, [pc, #504]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
340058f8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340058fa:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340058fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34005900:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005904:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005908:	3901      	subs	r1, #1
3400590a:	4303      	orrs	r3, r0
3400590c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005910:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34005914:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34005916:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
3400591a:	4a75      	ldr	r2, [pc, #468]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
3400591c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
34005920:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005924:	f023 0307 	bic.w	r3, r3, #7
34005928:	430b      	orrs	r3, r1
3400592a:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3400592e:	6823      	ldr	r3, [r4, #0]
34005930:	071a      	lsls	r2, r3, #28
34005932:	d528      	bpl.n	34005986 <HAL_RCCEx_PeriphCLKConfig+0x696>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
34005934:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34005938:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400593c:	d004      	beq.n	34005948 <HAL_RCCEx_PeriphCLKConfig+0x658>
3400593e:	f240 218e 	movw	r1, #654	@ 0x28e
34005942:	486a      	ldr	r0, [pc, #424]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005944:	f7fb fd32 	bl	340013ac <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
34005948:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
3400594c:	3b01      	subs	r3, #1
3400594e:	2bff      	cmp	r3, #255	@ 0xff
34005950:	d904      	bls.n	3400595c <HAL_RCCEx_PeriphCLKConfig+0x66c>
34005952:	f240 218f 	movw	r1, #655	@ 0x28f
34005956:	4865      	ldr	r0, [pc, #404]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005958:	f7fb fd28 	bl	340013ac <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3400595c:	4a64      	ldr	r2, [pc, #400]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
3400595e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
34005962:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
34005966:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
3400596a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400596e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005972:	3901      	subs	r1, #1
34005974:	4303      	orrs	r3, r0
34005976:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400597a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
3400597e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34005982:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34005986:	6823      	ldr	r3, [r4, #0]
34005988:	06db      	lsls	r3, r3, #27
3400598a:	d542      	bpl.n	34005a12 <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
3400598c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34005990:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34005994:	d004      	beq.n	340059a0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
34005996:	f240 219d 	movw	r1, #669	@ 0x29d
3400599a:	4854      	ldr	r0, [pc, #336]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3400599c:	f7fb fd06 	bl	340013ac <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
340059a0:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
340059a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340059a8:	f041 8656 	bne.w	34007658 <HAL_RCCEx_PeriphCLKConfig+0x2368>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
340059ac:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
340059b0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340059b4:	d004      	beq.n	340059c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
340059b6:	f240 21a2 	movw	r1, #674	@ 0x2a2
340059ba:	484c      	ldr	r0, [pc, #304]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340059bc:	f7fb fcf6 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
340059c0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
340059c4:	3b01      	subs	r3, #1
340059c6:	2bff      	cmp	r3, #255	@ 0xff
340059c8:	d904      	bls.n	340059d4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
340059ca:	f240 21a3 	movw	r1, #675	@ 0x2a3
340059ce:	4847      	ldr	r0, [pc, #284]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340059d0:	f7fb fcec 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
340059d4:	4a46      	ldr	r2, [pc, #280]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
340059d6:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
340059da:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
340059de:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
340059e2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340059e6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340059ea:	3901      	subs	r1, #1
340059ec:	4303      	orrs	r3, r0
340059ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340059f2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
340059f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340059fa:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
340059fe:	4a3c      	ldr	r2, [pc, #240]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005a00:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
34005a04:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005a08:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34005a0c:	430b      	orrs	r3, r1
34005a0e:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34005a12:	6823      	ldr	r3, [r4, #0]
34005a14:	069e      	lsls	r6, r3, #26
34005a16:	d53e      	bpl.n	34005a96 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
34005a18:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34005a1c:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34005a20:	d004      	beq.n	34005a2c <HAL_RCCEx_PeriphCLKConfig+0x73c>
34005a22:	f240 21bd 	movw	r1, #701	@ 0x2bd
34005a26:	4831      	ldr	r0, [pc, #196]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005a28:	f7fb fcc0 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34005a2c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34005a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34005a34:	f041 8619 	bne.w	3400766a <HAL_RCCEx_PeriphCLKConfig+0x237a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
34005a38:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34005a3a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005a3e:	d004      	beq.n	34005a4a <HAL_RCCEx_PeriphCLKConfig+0x75a>
34005a40:	f240 21c2 	movw	r1, #706	@ 0x2c2
34005a44:	4829      	ldr	r0, [pc, #164]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005a46:	f7fb fcb1 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34005a4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34005a4c:	3b01      	subs	r3, #1
34005a4e:	2bff      	cmp	r3, #255	@ 0xff
34005a50:	d904      	bls.n	34005a5c <HAL_RCCEx_PeriphCLKConfig+0x76c>
34005a52:	f240 21c3 	movw	r1, #707	@ 0x2c3
34005a56:	4825      	ldr	r0, [pc, #148]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005a58:	f7fb fca8 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34005a5c:	4a24      	ldr	r2, [pc, #144]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005a5e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
34005a60:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
34005a64:	6e20      	ldr	r0, [r4, #96]	@ 0x60
34005a66:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005a6a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005a6e:	3901      	subs	r1, #1
34005a70:	4303      	orrs	r3, r0
34005a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005a76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34005a7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34005a7e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34005a82:	4a1b      	ldr	r2, [pc, #108]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005a84:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34005a88:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005a8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
34005a90:	430b      	orrs	r3, r1
34005a92:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34005a96:	6823      	ldr	r3, [r4, #0]
34005a98:	0658      	lsls	r0, r3, #25
34005a9a:	d516      	bpl.n	34005aca <HAL_RCCEx_PeriphCLKConfig+0x7da>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
34005a9c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
34005aa0:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
34005aa4:	d007      	beq.n	34005ab6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34005aa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34005aaa:	d004      	beq.n	34005ab6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34005aac:	f240 21dd 	movw	r1, #733	@ 0x2dd
34005ab0:	480e      	ldr	r0, [pc, #56]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005ab2:	f7fb fc7b 	bl	340013ac <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34005ab6:	4a0e      	ldr	r2, [pc, #56]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005ab8:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
34005abc:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005ac0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34005ac4:	430b      	orrs	r3, r1
34005ac6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34005aca:	6823      	ldr	r3, [r4, #0]
34005acc:	0619      	lsls	r1, r3, #24
34005ace:	d518      	bpl.n	34005b02 <HAL_RCCEx_PeriphCLKConfig+0x812>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
34005ad0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
34005ad4:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
34005ad8:	d004      	beq.n	34005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
34005ada:	f240 21e7 	movw	r1, #743	@ 0x2e7
34005ade:	4803      	ldr	r0, [pc, #12]	@ (34005aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005ae0:	f7fb fc64 	bl	340013ac <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34005ae4:	4a02      	ldr	r2, [pc, #8]	@ (34005af0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005ae6:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
34005aea:	e003      	b.n	34005af4 <HAL_RCCEx_PeriphCLKConfig+0x804>
34005aec:	34010a58 	.word	0x34010a58
34005af0:	56028000 	.word	0x56028000
34005af4:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005af8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34005afc:	430b      	orrs	r3, r1
34005afe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34005b02:	6823      	ldr	r3, [r4, #0]
34005b04:	05da      	lsls	r2, r3, #23
34005b06:	d513      	bpl.n	34005b30 <HAL_RCCEx_PeriphCLKConfig+0x840>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
34005b08:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
34005b0c:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34005b10:	d004      	beq.n	34005b1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
34005b12:	f240 21f1 	movw	r1, #753	@ 0x2f1
34005b16:	48c1      	ldr	r0, [pc, #772]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b18:	f7fb fc48 	bl	340013ac <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34005b1c:	4ac0      	ldr	r2, [pc, #768]	@ (34005e20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005b1e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
34005b22:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005b26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34005b2a:	430b      	orrs	r3, r1
34005b2c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34005b30:	6823      	ldr	r3, [r4, #0]
34005b32:	059b      	lsls	r3, r3, #22
34005b34:	d54b      	bpl.n	34005bce <HAL_RCCEx_PeriphCLKConfig+0x8de>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34005b36:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005b3a:	2b03      	cmp	r3, #3
34005b3c:	d904      	bls.n	34005b48 <HAL_RCCEx_PeriphCLKConfig+0x858>
34005b3e:	f240 21fb 	movw	r1, #763	@ 0x2fb
34005b42:	48b6      	ldr	r0, [pc, #728]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b44:	f7fb fc32 	bl	340013ac <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34005b48:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
34005b4c:	3b01      	subs	r3, #1
34005b4e:	2b0f      	cmp	r3, #15
34005b50:	d904      	bls.n	34005b5c <HAL_RCCEx_PeriphCLKConfig+0x86c>
34005b52:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
34005b56:	48b1      	ldr	r0, [pc, #708]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b58:	f7fb fc28 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34005b5c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005b60:	2b02      	cmp	r3, #2
34005b62:	f041 858b 	bne.w	3400767c <HAL_RCCEx_PeriphCLKConfig+0x238c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
34005b66:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
34005b68:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005b6c:	d004      	beq.n	34005b78 <HAL_RCCEx_PeriphCLKConfig+0x888>
34005b6e:	f240 3101 	movw	r1, #769	@ 0x301
34005b72:	48aa      	ldr	r0, [pc, #680]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b74:	f7fb fc1a 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
34005b78:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
34005b7a:	3b01      	subs	r3, #1
34005b7c:	2bff      	cmp	r3, #255	@ 0xff
34005b7e:	d904      	bls.n	34005b8a <HAL_RCCEx_PeriphCLKConfig+0x89a>
34005b80:	f240 3102 	movw	r1, #770	@ 0x302
34005b84:	48a5      	ldr	r0, [pc, #660]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b86:	f7fb fc11 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34005b8a:	4aa5      	ldr	r2, [pc, #660]	@ (34005e20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005b8c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
34005b8e:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
34005b92:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
34005b94:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005b98:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005b9c:	3901      	subs	r1, #1
34005b9e:	4303      	orrs	r3, r0
34005ba0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005ba4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34005ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34005bac:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34005bb0:	499b      	ldr	r1, [pc, #620]	@ (34005e20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005bb2:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
34005bb6:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
34005bba:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
34005bbe:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
34005bc2:	3a01      	subs	r2, #1
34005bc4:	4303      	orrs	r3, r0
34005bc6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
34005bca:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34005bce:	6823      	ldr	r3, [r4, #0]
34005bd0:	055e      	lsls	r6, r3, #21
34005bd2:	d540      	bpl.n	34005c56 <HAL_RCCEx_PeriphCLKConfig+0x966>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
34005bd4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005bd8:	2b03      	cmp	r3, #3
34005bda:	d904      	bls.n	34005be6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
34005bdc:	f240 311d 	movw	r1, #797	@ 0x31d
34005be0:	488e      	ldr	r0, [pc, #568]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005be2:	f7fb fbe3 	bl	340013ac <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
34005be6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005bea:	2b02      	cmp	r3, #2
34005bec:	f041 854e 	bne.w	3400768c <HAL_RCCEx_PeriphCLKConfig+0x239c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34005bf0:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34005bf4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005bf8:	d004      	beq.n	34005c04 <HAL_RCCEx_PeriphCLKConfig+0x914>
34005bfa:	f240 3122 	movw	r1, #802	@ 0x322
34005bfe:	4887      	ldr	r0, [pc, #540]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005c00:	f7fb fbd4 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34005c04:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34005c08:	3b01      	subs	r3, #1
34005c0a:	2bff      	cmp	r3, #255	@ 0xff
34005c0c:	d904      	bls.n	34005c18 <HAL_RCCEx_PeriphCLKConfig+0x928>
34005c0e:	f240 3123 	movw	r1, #803	@ 0x323
34005c12:	4882      	ldr	r0, [pc, #520]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005c14:	f7fb fbca 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34005c18:	4a81      	ldr	r2, [pc, #516]	@ (34005e20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005c1a:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34005c1e:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34005c22:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34005c26:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005c2a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005c2e:	3901      	subs	r1, #1
34005c30:	4303      	orrs	r3, r0
34005c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005c36:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34005c3a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34005c3e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34005c42:	4a77      	ldr	r2, [pc, #476]	@ (34005e20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005c44:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
34005c48:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34005c4c:	f023 0303 	bic.w	r3, r3, #3
34005c50:	430b      	orrs	r3, r1
34005c52:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34005c56:	6823      	ldr	r3, [r4, #0]
34005c58:	04d8      	lsls	r0, r3, #19
34005c5a:	d540      	bpl.n	34005cde <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34005c5c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005c60:	4a70      	ldr	r2, [pc, #448]	@ (34005e24 <HAL_RCCEx_PeriphCLKConfig+0xb34>)
34005c62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005c66:	4291      	cmp	r1, r2
34005c68:	d00a      	beq.n	34005c80 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005c6e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005c72:	4293      	cmp	r3, r2
34005c74:	d004      	beq.n	34005c80 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005c76:	f240 313d 	movw	r1, #829	@ 0x33d
34005c7a:	4868      	ldr	r0, [pc, #416]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005c7c:	f7fb fb96 	bl	340013ac <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34005c80:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005c84:	4a68      	ldr	r2, [pc, #416]	@ (34005e28 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
34005c86:	4293      	cmp	r3, r2
34005c88:	f041 8508 	bne.w	3400769c <HAL_RCCEx_PeriphCLKConfig+0x23ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005c8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005c8e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005c92:	d004      	beq.n	34005c9e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
34005c94:	f240 3142 	movw	r1, #834	@ 0x342
34005c98:	4860      	ldr	r0, [pc, #384]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005c9a:	f7fb fb87 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005c9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005ca0:	3b01      	subs	r3, #1
34005ca2:	2bff      	cmp	r3, #255	@ 0xff
34005ca4:	d904      	bls.n	34005cb0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
34005ca6:	f240 3143 	movw	r1, #835	@ 0x343
34005caa:	485c      	ldr	r0, [pc, #368]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005cac:	f7fb fb7e 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005cb0:	4a5b      	ldr	r2, [pc, #364]	@ (34005e20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005cb2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005cb4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005cb8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005cba:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005cbe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005cc2:	3901      	subs	r1, #1
34005cc4:	4303      	orrs	r3, r0
34005cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005cca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005cce:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005cd2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005cd6:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
34005cda:	f7ff fa25 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34005cde:	6823      	ldr	r3, [r4, #0]
34005ce0:	0499      	lsls	r1, r3, #18
34005ce2:	d540      	bpl.n	34005d66 <HAL_RCCEx_PeriphCLKConfig+0xa76>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
34005ce4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34005ce8:	4a50      	ldr	r2, [pc, #320]	@ (34005e2c <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
34005cea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005cee:	4291      	cmp	r1, r2
34005cf0:	d00a      	beq.n	34005d08 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34005cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005cf6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005cfa:	4293      	cmp	r3, r2
34005cfc:	d004      	beq.n	34005d08 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34005cfe:	f240 316a 	movw	r1, #874	@ 0x36a
34005d02:	4846      	ldr	r0, [pc, #280]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d04:	f7fb fb52 	bl	340013ac <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34005d08:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34005d0c:	4a48      	ldr	r2, [pc, #288]	@ (34005e30 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
34005d0e:	4293      	cmp	r3, r2
34005d10:	f041 84f5 	bne.w	340076fe <HAL_RCCEx_PeriphCLKConfig+0x240e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005d14:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005d16:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005d1a:	d004      	beq.n	34005d26 <HAL_RCCEx_PeriphCLKConfig+0xa36>
34005d1c:	f240 316f 	movw	r1, #879	@ 0x36f
34005d20:	483e      	ldr	r0, [pc, #248]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d22:	f7fb fb43 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005d26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005d28:	3b01      	subs	r3, #1
34005d2a:	2bff      	cmp	r3, #255	@ 0xff
34005d2c:	d904      	bls.n	34005d38 <HAL_RCCEx_PeriphCLKConfig+0xa48>
34005d2e:	f44f 715c 	mov.w	r1, #880	@ 0x370
34005d32:	483a      	ldr	r0, [pc, #232]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d34:	f7fb fb3a 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005d38:	4a39      	ldr	r2, [pc, #228]	@ (34005e20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005d3a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005d3c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005d40:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005d42:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005d46:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005d4a:	3901      	subs	r1, #1
34005d4c:	4303      	orrs	r3, r0
34005d4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005d52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005d56:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005d5a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005d5e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34005d62:	f7ff f9e1 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34005d66:	6823      	ldr	r3, [r4, #0]
34005d68:	045a      	lsls	r2, r3, #17
34005d6a:	d540      	bpl.n	34005dee <HAL_RCCEx_PeriphCLKConfig+0xafe>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34005d6c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005d70:	4a30      	ldr	r2, [pc, #192]	@ (34005e34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
34005d72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005d76:	4291      	cmp	r1, r2
34005d78:	d00a      	beq.n	34005d90 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34005d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005d7e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005d82:	4293      	cmp	r3, r2
34005d84:	d004      	beq.n	34005d90 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34005d86:	f240 3197 	movw	r1, #919	@ 0x397
34005d8a:	4824      	ldr	r0, [pc, #144]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d8c:	f7fb fb0e 	bl	340013ac <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34005d90:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005d94:	4a28      	ldr	r2, [pc, #160]	@ (34005e38 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
34005d96:	4293      	cmp	r3, r2
34005d98:	f041 84f6 	bne.w	34007788 <HAL_RCCEx_PeriphCLKConfig+0x2498>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005d9c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005d9e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005da2:	d004      	beq.n	34005dae <HAL_RCCEx_PeriphCLKConfig+0xabe>
34005da4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34005da8:	481c      	ldr	r0, [pc, #112]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005daa:	f7fb faff 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005dae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005db0:	3b01      	subs	r3, #1
34005db2:	2bff      	cmp	r3, #255	@ 0xff
34005db4:	d904      	bls.n	34005dc0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
34005db6:	f240 319d 	movw	r1, #925	@ 0x39d
34005dba:	4818      	ldr	r0, [pc, #96]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005dbc:	f7fb faf6 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005dc0:	4a17      	ldr	r2, [pc, #92]	@ (34005e20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005dc2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005dc4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005dc8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005dca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005dce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005dd2:	3901      	subs	r1, #1
34005dd4:	4303      	orrs	r3, r0
34005dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005dda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005de2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005de6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
34005dea:	f7ff f99d 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34005dee:	6823      	ldr	r3, [r4, #0]
34005df0:	041b      	lsls	r3, r3, #16
34005df2:	d554      	bpl.n	34005e9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34005df4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005df8:	4a10      	ldr	r2, [pc, #64]	@ (34005e3c <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
34005dfa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005dfe:	4291      	cmp	r1, r2
34005e00:	d01e      	beq.n	34005e40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005e06:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005e0a:	4293      	cmp	r3, r2
34005e0c:	d018      	beq.n	34005e40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005e0e:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34005e12:	4802      	ldr	r0, [pc, #8]	@ (34005e1c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005e14:	f7fb faca 	bl	340013ac <assert_failed>
34005e18:	e012      	b.n	34005e40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005e1a:	bf00      	nop
34005e1c:	34010a58 	.word	0x34010a58
34005e20:	56028000 	.word	0x56028000
34005e24:	0700000c 	.word	0x0700000c
34005e28:	0702000c 	.word	0x0702000c
34005e2c:	0700040c 	.word	0x0700040c
34005e30:	0702040c 	.word	0x0702040c
34005e34:	0700080c 	.word	0x0700080c
34005e38:	0702080c 	.word	0x0702080c
34005e3c:	07000c0c 	.word	0x07000c0c
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34005e40:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005e44:	4abd      	ldr	r2, [pc, #756]	@ (3400613c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
34005e46:	4293      	cmp	r3, r2
34005e48:	f041 84cf 	bne.w	340077ea <HAL_RCCEx_PeriphCLKConfig+0x24fa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005e4c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005e4e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005e52:	d004      	beq.n	34005e5e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
34005e54:	f240 31c9 	movw	r1, #969	@ 0x3c9
34005e58:	48b9      	ldr	r0, [pc, #740]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005e5a:	f7fb faa7 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005e5e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005e60:	3b01      	subs	r3, #1
34005e62:	2bff      	cmp	r3, #255	@ 0xff
34005e64:	d904      	bls.n	34005e70 <HAL_RCCEx_PeriphCLKConfig+0xb80>
34005e66:	f240 31ca 	movw	r1, #970	@ 0x3ca
34005e6a:	48b5      	ldr	r0, [pc, #724]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005e6c:	f7fb fa9e 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005e70:	4ab4      	ldr	r2, [pc, #720]	@ (34006144 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005e72:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005e74:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005e78:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005e7a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005e7e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005e82:	3901      	subs	r1, #1
34005e84:	4303      	orrs	r3, r0
34005e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005e8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005e92:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005e96:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
34005e9a:	f7ff f945 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34005e9e:	6823      	ldr	r3, [r4, #0]
34005ea0:	03de      	lsls	r6, r3, #15
34005ea2:	d540      	bpl.n	34005f26 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34005ea4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34005ea8:	4aa7      	ldr	r2, [pc, #668]	@ (34006148 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
34005eaa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005eae:	4291      	cmp	r1, r2
34005eb0:	d00a      	beq.n	34005ec8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34005eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005eb6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005eba:	4293      	cmp	r3, r2
34005ebc:	d004      	beq.n	34005ec8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34005ebe:	f240 31f1 	movw	r1, #1009	@ 0x3f1
34005ec2:	489f      	ldr	r0, [pc, #636]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005ec4:	f7fb fa72 	bl	340013ac <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34005ec8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34005ecc:	4a9f      	ldr	r2, [pc, #636]	@ (3400614c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
34005ece:	4293      	cmp	r3, r2
34005ed0:	f041 84bc 	bne.w	3400784c <HAL_RCCEx_PeriphCLKConfig+0x255c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005ed4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005ed6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005eda:	d004      	beq.n	34005ee6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
34005edc:	f240 31f6 	movw	r1, #1014	@ 0x3f6
34005ee0:	4897      	ldr	r0, [pc, #604]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005ee2:	f7fb fa63 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005ee6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005ee8:	3b01      	subs	r3, #1
34005eea:	2bff      	cmp	r3, #255	@ 0xff
34005eec:	d904      	bls.n	34005ef8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
34005eee:	f240 31f7 	movw	r1, #1015	@ 0x3f7
34005ef2:	4893      	ldr	r0, [pc, #588]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005ef4:	f7fb fa5a 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005ef8:	4a92      	ldr	r2, [pc, #584]	@ (34006144 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005efa:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005efc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005f00:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005f02:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005f06:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005f0a:	3901      	subs	r1, #1
34005f0c:	4303      	orrs	r3, r0
34005f0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005f12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005f16:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005f1a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005f1e:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34005f22:	f7ff f901 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34005f26:	6823      	ldr	r3, [r4, #0]
34005f28:	0398      	lsls	r0, r3, #14
34005f2a:	d540      	bpl.n	34005fae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34005f2c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34005f30:	4a87      	ldr	r2, [pc, #540]	@ (34006150 <HAL_RCCEx_PeriphCLKConfig+0xe60>)
34005f32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005f36:	4291      	cmp	r1, r2
34005f38:	d00a      	beq.n	34005f50 <HAL_RCCEx_PeriphCLKConfig+0xc60>
34005f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005f3e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005f42:	4293      	cmp	r3, r2
34005f44:	d004      	beq.n	34005f50 <HAL_RCCEx_PeriphCLKConfig+0xc60>
34005f46:	f240 411e 	movw	r1, #1054	@ 0x41e
34005f4a:	487d      	ldr	r0, [pc, #500]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005f4c:	f7fb fa2e 	bl	340013ac <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34005f50:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34005f54:	4a7f      	ldr	r2, [pc, #508]	@ (34006154 <HAL_RCCEx_PeriphCLKConfig+0xe64>)
34005f56:	4293      	cmp	r3, r2
34005f58:	f041 84a9 	bne.w	340078ae <HAL_RCCEx_PeriphCLKConfig+0x25be>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005f5c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005f5e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005f62:	d004      	beq.n	34005f6e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
34005f64:	f240 4123 	movw	r1, #1059	@ 0x423
34005f68:	4875      	ldr	r0, [pc, #468]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005f6a:	f7fb fa1f 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005f6e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005f70:	3b01      	subs	r3, #1
34005f72:	2bff      	cmp	r3, #255	@ 0xff
34005f74:	d904      	bls.n	34005f80 <HAL_RCCEx_PeriphCLKConfig+0xc90>
34005f76:	f240 4124 	movw	r1, #1060	@ 0x424
34005f7a:	4871      	ldr	r0, [pc, #452]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005f7c:	f7fb fa16 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005f80:	4a70      	ldr	r2, [pc, #448]	@ (34006144 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005f82:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005f84:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005f88:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005f8a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005f8e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005f92:	3901      	subs	r1, #1
34005f94:	4303      	orrs	r3, r0
34005f96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005f9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005f9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005fa2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005fa6:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
34005faa:	f7ff f8bd 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34005fae:	6823      	ldr	r3, [r4, #0]
34005fb0:	0359      	lsls	r1, r3, #13
34005fb2:	d540      	bpl.n	34006036 <HAL_RCCEx_PeriphCLKConfig+0xd46>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
34005fb4:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34005fb8:	4a67      	ldr	r2, [pc, #412]	@ (34006158 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
34005fba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005fbe:	4291      	cmp	r1, r2
34005fc0:	d00a      	beq.n	34005fd8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
34005fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005fc6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005fca:	4293      	cmp	r3, r2
34005fcc:	d004      	beq.n	34005fd8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
34005fce:	f240 414b 	movw	r1, #1099	@ 0x44b
34005fd2:	485b      	ldr	r0, [pc, #364]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005fd4:	f7fb f9ea 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34005fd8:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34005fdc:	4a5f      	ldr	r2, [pc, #380]	@ (3400615c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
34005fde:	4293      	cmp	r3, r2
34005fe0:	f041 8496 	bne.w	34007910 <HAL_RCCEx_PeriphCLKConfig+0x2620>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005fe4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005fe6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005fea:	d004      	beq.n	34005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
34005fec:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34005ff0:	4853      	ldr	r0, [pc, #332]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005ff2:	f7fb f9db 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005ff6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005ff8:	3b01      	subs	r3, #1
34005ffa:	2bff      	cmp	r3, #255	@ 0xff
34005ffc:	d904      	bls.n	34006008 <HAL_RCCEx_PeriphCLKConfig+0xd18>
34005ffe:	f240 4151 	movw	r1, #1105	@ 0x451
34006002:	484f      	ldr	r0, [pc, #316]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006004:	f7fb f9d2 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006008:	4a4e      	ldr	r2, [pc, #312]	@ (34006144 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
3400600a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400600c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006010:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006012:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006016:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400601a:	3901      	subs	r1, #1
3400601c:	4303      	orrs	r3, r0
3400601e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006022:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006026:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400602a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400602e:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
34006032:	f7ff f879 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34006036:	6823      	ldr	r3, [r4, #0]
34006038:	031a      	lsls	r2, r3, #12
3400603a:	d540      	bpl.n	340060be <HAL_RCCEx_PeriphCLKConfig+0xdce>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
3400603c:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34006040:	4a47      	ldr	r2, [pc, #284]	@ (34006160 <HAL_RCCEx_PeriphCLKConfig+0xe70>)
34006042:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006046:	4291      	cmp	r1, r2
34006048:	d00a      	beq.n	34006060 <HAL_RCCEx_PeriphCLKConfig+0xd70>
3400604a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400604e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006052:	4293      	cmp	r3, r2
34006054:	d004      	beq.n	34006060 <HAL_RCCEx_PeriphCLKConfig+0xd70>
34006056:	f240 416b 	movw	r1, #1131	@ 0x46b
3400605a:	4839      	ldr	r0, [pc, #228]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400605c:	f7fb f9a6 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34006060:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34006064:	4a3f      	ldr	r2, [pc, #252]	@ (34006164 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
34006066:	4293      	cmp	r3, r2
34006068:	f041 845b 	bne.w	34007922 <HAL_RCCEx_PeriphCLKConfig+0x2632>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400606c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400606e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006072:	d004      	beq.n	3400607e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
34006074:	f44f 618e 	mov.w	r1, #1136	@ 0x470
34006078:	4831      	ldr	r0, [pc, #196]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400607a:	f7fb f997 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400607e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006080:	3b01      	subs	r3, #1
34006082:	2bff      	cmp	r3, #255	@ 0xff
34006084:	d904      	bls.n	34006090 <HAL_RCCEx_PeriphCLKConfig+0xda0>
34006086:	f240 4171 	movw	r1, #1137	@ 0x471
3400608a:	482d      	ldr	r0, [pc, #180]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400608c:	f7fb f98e 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006090:	4a2c      	ldr	r2, [pc, #176]	@ (34006144 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34006092:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006094:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006098:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400609a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400609e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340060a2:	3901      	subs	r1, #1
340060a4:	4303      	orrs	r3, r0
340060a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340060aa:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340060ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340060b2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340060b6:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
340060ba:	f7ff f835 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
340060be:	6823      	ldr	r3, [r4, #0]
340060c0:	02db      	lsls	r3, r3, #11
340060c2:	d55b      	bpl.n	3400617c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
340060c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
340060c8:	4a27      	ldr	r2, [pc, #156]	@ (34006168 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
340060ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340060ce:	4291      	cmp	r1, r2
340060d0:	d00a      	beq.n	340060e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
340060d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340060d6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340060da:	4293      	cmp	r3, r2
340060dc:	d004      	beq.n	340060e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
340060de:	f240 418b 	movw	r1, #1163	@ 0x48b
340060e2:	4817      	ldr	r0, [pc, #92]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340060e4:	f7fb f962 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
340060e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
340060ec:	4a1f      	ldr	r2, [pc, #124]	@ (3400616c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
340060ee:	4293      	cmp	r3, r2
340060f0:	f041 8420 	bne.w	34007934 <HAL_RCCEx_PeriphCLKConfig+0x2644>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340060f4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340060f6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340060fa:	d004      	beq.n	34006106 <HAL_RCCEx_PeriphCLKConfig+0xe16>
340060fc:	f44f 6192 	mov.w	r1, #1168	@ 0x490
34006100:	480f      	ldr	r0, [pc, #60]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006102:	f7fb f953 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006106:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006108:	3b01      	subs	r3, #1
3400610a:	2bff      	cmp	r3, #255	@ 0xff
3400610c:	d904      	bls.n	34006118 <HAL_RCCEx_PeriphCLKConfig+0xe28>
3400610e:	f240 4191 	movw	r1, #1169	@ 0x491
34006112:	480b      	ldr	r0, [pc, #44]	@ (34006140 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006114:	f7fb f94a 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006118:	4a0a      	ldr	r2, [pc, #40]	@ (34006144 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
3400611a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400611c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006120:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006122:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006126:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400612a:	3901      	subs	r1, #1
3400612c:	4303      	orrs	r3, r0
3400612e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006132:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006136:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400613a:	e019      	b.n	34006170 <HAL_RCCEx_PeriphCLKConfig+0xe80>
3400613c:	07020c0c 	.word	0x07020c0c
34006140:	34010a58 	.word	0x34010a58
34006144:	56028000 	.word	0x56028000
34006148:	0700100c 	.word	0x0700100c
3400614c:	0702100c 	.word	0x0702100c
34006150:	0700140c 	.word	0x0700140c
34006154:	0702140c 	.word	0x0702140c
34006158:	0700082c 	.word	0x0700082c
3400615c:	0702082c 	.word	0x0702082c
34006160:	07000c2c 	.word	0x07000c2c
34006164:	07020c2c 	.word	0x07020c2c
34006168:	0700102c 	.word	0x0700102c
3400616c:	0702102c 	.word	0x0702102c
34006170:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006174:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
34006178:	f7fe ffd6 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3400617c:	6823      	ldr	r3, [r4, #0]
3400617e:	029e      	lsls	r6, r3, #10
34006180:	d540      	bpl.n	34006204 <HAL_RCCEx_PeriphCLKConfig+0xf14>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
34006182:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34006186:	4ac2      	ldr	r2, [pc, #776]	@ (34006490 <HAL_RCCEx_PeriphCLKConfig+0x11a0>)
34006188:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400618c:	4291      	cmp	r1, r2
3400618e:	d00a      	beq.n	340061a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34006190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006194:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006198:	4293      	cmp	r3, r2
3400619a:	d004      	beq.n	340061a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
3400619c:	f240 41ab 	movw	r1, #1195	@ 0x4ab
340061a0:	48bc      	ldr	r0, [pc, #752]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340061a2:	f7fb f903 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
340061a6:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
340061aa:	4abb      	ldr	r2, [pc, #748]	@ (34006498 <HAL_RCCEx_PeriphCLKConfig+0x11a8>)
340061ac:	4293      	cmp	r3, r2
340061ae:	f041 83ca 	bne.w	34007946 <HAL_RCCEx_PeriphCLKConfig+0x2656>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340061b2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340061b4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340061b8:	d004      	beq.n	340061c4 <HAL_RCCEx_PeriphCLKConfig+0xed4>
340061ba:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
340061be:	48b5      	ldr	r0, [pc, #724]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340061c0:	f7fb f8f4 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340061c4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340061c6:	3b01      	subs	r3, #1
340061c8:	2bff      	cmp	r3, #255	@ 0xff
340061ca:	d904      	bls.n	340061d6 <HAL_RCCEx_PeriphCLKConfig+0xee6>
340061cc:	f240 41b1 	movw	r1, #1201	@ 0x4b1
340061d0:	48b0      	ldr	r0, [pc, #704]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340061d2:	f7fb f8eb 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340061d6:	4ab1      	ldr	r2, [pc, #708]	@ (3400649c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340061d8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340061da:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340061de:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340061e0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340061e4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340061e8:	3901      	subs	r1, #1
340061ea:	4303      	orrs	r3, r0
340061ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340061f0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340061f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340061f8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340061fc:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
34006200:	f7fe ff92 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34006204:	6823      	ldr	r3, [r4, #0]
34006206:	0258      	lsls	r0, r3, #9
34006208:	d540      	bpl.n	3400628c <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
3400620a:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
3400620e:	4aa4      	ldr	r2, [pc, #656]	@ (340064a0 <HAL_RCCEx_PeriphCLKConfig+0x11b0>)
34006210:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006214:	4291      	cmp	r1, r2
34006216:	d00a      	beq.n	3400622e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34006218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400621c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006220:	4293      	cmp	r3, r2
34006222:	d004      	beq.n	3400622e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34006224:	f240 41cb 	movw	r1, #1227	@ 0x4cb
34006228:	489a      	ldr	r0, [pc, #616]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400622a:	f7fb f8bf 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3400622e:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34006232:	4a9c      	ldr	r2, [pc, #624]	@ (340064a4 <HAL_RCCEx_PeriphCLKConfig+0x11b4>)
34006234:	4293      	cmp	r3, r2
34006236:	f041 838f 	bne.w	34007958 <HAL_RCCEx_PeriphCLKConfig+0x2668>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400623a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400623c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006240:	d004      	beq.n	3400624c <HAL_RCCEx_PeriphCLKConfig+0xf5c>
34006242:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
34006246:	4893      	ldr	r0, [pc, #588]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006248:	f7fb f8b0 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400624c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400624e:	3b01      	subs	r3, #1
34006250:	2bff      	cmp	r3, #255	@ 0xff
34006252:	d904      	bls.n	3400625e <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34006254:	f240 41d1 	movw	r1, #1233	@ 0x4d1
34006258:	488e      	ldr	r0, [pc, #568]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400625a:	f7fb f8a7 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400625e:	4a8f      	ldr	r2, [pc, #572]	@ (3400649c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006260:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006262:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006266:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006268:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400626c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006270:	3901      	subs	r1, #1
34006272:	4303      	orrs	r3, r0
34006274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006278:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400627c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006280:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006284:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
34006288:	f7fe ff4e 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3400628c:	6823      	ldr	r3, [r4, #0]
3400628e:	0219      	lsls	r1, r3, #8
34006290:	d546      	bpl.n	34006320 <HAL_RCCEx_PeriphCLKConfig+0x1030>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
34006292:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
34006296:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
3400629a:	d00c      	beq.n	340062b6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
3400629c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
340062a0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
340062a4:	d007      	beq.n	340062b6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
340062a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
340062aa:	d004      	beq.n	340062b6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
340062ac:	f240 41eb 	movw	r1, #1259	@ 0x4eb
340062b0:	4878      	ldr	r0, [pc, #480]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340062b2:	f7fb f87b 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
340062b6:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
340062ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340062be:	f041 8354 	bne.w	3400796a <HAL_RCCEx_PeriphCLKConfig+0x267a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340062c2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340062c4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340062c8:	d004      	beq.n	340062d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
340062ca:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
340062ce:	4871      	ldr	r0, [pc, #452]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340062d0:	f7fb f86c 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340062d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340062d6:	3b01      	subs	r3, #1
340062d8:	2bff      	cmp	r3, #255	@ 0xff
340062da:	d904      	bls.n	340062e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
340062dc:	f240 41f1 	movw	r1, #1265	@ 0x4f1
340062e0:	486c      	ldr	r0, [pc, #432]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340062e2:	f7fb f863 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340062e6:	4a6d      	ldr	r2, [pc, #436]	@ (3400649c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340062e8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340062ea:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340062ee:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340062f0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340062f4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340062f8:	3901      	subs	r1, #1
340062fa:	4303      	orrs	r3, r0
340062fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006300:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006304:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006308:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
3400630c:	4a63      	ldr	r2, [pc, #396]	@ (3400649c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400630e:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
34006312:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34006316:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
3400631a:	430b      	orrs	r3, r1
3400631c:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34006320:	6823      	ldr	r3, [r4, #0]
34006322:	01da      	lsls	r2, r3, #7
34006324:	d542      	bpl.n	340063ac <HAL_RCCEx_PeriphCLKConfig+0x10bc>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
34006326:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
3400632a:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
3400632e:	d004      	beq.n	3400633a <HAL_RCCEx_PeriphCLKConfig+0x104a>
34006330:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
34006334:	4857      	ldr	r0, [pc, #348]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006336:	f7fb f839 	bl	340013ac <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3400633a:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
3400633e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34006342:	f041 8343 	bne.w	340079cc <HAL_RCCEx_PeriphCLKConfig+0x26dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
34006346:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
3400634a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400634e:	d004      	beq.n	3400635a <HAL_RCCEx_PeriphCLKConfig+0x106a>
34006350:	f240 511d 	movw	r1, #1309	@ 0x51d
34006354:	484f      	ldr	r0, [pc, #316]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006356:	f7fb f829 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3400635a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
3400635e:	3b01      	subs	r3, #1
34006360:	2bff      	cmp	r3, #255	@ 0xff
34006362:	d904      	bls.n	3400636e <HAL_RCCEx_PeriphCLKConfig+0x107e>
34006364:	f240 511e 	movw	r1, #1310	@ 0x51e
34006368:	484a      	ldr	r0, [pc, #296]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400636a:	f7fb f81f 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3400636e:	4a4b      	ldr	r2, [pc, #300]	@ (3400649c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006370:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
34006374:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
34006378:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
3400637c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006380:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006384:	3901      	subs	r1, #1
34006386:	4303      	orrs	r3, r0
34006388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400638c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34006390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34006394:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34006398:	4a40      	ldr	r2, [pc, #256]	@ (3400649c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400639a:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
3400639e:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
340063a2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
340063a6:	430b      	orrs	r3, r1
340063a8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
340063ac:	6823      	ldr	r3, [r4, #0]
340063ae:	019b      	lsls	r3, r3, #6
340063b0:	d540      	bpl.n	34006434 <HAL_RCCEx_PeriphCLKConfig+0x1144>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
340063b2:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340063b6:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340063ba:	d007      	beq.n	340063cc <HAL_RCCEx_PeriphCLKConfig+0x10dc>
340063bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340063c0:	d004      	beq.n	340063cc <HAL_RCCEx_PeriphCLKConfig+0x10dc>
340063c2:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
340063c6:	4833      	ldr	r0, [pc, #204]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340063c8:	f7fa fff0 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
340063cc:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340063d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340063d4:	f041 8303 	bne.w	340079de <HAL_RCCEx_PeriphCLKConfig+0x26ee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340063d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340063da:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340063de:	d004      	beq.n	340063ea <HAL_RCCEx_PeriphCLKConfig+0x10fa>
340063e0:	f240 513d 	movw	r1, #1341	@ 0x53d
340063e4:	482b      	ldr	r0, [pc, #172]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340063e6:	f7fa ffe1 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340063ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340063ec:	3b01      	subs	r3, #1
340063ee:	2bff      	cmp	r3, #255	@ 0xff
340063f0:	d904      	bls.n	340063fc <HAL_RCCEx_PeriphCLKConfig+0x110c>
340063f2:	f240 513e 	movw	r1, #1342	@ 0x53e
340063f6:	4827      	ldr	r0, [pc, #156]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340063f8:	f7fa ffd8 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340063fc:	4a27      	ldr	r2, [pc, #156]	@ (3400649c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340063fe:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006400:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006404:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006406:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400640a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400640e:	3901      	subs	r1, #1
34006410:	4303      	orrs	r3, r0
34006412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006416:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400641a:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400641c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34006420:	4a1e      	ldr	r2, [pc, #120]	@ (3400649c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006422:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
34006426:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
3400642a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3400642e:	430b      	orrs	r3, r1
34006430:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34006434:	6823      	ldr	r3, [r4, #0]
34006436:	015e      	lsls	r6, r3, #5
34006438:	d54e      	bpl.n	340064d8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3400643a:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
3400643e:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34006442:	d004      	beq.n	3400644e <HAL_RCCEx_PeriphCLKConfig+0x115e>
34006444:	f240 5165 	movw	r1, #1381	@ 0x565
34006448:	4812      	ldr	r0, [pc, #72]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400644a:	f7fa ffaf 	bl	340013ac <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3400644e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
34006452:	2b20      	cmp	r3, #32
34006454:	f041 82f3 	bne.w	34007a3e <HAL_RCCEx_PeriphCLKConfig+0x274e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34006458:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
3400645c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006460:	d004      	beq.n	3400646c <HAL_RCCEx_PeriphCLKConfig+0x117c>
34006462:	f240 516a 	movw	r1, #1386	@ 0x56a
34006466:	480b      	ldr	r0, [pc, #44]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006468:	f7fa ffa0 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400646c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34006470:	3b01      	subs	r3, #1
34006472:	2bff      	cmp	r3, #255	@ 0xff
34006474:	d904      	bls.n	34006480 <HAL_RCCEx_PeriphCLKConfig+0x1190>
34006476:	f240 516b 	movw	r1, #1387	@ 0x56b
3400647a:	4806      	ldr	r0, [pc, #24]	@ (34006494 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400647c:	f7fa ff96 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34006480:	4a06      	ldr	r2, [pc, #24]	@ (3400649c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006482:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34006486:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
3400648a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
3400648e:	e00b      	b.n	340064a8 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
34006490:	0700142c 	.word	0x0700142c
34006494:	34010a58 	.word	0x34010a58
34006498:	0702142c 	.word	0x0702142c
3400649c:	56028000 	.word	0x56028000
340064a0:	0700182c 	.word	0x0700182c
340064a4:	0702182c 	.word	0x0702182c
340064a8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340064ac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340064b0:	3901      	subs	r1, #1
340064b2:	4303      	orrs	r3, r0
340064b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340064b8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340064bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
340064c0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
340064c4:	4abc      	ldr	r2, [pc, #752]	@ (340067b8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340064c6:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
340064ca:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340064ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340064d2:	430b      	orrs	r3, r1
340064d4:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
340064d8:	6823      	ldr	r3, [r4, #0]
340064da:	00d8      	lsls	r0, r3, #3
340064dc:	d53d      	bpl.n	3400655a <HAL_RCCEx_PeriphCLKConfig+0x126a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
340064de:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340064e2:	4ab6      	ldr	r2, [pc, #728]	@ (340067bc <HAL_RCCEx_PeriphCLKConfig+0x14cc>)
340064e4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340064e8:	4293      	cmp	r3, r2
340064ea:	d008      	beq.n	340064fe <HAL_RCCEx_PeriphCLKConfig+0x120e>
340064ec:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340064f0:	4293      	cmp	r3, r2
340064f2:	d004      	beq.n	340064fe <HAL_RCCEx_PeriphCLKConfig+0x120e>
340064f4:	f240 5185 	movw	r1, #1413	@ 0x585
340064f8:	48b1      	ldr	r0, [pc, #708]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340064fa:	f7fa ff57 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
340064fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
34006502:	4ab0      	ldr	r2, [pc, #704]	@ (340067c4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>)
34006504:	4293      	cmp	r3, r2
34006506:	f041 82c1 	bne.w	34007a8c <HAL_RCCEx_PeriphCLKConfig+0x279c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400650a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400650c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006510:	d004      	beq.n	3400651c <HAL_RCCEx_PeriphCLKConfig+0x122c>
34006512:	f240 518a 	movw	r1, #1418	@ 0x58a
34006516:	48aa      	ldr	r0, [pc, #680]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006518:	f7fa ff48 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400651c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400651e:	3b01      	subs	r3, #1
34006520:	2bff      	cmp	r3, #255	@ 0xff
34006522:	d904      	bls.n	3400652e <HAL_RCCEx_PeriphCLKConfig+0x123e>
34006524:	f240 518b 	movw	r1, #1419	@ 0x58b
34006528:	48a5      	ldr	r0, [pc, #660]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400652a:	f7fa ff3f 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400652e:	4aa2      	ldr	r2, [pc, #648]	@ (340067b8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006530:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006532:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006536:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006538:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400653c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006540:	3901      	subs	r1, #1
34006542:	4303      	orrs	r3, r0
34006544:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006548:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400654c:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400654e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006552:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
34006556:	f7fe fde7 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3400655a:	6823      	ldr	r3, [r4, #0]
3400655c:	0099      	lsls	r1, r3, #2
3400655e:	d53d      	bpl.n	340065dc <HAL_RCCEx_PeriphCLKConfig+0x12ec>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
34006560:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34006564:	4a98      	ldr	r2, [pc, #608]	@ (340067c8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>)
34006566:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400656a:	4293      	cmp	r3, r2
3400656c:	d008      	beq.n	34006580 <HAL_RCCEx_PeriphCLKConfig+0x1290>
3400656e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006572:	4293      	cmp	r3, r2
34006574:	d004      	beq.n	34006580 <HAL_RCCEx_PeriphCLKConfig+0x1290>
34006576:	f240 51b2 	movw	r1, #1458	@ 0x5b2
3400657a:	4891      	ldr	r0, [pc, #580]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400657c:	f7fa ff16 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
34006580:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34006584:	4a91      	ldr	r2, [pc, #580]	@ (340067cc <HAL_RCCEx_PeriphCLKConfig+0x14dc>)
34006586:	4293      	cmp	r3, r2
34006588:	f041 82b0 	bne.w	34007aec <HAL_RCCEx_PeriphCLKConfig+0x27fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400658c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400658e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006592:	d004      	beq.n	3400659e <HAL_RCCEx_PeriphCLKConfig+0x12ae>
34006594:	f240 51b7 	movw	r1, #1463	@ 0x5b7
34006598:	4889      	ldr	r0, [pc, #548]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400659a:	f7fa ff07 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400659e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340065a0:	3b01      	subs	r3, #1
340065a2:	2bff      	cmp	r3, #255	@ 0xff
340065a4:	d904      	bls.n	340065b0 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
340065a6:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
340065aa:	4885      	ldr	r0, [pc, #532]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340065ac:	f7fa fefe 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340065b0:	4a81      	ldr	r2, [pc, #516]	@ (340067b8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340065b2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340065b4:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340065b8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340065ba:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340065be:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340065c2:	3901      	subs	r1, #1
340065c4:	4303      	orrs	r3, r0
340065c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340065ca:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340065ce:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340065d0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340065d4:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
340065d8:	f7fe fda6 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
340065dc:	6863      	ldr	r3, [r4, #4]
340065de:	07da      	lsls	r2, r3, #31
340065e0:	d53b      	bpl.n	3400665a <HAL_RCCEx_PeriphCLKConfig+0x136a>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
340065e2:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
340065e6:	2b06      	cmp	r3, #6
340065e8:	d904      	bls.n	340065f4 <HAL_RCCEx_PeriphCLKConfig+0x1304>
340065ea:	f240 51df 	movw	r1, #1503	@ 0x5df
340065ee:	4874      	ldr	r0, [pc, #464]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340065f0:	f7fa fedc 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
340065f4:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
340065f8:	2b02      	cmp	r3, #2
340065fa:	f041 82a7 	bne.w	34007b4c <HAL_RCCEx_PeriphCLKConfig+0x285c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340065fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006600:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006604:	d004      	beq.n	34006610 <HAL_RCCEx_PeriphCLKConfig+0x1320>
34006606:	f240 51e4 	movw	r1, #1508	@ 0x5e4
3400660a:	486d      	ldr	r0, [pc, #436]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400660c:	f7fa fece 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006610:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006612:	3b01      	subs	r3, #1
34006614:	2bff      	cmp	r3, #255	@ 0xff
34006616:	d904      	bls.n	34006622 <HAL_RCCEx_PeriphCLKConfig+0x1332>
34006618:	f240 51e5 	movw	r1, #1509	@ 0x5e5
3400661c:	4868      	ldr	r0, [pc, #416]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400661e:	f7fa fec5 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006622:	4a65      	ldr	r2, [pc, #404]	@ (340067b8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006624:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006626:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400662a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400662c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006630:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006634:	3901      	subs	r1, #1
34006636:	4303      	orrs	r3, r0
34006638:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400663c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006640:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006642:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34006646:	4a5c      	ldr	r2, [pc, #368]	@ (340067b8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006648:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
3400664c:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
34006650:	f023 0307 	bic.w	r3, r3, #7
34006654:	430b      	orrs	r3, r1
34006656:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3400665a:	6863      	ldr	r3, [r4, #4]
3400665c:	079b      	lsls	r3, r3, #30
3400665e:	d543      	bpl.n	340066e8 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
34006660:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34006664:	4a5a      	ldr	r2, [pc, #360]	@ (340067d0 <HAL_RCCEx_PeriphCLKConfig+0x14e0>)
34006666:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400666a:	4291      	cmp	r1, r2
3400666c:	d00e      	beq.n	3400668c <HAL_RCCEx_PeriphCLKConfig+0x139c>
3400666e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006672:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006676:	4291      	cmp	r1, r2
34006678:	d008      	beq.n	3400668c <HAL_RCCEx_PeriphCLKConfig+0x139c>
3400667a:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400667e:	4293      	cmp	r3, r2
34006680:	d004      	beq.n	3400668c <HAL_RCCEx_PeriphCLKConfig+0x139c>
34006682:	f240 610c 	movw	r1, #1548	@ 0x60c
34006686:	484e      	ldr	r0, [pc, #312]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006688:	f7fa fe90 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3400668c:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34006690:	4a50      	ldr	r2, [pc, #320]	@ (340067d4 <HAL_RCCEx_PeriphCLKConfig+0x14e4>)
34006692:	4293      	cmp	r3, r2
34006694:	f041 8288 	bne.w	34007ba8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006698:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400669a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400669e:	d004      	beq.n	340066aa <HAL_RCCEx_PeriphCLKConfig+0x13ba>
340066a0:	f240 6111 	movw	r1, #1553	@ 0x611
340066a4:	4846      	ldr	r0, [pc, #280]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340066a6:	f7fa fe81 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340066aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340066ac:	3b01      	subs	r3, #1
340066ae:	2bff      	cmp	r3, #255	@ 0xff
340066b0:	d904      	bls.n	340066bc <HAL_RCCEx_PeriphCLKConfig+0x13cc>
340066b2:	f240 6112 	movw	r1, #1554	@ 0x612
340066b6:	4842      	ldr	r0, [pc, #264]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340066b8:	f7fa fe78 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340066bc:	4a3e      	ldr	r2, [pc, #248]	@ (340067b8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340066be:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340066c0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340066c4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340066c6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340066ca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340066ce:	3901      	subs	r1, #1
340066d0:	4303      	orrs	r3, r0
340066d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340066d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340066da:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340066dc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340066e0:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
340066e4:	f7fe fd20 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
340066e8:	6863      	ldr	r3, [r4, #4]
340066ea:	075e      	lsls	r6, r3, #29
340066ec:	d543      	bpl.n	34006776 <HAL_RCCEx_PeriphCLKConfig+0x1486>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
340066ee:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
340066f2:	4a39      	ldr	r2, [pc, #228]	@ (340067d8 <HAL_RCCEx_PeriphCLKConfig+0x14e8>)
340066f4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340066f8:	4291      	cmp	r1, r2
340066fa:	d00e      	beq.n	3400671a <HAL_RCCEx_PeriphCLKConfig+0x142a>
340066fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006700:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006704:	4291      	cmp	r1, r2
34006706:	d008      	beq.n	3400671a <HAL_RCCEx_PeriphCLKConfig+0x142a>
34006708:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400670c:	4293      	cmp	r3, r2
3400670e:	d004      	beq.n	3400671a <HAL_RCCEx_PeriphCLKConfig+0x142a>
34006710:	f240 6139 	movw	r1, #1593	@ 0x639
34006714:	482a      	ldr	r0, [pc, #168]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006716:	f7fa fe49 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3400671a:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
3400671e:	4a2f      	ldr	r2, [pc, #188]	@ (340067dc <HAL_RCCEx_PeriphCLKConfig+0x14ec>)
34006720:	4293      	cmp	r3, r2
34006722:	f041 8272 	bne.w	34007c0a <HAL_RCCEx_PeriphCLKConfig+0x291a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006726:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006728:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400672c:	d004      	beq.n	34006738 <HAL_RCCEx_PeriphCLKConfig+0x1448>
3400672e:	f240 613e 	movw	r1, #1598	@ 0x63e
34006732:	4823      	ldr	r0, [pc, #140]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006734:	f7fa fe3a 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006738:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400673a:	3b01      	subs	r3, #1
3400673c:	2bff      	cmp	r3, #255	@ 0xff
3400673e:	d904      	bls.n	3400674a <HAL_RCCEx_PeriphCLKConfig+0x145a>
34006740:	f240 613f 	movw	r1, #1599	@ 0x63f
34006744:	481e      	ldr	r0, [pc, #120]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006746:	f7fa fe31 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400674a:	4a1b      	ldr	r2, [pc, #108]	@ (340067b8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3400674c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3400674e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006752:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006754:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006758:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400675c:	3901      	subs	r1, #1
3400675e:	4303      	orrs	r3, r0
34006760:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006768:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400676a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400676e:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
34006772:	f7fe fcd9 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34006776:	6863      	ldr	r3, [r4, #4]
34006778:	0718      	lsls	r0, r3, #28
3400677a:	d55d      	bpl.n	34006838 <HAL_RCCEx_PeriphCLKConfig+0x1548>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
3400677c:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34006780:	4a17      	ldr	r2, [pc, #92]	@ (340067e0 <HAL_RCCEx_PeriphCLKConfig+0x14f0>)
34006782:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006786:	4291      	cmp	r1, r2
34006788:	d00e      	beq.n	340067a8 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
3400678a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400678e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006792:	4291      	cmp	r1, r2
34006794:	d008      	beq.n	340067a8 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34006796:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400679a:	4293      	cmp	r3, r2
3400679c:	d004      	beq.n	340067a8 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
3400679e:	f240 6166 	movw	r1, #1638	@ 0x666
340067a2:	4807      	ldr	r0, [pc, #28]	@ (340067c0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340067a4:	f7fa fe02 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
340067a8:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
340067ac:	4a0d      	ldr	r2, [pc, #52]	@ (340067e4 <HAL_RCCEx_PeriphCLKConfig+0x14f4>)
340067ae:	4293      	cmp	r3, r2
340067b0:	f041 825c 	bne.w	34007c6c <HAL_RCCEx_PeriphCLKConfig+0x297c>
340067b4:	e018      	b.n	340067e8 <HAL_RCCEx_PeriphCLKConfig+0x14f8>
340067b6:	bf00      	nop
340067b8:	56028000 	.word	0x56028000
340067bc:	07001418 	.word	0x07001418
340067c0:	34010a58 	.word	0x34010a58
340067c4:	07021418 	.word	0x07021418
340067c8:	07001818 	.word	0x07001818
340067cc:	07021818 	.word	0x07021818
340067d0:	07000420 	.word	0x07000420
340067d4:	07020420 	.word	0x07020420
340067d8:	07000820 	.word	0x07000820
340067dc:	07020820 	.word	0x07020820
340067e0:	07000c20 	.word	0x07000c20
340067e4:	07020c20 	.word	0x07020c20
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340067e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340067ea:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340067ee:	d004      	beq.n	340067fa <HAL_RCCEx_PeriphCLKConfig+0x150a>
340067f0:	f240 616b 	movw	r1, #1643	@ 0x66b
340067f4:	48bb      	ldr	r0, [pc, #748]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340067f6:	f7fa fdd9 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340067fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340067fc:	3b01      	subs	r3, #1
340067fe:	2bff      	cmp	r3, #255	@ 0xff
34006800:	d904      	bls.n	3400680c <HAL_RCCEx_PeriphCLKConfig+0x151c>
34006802:	f240 616c 	movw	r1, #1644	@ 0x66c
34006806:	48b7      	ldr	r0, [pc, #732]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006808:	f7fa fdd0 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400680c:	4ab6      	ldr	r2, [pc, #728]	@ (34006ae8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
3400680e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006810:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006814:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006816:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400681a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400681e:	3901      	subs	r1, #1
34006820:	4303      	orrs	r3, r0
34006822:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400682a:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400682c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006830:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
34006834:	f7fe fc78 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34006838:	6863      	ldr	r3, [r4, #4]
3400683a:	06d9      	lsls	r1, r3, #27
3400683c:	d544      	bpl.n	340068c8 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
3400683e:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34006842:	4aaa      	ldr	r2, [pc, #680]	@ (34006aec <HAL_RCCEx_PeriphCLKConfig+0x17fc>)
34006844:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006848:	4291      	cmp	r1, r2
3400684a:	d00e      	beq.n	3400686a <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400684c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006850:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006854:	4291      	cmp	r1, r2
34006856:	d008      	beq.n	3400686a <HAL_RCCEx_PeriphCLKConfig+0x157a>
34006858:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400685c:	4293      	cmp	r3, r2
3400685e:	d004      	beq.n	3400686a <HAL_RCCEx_PeriphCLKConfig+0x157a>
34006860:	f240 6193 	movw	r1, #1683	@ 0x693
34006864:	489f      	ldr	r0, [pc, #636]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006866:	f7fa fda1 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3400686a:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400686e:	4aa0      	ldr	r2, [pc, #640]	@ (34006af0 <HAL_RCCEx_PeriphCLKConfig+0x1800>)
34006870:	4293      	cmp	r3, r2
34006872:	f041 822c 	bne.w	34007cce <HAL_RCCEx_PeriphCLKConfig+0x29de>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006876:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006878:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400687c:	d004      	beq.n	34006888 <HAL_RCCEx_PeriphCLKConfig+0x1598>
3400687e:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
34006882:	4898      	ldr	r0, [pc, #608]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006884:	f7fa fd92 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006888:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400688a:	3b01      	subs	r3, #1
3400688c:	2bff      	cmp	r3, #255	@ 0xff
3400688e:	d904      	bls.n	3400689a <HAL_RCCEx_PeriphCLKConfig+0x15aa>
34006890:	f240 6199 	movw	r1, #1689	@ 0x699
34006894:	4893      	ldr	r0, [pc, #588]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006896:	f7fa fd89 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400689a:	4a93      	ldr	r2, [pc, #588]	@ (34006ae8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
3400689c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400689e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340068a2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340068a4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340068a8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340068ac:	3901      	subs	r1, #1
340068ae:	4303      	orrs	r3, r0
340068b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340068b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340068b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340068bc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340068c0:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
340068c4:	f7fe fc30 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
340068c8:	6863      	ldr	r3, [r4, #4]
340068ca:	069a      	lsls	r2, r3, #26
340068cc:	d544      	bpl.n	34006958 <HAL_RCCEx_PeriphCLKConfig+0x1668>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
340068ce:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
340068d2:	4a88      	ldr	r2, [pc, #544]	@ (34006af4 <HAL_RCCEx_PeriphCLKConfig+0x1804>)
340068d4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340068d8:	4291      	cmp	r1, r2
340068da:	d00e      	beq.n	340068fa <HAL_RCCEx_PeriphCLKConfig+0x160a>
340068dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340068e0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340068e4:	4291      	cmp	r1, r2
340068e6:	d008      	beq.n	340068fa <HAL_RCCEx_PeriphCLKConfig+0x160a>
340068e8:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340068ec:	4293      	cmp	r3, r2
340068ee:	d004      	beq.n	340068fa <HAL_RCCEx_PeriphCLKConfig+0x160a>
340068f0:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
340068f4:	487b      	ldr	r0, [pc, #492]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340068f6:	f7fa fd59 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
340068fa:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
340068fe:	4a7e      	ldr	r2, [pc, #504]	@ (34006af8 <HAL_RCCEx_PeriphCLKConfig+0x1808>)
34006900:	4293      	cmp	r3, r2
34006902:	f041 8231 	bne.w	34007d68 <HAL_RCCEx_PeriphCLKConfig+0x2a78>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006906:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006908:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400690c:	d004      	beq.n	34006918 <HAL_RCCEx_PeriphCLKConfig+0x1628>
3400690e:	f240 61c5 	movw	r1, #1733	@ 0x6c5
34006912:	4874      	ldr	r0, [pc, #464]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006914:	f7fa fd4a 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006918:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400691a:	3b01      	subs	r3, #1
3400691c:	2bff      	cmp	r3, #255	@ 0xff
3400691e:	d904      	bls.n	3400692a <HAL_RCCEx_PeriphCLKConfig+0x163a>
34006920:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34006924:	486f      	ldr	r0, [pc, #444]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006926:	f7fa fd41 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400692a:	4a6f      	ldr	r2, [pc, #444]	@ (34006ae8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
3400692c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400692e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006932:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006934:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006938:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400693c:	3901      	subs	r1, #1
3400693e:	4303      	orrs	r3, r0
34006940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006944:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006948:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400694c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006950:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34006954:	f7fe fbe8 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34006958:	6863      	ldr	r3, [r4, #4]
3400695a:	065b      	lsls	r3, r3, #25
3400695c:	d543      	bpl.n	340069e6 <HAL_RCCEx_PeriphCLKConfig+0x16f6>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
3400695e:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34006962:	4a66      	ldr	r2, [pc, #408]	@ (34006afc <HAL_RCCEx_PeriphCLKConfig+0x180c>)
34006964:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006968:	4291      	cmp	r1, r2
3400696a:	d00e      	beq.n	3400698a <HAL_RCCEx_PeriphCLKConfig+0x169a>
3400696c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006970:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006974:	4291      	cmp	r1, r2
34006976:	d008      	beq.n	3400698a <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006978:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400697c:	4293      	cmp	r3, r2
3400697e:	d004      	beq.n	3400698a <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006980:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34006984:	4857      	ldr	r0, [pc, #348]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006986:	f7fa fd11 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3400698a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
3400698e:	4a5c      	ldr	r2, [pc, #368]	@ (34006b00 <HAL_RCCEx_PeriphCLKConfig+0x1810>)
34006990:	4293      	cmp	r3, r2
34006992:	f041 821a 	bne.w	34007dca <HAL_RCCEx_PeriphCLKConfig+0x2ada>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006996:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006998:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400699c:	d004      	beq.n	340069a8 <HAL_RCCEx_PeriphCLKConfig+0x16b8>
3400699e:	f240 61f2 	movw	r1, #1778	@ 0x6f2
340069a2:	4850      	ldr	r0, [pc, #320]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340069a4:	f7fa fd02 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340069a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340069aa:	3b01      	subs	r3, #1
340069ac:	2bff      	cmp	r3, #255	@ 0xff
340069ae:	d904      	bls.n	340069ba <HAL_RCCEx_PeriphCLKConfig+0x16ca>
340069b0:	f240 61f3 	movw	r1, #1779	@ 0x6f3
340069b4:	484b      	ldr	r0, [pc, #300]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340069b6:	f7fa fcf9 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340069ba:	4a4b      	ldr	r2, [pc, #300]	@ (34006ae8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
340069bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340069be:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340069c2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340069c4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340069c8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340069cc:	3901      	subs	r1, #1
340069ce:	4303      	orrs	r3, r0
340069d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340069d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340069d8:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340069da:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340069de:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
340069e2:	f7fe fba1 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
340069e6:	6863      	ldr	r3, [r4, #4]
340069e8:	05de      	lsls	r6, r3, #23
340069ea:	d544      	bpl.n	34006a76 <HAL_RCCEx_PeriphCLKConfig+0x1786>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
340069ec:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
340069f0:	4a44      	ldr	r2, [pc, #272]	@ (34006b04 <HAL_RCCEx_PeriphCLKConfig+0x1814>)
340069f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340069f6:	4291      	cmp	r1, r2
340069f8:	d00e      	beq.n	34006a18 <HAL_RCCEx_PeriphCLKConfig+0x1728>
340069fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340069fe:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006a02:	4291      	cmp	r1, r2
34006a04:	d008      	beq.n	34006a18 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006a06:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006a0a:	4293      	cmp	r3, r2
34006a0c:	d004      	beq.n	34006a18 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006a0e:	f240 711a 	movw	r1, #1818	@ 0x71a
34006a12:	4834      	ldr	r0, [pc, #208]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a14:	f7fa fcca 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34006a18:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34006a1c:	4a3a      	ldr	r2, [pc, #232]	@ (34006b08 <HAL_RCCEx_PeriphCLKConfig+0x1818>)
34006a1e:	4293      	cmp	r3, r2
34006a20:	f041 8204 	bne.w	34007e2c <HAL_RCCEx_PeriphCLKConfig+0x2b3c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006a24:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006a26:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006a2a:	d004      	beq.n	34006a36 <HAL_RCCEx_PeriphCLKConfig+0x1746>
34006a2c:	f240 711f 	movw	r1, #1823	@ 0x71f
34006a30:	482c      	ldr	r0, [pc, #176]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a32:	f7fa fcbb 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006a36:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006a38:	3b01      	subs	r3, #1
34006a3a:	2bff      	cmp	r3, #255	@ 0xff
34006a3c:	d904      	bls.n	34006a48 <HAL_RCCEx_PeriphCLKConfig+0x1758>
34006a3e:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
34006a42:	4828      	ldr	r0, [pc, #160]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a44:	f7fa fcb2 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006a48:	4a27      	ldr	r2, [pc, #156]	@ (34006ae8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006a4a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006a4c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006a50:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006a52:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006a56:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006a5a:	3901      	subs	r1, #1
34006a5c:	4303      	orrs	r3, r0
34006a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006a62:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006a66:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006a6a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006a6e:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
34006a72:	f7fe fb59 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34006a76:	6863      	ldr	r3, [r4, #4]
34006a78:	0598      	lsls	r0, r3, #22
34006a7a:	d55d      	bpl.n	34006b38 <HAL_RCCEx_PeriphCLKConfig+0x1848>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34006a7c:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34006a80:	4a22      	ldr	r2, [pc, #136]	@ (34006b0c <HAL_RCCEx_PeriphCLKConfig+0x181c>)
34006a82:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006a86:	4291      	cmp	r1, r2
34006a88:	d00e      	beq.n	34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006a8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006a8e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006a92:	4291      	cmp	r1, r2
34006a94:	d008      	beq.n	34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006a96:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006a9a:	4293      	cmp	r3, r2
34006a9c:	d004      	beq.n	34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006a9e:	f240 7147 	movw	r1, #1863	@ 0x747
34006aa2:	4810      	ldr	r0, [pc, #64]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006aa4:	f7fa fc82 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34006aa8:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34006aac:	4a18      	ldr	r2, [pc, #96]	@ (34006b10 <HAL_RCCEx_PeriphCLKConfig+0x1820>)
34006aae:	4293      	cmp	r3, r2
34006ab0:	f041 81ed 	bne.w	34007e8e <HAL_RCCEx_PeriphCLKConfig+0x2b9e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006ab4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006ab6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006aba:	d004      	beq.n	34006ac6 <HAL_RCCEx_PeriphCLKConfig+0x17d6>
34006abc:	f240 714c 	movw	r1, #1868	@ 0x74c
34006ac0:	4808      	ldr	r0, [pc, #32]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006ac2:	f7fa fc73 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006ac6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006ac8:	3b01      	subs	r3, #1
34006aca:	2bff      	cmp	r3, #255	@ 0xff
34006acc:	d904      	bls.n	34006ad8 <HAL_RCCEx_PeriphCLKConfig+0x17e8>
34006ace:	f240 714d 	movw	r1, #1869	@ 0x74d
34006ad2:	4804      	ldr	r0, [pc, #16]	@ (34006ae4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006ad4:	f7fa fc6a 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006ad8:	4a03      	ldr	r2, [pc, #12]	@ (34006ae8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006ada:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006adc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006ae0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006ae2:	e017      	b.n	34006b14 <HAL_RCCEx_PeriphCLKConfig+0x1824>
34006ae4:	34010a58 	.word	0x34010a58
34006ae8:	56028000 	.word	0x56028000
34006aec:	07001020 	.word	0x07001020
34006af0:	07021020 	.word	0x07021020
34006af4:	07001420 	.word	0x07001420
34006af8:	07021420 	.word	0x07021420
34006afc:	07001820 	.word	0x07001820
34006b00:	07021820 	.word	0x07021820
34006b04:	07000030 	.word	0x07000030
34006b08:	07020030 	.word	0x07020030
34006b0c:	07000430 	.word	0x07000430
34006b10:	07020430 	.word	0x07020430
34006b14:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006b18:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006b1c:	3901      	subs	r1, #1
34006b1e:	4303      	orrs	r3, r0
34006b20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006b24:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006b2c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006b30:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
34006b34:	f7fe faf8 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34006b38:	6863      	ldr	r3, [r4, #4]
34006b3a:	0559      	lsls	r1, r3, #21
34006b3c:	d544      	bpl.n	34006bc8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
34006b3e:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006b42:	4abc      	ldr	r2, [pc, #752]	@ (34006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b44>)
34006b44:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006b48:	4291      	cmp	r1, r2
34006b4a:	d00e      	beq.n	34006b6a <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006b4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006b50:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006b54:	4291      	cmp	r1, r2
34006b56:	d008      	beq.n	34006b6a <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006b58:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006b5c:	4293      	cmp	r3, r2
34006b5e:	d004      	beq.n	34006b6a <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006b60:	f240 7174 	movw	r1, #1908	@ 0x774
34006b64:	48b4      	ldr	r0, [pc, #720]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006b66:	f7fa fc21 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34006b6a:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006b6e:	4ab3      	ldr	r2, [pc, #716]	@ (34006e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>)
34006b70:	4293      	cmp	r3, r2
34006b72:	f041 81bd 	bne.w	34007ef0 <HAL_RCCEx_PeriphCLKConfig+0x2c00>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006b76:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006b78:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006b7c:	d004      	beq.n	34006b88 <HAL_RCCEx_PeriphCLKConfig+0x1898>
34006b7e:	f240 7179 	movw	r1, #1913	@ 0x779
34006b82:	48ad      	ldr	r0, [pc, #692]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006b84:	f7fa fc12 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006b88:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006b8a:	3b01      	subs	r3, #1
34006b8c:	2bff      	cmp	r3, #255	@ 0xff
34006b8e:	d904      	bls.n	34006b9a <HAL_RCCEx_PeriphCLKConfig+0x18aa>
34006b90:	f240 717a 	movw	r1, #1914	@ 0x77a
34006b94:	48a8      	ldr	r0, [pc, #672]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006b96:	f7fa fc09 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006b9a:	4aa9      	ldr	r2, [pc, #676]	@ (34006e40 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006b9c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006b9e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006ba2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006ba4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006ba8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006bac:	3901      	subs	r1, #1
34006bae:	4303      	orrs	r3, r0
34006bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006bb4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006bbc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006bc0:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
34006bc4:	f7fe fab0 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34006bc8:	6863      	ldr	r3, [r4, #4]
34006bca:	051a      	lsls	r2, r3, #20
34006bcc:	d544      	bpl.n	34006c58 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
34006bce:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006bd2:	4a9c      	ldr	r2, [pc, #624]	@ (34006e44 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
34006bd4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006bd8:	4291      	cmp	r1, r2
34006bda:	d00e      	beq.n	34006bfa <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006bdc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006be0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006be4:	4291      	cmp	r1, r2
34006be6:	d008      	beq.n	34006bfa <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006be8:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006bec:	4293      	cmp	r3, r2
34006bee:	d004      	beq.n	34006bfa <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006bf0:	f240 71a1 	movw	r1, #1953	@ 0x7a1
34006bf4:	4890      	ldr	r0, [pc, #576]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006bf6:	f7fa fbd9 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34006bfa:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006bfe:	4a92      	ldr	r2, [pc, #584]	@ (34006e48 <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
34006c00:	4293      	cmp	r3, r2
34006c02:	f041 81a6 	bne.w	34007f52 <HAL_RCCEx_PeriphCLKConfig+0x2c62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006c06:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006c08:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006c0c:	d004      	beq.n	34006c18 <HAL_RCCEx_PeriphCLKConfig+0x1928>
34006c0e:	f240 71a6 	movw	r1, #1958	@ 0x7a6
34006c12:	4889      	ldr	r0, [pc, #548]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006c14:	f7fa fbca 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006c18:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006c1a:	3b01      	subs	r3, #1
34006c1c:	2bff      	cmp	r3, #255	@ 0xff
34006c1e:	d904      	bls.n	34006c2a <HAL_RCCEx_PeriphCLKConfig+0x193a>
34006c20:	f240 71a7 	movw	r1, #1959	@ 0x7a7
34006c24:	4884      	ldr	r0, [pc, #528]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006c26:	f7fa fbc1 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006c2a:	4a85      	ldr	r2, [pc, #532]	@ (34006e40 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006c2c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006c2e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006c32:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006c34:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006c38:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006c3c:	3901      	subs	r1, #1
34006c3e:	4303      	orrs	r3, r0
34006c40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006c44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006c4c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006c50:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
34006c54:	f7fe fa68 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34006c58:	6863      	ldr	r3, [r4, #4]
34006c5a:	04db      	lsls	r3, r3, #19
34006c5c:	d544      	bpl.n	34006ce8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
34006c5e:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006c62:	4a7a      	ldr	r2, [pc, #488]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x1b5c>)
34006c64:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006c68:	4291      	cmp	r1, r2
34006c6a:	d00e      	beq.n	34006c8a <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006c6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006c70:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006c74:	4291      	cmp	r1, r2
34006c76:	d008      	beq.n	34006c8a <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006c78:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006c7c:	4293      	cmp	r3, r2
34006c7e:	d004      	beq.n	34006c8a <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006c80:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34006c84:	486c      	ldr	r0, [pc, #432]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006c86:	f7fa fb91 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34006c8a:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006c8e:	4a70      	ldr	r2, [pc, #448]	@ (34006e50 <HAL_RCCEx_PeriphCLKConfig+0x1b60>)
34006c90:	4293      	cmp	r3, r2
34006c92:	f041 818f 	bne.w	34007fb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006c96:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006c98:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006c9c:	d004      	beq.n	34006ca8 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
34006c9e:	f240 71d3 	movw	r1, #2003	@ 0x7d3
34006ca2:	4865      	ldr	r0, [pc, #404]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006ca4:	f7fa fb82 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006ca8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006caa:	3b01      	subs	r3, #1
34006cac:	2bff      	cmp	r3, #255	@ 0xff
34006cae:	d904      	bls.n	34006cba <HAL_RCCEx_PeriphCLKConfig+0x19ca>
34006cb0:	f240 71d4 	movw	r1, #2004	@ 0x7d4
34006cb4:	4860      	ldr	r0, [pc, #384]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006cb6:	f7fa fb79 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006cba:	4a61      	ldr	r2, [pc, #388]	@ (34006e40 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006cbc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006cbe:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006cc2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006cc4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006cc8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006ccc:	3901      	subs	r1, #1
34006cce:	4303      	orrs	r3, r0
34006cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006cd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006cd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006cdc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006ce0:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
34006ce4:	f7fe fa20 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34006ce8:	6863      	ldr	r3, [r4, #4]
34006cea:	049e      	lsls	r6, r3, #18
34006cec:	d544      	bpl.n	34006d78 <HAL_RCCEx_PeriphCLKConfig+0x1a88>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
34006cee:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34006cf2:	4a58      	ldr	r2, [pc, #352]	@ (34006e54 <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
34006cf4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006cf8:	4291      	cmp	r1, r2
34006cfa:	d00e      	beq.n	34006d1a <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006cfc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006d00:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006d04:	4291      	cmp	r1, r2
34006d06:	d008      	beq.n	34006d1a <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006d08:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006d0c:	4293      	cmp	r3, r2
34006d0e:	d004      	beq.n	34006d1a <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006d10:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34006d14:	4848      	ldr	r0, [pc, #288]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d16:	f7fa fb49 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34006d1a:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34006d1e:	4a4e      	ldr	r2, [pc, #312]	@ (34006e58 <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
34006d20:	4293      	cmp	r3, r2
34006d22:	f041 8199 	bne.w	34008058 <HAL_RCCEx_PeriphCLKConfig+0x2d68>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006d26:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006d28:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006d2c:	d004      	beq.n	34006d38 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
34006d2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34006d32:	4841      	ldr	r0, [pc, #260]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d34:	f7fa fb3a 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006d38:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006d3a:	3b01      	subs	r3, #1
34006d3c:	2bff      	cmp	r3, #255	@ 0xff
34006d3e:	d904      	bls.n	34006d4a <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
34006d40:	f640 0101 	movw	r1, #2049	@ 0x801
34006d44:	483c      	ldr	r0, [pc, #240]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d46:	f7fa fb31 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006d4a:	4a3d      	ldr	r2, [pc, #244]	@ (34006e40 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006d4c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006d4e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006d52:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006d54:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006d58:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006d5c:	3901      	subs	r1, #1
34006d5e:	4303      	orrs	r3, r0
34006d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006d64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006d6c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006d70:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34006d74:	f7fe f9d8 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34006d78:	6863      	ldr	r3, [r4, #4]
34006d7a:	0458      	lsls	r0, r3, #17
34006d7c:	d544      	bpl.n	34006e08 <HAL_RCCEx_PeriphCLKConfig+0x1b18>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34006d7e:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006d82:	4a36      	ldr	r2, [pc, #216]	@ (34006e5c <HAL_RCCEx_PeriphCLKConfig+0x1b6c>)
34006d84:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006d88:	4291      	cmp	r1, r2
34006d8a:	d00e      	beq.n	34006daa <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006d8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006d90:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006d94:	4291      	cmp	r1, r2
34006d96:	d008      	beq.n	34006daa <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006d98:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006d9c:	4293      	cmp	r3, r2
34006d9e:	d004      	beq.n	34006daa <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006da0:	f640 0128 	movw	r1, #2088	@ 0x828
34006da4:	4824      	ldr	r0, [pc, #144]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006da6:	f7fa fb01 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34006daa:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006dae:	4a2c      	ldr	r2, [pc, #176]	@ (34006e60 <HAL_RCCEx_PeriphCLKConfig+0x1b70>)
34006db0:	4293      	cmp	r3, r2
34006db2:	f041 8182 	bne.w	340080ba <HAL_RCCEx_PeriphCLKConfig+0x2dca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006db6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006db8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006dbc:	d004      	beq.n	34006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
34006dbe:	f640 012d 	movw	r1, #2093	@ 0x82d
34006dc2:	481d      	ldr	r0, [pc, #116]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006dc4:	f7fa faf2 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006dc8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006dca:	3b01      	subs	r3, #1
34006dcc:	2bff      	cmp	r3, #255	@ 0xff
34006dce:	d904      	bls.n	34006dda <HAL_RCCEx_PeriphCLKConfig+0x1aea>
34006dd0:	f640 012e 	movw	r1, #2094	@ 0x82e
34006dd4:	4818      	ldr	r0, [pc, #96]	@ (34006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006dd6:	f7fa fae9 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006dda:	4a19      	ldr	r2, [pc, #100]	@ (34006e40 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006ddc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006dde:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006de2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006de4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006de8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006dec:	3901      	subs	r1, #1
34006dee:	4303      	orrs	r3, r0
34006df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006df4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006dfc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006e00:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
34006e04:	f7fe f990 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34006e08:	6863      	ldr	r3, [r4, #4]
34006e0a:	0419      	lsls	r1, r3, #16
34006e0c:	d560      	bpl.n	34006ed0 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34006e0e:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006e12:	4a14      	ldr	r2, [pc, #80]	@ (34006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b74>)
34006e14:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006e18:	4291      	cmp	r1, r2
34006e1a:	d02a      	beq.n	34006e72 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006e1c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006e20:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006e24:	4291      	cmp	r1, r2
34006e26:	d024      	beq.n	34006e72 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006e28:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006e2c:	4293      	cmp	r3, r2
34006e2e:	d020      	beq.n	34006e72 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006e30:	e01a      	b.n	34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
34006e32:	bf00      	nop
34006e34:	07000830 	.word	0x07000830
34006e38:	34010a58 	.word	0x34010a58
34006e3c:	07020830 	.word	0x07020830
34006e40:	56028000 	.word	0x56028000
34006e44:	07000c30 	.word	0x07000c30
34006e48:	07020c30 	.word	0x07020c30
34006e4c:	07001030 	.word	0x07001030
34006e50:	07021030 	.word	0x07021030
34006e54:	07001430 	.word	0x07001430
34006e58:	07021430 	.word	0x07021430
34006e5c:	07001830 	.word	0x07001830
34006e60:	07021830 	.word	0x07021830
34006e64:	07001c30 	.word	0x07001c30
34006e68:	f640 0155 	movw	r1, #2133	@ 0x855
34006e6c:	48bb      	ldr	r0, [pc, #748]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006e6e:	f7fa fa9d 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34006e72:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006e76:	4aba      	ldr	r2, [pc, #744]	@ (34007160 <HAL_RCCEx_PeriphCLKConfig+0x1e70>)
34006e78:	4293      	cmp	r3, r2
34006e7a:	f041 814f 	bne.w	3400811c <HAL_RCCEx_PeriphCLKConfig+0x2e2c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006e7e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006e80:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006e84:	d004      	beq.n	34006e90 <HAL_RCCEx_PeriphCLKConfig+0x1ba0>
34006e86:	f640 015a 	movw	r1, #2138	@ 0x85a
34006e8a:	48b4      	ldr	r0, [pc, #720]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006e8c:	f7fa fa8e 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006e90:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006e92:	3b01      	subs	r3, #1
34006e94:	2bff      	cmp	r3, #255	@ 0xff
34006e96:	d904      	bls.n	34006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
34006e98:	f640 015b 	movw	r1, #2139	@ 0x85b
34006e9c:	48af      	ldr	r0, [pc, #700]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006e9e:	f7fa fa85 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006ea2:	4ab0      	ldr	r2, [pc, #704]	@ (34007164 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006ea4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006ea6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006eaa:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006eac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006eb0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006eb4:	3901      	subs	r1, #1
34006eb6:	4303      	orrs	r3, r0
34006eb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006ebc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006ec4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006ec8:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34006ecc:	f7fe f92c 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34006ed0:	6863      	ldr	r3, [r4, #4]
34006ed2:	03da      	lsls	r2, r3, #15
34006ed4:	d544      	bpl.n	34006f60 <HAL_RCCEx_PeriphCLKConfig+0x1c70>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
34006ed6:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34006eda:	4aa3      	ldr	r2, [pc, #652]	@ (34007168 <HAL_RCCEx_PeriphCLKConfig+0x1e78>)
34006edc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006ee0:	4291      	cmp	r1, r2
34006ee2:	d00e      	beq.n	34006f02 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34006ee4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006ee8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006eec:	4291      	cmp	r1, r2
34006eee:	d008      	beq.n	34006f02 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34006ef0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006ef4:	4293      	cmp	r3, r2
34006ef6:	d004      	beq.n	34006f02 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34006ef8:	f640 0182 	movw	r1, #2178	@ 0x882
34006efc:	4897      	ldr	r0, [pc, #604]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006efe:	f7fa fa55 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34006f02:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34006f06:	4a99      	ldr	r2, [pc, #612]	@ (3400716c <HAL_RCCEx_PeriphCLKConfig+0x1e7c>)
34006f08:	4293      	cmp	r3, r2
34006f0a:	f041 8138 	bne.w	3400817e <HAL_RCCEx_PeriphCLKConfig+0x2e8e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006f0e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006f10:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006f14:	d004      	beq.n	34006f20 <HAL_RCCEx_PeriphCLKConfig+0x1c30>
34006f16:	f640 0187 	movw	r1, #2183	@ 0x887
34006f1a:	4890      	ldr	r0, [pc, #576]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006f1c:	f7fa fa46 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006f20:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006f22:	3b01      	subs	r3, #1
34006f24:	2bff      	cmp	r3, #255	@ 0xff
34006f26:	d904      	bls.n	34006f32 <HAL_RCCEx_PeriphCLKConfig+0x1c42>
34006f28:	f640 0188 	movw	r1, #2184	@ 0x888
34006f2c:	488b      	ldr	r0, [pc, #556]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006f2e:	f7fa fa3d 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006f32:	4a8c      	ldr	r2, [pc, #560]	@ (34007164 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006f34:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006f36:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006f3a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006f3c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006f40:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006f44:	3901      	subs	r1, #1
34006f46:	4303      	orrs	r3, r0
34006f48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006f4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006f54:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006f58:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
34006f5c:	f7fe f8e4 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34006f60:	6863      	ldr	r3, [r4, #4]
34006f62:	039b      	lsls	r3, r3, #14
34006f64:	d544      	bpl.n	34006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
34006f66:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34006f6a:	4a81      	ldr	r2, [pc, #516]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x1e80>)
34006f6c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006f70:	4291      	cmp	r1, r2
34006f72:	d00e      	beq.n	34006f92 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34006f74:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006f78:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006f7c:	4291      	cmp	r1, r2
34006f7e:	d008      	beq.n	34006f92 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34006f80:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006f84:	4293      	cmp	r3, r2
34006f86:	d004      	beq.n	34006f92 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34006f88:	f640 01af 	movw	r1, #2223	@ 0x8af
34006f8c:	4873      	ldr	r0, [pc, #460]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006f8e:	f7fa fa0d 	bl	340013ac <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34006f92:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34006f96:	4a77      	ldr	r2, [pc, #476]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x1e84>)
34006f98:	4293      	cmp	r3, r2
34006f9a:	f041 8121 	bne.w	340081e0 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006f9e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006fa0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006fa4:	d004      	beq.n	34006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
34006fa6:	f640 01b4 	movw	r1, #2228	@ 0x8b4
34006faa:	486c      	ldr	r0, [pc, #432]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006fac:	f7fa f9fe 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006fb0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006fb2:	3b01      	subs	r3, #1
34006fb4:	2bff      	cmp	r3, #255	@ 0xff
34006fb6:	d904      	bls.n	34006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
34006fb8:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34006fbc:	4867      	ldr	r0, [pc, #412]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006fbe:	f7fa f9f5 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006fc2:	4a68      	ldr	r2, [pc, #416]	@ (34007164 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006fc4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006fc6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006fca:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006fcc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006fd0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006fd4:	3901      	subs	r1, #1
34006fd6:	4303      	orrs	r3, r0
34006fd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006fdc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006fe4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006fe8:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
34006fec:	f7fe f89c 	bl	34005128 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34006ff0:	6863      	ldr	r3, [r4, #4]
34006ff2:	035e      	lsls	r6, r3, #13
34006ff4:	d51e      	bpl.n	34007034 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
34006ff6:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34006ffa:	4a5f      	ldr	r2, [pc, #380]	@ (34007178 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
34006ffc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34007000:	4291      	cmp	r1, r2
34007002:	d00a      	beq.n	3400701a <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34007004:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34007008:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
3400700c:	4293      	cmp	r3, r2
3400700e:	d004      	beq.n	3400701a <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34007010:	f640 01dc 	movw	r1, #2268	@ 0x8dc
34007014:	4851      	ldr	r0, [pc, #324]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007016:	f7fa f9c9 	bl	340013ac <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3400701a:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
3400701e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007022:	f7fe f881 	bl	34005128 <LL_RCC_SetClockSource>
34007026:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
3400702a:	2b00      	cmp	r3, #0
3400702c:	f281 8109 	bge.w	34008242 <HAL_RCCEx_PeriphCLKConfig+0x2f52>
34007030:	f7fe f84a 	bl	340050c8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34007034:	6863      	ldr	r3, [r4, #4]
34007036:	02d8      	lsls	r0, r3, #11
34007038:	d51e      	bpl.n	34007078 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
3400703a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
3400703e:	4a4f      	ldr	r2, [pc, #316]	@ (3400717c <HAL_RCCEx_PeriphCLKConfig+0x1e8c>)
34007040:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34007044:	4291      	cmp	r1, r2
34007046:	d00a      	beq.n	3400705e <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34007048:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3400704c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34007050:	4293      	cmp	r3, r2
34007052:	d004      	beq.n	3400705e <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34007054:	f640 01e6 	movw	r1, #2278	@ 0x8e6
34007058:	4840      	ldr	r0, [pc, #256]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3400705a:	f7fa f9a7 	bl	340013ac <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3400705e:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
34007062:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007066:	f7fe f85f 	bl	34005128 <LL_RCC_SetClockSource>
3400706a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
3400706e:	2b00      	cmp	r3, #0
34007070:	f281 80eb 	bge.w	3400824a <HAL_RCCEx_PeriphCLKConfig+0x2f5a>
34007074:	f7fe f828 	bl	340050c8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34007078:	6863      	ldr	r3, [r4, #4]
3400707a:	0319      	lsls	r1, r3, #12
3400707c:	d549      	bpl.n	34007112 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
3400707e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34007082:	4a3f      	ldr	r2, [pc, #252]	@ (34007180 <HAL_RCCEx_PeriphCLKConfig+0x1e90>)
34007084:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34007088:	4291      	cmp	r1, r2
3400708a:	d00a      	beq.n	340070a2 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
3400708c:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34007090:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34007094:	4293      	cmp	r3, r2
34007096:	d004      	beq.n	340070a2 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
34007098:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
3400709c:	482f      	ldr	r0, [pc, #188]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3400709e:	f7fa f985 	bl	340013ac <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
340070a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
340070a6:	4a37      	ldr	r2, [pc, #220]	@ (34007184 <HAL_RCCEx_PeriphCLKConfig+0x1e94>)
340070a8:	4293      	cmp	r3, r2
340070aa:	f041 80d2 	bne.w	34008252 <HAL_RCCEx_PeriphCLKConfig+0x2f62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340070ae:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340070b0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340070b4:	d004      	beq.n	340070c0 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
340070b6:	f640 01f5 	movw	r1, #2293	@ 0x8f5
340070ba:	4828      	ldr	r0, [pc, #160]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340070bc:	f7fa f976 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340070c0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340070c2:	3b01      	subs	r3, #1
340070c4:	2bff      	cmp	r3, #255	@ 0xff
340070c6:	d904      	bls.n	340070d2 <HAL_RCCEx_PeriphCLKConfig+0x1de2>
340070c8:	f640 01f6 	movw	r1, #2294	@ 0x8f6
340070cc:	4823      	ldr	r0, [pc, #140]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340070ce:	f7fa f96d 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340070d2:	4a24      	ldr	r2, [pc, #144]	@ (34007164 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
340070d4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340070d6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340070da:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340070dc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340070e0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340070e4:	3901      	subs	r1, #1
340070e6:	4303      	orrs	r3, r0
340070e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340070ec:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340070f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340070f4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
340070f8:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
340070fc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007100:	f7fe f812 	bl	34005128 <LL_RCC_SetClockSource>
34007104:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34007108:	2b00      	cmp	r3, #0
3400710a:	f281 80ab 	bge.w	34008264 <HAL_RCCEx_PeriphCLKConfig+0x2f74>
3400710e:	f7fd ffdb 	bl	340050c8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34007112:	6863      	ldr	r3, [r4, #4]
34007114:	029a      	lsls	r2, r3, #10
34007116:	d564      	bpl.n	340071e2 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
34007118:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
3400711c:	4a1a      	ldr	r2, [pc, #104]	@ (34007188 <HAL_RCCEx_PeriphCLKConfig+0x1e98>)
3400711e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34007122:	4291      	cmp	r1, r2
34007124:	d00a      	beq.n	3400713c <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34007126:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3400712a:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
3400712e:	4293      	cmp	r3, r2
34007130:	d004      	beq.n	3400713c <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34007132:	f44f 6111 	mov.w	r1, #2320	@ 0x910
34007136:	4809      	ldr	r0, [pc, #36]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007138:	f7fa f938 	bl	340013ac <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
3400713c:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34007140:	4a12      	ldr	r2, [pc, #72]	@ (3400718c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>)
34007142:	4293      	cmp	r3, r2
34007144:	f041 8092 	bne.w	3400826c <HAL_RCCEx_PeriphCLKConfig+0x2f7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007148:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400714a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400714e:	d01f      	beq.n	34007190 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34007150:	f640 1115 	movw	r1, #2325	@ 0x915
34007154:	4801      	ldr	r0, [pc, #4]	@ (3400715c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007156:	f7fa f929 	bl	340013ac <assert_failed>
3400715a:	e019      	b.n	34007190 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
3400715c:	34010a58 	.word	0x34010a58
34007160:	07021c30 	.word	0x07021c30
34007164:	56028000 	.word	0x56028000
34007168:	07000034 	.word	0x07000034
3400716c:	07020034 	.word	0x07020034
34007170:	07000434 	.word	0x07000434
34007174:	07020434 	.word	0x07020434
34007178:	01001014 	.word	0x01001014
3400717c:	01001814 	.word	0x01001814
34007180:	03000c14 	.word	0x03000c14
34007184:	03020c14 	.word	0x03020c14
34007188:	03001414 	.word	0x03001414
3400718c:	03021414 	.word	0x03021414
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007190:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007192:	3b01      	subs	r3, #1
34007194:	2bff      	cmp	r3, #255	@ 0xff
34007196:	d904      	bls.n	340071a2 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
34007198:	f640 1116 	movw	r1, #2326	@ 0x916
3400719c:	48b1      	ldr	r0, [pc, #708]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400719e:	f7fa f905 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340071a2:	4ab1      	ldr	r2, [pc, #708]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340071a4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340071a6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340071aa:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340071ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340071b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340071b4:	3901      	subs	r1, #1
340071b6:	4303      	orrs	r3, r0
340071b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340071bc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340071c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340071c4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340071c8:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
340071cc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
340071d0:	f7fd ffaa 	bl	34005128 <LL_RCC_SetClockSource>
340071d4:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
340071d8:	2b00      	cmp	r3, #0
340071da:	f281 8050 	bge.w	3400827e <HAL_RCCEx_PeriphCLKConfig+0x2f8e>
340071de:	f7fd ff73 	bl	340050c8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
340071e2:	6863      	ldr	r3, [r4, #4]
340071e4:	061b      	lsls	r3, r3, #24
340071e6:	d511      	bpl.n	3400720c <HAL_RCCEx_PeriphCLKConfig+0x1f1c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
340071e8:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
340071ec:	2b03      	cmp	r3, #3
340071ee:	d904      	bls.n	340071fa <HAL_RCCEx_PeriphCLKConfig+0x1f0a>
340071f0:	f44f 6113 	mov.w	r1, #2352	@ 0x930
340071f4:	489b      	ldr	r0, [pc, #620]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340071f6:	f7fa f8d9 	bl	340013ac <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
340071fa:	4a9b      	ldr	r2, [pc, #620]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340071fc:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
34007200:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34007202:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34007206:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
3400720a:	6253      	str	r3, [r2, #36]	@ 0x24
}
3400720c:	1e28      	subs	r0, r5, #0
3400720e:	bf18      	it	ne
34007210:	2001      	movne	r0, #1
34007212:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34007214:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34007216:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400721a:	d003      	beq.n	34007224 <HAL_RCCEx_PeriphCLKConfig+0x1f34>
3400721c:	21e6      	movs	r1, #230	@ 0xe6
3400721e:	4891      	ldr	r0, [pc, #580]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007220:	f7fa f8c4 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34007224:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34007226:	3b01      	subs	r3, #1
34007228:	2bff      	cmp	r3, #255	@ 0xff
3400722a:	d903      	bls.n	34007234 <HAL_RCCEx_PeriphCLKConfig+0x1f44>
3400722c:	21e7      	movs	r1, #231	@ 0xe7
3400722e:	488d      	ldr	r0, [pc, #564]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007230:	f7fa f8bc 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34007234:	4a8c      	ldr	r2, [pc, #560]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007236:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34007238:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
3400723c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3400723e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007242:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007246:	3901      	subs	r1, #1
34007248:	4303      	orrs	r3, r0
3400724a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400724e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34007252:	f44f 7300 	mov.w	r3, #512	@ 0x200
34007256:	f7fe b941 	b.w	340054dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400725a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400725c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007260:	d003      	beq.n	3400726a <HAL_RCCEx_PeriphCLKConfig+0x1f7a>
34007262:	21f3      	movs	r1, #243	@ 0xf3
34007264:	487f      	ldr	r0, [pc, #508]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007266:	f7fa f8a1 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400726a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400726c:	3b01      	subs	r3, #1
3400726e:	2bff      	cmp	r3, #255	@ 0xff
34007270:	d903      	bls.n	3400727a <HAL_RCCEx_PeriphCLKConfig+0x1f8a>
34007272:	21f4      	movs	r1, #244	@ 0xf4
34007274:	487b      	ldr	r0, [pc, #492]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007276:	f7fa f899 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400727a:	4a7b      	ldr	r2, [pc, #492]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400727c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400727e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007282:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007284:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007288:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400728c:	3901      	subs	r1, #1
3400728e:	4303      	orrs	r3, r0
34007290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007294:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007298:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400729c:	f7fe b91e 	b.w	340054dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
340072a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
340072a4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340072a8:	d004      	beq.n	340072b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
340072aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
340072ae:	486d      	ldr	r0, [pc, #436]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340072b0:	f7fa f87c 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
340072b4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
340072b8:	3b01      	subs	r3, #1
340072ba:	2bff      	cmp	r3, #255	@ 0xff
340072bc:	d904      	bls.n	340072c8 <HAL_RCCEx_PeriphCLKConfig+0x1fd8>
340072be:	f240 1101 	movw	r1, #257	@ 0x101
340072c2:	4868      	ldr	r0, [pc, #416]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340072c4:	f7fa f872 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
340072c8:	4a67      	ldr	r2, [pc, #412]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340072ca:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
340072ce:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
340072d2:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
340072d6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340072da:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340072de:	3901      	subs	r1, #1
340072e0:	4303      	orrs	r3, r0
340072e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340072e6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
340072ea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
340072ee:	f7fe b8f5 	b.w	340054dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
340072f2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340072f6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340072fa:	d004      	beq.n	34007306 <HAL_RCCEx_PeriphCLKConfig+0x2016>
340072fc:	f240 110d 	movw	r1, #269	@ 0x10d
34007300:	4858      	ldr	r0, [pc, #352]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007302:	f7fa f853 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34007306:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
3400730a:	3b01      	subs	r3, #1
3400730c:	2bff      	cmp	r3, #255	@ 0xff
3400730e:	d904      	bls.n	3400731a <HAL_RCCEx_PeriphCLKConfig+0x202a>
34007310:	f44f 7187 	mov.w	r1, #270	@ 0x10e
34007314:	4853      	ldr	r0, [pc, #332]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007316:	f7fa f849 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400731a:	4a53      	ldr	r2, [pc, #332]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400731c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34007320:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
34007324:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34007328:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400732c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007330:	3901      	subs	r1, #1
34007332:	4303      	orrs	r3, r0
34007334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007338:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
3400733c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34007340:	f7fe b8cc 	b.w	340054dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34007344:	4a49      	ldr	r2, [pc, #292]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x217c>)
34007346:	4293      	cmp	r3, r2
34007348:	d123      	bne.n	34007392 <HAL_RCCEx_PeriphCLKConfig+0x20a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400734a:	6a23      	ldr	r3, [r4, #32]
3400734c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007350:	d004      	beq.n	3400735c <HAL_RCCEx_PeriphCLKConfig+0x206c>
34007352:	f44f 719b 	mov.w	r1, #310	@ 0x136
34007356:	4843      	ldr	r0, [pc, #268]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007358:	f7fa f828 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400735c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400735e:	3b01      	subs	r3, #1
34007360:	2bff      	cmp	r3, #255	@ 0xff
34007362:	d904      	bls.n	3400736e <HAL_RCCEx_PeriphCLKConfig+0x207e>
34007364:	f240 1137 	movw	r1, #311	@ 0x137
34007368:	483e      	ldr	r0, [pc, #248]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400736a:	f7fa f81f 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400736e:	4a3e      	ldr	r2, [pc, #248]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007370:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34007372:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34007376:	6a20      	ldr	r0, [r4, #32]
34007378:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400737c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007380:	3901      	subs	r1, #1
34007382:	4303      	orrs	r3, r0
34007384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007388:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400738c:	2308      	movs	r3, #8
3400738e:	f7fe b8e8 	b.w	34005562 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
34007392:	4a37      	ldr	r2, [pc, #220]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2180>)
34007394:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007396:	bf02      	ittt	eq
34007398:	2240      	moveq	r2, #64	@ 0x40
3400739a:	4b33      	ldreq	r3, [pc, #204]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400739c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340073a0:	f7fe b8e1 	b.w	34005566 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
340073a4:	4a33      	ldr	r2, [pc, #204]	@ (34007474 <HAL_RCCEx_PeriphCLKConfig+0x2184>)
340073a6:	4293      	cmp	r3, r2
340073a8:	d123      	bne.n	340073f2 <HAL_RCCEx_PeriphCLKConfig+0x2102>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340073aa:	6a23      	ldr	r3, [r4, #32]
340073ac:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340073b0:	d004      	beq.n	340073bc <HAL_RCCEx_PeriphCLKConfig+0x20cc>
340073b2:	f240 1163 	movw	r1, #355	@ 0x163
340073b6:	482b      	ldr	r0, [pc, #172]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340073b8:	f7f9 fff8 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340073bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340073be:	3b01      	subs	r3, #1
340073c0:	2bff      	cmp	r3, #255	@ 0xff
340073c2:	d904      	bls.n	340073ce <HAL_RCCEx_PeriphCLKConfig+0x20de>
340073c4:	f44f 71b2 	mov.w	r1, #356	@ 0x164
340073c8:	4826      	ldr	r0, [pc, #152]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340073ca:	f7f9 ffef 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340073ce:	4a26      	ldr	r2, [pc, #152]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340073d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340073d2:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340073d6:	6a20      	ldr	r0, [r4, #32]
340073d8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340073dc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340073e0:	3901      	subs	r1, #1
340073e2:	4303      	orrs	r3, r0
340073e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340073e8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340073ec:	2308      	movs	r3, #8
340073ee:	f7fe b8f5 	b.w	340055dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
340073f2:	4a21      	ldr	r2, [pc, #132]	@ (34007478 <HAL_RCCEx_PeriphCLKConfig+0x2188>)
340073f4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340073f6:	bf02      	ittt	eq
340073f8:	2240      	moveq	r2, #64	@ 0x40
340073fa:	4b1b      	ldreq	r3, [pc, #108]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340073fc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007400:	f7fe b8ee 	b.w	340055e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34007404:	4a1d      	ldr	r2, [pc, #116]	@ (3400747c <HAL_RCCEx_PeriphCLKConfig+0x218c>)
34007406:	4293      	cmp	r3, r2
34007408:	d123      	bne.n	34007452 <HAL_RCCEx_PeriphCLKConfig+0x2162>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400740a:	6a23      	ldr	r3, [r4, #32]
3400740c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007410:	d004      	beq.n	3400741c <HAL_RCCEx_PeriphCLKConfig+0x212c>
34007412:	f44f 71c8 	mov.w	r1, #400	@ 0x190
34007416:	4813      	ldr	r0, [pc, #76]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007418:	f7f9 ffc8 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400741c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400741e:	3b01      	subs	r3, #1
34007420:	2bff      	cmp	r3, #255	@ 0xff
34007422:	d904      	bls.n	3400742e <HAL_RCCEx_PeriphCLKConfig+0x213e>
34007424:	f240 1191 	movw	r1, #401	@ 0x191
34007428:	480e      	ldr	r0, [pc, #56]	@ (34007464 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400742a:	f7f9 ffbf 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400742e:	4a0e      	ldr	r2, [pc, #56]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007430:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34007432:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34007436:	6a20      	ldr	r0, [r4, #32]
34007438:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400743c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007440:	3901      	subs	r1, #1
34007442:	4303      	orrs	r3, r0
34007444:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007448:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400744c:	2308      	movs	r3, #8
3400744e:	f7fe b902 	b.w	34005656 <HAL_RCCEx_PeriphCLKConfig+0x366>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34007452:	4a0b      	ldr	r2, [pc, #44]	@ (34007480 <HAL_RCCEx_PeriphCLKConfig+0x2190>)
34007454:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007456:	bf02      	ittt	eq
34007458:	2240      	moveq	r2, #64	@ 0x40
3400745a:	4b03      	ldreq	r3, [pc, #12]	@ (34007468 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400745c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007460:	f7fe b8fb 	b.w	3400565a <HAL_RCCEx_PeriphCLKConfig+0x36a>
34007464:	34010a58 	.word	0x34010a58
34007468:	56028000 	.word	0x56028000
3400746c:	03030014 	.word	0x03030014
34007470:	03010014 	.word	0x03010014
34007474:	03030414 	.word	0x03030414
34007478:	03010414 	.word	0x03010414
3400747c:	03030814 	.word	0x03030814
34007480:	03010814 	.word	0x03010814
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34007484:	2b30      	cmp	r3, #48	@ 0x30
34007486:	d123      	bne.n	340074d0 <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34007488:	6a23      	ldr	r3, [r4, #32]
3400748a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400748e:	d004      	beq.n	3400749a <HAL_RCCEx_PeriphCLKConfig+0x21aa>
34007490:	f240 11bd 	movw	r1, #445	@ 0x1bd
34007494:	48b2      	ldr	r0, [pc, #712]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007496:	f7f9 ff89 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400749a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400749c:	3b01      	subs	r3, #1
3400749e:	2bff      	cmp	r3, #255	@ 0xff
340074a0:	d904      	bls.n	340074ac <HAL_RCCEx_PeriphCLKConfig+0x21bc>
340074a2:	f44f 71df 	mov.w	r1, #446	@ 0x1be
340074a6:	48ae      	ldr	r0, [pc, #696]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340074a8:	f7f9 ff80 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340074ac:	4aad      	ldr	r2, [pc, #692]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340074ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340074b0:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340074b4:	6a20      	ldr	r0, [r4, #32]
340074b6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340074ba:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340074be:	3901      	subs	r1, #1
340074c0:	4303      	orrs	r3, r0
340074c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340074c6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340074ca:	2308      	movs	r3, #8
340074cc:	f7fe b8fd 	b.w	340056ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
340074d0:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340074d2:	bf02      	ittt	eq
340074d4:	2240      	moveq	r2, #64	@ 0x40
340074d6:	4ba3      	ldreq	r3, [pc, #652]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340074d8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340074dc:	f7fe b8f7 	b.w	340056ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
340074e0:	4aa1      	ldr	r2, [pc, #644]	@ (34007768 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
340074e2:	4293      	cmp	r3, r2
340074e4:	d123      	bne.n	3400752e <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340074e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340074e8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340074ec:	d004      	beq.n	340074f8 <HAL_RCCEx_PeriphCLKConfig+0x2208>
340074ee:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
340074f2:	489b      	ldr	r0, [pc, #620]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340074f4:	f7f9 ff5a 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
340074f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340074fa:	3b01      	subs	r3, #1
340074fc:	2bff      	cmp	r3, #255	@ 0xff
340074fe:	d904      	bls.n	3400750a <HAL_RCCEx_PeriphCLKConfig+0x221a>
34007500:	f240 11eb 	movw	r1, #491	@ 0x1eb
34007504:	4896      	ldr	r0, [pc, #600]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007506:	f7f9 ff51 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400750a:	4a96      	ldr	r2, [pc, #600]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400750c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400750e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34007512:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34007514:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007518:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400751c:	3901      	subs	r1, #1
3400751e:	4303      	orrs	r3, r0
34007520:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007524:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34007528:	2310      	movs	r3, #16
3400752a:	f7fe b911 	b.w	34005750 <HAL_RCCEx_PeriphCLKConfig+0x460>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3400752e:	4a8f      	ldr	r2, [pc, #572]	@ (3400776c <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34007530:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007532:	bf02      	ittt	eq
34007534:	2240      	moveq	r2, #64	@ 0x40
34007536:	4b8b      	ldreq	r3, [pc, #556]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007538:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400753c:	f7fe b90a 	b.w	34005754 <HAL_RCCEx_PeriphCLKConfig+0x464>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34007540:	4a8b      	ldr	r2, [pc, #556]	@ (34007770 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
34007542:	4293      	cmp	r3, r2
34007544:	d123      	bne.n	3400758e <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34007546:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34007548:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400754c:	d004      	beq.n	34007558 <HAL_RCCEx_PeriphCLKConfig+0x2268>
3400754e:	f240 2117 	movw	r1, #535	@ 0x217
34007552:	4883      	ldr	r0, [pc, #524]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007554:	f7f9 ff2a 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34007558:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400755a:	3b01      	subs	r3, #1
3400755c:	2bff      	cmp	r3, #255	@ 0xff
3400755e:	d904      	bls.n	3400756a <HAL_RCCEx_PeriphCLKConfig+0x227a>
34007560:	f44f 7106 	mov.w	r1, #536	@ 0x218
34007564:	487e      	ldr	r0, [pc, #504]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007566:	f7f9 ff21 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400756a:	4a7e      	ldr	r2, [pc, #504]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400756c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400756e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34007572:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34007574:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007578:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400757c:	3901      	subs	r1, #1
3400757e:	4303      	orrs	r3, r0
34007580:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007584:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34007588:	2310      	movs	r3, #16
3400758a:	f7fe b938 	b.w	340057fe <HAL_RCCEx_PeriphCLKConfig+0x50e>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3400758e:	4a79      	ldr	r2, [pc, #484]	@ (34007774 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34007590:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007592:	bf02      	ittt	eq
34007594:	2240      	moveq	r2, #64	@ 0x40
34007596:	4b73      	ldreq	r3, [pc, #460]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007598:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400759c:	f7fe b931 	b.w	34005802 <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
340075a0:	2b30      	cmp	r3, #48	@ 0x30
340075a2:	d123      	bne.n	340075ec <HAL_RCCEx_PeriphCLKConfig+0x22fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340075a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340075a6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340075aa:	d004      	beq.n	340075b6 <HAL_RCCEx_PeriphCLKConfig+0x22c6>
340075ac:	f240 2145 	movw	r1, #581	@ 0x245
340075b0:	486b      	ldr	r0, [pc, #428]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340075b2:	f7f9 fefb 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340075b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340075b8:	3b01      	subs	r3, #1
340075ba:	2bff      	cmp	r3, #255	@ 0xff
340075bc:	d904      	bls.n	340075c8 <HAL_RCCEx_PeriphCLKConfig+0x22d8>
340075be:	f240 2146 	movw	r1, #582	@ 0x246
340075c2:	4867      	ldr	r0, [pc, #412]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340075c4:	f7f9 fef2 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340075c8:	4a66      	ldr	r2, [pc, #408]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340075ca:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340075cc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340075d0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340075d2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340075d6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340075da:	3901      	subs	r1, #1
340075dc:	4303      	orrs	r3, r0
340075de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340075e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340075e6:	2380      	movs	r3, #128	@ 0x80
340075e8:	f7fe b94f 	b.w	3400588a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
340075ec:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340075ee:	bf02      	ittt	eq
340075f0:	2240      	moveq	r2, #64	@ 0x40
340075f2:	4b5c      	ldreq	r3, [pc, #368]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340075f4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340075f8:	f7fe b949 	b.w	3400588e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
340075fc:	2b03      	cmp	r3, #3
340075fe:	d123      	bne.n	34007648 <HAL_RCCEx_PeriphCLKConfig+0x2358>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007600:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007602:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007606:	d004      	beq.n	34007612 <HAL_RCCEx_PeriphCLKConfig+0x2322>
34007608:	f240 2173 	movw	r1, #627	@ 0x273
3400760c:	4854      	ldr	r0, [pc, #336]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400760e:	f7f9 fecd 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007612:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007614:	3b01      	subs	r3, #1
34007616:	2bff      	cmp	r3, #255	@ 0xff
34007618:	d904      	bls.n	34007624 <HAL_RCCEx_PeriphCLKConfig+0x2334>
3400761a:	f44f 711d 	mov.w	r1, #628	@ 0x274
3400761e:	4850      	ldr	r0, [pc, #320]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007620:	f7f9 fec4 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007624:	4a4f      	ldr	r2, [pc, #316]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007626:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007628:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3400762c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400762e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007632:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007636:	3901      	subs	r1, #1
34007638:	4303      	orrs	r3, r0
3400763a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400763e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007642:	2380      	movs	r3, #128	@ 0x80
34007644:	f7fe b967 	b.w	34005916 <HAL_RCCEx_PeriphCLKConfig+0x626>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
34007648:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400764a:	bf02      	ittt	eq
3400764c:	2240      	moveq	r2, #64	@ 0x40
3400764e:	4b45      	ldreq	r3, [pc, #276]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007650:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007654:	f7fe b961 	b.w	3400591a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
34007658:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400765c:	bf02      	ittt	eq
3400765e:	2240      	moveq	r2, #64	@ 0x40
34007660:	4b40      	ldreq	r3, [pc, #256]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007662:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007666:	f7fe b9ca 	b.w	340059fe <HAL_RCCEx_PeriphCLKConfig+0x70e>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3400766a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400766e:	bf02      	ittt	eq
34007670:	2240      	moveq	r2, #64	@ 0x40
34007672:	4b3c      	ldreq	r3, [pc, #240]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007674:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007678:	f7fe ba03 	b.w	34005a82 <HAL_RCCEx_PeriphCLKConfig+0x792>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
3400767c:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400767e:	bf02      	ittt	eq
34007680:	2240      	moveq	r2, #64	@ 0x40
34007682:	4b38      	ldreq	r3, [pc, #224]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007684:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007688:	f7fe ba92 	b.w	34005bb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
3400768c:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400768e:	bf02      	ittt	eq
34007690:	2240      	moveq	r2, #64	@ 0x40
34007692:	4b34      	ldreq	r3, [pc, #208]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007694:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007698:	f7fe bad3 	b.w	34005c42 <HAL_RCCEx_PeriphCLKConfig+0x952>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
3400769c:	4a36      	ldr	r2, [pc, #216]	@ (34007778 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
3400769e:	4293      	cmp	r3, r2
340076a0:	d124      	bne.n	340076ec <HAL_RCCEx_PeriphCLKConfig+0x23fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340076a2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340076a4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340076a8:	d004      	beq.n	340076b4 <HAL_RCCEx_PeriphCLKConfig+0x23c4>
340076aa:	f240 314f 	movw	r1, #847	@ 0x34f
340076ae:	482c      	ldr	r0, [pc, #176]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340076b0:	f7f9 fe7c 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340076b4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340076b6:	3b01      	subs	r3, #1
340076b8:	2bff      	cmp	r3, #255	@ 0xff
340076ba:	d904      	bls.n	340076c6 <HAL_RCCEx_PeriphCLKConfig+0x23d6>
340076bc:	f44f 7154 	mov.w	r1, #848	@ 0x350
340076c0:	4827      	ldr	r0, [pc, #156]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340076c2:	f7f9 fe73 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340076c6:	4a27      	ldr	r2, [pc, #156]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340076c8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340076ca:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340076ce:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340076d0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340076d4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340076d8:	3901      	subs	r1, #1
340076da:	4303      	orrs	r3, r0
340076dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340076e0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340076e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340076e8:	f7fe baf3 	b.w	34005cd2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
340076ec:	4a23      	ldr	r2, [pc, #140]	@ (3400777c <HAL_RCCEx_PeriphCLKConfig+0x248c>)
340076ee:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340076f0:	bf02      	ittt	eq
340076f2:	2240      	moveq	r2, #64	@ 0x40
340076f4:	4b1b      	ldreq	r3, [pc, #108]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340076f6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340076fa:	f7fe baec 	b.w	34005cd6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
340076fe:	4a20      	ldr	r2, [pc, #128]	@ (34007780 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34007700:	4293      	cmp	r3, r2
34007702:	d124      	bne.n	3400774e <HAL_RCCEx_PeriphCLKConfig+0x245e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007704:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007706:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400770a:	d004      	beq.n	34007716 <HAL_RCCEx_PeriphCLKConfig+0x2426>
3400770c:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34007710:	4813      	ldr	r0, [pc, #76]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007712:	f7f9 fe4b 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007716:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007718:	3b01      	subs	r3, #1
3400771a:	2bff      	cmp	r3, #255	@ 0xff
3400771c:	d904      	bls.n	34007728 <HAL_RCCEx_PeriphCLKConfig+0x2438>
3400771e:	f240 317d 	movw	r1, #893	@ 0x37d
34007722:	480f      	ldr	r0, [pc, #60]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007724:	f7f9 fe42 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007728:	4a0e      	ldr	r2, [pc, #56]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400772a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400772c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007730:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007732:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007736:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400773a:	3901      	subs	r1, #1
3400773c:	4303      	orrs	r3, r0
3400773e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007742:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007746:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400774a:	f7fe bb06 	b.w	34005d5a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3400774e:	4a0d      	ldr	r2, [pc, #52]	@ (34007784 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
34007750:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007752:	bf02      	ittt	eq
34007754:	2240      	moveq	r2, #64	@ 0x40
34007756:	4b03      	ldreq	r3, [pc, #12]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007758:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400775c:	f7fe baff 	b.w	34005d5e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
34007760:	34010a58 	.word	0x34010a58
34007764:	56028000 	.word	0x56028000
34007768:	0303001c 	.word	0x0303001c
3400776c:	0301001c 	.word	0x0301001c
34007770:	0303041c 	.word	0x0303041c
34007774:	0301041c 	.word	0x0301041c
34007778:	0703000c 	.word	0x0703000c
3400777c:	0701000c 	.word	0x0701000c
34007780:	0703040c 	.word	0x0703040c
34007784:	0701040c 	.word	0x0701040c
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34007788:	4ab1      	ldr	r2, [pc, #708]	@ (34007a50 <HAL_RCCEx_PeriphCLKConfig+0x2760>)
3400778a:	4293      	cmp	r3, r2
3400778c:	d124      	bne.n	340077d8 <HAL_RCCEx_PeriphCLKConfig+0x24e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400778e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007790:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007794:	d004      	beq.n	340077a0 <HAL_RCCEx_PeriphCLKConfig+0x24b0>
34007796:	f240 31a9 	movw	r1, #937	@ 0x3a9
3400779a:	48ae      	ldr	r0, [pc, #696]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3400779c:	f7f9 fe06 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340077a0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340077a2:	3b01      	subs	r3, #1
340077a4:	2bff      	cmp	r3, #255	@ 0xff
340077a6:	d904      	bls.n	340077b2 <HAL_RCCEx_PeriphCLKConfig+0x24c2>
340077a8:	f240 31aa 	movw	r1, #938	@ 0x3aa
340077ac:	48a9      	ldr	r0, [pc, #676]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340077ae:	f7f9 fdfd 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340077b2:	4aa9      	ldr	r2, [pc, #676]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340077b4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340077b6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340077ba:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340077bc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340077c0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340077c4:	3901      	subs	r1, #1
340077c6:	4303      	orrs	r3, r0
340077c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340077cc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340077d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340077d4:	f7fe bb05 	b.w	34005de2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
340077d8:	4aa0      	ldr	r2, [pc, #640]	@ (34007a5c <HAL_RCCEx_PeriphCLKConfig+0x276c>)
340077da:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077dc:	bf02      	ittt	eq
340077de:	2240      	moveq	r2, #64	@ 0x40
340077e0:	4b9d      	ldreq	r3, [pc, #628]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340077e2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077e6:	f7fe bafe 	b.w	34005de6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
340077ea:	4a9d      	ldr	r2, [pc, #628]	@ (34007a60 <HAL_RCCEx_PeriphCLKConfig+0x2770>)
340077ec:	4293      	cmp	r3, r2
340077ee:	d124      	bne.n	3400783a <HAL_RCCEx_PeriphCLKConfig+0x254a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340077f0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340077f2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340077f6:	d004      	beq.n	34007802 <HAL_RCCEx_PeriphCLKConfig+0x2512>
340077f8:	f240 31d6 	movw	r1, #982	@ 0x3d6
340077fc:	4895      	ldr	r0, [pc, #596]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340077fe:	f7f9 fdd5 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007802:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007804:	3b01      	subs	r3, #1
34007806:	2bff      	cmp	r3, #255	@ 0xff
34007808:	d904      	bls.n	34007814 <HAL_RCCEx_PeriphCLKConfig+0x2524>
3400780a:	f240 31d7 	movw	r1, #983	@ 0x3d7
3400780e:	4891      	ldr	r0, [pc, #580]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007810:	f7f9 fdcc 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007814:	4a90      	ldr	r2, [pc, #576]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007816:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007818:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400781c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400781e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007822:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007826:	3901      	subs	r1, #1
34007828:	4303      	orrs	r3, r0
3400782a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400782e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007832:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007836:	f7fe bb2c 	b.w	34005e92 <HAL_RCCEx_PeriphCLKConfig+0xba2>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3400783a:	4a8a      	ldr	r2, [pc, #552]	@ (34007a64 <HAL_RCCEx_PeriphCLKConfig+0x2774>)
3400783c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400783e:	bf02      	ittt	eq
34007840:	2240      	moveq	r2, #64	@ 0x40
34007842:	4b85      	ldreq	r3, [pc, #532]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007844:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007848:	f7fe bb25 	b.w	34005e96 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3400784c:	4a86      	ldr	r2, [pc, #536]	@ (34007a68 <HAL_RCCEx_PeriphCLKConfig+0x2778>)
3400784e:	4293      	cmp	r3, r2
34007850:	d124      	bne.n	3400789c <HAL_RCCEx_PeriphCLKConfig+0x25ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007852:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007854:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007858:	d004      	beq.n	34007864 <HAL_RCCEx_PeriphCLKConfig+0x2574>
3400785a:	f240 4103 	movw	r1, #1027	@ 0x403
3400785e:	487d      	ldr	r0, [pc, #500]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007860:	f7f9 fda4 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007864:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007866:	3b01      	subs	r3, #1
34007868:	2bff      	cmp	r3, #255	@ 0xff
3400786a:	d904      	bls.n	34007876 <HAL_RCCEx_PeriphCLKConfig+0x2586>
3400786c:	f240 4104 	movw	r1, #1028	@ 0x404
34007870:	4878      	ldr	r0, [pc, #480]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007872:	f7f9 fd9b 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007876:	4a78      	ldr	r2, [pc, #480]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007878:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400787a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400787e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007880:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007884:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007888:	3901      	subs	r1, #1
3400788a:	4303      	orrs	r3, r0
3400788c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007890:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007894:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007898:	f7fe bb3f 	b.w	34005f1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
3400789c:	4a73      	ldr	r2, [pc, #460]	@ (34007a6c <HAL_RCCEx_PeriphCLKConfig+0x277c>)
3400789e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078a0:	bf02      	ittt	eq
340078a2:	2240      	moveq	r2, #64	@ 0x40
340078a4:	4b6c      	ldreq	r3, [pc, #432]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340078a6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078aa:	f7fe bb38 	b.w	34005f1e <HAL_RCCEx_PeriphCLKConfig+0xc2e>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
340078ae:	4a70      	ldr	r2, [pc, #448]	@ (34007a70 <HAL_RCCEx_PeriphCLKConfig+0x2780>)
340078b0:	4293      	cmp	r3, r2
340078b2:	d124      	bne.n	340078fe <HAL_RCCEx_PeriphCLKConfig+0x260e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340078b4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340078b6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340078ba:	d004      	beq.n	340078c6 <HAL_RCCEx_PeriphCLKConfig+0x25d6>
340078bc:	f44f 6186 	mov.w	r1, #1072	@ 0x430
340078c0:	4864      	ldr	r0, [pc, #400]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340078c2:	f7f9 fd73 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340078c6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340078c8:	3b01      	subs	r3, #1
340078ca:	2bff      	cmp	r3, #255	@ 0xff
340078cc:	d904      	bls.n	340078d8 <HAL_RCCEx_PeriphCLKConfig+0x25e8>
340078ce:	f240 4131 	movw	r1, #1073	@ 0x431
340078d2:	4860      	ldr	r0, [pc, #384]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340078d4:	f7f9 fd6a 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340078d8:	4a5f      	ldr	r2, [pc, #380]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340078da:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340078dc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340078e0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340078e2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340078e6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340078ea:	3901      	subs	r1, #1
340078ec:	4303      	orrs	r3, r0
340078ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340078f2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340078f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340078fa:	f7fe bb52 	b.w	34005fa2 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
340078fe:	4a5d      	ldr	r2, [pc, #372]	@ (34007a74 <HAL_RCCEx_PeriphCLKConfig+0x2784>)
34007900:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007902:	bf02      	ittt	eq
34007904:	2240      	moveq	r2, #64	@ 0x40
34007906:	4b54      	ldreq	r3, [pc, #336]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007908:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400790c:	f7fe bb4b 	b.w	34005fa6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34007910:	4a59      	ldr	r2, [pc, #356]	@ (34007a78 <HAL_RCCEx_PeriphCLKConfig+0x2788>)
34007912:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007914:	bf02      	ittt	eq
34007916:	2240      	moveq	r2, #64	@ 0x40
34007918:	4b4f      	ldreq	r3, [pc, #316]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400791a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400791e:	f7fe bb86 	b.w	3400602e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34007922:	4a56      	ldr	r2, [pc, #344]	@ (34007a7c <HAL_RCCEx_PeriphCLKConfig+0x278c>)
34007924:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007926:	bf02      	ittt	eq
34007928:	2240      	moveq	r2, #64	@ 0x40
3400792a:	4b4b      	ldreq	r3, [pc, #300]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400792c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007930:	f7fe bbc1 	b.w	340060b6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34007934:	4a52      	ldr	r2, [pc, #328]	@ (34007a80 <HAL_RCCEx_PeriphCLKConfig+0x2790>)
34007936:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007938:	bf02      	ittt	eq
3400793a:	2240      	moveq	r2, #64	@ 0x40
3400793c:	4b46      	ldreq	r3, [pc, #280]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400793e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007942:	f7fe bc17 	b.w	34006174 <HAL_RCCEx_PeriphCLKConfig+0xe84>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34007946:	4a4f      	ldr	r2, [pc, #316]	@ (34007a84 <HAL_RCCEx_PeriphCLKConfig+0x2794>)
34007948:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400794a:	bf02      	ittt	eq
3400794c:	2240      	moveq	r2, #64	@ 0x40
3400794e:	4b42      	ldreq	r3, [pc, #264]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007950:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007954:	f7fe bc52 	b.w	340061fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34007958:	4a4b      	ldr	r2, [pc, #300]	@ (34007a88 <HAL_RCCEx_PeriphCLKConfig+0x2798>)
3400795a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400795c:	bf02      	ittt	eq
3400795e:	2240      	moveq	r2, #64	@ 0x40
34007960:	4b3d      	ldreq	r3, [pc, #244]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007962:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007966:	f7fe bc8d 	b.w	34006284 <HAL_RCCEx_PeriphCLKConfig+0xf94>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3400796a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400796e:	d124      	bne.n	340079ba <HAL_RCCEx_PeriphCLKConfig+0x26ca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007970:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007972:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007976:	d004      	beq.n	34007982 <HAL_RCCEx_PeriphCLKConfig+0x2692>
34007978:	f240 41fd 	movw	r1, #1277	@ 0x4fd
3400797c:	4835      	ldr	r0, [pc, #212]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3400797e:	f7f9 fd15 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007982:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007984:	3b01      	subs	r3, #1
34007986:	2bff      	cmp	r3, #255	@ 0xff
34007988:	d904      	bls.n	34007994 <HAL_RCCEx_PeriphCLKConfig+0x26a4>
3400798a:	f240 41fe 	movw	r1, #1278	@ 0x4fe
3400798e:	4831      	ldr	r0, [pc, #196]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007990:	f7f9 fd0c 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007994:	4a30      	ldr	r2, [pc, #192]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007996:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007998:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400799c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3400799e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340079a2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340079a6:	3901      	subs	r1, #1
340079a8:	4303      	orrs	r3, r0
340079aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340079ae:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340079b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340079b6:	f7fe bca7 	b.w	34006308 <HAL_RCCEx_PeriphCLKConfig+0x1018>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
340079ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079be:	bf02      	ittt	eq
340079c0:	2240      	moveq	r2, #64	@ 0x40
340079c2:	4b25      	ldreq	r3, [pc, #148]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340079c4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079c8:	f7fe bca0 	b.w	3400630c <HAL_RCCEx_PeriphCLKConfig+0x101c>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
340079cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079d0:	bf02      	ittt	eq
340079d2:	2240      	moveq	r2, #64	@ 0x40
340079d4:	4b20      	ldreq	r3, [pc, #128]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340079d6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079da:	f7fe bcdd 	b.w	34006398 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
340079de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340079e2:	d123      	bne.n	34007a2c <HAL_RCCEx_PeriphCLKConfig+0x273c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340079e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340079e6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340079ea:	d004      	beq.n	340079f6 <HAL_RCCEx_PeriphCLKConfig+0x2706>
340079ec:	f240 514a 	movw	r1, #1354	@ 0x54a
340079f0:	4818      	ldr	r0, [pc, #96]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340079f2:	f7f9 fcdb 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340079f6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340079f8:	3b01      	subs	r3, #1
340079fa:	2bff      	cmp	r3, #255	@ 0xff
340079fc:	d904      	bls.n	34007a08 <HAL_RCCEx_PeriphCLKConfig+0x2718>
340079fe:	f240 514b 	movw	r1, #1355	@ 0x54b
34007a02:	4814      	ldr	r0, [pc, #80]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007a04:	f7f9 fcd2 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007a08:	4a13      	ldr	r2, [pc, #76]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007a0a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007a0c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007a10:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007a12:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007a16:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007a1a:	3901      	subs	r1, #1
34007a1c:	4303      	orrs	r3, r0
34007a1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007a22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007a26:	2380      	movs	r3, #128	@ 0x80
34007a28:	f7fe bcf8 	b.w	3400641c <HAL_RCCEx_PeriphCLKConfig+0x112c>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34007a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a30:	bf02      	ittt	eq
34007a32:	2240      	moveq	r2, #64	@ 0x40
34007a34:	4b08      	ldreq	r3, [pc, #32]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007a36:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a3a:	f7fe bcf1 	b.w	34006420 <HAL_RCCEx_PeriphCLKConfig+0x1130>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34007a3e:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a40:	bf02      	ittt	eq
34007a42:	2240      	moveq	r2, #64	@ 0x40
34007a44:	4b04      	ldreq	r3, [pc, #16]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007a46:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a4a:	f7fe bd3b 	b.w	340064c4 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
34007a4e:	bf00      	nop
34007a50:	0703080c 	.word	0x0703080c
34007a54:	34010a58 	.word	0x34010a58
34007a58:	56028000 	.word	0x56028000
34007a5c:	0701080c 	.word	0x0701080c
34007a60:	07030c0c 	.word	0x07030c0c
34007a64:	07010c0c 	.word	0x07010c0c
34007a68:	0703100c 	.word	0x0703100c
34007a6c:	0701100c 	.word	0x0701100c
34007a70:	0703140c 	.word	0x0703140c
34007a74:	0701140c 	.word	0x0701140c
34007a78:	0701082c 	.word	0x0701082c
34007a7c:	07010c2c 	.word	0x07010c2c
34007a80:	0701102c 	.word	0x0701102c
34007a84:	0701142c 	.word	0x0701142c
34007a88:	0701182c 	.word	0x0701182c
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34007a8c:	4aa8      	ldr	r2, [pc, #672]	@ (34007d30 <HAL_RCCEx_PeriphCLKConfig+0x2a40>)
34007a8e:	4293      	cmp	r3, r2
34007a90:	d123      	bne.n	34007ada <HAL_RCCEx_PeriphCLKConfig+0x27ea>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007a92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007a94:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007a98:	d004      	beq.n	34007aa4 <HAL_RCCEx_PeriphCLKConfig+0x27b4>
34007a9a:	f240 5197 	movw	r1, #1431	@ 0x597
34007a9e:	48a5      	ldr	r0, [pc, #660]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007aa0:	f7f9 fc84 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007aa4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007aa6:	3b01      	subs	r3, #1
34007aa8:	2bff      	cmp	r3, #255	@ 0xff
34007aaa:	d904      	bls.n	34007ab6 <HAL_RCCEx_PeriphCLKConfig+0x27c6>
34007aac:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
34007ab0:	48a0      	ldr	r0, [pc, #640]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007ab2:	f7f9 fc7b 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007ab6:	4aa0      	ldr	r2, [pc, #640]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007ab8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007aba:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007abe:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007ac0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007ac4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007ac8:	3901      	subs	r1, #1
34007aca:	4303      	orrs	r3, r0
34007acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007ad4:	2380      	movs	r3, #128	@ 0x80
34007ad6:	f7fe bd3a 	b.w	3400654e <HAL_RCCEx_PeriphCLKConfig+0x125e>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34007ada:	4a98      	ldr	r2, [pc, #608]	@ (34007d3c <HAL_RCCEx_PeriphCLKConfig+0x2a4c>)
34007adc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ade:	bf02      	ittt	eq
34007ae0:	2240      	moveq	r2, #64	@ 0x40
34007ae2:	4b95      	ldreq	r3, [pc, #596]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007ae4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007ae8:	f7fe bd33 	b.w	34006552 <HAL_RCCEx_PeriphCLKConfig+0x1262>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34007aec:	4a94      	ldr	r2, [pc, #592]	@ (34007d40 <HAL_RCCEx_PeriphCLKConfig+0x2a50>)
34007aee:	4293      	cmp	r3, r2
34007af0:	d123      	bne.n	34007b3a <HAL_RCCEx_PeriphCLKConfig+0x284a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007af2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007af4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007af8:	d004      	beq.n	34007b04 <HAL_RCCEx_PeriphCLKConfig+0x2814>
34007afa:	f240 51c4 	movw	r1, #1476	@ 0x5c4
34007afe:	488d      	ldr	r0, [pc, #564]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007b00:	f7f9 fc54 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007b04:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007b06:	3b01      	subs	r3, #1
34007b08:	2bff      	cmp	r3, #255	@ 0xff
34007b0a:	d904      	bls.n	34007b16 <HAL_RCCEx_PeriphCLKConfig+0x2826>
34007b0c:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34007b10:	4888      	ldr	r0, [pc, #544]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007b12:	f7f9 fc4b 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007b16:	4a88      	ldr	r2, [pc, #544]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007b18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007b1a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007b1e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007b20:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b24:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b28:	3901      	subs	r1, #1
34007b2a:	4303      	orrs	r3, r0
34007b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007b34:	2380      	movs	r3, #128	@ 0x80
34007b36:	f7fe bd4b 	b.w	340065d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34007b3a:	4a82      	ldr	r2, [pc, #520]	@ (34007d44 <HAL_RCCEx_PeriphCLKConfig+0x2a54>)
34007b3c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b3e:	bf02      	ittt	eq
34007b40:	2240      	moveq	r2, #64	@ 0x40
34007b42:	4b7d      	ldreq	r3, [pc, #500]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007b44:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b48:	f7fe bd44 	b.w	340065d4 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34007b4c:	2b03      	cmp	r3, #3
34007b4e:	d123      	bne.n	34007b98 <HAL_RCCEx_PeriphCLKConfig+0x28a8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007b50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007b52:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007b56:	d004      	beq.n	34007b62 <HAL_RCCEx_PeriphCLKConfig+0x2872>
34007b58:	f240 51f1 	movw	r1, #1521	@ 0x5f1
34007b5c:	4875      	ldr	r0, [pc, #468]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007b5e:	f7f9 fc25 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007b62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007b64:	3b01      	subs	r3, #1
34007b66:	2bff      	cmp	r3, #255	@ 0xff
34007b68:	d904      	bls.n	34007b74 <HAL_RCCEx_PeriphCLKConfig+0x2884>
34007b6a:	f240 51f2 	movw	r1, #1522	@ 0x5f2
34007b6e:	4871      	ldr	r0, [pc, #452]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007b70:	f7f9 fc1c 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007b74:	4a70      	ldr	r2, [pc, #448]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007b76:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007b78:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007b7c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007b7e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b82:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b86:	3901      	subs	r1, #1
34007b88:	4303      	orrs	r3, r0
34007b8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007b92:	2380      	movs	r3, #128	@ 0x80
34007b94:	f7fe bd55 	b.w	34006642 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34007b98:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b9a:	bf02      	ittt	eq
34007b9c:	2240      	moveq	r2, #64	@ 0x40
34007b9e:	4b66      	ldreq	r3, [pc, #408]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007ba0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007ba4:	f7fe bd4f 	b.w	34006646 <HAL_RCCEx_PeriphCLKConfig+0x1356>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34007ba8:	4a67      	ldr	r2, [pc, #412]	@ (34007d48 <HAL_RCCEx_PeriphCLKConfig+0x2a58>)
34007baa:	4293      	cmp	r3, r2
34007bac:	d124      	bne.n	34007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2908>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007bae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007bb0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007bb4:	d004      	beq.n	34007bc0 <HAL_RCCEx_PeriphCLKConfig+0x28d0>
34007bb6:	f240 611e 	movw	r1, #1566	@ 0x61e
34007bba:	485e      	ldr	r0, [pc, #376]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007bbc:	f7f9 fbf6 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007bc0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007bc2:	3b01      	subs	r3, #1
34007bc4:	2bff      	cmp	r3, #255	@ 0xff
34007bc6:	d904      	bls.n	34007bd2 <HAL_RCCEx_PeriphCLKConfig+0x28e2>
34007bc8:	f240 611f 	movw	r1, #1567	@ 0x61f
34007bcc:	4859      	ldr	r0, [pc, #356]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007bce:	f7f9 fbed 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007bd2:	4a59      	ldr	r2, [pc, #356]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007bd4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007bd6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007bda:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007bdc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007be0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007be4:	3901      	subs	r1, #1
34007be6:	4303      	orrs	r3, r0
34007be8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007bec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007bf4:	f7fe bd72 	b.w	340066dc <HAL_RCCEx_PeriphCLKConfig+0x13ec>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34007bf8:	4a54      	ldr	r2, [pc, #336]	@ (34007d4c <HAL_RCCEx_PeriphCLKConfig+0x2a5c>)
34007bfa:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007bfc:	bf02      	ittt	eq
34007bfe:	2240      	moveq	r2, #64	@ 0x40
34007c00:	4b4d      	ldreq	r3, [pc, #308]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c02:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c06:	f7fe bd6b 	b.w	340066e0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34007c0a:	4a51      	ldr	r2, [pc, #324]	@ (34007d50 <HAL_RCCEx_PeriphCLKConfig+0x2a60>)
34007c0c:	4293      	cmp	r3, r2
34007c0e:	d124      	bne.n	34007c5a <HAL_RCCEx_PeriphCLKConfig+0x296a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007c10:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007c12:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007c16:	d004      	beq.n	34007c22 <HAL_RCCEx_PeriphCLKConfig+0x2932>
34007c18:	f240 614b 	movw	r1, #1611	@ 0x64b
34007c1c:	4845      	ldr	r0, [pc, #276]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c1e:	f7f9 fbc5 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007c22:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007c24:	3b01      	subs	r3, #1
34007c26:	2bff      	cmp	r3, #255	@ 0xff
34007c28:	d904      	bls.n	34007c34 <HAL_RCCEx_PeriphCLKConfig+0x2944>
34007c2a:	f240 614c 	movw	r1, #1612	@ 0x64c
34007c2e:	4841      	ldr	r0, [pc, #260]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c30:	f7f9 fbbc 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007c34:	4a40      	ldr	r2, [pc, #256]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c36:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007c38:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007c3c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007c3e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c42:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c46:	3901      	subs	r1, #1
34007c48:	4303      	orrs	r3, r0
34007c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007c4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007c52:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007c56:	f7fe bd88 	b.w	3400676a <HAL_RCCEx_PeriphCLKConfig+0x147a>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34007c5a:	4a3e      	ldr	r2, [pc, #248]	@ (34007d54 <HAL_RCCEx_PeriphCLKConfig+0x2a64>)
34007c5c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c5e:	bf02      	ittt	eq
34007c60:	2240      	moveq	r2, #64	@ 0x40
34007c62:	4b35      	ldreq	r3, [pc, #212]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c64:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c68:	f7fe bd81 	b.w	3400676e <HAL_RCCEx_PeriphCLKConfig+0x147e>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34007c6c:	4a3a      	ldr	r2, [pc, #232]	@ (34007d58 <HAL_RCCEx_PeriphCLKConfig+0x2a68>)
34007c6e:	4293      	cmp	r3, r2
34007c70:	d124      	bne.n	34007cbc <HAL_RCCEx_PeriphCLKConfig+0x29cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007c72:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007c74:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007c78:	d004      	beq.n	34007c84 <HAL_RCCEx_PeriphCLKConfig+0x2994>
34007c7a:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
34007c7e:	482d      	ldr	r0, [pc, #180]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c80:	f7f9 fb94 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007c84:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007c86:	3b01      	subs	r3, #1
34007c88:	2bff      	cmp	r3, #255	@ 0xff
34007c8a:	d904      	bls.n	34007c96 <HAL_RCCEx_PeriphCLKConfig+0x29a6>
34007c8c:	f240 6179 	movw	r1, #1657	@ 0x679
34007c90:	4828      	ldr	r0, [pc, #160]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c92:	f7f9 fb8b 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007c96:	4a28      	ldr	r2, [pc, #160]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c98:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007c9a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007c9e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007ca0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007ca4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007ca8:	3901      	subs	r1, #1
34007caa:	4303      	orrs	r3, r0
34007cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007cb0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007cb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007cb8:	f7fe bdb8 	b.w	3400682c <HAL_RCCEx_PeriphCLKConfig+0x153c>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34007cbc:	4a27      	ldr	r2, [pc, #156]	@ (34007d5c <HAL_RCCEx_PeriphCLKConfig+0x2a6c>)
34007cbe:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007cc0:	bf02      	ittt	eq
34007cc2:	2240      	moveq	r2, #64	@ 0x40
34007cc4:	4b1c      	ldreq	r3, [pc, #112]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007cc6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007cca:	f7fe bdb1 	b.w	34006830 <HAL_RCCEx_PeriphCLKConfig+0x1540>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34007cce:	4a24      	ldr	r2, [pc, #144]	@ (34007d60 <HAL_RCCEx_PeriphCLKConfig+0x2a70>)
34007cd0:	4293      	cmp	r3, r2
34007cd2:	d124      	bne.n	34007d1e <HAL_RCCEx_PeriphCLKConfig+0x2a2e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007cd4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007cd6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007cda:	d004      	beq.n	34007ce6 <HAL_RCCEx_PeriphCLKConfig+0x29f6>
34007cdc:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34007ce0:	4814      	ldr	r0, [pc, #80]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007ce2:	f7f9 fb63 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007ce6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007ce8:	3b01      	subs	r3, #1
34007cea:	2bff      	cmp	r3, #255	@ 0xff
34007cec:	d904      	bls.n	34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a08>
34007cee:	f240 61a6 	movw	r1, #1702	@ 0x6a6
34007cf2:	4810      	ldr	r0, [pc, #64]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007cf4:	f7f9 fb5a 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007cf8:	4a0f      	ldr	r2, [pc, #60]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007cfa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007cfc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007d00:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007d02:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007d06:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007d0a:	3901      	subs	r1, #1
34007d0c:	4303      	orrs	r3, r0
34007d0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007d12:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007d16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007d1a:	f7fe bdcf 	b.w	340068bc <HAL_RCCEx_PeriphCLKConfig+0x15cc>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34007d1e:	4a11      	ldr	r2, [pc, #68]	@ (34007d64 <HAL_RCCEx_PeriphCLKConfig+0x2a74>)
34007d20:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007d22:	bf02      	ittt	eq
34007d24:	2240      	moveq	r2, #64	@ 0x40
34007d26:	4b04      	ldreq	r3, [pc, #16]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007d28:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007d2c:	f7fe bdc8 	b.w	340068c0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>
34007d30:	07031418 	.word	0x07031418
34007d34:	34010a58 	.word	0x34010a58
34007d38:	56028000 	.word	0x56028000
34007d3c:	07011418 	.word	0x07011418
34007d40:	07031818 	.word	0x07031818
34007d44:	07011818 	.word	0x07011818
34007d48:	07030420 	.word	0x07030420
34007d4c:	07010420 	.word	0x07010420
34007d50:	07030820 	.word	0x07030820
34007d54:	07010820 	.word	0x07010820
34007d58:	07030c20 	.word	0x07030c20
34007d5c:	07010c20 	.word	0x07010c20
34007d60:	07031020 	.word	0x07031020
34007d64:	07011020 	.word	0x07011020
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34007d68:	4aab      	ldr	r2, [pc, #684]	@ (34008018 <HAL_RCCEx_PeriphCLKConfig+0x2d28>)
34007d6a:	4293      	cmp	r3, r2
34007d6c:	d124      	bne.n	34007db8 <HAL_RCCEx_PeriphCLKConfig+0x2ac8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007d6e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007d70:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007d74:	d004      	beq.n	34007d80 <HAL_RCCEx_PeriphCLKConfig+0x2a90>
34007d76:	f240 61d2 	movw	r1, #1746	@ 0x6d2
34007d7a:	48a8      	ldr	r0, [pc, #672]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007d7c:	f7f9 fb16 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007d80:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007d82:	3b01      	subs	r3, #1
34007d84:	2bff      	cmp	r3, #255	@ 0xff
34007d86:	d904      	bls.n	34007d92 <HAL_RCCEx_PeriphCLKConfig+0x2aa2>
34007d88:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34007d8c:	48a3      	ldr	r0, [pc, #652]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007d8e:	f7f9 fb0d 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007d92:	4aa3      	ldr	r2, [pc, #652]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007d94:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007d96:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007d9a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007d9c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007da0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007da4:	3901      	subs	r1, #1
34007da6:	4303      	orrs	r3, r0
34007da8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007dac:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007db0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007db4:	f7fe bdca 	b.w	3400694c <HAL_RCCEx_PeriphCLKConfig+0x165c>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34007db8:	4a9a      	ldr	r2, [pc, #616]	@ (34008024 <HAL_RCCEx_PeriphCLKConfig+0x2d34>)
34007dba:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007dbc:	bf02      	ittt	eq
34007dbe:	2240      	moveq	r2, #64	@ 0x40
34007dc0:	4b97      	ldreq	r3, [pc, #604]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007dc2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007dc6:	f7fe bdc3 	b.w	34006950 <HAL_RCCEx_PeriphCLKConfig+0x1660>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34007dca:	4a97      	ldr	r2, [pc, #604]	@ (34008028 <HAL_RCCEx_PeriphCLKConfig+0x2d38>)
34007dcc:	4293      	cmp	r3, r2
34007dce:	d124      	bne.n	34007e1a <HAL_RCCEx_PeriphCLKConfig+0x2b2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007dd0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007dd2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007dd6:	d004      	beq.n	34007de2 <HAL_RCCEx_PeriphCLKConfig+0x2af2>
34007dd8:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34007ddc:	488f      	ldr	r0, [pc, #572]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007dde:	f7f9 fae5 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007de2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007de4:	3b01      	subs	r3, #1
34007de6:	2bff      	cmp	r3, #255	@ 0xff
34007de8:	d904      	bls.n	34007df4 <HAL_RCCEx_PeriphCLKConfig+0x2b04>
34007dea:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34007dee:	488b      	ldr	r0, [pc, #556]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007df0:	f7f9 fadc 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007df4:	4a8a      	ldr	r2, [pc, #552]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007df6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007df8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007dfc:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007dfe:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e02:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e06:	3901      	subs	r1, #1
34007e08:	4303      	orrs	r3, r0
34007e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007e12:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007e16:	f7fe bde0 	b.w	340069da <HAL_RCCEx_PeriphCLKConfig+0x16ea>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34007e1a:	4a84      	ldr	r2, [pc, #528]	@ (3400802c <HAL_RCCEx_PeriphCLKConfig+0x2d3c>)
34007e1c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007e1e:	bf02      	ittt	eq
34007e20:	2240      	moveq	r2, #64	@ 0x40
34007e22:	4b7f      	ldreq	r3, [pc, #508]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007e24:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007e28:	f7fe bdd9 	b.w	340069de <HAL_RCCEx_PeriphCLKConfig+0x16ee>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34007e2c:	4a80      	ldr	r2, [pc, #512]	@ (34008030 <HAL_RCCEx_PeriphCLKConfig+0x2d40>)
34007e2e:	4293      	cmp	r3, r2
34007e30:	d124      	bne.n	34007e7c <HAL_RCCEx_PeriphCLKConfig+0x2b8c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007e32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007e34:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e38:	d004      	beq.n	34007e44 <HAL_RCCEx_PeriphCLKConfig+0x2b54>
34007e3a:	f240 712c 	movw	r1, #1836	@ 0x72c
34007e3e:	4877      	ldr	r0, [pc, #476]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007e40:	f7f9 fab4 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007e44:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007e46:	3b01      	subs	r3, #1
34007e48:	2bff      	cmp	r3, #255	@ 0xff
34007e4a:	d904      	bls.n	34007e56 <HAL_RCCEx_PeriphCLKConfig+0x2b66>
34007e4c:	f240 712d 	movw	r1, #1837	@ 0x72d
34007e50:	4872      	ldr	r0, [pc, #456]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007e52:	f7f9 faab 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007e56:	4a72      	ldr	r2, [pc, #456]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007e58:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007e5a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007e5e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007e60:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e64:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e68:	3901      	subs	r1, #1
34007e6a:	4303      	orrs	r3, r0
34007e6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e70:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007e78:	f7fe bdf7 	b.w	34006a6a <HAL_RCCEx_PeriphCLKConfig+0x177a>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34007e7c:	4a6d      	ldr	r2, [pc, #436]	@ (34008034 <HAL_RCCEx_PeriphCLKConfig+0x2d44>)
34007e7e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007e80:	bf02      	ittt	eq
34007e82:	2240      	moveq	r2, #64	@ 0x40
34007e84:	4b66      	ldreq	r3, [pc, #408]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007e86:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007e8a:	f7fe bdf0 	b.w	34006a6e <HAL_RCCEx_PeriphCLKConfig+0x177e>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34007e8e:	4a6a      	ldr	r2, [pc, #424]	@ (34008038 <HAL_RCCEx_PeriphCLKConfig+0x2d48>)
34007e90:	4293      	cmp	r3, r2
34007e92:	d124      	bne.n	34007ede <HAL_RCCEx_PeriphCLKConfig+0x2bee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007e94:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007e96:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e9a:	d004      	beq.n	34007ea6 <HAL_RCCEx_PeriphCLKConfig+0x2bb6>
34007e9c:	f240 7159 	movw	r1, #1881	@ 0x759
34007ea0:	485e      	ldr	r0, [pc, #376]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007ea2:	f7f9 fa83 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007ea6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007ea8:	3b01      	subs	r3, #1
34007eaa:	2bff      	cmp	r3, #255	@ 0xff
34007eac:	d904      	bls.n	34007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc8>
34007eae:	f240 715a 	movw	r1, #1882	@ 0x75a
34007eb2:	485a      	ldr	r0, [pc, #360]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007eb4:	f7f9 fa7a 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007eb8:	4a59      	ldr	r2, [pc, #356]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007eba:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007ebc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007ec0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007ec2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007ec6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007eca:	3901      	subs	r1, #1
34007ecc:	4303      	orrs	r3, r0
34007ece:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ed2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007ed6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007eda:	f7fe be27 	b.w	34006b2c <HAL_RCCEx_PeriphCLKConfig+0x183c>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34007ede:	4a57      	ldr	r2, [pc, #348]	@ (3400803c <HAL_RCCEx_PeriphCLKConfig+0x2d4c>)
34007ee0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ee2:	bf02      	ittt	eq
34007ee4:	2240      	moveq	r2, #64	@ 0x40
34007ee6:	4b4e      	ldreq	r3, [pc, #312]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007ee8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007eec:	f7fe be20 	b.w	34006b30 <HAL_RCCEx_PeriphCLKConfig+0x1840>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34007ef0:	4a53      	ldr	r2, [pc, #332]	@ (34008040 <HAL_RCCEx_PeriphCLKConfig+0x2d50>)
34007ef2:	4293      	cmp	r3, r2
34007ef4:	d124      	bne.n	34007f40 <HAL_RCCEx_PeriphCLKConfig+0x2c50>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007ef6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ef8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007efc:	d004      	beq.n	34007f08 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
34007efe:	f240 7186 	movw	r1, #1926	@ 0x786
34007f02:	4846      	ldr	r0, [pc, #280]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f04:	f7f9 fa52 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007f08:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007f0a:	3b01      	subs	r3, #1
34007f0c:	2bff      	cmp	r3, #255	@ 0xff
34007f0e:	d904      	bls.n	34007f1a <HAL_RCCEx_PeriphCLKConfig+0x2c2a>
34007f10:	f240 7187 	movw	r1, #1927	@ 0x787
34007f14:	4841      	ldr	r0, [pc, #260]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f16:	f7f9 fa49 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007f1a:	4a41      	ldr	r2, [pc, #260]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007f1c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007f1e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007f22:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007f24:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007f28:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007f2c:	3901      	subs	r1, #1
34007f2e:	4303      	orrs	r3, r0
34007f30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007f34:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007f38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007f3c:	f7fe be3e 	b.w	34006bbc <HAL_RCCEx_PeriphCLKConfig+0x18cc>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34007f40:	4a40      	ldr	r2, [pc, #256]	@ (34008044 <HAL_RCCEx_PeriphCLKConfig+0x2d54>)
34007f42:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f44:	bf02      	ittt	eq
34007f46:	2240      	moveq	r2, #64	@ 0x40
34007f48:	4b35      	ldreq	r3, [pc, #212]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007f4a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f4e:	f7fe be37 	b.w	34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34007f52:	4a3d      	ldr	r2, [pc, #244]	@ (34008048 <HAL_RCCEx_PeriphCLKConfig+0x2d58>)
34007f54:	4293      	cmp	r3, r2
34007f56:	d124      	bne.n	34007fa2 <HAL_RCCEx_PeriphCLKConfig+0x2cb2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007f58:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007f5a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007f5e:	d004      	beq.n	34007f6a <HAL_RCCEx_PeriphCLKConfig+0x2c7a>
34007f60:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34007f64:	482d      	ldr	r0, [pc, #180]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f66:	f7f9 fa21 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007f6a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007f6c:	3b01      	subs	r3, #1
34007f6e:	2bff      	cmp	r3, #255	@ 0xff
34007f70:	d904      	bls.n	34007f7c <HAL_RCCEx_PeriphCLKConfig+0x2c8c>
34007f72:	f240 71b4 	movw	r1, #1972	@ 0x7b4
34007f76:	4829      	ldr	r0, [pc, #164]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f78:	f7f9 fa18 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007f7c:	4a28      	ldr	r2, [pc, #160]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007f7e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007f80:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007f84:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007f86:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007f8a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007f8e:	3901      	subs	r1, #1
34007f90:	4303      	orrs	r3, r0
34007f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007f96:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007f9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007f9e:	f7fe be55 	b.w	34006c4c <HAL_RCCEx_PeriphCLKConfig+0x195c>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34007fa2:	4a2a      	ldr	r2, [pc, #168]	@ (3400804c <HAL_RCCEx_PeriphCLKConfig+0x2d5c>)
34007fa4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007fa6:	bf02      	ittt	eq
34007fa8:	2240      	moveq	r2, #64	@ 0x40
34007faa:	4b1d      	ldreq	r3, [pc, #116]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007fac:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007fb0:	f7fe be4e 	b.w	34006c50 <HAL_RCCEx_PeriphCLKConfig+0x1960>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34007fb4:	4a26      	ldr	r2, [pc, #152]	@ (34008050 <HAL_RCCEx_PeriphCLKConfig+0x2d60>)
34007fb6:	4293      	cmp	r3, r2
34007fb8:	d124      	bne.n	34008004 <HAL_RCCEx_PeriphCLKConfig+0x2d14>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007fba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007fbc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007fc0:	d004      	beq.n	34007fcc <HAL_RCCEx_PeriphCLKConfig+0x2cdc>
34007fc2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
34007fc6:	4815      	ldr	r0, [pc, #84]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007fc8:	f7f9 f9f0 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007fcc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007fce:	3b01      	subs	r3, #1
34007fd0:	2bff      	cmp	r3, #255	@ 0xff
34007fd2:	d904      	bls.n	34007fde <HAL_RCCEx_PeriphCLKConfig+0x2cee>
34007fd4:	f240 71e1 	movw	r1, #2017	@ 0x7e1
34007fd8:	4810      	ldr	r0, [pc, #64]	@ (3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007fda:	f7f9 f9e7 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007fde:	4a10      	ldr	r2, [pc, #64]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007fe0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007fe2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007fe6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007fe8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007fec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007ff0:	3901      	subs	r1, #1
34007ff2:	4303      	orrs	r3, r0
34007ff4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ff8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008000:	f7fe be6c 	b.w	34006cdc <HAL_RCCEx_PeriphCLKConfig+0x19ec>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34008004:	4a13      	ldr	r2, [pc, #76]	@ (34008054 <HAL_RCCEx_PeriphCLKConfig+0x2d64>)
34008006:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008008:	bf02      	ittt	eq
3400800a:	2240      	moveq	r2, #64	@ 0x40
3400800c:	4b04      	ldreq	r3, [pc, #16]	@ (34008020 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3400800e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008012:	f7fe be65 	b.w	34006ce0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
34008016:	bf00      	nop
34008018:	07031420 	.word	0x07031420
3400801c:	34010a58 	.word	0x34010a58
34008020:	56028000 	.word	0x56028000
34008024:	07011420 	.word	0x07011420
34008028:	07031820 	.word	0x07031820
3400802c:	07011820 	.word	0x07011820
34008030:	07030030 	.word	0x07030030
34008034:	07010030 	.word	0x07010030
34008038:	07030430 	.word	0x07030430
3400803c:	07010430 	.word	0x07010430
34008040:	07030830 	.word	0x07030830
34008044:	07010830 	.word	0x07010830
34008048:	07030c30 	.word	0x07030c30
3400804c:	07010c30 	.word	0x07010c30
34008050:	07031030 	.word	0x07031030
34008054:	07011030 	.word	0x07011030
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34008058:	4a8b      	ldr	r2, [pc, #556]	@ (34008288 <HAL_RCCEx_PeriphCLKConfig+0x2f98>)
3400805a:	4293      	cmp	r3, r2
3400805c:	d124      	bne.n	340080a8 <HAL_RCCEx_PeriphCLKConfig+0x2db8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400805e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008060:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008064:	d004      	beq.n	34008070 <HAL_RCCEx_PeriphCLKConfig+0x2d80>
34008066:	f640 010d 	movw	r1, #2061	@ 0x80d
3400806a:	4888      	ldr	r0, [pc, #544]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3400806c:	f7f9 f99e 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008070:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008072:	3b01      	subs	r3, #1
34008074:	2bff      	cmp	r3, #255	@ 0xff
34008076:	d904      	bls.n	34008082 <HAL_RCCEx_PeriphCLKConfig+0x2d92>
34008078:	f640 010e 	movw	r1, #2062	@ 0x80e
3400807c:	4883      	ldr	r0, [pc, #524]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3400807e:	f7f9 f995 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008082:	4a83      	ldr	r2, [pc, #524]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008084:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008086:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400808a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3400808c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008090:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008094:	3901      	subs	r1, #1
34008096:	4303      	orrs	r3, r0
34008098:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400809c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340080a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340080a4:	f7fe be62 	b.w	34006d6c <HAL_RCCEx_PeriphCLKConfig+0x1a7c>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
340080a8:	4a7a      	ldr	r2, [pc, #488]	@ (34008294 <HAL_RCCEx_PeriphCLKConfig+0x2fa4>)
340080aa:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340080ac:	bf02      	ittt	eq
340080ae:	2240      	moveq	r2, #64	@ 0x40
340080b0:	4b77      	ldreq	r3, [pc, #476]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340080b2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340080b6:	f7fe be5b 	b.w	34006d70 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
340080ba:	4a77      	ldr	r2, [pc, #476]	@ (34008298 <HAL_RCCEx_PeriphCLKConfig+0x2fa8>)
340080bc:	4293      	cmp	r3, r2
340080be:	d124      	bne.n	3400810a <HAL_RCCEx_PeriphCLKConfig+0x2e1a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340080c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340080c2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340080c6:	d004      	beq.n	340080d2 <HAL_RCCEx_PeriphCLKConfig+0x2de2>
340080c8:	f640 013a 	movw	r1, #2106	@ 0x83a
340080cc:	486f      	ldr	r0, [pc, #444]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340080ce:	f7f9 f96d 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340080d2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340080d4:	3b01      	subs	r3, #1
340080d6:	2bff      	cmp	r3, #255	@ 0xff
340080d8:	d904      	bls.n	340080e4 <HAL_RCCEx_PeriphCLKConfig+0x2df4>
340080da:	f640 013b 	movw	r1, #2107	@ 0x83b
340080de:	486b      	ldr	r0, [pc, #428]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340080e0:	f7f9 f964 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340080e4:	4a6a      	ldr	r2, [pc, #424]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340080e6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340080e8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340080ec:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340080ee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340080f2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340080f6:	3901      	subs	r1, #1
340080f8:	4303      	orrs	r3, r0
340080fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340080fe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008106:	f7fe be79 	b.w	34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b0c>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3400810a:	4a64      	ldr	r2, [pc, #400]	@ (3400829c <HAL_RCCEx_PeriphCLKConfig+0x2fac>)
3400810c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400810e:	bf02      	ittt	eq
34008110:	2240      	moveq	r2, #64	@ 0x40
34008112:	4b5f      	ldreq	r3, [pc, #380]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008114:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008118:	f7fe be72 	b.w	34006e00 <HAL_RCCEx_PeriphCLKConfig+0x1b10>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3400811c:	4a60      	ldr	r2, [pc, #384]	@ (340082a0 <HAL_RCCEx_PeriphCLKConfig+0x2fb0>)
3400811e:	4293      	cmp	r3, r2
34008120:	d124      	bne.n	3400816c <HAL_RCCEx_PeriphCLKConfig+0x2e7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008122:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008124:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008128:	d004      	beq.n	34008134 <HAL_RCCEx_PeriphCLKConfig+0x2e44>
3400812a:	f640 0167 	movw	r1, #2151	@ 0x867
3400812e:	4857      	ldr	r0, [pc, #348]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008130:	f7f9 f93c 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008134:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008136:	3b01      	subs	r3, #1
34008138:	2bff      	cmp	r3, #255	@ 0xff
3400813a:	d904      	bls.n	34008146 <HAL_RCCEx_PeriphCLKConfig+0x2e56>
3400813c:	f640 0168 	movw	r1, #2152	@ 0x868
34008140:	4852      	ldr	r0, [pc, #328]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008142:	f7f9 f933 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008146:	4a52      	ldr	r2, [pc, #328]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008148:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400814a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400814e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008150:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008154:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008158:	3901      	subs	r1, #1
3400815a:	4303      	orrs	r3, r0
3400815c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008160:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008164:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008168:	f7fe beac 	b.w	34006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1bd4>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3400816c:	4a4d      	ldr	r2, [pc, #308]	@ (340082a4 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
3400816e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008170:	bf02      	ittt	eq
34008172:	2240      	moveq	r2, #64	@ 0x40
34008174:	4b46      	ldreq	r3, [pc, #280]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008176:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400817a:	f7fe bea5 	b.w	34006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bd8>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3400817e:	4a4a      	ldr	r2, [pc, #296]	@ (340082a8 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
34008180:	4293      	cmp	r3, r2
34008182:	d124      	bne.n	340081ce <HAL_RCCEx_PeriphCLKConfig+0x2ede>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008184:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008186:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400818a:	d004      	beq.n	34008196 <HAL_RCCEx_PeriphCLKConfig+0x2ea6>
3400818c:	f640 0194 	movw	r1, #2196	@ 0x894
34008190:	483e      	ldr	r0, [pc, #248]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008192:	f7f9 f90b 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008196:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008198:	3b01      	subs	r3, #1
3400819a:	2bff      	cmp	r3, #255	@ 0xff
3400819c:	d904      	bls.n	340081a8 <HAL_RCCEx_PeriphCLKConfig+0x2eb8>
3400819e:	f640 0195 	movw	r1, #2197	@ 0x895
340081a2:	483a      	ldr	r0, [pc, #232]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340081a4:	f7f9 f902 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340081a8:	4a39      	ldr	r2, [pc, #228]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340081aa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340081ac:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340081b0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340081b2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340081b6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340081ba:	3901      	subs	r1, #1
340081bc:	4303      	orrs	r3, r0
340081be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340081c2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340081c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340081ca:	f7fe bec3 	b.w	34006f54 <HAL_RCCEx_PeriphCLKConfig+0x1c64>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
340081ce:	4a37      	ldr	r2, [pc, #220]	@ (340082ac <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
340081d0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340081d2:	bf02      	ittt	eq
340081d4:	2240      	moveq	r2, #64	@ 0x40
340081d6:	4b2e      	ldreq	r3, [pc, #184]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340081d8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340081dc:	f7fe bebc 	b.w	34006f58 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
340081e0:	4a33      	ldr	r2, [pc, #204]	@ (340082b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
340081e2:	4293      	cmp	r3, r2
340081e4:	d124      	bne.n	34008230 <HAL_RCCEx_PeriphCLKConfig+0x2f40>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340081e6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340081e8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340081ec:	d004      	beq.n	340081f8 <HAL_RCCEx_PeriphCLKConfig+0x2f08>
340081ee:	f640 01c1 	movw	r1, #2241	@ 0x8c1
340081f2:	4826      	ldr	r0, [pc, #152]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340081f4:	f7f9 f8da 	bl	340013ac <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340081f8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340081fa:	3b01      	subs	r3, #1
340081fc:	2bff      	cmp	r3, #255	@ 0xff
340081fe:	d904      	bls.n	3400820a <HAL_RCCEx_PeriphCLKConfig+0x2f1a>
34008200:	f640 01c2 	movw	r1, #2242	@ 0x8c2
34008204:	4821      	ldr	r0, [pc, #132]	@ (3400828c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008206:	f7f9 f8d1 	bl	340013ac <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400820a:	4a21      	ldr	r2, [pc, #132]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400820c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400820e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008212:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008214:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008218:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400821c:	3901      	subs	r1, #1
3400821e:	4303      	orrs	r3, r0
34008220:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008224:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008228:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400822c:	f7fe beda 	b.w	34006fe4 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34008230:	4a20      	ldr	r2, [pc, #128]	@ (340082b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
34008232:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008234:	bf02      	ittt	eq
34008236:	2240      	moveq	r2, #64	@ 0x40
34008238:	4b15      	ldreq	r3, [pc, #84]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400823a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400823e:	f7fe bed3 	b.w	34006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cf8>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34008242:	f7fc ff39 	bl	340050b8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34008246:	f7fe bef5 	b.w	34007034 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3400824a:	f7fc ff35 	bl	340050b8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
3400824e:	f7fe bf13 	b.w	34007078 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34008252:	4a19      	ldr	r2, [pc, #100]	@ (340082b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
34008254:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008256:	bf02      	ittt	eq
34008258:	2240      	moveq	r2, #64	@ 0x40
3400825a:	4b0d      	ldreq	r3, [pc, #52]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400825c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008260:	f7fe bf4a 	b.w	340070f8 <HAL_RCCEx_PeriphCLKConfig+0x1e08>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34008264:	f7fc ff28 	bl	340050b8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34008268:	f7fe bf53 	b.w	34007112 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
3400826c:	4a13      	ldr	r2, [pc, #76]	@ (340082bc <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
3400826e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008270:	bf02      	ittt	eq
34008272:	2240      	moveq	r2, #64	@ 0x40
34008274:	4b06      	ldreq	r3, [pc, #24]	@ (34008290 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008276:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400827a:	f7fe bfa5 	b.w	340071c8 <HAL_RCCEx_PeriphCLKConfig+0x1ed8>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3400827e:	f7fc ff1b 	bl	340050b8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34008282:	f7fe bfae 	b.w	340071e2 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
34008286:	bf00      	nop
34008288:	07031430 	.word	0x07031430
3400828c:	34010a58 	.word	0x34010a58
34008290:	56028000 	.word	0x56028000
34008294:	07011430 	.word	0x07011430
34008298:	07031830 	.word	0x07031830
3400829c:	07011830 	.word	0x07011830
340082a0:	07031c30 	.word	0x07031c30
340082a4:	07011c30 	.word	0x07011c30
340082a8:	07030034 	.word	0x07030034
340082ac:	07010034 	.word	0x07010034
340082b0:	07030434 	.word	0x07030434
340082b4:	07010434 	.word	0x07010434
340082b8:	03010c14 	.word	0x03010c14
340082bc:	03011414 	.word	0x03011414

340082c0 <HAL_RCCEx_GetPLL1CLKFreq>:
{
340082c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
340082c2:	4c1e      	ldr	r4, [pc, #120]	@ (3400833c <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
340082c4:	6863      	ldr	r3, [r4, #4]
340082c6:	05d9      	lsls	r1, r3, #23
340082c8:	d506      	bpl.n	340082d8 <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
340082ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
340082ce:	005a      	lsls	r2, r3, #1
340082d0:	d40f      	bmi.n	340082f2 <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340082d2:	2000      	movs	r0, #0
}
340082d4:	b003      	add	sp, #12
340082d6:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
340082d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
340082dc:	011b      	lsls	r3, r3, #4
340082de:	d5f8      	bpl.n	340082d2 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340082e0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340082e4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340082e8:	b003      	add	sp, #12
340082ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340082ee:	f7fc bf9d 	b.w	3400522c <RCCEx_GetPLLSourceFreq>
340082f2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340082f6:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340082fa:	f7fc ff97 	bl	3400522c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340082fe:	2800      	cmp	r0, #0
34008300:	d0e7      	beq.n	340082d2 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34008302:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
34008306:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400830a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400830e:	d0e0      	beq.n	340082d2 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34008310:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34008314:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008318:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3400831c:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008320:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008324:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34008328:	9401      	str	r4, [sp, #4]
3400832a:	9500      	str	r5, [sp, #0]
3400832c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008330:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008334:	f7fc ffb0 	bl	34005298 <RCCEx_CalcPLLFreq>
34008338:	e7cc      	b.n	340082d4 <HAL_RCCEx_GetPLL1CLKFreq+0x14>
3400833a:	bf00      	nop
3400833c:	56028000 	.word	0x56028000

34008340 <HAL_RCCEx_GetPLL2CLKFreq>:
{
34008340:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34008342:	4c1e      	ldr	r4, [pc, #120]	@ (340083bc <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
34008344:	6863      	ldr	r3, [r4, #4]
34008346:	0599      	lsls	r1, r3, #22
34008348:	d506      	bpl.n	34008358 <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
3400834a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3400834e:	005a      	lsls	r2, r3, #1
34008350:	d40f      	bmi.n	34008372 <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34008352:	2000      	movs	r0, #0
}
34008354:	b003      	add	sp, #12
34008356:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34008358:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
3400835c:	011b      	lsls	r3, r3, #4
3400835e:	d5f8      	bpl.n	34008352 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34008360:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34008364:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34008368:	b003      	add	sp, #12
3400836a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3400836e:	f7fc bf5d 	b.w	3400522c <RCCEx_GetPLLSourceFreq>
34008372:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34008376:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3400837a:	f7fc ff57 	bl	3400522c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3400837e:	2800      	cmp	r0, #0
34008380:	d0e7      	beq.n	34008352 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34008382:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
34008386:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400838a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400838e:	d0e0      	beq.n	34008352 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34008390:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34008394:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34008398:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
3400839c:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340083a0:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340083a4:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
340083a8:	9401      	str	r4, [sp, #4]
340083aa:	9500      	str	r5, [sp, #0]
340083ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340083b0:	f3c2 220b 	ubfx	r2, r2, #8, #12
340083b4:	f7fc ff70 	bl	34005298 <RCCEx_CalcPLLFreq>
340083b8:	e7cc      	b.n	34008354 <HAL_RCCEx_GetPLL2CLKFreq+0x14>
340083ba:	bf00      	nop
340083bc:	56028000 	.word	0x56028000

340083c0 <HAL_RCCEx_GetPLL3CLKFreq>:
{
340083c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340083c2:	4c1e      	ldr	r4, [pc, #120]	@ (3400843c <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
340083c4:	6863      	ldr	r3, [r4, #4]
340083c6:	0559      	lsls	r1, r3, #21
340083c8:	d506      	bpl.n	340083d8 <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
340083ca:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340083ce:	005a      	lsls	r2, r3, #1
340083d0:	d40f      	bmi.n	340083f2 <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340083d2:	2000      	movs	r0, #0
}
340083d4:	b003      	add	sp, #12
340083d6:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340083d8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340083dc:	011b      	lsls	r3, r3, #4
340083de:	d5f8      	bpl.n	340083d2 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
340083e0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340083e4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340083e8:	b003      	add	sp, #12
340083ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340083ee:	f7fc bf1d 	b.w	3400522c <RCCEx_GetPLLSourceFreq>
340083f2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340083f6:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340083fa:	f7fc ff17 	bl	3400522c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340083fe:	2800      	cmp	r0, #0
34008400:	d0e7      	beq.n	340083d2 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34008402:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
34008406:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400840a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400840e:	d0e0      	beq.n	340083d2 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34008410:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34008414:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008418:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3400841c:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008420:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34008424:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34008428:	9401      	str	r4, [sp, #4]
3400842a:	9500      	str	r5, [sp, #0]
3400842c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008430:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008434:	f7fc ff30 	bl	34005298 <RCCEx_CalcPLLFreq>
34008438:	e7cc      	b.n	340083d4 <HAL_RCCEx_GetPLL3CLKFreq+0x14>
3400843a:	bf00      	nop
3400843c:	56028000 	.word	0x56028000

34008440 <HAL_RCCEx_GetPLL4CLKFreq>:
{
34008440:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34008442:	4c1e      	ldr	r4, [pc, #120]	@ (340084bc <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
34008444:	6863      	ldr	r3, [r4, #4]
34008446:	0519      	lsls	r1, r3, #20
34008448:	d506      	bpl.n	34008458 <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3400844a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3400844e:	005a      	lsls	r2, r3, #1
34008450:	d40f      	bmi.n	34008472 <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34008452:	2000      	movs	r0, #0
}
34008454:	b003      	add	sp, #12
34008456:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34008458:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
3400845c:	011b      	lsls	r3, r3, #4
3400845e:	d5f8      	bpl.n	34008452 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34008460:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34008464:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34008468:	b003      	add	sp, #12
3400846a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3400846e:	f7fc bedd 	b.w	3400522c <RCCEx_GetPLLSourceFreq>
34008472:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34008476:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3400847a:	f7fc fed7 	bl	3400522c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3400847e:	2800      	cmp	r0, #0
34008480:	d0e7      	beq.n	34008452 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34008482:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
34008486:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400848a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400848e:	d0e0      	beq.n	34008452 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
34008490:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34008494:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34008498:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
3400849c:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340084a0:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340084a4:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
340084a8:	9401      	str	r4, [sp, #4]
340084aa:	9500      	str	r5, [sp, #0]
340084ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340084b0:	f3c2 220b 	ubfx	r2, r2, #8, #12
340084b4:	f7fc fef0 	bl	34005298 <RCCEx_CalcPLLFreq>
340084b8:	e7cc      	b.n	34008454 <HAL_RCCEx_GetPLL4CLKFreq+0x14>
340084ba:	bf00      	nop
340084bc:	56028000 	.word	0x56028000

340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
340084c0:	4b3e      	ldr	r3, [pc, #248]	@ (340085bc <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
340084c2:	b510      	push	{r4, lr}
340084c4:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
340084c8:	0652      	lsls	r2, r2, #25
340084ca:	d56b      	bpl.n	340085a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
340084cc:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
340084d0:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
340084d4:	3a01      	subs	r2, #1
340084d6:	2a06      	cmp	r2, #6
340084d8:	d805      	bhi.n	340084e6 <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
340084da:	e8df f002 	tbb	[pc, r2]
340084de:	150f      	.short	0x150f
340084e0:	3e321b48 	.word	0x3e321b48
340084e4:	54          	.byte	0x54
340084e5:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
340084e6:	f7fc fe07 	bl	340050f8 <LL_RCC_HSI_IsReady>
340084ea:	2800      	cmp	r0, #0
340084ec:	d05a      	beq.n	340085a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340084ee:	4b33      	ldr	r3, [pc, #204]	@ (340085bc <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340084f0:	4833      	ldr	r0, [pc, #204]	@ (340085c0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
340084f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340084f4:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340084f8:	40d8      	lsrs	r0, r3
340084fa:	e054      	b.n	340085a6 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
340084fc:	f7fc fe04 	bl	34005108 <LL_RCC_MSI_IsReady>
34008500:	2800      	cmp	r0, #0
34008502:	d04f      	beq.n	340085a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = MSI_VALUE;
34008504:	482f      	ldr	r0, [pc, #188]	@ (340085c4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
34008506:	e04e      	b.n	340085a6 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34008508:	f7fc fdee 	bl	340050e8 <LL_RCC_HSE_IsReady>
3400850c:	2800      	cmp	r0, #0
3400850e:	d049      	beq.n	340085a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = HSE_VALUE;
34008510:	482d      	ldr	r0, [pc, #180]	@ (340085c8 <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
34008512:	e048      	b.n	340085a6 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34008514:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008518:	06d4      	lsls	r4, r2, #27
3400851a:	d543      	bpl.n	340085a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3400851c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34008520:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008524:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008528:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3400852a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          switch (LL_RCC_IC20_GetSource())
3400852e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008532:	d03c      	beq.n	340085ae <RCCEx_GetCLKPCLKFreq.constprop.0+0xee>
34008534:	d833      	bhi.n	3400859e <RCCEx_GetCLKPCLKFreq.constprop.0+0xde>
34008536:	bbbb      	cbnz	r3, 340085a8 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe8>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008538:	f7ff fec2 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
3400853c:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
34008540:	e031      	b.n	340085a6 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34008542:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008546:	0590      	lsls	r0, r2, #22
34008548:	d52c      	bpl.n	340085a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400854a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3400854e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34008552:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008556:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34008558:	e7e7      	b.n	3400852a <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
        if (LL_RCC_IC15_IsEnabled() != 0U)
3400855a:	f7fc fe4d 	bl	340051f8 <LL_RCC_IC15_IsEnabled>
3400855e:	b308      	cbz	r0, 340085a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
          ic_divider = LL_RCC_IC15_GetDivider();
34008560:	f7fc fe52 	bl	34005208 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008564:	4b15      	ldr	r3, [pc, #84]	@ (340085bc <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
34008566:	4604      	mov	r4, r0
34008568:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400856c:	e7dd      	b.n	3400852a <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
3400856e:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008572:	0351      	lsls	r1, r2, #13
34008574:	d516      	bpl.n	340085a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34008576:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
3400857a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3400857e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008582:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34008584:	e7d1      	b.n	3400852a <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34008586:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400858a:	0312      	lsls	r2, r2, #12
3400858c:	d50a      	bpl.n	340085a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3400858e:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008592:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34008596:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400859a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3400859c:	e7c5      	b.n	3400852a <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
          switch (LL_RCC_IC20_GetSource())
3400859e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340085a2:	d007      	beq.n	340085b4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf4>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
340085a4:	2000      	movs	r0, #0
}
340085a6:	bd10      	pop	{r4, pc}
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340085a8:	f7ff feca 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
340085ac:	e7c6      	b.n	3400853c <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340085ae:	f7ff ff07 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
340085b2:	e7c3      	b.n	3400853c <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340085b4:	f7ff ff44 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
340085b8:	e7c0      	b.n	3400853c <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
340085ba:	bf00      	nop
340085bc:	56028000 	.word	0x56028000
340085c0:	03d09000 	.word	0x03d09000
340085c4:	003d0900 	.word	0x003d0900
340085c8:	02dc6c00 	.word	0x02dc6c00

340085cc <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
340085cc:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
340085ce:	4d2b      	ldr	r5, [pc, #172]	@ (3400867c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb0>)
340085d0:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
340085d4:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
340085d8:	2b06      	cmp	r3, #6
340085da:	d835      	bhi.n	34008648 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
340085dc:	e8df f003 	tbb	[pc, r3]
340085e0:	28110d04 	.word	0x28110d04
340085e4:	3c45      	.short	0x3c45
340085e6:	4b          	.byte	0x4b
340085e7:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340085e8:	f7fc fd10 	bl	3400500c <HAL_RCC_GetSysClockFreq>
340085ec:	f7fc fe16 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340085f0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
340085f2:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340085f6:	40d8      	lsrs	r0, r3
340085f8:	e027      	b.n	3400864a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
340085fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340085fe:	f7ff bf5f 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34008602:	f7fc fdb1 	bl	34005168 <LL_RCC_IC7_IsEnabled>
34008606:	b1f8      	cbz	r0, 34008648 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC7_GetDivider();
34008608:	f7fc fdb6 	bl	34005178 <LL_RCC_IC7_GetDivider>
3400860c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3400860e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008612:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34008616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400861a:	d017      	beq.n	3400864c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x80>
3400861c:	d811      	bhi.n	34008642 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x76>
3400861e:	b913      	cbnz	r3, 34008626 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008620:	f7ff fe4e 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
34008624:	e001      	b.n	3400862a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008626:	f7ff fe8b 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3400862a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400862e:	e00c      	b.n	3400864a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008630:	f7fc fdac 	bl	3400518c <LL_RCC_IC8_IsEnabled>
34008634:	b140      	cbz	r0, 34008648 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC8_GetDivider();
34008636:	f7fc fdb1 	bl	3400519c <LL_RCC_IC8_GetDivider>
3400863a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3400863e:	4604      	mov	r4, r0
34008640:	e7e7      	b.n	34008612 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
        switch (LL_RCC_IC8_GetSource())
34008642:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008646:	d004      	beq.n	34008652 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x86>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34008648:	2000      	movs	r0, #0
}
3400864a:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400864c:	f7ff feb8 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34008650:	e7eb      	b.n	3400862a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008652:	f7ff fef5 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34008656:	e7e8      	b.n	3400862a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
      if (LL_RCC_HSI_IsReady() != 0U)
34008658:	f7fc fd4e 	bl	340050f8 <LL_RCC_HSI_IsReady>
3400865c:	2800      	cmp	r0, #0
3400865e:	d0f3      	beq.n	34008648 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008660:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008662:	4807      	ldr	r0, [pc, #28]	@ (34008680 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb4>)
34008664:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008668:	e7c5      	b.n	340085f6 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
3400866a:	f7fc fd4d 	bl	34005108 <LL_RCC_MSI_IsReady>
3400866e:	2800      	cmp	r0, #0
34008670:	d0ea      	beq.n	34008648 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        spdifrx_frequency = MSI_VALUE;
34008672:	4804      	ldr	r0, [pc, #16]	@ (34008684 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
34008674:	e7e9      	b.n	3400864a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34008676:	4804      	ldr	r0, [pc, #16]	@ (34008688 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
  return spdifrx_frequency;
34008678:	e7e7      	b.n	3400864a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
3400867a:	bf00      	nop
3400867c:	56028000 	.word	0x56028000
34008680:	03d09000 	.word	0x03d09000
34008684:	003d0900 	.word	0x003d0900
34008688:	00bb8000 	.word	0x00bb8000

3400868c <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
3400868c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400868e:	f7fc fd5d 	bl	3400514c <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008692:	4b36      	ldr	r3, [pc, #216]	@ (3400876c <RCCEx_GetXSPICLKFreq+0xe0>)
34008694:	4298      	cmp	r0, r3
34008696:	d028      	beq.n	340086ea <RCCEx_GetXSPICLKFreq+0x5e>
34008698:	d81b      	bhi.n	340086d2 <RCCEx_GetXSPICLKFreq+0x46>
3400869a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400869e:	4298      	cmp	r0, r3
340086a0:	d013      	beq.n	340086ca <RCCEx_GetXSPICLKFreq+0x3e>
340086a2:	d80b      	bhi.n	340086bc <RCCEx_GetXSPICLKFreq+0x30>
340086a4:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340086a8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340086ac:	429a      	cmp	r2, r3
340086ae:	d04a      	beq.n	34008746 <RCCEx_GetXSPICLKFreq+0xba>
340086b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340086b4:	4298      	cmp	r0, r3
340086b6:	d046      	beq.n	34008746 <RCCEx_GetXSPICLKFreq+0xba>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
340086b8:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
340086ba:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340086bc:	4b2c      	ldr	r3, [pc, #176]	@ (34008770 <RCCEx_GetXSPICLKFreq+0xe4>)
340086be:	4298      	cmp	r0, r3
340086c0:	d003      	beq.n	340086ca <RCCEx_GetXSPICLKFreq+0x3e>
340086c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340086c6:	4298      	cmp	r0, r3
340086c8:	d1f6      	bne.n	340086b8 <RCCEx_GetXSPICLKFreq+0x2c>
}
340086ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340086ce:	f7ff bef7 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340086d2:	4b28      	ldr	r3, [pc, #160]	@ (34008774 <RCCEx_GetXSPICLKFreq+0xe8>)
340086d4:	4298      	cmp	r0, r3
340086d6:	d028      	beq.n	3400872a <RCCEx_GetXSPICLKFreq+0x9e>
340086d8:	d820      	bhi.n	3400871c <RCCEx_GetXSPICLKFreq+0x90>
340086da:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340086de:	4298      	cmp	r0, r3
340086e0:	d003      	beq.n	340086ea <RCCEx_GetXSPICLKFreq+0x5e>
340086e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340086e6:	4298      	cmp	r0, r3
340086e8:	d1e6      	bne.n	340086b8 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
340086ea:	4b23      	ldr	r3, [pc, #140]	@ (34008778 <RCCEx_GetXSPICLKFreq+0xec>)
340086ec:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
340086f0:	f010 0004 	ands.w	r0, r0, #4
340086f4:	d0e1      	beq.n	340086ba <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
340086f6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
340086fa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
340086fe:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008702:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008704:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC4_GetSource())
34008708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400870c:	d02a      	beq.n	34008764 <RCCEx_GetXSPICLKFreq+0xd8>
3400870e:	d820      	bhi.n	34008752 <RCCEx_GetXSPICLKFreq+0xc6>
34008710:	bb2b      	cbnz	r3, 3400875e <RCCEx_GetXSPICLKFreq+0xd2>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008712:	f7ff fdd5 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
34008716:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
3400871a:	e7ce      	b.n	340086ba <RCCEx_GetXSPICLKFreq+0x2e>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3400871c:	4b17      	ldr	r3, [pc, #92]	@ (3400877c <RCCEx_GetXSPICLKFreq+0xf0>)
3400871e:	4298      	cmp	r0, r3
34008720:	d003      	beq.n	3400872a <RCCEx_GetXSPICLKFreq+0x9e>
34008722:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008726:	4298      	cmp	r0, r3
34008728:	d1c6      	bne.n	340086b8 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3400872a:	4b13      	ldr	r3, [pc, #76]	@ (34008778 <RCCEx_GetXSPICLKFreq+0xec>)
3400872c:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34008730:	f010 0008 	ands.w	r0, r0, #8
34008734:	d0c1      	beq.n	340086ba <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34008736:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3400873a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3400873e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008742:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008744:	e7de      	b.n	34008704 <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008746:	f7fc fc61 	bl	3400500c <HAL_RCC_GetSysClockFreq>
}
3400874a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3400874e:	f7fc bd65 	b.w	3400521c <RCCEx_GetHCLKFreq>
        switch (LL_RCC_IC4_GetSource())
34008752:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008756:	d1af      	bne.n	340086b8 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008758:	f7ff fe72 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
3400875c:	e7db      	b.n	34008716 <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400875e:	f7ff fdef 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
34008762:	e7d8      	b.n	34008716 <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008764:	f7ff fe2c 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34008768:	e7d5      	b.n	34008716 <RCCEx_GetXSPICLKFreq+0x8a>
3400876a:	bf00      	nop
3400876c:	03020014 	.word	0x03020014
34008770:	03010414 	.word	0x03010414
34008774:	03030014 	.word	0x03030014
34008778:	56028000 	.word	0x56028000
3400877c:	03030414 	.word	0x03030414

34008780 <RCCEx_GetOTGPHYCLKFreq>:
{
34008780:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008782:	f7fc fce3 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34008786:	4b2b      	ldr	r3, [pc, #172]	@ (34008834 <RCCEx_GetOTGPHYCLKFreq+0xb4>)
34008788:	4298      	cmp	r0, r3
3400878a:	d021      	beq.n	340087d0 <RCCEx_GetOTGPHYCLKFreq+0x50>
3400878c:	d815      	bhi.n	340087ba <RCCEx_GetOTGPHYCLKFreq+0x3a>
3400878e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008792:	4298      	cmp	r0, r3
34008794:	d00d      	beq.n	340087b2 <RCCEx_GetOTGPHYCLKFreq+0x32>
34008796:	d809      	bhi.n	340087ac <RCCEx_GetOTGPHYCLKFreq+0x2c>
34008798:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400879c:	4298      	cmp	r0, r3
3400879e:	d02d      	beq.n	340087fc <RCCEx_GetOTGPHYCLKFreq+0x7c>
340087a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340087a4:	4298      	cmp	r0, r3
340087a6:	d029      	beq.n	340087fc <RCCEx_GetOTGPHYCLKFreq+0x7c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
340087a8:	2000      	movs	r0, #0
}
340087aa:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340087ac:	4b22      	ldr	r3, [pc, #136]	@ (34008838 <RCCEx_GetOTGPHYCLKFreq+0xb8>)
340087ae:	4298      	cmp	r0, r3
340087b0:	d1fa      	bne.n	340087a8 <RCCEx_GetOTGPHYCLKFreq+0x28>
}
340087b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340087b6:	f7ff be83 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340087ba:	4b20      	ldr	r3, [pc, #128]	@ (3400883c <RCCEx_GetOTGPHYCLKFreq+0xbc>)
340087bc:	4298      	cmp	r0, r3
340087be:	d023      	beq.n	34008808 <RCCEx_GetOTGPHYCLKFreq+0x88>
340087c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340087c4:	4298      	cmp	r0, r3
340087c6:	d01f      	beq.n	34008808 <RCCEx_GetOTGPHYCLKFreq+0x88>
340087c8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340087cc:	4298      	cmp	r0, r3
340087ce:	d1eb      	bne.n	340087a8 <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340087d0:	f7fc fd12 	bl	340051f8 <LL_RCC_IC15_IsEnabled>
340087d4:	2800      	cmp	r0, #0
340087d6:	d0e7      	beq.n	340087a8 <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
340087d8:	f7fc fd16 	bl	34005208 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340087dc:	4b18      	ldr	r3, [pc, #96]	@ (34008840 <RCCEx_GetOTGPHYCLKFreq+0xc0>)
340087de:	4604      	mov	r4, r0
340087e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340087e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
340087e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340087ec:	d01f      	beq.n	3400882e <RCCEx_GetOTGPHYCLKFreq+0xae>
340087ee:	d815      	bhi.n	3400881c <RCCEx_GetOTGPHYCLKFreq+0x9c>
340087f0:	b9d3      	cbnz	r3, 34008828 <RCCEx_GetOTGPHYCLKFreq+0xa8>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340087f2:	f7ff fd65 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
340087f6:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340087fa:	e7d6      	b.n	340087aa <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
340087fc:	f7fc fc74 	bl	340050e8 <LL_RCC_HSE_IsReady>
34008800:	2800      	cmp	r0, #0
34008802:	d0d1      	beq.n	340087a8 <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
34008804:	480f      	ldr	r0, [pc, #60]	@ (34008844 <RCCEx_GetOTGPHYCLKFreq+0xc4>)
34008806:	e7d0      	b.n	340087aa <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34008808:	f7fc fc6e 	bl	340050e8 <LL_RCC_HSE_IsReady>
3400880c:	2800      	cmp	r0, #0
3400880e:	d0cb      	beq.n	340087a8 <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34008810:	f7fc fc62 	bl	340050d8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34008814:	2800      	cmp	r0, #0
34008816:	d1f5      	bne.n	34008804 <RCCEx_GetOTGPHYCLKFreq+0x84>
          usb_frequency = HSE_VALUE;
34008818:	480b      	ldr	r0, [pc, #44]	@ (34008848 <RCCEx_GetOTGPHYCLKFreq+0xc8>)
  return usb_frequency;
3400881a:	e7c6      	b.n	340087aa <RCCEx_GetOTGPHYCLKFreq+0x2a>
        switch (LL_RCC_IC15_GetSource())
3400881c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008820:	d1c2      	bne.n	340087a8 <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008822:	f7ff fe0d 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34008826:	e7e6      	b.n	340087f6 <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008828:	f7ff fd8a 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
3400882c:	e7e3      	b.n	340087f6 <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400882e:	f7ff fdc7 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34008832:	e7e0      	b.n	340087f6 <RCCEx_GetOTGPHYCLKFreq+0x76>
34008834:	03020c14 	.word	0x03020c14
34008838:	03011414 	.word	0x03011414
3400883c:	03030c14 	.word	0x03030c14
34008840:	56028000 	.word	0x56028000
34008844:	016e3600 	.word	0x016e3600
34008848:	02dc6c00 	.word	0x02dc6c00

3400884c <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
3400884c:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
3400884e:	f7fc fc7d 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34008852:	4b11      	ldr	r3, [pc, #68]	@ (34008898 <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
34008854:	4298      	cmp	r0, r3
34008856:	d01c      	beq.n	34008892 <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
34008858:	d805      	bhi.n	34008866 <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
3400885a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400885e:	4298      	cmp	r0, r3
34008860:	d012      	beq.n	34008888 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34008862:	2000      	movs	r0, #0
}
34008864:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34008866:	4b0d      	ldr	r3, [pc, #52]	@ (3400889c <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
34008868:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
3400886c:	4298      	cmp	r0, r3
3400886e:	d1f8      	bne.n	34008862 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
34008870:	f7fc fc3a 	bl	340050e8 <LL_RCC_HSE_IsReady>
34008874:	2800      	cmp	r0, #0
34008876:	d0f4      	beq.n	34008862 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34008878:	f7fc fc2e 	bl	340050d8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
3400887c:	4b08      	ldr	r3, [pc, #32]	@ (340088a0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
3400887e:	2800      	cmp	r0, #0
34008880:	4808      	ldr	r0, [pc, #32]	@ (340088a4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
34008882:	bf08      	it	eq
34008884:	4618      	moveq	r0, r3
34008886:	e7ed      	b.n	34008864 <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34008888:	4807      	ldr	r0, [pc, #28]	@ (340088a8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
3400888a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3400888e:	f7ff bf77 	b.w	34008780 <RCCEx_GetOTGPHYCLKFreq>
34008892:	4806      	ldr	r0, [pc, #24]	@ (340088ac <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
34008894:	e7f9      	b.n	3400888a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
34008896:	bf00      	nop
34008898:	01001814 	.word	0x01001814
3400889c:	01011014 	.word	0x01011014
340088a0:	02dc6c00 	.word	0x02dc6c00
340088a4:	016e3600 	.word	0x016e3600
340088a8:	03000c14 	.word	0x03000c14
340088ac:	03001414 	.word	0x03001414

340088b0 <RCCEx_GetUSARTCLKFreq>:
{
340088b0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340088b2:	f7fc fc4b 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340088b6:	4b6f      	ldr	r3, [pc, #444]	@ (34008a74 <RCCEx_GetUSARTCLKFreq+0x1c4>)
340088b8:	4298      	cmp	r0, r3
340088ba:	d039      	beq.n	34008930 <RCCEx_GetUSARTCLKFreq+0x80>
340088bc:	d852      	bhi.n	34008964 <RCCEx_GetUSARTCLKFreq+0xb4>
340088be:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
340088c2:	4298      	cmp	r0, r3
340088c4:	f000 80b5 	beq.w	34008a32 <RCCEx_GetUSARTCLKFreq+0x182>
340088c8:	d813      	bhi.n	340088f2 <RCCEx_GetUSARTCLKFreq+0x42>
340088ca:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
340088ce:	4298      	cmp	r0, r3
340088d0:	f000 80af 	beq.w	34008a32 <RCCEx_GetUSARTCLKFreq+0x182>
340088d4:	d80b      	bhi.n	340088ee <RCCEx_GetUSARTCLKFreq+0x3e>
340088d6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
340088da:	4298      	cmp	r0, r3
340088dc:	f000 80a9 	beq.w	34008a32 <RCCEx_GetUSARTCLKFreq+0x182>
340088e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340088e4:	4298      	cmp	r0, r3
340088e6:	f000 80ae 	beq.w	34008a46 <RCCEx_GetUSARTCLKFreq+0x196>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
340088ea:	2000      	movs	r0, #0
}
340088ec:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340088ee:	4b62      	ldr	r3, [pc, #392]	@ (34008a78 <RCCEx_GetUSARTCLKFreq+0x1c8>)
340088f0:	e7f8      	b.n	340088e4 <RCCEx_GetUSARTCLKFreq+0x34>
340088f2:	4b62      	ldr	r3, [pc, #392]	@ (34008a7c <RCCEx_GetUSARTCLKFreq+0x1cc>)
340088f4:	4298      	cmp	r0, r3
340088f6:	d00c      	beq.n	34008912 <RCCEx_GetUSARTCLKFreq+0x62>
340088f8:	d80f      	bhi.n	3400891a <RCCEx_GetUSARTCLKFreq+0x6a>
340088fa:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
340088fe:	4298      	cmp	r0, r3
34008900:	d007      	beq.n	34008912 <RCCEx_GetUSARTCLKFreq+0x62>
34008902:	bf8e      	itee	hi
34008904:	4b5e      	ldrhi	r3, [pc, #376]	@ (34008a80 <RCCEx_GetUSARTCLKFreq+0x1d0>)
34008906:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
3400890a:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
3400890e:	4298      	cmp	r0, r3
34008910:	d1eb      	bne.n	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
}
34008912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008916:	f7ff bdd3 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3400891a:	4b5a      	ldr	r3, [pc, #360]	@ (34008a84 <RCCEx_GetUSARTCLKFreq+0x1d4>)
3400891c:	4298      	cmp	r0, r3
3400891e:	d007      	beq.n	34008930 <RCCEx_GetUSARTCLKFreq+0x80>
34008920:	bf8e      	itee	hi
34008922:	4b59      	ldrhi	r3, [pc, #356]	@ (34008a88 <RCCEx_GetUSARTCLKFreq+0x1d8>)
34008924:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34008928:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
3400892c:	4298      	cmp	r0, r3
3400892e:	d1dc      	bne.n	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008930:	f7fc fc3e 	bl	340051b0 <LL_RCC_IC9_IsEnabled>
34008934:	2800      	cmp	r0, #0
34008936:	d0d8      	beq.n	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
34008938:	f7fc fc42 	bl	340051c0 <LL_RCC_IC9_GetDivider>
3400893c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3400893e:	4b53      	ldr	r3, [pc, #332]	@ (34008a8c <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008940:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008944:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400894c:	f000 808e 	beq.w	34008a6c <RCCEx_GetUSARTCLKFreq+0x1bc>
34008950:	f200 8082 	bhi.w	34008a58 <RCCEx_GetUSARTCLKFreq+0x1a8>
34008954:	2b00      	cmp	r3, #0
34008956:	f040 8086 	bne.w	34008a66 <RCCEx_GetUSARTCLKFreq+0x1b6>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400895a:	f7ff fcb1 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
3400895e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008962:	e7c3      	b.n	340088ec <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008964:	4b4a      	ldr	r3, [pc, #296]	@ (34008a90 <RCCEx_GetUSARTCLKFreq+0x1e0>)
34008966:	4298      	cmp	r0, r3
34008968:	d045      	beq.n	340089f6 <RCCEx_GetUSARTCLKFreq+0x146>
3400896a:	d833      	bhi.n	340089d4 <RCCEx_GetUSARTCLKFreq+0x124>
3400896c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008970:	4298      	cmp	r0, r3
34008972:	d028      	beq.n	340089c6 <RCCEx_GetUSARTCLKFreq+0x116>
34008974:	d81c      	bhi.n	340089b0 <RCCEx_GetUSARTCLKFreq+0x100>
34008976:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
3400897a:	3bfc      	subs	r3, #252	@ 0xfc
3400897c:	4298      	cmp	r0, r3
3400897e:	d006      	beq.n	3400898e <RCCEx_GetUSARTCLKFreq+0xde>
34008980:	d810      	bhi.n	340089a4 <RCCEx_GetUSARTCLKFreq+0xf4>
34008982:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008986:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
3400898a:	4298      	cmp	r0, r3
3400898c:	d1ad      	bne.n	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3400898e:	f7fc fc21 	bl	340051d4 <LL_RCC_IC14_IsEnabled>
34008992:	2800      	cmp	r0, #0
34008994:	d0a9      	beq.n	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
34008996:	f7fc fc25 	bl	340051e4 <LL_RCC_IC14_GetDivider>
3400899a:	4b3c      	ldr	r3, [pc, #240]	@ (34008a8c <RCCEx_GetUSARTCLKFreq+0x1dc>)
3400899c:	4604      	mov	r4, r0
3400899e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340089a2:	e7cf      	b.n	34008944 <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340089a4:	4b3b      	ldr	r3, [pc, #236]	@ (34008a94 <RCCEx_GetUSARTCLKFreq+0x1e4>)
340089a6:	4298      	cmp	r0, r3
340089a8:	d0f1      	beq.n	3400898e <RCCEx_GetUSARTCLKFreq+0xde>
340089aa:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
340089ae:	e7ec      	b.n	3400898a <RCCEx_GetUSARTCLKFreq+0xda>
340089b0:	4b39      	ldr	r3, [pc, #228]	@ (34008a98 <RCCEx_GetUSARTCLKFreq+0x1e8>)
340089b2:	4298      	cmp	r0, r3
340089b4:	d007      	beq.n	340089c6 <RCCEx_GetUSARTCLKFreq+0x116>
340089b6:	bf8e      	itee	hi
340089b8:	4b38      	ldrhi	r3, [pc, #224]	@ (34008a9c <RCCEx_GetUSARTCLKFreq+0x1ec>)
340089ba:	f020 0004 	bicls.w	r0, r0, #4
340089be:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
340089c2:	4298      	cmp	r0, r3
340089c4:	d191      	bne.n	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
340089c6:	f7fc fba7 	bl	34005118 <LL_RCC_LSE_IsReady>
340089ca:	3800      	subs	r0, #0
340089cc:	bf18      	it	ne
340089ce:	2001      	movne	r0, #1
340089d0:	03c0      	lsls	r0, r0, #15
340089d2:	e78b      	b.n	340088ec <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340089d4:	4b32      	ldr	r3, [pc, #200]	@ (34008aa0 <RCCEx_GetUSARTCLKFreq+0x1f0>)
340089d6:	4298      	cmp	r0, r3
340089d8:	d020      	beq.n	34008a1c <RCCEx_GetUSARTCLKFreq+0x16c>
340089da:	d813      	bhi.n	34008a04 <RCCEx_GetUSARTCLKFreq+0x154>
340089dc:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
340089e0:	4298      	cmp	r0, r3
340089e2:	d008      	beq.n	340089f6 <RCCEx_GetUSARTCLKFreq+0x146>
340089e4:	bf8e      	itee	hi
340089e6:	4b2f      	ldrhi	r3, [pc, #188]	@ (34008aa4 <RCCEx_GetUSARTCLKFreq+0x1f4>)
340089e8:	f020 0004 	bicls.w	r0, r0, #4
340089ec:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
340089f0:	4298      	cmp	r0, r3
340089f2:	f47f af7a 	bne.w	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
340089f6:	f7fc fb87 	bl	34005108 <LL_RCC_MSI_IsReady>
340089fa:	2800      	cmp	r0, #0
340089fc:	f43f af75 	beq.w	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
34008a00:	4829      	ldr	r0, [pc, #164]	@ (34008aa8 <RCCEx_GetUSARTCLKFreq+0x1f8>)
  return usart_frequency;
34008a02:	e773      	b.n	340088ec <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008a04:	4b29      	ldr	r3, [pc, #164]	@ (34008aac <RCCEx_GetUSARTCLKFreq+0x1fc>)
34008a06:	4298      	cmp	r0, r3
34008a08:	d008      	beq.n	34008a1c <RCCEx_GetUSARTCLKFreq+0x16c>
34008a0a:	bf8e      	itee	hi
34008a0c:	4b28      	ldrhi	r3, [pc, #160]	@ (34008ab0 <RCCEx_GetUSARTCLKFreq+0x200>)
34008a0e:	f020 0004 	bicls.w	r0, r0, #4
34008a12:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008a16:	4298      	cmp	r0, r3
34008a18:	f47f af67 	bne.w	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
34008a1c:	f7fc fb6c 	bl	340050f8 <LL_RCC_HSI_IsReady>
34008a20:	2800      	cmp	r0, #0
34008a22:	f43f af62 	beq.w	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008a26:	4b19      	ldr	r3, [pc, #100]	@ (34008a8c <RCCEx_GetUSARTCLKFreq+0x1dc>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008a28:	4822      	ldr	r0, [pc, #136]	@ (34008ab4 <RCCEx_GetUSARTCLKFreq+0x204>)
34008a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008a2c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008a30:	e007      	b.n	34008a42 <RCCEx_GetUSARTCLKFreq+0x192>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008a32:	f7fc faeb 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34008a36:	f7fc fbf1 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008a3a:	4b14      	ldr	r3, [pc, #80]	@ (34008a8c <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008a3e:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008a42:	40d8      	lsrs	r0, r3
34008a44:	e752      	b.n	340088ec <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008a46:	f7fc fae1 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34008a4a:	f7fc fbe7 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008a4e:	4b0f      	ldr	r3, [pc, #60]	@ (34008a8c <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008a52:	f003 0307 	and.w	r3, r3, #7
34008a56:	e7f4      	b.n	34008a42 <RCCEx_GetUSARTCLKFreq+0x192>
        switch (LL_RCC_IC14_GetSource())
34008a58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008a5c:	f47f af45 	bne.w	340088ea <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008a60:	f7ff fcee 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34008a64:	e77b      	b.n	3400895e <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008a66:	f7ff fc6b 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
34008a6a:	e778      	b.n	3400895e <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008a6c:	f7ff fca8 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34008a70:	e775      	b.n	3400895e <RCCEx_GetUSARTCLKFreq+0xae>
34008a72:	bf00      	nop
34008a74:	07021430 	.word	0x07021430
34008a78:	07000830 	.word	0x07000830
34008a7c:	07011430 	.word	0x07011430
34008a80:	07010830 	.word	0x07010830
34008a84:	07020434 	.word	0x07020434
34008a88:	07020830 	.word	0x07020830
34008a8c:	56028000 	.word	0x56028000
34008a90:	07050030 	.word	0x07050030
34008a94:	07030830 	.word	0x07030830
34008a98:	07040830 	.word	0x07040830
34008a9c:	07041430 	.word	0x07041430
34008aa0:	07060030 	.word	0x07060030
34008aa4:	07051430 	.word	0x07051430
34008aa8:	003d0900 	.word	0x003d0900
34008aac:	07060830 	.word	0x07060830
34008ab0:	07061430 	.word	0x07061430
34008ab4:	03d09000 	.word	0x03d09000

34008ab8 <RCCEx_GetUARTCLKFreq>:
{
34008ab8:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008aba:	f7fc fb47 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008abe:	4b77      	ldr	r3, [pc, #476]	@ (34008c9c <RCCEx_GetUARTCLKFreq+0x1e4>)
34008ac0:	4298      	cmp	r0, r3
34008ac2:	d03e      	beq.n	34008b42 <RCCEx_GetUARTCLKFreq+0x8a>
34008ac4:	d859      	bhi.n	34008b7a <RCCEx_GetUARTCLKFreq+0xc2>
34008ac6:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008aca:	4298      	cmp	r0, r3
34008acc:	f000 80c6 	beq.w	34008c5c <RCCEx_GetUARTCLKFreq+0x1a4>
34008ad0:	d814      	bhi.n	34008afc <RCCEx_GetUARTCLKFreq+0x44>
34008ad2:	4b73      	ldr	r3, [pc, #460]	@ (34008ca0 <RCCEx_GetUARTCLKFreq+0x1e8>)
34008ad4:	4298      	cmp	r0, r3
34008ad6:	f000 80cb 	beq.w	34008c70 <RCCEx_GetUARTCLKFreq+0x1b8>
34008ada:	3b01      	subs	r3, #1
34008adc:	4298      	cmp	r0, r3
34008ade:	d90b      	bls.n	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
34008ae0:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
34008ae4:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34008ae8:	429a      	cmp	r2, r3
34008aea:	f000 80b7 	beq.w	34008c5c <RCCEx_GetUARTCLKFreq+0x1a4>
34008aee:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008af2:	4298      	cmp	r0, r3
34008af4:	f000 80b2 	beq.w	34008c5c <RCCEx_GetUARTCLKFreq+0x1a4>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34008af8:	2000      	movs	r0, #0
}
34008afa:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008afc:	4b69      	ldr	r3, [pc, #420]	@ (34008ca4 <RCCEx_GetUARTCLKFreq+0x1ec>)
34008afe:	4298      	cmp	r0, r3
34008b00:	d00d      	beq.n	34008b1e <RCCEx_GetUARTCLKFreq+0x66>
34008b02:	d812      	bhi.n	34008b2a <RCCEx_GetUARTCLKFreq+0x72>
34008b04:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008b08:	4298      	cmp	r0, r3
34008b0a:	d008      	beq.n	34008b1e <RCCEx_GetUARTCLKFreq+0x66>
34008b0c:	d80b      	bhi.n	34008b26 <RCCEx_GetUARTCLKFreq+0x6e>
34008b0e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008b12:	4298      	cmp	r0, r3
34008b14:	d003      	beq.n	34008b1e <RCCEx_GetUARTCLKFreq+0x66>
34008b16:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008b1a:	4298      	cmp	r0, r3
34008b1c:	d1ec      	bne.n	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
}
34008b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008b22:	f7ff bccd 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008b26:	4b60      	ldr	r3, [pc, #384]	@ (34008ca8 <RCCEx_GetUARTCLKFreq+0x1f0>)
34008b28:	e7f7      	b.n	34008b1a <RCCEx_GetUARTCLKFreq+0x62>
34008b2a:	4b60      	ldr	r3, [pc, #384]	@ (34008cac <RCCEx_GetUARTCLKFreq+0x1f4>)
34008b2c:	4298      	cmp	r0, r3
34008b2e:	d008      	beq.n	34008b42 <RCCEx_GetUARTCLKFreq+0x8a>
34008b30:	d821      	bhi.n	34008b76 <RCCEx_GetUARTCLKFreq+0xbe>
34008b32:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008b36:	4298      	cmp	r0, r3
34008b38:	d003      	beq.n	34008b42 <RCCEx_GetUARTCLKFreq+0x8a>
34008b3a:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008b3e:	4298      	cmp	r0, r3
34008b40:	d1da      	bne.n	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008b42:	f7fc fb35 	bl	340051b0 <LL_RCC_IC9_IsEnabled>
34008b46:	2800      	cmp	r0, #0
34008b48:	d0d6      	beq.n	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
34008b4a:	f7fc fb39 	bl	340051c0 <LL_RCC_IC9_GetDivider>
34008b4e:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008b50:	4b57      	ldr	r3, [pc, #348]	@ (34008cb0 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008b52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008b56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008b5e:	f000 809a 	beq.w	34008c96 <RCCEx_GetUARTCLKFreq+0x1de>
34008b62:	f200 808e 	bhi.w	34008c82 <RCCEx_GetUARTCLKFreq+0x1ca>
34008b66:	2b00      	cmp	r3, #0
34008b68:	f040 8092 	bne.w	34008c90 <RCCEx_GetUARTCLKFreq+0x1d8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008b6c:	f7ff fba8 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
34008b70:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008b74:	e7c1      	b.n	34008afa <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008b76:	4b4f      	ldr	r3, [pc, #316]	@ (34008cb4 <RCCEx_GetUARTCLKFreq+0x1fc>)
34008b78:	e7e1      	b.n	34008b3e <RCCEx_GetUARTCLKFreq+0x86>
34008b7a:	4b4f      	ldr	r3, [pc, #316]	@ (34008cb8 <RCCEx_GetUARTCLKFreq+0x200>)
34008b7c:	4298      	cmp	r0, r3
34008b7e:	d04a      	beq.n	34008c16 <RCCEx_GetUARTCLKFreq+0x15e>
34008b80:	d836      	bhi.n	34008bf0 <RCCEx_GetUARTCLKFreq+0x138>
34008b82:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008b86:	4298      	cmp	r0, r3
34008b88:	d029      	beq.n	34008bde <RCCEx_GetUARTCLKFreq+0x126>
34008b8a:	d81c      	bhi.n	34008bc6 <RCCEx_GetUARTCLKFreq+0x10e>
34008b8c:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008b90:	3b04      	subs	r3, #4
34008b92:	4298      	cmp	r0, r3
34008b94:	d008      	beq.n	34008ba8 <RCCEx_GetUARTCLKFreq+0xf0>
34008b96:	d812      	bhi.n	34008bbe <RCCEx_GetUARTCLKFreq+0x106>
34008b98:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008b9c:	4298      	cmp	r0, r3
34008b9e:	d003      	beq.n	34008ba8 <RCCEx_GetUARTCLKFreq+0xf0>
34008ba0:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008ba4:	4298      	cmp	r0, r3
34008ba6:	d1a7      	bne.n	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008ba8:	f7fc fb14 	bl	340051d4 <LL_RCC_IC14_IsEnabled>
34008bac:	2800      	cmp	r0, #0
34008bae:	d0a3      	beq.n	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
34008bb0:	f7fc fb18 	bl	340051e4 <LL_RCC_IC14_GetDivider>
34008bb4:	4b3e      	ldr	r3, [pc, #248]	@ (34008cb0 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008bb6:	4604      	mov	r4, r0
34008bb8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008bbc:	e7cb      	b.n	34008b56 <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008bbe:	4b3f      	ldr	r3, [pc, #252]	@ (34008cbc <RCCEx_GetUARTCLKFreq+0x204>)
34008bc0:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008bc4:	e7ee      	b.n	34008ba4 <RCCEx_GetUARTCLKFreq+0xec>
34008bc6:	4b3e      	ldr	r3, [pc, #248]	@ (34008cc0 <RCCEx_GetUARTCLKFreq+0x208>)
34008bc8:	4298      	cmp	r0, r3
34008bca:	d008      	beq.n	34008bde <RCCEx_GetUARTCLKFreq+0x126>
34008bcc:	d80e      	bhi.n	34008bec <RCCEx_GetUARTCLKFreq+0x134>
34008bce:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008bd2:	4298      	cmp	r0, r3
34008bd4:	d003      	beq.n	34008bde <RCCEx_GetUARTCLKFreq+0x126>
34008bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008bda:	4298      	cmp	r0, r3
34008bdc:	d18c      	bne.n	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
34008bde:	f7fc fa9b 	bl	34005118 <LL_RCC_LSE_IsReady>
34008be2:	3800      	subs	r0, #0
34008be4:	bf18      	it	ne
34008be6:	2001      	movne	r0, #1
34008be8:	03c0      	lsls	r0, r0, #15
34008bea:	e786      	b.n	34008afa <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008bec:	4b35      	ldr	r3, [pc, #212]	@ (34008cc4 <RCCEx_GetUARTCLKFreq+0x20c>)
34008bee:	e7f4      	b.n	34008bda <RCCEx_GetUARTCLKFreq+0x122>
34008bf0:	4b35      	ldr	r3, [pc, #212]	@ (34008cc8 <RCCEx_GetUARTCLKFreq+0x210>)
34008bf2:	4298      	cmp	r0, r3
34008bf4:	d025      	beq.n	34008c42 <RCCEx_GetUARTCLKFreq+0x18a>
34008bf6:	d817      	bhi.n	34008c28 <RCCEx_GetUARTCLKFreq+0x170>
34008bf8:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
34008bfc:	3b04      	subs	r3, #4
34008bfe:	4298      	cmp	r0, r3
34008c00:	d009      	beq.n	34008c16 <RCCEx_GetUARTCLKFreq+0x15e>
34008c02:	d80f      	bhi.n	34008c24 <RCCEx_GetUARTCLKFreq+0x16c>
34008c04:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008c08:	4298      	cmp	r0, r3
34008c0a:	d004      	beq.n	34008c16 <RCCEx_GetUARTCLKFreq+0x15e>
34008c0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008c10:	4298      	cmp	r0, r3
34008c12:	f47f af71 	bne.w	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
34008c16:	f7fc fa77 	bl	34005108 <LL_RCC_MSI_IsReady>
34008c1a:	2800      	cmp	r0, #0
34008c1c:	f43f af6c 	beq.w	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
34008c20:	482a      	ldr	r0, [pc, #168]	@ (34008ccc <RCCEx_GetUARTCLKFreq+0x214>)
  return uart_frequency;
34008c22:	e76a      	b.n	34008afa <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008c24:	4b2a      	ldr	r3, [pc, #168]	@ (34008cd0 <RCCEx_GetUARTCLKFreq+0x218>)
34008c26:	e7f3      	b.n	34008c10 <RCCEx_GetUARTCLKFreq+0x158>
34008c28:	4b2a      	ldr	r3, [pc, #168]	@ (34008cd4 <RCCEx_GetUARTCLKFreq+0x21c>)
34008c2a:	4298      	cmp	r0, r3
34008c2c:	d009      	beq.n	34008c42 <RCCEx_GetUARTCLKFreq+0x18a>
34008c2e:	d813      	bhi.n	34008c58 <RCCEx_GetUARTCLKFreq+0x1a0>
34008c30:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008c34:	4298      	cmp	r0, r3
34008c36:	d004      	beq.n	34008c42 <RCCEx_GetUARTCLKFreq+0x18a>
34008c38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008c3c:	4298      	cmp	r0, r3
34008c3e:	f47f af5b 	bne.w	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
34008c42:	f7fc fa59 	bl	340050f8 <LL_RCC_HSI_IsReady>
34008c46:	2800      	cmp	r0, #0
34008c48:	f43f af56 	beq.w	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008c4c:	4b18      	ldr	r3, [pc, #96]	@ (34008cb0 <RCCEx_GetUARTCLKFreq+0x1f8>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008c4e:	4822      	ldr	r0, [pc, #136]	@ (34008cd8 <RCCEx_GetUARTCLKFreq+0x220>)
34008c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008c52:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008c56:	e009      	b.n	34008c6c <RCCEx_GetUARTCLKFreq+0x1b4>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008c58:	4b20      	ldr	r3, [pc, #128]	@ (34008cdc <RCCEx_GetUARTCLKFreq+0x224>)
34008c5a:	e7ef      	b.n	34008c3c <RCCEx_GetUARTCLKFreq+0x184>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008c5c:	f7fc f9d6 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34008c60:	f7fc fadc 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008c64:	4b12      	ldr	r3, [pc, #72]	@ (34008cb0 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008c68:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008c6c:	40d8      	lsrs	r0, r3
34008c6e:	e744      	b.n	34008afa <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008c70:	f7fc f9cc 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34008c74:	f7fc fad2 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008c78:	4b0d      	ldr	r3, [pc, #52]	@ (34008cb0 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008c7c:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008c80:	e7f4      	b.n	34008c6c <RCCEx_GetUARTCLKFreq+0x1b4>
        switch (LL_RCC_IC14_GetSource())
34008c82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008c86:	f47f af37 	bne.w	34008af8 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008c8a:	f7ff fbd9 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34008c8e:	e76f      	b.n	34008b70 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008c90:	f7ff fb56 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
34008c94:	e76c      	b.n	34008b70 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008c96:	f7ff fb93 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34008c9a:	e769      	b.n	34008b70 <RCCEx_GetUARTCLKFreq+0xb8>
34008c9c:	07021c30 	.word	0x07021c30
34008ca0:	07000034 	.word	0x07000034
34008ca4:	07011c30 	.word	0x07011c30
34008ca8:	07011830 	.word	0x07011830
34008cac:	07021030 	.word	0x07021030
34008cb0:	56028000 	.word	0x56028000
34008cb4:	07021830 	.word	0x07021830
34008cb8:	07050034 	.word	0x07050034
34008cbc:	07031830 	.word	0x07031830
34008cc0:	07041830 	.word	0x07041830
34008cc4:	07041c30 	.word	0x07041c30
34008cc8:	07060034 	.word	0x07060034
34008ccc:	003d0900 	.word	0x003d0900
34008cd0:	07051c30 	.word	0x07051c30
34008cd4:	07061830 	.word	0x07061830
34008cd8:	03d09000 	.word	0x03d09000
34008cdc:	07061c30 	.word	0x07061c30

34008ce0 <RCCEx_GetSPICLKFreq>:
{
34008ce0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008ce2:	f7fc fa33 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008ce6:	4b89      	ldr	r3, [pc, #548]	@ (34008f0c <RCCEx_GetSPICLKFreq+0x22c>)
34008ce8:	4298      	cmp	r0, r3
34008cea:	d055      	beq.n	34008d98 <RCCEx_GetSPICLKFreq+0xb8>
34008cec:	d865      	bhi.n	34008dba <RCCEx_GetSPICLKFreq+0xda>
34008cee:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
34008cf2:	4298      	cmp	r0, r3
34008cf4:	f000 80ca 	beq.w	34008e8c <RCCEx_GetSPICLKFreq+0x1ac>
34008cf8:	d81e      	bhi.n	34008d38 <RCCEx_GetSPICLKFreq+0x58>
34008cfa:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008cfe:	4298      	cmp	r0, r3
34008d00:	f000 80ba 	beq.w	34008e78 <RCCEx_GetSPICLKFreq+0x198>
34008d04:	d80a      	bhi.n	34008d1c <RCCEx_GetSPICLKFreq+0x3c>
34008d06:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d0a:	4298      	cmp	r0, r3
34008d0c:	d00b      	beq.n	34008d26 <RCCEx_GetSPICLKFreq+0x46>
34008d0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008d12:	4298      	cmp	r0, r3
34008d14:	f000 80b0 	beq.w	34008e78 <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34008d18:	2000      	movs	r0, #0
}
34008d1a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008d1c:	4b7c      	ldr	r3, [pc, #496]	@ (34008f10 <RCCEx_GetSPICLKFreq+0x230>)
34008d1e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008d22:	4298      	cmp	r0, r3
34008d24:	d1f8      	bne.n	34008d18 <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008d26:	f7fc f971 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34008d2a:	f7fc fa77 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008d2e:	4b79      	ldr	r3, [pc, #484]	@ (34008f14 <RCCEx_GetSPICLKFreq+0x234>)
34008d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008d32:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008d36:	e0a7      	b.n	34008e88 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008d38:	4b77      	ldr	r3, [pc, #476]	@ (34008f18 <RCCEx_GetSPICLKFreq+0x238>)
34008d3a:	4298      	cmp	r0, r3
34008d3c:	f000 80af 	beq.w	34008e9e <RCCEx_GetSPICLKFreq+0x1be>
34008d40:	d81d      	bhi.n	34008d7e <RCCEx_GetSPICLKFreq+0x9e>
34008d42:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34008d46:	4298      	cmp	r0, r3
34008d48:	d00a      	beq.n	34008d60 <RCCEx_GetSPICLKFreq+0x80>
34008d4a:	d80d      	bhi.n	34008d68 <RCCEx_GetSPICLKFreq+0x88>
34008d4c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d50:	4298      	cmp	r0, r3
34008d52:	d005      	beq.n	34008d60 <RCCEx_GetSPICLKFreq+0x80>
34008d54:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34008d58:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008d5c:	4298      	cmp	r0, r3
34008d5e:	d1db      	bne.n	34008d18 <RCCEx_GetSPICLKFreq+0x38>
}
34008d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008d64:	f7ff bbac 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008d68:	4b6c      	ldr	r3, [pc, #432]	@ (34008f1c <RCCEx_GetSPICLKFreq+0x23c>)
34008d6a:	4298      	cmp	r0, r3
34008d6c:	d0f8      	beq.n	34008d60 <RCCEx_GetSPICLKFreq+0x80>
34008d6e:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008d72:	4298      	cmp	r0, r3
34008d74:	f000 8093 	beq.w	34008e9e <RCCEx_GetSPICLKFreq+0x1be>
34008d78:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008d7c:	e7ee      	b.n	34008d5c <RCCEx_GetSPICLKFreq+0x7c>
34008d7e:	4b68      	ldr	r3, [pc, #416]	@ (34008f20 <RCCEx_GetSPICLKFreq+0x240>)
34008d80:	4298      	cmp	r0, r3
34008d82:	d009      	beq.n	34008d98 <RCCEx_GetSPICLKFreq+0xb8>
34008d84:	d813      	bhi.n	34008dae <RCCEx_GetSPICLKFreq+0xce>
34008d86:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d8a:	4298      	cmp	r0, r3
34008d8c:	f000 8087 	beq.w	34008e9e <RCCEx_GetSPICLKFreq+0x1be>
34008d90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008d94:	4298      	cmp	r0, r3
34008d96:	d1bf      	bne.n	34008d18 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008d98:	f7fc fa0a 	bl	340051b0 <LL_RCC_IC9_IsEnabled>
34008d9c:	2800      	cmp	r0, #0
34008d9e:	d0bb      	beq.n	34008d18 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
34008da0:	f7fc fa0e 	bl	340051c0 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008da4:	4b5b      	ldr	r3, [pc, #364]	@ (34008f14 <RCCEx_GetSPICLKFreq+0x234>)
34008da6:	4604      	mov	r4, r0
34008da8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34008dac:	e082      	b.n	34008eb4 <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008dae:	4b5d      	ldr	r3, [pc, #372]	@ (34008f24 <RCCEx_GetSPICLKFreq+0x244>)
34008db0:	4298      	cmp	r0, r3
34008db2:	d074      	beq.n	34008e9e <RCCEx_GetSPICLKFreq+0x1be>
34008db4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008db8:	e7ec      	b.n	34008d94 <RCCEx_GetSPICLKFreq+0xb4>
34008dba:	4b5b      	ldr	r3, [pc, #364]	@ (34008f28 <RCCEx_GetSPICLKFreq+0x248>)
34008dbc:	4298      	cmp	r0, r3
34008dbe:	d043      	beq.n	34008e48 <RCCEx_GetSPICLKFreq+0x168>
34008dc0:	d830      	bhi.n	34008e24 <RCCEx_GetSPICLKFreq+0x144>
34008dc2:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
34008dc6:	4298      	cmp	r0, r3
34008dc8:	d0e6      	beq.n	34008d98 <RCCEx_GetSPICLKFreq+0xb8>
34008dca:	d808      	bhi.n	34008dde <RCCEx_GetSPICLKFreq+0xfe>
34008dcc:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34008dd0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008dd4:	429a      	cmp	r2, r3
34008dd6:	d079      	beq.n	34008ecc <RCCEx_GetSPICLKFreq+0x1ec>
34008dd8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008ddc:	e7da      	b.n	34008d94 <RCCEx_GetSPICLKFreq+0xb4>
34008dde:	4b53      	ldr	r3, [pc, #332]	@ (34008f2c <RCCEx_GetSPICLKFreq+0x24c>)
34008de0:	4298      	cmp	r0, r3
34008de2:	d00d      	beq.n	34008e00 <RCCEx_GetSPICLKFreq+0x120>
34008de4:	d814      	bhi.n	34008e10 <RCCEx_GetSPICLKFreq+0x130>
34008de6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008dea:	4298      	cmp	r0, r3
34008dec:	d008      	beq.n	34008e00 <RCCEx_GetSPICLKFreq+0x120>
34008dee:	d80d      	bhi.n	34008e0c <RCCEx_GetSPICLKFreq+0x12c>
34008df0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008df4:	4298      	cmp	r0, r3
34008df6:	d003      	beq.n	34008e00 <RCCEx_GetSPICLKFreq+0x120>
34008df8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008dfc:	4298      	cmp	r0, r3
34008dfe:	d18b      	bne.n	34008d18 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34008e00:	f7fc f982 	bl	34005108 <LL_RCC_MSI_IsReady>
34008e04:	2800      	cmp	r0, #0
34008e06:	d087      	beq.n	34008d18 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34008e08:	4849      	ldr	r0, [pc, #292]	@ (34008f30 <RCCEx_GetSPICLKFreq+0x250>)
  return spi_frequency;
34008e0a:	e786      	b.n	34008d1a <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008e0c:	4b49      	ldr	r3, [pc, #292]	@ (34008f34 <RCCEx_GetSPICLKFreq+0x254>)
34008e0e:	e7f5      	b.n	34008dfc <RCCEx_GetSPICLKFreq+0x11c>
34008e10:	4b49      	ldr	r3, [pc, #292]	@ (34008f38 <RCCEx_GetSPICLKFreq+0x258>)
34008e12:	4298      	cmp	r0, r3
34008e14:	d018      	beq.n	34008e48 <RCCEx_GetSPICLKFreq+0x168>
34008e16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008e1a:	4298      	cmp	r0, r3
34008e1c:	d014      	beq.n	34008e48 <RCCEx_GetSPICLKFreq+0x168>
34008e1e:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008e22:	e7eb      	b.n	34008dfc <RCCEx_GetSPICLKFreq+0x11c>
34008e24:	4b45      	ldr	r3, [pc, #276]	@ (34008f3c <RCCEx_GetSPICLKFreq+0x25c>)
34008e26:	4298      	cmp	r0, r3
34008e28:	d069      	beq.n	34008efe <RCCEx_GetSPICLKFreq+0x21e>
34008e2a:	d81e      	bhi.n	34008e6a <RCCEx_GetSPICLKFreq+0x18a>
34008e2c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008e30:	4298      	cmp	r0, r3
34008e32:	d018      	beq.n	34008e66 <RCCEx_GetSPICLKFreq+0x186>
34008e34:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34008e38:	d811      	bhi.n	34008e5e <RCCEx_GetSPICLKFreq+0x17e>
34008e3a:	4a41      	ldr	r2, [pc, #260]	@ (34008f40 <RCCEx_GetSPICLKFreq+0x260>)
34008e3c:	4293      	cmp	r3, r2
34008e3e:	d003      	beq.n	34008e48 <RCCEx_GetSPICLKFreq+0x168>
34008e40:	4b40      	ldr	r3, [pc, #256]	@ (34008f44 <RCCEx_GetSPICLKFreq+0x264>)
34008e42:	4298      	cmp	r0, r3
34008e44:	f47f af68 	bne.w	34008d18 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
34008e48:	f7fc f956 	bl	340050f8 <LL_RCC_HSI_IsReady>
34008e4c:	2800      	cmp	r0, #0
34008e4e:	f43f af63 	beq.w	34008d18 <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008e52:	4b30      	ldr	r3, [pc, #192]	@ (34008f14 <RCCEx_GetSPICLKFreq+0x234>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008e54:	483c      	ldr	r0, [pc, #240]	@ (34008f48 <RCCEx_GetSPICLKFreq+0x268>)
34008e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008e58:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008e5c:	e014      	b.n	34008e88 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008e5e:	4a3b      	ldr	r2, [pc, #236]	@ (34008f4c <RCCEx_GetSPICLKFreq+0x26c>)
34008e60:	4293      	cmp	r3, r2
34008e62:	f47f af59 	bne.w	34008d18 <RCCEx_GetSPICLKFreq+0x38>
34008e66:	483a      	ldr	r0, [pc, #232]	@ (34008f50 <RCCEx_GetSPICLKFreq+0x270>)
34008e68:	e757      	b.n	34008d1a <RCCEx_GetSPICLKFreq+0x3a>
34008e6a:	4b3a      	ldr	r3, [pc, #232]	@ (34008f54 <RCCEx_GetSPICLKFreq+0x274>)
34008e6c:	4298      	cmp	r0, r3
34008e6e:	d046      	beq.n	34008efe <RCCEx_GetSPICLKFreq+0x21e>
34008e70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008e74:	4298      	cmp	r0, r3
34008e76:	e7f4      	b.n	34008e62 <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008e78:	f7fc f8c8 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34008e7c:	f7fc f9ce 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008e80:	4b24      	ldr	r3, [pc, #144]	@ (34008f14 <RCCEx_GetSPICLKFreq+0x234>)
34008e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008e84:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008e88:	40d8      	lsrs	r0, r3
      break;
34008e8a:	e746      	b.n	34008d1a <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008e8c:	f7fc f8be 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34008e90:	f7fc f9c4 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34008e94:	4b1f      	ldr	r3, [pc, #124]	@ (34008f14 <RCCEx_GetSPICLKFreq+0x234>)
34008e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34008e98:	f3c3 3302 	ubfx	r3, r3, #12, #3
34008e9c:	e7f4      	b.n	34008e88 <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008e9e:	f7fc f975 	bl	3400518c <LL_RCC_IC8_IsEnabled>
34008ea2:	2800      	cmp	r0, #0
34008ea4:	f43f af38 	beq.w	34008d18 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
34008ea8:	f7fc f978 	bl	3400519c <LL_RCC_IC8_GetDivider>
34008eac:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008eae:	4b19      	ldr	r3, [pc, #100]	@ (34008f14 <RCCEx_GetSPICLKFreq+0x234>)
34008eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008eb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008ebc:	d01c      	beq.n	34008ef8 <RCCEx_GetSPICLKFreq+0x218>
34008ebe:	d811      	bhi.n	34008ee4 <RCCEx_GetSPICLKFreq+0x204>
34008ec0:	b9bb      	cbnz	r3, 34008ef2 <RCCEx_GetSPICLKFreq+0x212>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008ec2:	f7ff f9fd 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
34008ec6:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008eca:	e726      	b.n	34008d1a <RCCEx_GetSPICLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008ecc:	f7fc f982 	bl	340051d4 <LL_RCC_IC14_IsEnabled>
34008ed0:	2800      	cmp	r0, #0
34008ed2:	f43f af21 	beq.w	34008d18 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
34008ed6:	f7fc f985 	bl	340051e4 <LL_RCC_IC14_GetDivider>
34008eda:	4b0e      	ldr	r3, [pc, #56]	@ (34008f14 <RCCEx_GetSPICLKFreq+0x234>)
34008edc:	4604      	mov	r4, r0
34008ede:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008ee2:	e7e7      	b.n	34008eb4 <RCCEx_GetSPICLKFreq+0x1d4>
        switch (LL_RCC_IC14_GetSource())
34008ee4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008ee8:	f47f af16 	bne.w	34008d18 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008eec:	f7ff faa8 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34008ef0:	e7e9      	b.n	34008ec6 <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008ef2:	f7ff fa25 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
34008ef6:	e7e6      	b.n	34008ec6 <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008ef8:	f7ff fa62 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34008efc:	e7e3      	b.n	34008ec6 <RCCEx_GetSPICLKFreq+0x1e6>
      if (LL_RCC_HSE_IsReady() != 0U)
34008efe:	f7fc f8f3 	bl	340050e8 <LL_RCC_HSE_IsReady>
34008f02:	2800      	cmp	r0, #0
34008f04:	f43f af08 	beq.w	34008d18 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
34008f08:	4813      	ldr	r0, [pc, #76]	@ (34008f58 <RCCEx_GetSPICLKFreq+0x278>)
34008f0a:	e706      	b.n	34008d1a <RCCEx_GetSPICLKFreq+0x3a>
34008f0c:	07030820 	.word	0x07030820
34008f10:	07001020 	.word	0x07001020
34008f14:	56028000 	.word	0x56028000
34008f18:	07020820 	.word	0x07020820
34008f1c:	07011820 	.word	0x07011820
34008f20:	07021420 	.word	0x07021420
34008f24:	07021820 	.word	0x07021820
34008f28:	07050c20 	.word	0x07050c20
34008f2c:	07041420 	.word	0x07041420
34008f30:	003d0900 	.word	0x003d0900
34008f34:	07041020 	.word	0x07041020
34008f38:	07050420 	.word	0x07050420
34008f3c:	07061020 	.word	0x07061020
34008f40:	07051020 	.word	0x07051020
34008f44:	07051820 	.word	0x07051820
34008f48:	03d09000 	.word	0x03d09000
34008f4c:	07060820 	.word	0x07060820
34008f50:	00bb8000 	.word	0x00bb8000
34008f54:	07061420 	.word	0x07061420
34008f58:	02dc6c00 	.word	0x02dc6c00

34008f5c <RCCEx_GetSAICLKFreq>:
{
34008f5c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008f5e:	f7fc f8f5 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008f62:	4b49      	ldr	r3, [pc, #292]	@ (34009088 <RCCEx_GetSAICLKFreq+0x12c>)
34008f64:	4298      	cmp	r0, r3
34008f66:	d04a      	beq.n	34008ffe <RCCEx_GetSAICLKFreq+0xa2>
34008f68:	d839      	bhi.n	34008fde <RCCEx_GetSAICLKFreq+0x82>
34008f6a:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008f6e:	4298      	cmp	r0, r3
34008f70:	d021      	beq.n	34008fb6 <RCCEx_GetSAICLKFreq+0x5a>
34008f72:	d815      	bhi.n	34008fa0 <RCCEx_GetSAICLKFreq+0x44>
34008f74:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008f78:	4298      	cmp	r0, r3
34008f7a:	d00d      	beq.n	34008f98 <RCCEx_GetSAICLKFreq+0x3c>
34008f7c:	d809      	bhi.n	34008f92 <RCCEx_GetSAICLKFreq+0x36>
34008f7e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008f82:	4298      	cmp	r0, r3
34008f84:	d04e      	beq.n	34009024 <RCCEx_GetSAICLKFreq+0xc8>
34008f86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f8a:	4298      	cmp	r0, r3
34008f8c:	d04a      	beq.n	34009024 <RCCEx_GetSAICLKFreq+0xc8>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34008f8e:	2000      	movs	r0, #0
}
34008f90:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008f92:	4b3e      	ldr	r3, [pc, #248]	@ (3400908c <RCCEx_GetSAICLKFreq+0x130>)
34008f94:	4298      	cmp	r0, r3
34008f96:	d1fa      	bne.n	34008f8e <RCCEx_GetSAICLKFreq+0x32>
}
34008f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008f9c:	f7ff ba90 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008fa0:	4b3b      	ldr	r3, [pc, #236]	@ (34009090 <RCCEx_GetSAICLKFreq+0x134>)
34008fa2:	4298      	cmp	r0, r3
34008fa4:	d04d      	beq.n	34009042 <RCCEx_GetSAICLKFreq+0xe6>
34008fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008faa:	4298      	cmp	r0, r3
34008fac:	d049      	beq.n	34009042 <RCCEx_GetSAICLKFreq+0xe6>
34008fae:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008fb2:	4298      	cmp	r0, r3
34008fb4:	d1eb      	bne.n	34008f8e <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34008fb6:	f7fc f8d7 	bl	34005168 <LL_RCC_IC7_IsEnabled>
34008fba:	2800      	cmp	r0, #0
34008fbc:	d0e7      	beq.n	34008f8e <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
34008fbe:	f7fc f8db 	bl	34005178 <LL_RCC_IC7_GetDivider>
34008fc2:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008fc4:	4b33      	ldr	r3, [pc, #204]	@ (34009094 <RCCEx_GetSAICLKFreq+0x138>)
34008fc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008fca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34008fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008fd2:	d047      	beq.n	34009064 <RCCEx_GetSAICLKFreq+0x108>
34008fd4:	d840      	bhi.n	34009058 <RCCEx_GetSAICLKFreq+0xfc>
34008fd6:	bb7b      	cbnz	r3, 34009038 <RCCEx_GetSAICLKFreq+0xdc>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008fd8:	f7ff f972 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
34008fdc:	e02e      	b.n	3400903c <RCCEx_GetSAICLKFreq+0xe0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008fde:	4b2e      	ldr	r3, [pc, #184]	@ (34009098 <RCCEx_GetSAICLKFreq+0x13c>)
34008fe0:	4298      	cmp	r0, r3
34008fe2:	d01d      	beq.n	34009020 <RCCEx_GetSAICLKFreq+0xc4>
34008fe4:	d811      	bhi.n	3400900a <RCCEx_GetSAICLKFreq+0xae>
34008fe6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008fea:	4298      	cmp	r0, r3
34008fec:	d03d      	beq.n	3400906a <RCCEx_GetSAICLKFreq+0x10e>
34008fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008ff2:	4298      	cmp	r0, r3
34008ff4:	d039      	beq.n	3400906a <RCCEx_GetSAICLKFreq+0x10e>
34008ff6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008ffa:	4298      	cmp	r0, r3
34008ffc:	d1c7      	bne.n	34008f8e <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
34008ffe:	f7fc f883 	bl	34005108 <LL_RCC_MSI_IsReady>
34009002:	2800      	cmp	r0, #0
34009004:	d0c3      	beq.n	34008f8e <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
34009006:	4825      	ldr	r0, [pc, #148]	@ (3400909c <RCCEx_GetSAICLKFreq+0x140>)
  return sai_frequency;
34009008:	e7c2      	b.n	34008f90 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3400900a:	4b25      	ldr	r3, [pc, #148]	@ (340090a0 <RCCEx_GetSAICLKFreq+0x144>)
3400900c:	4298      	cmp	r0, r3
3400900e:	d036      	beq.n	3400907e <RCCEx_GetSAICLKFreq+0x122>
34009010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009014:	4298      	cmp	r0, r3
34009016:	d032      	beq.n	3400907e <RCCEx_GetSAICLKFreq+0x122>
34009018:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400901c:	4298      	cmp	r0, r3
3400901e:	d1b6      	bne.n	34008f8e <RCCEx_GetSAICLKFreq+0x32>
34009020:	4820      	ldr	r0, [pc, #128]	@ (340090a4 <RCCEx_GetSAICLKFreq+0x148>)
34009022:	e7b5      	b.n	34008f90 <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009024:	f7fb fff2 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34009028:	f7fc f8f8 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
3400902c:	4b19      	ldr	r3, [pc, #100]	@ (34009094 <RCCEx_GetSAICLKFreq+0x138>)
3400902e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34009030:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009034:	40d8      	lsrs	r0, r3
34009036:	e7ab      	b.n	34008f90 <RCCEx_GetSAICLKFreq+0x34>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009038:	f7ff f982 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
3400903c:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009040:	e7a6      	b.n	34008f90 <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009042:	f7fc f8a3 	bl	3400518c <LL_RCC_IC8_IsEnabled>
34009046:	2800      	cmp	r0, #0
34009048:	d0a1      	beq.n	34008f8e <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
3400904a:	f7fc f8a7 	bl	3400519c <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3400904e:	4b11      	ldr	r3, [pc, #68]	@ (34009094 <RCCEx_GetSAICLKFreq+0x138>)
34009050:	4604      	mov	r4, r0
34009052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34009056:	e7b8      	b.n	34008fca <RCCEx_GetSAICLKFreq+0x6e>
        switch (LL_RCC_IC8_GetSource())
34009058:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400905c:	d197      	bne.n	34008f8e <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400905e:	f7ff f9ef 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34009062:	e7eb      	b.n	3400903c <RCCEx_GetSAICLKFreq+0xe0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009064:	f7ff f9ac 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34009068:	e7e8      	b.n	3400903c <RCCEx_GetSAICLKFreq+0xe0>
      if (LL_RCC_HSI_IsReady() != 0U)
3400906a:	f7fc f845 	bl	340050f8 <LL_RCC_HSI_IsReady>
3400906e:	2800      	cmp	r0, #0
34009070:	d08d      	beq.n	34008f8e <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009072:	4b08      	ldr	r3, [pc, #32]	@ (34009094 <RCCEx_GetSAICLKFreq+0x138>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009074:	480c      	ldr	r0, [pc, #48]	@ (340090a8 <RCCEx_GetSAICLKFreq+0x14c>)
34009076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34009078:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400907c:	e7da      	b.n	34009034 <RCCEx_GetSAICLKFreq+0xd8>
}
3400907e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34009082:	f7ff baa3 	b.w	340085cc <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
34009086:	bf00      	nop
34009088:	07041418 	.word	0x07041418
3400908c:	07011818 	.word	0x07011818
34009090:	07031418 	.word	0x07031418
34009094:	56028000 	.word	0x56028000
34009098:	07061418 	.word	0x07061418
3400909c:	003d0900 	.word	0x003d0900
340090a0:	07071418 	.word	0x07071418
340090a4:	00bb8000 	.word	0x00bb8000
340090a8:	03d09000 	.word	0x03d09000

340090ac <RCCEx_GetI3CCLKFreq>:
{
340090ac:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340090ae:	f7fc f84d 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340090b2:	4b3d      	ldr	r3, [pc, #244]	@ (340091a8 <RCCEx_GetI3CCLKFreq+0xfc>)
340090b4:	4298      	cmp	r0, r3
340090b6:	d060      	beq.n	3400917a <RCCEx_GetI3CCLKFreq+0xce>
340090b8:	d830      	bhi.n	3400911c <RCCEx_GetI3CCLKFreq+0x70>
340090ba:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
340090be:	4298      	cmp	r0, r3
340090c0:	d057      	beq.n	34009172 <RCCEx_GetI3CCLKFreq+0xc6>
340090c2:	d80d      	bhi.n	340090e0 <RCCEx_GetI3CCLKFreq+0x34>
340090c4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340090c8:	4298      	cmp	r0, r3
340090ca:	d048      	beq.n	3400915e <RCCEx_GetI3CCLKFreq+0xb2>
340090cc:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
340090d0:	4298      	cmp	r0, r3
340090d2:	d04e      	beq.n	34009172 <RCCEx_GetI3CCLKFreq+0xc6>
340090d4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340090d8:	4298      	cmp	r0, r3
340090da:	d040      	beq.n	3400915e <RCCEx_GetI3CCLKFreq+0xb2>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
340090dc:	2000      	movs	r0, #0
}
340090de:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340090e0:	4b32      	ldr	r3, [pc, #200]	@ (340091ac <RCCEx_GetI3CCLKFreq+0x100>)
340090e2:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340090e6:	4298      	cmp	r0, r3
340090e8:	d1f8      	bne.n	340090dc <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340090ea:	4b31      	ldr	r3, [pc, #196]	@ (340091b0 <RCCEx_GetI3CCLKFreq+0x104>)
340090ec:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340090f0:	0592      	lsls	r2, r2, #22
340090f2:	d5f3      	bpl.n	340090dc <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340090f4:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340090f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340090fc:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009100:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009102:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34009106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400910a:	d04a      	beq.n	340091a2 <RCCEx_GetI3CCLKFreq+0xf6>
3400910c:	d840      	bhi.n	34009190 <RCCEx_GetI3CCLKFreq+0xe4>
3400910e:	2b00      	cmp	r3, #0
34009110:	d144      	bne.n	3400919c <RCCEx_GetI3CCLKFreq+0xf0>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009112:	f7ff f8d5 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
34009116:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400911a:	e7e0      	b.n	340090de <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3400911c:	4b25      	ldr	r3, [pc, #148]	@ (340091b4 <RCCEx_GetI3CCLKFreq+0x108>)
3400911e:	4298      	cmp	r0, r3
34009120:	d008      	beq.n	34009134 <RCCEx_GetI3CCLKFreq+0x88>
34009122:	d80d      	bhi.n	34009140 <RCCEx_GetI3CCLKFreq+0x94>
34009124:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009128:	4298      	cmp	r0, r3
3400912a:	d026      	beq.n	3400917a <RCCEx_GetI3CCLKFreq+0xce>
3400912c:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34009130:	4298      	cmp	r0, r3
34009132:	d1d3      	bne.n	340090dc <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
34009134:	f7fb ffe8 	bl	34005108 <LL_RCC_MSI_IsReady>
34009138:	2800      	cmp	r0, #0
3400913a:	d0cf      	beq.n	340090dc <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
3400913c:	481e      	ldr	r0, [pc, #120]	@ (340091b8 <RCCEx_GetI3CCLKFreq+0x10c>)
  return i3c_frequency;
3400913e:	e7ce      	b.n	340090de <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34009140:	4b1e      	ldr	r3, [pc, #120]	@ (340091bc <RCCEx_GetI3CCLKFreq+0x110>)
34009142:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009146:	4298      	cmp	r0, r3
34009148:	d1c8      	bne.n	340090dc <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
3400914a:	f7fb ffd5 	bl	340050f8 <LL_RCC_HSI_IsReady>
3400914e:	2800      	cmp	r0, #0
34009150:	d0c4      	beq.n	340090dc <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009152:	4b17      	ldr	r3, [pc, #92]	@ (340091b0 <RCCEx_GetI3CCLKFreq+0x104>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009154:	481a      	ldr	r0, [pc, #104]	@ (340091c0 <RCCEx_GetI3CCLKFreq+0x114>)
34009156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34009158:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400915c:	e007      	b.n	3400916e <RCCEx_GetI3CCLKFreq+0xc2>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400915e:	f7fb ff55 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34009162:	f7fc f85b 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009166:	4b12      	ldr	r3, [pc, #72]	@ (340091b0 <RCCEx_GetI3CCLKFreq+0x104>)
34009168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400916a:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400916e:	40d8      	lsrs	r0, r3
34009170:	e7b5      	b.n	340090de <RCCEx_GetI3CCLKFreq+0x32>
}
34009172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009176:	f7ff b9a3 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3400917a:	f7fc f83d 	bl	340051f8 <LL_RCC_IC15_IsEnabled>
3400917e:	2800      	cmp	r0, #0
34009180:	d0ac      	beq.n	340090dc <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
34009182:	f7fc f841 	bl	34005208 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009186:	4b0a      	ldr	r3, [pc, #40]	@ (340091b0 <RCCEx_GetI3CCLKFreq+0x104>)
34009188:	4604      	mov	r4, r0
3400918a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400918e:	e7b8      	b.n	34009102 <RCCEx_GetI3CCLKFreq+0x56>
        switch (LL_RCC_IC15_GetSource())
34009190:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009194:	d1a2      	bne.n	340090dc <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009196:	f7ff f953 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
3400919a:	e7bc      	b.n	34009116 <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400919c:	f7ff f8d0 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
340091a0:	e7b9      	b.n	34009116 <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340091a2:	f7ff f90d 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
340091a6:	e7b6      	b.n	34009116 <RCCEx_GetI3CCLKFreq+0x6a>
340091a8:	0703100c 	.word	0x0703100c
340091ac:	0702100c 	.word	0x0702100c
340091b0:	56028000 	.word	0x56028000
340091b4:	0704140c 	.word	0x0704140c
340091b8:	003d0900 	.word	0x003d0900
340091bc:	0705100c 	.word	0x0705100c
340091c0:	03d09000 	.word	0x03d09000

340091c4 <RCCEx_GetSDMMCCLKFreq>:
{
340091c4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340091c6:	f7fb ffc1 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
340091ca:	4b2d      	ldr	r3, [pc, #180]	@ (34009280 <RCCEx_GetSDMMCCLKFreq+0xbc>)
340091cc:	4298      	cmp	r0, r3
340091ce:	d01d      	beq.n	3400920c <RCCEx_GetSDMMCCLKFreq+0x48>
340091d0:	d813      	bhi.n	340091fa <RCCEx_GetSDMMCCLKFreq+0x36>
340091d2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340091d6:	4298      	cmp	r0, r3
340091d8:	d00b      	beq.n	340091f2 <RCCEx_GetSDMMCCLKFreq+0x2e>
340091da:	d807      	bhi.n	340091ec <RCCEx_GetSDMMCCLKFreq+0x28>
340091dc:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340091e0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340091e4:	4298      	cmp	r0, r3
340091e6:	d02a      	beq.n	3400923e <RCCEx_GetSDMMCCLKFreq+0x7a>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
340091e8:	2000      	movs	r0, #0
}
340091ea:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
340091ec:	4b25      	ldr	r3, [pc, #148]	@ (34009284 <RCCEx_GetSDMMCCLKFreq+0xc0>)
340091ee:	4298      	cmp	r0, r3
340091f0:	d1fa      	bne.n	340091e8 <RCCEx_GetSDMMCCLKFreq+0x24>
}
340091f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340091f6:	f7ff b963 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
340091fa:	4b23      	ldr	r3, [pc, #140]	@ (34009288 <RCCEx_GetSDMMCCLKFreq+0xc4>)
340091fc:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34009200:	429a      	cmp	r2, r3
34009202:	d022      	beq.n	3400924a <RCCEx_GetSDMMCCLKFreq+0x86>
34009204:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009208:	4298      	cmp	r0, r3
3400920a:	d1ed      	bne.n	340091e8 <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3400920c:	4b1f      	ldr	r3, [pc, #124]	@ (3400928c <RCCEx_GetSDMMCCLKFreq+0xc8>)
3400920e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34009212:	f010 0008 	ands.w	r0, r0, #8
34009216:	d0e8      	beq.n	340091ea <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009218:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3400921c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009220:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009224:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34009226:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC5_GetSource())
3400922a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400922e:	d023      	beq.n	34009278 <RCCEx_GetSDMMCCLKFreq+0xb4>
34009230:	d819      	bhi.n	34009266 <RCCEx_GetSDMMCCLKFreq+0xa2>
34009232:	b9f3      	cbnz	r3, 34009272 <RCCEx_GetSDMMCCLKFreq+0xae>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009234:	f7ff f844 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34009238:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
3400923c:	e7d5      	b.n	340091ea <RCCEx_GetSDMMCCLKFreq+0x26>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3400923e:	f7fb fee5 	bl	3400500c <HAL_RCC_GetSysClockFreq>
}
34009242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009246:	f7fb bfe9 	b.w	3400521c <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3400924a:	4b10      	ldr	r3, [pc, #64]	@ (3400928c <RCCEx_GetSDMMCCLKFreq+0xc8>)
3400924c:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34009250:	f010 0010 	ands.w	r0, r0, #16
34009254:	d0c9      	beq.n	340091ea <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34009256:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3400925a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3400925e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009262:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34009264:	e7df      	b.n	34009226 <RCCEx_GetSDMMCCLKFreq+0x62>
        switch (LL_RCC_IC5_GetSource())
34009266:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400926a:	d1bd      	bne.n	340091e8 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400926c:	f7ff f8e8 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34009270:	e7e2      	b.n	34009238 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009272:	f7ff f865 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
34009276:	e7df      	b.n	34009238 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009278:	f7ff f8a2 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
3400927c:	e7dc      	b.n	34009238 <RCCEx_GetSDMMCCLKFreq+0x74>
3400927e:	bf00      	nop
34009280:	0302001c 	.word	0x0302001c
34009284:	0301041c 	.word	0x0301041c
34009288:	0303001c 	.word	0x0303001c
3400928c:	56028000 	.word	0x56028000

34009290 <RCCEx_GetI2CCLKFreq>:
{
34009290:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009292:	f7fb ff5b 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009296:	4b50      	ldr	r3, [pc, #320]	@ (340093d8 <RCCEx_GetI2CCLKFreq+0x148>)
34009298:	4298      	cmp	r0, r3
3400929a:	f000 8085 	beq.w	340093a8 <RCCEx_GetI2CCLKFreq+0x118>
3400929e:	d84b      	bhi.n	34009338 <RCCEx_GetI2CCLKFreq+0xa8>
340092a0:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
340092a4:	4298      	cmp	r0, r3
340092a6:	d01a      	beq.n	340092de <RCCEx_GetI2CCLKFreq+0x4e>
340092a8:	d81d      	bhi.n	340092e6 <RCCEx_GetI2CCLKFreq+0x56>
340092aa:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340092ae:	4298      	cmp	r0, r3
340092b0:	d008      	beq.n	340092c4 <RCCEx_GetI2CCLKFreq+0x34>
340092b2:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
340092b6:	d80f      	bhi.n	340092d8 <RCCEx_GetI2CCLKFreq+0x48>
340092b8:	4a48      	ldr	r2, [pc, #288]	@ (340093dc <RCCEx_GetI2CCLKFreq+0x14c>)
340092ba:	4293      	cmp	r3, r2
340092bc:	d002      	beq.n	340092c4 <RCCEx_GetI2CCLKFreq+0x34>
340092be:	4b48      	ldr	r3, [pc, #288]	@ (340093e0 <RCCEx_GetI2CCLKFreq+0x150>)
340092c0:	4298      	cmp	r0, r3
340092c2:	d14a      	bne.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340092c4:	f7fb fea2 	bl	3400500c <HAL_RCC_GetSysClockFreq>
340092c8:	f7fb ffa8 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340092cc:	4b45      	ldr	r3, [pc, #276]	@ (340093e4 <RCCEx_GetI2CCLKFreq+0x154>)
340092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340092d0:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340092d4:	40d8      	lsrs	r0, r3
340092d6:	e041      	b.n	3400935c <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340092d8:	4a43      	ldr	r2, [pc, #268]	@ (340093e8 <RCCEx_GetI2CCLKFreq+0x158>)
340092da:	4293      	cmp	r3, r2
340092dc:	d13d      	bne.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
}
340092de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340092e2:	f7ff b8ed 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340092e6:	4b41      	ldr	r3, [pc, #260]	@ (340093ec <RCCEx_GetI2CCLKFreq+0x15c>)
340092e8:	4298      	cmp	r0, r3
340092ea:	d008      	beq.n	340092fe <RCCEx_GetI2CCLKFreq+0x6e>
340092ec:	d820      	bhi.n	34009330 <RCCEx_GetI2CCLKFreq+0xa0>
340092ee:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
340092f2:	4298      	cmp	r0, r3
340092f4:	d0f3      	beq.n	340092de <RCCEx_GetI2CCLKFreq+0x4e>
340092f6:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
340092fa:	4298      	cmp	r0, r3
340092fc:	d12d      	bne.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340092fe:	4b39      	ldr	r3, [pc, #228]	@ (340093e4 <RCCEx_GetI2CCLKFreq+0x154>)
34009300:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009304:	0592      	lsls	r2, r2, #22
34009306:	d528      	bpl.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009308:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3400930c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009310:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009314:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009316:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3400931a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400931e:	d057      	beq.n	340093d0 <RCCEx_GetI2CCLKFreq+0x140>
34009320:	d84d      	bhi.n	340093be <RCCEx_GetI2CCLKFreq+0x12e>
34009322:	2b00      	cmp	r3, #0
34009324:	d151      	bne.n	340093ca <RCCEx_GetI2CCLKFreq+0x13a>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009326:	f7fe ffcb 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
3400932a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400932e:	e015      	b.n	3400935c <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009330:	4b2f      	ldr	r3, [pc, #188]	@ (340093f0 <RCCEx_GetI2CCLKFreq+0x160>)
34009332:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009336:	e7e0      	b.n	340092fa <RCCEx_GetI2CCLKFreq+0x6a>
34009338:	4b2e      	ldr	r3, [pc, #184]	@ (340093f4 <RCCEx_GetI2CCLKFreq+0x164>)
3400933a:	4298      	cmp	r0, r3
3400933c:	d014      	beq.n	34009368 <RCCEx_GetI2CCLKFreq+0xd8>
3400933e:	d819      	bhi.n	34009374 <RCCEx_GetI2CCLKFreq+0xe4>
34009340:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009344:	4298      	cmp	r0, r3
34009346:	d02f      	beq.n	340093a8 <RCCEx_GetI2CCLKFreq+0x118>
34009348:	d809      	bhi.n	3400935e <RCCEx_GetI2CCLKFreq+0xce>
3400934a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400934e:	4298      	cmp	r0, r3
34009350:	d02a      	beq.n	340093a8 <RCCEx_GetI2CCLKFreq+0x118>
34009352:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009356:	4298      	cmp	r0, r3
34009358:	d026      	beq.n	340093a8 <RCCEx_GetI2CCLKFreq+0x118>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3400935a:	2000      	movs	r0, #0
}
3400935c:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400935e:	4b26      	ldr	r3, [pc, #152]	@ (340093f8 <RCCEx_GetI2CCLKFreq+0x168>)
34009360:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009364:	4298      	cmp	r0, r3
34009366:	d1f8      	bne.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_MSI_IsReady() != 0U)
34009368:	f7fb fece 	bl	34005108 <LL_RCC_MSI_IsReady>
3400936c:	2800      	cmp	r0, #0
3400936e:	d0f4      	beq.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
        i2c_frequency = MSI_VALUE;
34009370:	4822      	ldr	r0, [pc, #136]	@ (340093fc <RCCEx_GetI2CCLKFreq+0x16c>)
  return i2c_frequency;
34009372:	e7f3      	b.n	3400935c <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009374:	4b22      	ldr	r3, [pc, #136]	@ (34009400 <RCCEx_GetI2CCLKFreq+0x170>)
34009376:	4298      	cmp	r0, r3
34009378:	d008      	beq.n	3400938c <RCCEx_GetI2CCLKFreq+0xfc>
3400937a:	d811      	bhi.n	340093a0 <RCCEx_GetI2CCLKFreq+0x110>
3400937c:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34009380:	4298      	cmp	r0, r3
34009382:	d0f1      	beq.n	34009368 <RCCEx_GetI2CCLKFreq+0xd8>
34009384:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34009388:	4298      	cmp	r0, r3
3400938a:	d1e6      	bne.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_HSI_IsReady() != 0U)
3400938c:	f7fb feb4 	bl	340050f8 <LL_RCC_HSI_IsReady>
34009390:	2800      	cmp	r0, #0
34009392:	d0e2      	beq.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009394:	4b13      	ldr	r3, [pc, #76]	@ (340093e4 <RCCEx_GetI2CCLKFreq+0x154>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009396:	481b      	ldr	r0, [pc, #108]	@ (34009404 <RCCEx_GetI2CCLKFreq+0x174>)
34009398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400939a:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400939e:	e799      	b.n	340092d4 <RCCEx_GetI2CCLKFreq+0x44>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340093a0:	4b19      	ldr	r3, [pc, #100]	@ (34009408 <RCCEx_GetI2CCLKFreq+0x178>)
340093a2:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340093a6:	e7ef      	b.n	34009388 <RCCEx_GetI2CCLKFreq+0xf8>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340093a8:	f7fb ff26 	bl	340051f8 <LL_RCC_IC15_IsEnabled>
340093ac:	2800      	cmp	r0, #0
340093ae:	d0d4      	beq.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
        ic_divider = LL_RCC_IC15_GetDivider();
340093b0:	f7fb ff2a 	bl	34005208 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340093b4:	4b0b      	ldr	r3, [pc, #44]	@ (340093e4 <RCCEx_GetI2CCLKFreq+0x154>)
340093b6:	4604      	mov	r4, r0
340093b8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340093bc:	e7ab      	b.n	34009316 <RCCEx_GetI2CCLKFreq+0x86>
        switch (LL_RCC_IC15_GetSource())
340093be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340093c2:	d1ca      	bne.n	3400935a <RCCEx_GetI2CCLKFreq+0xca>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340093c4:	f7ff f83c 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
340093c8:	e7af      	b.n	3400932a <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340093ca:	f7fe ffb9 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
340093ce:	e7ac      	b.n	3400932a <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340093d0:	f7fe fff6 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
340093d4:	e7a9      	b.n	3400932a <RCCEx_GetI2CCLKFreq+0x9a>
340093d6:	bf00      	nop
340093d8:	0703000c 	.word	0x0703000c
340093dc:	0700000c 	.word	0x0700000c
340093e0:	0700080c 	.word	0x0700080c
340093e4:	56028000 	.word	0x56028000
340093e8:	0701000c 	.word	0x0701000c
340093ec:	0702040c 	.word	0x0702040c
340093f0:	0702080c 	.word	0x0702080c
340093f4:	0704080c 	.word	0x0704080c
340093f8:	0704000c 	.word	0x0704000c
340093fc:	003d0900 	.word	0x003d0900
34009400:	0705040c 	.word	0x0705040c
34009404:	03d09000 	.word	0x03d09000
34009408:	0705080c 	.word	0x0705080c

3400940c <RCCEx_GetLPTIMCLKFreq>:
{
3400940c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400940e:	f7fb fe9d 	bl	3400514c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009412:	4b63      	ldr	r3, [pc, #396]	@ (340095a0 <RCCEx_GetLPTIMCLKFreq+0x194>)
34009414:	4298      	cmp	r0, r3
34009416:	d03a      	beq.n	3400948e <RCCEx_GetLPTIMCLKFreq+0x82>
34009418:	d850      	bhi.n	340094bc <RCCEx_GetLPTIMCLKFreq+0xb0>
3400941a:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
3400941e:	4298      	cmp	r0, r3
34009420:	f000 80a7 	beq.w	34009572 <RCCEx_GetLPTIMCLKFreq+0x166>
34009424:	d813      	bhi.n	3400944e <RCCEx_GetLPTIMCLKFreq+0x42>
34009426:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3400942a:	4298      	cmp	r0, r3
3400942c:	f000 8097 	beq.w	3400955e <RCCEx_GetLPTIMCLKFreq+0x152>
34009430:	3b01      	subs	r3, #1
34009432:	4298      	cmp	r0, r3
34009434:	d909      	bls.n	3400944a <RCCEx_GetLPTIMCLKFreq+0x3e>
34009436:	f203 4301 	addw	r3, r3, #1025	@ 0x401
3400943a:	4298      	cmp	r0, r3
3400943c:	f000 8099 	beq.w	34009572 <RCCEx_GetLPTIMCLKFreq+0x166>
34009440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009444:	4298      	cmp	r0, r3
34009446:	f000 8094 	beq.w	34009572 <RCCEx_GetLPTIMCLKFreq+0x166>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
3400944a:	2000      	movs	r0, #0
}
3400944c:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400944e:	4b55      	ldr	r3, [pc, #340]	@ (340095a4 <RCCEx_GetLPTIMCLKFreq+0x198>)
34009450:	4298      	cmp	r0, r3
34009452:	d015      	beq.n	34009480 <RCCEx_GetLPTIMCLKFreq+0x74>
34009454:	d808      	bhi.n	34009468 <RCCEx_GetLPTIMCLKFreq+0x5c>
34009456:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3400945a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400945e:	429a      	cmp	r2, r3
34009460:	d00e      	beq.n	34009480 <RCCEx_GetLPTIMCLKFreq+0x74>
34009462:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34009466:	e7ed      	b.n	34009444 <RCCEx_GetLPTIMCLKFreq+0x38>
34009468:	4b4f      	ldr	r3, [pc, #316]	@ (340095a8 <RCCEx_GetLPTIMCLKFreq+0x19c>)
3400946a:	4298      	cmp	r0, r3
3400946c:	d00f      	beq.n	3400948e <RCCEx_GetLPTIMCLKFreq+0x82>
3400946e:	d80b      	bhi.n	34009488 <RCCEx_GetLPTIMCLKFreq+0x7c>
34009470:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009474:	4298      	cmp	r0, r3
34009476:	d003      	beq.n	34009480 <RCCEx_GetLPTIMCLKFreq+0x74>
34009478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400947c:	4298      	cmp	r0, r3
3400947e:	d1e4      	bne.n	3400944a <RCCEx_GetLPTIMCLKFreq+0x3e>
}
34009480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009484:	f7ff b81c 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009488:	4b48      	ldr	r3, [pc, #288]	@ (340095ac <RCCEx_GetLPTIMCLKFreq+0x1a0>)
3400948a:	4298      	cmp	r0, r3
3400948c:	d1dd      	bne.n	3400944a <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3400948e:	f7fb feb3 	bl	340051f8 <LL_RCC_IC15_IsEnabled>
34009492:	2800      	cmp	r0, #0
34009494:	d0d9      	beq.n	3400944a <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
34009496:	f7fb feb7 	bl	34005208 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400949a:	4b45      	ldr	r3, [pc, #276]	@ (340095b0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3400949c:	4604      	mov	r4, r0
3400949e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340094a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
340094a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340094aa:	d075      	beq.n	34009598 <RCCEx_GetLPTIMCLKFreq+0x18c>
340094ac:	d86a      	bhi.n	34009584 <RCCEx_GetLPTIMCLKFreq+0x178>
340094ae:	2b00      	cmp	r3, #0
340094b0:	d16f      	bne.n	34009592 <RCCEx_GetLPTIMCLKFreq+0x186>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340094b2:	f7fe ff05 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
340094b6:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340094ba:	e7c7      	b.n	3400944c <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340094bc:	4b3d      	ldr	r3, [pc, #244]	@ (340095b4 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
340094be:	4298      	cmp	r0, r3
340094c0:	d034      	beq.n	3400952c <RCCEx_GetLPTIMCLKFreq+0x120>
340094c2:	d824      	bhi.n	3400950e <RCCEx_GetLPTIMCLKFreq+0x102>
340094c4:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340094c8:	4298      	cmp	r0, r3
340094ca:	d00f      	beq.n	340094ec <RCCEx_GetLPTIMCLKFreq+0xe0>
340094cc:	d815      	bhi.n	340094fa <RCCEx_GetLPTIMCLKFreq+0xee>
340094ce:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340094d2:	4298      	cmp	r0, r3
340094d4:	d00a      	beq.n	340094ec <RCCEx_GetLPTIMCLKFreq+0xe0>
340094d6:	d806      	bhi.n	340094e6 <RCCEx_GetLPTIMCLKFreq+0xda>
340094d8:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340094dc:	4298      	cmp	r0, r3
340094de:	d0d6      	beq.n	3400948e <RCCEx_GetLPTIMCLKFreq+0x82>
340094e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340094e4:	e7d1      	b.n	3400948a <RCCEx_GetLPTIMCLKFreq+0x7e>
340094e6:	4b34      	ldr	r3, [pc, #208]	@ (340095b8 <RCCEx_GetLPTIMCLKFreq+0x1ac>)
340094e8:	4298      	cmp	r0, r3
340094ea:	d1ae      	bne.n	3400944a <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
340094ec:	f7fb fe14 	bl	34005118 <LL_RCC_LSE_IsReady>
340094f0:	3800      	subs	r0, #0
340094f2:	bf18      	it	ne
340094f4:	2001      	movne	r0, #1
340094f6:	03c0      	lsls	r0, r0, #15
340094f8:	e7a8      	b.n	3400944c <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340094fa:	4b30      	ldr	r3, [pc, #192]	@ (340095bc <RCCEx_GetLPTIMCLKFreq+0x1b0>)
340094fc:	4298      	cmp	r0, r3
340094fe:	d0f5      	beq.n	340094ec <RCCEx_GetLPTIMCLKFreq+0xe0>
34009500:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
34009504:	4298      	cmp	r0, r3
34009506:	d011      	beq.n	3400952c <RCCEx_GetLPTIMCLKFreq+0x120>
34009508:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3400950c:	e7ec      	b.n	340094e8 <RCCEx_GetLPTIMCLKFreq+0xdc>
3400950e:	4b2c      	ldr	r3, [pc, #176]	@ (340095c0 <RCCEx_GetLPTIMCLKFreq+0x1b4>)
34009510:	4298      	cmp	r0, r3
34009512:	d015      	beq.n	34009540 <RCCEx_GetLPTIMCLKFreq+0x134>
34009514:	d81b      	bhi.n	3400954e <RCCEx_GetLPTIMCLKFreq+0x142>
34009516:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3400951a:	4298      	cmp	r0, r3
3400951c:	d006      	beq.n	3400952c <RCCEx_GetLPTIMCLKFreq+0x120>
3400951e:	d80c      	bhi.n	3400953a <RCCEx_GetLPTIMCLKFreq+0x12e>
34009520:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009524:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34009528:	4298      	cmp	r0, r3
3400952a:	d18e      	bne.n	3400944a <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3400952c:	4b20      	ldr	r3, [pc, #128]	@ (340095b0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3400952e:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34009530:	07db      	lsls	r3, r3, #31
34009532:	d58a      	bpl.n	3400944a <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
34009534:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
34009538:	e788      	b.n	3400944c <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400953a:	4b22      	ldr	r3, [pc, #136]	@ (340095c4 <RCCEx_GetLPTIMCLKFreq+0x1b8>)
3400953c:	4298      	cmp	r0, r3
3400953e:	d184      	bne.n	3400944a <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009540:	f7fb fd64 	bl	3400500c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009544:	4b1a      	ldr	r3, [pc, #104]	@ (340095b0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009548:	f3c3 6301 	ubfx	r3, r3, #24, #2
3400954c:	e00f      	b.n	3400956e <RCCEx_GetLPTIMCLKFreq+0x162>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400954e:	4b1e      	ldr	r3, [pc, #120]	@ (340095c8 <RCCEx_GetLPTIMCLKFreq+0x1bc>)
34009550:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34009554:	429a      	cmp	r2, r3
34009556:	d0f3      	beq.n	34009540 <RCCEx_GetLPTIMCLKFreq+0x134>
34009558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
3400955c:	e7ee      	b.n	3400953c <RCCEx_GetLPTIMCLKFreq+0x130>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400955e:	f7fb fd55 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34009562:	f7fb fe5b 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009566:	4b12      	ldr	r3, [pc, #72]	@ (340095b0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400956a:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3400956e:	40d8      	lsrs	r0, r3
      break;
34009570:	e76c      	b.n	3400944c <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009572:	f7fb fd4b 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34009576:	f7fb fe51 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3400957a:	4b0d      	ldr	r3, [pc, #52]	@ (340095b0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3400957c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3400957e:	f3c3 3302 	ubfx	r3, r3, #12, #3
34009582:	e7f4      	b.n	3400956e <RCCEx_GetLPTIMCLKFreq+0x162>
        switch (LL_RCC_IC15_GetSource())
34009584:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009588:	f47f af5f 	bne.w	3400944a <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400958c:	f7fe ff58 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34009590:	e791      	b.n	340094b6 <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009592:	f7fe fed5 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
34009596:	e78e      	b.n	340094b6 <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009598:	f7fe ff12 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
3400959c:	e78b      	b.n	340094b6 <RCCEx_GetLPTIMCLKFreq+0xaa>
3400959e:	bf00      	nop
340095a0:	0702102c 	.word	0x0702102c
340095a4:	0701102c 	.word	0x0701102c
340095a8:	0702082c 	.word	0x0702082c
340095ac:	07020c2c 	.word	0x07020c2c
340095b0:	56028000 	.word	0x56028000
340095b4:	07040c2c 	.word	0x07040c2c
340095b8:	07030c2c 	.word	0x07030c2c
340095bc:	0703182c 	.word	0x0703182c
340095c0:	07050c2c 	.word	0x07050c2c
340095c4:	0705082c 	.word	0x0705082c
340095c8:	0705102c 	.word	0x0705102c

340095cc <HAL_RCCEx_GetPeriphCLKFreq>:
{
340095cc:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
340095ce:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
340095d2:	430b      	orrs	r3, r1
340095d4:	f000 8447 	beq.w	34009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
340095d8:	4bbf      	ldr	r3, [pc, #764]	@ (340098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
340095da:	4298      	cmp	r0, r3
340095dc:	f171 0300 	sbcs.w	r3, r1, #0
340095e0:	f080 80e6 	bcs.w	340097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
340095e4:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
340095e8:	430b      	orrs	r3, r1
340095ea:	f000 835b 	beq.w	34009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
340095ee:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
340095f2:	f171 0300 	sbcs.w	r3, r1, #0
340095f6:	d26a      	bcs.n	340096ce <HAL_RCCEx_GetPeriphCLKFreq+0x102>
340095f8:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
340095fc:	430b      	orrs	r3, r1
340095fe:	f000 82b9 	beq.w	34009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
34009602:	f240 2301 	movw	r3, #513	@ 0x201
34009606:	4298      	cmp	r0, r3
34009608:	f171 0300 	sbcs.w	r3, r1, #0
3400960c:	d224      	bcs.n	34009658 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
3400960e:	2809      	cmp	r0, #9
34009610:	f171 0300 	sbcs.w	r3, r1, #0
34009614:	d215      	bcs.n	34009642 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
34009616:	ea50 0301 	orrs.w	r3, r0, r1
3400961a:	d01b      	beq.n	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
3400961c:	3801      	subs	r0, #1
3400961e:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
34009622:	2808      	cmp	r0, #8
34009624:	f171 0100 	sbcs.w	r1, r1, #0
34009628:	d214      	bcs.n	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
3400962a:	2807      	cmp	r0, #7
3400962c:	d812      	bhi.n	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
3400962e:	e8df f010 	tbh	[pc, r0, lsl #1]
34009632:	01a6      	.short	0x01a6
34009634:	0011020f 	.word	0x0011020f
34009638:	00110285 	.word	0x00110285
3400963c:	00110011 	.word	0x00110011
34009640:	0235      	.short	0x0235
34009642:	f1a0 0310 	sub.w	r3, r0, #16
34009646:	430b      	orrs	r3, r1
34009648:	f000 8242 	beq.w	34009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
3400964c:	3820      	subs	r0, #32
3400964e:	4308      	orrs	r0, r1
34009650:	f000 8268 	beq.w	34009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34009654:	2000      	movs	r0, #0
34009656:	e219      	b.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
34009658:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
3400965c:	430b      	orrs	r3, r1
3400965e:	f000 831d 	beq.w	34009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
34009662:	f242 0301 	movw	r3, #8193	@ 0x2001
34009666:	4298      	cmp	r0, r3
34009668:	f171 0300 	sbcs.w	r3, r1, #0
3400966c:	d224      	bcs.n	340096b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
3400966e:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
34009672:	430b      	orrs	r3, r1
34009674:	f000 82df 	beq.w	34009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
34009678:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
3400967c:	430b      	orrs	r3, r1
3400967e:	f000 8308 	beq.w	34009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
34009682:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
34009686:	4308      	orrs	r0, r1
34009688:	d1e4      	bne.n	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
3400968a:	4d94      	ldr	r5, [pc, #592]	@ (340098dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
3400968c:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
34009690:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34009694:	2b02      	cmp	r3, #2
34009696:	f000 82c1 	beq.w	34009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
3400969a:	2b03      	cmp	r3, #3
3400969c:	f000 8256 	beq.w	34009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
340096a0:	2b01      	cmp	r3, #1
340096a2:	f000 824b 	beq.w	34009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340096a6:	f7fb fcb1 	bl	3400500c <HAL_RCC_GetSysClockFreq>
340096aa:	f7fb fdb7 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340096ae:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
340096b0:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340096b4:	40d8      	lsrs	r0, r3
340096b6:	e1e9      	b.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
340096b8:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
340096bc:	430b      	orrs	r3, r1
340096be:	f000 82ef 	beq.w	34009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
340096c2:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
340096c6:	4308      	orrs	r0, r1
340096c8:	d1c4      	bne.n	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
340096ca:	4885      	ldr	r0, [pc, #532]	@ (340098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
340096cc:	e2e2      	b.n	34009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
  switch (PeriphClk)
340096ce:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
340096d2:	430b      	orrs	r3, r1
340096d4:	f000 82f6 	beq.w	34009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
340096d8:	4b82      	ldr	r3, [pc, #520]	@ (340098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
340096da:	4298      	cmp	r0, r3
340096dc:	f171 0300 	sbcs.w	r3, r1, #0
340096e0:	d224      	bcs.n	3400972c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
340096e2:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
340096e6:	430b      	orrs	r3, r1
340096e8:	f000 82e8 	beq.w	34009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
340096ec:	4b7e      	ldr	r3, [pc, #504]	@ (340098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
340096ee:	4298      	cmp	r0, r3
340096f0:	f171 0300 	sbcs.w	r3, r1, #0
340096f4:	d20f      	bcs.n	34009716 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
340096f6:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
340096fa:	430b      	orrs	r3, r1
340096fc:	f000 82d7 	beq.w	34009cae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34009700:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
34009704:	430b      	orrs	r3, r1
34009706:	f000 82d7 	beq.w	34009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3400970a:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
3400970e:	4308      	orrs	r0, r1
34009710:	d1a0      	bne.n	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34009712:	4876      	ldr	r0, [pc, #472]	@ (340098ec <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
34009714:	e2c7      	b.n	34009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
  switch (PeriphClk)
34009716:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
3400971a:	430b      	orrs	r3, r1
3400971c:	f000 82d0 	beq.w	34009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
34009720:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
34009724:	4308      	orrs	r0, r1
34009726:	d195      	bne.n	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34009728:	4871      	ldr	r0, [pc, #452]	@ (340098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
3400972a:	e2c1      	b.n	34009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  switch (PeriphClk)
3400972c:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
34009730:	430b      	orrs	r3, r1
34009732:	f000 834d 	beq.w	34009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
34009736:	4b6f      	ldr	r3, [pc, #444]	@ (340098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
34009738:	4298      	cmp	r0, r3
3400973a:	f171 0300 	sbcs.w	r3, r1, #0
3400973e:	d228      	bcs.n	34009792 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
34009740:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
34009744:	430b      	orrs	r3, r1
34009746:	f000 8302 	beq.w	34009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
3400974a:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
3400974e:	4308      	orrs	r0, r1
34009750:	d180      	bne.n	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34009752:	4d62      	ldr	r5, [pc, #392]	@ (340098dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34009754:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
34009758:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3400975c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34009760:	f000 8195 	beq.w	34009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34009764:	f200 8319 	bhi.w	34009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
34009768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400976c:	f000 831f 	beq.w	34009dae <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
34009770:	f240 81e1 	bls.w	34009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34009774:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34009778:	f47f af6c 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3400977c:	f7fb fd06 	bl	3400518c <LL_RCC_IC8_IsEnabled>
34009780:	2800      	cmp	r0, #0
34009782:	f43f af67 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
34009786:	f7fb fd09 	bl	3400519c <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3400978a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3400978e:	4604      	mov	r4, r0
34009790:	e191      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (PeriphClk)
34009792:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
34009796:	430b      	orrs	r3, r1
34009798:	f000 8344 	beq.w	34009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
3400979c:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
340097a0:	4308      	orrs	r0, r1
340097a2:	f47f af57 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
340097a6:	4854      	ldr	r0, [pc, #336]	@ (340098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
}
340097a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
340097ac:	f7ff bbd6 	b.w	34008f5c <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
340097b0:	2300      	movs	r3, #0
340097b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340097b6:	4291      	cmp	r1, r2
340097b8:	bf08      	it	eq
340097ba:	4298      	cmpeq	r0, r3
340097bc:	f000 836f 	beq.w	34009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
340097c0:	4283      	cmp	r3, r0
340097c2:	418a      	sbcs	r2, r1
340097c4:	d35f      	bcc.n	34009886 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
340097c6:	2210      	movs	r2, #16
340097c8:	4291      	cmp	r1, r2
340097ca:	bf08      	it	eq
340097cc:	4298      	cmpeq	r0, r3
340097ce:	f000 8359 	beq.w	34009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
340097d2:	4283      	cmp	r3, r0
340097d4:	418a      	sbcs	r2, r1
340097d6:	d329      	bcc.n	3400982c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
340097d8:	2202      	movs	r2, #2
340097da:	4291      	cmp	r1, r2
340097dc:	bf08      	it	eq
340097de:	4298      	cmpeq	r0, r3
340097e0:	f000 8349 	beq.w	34009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
340097e4:	4283      	cmp	r3, r0
340097e6:	418a      	sbcs	r2, r1
340097e8:	d314      	bcc.n	34009814 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
340097ea:	4299      	cmp	r1, r3
340097ec:	bf08      	it	eq
340097ee:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
340097f2:	f000 833a 	beq.w	34009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
340097f6:	2901      	cmp	r1, #1
340097f8:	bf08      	it	eq
340097fa:	4298      	cmpeq	r0, r3
340097fc:	f000 8337 	beq.w	34009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
34009800:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
34009804:	4308      	orrs	r0, r1
34009806:	f47f af25 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
3400980a:	483c      	ldr	r0, [pc, #240]	@ (340098fc <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
}
3400980c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34009810:	f7ff bcd8 	b.w	340091c4 <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
34009814:	2904      	cmp	r1, #4
34009816:	bf08      	it	eq
34009818:	4298      	cmpeq	r0, r3
3400981a:	f000 8331 	beq.w	34009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
3400981e:	2908      	cmp	r1, #8
34009820:	bf08      	it	eq
34009822:	4298      	cmpeq	r0, r3
34009824:	f47f af16 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34009828:	4835      	ldr	r0, [pc, #212]	@ (34009900 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
3400982a:	e325      	b.n	34009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
3400982c:	f44f 7200 	mov.w	r2, #512	@ 0x200
34009830:	4291      	cmp	r1, r2
34009832:	bf08      	it	eq
34009834:	4298      	cmpeq	r0, r3
34009836:	f000 832e 	beq.w	34009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
3400983a:	4283      	cmp	r3, r0
3400983c:	418a      	sbcs	r2, r1
3400983e:	d311      	bcc.n	34009864 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
34009840:	2940      	cmp	r1, #64	@ 0x40
34009842:	bf08      	it	eq
34009844:	4298      	cmpeq	r0, r3
34009846:	f000 831f 	beq.w	34009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
3400984a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
3400984e:	bf08      	it	eq
34009850:	4298      	cmpeq	r0, r3
34009852:	f000 831b 	beq.w	34009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
34009856:	2920      	cmp	r1, #32
34009858:	bf08      	it	eq
3400985a:	2800      	cmpeq	r0, #0
3400985c:	f47f aefa 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34009860:	4828      	ldr	r0, [pc, #160]	@ (34009904 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
34009862:	e309      	b.n	34009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34009864:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
34009868:	bf08      	it	eq
3400986a:	4298      	cmpeq	r0, r3
3400986c:	f000 8315 	beq.w	34009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
34009870:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
34009874:	bf08      	it	eq
34009876:	4298      	cmpeq	r0, r3
34009878:	f47f aeec 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
3400987c:	4822      	ldr	r0, [pc, #136]	@ (34009908 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
}
3400987e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34009882:	f7ff b919 	b.w	34008ab8 <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
34009886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3400988a:	4291      	cmp	r1, r2
3400988c:	bf08      	it	eq
3400988e:	4298      	cmpeq	r0, r3
34009890:	f000 830f 	beq.w	34009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
34009894:	4283      	cmp	r3, r0
34009896:	418a      	sbcs	r2, r1
34009898:	d34b      	bcc.n	34009932 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
3400989a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400989e:	4291      	cmp	r1, r2
340098a0:	bf08      	it	eq
340098a2:	4298      	cmpeq	r0, r3
340098a4:	f000 8301 	beq.w	34009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
340098a8:	4283      	cmp	r3, r0
340098aa:	418a      	sbcs	r2, r1
340098ac:	d330      	bcc.n	34009910 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
340098ae:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
340098b2:	bf08      	it	eq
340098b4:	4298      	cmpeq	r0, r3
340098b6:	f000 82f4 	beq.w	34009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
340098ba:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
340098be:	bf08      	it	eq
340098c0:	4298      	cmpeq	r0, r3
340098c2:	f000 82f0 	beq.w	34009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
340098c6:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
340098ca:	bf08      	it	eq
340098cc:	2800      	cmpeq	r0, #0
340098ce:	f47f aec1 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
340098d2:	480e      	ldr	r0, [pc, #56]	@ (3400990c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
340098d4:	e2db      	b.n	34009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
340098d6:	bf00      	nop
340098d8:	20000001 	.word	0x20000001
340098dc:	56028000 	.word	0x56028000
340098e0:	07000c0c 	.word	0x07000c0c
340098e4:	00800001 	.word	0x00800001
340098e8:	00100001 	.word	0x00100001
340098ec:	0700140c 	.word	0x0700140c
340098f0:	0700182c 	.word	0x0700182c
340098f4:	04000001 	.word	0x04000001
340098f8:	07001418 	.word	0x07001418
340098fc:	0300001c 	.word	0x0300001c
34009900:	07000c20 	.word	0x07000c20
34009904:	07001420 	.word	0x07001420
34009908:	07000c30 	.word	0x07000c30
3400990c:	07001430 	.word	0x07001430
  switch (PeriphClk)
34009910:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
34009914:	bf08      	it	eq
34009916:	4298      	cmpeq	r0, r3
34009918:	f000 82c9 	beq.w	34009eae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
3400991c:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
34009920:	bf08      	it	eq
34009922:	4298      	cmpeq	r0, r3
34009924:	f47f ae96 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34009928:	48b4      	ldr	r0, [pc, #720]	@ (34009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
}
3400992a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3400992e:	f7fe bf8d 	b.w	3400884c <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
34009932:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
34009936:	4291      	cmp	r1, r2
34009938:	bf08      	it	eq
3400993a:	4298      	cmpeq	r0, r3
3400993c:	f000 82c0 	beq.w	34009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
34009940:	4283      	cmp	r3, r0
34009942:	418a      	sbcs	r2, r1
34009944:	d30d      	bcc.n	34009962 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
34009946:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
3400994a:	bf08      	it	eq
3400994c:	4298      	cmpeq	r0, r3
3400994e:	f000 82b5 	beq.w	34009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
34009952:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
34009956:	bf08      	it	eq
34009958:	4298      	cmpeq	r0, r3
3400995a:	f47f ae7b 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3400995e:	48a8      	ldr	r0, [pc, #672]	@ (34009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
34009960:	e2a8      	b.n	34009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  switch (PeriphClk)
34009962:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34009966:	bf08      	it	eq
34009968:	4298      	cmpeq	r0, r3
3400996a:	f000 82ae 	beq.w	34009eca <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
3400996e:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
34009972:	bf08      	it	eq
34009974:	4298      	cmpeq	r0, r3
34009976:	f47f ae6d 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3400997a:	48a2      	ldr	r0, [pc, #648]	@ (34009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
3400997c:	e2a1      	b.n	34009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
3400997e:	4da2      	ldr	r5, [pc, #648]	@ (34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009980:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009984:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009988:	2b40      	cmp	r3, #64	@ 0x40
3400998a:	d053      	beq.n	34009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
3400998c:	d814      	bhi.n	340099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
3400998e:	2b20      	cmp	r3, #32
34009990:	d025      	beq.n	340099de <HAL_RCCEx_GetPeriphCLKFreq+0x412>
34009992:	d805      	bhi.n	340099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
34009994:	bb03      	cbnz	r3, 340099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009996:	f7fb fb39 	bl	3400500c <HAL_RCC_GetSysClockFreq>
3400999a:	f7fb fc3f 	bl	3400521c <RCCEx_GetHCLKFreq>
      break;
3400999e:	e002      	b.n	340099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
340099a0:	2b30      	cmp	r3, #48	@ 0x30
340099a2:	d034      	beq.n	34009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
340099a4:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
340099a6:	4b98      	ldr	r3, [pc, #608]	@ (34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
340099a8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340099ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
340099b0:	3301      	adds	r3, #1
340099b2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
340099b6:	e069      	b.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
340099b8:	2b60      	cmp	r3, #96	@ 0x60
340099ba:	d047      	beq.n	34009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
340099bc:	2b70      	cmp	r3, #112	@ 0x70
340099be:	d03f      	beq.n	34009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
340099c0:	2b50      	cmp	r3, #80	@ 0x50
340099c2:	d1ef      	bne.n	340099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (LL_RCC_HSI_IsReady() != 0U)
340099c4:	f7fb fb98 	bl	340050f8 <LL_RCC_HSI_IsReady>
340099c8:	2800      	cmp	r0, #0
340099ca:	d0eb      	beq.n	340099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340099cc:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340099ce:	488f      	ldr	r0, [pc, #572]	@ (34009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
340099d0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340099d4:	40d8      	lsrs	r0, r3
      break;
340099d6:	e7e6      	b.n	340099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340099d8:	f7fe fd72 	bl	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
340099dc:	e7e3      	b.n	340099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC7_IsEnabled() != 0U)
340099de:	f7fb fbc3 	bl	34005168 <LL_RCC_IC7_IsEnabled>
340099e2:	2800      	cmp	r0, #0
340099e4:	d0de      	beq.n	340099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC7_GetDivider();
340099e6:	f7fb fbc7 	bl	34005178 <LL_RCC_IC7_GetDivider>
340099ea:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
340099ec:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340099f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
340099f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340099f8:	d019      	beq.n	34009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
340099fa:	d812      	bhi.n	34009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
340099fc:	b913      	cbnz	r3, 34009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340099fe:	f7fe fc5f 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
34009a02:	e001      	b.n	34009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009a04:	f7fe fc9c 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
34009a08:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009a0c:	e7cb      	b.n	340099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009a0e:	f7fb fbbd 	bl	3400518c <LL_RCC_IC8_IsEnabled>
34009a12:	2800      	cmp	r0, #0
34009a14:	d0c6      	beq.n	340099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34009a16:	f7fb fbc1 	bl	3400519c <LL_RCC_IC8_GetDivider>
34009a1a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34009a1e:	4604      	mov	r4, r0
34009a20:	e7e6      	b.n	340099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
        switch (LL_RCC_IC8_GetSource())
34009a22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009a26:	d1bd      	bne.n	340099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009a28:	f7fe fd0a 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34009a2c:	e7ec      	b.n	34009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009a2e:	f7fe fcc7 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34009a32:	e7e9      	b.n	34009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
      if (LL_RCC_MSI_IsReady() != 0U)
34009a34:	f7fb fb68 	bl	34005108 <LL_RCC_MSI_IsReady>
34009a38:	2800      	cmp	r0, #0
34009a3a:	d0b3      	beq.n	340099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        adc_frequency = MSI_VALUE;
34009a3c:	4874      	ldr	r0, [pc, #464]	@ (34009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34009a3e:	e7b2      	b.n	340099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009a40:	f7fb fae4 	bl	3400500c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009a44:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009a46:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009a4a:	e7c3      	b.n	340099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009a4c:	4871      	ldr	r0, [pc, #452]	@ (34009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x648>)
34009a4e:	e7aa      	b.n	340099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34009a50:	4d6d      	ldr	r5, [pc, #436]	@ (34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009a52:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009a56:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
34009a5a:	3b01      	subs	r3, #1
34009a5c:	2b06      	cmp	r3, #6
34009a5e:	f200 80f5 	bhi.w	34009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
34009a62:	a201      	add	r2, pc, #4	@ (adr r2, 34009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>)
34009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34009a68:	34009b3d 	.word	0x34009b3d
34009a6c:	34009daf 	.word	0x34009daf
34009a70:	3400977d 	.word	0x3400977d
34009a74:	34009a8f 	.word	0x34009a8f
34009a78:	34009afd 	.word	0x34009afd
34009a7c:	34009ecf 	.word	0x34009ecf
34009a80:	34009dc5 	.word	0x34009dc5
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009a84:	f7fe fc5c 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34009a88:	fbb0 f0f4 	udiv	r0, r0, r4
}
34009a8c:	bd38      	pop	{r3, r4, r5, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34009a8e:	f7fb fb3b 	bl	34005108 <LL_RCC_MSI_IsReady>
34009a92:	2800      	cmp	r0, #0
34009a94:	f43f adde 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
34009a98:	485d      	ldr	r0, [pc, #372]	@ (34009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34009a9a:	e7f7      	b.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34009a9c:	4b5a      	ldr	r3, [pc, #360]	@ (34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009a9e:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009aa2:	0395      	lsls	r5, r2, #14
34009aa4:	f57f add6 	bpl.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009aa8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34009aac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009ab0:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009ab4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009ab6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC20_GetSource())
34009aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009abe:	f000 81ae 	beq.w	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
34009ac2:	f200 81a5 	bhi.w	34009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34009ac6:	2b00      	cmp	r3, #0
34009ac8:	d1dc      	bne.n	34009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009aca:	f7fe fbf9 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
34009ace:	e7db      	b.n	34009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34009ad0:	4d4d      	ldr	r5, [pc, #308]	@ (34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009ad2:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009ad6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009ada:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34009ade:	d014      	beq.n	34009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
34009ae0:	d808      	bhi.n	34009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34009ae2:	bb5b      	cbnz	r3, 34009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009ae4:	f7fb fa92 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34009ae8:	f7fb fb98 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34009aec:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34009aee:	f3c3 4302 	ubfx	r3, r3, #16, #3
34009af2:	e5df      	b.n	340096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009af4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009af8:	f47f adac 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009afc:	f7fb fafc 	bl	340050f8 <LL_RCC_HSI_IsReady>
34009b00:	2800      	cmp	r0, #0
34009b02:	f43f ada7 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009b06:	6cab      	ldr	r3, [r5, #72]	@ 0x48
34009b08:	e136      	b.n	34009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34009b0a:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009b0e:	03dc      	lsls	r4, r3, #15
34009b10:	f57f ada0 	bpl.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009b14:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009b18:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009b1c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009b20:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009b22:	e7c8      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34009b24:	4a38      	ldr	r2, [pc, #224]	@ (34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009b26:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009b2a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34009b32:	d012      	beq.n	34009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
34009b34:	d806      	bhi.n	34009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009b36:	2b00      	cmp	r3, #0
34009b38:	f000 8088 	beq.w	34009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
}
34009b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009b40:	f7fe bcbe 	b.w	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009b44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34009b48:	f47f ad84 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
34009b4c:	f7fb facc 	bl	340050e8 <LL_RCC_HSE_IsReady>
34009b50:	2800      	cmp	r0, #0
34009b52:	f43f ad7f 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
34009b56:	4830      	ldr	r0, [pc, #192]	@ (34009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009b58:	e798      	b.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34009b5a:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009b5e:	0518      	lsls	r0, r3, #20
34009b60:	f57f ad78 	bpl.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009b64:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009b68:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009b6c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009b70:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009b72:	e7a0      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34009b74:	4a24      	ldr	r2, [pc, #144]	@ (34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009b76:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009b7a:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34009b7e:	2b02      	cmp	r3, #2
34009b80:	d010      	beq.n	34009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
34009b82:	2b03      	cmp	r3, #3
34009b84:	d034      	beq.n	34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
34009b86:	2b01      	cmp	r3, #1
34009b88:	d009      	beq.n	34009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009b8a:	f7fb fa3f 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34009b8e:	f7fb fb45 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34009b92:	4b1d      	ldr	r3, [pc, #116]	@ (34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009b94:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34009b98:	f3c3 1303 	ubfx	r3, r3, #4, #4
34009b9c:	e708      	b.n	340099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009b9e:	f7fe fc8f 	bl	340084c0 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34009ba2:	e7f6      	b.n	34009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34009ba4:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009ba8:	04d9      	lsls	r1, r3, #19
34009baa:	d516      	bpl.n	34009bda <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009bac:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009bb0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009bb4:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009bb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC13_GetSource())
34009bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009bc0:	f100 0401 	add.w	r4, r0, #1
34009bc4:	d00e      	beq.n	34009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
34009bc6:	d805      	bhi.n	34009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
34009bc8:	b94b      	cbnz	r3, 34009bde <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009bca:	f7fe fb79 	bl	340082c0 <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34009bce:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009bd2:	e7de      	b.n	34009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        switch (LL_RCC_IC13_GetSource())
34009bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009bd8:	d007      	beq.n	34009bea <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
        eth1ptp_frequency = HSE_VALUE;
34009bda:	2000      	movs	r0, #0
34009bdc:	e7d9      	b.n	34009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009bde:	f7fe fbaf 	bl	34008340 <HAL_RCCEx_GetPLL2CLKFreq>
34009be2:	e7f4      	b.n	34009bce <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009be4:	f7fe fbec 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34009be8:	e7f1      	b.n	34009bce <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009bea:	f7fe fc29 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34009bee:	e7ee      	b.n	34009bce <HAL_RCCEx_GetPeriphCLKFreq+0x602>
      if (LL_RCC_HSE_IsReady() != 0U)
34009bf0:	f7fb fa7a 	bl	340050e8 <LL_RCC_HSE_IsReady>
34009bf4:	2800      	cmp	r0, #0
34009bf6:	d0f0      	beq.n	34009bda <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        eth1ptp_frequency = HSE_VALUE;
34009bf8:	4807      	ldr	r0, [pc, #28]	@ (34009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009bfa:	e7ca      	b.n	34009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
34009bfc:	01001014 	.word	0x01001014
34009c00:	03001414 	.word	0x03001414
34009c04:	03000814 	.word	0x03000814
34009c08:	56028000 	.word	0x56028000
34009c0c:	03d09000 	.word	0x03d09000
34009c10:	003d0900 	.word	0x003d0900
34009c14:	00bb8000 	.word	0x00bb8000
34009c18:	02dc6c00 	.word	0x02dc6c00
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34009c1c:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009c20:	035b      	lsls	r3, r3, #13
34009c22:	f57f ad17 	bpl.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009c26:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009c2a:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009c2e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009c32:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009c34:	e73f      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34009c36:	4ba7      	ldr	r3, [pc, #668]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009c38:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
34009c3c:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009c40:	2a20      	cmp	r2, #32
34009c42:	d019      	beq.n	34009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
34009c44:	d808      	bhi.n	34009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
34009c46:	2a00      	cmp	r2, #0
34009c48:	f47f af78 	bne.w	34009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009c4c:	f7fb f9de 	bl	3400500c <HAL_RCC_GetSysClockFreq>
}
34009c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009c54:	f7fb bae2 	b.w	3400521c <RCCEx_GetHCLKFreq>
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009c58:	2a30      	cmp	r2, #48	@ 0x30
34009c5a:	f47f acfb 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009c5e:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009c62:	0714      	lsls	r4, r2, #28
34009c64:	f57f acf6 	bpl.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009c68:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009c6c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009c70:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009c74:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009c76:	e71e      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34009c78:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009c7c:	0755      	lsls	r5, r2, #29
34009c7e:	f57f ace9 	bpl.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009c82:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009c86:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009c8a:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009c8e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009c90:	e711      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34009c92:	4891      	ldr	r0, [pc, #580]	@ (34009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
}
34009c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34009c98:	f7ff bafa 	b.w	34009290 <RCCEx_GetI2CCLKFreq>
34009c9c:	488f      	ldr	r0, [pc, #572]	@ (34009edc <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34009c9e:	e7f9      	b.n	34009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34009ca0:	488f      	ldr	r0, [pc, #572]	@ (34009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34009ca2:	e7f7      	b.n	34009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34009ca4:	488f      	ldr	r0, [pc, #572]	@ (34009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
}
34009ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34009caa:	f7ff b9ff 	b.w	340090ac <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34009cae:	488e      	ldr	r0, [pc, #568]	@ (34009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
}
34009cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34009cb4:	f7ff bbaa 	b.w	3400940c <RCCEx_GetLPTIMCLKFreq>
34009cb8:	488c      	ldr	r0, [pc, #560]	@ (34009eec <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009cba:	e7f9      	b.n	34009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34009cbc:	488c      	ldr	r0, [pc, #560]	@ (34009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34009cbe:	e7f7      	b.n	34009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34009cc0:	488c      	ldr	r0, [pc, #560]	@ (34009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34009cc2:	e7f5      	b.n	34009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34009cc4:	4a83      	ldr	r2, [pc, #524]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009cc6:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34009cca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34009cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009cd2:	d031      	beq.n	34009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
34009cd4:	d812      	bhi.n	34009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x730>
34009cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009cda:	f43f af2f 	beq.w	34009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
34009cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009ce2:	d01d      	beq.n	34009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
34009ce4:	2b00      	cmp	r3, #0
34009ce6:	f47f acb5 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009cea:	f7fb f98f 	bl	3400500c <HAL_RCC_GetSysClockFreq>
34009cee:	f7fb fa95 	bl	3400521c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34009cf2:	4b78      	ldr	r3, [pc, #480]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009cf6:	f3c3 3302 	ubfx	r3, r3, #12, #3
34009cfa:	e4db      	b.n	340096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34009cfc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34009d00:	f43f aec5 	beq.w	34009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34009d04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34009d08:	d02f      	beq.n	34009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
34009d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
34009d0e:	f47f aca1 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
34009d12:	f7fb fa01 	bl	34005118 <LL_RCC_LSE_IsReady>
34009d16:	3800      	subs	r0, #0
34009d18:	bf18      	it	ne
34009d1a:	2001      	movne	r0, #1
34009d1c:	03c0      	lsls	r0, r0, #15
34009d1e:	e6b5      	b.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34009d20:	f7fb fa46 	bl	340051b0 <LL_RCC_IC9_IsEnabled>
34009d24:	2800      	cmp	r0, #0
34009d26:	f43f ac95 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
34009d2a:	f7fb fa49 	bl	340051c0 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34009d2e:	4b69      	ldr	r3, [pc, #420]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009d30:	4604      	mov	r4, r0
34009d32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34009d36:	e6be      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34009d38:	f7fb fa4c 	bl	340051d4 <LL_RCC_IC14_IsEnabled>
34009d3c:	2800      	cmp	r0, #0
34009d3e:	f43f ac89 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
34009d42:	f7fb fa4f 	bl	340051e4 <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34009d46:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34009d4a:	4604      	mov	r4, r0
34009d4c:	e6b3      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34009d4e:	4d61      	ldr	r5, [pc, #388]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009d50:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
34009d54:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34009d58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34009d5c:	d010      	beq.n	34009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
34009d5e:	f67f aec0 	bls.w	34009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
34009d62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34009d66:	f47f ac75 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009d6a:	f7fb f9c5 	bl	340050f8 <LL_RCC_HSI_IsReady>
34009d6e:	2800      	cmp	r0, #0
34009d70:	f43f ac70 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009d74:	4b57      	ldr	r3, [pc, #348]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009d78:	485f      	ldr	r0, [pc, #380]	@ (34009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34009d7a:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009d7e:	e499      	b.n	340096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34009d80:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009d84:	0418      	lsls	r0, r3, #16
34009d86:	f57f ac65 	bpl.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009d8a:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009d8e:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009d92:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009d96:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009d98:	e68d      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009d9a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34009d9e:	f000 8096 	beq.w	34009ece <HAL_RCCEx_GetPeriphCLKFreq+0x902>
34009da2:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34009da6:	d00d      	beq.n	34009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
34009da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34009dac:	e6a4      	b.n	34009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34009dae:	f7fb f9db 	bl	34005168 <LL_RCC_IC7_IsEnabled>
34009db2:	2800      	cmp	r0, #0
34009db4:	f43f ac4e 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
34009db8:	f7fb f9de 	bl	34005178 <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009dbc:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
34009dc0:	4604      	mov	r4, r0
34009dc2:	e678      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009dc4:	f7fb f922 	bl	3400500c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009dc8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009dca:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009dce:	e471      	b.n	340096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34009dd0:	4a40      	ldr	r2, [pc, #256]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009dd2:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009dd6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009dda:	2b20      	cmp	r3, #32
34009ddc:	d00b      	beq.n	34009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
34009dde:	f67f aeaa 	bls.w	34009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34009de2:	2b30      	cmp	r3, #48	@ 0x30
34009de4:	f47f ac36 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009de8:	f7fb f986 	bl	340050f8 <LL_RCC_HSI_IsReady>
34009dec:	2800      	cmp	r0, #0
34009dee:	f43f ac31 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009df2:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34009df4:	e7c0      	b.n	34009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34009df6:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009dfa:	0319      	lsls	r1, r3, #12
34009dfc:	f57f ac2a 	bpl.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009e00:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009e04:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009e08:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009e0c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009e0e:	e652      	b.n	34009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        switch (LL_RCC_IC20_GetSource())
34009e10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009e14:	f47f ac1e 	bne.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009e18:	f7fe fb12 	bl	34008440 <HAL_RCCEx_GetPLL4CLKFreq>
34009e1c:	e634      	b.n	34009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009e1e:	f7fe facf 	bl	340083c0 <HAL_RCCEx_GetPLL3CLKFreq>
34009e22:	e631      	b.n	34009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34009e24:	4a2b      	ldr	r2, [pc, #172]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009e26:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
34009e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009e32:	d005      	beq.n	34009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
34009e34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009e38:	d009      	beq.n	34009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
34009e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009e3e:	e766      	b.n	34009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34009e40:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34009e42:	07db      	lsls	r3, r3, #31
34009e44:	f57f ac06 	bpl.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
34009e48:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
34009e4c:	e61e      	b.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_HSE_IsReady() != 0U)
34009e4e:	f7fb f94b 	bl	340050e8 <LL_RCC_HSE_IsReady>
34009e52:	2800      	cmp	r0, #0
34009e54:	f43f abfe 	beq.w	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009e58:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
34009e5c:	4827      	ldr	r0, [pc, #156]	@ (34009efc <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009e5e:	f3c3 3305 	ubfx	r3, r3, #12, #6
34009e62:	3301      	adds	r3, #1
34009e64:	e5a5      	b.n	340099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34009e66:	4826      	ldr	r0, [pc, #152]	@ (34009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34009e68:	e49e      	b.n	340097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34009e6a:	4826      	ldr	r0, [pc, #152]	@ (34009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
34009e6c:	e4ce      	b.n	3400980c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
34009e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34009e72:	f7fe bbab 	b.w	340085cc <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34009e76:	4824      	ldr	r0, [pc, #144]	@ (34009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
}
34009e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009e7c:	f7fe bf30 	b.w	34008ce0 <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34009e80:	4822      	ldr	r0, [pc, #136]	@ (34009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
34009e82:	e7f9      	b.n	34009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34009e84:	4822      	ldr	r0, [pc, #136]	@ (34009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
34009e86:	e7f7      	b.n	34009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009e88:	4822      	ldr	r0, [pc, #136]	@ (34009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
34009e8a:	e7f5      	b.n	34009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34009e8c:	4822      	ldr	r0, [pc, #136]	@ (34009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
}
34009e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34009e92:	f7fe bd0d 	b.w	340088b0 <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34009e96:	4821      	ldr	r0, [pc, #132]	@ (34009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
34009e98:	e7f9      	b.n	34009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34009e9a:	4821      	ldr	r0, [pc, #132]	@ (34009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
34009e9c:	e7f7      	b.n	34009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34009e9e:	4821      	ldr	r0, [pc, #132]	@ (34009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
34009ea0:	e4ed      	b.n	3400987e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34009ea2:	4821      	ldr	r0, [pc, #132]	@ (34009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
34009ea4:	e4eb      	b.n	3400987e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34009ea6:	4821      	ldr	r0, [pc, #132]	@ (34009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
34009ea8:	e4e9      	b.n	3400987e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34009eaa:	4821      	ldr	r0, [pc, #132]	@ (34009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
34009eac:	e4e7      	b.n	3400987e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34009eae:	4821      	ldr	r0, [pc, #132]	@ (34009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
34009eb0:	e7ed      	b.n	34009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34009eb2:	4821      	ldr	r0, [pc, #132]	@ (34009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
}
34009eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34009eb8:	f7fe bc62 	b.w	34008780 <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34009ebc:	481f      	ldr	r0, [pc, #124]	@ (34009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
34009ebe:	e534      	b.n	3400992a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34009ec0:	481f      	ldr	r0, [pc, #124]	@ (34009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
}
34009ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34009ec6:	f7fe bbe1 	b.w	3400868c <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34009eca:	481e      	ldr	r0, [pc, #120]	@ (34009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
34009ecc:	e7f9      	b.n	34009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009ece:	481e      	ldr	r0, [pc, #120]	@ (34009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
34009ed0:	e5dc      	b.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
34009ed2:	bf00      	nop
34009ed4:	56028000 	.word	0x56028000
34009ed8:	0700000c 	.word	0x0700000c
34009edc:	0700040c 	.word	0x0700040c
34009ee0:	0700080c 	.word	0x0700080c
34009ee4:	0700100c 	.word	0x0700100c
34009ee8:	0700082c 	.word	0x0700082c
34009eec:	07000c2c 	.word	0x07000c2c
34009ef0:	0700102c 	.word	0x0700102c
34009ef4:	0700142c 	.word	0x0700142c
34009ef8:	03d09000 	.word	0x03d09000
34009efc:	02dc6c00 	.word	0x02dc6c00
34009f00:	07001818 	.word	0x07001818
34009f04:	0300041c 	.word	0x0300041c
34009f08:	07000420 	.word	0x07000420
34009f0c:	07000820 	.word	0x07000820
34009f10:	07001020 	.word	0x07001020
34009f14:	07001820 	.word	0x07001820
34009f18:	07000030 	.word	0x07000030
34009f1c:	07000430 	.word	0x07000430
34009f20:	07000830 	.word	0x07000830
34009f24:	07001030 	.word	0x07001030
34009f28:	07001830 	.word	0x07001830
34009f2c:	07001c30 	.word	0x07001c30
34009f30:	07000034 	.word	0x07000034
34009f34:	07000434 	.word	0x07000434
34009f38:	03000c14 	.word	0x03000c14
34009f3c:	01001814 	.word	0x01001814
34009f40:	03000014 	.word	0x03000014
34009f44:	03000414 	.word	0x03000414
34009f48:	00bb8000 	.word	0x00bb8000

34009f4c <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34009f4c:	b538      	push	{r3, r4, r5, lr}
34009f4e:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
34009f50:	460d      	mov	r5, r1
34009f52:	b921      	cbnz	r1, 34009f5e <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
34009f54:	f240 1111 	movw	r1, #273	@ 0x111
34009f58:	4825      	ldr	r0, [pc, #148]	@ (34009ff0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009f5a:	f7f7 fa27 	bl	340013ac <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
34009f5e:	2c0c      	cmp	r4, #12
34009f60:	d904      	bls.n	34009f6c <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
34009f62:	f44f 7189 	mov.w	r1, #274	@ 0x112
34009f66:	4822      	ldr	r0, [pc, #136]	@ (34009ff0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009f68:	f7f7 fa20 	bl	340013ac <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34009f6c:	682b      	ldr	r3, [r5, #0]
34009f6e:	2b20      	cmp	r3, #32
34009f70:	d838      	bhi.n	34009fe4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x98>
34009f72:	2b03      	cmp	r3, #3
34009f74:	d82a      	bhi.n	34009fcc <HAL_RIF_RIMC_ConfigMasterAttributes+0x80>
34009f76:	3b01      	subs	r3, #1
34009f78:	2b01      	cmp	r3, #1
34009f7a:	d82d      	bhi.n	34009fd8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
34009f7c:	682b      	ldr	r3, [r5, #0]
34009f7e:	2b80      	cmp	r3, #128	@ 0x80
34009f80:	d001      	beq.n	34009f86 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3a>
34009f82:	2bff      	cmp	r3, #255	@ 0xff
34009f84:	d904      	bls.n	34009f90 <HAL_RIF_RIMC_ConfigMasterAttributes+0x44>
34009f86:	f44f 718a 	mov.w	r1, #276	@ 0x114
34009f8a:	4819      	ldr	r0, [pc, #100]	@ (34009ff0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009f8c:	f7f7 fa0e 	bl	340013ac <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
34009f90:	686b      	ldr	r3, [r5, #4]
34009f92:	2b03      	cmp	r3, #3
34009f94:	d904      	bls.n	34009fa0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x54>
34009f96:	f240 1115 	movw	r1, #277	@ 0x115
34009f9a:	4815      	ldr	r0, [pc, #84]	@ (34009ff0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009f9c:	f7f7 fa06 	bl	340013ac <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34009fa0:	682b      	ldr	r3, [r5, #0]
34009fa2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
34009fa6:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
34009faa:	00a0      	lsls	r0, r4, #2
34009fac:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
34009fb0:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
34009fb4:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34009fb8:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
34009fba:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
34009fbe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34009fc2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
34009fc6:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
34009fca:	bd38      	pop	{r3, r4, r5, pc}
34009fcc:	4a09      	ldr	r2, [pc, #36]	@ (34009ff4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa8>)
34009fce:	3b04      	subs	r3, #4
34009fd0:	fa22 f303 	lsr.w	r3, r2, r3
34009fd4:	07db      	lsls	r3, r3, #31
34009fd6:	d4d1      	bmi.n	34009f7c <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34009fd8:	f240 1113 	movw	r1, #275	@ 0x113
34009fdc:	4804      	ldr	r0, [pc, #16]	@ (34009ff0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009fde:	f7f7 f9e5 	bl	340013ac <assert_failed>
34009fe2:	e7cb      	b.n	34009f7c <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
34009fe4:	2b40      	cmp	r3, #64	@ 0x40
34009fe6:	d0c9      	beq.n	34009f7c <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
34009fe8:	2b80      	cmp	r3, #128	@ 0x80
34009fea:	d1f5      	bne.n	34009fd8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
34009fec:	e7c6      	b.n	34009f7c <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
34009fee:	bf00      	nop
34009ff0:	34010b03 	.word	0x34010b03
34009ff4:	10001011 	.word	0x10001011

34009ff8 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34009ff8:	4b38      	ldr	r3, [pc, #224]	@ (3400a0dc <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
34009ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
34009ffc:	4298      	cmp	r0, r3
34009ffe:	4604      	mov	r4, r0
3400a000:	460d      	mov	r5, r1
3400a002:	d85c      	bhi.n	3400a0be <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
3400a004:	3b1e      	subs	r3, #30
3400a006:	4298      	cmp	r0, r3
3400a008:	d83b      	bhi.n	3400a082 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
3400a00a:	4b35      	ldr	r3, [pc, #212]	@ (3400a0e0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
3400a00c:	4298      	cmp	r0, r3
3400a00e:	d84b      	bhi.n	3400a0a8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
3400a010:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
3400a014:	d23a      	bcs.n	3400a08c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
3400a016:	4b33      	ldr	r3, [pc, #204]	@ (3400a0e4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
3400a018:	4298      	cmp	r0, r3
3400a01a:	d840      	bhi.n	3400a09e <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
3400a01c:	1fc2      	subs	r2, r0, #7
3400a01e:	3b22      	subs	r3, #34	@ 0x22
3400a020:	429a      	cmp	r2, r3
3400a022:	d937      	bls.n	3400a094 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
3400a024:	2d03      	cmp	r5, #3
3400a026:	d904      	bls.n	3400a032 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
3400a028:	f44f 71ba 	mov.w	r1, #372	@ 0x174
3400a02c:	482e      	ldr	r0, [pc, #184]	@ (3400a0e8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3400a02e:	f7f7 f9bd 	bl	340013ac <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a032:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a034:	0f20      	lsrs	r0, r4, #28
3400a036:	0080      	lsls	r0, r0, #2
3400a038:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3400a03c:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3400a040:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a042:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a046:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a048:	9b01      	ldr	r3, [sp, #4]
3400a04a:	40a2      	lsls	r2, r4
3400a04c:	ea23 0302 	bic.w	r3, r3, r2
3400a050:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a052:	9901      	ldr	r1, [sp, #4]
3400a054:	f005 0301 	and.w	r3, r5, #1
3400a058:	40a3      	lsls	r3, r4
3400a05a:	430b      	orrs	r3, r1
3400a05c:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a05e:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a060:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a064:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a066:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a068:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a06a:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a06c:	9b01      	ldr	r3, [sp, #4]
3400a06e:	ea23 0302 	bic.w	r3, r3, r2
3400a072:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a074:	9b01      	ldr	r3, [sp, #4]
3400a076:	4319      	orrs	r1, r3
3400a078:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a07a:	9b01      	ldr	r3, [sp, #4]
3400a07c:	6303      	str	r3, [r0, #48]	@ 0x30
}
3400a07e:	b003      	add	sp, #12
3400a080:	bd30      	pop	{r4, r5, pc}
3400a082:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
3400a086:	4b19      	ldr	r3, [pc, #100]	@ (3400a0ec <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
3400a088:	3a02      	subs	r2, #2
3400a08a:	e01d      	b.n	3400a0c8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a08c:	4b18      	ldr	r3, [pc, #96]	@ (3400a0f0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
3400a08e:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
3400a092:	e019      	b.n	3400a0c8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a094:	f1a0 0308 	sub.w	r3, r0, #8
3400a098:	2b17      	cmp	r3, #23
3400a09a:	d9c3      	bls.n	3400a024 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a09c:	e017      	b.n	3400a0ce <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a09e:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
3400a0a2:	3b1c      	subs	r3, #28
3400a0a4:	2b02      	cmp	r3, #2
3400a0a6:	e7f8      	b.n	3400a09a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
3400a0a8:	4b12      	ldr	r3, [pc, #72]	@ (3400a0f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
3400a0aa:	4298      	cmp	r0, r3
3400a0ac:	d803      	bhi.n	3400a0b6 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
3400a0ae:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3400a0b2:	d2b7      	bcs.n	3400a024 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a0b4:	e00b      	b.n	3400a0ce <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a0b6:	4b10      	ldr	r3, [pc, #64]	@ (3400a0f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
3400a0b8:	4298      	cmp	r0, r3
3400a0ba:	d0b3      	beq.n	3400a024 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a0bc:	e007      	b.n	3400a0ce <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a0be:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
3400a0c2:	2a1e      	cmp	r2, #30
3400a0c4:	d803      	bhi.n	3400a0ce <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a0c6:	4b0d      	ldr	r3, [pc, #52]	@ (3400a0fc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
3400a0c8:	40d3      	lsrs	r3, r2
3400a0ca:	07db      	lsls	r3, r3, #31
3400a0cc:	d4aa      	bmi.n	3400a024 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3400a0ce:	f240 1173 	movw	r1, #371	@ 0x173
3400a0d2:	4805      	ldr	r0, [pc, #20]	@ (3400a0e8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3400a0d4:	f7f7 f96a 	bl	340013ac <assert_failed>
3400a0d8:	e7a4      	b.n	3400a024 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a0da:	bf00      	nop
3400a0dc:	4000001f 	.word	0x4000001f
3400a0e0:	2000001e 	.word	0x2000001e
3400a0e4:	1000001a 	.word	0x1000001a
3400a0e8:	34010b03 	.word	0x34010b03
3400a0ec:	2e838c0b 	.word	0x2e838c0b
3400a0f0:	77dff03b 	.word	0x77dff03b
3400a0f4:	30000008 	.word	0x30000008
3400a0f8:	3000000a 	.word	0x3000000a
3400a0fc:	49deef7f 	.word	0x49deef7f

3400a100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3400a100:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a102:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a104:	e852 3f00 	ldrex	r3, [r2]
3400a108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a10c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a110:	6802      	ldr	r2, [r0, #0]
3400a112:	2900      	cmp	r1, #0
3400a114:	d1f5      	bne.n	3400a102 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3400a116:	4c0f      	ldr	r4, [pc, #60]	@ (3400a154 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a118:	f102 0308 	add.w	r3, r2, #8
3400a11c:	e853 3f00 	ldrex	r3, [r3]
3400a120:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a122:	f102 0c08 	add.w	ip, r2, #8
3400a126:	e84c 3100 	strex	r1, r3, [ip]
3400a12a:	2900      	cmp	r1, #0
3400a12c:	d1f4      	bne.n	3400a118 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3400a12e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
3400a130:	2b01      	cmp	r3, #1
3400a132:	d107      	bne.n	3400a144 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a134:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3400a138:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a13c:	e842 3100 	strex	r1, r3, [r2]
3400a140:	2900      	cmp	r1, #0
3400a142:	d1f7      	bne.n	3400a134 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3400a144:	2320      	movs	r3, #32
3400a146:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a14a:	2300      	movs	r3, #0
3400a14c:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3400a14e:	6743      	str	r3, [r0, #116]	@ 0x74
}
3400a150:	bd10      	pop	{r4, pc}
3400a152:	bf00      	nop
3400a154:	effffffe 	.word	0xeffffffe

3400a158 <HAL_UART_MspInit>:
}
3400a158:	4770      	bx	lr
	...

3400a15c <UART_SetConfig>:
{
3400a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a15e:	6842      	ldr	r2, [r0, #4]
3400a160:	4bb0      	ldr	r3, [pc, #704]	@ (3400a424 <UART_SetConfig+0x2c8>)
{
3400a162:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a164:	429a      	cmp	r2, r3
3400a166:	d904      	bls.n	3400a172 <UART_SetConfig+0x16>
3400a168:	f640 414f 	movw	r1, #3151	@ 0xc4f
3400a16c:	48ae      	ldr	r0, [pc, #696]	@ (3400a428 <UART_SetConfig+0x2cc>)
3400a16e:	f7f7 f91d 	bl	340013ac <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
3400a172:	68a3      	ldr	r3, [r4, #8]
3400a174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a178:	d007      	beq.n	3400a18a <UART_SetConfig+0x2e>
3400a17a:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a17e:	d004      	beq.n	3400a18a <UART_SetConfig+0x2e>
3400a180:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
3400a184:	48a8      	ldr	r0, [pc, #672]	@ (3400a428 <UART_SetConfig+0x2cc>)
3400a186:	f7f7 f911 	bl	340013ac <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a18a:	6822      	ldr	r2, [r4, #0]
3400a18c:	49a7      	ldr	r1, [pc, #668]	@ (3400a42c <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a18e:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
3400a190:	428a      	cmp	r2, r1
3400a192:	d004      	beq.n	3400a19e <UART_SetConfig+0x42>
3400a194:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3400a198:	428a      	cmp	r2, r1
3400a19a:	f040 80af 	bne.w	3400a2fc <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3400a19e:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a1a2:	d004      	beq.n	3400a1ae <UART_SetConfig+0x52>
3400a1a4:	f640 4153 	movw	r1, #3155	@ 0xc53
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a1a8:	489f      	ldr	r0, [pc, #636]	@ (3400a428 <UART_SetConfig+0x2cc>)
3400a1aa:	f7f7 f8ff 	bl	340013ac <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
3400a1ae:	6923      	ldr	r3, [r4, #16]
3400a1b0:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
3400a1b4:	d007      	beq.n	3400a1c6 <UART_SetConfig+0x6a>
3400a1b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400a1ba:	d004      	beq.n	3400a1c6 <UART_SetConfig+0x6a>
3400a1bc:	f640 415b 	movw	r1, #3163	@ 0xc5b
3400a1c0:	4899      	ldr	r0, [pc, #612]	@ (3400a428 <UART_SetConfig+0x2cc>)
3400a1c2:	f7f7 f8f3 	bl	340013ac <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3400a1c6:	6963      	ldr	r3, [r4, #20]
3400a1c8:	f033 020c 	bics.w	r2, r3, #12
3400a1cc:	d100      	bne.n	3400a1d0 <UART_SetConfig+0x74>
3400a1ce:	b923      	cbnz	r3, 3400a1da <UART_SetConfig+0x7e>
3400a1d0:	f640 415c 	movw	r1, #3164	@ 0xc5c
3400a1d4:	4894      	ldr	r0, [pc, #592]	@ (3400a428 <UART_SetConfig+0x2cc>)
3400a1d6:	f7f7 f8e9 	bl	340013ac <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
3400a1da:	69a3      	ldr	r3, [r4, #24]
3400a1dc:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
3400a1e0:	d004      	beq.n	3400a1ec <UART_SetConfig+0x90>
3400a1e2:	f640 415d 	movw	r1, #3165	@ 0xc5d
3400a1e6:	4890      	ldr	r0, [pc, #576]	@ (3400a428 <UART_SetConfig+0x2cc>)
3400a1e8:	f7f7 f8e0 	bl	340013ac <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
3400a1ec:	69e3      	ldr	r3, [r4, #28]
3400a1ee:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a1f2:	d004      	beq.n	3400a1fe <UART_SetConfig+0xa2>
3400a1f4:	f640 415e 	movw	r1, #3166	@ 0xc5e
3400a1f8:	488b      	ldr	r0, [pc, #556]	@ (3400a428 <UART_SetConfig+0x2cc>)
3400a1fa:	f7f7 f8d7 	bl	340013ac <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
3400a1fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a200:	2b0b      	cmp	r3, #11
3400a202:	d904      	bls.n	3400a20e <UART_SetConfig+0xb2>
3400a204:	f640 415f 	movw	r1, #3167	@ 0xc5f
3400a208:	4887      	ldr	r0, [pc, #540]	@ (3400a428 <UART_SetConfig+0x2cc>)
3400a20a:	f7f7 f8cf 	bl	340013ac <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a20e:	6921      	ldr	r1, [r4, #16]
3400a210:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a212:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a214:	430a      	orrs	r2, r1
3400a216:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a218:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a21a:	69e5      	ldr	r5, [r4, #28]
3400a21c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a21e:	4984      	ldr	r1, [pc, #528]	@ (3400a430 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a220:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a222:	4001      	ands	r1, r0
3400a224:	430a      	orrs	r2, r1
3400a226:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3400a228:	685a      	ldr	r2, [r3, #4]
3400a22a:	68e1      	ldr	r1, [r4, #12]
3400a22c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
3400a230:	430a      	orrs	r2, r1
3400a232:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a234:	4a7d      	ldr	r2, [pc, #500]	@ (3400a42c <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3400a236:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a238:	4293      	cmp	r3, r2
3400a23a:	d005      	beq.n	3400a248 <UART_SetConfig+0xec>
3400a23c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a240:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
3400a242:	bf1c      	itt	ne
3400a244:	6a22      	ldrne	r2, [r4, #32]
3400a246:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3400a248:	689a      	ldr	r2, [r3, #8]
3400a24a:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
3400a24e:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
3400a252:	430a      	orrs	r2, r1
3400a254:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3400a256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400a258:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a25a:	f022 020f 	bic.w	r2, r2, #15
3400a25e:	430a      	orrs	r2, r1
3400a260:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a262:	4a74      	ldr	r2, [pc, #464]	@ (3400a434 <UART_SetConfig+0x2d8>)
3400a264:	4293      	cmp	r3, r2
3400a266:	d07a      	beq.n	3400a35e <UART_SetConfig+0x202>
3400a268:	4a73      	ldr	r2, [pc, #460]	@ (3400a438 <UART_SetConfig+0x2dc>)
3400a26a:	4293      	cmp	r3, r2
3400a26c:	f000 809c 	beq.w	3400a3a8 <UART_SetConfig+0x24c>
3400a270:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a274:	4293      	cmp	r3, r2
3400a276:	f000 809b 	beq.w	3400a3b0 <UART_SetConfig+0x254>
3400a27a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a27e:	4293      	cmp	r3, r2
3400a280:	f000 809a 	beq.w	3400a3b8 <UART_SetConfig+0x25c>
3400a284:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a288:	f000 809a 	beq.w	3400a3c0 <UART_SetConfig+0x264>
3400a28c:	4a6b      	ldr	r2, [pc, #428]	@ (3400a43c <UART_SetConfig+0x2e0>)
3400a28e:	4293      	cmp	r3, r2
3400a290:	f000 809a 	beq.w	3400a3c8 <UART_SetConfig+0x26c>
3400a294:	4a6a      	ldr	r2, [pc, #424]	@ (3400a440 <UART_SetConfig+0x2e4>)
3400a296:	4293      	cmp	r3, r2
3400a298:	f000 809a 	beq.w	3400a3d0 <UART_SetConfig+0x274>
3400a29c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a2a0:	4293      	cmp	r3, r2
3400a2a2:	f000 8099 	beq.w	3400a3d8 <UART_SetConfig+0x27c>
3400a2a6:	4a67      	ldr	r2, [pc, #412]	@ (3400a444 <UART_SetConfig+0x2e8>)
3400a2a8:	4293      	cmp	r3, r2
3400a2aa:	f000 8099 	beq.w	3400a3e0 <UART_SetConfig+0x284>
3400a2ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a2b2:	4293      	cmp	r3, r2
3400a2b4:	f000 8098 	beq.w	3400a3e8 <UART_SetConfig+0x28c>
3400a2b8:	4a5c      	ldr	r2, [pc, #368]	@ (3400a42c <UART_SetConfig+0x2d0>)
3400a2ba:	4293      	cmp	r3, r2
3400a2bc:	d02e      	beq.n	3400a31c <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a2be:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a2c2:	4293      	cmp	r3, r2
3400a2c4:	f04f 0000 	mov.w	r0, #0
3400a2c8:	f04f 0100 	mov.w	r1, #0
3400a2cc:	d14a      	bne.n	3400a364 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a2ce:	f7ff f97d 	bl	340095cc <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a2d2:	2800      	cmp	r0, #0
3400a2d4:	d041      	beq.n	3400a35a <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a2d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a2d8:	4a5b      	ldr	r2, [pc, #364]	@ (3400a448 <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2da:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a2dc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2e0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a2e4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2e8:	4299      	cmp	r1, r3
3400a2ea:	d91b      	bls.n	3400a324 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
3400a2ec:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
3400a2ee:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
3400a2f2:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
3400a2f4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
3400a2f6:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
3400a2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a2fc:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400a300:	d004      	beq.n	3400a30c <UART_SetConfig+0x1b0>
3400a302:	f640 4157 	movw	r1, #3159	@ 0xc57
3400a306:	4848      	ldr	r0, [pc, #288]	@ (3400a428 <UART_SetConfig+0x2cc>)
3400a308:	f7f7 f850 	bl	340013ac <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a30c:	6a23      	ldr	r3, [r4, #32]
3400a30e:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400a312:	f43f af4c 	beq.w	3400a1ae <UART_SetConfig+0x52>
3400a316:	f640 4158 	movw	r1, #3160	@ 0xc58
3400a31a:	e745      	b.n	3400a1a8 <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a31c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
3400a320:	2100      	movs	r1, #0
3400a322:	e7d4      	b.n	3400a2ce <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a324:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
3400a328:	d8e0      	bhi.n	3400a2ec <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a32a:	2300      	movs	r3, #0
3400a32c:	4619      	mov	r1, r3
3400a32e:	f7f6 fa37 	bl	340007a0 <__aeabi_uldivmod>
3400a332:	4606      	mov	r6, r0
3400a334:	460f      	mov	r7, r1
3400a336:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
3400a33a:	0868      	lsrs	r0, r5, #1
3400a33c:	1830      	adds	r0, r6, r0
3400a33e:	462a      	mov	r2, r5
3400a340:	f04f 0300 	mov.w	r3, #0
3400a344:	f147 0100 	adc.w	r1, r7, #0
3400a348:	f7f6 fa2a 	bl	340007a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3400a34c:	4b3f      	ldr	r3, [pc, #252]	@ (3400a44c <UART_SetConfig+0x2f0>)
3400a34e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
3400a352:	429a      	cmp	r2, r3
3400a354:	d8ca      	bhi.n	3400a2ec <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
3400a356:	6823      	ldr	r3, [r4, #0]
3400a358:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
3400a35a:	2000      	movs	r0, #0
3400a35c:	e7c7      	b.n	3400a2ee <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a35e:	2000      	movs	r0, #0
3400a360:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3400a364:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
3400a368:	d142      	bne.n	3400a3f0 <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a36a:	f7ff f92f 	bl	340095cc <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a36e:	2800      	cmp	r0, #0
3400a370:	d0f3      	beq.n	3400a35a <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a372:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a374:	4b34      	ldr	r3, [pc, #208]	@ (3400a448 <UART_SetConfig+0x2ec>)
3400a376:	6862      	ldr	r2, [r4, #4]
3400a378:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a37c:	fbb0 f0f3 	udiv	r0, r0, r3
3400a380:	0853      	lsrs	r3, r2, #1
3400a382:	eb03 0340 	add.w	r3, r3, r0, lsl #1
3400a386:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a38a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a38e:	f1a3 0110 	sub.w	r1, r3, #16
3400a392:	4291      	cmp	r1, r2
3400a394:	d8aa      	bhi.n	3400a2ec <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a396:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
3400a39a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a39c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3400a39e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
3400a3a2:	4313      	orrs	r3, r2
3400a3a4:	60cb      	str	r3, [r1, #12]
3400a3a6:	e7d8      	b.n	3400a35a <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a3a8:	2000      	movs	r0, #0
3400a3aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400a3ae:	e7d9      	b.n	3400a364 <UART_SetConfig+0x208>
3400a3b0:	2000      	movs	r0, #0
3400a3b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3400a3b6:	e7d5      	b.n	3400a364 <UART_SetConfig+0x208>
3400a3b8:	2000      	movs	r0, #0
3400a3ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400a3be:	e7d1      	b.n	3400a364 <UART_SetConfig+0x208>
3400a3c0:	2000      	movs	r0, #0
3400a3c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3400a3c6:	e7cd      	b.n	3400a364 <UART_SetConfig+0x208>
3400a3c8:	2000      	movs	r0, #0
3400a3ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3400a3ce:	e7c9      	b.n	3400a364 <UART_SetConfig+0x208>
3400a3d0:	2000      	movs	r0, #0
3400a3d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
3400a3d6:	e7c5      	b.n	3400a364 <UART_SetConfig+0x208>
3400a3d8:	2000      	movs	r0, #0
3400a3da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3400a3de:	e7c1      	b.n	3400a364 <UART_SetConfig+0x208>
3400a3e0:	2000      	movs	r0, #0
3400a3e2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
3400a3e6:	e7bd      	b.n	3400a364 <UART_SetConfig+0x208>
3400a3e8:	2000      	movs	r0, #0
3400a3ea:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3400a3ee:	e7b9      	b.n	3400a364 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a3f0:	f7ff f8ec 	bl	340095cc <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a3f4:	2800      	cmp	r0, #0
3400a3f6:	d0b0      	beq.n	3400a35a <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a3f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a3fa:	4b13      	ldr	r3, [pc, #76]	@ (3400a448 <UART_SetConfig+0x2ec>)
3400a3fc:	6862      	ldr	r2, [r4, #4]
3400a3fe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a402:	fbb0 f3f3 	udiv	r3, r0, r3
3400a406:	eb03 0352 	add.w	r3, r3, r2, lsr #1
3400a40a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a40e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a412:	f1a3 0110 	sub.w	r1, r3, #16
3400a416:	4291      	cmp	r1, r2
3400a418:	f63f af68 	bhi.w	3400a2ec <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
3400a41c:	6822      	ldr	r2, [r4, #0]
3400a41e:	60d3      	str	r3, [r2, #12]
3400a420:	e79b      	b.n	3400a35a <UART_SetConfig+0x1fe>
3400a422:	bf00      	nop
3400a424:	00bebc1f 	.word	0x00bebc1f
3400a428:	34010bab 	.word	0x34010bab
3400a42c:	56000c00 	.word	0x56000c00
3400a430:	cfff69f3 	.word	0xcfff69f3
3400a434:	52001000 	.word	0x52001000
3400a438:	50004400 	.word	0x50004400
3400a43c:	52001400 	.word	0x52001400
3400a440:	50007800 	.word	0x50007800
3400a444:	52001800 	.word	0x52001800
3400a448:	34011f98 	.word	0x34011f98
3400a44c:	000ffcff 	.word	0x000ffcff

3400a450 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a450:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
3400a452:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a454:	2bff      	cmp	r3, #255	@ 0xff
{
3400a456:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a458:	d904      	bls.n	3400a464 <UART_AdvFeatureConfig+0x14>
3400a45a:	f640 41e4 	movw	r1, #3300	@ 0xce4
3400a45e:	487e      	ldr	r0, [pc, #504]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a460:	f7f6 ffa4 	bl	340013ac <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3400a464:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a466:	0718      	lsls	r0, r3, #28
3400a468:	d50f      	bpl.n	3400a48a <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3400a46a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400a46c:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a470:	d004      	beq.n	3400a47c <UART_AdvFeatureConfig+0x2c>
3400a472:	f640 41e9 	movw	r1, #3305	@ 0xce9
3400a476:	4878      	ldr	r0, [pc, #480]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a478:	f7f6 ff98 	bl	340013ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3400a47c:	6822      	ldr	r2, [r4, #0]
3400a47e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400a480:	6853      	ldr	r3, [r2, #4]
3400a482:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3400a486:	430b      	orrs	r3, r1
3400a488:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3400a48a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a48c:	07d9      	lsls	r1, r3, #31
3400a48e:	d50f      	bpl.n	3400a4b0 <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3400a490:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a492:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
3400a496:	d004      	beq.n	3400a4a2 <UART_AdvFeatureConfig+0x52>
3400a498:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
3400a49c:	486e      	ldr	r0, [pc, #440]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a49e:	f7f6 ff85 	bl	340013ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3400a4a2:	6822      	ldr	r2, [r4, #0]
3400a4a4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400a4a6:	6853      	ldr	r3, [r2, #4]
3400a4a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3400a4ac:	430b      	orrs	r3, r1
3400a4ae:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3400a4b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a4b2:	079a      	lsls	r2, r3, #30
3400a4b4:	d50f      	bpl.n	3400a4d6 <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3400a4b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a4b8:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3400a4bc:	d004      	beq.n	3400a4c8 <UART_AdvFeatureConfig+0x78>
3400a4be:	f640 41f7 	movw	r1, #3319	@ 0xcf7
3400a4c2:	4865      	ldr	r0, [pc, #404]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a4c4:	f7f6 ff72 	bl	340013ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3400a4c8:	6822      	ldr	r2, [r4, #0]
3400a4ca:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3400a4cc:	6853      	ldr	r3, [r2, #4]
3400a4ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400a4d2:	430b      	orrs	r3, r1
3400a4d4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3400a4d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a4d8:	075b      	lsls	r3, r3, #29
3400a4da:	d50f      	bpl.n	3400a4fc <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3400a4dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400a4de:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
3400a4e2:	d004      	beq.n	3400a4ee <UART_AdvFeatureConfig+0x9e>
3400a4e4:	f640 41fe 	movw	r1, #3326	@ 0xcfe
3400a4e8:	485b      	ldr	r0, [pc, #364]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a4ea:	f7f6 ff5f 	bl	340013ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3400a4ee:	6822      	ldr	r2, [r4, #0]
3400a4f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400a4f2:	6853      	ldr	r3, [r2, #4]
3400a4f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
3400a4f8:	430b      	orrs	r3, r1
3400a4fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3400a4fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a4fe:	06d8      	lsls	r0, r3, #27
3400a500:	d50f      	bpl.n	3400a522 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3400a502:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a504:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a508:	d004      	beq.n	3400a514 <UART_AdvFeatureConfig+0xc4>
3400a50a:	f640 5105 	movw	r1, #3333	@ 0xd05
3400a50e:	4852      	ldr	r0, [pc, #328]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a510:	f7f6 ff4c 	bl	340013ac <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3400a514:	6822      	ldr	r2, [r4, #0]
3400a516:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400a518:	6893      	ldr	r3, [r2, #8]
3400a51a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400a51e:	430b      	orrs	r3, r1
3400a520:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3400a522:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a524:	0699      	lsls	r1, r3, #26
3400a526:	d50f      	bpl.n	3400a548 <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3400a528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400a52a:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a52e:	d004      	beq.n	3400a53a <UART_AdvFeatureConfig+0xea>
3400a530:	f640 510d 	movw	r1, #3341	@ 0xd0d
3400a534:	4848      	ldr	r0, [pc, #288]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a536:	f7f6 ff39 	bl	340013ac <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3400a53a:	6822      	ldr	r2, [r4, #0]
3400a53c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
3400a53e:	6893      	ldr	r3, [r2, #8]
3400a540:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
3400a544:	430b      	orrs	r3, r1
3400a546:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3400a548:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a54a:	065a      	lsls	r2, r3, #25
3400a54c:	d56f      	bpl.n	3400a62e <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3400a54e:	6823      	ldr	r3, [r4, #0]
3400a550:	4a42      	ldr	r2, [pc, #264]	@ (3400a65c <UART_AdvFeatureConfig+0x20c>)
3400a552:	4293      	cmp	r3, r2
3400a554:	d047      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a556:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a55a:	4293      	cmp	r3, r2
3400a55c:	d043      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a55e:	4a40      	ldr	r2, [pc, #256]	@ (3400a660 <UART_AdvFeatureConfig+0x210>)
3400a560:	4293      	cmp	r3, r2
3400a562:	d040      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a564:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a568:	4293      	cmp	r3, r2
3400a56a:	d03c      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a56c:	4a3d      	ldr	r2, [pc, #244]	@ (3400a664 <UART_AdvFeatureConfig+0x214>)
3400a56e:	4293      	cmp	r3, r2
3400a570:	d039      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a572:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a576:	4293      	cmp	r3, r2
3400a578:	d035      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a57a:	4a3b      	ldr	r2, [pc, #236]	@ (3400a668 <UART_AdvFeatureConfig+0x218>)
3400a57c:	4293      	cmp	r3, r2
3400a57e:	d032      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a580:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a584:	4293      	cmp	r3, r2
3400a586:	d02e      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a588:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a58c:	d02b      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a58e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a592:	4293      	cmp	r3, r2
3400a594:	d027      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a596:	4a35      	ldr	r2, [pc, #212]	@ (3400a66c <UART_AdvFeatureConfig+0x21c>)
3400a598:	4293      	cmp	r3, r2
3400a59a:	d024      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a59c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5a0:	4293      	cmp	r3, r2
3400a5a2:	d020      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a5a4:	4a32      	ldr	r2, [pc, #200]	@ (3400a670 <UART_AdvFeatureConfig+0x220>)
3400a5a6:	4293      	cmp	r3, r2
3400a5a8:	d01d      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a5aa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5ae:	4293      	cmp	r3, r2
3400a5b0:	d019      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a5b2:	4a30      	ldr	r2, [pc, #192]	@ (3400a674 <UART_AdvFeatureConfig+0x224>)
3400a5b4:	4293      	cmp	r3, r2
3400a5b6:	d016      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a5b8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5bc:	4293      	cmp	r3, r2
3400a5be:	d012      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a5c0:	4a2d      	ldr	r2, [pc, #180]	@ (3400a678 <UART_AdvFeatureConfig+0x228>)
3400a5c2:	4293      	cmp	r3, r2
3400a5c4:	d00f      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a5c6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5ca:	4293      	cmp	r3, r2
3400a5cc:	d00b      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a5ce:	4a2b      	ldr	r2, [pc, #172]	@ (3400a67c <UART_AdvFeatureConfig+0x22c>)
3400a5d0:	4293      	cmp	r3, r2
3400a5d2:	d008      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a5d4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5d8:	4293      	cmp	r3, r2
3400a5da:	d004      	beq.n	3400a5e6 <UART_AdvFeatureConfig+0x196>
3400a5dc:	f640 5115 	movw	r1, #3349	@ 0xd15
3400a5e0:	481d      	ldr	r0, [pc, #116]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a5e2:	f7f6 fee3 	bl	340013ac <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3400a5e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400a5e8:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
3400a5ec:	d004      	beq.n	3400a5f8 <UART_AdvFeatureConfig+0x1a8>
3400a5ee:	f640 5116 	movw	r1, #3350	@ 0xd16
3400a5f2:	4819      	ldr	r0, [pc, #100]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a5f4:	f7f6 feda 	bl	340013ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a5f8:	6821      	ldr	r1, [r4, #0]
3400a5fa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3400a5fc:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a5fe:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a602:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3400a606:	ea43 0302 	orr.w	r3, r3, r2
3400a60a:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a60c:	d10f      	bne.n	3400a62e <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3400a60e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400a610:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
3400a614:	d004      	beq.n	3400a620 <UART_AdvFeatureConfig+0x1d0>
3400a616:	f640 511b 	movw	r1, #3355	@ 0xd1b
3400a61a:	480f      	ldr	r0, [pc, #60]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a61c:	f7f6 fec6 	bl	340013ac <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3400a620:	6822      	ldr	r2, [r4, #0]
3400a622:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3400a624:	6853      	ldr	r3, [r2, #4]
3400a626:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
3400a62a:	430b      	orrs	r3, r1
3400a62c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3400a62e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a630:	061b      	lsls	r3, r3, #24
3400a632:	d50f      	bpl.n	3400a654 <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3400a634:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400a636:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400a63a:	d004      	beq.n	3400a646 <UART_AdvFeatureConfig+0x1f6>
3400a63c:	f640 5123 	movw	r1, #3363	@ 0xd23
3400a640:	4805      	ldr	r0, [pc, #20]	@ (3400a658 <UART_AdvFeatureConfig+0x208>)
3400a642:	f7f6 feb3 	bl	340013ac <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3400a646:	6822      	ldr	r2, [r4, #0]
3400a648:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400a64a:	6853      	ldr	r3, [r2, #4]
3400a64c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
3400a650:	430b      	orrs	r3, r1
3400a652:	6053      	str	r3, [r2, #4]
}
3400a654:	bd10      	pop	{r4, pc}
3400a656:	bf00      	nop
3400a658:	34010bab 	.word	0x34010bab
3400a65c:	52001000 	.word	0x52001000
3400a660:	50004400 	.word	0x50004400
3400a664:	50004800 	.word	0x50004800
3400a668:	50004c00 	.word	0x50004c00
3400a66c:	52001400 	.word	0x52001400
3400a670:	50007800 	.word	0x50007800
3400a674:	50007c00 	.word	0x50007c00
3400a678:	52001800 	.word	0x52001800
3400a67c:	52001c00 	.word	0x52001c00

3400a680 <UART_WaitOnFlagUntilTimeout>:
{
3400a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400a684:	4604      	mov	r4, r0
3400a686:	460d      	mov	r5, r1
3400a688:	4617      	mov	r7, r2
3400a68a:	4698      	mov	r8, r3
3400a68c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3400a690:	6822      	ldr	r2, [r4, #0]
3400a692:	69d3      	ldr	r3, [r2, #28]
3400a694:	ea35 0303 	bics.w	r3, r5, r3
3400a698:	bf0c      	ite	eq
3400a69a:	2301      	moveq	r3, #1
3400a69c:	2300      	movne	r3, #0
3400a69e:	42bb      	cmp	r3, r7
3400a6a0:	d001      	beq.n	3400a6a6 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
3400a6a2:	2000      	movs	r0, #0
3400a6a4:	e022      	b.n	3400a6ec <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
3400a6a6:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
3400a6aa:	d0f2      	beq.n	3400a692 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400a6ac:	f7f7 fea4 	bl	340023f8 <HAL_GetTick>
3400a6b0:	eba0 0008 	sub.w	r0, r0, r8
3400a6b4:	4548      	cmp	r0, r9
3400a6b6:	d829      	bhi.n	3400a70c <UART_WaitOnFlagUntilTimeout+0x8c>
3400a6b8:	f1b9 0f00 	cmp.w	r9, #0
3400a6bc:	d026      	beq.n	3400a70c <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3400a6be:	6821      	ldr	r1, [r4, #0]
3400a6c0:	680b      	ldr	r3, [r1, #0]
3400a6c2:	075a      	lsls	r2, r3, #29
3400a6c4:	d5e4      	bpl.n	3400a690 <UART_WaitOnFlagUntilTimeout+0x10>
3400a6c6:	2d80      	cmp	r5, #128	@ 0x80
3400a6c8:	d0e2      	beq.n	3400a690 <UART_WaitOnFlagUntilTimeout+0x10>
3400a6ca:	2d40      	cmp	r5, #64	@ 0x40
3400a6cc:	d0e0      	beq.n	3400a690 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3400a6ce:	69ce      	ldr	r6, [r1, #28]
3400a6d0:	f016 0608 	ands.w	r6, r6, #8
3400a6d4:	d00c      	beq.n	3400a6f0 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a6d6:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
3400a6d8:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a6da:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3400a6dc:	f7ff fd10 	bl	3400a100 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
3400a6e0:	2300      	movs	r3, #0
          return HAL_ERROR;
3400a6e2:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
3400a6e4:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
3400a6e8:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3400a6f0:	69cb      	ldr	r3, [r1, #28]
3400a6f2:	051b      	lsls	r3, r3, #20
3400a6f4:	d5cc      	bpl.n	3400a690 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a6f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
3400a6fa:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a6fc:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
3400a6fe:	f7ff fcff 	bl	3400a100 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a702:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
3400a704:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a708:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
3400a70c:	2003      	movs	r0, #3
3400a70e:	e7ed      	b.n	3400a6ec <UART_WaitOnFlagUntilTimeout+0x6c>

3400a710 <HAL_UART_Transmit>:
{
3400a710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400a714:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
3400a716:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
3400a71a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
3400a71c:	2b20      	cmp	r3, #32
{
3400a71e:	460d      	mov	r5, r1
3400a720:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
3400a722:	d148      	bne.n	3400a7b6 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
3400a724:	2900      	cmp	r1, #0
3400a726:	d048      	beq.n	3400a7ba <HAL_UART_Transmit+0xaa>
3400a728:	2a00      	cmp	r2, #0
3400a72a:	d046      	beq.n	3400a7ba <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a72c:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a72e:	f04f 0900 	mov.w	r9, #0
3400a732:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a736:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
3400a73a:	f7f7 fe5d 	bl	340023f8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a73e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
3400a740:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
3400a748:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
3400a74c:	4607      	mov	r7, r0
      pdata16bits = NULL;
3400a74e:	464e      	mov	r6, r9
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a750:	d103      	bne.n	3400a75a <HAL_UART_Transmit+0x4a>
3400a752:	6923      	ldr	r3, [r4, #16]
3400a754:	b90b      	cbnz	r3, 3400a75a <HAL_UART_Transmit+0x4a>
      pdata16bits = (const uint16_t *) pData;
3400a756:	462e      	mov	r6, r5
      pdata8bits  = NULL;
3400a758:	461d      	mov	r5, r3
    while (huart->TxXferCount > 0U)
3400a75a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a75e:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
3400a760:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a762:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
3400a766:	b942      	cbnz	r2, 3400a77a <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3400a768:	2140      	movs	r1, #64	@ 0x40
3400a76a:	4620      	mov	r0, r4
3400a76c:	f7ff ff88 	bl	3400a680 <UART_WaitOnFlagUntilTimeout>
3400a770:	2320      	movs	r3, #32
3400a772:	b948      	cbnz	r0, 3400a788 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
3400a774:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
3400a778:	e009      	b.n	3400a78e <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a77a:	2200      	movs	r2, #0
3400a77c:	2180      	movs	r1, #128	@ 0x80
3400a77e:	4620      	mov	r0, r4
3400a780:	f7ff ff7e 	bl	3400a680 <UART_WaitOnFlagUntilTimeout>
3400a784:	b130      	cbz	r0, 3400a794 <HAL_UART_Transmit+0x84>
        huart->gState = HAL_UART_STATE_READY;
3400a786:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
3400a788:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
3400a78a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
3400a78e:	b003      	add	sp, #12
3400a790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a794:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
3400a796:	b95d      	cbnz	r5, 3400a7b0 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a798:	f836 3b02 	ldrh.w	r3, [r6], #2
3400a79c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a7a0:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
3400a7a2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
3400a7a6:	3a01      	subs	r2, #1
3400a7a8:	b292      	uxth	r2, r2
3400a7aa:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
3400a7ae:	e7d4      	b.n	3400a75a <HAL_UART_Transmit+0x4a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a7b0:	f815 3b01 	ldrb.w	r3, [r5], #1
3400a7b4:	e7f4      	b.n	3400a7a0 <HAL_UART_Transmit+0x90>
    return HAL_BUSY;
3400a7b6:	2002      	movs	r0, #2
3400a7b8:	e7e9      	b.n	3400a78e <HAL_UART_Transmit+0x7e>
      return  HAL_ERROR;
3400a7ba:	2001      	movs	r0, #1
3400a7bc:	e7e7      	b.n	3400a78e <HAL_UART_Transmit+0x7e>

3400a7be <UART_CheckIdleState>:
{
3400a7be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a7c0:	2600      	movs	r6, #0
{
3400a7c2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a7c4:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
3400a7c8:	f7f7 fe16 	bl	340023f8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a7cc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
3400a7ce:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a7d0:	681b      	ldr	r3, [r3, #0]
3400a7d2:	071a      	lsls	r2, r3, #28
3400a7d4:	d51c      	bpl.n	3400a810 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a7d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a7da:	4632      	mov	r2, r6
3400a7dc:	9300      	str	r3, [sp, #0]
3400a7de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400a7e2:	4603      	mov	r3, r0
3400a7e4:	4620      	mov	r0, r4
3400a7e6:	f7ff ff4b 	bl	3400a680 <UART_WaitOnFlagUntilTimeout>
3400a7ea:	b188      	cbz	r0, 3400a810 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3400a7ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a7ee:	e852 3f00 	ldrex	r3, [r2]
3400a7f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a7f6:	e842 3100 	strex	r1, r3, [r2]
3400a7fa:	2900      	cmp	r1, #0
3400a7fc:	d1f6      	bne.n	3400a7ec <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
3400a7fe:	2320      	movs	r3, #32
3400a800:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
3400a804:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
3400a806:	2300      	movs	r3, #0
3400a808:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a80c:	b002      	add	sp, #8
3400a80e:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3400a810:	6823      	ldr	r3, [r4, #0]
3400a812:	681b      	ldr	r3, [r3, #0]
3400a814:	075b      	lsls	r3, r3, #29
3400a816:	d524      	bpl.n	3400a862 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a81c:	2200      	movs	r2, #0
3400a81e:	9300      	str	r3, [sp, #0]
3400a820:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400a824:	462b      	mov	r3, r5
3400a826:	4620      	mov	r0, r4
3400a828:	f7ff ff2a 	bl	3400a680 <UART_WaitOnFlagUntilTimeout>
3400a82c:	b1c8      	cbz	r0, 3400a862 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a82e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a830:	e852 3f00 	ldrex	r3, [r2]
3400a834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a838:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a83c:	6822      	ldr	r2, [r4, #0]
3400a83e:	2900      	cmp	r1, #0
3400a840:	d1f5      	bne.n	3400a82e <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a842:	f102 0308 	add.w	r3, r2, #8
3400a846:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3400a84a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a84e:	f102 0008 	add.w	r0, r2, #8
3400a852:	e840 3100 	strex	r1, r3, [r0]
3400a856:	2900      	cmp	r1, #0
3400a858:	d1f3      	bne.n	3400a842 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3400a85a:	2320      	movs	r3, #32
3400a85c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
3400a860:	e7d0      	b.n	3400a804 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
3400a862:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a864:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
3400a866:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3400a86a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a86e:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3400a870:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
3400a872:	e7c8      	b.n	3400a806 <UART_CheckIdleState+0x48>

3400a874 <HAL_UART_Init>:
{
3400a874:	b510      	push	{r4, lr}
  if (huart == NULL)
3400a876:	4604      	mov	r4, r0
3400a878:	2800      	cmp	r0, #0
3400a87a:	f000 80d0 	beq.w	3400aa1e <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a87e:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a880:	6803      	ldr	r3, [r0, #0]
3400a882:	4a68      	ldr	r2, [pc, #416]	@ (3400aa24 <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a884:	2900      	cmp	r1, #0
3400a886:	d07c      	beq.n	3400a982 <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a888:	4293      	cmp	r3, r2
3400a88a:	d04e      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a88c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a890:	4293      	cmp	r3, r2
3400a892:	d04a      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a894:	4a64      	ldr	r2, [pc, #400]	@ (3400aa28 <HAL_UART_Init+0x1b4>)
3400a896:	4293      	cmp	r3, r2
3400a898:	d047      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a89a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a89e:	4293      	cmp	r3, r2
3400a8a0:	d043      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8a2:	4a62      	ldr	r2, [pc, #392]	@ (3400aa2c <HAL_UART_Init+0x1b8>)
3400a8a4:	4293      	cmp	r3, r2
3400a8a6:	d040      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8a8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8ac:	4293      	cmp	r3, r2
3400a8ae:	d03c      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8b0:	4a5f      	ldr	r2, [pc, #380]	@ (3400aa30 <HAL_UART_Init+0x1bc>)
3400a8b2:	4293      	cmp	r3, r2
3400a8b4:	d039      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8b6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8ba:	4293      	cmp	r3, r2
3400a8bc:	d035      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8be:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a8c2:	d032      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a8c8:	4293      	cmp	r3, r2
3400a8ca:	d02e      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8cc:	4a59      	ldr	r2, [pc, #356]	@ (3400aa34 <HAL_UART_Init+0x1c0>)
3400a8ce:	4293      	cmp	r3, r2
3400a8d0:	d02b      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8d2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8d6:	4293      	cmp	r3, r2
3400a8d8:	d027      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8da:	4a57      	ldr	r2, [pc, #348]	@ (3400aa38 <HAL_UART_Init+0x1c4>)
3400a8dc:	4293      	cmp	r3, r2
3400a8de:	d024      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8e0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8e4:	4293      	cmp	r3, r2
3400a8e6:	d020      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8e8:	4a54      	ldr	r2, [pc, #336]	@ (3400aa3c <HAL_UART_Init+0x1c8>)
3400a8ea:	4293      	cmp	r3, r2
3400a8ec:	d01d      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8ee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8f2:	4293      	cmp	r3, r2
3400a8f4:	d019      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8f6:	4a52      	ldr	r2, [pc, #328]	@ (3400aa40 <HAL_UART_Init+0x1cc>)
3400a8f8:	4293      	cmp	r3, r2
3400a8fa:	d016      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a8fc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a900:	4293      	cmp	r3, r2
3400a902:	d012      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a904:	4a4f      	ldr	r2, [pc, #316]	@ (3400aa44 <HAL_UART_Init+0x1d0>)
3400a906:	4293      	cmp	r3, r2
3400a908:	d00f      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a90a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a90e:	4293      	cmp	r3, r2
3400a910:	d00b      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a912:	4a4d      	ldr	r2, [pc, #308]	@ (3400aa48 <HAL_UART_Init+0x1d4>)
3400a914:	4293      	cmp	r3, r2
3400a916:	d008      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a918:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a91c:	4293      	cmp	r3, r2
3400a91e:	d004      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a920:	f240 113f 	movw	r1, #319	@ 0x13f
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400a924:	4849      	ldr	r0, [pc, #292]	@ (3400aa4c <HAL_UART_Init+0x1d8>)
3400a926:	f7f6 fd41 	bl	340013ac <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3400a92a:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3400a92e:	b923      	cbnz	r3, 3400a93a <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
3400a930:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
3400a932:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3400a936:	f7ff fc0f 	bl	3400a158 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3400a93a:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
3400a93c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3400a93e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
3400a942:	6813      	ldr	r3, [r2, #0]
3400a944:	f023 0301 	bic.w	r3, r3, #1
3400a948:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3400a94a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a94c:	b113      	cbz	r3, 3400a954 <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
3400a94e:	4620      	mov	r0, r4
3400a950:	f7ff fd7e 	bl	3400a450 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
3400a954:	4620      	mov	r0, r4
3400a956:	f7ff fc01 	bl	3400a15c <UART_SetConfig>
3400a95a:	2801      	cmp	r0, #1
3400a95c:	d05f      	beq.n	3400aa1e <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400a95e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
3400a960:	4620      	mov	r0, r4
}
3400a962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400a966:	685a      	ldr	r2, [r3, #4]
3400a968:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3400a96c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3400a96e:	689a      	ldr	r2, [r3, #8]
3400a970:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3400a974:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3400a976:	681a      	ldr	r2, [r3, #0]
3400a978:	f042 0201 	orr.w	r2, r2, #1
3400a97c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
3400a97e:	f7ff bf1e 	b.w	3400a7be <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400a982:	4293      	cmp	r3, r2
3400a984:	d0d1      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a986:	4a32      	ldr	r2, [pc, #200]	@ (3400aa50 <HAL_UART_Init+0x1dc>)
3400a988:	4293      	cmp	r3, r2
3400a98a:	d0ce      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a98c:	4a26      	ldr	r2, [pc, #152]	@ (3400aa28 <HAL_UART_Init+0x1b4>)
3400a98e:	4293      	cmp	r3, r2
3400a990:	d0cb      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a992:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a996:	4293      	cmp	r3, r2
3400a998:	d0c7      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a99a:	4a24      	ldr	r2, [pc, #144]	@ (3400aa2c <HAL_UART_Init+0x1b8>)
3400a99c:	4293      	cmp	r3, r2
3400a99e:	d0c4      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9a0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9a4:	4293      	cmp	r3, r2
3400a9a6:	d0c0      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9a8:	4a21      	ldr	r2, [pc, #132]	@ (3400aa30 <HAL_UART_Init+0x1bc>)
3400a9aa:	4293      	cmp	r3, r2
3400a9ac:	d0bd      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9ae:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9b2:	4293      	cmp	r3, r2
3400a9b4:	d0b9      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9b6:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a9ba:	d0b6      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a9c0:	4293      	cmp	r3, r2
3400a9c2:	d0b2      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9c4:	4a1b      	ldr	r2, [pc, #108]	@ (3400aa34 <HAL_UART_Init+0x1c0>)
3400a9c6:	4293      	cmp	r3, r2
3400a9c8:	d0af      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9ca:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9ce:	4293      	cmp	r3, r2
3400a9d0:	d0ab      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9d2:	4a19      	ldr	r2, [pc, #100]	@ (3400aa38 <HAL_UART_Init+0x1c4>)
3400a9d4:	4293      	cmp	r3, r2
3400a9d6:	d0a8      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9d8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9dc:	4293      	cmp	r3, r2
3400a9de:	d0a4      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9e0:	4a16      	ldr	r2, [pc, #88]	@ (3400aa3c <HAL_UART_Init+0x1c8>)
3400a9e2:	4293      	cmp	r3, r2
3400a9e4:	d0a1      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9e6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9ea:	4293      	cmp	r3, r2
3400a9ec:	d09d      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9ee:	4a14      	ldr	r2, [pc, #80]	@ (3400aa40 <HAL_UART_Init+0x1cc>)
3400a9f0:	4293      	cmp	r3, r2
3400a9f2:	d09a      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9f4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9f8:	4293      	cmp	r3, r2
3400a9fa:	d096      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400a9fc:	4a11      	ldr	r2, [pc, #68]	@ (3400aa44 <HAL_UART_Init+0x1d0>)
3400a9fe:	4293      	cmp	r3, r2
3400aa00:	d093      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400aa02:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa06:	4293      	cmp	r3, r2
3400aa08:	d08f      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400aa0a:	4a0f      	ldr	r2, [pc, #60]	@ (3400aa48 <HAL_UART_Init+0x1d4>)
3400aa0c:	4293      	cmp	r3, r2
3400aa0e:	d08c      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400aa10:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400aa14:	4293      	cmp	r3, r2
3400aa16:	d088      	beq.n	3400a92a <HAL_UART_Init+0xb6>
3400aa18:	f44f 71a2 	mov.w	r1, #324	@ 0x144
3400aa1c:	e782      	b.n	3400a924 <HAL_UART_Init+0xb0>
}
3400aa1e:	2001      	movs	r0, #1
3400aa20:	bd10      	pop	{r4, pc}
3400aa22:	bf00      	nop
3400aa24:	52001000 	.word	0x52001000
3400aa28:	50004400 	.word	0x50004400
3400aa2c:	50004800 	.word	0x50004800
3400aa30:	50004c00 	.word	0x50004c00
3400aa34:	52001400 	.word	0x52001400
3400aa38:	50007800 	.word	0x50007800
3400aa3c:	50007c00 	.word	0x50007c00
3400aa40:	52001800 	.word	0x52001800
3400aa44:	52001c00 	.word	0x52001c00
3400aa48:	56000c00 	.word	0x56000c00
3400aa4c:	34010bab 	.word	0x34010bab
3400aa50:	42001000 	.word	0x42001000

3400aa54 <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400aa54:	6802      	ldr	r2, [r0, #0]
{
3400aa56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400aa5a:	6813      	ldr	r3, [r2, #0]
{
3400aa5c:	4606      	mov	r6, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400aa5e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400aa62:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400aa64:	6883      	ldr	r3, [r0, #8]
{
3400aa66:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400aa68:	b97b      	cbnz	r3, 3400aa8a <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400aa6a:	684b      	ldr	r3, [r1, #4]
3400aa6c:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400aa70:	d004      	beq.n	3400aa7c <XSPI_ConfigCmd+0x28>
3400aa72:	f640 41a4 	movw	r1, #3236	@ 0xca4
3400aa76:	4876      	ldr	r0, [pc, #472]	@ (3400ac50 <XSPI_ConfigCmd+0x1fc>)
3400aa78:	f7f6 fc98 	bl	340013ac <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3400aa7c:	6832      	ldr	r2, [r6, #0]
3400aa7e:	6861      	ldr	r1, [r4, #4]
3400aa80:	6813      	ldr	r3, [r2, #0]
3400aa82:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
3400aa86:	430b      	orrs	r3, r1
3400aa88:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400aa8a:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3400aa8c:	6831      	ldr	r1, [r6, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400aa8e:	2b02      	cmp	r3, #2
3400aa90:	d158      	bne.n	3400ab44 <XSPI_ConfigCmd+0xf0>
    ccr_reg = &(hxspi->Instance->WCCR);
3400aa92:	f501 72c0 	add.w	r2, r1, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
3400aa96:	f501 70c4 	add.w	r0, r1, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
3400aa9a:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
3400aa9e:	f501 73d0 	add.w	r3, r1, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3400aaa2:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
3400aaa4:	6017      	str	r7, [r2, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400aaa6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
3400aaa8:	b167      	cbz	r7, 3400aac4 <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3400aaaa:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3400aaac:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3400aaae:	6b67      	ldr	r7, [r4, #52]	@ 0x34
3400aab0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400aab2:	f8d2 c000 	ldr.w	ip, [r2]
3400aab6:	433b      	orrs	r3, r7
3400aab8:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3400aaba:	433b      	orrs	r3, r7
3400aabc:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
3400aac0:	433b      	orrs	r3, r7
3400aac2:	6013      	str	r3, [r2, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3400aac4:	6803      	ldr	r3, [r0, #0]
3400aac6:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3400aac8:	f023 031f 	bic.w	r3, r3, #31
3400aacc:	433b      	orrs	r3, r7
3400aace:	6003      	str	r3, [r0, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400aad0:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
3400aad4:	f1be 0f00 	cmp.w	lr, #0
3400aad8:	d00e      	beq.n	3400aaf8 <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400aada:	6823      	ldr	r3, [r4, #0]
3400aadc:	b913      	cbnz	r3, 3400aae4 <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3400aade:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400aae0:	3b01      	subs	r3, #1
3400aae2:	640b      	str	r3, [r1, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3400aae4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400aae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400aaea:	d13f      	bne.n	3400ab6c <XSPI_ConfigCmd+0x118>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400aaec:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400aaf0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400aaf4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400aaf8:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400aafa:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400aafe:	2b00      	cmp	r3, #0
3400ab00:	f000 8083 	beq.w	3400ac0a <XSPI_ConfigCmd+0x1b6>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ab04:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400ab08:	f1b9 0f00 	cmp.w	r9, #0
3400ab0c:	d053      	beq.n	3400abb6 <XSPI_ConfigCmd+0x162>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ab0e:	e9d4 0708 	ldrd	r0, r7, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ab12:	f1be 0f00 	cmp.w	lr, #0
3400ab16:	d032      	beq.n	3400ab7e <XSPI_ConfigCmd+0x12a>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ab18:	ea4e 0303 	orr.w	r3, lr, r3
3400ab1c:	ea43 0309 	orr.w	r3, r3, r9
3400ab20:	ea43 0308 	orr.w	r3, r3, r8
3400ab24:	ea43 030c 	orr.w	r3, r3, ip
3400ab28:	433b      	orrs	r3, r7
3400ab2a:	4303      	orrs	r3, r0
3400ab2c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400ab2e:	6816      	ldr	r6, [r2, #0]
3400ab30:	4303      	orrs	r3, r0
3400ab32:	4848      	ldr	r0, [pc, #288]	@ (3400ac54 <XSPI_ConfigCmd+0x200>)
3400ab34:	4030      	ands	r0, r6
3400ab36:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ab38:	6013      	str	r3, [r2, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3400ab3a:	68a3      	ldr	r3, [r4, #8]
3400ab3c:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3400ab3e:	69a3      	ldr	r3, [r4, #24]
3400ab40:	648b      	str	r3, [r1, #72]	@ 0x48
3400ab42:	e04c      	b.n	3400abde <XSPI_ConfigCmd+0x18a>
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3400ab44:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
3400ab46:	bf01      	itttt	eq
3400ab48:	f501 72a0 	addeq.w	r2, r1, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
3400ab4c:	f501 70a4 	addeq.w	r0, r1, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
3400ab50:	f501 75a8 	addeq.w	r5, r1, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
3400ab54:	f501 73b0 	addeq.w	r3, r1, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
3400ab58:	bf1f      	itttt	ne
3400ab5a:	f501 7280 	addne.w	r2, r1, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
3400ab5e:	f501 7084 	addne.w	r0, r1, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
3400ab62:	f501 7588 	addne.w	r5, r1, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
3400ab66:	f501 7390 	addne.w	r3, r1, #288	@ 0x120
3400ab6a:	e79a      	b.n	3400aaa2 <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3400ab6c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3400ab6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400ab72:	d1c1      	bne.n	3400aaf8 <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400ab74:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400ab78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3400ab7c:	e7ba      	b.n	3400aaf4 <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ab7e:	ea43 0309 	orr.w	r3, r3, r9
3400ab82:	f8d2 e000 	ldr.w	lr, [r2]
3400ab86:	ea43 0308 	orr.w	r3, r3, r8
3400ab8a:	ea43 030c 	orr.w	r3, r3, ip
3400ab8e:	433b      	orrs	r3, r7
3400ab90:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
3400ab94:	4303      	orrs	r3, r0
3400ab96:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
3400ab9a:	ea43 030e 	orr.w	r3, r3, lr
3400ab9e:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400aba0:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400aba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400aba6:	d1c8      	bne.n	3400ab3a <XSPI_ConfigCmd+0xe6>
3400aba8:	6963      	ldr	r3, [r4, #20]
3400abaa:	2b08      	cmp	r3, #8
3400abac:	d1c5      	bne.n	3400ab3a <XSPI_ConfigCmd+0xe6>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400abae:	6813      	ldr	r3, [r2, #0]
3400abb0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400abb4:	e7c0      	b.n	3400ab38 <XSPI_ConfigCmd+0xe4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400abb6:	6811      	ldr	r1, [r2, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400abb8:	f1be 0f00 	cmp.w	lr, #0
3400abbc:	d012      	beq.n	3400abe4 <XSPI_ConfigCmd+0x190>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400abbe:	ea4e 0303 	orr.w	r3, lr, r3
3400abc2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400abc4:	ea43 0308 	orr.w	r3, r3, r8
3400abc8:	ea43 030c 	orr.w	r3, r3, ip
3400abcc:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
3400abd0:	4303      	orrs	r3, r0
3400abd2:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400abd6:	430b      	orrs	r3, r1
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400abd8:	6013      	str	r3, [r2, #0]
      *ir_reg = pCmd->Instruction;
3400abda:	68a3      	ldr	r3, [r4, #8]
3400abdc:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
3400abde:	2000      	movs	r0, #0
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  return status;
}
3400abe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3400abe4:	ea43 0308 	orr.w	r3, r3, r8
3400abe8:	ea43 030c 	orr.w	r3, r3, ip
3400abec:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400abf0:	430b      	orrs	r3, r1
3400abf2:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400abf4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400abf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400abfa:	d1ee      	bne.n	3400abda <XSPI_ConfigCmd+0x186>
3400abfc:	6963      	ldr	r3, [r4, #20]
3400abfe:	2b08      	cmp	r3, #8
3400ac00:	d1eb      	bne.n	3400abda <XSPI_ConfigCmd+0x186>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ac02:	6813      	ldr	r3, [r2, #0]
3400ac04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400ac08:	e7e6      	b.n	3400abd8 <XSPI_ConfigCmd+0x184>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400ac0a:	f1b9 0f00 	cmp.w	r9, #0
3400ac0e:	d01b      	beq.n	3400ac48 <XSPI_ConfigCmd+0x1f4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ac10:	e9d4 6008 	ldrd	r6, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ac14:	f1be 0f00 	cmp.w	lr, #0
3400ac18:	d00d      	beq.n	3400ac36 <XSPI_ConfigCmd+0x1e2>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3400ac1a:	ea4e 0309 	orr.w	r3, lr, r9
3400ac1e:	6815      	ldr	r5, [r2, #0]
3400ac20:	4303      	orrs	r3, r0
3400ac22:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400ac24:	4333      	orrs	r3, r6
3400ac26:	4303      	orrs	r3, r0
3400ac28:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
3400ac2c:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
3400ac30:	4303      	orrs	r3, r0
3400ac32:	6013      	str	r3, [r2, #0]
3400ac34:	e783      	b.n	3400ab3e <XSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3400ac36:	6813      	ldr	r3, [r2, #0]
3400ac38:	ea40 0009 	orr.w	r0, r0, r9
3400ac3c:	4330      	orrs	r0, r6
3400ac3e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400ac42:	4318      	orrs	r0, r3
3400ac44:	6010      	str	r0, [r2, #0]
3400ac46:	e77a      	b.n	3400ab3e <XSPI_ConfigCmd+0xea>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400ac48:	2308      	movs	r3, #8
      status = HAL_ERROR;
3400ac4a:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400ac4c:	65f3      	str	r3, [r6, #92]	@ 0x5c
3400ac4e:	e7c7      	b.n	3400abe0 <XSPI_ConfigCmd+0x18c>
3400ac50:	34010be0 	.word	0x34010be0
3400ac54:	f0ffc0c0 	.word	0xf0ffc0c0

3400ac58 <XSPI_WaitFlagStateUntilTimeout>:
{
3400ac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400ac5c:	4604      	mov	r4, r0
3400ac5e:	460e      	mov	r6, r1
3400ac60:	4615      	mov	r5, r2
3400ac62:	461f      	mov	r7, r3
3400ac64:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3400ac68:	6822      	ldr	r2, [r4, #0]
3400ac6a:	6a13      	ldr	r3, [r2, #32]
3400ac6c:	4233      	tst	r3, r6
3400ac6e:	bf14      	ite	ne
3400ac70:	2301      	movne	r3, #1
3400ac72:	2300      	moveq	r3, #0
3400ac74:	42ab      	cmp	r3, r5
3400ac76:	d101      	bne.n	3400ac7c <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
3400ac78:	2000      	movs	r0, #0
3400ac7a:	e00e      	b.n	3400ac9a <XSPI_WaitFlagStateUntilTimeout+0x42>
    if (Timeout != HAL_MAX_DELAY)
3400ac7c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
3400ac80:	d0f3      	beq.n	3400ac6a <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400ac82:	f7f7 fbb9 	bl	340023f8 <HAL_GetTick>
3400ac86:	1bc0      	subs	r0, r0, r7
3400ac88:	4540      	cmp	r0, r8
3400ac8a:	d908      	bls.n	3400ac9e <XSPI_WaitFlagStateUntilTimeout+0x46>
        hxspi->State     = HAL_XSPI_STATE_READY;
3400ac8c:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400ac8e:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
3400ac90:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400ac92:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3400ac94:	f043 0301 	orr.w	r3, r3, #1
3400ac98:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
3400ac9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400ac9e:	f1b8 0f00 	cmp.w	r8, #0
3400aca2:	d1e1      	bne.n	3400ac68 <XSPI_WaitFlagStateUntilTimeout+0x10>
3400aca4:	e7f2      	b.n	3400ac8c <XSPI_WaitFlagStateUntilTimeout+0x34>

3400aca6 <HAL_XSPI_MspInit>:
}
3400aca6:	4770      	bx	lr

3400aca8 <HAL_XSPI_Init>:
{
3400aca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400acaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3400acac:	f7f7 fba4 	bl	340023f8 <HAL_GetTick>
3400acb0:	4606      	mov	r6, r0
  if (hxspi == NULL)
3400acb2:	2c00      	cmp	r4, #0
3400acb4:	f000 812a 	beq.w	3400af0c <HAL_XSPI_Init+0x264>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3400acb8:	68a3      	ldr	r3, [r4, #8]
3400acba:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3400acbe:	d004      	beq.n	3400acca <HAL_XSPI_Init+0x22>
3400acc0:	f240 1161 	movw	r1, #353	@ 0x161
3400acc4:	4892      	ldr	r0, [pc, #584]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400acc6:	f7f6 fb71 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3400acca:	68e3      	ldr	r3, [r4, #12]
3400accc:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
3400acd0:	d009      	beq.n	3400ace6 <HAL_XSPI_Init+0x3e>
3400acd2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3400acd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400acda:	d004      	beq.n	3400ace6 <HAL_XSPI_Init+0x3e>
3400acdc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400ace0:	488b      	ldr	r0, [pc, #556]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ace2:	f7f6 fb63 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3400ace6:	6923      	ldr	r3, [r4, #16]
3400ace8:	2b1f      	cmp	r3, #31
3400acea:	d904      	bls.n	3400acf6 <HAL_XSPI_Init+0x4e>
3400acec:	f240 1163 	movw	r1, #355	@ 0x163
3400acf0:	4887      	ldr	r0, [pc, #540]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400acf2:	f7f6 fb5b 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3400acf6:	6963      	ldr	r3, [r4, #20]
3400acf8:	3b01      	subs	r3, #1
3400acfa:	2b3f      	cmp	r3, #63	@ 0x3f
3400acfc:	d904      	bls.n	3400ad08 <HAL_XSPI_Init+0x60>
3400acfe:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400ad02:	4883      	ldr	r0, [pc, #524]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ad04:	f7f6 fb52 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
3400ad08:	69a3      	ldr	r3, [r4, #24]
3400ad0a:	f033 0302 	bics.w	r3, r3, #2
3400ad0e:	d004      	beq.n	3400ad1a <HAL_XSPI_Init+0x72>
3400ad10:	f240 1165 	movw	r1, #357	@ 0x165
3400ad14:	487e      	ldr	r0, [pc, #504]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ad16:	f7f6 fb49 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3400ad1a:	69e3      	ldr	r3, [r4, #28]
3400ad1c:	2b01      	cmp	r3, #1
3400ad1e:	d904      	bls.n	3400ad2a <HAL_XSPI_Init+0x82>
3400ad20:	f44f 71b3 	mov.w	r1, #358	@ 0x166
3400ad24:	487a      	ldr	r0, [pc, #488]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ad26:	f7f6 fb41 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3400ad2a:	6a23      	ldr	r3, [r4, #32]
3400ad2c:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
3400ad30:	d00c      	beq.n	3400ad4c <HAL_XSPI_Init+0xa4>
3400ad32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400ad36:	d009      	beq.n	3400ad4c <HAL_XSPI_Init+0xa4>
3400ad38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400ad3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400ad40:	d004      	beq.n	3400ad4c <HAL_XSPI_Init+0xa4>
3400ad42:	f240 1167 	movw	r1, #359	@ 0x167
3400ad46:	4872      	ldr	r0, [pc, #456]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ad48:	f7f6 fb30 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
3400ad4c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400ad4e:	2bff      	cmp	r3, #255	@ 0xff
3400ad50:	d904      	bls.n	3400ad5c <HAL_XSPI_Init+0xb4>
3400ad52:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3400ad56:	486e      	ldr	r0, [pc, #440]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ad58:	f7f6 fb28 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
3400ad5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400ad5e:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
3400ad62:	d004      	beq.n	3400ad6e <HAL_XSPI_Init+0xc6>
3400ad64:	f240 1169 	movw	r1, #361	@ 0x169
3400ad68:	4869      	ldr	r0, [pc, #420]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ad6a:	f7f6 fb1f 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
3400ad6e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ad70:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
3400ad74:	d004      	beq.n	3400ad80 <HAL_XSPI_Init+0xd8>
3400ad76:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400ad7a:	4865      	ldr	r0, [pc, #404]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ad7c:	f7f6 fb16 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
3400ad80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400ad82:	2b1f      	cmp	r3, #31
3400ad84:	d904      	bls.n	3400ad90 <HAL_XSPI_Init+0xe8>
3400ad86:	f240 116b 	movw	r1, #363	@ 0x16b
3400ad8a:	4861      	ldr	r0, [pc, #388]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ad8c:	f7f6 fb0e 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
3400ad90:	6863      	ldr	r3, [r4, #4]
3400ad92:	3b01      	subs	r3, #1
3400ad94:	2b3f      	cmp	r3, #63	@ 0x3f
3400ad96:	d904      	bls.n	3400ada2 <HAL_XSPI_Init+0xfa>
3400ad98:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3400ad9c:	485c      	ldr	r0, [pc, #368]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400ad9e:	f7f6 fb05 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3400ada2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400ada4:	2bff      	cmp	r3, #255	@ 0xff
3400ada6:	d904      	bls.n	3400adb2 <HAL_XSPI_Init+0x10a>
3400ada8:	f240 116d 	movw	r1, #365	@ 0x16d
3400adac:	4858      	ldr	r0, [pc, #352]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400adae:	f7f6 fafd 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3400adb2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400adb4:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3400adb8:	d004      	beq.n	3400adc4 <HAL_XSPI_Init+0x11c>
3400adba:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3400adbe:	4854      	ldr	r0, [pc, #336]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400adc0:	f7f6 faf4 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
3400adc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400adc6:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3400adca:	d004      	beq.n	3400add6 <HAL_XSPI_Init+0x12e>
3400adcc:	f240 116f 	movw	r1, #367	@ 0x16f
3400add0:	484f      	ldr	r0, [pc, #316]	@ (3400af10 <HAL_XSPI_Init+0x268>)
3400add2:	f7f6 faeb 	bl	340013ac <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400add6:	2300      	movs	r3, #0
3400add8:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3400adda:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3400addc:	2f00      	cmp	r7, #0
3400adde:	f040 8087 	bne.w	3400aef0 <HAL_XSPI_Init+0x248>
      HAL_XSPI_MspInit(hxspi);
3400ade2:	4620      	mov	r0, r4
3400ade4:	f7ff ff5f 	bl	3400aca6 <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
3400ade8:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3400adec:	69e3      	ldr	r3, [r4, #28]
3400adee:	68e5      	ldr	r5, [r4, #12]
3400adf0:	6821      	ldr	r1, [r4, #0]
3400adf2:	431d      	orrs	r5, r3
3400adf4:	6923      	ldr	r3, [r4, #16]
3400adf6:	6888      	ldr	r0, [r1, #8]
3400adf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3400adfc:	4b45      	ldr	r3, [pc, #276]	@ (3400af14 <HAL_XSPI_Init+0x26c>)
  hxspi->Timeout = Timeout;
3400adfe:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
3400ae00:	4003      	ands	r3, r0
3400ae02:	431d      	orrs	r5, r3
3400ae04:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400ae06:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
3400ae08:	3b01      	subs	r3, #1
3400ae0a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3400ae0e:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400ae10:	68cb      	ldr	r3, [r1, #12]
3400ae12:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3400ae16:	4303      	orrs	r3, r0
3400ae18:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3400ae1a:	690b      	ldr	r3, [r1, #16]
3400ae1c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3400ae1e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3400ae22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400ae26:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3400ae28:	690b      	ldr	r3, [r1, #16]
3400ae2a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3400ae2c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400ae30:	4303      	orrs	r3, r0
3400ae32:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400ae34:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400ae36:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400ae38:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400ae3a:	680b      	ldr	r3, [r1, #0]
3400ae3c:	3801      	subs	r0, #1
3400ae3e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400ae42:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
3400ae46:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400ae48:	4620      	mov	r0, r4
3400ae4a:	9200      	str	r2, [sp, #0]
3400ae4c:	4633      	mov	r3, r6
3400ae4e:	463a      	mov	r2, r7
3400ae50:	2120      	movs	r1, #32
3400ae52:	f7ff ff01 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400ae56:	2800      	cmp	r0, #0
3400ae58:	d156      	bne.n	3400af08 <HAL_XSPI_Init+0x260>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400ae5a:	6823      	ldr	r3, [r4, #0]
3400ae5c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400ae5e:	68da      	ldr	r2, [r3, #12]
3400ae60:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
3400ae64:	430a      	orrs	r2, r1
3400ae66:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3400ae68:	4a2b      	ldr	r2, [pc, #172]	@ (3400af18 <HAL_XSPI_Init+0x270>)
3400ae6a:	4293      	cmp	r3, r2
3400ae6c:	d042      	beq.n	3400aef4 <HAL_XSPI_Init+0x24c>
3400ae6e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ae72:	4293      	cmp	r3, r2
3400ae74:	d03e      	beq.n	3400aef4 <HAL_XSPI_Init+0x24c>
3400ae76:	4a29      	ldr	r2, [pc, #164]	@ (3400af1c <HAL_XSPI_Init+0x274>)
3400ae78:	4293      	cmp	r3, r2
3400ae7a:	d03b      	beq.n	3400aef4 <HAL_XSPI_Init+0x24c>
3400ae7c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ae80:	4293      	cmp	r3, r2
3400ae82:	d037      	beq.n	3400aef4 <HAL_XSPI_Init+0x24c>
3400ae84:	4a26      	ldr	r2, [pc, #152]	@ (3400af20 <HAL_XSPI_Init+0x278>)
3400ae86:	4293      	cmp	r3, r2
3400ae88:	d034      	beq.n	3400aef4 <HAL_XSPI_Init+0x24c>
3400ae8a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ae8e:	4293      	cmp	r3, r2
3400ae90:	d030      	beq.n	3400aef4 <HAL_XSPI_Init+0x24c>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3400ae92:	6823      	ldr	r3, [r4, #0]
3400ae94:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
3400ae96:	6819      	ldr	r1, [r3, #0]
3400ae98:	68a2      	ldr	r2, [r4, #8]
3400ae9a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400ae9e:	4302      	orrs	r2, r0
3400aea0:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3400aea4:	430a      	orrs	r2, r1
3400aea6:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3400aea8:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
3400aeac:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
3400aeb0:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
3400aeb4:	4302      	orrs	r2, r0
3400aeb6:	430a      	orrs	r2, r1
3400aeb8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3400aebc:	681a      	ldr	r2, [r3, #0]
3400aebe:	f042 0201 	orr.w	r2, r2, #1
3400aec2:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3400aec4:	69a2      	ldr	r2, [r4, #24]
3400aec6:	2a02      	cmp	r2, #2
3400aec8:	d103      	bne.n	3400aed2 <HAL_XSPI_Init+0x22a>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3400aeca:	689a      	ldr	r2, [r3, #8]
3400aecc:	f042 0202 	orr.w	r2, r2, #2
3400aed0:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3400aed2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400aed4:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3400aed8:	bf02      	ittt	eq
3400aeda:	689a      	ldreq	r2, [r3, #8]
3400aedc:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
3400aee0:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400aee2:	68e3      	ldr	r3, [r4, #12]
3400aee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3400aee8:	bf0c      	ite	eq
3400aeea:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3400aeec:	2302      	movne	r3, #2
3400aeee:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
3400aef0:	2000      	movs	r0, #0
3400aef2:	e009      	b.n	3400af08 <HAL_XSPI_Init+0x260>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400aef4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3400aef6:	2200      	movs	r2, #0
3400aef8:	9300      	str	r3, [sp, #0]
3400aefa:	2120      	movs	r1, #32
3400aefc:	4633      	mov	r3, r6
3400aefe:	4620      	mov	r0, r4
3400af00:	f7ff feaa 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
3400af04:	2800      	cmp	r0, #0
3400af06:	d0c4      	beq.n	3400ae92 <HAL_XSPI_Init+0x1ea>
}
3400af08:	b003      	add	sp, #12
3400af0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3400af0c:	2001      	movs	r0, #1
3400af0e:	e7fb      	b.n	3400af08 <HAL_XSPI_Init+0x260>
3400af10:	34010be0 	.word	0x34010be0
3400af14:	f8e0c0fc 	.word	0xf8e0c0fc
3400af18:	58025000 	.word	0x58025000
3400af1c:	5802a000 	.word	0x5802a000
3400af20:	5802d000 	.word	0x5802d000

3400af24 <HAL_XSPI_Command>:
{
3400af24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400af26:	460c      	mov	r4, r1
3400af28:	4605      	mov	r5, r0
3400af2a:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400af2c:	f7f7 fa64 	bl	340023f8 <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400af30:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400af32:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400af34:	2b03      	cmp	r3, #3
3400af36:	d904      	bls.n	3400af42 <HAL_XSPI_Command+0x1e>
3400af38:	f240 313e 	movw	r1, #830	@ 0x33e
3400af3c:	4884      	ldr	r0, [pc, #528]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400af3e:	f7f6 fa35 	bl	340013ac <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400af42:	68ab      	ldr	r3, [r5, #8]
3400af44:	b943      	cbnz	r3, 3400af58 <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400af46:	6863      	ldr	r3, [r4, #4]
3400af48:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400af4c:	d004      	beq.n	3400af58 <HAL_XSPI_Command+0x34>
3400af4e:	f240 3141 	movw	r1, #833	@ 0x341
3400af52:	487f      	ldr	r0, [pc, #508]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400af54:	f7f6 fa2a 	bl	340013ac <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3400af58:	68e3      	ldr	r3, [r4, #12]
3400af5a:	2b04      	cmp	r3, #4
3400af5c:	d904      	bls.n	3400af68 <HAL_XSPI_Command+0x44>
3400af5e:	f44f 7151 	mov.w	r1, #836	@ 0x344
3400af62:	487b      	ldr	r0, [pc, #492]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400af64:	f7f6 fa22 	bl	340013ac <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400af68:	68e3      	ldr	r3, [r4, #12]
3400af6a:	b18b      	cbz	r3, 3400af90 <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
3400af6c:	6923      	ldr	r3, [r4, #16]
3400af6e:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400af72:	d004      	beq.n	3400af7e <HAL_XSPI_Command+0x5a>
3400af74:	f240 3147 	movw	r1, #839	@ 0x347
3400af78:	4875      	ldr	r0, [pc, #468]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400af7a:	f7f6 fa17 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3400af7e:	6963      	ldr	r3, [r4, #20]
3400af80:	f033 0308 	bics.w	r3, r3, #8
3400af84:	d004      	beq.n	3400af90 <HAL_XSPI_Command+0x6c>
3400af86:	f44f 7152 	mov.w	r1, #840	@ 0x348
3400af8a:	4871      	ldr	r0, [pc, #452]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400af8c:	f7f6 fa0e 	bl	340013ac <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400af90:	69e3      	ldr	r3, [r4, #28]
3400af92:	b303      	cbz	r3, 3400afd6 <HAL_XSPI_Command+0xb2>
3400af94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3400af98:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3400af9c:	d10d      	bne.n	3400afba <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400af9e:	6a23      	ldr	r3, [r4, #32]
3400afa0:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400afa4:	d12c      	bne.n	3400b000 <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3400afa6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400afa8:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400afac:	d013      	beq.n	3400afd6 <HAL_XSPI_Command+0xb2>
3400afae:	f240 314f 	movw	r1, #847	@ 0x34f
3400afb2:	4867      	ldr	r0, [pc, #412]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400afb4:	f7f6 f9fa 	bl	340013ac <assert_failed>
3400afb8:	e00d      	b.n	3400afd6 <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400afba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400afbe:	d0ee      	beq.n	3400af9e <HAL_XSPI_Command+0x7a>
3400afc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400afc4:	d0eb      	beq.n	3400af9e <HAL_XSPI_Command+0x7a>
3400afc6:	f240 314b 	movw	r1, #843	@ 0x34b
3400afca:	4861      	ldr	r0, [pc, #388]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400afcc:	f7f6 f9ee 	bl	340013ac <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400afd0:	69e3      	ldr	r3, [r4, #28]
3400afd2:	2b00      	cmp	r3, #0
3400afd4:	d1e3      	bne.n	3400af9e <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400afd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400afd8:	b333      	cbz	r3, 3400b028 <HAL_XSPI_Command+0x104>
3400afda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3400afde:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3400afe2:	d113      	bne.n	3400b00c <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400afe4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400afe6:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3400afea:	d13d      	bne.n	3400b068 <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3400afec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400afee:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400aff2:	d019      	beq.n	3400b028 <HAL_XSPI_Command+0x104>
3400aff4:	f240 3156 	movw	r1, #854	@ 0x356
3400aff8:	4855      	ldr	r0, [pc, #340]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400affa:	f7f6 f9d7 	bl	340013ac <assert_failed>
3400affe:	e013      	b.n	3400b028 <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400b000:	f240 314e 	movw	r1, #846	@ 0x34e
3400b004:	4852      	ldr	r0, [pc, #328]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400b006:	f7f6 f9d1 	bl	340013ac <assert_failed>
3400b00a:	e7cc      	b.n	3400afa6 <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400b00c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400b010:	d0e8      	beq.n	3400afe4 <HAL_XSPI_Command+0xc0>
3400b012:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400b016:	d0e5      	beq.n	3400afe4 <HAL_XSPI_Command+0xc0>
3400b018:	f240 3152 	movw	r1, #850	@ 0x352
3400b01c:	484c      	ldr	r0, [pc, #304]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400b01e:	f7f6 f9c5 	bl	340013ac <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400b022:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400b024:	2b00      	cmp	r3, #0
3400b026:	d1dd      	bne.n	3400afe4 <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400b028:	68eb      	ldr	r3, [r5, #12]
3400b02a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400b02c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400b030:	d120      	bne.n	3400b074 <HAL_XSPI_Command+0x150>
3400b032:	b389      	cbz	r1, 3400b098 <HAL_XSPI_Command+0x174>
3400b034:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400b038:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
3400b03c:	d124      	bne.n	3400b088 <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b03e:	6823      	ldr	r3, [r4, #0]
3400b040:	2b00      	cmp	r3, #0
3400b042:	d03d      	beq.n	3400b0c0 <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3400b044:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400b046:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
3400b04a:	d004      	beq.n	3400b056 <HAL_XSPI_Command+0x132>
3400b04c:	f240 3161 	movw	r1, #865	@ 0x361
3400b050:	483f      	ldr	r0, [pc, #252]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400b052:	f7f6 f9ab 	bl	340013ac <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3400b056:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b058:	2b1f      	cmp	r3, #31
3400b05a:	d91d      	bls.n	3400b098 <HAL_XSPI_Command+0x174>
3400b05c:	f240 3162 	movw	r1, #866	@ 0x362
3400b060:	483b      	ldr	r0, [pc, #236]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400b062:	f7f6 f9a3 	bl	340013ac <assert_failed>
3400b066:	e017      	b.n	3400b098 <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400b068:	f240 3155 	movw	r1, #853	@ 0x355
3400b06c:	4838      	ldr	r0, [pc, #224]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400b06e:	f7f6 f99d 	bl	340013ac <assert_failed>
3400b072:	e7bb      	b.n	3400afec <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400b074:	b181      	cbz	r1, 3400b098 <HAL_XSPI_Command+0x174>
3400b076:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
3400b07a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400b07e:	d0de      	beq.n	3400b03e <HAL_XSPI_Command+0x11a>
3400b080:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
3400b084:	d1d6      	bne.n	3400b034 <HAL_XSPI_Command+0x110>
3400b086:	e7da      	b.n	3400b03e <HAL_XSPI_Command+0x11a>
3400b088:	f240 3159 	movw	r1, #857	@ 0x359
3400b08c:	4830      	ldr	r0, [pc, #192]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400b08e:	f7f6 f98d 	bl	340013ac <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400b092:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b094:	2b00      	cmp	r3, #0
3400b096:	d1d2      	bne.n	3400b03e <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3400b098:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400b09a:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3400b09e:	d004      	beq.n	3400b0aa <HAL_XSPI_Command+0x186>
3400b0a0:	f240 3165 	movw	r1, #869	@ 0x365
3400b0a4:	482a      	ldr	r0, [pc, #168]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400b0a6:	f7f6 f981 	bl	340013ac <assert_failed>
  state = hxspi->State;
3400b0aa:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b0ac:	2b02      	cmp	r3, #2
3400b0ae:	d110      	bne.n	3400b0d2 <HAL_XSPI_Command+0x1ae>
3400b0b0:	68eb      	ldr	r3, [r5, #12]
3400b0b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400b0b6:	d112      	bne.n	3400b0de <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b0b8:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b0ba:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b0bc:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b0be:	e028      	b.n	3400b112 <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3400b0c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400b0c2:	2b00      	cmp	r3, #0
3400b0c4:	d1be      	bne.n	3400b044 <HAL_XSPI_Command+0x120>
3400b0c6:	f240 315f 	movw	r1, #863	@ 0x35f
3400b0ca:	4821      	ldr	r0, [pc, #132]	@ (3400b150 <HAL_XSPI_Command+0x22c>)
3400b0cc:	f7f6 f96e 	bl	340013ac <assert_failed>
3400b0d0:	e7b8      	b.n	3400b044 <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b0d2:	2b14      	cmp	r3, #20
3400b0d4:	d11f      	bne.n	3400b116 <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3400b0d6:	6823      	ldr	r3, [r4, #0]
3400b0d8:	3b02      	subs	r3, #2
3400b0da:	2b01      	cmp	r3, #1
3400b0dc:	d8ec      	bhi.n	3400b0b8 <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b0de:	4633      	mov	r3, r6
3400b0e0:	2200      	movs	r2, #0
3400b0e2:	2120      	movs	r1, #32
3400b0e4:	4628      	mov	r0, r5
3400b0e6:	9700      	str	r7, [sp, #0]
3400b0e8:	f7ff fdb6 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b0ec:	bb70      	cbnz	r0, 3400b14c <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400b0ee:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
3400b0f0:	4621      	mov	r1, r4
3400b0f2:	4628      	mov	r0, r5
3400b0f4:	f7ff fcae 	bl	3400aa54 <XSPI_ConfigCmd>
      if (status == HAL_OK)
3400b0f8:	b958      	cbnz	r0, 3400b112 <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3400b0fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b0fc:	b99b      	cbnz	r3, 3400b126 <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b0fe:	4602      	mov	r2, r0
3400b100:	4633      	mov	r3, r6
3400b102:	2120      	movs	r1, #32
3400b104:	4628      	mov	r0, r5
3400b106:	9700      	str	r7, [sp, #0]
3400b108:	f7ff fda6 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b10c:	2202      	movs	r2, #2
3400b10e:	682b      	ldr	r3, [r5, #0]
3400b110:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400b112:	b003      	add	sp, #12
3400b114:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3400b116:	2b24      	cmp	r3, #36	@ 0x24
3400b118:	d1ce      	bne.n	3400b0b8 <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3400b11a:	6823      	ldr	r3, [r4, #0]
3400b11c:	f023 0302 	bic.w	r3, r3, #2
3400b120:	2b01      	cmp	r3, #1
3400b122:	d1c9      	bne.n	3400b0b8 <HAL_XSPI_Command+0x194>
3400b124:	e7db      	b.n	3400b0de <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b126:	6823      	ldr	r3, [r4, #0]
3400b128:	b90b      	cbnz	r3, 3400b12e <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3400b12a:	2304      	movs	r3, #4
3400b12c:	e005      	b.n	3400b13a <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3400b12e:	2b01      	cmp	r3, #1
3400b130:	d105      	bne.n	3400b13e <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3400b132:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b134:	2b24      	cmp	r3, #36	@ 0x24
3400b136:	d0f8      	beq.n	3400b12a <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3400b138:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b13a:	65ab      	str	r3, [r5, #88]	@ 0x58
3400b13c:	e7e9      	b.n	3400b112 <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400b13e:	2b02      	cmp	r3, #2
3400b140:	d1e7      	bne.n	3400b112 <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3400b142:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b144:	2b14      	cmp	r3, #20
3400b146:	d0f0      	beq.n	3400b12a <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b148:	2324      	movs	r3, #36	@ 0x24
3400b14a:	e7f6      	b.n	3400b13a <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
3400b14c:	2002      	movs	r0, #2
3400b14e:	e7e0      	b.n	3400b112 <HAL_XSPI_Command+0x1ee>
3400b150:	34010be0 	.word	0x34010be0

3400b154 <HAL_XSPI_Transmit>:
{
3400b154:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b158:	4604      	mov	r4, r0
3400b15a:	4688      	mov	r8, r1
3400b15c:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
3400b15e:	f7f7 f94b 	bl	340023f8 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b162:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b164:	4605      	mov	r5, r0
  if (pData == NULL)
3400b166:	f1b8 0f00 	cmp.w	r8, #0
3400b16a:	d103      	bne.n	3400b174 <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b16c:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b16e:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b170:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b172:	e02e      	b.n	3400b1d2 <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b174:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b176:	2b04      	cmp	r3, #4
3400b178:	d12e      	bne.n	3400b1d8 <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b17a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
3400b17c:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b180:	3301      	adds	r3, #1
3400b182:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b184:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b186:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3400b188:	683b      	ldr	r3, [r7, #0]
3400b18a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b18e:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3400b190:	462b      	mov	r3, r5
3400b192:	2201      	movs	r2, #1
3400b194:	2104      	movs	r1, #4
3400b196:	4620      	mov	r0, r4
3400b198:	9600      	str	r6, [sp, #0]
3400b19a:	f7ff fd5d 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b19e:	b9c0      	cbnz	r0, 3400b1d2 <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3400b1a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b1a2:	781b      	ldrb	r3, [r3, #0]
3400b1a4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
3400b1a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b1aa:	3301      	adds	r3, #1
3400b1ac:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b1ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b1b0:	3b01      	subs	r3, #1
3400b1b2:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b1b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b1b6:	2b00      	cmp	r3, #0
3400b1b8:	d1ea      	bne.n	3400b190 <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b1ba:	462b      	mov	r3, r5
3400b1bc:	2201      	movs	r2, #1
3400b1be:	2102      	movs	r1, #2
3400b1c0:	4620      	mov	r0, r4
3400b1c2:	9600      	str	r6, [sp, #0]
3400b1c4:	f7ff fd48 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b1c8:	b918      	cbnz	r0, 3400b1d2 <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b1ca:	2302      	movs	r3, #2
3400b1cc:	6822      	ldr	r2, [r4, #0]
3400b1ce:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b1d0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b1d2:	b002      	add	sp, #8
3400b1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b1d8:	2310      	movs	r3, #16
3400b1da:	e7c8      	b.n	3400b16e <HAL_XSPI_Transmit+0x1a>

3400b1dc <HAL_XSPI_Receive>:
{
3400b1dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b1e0:	4604      	mov	r4, r0
3400b1e2:	4616      	mov	r6, r2
3400b1e4:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
3400b1e6:	f7f7 f907 	bl	340023f8 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b1ea:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b1ec:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b1ee:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b1f0:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
3400b1f4:	f1b8 0f00 	cmp.w	r8, #0
3400b1f8:	d103      	bne.n	3400b202 <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b1fa:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b1fc:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b1fe:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b200:	e035      	b.n	3400b26e <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b202:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b204:	2b04      	cmp	r3, #4
3400b206:	d13d      	bne.n	3400b284 <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b208:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3400b20a:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b20e:	3301      	adds	r3, #1
3400b210:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b212:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b214:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b216:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b218:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b21a:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3400b21e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b222:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b226:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b228:	d124      	bne.n	3400b274 <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b22a:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3400b22c:	463b      	mov	r3, r7
3400b22e:	2201      	movs	r2, #1
3400b230:	2106      	movs	r1, #6
3400b232:	4620      	mov	r0, r4
3400b234:	9600      	str	r6, [sp, #0]
3400b236:	f7ff fd0f 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b23a:	b9c0      	cbnz	r0, 3400b26e <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3400b23c:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
3400b240:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b242:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3400b244:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b246:	3301      	adds	r3, #1
3400b248:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b24a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b24c:	3b01      	subs	r3, #1
3400b24e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b250:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b252:	2b00      	cmp	r3, #0
3400b254:	d1ea      	bne.n	3400b22c <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b256:	463b      	mov	r3, r7
3400b258:	2201      	movs	r2, #1
3400b25a:	2102      	movs	r1, #2
3400b25c:	4620      	mov	r0, r4
3400b25e:	9600      	str	r6, [sp, #0]
3400b260:	f7ff fcfa 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b264:	b918      	cbnz	r0, 3400b26e <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b266:	2302      	movs	r3, #2
3400b268:	6822      	ldr	r2, [r4, #0]
3400b26a:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b26c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b26e:	b002      	add	sp, #8
3400b270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b274:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
3400b278:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b27c:	d1d5      	bne.n	3400b22a <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b27e:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
3400b282:	e7d3      	b.n	3400b22c <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b284:	2310      	movs	r3, #16
3400b286:	e7b9      	b.n	3400b1fc <HAL_XSPI_Receive+0x20>

3400b288 <HAL_XSPI_AutoPolling>:
{
3400b288:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3400b28c:	4604      	mov	r4, r0
3400b28e:	460d      	mov	r5, r1
3400b290:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400b292:	f7f7 f8b1 	bl	340023f8 <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
3400b296:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b298:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b29a:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b29e:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
3400b2a2:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
3400b2a6:	68ab      	ldr	r3, [r5, #8]
3400b2a8:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3400b2ac:	d004      	beq.n	3400b2b8 <HAL_XSPI_AutoPolling+0x30>
3400b2ae:	f240 7134 	movw	r1, #1844	@ 0x734
3400b2b2:	4832      	ldr	r0, [pc, #200]	@ (3400b37c <HAL_XSPI_AutoPolling+0xf4>)
3400b2b4:	f7f6 f87a 	bl	340013ac <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3400b2b8:	68eb      	ldr	r3, [r5, #12]
3400b2ba:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3400b2be:	d004      	beq.n	3400b2ca <HAL_XSPI_AutoPolling+0x42>
3400b2c0:	f240 7135 	movw	r1, #1845	@ 0x735
3400b2c4:	482d      	ldr	r0, [pc, #180]	@ (3400b37c <HAL_XSPI_AutoPolling+0xf4>)
3400b2c6:	f7f6 f871 	bl	340013ac <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3400b2ca:	692b      	ldr	r3, [r5, #16]
3400b2cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b2d0:	d304      	bcc.n	3400b2dc <HAL_XSPI_AutoPolling+0x54>
3400b2d2:	f240 7136 	movw	r1, #1846	@ 0x736
3400b2d6:	4829      	ldr	r0, [pc, #164]	@ (3400b37c <HAL_XSPI_AutoPolling+0xf4>)
3400b2d8:	f7f6 f868 	bl	340013ac <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3400b2dc:	f1ba 0f03 	cmp.w	sl, #3
3400b2e0:	d904      	bls.n	3400b2ec <HAL_XSPI_AutoPolling+0x64>
3400b2e2:	f240 7137 	movw	r1, #1847	@ 0x737
3400b2e6:	4825      	ldr	r0, [pc, #148]	@ (3400b37c <HAL_XSPI_AutoPolling+0xf4>)
3400b2e8:	f7f6 f860 	bl	340013ac <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3400b2ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b2ee:	2b04      	cmp	r3, #4
3400b2f0:	d13e      	bne.n	3400b370 <HAL_XSPI_AutoPolling+0xe8>
3400b2f2:	68eb      	ldr	r3, [r5, #12]
3400b2f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3400b2f8:	d13a      	bne.n	3400b370 <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b2fa:	4633      	mov	r3, r6
3400b2fc:	2200      	movs	r2, #0
3400b2fe:	2120      	movs	r1, #32
3400b300:	4620      	mov	r0, r4
3400b302:	9700      	str	r7, [sp, #0]
3400b304:	f7ff fca8 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b308:	2800      	cmp	r0, #0
3400b30a:	d135      	bne.n	3400b378 <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3400b30c:	682b      	ldr	r3, [r5, #0]
3400b30e:	6821      	ldr	r1, [r4, #0]
3400b310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3400b314:	686b      	ldr	r3, [r5, #4]
3400b316:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3400b31a:	692b      	ldr	r3, [r5, #16]
3400b31c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b320:	680a      	ldr	r2, [r1, #0]
3400b322:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
3400b326:	431d      	orrs	r5, r3
3400b328:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3400b32c:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b32e:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b330:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b338:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b33a:	d111      	bne.n	3400b360 <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b33c:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3400b340:	4633      	mov	r3, r6
3400b342:	2201      	movs	r2, #1
3400b344:	2108      	movs	r1, #8
3400b346:	4620      	mov	r0, r4
3400b348:	9700      	str	r7, [sp, #0]
3400b34a:	f7ff fc85 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400b34e:	b920      	cbnz	r0, 3400b35a <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3400b350:	2208      	movs	r2, #8
3400b352:	6823      	ldr	r3, [r4, #0]
3400b354:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
3400b356:	2302      	movs	r3, #2
3400b358:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b35a:	b002      	add	sp, #8
3400b35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b360:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
3400b364:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b368:	d1e8      	bne.n	3400b33c <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b36a:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
3400b36e:	e7e7      	b.n	3400b340 <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b370:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b372:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b374:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b376:	e7f0      	b.n	3400b35a <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
3400b378:	2002      	movs	r0, #2
3400b37a:	e7ee      	b.n	3400b35a <HAL_XSPI_AutoPolling+0xd2>
3400b37c:	34010be0 	.word	0x34010be0

3400b380 <HAL_XSPI_MemoryMapped>:
{
3400b380:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400b382:	460c      	mov	r4, r1
3400b384:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
3400b386:	f7f7 f837 	bl	340023f8 <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b38a:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b38c:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b38e:	f033 0308 	bics.w	r3, r3, #8
3400b392:	d004      	beq.n	3400b39e <HAL_XSPI_MemoryMapped+0x1e>
3400b394:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
3400b398:	482f      	ldr	r0, [pc, #188]	@ (3400b458 <HAL_XSPI_MemoryMapped+0xd8>)
3400b39a:	f7f6 f807 	bl	340013ac <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3400b39e:	68a3      	ldr	r3, [r4, #8]
3400b3a0:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
3400b3a4:	d004      	beq.n	3400b3b0 <HAL_XSPI_MemoryMapped+0x30>
3400b3a6:	f240 71c9 	movw	r1, #1993	@ 0x7c9
3400b3aa:	482b      	ldr	r0, [pc, #172]	@ (3400b458 <HAL_XSPI_MemoryMapped+0xd8>)
3400b3ac:	f7f5 fffe 	bl	340013ac <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b3b0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b3b2:	2b04      	cmp	r3, #4
3400b3b4:	d14b      	bne.n	3400b44e <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400b3b6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
3400b3b8:	2200      	movs	r2, #0
3400b3ba:	9300      	str	r3, [sp, #0]
3400b3bc:	2120      	movs	r1, #32
3400b3be:	4633      	mov	r3, r6
3400b3c0:	4628      	mov	r0, r5
3400b3c2:	f7ff fc49 	bl	3400ac58 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b3c6:	4606      	mov	r6, r0
3400b3c8:	bb58      	cbnz	r0, 3400b422 <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3400b3ca:	2388      	movs	r3, #136	@ 0x88
3400b3cc:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3400b3ce:	68a3      	ldr	r3, [r4, #8]
3400b3d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400b3d4:	d128      	bne.n	3400b428 <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3400b3d6:	682a      	ldr	r2, [r5, #0]
3400b3d8:	6813      	ldr	r3, [r2, #0]
3400b3da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3400b3de:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3400b3e0:	6823      	ldr	r3, [r4, #0]
3400b3e2:	2b08      	cmp	r3, #8
3400b3e4:	d112      	bne.n	3400b40c <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3400b3e6:	6863      	ldr	r3, [r4, #4]
3400b3e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b3ec:	d304      	bcc.n	3400b3f8 <HAL_XSPI_MemoryMapped+0x78>
3400b3ee:	f240 71e5 	movw	r1, #2021	@ 0x7e5
3400b3f2:	4819      	ldr	r0, [pc, #100]	@ (3400b458 <HAL_XSPI_MemoryMapped+0xd8>)
3400b3f4:	f7f5 ffda 	bl	340013ac <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3400b3f8:	682b      	ldr	r3, [r5, #0]
3400b3fa:	6862      	ldr	r2, [r4, #4]
3400b3fc:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3400b400:	2210      	movs	r2, #16
3400b402:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3400b404:	681a      	ldr	r2, [r3, #0]
3400b406:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3400b40a:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3400b40c:	682a      	ldr	r2, [r5, #0]
3400b40e:	6821      	ldr	r1, [r4, #0]
3400b410:	6813      	ldr	r3, [r2, #0]
3400b412:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b416:	f023 0308 	bic.w	r3, r3, #8
3400b41a:	430b      	orrs	r3, r1
3400b41c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
3400b420:	6013      	str	r3, [r2, #0]
}
3400b422:	4630      	mov	r0, r6
3400b424:	b002      	add	sp, #8
3400b426:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
3400b428:	68e3      	ldr	r3, [r4, #12]
3400b42a:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3400b42e:	d004      	beq.n	3400b43a <HAL_XSPI_MemoryMapped+0xba>
3400b430:	f240 71dd 	movw	r1, #2013	@ 0x7dd
3400b434:	4808      	ldr	r0, [pc, #32]	@ (3400b458 <HAL_XSPI_MemoryMapped+0xd8>)
3400b436:	f7f5 ffb9 	bl	340013ac <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3400b43a:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
3400b43e:	6829      	ldr	r1, [r5, #0]
3400b440:	4303      	orrs	r3, r0
3400b442:	680a      	ldr	r2, [r1, #0]
3400b444:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
3400b448:	4313      	orrs	r3, r2
3400b44a:	600b      	str	r3, [r1, #0]
3400b44c:	e7c8      	b.n	3400b3e0 <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b44e:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b450:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b452:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b454:	e7e5      	b.n	3400b422 <HAL_XSPI_MemoryMapped+0xa2>
3400b456:	bf00      	nop
3400b458:	34010be0 	.word	0x34010be0

3400b45c <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b45c:	29ff      	cmp	r1, #255	@ 0xff
{
3400b45e:	b538      	push	{r3, r4, r5, lr}
3400b460:	4604      	mov	r4, r0
3400b462:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b464:	d904      	bls.n	3400b470 <HAL_XSPI_SetClockPrescaler+0x14>
3400b466:	f640 2193 	movw	r1, #2707	@ 0xa93
3400b46a:	4809      	ldr	r0, [pc, #36]	@ (3400b490 <HAL_XSPI_SetClockPrescaler+0x34>)
3400b46c:	f7f5 ff9e 	bl	340013ac <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3400b470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400b472:	f010 0008 	ands.w	r0, r0, #8
3400b476:	d107      	bne.n	3400b488 <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b478:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
3400b47a:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b47c:	68d3      	ldr	r3, [r2, #12]
3400b47e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400b482:	432b      	orrs	r3, r5
3400b484:	60d3      	str	r3, [r2, #12]
}
3400b486:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b488:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b48a:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b48c:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b48e:	e7fa      	b.n	3400b486 <HAL_XSPI_SetClockPrescaler+0x2a>
3400b490:	34010be0 	.word	0x34010be0

3400b494 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
3400b494:	2a02      	cmp	r2, #2
3400b496:	d14a      	bne.n	3400b52e <USB_SetTurnaroundTime+0x9a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
3400b498:	4b27      	ldr	r3, [pc, #156]	@ (3400b538 <USB_SetTurnaroundTime+0xa4>)
3400b49a:	4a28      	ldr	r2, [pc, #160]	@ (3400b53c <USB_SetTurnaroundTime+0xa8>)
3400b49c:	440b      	add	r3, r1
3400b49e:	4293      	cmp	r3, r2
3400b4a0:	d939      	bls.n	3400b516 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
3400b4a2:	4b27      	ldr	r3, [pc, #156]	@ (3400b540 <USB_SetTurnaroundTime+0xac>)
3400b4a4:	4a27      	ldr	r2, [pc, #156]	@ (3400b544 <USB_SetTurnaroundTime+0xb0>)
3400b4a6:	440b      	add	r3, r1
3400b4a8:	4293      	cmp	r3, r2
3400b4aa:	d936      	bls.n	3400b51a <USB_SetTurnaroundTime+0x86>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
3400b4ac:	4a26      	ldr	r2, [pc, #152]	@ (3400b548 <USB_SetTurnaroundTime+0xb4>)
3400b4ae:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
3400b4b2:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
3400b4b6:	4293      	cmp	r3, r2
3400b4b8:	d931      	bls.n	3400b51e <USB_SetTurnaroundTime+0x8a>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
3400b4ba:	4a24      	ldr	r2, [pc, #144]	@ (3400b54c <USB_SetTurnaroundTime+0xb8>)
3400b4bc:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
3400b4c0:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
3400b4c4:	4293      	cmp	r3, r2
3400b4c6:	d32c      	bcc.n	3400b522 <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
3400b4c8:	4b21      	ldr	r3, [pc, #132]	@ (3400b550 <USB_SetTurnaroundTime+0xbc>)
3400b4ca:	4a22      	ldr	r2, [pc, #136]	@ (3400b554 <USB_SetTurnaroundTime+0xc0>)
3400b4cc:	440b      	add	r3, r1
3400b4ce:	4293      	cmp	r3, r2
3400b4d0:	d929      	bls.n	3400b526 <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
3400b4d2:	4b21      	ldr	r3, [pc, #132]	@ (3400b558 <USB_SetTurnaroundTime+0xc4>)
3400b4d4:	4a21      	ldr	r2, [pc, #132]	@ (3400b55c <USB_SetTurnaroundTime+0xc8>)
3400b4d6:	440b      	add	r3, r1
3400b4d8:	4293      	cmp	r3, r2
3400b4da:	d326      	bcc.n	3400b52a <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
3400b4dc:	4b20      	ldr	r3, [pc, #128]	@ (3400b560 <USB_SetTurnaroundTime+0xcc>)
3400b4de:	4a21      	ldr	r2, [pc, #132]	@ (3400b564 <USB_SetTurnaroundTime+0xd0>)
3400b4e0:	440b      	add	r3, r1
3400b4e2:	4293      	cmp	r3, r2
3400b4e4:	d323      	bcc.n	3400b52e <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
3400b4e6:	4a20      	ldr	r2, [pc, #128]	@ (3400b568 <USB_SetTurnaroundTime+0xd4>)
3400b4e8:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
3400b4ec:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
3400b4f0:	4293      	cmp	r3, r2
3400b4f2:	d31e      	bcc.n	3400b532 <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
3400b4f4:	4b1d      	ldr	r3, [pc, #116]	@ (3400b56c <USB_SetTurnaroundTime+0xd8>)
3400b4f6:	4a1e      	ldr	r2, [pc, #120]	@ (3400b570 <USB_SetTurnaroundTime+0xdc>)
3400b4f8:	440b      	add	r3, r1
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
3400b4fa:	4293      	cmp	r3, r2
3400b4fc:	bf2c      	ite	cs
3400b4fe:	2306      	movcs	r3, #6
3400b500:	2307      	movcc	r3, #7
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
3400b502:	68c2      	ldr	r2, [r0, #12]
3400b504:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
3400b508:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
3400b50a:	68c2      	ldr	r2, [r0, #12]
3400b50c:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
3400b510:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
3400b512:	2000      	movs	r0, #0
3400b514:	4770      	bx	lr
      UsbTrd = 0xFU;
3400b516:	230f      	movs	r3, #15
3400b518:	e7f3      	b.n	3400b502 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
3400b51a:	230e      	movs	r3, #14
3400b51c:	e7f1      	b.n	3400b502 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
3400b51e:	230d      	movs	r3, #13
3400b520:	e7ef      	b.n	3400b502 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
3400b522:	230c      	movs	r3, #12
3400b524:	e7ed      	b.n	3400b502 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
3400b526:	230b      	movs	r3, #11
3400b528:	e7eb      	b.n	3400b502 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
3400b52a:	230a      	movs	r3, #10
3400b52c:	e7e9      	b.n	3400b502 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
3400b52e:	2309      	movs	r3, #9
3400b530:	e7e7      	b.n	3400b502 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
3400b532:	2308      	movs	r3, #8
3400b534:	e7e5      	b.n	3400b502 <USB_SetTurnaroundTime+0x6e>
3400b536:	bf00      	nop
3400b538:	ff275340 	.word	0xff275340
3400b53c:	000c34ff 	.word	0x000c34ff
3400b540:	ff1b1e40 	.word	0xff1b1e40
3400b544:	000f423f 	.word	0x000f423f
3400b548:	00124f7f 	.word	0x00124f7f
3400b54c:	0013d620 	.word	0x0013d620
3400b550:	fee5b660 	.word	0xfee5b660
3400b554:	0016e35f 	.word	0x0016e35f
3400b558:	feced300 	.word	0xfeced300
3400b55c:	001b7740 	.word	0x001b7740
3400b560:	feb35bc0 	.word	0xfeb35bc0
3400b564:	002191c0 	.word	0x002191c0
3400b568:	00387520 	.word	0x00387520
3400b56c:	fe5954e0 	.word	0xfe5954e0
3400b570:	00419ce0 	.word	0x00419ce0

3400b574 <USB_FlushTxFifo>:
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  __IO uint32_t count = 0U;
3400b574:	2300      	movs	r3, #0
{
3400b576:	4602      	mov	r2, r0
3400b578:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b57a:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b57c:	9b01      	ldr	r3, [sp, #4]
3400b57e:	3301      	adds	r3, #1
3400b580:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b582:	9b01      	ldr	r3, [sp, #4]
3400b584:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b588:	d815      	bhi.n	3400b5b6 <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b58a:	6913      	ldr	r3, [r2, #16]
3400b58c:	2b00      	cmp	r3, #0
3400b58e:	daf5      	bge.n	3400b57c <USB_FlushTxFifo+0x8>

  /* Flush TX Fifo */
  count = 0U;
3400b590:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b592:	0189      	lsls	r1, r1, #6
3400b594:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
3400b598:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b59a:	6111      	str	r1, [r2, #16]

  do
  {
    count++;
3400b59c:	9b01      	ldr	r3, [sp, #4]
3400b59e:	3301      	adds	r3, #1
3400b5a0:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b5a2:	9b01      	ldr	r3, [sp, #4]
3400b5a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b5a8:	d805      	bhi.n	3400b5b6 <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
3400b5aa:	6910      	ldr	r0, [r2, #16]
3400b5ac:	f010 0020 	ands.w	r0, r0, #32
3400b5b0:	d1f4      	bne.n	3400b59c <USB_FlushTxFifo+0x28>

  return HAL_OK;
}
3400b5b2:	b002      	add	sp, #8
3400b5b4:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b5b6:	2003      	movs	r0, #3
3400b5b8:	e7fb      	b.n	3400b5b2 <USB_FlushTxFifo+0x3e>

3400b5ba <USB_FlushRxFifo>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
3400b5ba:	2300      	movs	r3, #0
{
3400b5bc:	4602      	mov	r2, r0
3400b5be:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b5c0:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b5c2:	9b01      	ldr	r3, [sp, #4]
3400b5c4:	3301      	adds	r3, #1
3400b5c6:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b5c8:	9b01      	ldr	r3, [sp, #4]
3400b5ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b5ce:	d813      	bhi.n	3400b5f8 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b5d0:	6913      	ldr	r3, [r2, #16]
3400b5d2:	2b00      	cmp	r3, #0
3400b5d4:	daf5      	bge.n	3400b5c2 <USB_FlushRxFifo+0x8>

  /* Flush RX Fifo */
  count = 0U;
3400b5d6:	2300      	movs	r3, #0
3400b5d8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
3400b5da:	2310      	movs	r3, #16
3400b5dc:	6113      	str	r3, [r2, #16]

  do
  {
    count++;
3400b5de:	9b01      	ldr	r3, [sp, #4]
3400b5e0:	3301      	adds	r3, #1
3400b5e2:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b5e4:	9b01      	ldr	r3, [sp, #4]
3400b5e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b5ea:	d805      	bhi.n	3400b5f8 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
3400b5ec:	6910      	ldr	r0, [r2, #16]
3400b5ee:	f010 0010 	ands.w	r0, r0, #16
3400b5f2:	d1f4      	bne.n	3400b5de <USB_FlushRxFifo+0x24>

  return HAL_OK;
}
3400b5f4:	b002      	add	sp, #8
3400b5f6:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b5f8:	2003      	movs	r0, #3
3400b5fa:	e7fb      	b.n	3400b5f4 <USB_FlushRxFifo+0x3a>

3400b5fc <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
3400b5fc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
3400b600:	f013 0006 	ands.w	r0, r3, #6
3400b604:	d004      	beq.n	3400b610 <USB_GetDevSpeed+0x14>
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
3400b606:	f013 0f02 	tst.w	r3, #2
3400b60a:	bf14      	ite	ne
3400b60c:	2002      	movne	r0, #2
3400b60e:	200f      	moveq	r0, #15
  }

  return speed;
}
3400b610:	4770      	bx	lr

3400b612 <USB_ActivateEndpoint>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b612:	2201      	movs	r2, #1
{
3400b614:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
3400b616:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b618:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
3400b61c:	f004 050f 	and.w	r5, r4, #15
3400b620:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
3400b622:	784d      	ldrb	r5, [r1, #1]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b624:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
3400b628:	2d01      	cmp	r5, #1
3400b62a:	d119      	bne.n	3400b660 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b62c:	69dd      	ldr	r5, [r3, #28]
3400b62e:	432a      	orrs	r2, r5
3400b630:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b632:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b636:	041a      	lsls	r2, r3, #16
3400b638:	d410      	bmi.n	3400b65c <USB_ActivateEndpoint+0x4a>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b63a:	688a      	ldr	r2, [r1, #8]
3400b63c:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
3400b640:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
3400b644:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b646:	432b      	orrs	r3, r5
3400b648:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b64c:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
3400b650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b658:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
3400b65c:	2000      	movs	r0, #0
3400b65e:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
3400b660:	69dc      	ldr	r4, [r3, #28]
3400b662:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
3400b666:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
3400b668:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b66c:	041b      	lsls	r3, r3, #16
3400b66e:	d4f5      	bmi.n	3400b65c <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b670:	688b      	ldr	r3, [r1, #8]
3400b672:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b676:	f3c3 030a 	ubfx	r3, r3, #0, #11
3400b67a:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
3400b67c:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b67e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b68a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b68e:	e7e5      	b.n	3400b65c <USB_ActivateEndpoint+0x4a>

3400b690 <USB_EPStopXfer>:
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  __IO uint32_t count = 0U;
3400b690:	2300      	movs	r3, #0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* IN endpoint */
  if (ep->is_in == 1U)
3400b692:	784a      	ldrb	r2, [r1, #1]
{
3400b694:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b696:	9301      	str	r3, [sp, #4]
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b698:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400b69a:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b69c:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
3400b6a0:	d11e      	bne.n	3400b6e0 <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b6a2:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
3400b6a6:	58c2      	ldr	r2, [r0, r3]
3400b6a8:	18c1      	adds	r1, r0, r3
3400b6aa:	2a00      	cmp	r2, #0
3400b6ac:	db02      	blt.n	3400b6b4 <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
3400b6ae:	2000      	movs	r0, #0
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
    }
  }

  return ret;
}
3400b6b0:	b002      	add	sp, #8
3400b6b2:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
3400b6b4:	58c2      	ldr	r2, [r0, r3]
3400b6b6:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b6ba:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
3400b6bc:	58c2      	ldr	r2, [r0, r3]
3400b6be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b6c2:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b6c4:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b6c8:	9b01      	ldr	r3, [sp, #4]
3400b6ca:	3301      	adds	r3, #1
3400b6cc:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b6ce:	9b01      	ldr	r3, [sp, #4]
3400b6d0:	4293      	cmp	r3, r2
3400b6d2:	d901      	bls.n	3400b6d8 <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
3400b6d4:	2001      	movs	r0, #1
3400b6d6:	e7eb      	b.n	3400b6b0 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
3400b6d8:	680b      	ldr	r3, [r1, #0]
3400b6da:	2b00      	cmp	r3, #0
3400b6dc:	dbf4      	blt.n	3400b6c8 <USB_EPStopXfer+0x38>
3400b6de:	e7e6      	b.n	3400b6ae <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400b6e0:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
3400b6e4:	58c2      	ldr	r2, [r0, r3]
3400b6e6:	18c1      	adds	r1, r0, r3
3400b6e8:	2a00      	cmp	r2, #0
3400b6ea:	dae0      	bge.n	3400b6ae <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
3400b6ec:	58c2      	ldr	r2, [r0, r3]
3400b6ee:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b6f2:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
3400b6f4:	58c2      	ldr	r2, [r0, r3]
3400b6f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b6fa:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b6fc:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b700:	9b01      	ldr	r3, [sp, #4]
3400b702:	3301      	adds	r3, #1
3400b704:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b706:	9b01      	ldr	r3, [sp, #4]
3400b708:	4293      	cmp	r3, r2
3400b70a:	d8e3      	bhi.n	3400b6d4 <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
3400b70c:	680b      	ldr	r3, [r1, #0]
3400b70e:	2b00      	cmp	r3, #0
3400b710:	dbf6      	blt.n	3400b700 <USB_EPStopXfer+0x70>
3400b712:	e7cc      	b.n	3400b6ae <USB_EPStopXfer+0x1e>

3400b714 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
3400b714:	b510      	push	{r4, lr}
3400b716:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t *pSrc = src;
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
3400b71a:	b93c      	cbnz	r4, 3400b72c <USB_WritePacket+0x18>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
3400b71c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b71e:	3201      	adds	r2, #1
3400b720:	089b      	lsrs	r3, r3, #2
3400b722:	eb00 3002 	add.w	r0, r0, r2, lsl #12
3400b726:	3301      	adds	r3, #1
    for (i = 0U; i < count32b; i++)
3400b728:	3b01      	subs	r3, #1
3400b72a:	d101      	bne.n	3400b730 <USB_WritePacket+0x1c>
      pSrc++;
    }
  }

  return HAL_OK;
}
3400b72c:	2000      	movs	r0, #0
3400b72e:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b730:	f851 2b04 	ldr.w	r2, [r1], #4
3400b734:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
3400b736:	e7f7      	b.n	3400b728 <USB_WritePacket+0x14>

3400b738 <USB_EPStartXfer>:
{
3400b738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
3400b73c:	784b      	ldrb	r3, [r1, #1]
{
3400b73e:	4616      	mov	r6, r2
  uint32_t epnum = (uint32_t)ep->num;
3400b740:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
3400b742:	2b01      	cmp	r3, #1
    if (ep->xfer_len == 0U)
3400b744:	690c      	ldr	r4, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b746:	790f      	ldrb	r7, [r1, #4]
3400b748:	f8df e1e8 	ldr.w	lr, [pc, #488]	@ 3400b934 <USB_EPStartXfer+0x1fc>
3400b74c:	f8df 81e8 	ldr.w	r8, [pc, #488]	@ 3400b938 <USB_EPStartXfer+0x200>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b750:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
3400b754:	f040 8097 	bne.w	3400b886 <USB_EPStartXfer+0x14e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b758:	f505 6c10 	add.w	ip, r5, #2304	@ 0x900
3400b75c:	f8dc 3010 	ldr.w	r3, [ip, #16]
    if (ep->xfer_len == 0U)
3400b760:	bb74      	cbnz	r4, 3400b7c0 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b762:	ea03 030e 	and.w	r3, r3, lr
3400b766:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b76a:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b76e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
3400b772:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b776:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b77a:	ea03 0308 	and.w	r3, r3, r8
    if (dma == 1U)
3400b77e:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b780:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400b784:	d157      	bne.n	3400b836 <USB_EPStartXfer+0xfe>
      if ((uint32_t)ep->dma_addr != 0U)
3400b786:	69cb      	ldr	r3, [r1, #28]
3400b788:	b10b      	cbz	r3, 3400b78e <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
3400b78a:	f8cc 3014 	str.w	r3, [ip, #20]
      if (ep->type == EP_TYPE_ISOC)
3400b78e:	2f01      	cmp	r7, #1
3400b790:	d10c      	bne.n	3400b7ac <USB_EPStartXfer+0x74>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b792:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400b796:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b79a:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b79e:	bf0c      	ite	eq
3400b7a0:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b7a4:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400b7a8:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b7ac:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b7b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b7b4:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
}
3400b7b8:	2000      	movs	r0, #0
3400b7ba:	b002      	add	sp, #8
3400b7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b7c0:	ea03 0308 	and.w	r3, r3, r8
3400b7c4:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b7c8:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b7cc:	ea03 030e 	and.w	r3, r3, lr
3400b7d0:	f8cc 3010 	str.w	r3, [ip, #16]
        if (ep->xfer_len > ep->maxpacket)
3400b7d4:	688b      	ldr	r3, [r1, #8]
      if (epnum == 0U)
3400b7d6:	b97a      	cbnz	r2, 3400b7f8 <USB_EPStartXfer+0xc0>
        if (ep->xfer_len > ep->maxpacket)
3400b7d8:	42a3      	cmp	r3, r4
          ep->xfer_len = ep->maxpacket;
3400b7da:	bf38      	it	cc
3400b7dc:	610b      	strcc	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b7de:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b7e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b7e6:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b7ea:	690b      	ldr	r3, [r1, #16]
3400b7ec:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b7f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b7f4:	4323      	orrs	r3, r4
3400b7f6:	e7c2      	b.n	3400b77e <USB_EPStartXfer+0x46>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400b7f8:	441c      	add	r4, r3
3400b7fa:	3c01      	subs	r4, #1
3400b7fc:	fbb4 f4f3 	udiv	r4, r4, r3
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b800:	4b4b      	ldr	r3, [pc, #300]	@ (3400b930 <USB_EPStartXfer+0x1f8>)
3400b802:	f8dc e010 	ldr.w	lr, [ip, #16]
3400b806:	fa1f f884 	uxth.w	r8, r4
3400b80a:	ea03 44c4 	and.w	r4, r3, r4, lsl #19
3400b80e:	ea44 040e 	orr.w	r4, r4, lr
        if (ep->type == EP_TYPE_ISOC)
3400b812:	2f01      	cmp	r7, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b814:	f8cc 4010 	str.w	r4, [ip, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b818:	d1e7      	bne.n	3400b7ea <USB_EPStartXfer+0xb2>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
3400b81a:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b81e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
3400b822:	f8cc 3010 	str.w	r3, [ip, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b826:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b82a:	ea4f 7348 	mov.w	r3, r8, lsl #29
3400b82e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
3400b832:	4323      	orrs	r3, r4
3400b834:	e7d7      	b.n	3400b7e6 <USB_EPStartXfer+0xae>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b836:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
3400b83a:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b83c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b840:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
3400b844:	690b      	ldr	r3, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
3400b846:	d00b      	beq.n	3400b860 <USB_EPStartXfer+0x128>
        if (ep->xfer_len > 0U)
3400b848:	2b00      	cmp	r3, #0
3400b84a:	d0b5      	beq.n	3400b7b8 <USB_EPStartXfer+0x80>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
3400b84c:	2301      	movs	r3, #1
3400b84e:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
3400b852:	f002 020f 	and.w	r2, r2, #15
3400b856:	4093      	lsls	r3, r2
3400b858:	430b      	orrs	r3, r1
3400b85a:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
3400b85e:	e7ab      	b.n	3400b7b8 <USB_EPStartXfer+0x80>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b860:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b864:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b866:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b86a:	f8d5 4900 	ldr.w	r4, [r5, #2304]	@ 0x900
3400b86e:	bf0c      	ite	eq
3400b870:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b874:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
3400b878:	f8c5 4900 	str.w	r4, [r5, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b87c:	9600      	str	r6, [sp, #0]
3400b87e:	68c9      	ldr	r1, [r1, #12]
3400b880:	f7ff ff48 	bl	3400b714 <USB_WritePacket>
3400b884:	e798      	b.n	3400b7b8 <USB_EPStartXfer+0x80>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
3400b886:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
3400b88a:	f505 6c30 	add.w	ip, r5, #2816	@ 0xb00
3400b88e:	ea03 0308 	and.w	r3, r3, r8
3400b892:	f8cc 3010 	str.w	r3, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
3400b896:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b89a:	ea03 030e 	and.w	r3, r3, lr
3400b89e:	f8cc 3010 	str.w	r3, [ip, #16]
        ep->xfer_len = ep->maxpacket;
3400b8a2:	688b      	ldr	r3, [r1, #8]
    if (epnum == 0U)
3400b8a4:	bb5a      	cbnz	r2, 3400b8fe <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
3400b8a6:	b104      	cbz	r4, 3400b8aa <USB_EPStartXfer+0x172>
        ep->xfer_len = ep->maxpacket;
3400b8a8:	610b      	str	r3, [r1, #16]
      ep->xfer_size = ep->maxpacket;
3400b8aa:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
3400b8ac:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400b8b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b8b4:	4313      	orrs	r3, r2
3400b8b6:	f8cc 3010 	str.w	r3, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400b8ba:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b8be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    if (dma == 1U)
3400b8c2:	2e01      	cmp	r6, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400b8c4:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400b8c8:	d103      	bne.n	3400b8d2 <USB_EPStartXfer+0x19a>
      if ((uint32_t)ep->xfer_buff != 0U)
3400b8ca:	68cb      	ldr	r3, [r1, #12]
3400b8cc:	b10b      	cbz	r3, 3400b8d2 <USB_EPStartXfer+0x19a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
3400b8ce:	f8cc 3014 	str.w	r3, [ip, #20]
    if (ep->type == EP_TYPE_ISOC)
3400b8d2:	2f01      	cmp	r7, #1
3400b8d4:	d10c      	bne.n	3400b8f0 <USB_EPStartXfer+0x1b8>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b8d6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400b8da:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
3400b8de:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400b8e2:	bf0c      	ite	eq
3400b8e4:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
3400b8e8:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400b8ec:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
3400b8f0:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400b8f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b8f8:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
3400b8fc:	e75c      	b.n	3400b7b8 <USB_EPStartXfer+0x80>
      if (ep->xfer_len == 0U)
3400b8fe:	2c00      	cmp	r4, #0
3400b900:	d0d4      	beq.n	3400b8ac <USB_EPStartXfer+0x174>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400b902:	441c      	add	r4, r3
3400b904:	3c01      	subs	r4, #1
3400b906:	fbb4 f4f3 	udiv	r4, r4, r3
3400b90a:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
3400b90c:	4363      	muls	r3, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400b90e:	4a08      	ldr	r2, [pc, #32]	@ (3400b930 <USB_EPStartXfer+0x1f8>)
3400b910:	f8dc e010 	ldr.w	lr, [ip, #16]
3400b914:	ea02 42c4 	and.w	r2, r2, r4, lsl #19
3400b918:	ea42 020e 	orr.w	r2, r2, lr
        ep->xfer_size = ep->maxpacket * pktcnt;
3400b91c:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400b91e:	f8cc 2010 	str.w	r2, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400b922:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400b926:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b92a:	4313      	orrs	r3, r2
3400b92c:	e7c9      	b.n	3400b8c2 <USB_EPStartXfer+0x18a>
3400b92e:	bf00      	nop
3400b930:	1ff80000 	.word	0x1ff80000
3400b934:	e007ffff 	.word	0xe007ffff
3400b938:	fff80000 	.word	0xfff80000

3400b93c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
3400b93c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
  uint16_t remaining_bytes = len % 4U;

  for (i = 0U; i < count32b; i++)
3400b93e:	2500      	movs	r5, #0
  uint32_t count32b = (uint32_t)len >> 2U;
3400b940:	0894      	lsrs	r4, r2, #2
  uint16_t remaining_bytes = len % 4U;
3400b942:	42ac      	cmp	r4, r5
{
3400b944:	4603      	mov	r3, r0
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400b946:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
3400b94a:	f104 0001 	add.w	r0, r4, #1
3400b94e:	bf08      	it	eq
3400b950:	2001      	moveq	r0, #1
  uint16_t remaining_bytes = len % 4U;
3400b952:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
3400b956:	3801      	subs	r0, #1
3400b958:	d110      	bne.n	3400b97c <USB_ReadPacket+0x40>
3400b95a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
    pDest++;
    pDest++;
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
3400b95e:	b162      	cbz	r2, 3400b97a <USB_ReadPacket+0x3e>
  {
    i = 0U;
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
3400b960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400b964:	681c      	ldr	r4, [r3, #0]
    i = 0U;
3400b966:	2300      	movs	r3, #0

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
3400b968:	00d9      	lsls	r1, r3, #3
3400b96a:	fa24 f101 	lsr.w	r1, r4, r1
3400b96e:	54c1      	strb	r1, [r0, r3]
      i++;
3400b970:	3301      	adds	r3, #1
      pDest++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
3400b972:	b299      	uxth	r1, r3
3400b974:	428a      	cmp	r2, r1
3400b976:	d1f7      	bne.n	3400b968 <USB_ReadPacket+0x2c>
3400b978:	4410      	add	r0, r2
  }

  return ((void *)pDest);
}
3400b97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400b97c:	6837      	ldr	r7, [r6, #0]
3400b97e:	f841 7025 	str.w	r7, [r1, r5, lsl #2]
  for (i = 0U; i < count32b; i++)
3400b982:	3501      	adds	r5, #1
3400b984:	e7e7      	b.n	3400b956 <USB_ReadPacket+0x1a>

3400b986 <USB_EPSetStall>:
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
3400b986:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
3400b988:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400b98a:	2a01      	cmp	r2, #1
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b98c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
3400b990:	d112      	bne.n	3400b9b8 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b992:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
3400b996:	2a00      	cmp	r2, #0
3400b998:	db06      	blt.n	3400b9a8 <USB_EPSetStall+0x22>
3400b99a:	b12b      	cbz	r3, 3400b9a8 <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
3400b99c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b9a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400b9a4:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
3400b9a8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b9ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400b9b0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
  }

  return HAL_OK;
}
3400b9b4:	2000      	movs	r0, #0
3400b9b6:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b9b8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b9bc:	2a00      	cmp	r2, #0
3400b9be:	db06      	blt.n	3400b9ce <USB_EPSetStall+0x48>
3400b9c0:	b12b      	cbz	r3, 3400b9ce <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
3400b9c2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b9c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400b9ca:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
3400b9ce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b9d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400b9d6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b9da:	e7eb      	b.n	3400b9b4 <USB_EPSetStall+0x2e>

3400b9dc <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
3400b9dc:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
3400b9de:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
3400b9e0:	4010      	ands	r0, r2
3400b9e2:	4770      	bx	lr

3400b9e4 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400b9e4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400b9e8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400b9ec:	69c0      	ldr	r0, [r0, #28]
3400b9ee:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
3400b9f0:	0c00      	lsrs	r0, r0, #16
3400b9f2:	4770      	bx	lr

3400b9f4 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400b9f4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400b9f8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400b9fc:	69c0      	ldr	r0, [r0, #28]
3400b9fe:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
3400ba00:	b280      	uxth	r0, r0
3400ba02:	4770      	bx	lr

3400ba04 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400ba04:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400ba08:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400ba0c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400ba10:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
3400ba12:	4010      	ands	r0, r2
3400ba14:	4770      	bx	lr

3400ba16 <USB_ReadDevInEPInterrupt>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
3400ba16:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
3400ba1a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400ba1e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400ba22:	f001 010f 	and.w	r1, r1, #15
3400ba26:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400ba28:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400ba2c:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400ba2e:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400ba30:	b2db      	uxtb	r3, r3
3400ba32:	4313      	orrs	r3, r2

  return tmpreg;
}
3400ba34:	4018      	ands	r0, r3
3400ba36:	4770      	bx	lr

3400ba38 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
3400ba38:	6940      	ldr	r0, [r0, #20]
}
3400ba3a:	f000 0001 	and.w	r0, r0, #1
3400ba3e:	4770      	bx	lr

3400ba40 <USB_ActivateSetup>:
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
3400ba40:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400ba44:	f36f 030a 	bfc	r3, #0, #11
3400ba48:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
3400ba4c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
3400ba50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3400ba54:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804

  return HAL_OK;
}
3400ba58:	2000      	movs	r0, #0
3400ba5a:	4770      	bx	lr

3400ba5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
3400ba5c:	b530      	push	{r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
3400ba5e:	6c05      	ldr	r5, [r0, #64]	@ 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400ba60:	4c10      	ldr	r4, [pc, #64]	@ (3400baa4 <USB_EP0_OutStart+0x48>)
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400ba62:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400ba66:	42a5      	cmp	r5, r4
3400ba68:	d903      	bls.n	3400ba72 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400ba6a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
3400ba6e:	2c00      	cmp	r4, #0
3400ba70:	db16      	blt.n	3400baa0 <USB_EP0_OutStart+0x44>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
3400ba72:	2400      	movs	r4, #0
3400ba74:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400ba76:	691c      	ldr	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;

  if (dma == 1U)
3400ba78:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400ba7a:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
3400ba7e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
3400ba80:	691c      	ldr	r4, [r3, #16]
3400ba82:	f044 0418 	orr.w	r4, r4, #24
3400ba86:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
3400ba88:	691c      	ldr	r4, [r3, #16]
3400ba8a:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
3400ba8e:	611c      	str	r4, [r3, #16]
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
3400ba90:	bf01      	itttt	eq
3400ba92:	615a      	streq	r2, [r3, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
3400ba94:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	@ 0xb00
3400ba98:	f043 2380 	orreq.w	r3, r3, #2147516416	@ 0x80008000
3400ba9c:	f8c0 3b00 	streq.w	r3, [r0, #2816]	@ 0xb00
  }

  return HAL_OK;
}
3400baa0:	2000      	movs	r0, #0
3400baa2:	bd30      	pop	{r4, r5, pc}
3400baa4:	4f54300a 	.word	0x4f54300a

3400baa8 <CMW_CAMERA_GetDCMIPPHandle>:
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
    return &hcamera_dcmipp;
}
3400baa8:	4800      	ldr	r0, [pc, #0]	@ (3400baac <CMW_CAMERA_GetDCMIPPHandle+0x4>)
3400baaa:	4770      	bx	lr
3400baac:	34012910 	.word	0x34012910

3400bab0 <CMW_CAMERA_PIPE_VsyncEventCallback>:
/**
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
3400bab0:	2000      	movs	r0, #0
3400bab2:	4770      	bx	lr

3400bab4 <CMW_CAMERA_PIPE_FrameEventCallback>:
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
  UNUSED(pipe);

  return HAL_OK;
}
3400bab4:	2000      	movs	r0, #0
3400bab6:	4770      	bx	lr

3400bab8 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
3400bab8:	4b05      	ldr	r3, [pc, #20]	@ (3400bad0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x18>)
{
3400baba:	b510      	push	{r4, lr}
  if(Camera_Drv.VsyncEventCallback != NULL)
3400babc:	691b      	ldr	r3, [r3, #16]
{
3400babe:	460c      	mov	r4, r1
  if(Camera_Drv.VsyncEventCallback != NULL)
3400bac0:	b10b      	cbz	r3, 3400bac6 <HAL_DCMIPP_PIPE_VsyncEventCallback+0xe>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
3400bac2:	4804      	ldr	r0, [pc, #16]	@ (3400bad4 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>)
3400bac4:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
3400bac6:	4620      	mov	r0, r4
3400bac8:	f7ff fff2 	bl	3400bab0 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
3400bacc:	bd10      	pop	{r4, pc}
3400bace:	bf00      	nop
3400bad0:	340128a8 	.word	0x340128a8
3400bad4:	34012764 	.word	0x34012764

3400bad8 <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
3400bad8:	4b05      	ldr	r3, [pc, #20]	@ (3400baf0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x18>)
{
3400bada:	b510      	push	{r4, lr}
  if(Camera_Drv.FrameEventCallback != NULL)
3400badc:	695b      	ldr	r3, [r3, #20]
{
3400bade:	460c      	mov	r4, r1
  if(Camera_Drv.FrameEventCallback != NULL)
3400bae0:	b10b      	cbz	r3, 3400bae6 <HAL_DCMIPP_PIPE_FrameEventCallback+0xe>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
3400bae2:	4804      	ldr	r0, [pc, #16]	@ (3400baf4 <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>)
3400bae4:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
3400bae6:	4620      	mov	r0, r4
3400bae8:	f7ff ffe4 	bl	3400bab4 <CMW_CAMERA_PIPE_FrameEventCallback>
}
3400baec:	bd10      	pop	{r4, pc}
3400baee:	bf00      	nop
3400baf0:	340128a8 	.word	0x340128a8
3400baf4:	34012764 	.word	0x34012764

3400baf8 <DMA2D_IRQHandler>:
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(dma2d_current);
3400baf8:	4b01      	ldr	r3, [pc, #4]	@ (3400bb00 <DMA2D_IRQHandler+0x8>)
3400bafa:	6818      	ldr	r0, [r3, #0]
3400bafc:	f7f7 bad8 	b.w	340030b0 <HAL_DMA2D_IRQHandler>
3400bb00:	3401291c 	.word	0x3401291c

3400bb04 <USB1_OTG_HS_IRQHandler>:
  HAL_NVIC_EnableIRQ(USB1_OTG_HS_IRQn);
}

void USB1_OTG_HS_IRQHandler(void)
{
  UVCL_IRQHandler();
3400bb04:	f000 b800 	b.w	3400bb08 <UVCL_IRQHandler>

3400bb08 <UVCL_IRQHandler>:
void UVCL_IRQHandler()
{
#if defined(UVCL_USBD_USE_THREADX) || defined(UVCL_USBD_USE_FREERTOS)
  UVCL_stm32_usbd_IRQHandler();
#elif defined(UVC_LIB_USE_USBX)
  UVCL_stm32_usbx_IRQHandler();
3400bb08:	f000 b800 	b.w	3400bb0c <UVCL_stm32_usbx_IRQHandler>

3400bb0c <UVCL_stm32_usbx_IRQHandler>:
    __enable_irq();
}
#endif

void UVCL_stm32_usbx_IRQHandler()
{
3400bb0c:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&uvcl_pcd_handle);
3400bb0e:	4804      	ldr	r0, [pc, #16]	@ (3400bb20 <UVCL_stm32_usbx_IRQHandler+0x14>)
3400bb10:	f7f7 fe4e 	bl	340037b0 <HAL_PCD_IRQHandler>
    assert(ret == pdTRUE);
    HAL_NVIC_DisableIRQ(irqn_type);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  }
#else
  ux_system_tasks_run();
3400bb14:	f000 fa76 	bl	3400c004 <_ux_system_tasks_run>
  ux_system_tasks_run();
#endif
#endif
}
3400bb18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ux_system_tasks_run();
3400bb1c:	f000 ba72 	b.w	3400c004 <_ux_system_tasks_run>
3400bb20:	34012920 	.word	0x34012920

3400bb24 <HAL_PCD_SetupStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb24:	4b24      	ldr	r3, [pc, #144]	@ (3400bbb8 <HAL_PCD_SetupStageCallback+0x94>)
{
3400bb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb2a:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bb2c:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb30:	69dd      	ldr	r5, [r3, #28]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bb32:	2208      	movs	r2, #8
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
3400bb34:	686c      	ldr	r4, [r5, #4]
{
3400bb36:	4606      	mov	r6, r0
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bb38:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
3400bb3c:	f000 fa96 	bl	3400c06c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bb40:	2301      	movs	r3, #1
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bb42:	2200      	movs	r2, #0
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bb44:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bb46:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bb48:	63a2      	str	r2, [r4, #56]	@ 0x38
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bb4a:	f023 030e 	bic.w	r3, r3, #14
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bb4e:	6462      	str	r2, [r4, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bb50:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
3400bb52:	f994 105c 	ldrsb.w	r1, [r4, #92]	@ 0x5c
3400bb56:	4291      	cmp	r1, r2
3400bb58:	da04      	bge.n	3400bb64 <HAL_PCD_SetupStageCallback+0x40>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
3400bb5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb5e:	60ab      	str	r3, [r5, #8]
                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
            }
        }
    }
}
3400bb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
3400bb64:	73aa      	strb	r2, [r5, #14]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
3400bb66:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
3400bb6a:	b92a      	cbnz	r2, 3400bb78 <HAL_PCD_SetupStageCallback+0x54>
3400bb6c:	f894 2063 	ldrb.w	r2, [r4, #99]	@ 0x63
3400bb70:	b912      	cbnz	r2, 3400bb78 <HAL_PCD_SetupStageCallback+0x54>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3400bb76:	e7f2      	b.n	3400bb5e <HAL_PCD_SetupStageCallback+0x3a>
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bb78:	f104 0062 	add.w	r0, r4, #98	@ 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bb7c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bb7e:	f000 fa7f 	bl	3400c080 <_ux_utility_short_get>
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bb82:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bb86:	4603      	mov	r3, r0
3400bb88:	f04f 0800 	mov.w	r8, #0
3400bb8c:	6360      	str	r0, [r4, #52]	@ 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bb8e:	d907      	bls.n	3400bba0 <HAL_PCD_SetupStageCallback+0x7c>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
3400bb90:	4639      	mov	r1, r7
3400bb92:	4628      	mov	r0, r5
3400bb94:	f000 f94e 	bl	3400be34 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb98:	68ab      	ldr	r3, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
3400bb9a:	f885 800c 	strb.w	r8, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb9e:	e7e8      	b.n	3400bb72 <HAL_PCD_SetupStageCallback+0x4e>
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bba0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bba2:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bba6:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Receive(hpcd,
3400bba8:	4630      	mov	r0, r6
3400bbaa:	7bb9      	ldrb	r1, [r7, #14]
3400bbac:	f7f7 fd75 	bl	3400369a <HAL_PCD_EP_Receive>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
3400bbb0:	2302      	movs	r3, #2
3400bbb2:	732b      	strb	r3, [r5, #12]
3400bbb4:	e7d4      	b.n	3400bb60 <HAL_PCD_SetupStageCallback+0x3c>
3400bbb6:	bf00      	nop
3400bbb8:	34012e04 	.word	0x34012e04

3400bbbc <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bbbc:	4b2e      	ldr	r3, [pc, #184]	@ (3400bc78 <HAL_PCD_DataInStageCallback+0xbc>)
{
3400bbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bbc2:	681b      	ldr	r3, [r3, #0]
3400bbc4:	f001 020f 	and.w	r2, r1, #15
3400bbc8:	69df      	ldr	r7, [r3, #28]
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bbca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
3400bbce:	eb07 0282 	add.w	r2, r7, r2, lsl #2
{
3400bbd2:	4606      	mov	r6, r0
3400bbd4:	460d      	mov	r5, r1
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bbd6:	6854      	ldr	r4, [r2, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400bbd8:	2900      	cmp	r1, #0
3400bbda:	d13b      	bne.n	3400bc54 <HAL_PCD_DataInStageCallback+0x98>

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
3400bbdc:	7b3b      	ldrb	r3, [r7, #12]
3400bbde:	2b01      	cmp	r3, #1
3400bbe0:	d115      	bne.n	3400bc0e <HAL_PCD_DataInStageCallback+0x52>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bbe2:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
3400bbe6:	460b      	mov	r3, r1
3400bbe8:	460a      	mov	r2, r1
3400bbea:	f7f7 fd56 	bl	3400369a <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
3400bbee:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400bbf0:	f8b8 0010 	ldrh.w	r0, [r8, #16]
3400bbf4:	4281      	cmp	r1, r0
3400bbf6:	d81d      	bhi.n	3400bc34 <HAL_PCD_DataInStageCallback+0x78>
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
3400bbf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400bbfa:	2b01      	cmp	r3, #1
3400bbfc:	d109      	bne.n	3400bc12 <HAL_PCD_DataInStageCallback+0x56>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
3400bbfe:	462b      	mov	r3, r5
3400bc00:	462a      	mov	r2, r5
3400bc02:	4630      	mov	r0, r6
3400bc04:	f898 100e 	ldrb.w	r1, [r8, #14]
3400bc08:	f7f7 fd6d 	bl	340036e6 <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400bc0c:	65a5      	str	r5, [r4, #88]	@ 0x58
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
3400bc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bc12:	2302      	movs	r3, #2
3400bc14:	6223      	str	r3, [r4, #32]
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400bc16:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bc18:	6465      	str	r5, [r4, #68]	@ 0x44
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400bc1a:	63a3      	str	r3, [r4, #56]	@ 0x38
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bc1c:	68bb      	ldr	r3, [r7, #8]
3400bc1e:	f043 0308 	orr.w	r3, r3, #8
3400bc22:	60bb      	str	r3, [r7, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
3400bc24:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400bc26:	b113      	cbz	r3, 3400bc2e <HAL_PCD_DataInStageCallback+0x72>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bc28:	f104 0020 	add.w	r0, r4, #32
3400bc2c:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
3400bc2e:	2304      	movs	r3, #4
3400bc30:	733b      	strb	r3, [r7, #12]
3400bc32:	e7ec      	b.n	3400bc0e <HAL_PCD_DataInStageCallback+0x52>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc34:	1a0b      	subs	r3, r1, r0
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
3400bc36:	4283      	cmp	r3, r0
3400bc38:	bf28      	it	cs
3400bc3a:	4603      	movcs	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc3c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400bc3e:	1ac9      	subs	r1, r1, r3
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc40:	4402      	add	r2, r0
                HAL_PCD_EP_Transmit(hpcd,
3400bc42:	4630      	mov	r0, r6
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc44:	6322      	str	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400bc46:	63e1      	str	r1, [r4, #60]	@ 0x3c
                HAL_PCD_EP_Transmit(hpcd,
3400bc48:	f898 100e 	ldrb.w	r1, [r8, #14]
}
3400bc4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bc50:	f7f7 bd49 	b.w	340036e6 <HAL_PCD_EP_Transmit>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400bc54:	6da6      	ldr	r6, [r4, #88]	@ 0x58
3400bc56:	2300      	movs	r3, #0
            transfer_request -> ux_slave_transfer_request_requested_length)
3400bc58:	6b65      	ldr	r5, [r4, #52]	@ 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400bc5a:	b126      	cbz	r6, 3400bc66 <HAL_PCD_DataInStageCallback+0xaa>
3400bc5c:	b11d      	cbz	r5, 3400bc66 <HAL_PCD_DataInStageCallback+0xaa>
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bc5e:	461a      	mov	r2, r3
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400bc60:	65a3      	str	r3, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
3400bc62:	63e3      	str	r3, [r4, #60]	@ 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bc64:	e7f2      	b.n	3400bc4c <HAL_PCD_DataInStageCallback+0x90>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bc66:	6463      	str	r3, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bc68:	2302      	movs	r3, #2
3400bc6a:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bc6c:	6893      	ldr	r3, [r2, #8]
            transfer_request -> ux_slave_transfer_request_actual_length =
3400bc6e:	63a5      	str	r5, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bc70:	f043 0308 	orr.w	r3, r3, #8
3400bc74:	6093      	str	r3, [r2, #8]
}
3400bc76:	e7ca      	b.n	3400bc0e <HAL_PCD_DataInStageCallback+0x52>
3400bc78:	34012e04 	.word	0x34012e04

3400bc7c <HAL_PCD_DataOutStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bc7c:	4a23      	ldr	r2, [pc, #140]	@ (3400bd0c <HAL_PCD_DataOutStageCallback+0x90>)
{
3400bc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bc82:	6812      	ldr	r2, [r2, #0]
3400bc84:	f001 050f 	and.w	r5, r1, #15
3400bc88:	69d6      	ldr	r6, [r2, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bc8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3400bc8e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
{
3400bc92:	4607      	mov	r7, r0
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bc94:	686c      	ldr	r4, [r5, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400bc96:	bb61      	cbnz	r1, 3400bcf2 <HAL_PCD_DataOutStageCallback+0x76>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
3400bc98:	7b33      	ldrb	r3, [r6, #12]
3400bc9a:	2b02      	cmp	r3, #2
3400bc9c:	d110      	bne.n	3400bcc0 <HAL_PCD_DataOutStageCallback+0x44>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
3400bc9e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400bca0:	f7f7 fd19 	bl	340036d6 <HAL_PCD_EP_GetRxCount>

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400bca4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
                transfer_request -> ux_slave_transfer_request_requested_length)
3400bca6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400bca8:	4403      	add	r3, r0
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400bcaa:	4293      	cmp	r3, r2
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400bcac:	63a3      	str	r3, [r4, #56]	@ 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400bcae:	d812      	bhi.n	3400bcd6 <HAL_PCD_DataOutStageCallback+0x5a>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
3400bcb0:	d002      	beq.n	3400bcb8 <HAL_PCD_DataOutStageCallback+0x3c>
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
3400bcb2:	8a2b      	ldrh	r3, [r5, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
3400bcb4:	4283      	cmp	r3, r0
3400bcb6:	d005      	beq.n	3400bcc4 <HAL_PCD_DataOutStageCallback+0x48>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
3400bcb8:	68b3      	ldr	r3, [r6, #8]
3400bcba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
3400bcbe:	60b3      	str	r3, [r6, #8]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
3400bcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bcc4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400bcc6:	4638      	mov	r0, r7
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bcc8:	441a      	add	r2, r3
3400bcca:	6322      	str	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400bccc:	7ba9      	ldrb	r1, [r5, #14]
}
3400bcce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    HAL_PCD_EP_Receive(hpcd,
3400bcd2:	f7f7 bce2 	b.w	3400369a <HAL_PCD_EP_Receive>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
3400bcd6:	2327      	movs	r3, #39	@ 0x27
3400bcd8:	6463      	str	r3, [r4, #68]	@ 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bcda:	68b3      	ldr	r3, [r6, #8]
3400bcdc:	f043 0308 	orr.w	r3, r3, #8
3400bce0:	60b3      	str	r3, [r6, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
3400bce2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400bce4:	2b00      	cmp	r3, #0
3400bce6:	d0eb      	beq.n	3400bcc0 <HAL_PCD_DataOutStageCallback+0x44>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bce8:	f104 0020 	add.w	r0, r4, #32
}
3400bcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bcf0:	4718      	bx	r3
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400bcf2:	f7f7 fcf0 	bl	340036d6 <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bcf6:	2300      	movs	r3, #0
3400bcf8:	6463      	str	r3, [r4, #68]	@ 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bcfa:	2302      	movs	r3, #2
3400bcfc:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bcfe:	68ab      	ldr	r3, [r5, #8]
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400bd00:	63a0      	str	r0, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bd02:	f043 0308 	orr.w	r3, r3, #8
3400bd06:	60ab      	str	r3, [r5, #8]
}
3400bd08:	e7da      	b.n	3400bcc0 <HAL_PCD_DataOutStageCallback+0x44>
3400bd0a:	bf00      	nop
3400bd0c:	34012e04 	.word	0x34012e04

3400bd10 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
3400bd10:	b538      	push	{r3, r4, r5, lr}

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bd12:	4c0a      	ldr	r4, [pc, #40]	@ (3400bd3c <HAL_PCD_ResetCallback+0x2c>)
{
3400bd14:	4605      	mov	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bd16:	6823      	ldr	r3, [r4, #0]
3400bd18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400bd1a:	b10b      	cbz	r3, 3400bd20 <HAL_PCD_ResetCallback+0x10>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
3400bd1c:	f000 f902 	bl	3400bf24 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
3400bd20:	79ea      	ldrb	r2, [r5, #7]
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400bd22:	6823      	ldr	r3, [r4, #0]
    switch(hpcd -> Init.speed)
3400bd24:	2a00      	cmp	r2, #0
3400bd26:	bf0c      	ite	eq
3400bd28:	2202      	moveq	r2, #2
3400bd2a:	2201      	movne	r2, #1
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400bd2c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
3400bd30:	f000 f88e 	bl	3400be50 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400bd34:	2201      	movs	r2, #1
3400bd36:	6823      	ldr	r3, [r4, #0]
3400bd38:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400bd3a:	bd38      	pop	{r3, r4, r5, pc}
3400bd3c:	34012e04 	.word	0x34012e04

3400bd40 <HAL_PCD_ConnectCallback>:
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd40:	4b03      	ldr	r3, [pc, #12]	@ (3400bd50 <HAL_PCD_ConnectCallback+0x10>)
3400bd42:	681b      	ldr	r3, [r3, #0]
3400bd44:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd48:	b10b      	cbz	r3, 3400bd4e <HAL_PCD_ConnectCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
3400bd4a:	20f1      	movs	r0, #241	@ 0xf1
3400bd4c:	4718      	bx	r3
    }
}
3400bd4e:	4770      	bx	lr
3400bd50:	34012e04 	.word	0x34012e04

3400bd54 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
3400bd54:	b510      	push	{r4, lr}

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd56:	4c07      	ldr	r4, [pc, #28]	@ (3400bd74 <HAL_PCD_DisconnectCallback+0x20>)
3400bd58:	6823      	ldr	r3, [r4, #0]
3400bd5a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd5e:	b10b      	cbz	r3, 3400bd64 <HAL_PCD_DisconnectCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
3400bd60:	20f2      	movs	r0, #242	@ 0xf2
3400bd62:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bd64:	6823      	ldr	r3, [r4, #0]
3400bd66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400bd68:	b11b      	cbz	r3, 3400bd72 <HAL_PCD_DisconnectCallback+0x1e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
    }
}
3400bd6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _ux_device_stack_disconnect();
3400bd6e:	f000 b8d9 	b.w	3400bf24 <_ux_device_stack_disconnect>
}
3400bd72:	bd10      	pop	{r4, pc}
3400bd74:	34012e04 	.word	0x34012e04

3400bd78 <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd78:	4b03      	ldr	r3, [pc, #12]	@ (3400bd88 <HAL_PCD_SuspendCallback+0x10>)
3400bd7a:	681b      	ldr	r3, [r3, #0]
3400bd7c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd80:	b10b      	cbz	r3, 3400bd86 <HAL_PCD_SuspendCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
3400bd82:	20f4      	movs	r0, #244	@ 0xf4
3400bd84:	4718      	bx	r3
    }
}
3400bd86:	4770      	bx	lr
3400bd88:	34012e04 	.word	0x34012e04

3400bd8c <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd8c:	4b03      	ldr	r3, [pc, #12]	@ (3400bd9c <HAL_PCD_ResumeCallback+0x10>)
3400bd8e:	681b      	ldr	r3, [r3, #0]
3400bd90:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd94:	b10b      	cbz	r3, 3400bd9a <HAL_PCD_ResumeCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
3400bd96:	20f3      	movs	r0, #243	@ 0xf3
3400bd98:	4718      	bx	r3
    }
}
3400bd9a:	4770      	bx	lr
3400bd9c:	34012e04 	.word	0x34012e04

3400bda0 <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bda0:	4b03      	ldr	r3, [pc, #12]	@ (3400bdb0 <HAL_PCD_SOFCallback+0x10>)
3400bda2:	681b      	ldr	r3, [r3, #0]
3400bda4:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bda8:	b10b      	cbz	r3, 3400bdae <HAL_PCD_SOFCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
3400bdaa:	20f0      	movs	r0, #240	@ 0xf0
3400bdac:	4718      	bx	r3
    }
}
3400bdae:	4770      	bx	lr
3400bdb0:	34012e04 	.word	0x34012e04

3400bdb4 <HAL_PCD_ISOINIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bdb4:	4b0e      	ldr	r3, [pc, #56]	@ (3400bdf0 <HAL_PCD_ISOINIncompleteCallback+0x3c>)
3400bdb6:	f001 010f 	and.w	r1, r1, #15
3400bdba:	681b      	ldr	r3, [r3, #0]
3400bdbc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400bdc0:	69d8      	ldr	r0, [r3, #28]
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
#else
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0U)
3400bdc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400bdc6:	688b      	ldr	r3, [r1, #8]
3400bdc8:	07db      	lsls	r3, r3, #31
3400bdca:	d50f      	bpl.n	3400bdec <HAL_PCD_ISOINIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400bdcc:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bdce:	7bd3      	ldrb	r3, [r2, #15]
3400bdd0:	f003 0303 	and.w	r3, r3, #3
3400bdd4:	2b01      	cmp	r3, #1
3400bdd6:	d109      	bne.n	3400bdec <HAL_PCD_ISOINIncompleteCallback+0x38>
3400bdd8:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != 0)
3400bddc:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bdde:	2b00      	cmp	r3, #0
3400bde0:	da04      	bge.n	3400bdec <HAL_PCD_ISOINIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
3400bde2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400bde4:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400bde6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400bde8:	f7f7 bc7d 	b.w	340036e6 <HAL_PCD_EP_Transmit>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400bdec:	4770      	bx	lr
3400bdee:	bf00      	nop
3400bdf0:	34012e04 	.word	0x34012e04

3400bdf4 <HAL_PCD_ISOOUTIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bdf4:	4b0e      	ldr	r3, [pc, #56]	@ (3400be30 <HAL_PCD_ISOOUTIncompleteCallback+0x3c>)
3400bdf6:	f001 010f 	and.w	r1, r1, #15
3400bdfa:	681b      	ldr	r3, [r3, #0]
3400bdfc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400be00:	69d8      	ldr	r0, [r3, #28]

    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
3400be02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400be06:	688b      	ldr	r3, [r1, #8]
3400be08:	07db      	lsls	r3, r3, #31
3400be0a:	d50f      	bpl.n	3400be2c <HAL_PCD_ISOOUTIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400be0c:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400be0e:	7bd3      	ldrb	r3, [r2, #15]
3400be10:	f003 0303 	and.w	r3, r3, #3
3400be14:	2b01      	cmp	r3, #1
3400be16:	d109      	bne.n	3400be2c <HAL_PCD_ISOOUTIncompleteCallback+0x38>
3400be18:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == 0)
3400be1c:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400be1e:	2b00      	cmp	r3, #0
3400be20:	db04      	blt.n	3400be2c <HAL_PCD_ISOOUTIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
3400be22:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400be24:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400be26:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400be28:	f7f7 bc37 	b.w	3400369a <HAL_PCD_EP_Receive>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400be2c:	4770      	bx	lr
3400be2e:	bf00      	nop
3400be30:	34012e04 	.word	0x34012e04

3400be34 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
3400be34:	b508      	push	{r3, lr}

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
3400be36:	688b      	ldr	r3, [r1, #8]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400be38:	6f00      	ldr	r0, [r0, #112]	@ 0x70
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
3400be3a:	685a      	ldr	r2, [r3, #4]
3400be3c:	f042 0204 	orr.w	r2, r2, #4
3400be40:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400be42:	7b89      	ldrb	r1, [r1, #14]
3400be44:	7a9b      	ldrb	r3, [r3, #10]
3400be46:	4319      	orrs	r1, r3
3400be48:	f7f7 fc67 	bl	3400371a <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
3400be4c:	2000      	movs	r0, #0
3400be4e:	bd08      	pop	{r3, pc}

3400be50 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
3400be50:	b570      	push	{r4, r5, r6, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400be52:	4e32      	ldr	r6, [pc, #200]	@ (3400bf1c <_ux_dcd_stm32_initialize_complete+0xcc>)
3400be54:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400be56:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400be5a:	69e5      	ldr	r5, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400be5c:	2b01      	cmp	r3, #1
3400be5e:	d147      	bne.n	3400bef0 <_ux_dcd_stm32_initialize_complete+0xa0>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
3400be60:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
3400be64:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400be68:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
3400be6c:	220e      	movs	r2, #14
3400be6e:	492c      	ldr	r1, [pc, #176]	@ (3400bf20 <_ux_dcd_stm32_initialize_complete+0xd0>)
3400be70:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400be74:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
    _ux_utility_descriptor_parse(device_framework,
3400be78:	f104 0328 	add.w	r3, r4, #40	@ 0x28
3400be7c:	f000 f8c7 	bl	3400c00e <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
3400be80:	f242 7310 	movw	r3, #10000	@ 0x2710
3400be84:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400be88:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
                            transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400be8a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400be8e:	66e3      	str	r3, [r4, #108]	@ 0x6c

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400be90:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400be94:	6662      	str	r2, [r4, #100]	@ 0x64

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400be96:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400be98:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400be9c:	6723      	str	r3, [r4, #112]	@ 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400be9e:	4620      	mov	r0, r4
3400bea0:	69a3      	ldr	r3, [r4, #24]
3400bea2:	4798      	blx	r3
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
3400bea4:	2100      	movs	r1, #0
3400bea6:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400bea8:	f7f7 ffe8 	bl	34003e7c <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400beac:	2300      	movs	r3, #0
3400beae:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400beb2:	4619      	mov	r1, r3
3400beb4:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400beb6:	f7f7 fbb7 	bl	34003628 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
3400beba:	2180      	movs	r1, #128	@ 0x80
3400bebc:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400bebe:	f7f7 ffdd 	bl	34003e7c <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400bec2:	2300      	movs	r3, #0
3400bec4:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400bec8:	2180      	movs	r1, #128	@ 0x80
3400beca:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400becc:	f7f7 fbac 	bl	34003628 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400bed0:	2300      	movs	r3, #0

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400bed2:	2208      	movs	r2, #8
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bed4:	2001      	movs	r0, #1
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bed6:	e9c4 321d 	strd	r3, r2, [r4, #116]	@ 0x74
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400beda:	6423      	str	r3, [r4, #64]	@ 0x40

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bedc:	6833      	ldr	r3, [r6, #0]
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
3400bede:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bee2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400bee6:	6722      	str	r2, [r4, #112]	@ 0x70
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bee8:	b103      	cbz	r3, 3400beec <_ux_dcd_stm32_initialize_complete+0x9c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
3400beea:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
3400beec:	2000      	movs	r0, #0
3400beee:	bd70      	pop	{r4, r5, r6, pc}
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
3400bef0:	2300      	movs	r3, #0
3400bef2:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
3400bef6:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400befa:	2b01      	cmp	r3, #1
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400befc:	bf0b      	itete	eq
3400befe:	f8d4 30d4 	ldreq.w	r3, [r4, #212]	@ 0xd4
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400bf02:	f8d4 30dc 	ldrne.w	r3, [r4, #220]	@ 0xdc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400bf06:	f8c4 30cc 	streq.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400bf0a:	f8c4 30cc 	strne.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
3400bf0e:	bf0c      	ite	eq
3400bf10:	f8d4 30d8 	ldreq.w	r3, [r4, #216]	@ 0xd8
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
3400bf14:	f8d4 30e0 	ldrne.w	r3, [r4, #224]	@ 0xe0
3400bf18:	e7a8      	b.n	3400be6c <_ux_dcd_stm32_initialize_complete+0x1c>
3400bf1a:	bf00      	nop
3400bf1c:	34012e04 	.word	0x34012e04
3400bf20:	340123a0 	.word	0x340123a0

3400bf24 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
3400bf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400bf28:	4f19      	ldr	r7, [pc, #100]	@ (3400bf90 <_ux_device_stack_disconnect+0x6c>)
{
3400bf2a:	b08c      	sub	sp, #48	@ 0x30
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400bf2c:	683c      	ldr	r4, [r7, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
3400bf2e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
3400bf30:	2e03      	cmp	r6, #3
3400bf32:	d128      	bne.n	3400bf86 <_ux_device_stack_disconnect+0x62>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
3400bf34:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
3400bf38:	b9b5      	cbnz	r5, 3400bf68 <_ux_device_stack_disconnect+0x44>
            interface_ptr =  next_interface;
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400bf3a:	2301      	movs	r3, #1
3400bf3c:	6263      	str	r3, [r4, #36]	@ 0x24

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
3400bf3e:	210f      	movs	r1, #15
3400bf40:	4620      	mov	r0, r4
3400bf42:	69a3      	ldr	r3, [r4, #24]
3400bf44:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
3400bf48:	4798      	blx	r3
3400bf4a:	4605      	mov	r5, r0
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
3400bf4c:	2300      	movs	r3, #0
3400bf4e:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
3400bf52:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bf54:	683b      	ldr	r3, [r7, #0]
3400bf56:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bf5a:	b10b      	cbz	r3, 3400bf60 <_ux_device_stack_disconnect+0x3c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
3400bf5c:	200a      	movs	r0, #10
3400bf5e:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
3400bf60:	4628      	mov	r0, r5
3400bf62:	b00c      	add	sp, #48	@ 0x30
3400bf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            class_ptr =  interface_ptr -> ux_slave_interface_class;
3400bf68:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
3400bf6a:	9601      	str	r6, [sp, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
3400bf6c:	9503      	str	r5, [sp, #12]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
3400bf6e:	9309      	str	r3, [sp, #36]	@ 0x24
            if (class_ptr != UX_NULL)
3400bf70:	b113      	cbz	r3, 3400bf78 <_ux_device_stack_disconnect+0x54>
                class_ptr -> ux_slave_class_entry_function(&class_command);
3400bf72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400bf74:	a801      	add	r0, sp, #4
3400bf76:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bf78:	f8d5 8018 	ldr.w	r8, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
3400bf7c:	4628      	mov	r0, r5
3400bf7e:	f000 f809 	bl	3400bf94 <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
3400bf82:	4645      	mov	r5, r8
3400bf84:	e7d8      	b.n	3400bf38 <_ux_device_stack_disconnect+0x14>
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
3400bf86:	2e01      	cmp	r6, #1
3400bf88:	d0d9      	beq.n	3400bf3e <_ux_device_stack_disconnect+0x1a>
UINT                        status = UX_ERROR;
3400bf8a:	25ff      	movs	r5, #255	@ 0xff
3400bf8c:	e7de      	b.n	3400bf4c <_ux_device_stack_disconnect+0x28>
3400bf8e:	bf00      	nop
3400bf90:	34012e04 	.word	0x34012e04

3400bf94 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
3400bf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400bf98:	4605      	mov	r5, r0

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
3400bf9a:	2600      	movs	r6, #0
    device =  &_ux_system_slave -> ux_system_slave_device;
3400bf9c:	4f0e      	ldr	r7, [pc, #56]	@ (3400bfd8 <_ux_device_stack_interface_delete+0x44>)
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
3400bf9e:	69c4      	ldr	r4, [r0, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
3400bfa0:	f8d7 8000 	ldr.w	r8, [r7]
    while (next_endpoint != UX_NULL)
3400bfa4:	b954      	cbnz	r4, 3400bfbc <_ux_device_stack_interface_delete+0x28>
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bfa6:	69ab      	ldr	r3, [r5, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
3400bfa8:	4620      	mov	r0, r4
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bfaa:	f8c8 30b4 	str.w	r3, [r8, #180]	@ 0xb4
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
3400bfae:	e9c5 4401 	strd	r4, r4, [r5, #4]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
3400bfb2:	e9c5 4406 	strd	r4, r4, [r5, #24]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
3400bfb6:	602c      	str	r4, [r5, #0]
}
3400bfb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
3400bfbc:	6838      	ldr	r0, [r7, #0]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400bfbe:	f8d4 9014 	ldr.w	r9, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
3400bfc2:	4622      	mov	r2, r4
3400bfc4:	210f      	movs	r1, #15
3400bfc6:	6983      	ldr	r3, [r0, #24]
3400bfc8:	4798      	blx	r3
        endpoint -> ux_slave_endpoint_state =  0;
3400bfca:	e9c4 6600 	strd	r6, r6, [r4]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
3400bfce:	e9c4 6605 	strd	r6, r6, [r4, #20]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
3400bfd2:	61e6      	str	r6, [r4, #28]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400bfd4:	464c      	mov	r4, r9
3400bfd6:	e7e5      	b.n	3400bfa4 <_ux_device_stack_interface_delete+0x10>
3400bfd8:	34012e04 	.word	0x34012e04

3400bfdc <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
3400bfdc:	b510      	push	{r4, lr}


    status = UX_STATE_RESET;

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400bfde:	4c08      	ldr	r4, [pc, #32]	@ (3400c000 <_ux_device_stack_tasks_run+0x24>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400bfe0:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400bfe2:	6820      	ldr	r0, [r4, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400bfe4:	2112      	movs	r1, #18
3400bfe6:	6983      	ldr	r3, [r0, #24]
3400bfe8:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400bfea:	6823      	ldr	r3, [r4, #0]
    status = UX_STATE_RESET;
3400bfec:	2000      	movs	r0, #0
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400bfee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
3400bff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400bff4:	b11a      	cbz	r2, 3400bffe <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
3400bff6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400bff8:	b10a      	cbz	r2, 3400bffe <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
3400bffa:	6c98      	ldr	r0, [r3, #72]	@ 0x48
3400bffc:	4790      	blx	r2
        class_instance ++;
    }

    /* Return overall status.  */
    return(status);
}
3400bffe:	bd10      	pop	{r4, pc}
3400c000:	34012e04 	.word	0x34012e04

3400c004 <_ux_system_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_tasks_run(VOID)
{
3400c004:	b508      	push	{r3, lr}
#if defined(UX_DEVICE_STANDALONE) && !defined(UX_HOST_SIDE_ONLY)
    _ux_device_stack_tasks_run();
3400c006:	f7ff ffe9 	bl	3400bfdc <_ux_device_stack_tasks_run>
    _ux_otg_tasks_run();
#endif

   /* Return code not used now.  */
   return(0);
}
3400c00a:	2000      	movs	r0, #0
3400c00c:	bd08      	pop	{r3, pc}

3400c00e <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
3400c00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400c012:	4605      	mov	r5, r0
3400c014:	460e      	mov	r6, r1
3400c016:	461c      	mov	r4, r3
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
                *descriptor++ =  0;
3400c018:	f04f 0800 	mov.w	r8, #0
3400c01c:	188f      	adds	r7, r1, r2
    while(descriptor_entries--)
3400c01e:	42be      	cmp	r6, r7
3400c020:	d101      	bne.n	3400c026 <_ux_utility_descriptor_parse+0x18>
        }
    }

    /* Return to caller.  */
    return;
}
3400c022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(*descriptor_structure++)
3400c026:	f816 3b01 	ldrb.w	r3, [r6], #1
3400c02a:	2b02      	cmp	r3, #2
3400c02c:	d013      	beq.n	3400c056 <_ux_utility_descriptor_parse+0x48>
3400c02e:	2b04      	cmp	r3, #4
3400c030:	d006      	beq.n	3400c040 <_ux_utility_descriptor_parse+0x32>
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
3400c032:	f815 3b01 	ldrb.w	r3, [r5], #1
3400c036:	f804 3b01 	strb.w	r3, [r4], #1
            descriptor ++;
3400c03a:	e7f0      	b.n	3400c01e <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c03c:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 3u)
3400c040:	07a2      	lsls	r2, r4, #30
3400c042:	d1fb      	bne.n	3400c03c <_ux_utility_descriptor_parse+0x2e>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c044:	4628      	mov	r0, r5
3400c046:	f000 f80f 	bl	3400c068 <_ux_utility_long_get>
            raw_descriptor +=  4;
3400c04a:	3504      	adds	r5, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c04c:	f844 0b04 	str.w	r0, [r4], #4
            break;
3400c050:	e7e5      	b.n	3400c01e <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c052:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 1u)
3400c056:	07e3      	lsls	r3, r4, #31
3400c058:	d4fb      	bmi.n	3400c052 <_ux_utility_descriptor_parse+0x44>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c05a:	4628      	mov	r0, r5
3400c05c:	f000 f810 	bl	3400c080 <_ux_utility_short_get>
            raw_descriptor += 2;
3400c060:	3502      	adds	r5, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c062:	f824 0b02 	strh.w	r0, [r4], #2
            break;
3400c066:	e7da      	b.n	3400c01e <_ux_utility_descriptor_parse+0x10>

3400c068 <_ux_utility_long_get>:
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;

    /* Return 32-bit value.  */
    return(value);
}
3400c068:	6800      	ldr	r0, [r0, #0]
3400c06a:	4770      	bx	lr

3400c06c <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
3400c06c:	3801      	subs	r0, #1
3400c06e:	3201      	adds	r2, #1
3400c070:	3a01      	subs	r2, #1
3400c072:	d100      	bne.n	3400c076 <_ux_utility_memory_copy+0xa>
        *destination++ =  *source++;
    }

    /* Return to caller.  */
    return; 
}
3400c074:	4770      	bx	lr
        *destination++ =  *source++;
3400c076:	f811 3b01 	ldrb.w	r3, [r1], #1
3400c07a:	f800 3f01 	strb.w	r3, [r0, #1]!
3400c07e:	e7f7      	b.n	3400c070 <_ux_utility_memory_copy+0x4>

3400c080 <_ux_utility_short_get>:
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);

    /* Return to caller.  */
    return((ULONG) value);
}
3400c080:	8800      	ldrh	r0, [r0, #0]
3400c082:	4770      	bx	lr

3400c084 <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
3400c084:	b510      	push	{r4, lr}
  if (done != 0)
3400c086:	4ba3      	ldr	r3, [pc, #652]	@ (3400c314 <LL_ATON_Init+0x290>)
{
3400c088:	b088      	sub	sp, #32
  if (done != 0)
3400c08a:	781a      	ldrb	r2, [r3, #0]
3400c08c:	b90a      	cbnz	r2, 3400c092 <LL_ATON_Init+0xe>
  done = 1;
3400c08e:	2201      	movs	r2, #1
3400c090:	701a      	strb	r2, [r3, #0]
  int i;

  ll_aton_static_checks();

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
3400c092:	4ba1      	ldr	r3, [pc, #644]	@ (3400c318 <LL_ATON_Init+0x294>)
3400c094:	681a      	ldr	r2, [r3, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
3400c096:	f042 0202 	orr.w	r2, r2, #2
  ATON_CLKCTRL_CTRL_SET(0, t);
3400c09a:	601a      	str	r2, [r3, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
3400c09c:	2201      	movs	r2, #1
3400c09e:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
3400c0a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400c0a4:	609a      	str	r2, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
3400c0a6:	60da      	str	r2, [r3, #12]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
3400c0a8:	2200      	movs	r2, #0
3400c0aa:	611a      	str	r2, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c0ac:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
3400c0b0:	685c      	ldr	r4, [r3, #4]
3400c0b2:	2c00      	cmp	r4, #0
3400c0b4:	d0fc      	beq.n	3400c0b0 <LL_ATON_Init+0x2c>
3400c0b6:	f245 0301 	movw	r3, #20481	@ 0x5001
3400c0ba:	b2a2      	uxth	r2, r4
3400c0bc:	429a      	cmp	r2, r3
3400c0be:	f040 8092 	bne.w	3400c1e6 <LL_ATON_Init+0x162>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c0c2:	4b96      	ldr	r3, [pc, #600]	@ (3400c31c <LL_ATON_Init+0x298>)
3400c0c4:	685c      	ldr	r4, [r3, #4]
3400c0c6:	2c00      	cmp	r4, #0
3400c0c8:	d0fc      	beq.n	3400c0c4 <LL_ATON_Init+0x40>
3400c0ca:	f245 1317 	movw	r3, #20759	@ 0x5117
3400c0ce:	b2a2      	uxth	r2, r4
3400c0d0:	429a      	cmp	r2, r3
3400c0d2:	f040 80b0 	bne.w	3400c236 <LL_ATON_Init+0x1b2>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c0d6:	4b92      	ldr	r3, [pc, #584]	@ (3400c320 <LL_ATON_Init+0x29c>)
3400c0d8:	685c      	ldr	r4, [r3, #4]
3400c0da:	2c00      	cmp	r4, #0
3400c0dc:	d0fc      	beq.n	3400c0d8 <LL_ATON_Init+0x54>
3400c0de:	f241 131c 	movw	r3, #4380	@ 0x111c
3400c0e2:	b2a2      	uxth	r2, r4
3400c0e4:	429a      	cmp	r2, r3
3400c0e6:	f040 80cc 	bne.w	3400c282 <LL_ATON_Init+0x1fe>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c0ea:	4b8e      	ldr	r3, [pc, #568]	@ (3400c324 <LL_ATON_Init+0x2a0>)
3400c0ec:	685c      	ldr	r4, [r3, #4]
3400c0ee:	2c00      	cmp	r4, #0
3400c0f0:	d0fc      	beq.n	3400c0ec <LL_ATON_Init+0x68>
3400c0f2:	f241 031a 	movw	r3, #4122	@ 0x101a
3400c0f6:	b2a2      	uxth	r2, r4
3400c0f8:	429a      	cmp	r2, r3
3400c0fa:	f040 80e6 	bne.w	3400c2ca <LL_ATON_Init+0x246>
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c0fe:	4b8a      	ldr	r3, [pc, #552]	@ (3400c328 <LL_ATON_Init+0x2a4>)
3400c100:	685c      	ldr	r4, [r3, #4]
3400c102:	2c00      	cmp	r4, #0
3400c104:	d0fc      	beq.n	3400c100 <LL_ATON_Init+0x7c>
3400c106:	f241 131b 	movw	r3, #4379	@ 0x111b
3400c10a:	b2a2      	uxth	r2, r4
3400c10c:	429a      	cmp	r2, r3
3400c10e:	f040 812d 	bne.w	3400c36c <LL_ATON_Init+0x2e8>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c112:	4b86      	ldr	r3, [pc, #536]	@ (3400c32c <LL_ATON_Init+0x2a8>)
3400c114:	685c      	ldr	r4, [r3, #4]
3400c116:	2c00      	cmp	r4, #0
3400c118:	d0fc      	beq.n	3400c114 <LL_ATON_Init+0x90>
3400c11a:	f641 2319 	movw	r3, #6681	@ 0x1a19
3400c11e:	b2a2      	uxth	r2, r4
3400c120:	429a      	cmp	r2, r3
3400c122:	f040 8147 	bne.w	3400c3b4 <LL_ATON_Init+0x330>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c126:	4b82      	ldr	r3, [pc, #520]	@ (3400c330 <LL_ATON_Init+0x2ac>)
3400c128:	685c      	ldr	r4, [r3, #4]
3400c12a:	2c00      	cmp	r4, #0
3400c12c:	d0fc      	beq.n	3400c128 <LL_ATON_Init+0xa4>
3400c12e:	f241 1321 	movw	r3, #4385	@ 0x1121
3400c132:	b2a2      	uxth	r2, r4
3400c134:	429a      	cmp	r2, r3
3400c136:	f040 8162 	bne.w	3400c3fe <LL_ATON_Init+0x37a>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c13a:	4b7e      	ldr	r3, [pc, #504]	@ (3400c334 <LL_ATON_Init+0x2b0>)
3400c13c:	685c      	ldr	r4, [r3, #4]
3400c13e:	2c00      	cmp	r4, #0
3400c140:	d0fc      	beq.n	3400c13c <LL_ATON_Init+0xb8>
3400c142:	f243 2320 	movw	r3, #12832	@ 0x3220
3400c146:	b2a2      	uxth	r2, r4
3400c148:	429a      	cmp	r2, r3
3400c14a:	f040 817c 	bne.w	3400c446 <LL_ATON_Init+0x3c2>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c14e:	4b72      	ldr	r3, [pc, #456]	@ (3400c318 <LL_ATON_Init+0x294>)
3400c150:	685c      	ldr	r4, [r3, #4]
3400c152:	2c00      	cmp	r4, #0
3400c154:	d0fc      	beq.n	3400c150 <LL_ATON_Init+0xcc>
3400c156:	f241 231f 	movw	r3, #4639	@ 0x121f
3400c15a:	b2a2      	uxth	r2, r4
3400c15c:	429a      	cmp	r2, r3
3400c15e:	f040 8198 	bne.w	3400c492 <LL_ATON_Init+0x40e>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c162:	4b75      	ldr	r3, [pc, #468]	@ (3400c338 <LL_ATON_Init+0x2b4>)
3400c164:	685c      	ldr	r4, [r3, #4]
3400c166:	2c00      	cmp	r4, #0
3400c168:	d0fc      	beq.n	3400c164 <LL_ATON_Init+0xe0>
3400c16a:	f241 131e 	movw	r3, #4382	@ 0x111e
3400c16e:	b2a2      	uxth	r2, r4
3400c170:	429a      	cmp	r2, r3
3400c172:	f040 81b4 	bne.w	3400c4de <LL_ATON_Init+0x45a>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c176:	4b71      	ldr	r3, [pc, #452]	@ (3400c33c <LL_ATON_Init+0x2b8>)
3400c178:	685c      	ldr	r4, [r3, #4]
3400c17a:	2c00      	cmp	r4, #0
3400c17c:	d0fc      	beq.n	3400c178 <LL_ATON_Init+0xf4>
3400c17e:	b2a3      	uxth	r3, r4
3400c180:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
3400c184:	f040 81cf 	bne.w	3400c526 <LL_ATON_Init+0x4a2>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c188:	4a6d      	ldr	r2, [pc, #436]	@ (3400c340 <LL_ATON_Init+0x2bc>)
3400c18a:	6854      	ldr	r4, [r2, #4]
3400c18c:	2c00      	cmp	r4, #0
3400c18e:	d0fc      	beq.n	3400c18a <LL_ATON_Init+0x106>
3400c190:	f245 031d 	movw	r3, #20509	@ 0x501d
3400c194:	b2a1      	uxth	r1, r4
3400c196:	4299      	cmp	r1, r3
3400c198:	f000 81ec 	beq.w	3400c574 <LL_ATON_Init+0x4f0>
3400c19c:	f002 fd1a 	bl	3400ebd4 <__errno>
3400c1a0:	6803      	ldr	r3, [r0, #0]
3400c1a2:	2b00      	cmp	r3, #0
3400c1a4:	f000 81e4 	beq.w	3400c570 <LL_ATON_Init+0x4ec>
3400c1a8:	f002 fd14 	bl	3400ebd4 <__errno>
3400c1ac:	6800      	ldr	r0, [r0, #0]
3400c1ae:	f002 fcab 	bl	3400eb08 <strerror>
3400c1b2:	4603      	mov	r3, r0
3400c1b4:	2205      	movs	r2, #5
3400c1b6:	2100      	movs	r1, #0
3400c1b8:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c1bc:	221d      	movs	r2, #29
3400c1be:	9204      	str	r2, [sp, #16]
3400c1c0:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c1c4:	9203      	str	r2, [sp, #12]
3400c1c6:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c1ca:	9202      	str	r2, [sp, #8]
3400c1cc:	4a5d      	ldr	r2, [pc, #372]	@ (3400c344 <LL_ATON_Init+0x2c0>)
3400c1ce:	b2e4      	uxtb	r4, r4
3400c1d0:	495d      	ldr	r1, [pc, #372]	@ (3400c348 <LL_ATON_Init+0x2c4>)
3400c1d2:	9200      	str	r2, [sp, #0]
3400c1d4:	485d      	ldr	r0, [pc, #372]	@ (3400c34c <LL_ATON_Init+0x2c8>)
3400c1d6:	22fb      	movs	r2, #251	@ 0xfb
3400c1d8:	9401      	str	r4, [sp, #4]
3400c1da:	f002 f95f 	bl	3400e49c <iprintf>
3400c1de:	21fb      	movs	r1, #251	@ 0xfb
3400c1e0:	4b5b      	ldr	r3, [pc, #364]	@ (3400c350 <LL_ATON_Init+0x2cc>)
3400c1e2:	4a5c      	ldr	r2, [pc, #368]	@ (3400c354 <LL_ATON_Init+0x2d0>)
3400c1e4:	e022      	b.n	3400c22c <LL_ATON_Init+0x1a8>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c1e6:	f002 fcf5 	bl	3400ebd4 <__errno>
3400c1ea:	6803      	ldr	r3, [r0, #0]
3400c1ec:	b30b      	cbz	r3, 3400c232 <LL_ATON_Init+0x1ae>
3400c1ee:	f002 fcf1 	bl	3400ebd4 <__errno>
3400c1f2:	6800      	ldr	r0, [r0, #0]
3400c1f4:	f002 fc88 	bl	3400eb08 <strerror>
3400c1f8:	4603      	mov	r3, r0
3400c1fa:	2205      	movs	r2, #5
3400c1fc:	f04f 0e00 	mov.w	lr, #0
3400c200:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c204:	2201      	movs	r2, #1
3400c206:	9204      	str	r2, [sp, #16]
3400c208:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c20c:	9203      	str	r2, [sp, #12]
3400c20e:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c212:	9202      	str	r2, [sp, #8]
3400c214:	4a50      	ldr	r2, [pc, #320]	@ (3400c358 <LL_ATON_Init+0x2d4>)
3400c216:	b2e4      	uxtb	r4, r4
3400c218:	494b      	ldr	r1, [pc, #300]	@ (3400c348 <LL_ATON_Init+0x2c4>)
3400c21a:	9200      	str	r2, [sp, #0]
3400c21c:	484b      	ldr	r0, [pc, #300]	@ (3400c34c <LL_ATON_Init+0x2c8>)
3400c21e:	22c7      	movs	r2, #199	@ 0xc7
3400c220:	9401      	str	r4, [sp, #4]
3400c222:	f002 f93b 	bl	3400e49c <iprintf>
3400c226:	21c7      	movs	r1, #199	@ 0xc7
3400c228:	4b49      	ldr	r3, [pc, #292]	@ (3400c350 <LL_ATON_Init+0x2cc>)
3400c22a:	4a4a      	ldr	r2, [pc, #296]	@ (3400c354 <LL_ATON_Init+0x2d0>)
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c22c:	4846      	ldr	r0, [pc, #280]	@ (3400c348 <LL_ATON_Init+0x2c4>)
3400c22e:	f001 fa93 	bl	3400d758 <__assert_func>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c232:	4b4a      	ldr	r3, [pc, #296]	@ (3400c35c <LL_ATON_Init+0x2d8>)
3400c234:	e7e1      	b.n	3400c1fa <LL_ATON_Init+0x176>
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c236:	f002 fccd 	bl	3400ebd4 <__errno>
3400c23a:	6803      	ldr	r3, [r0, #0]
3400c23c:	b1fb      	cbz	r3, 3400c27e <LL_ATON_Init+0x1fa>
3400c23e:	f002 fcc9 	bl	3400ebd4 <__errno>
3400c242:	6800      	ldr	r0, [r0, #0]
3400c244:	f002 fc60 	bl	3400eb08 <strerror>
3400c248:	4603      	mov	r3, r0
3400c24a:	2205      	movs	r2, #5
3400c24c:	f04f 0c01 	mov.w	ip, #1
3400c250:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c254:	2217      	movs	r2, #23
3400c256:	9204      	str	r2, [sp, #16]
3400c258:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c25c:	9203      	str	r2, [sp, #12]
3400c25e:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c262:	9202      	str	r2, [sp, #8]
3400c264:	4a3e      	ldr	r2, [pc, #248]	@ (3400c360 <LL_ATON_Init+0x2dc>)
3400c266:	b2e4      	uxtb	r4, r4
3400c268:	4937      	ldr	r1, [pc, #220]	@ (3400c348 <LL_ATON_Init+0x2c4>)
3400c26a:	9200      	str	r2, [sp, #0]
3400c26c:	4837      	ldr	r0, [pc, #220]	@ (3400c34c <LL_ATON_Init+0x2c8>)
3400c26e:	22ca      	movs	r2, #202	@ 0xca
3400c270:	9401      	str	r4, [sp, #4]
3400c272:	f002 f913 	bl	3400e49c <iprintf>
3400c276:	21ca      	movs	r1, #202	@ 0xca
3400c278:	4b35      	ldr	r3, [pc, #212]	@ (3400c350 <LL_ATON_Init+0x2cc>)
3400c27a:	4a36      	ldr	r2, [pc, #216]	@ (3400c354 <LL_ATON_Init+0x2d0>)
3400c27c:	e7d6      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c27e:	4b37      	ldr	r3, [pc, #220]	@ (3400c35c <LL_ATON_Init+0x2d8>)
3400c280:	e7e3      	b.n	3400c24a <LL_ATON_Init+0x1c6>
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c282:	f002 fca7 	bl	3400ebd4 <__errno>
3400c286:	6803      	ldr	r3, [r0, #0]
3400c288:	b1eb      	cbz	r3, 3400c2c6 <LL_ATON_Init+0x242>
3400c28a:	f002 fca3 	bl	3400ebd4 <__errno>
3400c28e:	6800      	ldr	r0, [r0, #0]
3400c290:	f002 fc3a 	bl	3400eb08 <strerror>
3400c294:	4603      	mov	r3, r0
3400c296:	2201      	movs	r2, #1
3400c298:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c29c:	221c      	movs	r2, #28
3400c29e:	9204      	str	r2, [sp, #16]
3400c2a0:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c2a4:	9203      	str	r2, [sp, #12]
3400c2a6:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c2aa:	9202      	str	r2, [sp, #8]
3400c2ac:	4a2d      	ldr	r2, [pc, #180]	@ (3400c364 <LL_ATON_Init+0x2e0>)
3400c2ae:	b2e4      	uxtb	r4, r4
3400c2b0:	4925      	ldr	r1, [pc, #148]	@ (3400c348 <LL_ATON_Init+0x2c4>)
3400c2b2:	9200      	str	r2, [sp, #0]
3400c2b4:	4825      	ldr	r0, [pc, #148]	@ (3400c34c <LL_ATON_Init+0x2c8>)
3400c2b6:	22ce      	movs	r2, #206	@ 0xce
3400c2b8:	9401      	str	r4, [sp, #4]
3400c2ba:	f002 f8ef 	bl	3400e49c <iprintf>
3400c2be:	21ce      	movs	r1, #206	@ 0xce
3400c2c0:	4b23      	ldr	r3, [pc, #140]	@ (3400c350 <LL_ATON_Init+0x2cc>)
3400c2c2:	4a24      	ldr	r2, [pc, #144]	@ (3400c354 <LL_ATON_Init+0x2d0>)
3400c2c4:	e7b2      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c2c6:	4b25      	ldr	r3, [pc, #148]	@ (3400c35c <LL_ATON_Init+0x2d8>)
3400c2c8:	e7e5      	b.n	3400c296 <LL_ATON_Init+0x212>
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c2ca:	f002 fc83 	bl	3400ebd4 <__errno>
3400c2ce:	6803      	ldr	r3, [r0, #0]
3400c2d0:	b1f3      	cbz	r3, 3400c310 <LL_ATON_Init+0x28c>
3400c2d2:	f002 fc7f 	bl	3400ebd4 <__errno>
3400c2d6:	6800      	ldr	r0, [r0, #0]
3400c2d8:	f002 fc16 	bl	3400eb08 <strerror>
3400c2dc:	4603      	mov	r3, r0
3400c2de:	2201      	movs	r2, #1
3400c2e0:	2000      	movs	r0, #0
3400c2e2:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c2e6:	221a      	movs	r2, #26
3400c2e8:	9204      	str	r2, [sp, #16]
3400c2ea:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c2ee:	9203      	str	r2, [sp, #12]
3400c2f0:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c2f4:	9202      	str	r2, [sp, #8]
3400c2f6:	4a1c      	ldr	r2, [pc, #112]	@ (3400c368 <LL_ATON_Init+0x2e4>)
3400c2f8:	b2e4      	uxtb	r4, r4
3400c2fa:	4913      	ldr	r1, [pc, #76]	@ (3400c348 <LL_ATON_Init+0x2c4>)
3400c2fc:	9200      	str	r2, [sp, #0]
3400c2fe:	4813      	ldr	r0, [pc, #76]	@ (3400c34c <LL_ATON_Init+0x2c8>)
3400c300:	22d2      	movs	r2, #210	@ 0xd2
3400c302:	9401      	str	r4, [sp, #4]
3400c304:	f002 f8ca 	bl	3400e49c <iprintf>
3400c308:	21d2      	movs	r1, #210	@ 0xd2
3400c30a:	4b11      	ldr	r3, [pc, #68]	@ (3400c350 <LL_ATON_Init+0x2cc>)
3400c30c:	4a11      	ldr	r2, [pc, #68]	@ (3400c354 <LL_ATON_Init+0x2d0>)
3400c30e:	e78d      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c310:	4b12      	ldr	r3, [pc, #72]	@ (3400c35c <LL_ATON_Init+0x2d8>)
3400c312:	e7e4      	b.n	3400c2de <LL_ATON_Init+0x25a>
3400c314:	34012e08 	.word	0x34012e08
3400c318:	580e0000 	.word	0x580e0000
3400c31c:	580ef000 	.word	0x580ef000
3400c320:	580fb000 	.word	0x580fb000
3400c324:	580f7000 	.word	0x580f7000
3400c328:	580f5000 	.word	0x580f5000
3400c32c:	580f3000 	.word	0x580f3000
3400c330:	580fe000 	.word	0x580fe000
3400c334:	580fd000 	.word	0x580fd000
3400c338:	580e1000 	.word	0x580e1000
3400c33c:	580e4000 	.word	0x580e4000
3400c340:	580e2000 	.word	0x580e2000
3400c344:	34010dd3 	.word	0x34010dd3
3400c348:	34010c8e 	.word	0x34010c8e
3400c34c:	34010d1e 	.word	0x34010d1e
3400c350:	34010f98 	.word	0x34010f98
3400c354:	34011fb0 	.word	0x34011fb0
3400c358:	34010d82 	.word	0x34010d82
3400c35c:	34010c89 	.word	0x34010c89
3400c360:	34010d89 	.word	0x34010d89
3400c364:	34010d91 	.word	0x34010d91
3400c368:	34010d96 	.word	0x34010d96
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c36c:	f002 fc32 	bl	3400ebd4 <__errno>
3400c370:	6803      	ldr	r3, [r0, #0]
3400c372:	b1eb      	cbz	r3, 3400c3b0 <LL_ATON_Init+0x32c>
3400c374:	f002 fc2e 	bl	3400ebd4 <__errno>
3400c378:	6800      	ldr	r0, [r0, #0]
3400c37a:	f002 fbc5 	bl	3400eb08 <strerror>
3400c37e:	4603      	mov	r3, r0
3400c380:	2201      	movs	r2, #1
3400c382:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c386:	221b      	movs	r2, #27
3400c388:	9204      	str	r2, [sp, #16]
3400c38a:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c38e:	9203      	str	r2, [sp, #12]
3400c390:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c394:	9202      	str	r2, [sp, #8]
3400c396:	4a7c      	ldr	r2, [pc, #496]	@ (3400c588 <LL_ATON_Init+0x504>)
3400c398:	b2e4      	uxtb	r4, r4
3400c39a:	497c      	ldr	r1, [pc, #496]	@ (3400c58c <LL_ATON_Init+0x508>)
3400c39c:	9200      	str	r2, [sp, #0]
3400c39e:	487c      	ldr	r0, [pc, #496]	@ (3400c590 <LL_ATON_Init+0x50c>)
3400c3a0:	22d6      	movs	r2, #214	@ 0xd6
3400c3a2:	9401      	str	r4, [sp, #4]
3400c3a4:	f002 f87a 	bl	3400e49c <iprintf>
3400c3a8:	21d6      	movs	r1, #214	@ 0xd6
3400c3aa:	4b7a      	ldr	r3, [pc, #488]	@ (3400c594 <LL_ATON_Init+0x510>)
3400c3ac:	4a7a      	ldr	r2, [pc, #488]	@ (3400c598 <LL_ATON_Init+0x514>)
3400c3ae:	e73d      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c3b0:	4b7a      	ldr	r3, [pc, #488]	@ (3400c59c <LL_ATON_Init+0x518>)
3400c3b2:	e7e5      	b.n	3400c380 <LL_ATON_Init+0x2fc>
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c3b4:	f002 fc0e 	bl	3400ebd4 <__errno>
3400c3b8:	6803      	ldr	r3, [r0, #0]
3400c3ba:	b1f3      	cbz	r3, 3400c3fa <LL_ATON_Init+0x376>
3400c3bc:	f002 fc0a 	bl	3400ebd4 <__errno>
3400c3c0:	6800      	ldr	r0, [r0, #0]
3400c3c2:	f002 fba1 	bl	3400eb08 <strerror>
3400c3c6:	4603      	mov	r3, r0
3400c3c8:	2201      	movs	r2, #1
3400c3ca:	210a      	movs	r1, #10
3400c3cc:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c3d0:	2219      	movs	r2, #25
3400c3d2:	9204      	str	r2, [sp, #16]
3400c3d4:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c3d8:	9203      	str	r2, [sp, #12]
3400c3da:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c3de:	9202      	str	r2, [sp, #8]
3400c3e0:	4a6f      	ldr	r2, [pc, #444]	@ (3400c5a0 <LL_ATON_Init+0x51c>)
3400c3e2:	b2e4      	uxtb	r4, r4
3400c3e4:	4969      	ldr	r1, [pc, #420]	@ (3400c58c <LL_ATON_Init+0x508>)
3400c3e6:	9200      	str	r2, [sp, #0]
3400c3e8:	4869      	ldr	r0, [pc, #420]	@ (3400c590 <LL_ATON_Init+0x50c>)
3400c3ea:	22da      	movs	r2, #218	@ 0xda
3400c3ec:	9401      	str	r4, [sp, #4]
3400c3ee:	f002 f855 	bl	3400e49c <iprintf>
3400c3f2:	21da      	movs	r1, #218	@ 0xda
3400c3f4:	4b67      	ldr	r3, [pc, #412]	@ (3400c594 <LL_ATON_Init+0x510>)
3400c3f6:	4a68      	ldr	r2, [pc, #416]	@ (3400c598 <LL_ATON_Init+0x514>)
3400c3f8:	e718      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c3fa:	4b68      	ldr	r3, [pc, #416]	@ (3400c59c <LL_ATON_Init+0x518>)
3400c3fc:	e7e4      	b.n	3400c3c8 <LL_ATON_Init+0x344>
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c3fe:	f002 fbe9 	bl	3400ebd4 <__errno>
3400c402:	6803      	ldr	r3, [r0, #0]
3400c404:	b1eb      	cbz	r3, 3400c442 <LL_ATON_Init+0x3be>
3400c406:	f002 fbe5 	bl	3400ebd4 <__errno>
3400c40a:	6800      	ldr	r0, [r0, #0]
3400c40c:	f002 fb7c 	bl	3400eb08 <strerror>
3400c410:	4603      	mov	r3, r0
3400c412:	2201      	movs	r2, #1
3400c414:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c418:	2221      	movs	r2, #33	@ 0x21
3400c41a:	9204      	str	r2, [sp, #16]
3400c41c:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c420:	9203      	str	r2, [sp, #12]
3400c422:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c426:	9202      	str	r2, [sp, #8]
3400c428:	4a5e      	ldr	r2, [pc, #376]	@ (3400c5a4 <LL_ATON_Init+0x520>)
3400c42a:	b2e4      	uxtb	r4, r4
3400c42c:	4957      	ldr	r1, [pc, #348]	@ (3400c58c <LL_ATON_Init+0x508>)
3400c42e:	9200      	str	r2, [sp, #0]
3400c430:	4857      	ldr	r0, [pc, #348]	@ (3400c590 <LL_ATON_Init+0x50c>)
3400c432:	22de      	movs	r2, #222	@ 0xde
3400c434:	9401      	str	r4, [sp, #4]
3400c436:	f002 f831 	bl	3400e49c <iprintf>
3400c43a:	21de      	movs	r1, #222	@ 0xde
3400c43c:	4b55      	ldr	r3, [pc, #340]	@ (3400c594 <LL_ATON_Init+0x510>)
3400c43e:	4a56      	ldr	r2, [pc, #344]	@ (3400c598 <LL_ATON_Init+0x514>)
3400c440:	e6f4      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c442:	4b56      	ldr	r3, [pc, #344]	@ (3400c59c <LL_ATON_Init+0x518>)
3400c444:	e7e5      	b.n	3400c412 <LL_ATON_Init+0x38e>
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c446:	f002 fbc5 	bl	3400ebd4 <__errno>
3400c44a:	6803      	ldr	r3, [r0, #0]
3400c44c:	b1fb      	cbz	r3, 3400c48e <LL_ATON_Init+0x40a>
3400c44e:	f002 fbc1 	bl	3400ebd4 <__errno>
3400c452:	6800      	ldr	r0, [r0, #0]
3400c454:	f002 fb58 	bl	3400eb08 <strerror>
3400c458:	4603      	mov	r3, r0
3400c45a:	2203      	movs	r2, #3
3400c45c:	f04f 0e02 	mov.w	lr, #2
3400c460:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c464:	2220      	movs	r2, #32
3400c466:	9204      	str	r2, [sp, #16]
3400c468:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c46c:	9203      	str	r2, [sp, #12]
3400c46e:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c472:	9202      	str	r2, [sp, #8]
3400c474:	4a4c      	ldr	r2, [pc, #304]	@ (3400c5a8 <LL_ATON_Init+0x524>)
3400c476:	b2e4      	uxtb	r4, r4
3400c478:	4944      	ldr	r1, [pc, #272]	@ (3400c58c <LL_ATON_Init+0x508>)
3400c47a:	9200      	str	r2, [sp, #0]
3400c47c:	4844      	ldr	r0, [pc, #272]	@ (3400c590 <LL_ATON_Init+0x50c>)
3400c47e:	22e2      	movs	r2, #226	@ 0xe2
3400c480:	9401      	str	r4, [sp, #4]
3400c482:	f002 f80b 	bl	3400e49c <iprintf>
3400c486:	21e2      	movs	r1, #226	@ 0xe2
3400c488:	4b42      	ldr	r3, [pc, #264]	@ (3400c594 <LL_ATON_Init+0x510>)
3400c48a:	4a43      	ldr	r2, [pc, #268]	@ (3400c598 <LL_ATON_Init+0x514>)
3400c48c:	e6ce      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c48e:	4b43      	ldr	r3, [pc, #268]	@ (3400c59c <LL_ATON_Init+0x518>)
3400c490:	e7e3      	b.n	3400c45a <LL_ATON_Init+0x3d6>
  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c492:	f002 fb9f 	bl	3400ebd4 <__errno>
3400c496:	6803      	ldr	r3, [r0, #0]
3400c498:	b1fb      	cbz	r3, 3400c4da <LL_ATON_Init+0x456>
3400c49a:	f002 fb9b 	bl	3400ebd4 <__errno>
3400c49e:	6800      	ldr	r0, [r0, #0]
3400c4a0:	f002 fb32 	bl	3400eb08 <strerror>
3400c4a4:	4603      	mov	r3, r0
3400c4a6:	2201      	movs	r2, #1
3400c4a8:	f04f 0c02 	mov.w	ip, #2
3400c4ac:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c4b0:	221f      	movs	r2, #31
3400c4b2:	9204      	str	r2, [sp, #16]
3400c4b4:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c4b8:	9203      	str	r2, [sp, #12]
3400c4ba:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c4be:	9202      	str	r2, [sp, #8]
3400c4c0:	4a3a      	ldr	r2, [pc, #232]	@ (3400c5ac <LL_ATON_Init+0x528>)
3400c4c2:	b2e4      	uxtb	r4, r4
3400c4c4:	4931      	ldr	r1, [pc, #196]	@ (3400c58c <LL_ATON_Init+0x508>)
3400c4c6:	9200      	str	r2, [sp, #0]
3400c4c8:	4831      	ldr	r0, [pc, #196]	@ (3400c590 <LL_ATON_Init+0x50c>)
3400c4ca:	22f5      	movs	r2, #245	@ 0xf5
3400c4cc:	9401      	str	r4, [sp, #4]
3400c4ce:	f001 ffe5 	bl	3400e49c <iprintf>
3400c4d2:	21f5      	movs	r1, #245	@ 0xf5
3400c4d4:	4b2f      	ldr	r3, [pc, #188]	@ (3400c594 <LL_ATON_Init+0x510>)
3400c4d6:	4a30      	ldr	r2, [pc, #192]	@ (3400c598 <LL_ATON_Init+0x514>)
3400c4d8:	e6a8      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c4da:	4b30      	ldr	r3, [pc, #192]	@ (3400c59c <LL_ATON_Init+0x518>)
3400c4dc:	e7e3      	b.n	3400c4a6 <LL_ATON_Init+0x422>
  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c4de:	f002 fb79 	bl	3400ebd4 <__errno>
3400c4e2:	6803      	ldr	r3, [r0, #0]
3400c4e4:	b1eb      	cbz	r3, 3400c522 <LL_ATON_Init+0x49e>
3400c4e6:	f002 fb75 	bl	3400ebd4 <__errno>
3400c4ea:	6800      	ldr	r0, [r0, #0]
3400c4ec:	f002 fb0c 	bl	3400eb08 <strerror>
3400c4f0:	4603      	mov	r3, r0
3400c4f2:	2201      	movs	r2, #1
3400c4f4:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c4f8:	221e      	movs	r2, #30
3400c4fa:	9204      	str	r2, [sp, #16]
3400c4fc:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c500:	9203      	str	r2, [sp, #12]
3400c502:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c506:	9202      	str	r2, [sp, #8]
3400c508:	4a29      	ldr	r2, [pc, #164]	@ (3400c5b0 <LL_ATON_Init+0x52c>)
3400c50a:	b2e4      	uxtb	r4, r4
3400c50c:	491f      	ldr	r1, [pc, #124]	@ (3400c58c <LL_ATON_Init+0x508>)
3400c50e:	9200      	str	r2, [sp, #0]
3400c510:	481f      	ldr	r0, [pc, #124]	@ (3400c590 <LL_ATON_Init+0x50c>)
3400c512:	22f7      	movs	r2, #247	@ 0xf7
3400c514:	9401      	str	r4, [sp, #4]
3400c516:	f001 ffc1 	bl	3400e49c <iprintf>
3400c51a:	21f7      	movs	r1, #247	@ 0xf7
3400c51c:	4b1d      	ldr	r3, [pc, #116]	@ (3400c594 <LL_ATON_Init+0x510>)
3400c51e:	4a1e      	ldr	r2, [pc, #120]	@ (3400c598 <LL_ATON_Init+0x514>)
3400c520:	e684      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c522:	4b1e      	ldr	r3, [pc, #120]	@ (3400c59c <LL_ATON_Init+0x518>)
3400c524:	e7e5      	b.n	3400c4f2 <LL_ATON_Init+0x46e>
  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c526:	f002 fb55 	bl	3400ebd4 <__errno>
3400c52a:	6803      	ldr	r3, [r0, #0]
3400c52c:	b1f3      	cbz	r3, 3400c56c <LL_ATON_Init+0x4e8>
3400c52e:	f002 fb51 	bl	3400ebd4 <__errno>
3400c532:	6800      	ldr	r0, [r0, #0]
3400c534:	f002 fae8 	bl	3400eb08 <strerror>
3400c538:	4603      	mov	r3, r0
3400c53a:	2201      	movs	r2, #1
3400c53c:	2006      	movs	r0, #6
3400c53e:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c542:	2200      	movs	r2, #0
3400c544:	9204      	str	r2, [sp, #16]
3400c546:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c54a:	9203      	str	r2, [sp, #12]
3400c54c:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c550:	9202      	str	r2, [sp, #8]
3400c552:	4a18      	ldr	r2, [pc, #96]	@ (3400c5b4 <LL_ATON_Init+0x530>)
3400c554:	b2e4      	uxtb	r4, r4
3400c556:	490d      	ldr	r1, [pc, #52]	@ (3400c58c <LL_ATON_Init+0x508>)
3400c558:	9200      	str	r2, [sp, #0]
3400c55a:	480d      	ldr	r0, [pc, #52]	@ (3400c590 <LL_ATON_Init+0x50c>)
3400c55c:	22f9      	movs	r2, #249	@ 0xf9
3400c55e:	9401      	str	r4, [sp, #4]
3400c560:	f001 ff9c 	bl	3400e49c <iprintf>
3400c564:	21f9      	movs	r1, #249	@ 0xf9
3400c566:	4b0b      	ldr	r3, [pc, #44]	@ (3400c594 <LL_ATON_Init+0x510>)
3400c568:	4a0b      	ldr	r2, [pc, #44]	@ (3400c598 <LL_ATON_Init+0x514>)
3400c56a:	e65f      	b.n	3400c22c <LL_ATON_Init+0x1a8>
3400c56c:	4b0b      	ldr	r3, [pc, #44]	@ (3400c59c <LL_ATON_Init+0x518>)
3400c56e:	e7e4      	b.n	3400c53a <LL_ATON_Init+0x4b6>
  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c570:	4b0a      	ldr	r3, [pc, #40]	@ (3400c59c <LL_ATON_Init+0x518>)
3400c572:	e61f      	b.n	3400c1b4 <LL_ATON_Init+0x130>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 1);
3400c574:	2301      	movs	r3, #1

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);

  return 0;
}
3400c576:	2000      	movs	r0, #0
    ATON_BUSIF_CTRL_SET(i, 1);
3400c578:	6013      	str	r3, [r2, #0]
3400c57a:	4a0f      	ldr	r2, [pc, #60]	@ (3400c5b8 <LL_ATON_Init+0x534>)
3400c57c:	6013      	str	r3, [r2, #0]
  ATON_INTCTRL_CTRL_SET(0, 1);
3400c57e:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
3400c582:	6013      	str	r3, [r2, #0]
}
3400c584:	b008      	add	sp, #32
3400c586:	bd10      	pop	{r4, pc}
3400c588:	34010d9c 	.word	0x34010d9c
3400c58c:	34010c8e 	.word	0x34010c8e
3400c590:	34010d1e 	.word	0x34010d1e
3400c594:	34010f98 	.word	0x34010f98
3400c598:	34011fb0 	.word	0x34011fb0
3400c59c:	34010c89 	.word	0x34010c89
3400c5a0:	34010da2 	.word	0x34010da2
3400c5a4:	34010da8 	.word	0x34010da8
3400c5a8:	34010db2 	.word	0x34010db2
3400c5ac:	34010db9 	.word	0x34010db9
3400c5b0:	34010dc1 	.word	0x34010dc1
3400c5b4:	34010dc9 	.word	0x34010dc9
3400c5b8:	580e3000 	.word	0x580e3000

3400c5bc <LL_ATON_DeInit>:
int LL_ATON_DeInit(void)
{
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
3400c5bc:	2000      	movs	r0, #0
3400c5be:	4b07      	ldr	r3, [pc, #28]	@ (3400c5dc <LL_ATON_DeInit+0x20>)
3400c5c0:	6018      	str	r0, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 0);
3400c5c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c5c6:	6018      	str	r0, [r3, #0]
3400c5c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c5cc:	6018      	str	r0, [r3, #0]
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
3400c5ce:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
3400c5d2:	6098      	str	r0, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
3400c5d4:	60d8      	str	r0, [r3, #12]
  ATON_CLKCTRL_BGATES_SET(0, 0);
3400c5d6:	6118      	str	r0, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
3400c5d8:	6018      	str	r0, [r3, #0]

  return 0;
}
3400c5da:	4770      	bx	lr
3400c5dc:	580e1000 	.word	0x580e1000

3400c5e0 <LL_ATON_EnableUnits_Init>:
 * @param  n Lenght of the initialization array
 * @retval Error code
 * @todo   Add boundary checks
 */
int LL_ATON_EnableUnits_Init(const LL_ATON_EnableUnits_InitTypeDef *LL_ATON_EnableUnits_InitStruct, int n)
{
3400c5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;

  for (i = 0; i < n; i++)
3400c5e2:	2400      	movs	r4, #0
3400c5e4:	42a1      	cmp	r1, r4
3400c5e6:	f101 0201 	add.w	r2, r1, #1
3400c5ea:	bfb8      	it	lt
3400c5ec:	2201      	movlt	r2, #1
#endif // !POOL_RC14
      break;
#endif
#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_ENABLE(RECBUF, unitId);
3400c5ee:	4d1e      	ldr	r5, [pc, #120]	@ (3400c668 <LL_ATON_EnableUnits_Init+0x88>)
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
3400c5f0:	4f1e      	ldr	r7, [pc, #120]	@ (3400c66c <LL_ATON_EnableUnits_Init+0x8c>)
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
3400c5f2:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
3400c5f4:	3a01      	subs	r2, #1
3400c5f6:	d101      	bne.n	3400c5fc <LL_ATON_EnableUnits_Init+0x1c>
      break;
    }
  }

  return 0;
}
3400c5f8:	2000      	movs	r0, #0
3400c5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (unitType)
3400c5fc:	f810 1024 	ldrb.w	r1, [r0, r4, lsl #2]
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
3400c600:	f836 3024 	ldrh.w	r3, [r6, r4, lsl #2]
    switch (unitType)
3400c604:	2908      	cmp	r1, #8
3400c606:	d818      	bhi.n	3400c63a <LL_ATON_EnableUnits_Init+0x5a>
3400c608:	e8df f001 	tbb	[pc, r1]
3400c60c:	190e1705 	.word	0x190e1705
3400c610:	1725211d 	.word	0x1725211d
3400c614:	29          	.byte	0x29
3400c615:	00          	.byte	0x00
      ATON_ENABLE(STRENG, unitId);
3400c616:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c61a:	33e5      	adds	r3, #229	@ 0xe5
      ATON_ENABLE(DECUN, unitId);
3400c61c:	031b      	lsls	r3, r3, #12
3400c61e:	6819      	ldr	r1, [r3, #0]
3400c620:	f041 0101 	orr.w	r1, r1, #1
3400c624:	6019      	str	r1, [r3, #0]
      break;
3400c626:	e008      	b.n	3400c63a <LL_ATON_EnableUnits_Init+0x5a>
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
3400c628:	f503 21b0 	add.w	r1, r3, #360448	@ 0x58000
3400c62c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
3400c630:	31ef      	adds	r1, #239	@ 0xef
3400c632:	0309      	lsls	r1, r1, #12
3400c634:	f043 0301 	orr.w	r3, r3, #1
3400c638:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
3400c63a:	3401      	adds	r4, #1
3400c63c:	e7da      	b.n	3400c5f4 <LL_ATON_EnableUnits_Init+0x14>
      ATON_ENABLE(DECUN, unitId);
3400c63e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c642:	33f3      	adds	r3, #243	@ 0xf3
3400c644:	e7ea      	b.n	3400c61c <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ACTIV, unitId);
3400c646:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c64a:	33f5      	adds	r3, #245	@ 0xf5
3400c64c:	e7e6      	b.n	3400c61c <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ARITH, unitId);
3400c64e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c652:	33f7      	adds	r3, #247	@ 0xf7
3400c654:	e7e2      	b.n	3400c61c <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(POOL, unitId);
3400c656:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c65a:	33fb      	adds	r3, #251	@ 0xfb
3400c65c:	e7de      	b.n	3400c61c <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(RECBUF, unitId);
3400c65e:	682b      	ldr	r3, [r5, #0]
3400c660:	f043 0301 	orr.w	r3, r3, #1
3400c664:	602b      	str	r3, [r5, #0]
      break;
3400c666:	e7e8      	b.n	3400c63a <LL_ATON_EnableUnits_Init+0x5a>
3400c668:	580fd000 	.word	0x580fd000
3400c66c:	34012e0c 	.word	0x34012e0c

3400c670 <LL_Switch_Init_NoReset>:
  unsigned int fnr_mask[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_MASK, ATON_STRSWITCH_DST_FNR1_MASK};

  /* Enable Switch */
  t = ATON_STRSWITCH_CTRL_DT;
  t = ATON_STRSWITCH_CTRL_SET_EN(t, 1);
  ATON_STRSWITCH_CTRL_SET(0, t);
3400c670:	2301      	movs	r3, #1
3400c672:	4a13      	ldr	r2, [pc, #76]	@ (3400c6c0 <LL_Switch_Init_NoReset+0x50>)
3400c674:	2900      	cmp	r1, #0
{
3400c676:	b530      	push	{r4, r5, lr}
  ATON_STRSWITCH_CTRL_SET(0, t);
3400c678:	6013      	str	r3, [r2, #0]

  for (i = 0; i < n; i++)
3400c67a:	eb01 0203 	add.w	r2, r1, r3
3400c67e:	bfb8      	it	lt
3400c680:	461a      	movlt	r2, r3
3400c682:	3a01      	subs	r2, #1
3400c684:	d101      	bne.n	3400c68a <LL_Switch_Init_NoReset+0x1a>

    ATON_REG_WRITE(reg, t);
  }

  return 0;
}
3400c686:	2000      	movs	r0, #0
3400c688:	bd30      	pop	{r4, r5, pc}
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
3400c68a:	7b84      	ldrb	r4, [r0, #14]
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source1) << link_shift[1]);
3400c68c:	e9d0 5300 	ldrd	r5, r3, [r0]
3400c690:	045b      	lsls	r3, r3, #17
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c692:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
3400c696:	f004 0501 	and.w	r5, r4, #1
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c69a:	432b      	orrs	r3, r5
    t |= ((LL_Switch_InitStruct[i].frames0 << fnr_shift[0]) & fnr_mask[0]);
3400c69c:	7b05      	ldrb	r5, [r0, #12]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c69e:	6881      	ldr	r1, [r0, #8]
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c6a0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
3400c6a4:	7b45      	ldrb	r5, [r0, #13]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c6a6:	f101 41b0 	add.w	r1, r1, #1476395008	@ 0x58000000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c6aa:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    t |= ((LL_Switch_InitStruct[i].context1 != 0) << en_shift[1]);
3400c6ae:	f3c4 0440 	ubfx	r4, r4, #1, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c6b2:	f501 2164 	add.w	r1, r1, #933888	@ 0xe4000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c6b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    ATON_REG_WRITE(reg, t);
3400c6ba:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
3400c6bc:	3010      	adds	r0, #16
3400c6be:	e7e0      	b.n	3400c682 <LL_Switch_Init_NoReset+0x12>
3400c6c0:	580e4000 	.word	0x580e4000

3400c6c4 <LL_Switch_Init>:
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ll_aton_static_checks();
#endif

  /* Clear Configuration */
  ATON_DISABLE_CLR_CONFCLR(STRSWITCH, 0);
3400c6c4:	2202      	movs	r2, #2
3400c6c6:	4b06      	ldr	r3, [pc, #24]	@ (3400c6e0 <LL_Switch_Init+0x1c>)
3400c6c8:	601a      	str	r2, [r3, #0]
3400c6ca:	681a      	ldr	r2, [r3, #0]
3400c6cc:	0792      	lsls	r2, r2, #30
3400c6ce:	d4fc      	bmi.n	3400c6ca <LL_Switch_Init+0x6>
3400c6d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400c6d4:	601a      	str	r2, [r3, #0]
3400c6d6:	681a      	ldr	r2, [r3, #0]
3400c6d8:	0052      	lsls	r2, r2, #1
3400c6da:	d4fc      	bmi.n	3400c6d6 <LL_Switch_Init+0x12>

  return LL_Switch_Init_NoReset(LL_Switch_InitStruct, n);
3400c6dc:	f7ff bfc8 	b.w	3400c670 <LL_Switch_Init_NoReset>
3400c6e0:	580e4000 	.word	0x580e4000

3400c6e4 <LL_Switch_Deinit>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be disconnected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Deinit(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
3400c6e4:	b530      	push	{r4, r5, lr}
  int i;
  volatile uint32_t *reg;

  for (i = 0; i < n; i++)
3400c6e6:	2400      	movs	r4, #0
3400c6e8:	42a1      	cmp	r1, r4
3400c6ea:	f101 0301 	add.w	r3, r1, #1
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));

    /* Disable contexts */
    ATON_REG_WRITE(reg, 0);
3400c6ee:	4625      	mov	r5, r4
3400c6f0:	bfb8      	it	lt
3400c6f2:	2301      	movlt	r3, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c6f4:	3008      	adds	r0, #8
  for (i = 0; i < n; i++)
3400c6f6:	3b01      	subs	r3, #1
3400c6f8:	d101      	bne.n	3400c6fe <LL_Switch_Deinit+0x1a>
  }

  return 0;
}
3400c6fa:	2000      	movs	r0, #0
3400c6fc:	bd30      	pop	{r4, r5, pc}
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c6fe:	0122      	lsls	r2, r4, #4
3400c700:	5882      	ldr	r2, [r0, r2]
  for (i = 0; i < n; i++)
3400c702:	3401      	adds	r4, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c704:	f102 42b0 	add.w	r2, r2, #1476395008	@ 0x58000000
3400c708:	f502 2264 	add.w	r2, r2, #933888	@ 0xe4000
    ATON_REG_WRITE(reg, 0);
3400c70c:	6015      	str	r5, [r2, #0]
  for (i = 0; i < n; i++)
3400c70e:	e7f2      	b.n	3400c6f6 <LL_Switch_Deinit+0x12>

3400c710 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
3400c710:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
3400c712:	2401      	movs	r4, #1
3400c714:	2500      	movs	r5, #0
3400c716:	2301      	movs	r3, #1
3400c718:	ea54 050d 	orrs.w	r5, r4, sp
3400c71c:	4a03      	ldr	r2, [pc, #12]	@ (3400c72c <LL_ATON_EnableClock+0x1c>)
3400c71e:	4083      	lsls	r3, r0
3400c720:	6911      	ldr	r1, [r2, #16]
3400c722:	404b      	eors	r3, r1
3400c724:	4023      	ands	r3, r4
3400c726:	404b      	eors	r3, r1
3400c728:	6113      	str	r3, [r2, #16]
#endif
}
3400c72a:	bd30      	pop	{r4, r5, pc}
3400c72c:	580e0000 	.word	0x580e0000

3400c730 <LL_Streng_TensorInit>:
  if (id >= ATON_STRENG_NUM)
3400c730:	2809      	cmp	r0, #9
{
3400c732:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400c736:	4604      	mov	r4, r0
3400c738:	460d      	mov	r5, r1
3400c73a:	4616      	mov	r6, r2
  if (id >= ATON_STRENG_NUM)
3400c73c:	dd04      	ble.n	3400c748 <LL_Streng_TensorInit+0x18>
    return LL_ATON_INVALID_ID;
3400c73e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
3400c742:	b003      	add	sp, #12
3400c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LL_ATON_EnableClock(ATON_STRENG_CLKB_CLK(id));
3400c748:	f7ff ffe2 	bl	3400c710 <LL_ATON_EnableClock>
  if (n != 1)
3400c74c:	2e01      	cmp	r6, #1
3400c74e:	d1f6      	bne.n	3400c73e <LL_Streng_TensorInit+0xe>
  if (conf->nbits_in > 24 || conf->nbits_out > 24)
3400c750:	f895 603c 	ldrb.w	r6, [r5, #60]	@ 0x3c
3400c754:	2e18      	cmp	r6, #24
3400c756:	d8f2      	bhi.n	3400c73e <LL_Streng_TensorInit+0xe>
3400c758:	f895 c03d 	ldrb.w	ip, [r5, #61]	@ 0x3d
3400c75c:	f1bc 0f18 	cmp.w	ip, #24
3400c760:	d8ed      	bhi.n	3400c73e <LL_Streng_TensorInit+0xe>
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400c762:	7828      	ldrb	r0, [r5, #0]
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400c764:	f8d5 a038 	ldr.w	sl, [r5, #56]	@ 0x38
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400c768:	01c2      	lsls	r2, r0, #7
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400c76a:	00c3      	lsls	r3, r0, #3
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400c76c:	f402 7180 	and.w	r1, r2, #256	@ 0x100
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400c770:	f003 0308 	and.w	r3, r3, #8
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400c774:	430b      	orrs	r3, r1
  t = ATON_STRENG_CTRL_SET_RAW_OUT(t, conf->raw_out);
3400c776:	f3c0 0180 	ubfx	r1, r0, #2, #1
3400c77a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  t = ATON_STRENG_CTRL_SET_NOBLK(t, (conf->noblk != 0));
3400c77e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
3400c782:	431a      	orrs	r2, r3
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
3400c784:	0843      	lsrs	r3, r0, #1
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400c786:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
3400c78a:	f003 0310 	and.w	r3, r3, #16
3400c78e:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400c790:	424a      	negs	r2, r1
3400c792:	414a      	adcs	r2, r1
3400c794:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
3400c798:	0102      	lsls	r2, r0, #4
3400c79a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400c79e:	f8b5 8000 	ldrh.w	r8, [r5]
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
3400c7a2:	0207      	lsls	r7, r0, #8
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
3400c7a4:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
3400c7a6:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
3400c7aa:	431f      	orrs	r7, r3
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400c7ac:	f408 7310 	and.w	r3, r8, #576	@ 0x240
3400c7b0:	f1a3 0e40 	sub.w	lr, r3, #64	@ 0x40
3400c7b4:	f1de 0300 	rsbs	r3, lr, #0
3400c7b8:	eb43 030e 	adc.w	r3, r3, lr
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400c7bc:	f010 0201 	ands.w	r2, r0, #1
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400c7c0:	ea47 37c3 	orr.w	r7, r7, r3, lsl #15
  int nbits_in = conf->nbits_in;
3400c7c4:	4631      	mov	r1, r6
  int nbits_out = conf->nbits_out;
3400c7c6:	4663      	mov	r3, ip
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400c7c8:	9201      	str	r2, [sp, #4]
3400c7ca:	f000 0940 	and.w	r9, r0, #64	@ 0x40
3400c7ce:	f040 80a9 	bne.w	3400c924 <LL_Streng_TensorInit+0x1f4>
3400c7d2:	4566      	cmp	r6, ip
3400c7d4:	bf8c      	ite	hi
3400c7d6:	2200      	movhi	r2, #0
3400c7d8:	2201      	movls	r2, #1
  switch (io_case)
3400c7da:	2a03      	cmp	r2, #3
3400c7dc:	f000 80b2 	beq.w	3400c944 <LL_Streng_TensorInit+0x214>
3400c7e0:	2a01      	cmp	r2, #1
3400c7e2:	f000 80aa 	beq.w	3400c93a <LL_Streng_TensorInit+0x20a>
    nbits_in = nbits_out;
3400c7e6:	4661      	mov	r1, ip
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7e8:	eba6 020c 	sub.w	r2, r6, ip
    if (conf->mem_lsb)
3400c7ec:	0603      	lsls	r3, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7ee:	bf4b      	itete	mi
3400c7f0:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7f2:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7f4:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7f8:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    in_bits[0] = _LL_min(8, nbits_in);
3400c7fc:	2908      	cmp	r1, #8
3400c7fe:	468e      	mov	lr, r1
3400c800:	bfa8      	it	ge
3400c802:	f04f 0e08 	movge.w	lr, #8
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400c806:	2908      	cmp	r1, #8
3400c808:	f340 8099 	ble.w	3400c93e <LL_Streng_TensorInit+0x20e>
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
3400c80c:	2910      	cmp	r1, #16
3400c80e:	bfcb      	itete	gt
3400c810:	f1a1 0310 	subgt.w	r3, r1, #16
3400c814:	2300      	movle	r3, #0
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400c816:	2108      	movgt	r1, #8
3400c818:	3908      	suble	r1, #8
    if (conf->align_right)
3400c81a:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
3400c81e:	f1b9 0f00 	cmp.w	r9, #0
3400c822:	d10b      	bne.n	3400c83c <LL_Streng_TensorInit+0x10c>
      if (nbits_out > 16)
3400c824:	f1bc 0f10 	cmp.w	ip, #16
3400c828:	f300 80b2 	bgt.w	3400c990 <LL_Streng_TensorInit+0x260>
      else if (nbits_out > 8)
3400c82c:	f1bc 0f08 	cmp.w	ip, #8
      else if (nbits_in > 8)
3400c830:	f340 80b2 	ble.w	3400c998 <LL_Streng_TensorInit+0x268>
3400c834:	4673      	mov	r3, lr
        ch_bits[0] = out_bits[1];
3400c836:	468e      	mov	lr, r1
        ch_bits[1] = out_bits[0];
3400c838:	4619      	mov	r1, r3
  int ch_bits[3] = {0, 0, 0};
3400c83a:	465b      	mov	r3, fp
  t = ATON_STRENG_CTRL_SET_SIZE0(t, ch_bits[0]);
3400c83c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
  ATON_STRENG_CTRL_SET(id, t);
3400c840:	f504 24b0 	add.w	r4, r4, #360448	@ 0x58000
  t = ATON_STRENG_CTRL_SET_SIZE1(t, ch_bits[1]);
3400c844:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
  ATON_STRENG_CTRL_SET(id, t);
3400c848:	34e5      	adds	r4, #229	@ 0xe5
  t = ATON_STRENG_CTRL_SET_SIZE2(t, ch_bits[2]);
3400c84a:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
  ATON_STRENG_CTRL_SET(id, t);
3400c84e:	0324      	lsls	r4, r4, #12
3400c850:	6027      	str	r7, [r4, #0]
  ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_ADDR_ADDR(id)), conf->addr_base.i,
3400c852:	e9d5 7e01 	ldrd	r7, lr, [r5, #4]
3400c856:	eb07 030e 	add.w	r3, r7, lr
3400c85a:	60a3      	str	r3, [r4, #8]
  if (conf->raw)
3400c85c:	0783      	lsls	r3, r0, #30
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400c85e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
  if (conf->raw)
3400c860:	f140 809d 	bpl.w	3400c99e <LL_Streng_TensorInit+0x26e>
    if (conf->frame_count)
3400c864:	696b      	ldr	r3, [r5, #20]
3400c866:	b94b      	cbnz	r3, 3400c87c <LL_Streng_TensorInit+0x14c>
      t = (LL_Streng_len(conf) * 8) / (conf->dir == 0 ? conf->nbits_in : conf->nbits_out);
3400c868:	f010 0f01 	tst.w	r0, #1
3400c86c:	bf18      	it	ne
3400c86e:	4666      	movne	r6, ip
    return conf->addr_base.p + conf->offset_limit;
  }

  static inline uint32_t LL_Streng_len(const LL_Streng_TensorInitTypeDef *conf)
  {
    return conf->offset_end - conf->offset_start;
3400c870:	68eb      	ldr	r3, [r5, #12]
3400c872:	eba3 030e 	sub.w	r3, r3, lr
3400c876:	00db      	lsls	r3, r3, #3
3400c878:	fbb3 f3f6 	udiv	r3, r3, r6
  uint32_t t_streng_cid_cache = ATON_STRENG_CID_CACHE_DT;
3400c87c:	2000      	movs	r0, #0
    ATON_STRENG_FSIZE_SET(id, t);
3400c87e:	60e3      	str	r3, [r4, #12]
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
3400c880:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
3400c882:	f36f 010f 	bfc	r1, #0, #16
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
3400c886:	6223      	str	r3, [r4, #32]
  ATON_STRENG_FRAME_RPT_SET(id, conf->frame_loop_cnt);
3400c888:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
3400c88a:	61e3      	str	r3, [r4, #28]
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
3400c88c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
3400c88e:	61a3      	str	r3, [r4, #24]
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
3400c890:	f041 0306 	orr.w	r3, r1, #6
  ATON_STRENG_LIMITEN_SET(id, t);
3400c894:	6323      	str	r3, [r4, #48]	@ 0x30
  if (/*(conf->dir == 0) && */ (conf->offset_limit != 0x0))
3400c896:	692b      	ldr	r3, [r5, #16]
3400c898:	b12b      	cbz	r3, 3400c8a6 <LL_Streng_TensorInit+0x176>
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400c89a:	441f      	add	r7, r3
    t = ATON_STRENG_LIMITEN_SET_STOPPREFTC(t, 1);
3400c89c:	f041 0107 	orr.w	r1, r1, #7
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400c8a0:	3f01      	subs	r7, #1
    ATON_STRENG_LIMITEN_SET(id, t);
3400c8a2:	6321      	str	r1, [r4, #48]	@ 0x30
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400c8a4:	63a7      	str	r7, [r4, #56]	@ 0x38
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
3400c8a6:	7869      	ldrb	r1, [r5, #1]
  if ((conf->dir == 0) && conf->sync_with_other)
3400c8a8:	f028 08fe 	bic.w	r8, r8, #254	@ 0xfe
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
3400c8ac:	f3c1 1380 	ubfx	r3, r1, #6, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
3400c8b0:	f3c1 1640 	ubfx	r6, r1, #5, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
3400c8b4:	011b      	lsls	r3, r3, #4
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c8b6:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CID(t_streng_cid_cache, conf->bus_cid);
3400c8ba:	f3c1 0682 	ubfx	r6, r1, #2, #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c8be:	4333      	orrs	r3, r6
3400c8c0:	78ae      	ldrb	r6, [r5, #2]
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_PFETCH(t_streng_cid_cache, conf->bus_pfetch);
3400c8c2:	09c9      	lsrs	r1, r1, #7
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c8c4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  if ((conf->dir == 0) && conf->sync_with_other)
3400c8c8:	ea4f 58c8 	mov.w	r8, r8, lsl #23
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c8cc:	f006 0103 	and.w	r1, r6, #3
3400c8d0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
  if ((conf->dir == 0) && conf->sync_with_other)
3400c8d4:	ea4f 58d8 	mov.w	r8, r8, lsr #23
  if (conf->dir == 1)
3400c8d8:	9901      	ldr	r1, [sp, #4]
  ATON_STRENG_LIMIT_SET(id, conf->frame_tot_cnt);
3400c8da:	f8c4 a034 	str.w	sl, [r4, #52]	@ 0x34
  if ((conf->dir == 0) && conf->sync_with_other)
3400c8de:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c8e2:	ea43 0300 	orr.w	r3, r3, r0
  if (conf->dir == 1)
3400c8e6:	ea4f 40c1 	mov.w	r0, r1, lsl #19
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400c8ea:	bf09      	itett	eq
3400c8ec:	78e9      	ldrbeq	r1, [r5, #3]
  t = ATON_STRENG_EVENT_SET_EN_ILLCFG(t, 1); // Enable Illegal Configuration interrupt
3400c8ee:	f440 1180 	orrne.w	r1, r0, #1048576	@ 0x100000
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400c8f2:	0609      	lsleq	r1, r1, #24
3400c8f4:	f001 51f8 	andeq.w	r1, r1, #520093696	@ 0x1f000000
3400c8f8:	bf08      	it	eq
3400c8fa:	4301      	orreq	r1, r0
  ATON_STRENG_POS_SET(id, t);
3400c8fc:	f04f 0024 	mov.w	r0, #36	@ 0x24
3400c900:	6260      	str	r0, [r4, #36]	@ 0x24
  ATON_STRENG_STRD_SET(id, t_streng_strd);
3400c902:	6162      	str	r2, [r4, #20]
  ATON_STRENG_CID_CACHE_SET(id, t_streng_cid_cache);
3400c904:	64a3      	str	r3, [r4, #72]	@ 0x48
  t = ATON_STRENG_ENCR_MSB_SET_EN(t, conf->cipher_en);
3400c906:	f3c6 0380 	ubfx	r3, r6, #2, #1
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
3400c90a:	f3c6 06c0 	ubfx	r6, r6, #3, #1
3400c90e:	ea4f 3686 	mov.w	r6, r6, lsl #14
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400c912:	bf08      	it	eq
3400c914:	f441 0110 	orreq.w	r1, r1, #9437184	@ 0x900000
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
3400c918:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  ATON_STRENG_EVENT_SET(id, t_streng_event);
3400c91c:	62a1      	str	r1, [r4, #40]	@ 0x28
  return 0;
3400c91e:	2000      	movs	r0, #0
  ATON_STRENG_ENCR_MSB_SET(id, t);
3400c920:	6466      	str	r6, [r4, #68]	@ 0x44
  return 0;
3400c922:	e70e      	b.n	3400c742 <LL_Streng_TensorInit+0x12>
  int io_case = ((conf->dir != 0) << 1);
3400c924:	0042      	lsls	r2, r0, #1
3400c926:	f002 0202 	and.w	r2, r2, #2
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400c92a:	4566      	cmp	r6, ip
3400c92c:	ea52 9222 			@ <UNDEFINED> instruction: 0xea529222
  switch (io_case)
3400c930:	2a02      	cmp	r2, #2
3400c932:	f47f af52 	bne.w	3400c7da <LL_Streng_TensorInit+0xaa>
3400c936:	2200      	movs	r2, #0
3400c938:	e00f      	b.n	3400c95a <LL_Streng_TensorInit+0x22a>
3400c93a:	2200      	movs	r2, #0
3400c93c:	e75e      	b.n	3400c7fc <LL_Streng_TensorInit+0xcc>
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400c93e:	2100      	movs	r1, #0
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
3400c940:	460b      	mov	r3, r1
3400c942:	e76a      	b.n	3400c81a <LL_Streng_TensorInit+0xea>
    nbits_out = nbits_in;
3400c944:	4633      	mov	r3, r6
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400c946:	ebac 0206 	sub.w	r2, ip, r6
    if (conf->mem_lsb)
3400c94a:	0601      	lsls	r1, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400c94c:	bf4b      	itete	mi
3400c94e:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
3400c950:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400c952:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
3400c956:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    out_bits[0] = _LL_min(8, nbits_out);
3400c95a:	2b08      	cmp	r3, #8
3400c95c:	469e      	mov	lr, r3
3400c95e:	bfa8      	it	ge
3400c960:	f04f 0e08 	movge.w	lr, #8
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400c964:	2b08      	cmp	r3, #8
3400c966:	dd10      	ble.n	3400c98a <LL_Streng_TensorInit+0x25a>
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400c968:	2b10      	cmp	r3, #16
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400c96a:	bfd5      	itete	le
3400c96c:	f1a3 0108 	suble.w	r1, r3, #8
3400c970:	2108      	movgt	r1, #8
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400c972:	2300      	movle	r3, #0
3400c974:	3b10      	subgt	r3, #16
    if (conf->align_right)
3400c976:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
3400c97a:	f1b9 0f00 	cmp.w	r9, #0
3400c97e:	f47f af5d 	bne.w	3400c83c <LL_Streng_TensorInit+0x10c>
      if (nbits_in > 16)
3400c982:	2e10      	cmp	r6, #16
3400c984:	dc04      	bgt.n	3400c990 <LL_Streng_TensorInit+0x260>
      else if (nbits_in > 8)
3400c986:	2e08      	cmp	r6, #8
3400c988:	e752      	b.n	3400c830 <LL_Streng_TensorInit+0x100>
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400c98a:	2100      	movs	r1, #0
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400c98c:	460b      	mov	r3, r1
3400c98e:	e7f2      	b.n	3400c976 <LL_Streng_TensorInit+0x246>
3400c990:	46f1      	mov	r9, lr
        ch_bits[0] = out_bits[2];
3400c992:	469e      	mov	lr, r3
        ch_bits[2] = out_bits[0];
3400c994:	464b      	mov	r3, r9
3400c996:	e751      	b.n	3400c83c <LL_Streng_TensorInit+0x10c>
  int ch_bits[3] = {0, 0, 0};
3400c998:	465b      	mov	r3, fp
3400c99a:	4659      	mov	r1, fp
3400c99c:	e74e      	b.n	3400c83c <LL_Streng_TensorInit+0x10c>
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
3400c99e:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
    t = ATON_STRENG_FSIZE_SET_WIDTH(t, conf->fwidth);
3400c9a2:	b2b0      	uxth	r0, r6
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400c9a4:	434e      	muls	r6, r1
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
3400c9a6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400c9aa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
    ATON_STRENG_FSIZE_SET(id, t);
3400c9ac:	60e3      	str	r3, [r4, #12]
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400c9ae:	2800      	cmp	r0, #0
3400c9b0:	bf08      	it	eq
3400c9b2:	4630      	moveq	r0, r6
    t_streng_strd = ATON_STRENG_STRD_SET_LOFF(t_streng_strd, line_offset);
3400c9b4:	b283      	uxth	r3, r0
3400c9b6:	431a      	orrs	r2, r3
    t = ATON_STRENG_DEPTH_SET_SIZE(t, conf->batch_depth);
3400c9b8:	8c2b      	ldrh	r3, [r5, #32]
    t = ATON_STRENG_CID_CACHE_SET_LOFF_MSB(t, (line_offset >> ATON_STRENG_STRD_LOFF_W));
3400c9ba:	f36f 000f 	bfc	r0, #0, #16
    t = ATON_STRENG_DEPTH_SET_OFFSET(t, conf->batch_offset);
3400c9be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ATON_STRENG_DEPTH_SET(id, t);
3400c9c2:	6123      	str	r3, [r4, #16]
3400c9c4:	e75c      	b.n	3400c880 <LL_Streng_TensorInit+0x150>
	...

3400c9c8 <LL_Convacc_Init>:
  if (id >= ATON_CONVACC_NUM)
3400c9c8:	2803      	cmp	r0, #3
{
3400c9ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400c9ce:	4606      	mov	r6, r0
3400c9d0:	460c      	mov	r4, r1
  if (id >= ATON_CONVACC_NUM)
3400c9d2:	f300 814e 	bgt.w	3400cc72 <LL_Convacc_Init+0x2aa>
  LL_ATON_EnableClock(ATON_CONVACC_CLKB_CLK(id));
3400c9d6:	300a      	adds	r0, #10
3400c9d8:	f7ff fe9a 	bl	3400c710 <LL_ATON_EnableClock>
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
3400c9dc:	78a5      	ldrb	r5, [r4, #2]
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
3400c9de:	7862      	ldrb	r2, [r4, #1]
  t = ATON_CONVACC_CTRL_SET_KT1(t, (conf->kt1_mode != 0));
3400c9e0:	f005 0308 	and.w	r3, r5, #8
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
3400c9e4:	f3c2 1101 	ubfx	r1, r2, #4, #2
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9e8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
3400c9ec:	78e1      	ldrb	r1, [r4, #3]
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
3400c9ee:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
3400c9f2:	f001 0103 	and.w	r1, r1, #3
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9f6:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
  t = ATON_CONVACC_CTRL_SET_FUNSIGNED(t, conf->f_unsigned);
3400c9fa:	f3c5 1180 	ubfx	r1, r5, #6, #1
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9fe:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
3400ca02:	09e9      	lsrs	r1, r5, #7
3400ca04:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  t = ATON_CONVACC_CTRL_SET_NOSUM(t, (conf->accumulate == 0));
3400ca08:	f3c2 1180 	ubfx	r1, r2, #6, #1
3400ca0c:	f081 0101 	eor.w	r1, r1, #1
3400ca10:	b2c9      	uxtb	r1, r1
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400ca12:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  t = ATON_CONVACC_CTRL_SET_NO1SUM(t, (conf->accumulate_first == 0));
3400ca16:	f082 0180 	eor.w	r1, r2, #128	@ 0x80
3400ca1a:	09c9      	lsrs	r1, r1, #7
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400ca1c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
3400ca20:	02a9      	lsls	r1, r5, #10
3400ca22:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400ca26:	430b      	orrs	r3, r1
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
3400ca28:	0201      	lsls	r1, r0, #8
3400ca2a:	f401 7140 	and.w	r1, r1, #768	@ 0x300
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400ca2e:	430b      	orrs	r3, r1
  t = ATON_CONVACC_CTRL_SET_FSTAT(t, (conf->fstat != 0));
3400ca30:	05e9      	lsls	r1, r5, #23
3400ca32:	f001 7180 	and.w	r1, r1, #16777216	@ 0x1000000
3400ca36:	4319      	orrs	r1, r3
  t = ATON_CONVACC_CTRL_SET_DEEPMODE(t, (conf->deepmode != 0));
3400ca38:	062b      	lsls	r3, r5, #24
3400ca3a:	f003 5780 	and.w	r7, r3, #268435456	@ 0x10000000
3400ca3e:	4339      	orrs	r1, r7
  if ((conf->fstat != 0) && (conf->deepmode != 0))
3400ca40:	f005 0712 	and.w	r7, r5, #18
3400ca44:	2f12      	cmp	r7, #18
3400ca46:	f000 8117 	beq.w	3400cc78 <LL_Convacc_Init+0x2b0>
  t = ATON_CONVACC_CTRL_SET_DSS2MODE(t, (conf->dss2mode != 0));
3400ca4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
3400ca4e:	430b      	orrs	r3, r1
  if ((conf->fstat != 0) && (conf->dss2mode != 0))
3400ca50:	f005 0122 	and.w	r1, r5, #34	@ 0x22
3400ca54:	2922      	cmp	r1, #34	@ 0x22
3400ca56:	f000 810f 	beq.w	3400cc78 <LL_Convacc_Init+0x2b0>
  if ((conf->dss2mode != 0) && (conf->deepmode != 0))
3400ca5a:	f005 0130 	and.w	r1, r5, #48	@ 0x30
3400ca5e:	2930      	cmp	r1, #48	@ 0x30
3400ca60:	f000 810a 	beq.w	3400cc78 <LL_Convacc_Init+0x2b0>
  ATON_CONVACC_CTRL_SET(id, t);
3400ca64:	f506 21b0 	add.w	r1, r6, #360448	@ 0x58000
  Conv_ctrl_bits[id] = t;
3400ca68:	4f85      	ldr	r7, [pc, #532]	@ (3400cc80 <LL_Convacc_Init+0x2b8>)
  ATON_CONVACC_CTRL_SET(id, t);
3400ca6a:	31ef      	adds	r1, #239	@ 0xef
3400ca6c:	0309      	lsls	r1, r1, #12
3400ca6e:	600b      	str	r3, [r1, #0]
  Conv_ctrl_bits[id] = t;
3400ca70:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
  if (conf->afilt_mode != AFILT_MODE_NONE)
3400ca74:	b150      	cbz	r0, 3400ca8c <LL_Convacc_Init+0xc4>
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400ca76:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
    t = ATON_CONVACC_AFILT_SET_FIRST(t, conf->afilt_first);
3400ca7a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400ca7e:	041b      	lsls	r3, r3, #16
3400ca80:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    t = ATON_CONVACC_AFILT_SET_TOT(t, conf->afilt_tot);
3400ca84:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400ca88:	4303      	orrs	r3, r0
    ATON_CONVACC_AFILT_SET(id, t);
3400ca8a:	624b      	str	r3, [r1, #36]	@ 0x24
  if (conf->kfilt_tot > 0)
3400ca8c:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
3400ca90:	b140      	cbz	r0, 3400caa4 <LL_Convacc_Init+0xdc>
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
3400ca92:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
    t = ATON_CONVACC_KFILT_SET_FIRST(t, conf->kfilt_first);
3400ca96:	f894 602f 	ldrb.w	r6, [r4, #47]	@ 0x2f
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
3400ca9a:	041b      	lsls	r3, r3, #16
3400ca9c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
3400caa0:	4303      	orrs	r3, r0
    ATON_CONVACC_KFILT_SET(id, t);
3400caa2:	620b      	str	r3, [r1, #32]
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400caa4:	7923      	ldrb	r3, [r4, #4]
  t = ATON_CONVACC_DFORMAT_SET_ROUND(t, conf->rounding_o);
3400caa6:	7826      	ldrb	r6, [r4, #0]
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400caa8:	3310      	adds	r3, #16
  t = ATON_CONVACC_DFORMAT_SET_SAT(t, conf->saturation_o);
3400caaa:	02b0      	lsls	r0, r6, #10
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400caac:	061b      	lsls	r3, r3, #24
3400caae:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
3400cab2:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
3400cab6:	4318      	orrs	r0, r3
3400cab8:	f002 0303 	and.w	r3, r2, #3
3400cabc:	ea40 3083 	orr.w	r0, r0, r3, lsl #14
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
3400cac0:	f3c6 1301 	ubfx	r3, r6, #4, #2
  t = ATON_CONVACC_DFORMAT_SET_FROUND(t, conf->rounding_f);
3400cac4:	f006 0701 	and.w	r7, r6, #1
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
3400cac8:	059b      	lsls	r3, r3, #22
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400caca:	ea43 7387 	orr.w	r3, r3, r7, lsl #30
  t = ATON_CONVACC_DFORMAT_SET_FSAT(t, conf->saturation_f);
3400cace:	f3c6 0740 	ubfx	r7, r6, #1, #1
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400cad2:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
  t = ATON_CONVACC_DFORMAT_SET_FRNDMODE(t, conf->round_mode_f);
3400cad6:	f3c6 0681 	ubfx	r6, r6, #2, #2
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400cada:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
3400cade:	4303      	orrs	r3, r0
  t = ATON_CONVACC_DFORMAT_SET_OBYTES(t, conf->outbytes_o);
3400cae0:	f3c2 0281 	ubfx	r2, r2, #2, #2
3400cae4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
3400cae8:	79a2      	ldrb	r2, [r4, #6]
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
3400caea:	f3c5 0080 	ubfx	r0, r5, #2, #1
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
3400caee:	0212      	lsls	r2, r2, #8
3400caf0:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
3400caf4:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
3400caf8:	4313      	orrs	r3, r2
3400cafa:	7962      	ldrb	r2, [r4, #5]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cafc:	8aa0      	ldrh	r0, [r4, #20]
  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
3400cafe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
3400cb02:	4313      	orrs	r3, r2
  ATON_CONVACC_DFORMAT_SET(id, t);
3400cb04:	610b      	str	r3, [r1, #16]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cb06:	68a3      	ldr	r3, [r4, #8]
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
3400cb08:	68e2      	ldr	r2, [r4, #12]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cb0a:	4343      	muls	r3, r0
3400cb0c:	b29b      	uxth	r3, r3
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
3400cb0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  ATON_CONVACC_FFORMAT_SET(id, t);
3400cb12:	614b      	str	r3, [r1, #20]
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cb14:	8a27      	ldrh	r7, [r4, #16]
  t = ATON_CONVACC_KFORMAT_SET_BTCDEPTH(t, conf->batchDepth);
3400cb16:	0403      	lsls	r3, r0, #16
3400cb18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  t = ATON_CONVACC_KFORMAT_SET_HEIGHT(t, conf->kernelHeight);
3400cb1c:	7c62      	ldrb	r2, [r4, #17]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cb1e:	f8b4 801c 	ldrh.w	r8, [r4, #28]
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cb22:	433b      	orrs	r3, r7
3400cb24:	7ca7      	ldrb	r7, [r4, #18]
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cb26:	f8b4 a01e 	ldrh.w	sl, [r4, #30]
  t = ATON_CONVACC_KFORMAT_SET_WIDTH(t, conf->kernelWidth);
3400cb2a:	7c26      	ldrb	r6, [r4, #16]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cb2c:	4590      	cmp	r8, r2
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cb2e:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
3400cb32:	f8b4 9018 	ldrh.w	r9, [r4, #24]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cb36:	f102 37ff 	add.w	r7, r2, #4294967295	@ 0xffffffff
3400cb3a:	bf2c      	ite	cs
3400cb3c:	46bc      	movcs	ip, r7
3400cb3e:	46c4      	movcc	ip, r8
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cb40:	4552      	cmp	r2, sl
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
3400cb42:	8b62      	ldrh	r2, [r4, #26]
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cb44:	bf88      	it	hi
3400cb46:	4657      	movhi	r7, sl
  ATON_CONVACC_KFORMAT_SET(id, t);
3400cb48:	608b      	str	r3, [r1, #8]
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
3400cb4a:	45b1      	cmp	r9, r6
3400cb4c:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
3400cb50:	bf2c      	ite	cs
3400cb52:	469e      	movcs	lr, r3
3400cb54:	46ce      	movcc	lr, r9
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
3400cb56:	4296      	cmp	r6, r2
3400cb58:	bf88      	it	hi
3400cb5a:	4613      	movhi	r3, r2
  if (conf->deepmode != 0)
3400cb5c:	06ee      	lsls	r6, r5, #27
3400cb5e:	f100 8083 	bmi.w	3400cc68 <LL_Convacc_Init+0x2a0>
  p_top = (p_top <= 2 ? p_top : 2);
3400cb62:	f1bc 0f02 	cmp.w	ip, #2
3400cb66:	bfa8      	it	ge
3400cb68:	f04f 0c02 	movge.w	ip, #2
  p_bot = (p_bot <= 2 ? p_bot : 2);
3400cb6c:	2f02      	cmp	r7, #2
3400cb6e:	bfa8      	it	ge
3400cb70:	2702      	movge	r7, #2
  p_left = (p_left <= 2 ? p_left : 2);
3400cb72:	f1be 0f02 	cmp.w	lr, #2
3400cb76:	bfa8      	it	ge
3400cb78:	f04f 0e02 	movge.w	lr, #2
  p_right = (p_right <= 2 ? p_right : 2);
3400cb7c:	2b02      	cmp	r3, #2
3400cb7e:	bfa8      	it	ge
3400cb80:	2302      	movge	r3, #2
  if (conf->dss2mode != 0)
3400cb82:	06ae      	lsls	r6, r5, #26
    p_top = p_bot = p_left = p_right = 0;
3400cb84:	bf48      	it	mi
3400cb86:	2300      	movmi	r3, #0
  if (conf->zfbias != 0)
3400cb88:	f9b4 6038 	ldrsh.w	r6, [r4, #56]	@ 0x38
    p_top = p_bot = p_left = p_right = 0;
3400cb8c:	bf42      	ittt	mi
3400cb8e:	469e      	movmi	lr, r3
3400cb90:	461f      	movmi	r7, r3
3400cb92:	469c      	movmi	ip, r3
  if (conf->zfbias != 0)
3400cb94:	b11e      	cbz	r6, 3400cb9e <LL_Convacc_Init+0x1d6>
    p_top = p_bot = p_left = p_right = 0;
3400cb96:	2300      	movs	r3, #0
3400cb98:	469e      	mov	lr, r3
3400cb9a:	461f      	mov	r7, r3
3400cb9c:	469c      	mov	ip, r3
  int z_left = (conf->left_padding - p_left);
3400cb9e:	eba9 090e 	sub.w	r9, r9, lr
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cba2:	fb00 f909 	mul.w	r9, r0, r9
  int z_right = (conf->right_padding - p_right);
3400cba6:	1ad2      	subs	r2, r2, r3
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cba8:	4342      	muls	r2, r0
  int z_top = (conf->top_padding - p_top);
3400cbaa:	eba8 080c 	sub.w	r8, r8, ip
  t = ATON_CONVACC_ZFRAME_SET_TOP(t, z_top);
3400cbae:	ea4f 4808 	mov.w	r8, r8, lsl #16
3400cbb2:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cbb6:	fa5f f989 	uxtb.w	r9, r9
  int z_bot = (conf->bot_padding - p_bot);
3400cbba:	ebaa 0a07 	sub.w	sl, sl, r7
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cbbe:	ea48 0809 	orr.w	r8, r8, r9
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cbc2:	0212      	lsls	r2, r2, #8
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cbc4:	ea48 680a 	orr.w	r8, r8, sl, lsl #24
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cbc8:	b292      	uxth	r2, r2
3400cbca:	ea42 0208 	orr.w	r2, r2, r8
  ATON_CONVACC_ZFRAME_SET(id, t);
3400cbce:	628a      	str	r2, [r1, #40]	@ 0x28
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
3400cbd0:	7da2      	ldrb	r2, [r4, #22]
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
3400cbd2:	009b      	lsls	r3, r3, #2
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
3400cbd4:	0212      	lsls	r2, r2, #8
3400cbd6:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
3400cbda:	f003 030c 	and.w	r3, r3, #12
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cbde:	4313      	orrs	r3, r2
  t = ATON_CONVACC_SAMPLE_SET_LPAD(t, p_left);
3400cbe0:	f00e 0e03 	and.w	lr, lr, #3
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cbe4:	7de2      	ldrb	r2, [r4, #23]
  t = ATON_CONVACC_SAMPLE_SET_TPAD(t, p_top);
3400cbe6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
3400cbea:	f00c 0c30 	and.w	ip, ip, #48	@ 0x30
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cbee:	ea43 030e 	orr.w	r3, r3, lr
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
3400cbf2:	01bf      	lsls	r7, r7, #6
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cbf4:	ea43 030c 	orr.w	r3, r3, ip
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
3400cbf8:	b2ff      	uxtb	r7, r7
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cbfa:	0312      	lsls	r2, r2, #12
3400cbfc:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
3400cc00:	433b      	orrs	r3, r7
3400cc02:	4313      	orrs	r3, r2
  if (conf->fstat != 0)
3400cc04:	07aa      	lsls	r2, r5, #30
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
3400cc06:	bf48      	it	mi
3400cc08:	8d22      	ldrhmi	r2, [r4, #40]	@ 0x28
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
3400cc0a:	4f1e      	ldr	r7, [pc, #120]	@ (3400cc84 <LL_Convacc_Init+0x2bc>)
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
3400cc0c:	bf48      	it	mi
3400cc0e:	ea43 4302 	orrmi.w	r3, r3, r2, lsl #16
  if (conf->left_crop > 0)
3400cc12:	8c22      	ldrh	r2, [r4, #32]
  ATON_CONVACC_SAMPLE_SET(id, t);
3400cc14:	60cb      	str	r3, [r1, #12]
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
3400cc16:	fb00 f302 	mul.w	r3, r0, r2
3400cc1a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
3400cc1e:	2a00      	cmp	r2, #0
3400cc20:	ea6f 4313 	mvn.w	r3, r3, lsr #16
3400cc24:	bf08      	it	eq
3400cc26:	463b      	moveq	r3, r7
  if (conf->right_crop > 0)
3400cc28:	f8b4 c022 	ldrh.w	ip, [r4, #34]	@ 0x22
    t = ATON_CONVACC_FHCROP_SET_RIGHT(t, conf->right_crop * conf->batchDepth + (conf->batchDepth - 1));
3400cc2c:	1e45      	subs	r5, r0, #1
3400cc2e:	fb00 500c 	mla	r0, r0, ip, r5
3400cc32:	b29a      	uxth	r2, r3
3400cc34:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
3400cc38:	f1bc 0f00 	cmp.w	ip, #0
3400cc3c:	bf18      	it	ne
3400cc3e:	4613      	movne	r3, r2
  if (conf->bot_crop > 0)
3400cc40:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
  if (conf->top_crop > 0)
3400cc42:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
3400cc44:	2800      	cmp	r0, #0
3400cc46:	ea42 0207 	orr.w	r2, r2, r7
  ATON_CONVACC_FHCROP_SET(id, t);
3400cc4a:	618b      	str	r3, [r1, #24]
    t = ATON_CONVACC_FVCROP_SET_BOTTOM(t, conf->bot_crop);
3400cc4c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
3400cc4e:	bf08      	it	eq
3400cc50:	4613      	moveq	r3, r2
  ATON_CONVACC_FVCROP_SET(id, t);
3400cc52:	61cb      	str	r3, [r1, #28]
  if (conf->fsub != 0)
3400cc54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400cc56:	b113      	cbz	r3, 3400cc5e <LL_Convacc_Init+0x296>
    t = ATON_CONVACC_FSUB_SET_FSUB(t, conf->fsub);
3400cc58:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    ATON_CONVACC_FSUB_SET(id, t);
3400cc5c:	630b      	str	r3, [r1, #48]	@ 0x30
  return 0;
3400cc5e:	2000      	movs	r0, #0
    t = ATON_CONVACC_ZFBIAS_SET_ZFBIAS(t, conf->zfbias);
3400cc60:	b2b6      	uxth	r6, r6
  ATON_CONVACC_ZFBIAS_SET(id, t);
3400cc62:	634e      	str	r6, [r1, #52]	@ 0x34
}
3400cc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_top = p_bot = p_left = p_right = 0;
3400cc68:	2300      	movs	r3, #0
3400cc6a:	469e      	mov	lr, r3
3400cc6c:	461f      	mov	r7, r3
3400cc6e:	469c      	mov	ip, r3
3400cc70:	e787      	b.n	3400cb82 <LL_Convacc_Init+0x1ba>
    return LL_ATON_INVALID_ID;
3400cc72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400cc76:	e7f5      	b.n	3400cc64 <LL_Convacc_Init+0x29c>
    return LL_ATON_INVALID_PARAM;
3400cc78:	f06f 0001 	mvn.w	r0, #1
3400cc7c:	e7f2      	b.n	3400cc64 <LL_Convacc_Init+0x29c>
3400cc7e:	bf00      	nop
3400cc80:	34012e0c 	.word	0x34012e0c
3400cc84:	ffff0000 	.word	0xffff0000

3400cc88 <LL_EpochCtrl_Init>:
  if (id >= ATON_EPOCHCTRL_NUM)
3400cc88:	2800      	cmp	r0, #0
{
3400cc8a:	b510      	push	{r4, lr}
3400cc8c:	460c      	mov	r4, r1
  if (id >= ATON_EPOCHCTRL_NUM)
3400cc8e:	dc0e      	bgt.n	3400ccae <LL_EpochCtrl_Init+0x26>
  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
3400cc90:	3019      	adds	r0, #25
3400cc92:	f7ff fd3d 	bl	3400c710 <LL_ATON_EnableClock>
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400cc96:	7923      	ldrb	r3, [r4, #4]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400cc98:	4a08      	ldr	r2, [pc, #32]	@ (3400ccbc <LL_EpochCtrl_Init+0x34>)
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400cc9a:	f003 0301 	and.w	r3, r3, #1
3400cc9e:	00db      	lsls	r3, r3, #3
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400cca0:	6013      	str	r3, [r2, #0]
  if (conf->blobaddr & 0x7)
3400cca2:	6823      	ldr	r3, [r4, #0]
3400cca4:	f013 0007 	ands.w	r0, r3, #7
3400cca8:	d104      	bne.n	3400ccb4 <LL_EpochCtrl_Init+0x2c>
  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
3400ccaa:	6093      	str	r3, [r2, #8]
}
3400ccac:	bd10      	pop	{r4, pc}
    return LL_ATON_INVALID_ID;
3400ccae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400ccb2:	e7fb      	b.n	3400ccac <LL_EpochCtrl_Init+0x24>
    return LL_ATON_INVALID_PARAM;
3400ccb4:	f06f 0001 	mvn.w	r0, #1
3400ccb8:	e7f8      	b.n	3400ccac <LL_EpochCtrl_Init+0x24>
3400ccba:	bf00      	nop
3400ccbc:	580fe000 	.word	0x580fe000

3400ccc0 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
3400ccc0:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
3400ccc2:	2401      	movs	r4, #1
3400ccc4:	2500      	movs	r5, #0
3400ccc6:	ea54 050d 	orrs.w	r5, r4, sp
3400ccca:	4a03      	ldr	r2, [pc, #12]	@ (3400ccd8 <LL_ATON_DisableClock+0x18>)
3400cccc:	6913      	ldr	r3, [r2, #16]
3400ccce:	ea23 0304 	bic.w	r3, r3, r4
3400ccd2:	6113      	str	r3, [r2, #16]
#endif
}
3400ccd4:	bd30      	pop	{r4, r5, pc}
3400ccd6:	bf00      	nop
3400ccd8:	580e0000 	.word	0x580e0000

3400ccdc <LL_ATON_DisableUnits_Init>:
{
3400ccdc:	b570      	push	{r4, r5, r6, lr}
3400ccde:	4605      	mov	r5, r0
  for (i = 0; i < n; i++)
3400cce0:	2400      	movs	r4, #0
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
3400cce2:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
3400cce4:	428c      	cmp	r4, r1
3400cce6:	db01      	blt.n	3400ccec <LL_ATON_DisableUnits_Init+0x10>
  return LL_ATON_OK;
3400cce8:	2000      	movs	r0, #0
}
3400ccea:	bd70      	pop	{r4, r5, r6, pc}
    switch (unitType)
3400ccec:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
3400ccf0:	f836 0024 	ldrh.w	r0, [r6, r4, lsl #2]
    switch (unitType)
3400ccf4:	2b08      	cmp	r3, #8
3400ccf6:	d87a      	bhi.n	3400cdee <LL_ATON_DisableUnits_Init+0x112>
3400ccf8:	e8df f003 	tbb	[pc, r3]
3400ccfc:	29187905 	.word	0x29187905
3400cd00:	795b4a3a 	.word	0x795b4a3a
3400cd04:	6b          	.byte	0x6b
3400cd05:	00          	.byte	0x00
      ATON_DISABLE_CLR_CONFCLR(STRENG, unitId);
3400cd06:	2202      	movs	r2, #2
3400cd08:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cd0c:	33e5      	adds	r3, #229	@ 0xe5
3400cd0e:	031b      	lsls	r3, r3, #12
3400cd10:	601a      	str	r2, [r3, #0]
3400cd12:	681a      	ldr	r2, [r3, #0]
3400cd14:	0792      	lsls	r2, r2, #30
3400cd16:	d4fc      	bmi.n	3400cd12 <LL_ATON_DisableUnits_Init+0x36>
3400cd18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cd1c:	601a      	str	r2, [r3, #0]
3400cd1e:	681a      	ldr	r2, [r3, #0]
3400cd20:	0052      	lsls	r2, r2, #1
3400cd22:	d4fc      	bmi.n	3400cd1e <LL_ATON_DisableUnits_Init+0x42>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
3400cd24:	f7ff ffcc 	bl	3400ccc0 <LL_ATON_DisableClock>
  for (i = 0; i < n; i++)
3400cd28:	3401      	adds	r4, #1
3400cd2a:	e7db      	b.n	3400cce4 <LL_ATON_DisableUnits_Init+0x8>
      ATON_DISABLE_CLR_CONFCLR(CONVACC, unitId);
3400cd2c:	2202      	movs	r2, #2
3400cd2e:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cd32:	33ef      	adds	r3, #239	@ 0xef
3400cd34:	031b      	lsls	r3, r3, #12
3400cd36:	601a      	str	r2, [r3, #0]
3400cd38:	681a      	ldr	r2, [r3, #0]
3400cd3a:	0792      	lsls	r2, r2, #30
3400cd3c:	d4fc      	bmi.n	3400cd38 <LL_ATON_DisableUnits_Init+0x5c>
3400cd3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cd42:	601a      	str	r2, [r3, #0]
3400cd44:	681a      	ldr	r2, [r3, #0]
3400cd46:	0052      	lsls	r2, r2, #1
3400cd48:	d4fc      	bmi.n	3400cd44 <LL_ATON_DisableUnits_Init+0x68>
      LL_ATON_DisableClock(ATON_CONVACC_CLKB_CLK(unitId));
3400cd4a:	300a      	adds	r0, #10
3400cd4c:	e7ea      	b.n	3400cd24 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(DECUN, unitId);
3400cd4e:	2202      	movs	r2, #2
3400cd50:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cd54:	33f3      	adds	r3, #243	@ 0xf3
3400cd56:	031b      	lsls	r3, r3, #12
3400cd58:	601a      	str	r2, [r3, #0]
3400cd5a:	681a      	ldr	r2, [r3, #0]
3400cd5c:	0792      	lsls	r2, r2, #30
3400cd5e:	d4fc      	bmi.n	3400cd5a <LL_ATON_DisableUnits_Init+0x7e>
3400cd60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cd64:	601a      	str	r2, [r3, #0]
3400cd66:	681a      	ldr	r2, [r3, #0]
3400cd68:	0052      	lsls	r2, r2, #1
3400cd6a:	d4fc      	bmi.n	3400cd66 <LL_ATON_DisableUnits_Init+0x8a>
      LL_ATON_DisableClock(ATON_DECUN_CLKB_CLK(unitId));
3400cd6c:	300e      	adds	r0, #14
3400cd6e:	e7d9      	b.n	3400cd24 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ACTIV, unitId);
3400cd70:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cd74:	4a1f      	ldr	r2, [pc, #124]	@ (3400cdf4 <LL_ATON_DisableUnits_Init+0x118>)
3400cd76:	33f5      	adds	r3, #245	@ 0xf5
3400cd78:	031b      	lsls	r3, r3, #12
3400cd7a:	601a      	str	r2, [r3, #0]
3400cd7c:	681a      	ldr	r2, [r3, #0]
3400cd7e:	0792      	lsls	r2, r2, #30
3400cd80:	d4fc      	bmi.n	3400cd7c <LL_ATON_DisableUnits_Init+0xa0>
3400cd82:	4a1d      	ldr	r2, [pc, #116]	@ (3400cdf8 <LL_ATON_DisableUnits_Init+0x11c>)
3400cd84:	601a      	str	r2, [r3, #0]
3400cd86:	681a      	ldr	r2, [r3, #0]
3400cd88:	0052      	lsls	r2, r2, #1
3400cd8a:	d4fc      	bmi.n	3400cd86 <LL_ATON_DisableUnits_Init+0xaa>
      LL_ATON_DisableClock(ATON_ACTIV_CLKB_CLK(unitId));
3400cd8c:	3010      	adds	r0, #16
3400cd8e:	e7c9      	b.n	3400cd24 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ARITH, unitId);
3400cd90:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cd94:	4a19      	ldr	r2, [pc, #100]	@ (3400cdfc <LL_ATON_DisableUnits_Init+0x120>)
3400cd96:	33f7      	adds	r3, #247	@ 0xf7
3400cd98:	031b      	lsls	r3, r3, #12
3400cd9a:	601a      	str	r2, [r3, #0]
3400cd9c:	681a      	ldr	r2, [r3, #0]
3400cd9e:	0792      	lsls	r2, r2, #30
3400cda0:	d4fc      	bmi.n	3400cd9c <LL_ATON_DisableUnits_Init+0xc0>
3400cda2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
3400cda6:	601a      	str	r2, [r3, #0]
3400cda8:	681a      	ldr	r2, [r3, #0]
3400cdaa:	0052      	lsls	r2, r2, #1
3400cdac:	d4fc      	bmi.n	3400cda8 <LL_ATON_DisableUnits_Init+0xcc>
      LL_ATON_DisableClock(ATON_ARITH_CLKB_CLK(unitId));
3400cdae:	3012      	adds	r0, #18
3400cdb0:	e7b8      	b.n	3400cd24 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(POOL, unitId);
3400cdb2:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cdb6:	4a12      	ldr	r2, [pc, #72]	@ (3400ce00 <LL_ATON_DisableUnits_Init+0x124>)
3400cdb8:	33fb      	adds	r3, #251	@ 0xfb
3400cdba:	031b      	lsls	r3, r3, #12
3400cdbc:	601a      	str	r2, [r3, #0]
3400cdbe:	681a      	ldr	r2, [r3, #0]
3400cdc0:	0792      	lsls	r2, r2, #30
3400cdc2:	d4fc      	bmi.n	3400cdbe <LL_ATON_DisableUnits_Init+0xe2>
3400cdc4:	4a0f      	ldr	r2, [pc, #60]	@ (3400ce04 <LL_ATON_DisableUnits_Init+0x128>)
3400cdc6:	601a      	str	r2, [r3, #0]
3400cdc8:	681a      	ldr	r2, [r3, #0]
3400cdca:	0052      	lsls	r2, r2, #1
3400cdcc:	d4fc      	bmi.n	3400cdc8 <LL_ATON_DisableUnits_Init+0xec>
      LL_ATON_DisableClock(ATON_POOL_CLKB_CLK(unitId));
3400cdce:	3016      	adds	r0, #22
3400cdd0:	e7a8      	b.n	3400cd24 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(RECBUF, unitId);
3400cdd2:	2202      	movs	r2, #2
3400cdd4:	4b0c      	ldr	r3, [pc, #48]	@ (3400ce08 <LL_ATON_DisableUnits_Init+0x12c>)
3400cdd6:	601a      	str	r2, [r3, #0]
3400cdd8:	681a      	ldr	r2, [r3, #0]
3400cdda:	0792      	lsls	r2, r2, #30
3400cddc:	d4fc      	bmi.n	3400cdd8 <LL_ATON_DisableUnits_Init+0xfc>
3400cdde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cde2:	601a      	str	r2, [r3, #0]
3400cde4:	681a      	ldr	r2, [r3, #0]
3400cde6:	0052      	lsls	r2, r2, #1
3400cde8:	d4fc      	bmi.n	3400cde4 <LL_ATON_DisableUnits_Init+0x108>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
3400cdea:	3018      	adds	r0, #24
3400cdec:	e79a      	b.n	3400cd24 <LL_ATON_DisableUnits_Init+0x48>
    switch (unitType)
3400cdee:	f06f 0001 	mvn.w	r0, #1
3400cdf2:	e77a      	b.n	3400ccea <LL_ATON_DisableUnits_Init+0xe>
3400cdf4:	00881082 	.word	0x00881082
3400cdf8:	40881080 	.word	0x40881080
3400cdfc:	08000002 	.word	0x08000002
3400ce00:	00420002 	.word	0x00420002
3400ce04:	40420000 	.word	0x40420000
3400ce08:	580fd000 	.word	0x580fd000

3400ce0c <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
3400ce0c:	b510      	push	{r4, lr}

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
3400ce0e:	4604      	mov	r4, r0
3400ce10:	b928      	cbnz	r0, 3400ce1e <LL_ATON_RT_Main+0x12>
3400ce12:	213c      	movs	r1, #60	@ 0x3c
3400ce14:	4b0f      	ldr	r3, [pc, #60]	@ (3400ce54 <LL_ATON_RT_Main+0x48>)
3400ce16:	4a10      	ldr	r2, [pc, #64]	@ (3400ce58 <LL_ATON_RT_Main+0x4c>)
  LL_ATON_ASSERT(network_instance->network != NULL);
3400ce18:	4810      	ldr	r0, [pc, #64]	@ (3400ce5c <LL_ATON_RT_Main+0x50>)
3400ce1a:	f000 fc9d 	bl	3400d758 <__assert_func>
3400ce1e:	6803      	ldr	r3, [r0, #0]
3400ce20:	b91b      	cbnz	r3, 3400ce2a <LL_ATON_RT_Main+0x1e>
3400ce22:	213d      	movs	r1, #61	@ 0x3d
3400ce24:	4b0e      	ldr	r3, [pc, #56]	@ (3400ce60 <LL_ATON_RT_Main+0x54>)
3400ce26:	4a0c      	ldr	r2, [pc, #48]	@ (3400ce58 <LL_ATON_RT_Main+0x4c>)
3400ce28:	e7f6      	b.n	3400ce18 <LL_ATON_RT_Main+0xc>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
3400ce2a:	f000 fa15 	bl	3400d258 <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
3400ce2e:	4620      	mov	r0, r4
3400ce30:	f000 f9d0 	bl	3400d1d4 <LL_ATON_RT_Init_Network>
  size_t epochCount = 0;
  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
3400ce34:	4620      	mov	r0, r4
3400ce36:	f000 fa89 	bl	3400d34c <LL_ATON_RT_RunEpochBlock>
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
3400ce3a:	2801      	cmp	r0, #1
3400ce3c:	d101      	bne.n	3400ce42 <LL_ATON_RT_Main+0x36>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
3400ce3e:	bf20      	wfe
    }
//    printf("Epoch: %5d, Return: %d\n\r", epochCount, ll_aton_rt_ret);
//    epochCount++;
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3400ce40:	e7f8      	b.n	3400ce34 <LL_ATON_RT_Main+0x28>
3400ce42:	2802      	cmp	r0, #2
3400ce44:	d1f6      	bne.n	3400ce34 <LL_ATON_RT_Main+0x28>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
3400ce46:	4620      	mov	r0, r4
3400ce48:	f000 f9e8 	bl	3400d21c <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
3400ce4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
3400ce50:	f000 ba4c 	b.w	3400d2ec <LL_ATON_RT_RuntimeDeInit>
3400ce54:	34010dd9 	.word	0x34010dd9
3400ce58:	34011fbd 	.word	0x34011fbd
3400ce5c:	34010df9 	.word	0x34010df9
3400ce60:	34010e91 	.word	0x34010e91

3400ce64 <__LL_ATON_RT_Init_Network>:
                          // wait for
  }
}

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3400ce64:	b510      	push	{r4, lr}
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3400ce66:	4604      	mov	r4, r0
3400ce68:	b310      	cbz	r0, 3400ceb0 <__LL_ATON_RT_Init_Network+0x4c>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3400ce6a:	6803      	ldr	r3, [r0, #0]
3400ce6c:	b303      	cbz	r3, 3400ceb0 <__LL_ATON_RT_Init_Network+0x4c>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
3400ce6e:	69db      	ldr	r3, [r3, #28]
3400ce70:	4798      	blx	r3
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
  nn_instance->exec_state.first_epoch_block = eb_list;
  nn_instance->exec_state.next_epoch_block = NULL;
3400ce72:	2300      	movs	r3, #0
  nn_instance->exec_state.current_epoch_block = eb_list;
3400ce74:	6060      	str	r0, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400ce76:	60a0      	str	r0, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400ce78:	60e3      	str	r3, [r4, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400ce7a:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400ce7c:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400ce7e:	6863      	ldr	r3, [r4, #4]
  if (list != NULL)
3400ce80:	b9a3      	cbnz	r3, 3400ceac <__LL_ATON_RT_Init_Network+0x48>
  int i = 0;
3400ce82:	461a      	mov	r2, r3
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400ce84:	6262      	str	r2, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400ce86:	2200      	movs	r2, #0
  nn_instance->exec_state.triggered_events = 0x0;
  nn_instance->exec_state.current_epoch_block_started = false;
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400ce88:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400ce8a:	62a2      	str	r2, [r4, #40]	@ 0x28
  nn_instance->exec_state.inference_started = false;
3400ce8c:	7622      	strb	r2, [r4, #24]
  nn_instance->exec_state.triggered_events = 0x0;
3400ce8e:	61e2      	str	r2, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400ce90:	f884 2020 	strb.w	r2, [r4, #32]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400ce94:	b163      	cbz	r3, 3400ceb0 <__LL_ATON_RT_Init_Network+0x4c>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400ce96:	4621      	mov	r1, r4
  }
}
3400ce98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400ce9c:	2004      	movs	r0, #4
3400ce9e:	4718      	bx	r3
      list++;
3400cea0:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400cea2:	3201      	adds	r2, #1
3400cea4:	8a19      	ldrh	r1, [r3, #16]
3400cea6:	0709      	lsls	r1, r1, #28
3400cea8:	d5fa      	bpl.n	3400cea0 <__LL_ATON_RT_Init_Network+0x3c>
3400ceaa:	e7eb      	b.n	3400ce84 <__LL_ATON_RT_Init_Network+0x20>
3400ceac:	2201      	movs	r2, #1
3400ceae:	e7f9      	b.n	3400cea4 <__LL_ATON_RT_Init_Network+0x40>
}
3400ceb0:	bd10      	pop	{r4, pc}
	...

3400ceb4 <__ll_clear_aton_owner>:

    __ll_current_aton_ip_owner = new_owner;
  }

  static inline void __ll_clear_aton_owner(NN_Instance_TypeDef *current_owner)
  {
3400ceb4:	b508      	push	{r3, lr}
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
3400ceb6:	4b09      	ldr	r3, [pc, #36]	@ (3400cedc <__ll_clear_aton_owner+0x28>)
3400ceb8:	681a      	ldr	r2, [r3, #0]
3400ceba:	4282      	cmp	r2, r0
3400cebc:	d005      	beq.n	3400ceca <__ll_clear_aton_owner+0x16>
3400cebe:	2142      	movs	r1, #66	@ 0x42
3400cec0:	4b07      	ldr	r3, [pc, #28]	@ (3400cee0 <__ll_clear_aton_owner+0x2c>)
3400cec2:	4a08      	ldr	r2, [pc, #32]	@ (3400cee4 <__ll_clear_aton_owner+0x30>)

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400cec4:	4808      	ldr	r0, [pc, #32]	@ (3400cee8 <__ll_clear_aton_owner+0x34>)
3400cec6:	f000 fc47 	bl	3400d758 <__assert_func>
3400ceca:	4a08      	ldr	r2, [pc, #32]	@ (3400ceec <__ll_clear_aton_owner+0x38>)
3400cecc:	6812      	ldr	r2, [r2, #0]
3400cece:	b11a      	cbz	r2, 3400ced8 <__ll_clear_aton_owner+0x24>
3400ced0:	2146      	movs	r1, #70	@ 0x46
3400ced2:	4b07      	ldr	r3, [pc, #28]	@ (3400cef0 <__ll_clear_aton_owner+0x3c>)
3400ced4:	4a03      	ldr	r2, [pc, #12]	@ (3400cee4 <__ll_clear_aton_owner+0x30>)
3400ced6:	e7f5      	b.n	3400cec4 <__ll_clear_aton_owner+0x10>
#endif // NDEBUG

    __ll_current_aton_ip_owner = NULL;
3400ced8:	601a      	str	r2, [r3, #0]
    LL_ATON_OSAL_UNLOCK_ATON();
  }
3400ceda:	bd08      	pop	{r3, pc}
3400cedc:	34012e24 	.word	0x34012e24
3400cee0:	34010eba 	.word	0x34010eba
3400cee4:	3401211b 	.word	0x3401211b
3400cee8:	34010ee6 	.word	0x34010ee6
3400ceec:	34012e20 	.word	0x34012e20
3400cef0:	34010f7e 	.word	0x34010f7e

3400cef4 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
3400cef4:	b508      	push	{r3, lr}
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400cef6:	4b07      	ldr	r3, [pc, #28]	@ (3400cf14 <__LL_ATON_RT_SetWaitMask+0x20>)
3400cef8:	681b      	ldr	r3, [r3, #0]
3400cefa:	b92b      	cbnz	r3, 3400cf08 <__LL_ATON_RT_SetWaitMask+0x14>
3400cefc:	2175      	movs	r1, #117	@ 0x75
3400cefe:	4b06      	ldr	r3, [pc, #24]	@ (3400cf18 <__LL_ATON_RT_SetWaitMask+0x24>)
3400cf00:	4a06      	ldr	r2, [pc, #24]	@ (3400cf1c <__LL_ATON_RT_SetWaitMask+0x28>)
3400cf02:	4807      	ldr	r0, [pc, #28]	@ (3400cf20 <__LL_ATON_RT_SetWaitMask+0x2c>)
3400cf04:	f000 fc28 	bl	3400d758 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
3400cf08:	4b06      	ldr	r3, [pc, #24]	@ (3400cf24 <__LL_ATON_RT_SetWaitMask+0x30>)
3400cf0a:	6018      	str	r0, [r3, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3400cf0c:	43c0      	mvns	r0, r0
3400cf0e:	4b06      	ldr	r3, [pc, #24]	@ (3400cf28 <__LL_ATON_RT_SetWaitMask+0x34>)
3400cf10:	6258      	str	r0, [r3, #36]	@ 0x24
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
3400cf12:	bd08      	pop	{r3, pc}
3400cf14:	34012e24 	.word	0x34012e24
3400cf18:	34010f9a 	.word	0x34010f9a
3400cf1c:	3401206e 	.word	0x3401206e
3400cf20:	34010ee6 	.word	0x34010ee6
3400cf24:	34012e20 	.word	0x34012e20
3400cf28:	580e1000 	.word	0x580e1000

3400cf2c <EpochBlock_EpochControllerUnit>:
  {
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
  }

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3400cf2c:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3400cf2e:	8a03      	ldrh	r3, [r0, #16]
3400cf30:	075b      	lsls	r3, r3, #29
3400cf32:	d406      	bmi.n	3400cf42 <EpochBlock_EpochControllerUnit+0x16>
3400cf34:	f240 212f 	movw	r1, #559	@ 0x22f
3400cf38:	4b03      	ldr	r3, [pc, #12]	@ (3400cf48 <EpochBlock_EpochControllerUnit+0x1c>)
3400cf3a:	4a04      	ldr	r2, [pc, #16]	@ (3400cf4c <EpochBlock_EpochControllerUnit+0x20>)
3400cf3c:	4804      	ldr	r0, [pc, #16]	@ (3400cf50 <EpochBlock_EpochControllerUnit+0x24>)
3400cf3e:	f000 fc0b 	bl	3400d758 <__assert_func>
    return eb->wait_mask;
  }
3400cf42:	68c0      	ldr	r0, [r0, #12]
3400cf44:	bd08      	pop	{r3, pc}
3400cf46:	bf00      	nop
3400cf48:	34010fc4 	.word	0x34010fc4
3400cf4c:	3401204f 	.word	0x3401204f
3400cf50:	34010fdf 	.word	0x34010fdf

3400cf54 <__LL_ATON_RT_ExecEndEpochBlock>:
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400cf54:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
{
3400cf56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400cf5a:	4605      	mov	r5, r0
3400cf5c:	460c      	mov	r4, r1
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400cf5e:	b113      	cbz	r3, 3400cf66 <__LL_ATON_RT_ExecEndEpochBlock+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
3400cf60:	4602      	mov	r2, r0
3400cf62:	2002      	movs	r0, #2
3400cf64:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400cf66:	8a2b      	ldrh	r3, [r5, #16]
3400cf68:	0758      	lsls	r0, r3, #29
3400cf6a:	d518      	bpl.n	3400cf9e <__LL_ATON_RT_ExecEndEpochBlock+0x4a>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400cf6c:	4628      	mov	r0, r5
3400cf6e:	f7ff ffdd 	bl	3400cf2c <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400cf72:	b128      	cbz	r0, 3400cf80 <__LL_ATON_RT_ExecEndEpochBlock+0x2c>
3400cf74:	21c2      	movs	r1, #194	@ 0xc2
3400cf76:	4b25      	ldr	r3, [pc, #148]	@ (3400d00c <__LL_ATON_RT_ExecEndEpochBlock+0xb8>)
3400cf78:	4a25      	ldr	r2, [pc, #148]	@ (3400d010 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400cf7a:	4826      	ldr	r0, [pc, #152]	@ (3400d014 <__LL_ATON_RT_ExecEndEpochBlock+0xc0>)
3400cf7c:	f000 fbec 	bl	3400d758 <__assert_func>
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
3400cf80:	2202      	movs	r2, #2
3400cf82:	4b25      	ldr	r3, [pc, #148]	@ (3400d018 <__LL_ATON_RT_ExecEndEpochBlock+0xc4>)
3400cf84:	601a      	str	r2, [r3, #0]
3400cf86:	681a      	ldr	r2, [r3, #0]
3400cf88:	0791      	lsls	r1, r2, #30
3400cf8a:	d4fc      	bmi.n	3400cf86 <__LL_ATON_RT_ExecEndEpochBlock+0x32>
3400cf8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cf90:	601a      	str	r2, [r3, #0]
3400cf92:	681a      	ldr	r2, [r3, #0]
3400cf94:	0052      	lsls	r2, r2, #1
3400cf96:	d4fc      	bmi.n	3400cf92 <__LL_ATON_RT_ExecEndEpochBlock+0x3e>
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
3400cf98:	2019      	movs	r0, #25
3400cf9a:	f7ff fe91 	bl	3400ccc0 <LL_ATON_DisableClock>
  if (eb->end_epoch_block != NULL)
3400cf9e:	686b      	ldr	r3, [r5, #4]
3400cfa0:	b10b      	cbz	r3, 3400cfa6 <__LL_ATON_RT_ExecEndEpochBlock+0x52>
    eb->end_epoch_block((const void *)eb);
3400cfa2:	4628      	mov	r0, r5
3400cfa4:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
3400cfa6:	8a2e      	ldrh	r6, [r5, #16]
  if (EpochBlock_IsEpochPureHW(eb) ||
3400cfa8:	f016 0f90 	tst.w	r6, #144	@ 0x90
3400cfac:	f006 07c0 	and.w	r7, r6, #192	@ 0xc0
3400cfb0:	d108      	bne.n	3400cfc4 <__LL_ATON_RT_ExecEndEpochBlock+0x70>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400cfb2:	bb0f      	cbnz	r7, 3400cff8 <__LL_ATON_RT_ExecEndEpochBlock+0xa4>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400cfb4:	4b19      	ldr	r3, [pc, #100]	@ (3400d01c <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400cfb6:	681b      	ldr	r3, [r3, #0]
3400cfb8:	42a3      	cmp	r3, r4
3400cfba:	d115      	bne.n	3400cfe8 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400cfbc:	21ed      	movs	r1, #237	@ 0xed
3400cfbe:	4b18      	ldr	r3, [pc, #96]	@ (3400d020 <__LL_ATON_RT_ExecEndEpochBlock+0xcc>)
3400cfc0:	4a13      	ldr	r2, [pc, #76]	@ (3400d010 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400cfc2:	e7da      	b.n	3400cf7a <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400cfc4:	4b15      	ldr	r3, [pc, #84]	@ (3400d01c <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400cfc6:	681b      	ldr	r3, [r3, #0]
3400cfc8:	42a3      	cmp	r3, r4
3400cfca:	d003      	beq.n	3400cfd4 <__LL_ATON_RT_ExecEndEpochBlock+0x80>
3400cfcc:	21e1      	movs	r1, #225	@ 0xe1
3400cfce:	4b15      	ldr	r3, [pc, #84]	@ (3400d024 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>)
3400cfd0:	4a0f      	ldr	r2, [pc, #60]	@ (3400d010 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400cfd2:	e7d2      	b.n	3400cf7a <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    __LL_ATON_RT_SetWaitMask(0);
3400cfd4:	2000      	movs	r0, #0
3400cfd6:	f7ff ff8d 	bl	3400cef4 <__LL_ATON_RT_SetWaitMask>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400cfda:	06f3      	lsls	r3, r6, #27
3400cfdc:	d5e9      	bpl.n	3400cfb2 <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
    __ll_clear_aton_owner(nn_instance);
3400cfde:	4620      	mov	r0, r4
3400cfe0:	f7ff ff68 	bl	3400ceb4 <__ll_clear_aton_owner>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400cfe4:	2f00      	cmp	r7, #0
3400cfe6:	d0e5      	beq.n	3400cfb4 <__LL_ATON_RT_ExecEndEpochBlock+0x60>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400cfe8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400cfea:	b163      	cbz	r3, 3400d006 <__LL_ATON_RT_ExecEndEpochBlock+0xb2>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400cfec:	462a      	mov	r2, r5
3400cfee:	4621      	mov	r1, r4
}
3400cff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400cff4:	2003      	movs	r0, #3
3400cff6:	4718      	bx	r3
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400cff8:	6923      	ldr	r3, [r4, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400cffa:	2b00      	cmp	r3, #0
3400cffc:	d1f4      	bne.n	3400cfe8 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
                                       (nn_instance->exec_state.next_epoch_block ==
3400cffe:	68e3      	ldr	r3, [r4, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400d000:	2b00      	cmp	r3, #0
3400d002:	d1f1      	bne.n	3400cfe8 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400d004:	e7eb      	b.n	3400cfde <__LL_ATON_RT_ExecEndEpochBlock+0x8a>
}
3400d006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400d00a:	bf00      	nop
3400d00c:	3401107c 	.word	0x3401107c
3400d010:	34012030 	.word	0x34012030
3400d014:	34011085 	.word	0x34011085
3400d018:	580fe000 	.word	0x580fe000
3400d01c:	34012e24 	.word	0x34012e24
3400d020:	34011147 	.word	0x34011147
3400d024:	3401111d 	.word	0x3401111d

3400d028 <__LL_ATON_RT_DetermineNextEpochBlock>:
{
3400d028:	b508      	push	{r3, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400d02a:	b928      	cbnz	r0, 3400d038 <__LL_ATON_RT_DetermineNextEpochBlock+0x10>
3400d02c:	21f8      	movs	r1, #248	@ 0xf8
3400d02e:	4b1a      	ldr	r3, [pc, #104]	@ (3400d098 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
3400d030:	4a1a      	ldr	r2, [pc, #104]	@ (3400d09c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400d032:	481b      	ldr	r0, [pc, #108]	@ (3400d0a0 <__LL_ATON_RT_DetermineNextEpochBlock+0x78>)
3400d034:	f000 fb90 	bl	3400d758 <__assert_func>
3400d038:	69c3      	ldr	r3, [r0, #28]
3400d03a:	b11b      	cbz	r3, 3400d044 <__LL_ATON_RT_DetermineNextEpochBlock+0x1c>
3400d03c:	21fa      	movs	r1, #250	@ 0xfa
3400d03e:	4b19      	ldr	r3, [pc, #100]	@ (3400d0a4 <__LL_ATON_RT_DetermineNextEpochBlock+0x7c>)
3400d040:	4a16      	ldr	r2, [pc, #88]	@ (3400d09c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400d042:	e7f6      	b.n	3400d032 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
  if ((nn_instance->exec_state.next_epoch_block != NULL))
3400d044:	68c3      	ldr	r3, [r0, #12]
3400d046:	b313      	cbz	r3, 3400d08e <__LL_ATON_RT_DetermineNextEpochBlock+0x66>
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
3400d048:	6903      	ldr	r3, [r0, #16]
3400d04a:	b123      	cbz	r3, 3400d056 <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
3400d04c:	f44f 7181 	mov.w	r1, #258	@ 0x102
3400d050:	4b15      	ldr	r3, [pc, #84]	@ (3400d0a8 <__LL_ATON_RT_DetermineNextEpochBlock+0x80>)
3400d052:	4a12      	ldr	r2, [pc, #72]	@ (3400d09c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400d054:	e7ed      	b.n	3400d032 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
3400d056:	6843      	ldr	r3, [r0, #4]
3400d058:	6103      	str	r3, [r0, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3400d05a:	6883      	ldr	r3, [r0, #8]
3400d05c:	6143      	str	r3, [r0, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
3400d05e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
3400d060:	6283      	str	r3, [r0, #40]	@ 0x28
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
3400d062:	68c3      	ldr	r3, [r0, #12]
3400d064:	6043      	str	r3, [r0, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
3400d066:	68c3      	ldr	r3, [r0, #12]
3400d068:	6083      	str	r3, [r0, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400d06a:	6883      	ldr	r3, [r0, #8]
  if (list != NULL)
3400d06c:	b96b      	cbnz	r3, 3400d08a <__LL_ATON_RT_DetermineNextEpochBlock+0x62>
  int i = 0;
3400d06e:	461a      	mov	r2, r3
    nn_instance->exec_state.next_epoch_block = NULL;
3400d070:	2300      	movs	r3, #0
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400d072:	6242      	str	r2, [r0, #36]	@ 0x24
    nn_instance->exec_state.next_epoch_block = NULL;
3400d074:	60c3      	str	r3, [r0, #12]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d076:	2300      	movs	r3, #0
3400d078:	f880 3020 	strb.w	r3, [r0, #32]
}
3400d07c:	bd08      	pop	{r3, pc}
      list++;
3400d07e:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400d080:	3201      	adds	r2, #1
3400d082:	8a19      	ldrh	r1, [r3, #16]
3400d084:	0709      	lsls	r1, r1, #28
3400d086:	d5fa      	bpl.n	3400d07e <__LL_ATON_RT_DetermineNextEpochBlock+0x56>
3400d088:	e7f2      	b.n	3400d070 <__LL_ATON_RT_DetermineNextEpochBlock+0x48>
3400d08a:	2201      	movs	r2, #1
3400d08c:	e7f9      	b.n	3400d082 <__LL_ATON_RT_DetermineNextEpochBlock+0x5a>
    nn_instance->exec_state.current_epoch_block++;
3400d08e:	6843      	ldr	r3, [r0, #4]
3400d090:	3314      	adds	r3, #20
3400d092:	6043      	str	r3, [r0, #4]
3400d094:	e7ef      	b.n	3400d076 <__LL_ATON_RT_DetermineNextEpochBlock+0x4e>
3400d096:	bf00      	nop
3400d098:	340111b5 	.word	0x340111b5
3400d09c:	3401200b 	.word	0x3401200b
3400d0a0:	34011085 	.word	0x34011085
3400d0a4:	340111d0 	.word	0x340111d0
3400d0a8:	34011200 	.word	0x34011200

3400d0ac <dump_dma_state>:
LL_ATON_WEAK void dump_dma_state(void){};
3400d0ac:	4770      	bx	lr
	...

3400d0b0 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3400d0b0:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3400d0b2:	4604      	mov	r4, r0
3400d0b4:	2800      	cmp	r0, #0
3400d0b6:	d060      	beq.n	3400d17a <__LL_ATON_RT_IrqErr+0xca>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3400d0b8:	4b30      	ldr	r3, [pc, #192]	@ (3400d17c <__LL_ATON_RT_IrqErr+0xcc>)
3400d0ba:	4003      	ands	r3, r0
3400d0bc:	d007      	beq.n	3400d0ce <__LL_ATON_RT_IrqErr+0x1e>

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3400d0be:	4259      	negs	r1, r3
3400d0c0:	4019      	ands	r1, r3
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3400d0c2:	4b2f      	ldr	r3, [pc, #188]	@ (3400d180 <__LL_ATON_RT_IrqErr+0xd0>)
3400d0c4:	030a      	lsls	r2, r1, #12
3400d0c6:	58d2      	ldr	r2, [r2, r3]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
3400d0c8:	482e      	ldr	r0, [pc, #184]	@ (3400d184 <__LL_ATON_RT_IrqErr+0xd4>)
3400d0ca:	f001 f9e7 	bl	3400e49c <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3400d0ce:	f3c4 0309 	ubfx	r3, r4, #0, #10
3400d0d2:	b113      	cbz	r3, 3400d0da <__LL_ATON_RT_IrqErr+0x2a>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3400d0d4:	482c      	ldr	r0, [pc, #176]	@ (3400d188 <__LL_ATON_RT_IrqErr+0xd8>)
3400d0d6:	f001 fa49 	bl	3400e56c <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3400d0da:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
3400d0de:	d002      	beq.n	3400d0e6 <__LL_ATON_RT_IrqErr+0x36>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3400d0e0:	482a      	ldr	r0, [pc, #168]	@ (3400d18c <__LL_ATON_RT_IrqErr+0xdc>)
3400d0e2:	f001 fa43 	bl	3400e56c <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3400d0e6:	01e5      	lsls	r5, r4, #7
3400d0e8:	d502      	bpl.n	3400d0f0 <__LL_ATON_RT_IrqErr+0x40>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3400d0ea:	4829      	ldr	r0, [pc, #164]	@ (3400d190 <__LL_ATON_RT_IrqErr+0xe0>)
3400d0ec:	f001 fa3e 	bl	3400e56c <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3400d0f0:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
3400d0f4:	d00e      	beq.n	3400d114 <__LL_ATON_RT_IrqErr+0x64>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3400d0f6:	4827      	ldr	r0, [pc, #156]	@ (3400d194 <__LL_ATON_RT_IrqErr+0xe4>)
3400d0f8:	f001 fa38 	bl	3400e56c <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3400d0fc:	4b26      	ldr	r3, [pc, #152]	@ (3400d198 <__LL_ATON_RT_IrqErr+0xe8>)
3400d0fe:	2100      	movs	r1, #0
3400d100:	691a      	ldr	r2, [r3, #16]
3400d102:	4826      	ldr	r0, [pc, #152]	@ (3400d19c <__LL_ATON_RT_IrqErr+0xec>)
3400d104:	f001 f9ca 	bl	3400e49c <iprintf>
3400d108:	4b25      	ldr	r3, [pc, #148]	@ (3400d1a0 <__LL_ATON_RT_IrqErr+0xf0>)
3400d10a:	2101      	movs	r1, #1
3400d10c:	691a      	ldr	r2, [r3, #16]
3400d10e:	4823      	ldr	r0, [pc, #140]	@ (3400d19c <__LL_ATON_RT_IrqErr+0xec>)
3400d110:	f001 f9c4 	bl	3400e49c <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3400d114:	0120      	lsls	r0, r4, #4
3400d116:	d502      	bpl.n	3400d11e <__LL_ATON_RT_IrqErr+0x6e>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3400d118:	4822      	ldr	r0, [pc, #136]	@ (3400d1a4 <__LL_ATON_RT_IrqErr+0xf4>)
3400d11a:	f001 fa27 	bl	3400e56c <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d11e:	0061      	lsls	r1, r4, #1
3400d120:	d50c      	bpl.n	3400d13c <__LL_ATON_RT_IrqErr+0x8c>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3400d122:	4d21      	ldr	r5, [pc, #132]	@ (3400d1a8 <__LL_ATON_RT_IrqErr+0xf8>)
3400d124:	4821      	ldr	r0, [pc, #132]	@ (3400d1ac <__LL_ATON_RT_IrqErr+0xfc>)
3400d126:	68e9      	ldr	r1, [r5, #12]
3400d128:	f001 f9b8 	bl	3400e49c <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3400d12c:	6a29      	ldr	r1, [r5, #32]
3400d12e:	4820      	ldr	r0, [pc, #128]	@ (3400d1b0 <__LL_ATON_RT_IrqErr+0x100>)
3400d130:	f001 f9b4 	bl	3400e49c <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3400d134:	69e9      	ldr	r1, [r5, #28]
3400d136:	481f      	ldr	r0, [pc, #124]	@ (3400d1b4 <__LL_ATON_RT_IrqErr+0x104>)
3400d138:	f001 f9b0 	bl	3400e49c <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d13c:	00a2      	lsls	r2, r4, #2
3400d13e:	d502      	bpl.n	3400d146 <__LL_ATON_RT_IrqErr+0x96>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3400d140:	481d      	ldr	r0, [pc, #116]	@ (3400d1b8 <__LL_ATON_RT_IrqErr+0x108>)
3400d142:	f001 fa13 	bl	3400e56c <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d146:	00e3      	lsls	r3, r4, #3
3400d148:	d502      	bpl.n	3400d150 <__LL_ATON_RT_IrqErr+0xa0>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3400d14a:	481c      	ldr	r0, [pc, #112]	@ (3400d1bc <__LL_ATON_RT_IrqErr+0x10c>)
3400d14c:	f001 fa0e 	bl	3400e56c <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3400d150:	f7ff ffac 	bl	3400d0ac <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3400d154:	4622      	mov	r2, r4
3400d156:	f240 314a 	movw	r1, #842	@ 0x34a
3400d15a:	2300      	movs	r3, #0
3400d15c:	4818      	ldr	r0, [pc, #96]	@ (3400d1c0 <__LL_ATON_RT_IrqErr+0x110>)
3400d15e:	f001 f99d 	bl	3400e49c <iprintf>
//#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
3400d162:	4b18      	ldr	r3, [pc, #96]	@ (3400d1c4 <__LL_ATON_RT_IrqErr+0x114>)
3400d164:	681b      	ldr	r3, [r3, #0]
3400d166:	6898      	ldr	r0, [r3, #8]
3400d168:	f001 f8b0 	bl	3400e2cc <fflush>
//#endif
  LL_ATON_ASSERT(false); // may never happen
3400d16c:	f240 314e 	movw	r1, #846	@ 0x34e
3400d170:	4b15      	ldr	r3, [pc, #84]	@ (3400d1c8 <__LL_ATON_RT_IrqErr+0x118>)
3400d172:	4a16      	ldr	r2, [pc, #88]	@ (3400d1cc <__LL_ATON_RT_IrqErr+0x11c>)
3400d174:	4816      	ldr	r0, [pc, #88]	@ (3400d1d0 <__LL_ATON_RT_IrqErr+0x120>)
3400d176:	f000 faef 	bl	3400d758 <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3400d17a:	bd38      	pop	{r3, r4, r5, pc}
3400d17c:	000ffc00 	.word	0x000ffc00
3400d180:	580e503c 	.word	0x580e503c
3400d184:	34011241 	.word	0x34011241
3400d188:	3401126e 	.word	0x3401126e
3400d18c:	34011294 	.word	0x34011294
3400d190:	340112b8 	.word	0x340112b8
3400d194:	340112d8 	.word	0x340112d8
3400d198:	580e2000 	.word	0x580e2000
3400d19c:	340112f0 	.word	0x340112f0
3400d1a0:	580e3000 	.word	0x580e3000
3400d1a4:	34011305 	.word	0x34011305
3400d1a8:	580fe000 	.word	0x580fe000
3400d1ac:	3401131d 	.word	0x3401131d
3400d1b0:	34011351 	.word	0x34011351
3400d1b4:	3401137b 	.word	0x3401137b
3400d1b8:	3401139c 	.word	0x3401139c
3400d1bc:	340113bd 	.word	0x340113bd
3400d1c0:	340113d8 	.word	0x340113d8
3400d1c4:	340123bc 	.word	0x340123bc
3400d1c8:	34010f98 	.word	0x34010f98
3400d1cc:	34011fe7 	.word	0x34011fe7
3400d1d0:	34011085 	.word	0x34011085

3400d1d4 <LL_ATON_RT_Init_Network>:
{
3400d1d4:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400d1d6:	4604      	mov	r4, r0
3400d1d8:	b1b0      	cbz	r0, 3400d208 <LL_ATON_RT_Init_Network+0x34>
  if (nn_instance->network == NULL)
3400d1da:	6803      	ldr	r3, [r0, #0]
3400d1dc:	b1a3      	cbz	r3, 3400d208 <LL_ATON_RT_Init_Network+0x34>
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
3400d1de:	685b      	ldr	r3, [r3, #4]
3400d1e0:	b933      	cbnz	r3, 3400d1f0 <LL_ATON_RT_Init_Network+0x1c>
3400d1e2:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
3400d1e6:	4b09      	ldr	r3, [pc, #36]	@ (3400d20c <LL_ATON_RT_Init_Network+0x38>)
3400d1e8:	4a09      	ldr	r2, [pc, #36]	@ (3400d210 <LL_ATON_RT_Init_Network+0x3c>)
  LL_ATON_ASSERT(ret == true);
3400d1ea:	480a      	ldr	r0, [pc, #40]	@ (3400d214 <LL_ATON_RT_Init_Network+0x40>)
3400d1ec:	f000 fab4 	bl	3400d758 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
3400d1f0:	4798      	blx	r3
  LL_ATON_ASSERT(ret == true);
3400d1f2:	b920      	cbnz	r0, 3400d1fe <LL_ATON_RT_Init_Network+0x2a>
3400d1f4:	f240 11a9 	movw	r1, #425	@ 0x1a9
3400d1f8:	4b07      	ldr	r3, [pc, #28]	@ (3400d218 <LL_ATON_RT_Init_Network+0x44>)
3400d1fa:	4a05      	ldr	r2, [pc, #20]	@ (3400d210 <LL_ATON_RT_Init_Network+0x3c>)
3400d1fc:	e7f5      	b.n	3400d1ea <LL_ATON_RT_Init_Network+0x16>
  __LL_ATON_RT_Init_Network(nn_instance);
3400d1fe:	4620      	mov	r0, r4
}
3400d200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __LL_ATON_RT_Init_Network(nn_instance);
3400d204:	f7ff be2e 	b.w	3400ce64 <__LL_ATON_RT_Init_Network>
}
3400d208:	bd10      	pop	{r4, pc}
3400d20a:	bf00      	nop
3400d20c:	340113ff 	.word	0x340113ff
3400d210:	34012131 	.word	0x34012131
3400d214:	34011085 	.word	0x34011085
3400d218:	34011434 	.word	0x34011434

3400d21c <LL_ATON_RT_DeInit_Network>:
{
3400d21c:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400d21e:	4604      	mov	r4, r0
3400d220:	b1b8      	cbz	r0, 3400d252 <LL_ATON_RT_DeInit_Network+0x36>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d222:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400d224:	b11b      	cbz	r3, 3400d22e <LL_ATON_RT_DeInit_Network+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
3400d226:	4601      	mov	r1, r0
3400d228:	2200      	movs	r2, #0
3400d22a:	2005      	movs	r0, #5
3400d22c:	4798      	blx	r3
  if (nn_instance == __ll_current_aton_ip_owner)
3400d22e:	4b09      	ldr	r3, [pc, #36]	@ (3400d254 <LL_ATON_RT_DeInit_Network+0x38>)
3400d230:	681b      	ldr	r3, [r3, #0]
3400d232:	42a3      	cmp	r3, r4
3400d234:	d102      	bne.n	3400d23c <LL_ATON_RT_DeInit_Network+0x20>
    __ll_clear_aton_owner(nn_instance);
3400d236:	4620      	mov	r0, r4
3400d238:	f7ff fe3c 	bl	3400ceb4 <__ll_clear_aton_owner>
  nn_instance->exec_state.current_epoch_block = eb_list;
3400d23c:	2300      	movs	r3, #0
3400d23e:	6063      	str	r3, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400d240:	60a3      	str	r3, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400d242:	60e3      	str	r3, [r4, #12]
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400d244:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400d246:	6163      	str	r3, [r4, #20]
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
3400d248:	6263      	str	r3, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d24a:	62a3      	str	r3, [r4, #40]	@ 0x28
  nn_instance->exec_state.triggered_events = 0x0;
3400d24c:	61e3      	str	r3, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d24e:	f884 3020 	strb.w	r3, [r4, #32]
}
3400d252:	bd10      	pop	{r4, pc}
3400d254:	34012e24 	.word	0x34012e24

3400d258 <LL_ATON_RT_RuntimeInit>:
{
3400d258:	b510      	push	{r4, lr}
  LL_ATON_Init();
3400d25a:	f7fe ff13 	bl	3400c084 <LL_ATON_Init>
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
3400d25e:	2202      	movs	r2, #2
3400d260:	4b1f      	ldr	r3, [pc, #124]	@ (3400d2e0 <LL_ATON_RT_RuntimeInit+0x88>)
3400d262:	601a      	str	r2, [r3, #0]
3400d264:	681a      	ldr	r2, [r3, #0]
3400d266:	0791      	lsls	r1, r2, #30
3400d268:	d4fc      	bmi.n	3400d264 <LL_ATON_RT_RuntimeInit+0xc>
3400d26a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d26e:	601a      	str	r2, [r3, #0]
3400d270:	681a      	ldr	r2, [r3, #0]
3400d272:	0052      	lsls	r2, r2, #1
3400d274:	d4fc      	bmi.n	3400d270 <LL_ATON_RT_RuntimeInit+0x18>
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3400d276:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3400d27a:	615a      	str	r2, [r3, #20]
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
3400d27c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400d280:	625a      	str	r2, [r3, #36]	@ 0x24
    ATON_ENABLE(INTCTRL, 0);
3400d282:	681a      	ldr	r2, [r3, #0]
3400d284:	f042 0201 	orr.w	r2, r2, #1
3400d288:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d28a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400d28e:	4b15      	ldr	r3, [pc, #84]	@ (3400d2e4 <LL_ATON_RT_RuntimeInit+0x8c>)
3400d290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d294:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d298:	f3bf 8f6f 	isb	sy
3400d29c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400d2a0:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d2a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d2a8:	f3bf 8f6f 	isb	sy
3400d2ac:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
3400d2b0:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d2b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d2b8:	f3bf 8f6f 	isb	sy
3400d2bc:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
3400d2c0:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d2c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d2c8:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d2cc:	605a      	str	r2, [r3, #4]
  if (ll_aton_init_deinit_trace)
3400d2ce:	4b06      	ldr	r3, [pc, #24]	@ (3400d2e8 <LL_ATON_RT_RuntimeInit+0x90>)
3400d2d0:	681b      	ldr	r3, [r3, #0]
3400d2d2:	b11b      	cbz	r3, 3400d2dc <LL_ATON_RT_RuntimeInit+0x84>
}
3400d2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
3400d2d8:	2006      	movs	r0, #6
3400d2da:	4718      	bx	r3
}
3400d2dc:	bd10      	pop	{r4, pc}
3400d2de:	bf00      	nop
3400d2e0:	580e1000 	.word	0x580e1000
3400d2e4:	e000e100 	.word	0xe000e100
3400d2e8:	34012e1c 	.word	0x34012e1c

3400d2ec <LL_ATON_RT_RuntimeDeInit>:
{
3400d2ec:	b508      	push	{r3, lr}
  if (ll_aton_init_deinit_trace)
3400d2ee:	4b15      	ldr	r3, [pc, #84]	@ (3400d344 <LL_ATON_RT_RuntimeDeInit+0x58>)
3400d2f0:	681b      	ldr	r3, [r3, #0]
3400d2f2:	b10b      	cbz	r3, 3400d2f8 <LL_ATON_RT_RuntimeDeInit+0xc>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
3400d2f4:	2007      	movs	r0, #7
3400d2f6:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d2f8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400d2fc:	4b12      	ldr	r3, [pc, #72]	@ (3400d348 <LL_ATON_RT_RuntimeDeInit+0x5c>)
3400d2fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d302:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d306:	f3bf 8f6f 	isb	sy
3400d30a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
3400d30e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d312:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d316:	f3bf 8f6f 	isb	sy
3400d31a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400d31e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d322:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d326:	f3bf 8f6f 	isb	sy
3400d32a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400d32e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d332:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d336:	f3bf 8f6f 	isb	sy
}
3400d33a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DeInit();
3400d33e:	f7ff b93d 	b.w	3400c5bc <LL_ATON_DeInit>
3400d342:	bf00      	nop
3400d344:	34012e1c 	.word	0x34012e1c
3400d348:	e000e100 	.word	0xe000e100

3400d34c <LL_ATON_RT_RunEpochBlock>:
{
3400d34c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400d34e:	4604      	mov	r4, r0
3400d350:	b930      	cbnz	r0, 3400d360 <LL_ATON_RT_RunEpochBlock+0x14>
3400d352:	f44f 7110 	mov.w	r1, #576	@ 0x240
3400d356:	4b8c      	ldr	r3, [pc, #560]	@ (3400d588 <LL_ATON_RT_RunEpochBlock+0x23c>)
3400d358:	4a8c      	ldr	r2, [pc, #560]	@ (3400d58c <LL_ATON_RT_RunEpochBlock+0x240>)
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
3400d35a:	488d      	ldr	r0, [pc, #564]	@ (3400d590 <LL_ATON_RT_RunEpochBlock+0x244>)
3400d35c:	f000 f9fc 	bl	3400d758 <__assert_func>
3400d360:	6843      	ldr	r3, [r0, #4]
3400d362:	b923      	cbnz	r3, 3400d36e <LL_ATON_RT_RunEpochBlock+0x22>
3400d364:	f240 2143 	movw	r1, #579	@ 0x243
3400d368:	4b8a      	ldr	r3, [pc, #552]	@ (3400d594 <LL_ATON_RT_RunEpochBlock+0x248>)
3400d36a:	4a88      	ldr	r2, [pc, #544]	@ (3400d58c <LL_ATON_RT_RunEpochBlock+0x240>)
3400d36c:	e7f5      	b.n	3400d35a <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.inference_started == false)
3400d36e:	7e03      	ldrb	r3, [r0, #24]
3400d370:	b98b      	cbnz	r3, 3400d396 <LL_ATON_RT_RunEpochBlock+0x4a>
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3400d372:	6803      	ldr	r3, [r0, #0]
3400d374:	b10b      	cbz	r3, 3400d37a <LL_ATON_RT_RunEpochBlock+0x2e>
3400d376:	689b      	ldr	r3, [r3, #8]
3400d378:	b923      	cbnz	r3, 3400d384 <LL_ATON_RT_RunEpochBlock+0x38>
3400d37a:	f240 2155 	movw	r1, #597	@ 0x255
3400d37e:	4b86      	ldr	r3, [pc, #536]	@ (3400d598 <LL_ATON_RT_RunEpochBlock+0x24c>)
3400d380:	4a82      	ldr	r2, [pc, #520]	@ (3400d58c <LL_ATON_RT_RunEpochBlock+0x240>)
3400d382:	e7ea      	b.n	3400d35a <LL_ATON_RT_RunEpochBlock+0xe>
    bool ret = nn_instance->network->ec_inference_init();
3400d384:	4798      	blx	r3
    LL_ATON_ASSERT(ret == true);
3400d386:	b920      	cbnz	r0, 3400d392 <LL_ATON_RT_RunEpochBlock+0x46>
3400d388:	f240 2159 	movw	r1, #601	@ 0x259
3400d38c:	4b83      	ldr	r3, [pc, #524]	@ (3400d59c <LL_ATON_RT_RunEpochBlock+0x250>)
3400d38e:	4a7f      	ldr	r2, [pc, #508]	@ (3400d58c <LL_ATON_RT_RunEpochBlock+0x240>)
3400d390:	e7e3      	b.n	3400d35a <LL_ATON_RT_RunEpochBlock+0xe>
    nn_instance->exec_state.inference_started = true;
3400d392:	2301      	movs	r3, #1
3400d394:	7623      	strb	r3, [r4, #24]
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
3400d396:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400d398:	8a03      	ldrh	r3, [r0, #16]
3400d39a:	075a      	lsls	r2, r3, #29
3400d39c:	d512      	bpl.n	3400d3c4 <LL_ATON_RT_RunEpochBlock+0x78>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400d39e:	f7ff fdc5 	bl	3400cf2c <EpochBlock_EpochControllerUnit>
3400d3a2:	2301      	movs	r3, #1
3400d3a4:	fa03 f000 	lsl.w	r0, r3, r0
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
3400d3a8:	f894 3020 	ldrb.w	r3, [r4, #32]
3400d3ac:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
3400d3b0:	b343      	cbz	r3, 3400d404 <LL_ATON_RT_RunEpochBlock+0xb8>
3400d3b2:	2800      	cmp	r0, #0
3400d3b4:	d036      	beq.n	3400d424 <LL_ATON_RT_RunEpochBlock+0xd8>
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
3400d3b6:	69e3      	ldr	r3, [r4, #28]
3400d3b8:	ea30 0303 	bics.w	r3, r0, r3
3400d3bc:	d004      	beq.n	3400d3c8 <LL_ATON_RT_RunEpochBlock+0x7c>
        return LL_ATON_RT_WFE;
3400d3be:	2001      	movs	r0, #1
}
3400d3c0:	b002      	add	sp, #8
3400d3c2:	bd70      	pop	{r4, r5, r6, pc}
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400d3c4:	68c0      	ldr	r0, [r0, #12]
3400d3c6:	e7ef      	b.n	3400d3a8 <LL_ATON_RT_RunEpochBlock+0x5c>
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
3400d3c8:	4b75      	ldr	r3, [pc, #468]	@ (3400d5a0 <LL_ATON_RT_RunEpochBlock+0x254>)
3400d3ca:	681b      	ldr	r3, [r3, #0]
3400d3cc:	42a3      	cmp	r3, r4
3400d3ce:	d004      	beq.n	3400d3da <LL_ATON_RT_RunEpochBlock+0x8e>
3400d3d0:	f240 2171 	movw	r1, #625	@ 0x271
3400d3d4:	4b73      	ldr	r3, [pc, #460]	@ (3400d5a4 <LL_ATON_RT_RunEpochBlock+0x258>)
3400d3d6:	4a6d      	ldr	r2, [pc, #436]	@ (3400d58c <LL_ATON_RT_RunEpochBlock+0x240>)
3400d3d8:	e7bf      	b.n	3400d35a <LL_ATON_RT_RunEpochBlock+0xe>
3400d3da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400d3de:	4a72      	ldr	r2, [pc, #456]	@ (3400d5a8 <LL_ATON_RT_RunEpochBlock+0x25c>)
3400d3e0:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d3e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d3e8:	f3bf 8f6f 	isb	sy
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
3400d3ec:	69e3      	ldr	r3, [r4, #28]
3400d3ee:	ea23 0300 	bic.w	r3, r3, r0
3400d3f2:	61e3      	str	r3, [r4, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d3f4:	6051      	str	r1, [r2, #4]
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d3f6:	6860      	ldr	r0, [r4, #4]
3400d3f8:	4621      	mov	r1, r4
3400d3fa:	f7ff fdab 	bl	3400cf54 <__LL_ATON_RT_ExecEndEpochBlock>
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400d3fe:	4620      	mov	r0, r4
3400d400:	f7ff fe12 	bl	3400d028 <__LL_ATON_RT_DetermineNextEpochBlock>
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
3400d404:	6863      	ldr	r3, [r4, #4]
3400d406:	8a1b      	ldrh	r3, [r3, #16]
3400d408:	071b      	lsls	r3, r3, #28
3400d40a:	d534      	bpl.n	3400d476 <LL_ATON_RT_RunEpochBlock+0x12a>
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
3400d40c:	6923      	ldr	r3, [r4, #16]
3400d40e:	2b00      	cmp	r3, #0
3400d410:	f000 80b7 	beq.w	3400d582 <LL_ATON_RT_RunEpochBlock+0x236>
      LL_ATON_ASSERT(nn_instance == NULL);

      nn_instance = __ll_current_aton_ip_owner;
    }

    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400d414:	4b62      	ldr	r3, [pc, #392]	@ (3400d5a0 <LL_ATON_RT_RunEpochBlock+0x254>)
3400d416:	681a      	ldr	r2, [r3, #0]
3400d418:	b932      	cbnz	r2, 3400d428 <LL_ATON_RT_RunEpochBlock+0xdc>
3400d41a:	2197      	movs	r1, #151	@ 0x97
3400d41c:	4b63      	ldr	r3, [pc, #396]	@ (3400d5ac <LL_ATON_RT_RunEpochBlock+0x260>)
3400d41e:	4a64      	ldr	r2, [pc, #400]	@ (3400d5b0 <LL_ATON_RT_RunEpochBlock+0x264>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d420:	4864      	ldr	r0, [pc, #400]	@ (3400d5b4 <LL_ATON_RT_RunEpochBlock+0x268>)
3400d422:	e79b      	b.n	3400d35c <LL_ATON_RT_RunEpochBlock+0x10>
  bool this_run_executed_end_epoch = false;
3400d424:	4606      	mov	r6, r0
3400d426:	e7ed      	b.n	3400d404 <LL_ATON_RT_RunEpochBlock+0xb8>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
3400d428:	6862      	ldr	r2, [r4, #4]
3400d42a:	8a12      	ldrh	r2, [r2, #16]
3400d42c:	0716      	lsls	r6, r2, #28
3400d42e:	d403      	bmi.n	3400d438 <LL_ATON_RT_RunEpochBlock+0xec>
3400d430:	2198      	movs	r1, #152	@ 0x98
3400d432:	4b61      	ldr	r3, [pc, #388]	@ (3400d5b8 <LL_ATON_RT_RunEpochBlock+0x26c>)
3400d434:	4a5e      	ldr	r2, [pc, #376]	@ (3400d5b0 <LL_ATON_RT_RunEpochBlock+0x264>)
3400d436:	e7f3      	b.n	3400d420 <LL_ATON_RT_RunEpochBlock+0xd4>
                          : EpochBlock_IsEpochInternal(nn_instance->exec_state.current_epoch_block));
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
3400d438:	6922      	ldr	r2, [r4, #16]
3400d43a:	8a12      	ldrh	r2, [r2, #16]
3400d43c:	0655      	lsls	r5, r2, #25
3400d43e:	d403      	bmi.n	3400d448 <LL_ATON_RT_RunEpochBlock+0xfc>
3400d440:	219a      	movs	r1, #154	@ 0x9a
3400d442:	4b5e      	ldr	r3, [pc, #376]	@ (3400d5bc <LL_ATON_RT_RunEpochBlock+0x270>)
3400d444:	4a5a      	ldr	r2, [pc, #360]	@ (3400d5b0 <LL_ATON_RT_RunEpochBlock+0x264>)
3400d446:	e7eb      	b.n	3400d420 <LL_ATON_RT_RunEpochBlock+0xd4>

    /* Clear owner */
    if (unlock)
    {
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
3400d448:	6818      	ldr	r0, [r3, #0]
3400d44a:	f7ff fd33 	bl	3400ceb4 <__ll_clear_aton_owner>
    }

    /* set old context */
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400d44e:	68e3      	ldr	r3, [r4, #12]
3400d450:	b11b      	cbz	r3, 3400d45a <LL_ATON_RT_RunEpochBlock+0x10e>
3400d452:	21a3      	movs	r1, #163	@ 0xa3
3400d454:	4b5a      	ldr	r3, [pc, #360]	@ (3400d5c0 <LL_ATON_RT_RunEpochBlock+0x274>)
3400d456:	4a56      	ldr	r2, [pc, #344]	@ (3400d5b0 <LL_ATON_RT_RunEpochBlock+0x264>)
3400d458:	e7e2      	b.n	3400d420 <LL_ATON_RT_RunEpochBlock+0xd4>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
3400d45a:	6922      	ldr	r2, [r4, #16]
3400d45c:	6062      	str	r2, [r4, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3400d45e:	6962      	ldr	r2, [r4, #20]
3400d460:	60a2      	str	r2, [r4, #8]

#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
3400d462:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
3400d464:	6262      	str	r2, [r4, #36]	@ 0x24
#endif

    /* reset saved context */
    nn_instance->exec_state.saved_current_epoch_block = NULL;
3400d466:	6123      	str	r3, [r4, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
3400d468:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d46a:	62a3      	str	r3, [r4, #40]	@ 0x28
        nn_instance->exec_state.current_epoch_block++;
3400d46c:	6863      	ldr	r3, [r4, #4]
3400d46e:	3314      	adds	r3, #20
3400d470:	6063      	str	r3, [r4, #4]
        return LL_ATON_RT_NO_WFE;
3400d472:	2000      	movs	r0, #0
3400d474:	e7a4      	b.n	3400d3c0 <LL_ATON_RT_RunEpochBlock+0x74>
    if (this_run_executed_end_epoch)
3400d476:	2e00      	cmp	r6, #0
3400d478:	d1fb      	bne.n	3400d472 <LL_ATON_RT_RunEpochBlock+0x126>
    if (!nn_instance->exec_state.current_epoch_block_started)
3400d47a:	f894 3020 	ldrb.w	r3, [r4, #32]
3400d47e:	2b00      	cmp	r3, #0
3400d480:	d169      	bne.n	3400d556 <LL_ATON_RT_RunEpochBlock+0x20a>
      nn_instance->exec_state.current_epoch_block_started = true;
3400d482:	2301      	movs	r3, #1
3400d484:	f884 3020 	strb.w	r3, [r4, #32]
      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d488:	6865      	ldr	r5, [r4, #4]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400d48a:	68e3      	ldr	r3, [r4, #12]
3400d48c:	b11b      	cbz	r3, 3400d496 <LL_ATON_RT_RunEpochBlock+0x14a>
3400d48e:	2161      	movs	r1, #97	@ 0x61
3400d490:	4b4b      	ldr	r3, [pc, #300]	@ (3400d5c0 <LL_ATON_RT_RunEpochBlock+0x274>)
3400d492:	4a4c      	ldr	r2, [pc, #304]	@ (3400d5c4 <LL_ATON_RT_RunEpochBlock+0x278>)
3400d494:	e761      	b.n	3400d35a <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d496:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d498:	b11b      	cbz	r3, 3400d4a2 <LL_ATON_RT_RunEpochBlock+0x156>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
3400d49a:	462a      	mov	r2, r5
3400d49c:	4621      	mov	r1, r4
3400d49e:	4630      	mov	r0, r6
3400d4a0:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
3400d4a2:	8a2b      	ldrh	r3, [r5, #16]
  if (EpochBlock_IsEpochStart(eb))
3400d4a4:	07d8      	lsls	r0, r3, #31
3400d4a6:	d505      	bpl.n	3400d4b4 <LL_ATON_RT_RunEpochBlock+0x168>
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400d4a8:	69e2      	ldr	r2, [r4, #28]
3400d4aa:	b11a      	cbz	r2, 3400d4b4 <LL_ATON_RT_RunEpochBlock+0x168>
3400d4ac:	2156      	movs	r1, #86	@ 0x56
3400d4ae:	4b46      	ldr	r3, [pc, #280]	@ (3400d5c8 <LL_ATON_RT_RunEpochBlock+0x27c>)
3400d4b0:	4a46      	ldr	r2, [pc, #280]	@ (3400d5cc <LL_ATON_RT_RunEpochBlock+0x280>)
3400d4b2:	e7b5      	b.n	3400d420 <LL_ATON_RT_RunEpochBlock+0xd4>
  if (EpochBlock_IsEpochPureHW(eb) ||
3400d4b4:	f013 0f50 	tst.w	r3, #80	@ 0x50
3400d4b8:	d015      	beq.n	3400d4e6 <LL_ATON_RT_RunEpochBlock+0x19a>
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
3400d4ba:	4a39      	ldr	r2, [pc, #228]	@ (3400d5a0 <LL_ATON_RT_RunEpochBlock+0x254>)
3400d4bc:	6811      	ldr	r1, [r2, #0]
3400d4be:	428c      	cmp	r4, r1
3400d4c0:	d103      	bne.n	3400d4ca <LL_ATON_RT_RunEpochBlock+0x17e>
3400d4c2:	2131      	movs	r1, #49	@ 0x31
3400d4c4:	4b42      	ldr	r3, [pc, #264]	@ (3400d5d0 <LL_ATON_RT_RunEpochBlock+0x284>)
3400d4c6:	4a43      	ldr	r2, [pc, #268]	@ (3400d5d4 <LL_ATON_RT_RunEpochBlock+0x288>)
3400d4c8:	e7aa      	b.n	3400d420 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
3400d4ca:	6811      	ldr	r1, [r2, #0]
3400d4cc:	b119      	cbz	r1, 3400d4d6 <LL_ATON_RT_RunEpochBlock+0x18a>
3400d4ce:	2135      	movs	r1, #53	@ 0x35
3400d4d0:	4b41      	ldr	r3, [pc, #260]	@ (3400d5d8 <LL_ATON_RT_RunEpochBlock+0x28c>)
3400d4d2:	4a40      	ldr	r2, [pc, #256]	@ (3400d5d4 <LL_ATON_RT_RunEpochBlock+0x288>)
3400d4d4:	e7a4      	b.n	3400d420 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d4d6:	4941      	ldr	r1, [pc, #260]	@ (3400d5dc <LL_ATON_RT_RunEpochBlock+0x290>)
3400d4d8:	6809      	ldr	r1, [r1, #0]
3400d4da:	b119      	cbz	r1, 3400d4e4 <LL_ATON_RT_RunEpochBlock+0x198>
3400d4dc:	2139      	movs	r1, #57	@ 0x39
3400d4de:	4b40      	ldr	r3, [pc, #256]	@ (3400d5e0 <LL_ATON_RT_RunEpochBlock+0x294>)
3400d4e0:	4a3c      	ldr	r2, [pc, #240]	@ (3400d5d4 <LL_ATON_RT_RunEpochBlock+0x288>)
3400d4e2:	e79d      	b.n	3400d420 <LL_ATON_RT_RunEpochBlock+0xd4>
    __ll_current_aton_ip_owner = new_owner;
3400d4e4:	6014      	str	r4, [r2, #0]
  if (!EpochBlock_IsEpochBlob(eb))
3400d4e6:	0759      	lsls	r1, r3, #29
3400d4e8:	d41c      	bmi.n	3400d524 <LL_ATON_RT_RunEpochBlock+0x1d8>
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
3400d4ea:	f013 0f90 	tst.w	r3, #144	@ 0x90
3400d4ee:	d00a      	beq.n	3400d506 <LL_ATON_RT_RunEpochBlock+0x1ba>
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
3400d4f0:	4b2b      	ldr	r3, [pc, #172]	@ (3400d5a0 <LL_ATON_RT_RunEpochBlock+0x254>)
3400d4f2:	681b      	ldr	r3, [r3, #0]
3400d4f4:	429c      	cmp	r4, r3
3400d4f6:	d003      	beq.n	3400d500 <LL_ATON_RT_RunEpochBlock+0x1b4>
3400d4f8:	2178      	movs	r1, #120	@ 0x78
3400d4fa:	4b2a      	ldr	r3, [pc, #168]	@ (3400d5a4 <LL_ATON_RT_RunEpochBlock+0x258>)
3400d4fc:	4a31      	ldr	r2, [pc, #196]	@ (3400d5c4 <LL_ATON_RT_RunEpochBlock+0x278>)
3400d4fe:	e72c      	b.n	3400d35a <LL_ATON_RT_RunEpochBlock+0xe>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3400d500:	68e8      	ldr	r0, [r5, #12]
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400d502:	f7ff fcf7 	bl	3400cef4 <__LL_ATON_RT_SetWaitMask>
  if (eb->start_epoch_block != NULL)
3400d506:	682b      	ldr	r3, [r5, #0]
3400d508:	b10b      	cbz	r3, 3400d50e <LL_ATON_RT_RunEpochBlock+0x1c2>
    eb->start_epoch_block((const void *)eb);
3400d50a:	4628      	mov	r0, r5
3400d50c:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400d50e:	8a2b      	ldrh	r3, [r5, #16]
3400d510:	075a      	lsls	r2, r3, #29
3400d512:	d51a      	bpl.n	3400d54a <LL_ATON_RT_RunEpochBlock+0x1fe>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400d514:	4628      	mov	r0, r5
3400d516:	f7ff fd09 	bl	3400cf2c <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d51a:	b130      	cbz	r0, 3400d52a <LL_ATON_RT_RunEpochBlock+0x1de>
3400d51c:	21a4      	movs	r1, #164	@ 0xa4
3400d51e:	4b31      	ldr	r3, [pc, #196]	@ (3400d5e4 <LL_ATON_RT_RunEpochBlock+0x298>)
3400d520:	4a28      	ldr	r2, [pc, #160]	@ (3400d5c4 <LL_ATON_RT_RunEpochBlock+0x278>)
3400d522:	e71a      	b.n	3400d35a <LL_ATON_RT_RunEpochBlock+0xe>
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400d524:	f240 30ff 	movw	r0, #1023	@ 0x3ff
3400d528:	e7eb      	b.n	3400d502 <LL_ATON_RT_RunEpochBlock+0x1b6>
    conf.stepmode = 0;
3400d52a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400d52e:	68ab      	ldr	r3, [r5, #8]
    conf.stepmode = 0;
3400d530:	f360 0200 	bfi	r2, r0, #0, #1
    LL_EpochCtrl_Init(ecId, &conf);
3400d534:	4669      	mov	r1, sp
    conf.stepmode = 0;
3400d536:	f88d 2004 	strb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400d53a:	9300      	str	r3, [sp, #0]
    LL_EpochCtrl_Init(ecId, &conf);
3400d53c:	f7ff fba4 	bl	3400cc88 <LL_EpochCtrl_Init>
    ATON_ENABLE(EPOCHCTRL, ecId);
3400d540:	4a29      	ldr	r2, [pc, #164]	@ (3400d5e8 <LL_ATON_RT_RunEpochBlock+0x29c>)
3400d542:	6813      	ldr	r3, [r2, #0]
3400d544:	f043 0301 	orr.w	r3, r3, #1
3400d548:	6013      	str	r3, [r2, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d54a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d54c:	b11b      	cbz	r3, 3400d556 <LL_ATON_RT_RunEpochBlock+0x20a>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3400d54e:	462a      	mov	r2, r5
3400d550:	4621      	mov	r1, r4
3400d552:	2001      	movs	r0, #1
3400d554:	4798      	blx	r3
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400d556:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400d558:	8a03      	ldrh	r3, [r0, #16]
3400d55a:	075b      	lsls	r3, r3, #29
3400d55c:	d50f      	bpl.n	3400d57e <LL_ATON_RT_RunEpochBlock+0x232>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400d55e:	f7ff fce5 	bl	3400cf2c <EpochBlock_EpochControllerUnit>
3400d562:	2301      	movs	r3, #1
3400d564:	fa03 f000 	lsl.w	r0, r3, r0
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400d568:	2800      	cmp	r0, #0
3400d56a:	f47f af28 	bne.w	3400d3be <LL_ATON_RT_RunEpochBlock+0x72>
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d56e:	6860      	ldr	r0, [r4, #4]
3400d570:	4621      	mov	r1, r4
3400d572:	f7ff fcef 	bl	3400cf54 <__LL_ATON_RT_ExecEndEpochBlock>
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400d576:	4620      	mov	r0, r4
3400d578:	f7ff fd56 	bl	3400d028 <__LL_ATON_RT_DetermineNextEpochBlock>
      return LL_ATON_RT_NO_WFE;
3400d57c:	e779      	b.n	3400d472 <LL_ATON_RT_RunEpochBlock+0x126>
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400d57e:	68c0      	ldr	r0, [r0, #12]
3400d580:	e7f2      	b.n	3400d568 <LL_ATON_RT_RunEpochBlock+0x21c>
        return LL_ATON_RT_DONE;
3400d582:	2002      	movs	r0, #2
3400d584:	e71c      	b.n	3400d3c0 <LL_ATON_RT_RunEpochBlock+0x74>
3400d586:	bf00      	nop
3400d588:	340111b5 	.word	0x340111b5
3400d58c:	34012102 	.word	0x34012102
3400d590:	34011085 	.word	0x34011085
3400d594:	3401143d 	.word	0x3401143d
3400d598:	34011478 	.word	0x34011478
3400d59c:	34011434 	.word	0x34011434
3400d5a0:	34012e24 	.word	0x34012e24
3400d5a4:	340114da 	.word	0x340114da
3400d5a8:	e000e100 	.word	0xe000e100
3400d5ac:	34010f9a 	.word	0x34010f9a
3400d5b0:	340120db 	.word	0x340120db
3400d5b4:	34010ee6 	.word	0x34010ee6
3400d5b8:	34011504 	.word	0x34011504
3400d5bc:	340115a0 	.word	0x340115a0
3400d5c0:	340115ec 	.word	0x340115ec
3400d5c4:	340120ba 	.word	0x340120ba
3400d5c8:	340111d0 	.word	0x340111d0
3400d5cc:	3401209b 	.word	0x3401209b
3400d5d0:	34011624 	.word	0x34011624
3400d5d4:	34012087 	.word	0x34012087
3400d5d8:	3401164c 	.word	0x3401164c
3400d5dc:	34012e20 	.word	0x34012e20
3400d5e0:	34010f7e 	.word	0x34010f7e
3400d5e4:	3401107c 	.word	0x3401107c
3400d5e8:	580fe000 	.word	0x580fe000

3400d5ec <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3400d5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400d5ee:	4b38      	ldr	r3, [pc, #224]	@ (3400d6d0 <NPU0_IRQHandler+0xe4>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3400d5f0:	4c38      	ldr	r4, [pc, #224]	@ (3400d6d4 <NPU0_IRQHandler+0xe8>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400d5f2:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
3400d5f4:	6823      	ldr	r3, [r4, #0]
3400d5f6:	b343      	cbz	r3, 3400d64a <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3400d5f8:	6823      	ldr	r3, [r4, #0]
3400d5fa:	685b      	ldr	r3, [r3, #4]
3400d5fc:	b933      	cbnz	r3, 3400d60c <NPU0_IRQHandler+0x20>
3400d5fe:	f240 31b1 	movw	r1, #945	@ 0x3b1
3400d602:	4b35      	ldr	r3, [pc, #212]	@ (3400d6d8 <NPU0_IRQHandler+0xec>)
3400d604:	4a35      	ldr	r2, [pc, #212]	@ (3400d6dc <NPU0_IRQHandler+0xf0>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d606:	4836      	ldr	r0, [pc, #216]	@ (3400d6e0 <NPU0_IRQHandler+0xf4>)
3400d608:	f000 f8a6 	bl	3400d758 <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400d60c:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3400d60e:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400d610:	8a1b      	ldrh	r3, [r3, #16]
3400d612:	075b      	lsls	r3, r3, #29
3400d614:	d40c      	bmi.n	3400d630 <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
3400d616:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
3400d61a:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400d61e:	f7ff fd47 	bl	3400d0b0 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400d622:	6823      	ldr	r3, [r4, #0]
3400d624:	b99b      	cbnz	r3, 3400d64e <NPU0_IRQHandler+0x62>
3400d626:	f240 31d2 	movw	r1, #978	@ 0x3d2
3400d62a:	4b2e      	ldr	r3, [pc, #184]	@ (3400d6e4 <NPU0_IRQHandler+0xf8>)
3400d62c:	4a2b      	ldr	r2, [pc, #172]	@ (3400d6dc <NPU0_IRQHandler+0xf0>)
3400d62e:	e7ea      	b.n	3400d606 <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400d630:	6823      	ldr	r3, [r4, #0]
3400d632:	6858      	ldr	r0, [r3, #4]
3400d634:	f7ff fc7a 	bl	3400cf2c <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d638:	b120      	cbz	r0, 3400d644 <NPU0_IRQHandler+0x58>
3400d63a:	f240 31be 	movw	r1, #958	@ 0x3be
3400d63e:	4b2a      	ldr	r3, [pc, #168]	@ (3400d6e8 <NPU0_IRQHandler+0xfc>)
3400d640:	4a26      	ldr	r2, [pc, #152]	@ (3400d6dc <NPU0_IRQHandler+0xf0>)
3400d642:	e7e0      	b.n	3400d606 <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
3400d644:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
3400d648:	e7e9      	b.n	3400d61e <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400d64a:	4628      	mov	r0, r5
3400d64c:	e7e7      	b.n	3400d61e <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3400d64e:	6823      	ldr	r3, [r4, #0]
3400d650:	685b      	ldr	r3, [r3, #4]
3400d652:	8a1b      	ldrh	r3, [r3, #16]
3400d654:	f013 0304 	ands.w	r3, r3, #4
3400d658:	d123      	bne.n	3400d6a2 <NPU0_IRQHandler+0xb6>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3400d65a:	6822      	ldr	r2, [r4, #0]
3400d65c:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
3400d65e:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
3400d660:	402a      	ands	r2, r5
3400d662:	d017      	beq.n	3400d694 <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
3400d664:	f04f 0c01 	mov.w	ip, #1
3400d668:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400d66a:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400d66c:	4e1f      	ldr	r6, [pc, #124]	@ (3400d6ec <NPU0_IRQHandler+0x100>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400d66e:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
3400d670:	fa22 f703 	lsr.w	r7, r2, r3
3400d674:	07ff      	lsls	r7, r7, #31
3400d676:	d507      	bpl.n	3400d688 <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400d678:	031f      	lsls	r7, r3, #12
3400d67a:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
3400d67e:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
3400d682:	fa0c f703 	lsl.w	r7, ip, r3
3400d686:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
3400d688:	3801      	subs	r0, #1
3400d68a:	f103 0301 	add.w	r3, r3, #1
3400d68e:	d1ef      	bne.n	3400d670 <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400d690:	6823      	ldr	r3, [r4, #0]
3400d692:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
3400d694:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3400d698:	4b0d      	ldr	r3, [pc, #52]	@ (3400d6d0 <NPU0_IRQHandler+0xe4>)
3400d69a:	611d      	str	r5, [r3, #16]
3400d69c:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
3400d6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400d6a2:	6823      	ldr	r3, [r4, #0]
3400d6a4:	6858      	ldr	r0, [r3, #4]
3400d6a6:	f7ff fc41 	bl	3400cf2c <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d6aa:	b120      	cbz	r0, 3400d6b6 <NPU0_IRQHandler+0xca>
3400d6ac:	f240 3191 	movw	r1, #913	@ 0x391
3400d6b0:	4b0d      	ldr	r3, [pc, #52]	@ (3400d6e8 <NPU0_IRQHandler+0xfc>)
3400d6b2:	4a0f      	ldr	r2, [pc, #60]	@ (3400d6f0 <NPU0_IRQHandler+0x104>)
3400d6b4:	e7a7      	b.n	3400d606 <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3400d6b6:	00eb      	lsls	r3, r5, #3
3400d6b8:	d5ec      	bpl.n	3400d694 <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3400d6ba:	4b0e      	ldr	r3, [pc, #56]	@ (3400d6f4 <NPU0_IRQHandler+0x108>)
3400d6bc:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3400d6be:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400d6c0:	6823      	ldr	r3, [r4, #0]
3400d6c2:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400d6c4:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
3400d6c6:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400d6ca:	61d3      	str	r3, [r2, #28]
3400d6cc:	e7e2      	b.n	3400d694 <NPU0_IRQHandler+0xa8>
3400d6ce:	bf00      	nop
3400d6d0:	580e1000 	.word	0x580e1000
3400d6d4:	34012e24 	.word	0x34012e24
3400d6d8:	34011676 	.word	0x34011676
3400d6dc:	34011ffb 	.word	0x34011ffb
3400d6e0:	34011085 	.word	0x34011085
3400d6e4:	34010f9a 	.word	0x34010f9a
3400d6e8:	3401107c 	.word	0x3401107c
3400d6ec:	580e503c 	.word	0x580e503c
3400d6f0:	34011fcd 	.word	0x34011fcd
3400d6f4:	580fe000 	.word	0x580fe000

3400d6f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3400d6f8:	480f      	ldr	r0, [pc, #60]	@ (3400d738 <LoopForever+0x4>)
  msr   MSPLIM, r0
3400d6fa:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3400d6fe:	480f      	ldr	r0, [pc, #60]	@ (3400d73c <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3400d700:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3400d702:	f7f4 fc9d 	bl	34002040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3400d706:	480e      	ldr	r0, [pc, #56]	@ (3400d740 <LoopForever+0xc>)
  ldr r1, =_edata
3400d708:	490e      	ldr	r1, [pc, #56]	@ (3400d744 <LoopForever+0x10>)
  ldr r2, =_sidata
3400d70a:	4a0f      	ldr	r2, [pc, #60]	@ (3400d748 <LoopForever+0x14>)
  movs r3, #0
3400d70c:	2300      	movs	r3, #0
  b LoopCopyDataInit
3400d70e:	e002      	b.n	3400d716 <LoopCopyDataInit>

3400d710 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3400d710:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3400d712:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3400d714:	3304      	adds	r3, #4

3400d716 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3400d716:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3400d718:	428c      	cmp	r4, r1
  bcc CopyDataInit
3400d71a:	d3f9      	bcc.n	3400d710 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3400d71c:	4a0b      	ldr	r2, [pc, #44]	@ (3400d74c <LoopForever+0x18>)
  ldr r4, =_ebss
3400d71e:	4c0c      	ldr	r4, [pc, #48]	@ (3400d750 <LoopForever+0x1c>)
  movs r3, #0
3400d720:	2300      	movs	r3, #0
  b LoopFillZerobss
3400d722:	e001      	b.n	3400d728 <LoopFillZerobss>

3400d724 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3400d724:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3400d726:	3204      	adds	r2, #4

3400d728 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3400d728:	42a2      	cmp	r2, r4
  bcc FillZerobss
3400d72a:	d3fb      	bcc.n	3400d724 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3400d72c:	f001 fa58 	bl	3400ebe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3400d730:	f7f3 fe0a 	bl	34001348 <main>

3400d734 <LoopForever>:

LoopForever:
  b LoopForever
3400d734:	e7fe      	b.n	3400d734 <LoopForever>
3400d736:	0000      	.short	0x0000
  ldr   r0, =_sstack
3400d738:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3400d73c:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3400d740:	3401235c 	.word	0x3401235c
  ldr r1, =_edata
3400d744:	34012578 	.word	0x34012578
  ldr r2, =_sidata
3400d748:	3401235c 	.word	0x3401235c
  ldr r2, =_sbss
3400d74c:	34012578 	.word	0x34012578
  ldr r4, =_ebss
3400d750:	34012f78 	.word	0x34012f78

3400d754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3400d754:	e7fe      	b.n	3400d754 <ADC1_2_IRQHandler>
	...

3400d758 <__assert_func>:
3400d758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400d75a:	4614      	mov	r4, r2
3400d75c:	461a      	mov	r2, r3
3400d75e:	4b09      	ldr	r3, [pc, #36]	@ (3400d784 <__assert_func+0x2c>)
3400d760:	4605      	mov	r5, r0
3400d762:	681b      	ldr	r3, [r3, #0]
3400d764:	68d8      	ldr	r0, [r3, #12]
3400d766:	b14c      	cbz	r4, 3400d77c <__assert_func+0x24>
3400d768:	4b07      	ldr	r3, [pc, #28]	@ (3400d788 <__assert_func+0x30>)
3400d76a:	9100      	str	r1, [sp, #0]
3400d76c:	4907      	ldr	r1, [pc, #28]	@ (3400d78c <__assert_func+0x34>)
3400d76e:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400d772:	462b      	mov	r3, r5
3400d774:	f000 fe62 	bl	3400e43c <fiprintf>
3400d778:	f001 fa74 	bl	3400ec64 <abort>
3400d77c:	4b04      	ldr	r3, [pc, #16]	@ (3400d790 <__assert_func+0x38>)
3400d77e:	461c      	mov	r4, r3
3400d780:	e7f3      	b.n	3400d76a <__assert_func+0x12>
3400d782:	bf00      	nop
3400d784:	340123bc 	.word	0x340123bc
3400d788:	340116c0 	.word	0x340116c0
3400d78c:	340116cd 	.word	0x340116cd
3400d790:	34010d81 	.word	0x34010d81

3400d794 <malloc>:
3400d794:	4b02      	ldr	r3, [pc, #8]	@ (3400d7a0 <malloc+0xc>)
3400d796:	4601      	mov	r1, r0
3400d798:	6818      	ldr	r0, [r3, #0]
3400d79a:	f000 b825 	b.w	3400d7e8 <_malloc_r>
3400d79e:	bf00      	nop
3400d7a0:	340123bc 	.word	0x340123bc

3400d7a4 <sbrk_aligned>:
3400d7a4:	b570      	push	{r4, r5, r6, lr}
3400d7a6:	4e0f      	ldr	r6, [pc, #60]	@ (3400d7e4 <sbrk_aligned+0x40>)
3400d7a8:	460c      	mov	r4, r1
3400d7aa:	4605      	mov	r5, r0
3400d7ac:	6831      	ldr	r1, [r6, #0]
3400d7ae:	b911      	cbnz	r1, 3400d7b6 <sbrk_aligned+0x12>
3400d7b0:	f001 f9ee 	bl	3400eb90 <_sbrk_r>
3400d7b4:	6030      	str	r0, [r6, #0]
3400d7b6:	4621      	mov	r1, r4
3400d7b8:	4628      	mov	r0, r5
3400d7ba:	f001 f9e9 	bl	3400eb90 <_sbrk_r>
3400d7be:	1c43      	adds	r3, r0, #1
3400d7c0:	d103      	bne.n	3400d7ca <sbrk_aligned+0x26>
3400d7c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3400d7c6:	4620      	mov	r0, r4
3400d7c8:	bd70      	pop	{r4, r5, r6, pc}
3400d7ca:	1cc4      	adds	r4, r0, #3
3400d7cc:	f024 0403 	bic.w	r4, r4, #3
3400d7d0:	42a0      	cmp	r0, r4
3400d7d2:	d0f8      	beq.n	3400d7c6 <sbrk_aligned+0x22>
3400d7d4:	1a21      	subs	r1, r4, r0
3400d7d6:	4628      	mov	r0, r5
3400d7d8:	f001 f9da 	bl	3400eb90 <_sbrk_r>
3400d7dc:	3001      	adds	r0, #1
3400d7de:	d1f2      	bne.n	3400d7c6 <sbrk_aligned+0x22>
3400d7e0:	e7ef      	b.n	3400d7c2 <sbrk_aligned+0x1e>
3400d7e2:	bf00      	nop
3400d7e4:	34012e28 	.word	0x34012e28

3400d7e8 <_malloc_r>:
3400d7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400d7ec:	1ccd      	adds	r5, r1, #3
3400d7ee:	4606      	mov	r6, r0
3400d7f0:	f025 0503 	bic.w	r5, r5, #3
3400d7f4:	3508      	adds	r5, #8
3400d7f6:	2d0c      	cmp	r5, #12
3400d7f8:	bf38      	it	cc
3400d7fa:	250c      	movcc	r5, #12
3400d7fc:	2d00      	cmp	r5, #0
3400d7fe:	db01      	blt.n	3400d804 <_malloc_r+0x1c>
3400d800:	42a9      	cmp	r1, r5
3400d802:	d904      	bls.n	3400d80e <_malloc_r+0x26>
3400d804:	230c      	movs	r3, #12
3400d806:	6033      	str	r3, [r6, #0]
3400d808:	2000      	movs	r0, #0
3400d80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400d80e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3400d8e4 <_malloc_r+0xfc>
3400d812:	f000 f869 	bl	3400d8e8 <__malloc_lock>
3400d816:	f8d8 3000 	ldr.w	r3, [r8]
3400d81a:	461c      	mov	r4, r3
3400d81c:	bb44      	cbnz	r4, 3400d870 <_malloc_r+0x88>
3400d81e:	4629      	mov	r1, r5
3400d820:	4630      	mov	r0, r6
3400d822:	f7ff ffbf 	bl	3400d7a4 <sbrk_aligned>
3400d826:	1c43      	adds	r3, r0, #1
3400d828:	4604      	mov	r4, r0
3400d82a:	d158      	bne.n	3400d8de <_malloc_r+0xf6>
3400d82c:	f8d8 4000 	ldr.w	r4, [r8]
3400d830:	4627      	mov	r7, r4
3400d832:	2f00      	cmp	r7, #0
3400d834:	d143      	bne.n	3400d8be <_malloc_r+0xd6>
3400d836:	2c00      	cmp	r4, #0
3400d838:	d04b      	beq.n	3400d8d2 <_malloc_r+0xea>
3400d83a:	6823      	ldr	r3, [r4, #0]
3400d83c:	4639      	mov	r1, r7
3400d83e:	4630      	mov	r0, r6
3400d840:	eb04 0903 	add.w	r9, r4, r3
3400d844:	f001 f9a4 	bl	3400eb90 <_sbrk_r>
3400d848:	4581      	cmp	r9, r0
3400d84a:	d142      	bne.n	3400d8d2 <_malloc_r+0xea>
3400d84c:	6821      	ldr	r1, [r4, #0]
3400d84e:	4630      	mov	r0, r6
3400d850:	1a6d      	subs	r5, r5, r1
3400d852:	4629      	mov	r1, r5
3400d854:	f7ff ffa6 	bl	3400d7a4 <sbrk_aligned>
3400d858:	3001      	adds	r0, #1
3400d85a:	d03a      	beq.n	3400d8d2 <_malloc_r+0xea>
3400d85c:	6823      	ldr	r3, [r4, #0]
3400d85e:	442b      	add	r3, r5
3400d860:	6023      	str	r3, [r4, #0]
3400d862:	f8d8 3000 	ldr.w	r3, [r8]
3400d866:	685a      	ldr	r2, [r3, #4]
3400d868:	bb62      	cbnz	r2, 3400d8c4 <_malloc_r+0xdc>
3400d86a:	f8c8 7000 	str.w	r7, [r8]
3400d86e:	e00f      	b.n	3400d890 <_malloc_r+0xa8>
3400d870:	6822      	ldr	r2, [r4, #0]
3400d872:	1b52      	subs	r2, r2, r5
3400d874:	d420      	bmi.n	3400d8b8 <_malloc_r+0xd0>
3400d876:	2a0b      	cmp	r2, #11
3400d878:	d917      	bls.n	3400d8aa <_malloc_r+0xc2>
3400d87a:	1961      	adds	r1, r4, r5
3400d87c:	42a3      	cmp	r3, r4
3400d87e:	6025      	str	r5, [r4, #0]
3400d880:	bf18      	it	ne
3400d882:	6059      	strne	r1, [r3, #4]
3400d884:	6863      	ldr	r3, [r4, #4]
3400d886:	bf08      	it	eq
3400d888:	f8c8 1000 	streq.w	r1, [r8]
3400d88c:	5162      	str	r2, [r4, r5]
3400d88e:	604b      	str	r3, [r1, #4]
3400d890:	4630      	mov	r0, r6
3400d892:	f000 f82f 	bl	3400d8f4 <__malloc_unlock>
3400d896:	f104 000b 	add.w	r0, r4, #11
3400d89a:	1d23      	adds	r3, r4, #4
3400d89c:	f020 0007 	bic.w	r0, r0, #7
3400d8a0:	1ac2      	subs	r2, r0, r3
3400d8a2:	bf1c      	itt	ne
3400d8a4:	1a1b      	subne	r3, r3, r0
3400d8a6:	50a3      	strne	r3, [r4, r2]
3400d8a8:	e7af      	b.n	3400d80a <_malloc_r+0x22>
3400d8aa:	6862      	ldr	r2, [r4, #4]
3400d8ac:	42a3      	cmp	r3, r4
3400d8ae:	bf0c      	ite	eq
3400d8b0:	f8c8 2000 	streq.w	r2, [r8]
3400d8b4:	605a      	strne	r2, [r3, #4]
3400d8b6:	e7eb      	b.n	3400d890 <_malloc_r+0xa8>
3400d8b8:	4623      	mov	r3, r4
3400d8ba:	6864      	ldr	r4, [r4, #4]
3400d8bc:	e7ae      	b.n	3400d81c <_malloc_r+0x34>
3400d8be:	463c      	mov	r4, r7
3400d8c0:	687f      	ldr	r7, [r7, #4]
3400d8c2:	e7b6      	b.n	3400d832 <_malloc_r+0x4a>
3400d8c4:	461a      	mov	r2, r3
3400d8c6:	685b      	ldr	r3, [r3, #4]
3400d8c8:	42a3      	cmp	r3, r4
3400d8ca:	d1fb      	bne.n	3400d8c4 <_malloc_r+0xdc>
3400d8cc:	2300      	movs	r3, #0
3400d8ce:	6053      	str	r3, [r2, #4]
3400d8d0:	e7de      	b.n	3400d890 <_malloc_r+0xa8>
3400d8d2:	230c      	movs	r3, #12
3400d8d4:	4630      	mov	r0, r6
3400d8d6:	6033      	str	r3, [r6, #0]
3400d8d8:	f000 f80c 	bl	3400d8f4 <__malloc_unlock>
3400d8dc:	e794      	b.n	3400d808 <_malloc_r+0x20>
3400d8de:	6005      	str	r5, [r0, #0]
3400d8e0:	e7d6      	b.n	3400d890 <_malloc_r+0xa8>
3400d8e2:	bf00      	nop
3400d8e4:	34012e2c 	.word	0x34012e2c

3400d8e8 <__malloc_lock>:
3400d8e8:	4801      	ldr	r0, [pc, #4]	@ (3400d8f0 <__malloc_lock+0x8>)
3400d8ea:	f001 b99e 	b.w	3400ec2a <__retarget_lock_acquire_recursive>
3400d8ee:	bf00      	nop
3400d8f0:	34012f70 	.word	0x34012f70

3400d8f4 <__malloc_unlock>:
3400d8f4:	4801      	ldr	r0, [pc, #4]	@ (3400d8fc <__malloc_unlock+0x8>)
3400d8f6:	f001 b999 	b.w	3400ec2c <__retarget_lock_release_recursive>
3400d8fa:	bf00      	nop
3400d8fc:	34012f70 	.word	0x34012f70

3400d900 <__cvt>:
3400d900:	b5f0      	push	{r4, r5, r6, r7, lr}
3400d902:	ed2d 8b02 	vpush	{d8}
3400d906:	eeb0 8b40 	vmov.f64	d8, d0
3400d90a:	b085      	sub	sp, #20
3400d90c:	4617      	mov	r7, r2
3400d90e:	460c      	mov	r4, r1
3400d910:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3400d912:	ee18 2a90 	vmov	r2, s17
3400d916:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400d918:	f025 0520 	bic.w	r5, r5, #32
3400d91c:	2a00      	cmp	r2, #0
3400d91e:	bfb6      	itet	lt
3400d920:	222d      	movlt	r2, #45	@ 0x2d
3400d922:	2200      	movge	r2, #0
3400d924:	eeb1 8b40 	vneglt.f64	d8, d0
3400d928:	2d46      	cmp	r5, #70	@ 0x46
3400d92a:	701a      	strb	r2, [r3, #0]
3400d92c:	d004      	beq.n	3400d938 <__cvt+0x38>
3400d92e:	2d45      	cmp	r5, #69	@ 0x45
3400d930:	d100      	bne.n	3400d934 <__cvt+0x34>
3400d932:	3401      	adds	r4, #1
3400d934:	2102      	movs	r1, #2
3400d936:	e000      	b.n	3400d93a <__cvt+0x3a>
3400d938:	2103      	movs	r1, #3
3400d93a:	ab03      	add	r3, sp, #12
3400d93c:	eeb0 0b48 	vmov.f64	d0, d8
3400d940:	4622      	mov	r2, r4
3400d942:	9301      	str	r3, [sp, #4]
3400d944:	ab02      	add	r3, sp, #8
3400d946:	9300      	str	r3, [sp, #0]
3400d948:	4633      	mov	r3, r6
3400d94a:	f001 fa21 	bl	3400ed90 <_dtoa_r>
3400d94e:	2d47      	cmp	r5, #71	@ 0x47
3400d950:	d114      	bne.n	3400d97c <__cvt+0x7c>
3400d952:	07fb      	lsls	r3, r7, #31
3400d954:	d50a      	bpl.n	3400d96c <__cvt+0x6c>
3400d956:	1902      	adds	r2, r0, r4
3400d958:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400d95c:	2130      	movs	r1, #48	@ 0x30
3400d95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d962:	bf08      	it	eq
3400d964:	9203      	streq	r2, [sp, #12]
3400d966:	9b03      	ldr	r3, [sp, #12]
3400d968:	4293      	cmp	r3, r2
3400d96a:	d319      	bcc.n	3400d9a0 <__cvt+0xa0>
3400d96c:	9b03      	ldr	r3, [sp, #12]
3400d96e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400d970:	1a1b      	subs	r3, r3, r0
3400d972:	6013      	str	r3, [r2, #0]
3400d974:	b005      	add	sp, #20
3400d976:	ecbd 8b02 	vpop	{d8}
3400d97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400d97c:	2d46      	cmp	r5, #70	@ 0x46
3400d97e:	eb00 0204 	add.w	r2, r0, r4
3400d982:	d1e9      	bne.n	3400d958 <__cvt+0x58>
3400d984:	7803      	ldrb	r3, [r0, #0]
3400d986:	2b30      	cmp	r3, #48	@ 0x30
3400d988:	d107      	bne.n	3400d99a <__cvt+0x9a>
3400d98a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400d98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d992:	bf1c      	itt	ne
3400d994:	f1c4 0401 	rsbne	r4, r4, #1
3400d998:	6034      	strne	r4, [r6, #0]
3400d99a:	6833      	ldr	r3, [r6, #0]
3400d99c:	441a      	add	r2, r3
3400d99e:	e7db      	b.n	3400d958 <__cvt+0x58>
3400d9a0:	1c5c      	adds	r4, r3, #1
3400d9a2:	9403      	str	r4, [sp, #12]
3400d9a4:	7019      	strb	r1, [r3, #0]
3400d9a6:	e7de      	b.n	3400d966 <__cvt+0x66>

3400d9a8 <__exponent>:
3400d9a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400d9aa:	2900      	cmp	r1, #0
3400d9ac:	7002      	strb	r2, [r0, #0]
3400d9ae:	bfba      	itte	lt
3400d9b0:	4249      	neglt	r1, r1
3400d9b2:	232d      	movlt	r3, #45	@ 0x2d
3400d9b4:	232b      	movge	r3, #43	@ 0x2b
3400d9b6:	2909      	cmp	r1, #9
3400d9b8:	7043      	strb	r3, [r0, #1]
3400d9ba:	dd28      	ble.n	3400da0e <__exponent+0x66>
3400d9bc:	f10d 0307 	add.w	r3, sp, #7
3400d9c0:	270a      	movs	r7, #10
3400d9c2:	461d      	mov	r5, r3
3400d9c4:	461a      	mov	r2, r3
3400d9c6:	3b01      	subs	r3, #1
3400d9c8:	fbb1 f6f7 	udiv	r6, r1, r7
3400d9cc:	fb07 1416 	mls	r4, r7, r6, r1
3400d9d0:	3430      	adds	r4, #48	@ 0x30
3400d9d2:	f802 4c01 	strb.w	r4, [r2, #-1]
3400d9d6:	460c      	mov	r4, r1
3400d9d8:	4631      	mov	r1, r6
3400d9da:	2c63      	cmp	r4, #99	@ 0x63
3400d9dc:	dcf2      	bgt.n	3400d9c4 <__exponent+0x1c>
3400d9de:	3130      	adds	r1, #48	@ 0x30
3400d9e0:	1e94      	subs	r4, r2, #2
3400d9e2:	f803 1c01 	strb.w	r1, [r3, #-1]
3400d9e6:	1c41      	adds	r1, r0, #1
3400d9e8:	4623      	mov	r3, r4
3400d9ea:	42ab      	cmp	r3, r5
3400d9ec:	d30a      	bcc.n	3400da04 <__exponent+0x5c>
3400d9ee:	f10d 0309 	add.w	r3, sp, #9
3400d9f2:	1a9b      	subs	r3, r3, r2
3400d9f4:	42ac      	cmp	r4, r5
3400d9f6:	bf88      	it	hi
3400d9f8:	2300      	movhi	r3, #0
3400d9fa:	3302      	adds	r3, #2
3400d9fc:	4403      	add	r3, r0
3400d9fe:	1a18      	subs	r0, r3, r0
3400da00:	b003      	add	sp, #12
3400da02:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400da04:	f813 6b01 	ldrb.w	r6, [r3], #1
3400da08:	f801 6f01 	strb.w	r6, [r1, #1]!
3400da0c:	e7ed      	b.n	3400d9ea <__exponent+0x42>
3400da0e:	2330      	movs	r3, #48	@ 0x30
3400da10:	3130      	adds	r1, #48	@ 0x30
3400da12:	7083      	strb	r3, [r0, #2]
3400da14:	1d03      	adds	r3, r0, #4
3400da16:	70c1      	strb	r1, [r0, #3]
3400da18:	e7f1      	b.n	3400d9fe <__exponent+0x56>
3400da1a:	0000      	movs	r0, r0
3400da1c:	0000      	movs	r0, r0
	...

3400da20 <_printf_float>:
3400da20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400da24:	b08d      	sub	sp, #52	@ 0x34
3400da26:	460c      	mov	r4, r1
3400da28:	4616      	mov	r6, r2
3400da2a:	461f      	mov	r7, r3
3400da2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3400da30:	4605      	mov	r5, r0
3400da32:	f001 f875 	bl	3400eb20 <_localeconv_r>
3400da36:	f8d0 b000 	ldr.w	fp, [r0]
3400da3a:	4658      	mov	r0, fp
3400da3c:	f7f2 fea8 	bl	34000790 <strlen>
3400da40:	2300      	movs	r3, #0
3400da42:	f894 9018 	ldrb.w	r9, [r4, #24]
3400da46:	930a      	str	r3, [sp, #40]	@ 0x28
3400da48:	f8d8 3000 	ldr.w	r3, [r8]
3400da4c:	6822      	ldr	r2, [r4, #0]
3400da4e:	3307      	adds	r3, #7
3400da50:	9005      	str	r0, [sp, #20]
3400da52:	f023 0307 	bic.w	r3, r3, #7
3400da56:	f103 0108 	add.w	r1, r3, #8
3400da5a:	f8c8 1000 	str.w	r1, [r8]
3400da5e:	ed93 0b00 	vldr	d0, [r3]
3400da62:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3400dcc0 <_printf_float+0x2a0>
3400da66:	eeb0 7bc0 	vabs.f64	d7, d0
3400da6a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3400da6e:	eeb4 7b46 	vcmp.f64	d7, d6
3400da72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400da76:	dd24      	ble.n	3400dac2 <_printf_float+0xa2>
3400da78:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3400da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400da80:	d502      	bpl.n	3400da88 <_printf_float+0x68>
3400da82:	232d      	movs	r3, #45	@ 0x2d
3400da84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400da88:	498f      	ldr	r1, [pc, #572]	@ (3400dcc8 <_printf_float+0x2a8>)
3400da8a:	4b90      	ldr	r3, [pc, #576]	@ (3400dccc <_printf_float+0x2ac>)
3400da8c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3400da90:	bf8c      	ite	hi
3400da92:	4688      	movhi	r8, r1
3400da94:	4698      	movls	r8, r3
3400da96:	f022 0204 	bic.w	r2, r2, #4
3400da9a:	2303      	movs	r3, #3
3400da9c:	f04f 0a00 	mov.w	sl, #0
3400daa0:	6022      	str	r2, [r4, #0]
3400daa2:	6123      	str	r3, [r4, #16]
3400daa4:	4633      	mov	r3, r6
3400daa6:	aa0b      	add	r2, sp, #44	@ 0x2c
3400daa8:	4621      	mov	r1, r4
3400daaa:	4628      	mov	r0, r5
3400daac:	9700      	str	r7, [sp, #0]
3400daae:	f000 f9d1 	bl	3400de54 <_printf_common>
3400dab2:	3001      	adds	r0, #1
3400dab4:	f040 8089 	bne.w	3400dbca <_printf_float+0x1aa>
3400dab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400dabc:	b00d      	add	sp, #52	@ 0x34
3400dabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400dac2:	eeb4 0b40 	vcmp.f64	d0, d0
3400dac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400daca:	d709      	bvc.n	3400dae0 <_printf_float+0xc0>
3400dacc:	ee10 3a90 	vmov	r3, s1
3400dad0:	497f      	ldr	r1, [pc, #508]	@ (3400dcd0 <_printf_float+0x2b0>)
3400dad2:	2b00      	cmp	r3, #0
3400dad4:	bfbc      	itt	lt
3400dad6:	232d      	movlt	r3, #45	@ 0x2d
3400dad8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3400dadc:	4b7d      	ldr	r3, [pc, #500]	@ (3400dcd4 <_printf_float+0x2b4>)
3400dade:	e7d5      	b.n	3400da8c <_printf_float+0x6c>
3400dae0:	6863      	ldr	r3, [r4, #4]
3400dae2:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3400dae6:	1c59      	adds	r1, r3, #1
3400dae8:	d139      	bne.n	3400db5e <_printf_float+0x13e>
3400daea:	2306      	movs	r3, #6
3400daec:	6063      	str	r3, [r4, #4]
3400daee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3400daf2:	2300      	movs	r3, #0
3400daf4:	4628      	mov	r0, r5
3400daf6:	6022      	str	r2, [r4, #0]
3400daf8:	9303      	str	r3, [sp, #12]
3400dafa:	ab0a      	add	r3, sp, #40	@ 0x28
3400dafc:	e9cd 9301 	strd	r9, r3, [sp, #4]
3400db00:	ab09      	add	r3, sp, #36	@ 0x24
3400db02:	9300      	str	r3, [sp, #0]
3400db04:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3400db08:	6861      	ldr	r1, [r4, #4]
3400db0a:	f7ff fef9 	bl	3400d900 <__cvt>
3400db0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400db12:	4680      	mov	r8, r0
3400db14:	9909      	ldr	r1, [sp, #36]	@ 0x24
3400db16:	d129      	bne.n	3400db6c <_printf_float+0x14c>
3400db18:	1cc8      	adds	r0, r1, #3
3400db1a:	db02      	blt.n	3400db22 <_printf_float+0x102>
3400db1c:	6863      	ldr	r3, [r4, #4]
3400db1e:	4299      	cmp	r1, r3
3400db20:	dd41      	ble.n	3400dba6 <_printf_float+0x186>
3400db22:	f1a9 0902 	sub.w	r9, r9, #2
3400db26:	fa5f f989 	uxtb.w	r9, r9
3400db2a:	3901      	subs	r1, #1
3400db2c:	464a      	mov	r2, r9
3400db2e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3400db32:	9109      	str	r1, [sp, #36]	@ 0x24
3400db34:	f7ff ff38 	bl	3400d9a8 <__exponent>
3400db38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400db3a:	4682      	mov	sl, r0
3400db3c:	1813      	adds	r3, r2, r0
3400db3e:	2a01      	cmp	r2, #1
3400db40:	6123      	str	r3, [r4, #16]
3400db42:	dc02      	bgt.n	3400db4a <_printf_float+0x12a>
3400db44:	6822      	ldr	r2, [r4, #0]
3400db46:	07d2      	lsls	r2, r2, #31
3400db48:	d501      	bpl.n	3400db4e <_printf_float+0x12e>
3400db4a:	3301      	adds	r3, #1
3400db4c:	6123      	str	r3, [r4, #16]
3400db4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3400db52:	2b00      	cmp	r3, #0
3400db54:	d0a6      	beq.n	3400daa4 <_printf_float+0x84>
3400db56:	232d      	movs	r3, #45	@ 0x2d
3400db58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400db5c:	e7a2      	b.n	3400daa4 <_printf_float+0x84>
3400db5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400db62:	d1c4      	bne.n	3400daee <_printf_float+0xce>
3400db64:	2b00      	cmp	r3, #0
3400db66:	d1c2      	bne.n	3400daee <_printf_float+0xce>
3400db68:	2301      	movs	r3, #1
3400db6a:	e7bf      	b.n	3400daec <_printf_float+0xcc>
3400db6c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400db70:	d9db      	bls.n	3400db2a <_printf_float+0x10a>
3400db72:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3400db76:	d118      	bne.n	3400dbaa <_printf_float+0x18a>
3400db78:	2900      	cmp	r1, #0
3400db7a:	6863      	ldr	r3, [r4, #4]
3400db7c:	dd0b      	ble.n	3400db96 <_printf_float+0x176>
3400db7e:	6121      	str	r1, [r4, #16]
3400db80:	b913      	cbnz	r3, 3400db88 <_printf_float+0x168>
3400db82:	6822      	ldr	r2, [r4, #0]
3400db84:	07d0      	lsls	r0, r2, #31
3400db86:	d502      	bpl.n	3400db8e <_printf_float+0x16e>
3400db88:	3301      	adds	r3, #1
3400db8a:	440b      	add	r3, r1
3400db8c:	6123      	str	r3, [r4, #16]
3400db8e:	f04f 0a00 	mov.w	sl, #0
3400db92:	65a1      	str	r1, [r4, #88]	@ 0x58
3400db94:	e7db      	b.n	3400db4e <_printf_float+0x12e>
3400db96:	b913      	cbnz	r3, 3400db9e <_printf_float+0x17e>
3400db98:	6822      	ldr	r2, [r4, #0]
3400db9a:	07d2      	lsls	r2, r2, #31
3400db9c:	d501      	bpl.n	3400dba2 <_printf_float+0x182>
3400db9e:	3302      	adds	r3, #2
3400dba0:	e7f4      	b.n	3400db8c <_printf_float+0x16c>
3400dba2:	2301      	movs	r3, #1
3400dba4:	e7f2      	b.n	3400db8c <_printf_float+0x16c>
3400dba6:	f04f 0967 	mov.w	r9, #103	@ 0x67
3400dbaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400dbac:	4299      	cmp	r1, r3
3400dbae:	db05      	blt.n	3400dbbc <_printf_float+0x19c>
3400dbb0:	6823      	ldr	r3, [r4, #0]
3400dbb2:	6121      	str	r1, [r4, #16]
3400dbb4:	07d8      	lsls	r0, r3, #31
3400dbb6:	d5ea      	bpl.n	3400db8e <_printf_float+0x16e>
3400dbb8:	1c4b      	adds	r3, r1, #1
3400dbba:	e7e7      	b.n	3400db8c <_printf_float+0x16c>
3400dbbc:	2900      	cmp	r1, #0
3400dbbe:	bfd4      	ite	le
3400dbc0:	f1c1 0202 	rsble	r2, r1, #2
3400dbc4:	2201      	movgt	r2, #1
3400dbc6:	4413      	add	r3, r2
3400dbc8:	e7e0      	b.n	3400db8c <_printf_float+0x16c>
3400dbca:	6823      	ldr	r3, [r4, #0]
3400dbcc:	055a      	lsls	r2, r3, #21
3400dbce:	d407      	bmi.n	3400dbe0 <_printf_float+0x1c0>
3400dbd0:	6923      	ldr	r3, [r4, #16]
3400dbd2:	4642      	mov	r2, r8
3400dbd4:	4631      	mov	r1, r6
3400dbd6:	4628      	mov	r0, r5
3400dbd8:	47b8      	blx	r7
3400dbda:	3001      	adds	r0, #1
3400dbdc:	d12a      	bne.n	3400dc34 <_printf_float+0x214>
3400dbde:	e76b      	b.n	3400dab8 <_printf_float+0x98>
3400dbe0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400dbe4:	f240 80e0 	bls.w	3400dda8 <_printf_float+0x388>
3400dbe8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400dbec:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400dbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dbf4:	d133      	bne.n	3400dc5e <_printf_float+0x23e>
3400dbf6:	2301      	movs	r3, #1
3400dbf8:	4a37      	ldr	r2, [pc, #220]	@ (3400dcd8 <_printf_float+0x2b8>)
3400dbfa:	4631      	mov	r1, r6
3400dbfc:	4628      	mov	r0, r5
3400dbfe:	47b8      	blx	r7
3400dc00:	3001      	adds	r0, #1
3400dc02:	f43f af59 	beq.w	3400dab8 <_printf_float+0x98>
3400dc06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3400dc0a:	4543      	cmp	r3, r8
3400dc0c:	db02      	blt.n	3400dc14 <_printf_float+0x1f4>
3400dc0e:	6823      	ldr	r3, [r4, #0]
3400dc10:	07d8      	lsls	r0, r3, #31
3400dc12:	d50f      	bpl.n	3400dc34 <_printf_float+0x214>
3400dc14:	9b05      	ldr	r3, [sp, #20]
3400dc16:	465a      	mov	r2, fp
3400dc18:	4631      	mov	r1, r6
3400dc1a:	4628      	mov	r0, r5
3400dc1c:	47b8      	blx	r7
3400dc1e:	3001      	adds	r0, #1
3400dc20:	f43f af4a 	beq.w	3400dab8 <_printf_float+0x98>
3400dc24:	f04f 0900 	mov.w	r9, #0
3400dc28:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400dc2c:	f104 0a1a 	add.w	sl, r4, #26
3400dc30:	45c8      	cmp	r8, r9
3400dc32:	dc09      	bgt.n	3400dc48 <_printf_float+0x228>
3400dc34:	6823      	ldr	r3, [r4, #0]
3400dc36:	079b      	lsls	r3, r3, #30
3400dc38:	f100 8107 	bmi.w	3400de4a <_printf_float+0x42a>
3400dc3c:	68e0      	ldr	r0, [r4, #12]
3400dc3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400dc40:	4298      	cmp	r0, r3
3400dc42:	bfb8      	it	lt
3400dc44:	4618      	movlt	r0, r3
3400dc46:	e739      	b.n	3400dabc <_printf_float+0x9c>
3400dc48:	2301      	movs	r3, #1
3400dc4a:	4652      	mov	r2, sl
3400dc4c:	4631      	mov	r1, r6
3400dc4e:	4628      	mov	r0, r5
3400dc50:	47b8      	blx	r7
3400dc52:	3001      	adds	r0, #1
3400dc54:	f43f af30 	beq.w	3400dab8 <_printf_float+0x98>
3400dc58:	f109 0901 	add.w	r9, r9, #1
3400dc5c:	e7e8      	b.n	3400dc30 <_printf_float+0x210>
3400dc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dc60:	2b00      	cmp	r3, #0
3400dc62:	dc3b      	bgt.n	3400dcdc <_printf_float+0x2bc>
3400dc64:	2301      	movs	r3, #1
3400dc66:	4a1c      	ldr	r2, [pc, #112]	@ (3400dcd8 <_printf_float+0x2b8>)
3400dc68:	4631      	mov	r1, r6
3400dc6a:	4628      	mov	r0, r5
3400dc6c:	47b8      	blx	r7
3400dc6e:	3001      	adds	r0, #1
3400dc70:	f43f af22 	beq.w	3400dab8 <_printf_float+0x98>
3400dc74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3400dc78:	ea59 0303 	orrs.w	r3, r9, r3
3400dc7c:	d102      	bne.n	3400dc84 <_printf_float+0x264>
3400dc7e:	6823      	ldr	r3, [r4, #0]
3400dc80:	07d9      	lsls	r1, r3, #31
3400dc82:	d5d7      	bpl.n	3400dc34 <_printf_float+0x214>
3400dc84:	9b05      	ldr	r3, [sp, #20]
3400dc86:	465a      	mov	r2, fp
3400dc88:	4631      	mov	r1, r6
3400dc8a:	4628      	mov	r0, r5
3400dc8c:	47b8      	blx	r7
3400dc8e:	3001      	adds	r0, #1
3400dc90:	f43f af12 	beq.w	3400dab8 <_printf_float+0x98>
3400dc94:	f04f 0a00 	mov.w	sl, #0
3400dc98:	f104 0b1a 	add.w	fp, r4, #26
3400dc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dc9e:	425b      	negs	r3, r3
3400dca0:	4553      	cmp	r3, sl
3400dca2:	dc01      	bgt.n	3400dca8 <_printf_float+0x288>
3400dca4:	464b      	mov	r3, r9
3400dca6:	e794      	b.n	3400dbd2 <_printf_float+0x1b2>
3400dca8:	2301      	movs	r3, #1
3400dcaa:	465a      	mov	r2, fp
3400dcac:	4631      	mov	r1, r6
3400dcae:	4628      	mov	r0, r5
3400dcb0:	47b8      	blx	r7
3400dcb2:	3001      	adds	r0, #1
3400dcb4:	f43f af00 	beq.w	3400dab8 <_printf_float+0x98>
3400dcb8:	f10a 0a01 	add.w	sl, sl, #1
3400dcbc:	e7ee      	b.n	3400dc9c <_printf_float+0x27c>
3400dcbe:	bf00      	nop
3400dcc0:	ffffffff 	.word	0xffffffff
3400dcc4:	7fefffff 	.word	0x7fefffff
3400dcc8:	34011700 	.word	0x34011700
3400dccc:	340116fc 	.word	0x340116fc
3400dcd0:	34011708 	.word	0x34011708
3400dcd4:	34011704 	.word	0x34011704
3400dcd8:	34010f98 	.word	0x34010f98
3400dcdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400dcde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3400dce2:	4553      	cmp	r3, sl
3400dce4:	bfa8      	it	ge
3400dce6:	4653      	movge	r3, sl
3400dce8:	2b00      	cmp	r3, #0
3400dcea:	4699      	mov	r9, r3
3400dcec:	dc37      	bgt.n	3400dd5e <_printf_float+0x33e>
3400dcee:	2300      	movs	r3, #0
3400dcf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400dcf4:	f104 021a 	add.w	r2, r4, #26
3400dcf8:	9307      	str	r3, [sp, #28]
3400dcfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400dcfc:	9907      	ldr	r1, [sp, #28]
3400dcfe:	9306      	str	r3, [sp, #24]
3400dd00:	eba3 0309 	sub.w	r3, r3, r9
3400dd04:	428b      	cmp	r3, r1
3400dd06:	dc31      	bgt.n	3400dd6c <_printf_float+0x34c>
3400dd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dd0a:	459a      	cmp	sl, r3
3400dd0c:	dc3b      	bgt.n	3400dd86 <_printf_float+0x366>
3400dd0e:	6823      	ldr	r3, [r4, #0]
3400dd10:	07da      	lsls	r2, r3, #31
3400dd12:	d438      	bmi.n	3400dd86 <_printf_float+0x366>
3400dd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dd16:	ebaa 0903 	sub.w	r9, sl, r3
3400dd1a:	9b06      	ldr	r3, [sp, #24]
3400dd1c:	ebaa 0303 	sub.w	r3, sl, r3
3400dd20:	4599      	cmp	r9, r3
3400dd22:	bfa8      	it	ge
3400dd24:	4699      	movge	r9, r3
3400dd26:	f1b9 0f00 	cmp.w	r9, #0
3400dd2a:	dc34      	bgt.n	3400dd96 <_printf_float+0x376>
3400dd2c:	f04f 0800 	mov.w	r8, #0
3400dd30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400dd34:	f104 0b1a 	add.w	fp, r4, #26
3400dd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dd3a:	ebaa 0303 	sub.w	r3, sl, r3
3400dd3e:	eba3 0309 	sub.w	r3, r3, r9
3400dd42:	4543      	cmp	r3, r8
3400dd44:	f77f af76 	ble.w	3400dc34 <_printf_float+0x214>
3400dd48:	2301      	movs	r3, #1
3400dd4a:	465a      	mov	r2, fp
3400dd4c:	4631      	mov	r1, r6
3400dd4e:	4628      	mov	r0, r5
3400dd50:	47b8      	blx	r7
3400dd52:	3001      	adds	r0, #1
3400dd54:	f43f aeb0 	beq.w	3400dab8 <_printf_float+0x98>
3400dd58:	f108 0801 	add.w	r8, r8, #1
3400dd5c:	e7ec      	b.n	3400dd38 <_printf_float+0x318>
3400dd5e:	4642      	mov	r2, r8
3400dd60:	4631      	mov	r1, r6
3400dd62:	4628      	mov	r0, r5
3400dd64:	47b8      	blx	r7
3400dd66:	3001      	adds	r0, #1
3400dd68:	d1c1      	bne.n	3400dcee <_printf_float+0x2ce>
3400dd6a:	e6a5      	b.n	3400dab8 <_printf_float+0x98>
3400dd6c:	2301      	movs	r3, #1
3400dd6e:	4631      	mov	r1, r6
3400dd70:	4628      	mov	r0, r5
3400dd72:	9206      	str	r2, [sp, #24]
3400dd74:	47b8      	blx	r7
3400dd76:	3001      	adds	r0, #1
3400dd78:	f43f ae9e 	beq.w	3400dab8 <_printf_float+0x98>
3400dd7c:	9b07      	ldr	r3, [sp, #28]
3400dd7e:	9a06      	ldr	r2, [sp, #24]
3400dd80:	3301      	adds	r3, #1
3400dd82:	9307      	str	r3, [sp, #28]
3400dd84:	e7b9      	b.n	3400dcfa <_printf_float+0x2da>
3400dd86:	9b05      	ldr	r3, [sp, #20]
3400dd88:	465a      	mov	r2, fp
3400dd8a:	4631      	mov	r1, r6
3400dd8c:	4628      	mov	r0, r5
3400dd8e:	47b8      	blx	r7
3400dd90:	3001      	adds	r0, #1
3400dd92:	d1bf      	bne.n	3400dd14 <_printf_float+0x2f4>
3400dd94:	e690      	b.n	3400dab8 <_printf_float+0x98>
3400dd96:	9a06      	ldr	r2, [sp, #24]
3400dd98:	464b      	mov	r3, r9
3400dd9a:	4631      	mov	r1, r6
3400dd9c:	4628      	mov	r0, r5
3400dd9e:	4442      	add	r2, r8
3400dda0:	47b8      	blx	r7
3400dda2:	3001      	adds	r0, #1
3400dda4:	d1c2      	bne.n	3400dd2c <_printf_float+0x30c>
3400dda6:	e687      	b.n	3400dab8 <_printf_float+0x98>
3400dda8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3400ddac:	f1b9 0f01 	cmp.w	r9, #1
3400ddb0:	dc01      	bgt.n	3400ddb6 <_printf_float+0x396>
3400ddb2:	07db      	lsls	r3, r3, #31
3400ddb4:	d536      	bpl.n	3400de24 <_printf_float+0x404>
3400ddb6:	2301      	movs	r3, #1
3400ddb8:	4642      	mov	r2, r8
3400ddba:	4631      	mov	r1, r6
3400ddbc:	4628      	mov	r0, r5
3400ddbe:	47b8      	blx	r7
3400ddc0:	3001      	adds	r0, #1
3400ddc2:	f43f ae79 	beq.w	3400dab8 <_printf_float+0x98>
3400ddc6:	9b05      	ldr	r3, [sp, #20]
3400ddc8:	465a      	mov	r2, fp
3400ddca:	4631      	mov	r1, r6
3400ddcc:	4628      	mov	r0, r5
3400ddce:	47b8      	blx	r7
3400ddd0:	3001      	adds	r0, #1
3400ddd2:	f43f ae71 	beq.w	3400dab8 <_printf_float+0x98>
3400ddd6:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3400ddda:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400ddde:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400dde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dde6:	d018      	beq.n	3400de1a <_printf_float+0x3fa>
3400dde8:	464b      	mov	r3, r9
3400ddea:	f108 0201 	add.w	r2, r8, #1
3400ddee:	4631      	mov	r1, r6
3400ddf0:	4628      	mov	r0, r5
3400ddf2:	47b8      	blx	r7
3400ddf4:	3001      	adds	r0, #1
3400ddf6:	d10c      	bne.n	3400de12 <_printf_float+0x3f2>
3400ddf8:	e65e      	b.n	3400dab8 <_printf_float+0x98>
3400ddfa:	2301      	movs	r3, #1
3400ddfc:	465a      	mov	r2, fp
3400ddfe:	4631      	mov	r1, r6
3400de00:	4628      	mov	r0, r5
3400de02:	47b8      	blx	r7
3400de04:	3001      	adds	r0, #1
3400de06:	f43f ae57 	beq.w	3400dab8 <_printf_float+0x98>
3400de0a:	f108 0801 	add.w	r8, r8, #1
3400de0e:	45c8      	cmp	r8, r9
3400de10:	dbf3      	blt.n	3400ddfa <_printf_float+0x3da>
3400de12:	4653      	mov	r3, sl
3400de14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3400de18:	e6dc      	b.n	3400dbd4 <_printf_float+0x1b4>
3400de1a:	f04f 0800 	mov.w	r8, #0
3400de1e:	f104 0b1a 	add.w	fp, r4, #26
3400de22:	e7f4      	b.n	3400de0e <_printf_float+0x3ee>
3400de24:	2301      	movs	r3, #1
3400de26:	4642      	mov	r2, r8
3400de28:	e7e1      	b.n	3400ddee <_printf_float+0x3ce>
3400de2a:	2301      	movs	r3, #1
3400de2c:	464a      	mov	r2, r9
3400de2e:	4631      	mov	r1, r6
3400de30:	4628      	mov	r0, r5
3400de32:	47b8      	blx	r7
3400de34:	3001      	adds	r0, #1
3400de36:	f43f ae3f 	beq.w	3400dab8 <_printf_float+0x98>
3400de3a:	f108 0801 	add.w	r8, r8, #1
3400de3e:	68e3      	ldr	r3, [r4, #12]
3400de40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3400de42:	1a5b      	subs	r3, r3, r1
3400de44:	4543      	cmp	r3, r8
3400de46:	dcf0      	bgt.n	3400de2a <_printf_float+0x40a>
3400de48:	e6f8      	b.n	3400dc3c <_printf_float+0x21c>
3400de4a:	f04f 0800 	mov.w	r8, #0
3400de4e:	f104 0919 	add.w	r9, r4, #25
3400de52:	e7f4      	b.n	3400de3e <_printf_float+0x41e>

3400de54 <_printf_common>:
3400de54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400de58:	4616      	mov	r6, r2
3400de5a:	4698      	mov	r8, r3
3400de5c:	688a      	ldr	r2, [r1, #8]
3400de5e:	4607      	mov	r7, r0
3400de60:	690b      	ldr	r3, [r1, #16]
3400de62:	460c      	mov	r4, r1
3400de64:	f8dd 9020 	ldr.w	r9, [sp, #32]
3400de68:	4293      	cmp	r3, r2
3400de6a:	bfb8      	it	lt
3400de6c:	4613      	movlt	r3, r2
3400de6e:	6033      	str	r3, [r6, #0]
3400de70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3400de74:	b10a      	cbz	r2, 3400de7a <_printf_common+0x26>
3400de76:	3301      	adds	r3, #1
3400de78:	6033      	str	r3, [r6, #0]
3400de7a:	6823      	ldr	r3, [r4, #0]
3400de7c:	0699      	lsls	r1, r3, #26
3400de7e:	bf42      	ittt	mi
3400de80:	6833      	ldrmi	r3, [r6, #0]
3400de82:	3302      	addmi	r3, #2
3400de84:	6033      	strmi	r3, [r6, #0]
3400de86:	6825      	ldr	r5, [r4, #0]
3400de88:	f015 0506 	ands.w	r5, r5, #6
3400de8c:	d106      	bne.n	3400de9c <_printf_common+0x48>
3400de8e:	f104 0a19 	add.w	sl, r4, #25
3400de92:	68e3      	ldr	r3, [r4, #12]
3400de94:	6832      	ldr	r2, [r6, #0]
3400de96:	1a9b      	subs	r3, r3, r2
3400de98:	42ab      	cmp	r3, r5
3400de9a:	dc2b      	bgt.n	3400def4 <_printf_common+0xa0>
3400de9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3400dea0:	6822      	ldr	r2, [r4, #0]
3400dea2:	3b00      	subs	r3, #0
3400dea4:	bf18      	it	ne
3400dea6:	2301      	movne	r3, #1
3400dea8:	0692      	lsls	r2, r2, #26
3400deaa:	d430      	bmi.n	3400df0e <_printf_common+0xba>
3400deac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3400deb0:	4641      	mov	r1, r8
3400deb2:	4638      	mov	r0, r7
3400deb4:	47c8      	blx	r9
3400deb6:	3001      	adds	r0, #1
3400deb8:	d023      	beq.n	3400df02 <_printf_common+0xae>
3400deba:	6823      	ldr	r3, [r4, #0]
3400debc:	341a      	adds	r4, #26
3400debe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3400dec2:	f003 0306 	and.w	r3, r3, #6
3400dec6:	2b04      	cmp	r3, #4
3400dec8:	bf0a      	itet	eq
3400deca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3400dece:	2500      	movne	r5, #0
3400ded0:	6833      	ldreq	r3, [r6, #0]
3400ded2:	f04f 0600 	mov.w	r6, #0
3400ded6:	bf08      	it	eq
3400ded8:	1aed      	subeq	r5, r5, r3
3400deda:	f854 3c12 	ldr.w	r3, [r4, #-18]
3400dede:	bf08      	it	eq
3400dee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3400dee4:	4293      	cmp	r3, r2
3400dee6:	bfc4      	itt	gt
3400dee8:	1a9b      	subgt	r3, r3, r2
3400deea:	18ed      	addgt	r5, r5, r3
3400deec:	42b5      	cmp	r5, r6
3400deee:	d11a      	bne.n	3400df26 <_printf_common+0xd2>
3400def0:	2000      	movs	r0, #0
3400def2:	e008      	b.n	3400df06 <_printf_common+0xb2>
3400def4:	2301      	movs	r3, #1
3400def6:	4652      	mov	r2, sl
3400def8:	4641      	mov	r1, r8
3400defa:	4638      	mov	r0, r7
3400defc:	47c8      	blx	r9
3400defe:	3001      	adds	r0, #1
3400df00:	d103      	bne.n	3400df0a <_printf_common+0xb6>
3400df02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400df06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400df0a:	3501      	adds	r5, #1
3400df0c:	e7c1      	b.n	3400de92 <_printf_common+0x3e>
3400df0e:	18e1      	adds	r1, r4, r3
3400df10:	1c5a      	adds	r2, r3, #1
3400df12:	2030      	movs	r0, #48	@ 0x30
3400df14:	3302      	adds	r3, #2
3400df16:	4422      	add	r2, r4
3400df18:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3400df1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3400df20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3400df24:	e7c2      	b.n	3400deac <_printf_common+0x58>
3400df26:	2301      	movs	r3, #1
3400df28:	4622      	mov	r2, r4
3400df2a:	4641      	mov	r1, r8
3400df2c:	4638      	mov	r0, r7
3400df2e:	47c8      	blx	r9
3400df30:	3001      	adds	r0, #1
3400df32:	d0e6      	beq.n	3400df02 <_printf_common+0xae>
3400df34:	3601      	adds	r6, #1
3400df36:	e7d9      	b.n	3400deec <_printf_common+0x98>

3400df38 <_printf_i>:
3400df38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3400df3c:	7e0f      	ldrb	r7, [r1, #24]
3400df3e:	4691      	mov	r9, r2
3400df40:	4680      	mov	r8, r0
3400df42:	460c      	mov	r4, r1
3400df44:	2f78      	cmp	r7, #120	@ 0x78
3400df46:	469a      	mov	sl, r3
3400df48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400df4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3400df4e:	d807      	bhi.n	3400df60 <_printf_i+0x28>
3400df50:	2f62      	cmp	r7, #98	@ 0x62
3400df52:	d80a      	bhi.n	3400df6a <_printf_i+0x32>
3400df54:	2f00      	cmp	r7, #0
3400df56:	f000 80d1 	beq.w	3400e0fc <_printf_i+0x1c4>
3400df5a:	2f58      	cmp	r7, #88	@ 0x58
3400df5c:	f000 80b8 	beq.w	3400e0d0 <_printf_i+0x198>
3400df60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400df64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3400df68:	e03a      	b.n	3400dfe0 <_printf_i+0xa8>
3400df6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3400df6e:	2b15      	cmp	r3, #21
3400df70:	d8f6      	bhi.n	3400df60 <_printf_i+0x28>
3400df72:	a101      	add	r1, pc, #4	@ (adr r1, 3400df78 <_printf_i+0x40>)
3400df74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3400df78:	3400dfd1 	.word	0x3400dfd1
3400df7c:	3400dfe5 	.word	0x3400dfe5
3400df80:	3400df61 	.word	0x3400df61
3400df84:	3400df61 	.word	0x3400df61
3400df88:	3400df61 	.word	0x3400df61
3400df8c:	3400df61 	.word	0x3400df61
3400df90:	3400dfe5 	.word	0x3400dfe5
3400df94:	3400df61 	.word	0x3400df61
3400df98:	3400df61 	.word	0x3400df61
3400df9c:	3400df61 	.word	0x3400df61
3400dfa0:	3400df61 	.word	0x3400df61
3400dfa4:	3400e0e3 	.word	0x3400e0e3
3400dfa8:	3400e00f 	.word	0x3400e00f
3400dfac:	3400e09d 	.word	0x3400e09d
3400dfb0:	3400df61 	.word	0x3400df61
3400dfb4:	3400df61 	.word	0x3400df61
3400dfb8:	3400e105 	.word	0x3400e105
3400dfbc:	3400df61 	.word	0x3400df61
3400dfc0:	3400e00f 	.word	0x3400e00f
3400dfc4:	3400df61 	.word	0x3400df61
3400dfc8:	3400df61 	.word	0x3400df61
3400dfcc:	3400e0a5 	.word	0x3400e0a5
3400dfd0:	6833      	ldr	r3, [r6, #0]
3400dfd2:	1d1a      	adds	r2, r3, #4
3400dfd4:	681b      	ldr	r3, [r3, #0]
3400dfd6:	6032      	str	r2, [r6, #0]
3400dfd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400dfdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3400dfe0:	2301      	movs	r3, #1
3400dfe2:	e09c      	b.n	3400e11e <_printf_i+0x1e6>
3400dfe4:	6833      	ldr	r3, [r6, #0]
3400dfe6:	6820      	ldr	r0, [r4, #0]
3400dfe8:	1d19      	adds	r1, r3, #4
3400dfea:	6031      	str	r1, [r6, #0]
3400dfec:	0606      	lsls	r6, r0, #24
3400dfee:	d501      	bpl.n	3400dff4 <_printf_i+0xbc>
3400dff0:	681d      	ldr	r5, [r3, #0]
3400dff2:	e003      	b.n	3400dffc <_printf_i+0xc4>
3400dff4:	0645      	lsls	r5, r0, #25
3400dff6:	d5fb      	bpl.n	3400dff0 <_printf_i+0xb8>
3400dff8:	f9b3 5000 	ldrsh.w	r5, [r3]
3400dffc:	2d00      	cmp	r5, #0
3400dffe:	da03      	bge.n	3400e008 <_printf_i+0xd0>
3400e000:	232d      	movs	r3, #45	@ 0x2d
3400e002:	426d      	negs	r5, r5
3400e004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e008:	4858      	ldr	r0, [pc, #352]	@ (3400e16c <_printf_i+0x234>)
3400e00a:	230a      	movs	r3, #10
3400e00c:	e011      	b.n	3400e032 <_printf_i+0xfa>
3400e00e:	6821      	ldr	r1, [r4, #0]
3400e010:	6833      	ldr	r3, [r6, #0]
3400e012:	0608      	lsls	r0, r1, #24
3400e014:	f853 5b04 	ldr.w	r5, [r3], #4
3400e018:	d402      	bmi.n	3400e020 <_printf_i+0xe8>
3400e01a:	0649      	lsls	r1, r1, #25
3400e01c:	bf48      	it	mi
3400e01e:	b2ad      	uxthmi	r5, r5
3400e020:	2f6f      	cmp	r7, #111	@ 0x6f
3400e022:	6033      	str	r3, [r6, #0]
3400e024:	4851      	ldr	r0, [pc, #324]	@ (3400e16c <_printf_i+0x234>)
3400e026:	bf14      	ite	ne
3400e028:	230a      	movne	r3, #10
3400e02a:	2308      	moveq	r3, #8
3400e02c:	2100      	movs	r1, #0
3400e02e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3400e032:	6866      	ldr	r6, [r4, #4]
3400e034:	2e00      	cmp	r6, #0
3400e036:	60a6      	str	r6, [r4, #8]
3400e038:	db05      	blt.n	3400e046 <_printf_i+0x10e>
3400e03a:	6821      	ldr	r1, [r4, #0]
3400e03c:	432e      	orrs	r6, r5
3400e03e:	f021 0104 	bic.w	r1, r1, #4
3400e042:	6021      	str	r1, [r4, #0]
3400e044:	d04b      	beq.n	3400e0de <_printf_i+0x1a6>
3400e046:	4616      	mov	r6, r2
3400e048:	fbb5 f1f3 	udiv	r1, r5, r3
3400e04c:	fb03 5711 	mls	r7, r3, r1, r5
3400e050:	5dc7      	ldrb	r7, [r0, r7]
3400e052:	f806 7d01 	strb.w	r7, [r6, #-1]!
3400e056:	462f      	mov	r7, r5
3400e058:	460d      	mov	r5, r1
3400e05a:	42bb      	cmp	r3, r7
3400e05c:	d9f4      	bls.n	3400e048 <_printf_i+0x110>
3400e05e:	2b08      	cmp	r3, #8
3400e060:	d10b      	bne.n	3400e07a <_printf_i+0x142>
3400e062:	6823      	ldr	r3, [r4, #0]
3400e064:	07df      	lsls	r7, r3, #31
3400e066:	d508      	bpl.n	3400e07a <_printf_i+0x142>
3400e068:	6923      	ldr	r3, [r4, #16]
3400e06a:	6861      	ldr	r1, [r4, #4]
3400e06c:	4299      	cmp	r1, r3
3400e06e:	bfde      	ittt	le
3400e070:	2330      	movle	r3, #48	@ 0x30
3400e072:	f806 3c01 	strble.w	r3, [r6, #-1]
3400e076:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3400e07a:	1b92      	subs	r2, r2, r6
3400e07c:	6122      	str	r2, [r4, #16]
3400e07e:	464b      	mov	r3, r9
3400e080:	aa03      	add	r2, sp, #12
3400e082:	4621      	mov	r1, r4
3400e084:	4640      	mov	r0, r8
3400e086:	f8cd a000 	str.w	sl, [sp]
3400e08a:	f7ff fee3 	bl	3400de54 <_printf_common>
3400e08e:	3001      	adds	r0, #1
3400e090:	d14a      	bne.n	3400e128 <_printf_i+0x1f0>
3400e092:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e096:	b004      	add	sp, #16
3400e098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400e09c:	6823      	ldr	r3, [r4, #0]
3400e09e:	f043 0320 	orr.w	r3, r3, #32
3400e0a2:	6023      	str	r3, [r4, #0]
3400e0a4:	2778      	movs	r7, #120	@ 0x78
3400e0a6:	4832      	ldr	r0, [pc, #200]	@ (3400e170 <_printf_i+0x238>)
3400e0a8:	6823      	ldr	r3, [r4, #0]
3400e0aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3400e0ae:	061f      	lsls	r7, r3, #24
3400e0b0:	6831      	ldr	r1, [r6, #0]
3400e0b2:	f851 5b04 	ldr.w	r5, [r1], #4
3400e0b6:	d402      	bmi.n	3400e0be <_printf_i+0x186>
3400e0b8:	065f      	lsls	r7, r3, #25
3400e0ba:	bf48      	it	mi
3400e0bc:	b2ad      	uxthmi	r5, r5
3400e0be:	6031      	str	r1, [r6, #0]
3400e0c0:	07d9      	lsls	r1, r3, #31
3400e0c2:	bf44      	itt	mi
3400e0c4:	f043 0320 	orrmi.w	r3, r3, #32
3400e0c8:	6023      	strmi	r3, [r4, #0]
3400e0ca:	b11d      	cbz	r5, 3400e0d4 <_printf_i+0x19c>
3400e0cc:	2310      	movs	r3, #16
3400e0ce:	e7ad      	b.n	3400e02c <_printf_i+0xf4>
3400e0d0:	4826      	ldr	r0, [pc, #152]	@ (3400e16c <_printf_i+0x234>)
3400e0d2:	e7e9      	b.n	3400e0a8 <_printf_i+0x170>
3400e0d4:	6823      	ldr	r3, [r4, #0]
3400e0d6:	f023 0320 	bic.w	r3, r3, #32
3400e0da:	6023      	str	r3, [r4, #0]
3400e0dc:	e7f6      	b.n	3400e0cc <_printf_i+0x194>
3400e0de:	4616      	mov	r6, r2
3400e0e0:	e7bd      	b.n	3400e05e <_printf_i+0x126>
3400e0e2:	6833      	ldr	r3, [r6, #0]
3400e0e4:	6825      	ldr	r5, [r4, #0]
3400e0e6:	1d18      	adds	r0, r3, #4
3400e0e8:	6961      	ldr	r1, [r4, #20]
3400e0ea:	6030      	str	r0, [r6, #0]
3400e0ec:	062e      	lsls	r6, r5, #24
3400e0ee:	681b      	ldr	r3, [r3, #0]
3400e0f0:	d501      	bpl.n	3400e0f6 <_printf_i+0x1be>
3400e0f2:	6019      	str	r1, [r3, #0]
3400e0f4:	e002      	b.n	3400e0fc <_printf_i+0x1c4>
3400e0f6:	0668      	lsls	r0, r5, #25
3400e0f8:	d5fb      	bpl.n	3400e0f2 <_printf_i+0x1ba>
3400e0fa:	8019      	strh	r1, [r3, #0]
3400e0fc:	2300      	movs	r3, #0
3400e0fe:	4616      	mov	r6, r2
3400e100:	6123      	str	r3, [r4, #16]
3400e102:	e7bc      	b.n	3400e07e <_printf_i+0x146>
3400e104:	6833      	ldr	r3, [r6, #0]
3400e106:	2100      	movs	r1, #0
3400e108:	1d1a      	adds	r2, r3, #4
3400e10a:	6032      	str	r2, [r6, #0]
3400e10c:	681e      	ldr	r6, [r3, #0]
3400e10e:	6862      	ldr	r2, [r4, #4]
3400e110:	4630      	mov	r0, r6
3400e112:	f000 fd8c 	bl	3400ec2e <memchr>
3400e116:	b108      	cbz	r0, 3400e11c <_printf_i+0x1e4>
3400e118:	1b80      	subs	r0, r0, r6
3400e11a:	6060      	str	r0, [r4, #4]
3400e11c:	6863      	ldr	r3, [r4, #4]
3400e11e:	6123      	str	r3, [r4, #16]
3400e120:	2300      	movs	r3, #0
3400e122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e126:	e7aa      	b.n	3400e07e <_printf_i+0x146>
3400e128:	6923      	ldr	r3, [r4, #16]
3400e12a:	4632      	mov	r2, r6
3400e12c:	4649      	mov	r1, r9
3400e12e:	4640      	mov	r0, r8
3400e130:	47d0      	blx	sl
3400e132:	3001      	adds	r0, #1
3400e134:	d0ad      	beq.n	3400e092 <_printf_i+0x15a>
3400e136:	6823      	ldr	r3, [r4, #0]
3400e138:	079b      	lsls	r3, r3, #30
3400e13a:	d413      	bmi.n	3400e164 <_printf_i+0x22c>
3400e13c:	68e0      	ldr	r0, [r4, #12]
3400e13e:	9b03      	ldr	r3, [sp, #12]
3400e140:	4298      	cmp	r0, r3
3400e142:	bfb8      	it	lt
3400e144:	4618      	movlt	r0, r3
3400e146:	e7a6      	b.n	3400e096 <_printf_i+0x15e>
3400e148:	2301      	movs	r3, #1
3400e14a:	4632      	mov	r2, r6
3400e14c:	4649      	mov	r1, r9
3400e14e:	4640      	mov	r0, r8
3400e150:	47d0      	blx	sl
3400e152:	3001      	adds	r0, #1
3400e154:	d09d      	beq.n	3400e092 <_printf_i+0x15a>
3400e156:	3501      	adds	r5, #1
3400e158:	68e3      	ldr	r3, [r4, #12]
3400e15a:	9903      	ldr	r1, [sp, #12]
3400e15c:	1a5b      	subs	r3, r3, r1
3400e15e:	42ab      	cmp	r3, r5
3400e160:	dcf2      	bgt.n	3400e148 <_printf_i+0x210>
3400e162:	e7eb      	b.n	3400e13c <_printf_i+0x204>
3400e164:	2500      	movs	r5, #0
3400e166:	f104 0619 	add.w	r6, r4, #25
3400e16a:	e7f5      	b.n	3400e158 <_printf_i+0x220>
3400e16c:	3401170c 	.word	0x3401170c
3400e170:	3401171d 	.word	0x3401171d

3400e174 <__sflush_r>:
3400e174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3400e178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400e17c:	0716      	lsls	r6, r2, #28
3400e17e:	4605      	mov	r5, r0
3400e180:	460c      	mov	r4, r1
3400e182:	d454      	bmi.n	3400e22e <__sflush_r+0xba>
3400e184:	684b      	ldr	r3, [r1, #4]
3400e186:	2b00      	cmp	r3, #0
3400e188:	dc02      	bgt.n	3400e190 <__sflush_r+0x1c>
3400e18a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3400e18c:	2b00      	cmp	r3, #0
3400e18e:	dd48      	ble.n	3400e222 <__sflush_r+0xae>
3400e190:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400e192:	2e00      	cmp	r6, #0
3400e194:	d045      	beq.n	3400e222 <__sflush_r+0xae>
3400e196:	2300      	movs	r3, #0
3400e198:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3400e19c:	682f      	ldr	r7, [r5, #0]
3400e19e:	6a21      	ldr	r1, [r4, #32]
3400e1a0:	602b      	str	r3, [r5, #0]
3400e1a2:	d030      	beq.n	3400e206 <__sflush_r+0x92>
3400e1a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3400e1a6:	89a3      	ldrh	r3, [r4, #12]
3400e1a8:	0759      	lsls	r1, r3, #29
3400e1aa:	d505      	bpl.n	3400e1b8 <__sflush_r+0x44>
3400e1ac:	6863      	ldr	r3, [r4, #4]
3400e1ae:	1ad2      	subs	r2, r2, r3
3400e1b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400e1b2:	b10b      	cbz	r3, 3400e1b8 <__sflush_r+0x44>
3400e1b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400e1b6:	1ad2      	subs	r2, r2, r3
3400e1b8:	2300      	movs	r3, #0
3400e1ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400e1bc:	6a21      	ldr	r1, [r4, #32]
3400e1be:	4628      	mov	r0, r5
3400e1c0:	47b0      	blx	r6
3400e1c2:	1c43      	adds	r3, r0, #1
3400e1c4:	89a3      	ldrh	r3, [r4, #12]
3400e1c6:	d106      	bne.n	3400e1d6 <__sflush_r+0x62>
3400e1c8:	6829      	ldr	r1, [r5, #0]
3400e1ca:	291d      	cmp	r1, #29
3400e1cc:	d82b      	bhi.n	3400e226 <__sflush_r+0xb2>
3400e1ce:	4a2a      	ldr	r2, [pc, #168]	@ (3400e278 <__sflush_r+0x104>)
3400e1d0:	40ca      	lsrs	r2, r1
3400e1d2:	07d6      	lsls	r6, r2, #31
3400e1d4:	d527      	bpl.n	3400e226 <__sflush_r+0xb2>
3400e1d6:	2200      	movs	r2, #0
3400e1d8:	04d9      	lsls	r1, r3, #19
3400e1da:	6062      	str	r2, [r4, #4]
3400e1dc:	6922      	ldr	r2, [r4, #16]
3400e1de:	6022      	str	r2, [r4, #0]
3400e1e0:	d504      	bpl.n	3400e1ec <__sflush_r+0x78>
3400e1e2:	1c42      	adds	r2, r0, #1
3400e1e4:	d101      	bne.n	3400e1ea <__sflush_r+0x76>
3400e1e6:	682b      	ldr	r3, [r5, #0]
3400e1e8:	b903      	cbnz	r3, 3400e1ec <__sflush_r+0x78>
3400e1ea:	6560      	str	r0, [r4, #84]	@ 0x54
3400e1ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400e1ee:	602f      	str	r7, [r5, #0]
3400e1f0:	b1b9      	cbz	r1, 3400e222 <__sflush_r+0xae>
3400e1f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400e1f6:	4299      	cmp	r1, r3
3400e1f8:	d002      	beq.n	3400e200 <__sflush_r+0x8c>
3400e1fa:	4628      	mov	r0, r5
3400e1fc:	f001 fb26 	bl	3400f84c <_free_r>
3400e200:	2300      	movs	r3, #0
3400e202:	6363      	str	r3, [r4, #52]	@ 0x34
3400e204:	e00d      	b.n	3400e222 <__sflush_r+0xae>
3400e206:	2301      	movs	r3, #1
3400e208:	4628      	mov	r0, r5
3400e20a:	47b0      	blx	r6
3400e20c:	4602      	mov	r2, r0
3400e20e:	1c50      	adds	r0, r2, #1
3400e210:	d1c9      	bne.n	3400e1a6 <__sflush_r+0x32>
3400e212:	682b      	ldr	r3, [r5, #0]
3400e214:	2b00      	cmp	r3, #0
3400e216:	d0c6      	beq.n	3400e1a6 <__sflush_r+0x32>
3400e218:	2b1d      	cmp	r3, #29
3400e21a:	d001      	beq.n	3400e220 <__sflush_r+0xac>
3400e21c:	2b16      	cmp	r3, #22
3400e21e:	d11d      	bne.n	3400e25c <__sflush_r+0xe8>
3400e220:	602f      	str	r7, [r5, #0]
3400e222:	2000      	movs	r0, #0
3400e224:	e021      	b.n	3400e26a <__sflush_r+0xf6>
3400e226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e22a:	b21b      	sxth	r3, r3
3400e22c:	e01a      	b.n	3400e264 <__sflush_r+0xf0>
3400e22e:	690f      	ldr	r7, [r1, #16]
3400e230:	2f00      	cmp	r7, #0
3400e232:	d0f6      	beq.n	3400e222 <__sflush_r+0xae>
3400e234:	0793      	lsls	r3, r2, #30
3400e236:	680e      	ldr	r6, [r1, #0]
3400e238:	600f      	str	r7, [r1, #0]
3400e23a:	bf0c      	ite	eq
3400e23c:	694b      	ldreq	r3, [r1, #20]
3400e23e:	2300      	movne	r3, #0
3400e240:	eba6 0807 	sub.w	r8, r6, r7
3400e244:	608b      	str	r3, [r1, #8]
3400e246:	f1b8 0f00 	cmp.w	r8, #0
3400e24a:	ddea      	ble.n	3400e222 <__sflush_r+0xae>
3400e24c:	4643      	mov	r3, r8
3400e24e:	463a      	mov	r2, r7
3400e250:	6a21      	ldr	r1, [r4, #32]
3400e252:	4628      	mov	r0, r5
3400e254:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3400e256:	47b0      	blx	r6
3400e258:	2800      	cmp	r0, #0
3400e25a:	dc08      	bgt.n	3400e26e <__sflush_r+0xfa>
3400e25c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e268:	81a3      	strh	r3, [r4, #12]
3400e26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400e26e:	4407      	add	r7, r0
3400e270:	eba8 0800 	sub.w	r8, r8, r0
3400e274:	e7e7      	b.n	3400e246 <__sflush_r+0xd2>
3400e276:	bf00      	nop
3400e278:	20400001 	.word	0x20400001

3400e27c <_fflush_r>:
3400e27c:	b538      	push	{r3, r4, r5, lr}
3400e27e:	690b      	ldr	r3, [r1, #16]
3400e280:	4605      	mov	r5, r0
3400e282:	460c      	mov	r4, r1
3400e284:	b913      	cbnz	r3, 3400e28c <_fflush_r+0x10>
3400e286:	2500      	movs	r5, #0
3400e288:	4628      	mov	r0, r5
3400e28a:	bd38      	pop	{r3, r4, r5, pc}
3400e28c:	b118      	cbz	r0, 3400e296 <_fflush_r+0x1a>
3400e28e:	6a03      	ldr	r3, [r0, #32]
3400e290:	b90b      	cbnz	r3, 3400e296 <_fflush_r+0x1a>
3400e292:	f000 f8bb 	bl	3400e40c <__sinit>
3400e296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e29a:	2b00      	cmp	r3, #0
3400e29c:	d0f3      	beq.n	3400e286 <_fflush_r+0xa>
3400e29e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3400e2a0:	07d0      	lsls	r0, r2, #31
3400e2a2:	d404      	bmi.n	3400e2ae <_fflush_r+0x32>
3400e2a4:	0599      	lsls	r1, r3, #22
3400e2a6:	d402      	bmi.n	3400e2ae <_fflush_r+0x32>
3400e2a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e2aa:	f000 fcbe 	bl	3400ec2a <__retarget_lock_acquire_recursive>
3400e2ae:	4628      	mov	r0, r5
3400e2b0:	4621      	mov	r1, r4
3400e2b2:	f7ff ff5f 	bl	3400e174 <__sflush_r>
3400e2b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e2b8:	4605      	mov	r5, r0
3400e2ba:	07da      	lsls	r2, r3, #31
3400e2bc:	d4e4      	bmi.n	3400e288 <_fflush_r+0xc>
3400e2be:	89a3      	ldrh	r3, [r4, #12]
3400e2c0:	059b      	lsls	r3, r3, #22
3400e2c2:	d4e1      	bmi.n	3400e288 <_fflush_r+0xc>
3400e2c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e2c6:	f000 fcb1 	bl	3400ec2c <__retarget_lock_release_recursive>
3400e2ca:	e7dd      	b.n	3400e288 <_fflush_r+0xc>

3400e2cc <fflush>:
3400e2cc:	4601      	mov	r1, r0
3400e2ce:	b920      	cbnz	r0, 3400e2da <fflush+0xe>
3400e2d0:	4a04      	ldr	r2, [pc, #16]	@ (3400e2e4 <fflush+0x18>)
3400e2d2:	4905      	ldr	r1, [pc, #20]	@ (3400e2e8 <fflush+0x1c>)
3400e2d4:	4805      	ldr	r0, [pc, #20]	@ (3400e2ec <fflush+0x20>)
3400e2d6:	f000 b8c3 	b.w	3400e460 <_fwalk_sglue>
3400e2da:	4b05      	ldr	r3, [pc, #20]	@ (3400e2f0 <fflush+0x24>)
3400e2dc:	6818      	ldr	r0, [r3, #0]
3400e2de:	f7ff bfcd 	b.w	3400e27c <_fflush_r>
3400e2e2:	bf00      	nop
3400e2e4:	340123b0 	.word	0x340123b0
3400e2e8:	3400e27d 	.word	0x3400e27d
3400e2ec:	340123c0 	.word	0x340123c0
3400e2f0:	340123bc 	.word	0x340123bc

3400e2f4 <std>:
3400e2f4:	2300      	movs	r3, #0
3400e2f6:	b510      	push	{r4, lr}
3400e2f8:	4604      	mov	r4, r0
3400e2fa:	6083      	str	r3, [r0, #8]
3400e2fc:	8181      	strh	r1, [r0, #12]
3400e2fe:	4619      	mov	r1, r3
3400e300:	6643      	str	r3, [r0, #100]	@ 0x64
3400e302:	81c2      	strh	r2, [r0, #14]
3400e304:	2208      	movs	r2, #8
3400e306:	6183      	str	r3, [r0, #24]
3400e308:	e9c0 3300 	strd	r3, r3, [r0]
3400e30c:	e9c0 3304 	strd	r3, r3, [r0, #16]
3400e310:	305c      	adds	r0, #92	@ 0x5c
3400e312:	f000 fa0b 	bl	3400e72c <memset>
3400e316:	4b0d      	ldr	r3, [pc, #52]	@ (3400e34c <std+0x58>)
3400e318:	6224      	str	r4, [r4, #32]
3400e31a:	6263      	str	r3, [r4, #36]	@ 0x24
3400e31c:	4b0c      	ldr	r3, [pc, #48]	@ (3400e350 <std+0x5c>)
3400e31e:	62a3      	str	r3, [r4, #40]	@ 0x28
3400e320:	4b0c      	ldr	r3, [pc, #48]	@ (3400e354 <std+0x60>)
3400e322:	62e3      	str	r3, [r4, #44]	@ 0x2c
3400e324:	4b0c      	ldr	r3, [pc, #48]	@ (3400e358 <std+0x64>)
3400e326:	6323      	str	r3, [r4, #48]	@ 0x30
3400e328:	4b0c      	ldr	r3, [pc, #48]	@ (3400e35c <std+0x68>)
3400e32a:	429c      	cmp	r4, r3
3400e32c:	d006      	beq.n	3400e33c <std+0x48>
3400e32e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3400e332:	4294      	cmp	r4, r2
3400e334:	d002      	beq.n	3400e33c <std+0x48>
3400e336:	33d0      	adds	r3, #208	@ 0xd0
3400e338:	429c      	cmp	r4, r3
3400e33a:	d105      	bne.n	3400e348 <std+0x54>
3400e33c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3400e340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e344:	f000 bc70 	b.w	3400ec28 <__retarget_lock_init_recursive>
3400e348:	bd10      	pop	{r4, pc}
3400e34a:	bf00      	nop
3400e34c:	3400e57d 	.word	0x3400e57d
3400e350:	3400e59f 	.word	0x3400e59f
3400e354:	3400e5d7 	.word	0x3400e5d7
3400e358:	3400e5fb 	.word	0x3400e5fb
3400e35c:	34012e30 	.word	0x34012e30

3400e360 <stdio_exit_handler>:
3400e360:	4a02      	ldr	r2, [pc, #8]	@ (3400e36c <stdio_exit_handler+0xc>)
3400e362:	4903      	ldr	r1, [pc, #12]	@ (3400e370 <stdio_exit_handler+0x10>)
3400e364:	4803      	ldr	r0, [pc, #12]	@ (3400e374 <stdio_exit_handler+0x14>)
3400e366:	f000 b87b 	b.w	3400e460 <_fwalk_sglue>
3400e36a:	bf00      	nop
3400e36c:	340123b0 	.word	0x340123b0
3400e370:	3400e27d 	.word	0x3400e27d
3400e374:	340123c0 	.word	0x340123c0

3400e378 <cleanup_stdio>:
3400e378:	6841      	ldr	r1, [r0, #4]
3400e37a:	4b0c      	ldr	r3, [pc, #48]	@ (3400e3ac <cleanup_stdio+0x34>)
3400e37c:	4299      	cmp	r1, r3
3400e37e:	b510      	push	{r4, lr}
3400e380:	4604      	mov	r4, r0
3400e382:	d001      	beq.n	3400e388 <cleanup_stdio+0x10>
3400e384:	f7ff ff7a 	bl	3400e27c <_fflush_r>
3400e388:	68a1      	ldr	r1, [r4, #8]
3400e38a:	4b09      	ldr	r3, [pc, #36]	@ (3400e3b0 <cleanup_stdio+0x38>)
3400e38c:	4299      	cmp	r1, r3
3400e38e:	d002      	beq.n	3400e396 <cleanup_stdio+0x1e>
3400e390:	4620      	mov	r0, r4
3400e392:	f7ff ff73 	bl	3400e27c <_fflush_r>
3400e396:	68e1      	ldr	r1, [r4, #12]
3400e398:	4b06      	ldr	r3, [pc, #24]	@ (3400e3b4 <cleanup_stdio+0x3c>)
3400e39a:	4299      	cmp	r1, r3
3400e39c:	d004      	beq.n	3400e3a8 <cleanup_stdio+0x30>
3400e39e:	4620      	mov	r0, r4
3400e3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e3a4:	f7ff bf6a 	b.w	3400e27c <_fflush_r>
3400e3a8:	bd10      	pop	{r4, pc}
3400e3aa:	bf00      	nop
3400e3ac:	34012e30 	.word	0x34012e30
3400e3b0:	34012e98 	.word	0x34012e98
3400e3b4:	34012f00 	.word	0x34012f00

3400e3b8 <global_stdio_init.part.0>:
3400e3b8:	b510      	push	{r4, lr}
3400e3ba:	4b0b      	ldr	r3, [pc, #44]	@ (3400e3e8 <global_stdio_init.part.0+0x30>)
3400e3bc:	2104      	movs	r1, #4
3400e3be:	4c0b      	ldr	r4, [pc, #44]	@ (3400e3ec <global_stdio_init.part.0+0x34>)
3400e3c0:	4a0b      	ldr	r2, [pc, #44]	@ (3400e3f0 <global_stdio_init.part.0+0x38>)
3400e3c2:	4620      	mov	r0, r4
3400e3c4:	601a      	str	r2, [r3, #0]
3400e3c6:	2200      	movs	r2, #0
3400e3c8:	f7ff ff94 	bl	3400e2f4 <std>
3400e3cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3400e3d0:	2201      	movs	r2, #1
3400e3d2:	2109      	movs	r1, #9
3400e3d4:	f7ff ff8e 	bl	3400e2f4 <std>
3400e3d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3400e3dc:	2202      	movs	r2, #2
3400e3de:	2112      	movs	r1, #18
3400e3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e3e4:	f7ff bf86 	b.w	3400e2f4 <std>
3400e3e8:	34012f68 	.word	0x34012f68
3400e3ec:	34012e30 	.word	0x34012e30
3400e3f0:	3400e361 	.word	0x3400e361

3400e3f4 <__sfp_lock_acquire>:
3400e3f4:	4801      	ldr	r0, [pc, #4]	@ (3400e3fc <__sfp_lock_acquire+0x8>)
3400e3f6:	f000 bc18 	b.w	3400ec2a <__retarget_lock_acquire_recursive>
3400e3fa:	bf00      	nop
3400e3fc:	34012f71 	.word	0x34012f71

3400e400 <__sfp_lock_release>:
3400e400:	4801      	ldr	r0, [pc, #4]	@ (3400e408 <__sfp_lock_release+0x8>)
3400e402:	f000 bc13 	b.w	3400ec2c <__retarget_lock_release_recursive>
3400e406:	bf00      	nop
3400e408:	34012f71 	.word	0x34012f71

3400e40c <__sinit>:
3400e40c:	b510      	push	{r4, lr}
3400e40e:	4604      	mov	r4, r0
3400e410:	f7ff fff0 	bl	3400e3f4 <__sfp_lock_acquire>
3400e414:	6a23      	ldr	r3, [r4, #32]
3400e416:	b11b      	cbz	r3, 3400e420 <__sinit+0x14>
3400e418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e41c:	f7ff bff0 	b.w	3400e400 <__sfp_lock_release>
3400e420:	4b04      	ldr	r3, [pc, #16]	@ (3400e434 <__sinit+0x28>)
3400e422:	6223      	str	r3, [r4, #32]
3400e424:	4b04      	ldr	r3, [pc, #16]	@ (3400e438 <__sinit+0x2c>)
3400e426:	681b      	ldr	r3, [r3, #0]
3400e428:	2b00      	cmp	r3, #0
3400e42a:	d1f5      	bne.n	3400e418 <__sinit+0xc>
3400e42c:	f7ff ffc4 	bl	3400e3b8 <global_stdio_init.part.0>
3400e430:	e7f2      	b.n	3400e418 <__sinit+0xc>
3400e432:	bf00      	nop
3400e434:	3400e379 	.word	0x3400e379
3400e438:	34012f68 	.word	0x34012f68

3400e43c <fiprintf>:
3400e43c:	b40e      	push	{r1, r2, r3}
3400e43e:	b503      	push	{r0, r1, lr}
3400e440:	ab03      	add	r3, sp, #12
3400e442:	4601      	mov	r1, r0
3400e444:	4805      	ldr	r0, [pc, #20]	@ (3400e45c <fiprintf+0x20>)
3400e446:	f853 2b04 	ldr.w	r2, [r3], #4
3400e44a:	6800      	ldr	r0, [r0, #0]
3400e44c:	9301      	str	r3, [sp, #4]
3400e44e:	f001 fdf3 	bl	34010038 <_vfiprintf_r>
3400e452:	b002      	add	sp, #8
3400e454:	f85d eb04 	ldr.w	lr, [sp], #4
3400e458:	b003      	add	sp, #12
3400e45a:	4770      	bx	lr
3400e45c:	340123bc 	.word	0x340123bc

3400e460 <_fwalk_sglue>:
3400e460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400e464:	4607      	mov	r7, r0
3400e466:	4688      	mov	r8, r1
3400e468:	4614      	mov	r4, r2
3400e46a:	2600      	movs	r6, #0
3400e46c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3400e470:	f1b9 0901 	subs.w	r9, r9, #1
3400e474:	d505      	bpl.n	3400e482 <_fwalk_sglue+0x22>
3400e476:	6824      	ldr	r4, [r4, #0]
3400e478:	2c00      	cmp	r4, #0
3400e47a:	d1f7      	bne.n	3400e46c <_fwalk_sglue+0xc>
3400e47c:	4630      	mov	r0, r6
3400e47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400e482:	89ab      	ldrh	r3, [r5, #12]
3400e484:	2b01      	cmp	r3, #1
3400e486:	d907      	bls.n	3400e498 <_fwalk_sglue+0x38>
3400e488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3400e48c:	3301      	adds	r3, #1
3400e48e:	d003      	beq.n	3400e498 <_fwalk_sglue+0x38>
3400e490:	4629      	mov	r1, r5
3400e492:	4638      	mov	r0, r7
3400e494:	47c0      	blx	r8
3400e496:	4306      	orrs	r6, r0
3400e498:	3568      	adds	r5, #104	@ 0x68
3400e49a:	e7e9      	b.n	3400e470 <_fwalk_sglue+0x10>

3400e49c <iprintf>:
3400e49c:	b40f      	push	{r0, r1, r2, r3}
3400e49e:	b507      	push	{r0, r1, r2, lr}
3400e4a0:	4906      	ldr	r1, [pc, #24]	@ (3400e4bc <iprintf+0x20>)
3400e4a2:	ab04      	add	r3, sp, #16
3400e4a4:	6808      	ldr	r0, [r1, #0]
3400e4a6:	f853 2b04 	ldr.w	r2, [r3], #4
3400e4aa:	6881      	ldr	r1, [r0, #8]
3400e4ac:	9301      	str	r3, [sp, #4]
3400e4ae:	f001 fdc3 	bl	34010038 <_vfiprintf_r>
3400e4b2:	b003      	add	sp, #12
3400e4b4:	f85d eb04 	ldr.w	lr, [sp], #4
3400e4b8:	b004      	add	sp, #16
3400e4ba:	4770      	bx	lr
3400e4bc:	340123bc 	.word	0x340123bc

3400e4c0 <_puts_r>:
3400e4c0:	6a03      	ldr	r3, [r0, #32]
3400e4c2:	b570      	push	{r4, r5, r6, lr}
3400e4c4:	4605      	mov	r5, r0
3400e4c6:	460e      	mov	r6, r1
3400e4c8:	6884      	ldr	r4, [r0, #8]
3400e4ca:	b90b      	cbnz	r3, 3400e4d0 <_puts_r+0x10>
3400e4cc:	f7ff ff9e 	bl	3400e40c <__sinit>
3400e4d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e4d2:	07db      	lsls	r3, r3, #31
3400e4d4:	d405      	bmi.n	3400e4e2 <_puts_r+0x22>
3400e4d6:	89a3      	ldrh	r3, [r4, #12]
3400e4d8:	0598      	lsls	r0, r3, #22
3400e4da:	d402      	bmi.n	3400e4e2 <_puts_r+0x22>
3400e4dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e4de:	f000 fba4 	bl	3400ec2a <__retarget_lock_acquire_recursive>
3400e4e2:	89a3      	ldrh	r3, [r4, #12]
3400e4e4:	0719      	lsls	r1, r3, #28
3400e4e6:	d502      	bpl.n	3400e4ee <_puts_r+0x2e>
3400e4e8:	6923      	ldr	r3, [r4, #16]
3400e4ea:	2b00      	cmp	r3, #0
3400e4ec:	d135      	bne.n	3400e55a <_puts_r+0x9a>
3400e4ee:	4621      	mov	r1, r4
3400e4f0:	4628      	mov	r0, r5
3400e4f2:	f000 f8c5 	bl	3400e680 <__swsetup_r>
3400e4f6:	b380      	cbz	r0, 3400e55a <_puts_r+0x9a>
3400e4f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3400e4fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e4fe:	07da      	lsls	r2, r3, #31
3400e500:	d405      	bmi.n	3400e50e <_puts_r+0x4e>
3400e502:	89a3      	ldrh	r3, [r4, #12]
3400e504:	059b      	lsls	r3, r3, #22
3400e506:	d402      	bmi.n	3400e50e <_puts_r+0x4e>
3400e508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e50a:	f000 fb8f 	bl	3400ec2c <__retarget_lock_release_recursive>
3400e50e:	4628      	mov	r0, r5
3400e510:	bd70      	pop	{r4, r5, r6, pc}
3400e512:	2b00      	cmp	r3, #0
3400e514:	da04      	bge.n	3400e520 <_puts_r+0x60>
3400e516:	69a2      	ldr	r2, [r4, #24]
3400e518:	429a      	cmp	r2, r3
3400e51a:	dc17      	bgt.n	3400e54c <_puts_r+0x8c>
3400e51c:	290a      	cmp	r1, #10
3400e51e:	d015      	beq.n	3400e54c <_puts_r+0x8c>
3400e520:	6823      	ldr	r3, [r4, #0]
3400e522:	1c5a      	adds	r2, r3, #1
3400e524:	6022      	str	r2, [r4, #0]
3400e526:	7019      	strb	r1, [r3, #0]
3400e528:	68a3      	ldr	r3, [r4, #8]
3400e52a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400e52e:	3b01      	subs	r3, #1
3400e530:	60a3      	str	r3, [r4, #8]
3400e532:	2900      	cmp	r1, #0
3400e534:	d1ed      	bne.n	3400e512 <_puts_r+0x52>
3400e536:	2b00      	cmp	r3, #0
3400e538:	da11      	bge.n	3400e55e <_puts_r+0x9e>
3400e53a:	4622      	mov	r2, r4
3400e53c:	210a      	movs	r1, #10
3400e53e:	4628      	mov	r0, r5
3400e540:	f000 f85f 	bl	3400e602 <__swbuf_r>
3400e544:	3001      	adds	r0, #1
3400e546:	d0d7      	beq.n	3400e4f8 <_puts_r+0x38>
3400e548:	250a      	movs	r5, #10
3400e54a:	e7d7      	b.n	3400e4fc <_puts_r+0x3c>
3400e54c:	4622      	mov	r2, r4
3400e54e:	4628      	mov	r0, r5
3400e550:	f000 f857 	bl	3400e602 <__swbuf_r>
3400e554:	3001      	adds	r0, #1
3400e556:	d1e7      	bne.n	3400e528 <_puts_r+0x68>
3400e558:	e7ce      	b.n	3400e4f8 <_puts_r+0x38>
3400e55a:	3e01      	subs	r6, #1
3400e55c:	e7e4      	b.n	3400e528 <_puts_r+0x68>
3400e55e:	6823      	ldr	r3, [r4, #0]
3400e560:	1c5a      	adds	r2, r3, #1
3400e562:	6022      	str	r2, [r4, #0]
3400e564:	220a      	movs	r2, #10
3400e566:	701a      	strb	r2, [r3, #0]
3400e568:	e7ee      	b.n	3400e548 <_puts_r+0x88>
	...

3400e56c <puts>:
3400e56c:	4b02      	ldr	r3, [pc, #8]	@ (3400e578 <puts+0xc>)
3400e56e:	4601      	mov	r1, r0
3400e570:	6818      	ldr	r0, [r3, #0]
3400e572:	f7ff bfa5 	b.w	3400e4c0 <_puts_r>
3400e576:	bf00      	nop
3400e578:	340123bc 	.word	0x340123bc

3400e57c <__sread>:
3400e57c:	b510      	push	{r4, lr}
3400e57e:	460c      	mov	r4, r1
3400e580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e584:	f000 faf2 	bl	3400eb6c <_read_r>
3400e588:	2800      	cmp	r0, #0
3400e58a:	bfab      	itete	ge
3400e58c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3400e58e:	89a3      	ldrhlt	r3, [r4, #12]
3400e590:	181b      	addge	r3, r3, r0
3400e592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3400e596:	bfac      	ite	ge
3400e598:	6563      	strge	r3, [r4, #84]	@ 0x54
3400e59a:	81a3      	strhlt	r3, [r4, #12]
3400e59c:	bd10      	pop	{r4, pc}

3400e59e <__swrite>:
3400e59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400e5a2:	461f      	mov	r7, r3
3400e5a4:	898b      	ldrh	r3, [r1, #12]
3400e5a6:	4605      	mov	r5, r0
3400e5a8:	460c      	mov	r4, r1
3400e5aa:	05db      	lsls	r3, r3, #23
3400e5ac:	4616      	mov	r6, r2
3400e5ae:	d505      	bpl.n	3400e5bc <__swrite+0x1e>
3400e5b0:	2302      	movs	r3, #2
3400e5b2:	2200      	movs	r2, #0
3400e5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e5b8:	f000 fac6 	bl	3400eb48 <_lseek_r>
3400e5bc:	89a3      	ldrh	r3, [r4, #12]
3400e5be:	4632      	mov	r2, r6
3400e5c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400e5c4:	4628      	mov	r0, r5
3400e5c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400e5ca:	81a3      	strh	r3, [r4, #12]
3400e5cc:	463b      	mov	r3, r7
3400e5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3400e5d2:	f000 baed 	b.w	3400ebb0 <_write_r>

3400e5d6 <__sseek>:
3400e5d6:	b510      	push	{r4, lr}
3400e5d8:	460c      	mov	r4, r1
3400e5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e5de:	f000 fab3 	bl	3400eb48 <_lseek_r>
3400e5e2:	1c43      	adds	r3, r0, #1
3400e5e4:	89a3      	ldrh	r3, [r4, #12]
3400e5e6:	bf15      	itete	ne
3400e5e8:	6560      	strne	r0, [r4, #84]	@ 0x54
3400e5ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3400e5ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3400e5f2:	81a3      	strheq	r3, [r4, #12]
3400e5f4:	bf18      	it	ne
3400e5f6:	81a3      	strhne	r3, [r4, #12]
3400e5f8:	bd10      	pop	{r4, pc}

3400e5fa <__sclose>:
3400e5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e5fe:	f000 ba93 	b.w	3400eb28 <_close_r>

3400e602 <__swbuf_r>:
3400e602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400e604:	460e      	mov	r6, r1
3400e606:	4614      	mov	r4, r2
3400e608:	4605      	mov	r5, r0
3400e60a:	b118      	cbz	r0, 3400e614 <__swbuf_r+0x12>
3400e60c:	6a03      	ldr	r3, [r0, #32]
3400e60e:	b90b      	cbnz	r3, 3400e614 <__swbuf_r+0x12>
3400e610:	f7ff fefc 	bl	3400e40c <__sinit>
3400e614:	69a3      	ldr	r3, [r4, #24]
3400e616:	60a3      	str	r3, [r4, #8]
3400e618:	89a3      	ldrh	r3, [r4, #12]
3400e61a:	071a      	lsls	r2, r3, #28
3400e61c:	d501      	bpl.n	3400e622 <__swbuf_r+0x20>
3400e61e:	6923      	ldr	r3, [r4, #16]
3400e620:	b943      	cbnz	r3, 3400e634 <__swbuf_r+0x32>
3400e622:	4621      	mov	r1, r4
3400e624:	4628      	mov	r0, r5
3400e626:	f000 f82b 	bl	3400e680 <__swsetup_r>
3400e62a:	b118      	cbz	r0, 3400e634 <__swbuf_r+0x32>
3400e62c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3400e630:	4638      	mov	r0, r7
3400e632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400e634:	6823      	ldr	r3, [r4, #0]
3400e636:	b2f6      	uxtb	r6, r6
3400e638:	6922      	ldr	r2, [r4, #16]
3400e63a:	4637      	mov	r7, r6
3400e63c:	1a98      	subs	r0, r3, r2
3400e63e:	6963      	ldr	r3, [r4, #20]
3400e640:	4283      	cmp	r3, r0
3400e642:	dc05      	bgt.n	3400e650 <__swbuf_r+0x4e>
3400e644:	4621      	mov	r1, r4
3400e646:	4628      	mov	r0, r5
3400e648:	f7ff fe18 	bl	3400e27c <_fflush_r>
3400e64c:	2800      	cmp	r0, #0
3400e64e:	d1ed      	bne.n	3400e62c <__swbuf_r+0x2a>
3400e650:	68a3      	ldr	r3, [r4, #8]
3400e652:	3b01      	subs	r3, #1
3400e654:	60a3      	str	r3, [r4, #8]
3400e656:	6823      	ldr	r3, [r4, #0]
3400e658:	1c5a      	adds	r2, r3, #1
3400e65a:	6022      	str	r2, [r4, #0]
3400e65c:	701e      	strb	r6, [r3, #0]
3400e65e:	1c43      	adds	r3, r0, #1
3400e660:	6962      	ldr	r2, [r4, #20]
3400e662:	429a      	cmp	r2, r3
3400e664:	d004      	beq.n	3400e670 <__swbuf_r+0x6e>
3400e666:	89a3      	ldrh	r3, [r4, #12]
3400e668:	07db      	lsls	r3, r3, #31
3400e66a:	d5e1      	bpl.n	3400e630 <__swbuf_r+0x2e>
3400e66c:	2e0a      	cmp	r6, #10
3400e66e:	d1df      	bne.n	3400e630 <__swbuf_r+0x2e>
3400e670:	4621      	mov	r1, r4
3400e672:	4628      	mov	r0, r5
3400e674:	f7ff fe02 	bl	3400e27c <_fflush_r>
3400e678:	2800      	cmp	r0, #0
3400e67a:	d0d9      	beq.n	3400e630 <__swbuf_r+0x2e>
3400e67c:	e7d6      	b.n	3400e62c <__swbuf_r+0x2a>
	...

3400e680 <__swsetup_r>:
3400e680:	b538      	push	{r3, r4, r5, lr}
3400e682:	4b29      	ldr	r3, [pc, #164]	@ (3400e728 <__swsetup_r+0xa8>)
3400e684:	4605      	mov	r5, r0
3400e686:	460c      	mov	r4, r1
3400e688:	6818      	ldr	r0, [r3, #0]
3400e68a:	b118      	cbz	r0, 3400e694 <__swsetup_r+0x14>
3400e68c:	6a03      	ldr	r3, [r0, #32]
3400e68e:	b90b      	cbnz	r3, 3400e694 <__swsetup_r+0x14>
3400e690:	f7ff febc 	bl	3400e40c <__sinit>
3400e694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e698:	0719      	lsls	r1, r3, #28
3400e69a:	d422      	bmi.n	3400e6e2 <__swsetup_r+0x62>
3400e69c:	06da      	lsls	r2, r3, #27
3400e69e:	d407      	bmi.n	3400e6b0 <__swsetup_r+0x30>
3400e6a0:	2209      	movs	r2, #9
3400e6a2:	602a      	str	r2, [r5, #0]
3400e6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e6a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e6ac:	81a3      	strh	r3, [r4, #12]
3400e6ae:	e033      	b.n	3400e718 <__swsetup_r+0x98>
3400e6b0:	0758      	lsls	r0, r3, #29
3400e6b2:	d512      	bpl.n	3400e6da <__swsetup_r+0x5a>
3400e6b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400e6b6:	b141      	cbz	r1, 3400e6ca <__swsetup_r+0x4a>
3400e6b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400e6bc:	4299      	cmp	r1, r3
3400e6be:	d002      	beq.n	3400e6c6 <__swsetup_r+0x46>
3400e6c0:	4628      	mov	r0, r5
3400e6c2:	f001 f8c3 	bl	3400f84c <_free_r>
3400e6c6:	2300      	movs	r3, #0
3400e6c8:	6363      	str	r3, [r4, #52]	@ 0x34
3400e6ca:	89a3      	ldrh	r3, [r4, #12]
3400e6cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3400e6d0:	81a3      	strh	r3, [r4, #12]
3400e6d2:	2300      	movs	r3, #0
3400e6d4:	6063      	str	r3, [r4, #4]
3400e6d6:	6923      	ldr	r3, [r4, #16]
3400e6d8:	6023      	str	r3, [r4, #0]
3400e6da:	89a3      	ldrh	r3, [r4, #12]
3400e6dc:	f043 0308 	orr.w	r3, r3, #8
3400e6e0:	81a3      	strh	r3, [r4, #12]
3400e6e2:	6923      	ldr	r3, [r4, #16]
3400e6e4:	b94b      	cbnz	r3, 3400e6fa <__swsetup_r+0x7a>
3400e6e6:	89a3      	ldrh	r3, [r4, #12]
3400e6e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3400e6ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400e6f0:	d003      	beq.n	3400e6fa <__swsetup_r+0x7a>
3400e6f2:	4621      	mov	r1, r4
3400e6f4:	4628      	mov	r0, r5
3400e6f6:	f001 fddc 	bl	340102b2 <__smakebuf_r>
3400e6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e6fe:	f013 0201 	ands.w	r2, r3, #1
3400e702:	d00a      	beq.n	3400e71a <__swsetup_r+0x9a>
3400e704:	2200      	movs	r2, #0
3400e706:	60a2      	str	r2, [r4, #8]
3400e708:	6962      	ldr	r2, [r4, #20]
3400e70a:	4252      	negs	r2, r2
3400e70c:	61a2      	str	r2, [r4, #24]
3400e70e:	6922      	ldr	r2, [r4, #16]
3400e710:	b942      	cbnz	r2, 3400e724 <__swsetup_r+0xa4>
3400e712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3400e716:	d1c5      	bne.n	3400e6a4 <__swsetup_r+0x24>
3400e718:	bd38      	pop	{r3, r4, r5, pc}
3400e71a:	0799      	lsls	r1, r3, #30
3400e71c:	bf58      	it	pl
3400e71e:	6962      	ldrpl	r2, [r4, #20]
3400e720:	60a2      	str	r2, [r4, #8]
3400e722:	e7f4      	b.n	3400e70e <__swsetup_r+0x8e>
3400e724:	2000      	movs	r0, #0
3400e726:	e7f7      	b.n	3400e718 <__swsetup_r+0x98>
3400e728:	340123bc 	.word	0x340123bc

3400e72c <memset>:
3400e72c:	4402      	add	r2, r0
3400e72e:	4603      	mov	r3, r0
3400e730:	4293      	cmp	r3, r2
3400e732:	d100      	bne.n	3400e736 <memset+0xa>
3400e734:	4770      	bx	lr
3400e736:	f803 1b01 	strb.w	r1, [r3], #1
3400e73a:	e7f9      	b.n	3400e730 <memset+0x4>

3400e73c <_strerror_r>:
3400e73c:	b510      	push	{r4, lr}
3400e73e:	4604      	mov	r4, r0
3400e740:	4608      	mov	r0, r1
3400e742:	4611      	mov	r1, r2
3400e744:	461a      	mov	r2, r3
3400e746:	288e      	cmp	r0, #142	@ 0x8e
3400e748:	f200 8130 	bhi.w	3400e9ac <_strerror_r+0x270>
3400e74c:	e8df f010 	tbh	[pc, r0, lsl #1]
3400e750:	0138008f 	.word	0x0138008f
3400e754:	00940092 	.word	0x00940092
3400e758:	00980096 	.word	0x00980096
3400e75c:	009c009a 	.word	0x009c009a
3400e760:	00a2009e 	.word	0x00a2009e
3400e764:	00a800a4 	.word	0x00a800a4
3400e768:	00ac00aa 	.word	0x00ac00aa
3400e76c:	012e00ae 	.word	0x012e00ae
3400e770:	00b200b0 	.word	0x00b200b0
3400e774:	00b600b4 	.word	0x00b600b4
3400e778:	00be00b8 	.word	0x00be00b8
3400e77c:	00c600c0 	.word	0x00c600c0
3400e780:	00ca00c8 	.word	0x00ca00c8
3400e784:	00ce00cc 	.word	0x00ce00cc
3400e788:	00d600d2 	.word	0x00d600d2
3400e78c:	00da00d8 	.word	0x00da00d8
3400e790:	00de00dc 	.word	0x00de00dc
3400e794:	00e200e0 	.word	0x00e200e0
3400e798:	012e00e4 	.word	0x012e00e4
3400e79c:	012e012e 	.word	0x012e012e
3400e7a0:	012e012e 	.word	0x012e012e
3400e7a4:	012e012e 	.word	0x012e012e
3400e7a8:	00e8012e 	.word	0x00e8012e
3400e7ac:	012e00ec 	.word	0x012e00ec
3400e7b0:	012e012e 	.word	0x012e012e
3400e7b4:	012e012e 	.word	0x012e012e
3400e7b8:	012e012e 	.word	0x012e012e
3400e7bc:	012e012e 	.word	0x012e012e
3400e7c0:	012e012e 	.word	0x012e012e
3400e7c4:	012e012e 	.word	0x012e012e
3400e7c8:	010800ee 	.word	0x010800ee
3400e7cc:	00f200f0 	.word	0x00f200f0
3400e7d0:	012e012e 	.word	0x012e012e
3400e7d4:	00f4012e 	.word	0x00f4012e
3400e7d8:	012e012e 	.word	0x012e012e
3400e7dc:	00f6012e 	.word	0x00f6012e
3400e7e0:	012e012e 	.word	0x012e012e
3400e7e4:	012e00fa 	.word	0x012e00fa
3400e7e8:	00fc012e 	.word	0x00fc012e
3400e7ec:	012e012e 	.word	0x012e012e
3400e7f0:	012e012e 	.word	0x012e012e
3400e7f4:	012e012e 	.word	0x012e012e
3400e7f8:	012e012e 	.word	0x012e012e
3400e7fc:	012e012e 	.word	0x012e012e
3400e800:	012e00fe 	.word	0x012e00fe
3400e804:	01020100 	.word	0x01020100
3400e808:	012e0104 	.word	0x012e0104
3400e80c:	0126012e 	.word	0x0126012e
3400e810:	012e012e 	.word	0x012e012e
3400e814:	012e012e 	.word	0x012e012e
3400e818:	012e012e 	.word	0x012e012e
3400e81c:	012e012e 	.word	0x012e012e
3400e820:	01060114 	.word	0x01060114
3400e824:	010c010a 	.word	0x010c010a
3400e828:	0110010e 	.word	0x0110010e
3400e82c:	0112012e 	.word	0x0112012e
3400e830:	011a0116 	.word	0x011a0116
3400e834:	00c200ea 	.word	0x00c200ea
3400e838:	00ba012c 	.word	0x00ba012c
3400e83c:	00bc00d0 	.word	0x00bc00d0
3400e840:	00a600a0 	.word	0x00a600a0
3400e844:	00f8012a 	.word	0x00f8012a
3400e848:	0118012e 	.word	0x0118012e
3400e84c:	011e00c4 	.word	0x011e00c4
3400e850:	012e011c 	.word	0x012e011c
3400e854:	012e012e 	.word	0x012e012e
3400e858:	012e012e 	.word	0x012e012e
3400e85c:	012e00d4 	.word	0x012e00d4
3400e860:	012e012e 	.word	0x012e012e
3400e864:	012800e6 	.word	0x012800e6
3400e868:	01220120 	.word	0x01220120
3400e86c:	0124      	.short	0x0124
3400e86e:	4b55      	ldr	r3, [pc, #340]	@ (3400e9c4 <_strerror_r+0x288>)
3400e870:	4618      	mov	r0, r3
3400e872:	bd10      	pop	{r4, pc}
3400e874:	4b54      	ldr	r3, [pc, #336]	@ (3400e9c8 <_strerror_r+0x28c>)
3400e876:	e7fb      	b.n	3400e870 <_strerror_r+0x134>
3400e878:	4b54      	ldr	r3, [pc, #336]	@ (3400e9cc <_strerror_r+0x290>)
3400e87a:	e7f9      	b.n	3400e870 <_strerror_r+0x134>
3400e87c:	4b54      	ldr	r3, [pc, #336]	@ (3400e9d0 <_strerror_r+0x294>)
3400e87e:	e7f7      	b.n	3400e870 <_strerror_r+0x134>
3400e880:	4b54      	ldr	r3, [pc, #336]	@ (3400e9d4 <_strerror_r+0x298>)
3400e882:	e7f5      	b.n	3400e870 <_strerror_r+0x134>
3400e884:	4b54      	ldr	r3, [pc, #336]	@ (3400e9d8 <_strerror_r+0x29c>)
3400e886:	e7f3      	b.n	3400e870 <_strerror_r+0x134>
3400e888:	4b54      	ldr	r3, [pc, #336]	@ (3400e9dc <_strerror_r+0x2a0>)
3400e88a:	e7f1      	b.n	3400e870 <_strerror_r+0x134>
3400e88c:	4b54      	ldr	r3, [pc, #336]	@ (3400e9e0 <_strerror_r+0x2a4>)
3400e88e:	e7ef      	b.n	3400e870 <_strerror_r+0x134>
3400e890:	4b54      	ldr	r3, [pc, #336]	@ (3400e9e4 <_strerror_r+0x2a8>)
3400e892:	e7ed      	b.n	3400e870 <_strerror_r+0x134>
3400e894:	4b54      	ldr	r3, [pc, #336]	@ (3400e9e8 <_strerror_r+0x2ac>)
3400e896:	e7eb      	b.n	3400e870 <_strerror_r+0x134>
3400e898:	4b54      	ldr	r3, [pc, #336]	@ (3400e9ec <_strerror_r+0x2b0>)
3400e89a:	e7e9      	b.n	3400e870 <_strerror_r+0x134>
3400e89c:	4b54      	ldr	r3, [pc, #336]	@ (3400e9f0 <_strerror_r+0x2b4>)
3400e89e:	e7e7      	b.n	3400e870 <_strerror_r+0x134>
3400e8a0:	4b54      	ldr	r3, [pc, #336]	@ (3400e9f4 <_strerror_r+0x2b8>)
3400e8a2:	e7e5      	b.n	3400e870 <_strerror_r+0x134>
3400e8a4:	4b54      	ldr	r3, [pc, #336]	@ (3400e9f8 <_strerror_r+0x2bc>)
3400e8a6:	e7e3      	b.n	3400e870 <_strerror_r+0x134>
3400e8a8:	4b54      	ldr	r3, [pc, #336]	@ (3400e9fc <_strerror_r+0x2c0>)
3400e8aa:	e7e1      	b.n	3400e870 <_strerror_r+0x134>
3400e8ac:	4b54      	ldr	r3, [pc, #336]	@ (3400ea00 <_strerror_r+0x2c4>)
3400e8ae:	e7df      	b.n	3400e870 <_strerror_r+0x134>
3400e8b0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea04 <_strerror_r+0x2c8>)
3400e8b2:	e7dd      	b.n	3400e870 <_strerror_r+0x134>
3400e8b4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea08 <_strerror_r+0x2cc>)
3400e8b6:	e7db      	b.n	3400e870 <_strerror_r+0x134>
3400e8b8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea0c <_strerror_r+0x2d0>)
3400e8ba:	e7d9      	b.n	3400e870 <_strerror_r+0x134>
3400e8bc:	4b54      	ldr	r3, [pc, #336]	@ (3400ea10 <_strerror_r+0x2d4>)
3400e8be:	e7d7      	b.n	3400e870 <_strerror_r+0x134>
3400e8c0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea14 <_strerror_r+0x2d8>)
3400e8c2:	e7d5      	b.n	3400e870 <_strerror_r+0x134>
3400e8c4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea18 <_strerror_r+0x2dc>)
3400e8c6:	e7d3      	b.n	3400e870 <_strerror_r+0x134>
3400e8c8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea1c <_strerror_r+0x2e0>)
3400e8ca:	e7d1      	b.n	3400e870 <_strerror_r+0x134>
3400e8cc:	4b54      	ldr	r3, [pc, #336]	@ (3400ea20 <_strerror_r+0x2e4>)
3400e8ce:	e7cf      	b.n	3400e870 <_strerror_r+0x134>
3400e8d0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea24 <_strerror_r+0x2e8>)
3400e8d2:	e7cd      	b.n	3400e870 <_strerror_r+0x134>
3400e8d4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea28 <_strerror_r+0x2ec>)
3400e8d6:	e7cb      	b.n	3400e870 <_strerror_r+0x134>
3400e8d8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea2c <_strerror_r+0x2f0>)
3400e8da:	e7c9      	b.n	3400e870 <_strerror_r+0x134>
3400e8dc:	4b54      	ldr	r3, [pc, #336]	@ (3400ea30 <_strerror_r+0x2f4>)
3400e8de:	e7c7      	b.n	3400e870 <_strerror_r+0x134>
3400e8e0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea34 <_strerror_r+0x2f8>)
3400e8e2:	e7c5      	b.n	3400e870 <_strerror_r+0x134>
3400e8e4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea38 <_strerror_r+0x2fc>)
3400e8e6:	e7c3      	b.n	3400e870 <_strerror_r+0x134>
3400e8e8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea3c <_strerror_r+0x300>)
3400e8ea:	e7c1      	b.n	3400e870 <_strerror_r+0x134>
3400e8ec:	4b54      	ldr	r3, [pc, #336]	@ (3400ea40 <_strerror_r+0x304>)
3400e8ee:	e7bf      	b.n	3400e870 <_strerror_r+0x134>
3400e8f0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea44 <_strerror_r+0x308>)
3400e8f2:	e7bd      	b.n	3400e870 <_strerror_r+0x134>
3400e8f4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea48 <_strerror_r+0x30c>)
3400e8f6:	e7bb      	b.n	3400e870 <_strerror_r+0x134>
3400e8f8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea4c <_strerror_r+0x310>)
3400e8fa:	e7b9      	b.n	3400e870 <_strerror_r+0x134>
3400e8fc:	4b54      	ldr	r3, [pc, #336]	@ (3400ea50 <_strerror_r+0x314>)
3400e8fe:	e7b7      	b.n	3400e870 <_strerror_r+0x134>
3400e900:	4b54      	ldr	r3, [pc, #336]	@ (3400ea54 <_strerror_r+0x318>)
3400e902:	e7b5      	b.n	3400e870 <_strerror_r+0x134>
3400e904:	4b54      	ldr	r3, [pc, #336]	@ (3400ea58 <_strerror_r+0x31c>)
3400e906:	e7b3      	b.n	3400e870 <_strerror_r+0x134>
3400e908:	4b54      	ldr	r3, [pc, #336]	@ (3400ea5c <_strerror_r+0x320>)
3400e90a:	e7b1      	b.n	3400e870 <_strerror_r+0x134>
3400e90c:	4b54      	ldr	r3, [pc, #336]	@ (3400ea60 <_strerror_r+0x324>)
3400e90e:	e7af      	b.n	3400e870 <_strerror_r+0x134>
3400e910:	4b54      	ldr	r3, [pc, #336]	@ (3400ea64 <_strerror_r+0x328>)
3400e912:	e7ad      	b.n	3400e870 <_strerror_r+0x134>
3400e914:	4b54      	ldr	r3, [pc, #336]	@ (3400ea68 <_strerror_r+0x32c>)
3400e916:	e7ab      	b.n	3400e870 <_strerror_r+0x134>
3400e918:	4b54      	ldr	r3, [pc, #336]	@ (3400ea6c <_strerror_r+0x330>)
3400e91a:	e7a9      	b.n	3400e870 <_strerror_r+0x134>
3400e91c:	4b54      	ldr	r3, [pc, #336]	@ (3400ea70 <_strerror_r+0x334>)
3400e91e:	e7a7      	b.n	3400e870 <_strerror_r+0x134>
3400e920:	4b54      	ldr	r3, [pc, #336]	@ (3400ea74 <_strerror_r+0x338>)
3400e922:	e7a5      	b.n	3400e870 <_strerror_r+0x134>
3400e924:	4b54      	ldr	r3, [pc, #336]	@ (3400ea78 <_strerror_r+0x33c>)
3400e926:	e7a3      	b.n	3400e870 <_strerror_r+0x134>
3400e928:	4b54      	ldr	r3, [pc, #336]	@ (3400ea7c <_strerror_r+0x340>)
3400e92a:	e7a1      	b.n	3400e870 <_strerror_r+0x134>
3400e92c:	4b54      	ldr	r3, [pc, #336]	@ (3400ea80 <_strerror_r+0x344>)
3400e92e:	e79f      	b.n	3400e870 <_strerror_r+0x134>
3400e930:	4b54      	ldr	r3, [pc, #336]	@ (3400ea84 <_strerror_r+0x348>)
3400e932:	e79d      	b.n	3400e870 <_strerror_r+0x134>
3400e934:	4b54      	ldr	r3, [pc, #336]	@ (3400ea88 <_strerror_r+0x34c>)
3400e936:	e79b      	b.n	3400e870 <_strerror_r+0x134>
3400e938:	4b54      	ldr	r3, [pc, #336]	@ (3400ea8c <_strerror_r+0x350>)
3400e93a:	e799      	b.n	3400e870 <_strerror_r+0x134>
3400e93c:	4b54      	ldr	r3, [pc, #336]	@ (3400ea90 <_strerror_r+0x354>)
3400e93e:	e797      	b.n	3400e870 <_strerror_r+0x134>
3400e940:	4b54      	ldr	r3, [pc, #336]	@ (3400ea94 <_strerror_r+0x358>)
3400e942:	e795      	b.n	3400e870 <_strerror_r+0x134>
3400e944:	4b54      	ldr	r3, [pc, #336]	@ (3400ea98 <_strerror_r+0x35c>)
3400e946:	e793      	b.n	3400e870 <_strerror_r+0x134>
3400e948:	4b54      	ldr	r3, [pc, #336]	@ (3400ea9c <_strerror_r+0x360>)
3400e94a:	e791      	b.n	3400e870 <_strerror_r+0x134>
3400e94c:	4b54      	ldr	r3, [pc, #336]	@ (3400eaa0 <_strerror_r+0x364>)
3400e94e:	e78f      	b.n	3400e870 <_strerror_r+0x134>
3400e950:	4b54      	ldr	r3, [pc, #336]	@ (3400eaa4 <_strerror_r+0x368>)
3400e952:	e78d      	b.n	3400e870 <_strerror_r+0x134>
3400e954:	4b54      	ldr	r3, [pc, #336]	@ (3400eaa8 <_strerror_r+0x36c>)
3400e956:	e78b      	b.n	3400e870 <_strerror_r+0x134>
3400e958:	4b54      	ldr	r3, [pc, #336]	@ (3400eaac <_strerror_r+0x370>)
3400e95a:	e789      	b.n	3400e870 <_strerror_r+0x134>
3400e95c:	4b54      	ldr	r3, [pc, #336]	@ (3400eab0 <_strerror_r+0x374>)
3400e95e:	e787      	b.n	3400e870 <_strerror_r+0x134>
3400e960:	4b54      	ldr	r3, [pc, #336]	@ (3400eab4 <_strerror_r+0x378>)
3400e962:	e785      	b.n	3400e870 <_strerror_r+0x134>
3400e964:	4b54      	ldr	r3, [pc, #336]	@ (3400eab8 <_strerror_r+0x37c>)
3400e966:	e783      	b.n	3400e870 <_strerror_r+0x134>
3400e968:	4b54      	ldr	r3, [pc, #336]	@ (3400eabc <_strerror_r+0x380>)
3400e96a:	e781      	b.n	3400e870 <_strerror_r+0x134>
3400e96c:	4b54      	ldr	r3, [pc, #336]	@ (3400eac0 <_strerror_r+0x384>)
3400e96e:	e77f      	b.n	3400e870 <_strerror_r+0x134>
3400e970:	4b54      	ldr	r3, [pc, #336]	@ (3400eac4 <_strerror_r+0x388>)
3400e972:	e77d      	b.n	3400e870 <_strerror_r+0x134>
3400e974:	4b54      	ldr	r3, [pc, #336]	@ (3400eac8 <_strerror_r+0x38c>)
3400e976:	e77b      	b.n	3400e870 <_strerror_r+0x134>
3400e978:	4b54      	ldr	r3, [pc, #336]	@ (3400eacc <_strerror_r+0x390>)
3400e97a:	e779      	b.n	3400e870 <_strerror_r+0x134>
3400e97c:	4b54      	ldr	r3, [pc, #336]	@ (3400ead0 <_strerror_r+0x394>)
3400e97e:	e777      	b.n	3400e870 <_strerror_r+0x134>
3400e980:	4b54      	ldr	r3, [pc, #336]	@ (3400ead4 <_strerror_r+0x398>)
3400e982:	e775      	b.n	3400e870 <_strerror_r+0x134>
3400e984:	4b54      	ldr	r3, [pc, #336]	@ (3400ead8 <_strerror_r+0x39c>)
3400e986:	e773      	b.n	3400e870 <_strerror_r+0x134>
3400e988:	4b54      	ldr	r3, [pc, #336]	@ (3400eadc <_strerror_r+0x3a0>)
3400e98a:	e771      	b.n	3400e870 <_strerror_r+0x134>
3400e98c:	4b54      	ldr	r3, [pc, #336]	@ (3400eae0 <_strerror_r+0x3a4>)
3400e98e:	e76f      	b.n	3400e870 <_strerror_r+0x134>
3400e990:	4b54      	ldr	r3, [pc, #336]	@ (3400eae4 <_strerror_r+0x3a8>)
3400e992:	e76d      	b.n	3400e870 <_strerror_r+0x134>
3400e994:	4b54      	ldr	r3, [pc, #336]	@ (3400eae8 <_strerror_r+0x3ac>)
3400e996:	e76b      	b.n	3400e870 <_strerror_r+0x134>
3400e998:	4b54      	ldr	r3, [pc, #336]	@ (3400eaec <_strerror_r+0x3b0>)
3400e99a:	e769      	b.n	3400e870 <_strerror_r+0x134>
3400e99c:	4b54      	ldr	r3, [pc, #336]	@ (3400eaf0 <_strerror_r+0x3b4>)
3400e99e:	e767      	b.n	3400e870 <_strerror_r+0x134>
3400e9a0:	4b54      	ldr	r3, [pc, #336]	@ (3400eaf4 <_strerror_r+0x3b8>)
3400e9a2:	e765      	b.n	3400e870 <_strerror_r+0x134>
3400e9a4:	4b54      	ldr	r3, [pc, #336]	@ (3400eaf8 <_strerror_r+0x3bc>)
3400e9a6:	e763      	b.n	3400e870 <_strerror_r+0x134>
3400e9a8:	4b54      	ldr	r3, [pc, #336]	@ (3400eafc <_strerror_r+0x3c0>)
3400e9aa:	e761      	b.n	3400e870 <_strerror_r+0x134>
3400e9ac:	2a00      	cmp	r2, #0
3400e9ae:	bf08      	it	eq
3400e9b0:	4622      	moveq	r2, r4
3400e9b2:	f000 f8b3 	bl	3400eb1c <_user_strerror>
3400e9b6:	4b52      	ldr	r3, [pc, #328]	@ (3400eb00 <_strerror_r+0x3c4>)
3400e9b8:	2800      	cmp	r0, #0
3400e9ba:	bf18      	it	ne
3400e9bc:	4603      	movne	r3, r0
3400e9be:	e757      	b.n	3400e870 <_strerror_r+0x134>
3400e9c0:	4b50      	ldr	r3, [pc, #320]	@ (3400eb04 <_strerror_r+0x3c8>)
3400e9c2:	e755      	b.n	3400e870 <_strerror_r+0x134>
3400e9c4:	3401172e 	.word	0x3401172e
3400e9c8:	34011740 	.word	0x34011740
3400e9cc:	3401175a 	.word	0x3401175a
3400e9d0:	3401176a 	.word	0x3401176a
3400e9d4:	34011782 	.word	0x34011782
3400e9d8:	3401178c 	.word	0x3401178c
3400e9dc:	340117a6 	.word	0x340117a6
3400e9e0:	340117b8 	.word	0x340117b8
3400e9e4:	340117ca 	.word	0x340117ca
3400e9e8:	340117e3 	.word	0x340117e3
3400e9ec:	340117f3 	.word	0x340117f3
3400e9f0:	340117ff 	.word	0x340117ff
3400e9f4:	3401181c 	.word	0x3401181c
3400e9f8:	3401182e 	.word	0x3401182e
3400e9fc:	3401183f 	.word	0x3401183f
3400ea00:	34011851 	.word	0x34011851
3400ea04:	3401185d 	.word	0x3401185d
3400ea08:	34011875 	.word	0x34011875
3400ea0c:	34011881 	.word	0x34011881
3400ea10:	34011893 	.word	0x34011893
3400ea14:	340118a2 	.word	0x340118a2
3400ea18:	340118b2 	.word	0x340118b2
3400ea1c:	340118bf 	.word	0x340118bf
3400ea20:	340118de 	.word	0x340118de
3400ea24:	340118ed 	.word	0x340118ed
3400ea28:	340118fe 	.word	0x340118fe
3400ea2c:	34011922 	.word	0x34011922
3400ea30:	34011940 	.word	0x34011940
3400ea34:	3401195e 	.word	0x3401195e
3400ea38:	3401197e 	.word	0x3401197e
3400ea3c:	34011995 	.word	0x34011995
3400ea40:	340119a4 	.word	0x340119a4
3400ea44:	340119b3 	.word	0x340119b3
3400ea48:	340119c7 	.word	0x340119c7
3400ea4c:	340119df 	.word	0x340119df
3400ea50:	340119ed 	.word	0x340119ed
3400ea54:	340119fa 	.word	0x340119fa
3400ea58:	34011a10 	.word	0x34011a10
3400ea5c:	34011a1f 	.word	0x34011a1f
3400ea60:	34011a2b 	.word	0x34011a2b
3400ea64:	34011a5a 	.word	0x34011a5a
3400ea68:	34011a6b 	.word	0x34011a6b
3400ea6c:	34011a86 	.word	0x34011a86
3400ea70:	34011a99 	.word	0x34011a99
3400ea74:	34011aaf 	.word	0x34011aaf
3400ea78:	34011ab8 	.word	0x34011ab8
3400ea7c:	34011acf 	.word	0x34011acf
3400ea80:	34011ad7 	.word	0x34011ad7
3400ea84:	34011ae4 	.word	0x34011ae4
3400ea88:	34011af9 	.word	0x34011af9
3400ea8c:	34011b0d 	.word	0x34011b0d
3400ea90:	34011b25 	.word	0x34011b25
3400ea94:	34011b34 	.word	0x34011b34
3400ea98:	34011b45 	.word	0x34011b45
3400ea9c:	34011b58 	.word	0x34011b58
3400eaa0:	34011b64 	.word	0x34011b64
3400eaa4:	34011b7d 	.word	0x34011b7d
3400eaa8:	34011b91 	.word	0x34011b91
3400eaac:	34011bac 	.word	0x34011bac
3400eab0:	34011bc4 	.word	0x34011bc4
3400eab4:	34011bde 	.word	0x34011bde
3400eab8:	34011be6 	.word	0x34011be6
3400eabc:	34011c16 	.word	0x34011c16
3400eac0:	34011c35 	.word	0x34011c35
3400eac4:	34011c54 	.word	0x34011c54
3400eac8:	34011c6b 	.word	0x34011c6b
3400eacc:	34011c7e 	.word	0x34011c7e
3400ead0:	34011c97 	.word	0x34011c97
3400ead4:	34011cae 	.word	0x34011cae
3400ead8:	34011cc4 	.word	0x34011cc4
3400eadc:	34011ce5 	.word	0x34011ce5
3400eae0:	34011cfd 	.word	0x34011cfd
3400eae4:	34011d19 	.word	0x34011d19
3400eae8:	34011d2c 	.word	0x34011d2c
3400eaec:	34011d42 	.word	0x34011d42
3400eaf0:	34011d56 	.word	0x34011d56
3400eaf4:	34011d78 	.word	0x34011d78
3400eaf8:	34011d9e 	.word	0x34011d9e
3400eafc:	34011daf 	.word	0x34011daf
3400eb00:	34010d81 	.word	0x34010d81
3400eb04:	34011736 	.word	0x34011736

3400eb08 <strerror>:
3400eb08:	4601      	mov	r1, r0
3400eb0a:	2300      	movs	r3, #0
3400eb0c:	4802      	ldr	r0, [pc, #8]	@ (3400eb18 <strerror+0x10>)
3400eb0e:	461a      	mov	r2, r3
3400eb10:	6800      	ldr	r0, [r0, #0]
3400eb12:	f7ff be13 	b.w	3400e73c <_strerror_r>
3400eb16:	bf00      	nop
3400eb18:	340123bc 	.word	0x340123bc

3400eb1c <_user_strerror>:
3400eb1c:	2000      	movs	r0, #0
3400eb1e:	4770      	bx	lr

3400eb20 <_localeconv_r>:
3400eb20:	4800      	ldr	r0, [pc, #0]	@ (3400eb24 <_localeconv_r+0x4>)
3400eb22:	4770      	bx	lr
3400eb24:	340124fc 	.word	0x340124fc

3400eb28 <_close_r>:
3400eb28:	b538      	push	{r3, r4, r5, lr}
3400eb2a:	2300      	movs	r3, #0
3400eb2c:	4d05      	ldr	r5, [pc, #20]	@ (3400eb44 <_close_r+0x1c>)
3400eb2e:	4604      	mov	r4, r0
3400eb30:	4608      	mov	r0, r1
3400eb32:	602b      	str	r3, [r5, #0]
3400eb34:	f7f2 fcb1 	bl	3400149a <_close>
3400eb38:	1c43      	adds	r3, r0, #1
3400eb3a:	d102      	bne.n	3400eb42 <_close_r+0x1a>
3400eb3c:	682b      	ldr	r3, [r5, #0]
3400eb3e:	b103      	cbz	r3, 3400eb42 <_close_r+0x1a>
3400eb40:	6023      	str	r3, [r4, #0]
3400eb42:	bd38      	pop	{r3, r4, r5, pc}
3400eb44:	34012f6c 	.word	0x34012f6c

3400eb48 <_lseek_r>:
3400eb48:	b538      	push	{r3, r4, r5, lr}
3400eb4a:	4604      	mov	r4, r0
3400eb4c:	4d06      	ldr	r5, [pc, #24]	@ (3400eb68 <_lseek_r+0x20>)
3400eb4e:	4608      	mov	r0, r1
3400eb50:	4611      	mov	r1, r2
3400eb52:	2200      	movs	r2, #0
3400eb54:	602a      	str	r2, [r5, #0]
3400eb56:	461a      	mov	r2, r3
3400eb58:	f7f2 fca9 	bl	340014ae <_lseek>
3400eb5c:	1c43      	adds	r3, r0, #1
3400eb5e:	d102      	bne.n	3400eb66 <_lseek_r+0x1e>
3400eb60:	682b      	ldr	r3, [r5, #0]
3400eb62:	b103      	cbz	r3, 3400eb66 <_lseek_r+0x1e>
3400eb64:	6023      	str	r3, [r4, #0]
3400eb66:	bd38      	pop	{r3, r4, r5, pc}
3400eb68:	34012f6c 	.word	0x34012f6c

3400eb6c <_read_r>:
3400eb6c:	b538      	push	{r3, r4, r5, lr}
3400eb6e:	4604      	mov	r4, r0
3400eb70:	4d06      	ldr	r5, [pc, #24]	@ (3400eb8c <_read_r+0x20>)
3400eb72:	4608      	mov	r0, r1
3400eb74:	4611      	mov	r1, r2
3400eb76:	2200      	movs	r2, #0
3400eb78:	602a      	str	r2, [r5, #0]
3400eb7a:	461a      	mov	r2, r3
3400eb7c:	f7f2 fc7f 	bl	3400147e <_read>
3400eb80:	1c43      	adds	r3, r0, #1
3400eb82:	d102      	bne.n	3400eb8a <_read_r+0x1e>
3400eb84:	682b      	ldr	r3, [r5, #0]
3400eb86:	b103      	cbz	r3, 3400eb8a <_read_r+0x1e>
3400eb88:	6023      	str	r3, [r4, #0]
3400eb8a:	bd38      	pop	{r3, r4, r5, pc}
3400eb8c:	34012f6c 	.word	0x34012f6c

3400eb90 <_sbrk_r>:
3400eb90:	b538      	push	{r3, r4, r5, lr}
3400eb92:	2300      	movs	r3, #0
3400eb94:	4d05      	ldr	r5, [pc, #20]	@ (3400ebac <_sbrk_r+0x1c>)
3400eb96:	4604      	mov	r4, r0
3400eb98:	4608      	mov	r0, r1
3400eb9a:	602b      	str	r3, [r5, #0]
3400eb9c:	f001 fc60 	bl	34010460 <_sbrk>
3400eba0:	1c43      	adds	r3, r0, #1
3400eba2:	d102      	bne.n	3400ebaa <_sbrk_r+0x1a>
3400eba4:	682b      	ldr	r3, [r5, #0]
3400eba6:	b103      	cbz	r3, 3400ebaa <_sbrk_r+0x1a>
3400eba8:	6023      	str	r3, [r4, #0]
3400ebaa:	bd38      	pop	{r3, r4, r5, pc}
3400ebac:	34012f6c 	.word	0x34012f6c

3400ebb0 <_write_r>:
3400ebb0:	b538      	push	{r3, r4, r5, lr}
3400ebb2:	4604      	mov	r4, r0
3400ebb4:	4d06      	ldr	r5, [pc, #24]	@ (3400ebd0 <_write_r+0x20>)
3400ebb6:	4608      	mov	r0, r1
3400ebb8:	4611      	mov	r1, r2
3400ebba:	2200      	movs	r2, #0
3400ebbc:	602a      	str	r2, [r5, #0]
3400ebbe:	461a      	mov	r2, r3
3400ebc0:	f7f2 fbcc 	bl	3400135c <_write>
3400ebc4:	1c43      	adds	r3, r0, #1
3400ebc6:	d102      	bne.n	3400ebce <_write_r+0x1e>
3400ebc8:	682b      	ldr	r3, [r5, #0]
3400ebca:	b103      	cbz	r3, 3400ebce <_write_r+0x1e>
3400ebcc:	6023      	str	r3, [r4, #0]
3400ebce:	bd38      	pop	{r3, r4, r5, pc}
3400ebd0:	34012f6c 	.word	0x34012f6c

3400ebd4 <__errno>:
3400ebd4:	4b01      	ldr	r3, [pc, #4]	@ (3400ebdc <__errno+0x8>)
3400ebd6:	6818      	ldr	r0, [r3, #0]
3400ebd8:	4770      	bx	lr
3400ebda:	bf00      	nop
3400ebdc:	340123bc 	.word	0x340123bc

3400ebe0 <__libc_init_array>:
3400ebe0:	b570      	push	{r4, r5, r6, lr}
3400ebe2:	4d0d      	ldr	r5, [pc, #52]	@ (3400ec18 <__libc_init_array+0x38>)
3400ebe4:	2600      	movs	r6, #0
3400ebe6:	4c0d      	ldr	r4, [pc, #52]	@ (3400ec1c <__libc_init_array+0x3c>)
3400ebe8:	1b64      	subs	r4, r4, r5
3400ebea:	10a4      	asrs	r4, r4, #2
3400ebec:	42a6      	cmp	r6, r4
3400ebee:	d109      	bne.n	3400ec04 <__libc_init_array+0x24>
3400ebf0:	4d0b      	ldr	r5, [pc, #44]	@ (3400ec20 <__libc_init_array+0x40>)
3400ebf2:	2600      	movs	r6, #0
3400ebf4:	4c0b      	ldr	r4, [pc, #44]	@ (3400ec24 <__libc_init_array+0x44>)
3400ebf6:	f001 fc41 	bl	3401047c <_init>
3400ebfa:	1b64      	subs	r4, r4, r5
3400ebfc:	10a4      	asrs	r4, r4, #2
3400ebfe:	42a6      	cmp	r6, r4
3400ec00:	d105      	bne.n	3400ec0e <__libc_init_array+0x2e>
3400ec02:	bd70      	pop	{r4, r5, r6, pc}
3400ec04:	f855 3b04 	ldr.w	r3, [r5], #4
3400ec08:	3601      	adds	r6, #1
3400ec0a:	4798      	blx	r3
3400ec0c:	e7ee      	b.n	3400ebec <__libc_init_array+0xc>
3400ec0e:	f855 3b04 	ldr.w	r3, [r5], #4
3400ec12:	3601      	adds	r6, #1
3400ec14:	4798      	blx	r3
3400ec16:	e7f2      	b.n	3400ebfe <__libc_init_array+0x1e>
3400ec18:	34012354 	.word	0x34012354
3400ec1c:	34012354 	.word	0x34012354
3400ec20:	34012354 	.word	0x34012354
3400ec24:	34012358 	.word	0x34012358

3400ec28 <__retarget_lock_init_recursive>:
3400ec28:	4770      	bx	lr

3400ec2a <__retarget_lock_acquire_recursive>:
3400ec2a:	4770      	bx	lr

3400ec2c <__retarget_lock_release_recursive>:
3400ec2c:	4770      	bx	lr

3400ec2e <memchr>:
3400ec2e:	b2c9      	uxtb	r1, r1
3400ec30:	4603      	mov	r3, r0
3400ec32:	4402      	add	r2, r0
3400ec34:	b510      	push	{r4, lr}
3400ec36:	4293      	cmp	r3, r2
3400ec38:	4618      	mov	r0, r3
3400ec3a:	d101      	bne.n	3400ec40 <memchr+0x12>
3400ec3c:	2000      	movs	r0, #0
3400ec3e:	e003      	b.n	3400ec48 <memchr+0x1a>
3400ec40:	7804      	ldrb	r4, [r0, #0]
3400ec42:	3301      	adds	r3, #1
3400ec44:	428c      	cmp	r4, r1
3400ec46:	d1f6      	bne.n	3400ec36 <memchr+0x8>
3400ec48:	bd10      	pop	{r4, pc}

3400ec4a <memcpy>:
3400ec4a:	440a      	add	r2, r1
3400ec4c:	1e43      	subs	r3, r0, #1
3400ec4e:	4291      	cmp	r1, r2
3400ec50:	d100      	bne.n	3400ec54 <memcpy+0xa>
3400ec52:	4770      	bx	lr
3400ec54:	b510      	push	{r4, lr}
3400ec56:	f811 4b01 	ldrb.w	r4, [r1], #1
3400ec5a:	4291      	cmp	r1, r2
3400ec5c:	f803 4f01 	strb.w	r4, [r3, #1]!
3400ec60:	d1f9      	bne.n	3400ec56 <memcpy+0xc>
3400ec62:	bd10      	pop	{r4, pc}

3400ec64 <abort>:
3400ec64:	2006      	movs	r0, #6
3400ec66:	b508      	push	{r3, lr}
3400ec68:	f001 fb88 	bl	3401037c <raise>
3400ec6c:	2001      	movs	r0, #1
3400ec6e:	f7f2 fc00 	bl	34001472 <_exit>

3400ec72 <quorem>:
3400ec72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400ec76:	6903      	ldr	r3, [r0, #16]
3400ec78:	4607      	mov	r7, r0
3400ec7a:	690c      	ldr	r4, [r1, #16]
3400ec7c:	42a3      	cmp	r3, r4
3400ec7e:	f2c0 8083 	blt.w	3400ed88 <quorem+0x116>
3400ec82:	3c01      	subs	r4, #1
3400ec84:	f100 0514 	add.w	r5, r0, #20
3400ec88:	f101 0814 	add.w	r8, r1, #20
3400ec8c:	00a3      	lsls	r3, r4, #2
3400ec8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400ec92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3400ec96:	9300      	str	r3, [sp, #0]
3400ec98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400ec9c:	9301      	str	r3, [sp, #4]
3400ec9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3400eca2:	3301      	adds	r3, #1
3400eca4:	429a      	cmp	r2, r3
3400eca6:	fbb2 f6f3 	udiv	r6, r2, r3
3400ecaa:	d331      	bcc.n	3400ed10 <quorem+0x9e>
3400ecac:	f04f 0a00 	mov.w	sl, #0
3400ecb0:	46c4      	mov	ip, r8
3400ecb2:	46ae      	mov	lr, r5
3400ecb4:	46d3      	mov	fp, sl
3400ecb6:	f85c 3b04 	ldr.w	r3, [ip], #4
3400ecba:	b298      	uxth	r0, r3
3400ecbc:	45e1      	cmp	r9, ip
3400ecbe:	ea4f 4313 	mov.w	r3, r3, lsr #16
3400ecc2:	fb06 a000 	mla	r0, r6, r0, sl
3400ecc6:	ea4f 4210 	mov.w	r2, r0, lsr #16
3400ecca:	b280      	uxth	r0, r0
3400eccc:	fb06 2303 	mla	r3, r6, r3, r2
3400ecd0:	f8de 2000 	ldr.w	r2, [lr]
3400ecd4:	b292      	uxth	r2, r2
3400ecd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400ecda:	eba2 0200 	sub.w	r2, r2, r0
3400ecde:	b29b      	uxth	r3, r3
3400ece0:	f8de 0000 	ldr.w	r0, [lr]
3400ece4:	445a      	add	r2, fp
3400ece6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3400ecea:	b292      	uxth	r2, r2
3400ecec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3400ecf0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3400ecf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
3400ecf8:	f84e 2b04 	str.w	r2, [lr], #4
3400ecfc:	d2db      	bcs.n	3400ecb6 <quorem+0x44>
3400ecfe:	9b00      	ldr	r3, [sp, #0]
3400ed00:	58eb      	ldr	r3, [r5, r3]
3400ed02:	b92b      	cbnz	r3, 3400ed10 <quorem+0x9e>
3400ed04:	9b01      	ldr	r3, [sp, #4]
3400ed06:	3b04      	subs	r3, #4
3400ed08:	429d      	cmp	r5, r3
3400ed0a:	461a      	mov	r2, r3
3400ed0c:	d330      	bcc.n	3400ed70 <quorem+0xfe>
3400ed0e:	613c      	str	r4, [r7, #16]
3400ed10:	4638      	mov	r0, r7
3400ed12:	f001 f85b 	bl	3400fdcc <__mcmp>
3400ed16:	2800      	cmp	r0, #0
3400ed18:	db26      	blt.n	3400ed68 <quorem+0xf6>
3400ed1a:	4629      	mov	r1, r5
3400ed1c:	2000      	movs	r0, #0
3400ed1e:	f858 2b04 	ldr.w	r2, [r8], #4
3400ed22:	f8d1 c000 	ldr.w	ip, [r1]
3400ed26:	fa1f fe82 	uxth.w	lr, r2
3400ed2a:	45c1      	cmp	r9, r8
3400ed2c:	fa1f f38c 	uxth.w	r3, ip
3400ed30:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400ed34:	eba3 030e 	sub.w	r3, r3, lr
3400ed38:	4403      	add	r3, r0
3400ed3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3400ed3e:	b29b      	uxth	r3, r3
3400ed40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3400ed44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400ed48:	ea4f 4022 	mov.w	r0, r2, asr #16
3400ed4c:	f841 3b04 	str.w	r3, [r1], #4
3400ed50:	d2e5      	bcs.n	3400ed1e <quorem+0xac>
3400ed52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400ed56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400ed5a:	b922      	cbnz	r2, 3400ed66 <quorem+0xf4>
3400ed5c:	3b04      	subs	r3, #4
3400ed5e:	429d      	cmp	r5, r3
3400ed60:	461a      	mov	r2, r3
3400ed62:	d30b      	bcc.n	3400ed7c <quorem+0x10a>
3400ed64:	613c      	str	r4, [r7, #16]
3400ed66:	3601      	adds	r6, #1
3400ed68:	4630      	mov	r0, r6
3400ed6a:	b003      	add	sp, #12
3400ed6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400ed70:	6812      	ldr	r2, [r2, #0]
3400ed72:	3b04      	subs	r3, #4
3400ed74:	2a00      	cmp	r2, #0
3400ed76:	d1ca      	bne.n	3400ed0e <quorem+0x9c>
3400ed78:	3c01      	subs	r4, #1
3400ed7a:	e7c5      	b.n	3400ed08 <quorem+0x96>
3400ed7c:	6812      	ldr	r2, [r2, #0]
3400ed7e:	3b04      	subs	r3, #4
3400ed80:	2a00      	cmp	r2, #0
3400ed82:	d1ef      	bne.n	3400ed64 <quorem+0xf2>
3400ed84:	3c01      	subs	r4, #1
3400ed86:	e7ea      	b.n	3400ed5e <quorem+0xec>
3400ed88:	2000      	movs	r0, #0
3400ed8a:	e7ee      	b.n	3400ed6a <quorem+0xf8>
3400ed8c:	0000      	movs	r0, r0
	...

3400ed90 <_dtoa_r>:
3400ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400ed94:	69c7      	ldr	r7, [r0, #28]
3400ed96:	4681      	mov	r9, r0
3400ed98:	ed2d 8b02 	vpush	{d8}
3400ed9c:	b091      	sub	sp, #68	@ 0x44
3400ed9e:	ec55 4b10 	vmov	r4, r5, d0
3400eda2:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3400eda4:	9107      	str	r1, [sp, #28]
3400eda6:	9209      	str	r2, [sp, #36]	@ 0x24
3400eda8:	930d      	str	r3, [sp, #52]	@ 0x34
3400edaa:	ed8d 0b02 	vstr	d0, [sp, #8]
3400edae:	b97f      	cbnz	r7, 3400edd0 <_dtoa_r+0x40>
3400edb0:	2010      	movs	r0, #16
3400edb2:	f7fe fcef 	bl	3400d794 <malloc>
3400edb6:	4602      	mov	r2, r0
3400edb8:	f8c9 001c 	str.w	r0, [r9, #28]
3400edbc:	b920      	cbnz	r0, 3400edc8 <_dtoa_r+0x38>
3400edbe:	4ba0      	ldr	r3, [pc, #640]	@ (3400f040 <_dtoa_r+0x2b0>)
3400edc0:	21ef      	movs	r1, #239	@ 0xef
3400edc2:	48a0      	ldr	r0, [pc, #640]	@ (3400f044 <_dtoa_r+0x2b4>)
3400edc4:	f7fe fcc8 	bl	3400d758 <__assert_func>
3400edc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
3400edcc:	6007      	str	r7, [r0, #0]
3400edce:	60c7      	str	r7, [r0, #12]
3400edd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400edd4:	6819      	ldr	r1, [r3, #0]
3400edd6:	b159      	cbz	r1, 3400edf0 <_dtoa_r+0x60>
3400edd8:	685a      	ldr	r2, [r3, #4]
3400edda:	2301      	movs	r3, #1
3400eddc:	4648      	mov	r0, r9
3400edde:	4093      	lsls	r3, r2
3400ede0:	604a      	str	r2, [r1, #4]
3400ede2:	608b      	str	r3, [r1, #8]
3400ede4:	f000 fdbc 	bl	3400f960 <_Bfree>
3400ede8:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400edec:	2200      	movs	r2, #0
3400edee:	601a      	str	r2, [r3, #0]
3400edf0:	1e2b      	subs	r3, r5, #0
3400edf2:	bfb7      	itett	lt
3400edf4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3400edf8:	2300      	movge	r3, #0
3400edfa:	2201      	movlt	r2, #1
3400edfc:	9303      	strlt	r3, [sp, #12]
3400edfe:	bfac      	ite	ge
3400ee00:	6033      	strge	r3, [r6, #0]
3400ee02:	6032      	strlt	r2, [r6, #0]
3400ee04:	4b90      	ldr	r3, [pc, #576]	@ (3400f048 <_dtoa_r+0x2b8>)
3400ee06:	9e03      	ldr	r6, [sp, #12]
3400ee08:	43b3      	bics	r3, r6
3400ee0a:	d110      	bne.n	3400ee2e <_dtoa_r+0x9e>
3400ee0c:	f242 730f 	movw	r3, #9999	@ 0x270f
3400ee10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400ee12:	6013      	str	r3, [r2, #0]
3400ee14:	f3c6 0313 	ubfx	r3, r6, #0, #20
3400ee18:	4323      	orrs	r3, r4
3400ee1a:	f000 84e6 	beq.w	3400f7ea <_dtoa_r+0xa5a>
3400ee1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400ee20:	4f8a      	ldr	r7, [pc, #552]	@ (3400f04c <_dtoa_r+0x2bc>)
3400ee22:	2b00      	cmp	r3, #0
3400ee24:	f000 84e8 	beq.w	3400f7f8 <_dtoa_r+0xa68>
3400ee28:	1cfb      	adds	r3, r7, #3
3400ee2a:	f000 bce3 	b.w	3400f7f4 <_dtoa_r+0xa64>
3400ee2e:	ed9d 8b02 	vldr	d8, [sp, #8]
3400ee32:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400ee36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400ee3a:	d10a      	bne.n	3400ee52 <_dtoa_r+0xc2>
3400ee3c:	2301      	movs	r3, #1
3400ee3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400ee40:	6013      	str	r3, [r2, #0]
3400ee42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400ee44:	b113      	cbz	r3, 3400ee4c <_dtoa_r+0xbc>
3400ee46:	4b82      	ldr	r3, [pc, #520]	@ (3400f050 <_dtoa_r+0x2c0>)
3400ee48:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400ee4a:	6013      	str	r3, [r2, #0]
3400ee4c:	4f81      	ldr	r7, [pc, #516]	@ (3400f054 <_dtoa_r+0x2c4>)
3400ee4e:	f000 bcd3 	b.w	3400f7f8 <_dtoa_r+0xa68>
3400ee52:	aa0e      	add	r2, sp, #56	@ 0x38
3400ee54:	eeb0 0b48 	vmov.f64	d0, d8
3400ee58:	a90f      	add	r1, sp, #60	@ 0x3c
3400ee5a:	4648      	mov	r0, r9
3400ee5c:	f001 f86a 	bl	3400ff34 <__d2b>
3400ee60:	f3c6 530a 	ubfx	r3, r6, #20, #11
3400ee64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400ee66:	9001      	str	r0, [sp, #4]
3400ee68:	2b00      	cmp	r3, #0
3400ee6a:	d045      	beq.n	3400eef8 <_dtoa_r+0x168>
3400ee6c:	ee18 1a90 	vmov	r1, s17
3400ee70:	eeb0 7b48 	vmov.f64	d7, d8
3400ee74:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3400ee78:	2500      	movs	r5, #0
3400ee7a:	f3c1 0113 	ubfx	r1, r1, #0, #20
3400ee7e:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3400ee82:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3400ee86:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3400ee8a:	ee07 1a90 	vmov	s15, r1
3400ee8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3400f028 <_dtoa_r+0x298>
3400ee92:	ee37 7b46 	vsub.f64	d7, d7, d6
3400ee96:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3400f030 <_dtoa_r+0x2a0>
3400ee9a:	eea7 6b05 	vfma.f64	d6, d7, d5
3400ee9e:	ee07 3a90 	vmov	s15, r3
3400eea2:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3400eea6:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3400f038 <_dtoa_r+0x2a8>
3400eeaa:	eeb0 7b46 	vmov.f64	d7, d6
3400eeae:	eea4 7b05 	vfma.f64	d7, d4, d5
3400eeb2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3400eeb6:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3400eeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400eebe:	ee16 8a90 	vmov	r8, s13
3400eec2:	d508      	bpl.n	3400eed6 <_dtoa_r+0x146>
3400eec4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3400eec8:	eeb4 6b47 	vcmp.f64	d6, d7
3400eecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400eed0:	bf18      	it	ne
3400eed2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3400eed6:	f1b8 0f16 	cmp.w	r8, #22
3400eeda:	d82d      	bhi.n	3400ef38 <_dtoa_r+0x1a8>
3400eedc:	495e      	ldr	r1, [pc, #376]	@ (3400f058 <_dtoa_r+0x2c8>)
3400eede:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3400eee2:	ed91 7b00 	vldr	d7, [r1]
3400eee6:	eeb4 8bc7 	vcmpe.f64	d8, d7
3400eeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400eeee:	d501      	bpl.n	3400eef4 <_dtoa_r+0x164>
3400eef0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400eef4:	2100      	movs	r1, #0
3400eef6:	e020      	b.n	3400ef3a <_dtoa_r+0x1aa>
3400eef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3400eefa:	2501      	movs	r5, #1
3400eefc:	4413      	add	r3, r2
3400eefe:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3400ef02:	2920      	cmp	r1, #32
3400ef04:	bfc9      	itett	gt
3400ef06:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3400ef0a:	f1c1 0120 	rsble	r1, r1, #32
3400ef0e:	408e      	lslgt	r6, r1
3400ef10:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3400ef14:	bfd8      	it	le
3400ef16:	fa04 f101 	lslle.w	r1, r4, r1
3400ef1a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3400ef1e:	bfc4      	itt	gt
3400ef20:	fa24 f101 	lsrgt.w	r1, r4, r1
3400ef24:	4331      	orrgt	r1, r6
3400ef26:	ee07 1a90 	vmov	s15, r1
3400ef2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3400ef2e:	ee17 1a90 	vmov	r1, s15
3400ef32:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3400ef36:	e7a6      	b.n	3400ee86 <_dtoa_r+0xf6>
3400ef38:	2101      	movs	r1, #1
3400ef3a:	1ad2      	subs	r2, r2, r3
3400ef3c:	910c      	str	r1, [sp, #48]	@ 0x30
3400ef3e:	1e53      	subs	r3, r2, #1
3400ef40:	9306      	str	r3, [sp, #24]
3400ef42:	bf49      	itett	mi
3400ef44:	f1c2 0301 	rsbmi	r3, r2, #1
3400ef48:	2300      	movpl	r3, #0
3400ef4a:	9304      	strmi	r3, [sp, #16]
3400ef4c:	2300      	movmi	r3, #0
3400ef4e:	bf54      	ite	pl
3400ef50:	9304      	strpl	r3, [sp, #16]
3400ef52:	9306      	strmi	r3, [sp, #24]
3400ef54:	f1b8 0f00 	cmp.w	r8, #0
3400ef58:	db16      	blt.n	3400ef88 <_dtoa_r+0x1f8>
3400ef5a:	9b06      	ldr	r3, [sp, #24]
3400ef5c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3400ef60:	4443      	add	r3, r8
3400ef62:	9306      	str	r3, [sp, #24]
3400ef64:	2300      	movs	r3, #0
3400ef66:	9a07      	ldr	r2, [sp, #28]
3400ef68:	2a09      	cmp	r2, #9
3400ef6a:	d843      	bhi.n	3400eff4 <_dtoa_r+0x264>
3400ef6c:	2a05      	cmp	r2, #5
3400ef6e:	bfc5      	ittet	gt
3400ef70:	3a04      	subgt	r2, #4
3400ef72:	2400      	movgt	r4, #0
3400ef74:	2401      	movle	r4, #1
3400ef76:	9207      	strgt	r2, [sp, #28]
3400ef78:	9a07      	ldr	r2, [sp, #28]
3400ef7a:	3a02      	subs	r2, #2
3400ef7c:	2a03      	cmp	r2, #3
3400ef7e:	d844      	bhi.n	3400f00a <_dtoa_r+0x27a>
3400ef80:	e8df f002 	tbb	[pc, r2]
3400ef84:	0b173634 	.word	0x0b173634
3400ef88:	9b04      	ldr	r3, [sp, #16]
3400ef8a:	2200      	movs	r2, #0
3400ef8c:	eba3 0308 	sub.w	r3, r3, r8
3400ef90:	920a      	str	r2, [sp, #40]	@ 0x28
3400ef92:	9304      	str	r3, [sp, #16]
3400ef94:	f1c8 0300 	rsb	r3, r8, #0
3400ef98:	e7e5      	b.n	3400ef66 <_dtoa_r+0x1d6>
3400ef9a:	2201      	movs	r2, #1
3400ef9c:	9208      	str	r2, [sp, #32]
3400ef9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400efa0:	eb08 0b02 	add.w	fp, r8, r2
3400efa4:	f10b 0a01 	add.w	sl, fp, #1
3400efa8:	4652      	mov	r2, sl
3400efaa:	2a01      	cmp	r2, #1
3400efac:	bfb8      	it	lt
3400efae:	2201      	movlt	r2, #1
3400efb0:	e006      	b.n	3400efc0 <_dtoa_r+0x230>
3400efb2:	2201      	movs	r2, #1
3400efb4:	9208      	str	r2, [sp, #32]
3400efb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400efb8:	2a00      	cmp	r2, #0
3400efba:	dd29      	ble.n	3400f010 <_dtoa_r+0x280>
3400efbc:	4693      	mov	fp, r2
3400efbe:	4692      	mov	sl, r2
3400efc0:	f8d9 701c 	ldr.w	r7, [r9, #28]
3400efc4:	2100      	movs	r1, #0
3400efc6:	2004      	movs	r0, #4
3400efc8:	f100 0614 	add.w	r6, r0, #20
3400efcc:	4296      	cmp	r6, r2
3400efce:	d926      	bls.n	3400f01e <_dtoa_r+0x28e>
3400efd0:	6079      	str	r1, [r7, #4]
3400efd2:	4648      	mov	r0, r9
3400efd4:	9305      	str	r3, [sp, #20]
3400efd6:	f000 fc83 	bl	3400f8e0 <_Balloc>
3400efda:	9b05      	ldr	r3, [sp, #20]
3400efdc:	4607      	mov	r7, r0
3400efde:	2800      	cmp	r0, #0
3400efe0:	d13e      	bne.n	3400f060 <_dtoa_r+0x2d0>
3400efe2:	4b1e      	ldr	r3, [pc, #120]	@ (3400f05c <_dtoa_r+0x2cc>)
3400efe4:	4602      	mov	r2, r0
3400efe6:	f240 11af 	movw	r1, #431	@ 0x1af
3400efea:	e6ea      	b.n	3400edc2 <_dtoa_r+0x32>
3400efec:	2200      	movs	r2, #0
3400efee:	e7e1      	b.n	3400efb4 <_dtoa_r+0x224>
3400eff0:	2200      	movs	r2, #0
3400eff2:	e7d3      	b.n	3400ef9c <_dtoa_r+0x20c>
3400eff4:	2401      	movs	r4, #1
3400eff6:	2200      	movs	r2, #0
3400eff8:	e9cd 2407 	strd	r2, r4, [sp, #28]
3400effc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3400f000:	2100      	movs	r1, #0
3400f002:	2212      	movs	r2, #18
3400f004:	46da      	mov	sl, fp
3400f006:	9109      	str	r1, [sp, #36]	@ 0x24
3400f008:	e7da      	b.n	3400efc0 <_dtoa_r+0x230>
3400f00a:	2201      	movs	r2, #1
3400f00c:	9208      	str	r2, [sp, #32]
3400f00e:	e7f5      	b.n	3400effc <_dtoa_r+0x26c>
3400f010:	f04f 0b01 	mov.w	fp, #1
3400f014:	46da      	mov	sl, fp
3400f016:	465a      	mov	r2, fp
3400f018:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3400f01c:	e7d0      	b.n	3400efc0 <_dtoa_r+0x230>
3400f01e:	3101      	adds	r1, #1
3400f020:	0040      	lsls	r0, r0, #1
3400f022:	e7d1      	b.n	3400efc8 <_dtoa_r+0x238>
3400f024:	f3af 8000 	nop.w
3400f028:	636f4361 	.word	0x636f4361
3400f02c:	3fd287a7 	.word	0x3fd287a7
3400f030:	8b60c8b3 	.word	0x8b60c8b3
3400f034:	3fc68a28 	.word	0x3fc68a28
3400f038:	509f79fb 	.word	0x509f79fb
3400f03c:	3fd34413 	.word	0x3fd34413
3400f040:	34011dd1 	.word	0x34011dd1
3400f044:	34011de8 	.word	0x34011de8
3400f048:	7ff00000 	.word	0x7ff00000
3400f04c:	34011dcd 	.word	0x34011dcd
3400f050:	34010f99 	.word	0x34010f99
3400f054:	34010f98 	.word	0x34010f98
3400f058:	34012180 	.word	0x34012180
3400f05c:	34011e40 	.word	0x34011e40
3400f060:	f8d9 201c 	ldr.w	r2, [r9, #28]
3400f064:	f1ba 0f0e 	cmp.w	sl, #14
3400f068:	6010      	str	r0, [r2, #0]
3400f06a:	d86e      	bhi.n	3400f14a <_dtoa_r+0x3ba>
3400f06c:	2c00      	cmp	r4, #0
3400f06e:	d06c      	beq.n	3400f14a <_dtoa_r+0x3ba>
3400f070:	f1b8 0f00 	cmp.w	r8, #0
3400f074:	f340 80b4 	ble.w	3400f1e0 <_dtoa_r+0x450>
3400f078:	f008 010f 	and.w	r1, r8, #15
3400f07c:	4ac7      	ldr	r2, [pc, #796]	@ (3400f39c <_dtoa_r+0x60c>)
3400f07e:	f418 7f80 	tst.w	r8, #256	@ 0x100
3400f082:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3400f086:	ea4f 1128 	mov.w	r1, r8, asr #4
3400f08a:	ed92 7b00 	vldr	d7, [r2]
3400f08e:	f000 809b 	beq.w	3400f1c8 <_dtoa_r+0x438>
3400f092:	4ac3      	ldr	r2, [pc, #780]	@ (3400f3a0 <_dtoa_r+0x610>)
3400f094:	f001 010f 	and.w	r1, r1, #15
3400f098:	ed92 6b08 	vldr	d6, [r2, #32]
3400f09c:	2203      	movs	r2, #3
3400f09e:	ee88 6b06 	vdiv.f64	d6, d8, d6
3400f0a2:	ed8d 6b02 	vstr	d6, [sp, #8]
3400f0a6:	48be      	ldr	r0, [pc, #760]	@ (3400f3a0 <_dtoa_r+0x610>)
3400f0a8:	2900      	cmp	r1, #0
3400f0aa:	f040 808f 	bne.w	3400f1cc <_dtoa_r+0x43c>
3400f0ae:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f0b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
3400f0b6:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f0ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
3400f0bc:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f0c0:	2900      	cmp	r1, #0
3400f0c2:	f000 80b3 	beq.w	3400f22c <_dtoa_r+0x49c>
3400f0c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3400f0ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f0d2:	f140 80ab 	bpl.w	3400f22c <_dtoa_r+0x49c>
3400f0d6:	f1ba 0f00 	cmp.w	sl, #0
3400f0da:	f000 80a7 	beq.w	3400f22c <_dtoa_r+0x49c>
3400f0de:	f1bb 0f00 	cmp.w	fp, #0
3400f0e2:	dd30      	ble.n	3400f146 <_dtoa_r+0x3b6>
3400f0e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3400f0e8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3400f0ec:	3201      	adds	r2, #1
3400f0ee:	465c      	mov	r4, fp
3400f0f0:	9105      	str	r1, [sp, #20]
3400f0f2:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f0f6:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f0fa:	ee07 2a90 	vmov	s15, r2
3400f0fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3400f102:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f106:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3400f10a:	eea7 5b06 	vfma.f64	d5, d7, d6
3400f10e:	ee15 2a90 	vmov	r2, s11
3400f112:	ec51 0b15 	vmov	r0, r1, d5
3400f116:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3400f11a:	2c00      	cmp	r4, #0
3400f11c:	f040 808a 	bne.w	3400f234 <_dtoa_r+0x4a4>
3400f120:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f124:	ee36 6b47 	vsub.f64	d6, d6, d7
3400f128:	ec41 0b17 	vmov	d7, r0, r1
3400f12c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f134:	f300 826a 	bgt.w	3400f60c <_dtoa_r+0x87c>
3400f138:	eeb1 7b47 	vneg.f64	d7, d7
3400f13c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f144:	d423      	bmi.n	3400f18e <_dtoa_r+0x3fe>
3400f146:	ed8d 8b02 	vstr	d8, [sp, #8]
3400f14a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3400f14c:	2a00      	cmp	r2, #0
3400f14e:	f2c0 8129 	blt.w	3400f3a4 <_dtoa_r+0x614>
3400f152:	f1b8 0f0e 	cmp.w	r8, #14
3400f156:	f300 8125 	bgt.w	3400f3a4 <_dtoa_r+0x614>
3400f15a:	4b90      	ldr	r3, [pc, #576]	@ (3400f39c <_dtoa_r+0x60c>)
3400f15c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3400f160:	ed93 6b00 	vldr	d6, [r3]
3400f164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f166:	2b00      	cmp	r3, #0
3400f168:	f280 80c8 	bge.w	3400f2fc <_dtoa_r+0x56c>
3400f16c:	f1ba 0f00 	cmp.w	sl, #0
3400f170:	f300 80c4 	bgt.w	3400f2fc <_dtoa_r+0x56c>
3400f174:	d10b      	bne.n	3400f18e <_dtoa_r+0x3fe>
3400f176:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f17a:	ee26 6b07 	vmul.f64	d6, d6, d7
3400f17e:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f182:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f18a:	f2c0 823c 	blt.w	3400f606 <_dtoa_r+0x876>
3400f18e:	2400      	movs	r4, #0
3400f190:	4625      	mov	r5, r4
3400f192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f194:	463e      	mov	r6, r7
3400f196:	43db      	mvns	r3, r3
3400f198:	9305      	str	r3, [sp, #20]
3400f19a:	f04f 0800 	mov.w	r8, #0
3400f19e:	4621      	mov	r1, r4
3400f1a0:	4648      	mov	r0, r9
3400f1a2:	f000 fbdd 	bl	3400f960 <_Bfree>
3400f1a6:	2d00      	cmp	r5, #0
3400f1a8:	f000 80a2 	beq.w	3400f2f0 <_dtoa_r+0x560>
3400f1ac:	f1b8 0f00 	cmp.w	r8, #0
3400f1b0:	d005      	beq.n	3400f1be <_dtoa_r+0x42e>
3400f1b2:	45a8      	cmp	r8, r5
3400f1b4:	d003      	beq.n	3400f1be <_dtoa_r+0x42e>
3400f1b6:	4641      	mov	r1, r8
3400f1b8:	4648      	mov	r0, r9
3400f1ba:	f000 fbd1 	bl	3400f960 <_Bfree>
3400f1be:	4629      	mov	r1, r5
3400f1c0:	4648      	mov	r0, r9
3400f1c2:	f000 fbcd 	bl	3400f960 <_Bfree>
3400f1c6:	e093      	b.n	3400f2f0 <_dtoa_r+0x560>
3400f1c8:	2202      	movs	r2, #2
3400f1ca:	e76c      	b.n	3400f0a6 <_dtoa_r+0x316>
3400f1cc:	07cc      	lsls	r4, r1, #31
3400f1ce:	d504      	bpl.n	3400f1da <_dtoa_r+0x44a>
3400f1d0:	3201      	adds	r2, #1
3400f1d2:	ed90 6b00 	vldr	d6, [r0]
3400f1d6:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f1da:	1049      	asrs	r1, r1, #1
3400f1dc:	3008      	adds	r0, #8
3400f1de:	e763      	b.n	3400f0a8 <_dtoa_r+0x318>
3400f1e0:	d022      	beq.n	3400f228 <_dtoa_r+0x498>
3400f1e2:	f1c8 0100 	rsb	r1, r8, #0
3400f1e6:	4a6d      	ldr	r2, [pc, #436]	@ (3400f39c <_dtoa_r+0x60c>)
3400f1e8:	2400      	movs	r4, #0
3400f1ea:	f001 000f 	and.w	r0, r1, #15
3400f1ee:	1109      	asrs	r1, r1, #4
3400f1f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3400f1f4:	486a      	ldr	r0, [pc, #424]	@ (3400f3a0 <_dtoa_r+0x610>)
3400f1f6:	ed92 7b00 	vldr	d7, [r2]
3400f1fa:	2202      	movs	r2, #2
3400f1fc:	ee28 7b07 	vmul.f64	d7, d8, d7
3400f200:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f204:	b929      	cbnz	r1, 3400f212 <_dtoa_r+0x482>
3400f206:	2c00      	cmp	r4, #0
3400f208:	f43f af57 	beq.w	3400f0ba <_dtoa_r+0x32a>
3400f20c:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f210:	e753      	b.n	3400f0ba <_dtoa_r+0x32a>
3400f212:	07ce      	lsls	r6, r1, #31
3400f214:	d505      	bpl.n	3400f222 <_dtoa_r+0x492>
3400f216:	3201      	adds	r2, #1
3400f218:	2401      	movs	r4, #1
3400f21a:	ed90 6b00 	vldr	d6, [r0]
3400f21e:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f222:	1049      	asrs	r1, r1, #1
3400f224:	3008      	adds	r0, #8
3400f226:	e7ed      	b.n	3400f204 <_dtoa_r+0x474>
3400f228:	2202      	movs	r2, #2
3400f22a:	e746      	b.n	3400f0ba <_dtoa_r+0x32a>
3400f22c:	4654      	mov	r4, sl
3400f22e:	f8cd 8014 	str.w	r8, [sp, #20]
3400f232:	e762      	b.n	3400f0fa <_dtoa_r+0x36a>
3400f234:	4a59      	ldr	r2, [pc, #356]	@ (3400f39c <_dtoa_r+0x60c>)
3400f236:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3400f23a:	443c      	add	r4, r7
3400f23c:	ed12 4b02 	vldr	d4, [r2, #-8]
3400f240:	9a08      	ldr	r2, [sp, #32]
3400f242:	ec41 0b17 	vmov	d7, r0, r1
3400f246:	b34a      	cbz	r2, 3400f29c <_dtoa_r+0x50c>
3400f248:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3400f24c:	463e      	mov	r6, r7
3400f24e:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3400f252:	ee83 5b04 	vdiv.f64	d5, d3, d4
3400f256:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f25a:	ee35 7b47 	vsub.f64	d7, d5, d7
3400f25e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f262:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f266:	ee14 2a90 	vmov	r2, s9
3400f26a:	3230      	adds	r2, #48	@ 0x30
3400f26c:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f270:	f806 2b01 	strb.w	r2, [r6], #1
3400f274:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f27c:	d438      	bmi.n	3400f2f0 <_dtoa_r+0x560>
3400f27e:	ee32 5b46 	vsub.f64	d5, d2, d6
3400f282:	eeb4 5bc7 	vcmpe.f64	d5, d7
3400f286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f28a:	d46e      	bmi.n	3400f36a <_dtoa_r+0x5da>
3400f28c:	42a6      	cmp	r6, r4
3400f28e:	f43f af5a 	beq.w	3400f146 <_dtoa_r+0x3b6>
3400f292:	ee27 7b03 	vmul.f64	d7, d7, d3
3400f296:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f29a:	e7e0      	b.n	3400f25e <_dtoa_r+0x4ce>
3400f29c:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f2a0:	4621      	mov	r1, r4
3400f2a2:	463e      	mov	r6, r7
3400f2a4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f2a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f2ac:	ee14 2a90 	vmov	r2, s9
3400f2b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f2b4:	3230      	adds	r2, #48	@ 0x30
3400f2b6:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f2ba:	f806 2b01 	strb.w	r2, [r6], #1
3400f2be:	42a6      	cmp	r6, r4
3400f2c0:	d119      	bne.n	3400f2f6 <_dtoa_r+0x566>
3400f2c2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3400f2c6:	ee37 4b05 	vadd.f64	d4, d7, d5
3400f2ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
3400f2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f2d2:	dc4a      	bgt.n	3400f36a <_dtoa_r+0x5da>
3400f2d4:	ee35 5b47 	vsub.f64	d5, d5, d7
3400f2d8:	eeb4 6bc5 	vcmpe.f64	d6, d5
3400f2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f2e0:	f57f af31 	bpl.w	3400f146 <_dtoa_r+0x3b6>
3400f2e4:	460e      	mov	r6, r1
3400f2e6:	3901      	subs	r1, #1
3400f2e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3400f2ec:	2b30      	cmp	r3, #48	@ 0x30
3400f2ee:	d0f9      	beq.n	3400f2e4 <_dtoa_r+0x554>
3400f2f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
3400f2f4:	e027      	b.n	3400f346 <_dtoa_r+0x5b6>
3400f2f6:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f2fa:	e7d5      	b.n	3400f2a8 <_dtoa_r+0x518>
3400f2fc:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f300:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3400f304:	463e      	mov	r6, r7
3400f306:	ee87 5b06 	vdiv.f64	d5, d7, d6
3400f30a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3400f30e:	ee15 3a10 	vmov	r3, s10
3400f312:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3400f316:	3330      	adds	r3, #48	@ 0x30
3400f318:	eea3 7b46 	vfms.f64	d7, d3, d6
3400f31c:	f806 3b01 	strb.w	r3, [r6], #1
3400f320:	1bf3      	subs	r3, r6, r7
3400f322:	459a      	cmp	sl, r3
3400f324:	d132      	bne.n	3400f38c <_dtoa_r+0x5fc>
3400f326:	ee37 7b07 	vadd.f64	d7, d7, d7
3400f32a:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f332:	dc18      	bgt.n	3400f366 <_dtoa_r+0x5d6>
3400f334:	eeb4 7b46 	vcmp.f64	d7, d6
3400f338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f33c:	d103      	bne.n	3400f346 <_dtoa_r+0x5b6>
3400f33e:	ee15 3a10 	vmov	r3, s10
3400f342:	07db      	lsls	r3, r3, #31
3400f344:	d40f      	bmi.n	3400f366 <_dtoa_r+0x5d6>
3400f346:	9901      	ldr	r1, [sp, #4]
3400f348:	4648      	mov	r0, r9
3400f34a:	f000 fb09 	bl	3400f960 <_Bfree>
3400f34e:	2300      	movs	r3, #0
3400f350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400f352:	7033      	strb	r3, [r6, #0]
3400f354:	f108 0301 	add.w	r3, r8, #1
3400f358:	6013      	str	r3, [r2, #0]
3400f35a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f35c:	2b00      	cmp	r3, #0
3400f35e:	f000 824b 	beq.w	3400f7f8 <_dtoa_r+0xa68>
3400f362:	601e      	str	r6, [r3, #0]
3400f364:	e248      	b.n	3400f7f8 <_dtoa_r+0xa68>
3400f366:	f8cd 8014 	str.w	r8, [sp, #20]
3400f36a:	4633      	mov	r3, r6
3400f36c:	461e      	mov	r6, r3
3400f36e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400f372:	2a39      	cmp	r2, #57	@ 0x39
3400f374:	d106      	bne.n	3400f384 <_dtoa_r+0x5f4>
3400f376:	429f      	cmp	r7, r3
3400f378:	d1f8      	bne.n	3400f36c <_dtoa_r+0x5dc>
3400f37a:	9a05      	ldr	r2, [sp, #20]
3400f37c:	3201      	adds	r2, #1
3400f37e:	9205      	str	r2, [sp, #20]
3400f380:	2230      	movs	r2, #48	@ 0x30
3400f382:	703a      	strb	r2, [r7, #0]
3400f384:	781a      	ldrb	r2, [r3, #0]
3400f386:	3201      	adds	r2, #1
3400f388:	701a      	strb	r2, [r3, #0]
3400f38a:	e7b1      	b.n	3400f2f0 <_dtoa_r+0x560>
3400f38c:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f390:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400f394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f398:	d1b5      	bne.n	3400f306 <_dtoa_r+0x576>
3400f39a:	e7d4      	b.n	3400f346 <_dtoa_r+0x5b6>
3400f39c:	34012180 	.word	0x34012180
3400f3a0:	34012158 	.word	0x34012158
3400f3a4:	9908      	ldr	r1, [sp, #32]
3400f3a6:	2900      	cmp	r1, #0
3400f3a8:	f000 80e9 	beq.w	3400f57e <_dtoa_r+0x7ee>
3400f3ac:	9907      	ldr	r1, [sp, #28]
3400f3ae:	2901      	cmp	r1, #1
3400f3b0:	f300 80cb 	bgt.w	3400f54a <_dtoa_r+0x7ba>
3400f3b4:	2d00      	cmp	r5, #0
3400f3b6:	f000 80c4 	beq.w	3400f542 <_dtoa_r+0x7b2>
3400f3ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3400f3be:	461c      	mov	r4, r3
3400f3c0:	9e04      	ldr	r6, [sp, #16]
3400f3c2:	9305      	str	r3, [sp, #20]
3400f3c4:	2101      	movs	r1, #1
3400f3c6:	9b04      	ldr	r3, [sp, #16]
3400f3c8:	4648      	mov	r0, r9
3400f3ca:	4413      	add	r3, r2
3400f3cc:	9304      	str	r3, [sp, #16]
3400f3ce:	9b06      	ldr	r3, [sp, #24]
3400f3d0:	4413      	add	r3, r2
3400f3d2:	9306      	str	r3, [sp, #24]
3400f3d4:	f000 fb7a 	bl	3400facc <__i2b>
3400f3d8:	9b05      	ldr	r3, [sp, #20]
3400f3da:	4605      	mov	r5, r0
3400f3dc:	b166      	cbz	r6, 3400f3f8 <_dtoa_r+0x668>
3400f3de:	9a06      	ldr	r2, [sp, #24]
3400f3e0:	2a00      	cmp	r2, #0
3400f3e2:	dd09      	ble.n	3400f3f8 <_dtoa_r+0x668>
3400f3e4:	42b2      	cmp	r2, r6
3400f3e6:	9904      	ldr	r1, [sp, #16]
3400f3e8:	bfa8      	it	ge
3400f3ea:	4632      	movge	r2, r6
3400f3ec:	1a89      	subs	r1, r1, r2
3400f3ee:	1ab6      	subs	r6, r6, r2
3400f3f0:	9104      	str	r1, [sp, #16]
3400f3f2:	9906      	ldr	r1, [sp, #24]
3400f3f4:	1a8a      	subs	r2, r1, r2
3400f3f6:	9206      	str	r2, [sp, #24]
3400f3f8:	b30b      	cbz	r3, 3400f43e <_dtoa_r+0x6ae>
3400f3fa:	9a08      	ldr	r2, [sp, #32]
3400f3fc:	2a00      	cmp	r2, #0
3400f3fe:	f000 80c5 	beq.w	3400f58c <_dtoa_r+0x7fc>
3400f402:	2c00      	cmp	r4, #0
3400f404:	f000 80bf 	beq.w	3400f586 <_dtoa_r+0x7f6>
3400f408:	4629      	mov	r1, r5
3400f40a:	4622      	mov	r2, r4
3400f40c:	4648      	mov	r0, r9
3400f40e:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f410:	f000 fc16 	bl	3400fc40 <__pow5mult>
3400f414:	9a01      	ldr	r2, [sp, #4]
3400f416:	4601      	mov	r1, r0
3400f418:	4605      	mov	r5, r0
3400f41a:	4648      	mov	r0, r9
3400f41c:	f000 fb6c 	bl	3400faf8 <__multiply>
3400f420:	9901      	ldr	r1, [sp, #4]
3400f422:	9005      	str	r0, [sp, #20]
3400f424:	4648      	mov	r0, r9
3400f426:	f000 fa9b 	bl	3400f960 <_Bfree>
3400f42a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400f42c:	1b1b      	subs	r3, r3, r4
3400f42e:	f000 80b0 	beq.w	3400f592 <_dtoa_r+0x802>
3400f432:	461a      	mov	r2, r3
3400f434:	9905      	ldr	r1, [sp, #20]
3400f436:	4648      	mov	r0, r9
3400f438:	f000 fc02 	bl	3400fc40 <__pow5mult>
3400f43c:	9001      	str	r0, [sp, #4]
3400f43e:	2101      	movs	r1, #1
3400f440:	4648      	mov	r0, r9
3400f442:	f000 fb43 	bl	3400facc <__i2b>
3400f446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f448:	4604      	mov	r4, r0
3400f44a:	2b00      	cmp	r3, #0
3400f44c:	f000 81da 	beq.w	3400f804 <_dtoa_r+0xa74>
3400f450:	461a      	mov	r2, r3
3400f452:	4601      	mov	r1, r0
3400f454:	4648      	mov	r0, r9
3400f456:	f000 fbf3 	bl	3400fc40 <__pow5mult>
3400f45a:	9b07      	ldr	r3, [sp, #28]
3400f45c:	4604      	mov	r4, r0
3400f45e:	2b01      	cmp	r3, #1
3400f460:	f300 80a0 	bgt.w	3400f5a4 <_dtoa_r+0x814>
3400f464:	9b02      	ldr	r3, [sp, #8]
3400f466:	2b00      	cmp	r3, #0
3400f468:	f040 8096 	bne.w	3400f598 <_dtoa_r+0x808>
3400f46c:	9b03      	ldr	r3, [sp, #12]
3400f46e:	f3c3 0213 	ubfx	r2, r3, #0, #20
3400f472:	2a00      	cmp	r2, #0
3400f474:	f040 8092 	bne.w	3400f59c <_dtoa_r+0x80c>
3400f478:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3400f47c:	0d12      	lsrs	r2, r2, #20
3400f47e:	0512      	lsls	r2, r2, #20
3400f480:	2a00      	cmp	r2, #0
3400f482:	f000 808d 	beq.w	3400f5a0 <_dtoa_r+0x810>
3400f486:	9b04      	ldr	r3, [sp, #16]
3400f488:	3301      	adds	r3, #1
3400f48a:	9304      	str	r3, [sp, #16]
3400f48c:	9b06      	ldr	r3, [sp, #24]
3400f48e:	3301      	adds	r3, #1
3400f490:	9306      	str	r3, [sp, #24]
3400f492:	2301      	movs	r3, #1
3400f494:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f498:	2b00      	cmp	r3, #0
3400f49a:	f000 81b9 	beq.w	3400f810 <_dtoa_r+0xa80>
3400f49e:	6922      	ldr	r2, [r4, #16]
3400f4a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3400f4a4:	6910      	ldr	r0, [r2, #16]
3400f4a6:	f000 fac5 	bl	3400fa34 <__hi0bits>
3400f4aa:	f1c0 0020 	rsb	r0, r0, #32
3400f4ae:	9b06      	ldr	r3, [sp, #24]
3400f4b0:	4418      	add	r0, r3
3400f4b2:	f010 001f 	ands.w	r0, r0, #31
3400f4b6:	f000 8081 	beq.w	3400f5bc <_dtoa_r+0x82c>
3400f4ba:	f1c0 0220 	rsb	r2, r0, #32
3400f4be:	2a04      	cmp	r2, #4
3400f4c0:	dd73      	ble.n	3400f5aa <_dtoa_r+0x81a>
3400f4c2:	f1c0 001c 	rsb	r0, r0, #28
3400f4c6:	9b04      	ldr	r3, [sp, #16]
3400f4c8:	4403      	add	r3, r0
3400f4ca:	4406      	add	r6, r0
3400f4cc:	9304      	str	r3, [sp, #16]
3400f4ce:	9b06      	ldr	r3, [sp, #24]
3400f4d0:	4403      	add	r3, r0
3400f4d2:	9306      	str	r3, [sp, #24]
3400f4d4:	9b04      	ldr	r3, [sp, #16]
3400f4d6:	2b00      	cmp	r3, #0
3400f4d8:	dd05      	ble.n	3400f4e6 <_dtoa_r+0x756>
3400f4da:	461a      	mov	r2, r3
3400f4dc:	9901      	ldr	r1, [sp, #4]
3400f4de:	4648      	mov	r0, r9
3400f4e0:	f000 fc08 	bl	3400fcf4 <__lshift>
3400f4e4:	9001      	str	r0, [sp, #4]
3400f4e6:	9b06      	ldr	r3, [sp, #24]
3400f4e8:	2b00      	cmp	r3, #0
3400f4ea:	dd05      	ble.n	3400f4f8 <_dtoa_r+0x768>
3400f4ec:	4621      	mov	r1, r4
3400f4ee:	461a      	mov	r2, r3
3400f4f0:	4648      	mov	r0, r9
3400f4f2:	f000 fbff 	bl	3400fcf4 <__lshift>
3400f4f6:	4604      	mov	r4, r0
3400f4f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400f4fa:	2b00      	cmp	r3, #0
3400f4fc:	d060      	beq.n	3400f5c0 <_dtoa_r+0x830>
3400f4fe:	4621      	mov	r1, r4
3400f500:	9801      	ldr	r0, [sp, #4]
3400f502:	f000 fc63 	bl	3400fdcc <__mcmp>
3400f506:	2800      	cmp	r0, #0
3400f508:	da5a      	bge.n	3400f5c0 <_dtoa_r+0x830>
3400f50a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3400f50e:	220a      	movs	r2, #10
3400f510:	9901      	ldr	r1, [sp, #4]
3400f512:	4648      	mov	r0, r9
3400f514:	9305      	str	r3, [sp, #20]
3400f516:	2300      	movs	r3, #0
3400f518:	f000 fa44 	bl	3400f9a4 <__multadd>
3400f51c:	9b08      	ldr	r3, [sp, #32]
3400f51e:	9001      	str	r0, [sp, #4]
3400f520:	2b00      	cmp	r3, #0
3400f522:	f000 8177 	beq.w	3400f814 <_dtoa_r+0xa84>
3400f526:	4629      	mov	r1, r5
3400f528:	2300      	movs	r3, #0
3400f52a:	220a      	movs	r2, #10
3400f52c:	4648      	mov	r0, r9
3400f52e:	f000 fa39 	bl	3400f9a4 <__multadd>
3400f532:	f1bb 0f00 	cmp.w	fp, #0
3400f536:	4605      	mov	r5, r0
3400f538:	dc6e      	bgt.n	3400f618 <_dtoa_r+0x888>
3400f53a:	9b07      	ldr	r3, [sp, #28]
3400f53c:	2b02      	cmp	r3, #2
3400f53e:	dc48      	bgt.n	3400f5d2 <_dtoa_r+0x842>
3400f540:	e06a      	b.n	3400f618 <_dtoa_r+0x888>
3400f542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400f544:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3400f548:	e739      	b.n	3400f3be <_dtoa_r+0x62e>
3400f54a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3400f54e:	42a3      	cmp	r3, r4
3400f550:	db07      	blt.n	3400f562 <_dtoa_r+0x7d2>
3400f552:	f1ba 0f00 	cmp.w	sl, #0
3400f556:	eba3 0404 	sub.w	r4, r3, r4
3400f55a:	db0b      	blt.n	3400f574 <_dtoa_r+0x7e4>
3400f55c:	9e04      	ldr	r6, [sp, #16]
3400f55e:	4652      	mov	r2, sl
3400f560:	e72f      	b.n	3400f3c2 <_dtoa_r+0x632>
3400f562:	1ae2      	subs	r2, r4, r3
3400f564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f566:	9e04      	ldr	r6, [sp, #16]
3400f568:	4413      	add	r3, r2
3400f56a:	4652      	mov	r2, sl
3400f56c:	930a      	str	r3, [sp, #40]	@ 0x28
3400f56e:	4623      	mov	r3, r4
3400f570:	2400      	movs	r4, #0
3400f572:	e726      	b.n	3400f3c2 <_dtoa_r+0x632>
3400f574:	9a04      	ldr	r2, [sp, #16]
3400f576:	eba2 060a 	sub.w	r6, r2, sl
3400f57a:	2200      	movs	r2, #0
3400f57c:	e721      	b.n	3400f3c2 <_dtoa_r+0x632>
3400f57e:	461c      	mov	r4, r3
3400f580:	9e04      	ldr	r6, [sp, #16]
3400f582:	9d08      	ldr	r5, [sp, #32]
3400f584:	e72a      	b.n	3400f3dc <_dtoa_r+0x64c>
3400f586:	9a01      	ldr	r2, [sp, #4]
3400f588:	9205      	str	r2, [sp, #20]
3400f58a:	e752      	b.n	3400f432 <_dtoa_r+0x6a2>
3400f58c:	461a      	mov	r2, r3
3400f58e:	9901      	ldr	r1, [sp, #4]
3400f590:	e751      	b.n	3400f436 <_dtoa_r+0x6a6>
3400f592:	9b05      	ldr	r3, [sp, #20]
3400f594:	9301      	str	r3, [sp, #4]
3400f596:	e752      	b.n	3400f43e <_dtoa_r+0x6ae>
3400f598:	2300      	movs	r3, #0
3400f59a:	e77b      	b.n	3400f494 <_dtoa_r+0x704>
3400f59c:	9b02      	ldr	r3, [sp, #8]
3400f59e:	e779      	b.n	3400f494 <_dtoa_r+0x704>
3400f5a0:	920b      	str	r2, [sp, #44]	@ 0x2c
3400f5a2:	e778      	b.n	3400f496 <_dtoa_r+0x706>
3400f5a4:	2300      	movs	r3, #0
3400f5a6:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f5a8:	e779      	b.n	3400f49e <_dtoa_r+0x70e>
3400f5aa:	d093      	beq.n	3400f4d4 <_dtoa_r+0x744>
3400f5ac:	321c      	adds	r2, #28
3400f5ae:	9b04      	ldr	r3, [sp, #16]
3400f5b0:	4413      	add	r3, r2
3400f5b2:	4416      	add	r6, r2
3400f5b4:	9304      	str	r3, [sp, #16]
3400f5b6:	9b06      	ldr	r3, [sp, #24]
3400f5b8:	4413      	add	r3, r2
3400f5ba:	e78a      	b.n	3400f4d2 <_dtoa_r+0x742>
3400f5bc:	4602      	mov	r2, r0
3400f5be:	e7f5      	b.n	3400f5ac <_dtoa_r+0x81c>
3400f5c0:	f1ba 0f00 	cmp.w	sl, #0
3400f5c4:	46d3      	mov	fp, sl
3400f5c6:	f8cd 8014 	str.w	r8, [sp, #20]
3400f5ca:	dc21      	bgt.n	3400f610 <_dtoa_r+0x880>
3400f5cc:	9b07      	ldr	r3, [sp, #28]
3400f5ce:	2b02      	cmp	r3, #2
3400f5d0:	dd1e      	ble.n	3400f610 <_dtoa_r+0x880>
3400f5d2:	f1bb 0f00 	cmp.w	fp, #0
3400f5d6:	f47f addc 	bne.w	3400f192 <_dtoa_r+0x402>
3400f5da:	4621      	mov	r1, r4
3400f5dc:	465b      	mov	r3, fp
3400f5de:	2205      	movs	r2, #5
3400f5e0:	4648      	mov	r0, r9
3400f5e2:	f000 f9df 	bl	3400f9a4 <__multadd>
3400f5e6:	4601      	mov	r1, r0
3400f5e8:	4604      	mov	r4, r0
3400f5ea:	9801      	ldr	r0, [sp, #4]
3400f5ec:	f000 fbee 	bl	3400fdcc <__mcmp>
3400f5f0:	2800      	cmp	r0, #0
3400f5f2:	f77f adce 	ble.w	3400f192 <_dtoa_r+0x402>
3400f5f6:	2331      	movs	r3, #49	@ 0x31
3400f5f8:	463e      	mov	r6, r7
3400f5fa:	f806 3b01 	strb.w	r3, [r6], #1
3400f5fe:	9b05      	ldr	r3, [sp, #20]
3400f600:	3301      	adds	r3, #1
3400f602:	9305      	str	r3, [sp, #20]
3400f604:	e5c9      	b.n	3400f19a <_dtoa_r+0x40a>
3400f606:	4654      	mov	r4, sl
3400f608:	f8cd 8014 	str.w	r8, [sp, #20]
3400f60c:	4625      	mov	r5, r4
3400f60e:	e7f2      	b.n	3400f5f6 <_dtoa_r+0x866>
3400f610:	9b08      	ldr	r3, [sp, #32]
3400f612:	2b00      	cmp	r3, #0
3400f614:	f000 8102 	beq.w	3400f81c <_dtoa_r+0xa8c>
3400f618:	2e00      	cmp	r6, #0
3400f61a:	dd05      	ble.n	3400f628 <_dtoa_r+0x898>
3400f61c:	4629      	mov	r1, r5
3400f61e:	4632      	mov	r2, r6
3400f620:	4648      	mov	r0, r9
3400f622:	f000 fb67 	bl	3400fcf4 <__lshift>
3400f626:	4605      	mov	r5, r0
3400f628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400f62a:	2b00      	cmp	r3, #0
3400f62c:	d058      	beq.n	3400f6e0 <_dtoa_r+0x950>
3400f62e:	6869      	ldr	r1, [r5, #4]
3400f630:	4648      	mov	r0, r9
3400f632:	f000 f955 	bl	3400f8e0 <_Balloc>
3400f636:	4606      	mov	r6, r0
3400f638:	b928      	cbnz	r0, 3400f646 <_dtoa_r+0x8b6>
3400f63a:	4b82      	ldr	r3, [pc, #520]	@ (3400f844 <_dtoa_r+0xab4>)
3400f63c:	4602      	mov	r2, r0
3400f63e:	f240 21ef 	movw	r1, #751	@ 0x2ef
3400f642:	f7ff bbbe 	b.w	3400edc2 <_dtoa_r+0x32>
3400f646:	692a      	ldr	r2, [r5, #16]
3400f648:	f105 010c 	add.w	r1, r5, #12
3400f64c:	300c      	adds	r0, #12
3400f64e:	3202      	adds	r2, #2
3400f650:	0092      	lsls	r2, r2, #2
3400f652:	f7ff fafa 	bl	3400ec4a <memcpy>
3400f656:	2201      	movs	r2, #1
3400f658:	4631      	mov	r1, r6
3400f65a:	4648      	mov	r0, r9
3400f65c:	f000 fb4a 	bl	3400fcf4 <__lshift>
3400f660:	1c7b      	adds	r3, r7, #1
3400f662:	46a8      	mov	r8, r5
3400f664:	4605      	mov	r5, r0
3400f666:	9304      	str	r3, [sp, #16]
3400f668:	eb07 030b 	add.w	r3, r7, fp
3400f66c:	9309      	str	r3, [sp, #36]	@ 0x24
3400f66e:	9b02      	ldr	r3, [sp, #8]
3400f670:	f003 0301 	and.w	r3, r3, #1
3400f674:	9308      	str	r3, [sp, #32]
3400f676:	9b04      	ldr	r3, [sp, #16]
3400f678:	4621      	mov	r1, r4
3400f67a:	9801      	ldr	r0, [sp, #4]
3400f67c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3400f680:	f7ff faf7 	bl	3400ec72 <quorem>
3400f684:	4641      	mov	r1, r8
3400f686:	9002      	str	r0, [sp, #8]
3400f688:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400f68c:	9801      	ldr	r0, [sp, #4]
3400f68e:	f000 fb9d 	bl	3400fdcc <__mcmp>
3400f692:	462a      	mov	r2, r5
3400f694:	9006      	str	r0, [sp, #24]
3400f696:	4621      	mov	r1, r4
3400f698:	4648      	mov	r0, r9
3400f69a:	f000 fbb3 	bl	3400fe04 <__mdiff>
3400f69e:	68c2      	ldr	r2, [r0, #12]
3400f6a0:	4606      	mov	r6, r0
3400f6a2:	b9fa      	cbnz	r2, 3400f6e4 <_dtoa_r+0x954>
3400f6a4:	4601      	mov	r1, r0
3400f6a6:	9801      	ldr	r0, [sp, #4]
3400f6a8:	f000 fb90 	bl	3400fdcc <__mcmp>
3400f6ac:	4602      	mov	r2, r0
3400f6ae:	4631      	mov	r1, r6
3400f6b0:	4648      	mov	r0, r9
3400f6b2:	920a      	str	r2, [sp, #40]	@ 0x28
3400f6b4:	f000 f954 	bl	3400f960 <_Bfree>
3400f6b8:	9b07      	ldr	r3, [sp, #28]
3400f6ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400f6bc:	9e04      	ldr	r6, [sp, #16]
3400f6be:	ea42 0103 	orr.w	r1, r2, r3
3400f6c2:	9b08      	ldr	r3, [sp, #32]
3400f6c4:	4319      	orrs	r1, r3
3400f6c6:	d10f      	bne.n	3400f6e8 <_dtoa_r+0x958>
3400f6c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400f6cc:	d028      	beq.n	3400f720 <_dtoa_r+0x990>
3400f6ce:	9b06      	ldr	r3, [sp, #24]
3400f6d0:	2b00      	cmp	r3, #0
3400f6d2:	dd02      	ble.n	3400f6da <_dtoa_r+0x94a>
3400f6d4:	9b02      	ldr	r3, [sp, #8]
3400f6d6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3400f6da:	f88b a000 	strb.w	sl, [fp]
3400f6de:	e55e      	b.n	3400f19e <_dtoa_r+0x40e>
3400f6e0:	4628      	mov	r0, r5
3400f6e2:	e7bd      	b.n	3400f660 <_dtoa_r+0x8d0>
3400f6e4:	2201      	movs	r2, #1
3400f6e6:	e7e2      	b.n	3400f6ae <_dtoa_r+0x91e>
3400f6e8:	9b06      	ldr	r3, [sp, #24]
3400f6ea:	2b00      	cmp	r3, #0
3400f6ec:	db04      	blt.n	3400f6f8 <_dtoa_r+0x968>
3400f6ee:	9907      	ldr	r1, [sp, #28]
3400f6f0:	430b      	orrs	r3, r1
3400f6f2:	9908      	ldr	r1, [sp, #32]
3400f6f4:	430b      	orrs	r3, r1
3400f6f6:	d120      	bne.n	3400f73a <_dtoa_r+0x9aa>
3400f6f8:	2a00      	cmp	r2, #0
3400f6fa:	ddee      	ble.n	3400f6da <_dtoa_r+0x94a>
3400f6fc:	2201      	movs	r2, #1
3400f6fe:	9901      	ldr	r1, [sp, #4]
3400f700:	4648      	mov	r0, r9
3400f702:	f000 faf7 	bl	3400fcf4 <__lshift>
3400f706:	4621      	mov	r1, r4
3400f708:	9001      	str	r0, [sp, #4]
3400f70a:	f000 fb5f 	bl	3400fdcc <__mcmp>
3400f70e:	2800      	cmp	r0, #0
3400f710:	dc03      	bgt.n	3400f71a <_dtoa_r+0x98a>
3400f712:	d1e2      	bne.n	3400f6da <_dtoa_r+0x94a>
3400f714:	f01a 0f01 	tst.w	sl, #1
3400f718:	d0df      	beq.n	3400f6da <_dtoa_r+0x94a>
3400f71a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400f71e:	d1d9      	bne.n	3400f6d4 <_dtoa_r+0x944>
3400f720:	2339      	movs	r3, #57	@ 0x39
3400f722:	f88b 3000 	strb.w	r3, [fp]
3400f726:	4633      	mov	r3, r6
3400f728:	461e      	mov	r6, r3
3400f72a:	3b01      	subs	r3, #1
3400f72c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3400f730:	2a39      	cmp	r2, #57	@ 0x39
3400f732:	d052      	beq.n	3400f7da <_dtoa_r+0xa4a>
3400f734:	3201      	adds	r2, #1
3400f736:	701a      	strb	r2, [r3, #0]
3400f738:	e531      	b.n	3400f19e <_dtoa_r+0x40e>
3400f73a:	2a00      	cmp	r2, #0
3400f73c:	dd07      	ble.n	3400f74e <_dtoa_r+0x9be>
3400f73e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400f742:	d0ed      	beq.n	3400f720 <_dtoa_r+0x990>
3400f744:	f10a 0301 	add.w	r3, sl, #1
3400f748:	f88b 3000 	strb.w	r3, [fp]
3400f74c:	e527      	b.n	3400f19e <_dtoa_r+0x40e>
3400f74e:	9b04      	ldr	r3, [sp, #16]
3400f750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f752:	f803 ac01 	strb.w	sl, [r3, #-1]
3400f756:	4293      	cmp	r3, r2
3400f758:	d029      	beq.n	3400f7ae <_dtoa_r+0xa1e>
3400f75a:	2300      	movs	r3, #0
3400f75c:	220a      	movs	r2, #10
3400f75e:	9901      	ldr	r1, [sp, #4]
3400f760:	4648      	mov	r0, r9
3400f762:	f000 f91f 	bl	3400f9a4 <__multadd>
3400f766:	45a8      	cmp	r8, r5
3400f768:	9001      	str	r0, [sp, #4]
3400f76a:	f04f 0300 	mov.w	r3, #0
3400f76e:	f04f 020a 	mov.w	r2, #10
3400f772:	4641      	mov	r1, r8
3400f774:	4648      	mov	r0, r9
3400f776:	d107      	bne.n	3400f788 <_dtoa_r+0x9f8>
3400f778:	f000 f914 	bl	3400f9a4 <__multadd>
3400f77c:	4680      	mov	r8, r0
3400f77e:	4605      	mov	r5, r0
3400f780:	9b04      	ldr	r3, [sp, #16]
3400f782:	3301      	adds	r3, #1
3400f784:	9304      	str	r3, [sp, #16]
3400f786:	e776      	b.n	3400f676 <_dtoa_r+0x8e6>
3400f788:	f000 f90c 	bl	3400f9a4 <__multadd>
3400f78c:	4629      	mov	r1, r5
3400f78e:	4680      	mov	r8, r0
3400f790:	2300      	movs	r3, #0
3400f792:	220a      	movs	r2, #10
3400f794:	4648      	mov	r0, r9
3400f796:	f000 f905 	bl	3400f9a4 <__multadd>
3400f79a:	4605      	mov	r5, r0
3400f79c:	e7f0      	b.n	3400f780 <_dtoa_r+0x9f0>
3400f79e:	f1bb 0f00 	cmp.w	fp, #0
3400f7a2:	f04f 0800 	mov.w	r8, #0
3400f7a6:	bfcc      	ite	gt
3400f7a8:	465e      	movgt	r6, fp
3400f7aa:	2601      	movle	r6, #1
3400f7ac:	443e      	add	r6, r7
3400f7ae:	2201      	movs	r2, #1
3400f7b0:	9901      	ldr	r1, [sp, #4]
3400f7b2:	4648      	mov	r0, r9
3400f7b4:	f000 fa9e 	bl	3400fcf4 <__lshift>
3400f7b8:	4621      	mov	r1, r4
3400f7ba:	9001      	str	r0, [sp, #4]
3400f7bc:	f000 fb06 	bl	3400fdcc <__mcmp>
3400f7c0:	2800      	cmp	r0, #0
3400f7c2:	dcb0      	bgt.n	3400f726 <_dtoa_r+0x996>
3400f7c4:	d102      	bne.n	3400f7cc <_dtoa_r+0xa3c>
3400f7c6:	f01a 0f01 	tst.w	sl, #1
3400f7ca:	d1ac      	bne.n	3400f726 <_dtoa_r+0x996>
3400f7cc:	4633      	mov	r3, r6
3400f7ce:	461e      	mov	r6, r3
3400f7d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400f7d4:	2a30      	cmp	r2, #48	@ 0x30
3400f7d6:	d0fa      	beq.n	3400f7ce <_dtoa_r+0xa3e>
3400f7d8:	e4e1      	b.n	3400f19e <_dtoa_r+0x40e>
3400f7da:	429f      	cmp	r7, r3
3400f7dc:	d1a4      	bne.n	3400f728 <_dtoa_r+0x998>
3400f7de:	9b05      	ldr	r3, [sp, #20]
3400f7e0:	3301      	adds	r3, #1
3400f7e2:	9305      	str	r3, [sp, #20]
3400f7e4:	2331      	movs	r3, #49	@ 0x31
3400f7e6:	703b      	strb	r3, [r7, #0]
3400f7e8:	e4d9      	b.n	3400f19e <_dtoa_r+0x40e>
3400f7ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f7ec:	4f16      	ldr	r7, [pc, #88]	@ (3400f848 <_dtoa_r+0xab8>)
3400f7ee:	b11b      	cbz	r3, 3400f7f8 <_dtoa_r+0xa68>
3400f7f0:	f107 0308 	add.w	r3, r7, #8
3400f7f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400f7f6:	6013      	str	r3, [r2, #0]
3400f7f8:	4638      	mov	r0, r7
3400f7fa:	b011      	add	sp, #68	@ 0x44
3400f7fc:	ecbd 8b02 	vpop	{d8}
3400f800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400f804:	9b07      	ldr	r3, [sp, #28]
3400f806:	2b01      	cmp	r3, #1
3400f808:	f77f ae2c 	ble.w	3400f464 <_dtoa_r+0x6d4>
3400f80c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f80e:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f810:	2001      	movs	r0, #1
3400f812:	e64c      	b.n	3400f4ae <_dtoa_r+0x71e>
3400f814:	f1bb 0f00 	cmp.w	fp, #0
3400f818:	f77f aed8 	ble.w	3400f5cc <_dtoa_r+0x83c>
3400f81c:	463e      	mov	r6, r7
3400f81e:	4621      	mov	r1, r4
3400f820:	9801      	ldr	r0, [sp, #4]
3400f822:	f7ff fa26 	bl	3400ec72 <quorem>
3400f826:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400f82a:	f806 ab01 	strb.w	sl, [r6], #1
3400f82e:	1bf2      	subs	r2, r6, r7
3400f830:	4593      	cmp	fp, r2
3400f832:	ddb4      	ble.n	3400f79e <_dtoa_r+0xa0e>
3400f834:	2300      	movs	r3, #0
3400f836:	220a      	movs	r2, #10
3400f838:	9901      	ldr	r1, [sp, #4]
3400f83a:	4648      	mov	r0, r9
3400f83c:	f000 f8b2 	bl	3400f9a4 <__multadd>
3400f840:	9001      	str	r0, [sp, #4]
3400f842:	e7ec      	b.n	3400f81e <_dtoa_r+0xa8e>
3400f844:	34011e40 	.word	0x34011e40
3400f848:	34011dc4 	.word	0x34011dc4

3400f84c <_free_r>:
3400f84c:	b538      	push	{r3, r4, r5, lr}
3400f84e:	4605      	mov	r5, r0
3400f850:	2900      	cmp	r1, #0
3400f852:	d041      	beq.n	3400f8d8 <_free_r+0x8c>
3400f854:	f851 3c04 	ldr.w	r3, [r1, #-4]
3400f858:	1f0c      	subs	r4, r1, #4
3400f85a:	2b00      	cmp	r3, #0
3400f85c:	bfb8      	it	lt
3400f85e:	18e4      	addlt	r4, r4, r3
3400f860:	f7fe f842 	bl	3400d8e8 <__malloc_lock>
3400f864:	4a1d      	ldr	r2, [pc, #116]	@ (3400f8dc <_free_r+0x90>)
3400f866:	6813      	ldr	r3, [r2, #0]
3400f868:	b933      	cbnz	r3, 3400f878 <_free_r+0x2c>
3400f86a:	6063      	str	r3, [r4, #4]
3400f86c:	6014      	str	r4, [r2, #0]
3400f86e:	4628      	mov	r0, r5
3400f870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400f874:	f7fe b83e 	b.w	3400d8f4 <__malloc_unlock>
3400f878:	42a3      	cmp	r3, r4
3400f87a:	d908      	bls.n	3400f88e <_free_r+0x42>
3400f87c:	6820      	ldr	r0, [r4, #0]
3400f87e:	1821      	adds	r1, r4, r0
3400f880:	428b      	cmp	r3, r1
3400f882:	bf01      	itttt	eq
3400f884:	6819      	ldreq	r1, [r3, #0]
3400f886:	685b      	ldreq	r3, [r3, #4]
3400f888:	1809      	addeq	r1, r1, r0
3400f88a:	6021      	streq	r1, [r4, #0]
3400f88c:	e7ed      	b.n	3400f86a <_free_r+0x1e>
3400f88e:	461a      	mov	r2, r3
3400f890:	685b      	ldr	r3, [r3, #4]
3400f892:	b10b      	cbz	r3, 3400f898 <_free_r+0x4c>
3400f894:	42a3      	cmp	r3, r4
3400f896:	d9fa      	bls.n	3400f88e <_free_r+0x42>
3400f898:	6811      	ldr	r1, [r2, #0]
3400f89a:	1850      	adds	r0, r2, r1
3400f89c:	42a0      	cmp	r0, r4
3400f89e:	d10b      	bne.n	3400f8b8 <_free_r+0x6c>
3400f8a0:	6820      	ldr	r0, [r4, #0]
3400f8a2:	4401      	add	r1, r0
3400f8a4:	1850      	adds	r0, r2, r1
3400f8a6:	6011      	str	r1, [r2, #0]
3400f8a8:	4283      	cmp	r3, r0
3400f8aa:	d1e0      	bne.n	3400f86e <_free_r+0x22>
3400f8ac:	6818      	ldr	r0, [r3, #0]
3400f8ae:	685b      	ldr	r3, [r3, #4]
3400f8b0:	4408      	add	r0, r1
3400f8b2:	6053      	str	r3, [r2, #4]
3400f8b4:	6010      	str	r0, [r2, #0]
3400f8b6:	e7da      	b.n	3400f86e <_free_r+0x22>
3400f8b8:	d902      	bls.n	3400f8c0 <_free_r+0x74>
3400f8ba:	230c      	movs	r3, #12
3400f8bc:	602b      	str	r3, [r5, #0]
3400f8be:	e7d6      	b.n	3400f86e <_free_r+0x22>
3400f8c0:	6820      	ldr	r0, [r4, #0]
3400f8c2:	1821      	adds	r1, r4, r0
3400f8c4:	428b      	cmp	r3, r1
3400f8c6:	bf02      	ittt	eq
3400f8c8:	6819      	ldreq	r1, [r3, #0]
3400f8ca:	685b      	ldreq	r3, [r3, #4]
3400f8cc:	1809      	addeq	r1, r1, r0
3400f8ce:	6063      	str	r3, [r4, #4]
3400f8d0:	bf08      	it	eq
3400f8d2:	6021      	streq	r1, [r4, #0]
3400f8d4:	6054      	str	r4, [r2, #4]
3400f8d6:	e7ca      	b.n	3400f86e <_free_r+0x22>
3400f8d8:	bd38      	pop	{r3, r4, r5, pc}
3400f8da:	bf00      	nop
3400f8dc:	34012e2c 	.word	0x34012e2c

3400f8e0 <_Balloc>:
3400f8e0:	b570      	push	{r4, r5, r6, lr}
3400f8e2:	69c6      	ldr	r6, [r0, #28]
3400f8e4:	4604      	mov	r4, r0
3400f8e6:	460d      	mov	r5, r1
3400f8e8:	b976      	cbnz	r6, 3400f908 <_Balloc+0x28>
3400f8ea:	2010      	movs	r0, #16
3400f8ec:	f7fd ff52 	bl	3400d794 <malloc>
3400f8f0:	4602      	mov	r2, r0
3400f8f2:	61e0      	str	r0, [r4, #28]
3400f8f4:	b920      	cbnz	r0, 3400f900 <_Balloc+0x20>
3400f8f6:	4b18      	ldr	r3, [pc, #96]	@ (3400f958 <_Balloc+0x78>)
3400f8f8:	216b      	movs	r1, #107	@ 0x6b
3400f8fa:	4818      	ldr	r0, [pc, #96]	@ (3400f95c <_Balloc+0x7c>)
3400f8fc:	f7fd ff2c 	bl	3400d758 <__assert_func>
3400f900:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400f904:	6006      	str	r6, [r0, #0]
3400f906:	60c6      	str	r6, [r0, #12]
3400f908:	69e6      	ldr	r6, [r4, #28]
3400f90a:	68f3      	ldr	r3, [r6, #12]
3400f90c:	b183      	cbz	r3, 3400f930 <_Balloc+0x50>
3400f90e:	69e3      	ldr	r3, [r4, #28]
3400f910:	68db      	ldr	r3, [r3, #12]
3400f912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3400f916:	b9b8      	cbnz	r0, 3400f948 <_Balloc+0x68>
3400f918:	2101      	movs	r1, #1
3400f91a:	4620      	mov	r0, r4
3400f91c:	fa01 f605 	lsl.w	r6, r1, r5
3400f920:	1d72      	adds	r2, r6, #5
3400f922:	0092      	lsls	r2, r2, #2
3400f924:	f000 fd68 	bl	340103f8 <_calloc_r>
3400f928:	b160      	cbz	r0, 3400f944 <_Balloc+0x64>
3400f92a:	e9c0 5601 	strd	r5, r6, [r0, #4]
3400f92e:	e00e      	b.n	3400f94e <_Balloc+0x6e>
3400f930:	2221      	movs	r2, #33	@ 0x21
3400f932:	2104      	movs	r1, #4
3400f934:	4620      	mov	r0, r4
3400f936:	f000 fd5f 	bl	340103f8 <_calloc_r>
3400f93a:	69e3      	ldr	r3, [r4, #28]
3400f93c:	60f0      	str	r0, [r6, #12]
3400f93e:	68db      	ldr	r3, [r3, #12]
3400f940:	2b00      	cmp	r3, #0
3400f942:	d1e4      	bne.n	3400f90e <_Balloc+0x2e>
3400f944:	2000      	movs	r0, #0
3400f946:	bd70      	pop	{r4, r5, r6, pc}
3400f948:	6802      	ldr	r2, [r0, #0]
3400f94a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3400f94e:	2300      	movs	r3, #0
3400f950:	e9c0 3303 	strd	r3, r3, [r0, #12]
3400f954:	e7f7      	b.n	3400f946 <_Balloc+0x66>
3400f956:	bf00      	nop
3400f958:	34011dd1 	.word	0x34011dd1
3400f95c:	34011e51 	.word	0x34011e51

3400f960 <_Bfree>:
3400f960:	b570      	push	{r4, r5, r6, lr}
3400f962:	69c6      	ldr	r6, [r0, #28]
3400f964:	4605      	mov	r5, r0
3400f966:	460c      	mov	r4, r1
3400f968:	b976      	cbnz	r6, 3400f988 <_Bfree+0x28>
3400f96a:	2010      	movs	r0, #16
3400f96c:	f7fd ff12 	bl	3400d794 <malloc>
3400f970:	4602      	mov	r2, r0
3400f972:	61e8      	str	r0, [r5, #28]
3400f974:	b920      	cbnz	r0, 3400f980 <_Bfree+0x20>
3400f976:	4b09      	ldr	r3, [pc, #36]	@ (3400f99c <_Bfree+0x3c>)
3400f978:	218f      	movs	r1, #143	@ 0x8f
3400f97a:	4809      	ldr	r0, [pc, #36]	@ (3400f9a0 <_Bfree+0x40>)
3400f97c:	f7fd feec 	bl	3400d758 <__assert_func>
3400f980:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400f984:	6006      	str	r6, [r0, #0]
3400f986:	60c6      	str	r6, [r0, #12]
3400f988:	b13c      	cbz	r4, 3400f99a <_Bfree+0x3a>
3400f98a:	69eb      	ldr	r3, [r5, #28]
3400f98c:	6862      	ldr	r2, [r4, #4]
3400f98e:	68db      	ldr	r3, [r3, #12]
3400f990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3400f994:	6021      	str	r1, [r4, #0]
3400f996:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3400f99a:	bd70      	pop	{r4, r5, r6, pc}
3400f99c:	34011dd1 	.word	0x34011dd1
3400f9a0:	34011e51 	.word	0x34011e51

3400f9a4 <__multadd>:
3400f9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400f9a8:	f101 0c14 	add.w	ip, r1, #20
3400f9ac:	4607      	mov	r7, r0
3400f9ae:	460c      	mov	r4, r1
3400f9b0:	461e      	mov	r6, r3
3400f9b2:	690d      	ldr	r5, [r1, #16]
3400f9b4:	2000      	movs	r0, #0
3400f9b6:	f8dc 3000 	ldr.w	r3, [ip]
3400f9ba:	3001      	adds	r0, #1
3400f9bc:	b299      	uxth	r1, r3
3400f9be:	4285      	cmp	r5, r0
3400f9c0:	fb02 6101 	mla	r1, r2, r1, r6
3400f9c4:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400f9c8:	ea4f 4311 	mov.w	r3, r1, lsr #16
3400f9cc:	b289      	uxth	r1, r1
3400f9ce:	fb02 3306 	mla	r3, r2, r6, r3
3400f9d2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3400f9d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400f9da:	f84c 1b04 	str.w	r1, [ip], #4
3400f9de:	dcea      	bgt.n	3400f9b6 <__multadd+0x12>
3400f9e0:	b30e      	cbz	r6, 3400fa26 <__multadd+0x82>
3400f9e2:	68a3      	ldr	r3, [r4, #8]
3400f9e4:	42ab      	cmp	r3, r5
3400f9e6:	dc19      	bgt.n	3400fa1c <__multadd+0x78>
3400f9e8:	6861      	ldr	r1, [r4, #4]
3400f9ea:	4638      	mov	r0, r7
3400f9ec:	3101      	adds	r1, #1
3400f9ee:	f7ff ff77 	bl	3400f8e0 <_Balloc>
3400f9f2:	4680      	mov	r8, r0
3400f9f4:	b928      	cbnz	r0, 3400fa02 <__multadd+0x5e>
3400f9f6:	4602      	mov	r2, r0
3400f9f8:	4b0c      	ldr	r3, [pc, #48]	@ (3400fa2c <__multadd+0x88>)
3400f9fa:	21ba      	movs	r1, #186	@ 0xba
3400f9fc:	480c      	ldr	r0, [pc, #48]	@ (3400fa30 <__multadd+0x8c>)
3400f9fe:	f7fd feab 	bl	3400d758 <__assert_func>
3400fa02:	6922      	ldr	r2, [r4, #16]
3400fa04:	f104 010c 	add.w	r1, r4, #12
3400fa08:	300c      	adds	r0, #12
3400fa0a:	3202      	adds	r2, #2
3400fa0c:	0092      	lsls	r2, r2, #2
3400fa0e:	f7ff f91c 	bl	3400ec4a <memcpy>
3400fa12:	4621      	mov	r1, r4
3400fa14:	4644      	mov	r4, r8
3400fa16:	4638      	mov	r0, r7
3400fa18:	f7ff ffa2 	bl	3400f960 <_Bfree>
3400fa1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3400fa20:	3501      	adds	r5, #1
3400fa22:	615e      	str	r6, [r3, #20]
3400fa24:	6125      	str	r5, [r4, #16]
3400fa26:	4620      	mov	r0, r4
3400fa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400fa2c:	34011e40 	.word	0x34011e40
3400fa30:	34011e51 	.word	0x34011e51

3400fa34 <__hi0bits>:
3400fa34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3400fa38:	4603      	mov	r3, r0
3400fa3a:	bf36      	itet	cc
3400fa3c:	0403      	lslcc	r3, r0, #16
3400fa3e:	2000      	movcs	r0, #0
3400fa40:	2010      	movcc	r0, #16
3400fa42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400fa46:	bf3c      	itt	cc
3400fa48:	021b      	lslcc	r3, r3, #8
3400fa4a:	3008      	addcc	r0, #8
3400fa4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fa50:	bf3c      	itt	cc
3400fa52:	011b      	lslcc	r3, r3, #4
3400fa54:	3004      	addcc	r0, #4
3400fa56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400fa5a:	bf3c      	itt	cc
3400fa5c:	009b      	lslcc	r3, r3, #2
3400fa5e:	3002      	addcc	r0, #2
3400fa60:	2b00      	cmp	r3, #0
3400fa62:	db05      	blt.n	3400fa70 <__hi0bits+0x3c>
3400fa64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3400fa68:	f100 0001 	add.w	r0, r0, #1
3400fa6c:	bf08      	it	eq
3400fa6e:	2020      	moveq	r0, #32
3400fa70:	4770      	bx	lr

3400fa72 <__lo0bits>:
3400fa72:	6803      	ldr	r3, [r0, #0]
3400fa74:	4602      	mov	r2, r0
3400fa76:	f013 0007 	ands.w	r0, r3, #7
3400fa7a:	d00b      	beq.n	3400fa94 <__lo0bits+0x22>
3400fa7c:	07d9      	lsls	r1, r3, #31
3400fa7e:	d421      	bmi.n	3400fac4 <__lo0bits+0x52>
3400fa80:	0798      	lsls	r0, r3, #30
3400fa82:	bf47      	ittee	mi
3400fa84:	085b      	lsrmi	r3, r3, #1
3400fa86:	2001      	movmi	r0, #1
3400fa88:	089b      	lsrpl	r3, r3, #2
3400fa8a:	2002      	movpl	r0, #2
3400fa8c:	bf4c      	ite	mi
3400fa8e:	6013      	strmi	r3, [r2, #0]
3400fa90:	6013      	strpl	r3, [r2, #0]
3400fa92:	4770      	bx	lr
3400fa94:	b299      	uxth	r1, r3
3400fa96:	b909      	cbnz	r1, 3400fa9c <__lo0bits+0x2a>
3400fa98:	0c1b      	lsrs	r3, r3, #16
3400fa9a:	2010      	movs	r0, #16
3400fa9c:	b2d9      	uxtb	r1, r3
3400fa9e:	b909      	cbnz	r1, 3400faa4 <__lo0bits+0x32>
3400faa0:	3008      	adds	r0, #8
3400faa2:	0a1b      	lsrs	r3, r3, #8
3400faa4:	0719      	lsls	r1, r3, #28
3400faa6:	bf04      	itt	eq
3400faa8:	091b      	lsreq	r3, r3, #4
3400faaa:	3004      	addeq	r0, #4
3400faac:	0799      	lsls	r1, r3, #30
3400faae:	bf04      	itt	eq
3400fab0:	089b      	lsreq	r3, r3, #2
3400fab2:	3002      	addeq	r0, #2
3400fab4:	07d9      	lsls	r1, r3, #31
3400fab6:	d403      	bmi.n	3400fac0 <__lo0bits+0x4e>
3400fab8:	085b      	lsrs	r3, r3, #1
3400faba:	f100 0001 	add.w	r0, r0, #1
3400fabe:	d003      	beq.n	3400fac8 <__lo0bits+0x56>
3400fac0:	6013      	str	r3, [r2, #0]
3400fac2:	4770      	bx	lr
3400fac4:	2000      	movs	r0, #0
3400fac6:	4770      	bx	lr
3400fac8:	2020      	movs	r0, #32
3400faca:	4770      	bx	lr

3400facc <__i2b>:
3400facc:	b510      	push	{r4, lr}
3400face:	460c      	mov	r4, r1
3400fad0:	2101      	movs	r1, #1
3400fad2:	f7ff ff05 	bl	3400f8e0 <_Balloc>
3400fad6:	4602      	mov	r2, r0
3400fad8:	b928      	cbnz	r0, 3400fae6 <__i2b+0x1a>
3400fada:	4b05      	ldr	r3, [pc, #20]	@ (3400faf0 <__i2b+0x24>)
3400fadc:	f240 1145 	movw	r1, #325	@ 0x145
3400fae0:	4804      	ldr	r0, [pc, #16]	@ (3400faf4 <__i2b+0x28>)
3400fae2:	f7fd fe39 	bl	3400d758 <__assert_func>
3400fae6:	2301      	movs	r3, #1
3400fae8:	6144      	str	r4, [r0, #20]
3400faea:	6103      	str	r3, [r0, #16]
3400faec:	bd10      	pop	{r4, pc}
3400faee:	bf00      	nop
3400faf0:	34011e40 	.word	0x34011e40
3400faf4:	34011e51 	.word	0x34011e51

3400faf8 <__multiply>:
3400faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400fafc:	4617      	mov	r7, r2
3400fafe:	690a      	ldr	r2, [r1, #16]
3400fb00:	4689      	mov	r9, r1
3400fb02:	b085      	sub	sp, #20
3400fb04:	693b      	ldr	r3, [r7, #16]
3400fb06:	429a      	cmp	r2, r3
3400fb08:	bfa2      	ittt	ge
3400fb0a:	463b      	movge	r3, r7
3400fb0c:	460f      	movge	r7, r1
3400fb0e:	4699      	movge	r9, r3
3400fb10:	693d      	ldr	r5, [r7, #16]
3400fb12:	68bb      	ldr	r3, [r7, #8]
3400fb14:	f8d9 a010 	ldr.w	sl, [r9, #16]
3400fb18:	6879      	ldr	r1, [r7, #4]
3400fb1a:	eb05 060a 	add.w	r6, r5, sl
3400fb1e:	42b3      	cmp	r3, r6
3400fb20:	bfb8      	it	lt
3400fb22:	3101      	addlt	r1, #1
3400fb24:	f7ff fedc 	bl	3400f8e0 <_Balloc>
3400fb28:	b930      	cbnz	r0, 3400fb38 <__multiply+0x40>
3400fb2a:	4602      	mov	r2, r0
3400fb2c:	4b42      	ldr	r3, [pc, #264]	@ (3400fc38 <__multiply+0x140>)
3400fb2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400fb32:	4842      	ldr	r0, [pc, #264]	@ (3400fc3c <__multiply+0x144>)
3400fb34:	f7fd fe10 	bl	3400d758 <__assert_func>
3400fb38:	f100 0414 	add.w	r4, r0, #20
3400fb3c:	2200      	movs	r2, #0
3400fb3e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3400fb42:	4623      	mov	r3, r4
3400fb44:	4573      	cmp	r3, lr
3400fb46:	d320      	bcc.n	3400fb8a <__multiply+0x92>
3400fb48:	f107 0814 	add.w	r8, r7, #20
3400fb4c:	f109 0114 	add.w	r1, r9, #20
3400fb50:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3400fb54:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3400fb58:	9302      	str	r3, [sp, #8]
3400fb5a:	1beb      	subs	r3, r5, r7
3400fb5c:	3715      	adds	r7, #21
3400fb5e:	3b15      	subs	r3, #21
3400fb60:	f023 0303 	bic.w	r3, r3, #3
3400fb64:	3304      	adds	r3, #4
3400fb66:	42bd      	cmp	r5, r7
3400fb68:	bf38      	it	cc
3400fb6a:	2304      	movcc	r3, #4
3400fb6c:	9301      	str	r3, [sp, #4]
3400fb6e:	9b02      	ldr	r3, [sp, #8]
3400fb70:	9103      	str	r1, [sp, #12]
3400fb72:	428b      	cmp	r3, r1
3400fb74:	d80c      	bhi.n	3400fb90 <__multiply+0x98>
3400fb76:	2e00      	cmp	r6, #0
3400fb78:	dd03      	ble.n	3400fb82 <__multiply+0x8a>
3400fb7a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3400fb7e:	2b00      	cmp	r3, #0
3400fb80:	d057      	beq.n	3400fc32 <__multiply+0x13a>
3400fb82:	6106      	str	r6, [r0, #16]
3400fb84:	b005      	add	sp, #20
3400fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400fb8a:	f843 2b04 	str.w	r2, [r3], #4
3400fb8e:	e7d9      	b.n	3400fb44 <__multiply+0x4c>
3400fb90:	f8b1 a000 	ldrh.w	sl, [r1]
3400fb94:	f1ba 0f00 	cmp.w	sl, #0
3400fb98:	d021      	beq.n	3400fbde <__multiply+0xe6>
3400fb9a:	46c4      	mov	ip, r8
3400fb9c:	46a1      	mov	r9, r4
3400fb9e:	2700      	movs	r7, #0
3400fba0:	f85c 2b04 	ldr.w	r2, [ip], #4
3400fba4:	f8d9 3000 	ldr.w	r3, [r9]
3400fba8:	fa1f fb82 	uxth.w	fp, r2
3400fbac:	4565      	cmp	r5, ip
3400fbae:	b29b      	uxth	r3, r3
3400fbb0:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400fbb4:	fb0a 330b 	mla	r3, sl, fp, r3
3400fbb8:	443b      	add	r3, r7
3400fbba:	f8d9 7000 	ldr.w	r7, [r9]
3400fbbe:	ea4f 4717 	mov.w	r7, r7, lsr #16
3400fbc2:	fb0a 7202 	mla	r2, sl, r2, r7
3400fbc6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3400fbca:	b29b      	uxth	r3, r3
3400fbcc:	ea4f 4712 	mov.w	r7, r2, lsr #16
3400fbd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400fbd4:	f849 3b04 	str.w	r3, [r9], #4
3400fbd8:	d8e2      	bhi.n	3400fba0 <__multiply+0xa8>
3400fbda:	9b01      	ldr	r3, [sp, #4]
3400fbdc:	50e7      	str	r7, [r4, r3]
3400fbde:	9b03      	ldr	r3, [sp, #12]
3400fbe0:	3104      	adds	r1, #4
3400fbe2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3400fbe6:	f1b9 0f00 	cmp.w	r9, #0
3400fbea:	d020      	beq.n	3400fc2e <__multiply+0x136>
3400fbec:	6823      	ldr	r3, [r4, #0]
3400fbee:	4647      	mov	r7, r8
3400fbf0:	46a4      	mov	ip, r4
3400fbf2:	f04f 0a00 	mov.w	sl, #0
3400fbf6:	f8b7 b000 	ldrh.w	fp, [r7]
3400fbfa:	b29b      	uxth	r3, r3
3400fbfc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3400fc00:	fb09 220b 	mla	r2, r9, fp, r2
3400fc04:	4452      	add	r2, sl
3400fc06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400fc0a:	f84c 3b04 	str.w	r3, [ip], #4
3400fc0e:	f857 3b04 	ldr.w	r3, [r7], #4
3400fc12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400fc16:	f8bc 3000 	ldrh.w	r3, [ip]
3400fc1a:	42bd      	cmp	r5, r7
3400fc1c:	fb09 330a 	mla	r3, r9, sl, r3
3400fc20:	eb03 4312 	add.w	r3, r3, r2, lsr #16
3400fc24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400fc28:	d8e5      	bhi.n	3400fbf6 <__multiply+0xfe>
3400fc2a:	9a01      	ldr	r2, [sp, #4]
3400fc2c:	50a3      	str	r3, [r4, r2]
3400fc2e:	3404      	adds	r4, #4
3400fc30:	e79d      	b.n	3400fb6e <__multiply+0x76>
3400fc32:	3e01      	subs	r6, #1
3400fc34:	e79f      	b.n	3400fb76 <__multiply+0x7e>
3400fc36:	bf00      	nop
3400fc38:	34011e40 	.word	0x34011e40
3400fc3c:	34011e51 	.word	0x34011e51

3400fc40 <__pow5mult>:
3400fc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400fc44:	4615      	mov	r5, r2
3400fc46:	f012 0203 	ands.w	r2, r2, #3
3400fc4a:	4607      	mov	r7, r0
3400fc4c:	460e      	mov	r6, r1
3400fc4e:	d007      	beq.n	3400fc60 <__pow5mult+0x20>
3400fc50:	3a01      	subs	r2, #1
3400fc52:	4c25      	ldr	r4, [pc, #148]	@ (3400fce8 <__pow5mult+0xa8>)
3400fc54:	2300      	movs	r3, #0
3400fc56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3400fc5a:	f7ff fea3 	bl	3400f9a4 <__multadd>
3400fc5e:	4606      	mov	r6, r0
3400fc60:	10ad      	asrs	r5, r5, #2
3400fc62:	d03d      	beq.n	3400fce0 <__pow5mult+0xa0>
3400fc64:	69fc      	ldr	r4, [r7, #28]
3400fc66:	b97c      	cbnz	r4, 3400fc88 <__pow5mult+0x48>
3400fc68:	2010      	movs	r0, #16
3400fc6a:	f7fd fd93 	bl	3400d794 <malloc>
3400fc6e:	4602      	mov	r2, r0
3400fc70:	61f8      	str	r0, [r7, #28]
3400fc72:	b928      	cbnz	r0, 3400fc80 <__pow5mult+0x40>
3400fc74:	4b1d      	ldr	r3, [pc, #116]	@ (3400fcec <__pow5mult+0xac>)
3400fc76:	f240 11b3 	movw	r1, #435	@ 0x1b3
3400fc7a:	481d      	ldr	r0, [pc, #116]	@ (3400fcf0 <__pow5mult+0xb0>)
3400fc7c:	f7fd fd6c 	bl	3400d758 <__assert_func>
3400fc80:	e9c0 4401 	strd	r4, r4, [r0, #4]
3400fc84:	6004      	str	r4, [r0, #0]
3400fc86:	60c4      	str	r4, [r0, #12]
3400fc88:	f8d7 801c 	ldr.w	r8, [r7, #28]
3400fc8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
3400fc90:	b94c      	cbnz	r4, 3400fca6 <__pow5mult+0x66>
3400fc92:	f240 2171 	movw	r1, #625	@ 0x271
3400fc96:	4638      	mov	r0, r7
3400fc98:	f7ff ff18 	bl	3400facc <__i2b>
3400fc9c:	2300      	movs	r3, #0
3400fc9e:	4604      	mov	r4, r0
3400fca0:	f8c8 0008 	str.w	r0, [r8, #8]
3400fca4:	6003      	str	r3, [r0, #0]
3400fca6:	f04f 0900 	mov.w	r9, #0
3400fcaa:	07eb      	lsls	r3, r5, #31
3400fcac:	d50a      	bpl.n	3400fcc4 <__pow5mult+0x84>
3400fcae:	4631      	mov	r1, r6
3400fcb0:	4622      	mov	r2, r4
3400fcb2:	4638      	mov	r0, r7
3400fcb4:	f7ff ff20 	bl	3400faf8 <__multiply>
3400fcb8:	4680      	mov	r8, r0
3400fcba:	4631      	mov	r1, r6
3400fcbc:	4638      	mov	r0, r7
3400fcbe:	4646      	mov	r6, r8
3400fcc0:	f7ff fe4e 	bl	3400f960 <_Bfree>
3400fcc4:	106d      	asrs	r5, r5, #1
3400fcc6:	d00b      	beq.n	3400fce0 <__pow5mult+0xa0>
3400fcc8:	6820      	ldr	r0, [r4, #0]
3400fcca:	b938      	cbnz	r0, 3400fcdc <__pow5mult+0x9c>
3400fccc:	4622      	mov	r2, r4
3400fcce:	4621      	mov	r1, r4
3400fcd0:	4638      	mov	r0, r7
3400fcd2:	f7ff ff11 	bl	3400faf8 <__multiply>
3400fcd6:	6020      	str	r0, [r4, #0]
3400fcd8:	f8c0 9000 	str.w	r9, [r0]
3400fcdc:	4604      	mov	r4, r0
3400fcde:	e7e4      	b.n	3400fcaa <__pow5mult+0x6a>
3400fce0:	4630      	mov	r0, r6
3400fce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400fce6:	bf00      	nop
3400fce8:	3401214c 	.word	0x3401214c
3400fcec:	34011dd1 	.word	0x34011dd1
3400fcf0:	34011e51 	.word	0x34011e51

3400fcf4 <__lshift>:
3400fcf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400fcf8:	460c      	mov	r4, r1
3400fcfa:	4607      	mov	r7, r0
3400fcfc:	4691      	mov	r9, r2
3400fcfe:	ea4f 1a62 	mov.w	sl, r2, asr #5
3400fd02:	6923      	ldr	r3, [r4, #16]
3400fd04:	6849      	ldr	r1, [r1, #4]
3400fd06:	eb03 1862 	add.w	r8, r3, r2, asr #5
3400fd0a:	68a3      	ldr	r3, [r4, #8]
3400fd0c:	f108 0601 	add.w	r6, r8, #1
3400fd10:	42b3      	cmp	r3, r6
3400fd12:	db0b      	blt.n	3400fd2c <__lshift+0x38>
3400fd14:	4638      	mov	r0, r7
3400fd16:	f7ff fde3 	bl	3400f8e0 <_Balloc>
3400fd1a:	4605      	mov	r5, r0
3400fd1c:	b948      	cbnz	r0, 3400fd32 <__lshift+0x3e>
3400fd1e:	4602      	mov	r2, r0
3400fd20:	4b28      	ldr	r3, [pc, #160]	@ (3400fdc4 <__lshift+0xd0>)
3400fd22:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400fd26:	4828      	ldr	r0, [pc, #160]	@ (3400fdc8 <__lshift+0xd4>)
3400fd28:	f7fd fd16 	bl	3400d758 <__assert_func>
3400fd2c:	3101      	adds	r1, #1
3400fd2e:	005b      	lsls	r3, r3, #1
3400fd30:	e7ee      	b.n	3400fd10 <__lshift+0x1c>
3400fd32:	2300      	movs	r3, #0
3400fd34:	f100 0114 	add.w	r1, r0, #20
3400fd38:	f100 0210 	add.w	r2, r0, #16
3400fd3c:	4618      	mov	r0, r3
3400fd3e:	4553      	cmp	r3, sl
3400fd40:	db33      	blt.n	3400fdaa <__lshift+0xb6>
3400fd42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3400fd46:	f104 0314 	add.w	r3, r4, #20
3400fd4a:	6920      	ldr	r0, [r4, #16]
3400fd4c:	f019 091f 	ands.w	r9, r9, #31
3400fd50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3400fd54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3400fd58:	d02b      	beq.n	3400fdb2 <__lshift+0xbe>
3400fd5a:	f1c9 0e20 	rsb	lr, r9, #32
3400fd5e:	468a      	mov	sl, r1
3400fd60:	2200      	movs	r2, #0
3400fd62:	6818      	ldr	r0, [r3, #0]
3400fd64:	fa00 f009 	lsl.w	r0, r0, r9
3400fd68:	4310      	orrs	r0, r2
3400fd6a:	f84a 0b04 	str.w	r0, [sl], #4
3400fd6e:	f853 2b04 	ldr.w	r2, [r3], #4
3400fd72:	459c      	cmp	ip, r3
3400fd74:	fa22 f20e 	lsr.w	r2, r2, lr
3400fd78:	d8f3      	bhi.n	3400fd62 <__lshift+0x6e>
3400fd7a:	ebac 0304 	sub.w	r3, ip, r4
3400fd7e:	f104 0015 	add.w	r0, r4, #21
3400fd82:	3b15      	subs	r3, #21
3400fd84:	f023 0303 	bic.w	r3, r3, #3
3400fd88:	3304      	adds	r3, #4
3400fd8a:	4560      	cmp	r0, ip
3400fd8c:	bf88      	it	hi
3400fd8e:	2304      	movhi	r3, #4
3400fd90:	50ca      	str	r2, [r1, r3]
3400fd92:	b10a      	cbz	r2, 3400fd98 <__lshift+0xa4>
3400fd94:	f108 0602 	add.w	r6, r8, #2
3400fd98:	3e01      	subs	r6, #1
3400fd9a:	4638      	mov	r0, r7
3400fd9c:	4621      	mov	r1, r4
3400fd9e:	612e      	str	r6, [r5, #16]
3400fda0:	f7ff fdde 	bl	3400f960 <_Bfree>
3400fda4:	4628      	mov	r0, r5
3400fda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400fdaa:	3301      	adds	r3, #1
3400fdac:	f842 0f04 	str.w	r0, [r2, #4]!
3400fdb0:	e7c5      	b.n	3400fd3e <__lshift+0x4a>
3400fdb2:	3904      	subs	r1, #4
3400fdb4:	f853 2b04 	ldr.w	r2, [r3], #4
3400fdb8:	459c      	cmp	ip, r3
3400fdba:	f841 2f04 	str.w	r2, [r1, #4]!
3400fdbe:	d8f9      	bhi.n	3400fdb4 <__lshift+0xc0>
3400fdc0:	e7ea      	b.n	3400fd98 <__lshift+0xa4>
3400fdc2:	bf00      	nop
3400fdc4:	34011e40 	.word	0x34011e40
3400fdc8:	34011e51 	.word	0x34011e51

3400fdcc <__mcmp>:
3400fdcc:	4603      	mov	r3, r0
3400fdce:	690a      	ldr	r2, [r1, #16]
3400fdd0:	6900      	ldr	r0, [r0, #16]
3400fdd2:	1a80      	subs	r0, r0, r2
3400fdd4:	b530      	push	{r4, r5, lr}
3400fdd6:	d10e      	bne.n	3400fdf6 <__mcmp+0x2a>
3400fdd8:	3314      	adds	r3, #20
3400fdda:	3114      	adds	r1, #20
3400fddc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3400fde0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3400fde4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3400fde8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3400fdec:	4295      	cmp	r5, r2
3400fdee:	d003      	beq.n	3400fdf8 <__mcmp+0x2c>
3400fdf0:	d205      	bcs.n	3400fdfe <__mcmp+0x32>
3400fdf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400fdf6:	bd30      	pop	{r4, r5, pc}
3400fdf8:	42a3      	cmp	r3, r4
3400fdfa:	d3f3      	bcc.n	3400fde4 <__mcmp+0x18>
3400fdfc:	e7fb      	b.n	3400fdf6 <__mcmp+0x2a>
3400fdfe:	2001      	movs	r0, #1
3400fe00:	e7f9      	b.n	3400fdf6 <__mcmp+0x2a>
	...

3400fe04 <__mdiff>:
3400fe04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400fe08:	4689      	mov	r9, r1
3400fe0a:	4606      	mov	r6, r0
3400fe0c:	4611      	mov	r1, r2
3400fe0e:	4614      	mov	r4, r2
3400fe10:	4648      	mov	r0, r9
3400fe12:	f7ff ffdb 	bl	3400fdcc <__mcmp>
3400fe16:	1e05      	subs	r5, r0, #0
3400fe18:	d112      	bne.n	3400fe40 <__mdiff+0x3c>
3400fe1a:	4629      	mov	r1, r5
3400fe1c:	4630      	mov	r0, r6
3400fe1e:	f7ff fd5f 	bl	3400f8e0 <_Balloc>
3400fe22:	4602      	mov	r2, r0
3400fe24:	b928      	cbnz	r0, 3400fe32 <__mdiff+0x2e>
3400fe26:	4b41      	ldr	r3, [pc, #260]	@ (3400ff2c <__mdiff+0x128>)
3400fe28:	f240 2137 	movw	r1, #567	@ 0x237
3400fe2c:	4840      	ldr	r0, [pc, #256]	@ (3400ff30 <__mdiff+0x12c>)
3400fe2e:	f7fd fc93 	bl	3400d758 <__assert_func>
3400fe32:	2301      	movs	r3, #1
3400fe34:	e9c0 3504 	strd	r3, r5, [r0, #16]
3400fe38:	4610      	mov	r0, r2
3400fe3a:	b003      	add	sp, #12
3400fe3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400fe40:	bfbc      	itt	lt
3400fe42:	464b      	movlt	r3, r9
3400fe44:	46a1      	movlt	r9, r4
3400fe46:	4630      	mov	r0, r6
3400fe48:	bfb8      	it	lt
3400fe4a:	2501      	movlt	r5, #1
3400fe4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
3400fe50:	bfb4      	ite	lt
3400fe52:	461c      	movlt	r4, r3
3400fe54:	2500      	movge	r5, #0
3400fe56:	f7ff fd43 	bl	3400f8e0 <_Balloc>
3400fe5a:	4602      	mov	r2, r0
3400fe5c:	b918      	cbnz	r0, 3400fe66 <__mdiff+0x62>
3400fe5e:	4b33      	ldr	r3, [pc, #204]	@ (3400ff2c <__mdiff+0x128>)
3400fe60:	f240 2145 	movw	r1, #581	@ 0x245
3400fe64:	e7e2      	b.n	3400fe2c <__mdiff+0x28>
3400fe66:	f8d9 7010 	ldr.w	r7, [r9, #16]
3400fe6a:	f104 0e14 	add.w	lr, r4, #20
3400fe6e:	6926      	ldr	r6, [r4, #16]
3400fe70:	f100 0b14 	add.w	fp, r0, #20
3400fe74:	60c5      	str	r5, [r0, #12]
3400fe76:	f109 0514 	add.w	r5, r9, #20
3400fe7a:	f109 0310 	add.w	r3, r9, #16
3400fe7e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3400fe82:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3400fe86:	46d9      	mov	r9, fp
3400fe88:	f04f 0c00 	mov.w	ip, #0
3400fe8c:	9301      	str	r3, [sp, #4]
3400fe8e:	9b01      	ldr	r3, [sp, #4]
3400fe90:	f85e 0b04 	ldr.w	r0, [lr], #4
3400fe94:	f853 af04 	ldr.w	sl, [r3, #4]!
3400fe98:	4576      	cmp	r6, lr
3400fe9a:	9301      	str	r3, [sp, #4]
3400fe9c:	fa1f f38a 	uxth.w	r3, sl
3400fea0:	4619      	mov	r1, r3
3400fea2:	b283      	uxth	r3, r0
3400fea4:	ea4f 4010 	mov.w	r0, r0, lsr #16
3400fea8:	eba1 0303 	sub.w	r3, r1, r3
3400feac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3400feb0:	4463      	add	r3, ip
3400feb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
3400feb6:	b29b      	uxth	r3, r3
3400feb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
3400febc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400fec0:	f849 3b04 	str.w	r3, [r9], #4
3400fec4:	d8e3      	bhi.n	3400fe8e <__mdiff+0x8a>
3400fec6:	1b33      	subs	r3, r6, r4
3400fec8:	3415      	adds	r4, #21
3400feca:	3b15      	subs	r3, #21
3400fecc:	f023 0303 	bic.w	r3, r3, #3
3400fed0:	3304      	adds	r3, #4
3400fed2:	42a6      	cmp	r6, r4
3400fed4:	bf38      	it	cc
3400fed6:	2304      	movcc	r3, #4
3400fed8:	441d      	add	r5, r3
3400feda:	445b      	add	r3, fp
3400fedc:	462c      	mov	r4, r5
3400fede:	461e      	mov	r6, r3
3400fee0:	4544      	cmp	r4, r8
3400fee2:	d30e      	bcc.n	3400ff02 <__mdiff+0xfe>
3400fee4:	f108 0103 	add.w	r1, r8, #3
3400fee8:	1b49      	subs	r1, r1, r5
3400feea:	3d03      	subs	r5, #3
3400feec:	f021 0103 	bic.w	r1, r1, #3
3400fef0:	45a8      	cmp	r8, r5
3400fef2:	bf38      	it	cc
3400fef4:	2100      	movcc	r1, #0
3400fef6:	440b      	add	r3, r1
3400fef8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3400fefc:	b199      	cbz	r1, 3400ff26 <__mdiff+0x122>
3400fefe:	6117      	str	r7, [r2, #16]
3400ff00:	e79a      	b.n	3400fe38 <__mdiff+0x34>
3400ff02:	f854 1b04 	ldr.w	r1, [r4], #4
3400ff06:	46e6      	mov	lr, ip
3400ff08:	fa1f fc81 	uxth.w	ip, r1
3400ff0c:	0c08      	lsrs	r0, r1, #16
3400ff0e:	4471      	add	r1, lr
3400ff10:	44f4      	add	ip, lr
3400ff12:	b289      	uxth	r1, r1
3400ff14:	eb00 402c 	add.w	r0, r0, ip, asr #16
3400ff18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3400ff1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
3400ff20:	f846 1b04 	str.w	r1, [r6], #4
3400ff24:	e7dc      	b.n	3400fee0 <__mdiff+0xdc>
3400ff26:	3f01      	subs	r7, #1
3400ff28:	e7e6      	b.n	3400fef8 <__mdiff+0xf4>
3400ff2a:	bf00      	nop
3400ff2c:	34011e40 	.word	0x34011e40
3400ff30:	34011e51 	.word	0x34011e51

3400ff34 <__d2b>:
3400ff34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400ff38:	460f      	mov	r7, r1
3400ff3a:	2101      	movs	r1, #1
3400ff3c:	4616      	mov	r6, r2
3400ff3e:	ec59 8b10 	vmov	r8, r9, d0
3400ff42:	f7ff fccd 	bl	3400f8e0 <_Balloc>
3400ff46:	4604      	mov	r4, r0
3400ff48:	b930      	cbnz	r0, 3400ff58 <__d2b+0x24>
3400ff4a:	4602      	mov	r2, r0
3400ff4c:	4b23      	ldr	r3, [pc, #140]	@ (3400ffdc <__d2b+0xa8>)
3400ff4e:	f240 310f 	movw	r1, #783	@ 0x30f
3400ff52:	4823      	ldr	r0, [pc, #140]	@ (3400ffe0 <__d2b+0xac>)
3400ff54:	f7fd fc00 	bl	3400d758 <__assert_func>
3400ff58:	f3c9 550a 	ubfx	r5, r9, #20, #11
3400ff5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
3400ff60:	b10d      	cbz	r5, 3400ff66 <__d2b+0x32>
3400ff62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3400ff66:	9301      	str	r3, [sp, #4]
3400ff68:	f1b8 0300 	subs.w	r3, r8, #0
3400ff6c:	d023      	beq.n	3400ffb6 <__d2b+0x82>
3400ff6e:	4668      	mov	r0, sp
3400ff70:	9300      	str	r3, [sp, #0]
3400ff72:	f7ff fd7e 	bl	3400fa72 <__lo0bits>
3400ff76:	e9dd 1200 	ldrd	r1, r2, [sp]
3400ff7a:	b1d0      	cbz	r0, 3400ffb2 <__d2b+0x7e>
3400ff7c:	f1c0 0320 	rsb	r3, r0, #32
3400ff80:	fa02 f303 	lsl.w	r3, r2, r3
3400ff84:	40c2      	lsrs	r2, r0
3400ff86:	430b      	orrs	r3, r1
3400ff88:	9201      	str	r2, [sp, #4]
3400ff8a:	6163      	str	r3, [r4, #20]
3400ff8c:	9b01      	ldr	r3, [sp, #4]
3400ff8e:	2b00      	cmp	r3, #0
3400ff90:	61a3      	str	r3, [r4, #24]
3400ff92:	bf0c      	ite	eq
3400ff94:	2201      	moveq	r2, #1
3400ff96:	2202      	movne	r2, #2
3400ff98:	6122      	str	r2, [r4, #16]
3400ff9a:	b1a5      	cbz	r5, 3400ffc6 <__d2b+0x92>
3400ff9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3400ffa0:	4405      	add	r5, r0
3400ffa2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3400ffa6:	603d      	str	r5, [r7, #0]
3400ffa8:	6030      	str	r0, [r6, #0]
3400ffaa:	4620      	mov	r0, r4
3400ffac:	b003      	add	sp, #12
3400ffae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3400ffb2:	6161      	str	r1, [r4, #20]
3400ffb4:	e7ea      	b.n	3400ff8c <__d2b+0x58>
3400ffb6:	a801      	add	r0, sp, #4
3400ffb8:	f7ff fd5b 	bl	3400fa72 <__lo0bits>
3400ffbc:	9b01      	ldr	r3, [sp, #4]
3400ffbe:	3020      	adds	r0, #32
3400ffc0:	2201      	movs	r2, #1
3400ffc2:	6163      	str	r3, [r4, #20]
3400ffc4:	e7e8      	b.n	3400ff98 <__d2b+0x64>
3400ffc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3400ffca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3400ffce:	6038      	str	r0, [r7, #0]
3400ffd0:	6918      	ldr	r0, [r3, #16]
3400ffd2:	f7ff fd2f 	bl	3400fa34 <__hi0bits>
3400ffd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3400ffda:	e7e5      	b.n	3400ffa8 <__d2b+0x74>
3400ffdc:	34011e40 	.word	0x34011e40
3400ffe0:	34011e51 	.word	0x34011e51

3400ffe4 <__sfputc_r>:
3400ffe4:	6893      	ldr	r3, [r2, #8]
3400ffe6:	3b01      	subs	r3, #1
3400ffe8:	2b00      	cmp	r3, #0
3400ffea:	b410      	push	{r4}
3400ffec:	6093      	str	r3, [r2, #8]
3400ffee:	da08      	bge.n	34010002 <__sfputc_r+0x1e>
3400fff0:	6994      	ldr	r4, [r2, #24]
3400fff2:	42a3      	cmp	r3, r4
3400fff4:	db01      	blt.n	3400fffa <__sfputc_r+0x16>
3400fff6:	290a      	cmp	r1, #10
3400fff8:	d103      	bne.n	34010002 <__sfputc_r+0x1e>
3400fffa:	f85d 4b04 	ldr.w	r4, [sp], #4
3400fffe:	f7fe bb00 	b.w	3400e602 <__swbuf_r>
34010002:	6813      	ldr	r3, [r2, #0]
34010004:	1c58      	adds	r0, r3, #1
34010006:	6010      	str	r0, [r2, #0]
34010008:	4608      	mov	r0, r1
3401000a:	7019      	strb	r1, [r3, #0]
3401000c:	f85d 4b04 	ldr.w	r4, [sp], #4
34010010:	4770      	bx	lr

34010012 <__sfputs_r>:
34010012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010014:	4606      	mov	r6, r0
34010016:	460f      	mov	r7, r1
34010018:	4614      	mov	r4, r2
3401001a:	18d5      	adds	r5, r2, r3
3401001c:	42ac      	cmp	r4, r5
3401001e:	d101      	bne.n	34010024 <__sfputs_r+0x12>
34010020:	2000      	movs	r0, #0
34010022:	e007      	b.n	34010034 <__sfputs_r+0x22>
34010024:	463a      	mov	r2, r7
34010026:	f814 1b01 	ldrb.w	r1, [r4], #1
3401002a:	4630      	mov	r0, r6
3401002c:	f7ff ffda 	bl	3400ffe4 <__sfputc_r>
34010030:	1c43      	adds	r3, r0, #1
34010032:	d1f3      	bne.n	3401001c <__sfputs_r+0xa>
34010034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

34010038 <_vfiprintf_r>:
34010038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401003c:	460d      	mov	r5, r1
3401003e:	b09d      	sub	sp, #116	@ 0x74
34010040:	4614      	mov	r4, r2
34010042:	4698      	mov	r8, r3
34010044:	4606      	mov	r6, r0
34010046:	b118      	cbz	r0, 34010050 <_vfiprintf_r+0x18>
34010048:	6a03      	ldr	r3, [r0, #32]
3401004a:	b90b      	cbnz	r3, 34010050 <_vfiprintf_r+0x18>
3401004c:	f7fe f9de 	bl	3400e40c <__sinit>
34010050:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34010052:	07d9      	lsls	r1, r3, #31
34010054:	d405      	bmi.n	34010062 <_vfiprintf_r+0x2a>
34010056:	89ab      	ldrh	r3, [r5, #12]
34010058:	059a      	lsls	r2, r3, #22
3401005a:	d402      	bmi.n	34010062 <_vfiprintf_r+0x2a>
3401005c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401005e:	f7fe fde4 	bl	3400ec2a <__retarget_lock_acquire_recursive>
34010062:	89ab      	ldrh	r3, [r5, #12]
34010064:	071b      	lsls	r3, r3, #28
34010066:	d501      	bpl.n	3401006c <_vfiprintf_r+0x34>
34010068:	692b      	ldr	r3, [r5, #16]
3401006a:	b99b      	cbnz	r3, 34010094 <_vfiprintf_r+0x5c>
3401006c:	4629      	mov	r1, r5
3401006e:	4630      	mov	r0, r6
34010070:	f7fe fb06 	bl	3400e680 <__swsetup_r>
34010074:	b170      	cbz	r0, 34010094 <_vfiprintf_r+0x5c>
34010076:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34010078:	07dc      	lsls	r4, r3, #31
3401007a:	d504      	bpl.n	34010086 <_vfiprintf_r+0x4e>
3401007c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34010080:	b01d      	add	sp, #116	@ 0x74
34010082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34010086:	89ab      	ldrh	r3, [r5, #12]
34010088:	0598      	lsls	r0, r3, #22
3401008a:	d4f7      	bmi.n	3401007c <_vfiprintf_r+0x44>
3401008c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401008e:	f7fe fdcd 	bl	3400ec2c <__retarget_lock_release_recursive>
34010092:	e7f3      	b.n	3401007c <_vfiprintf_r+0x44>
34010094:	2300      	movs	r3, #0
34010096:	f8cd 800c 	str.w	r8, [sp, #12]
3401009a:	f04f 0901 	mov.w	r9, #1
3401009e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 34010254 <_vfiprintf_r+0x21c>
340100a2:	9309      	str	r3, [sp, #36]	@ 0x24
340100a4:	2320      	movs	r3, #32
340100a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
340100aa:	2330      	movs	r3, #48	@ 0x30
340100ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
340100b0:	4623      	mov	r3, r4
340100b2:	469a      	mov	sl, r3
340100b4:	f813 2b01 	ldrb.w	r2, [r3], #1
340100b8:	b10a      	cbz	r2, 340100be <_vfiprintf_r+0x86>
340100ba:	2a25      	cmp	r2, #37	@ 0x25
340100bc:	d1f9      	bne.n	340100b2 <_vfiprintf_r+0x7a>
340100be:	ebba 0b04 	subs.w	fp, sl, r4
340100c2:	d00b      	beq.n	340100dc <_vfiprintf_r+0xa4>
340100c4:	465b      	mov	r3, fp
340100c6:	4622      	mov	r2, r4
340100c8:	4629      	mov	r1, r5
340100ca:	4630      	mov	r0, r6
340100cc:	f7ff ffa1 	bl	34010012 <__sfputs_r>
340100d0:	3001      	adds	r0, #1
340100d2:	f000 80a7 	beq.w	34010224 <_vfiprintf_r+0x1ec>
340100d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
340100d8:	445a      	add	r2, fp
340100da:	9209      	str	r2, [sp, #36]	@ 0x24
340100dc:	f89a 3000 	ldrb.w	r3, [sl]
340100e0:	2b00      	cmp	r3, #0
340100e2:	f000 809f 	beq.w	34010224 <_vfiprintf_r+0x1ec>
340100e6:	2300      	movs	r3, #0
340100e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
340100ec:	f10a 0a01 	add.w	sl, sl, #1
340100f0:	9304      	str	r3, [sp, #16]
340100f2:	9307      	str	r3, [sp, #28]
340100f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
340100f8:	931a      	str	r3, [sp, #104]	@ 0x68
340100fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
340100fe:	4654      	mov	r4, sl
34010100:	2205      	movs	r2, #5
34010102:	4854      	ldr	r0, [pc, #336]	@ (34010254 <_vfiprintf_r+0x21c>)
34010104:	f814 1b01 	ldrb.w	r1, [r4], #1
34010108:	f7fe fd91 	bl	3400ec2e <memchr>
3401010c:	9a04      	ldr	r2, [sp, #16]
3401010e:	b9d8      	cbnz	r0, 34010148 <_vfiprintf_r+0x110>
34010110:	06d1      	lsls	r1, r2, #27
34010112:	bf44      	itt	mi
34010114:	2320      	movmi	r3, #32
34010116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401011a:	0713      	lsls	r3, r2, #28
3401011c:	bf44      	itt	mi
3401011e:	232b      	movmi	r3, #43	@ 0x2b
34010120:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34010124:	f89a 3000 	ldrb.w	r3, [sl]
34010128:	2b2a      	cmp	r3, #42	@ 0x2a
3401012a:	d015      	beq.n	34010158 <_vfiprintf_r+0x120>
3401012c:	9a07      	ldr	r2, [sp, #28]
3401012e:	4654      	mov	r4, sl
34010130:	2000      	movs	r0, #0
34010132:	f04f 0c0a 	mov.w	ip, #10
34010136:	4621      	mov	r1, r4
34010138:	f811 3b01 	ldrb.w	r3, [r1], #1
3401013c:	3b30      	subs	r3, #48	@ 0x30
3401013e:	2b09      	cmp	r3, #9
34010140:	d94b      	bls.n	340101da <_vfiprintf_r+0x1a2>
34010142:	b1b0      	cbz	r0, 34010172 <_vfiprintf_r+0x13a>
34010144:	9207      	str	r2, [sp, #28]
34010146:	e014      	b.n	34010172 <_vfiprintf_r+0x13a>
34010148:	eba0 0308 	sub.w	r3, r0, r8
3401014c:	46a2      	mov	sl, r4
3401014e:	fa09 f303 	lsl.w	r3, r9, r3
34010152:	4313      	orrs	r3, r2
34010154:	9304      	str	r3, [sp, #16]
34010156:	e7d2      	b.n	340100fe <_vfiprintf_r+0xc6>
34010158:	9b03      	ldr	r3, [sp, #12]
3401015a:	1d19      	adds	r1, r3, #4
3401015c:	681b      	ldr	r3, [r3, #0]
3401015e:	2b00      	cmp	r3, #0
34010160:	9103      	str	r1, [sp, #12]
34010162:	bfbb      	ittet	lt
34010164:	425b      	neglt	r3, r3
34010166:	f042 0202 	orrlt.w	r2, r2, #2
3401016a:	9307      	strge	r3, [sp, #28]
3401016c:	9307      	strlt	r3, [sp, #28]
3401016e:	bfb8      	it	lt
34010170:	9204      	strlt	r2, [sp, #16]
34010172:	7823      	ldrb	r3, [r4, #0]
34010174:	2b2e      	cmp	r3, #46	@ 0x2e
34010176:	d10a      	bne.n	3401018e <_vfiprintf_r+0x156>
34010178:	7863      	ldrb	r3, [r4, #1]
3401017a:	2b2a      	cmp	r3, #42	@ 0x2a
3401017c:	d132      	bne.n	340101e4 <_vfiprintf_r+0x1ac>
3401017e:	9b03      	ldr	r3, [sp, #12]
34010180:	3402      	adds	r4, #2
34010182:	1d1a      	adds	r2, r3, #4
34010184:	681b      	ldr	r3, [r3, #0]
34010186:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3401018a:	9203      	str	r2, [sp, #12]
3401018c:	9305      	str	r3, [sp, #20]
3401018e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 34010264 <_vfiprintf_r+0x22c>
34010192:	2203      	movs	r2, #3
34010194:	7821      	ldrb	r1, [r4, #0]
34010196:	4650      	mov	r0, sl
34010198:	f7fe fd49 	bl	3400ec2e <memchr>
3401019c:	b138      	cbz	r0, 340101ae <_vfiprintf_r+0x176>
3401019e:	eba0 000a 	sub.w	r0, r0, sl
340101a2:	2240      	movs	r2, #64	@ 0x40
340101a4:	9b04      	ldr	r3, [sp, #16]
340101a6:	3401      	adds	r4, #1
340101a8:	4082      	lsls	r2, r0
340101aa:	4313      	orrs	r3, r2
340101ac:	9304      	str	r3, [sp, #16]
340101ae:	f814 1b01 	ldrb.w	r1, [r4], #1
340101b2:	2206      	movs	r2, #6
340101b4:	4828      	ldr	r0, [pc, #160]	@ (34010258 <_vfiprintf_r+0x220>)
340101b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
340101ba:	f7fe fd38 	bl	3400ec2e <memchr>
340101be:	2800      	cmp	r0, #0
340101c0:	d03f      	beq.n	34010242 <_vfiprintf_r+0x20a>
340101c2:	4b26      	ldr	r3, [pc, #152]	@ (3401025c <_vfiprintf_r+0x224>)
340101c4:	bb1b      	cbnz	r3, 3401020e <_vfiprintf_r+0x1d6>
340101c6:	9b03      	ldr	r3, [sp, #12]
340101c8:	3307      	adds	r3, #7
340101ca:	f023 0307 	bic.w	r3, r3, #7
340101ce:	3308      	adds	r3, #8
340101d0:	9303      	str	r3, [sp, #12]
340101d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340101d4:	443b      	add	r3, r7
340101d6:	9309      	str	r3, [sp, #36]	@ 0x24
340101d8:	e76a      	b.n	340100b0 <_vfiprintf_r+0x78>
340101da:	fb0c 3202 	mla	r2, ip, r2, r3
340101de:	460c      	mov	r4, r1
340101e0:	2001      	movs	r0, #1
340101e2:	e7a8      	b.n	34010136 <_vfiprintf_r+0xfe>
340101e4:	2300      	movs	r3, #0
340101e6:	3401      	adds	r4, #1
340101e8:	f04f 0c0a 	mov.w	ip, #10
340101ec:	4619      	mov	r1, r3
340101ee:	9305      	str	r3, [sp, #20]
340101f0:	4620      	mov	r0, r4
340101f2:	f810 2b01 	ldrb.w	r2, [r0], #1
340101f6:	3a30      	subs	r2, #48	@ 0x30
340101f8:	2a09      	cmp	r2, #9
340101fa:	d903      	bls.n	34010204 <_vfiprintf_r+0x1cc>
340101fc:	2b00      	cmp	r3, #0
340101fe:	d0c6      	beq.n	3401018e <_vfiprintf_r+0x156>
34010200:	9105      	str	r1, [sp, #20]
34010202:	e7c4      	b.n	3401018e <_vfiprintf_r+0x156>
34010204:	fb0c 2101 	mla	r1, ip, r1, r2
34010208:	4604      	mov	r4, r0
3401020a:	2301      	movs	r3, #1
3401020c:	e7f0      	b.n	340101f0 <_vfiprintf_r+0x1b8>
3401020e:	ab03      	add	r3, sp, #12
34010210:	462a      	mov	r2, r5
34010212:	a904      	add	r1, sp, #16
34010214:	4630      	mov	r0, r6
34010216:	9300      	str	r3, [sp, #0]
34010218:	4b11      	ldr	r3, [pc, #68]	@ (34010260 <_vfiprintf_r+0x228>)
3401021a:	f7fd fc01 	bl	3400da20 <_printf_float>
3401021e:	4607      	mov	r7, r0
34010220:	1c78      	adds	r0, r7, #1
34010222:	d1d6      	bne.n	340101d2 <_vfiprintf_r+0x19a>
34010224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34010226:	07d9      	lsls	r1, r3, #31
34010228:	d405      	bmi.n	34010236 <_vfiprintf_r+0x1fe>
3401022a:	89ab      	ldrh	r3, [r5, #12]
3401022c:	059a      	lsls	r2, r3, #22
3401022e:	d402      	bmi.n	34010236 <_vfiprintf_r+0x1fe>
34010230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34010232:	f7fe fcfb 	bl	3400ec2c <__retarget_lock_release_recursive>
34010236:	89ab      	ldrh	r3, [r5, #12]
34010238:	065b      	lsls	r3, r3, #25
3401023a:	f53f af1f 	bmi.w	3401007c <_vfiprintf_r+0x44>
3401023e:	9809      	ldr	r0, [sp, #36]	@ 0x24
34010240:	e71e      	b.n	34010080 <_vfiprintf_r+0x48>
34010242:	ab03      	add	r3, sp, #12
34010244:	462a      	mov	r2, r5
34010246:	a904      	add	r1, sp, #16
34010248:	4630      	mov	r0, r6
3401024a:	9300      	str	r3, [sp, #0]
3401024c:	4b04      	ldr	r3, [pc, #16]	@ (34010260 <_vfiprintf_r+0x228>)
3401024e:	f7fd fe73 	bl	3400df38 <_printf_i>
34010252:	e7e4      	b.n	3401021e <_vfiprintf_r+0x1e6>
34010254:	34011eaa 	.word	0x34011eaa
34010258:	34011eb4 	.word	0x34011eb4
3401025c:	3400da21 	.word	0x3400da21
34010260:	34010013 	.word	0x34010013
34010264:	34011eb0 	.word	0x34011eb0

34010268 <__swhatbuf_r>:
34010268:	b570      	push	{r4, r5, r6, lr}
3401026a:	460c      	mov	r4, r1
3401026c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34010270:	b096      	sub	sp, #88	@ 0x58
34010272:	4615      	mov	r5, r2
34010274:	2900      	cmp	r1, #0
34010276:	461e      	mov	r6, r3
34010278:	da0c      	bge.n	34010294 <__swhatbuf_r+0x2c>
3401027a:	89a3      	ldrh	r3, [r4, #12]
3401027c:	2100      	movs	r1, #0
3401027e:	f013 0f80 	tst.w	r3, #128	@ 0x80
34010282:	bf14      	ite	ne
34010284:	2340      	movne	r3, #64	@ 0x40
34010286:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3401028a:	2000      	movs	r0, #0
3401028c:	6031      	str	r1, [r6, #0]
3401028e:	602b      	str	r3, [r5, #0]
34010290:	b016      	add	sp, #88	@ 0x58
34010292:	bd70      	pop	{r4, r5, r6, pc}
34010294:	466a      	mov	r2, sp
34010296:	f000 f879 	bl	3401038c <_fstat_r>
3401029a:	2800      	cmp	r0, #0
3401029c:	dbed      	blt.n	3401027a <__swhatbuf_r+0x12>
3401029e:	9901      	ldr	r1, [sp, #4]
340102a0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
340102a4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
340102a8:	4259      	negs	r1, r3
340102aa:	4159      	adcs	r1, r3
340102ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340102b0:	e7eb      	b.n	3401028a <__swhatbuf_r+0x22>

340102b2 <__smakebuf_r>:
340102b2:	898b      	ldrh	r3, [r1, #12]
340102b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
340102b6:	079d      	lsls	r5, r3, #30
340102b8:	4606      	mov	r6, r0
340102ba:	460c      	mov	r4, r1
340102bc:	d507      	bpl.n	340102ce <__smakebuf_r+0x1c>
340102be:	f104 0347 	add.w	r3, r4, #71	@ 0x47
340102c2:	6023      	str	r3, [r4, #0]
340102c4:	6123      	str	r3, [r4, #16]
340102c6:	2301      	movs	r3, #1
340102c8:	6163      	str	r3, [r4, #20]
340102ca:	b003      	add	sp, #12
340102cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
340102ce:	ab01      	add	r3, sp, #4
340102d0:	466a      	mov	r2, sp
340102d2:	f7ff ffc9 	bl	34010268 <__swhatbuf_r>
340102d6:	9f00      	ldr	r7, [sp, #0]
340102d8:	4605      	mov	r5, r0
340102da:	4630      	mov	r0, r6
340102dc:	4639      	mov	r1, r7
340102de:	f7fd fa83 	bl	3400d7e8 <_malloc_r>
340102e2:	b948      	cbnz	r0, 340102f8 <__smakebuf_r+0x46>
340102e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340102e8:	059a      	lsls	r2, r3, #22
340102ea:	d4ee      	bmi.n	340102ca <__smakebuf_r+0x18>
340102ec:	f023 0303 	bic.w	r3, r3, #3
340102f0:	f043 0302 	orr.w	r3, r3, #2
340102f4:	81a3      	strh	r3, [r4, #12]
340102f6:	e7e2      	b.n	340102be <__smakebuf_r+0xc>
340102f8:	89a3      	ldrh	r3, [r4, #12]
340102fa:	6020      	str	r0, [r4, #0]
340102fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34010300:	81a3      	strh	r3, [r4, #12]
34010302:	9b01      	ldr	r3, [sp, #4]
34010304:	e9c4 0704 	strd	r0, r7, [r4, #16]
34010308:	b15b      	cbz	r3, 34010322 <__smakebuf_r+0x70>
3401030a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401030e:	4630      	mov	r0, r6
34010310:	f000 f84e 	bl	340103b0 <_isatty_r>
34010314:	b128      	cbz	r0, 34010322 <__smakebuf_r+0x70>
34010316:	89a3      	ldrh	r3, [r4, #12]
34010318:	f023 0303 	bic.w	r3, r3, #3
3401031c:	f043 0301 	orr.w	r3, r3, #1
34010320:	81a3      	strh	r3, [r4, #12]
34010322:	89a3      	ldrh	r3, [r4, #12]
34010324:	431d      	orrs	r5, r3
34010326:	81a5      	strh	r5, [r4, #12]
34010328:	e7cf      	b.n	340102ca <__smakebuf_r+0x18>

3401032a <_raise_r>:
3401032a:	291f      	cmp	r1, #31
3401032c:	b538      	push	{r3, r4, r5, lr}
3401032e:	4605      	mov	r5, r0
34010330:	460c      	mov	r4, r1
34010332:	d904      	bls.n	3401033e <_raise_r+0x14>
34010334:	2316      	movs	r3, #22
34010336:	6003      	str	r3, [r0, #0]
34010338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401033c:	bd38      	pop	{r3, r4, r5, pc}
3401033e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
34010340:	b112      	cbz	r2, 34010348 <_raise_r+0x1e>
34010342:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
34010346:	b94b      	cbnz	r3, 3401035c <_raise_r+0x32>
34010348:	4628      	mov	r0, r5
3401034a:	f000 f853 	bl	340103f4 <_getpid_r>
3401034e:	4622      	mov	r2, r4
34010350:	4601      	mov	r1, r0
34010352:	4628      	mov	r0, r5
34010354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34010358:	f000 b83a 	b.w	340103d0 <_kill_r>
3401035c:	2b01      	cmp	r3, #1
3401035e:	d00a      	beq.n	34010376 <_raise_r+0x4c>
34010360:	1c59      	adds	r1, r3, #1
34010362:	d103      	bne.n	3401036c <_raise_r+0x42>
34010364:	2316      	movs	r3, #22
34010366:	6003      	str	r3, [r0, #0]
34010368:	2001      	movs	r0, #1
3401036a:	e7e7      	b.n	3401033c <_raise_r+0x12>
3401036c:	2100      	movs	r1, #0
3401036e:	4620      	mov	r0, r4
34010370:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
34010374:	4798      	blx	r3
34010376:	2000      	movs	r0, #0
34010378:	e7e0      	b.n	3401033c <_raise_r+0x12>
	...

3401037c <raise>:
3401037c:	4b02      	ldr	r3, [pc, #8]	@ (34010388 <raise+0xc>)
3401037e:	4601      	mov	r1, r0
34010380:	6818      	ldr	r0, [r3, #0]
34010382:	f7ff bfd2 	b.w	3401032a <_raise_r>
34010386:	bf00      	nop
34010388:	340123bc 	.word	0x340123bc

3401038c <_fstat_r>:
3401038c:	b538      	push	{r3, r4, r5, lr}
3401038e:	2300      	movs	r3, #0
34010390:	4d06      	ldr	r5, [pc, #24]	@ (340103ac <_fstat_r+0x20>)
34010392:	4604      	mov	r4, r0
34010394:	4608      	mov	r0, r1
34010396:	4611      	mov	r1, r2
34010398:	602b      	str	r3, [r5, #0]
3401039a:	f7f1 f881 	bl	340014a0 <_fstat>
3401039e:	1c43      	adds	r3, r0, #1
340103a0:	d102      	bne.n	340103a8 <_fstat_r+0x1c>
340103a2:	682b      	ldr	r3, [r5, #0]
340103a4:	b103      	cbz	r3, 340103a8 <_fstat_r+0x1c>
340103a6:	6023      	str	r3, [r4, #0]
340103a8:	bd38      	pop	{r3, r4, r5, pc}
340103aa:	bf00      	nop
340103ac:	34012f6c 	.word	0x34012f6c

340103b0 <_isatty_r>:
340103b0:	b538      	push	{r3, r4, r5, lr}
340103b2:	2300      	movs	r3, #0
340103b4:	4d05      	ldr	r5, [pc, #20]	@ (340103cc <_isatty_r+0x1c>)
340103b6:	4604      	mov	r4, r0
340103b8:	4608      	mov	r0, r1
340103ba:	602b      	str	r3, [r5, #0]
340103bc:	f7f1 f875 	bl	340014aa <_isatty>
340103c0:	1c43      	adds	r3, r0, #1
340103c2:	d102      	bne.n	340103ca <_isatty_r+0x1a>
340103c4:	682b      	ldr	r3, [r5, #0]
340103c6:	b103      	cbz	r3, 340103ca <_isatty_r+0x1a>
340103c8:	6023      	str	r3, [r4, #0]
340103ca:	bd38      	pop	{r3, r4, r5, pc}
340103cc:	34012f6c 	.word	0x34012f6c

340103d0 <_kill_r>:
340103d0:	b538      	push	{r3, r4, r5, lr}
340103d2:	2300      	movs	r3, #0
340103d4:	4d06      	ldr	r5, [pc, #24]	@ (340103f0 <_kill_r+0x20>)
340103d6:	4604      	mov	r4, r0
340103d8:	4608      	mov	r0, r1
340103da:	4611      	mov	r1, r2
340103dc:	602b      	str	r3, [r5, #0]
340103de:	f7f1 f840 	bl	34001462 <_kill>
340103e2:	1c43      	adds	r3, r0, #1
340103e4:	d102      	bne.n	340103ec <_kill_r+0x1c>
340103e6:	682b      	ldr	r3, [r5, #0]
340103e8:	b103      	cbz	r3, 340103ec <_kill_r+0x1c>
340103ea:	6023      	str	r3, [r4, #0]
340103ec:	bd38      	pop	{r3, r4, r5, pc}
340103ee:	bf00      	nop
340103f0:	34012f6c 	.word	0x34012f6c

340103f4 <_getpid_r>:
340103f4:	f7f1 b833 	b.w	3400145e <_getpid>

340103f8 <_calloc_r>:
340103f8:	b570      	push	{r4, r5, r6, lr}
340103fa:	fba1 5402 	umull	r5, r4, r1, r2
340103fe:	b934      	cbnz	r4, 3401040e <_calloc_r+0x16>
34010400:	4629      	mov	r1, r5
34010402:	f7fd f9f1 	bl	3400d7e8 <_malloc_r>
34010406:	4606      	mov	r6, r0
34010408:	b928      	cbnz	r0, 34010416 <_calloc_r+0x1e>
3401040a:	4630      	mov	r0, r6
3401040c:	bd70      	pop	{r4, r5, r6, pc}
3401040e:	220c      	movs	r2, #12
34010410:	2600      	movs	r6, #0
34010412:	6002      	str	r2, [r0, #0]
34010414:	e7f9      	b.n	3401040a <_calloc_r+0x12>
34010416:	462a      	mov	r2, r5
34010418:	4621      	mov	r1, r4
3401041a:	f7fe f987 	bl	3400e72c <memset>
3401041e:	e7f4      	b.n	3401040a <_calloc_r+0x12>

34010420 <__ascii_mbtowc>:
34010420:	b082      	sub	sp, #8
34010422:	b901      	cbnz	r1, 34010426 <__ascii_mbtowc+0x6>
34010424:	a901      	add	r1, sp, #4
34010426:	b142      	cbz	r2, 3401043a <__ascii_mbtowc+0x1a>
34010428:	b14b      	cbz	r3, 3401043e <__ascii_mbtowc+0x1e>
3401042a:	7813      	ldrb	r3, [r2, #0]
3401042c:	600b      	str	r3, [r1, #0]
3401042e:	7812      	ldrb	r2, [r2, #0]
34010430:	1e10      	subs	r0, r2, #0
34010432:	bf18      	it	ne
34010434:	2001      	movne	r0, #1
34010436:	b002      	add	sp, #8
34010438:	4770      	bx	lr
3401043a:	4610      	mov	r0, r2
3401043c:	e7fb      	b.n	34010436 <__ascii_mbtowc+0x16>
3401043e:	f06f 0001 	mvn.w	r0, #1
34010442:	e7f8      	b.n	34010436 <__ascii_mbtowc+0x16>

34010444 <__ascii_wctomb>:
34010444:	4603      	mov	r3, r0
34010446:	4608      	mov	r0, r1
34010448:	b141      	cbz	r1, 3401045c <__ascii_wctomb+0x18>
3401044a:	2aff      	cmp	r2, #255	@ 0xff
3401044c:	d904      	bls.n	34010458 <__ascii_wctomb+0x14>
3401044e:	228a      	movs	r2, #138	@ 0x8a
34010450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34010454:	601a      	str	r2, [r3, #0]
34010456:	4770      	bx	lr
34010458:	2001      	movs	r0, #1
3401045a:	700a      	strb	r2, [r1, #0]
3401045c:	4770      	bx	lr
	...

34010460 <_sbrk>:
34010460:	4a04      	ldr	r2, [pc, #16]	@ (34010474 <_sbrk+0x14>)
34010462:	4603      	mov	r3, r0
34010464:	6811      	ldr	r1, [r2, #0]
34010466:	b909      	cbnz	r1, 3401046c <_sbrk+0xc>
34010468:	4903      	ldr	r1, [pc, #12]	@ (34010478 <_sbrk+0x18>)
3401046a:	6011      	str	r1, [r2, #0]
3401046c:	6810      	ldr	r0, [r2, #0]
3401046e:	4403      	add	r3, r0
34010470:	6013      	str	r3, [r2, #0]
34010472:	4770      	bx	lr
34010474:	34012f74 	.word	0x34012f74
34010478:	34012f78 	.word	0x34012f78

3401047c <_init>:
3401047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401047e:	bf00      	nop
34010480:	bcf8      	pop	{r3, r4, r5, r6, r7}
34010482:	bc08      	pop	{r3}
34010484:	469e      	mov	lr, r3
34010486:	4770      	bx	lr

34010488 <_fini>:
34010488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401048a:	bf00      	nop
3401048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401048e:	bc08      	pop	{r3}
34010490:	469e      	mov	lr, r3
34010492:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

340104a0 <SECURE_SystemCoreClockUpdate>:
340104a0:	e97f e97f 	sg
340104a4:	f7f1 bf50 	b.w	34002348 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
