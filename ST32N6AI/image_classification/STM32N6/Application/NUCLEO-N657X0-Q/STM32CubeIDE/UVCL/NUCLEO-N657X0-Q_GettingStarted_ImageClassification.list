
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2cc  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  3400ea20  3400ea20  0000ea20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f5c  3400ea40  3400ea40  0000ea40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  3400f99c  3400f99c  0000fb98  2**0
                  CONTENTS
  5 .ARM          00000008  3400f99c  3400f99c  0000f99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  3400f9a4  3400fb98  0000fb98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  3400f9a4  3400f9a4  0000f9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  3400f9a8  3400f9a8  0000f9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001ec  3400f9ac  3400f9ac  0000f9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000009b4  3400fb98  3400fb98  0000fb98  2**2
                  ALLOC
 11 ._user_heap_stack 00004204  3401054c  3401054c  0000fb98  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  0000fb98  2**0
                  CONTENTS, READONLY
 13 .debug_info   00061ae1  00000000  00000000  0000fbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000090af  00000000  00000000  000716b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001ce49  00000000  00000000  0007a762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000027a0  00000000  00000000  000975b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003183  00000000  00000000  00099d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0007df9b  00000000  00000000  0009ced3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046524  00000000  00000000  0011ae6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    003afc68  00000000  00000000  00161392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00510ffa  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007d64  00000000  00000000  00511040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000156  00000000  00000000  00518da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	3400fb98 	.word	0x3400fb98
3400076c:	00000000 	.word	0x00000000
34000770:	3400ea04 	.word	0x3400ea04

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	3400fb9c 	.word	0x3400fb9c
3400078c:	3400ea04 	.word	0x3400ea04

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b9b0 	b.w	34000b18 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	4688      	mov	r8, r1
340007d8:	4604      	mov	r4, r0
340007da:	468e      	mov	lr, r1
340007dc:	2b00      	cmp	r3, #0
340007de:	d14a      	bne.n	34000876 <__udivmoddi4+0xa6>
340007e0:	428a      	cmp	r2, r1
340007e2:	4617      	mov	r7, r2
340007e4:	d95f      	bls.n	340008a6 <__udivmoddi4+0xd6>
340007e6:	fab2 f682 	clz	r6, r2
340007ea:	b14e      	cbz	r6, 34000800 <__udivmoddi4+0x30>
340007ec:	f1c6 0320 	rsb	r3, r6, #32
340007f0:	fa01 fe06 	lsl.w	lr, r1, r6
340007f4:	40b7      	lsls	r7, r6
340007f6:	40b4      	lsls	r4, r6
340007f8:	fa20 f303 	lsr.w	r3, r0, r3
340007fc:	ea43 0e0e 	orr.w	lr, r3, lr
34000800:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000804:	fa1f fc87 	uxth.w	ip, r7
34000808:	0c23      	lsrs	r3, r4, #16
3400080a:	fbbe f1f8 	udiv	r1, lr, r8
3400080e:	fb08 ee11 	mls	lr, r8, r1, lr
34000812:	fb01 f20c 	mul.w	r2, r1, ip
34000816:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
3400081a:	429a      	cmp	r2, r3
3400081c:	d907      	bls.n	3400082e <__udivmoddi4+0x5e>
3400081e:	18fb      	adds	r3, r7, r3
34000820:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34000824:	d202      	bcs.n	3400082c <__udivmoddi4+0x5c>
34000826:	429a      	cmp	r2, r3
34000828:	f200 8154 	bhi.w	34000ad4 <__udivmoddi4+0x304>
3400082c:	4601      	mov	r1, r0
3400082e:	1a9b      	subs	r3, r3, r2
34000830:	b2a2      	uxth	r2, r4
34000832:	fbb3 f0f8 	udiv	r0, r3, r8
34000836:	fb08 3310 	mls	r3, r8, r0, r3
3400083a:	fb00 fc0c 	mul.w	ip, r0, ip
3400083e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34000842:	4594      	cmp	ip, r2
34000844:	d90b      	bls.n	3400085e <__udivmoddi4+0x8e>
34000846:	18ba      	adds	r2, r7, r2
34000848:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
3400084c:	bf2c      	ite	cs
3400084e:	2401      	movcs	r4, #1
34000850:	2400      	movcc	r4, #0
34000852:	4594      	cmp	ip, r2
34000854:	d902      	bls.n	3400085c <__udivmoddi4+0x8c>
34000856:	2c00      	cmp	r4, #0
34000858:	f000 813f 	beq.w	34000ada <__udivmoddi4+0x30a>
3400085c:	4618      	mov	r0, r3
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	eba2 020c 	sub.w	r2, r2, ip
34000866:	2100      	movs	r1, #0
34000868:	b11d      	cbz	r5, 34000872 <__udivmoddi4+0xa2>
3400086a:	40f2      	lsrs	r2, r6
3400086c:	2300      	movs	r3, #0
3400086e:	e9c5 2300 	strd	r2, r3, [r5]
34000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000876:	428b      	cmp	r3, r1
34000878:	d905      	bls.n	34000886 <__udivmoddi4+0xb6>
3400087a:	b10d      	cbz	r5, 34000880 <__udivmoddi4+0xb0>
3400087c:	e9c5 0100 	strd	r0, r1, [r5]
34000880:	2100      	movs	r1, #0
34000882:	4608      	mov	r0, r1
34000884:	e7f5      	b.n	34000872 <__udivmoddi4+0xa2>
34000886:	fab3 f183 	clz	r1, r3
3400088a:	2900      	cmp	r1, #0
3400088c:	d14e      	bne.n	3400092c <__udivmoddi4+0x15c>
3400088e:	4543      	cmp	r3, r8
34000890:	f0c0 8112 	bcc.w	34000ab8 <__udivmoddi4+0x2e8>
34000894:	4282      	cmp	r2, r0
34000896:	f240 810f 	bls.w	34000ab8 <__udivmoddi4+0x2e8>
3400089a:	4608      	mov	r0, r1
3400089c:	2d00      	cmp	r5, #0
3400089e:	d0e8      	beq.n	34000872 <__udivmoddi4+0xa2>
340008a0:	e9c5 4e00 	strd	r4, lr, [r5]
340008a4:	e7e5      	b.n	34000872 <__udivmoddi4+0xa2>
340008a6:	2a00      	cmp	r2, #0
340008a8:	f000 80ac 	beq.w	34000a04 <__udivmoddi4+0x234>
340008ac:	fab2 f682 	clz	r6, r2
340008b0:	2e00      	cmp	r6, #0
340008b2:	f040 80bb 	bne.w	34000a2c <__udivmoddi4+0x25c>
340008b6:	1a8b      	subs	r3, r1, r2
340008b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
340008bc:	b2bc      	uxth	r4, r7
340008be:	2101      	movs	r1, #1
340008c0:	0c02      	lsrs	r2, r0, #16
340008c2:	b280      	uxth	r0, r0
340008c4:	fbb3 fcfe 	udiv	ip, r3, lr
340008c8:	fb0e 331c 	mls	r3, lr, ip, r3
340008cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
340008d0:	fb04 f20c 	mul.w	r2, r4, ip
340008d4:	429a      	cmp	r2, r3
340008d6:	d90e      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d8:	18fb      	adds	r3, r7, r3
340008da:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	429a      	cmp	r2, r3
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80ec 	beq.w	34000acc <__udivmoddi4+0x2fc>
340008f4:	46c4      	mov	ip, r8
340008f6:	1a9b      	subs	r3, r3, r2
340008f8:	fbb3 f8fe 	udiv	r8, r3, lr
340008fc:	fb0e 3318 	mls	r3, lr, r8, r3
34000900:	fb04 f408 	mul.w	r4, r4, r8
34000904:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34000908:	4294      	cmp	r4, r2
3400090a:	d90b      	bls.n	34000924 <__udivmoddi4+0x154>
3400090c:	18ba      	adds	r2, r7, r2
3400090e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34000912:	bf2c      	ite	cs
34000914:	2001      	movcs	r0, #1
34000916:	2000      	movcc	r0, #0
34000918:	4294      	cmp	r4, r2
3400091a:	d902      	bls.n	34000922 <__udivmoddi4+0x152>
3400091c:	2800      	cmp	r0, #0
3400091e:	f000 80d1 	beq.w	34000ac4 <__udivmoddi4+0x2f4>
34000922:	4698      	mov	r8, r3
34000924:	1b12      	subs	r2, r2, r4
34000926:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa08 f401 	lsl.w	r4, r8, r1
34000936:	fa00 f901 	lsl.w	r9, r0, r1
3400093a:	fa22 f706 	lsr.w	r7, r2, r6
3400093e:	fa28 f806 	lsr.w	r8, r8, r6
34000942:	408a      	lsls	r2, r1
34000944:	431f      	orrs	r7, r3
34000946:	fa20 f306 	lsr.w	r3, r0, r6
3400094a:	0c38      	lsrs	r0, r7, #16
3400094c:	4323      	orrs	r3, r4
3400094e:	fa1f fc87 	uxth.w	ip, r7
34000952:	0c1c      	lsrs	r4, r3, #16
34000954:	fbb8 fef0 	udiv	lr, r8, r0
34000958:	fb00 881e 	mls	r8, r0, lr, r8
3400095c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34000960:	fb0e f80c 	mul.w	r8, lr, ip
34000964:	45a0      	cmp	r8, r4
34000966:	d90e      	bls.n	34000986 <__udivmoddi4+0x1b6>
34000968:	193c      	adds	r4, r7, r4
3400096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3400096e:	bf2c      	ite	cs
34000970:	f04f 0b01 	movcs.w	fp, #1
34000974:	f04f 0b00 	movcc.w	fp, #0
34000978:	45a0      	cmp	r8, r4
3400097a:	d903      	bls.n	34000984 <__udivmoddi4+0x1b4>
3400097c:	f1bb 0f00 	cmp.w	fp, #0
34000980:	f000 80b8 	beq.w	34000af4 <__udivmoddi4+0x324>
34000984:	46d6      	mov	lr, sl
34000986:	eba4 0408 	sub.w	r4, r4, r8
3400098a:	fa1f f883 	uxth.w	r8, r3
3400098e:	fbb4 f3f0 	udiv	r3, r4, r0
34000992:	fb00 4413 	mls	r4, r0, r3, r4
34000996:	fb03 fc0c 	mul.w	ip, r3, ip
3400099a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3400099e:	45a4      	cmp	ip, r4
340009a0:	d90e      	bls.n	340009c0 <__udivmoddi4+0x1f0>
340009a2:	193c      	adds	r4, r7, r4
340009a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
340009a8:	bf2c      	ite	cs
340009aa:	f04f 0801 	movcs.w	r8, #1
340009ae:	f04f 0800 	movcc.w	r8, #0
340009b2:	45a4      	cmp	ip, r4
340009b4:	d903      	bls.n	340009be <__udivmoddi4+0x1ee>
340009b6:	f1b8 0f00 	cmp.w	r8, #0
340009ba:	f000 809f 	beq.w	34000afc <__udivmoddi4+0x32c>
340009be:	4603      	mov	r3, r0
340009c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
340009c4:	eba4 040c 	sub.w	r4, r4, ip
340009c8:	fba0 ec02 	umull	lr, ip, r0, r2
340009cc:	4564      	cmp	r4, ip
340009ce:	4673      	mov	r3, lr
340009d0:	46e0      	mov	r8, ip
340009d2:	d302      	bcc.n	340009da <__udivmoddi4+0x20a>
340009d4:	d107      	bne.n	340009e6 <__udivmoddi4+0x216>
340009d6:	45f1      	cmp	r9, lr
340009d8:	d205      	bcs.n	340009e6 <__udivmoddi4+0x216>
340009da:	ebbe 0302 	subs.w	r3, lr, r2
340009de:	eb6c 0c07 	sbc.w	ip, ip, r7
340009e2:	3801      	subs	r0, #1
340009e4:	46e0      	mov	r8, ip
340009e6:	b15d      	cbz	r5, 34000a00 <__udivmoddi4+0x230>
340009e8:	ebb9 0203 	subs.w	r2, r9, r3
340009ec:	eb64 0408 	sbc.w	r4, r4, r8
340009f0:	fa04 f606 	lsl.w	r6, r4, r6
340009f4:	fa22 f301 	lsr.w	r3, r2, r1
340009f8:	40cc      	lsrs	r4, r1
340009fa:	431e      	orrs	r6, r3
340009fc:	e9c5 6400 	strd	r6, r4, [r5]
34000a00:	2100      	movs	r1, #0
34000a02:	e736      	b.n	34000872 <__udivmoddi4+0xa2>
34000a04:	fbb1 fcf2 	udiv	ip, r1, r2
34000a08:	0c01      	lsrs	r1, r0, #16
34000a0a:	4614      	mov	r4, r2
34000a0c:	b280      	uxth	r0, r0
34000a0e:	4696      	mov	lr, r2
34000a10:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a14:	2620      	movs	r6, #32
34000a16:	4690      	mov	r8, r2
34000a18:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34000a1c:	4610      	mov	r0, r2
34000a1e:	fbb1 f1f2 	udiv	r1, r1, r2
34000a22:	eba3 0308 	sub.w	r3, r3, r8
34000a26:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34000a2a:	e74b      	b.n	340008c4 <__udivmoddi4+0xf4>
34000a2c:	40b7      	lsls	r7, r6
34000a2e:	f1c6 0320 	rsb	r3, r6, #32
34000a32:	fa01 f206 	lsl.w	r2, r1, r6
34000a36:	fa21 f803 	lsr.w	r8, r1, r3
34000a3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34000a3e:	fa20 f303 	lsr.w	r3, r0, r3
34000a42:	b2bc      	uxth	r4, r7
34000a44:	40b0      	lsls	r0, r6
34000a46:	4313      	orrs	r3, r2
34000a48:	0c02      	lsrs	r2, r0, #16
34000a4a:	0c19      	lsrs	r1, r3, #16
34000a4c:	b280      	uxth	r0, r0
34000a4e:	fbb8 f9fe 	udiv	r9, r8, lr
34000a52:	fb0e 8819 	mls	r8, lr, r9, r8
34000a56:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a5a:	fb09 f804 	mul.w	r8, r9, r4
34000a5e:	4588      	cmp	r8, r1
34000a60:	d951      	bls.n	34000b06 <__udivmoddi4+0x336>
34000a62:	1879      	adds	r1, r7, r1
34000a64:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34000a68:	bf2c      	ite	cs
34000a6a:	f04f 0a01 	movcs.w	sl, #1
34000a6e:	f04f 0a00 	movcc.w	sl, #0
34000a72:	4588      	cmp	r8, r1
34000a74:	d902      	bls.n	34000a7c <__udivmoddi4+0x2ac>
34000a76:	f1ba 0f00 	cmp.w	sl, #0
34000a7a:	d031      	beq.n	34000ae0 <__udivmoddi4+0x310>
34000a7c:	eba1 0108 	sub.w	r1, r1, r8
34000a80:	fbb1 f9fe 	udiv	r9, r1, lr
34000a84:	fb09 f804 	mul.w	r8, r9, r4
34000a88:	fb0e 1119 	mls	r1, lr, r9, r1
34000a8c:	b29b      	uxth	r3, r3
34000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34000a92:	4543      	cmp	r3, r8
34000a94:	d235      	bcs.n	34000b02 <__udivmoddi4+0x332>
34000a96:	18fb      	adds	r3, r7, r3
34000a98:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34000a9c:	bf2c      	ite	cs
34000a9e:	f04f 0a01 	movcs.w	sl, #1
34000aa2:	f04f 0a00 	movcc.w	sl, #0
34000aa6:	4543      	cmp	r3, r8
34000aa8:	d2bb      	bcs.n	34000a22 <__udivmoddi4+0x252>
34000aaa:	f1ba 0f00 	cmp.w	sl, #0
34000aae:	d1b8      	bne.n	34000a22 <__udivmoddi4+0x252>
34000ab0:	f1a9 0102 	sub.w	r1, r9, #2
34000ab4:	443b      	add	r3, r7
34000ab6:	e7b4      	b.n	34000a22 <__udivmoddi4+0x252>
34000ab8:	1a84      	subs	r4, r0, r2
34000aba:	eb68 0203 	sbc.w	r2, r8, r3
34000abe:	2001      	movs	r0, #1
34000ac0:	4696      	mov	lr, r2
34000ac2:	e6eb      	b.n	3400089c <__udivmoddi4+0xcc>
34000ac4:	443a      	add	r2, r7
34000ac6:	f1a8 0802 	sub.w	r8, r8, #2
34000aca:	e72b      	b.n	34000924 <__udivmoddi4+0x154>
34000acc:	f1ac 0c02 	sub.w	ip, ip, #2
34000ad0:	443b      	add	r3, r7
34000ad2:	e710      	b.n	340008f6 <__udivmoddi4+0x126>
34000ad4:	3902      	subs	r1, #2
34000ad6:	443b      	add	r3, r7
34000ad8:	e6a9      	b.n	3400082e <__udivmoddi4+0x5e>
34000ada:	443a      	add	r2, r7
34000adc:	3802      	subs	r0, #2
34000ade:	e6be      	b.n	3400085e <__udivmoddi4+0x8e>
34000ae0:	eba7 0808 	sub.w	r8, r7, r8
34000ae4:	f1a9 0c02 	sub.w	ip, r9, #2
34000ae8:	4441      	add	r1, r8
34000aea:	fbb1 f9fe 	udiv	r9, r1, lr
34000aee:	fb09 f804 	mul.w	r8, r9, r4
34000af2:	e7c9      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000af4:	f1ae 0e02 	sub.w	lr, lr, #2
34000af8:	443c      	add	r4, r7
34000afa:	e744      	b.n	34000986 <__udivmoddi4+0x1b6>
34000afc:	3b02      	subs	r3, #2
34000afe:	443c      	add	r4, r7
34000b00:	e75e      	b.n	340009c0 <__udivmoddi4+0x1f0>
34000b02:	4649      	mov	r1, r9
34000b04:	e78d      	b.n	34000a22 <__udivmoddi4+0x252>
34000b06:	eba1 0108 	sub.w	r1, r1, r8
34000b0a:	46cc      	mov	ip, r9
34000b0c:	fbb1 f9fe 	udiv	r9, r1, lr
34000b10:	fb09 f804 	mul.w	r8, r9, r4
34000b14:	e7b8      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000b16:	bf00      	nop

34000b18 <__aeabi_idiv0>:
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop

34000b1c <getIdentityWeights_int8>:
	LL_ATON_RT_Main(&NN_Instance_int8);

	return (float*)(matmulInfo_Float.output_start);
}

int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000b1e:	fb01 f700 	mul.w	r7, r1, r0
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000b22:	4606      	mov	r6, r0
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000b24:	4638      	mov	r0, r7
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000b26:	460d      	mov	r5, r1
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000b28:	f00b faee 	bl	3400c108 <malloc>
    if (identity == NULL) {
34000b2c:	4604      	mov	r4, r0
34000b2e:	b1c8      	cbz	r0, 34000b64 <getIdentityWeights_int8+0x48>
        return NULL;
    }

    // Initialize the entire matrix to 0
    memset(identity, 0, insize * outsize * sizeof(int8_t));
34000b30:	463a      	mov	r2, r7
34000b32:	2100      	movs	r1, #0
34000b34:	f00c fab2 	bl	3400d09c <memset>

    // Set 1 on the diagonal
    for (size_t i = 0; i < insize; i++) {
34000b38:	2300      	movs	r3, #0
34000b3a:	461a      	mov	r2, r3
34000b3c:	42b2      	cmp	r2, r6
34000b3e:	d011      	beq.n	34000b64 <getIdentityWeights_int8+0x48>
        for (size_t j = 0; j < outsize; j++) {
34000b40:	2000      	movs	r0, #0
34000b42:	18e7      	adds	r7, r4, r3
34000b44:	1c69      	adds	r1, r5, #1
34000b46:	e008      	b.n	34000b5a <getIdentityWeights_int8+0x3e>
            if (i == j) {
34000b48:	4282      	cmp	r2, r0
34000b4a:	bf14      	ite	ne
34000b4c:	f04f 0c00 	movne.w	ip, #0
34000b50:	f04f 0c01 	moveq.w	ip, #1
        for (size_t j = 0; j < outsize; j++) {
34000b54:	3001      	adds	r0, #1
            if (i == j) {
34000b56:	f807 cb01 	strb.w	ip, [r7], #1
        for (size_t j = 0; j < outsize; j++) {
34000b5a:	3901      	subs	r1, #1
34000b5c:	d1f4      	bne.n	34000b48 <getIdentityWeights_int8+0x2c>
    for (size_t i = 0; i < insize; i++) {
34000b5e:	3201      	adds	r2, #1
34000b60:	442b      	add	r3, r5
34000b62:	e7eb      	b.n	34000b3c <getIdentityWeights_int8+0x20>
//	    printf("\n\r");
//	}
//

    return identity;
}
34000b64:	4620      	mov	r0, r4
34000b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

34000b68 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34000b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
34000b6a:	4b15      	ldr	r3, [pc, #84]	@ (34000bc0 <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000b6c:	217c      	movs	r1, #124	@ 0x7c
34000b6e:	aa01      	add	r2, sp, #4
34000b70:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
34000b72:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000b74:	f001 fb20 	bl	340021b8 <HAL_BSEC_OTP_Read>
34000b78:	4603      	mov	r3, r0
34000b7a:	b9e0      	cbnz	r0, 34000bb6 <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
34000b7c:	9a01      	ldr	r2, [sp, #4]
34000b7e:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
34000b82:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
34000b86:	d017      	beq.n	34000bb8 <Fuse_Programming+0x50>
    {
      data |= bit_mask;
34000b88:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000b8c:	217c      	movs	r1, #124	@ 0x7c
34000b8e:	a802      	add	r0, sp, #8
      data |= bit_mask;
34000b90:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000b92:	f001 fb2d 	bl	340021f0 <HAL_BSEC_OTP_Program>
34000b96:	b968      	cbnz	r0, 34000bb4 <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000b98:	217c      	movs	r1, #124	@ 0x7c
34000b9a:	aa01      	add	r2, sp, #4
34000b9c:	a802      	add	r0, sp, #8
34000b9e:	f001 fb0b 	bl	340021b8 <HAL_BSEC_OTP_Read>
34000ba2:	b930      	cbnz	r0, 34000bb2 <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
34000ba4:	9b01      	ldr	r3, [sp, #4]
34000ba6:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
34000baa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
34000bae:	d003      	beq.n	34000bb8 <Fuse_Programming+0x50>
34000bb0:	e7fe      	b.n	34000bb0 <Fuse_Programming+0x48>
34000bb2:	e7fe      	b.n	34000bb2 <Fuse_Programming+0x4a>
34000bb4:	e7fe      	b.n	34000bb4 <Fuse_Programming+0x4c>
34000bb6:	e7fe      	b.n	34000bb6 <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
34000bb8:	b005      	add	sp, #20
34000bba:	f85d fb04 	ldr.w	pc, [sp], #4
34000bbe:	bf00      	nop
34000bc0:	56009000 	.word	0x56009000

34000bc4 <LL_MEM_EnableClock>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34000bc4:	4b04      	ldr	r3, [pc, #16]	@ (34000bd8 <LL_MEM_EnableClock+0x14>)
{
34000bc6:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
34000bc8:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34000bcc:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34000bd0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000bd2:	9b01      	ldr	r3, [sp, #4]
}
34000bd4:	b002      	add	sp, #8
34000bd6:	4770      	bx	lr
34000bd8:	56028000 	.word	0x56028000

34000bdc <LL_MEM_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000bdc:	4b04      	ldr	r3, [pc, #16]	@ (34000bf0 <LL_MEM_EnableClockLowPower+0x14>)
{
34000bde:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000be0:	f8c3 0a8c 	str.w	r0, [r3, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
34000be4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34000be8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000bea:	9b01      	ldr	r3, [sp, #4]
}
34000bec:	b002      	add	sp, #8
34000bee:	4770      	bx	lr
34000bf0:	56028000 	.word	0x56028000

34000bf4 <LL_AHB5_GRP1_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000bf4:	4b04      	ldr	r3, [pc, #16]	@ (34000c08 <LL_AHB5_GRP1_EnableClockLowPower+0x14>)
{
34000bf6:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000bf8:	f8c3 0aa0 	str.w	r0, [r3, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34000bfc:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34000c00:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000c02:	9b01      	ldr	r3, [sp, #4]
}
34000c04:	b002      	add	sp, #8
34000c06:	4770      	bx	lr
34000c08:	56028000 	.word	0x56028000

34000c0c <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
34000c0c:	b530      	push	{r4, r5, lr}
34000c0e:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34000c12:	2240      	movs	r2, #64	@ 0x40
34000c14:	2100      	movs	r1, #0
34000c16:	4668      	mov	r0, sp
34000c18:	f00c fa40 	bl	3400d09c <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34000c1c:	2298      	movs	r2, #152	@ 0x98
34000c1e:	2100      	movs	r1, #0
34000c20:	a810      	add	r0, sp, #64	@ 0x40
34000c22:	f00c fa3b 	bl	3400d09c <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34000c26:	f44f 72c8 	mov.w	r2, #400	@ 0x190
34000c2a:	2100      	movs	r1, #0
34000c2c:	a836      	add	r0, sp, #216	@ 0xd8
34000c2e:	f00c fa35 	bl	3400d09c <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
34000c32:	2001      	movs	r0, #1
34000c34:	f000 fd98 	bl	34001768 <BSP_SMPS_Init>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34000c38:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000c3a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34000c3c:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
34000c3e:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34000c40:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34000c42:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34000c46:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
34000c4a:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
34000c4c:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34000c4e:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34000c52:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34000c56:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
34000c5a:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34000c5e:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
34000c62:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
34000c66:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000c6a:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
34000c6c:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000c6e:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34000c70:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34000c74:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
34000c78:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
34000c7c:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
34000c80:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
34000c82:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000c84:	f003 fa0c 	bl	340040a0 <HAL_RCC_OscConfig>
34000c88:	b100      	cbz	r0, 34000c8c <SystemClock_Config+0x80>
  {
    while(1);
34000c8a:	e7fe      	b.n	34000c8a <SystemClock_Config+0x7e>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34000c8c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34000c90:	227f      	movs	r2, #127	@ 0x7f
34000c92:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34000c96:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34000c9a:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
34000c9c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
34000ca0:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
34000ca4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
34000ca8:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34000cac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
34000cb0:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
34000cb4:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34000cb8:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34000cbc:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34000cc0:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34000cc2:	4668      	mov	r0, sp
34000cc4:	f003 fde8 	bl	34004898 <HAL_RCC_ClockConfig>
34000cc8:	b100      	cbz	r0, 34000ccc <SystemClock_Config+0xc0>
  {
    while(1);
34000cca:	e7fe      	b.n	34000cca <SystemClock_Config+0xbe>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000ccc:	4b08      	ldr	r3, [pc, #32]	@ (34000cf0 <SystemClock_Config+0xe4>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34000cce:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000cd0:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34000cd2:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
34000cd6:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000cda:	4b06      	ldr	r3, [pc, #24]	@ (34000cf4 <SystemClock_Config+0xe8>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000cdc:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000cde:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000ce0:	f004 f98c 	bl	34004ffc <HAL_RCCEx_PeriphCLKConfig>
34000ce4:	b100      	cbz	r0, 34000ce8 <SystemClock_Config+0xdc>
  {
    while (1);
34000ce6:	e7fe      	b.n	34000ce6 <SystemClock_Config+0xda>
  }
}
34000ce8:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
34000cec:	bd30      	pop	{r4, r5, pc}
34000cee:	bf00      	nop
34000cf0:	03000014 	.word	0x03000014
34000cf4:	03000414 	.word	0x03000414

34000cf8 <Hardware_init>:
{
34000cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34000cfc:	4a89      	ldr	r2, [pc, #548]	@ (34000f24 <Hardware_init+0x22c>)
{
34000cfe:	b08d      	sub	sp, #52	@ 0x34
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34000d00:	6813      	ldr	r3, [r2, #0]
34000d02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34000d06:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
34000d08:	4b87      	ldr	r3, [pc, #540]	@ (34000f28 <Hardware_init+0x230>)
34000d0a:	6a1a      	ldr	r2, [r3, #32]
34000d0c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
34000d10:	621a      	str	r2, [r3, #32]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
34000d12:	6a1a      	ldr	r2, [r3, #32]
34000d14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
34000d18:	621a      	str	r2, [r3, #32]
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34000d1a:	2210      	movs	r2, #16
34000d1c:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34000d20:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34000d24:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000d26:	9b01      	ldr	r3, [sp, #4]
  HAL_Init();
34000d28:	f001 f9ce 	bl	340020c8 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34000d2c:	4b7f      	ldr	r3, [pc, #508]	@ (34000f2c <Hardware_init+0x234>)
34000d2e:	695a      	ldr	r2, [r3, #20]
34000d30:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
34000d34:	d111      	bne.n	34000d5a <Hardware_init+0x62>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000d36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000d3a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34000d3e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34000d42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000d46:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
34000d4a:	695a      	ldr	r2, [r3, #20]
34000d4c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34000d50:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34000d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000d56:	f3bf 8f6f 	isb	sy
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34000d5a:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34000d5e:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
  RAMCFG_HandleTypeDef hramcfg = {0};
34000d62:	2600      	movs	r6, #0
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34000d64:	4c70      	ldr	r4, [pc, #448]	@ (34000f28 <Hardware_init+0x230>)
  SystemClock_Config();
34000d66:	f7ff ff51 	bl	34000c0c <SystemClock_Config>
34000d6a:	f8c4 7a60 	str.w	r7, [r4, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34000d6e:	f8d4 3260 	ldr.w	r3, [r4, #608]	@ 0x260
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000d72:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 34000f60 <Hardware_init+0x268>
  tmpreg = READ_REG(RCC->AHB5ENR);
34000d76:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
34000d78:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
34000d7a:	2001      	movs	r0, #1
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34000d7c:	f8c4 7a20 	str.w	r7, [r4, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000d80:	f8cb 7220 	str.w	r7, [fp, #544]	@ 0x220
34000d84:	f7ff ff1e 	bl	34000bc4 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
34000d88:	2002      	movs	r0, #2
34000d8a:	f7ff ff1b 	bl	34000bc4 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
34000d8e:	2004      	movs	r0, #4
34000d90:	f7ff ff18 	bl	34000bc4 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
34000d94:	2008      	movs	r0, #8
34000d96:	f7ff ff15 	bl	34000bc4 <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34000d9a:	f8c4 aa54 	str.w	sl, [r4, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
34000d9e:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000da2:	a808      	add	r0, sp, #32
34000da4:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
34000da6:	9b02      	ldr	r3, [sp, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34000da8:	4b61      	ldr	r3, [pc, #388]	@ (34000f30 <Hardware_init+0x238>)
  RAMCFG_HandleTypeDef hramcfg = {0};
34000daa:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34000dae:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000db0:	f002 ff52 	bl	34003c58 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34000db4:	4b5f      	ldr	r3, [pc, #380]	@ (34000f34 <Hardware_init+0x23c>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000db6:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34000db8:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000dba:	f002 ff4d 	bl	34003c58 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
34000dbe:	4b5e      	ldr	r3, [pc, #376]	@ (34000f38 <Hardware_init+0x240>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000dc0:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
34000dc2:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000dc4:	f002 ff48 	bl	34003c58 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34000dc8:	4b5c      	ldr	r3, [pc, #368]	@ (34000f3c <Hardware_init+0x244>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000dca:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34000dcc:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000dce:	f002 ff43 	bl	34003c58 <HAL_RAMCFG_EnableAXISRAM>
  Fuse_Programming();
34000dd2:	f7ff fec9 	bl	34000b68 <Fuse_Programming>
  npu_cache_init();
34000dd6:	f000 f99b 	bl	34001110 <npu_cache_init>
  npu_cache_enable();
34000dda:	f000 f9a3 	bl	34001124 <npu_cache_enable>
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
34000dde:	f240 1301 	movw	r3, #257	@ 0x101
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000de2:	f44f 7900 	mov.w	r9, #512	@ 0x200
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34000de6:	2503      	movs	r5, #3
34000de8:	f04f 0802 	mov.w	r8, #2
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34000dec:	4669      	mov	r1, sp
34000dee:	4630      	mov	r0, r6
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
34000df0:	f8ad 3000 	strh.w	r3, [sp]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34000df4:	f000 fe8e 	bl	34001b14 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
34000df8:	4630      	mov	r0, r6
34000dfa:	f000 fdff 	bl	340019fc <BSP_XSPI_NOR_EnableMemoryMappedMode>
34000dfe:	f8c4 9a58 	str.w	r9, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
34000e02:	f8d4 3258 	ldr.w	r3, [r4, #600]	@ 0x258
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34000e06:	a908      	add	r1, sp, #32
34000e08:	9304      	str	r3, [sp, #16]
34000e0a:	2001      	movs	r0, #1
  (void)tmpreg;
34000e0c:	9b04      	ldr	r3, [sp, #16]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34000e0e:	e9cd 8508 	strd	r8, r5, [sp, #32]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34000e12:	f008 ff21 	bl	34009c58 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
34000e16:	a908      	add	r1, sp, #32
34000e18:	2008      	movs	r0, #8
34000e1a:	f008 ff1d 	bl	34009c58 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
34000e1e:	a908      	add	r1, sp, #32
34000e20:	2009      	movs	r0, #9
34000e22:	f008 ff19 	bl	34009c58 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
34000e26:	a908      	add	r1, sp, #32
34000e28:	200a      	movs	r0, #10
34000e2a:	f008 ff15 	bl	34009c58 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
34000e2e:	a908      	add	r1, sp, #32
34000e30:	200b      	movs	r0, #11
34000e32:	f008 ff11 	bl	34009c58 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
34000e36:	a908      	add	r1, sp, #32
34000e38:	2004      	movs	r0, #4
34000e3a:	f008 ff0d 	bl	34009c58 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000e3e:	4629      	mov	r1, r5
34000e40:	483f      	ldr	r0, [pc, #252]	@ (34000f40 <Hardware_init+0x248>)
34000e42:	f008 ff5f 	bl	34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000e46:	4629      	mov	r1, r5
34000e48:	483e      	ldr	r0, [pc, #248]	@ (34000f44 <Hardware_init+0x24c>)
34000e4a:	f008 ff5b 	bl	34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000e4e:	4629      	mov	r1, r5
34000e50:	483d      	ldr	r0, [pc, #244]	@ (34000f48 <Hardware_init+0x250>)
34000e52:	f008 ff57 	bl	34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000e56:	4629      	mov	r1, r5
34000e58:	483c      	ldr	r0, [pc, #240]	@ (34000f4c <Hardware_init+0x254>)
34000e5a:	f008 ff53 	bl	34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000e5e:	4629      	mov	r1, r5
34000e60:	483b      	ldr	r0, [pc, #236]	@ (34000f50 <Hardware_init+0x258>)
34000e62:	f008 ff4f 	bl	34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000e66:	4629      	mov	r1, r5
34000e68:	483a      	ldr	r0, [pc, #232]	@ (34000f54 <Hardware_init+0x25c>)
34000e6a:	f008 ff4b 	bl	34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000e6e:	4629      	mov	r1, r5
34000e70:	4839      	ldr	r0, [pc, #228]	@ (34000f58 <Hardware_init+0x260>)
34000e72:	f008 ff47 	bl	34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000e76:	4629      	mov	r1, r5
34000e78:	4838      	ldr	r0, [pc, #224]	@ (34000f5c <Hardware_init+0x264>)
34000e7a:	f008 ff43 	bl	34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000e7e:	4629      	mov	r1, r5
34000e80:	2004      	movs	r0, #4
34000e82:	f008 ff3f 	bl	34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34000e8a:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
34000e8e:	f8d4 2258 	ldr.w	r2, [r4, #600]	@ 0x258
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
34000e92:	2020      	movs	r0, #32
34000e94:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
34000e96:	9a05      	ldr	r2, [sp, #20]
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000e98:	2204      	movs	r2, #4
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
34000e9a:	f8c4 3a18 	str.w	r3, [r4, #2584]	@ 0xa18
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
34000e9e:	f8cb 3218 	str.w	r3, [fp, #536]	@ 0x218
34000ea2:	f7ff fea7 	bl	34000bf4 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
34000ea6:	4650      	mov	r0, sl
34000ea8:	f7ff fea4 	bl	34000bf4 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
34000eac:	4638      	mov	r0, r7
34000eae:	f7ff fea1 	bl	34000bf4 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
34000eb2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34000eb6:	f7ff fe9d 	bl	34000bf4 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
34000eba:	4640      	mov	r0, r8
34000ebc:	f7ff fe9a 	bl	34000bf4 <LL_AHB5_GRP1_EnableClockLowPower>
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000ec0:	f8c4 2abc 	str.w	r2, [r4, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34000ec4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34000ec8:	4648      	mov	r0, r9
34000eca:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
34000ecc:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000ece:	2340      	movs	r3, #64	@ 0x40
34000ed0:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34000ed4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  BSP_COM_Init(COM1, &com_config);
34000ed8:	a908      	add	r1, sp, #32
34000eda:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
34000edc:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34000ede:	f7ff fe7d 	bl	34000bdc <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
34000ee2:	2080      	movs	r0, #128	@ 0x80
34000ee4:	f7ff fe7a 	bl	34000bdc <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
34000ee8:	f44f 7080 	mov.w	r0, #256	@ 0x100
34000eec:	f7ff fe76 	bl	34000bdc <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
34000ef0:	2001      	movs	r0, #1
34000ef2:	f7ff fe73 	bl	34000bdc <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
34000ef6:	4640      	mov	r0, r8
34000ef8:	f7ff fe70 	bl	34000bdc <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
34000efc:	4610      	mov	r0, r2
34000efe:	f7ff fe6d 	bl	34000bdc <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
34000f02:	2008      	movs	r0, #8
34000f04:	f7ff fe6a 	bl	34000bdc <LL_MEM_EnableClockLowPower>
  COM_InitTypeDef com_config = {
34000f08:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  BSP_COM_Init(COM1, &com_config);
34000f0c:	4630      	mov	r0, r6
  COM_InitTypeDef com_config = {
34000f0e:	e9cd 3608 	strd	r3, r6, [sp, #32]
34000f12:	960a      	str	r6, [sp, #40]	@ 0x28
34000f14:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
  BSP_COM_Init(COM1, &com_config);
34000f18:	f000 fc5c 	bl	340017d4 <BSP_COM_Init>
}
34000f1c:	b00d      	add	sp, #52	@ 0x34
34000f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000f22:	bf00      	nop
34000f24:	e001e000 	.word	0xe001e000
34000f28:	56028000 	.word	0x56028000
34000f2c:	e000ed00 	.word	0xe000ed00
34000f30:	52023100 	.word	0x52023100
34000f34:	52023180 	.word	0x52023180
34000f38:	52023200 	.word	0x52023200
34000f3c:	52023280 	.word	0x52023280
34000f40:	3000000a 	.word	0x3000000a
34000f44:	30000005 	.word	0x30000005
34000f48:	2000001c 	.word	0x2000001c
34000f4c:	2000001d 	.word	0x2000001d
34000f50:	30000006 	.word	0x30000006
34000f54:	30000007 	.word	0x30000007
34000f58:	30000008 	.word	0x30000008
34000f5c:	10000018 	.word	0x10000018
34000f60:	56029000 	.word	0x56029000

34000f64 <enableTiming_Cyc>:
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
34000f64:	4a06      	ldr	r2, [pc, #24]	@ (34000f80 <enableTiming_Cyc+0x1c>)
34000f66:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34000f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
34000f6e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
34000f72:	f5a2 425d 	sub.w	r2, r2, #56576	@ 0xdd00
34000f76:	6813      	ldr	r3, [r2, #0]
34000f78:	f043 0301 	orr.w	r3, r3, #1
34000f7c:	6013      	str	r3, [r2, #0]
}
34000f7e:	4770      	bx	lr
34000f80:	e000ed00 	.word	0xe000ed00

34000f84 <controllOutput>:
void controllOutput(int8_t* in, int8_t* weights, size_t insize, size_t outsize) {
34000f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34000f88:	4605      	mov	r5, r0
34000f8a:	4616      	mov	r6, r2
    printf("Controll Output:\n\r ");
34000f8c:	4812      	ldr	r0, [pc, #72]	@ (34000fd8 <controllOutput+0x54>)
void controllOutput(int8_t* in, int8_t* weights, size_t insize, size_t outsize) {
34000f8e:	4689      	mov	r9, r1
34000f90:	4698      	mov	r8, r3
    for (size_t i = 0; i < outsize; i++) {  // Iterate over output size
34000f92:	2700      	movs	r7, #0
    printf("Controll Output:\n\r ");
34000f94:	f00b ff3a 	bl	3400ce0c <iprintf>
        printf("%3d ", acc);  // Print the result as a 32-bit integer
34000f98:	f8df a044 	ldr.w	sl, [pc, #68]	@ 34000fe0 <controllOutput+0x5c>
34000f9c:	442e      	add	r6, r5
    for (size_t i = 0; i < outsize; i++) {  // Iterate over output size
34000f9e:	4547      	cmp	r7, r8
34000fa0:	d014      	beq.n	34000fcc <controllOutput+0x48>
        int32_t acc = 0;
34000fa2:	1b74      	subs	r4, r6, r5
34000fa4:	462a      	mov	r2, r5
34000fa6:	2100      	movs	r1, #0
34000fa8:	eb09 0307 	add.w	r3, r9, r7
34000fac:	3401      	adds	r4, #1
34000fae:	e006      	b.n	34000fbe <controllOutput+0x3a>
            acc += in[j] * weights[i + outsize * j];  // Correct indexing
34000fb0:	f993 0000 	ldrsb.w	r0, [r3]
34000fb4:	f912 cb01 	ldrsb.w	ip, [r2], #1
34000fb8:	4443      	add	r3, r8
34000fba:	fb1c 1100 	smlabb	r1, ip, r0, r1
        for (size_t j = 0; j < insize; j++) {  // Iterate over input size
34000fbe:	3c01      	subs	r4, #1
34000fc0:	d1f6      	bne.n	34000fb0 <controllOutput+0x2c>
        printf("%3d ", acc);  // Print the result as a 32-bit integer
34000fc2:	4650      	mov	r0, sl
34000fc4:	f00b ff22 	bl	3400ce0c <iprintf>
    for (size_t i = 0; i < outsize; i++) {  // Iterate over output size
34000fc8:	3701      	adds	r7, #1
34000fca:	e7e8      	b.n	34000f9e <controllOutput+0x1a>
    printf("\n\r");
34000fcc:	4803      	ldr	r0, [pc, #12]	@ (34000fdc <controllOutput+0x58>)
}
34000fce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printf("\n\r");
34000fd2:	f00b bf1b 	b.w	3400ce0c <iprintf>
34000fd6:	bf00      	nop
34000fd8:	3400ea40 	.word	0x3400ea40
34000fdc:	3400ea93 	.word	0x3400ea93
34000fe0:	3400ea54 	.word	0x3400ea54

34000fe4 <main_ARM_int8>:
    int8_t* identityWeights = getIdentityWeights_int8(insize, outsize);
34000fe4:	2108      	movs	r1, #8
int main_ARM_int8(void) {
34000fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    	inVec[i] = (int8_t)(i);  // e.g., 0, 16, 32, ..., 112
34000fea:	4b27      	ldr	r3, [pc, #156]	@ (34001088 <main_ARM_int8+0xa4>)
int main_ARM_int8(void) {
34000fec:	b08c      	sub	sp, #48	@ 0x30
    	inVec[i] = (int8_t)(i);  // e.g., 0, 16, 32, ..., 112
34000fee:	9302      	str	r3, [sp, #8]
    int8_t* identityWeights = getIdentityWeights_int8(insize, outsize);
34000ff0:	4608      	mov	r0, r1
    	inVec[i] = (int8_t)(i);  // e.g., 0, 16, 32, ..., 112
34000ff2:	f103 3304 	add.w	r3, r3, #67372036	@ 0x4040404
34000ff6:	9303      	str	r3, [sp, #12]
    int8_t* identityWeights = getIdentityWeights_int8(insize, outsize);
34000ff8:	f7ff fd90 	bl	34000b1c <getIdentityWeights_int8>
    if (!identityWeights) {
34000ffc:	4604      	mov	r4, r0
34000ffe:	2800      	cmp	r0, #0
34001000:	d03a      	beq.n	34001078 <main_ARM_int8+0x94>
34001002:	ae02      	add	r6, sp, #8
    for (int i = 0; i < insize; i++) {
34001004:	2500      	movs	r5, #0
34001006:	4637      	mov	r7, r6
        printf("inVec[%d] = %4d", i, inVec[i]);
34001008:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 3400109c <main_ARM_int8+0xb8>
3400100c:	4629      	mov	r1, r5
3400100e:	4640      	mov	r0, r8
34001010:	f916 2b01 	ldrsb.w	r2, [r6], #1
    for (int i = 0; i < insize; i++) {
34001014:	3501      	adds	r5, #1
        printf("inVec[%d] = %4d", i, inVec[i]);
34001016:	f00b fef9 	bl	3400ce0c <iprintf>
    for (int i = 0; i < insize; i++) {
3400101a:	2d08      	cmp	r5, #8
3400101c:	d1f6      	bne.n	3400100c <main_ARM_int8+0x28>
    printf("\n\r");
3400101e:	481b      	ldr	r0, [pc, #108]	@ (3400108c <main_ARM_int8+0xa8>)
34001020:	f00b fef4 	bl	3400ce0c <iprintf>
	DWT->CYCCNT = 0; // Reset counter
34001024:	f04f 0900 	mov.w	r9, #0
34001028:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 340010a0 <main_ARM_int8+0xbc>
    	simd_matrix_vector_mul_int8(identityWeights,inVec,outVec,outsize,insize);
3400102c:	2308      	movs	r3, #8
3400102e:	4639      	mov	r1, r7
34001030:	aa04      	add	r2, sp, #16
34001032:	4620      	mov	r0, r4
	DWT->CYCCNT = 0; // Reset counter
34001034:	f8c8 9004 	str.w	r9, [r8, #4]
    	simd_matrix_vector_mul_int8(identityWeights,inVec,outVec,outsize,insize);
34001038:	9300      	str	r3, [sp, #0]
3400103a:	f00a fbf9 	bl	3400b830 <simd_matrix_vector_mul_int8>
	uint32_t cycles = DWT->CYCCNT;
3400103e:	f8d8 5004 	ldr.w	r5, [r8, #4]
		printf("Output MatVec ARM\n\r");
34001042:	4813      	ldr	r0, [pc, #76]	@ (34001090 <main_ARM_int8+0xac>)
34001044:	f00b fee2 	bl	3400ce0c <iprintf>
		printf("Cycles: %6d\n\r",cycles);
34001048:	4629      	mov	r1, r5
3400104a:	4812      	ldr	r0, [pc, #72]	@ (34001094 <main_ARM_int8+0xb0>)
3400104c:	f00b fede 	bl	3400ce0c <iprintf>
		for(int i = 0; i < outsize; i++){
34001050:	2500      	movs	r5, #0
			printf("Output[%d]: %4d\n\r",i,outVec[i]);
34001052:	f8df a050 	ldr.w	sl, [pc, #80]	@ 340010a4 <main_ARM_int8+0xc0>
34001056:	ae04      	add	r6, sp, #16
34001058:	4629      	mov	r1, r5
3400105a:	4650      	mov	r0, sl
3400105c:	f856 2b04 	ldr.w	r2, [r6], #4
		for(int i = 0; i < outsize; i++){
34001060:	3501      	adds	r5, #1
			printf("Output[%d]: %4d\n\r",i,outVec[i]);
34001062:	f00b fed3 	bl	3400ce0c <iprintf>
		for(int i = 0; i < outsize; i++){
34001066:	2d08      	cmp	r5, #8
34001068:	d1f6      	bne.n	34001058 <main_ARM_int8+0x74>
		controllOutput(inVec,identityWeights,insize,outsize);
3400106a:	462b      	mov	r3, r5
3400106c:	462a      	mov	r2, r5
3400106e:	4621      	mov	r1, r4
34001070:	4638      	mov	r0, r7
34001072:	f7ff ff87 	bl	34000f84 <controllOutput>
    while(1){
34001076:	e7d9      	b.n	3400102c <main_ARM_int8+0x48>
        printf("Memory allocation failed\n");
34001078:	4807      	ldr	r0, [pc, #28]	@ (34001098 <main_ARM_int8+0xb4>)
3400107a:	f00b ff2f 	bl	3400cedc <puts>
}
3400107e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001082:	b00c      	add	sp, #48	@ 0x30
34001084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34001088:	03020100 	.word	0x03020100
3400108c:	3400ea93 	.word	0x3400ea93
34001090:	3400ea82 	.word	0x3400ea82
34001094:	3400ea96 	.word	0x3400ea96
34001098:	3400ea59 	.word	0x3400ea59
3400109c:	3400ea72 	.word	0x3400ea72
340010a0:	e0001000 	.word	0xe0001000
340010a4:	3400eaa4 	.word	0x3400eaa4

340010a8 <main>:
{
340010a8:	b508      	push	{r3, lr}
	Hardware_init();
340010aa:	f7ff fe25 	bl	34000cf8 <Hardware_init>
	enableTiming_Cyc();
340010ae:	f7ff ff59 	bl	34000f64 <enableTiming_Cyc>
    main_ARM_int8();
340010b2:	f7ff ff97 	bl	34000fe4 <main_ARM_int8>
}
340010b6:	2000      	movs	r0, #0
340010b8:	bd08      	pop	{r3, pc}
	...

340010bc <_write>:
{
340010bc:	b510      	push	{r4, lr}
340010be:	4614      	mov	r4, r2
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
340010c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340010c4:	b292      	uxth	r2, r2
340010c6:	4802      	ldr	r0, [pc, #8]	@ (340010d0 <_write+0x14>)
340010c8:	f009 f9a8 	bl	3400a41c <HAL_UART_Transmit>
}
340010cc:	4620      	mov	r0, r4
340010ce:	bd10      	pop	{r4, pc}
340010d0:	3400fbc0 	.word	0x3400fbc0

340010d4 <IAC_IRQHandler>:
  while (1)
340010d4:	e7fe      	b.n	340010d4 <IAC_IRQHandler>
	...

340010d8 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
340010d8:	b507      	push	{r0, r1, r2, lr}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340010da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
340010de:	f44f 6080 	mov.w	r0, #1024	@ 0x400
340010e2:	f7ff fd6f 	bl	34000bc4 <LL_MEM_EnableClock>
340010e6:	4b08      	ldr	r3, [pc, #32]	@ (34001108 <HAL_CACHEAXI_MspInit+0x30>)
340010e8:	f8c3 2a60 	str.w	r2, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
340010ec:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
340010f0:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
340010f2:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340010f4:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340010f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340010fc:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
34001100:	b003      	add	sp, #12
34001102:	f85d fb04 	ldr.w	pc, [sp], #4
34001106:	bf00      	nop
34001108:	56028000 	.word	0x56028000

3400110c <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
3400110c:	be00      	bkpt	0x0000
  while (1)
3400110e:	e7fe      	b.n	3400110e <assert_failed+0x2>

34001110 <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
34001110:	4802      	ldr	r0, [pc, #8]	@ (3400111c <npu_cache_init+0xc>)
34001112:	4b03      	ldr	r3, [pc, #12]	@ (34001120 <npu_cache_init+0x10>)
34001114:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
34001116:	f001 b8ff 	b.w	34002318 <HAL_CACHEAXI_Init>
3400111a:	bf00      	nop
3400111c:	3400fbb4 	.word	0x3400fbb4
34001120:	580dfc00 	.word	0x580dfc00

34001124 <npu_cache_enable>:
}

void npu_cache_enable(void)
{
34001124:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
34001126:	4c03      	ldr	r4, [pc, #12]	@ (34001134 <npu_cache_enable+0x10>)
34001128:	4620      	mov	r0, r4
3400112a:	f001 f8c1 	bl	340022b0 <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
3400112e:	2802      	cmp	r0, #2
34001130:	d0fa      	beq.n	34001128 <npu_cache_enable+0x4>
}
34001132:	bd10      	pop	{r4, pc}
34001134:	3400fbb4 	.word	0x3400fbb4

34001138 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
34001138:	4770      	bx	lr

3400113a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
3400113a:	e7fe      	b.n	3400113a <HardFault_Handler>

3400113c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
3400113c:	e7fe      	b.n	3400113c <MemManage_Handler>

3400113e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
3400113e:	e7fe      	b.n	3400113e <BusFault_Handler>

34001140 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
34001140:	e7fe      	b.n	34001140 <UsageFault_Handler>

34001142 <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
34001142:	e7fe      	b.n	34001142 <SecureFault_Handler>

34001144 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
34001144:	4770      	bx	lr

34001146 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
34001146:	e7fe      	b.n	34001146 <DebugMon_Handler>

34001148 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
  while (1)
34001148:	e7fe      	b.n	34001148 <PendSV_Handler>

3400114a <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
3400114a:	f000 bfcf 	b.w	340020ec <HAL_IncTick>

3400114e <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
3400114e:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001150:	f00a fb30 	bl	3400b7b4 <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
}
34001154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
34001158:	f001 bae0 	b.w	3400271c <HAL_DCMIPP_CSI_IRQHandler>

3400115c <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
3400115c:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
3400115e:	f00a fb29 	bl	3400b7b4 <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
34001162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
34001166:	f001 b9a3 	b.w	340024b0 <HAL_DCMIPP_IRQHandler>

3400116a <_getpid>:
}

int _getpid(void)
{
  return 1;
}
3400116a:	2001      	movs	r0, #1
3400116c:	4770      	bx	lr

3400116e <_kill>:

int _kill(int pid, int sig)
{
3400116e:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
34001170:	f00b fff6 	bl	3400d160 <__errno>
34001174:	2316      	movs	r3, #22
34001176:	6003      	str	r3, [r0, #0]
  return -1;
}
34001178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400117c:	bd08      	pop	{r3, pc}

3400117e <_exit>:

void _exit (int status)
{
3400117e:	b508      	push	{r3, lr}
  errno = EINVAL;
34001180:	f00b ffee 	bl	3400d160 <__errno>
34001184:	2316      	movs	r3, #22
34001186:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
34001188:	e7fe      	b.n	34001188 <_exit+0xa>

3400118a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
3400118a:	b570      	push	{r4, r5, r6, lr}
3400118c:	460d      	mov	r5, r1
3400118e:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001190:	460e      	mov	r6, r1
34001192:	1b73      	subs	r3, r6, r5
34001194:	429c      	cmp	r4, r3
34001196:	dc01      	bgt.n	3400119c <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
34001198:	4620      	mov	r0, r4
3400119a:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
3400119c:	f3af 8000 	nop.w
340011a0:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
340011a4:	e7f5      	b.n	34001192 <_read+0x8>

340011a6 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
340011a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340011aa:	4770      	bx	lr

340011ac <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
340011ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
340011b0:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
340011b2:	604b      	str	r3, [r1, #4]
}
340011b4:	4770      	bx	lr

340011b6 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
340011b6:	2001      	movs	r0, #1
340011b8:	4770      	bx	lr

340011ba <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
340011ba:	2000      	movs	r0, #0
340011bc:	4770      	bx	lr

340011be <MX25UM51245G_GetFlashInfo>:
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
340011be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
340011c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340011c6:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
340011ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340011ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340011d2:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
340011d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
340011da:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
340011de:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
340011e2:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
340011e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
340011e8:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25UM51245G_OK;
};
340011ec:	2000      	movs	r0, #0
340011ee:	4770      	bx	lr

340011f0 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
340011f0:	b570      	push	{r4, r5, r6, lr}
340011f2:	460d      	mov	r5, r1
340011f4:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef  s_command = {0};
340011f6:	2100      	movs	r1, #0
{
340011f8:	4606      	mov	r6, r0
340011fa:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef  s_command = {0};
340011fc:	a805      	add	r0, sp, #20
340011fe:	224c      	movs	r2, #76	@ 0x4c
34001200:	f00b ff4c 	bl	3400d09c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001204:	2214      	movs	r2, #20
34001206:	2100      	movs	r1, #0
34001208:	4668      	mov	r0, sp
3400120a:	f00b ff47 	bl	3400d09c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400120e:	b935      	cbnz	r5, 3400121e <MX25UM51245G_AutoPollingMemReady+0x2e>
  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001210:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001212:	429c      	cmp	r4, r3
34001214:	d104      	bne.n	34001220 <MX25UM51245G_AutoPollingMemReady+0x30>
    return MX25UM51245G_ERROR;
34001216:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
3400121a:	b018      	add	sp, #96	@ 0x60
3400121c:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400121e:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001220:	1e60      	subs	r0, r4, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001222:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001224:	4243      	negs	r3, r0
34001226:	4143      	adcs	r3, r0
34001228:	00da      	lsls	r2, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400122a:	920a      	str	r2, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400122c:	2d00      	cmp	r5, #0
3400122e:	d03a      	beq.n	340012a6 <MX25UM51245G_AutoPollingMemReady+0xb6>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001230:	2210      	movs	r2, #16
34001232:	f240 51fa 	movw	r1, #1530	@ 0x5fa
34001236:	9209      	str	r2, [sp, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3400123c:	920c      	str	r2, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400123e:	02da      	lsls	r2, r3, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001240:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001242:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001246:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001248:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400124a:	bf14      	ite	ne
3400124c:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
34001250:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001254:	ea4f 63c3 	mov.w	r3, r3, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001258:	9107      	str	r1, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400125a:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
3400125c:	9315      	str	r3, [sp, #84]	@ 0x54
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
3400125e:	d02a      	beq.n	340012b6 <MX25UM51245G_AutoPollingMemReady+0xc6>
34001260:	2c01      	cmp	r4, #1
34001262:	d123      	bne.n	340012ac <MX25UM51245G_AutoPollingMemReady+0xbc>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001264:	2305      	movs	r3, #5
34001266:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001268:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400126a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400126e:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001270:	2301      	movs	r3, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001272:	2110      	movs	r1, #16
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001274:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001276:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3400127a:	9214      	str	r2, [sp, #80]	@ 0x50
3400127c:	e9cd 3103 	strd	r3, r1, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001280:	f241 3288 	movw	r2, #5000	@ 0x1388
34001284:	4630      	mov	r0, r6
34001286:	a905      	add	r1, sp, #20
34001288:	f009 fcd2 	bl	3400ac30 <HAL_XSPI_Command>
3400128c:	2800      	cmp	r0, #0
3400128e:	d1c2      	bne.n	34001216 <MX25UM51245G_AutoPollingMemReady+0x26>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001290:	f241 3288 	movw	r2, #5000	@ 0x1388
34001294:	4669      	mov	r1, sp
34001296:	4630      	mov	r0, r6
34001298:	f009 fe7c 	bl	3400af94 <HAL_XSPI_AutoPolling>
3400129c:	3800      	subs	r0, #0
3400129e:	bf18      	it	ne
340012a0:	2001      	movne	r0, #1
340012a2:	4240      	negs	r0, r0
340012a4:	e7b9      	b.n	3400121a <MX25UM51245G_AutoPollingMemReady+0x2a>
340012a6:	2105      	movs	r1, #5
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
340012a8:	462a      	mov	r2, r5
340012aa:	e7c7      	b.n	3400123c <MX25UM51245G_AutoPollingMemReady+0x4c>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
340012ac:	2304      	movs	r3, #4
340012ae:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340012b0:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340012b2:	2300      	movs	r3, #0
340012b4:	e7db      	b.n	3400126e <MX25UM51245G_AutoPollingMemReady+0x7e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340012b6:	2c01      	cmp	r4, #1
340012b8:	d1fa      	bne.n	340012b0 <MX25UM51245G_AutoPollingMemReady+0xc0>
340012ba:	e7d5      	b.n	34001268 <MX25UM51245G_AutoPollingMemReady+0x78>

340012bc <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
340012bc:	b570      	push	{r4, r5, r6, lr}
340012be:	460c      	mov	r4, r1
340012c0:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef      s_command = {0};
340012c2:	2100      	movs	r1, #0
{
340012c4:	4606      	mov	r6, r0
340012c6:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef      s_command = {0};
340012c8:	a805      	add	r0, sp, #20
340012ca:	224c      	movs	r2, #76	@ 0x4c
340012cc:	f00b fee6 	bl	3400d09c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
340012d0:	2210      	movs	r2, #16
340012d2:	2100      	movs	r1, #0
340012d4:	a801      	add	r0, sp, #4
340012d6:	f00b fee1 	bl	3400d09c <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
340012da:	2c01      	cmp	r4, #1
340012dc:	d144      	bne.n	34001368 <MX25UM51245G_EnableSTRMemoryMappedMode+0xac>
340012de:	b91d      	cbnz	r5, 340012e8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x2c>
  {
    return MX25UM51245G_ERROR;
340012e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340012e4:	b018      	add	sp, #96	@ 0x60
340012e6:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340012e8:	9405      	str	r4, [sp, #20]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340012ea:	2204      	movs	r2, #4
340012ec:	2310      	movs	r3, #16
340012ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
340012f2:	f64e 4213 	movw	r2, #60435	@ 0xec13
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340012f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                                 : HAL_XSPI_ADDRESS_32_BITS;
340012fa:	2d00      	cmp	r5, #0
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340012fc:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_32_BITS;
340012fe:	bf14      	ite	ne
34001300:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
34001304:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001308:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400130a:	9207      	str	r2, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400130c:	bf0c      	ite	eq
3400130e:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
34001312:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
34001316:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001318:	bf0c      	ite	eq
3400131a:	2308      	moveq	r3, #8
3400131c:	2306      	movne	r3, #6
3400131e:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001320:	4630      	mov	r0, r6
34001322:	f241 3288 	movw	r2, #5000	@ 0x1388
34001326:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
34001328:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400132a:	f009 fc81 	bl	3400ac30 <HAL_XSPI_Command>
3400132e:	2800      	cmp	r0, #0
34001330:	d1d6      	bne.n	340012e0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
34001332:	2302      	movs	r3, #2
34001334:	9305      	str	r3, [sp, #20]
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001336:	bb1c      	cbnz	r4, 34001380 <MX25UM51245G_EnableSTRMemoryMappedMode+0xc4>
34001338:	2d00      	cmp	r5, #0
3400133a:	bf18      	it	ne
3400133c:	2312      	movne	r3, #18
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400133e:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles        = 0U;
34001340:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001342:	f241 3288 	movw	r2, #5000	@ 0x1388
34001346:	4630      	mov	r0, r6
34001348:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = 0U;
3400134a:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400134c:	f009 fc70 	bl	3400ac30 <HAL_XSPI_Command>
34001350:	2800      	cmp	r0, #0
34001352:	d1c5      	bne.n	340012e0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001354:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001356:	a901      	add	r1, sp, #4
34001358:	4630      	mov	r0, r6
3400135a:	f009 fe97 	bl	3400b08c <HAL_XSPI_MemoryMapped>
3400135e:	3800      	subs	r0, #0
34001360:	bf18      	it	ne
34001362:	2001      	movne	r0, #1
34001364:	4240      	negs	r0, r0
34001366:	e7bd      	b.n	340012e4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x28>
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001368:	2301      	movs	r3, #1
3400136a:	9305      	str	r3, [sp, #20]
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400136c:	2c00      	cmp	r4, #0
3400136e:	d1bc      	bne.n	340012ea <MX25UM51245G_EnableSTRMemoryMappedMode+0x2e>
                                 : MX25UM51245G_OCTA_READ_CMD;
34001370:	2d00      	cmp	r5, #0
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001372:	9308      	str	r3, [sp, #32]
                                 : MX25UM51245G_OCTA_READ_CMD;
34001374:	bf14      	ite	ne
34001376:	220c      	movne	r2, #12
34001378:	220b      	moveq	r2, #11
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400137a:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400137e:	e7bc      	b.n	340012fa <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001380:	f241 23ed 	movw	r3, #4845	@ 0x12ed
34001384:	e7db      	b.n	3400133e <MX25UM51245G_EnableSTRMemoryMappedMode+0x82>

34001386 <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
34001386:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001388:	2510      	movs	r5, #16
{
3400138a:	b099      	sub	sp, #100	@ 0x64
3400138c:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef      s_command = {0};
3400138e:	223c      	movs	r2, #60	@ 0x3c
34001390:	2100      	movs	r1, #0
34001392:	a806      	add	r0, sp, #24
34001394:	f00b fe82 	bl	3400d09c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001398:	462a      	mov	r2, r5
3400139a:	2100      	movs	r1, #0
3400139c:	a801      	add	r0, sp, #4
3400139e:	f00b fe7d 	bl	3400d09c <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340013a2:	2301      	movs	r3, #1
340013a4:	9305      	str	r3, [sp, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
340013a6:	2304      	movs	r3, #4
340013a8:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
340013aa:	2308      	movs	r3, #8
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
340013ac:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
340013b0:	f64e 6311 	movw	r3, #60945	@ 0xee11
340013b4:	9307      	str	r3, [sp, #28]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
340013b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340013ba:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
340013be:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340013c0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340013c4:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
340013c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
340013cc:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
340013d0:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
340013d2:	2306      	movs	r3, #6
340013d4:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
340013d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340013dc:	f241 3288 	movw	r2, #5000	@ 0x1388
340013e0:	4620      	mov	r0, r4
340013e2:	a905      	add	r1, sp, #20
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
340013e4:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340013e6:	f009 fc23 	bl	3400ac30 <HAL_XSPI_Command>
340013ea:	b118      	cbz	r0, 340013f4 <MX25UM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25UM51245G_ERROR;
340013ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340013f0:	b019      	add	sp, #100	@ 0x64
340013f2:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
340013f4:	2302      	movs	r3, #2
340013f6:	9305      	str	r3, [sp, #20]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
340013f8:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
340013fc:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001400:	f241 3288 	movw	r2, #5000	@ 0x1388
34001404:	4620      	mov	r0, r4
34001406:	a905      	add	r1, sp, #20
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001408:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400140a:	f009 fc11 	bl	3400ac30 <HAL_XSPI_Command>
3400140e:	2800      	cmp	r0, #0
34001410:	d1ec      	bne.n	340013ec <MX25UM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001412:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001414:	a901      	add	r1, sp, #4
34001416:	4620      	mov	r0, r4
34001418:	f009 fe38 	bl	3400b08c <HAL_XSPI_MemoryMapped>
3400141c:	3800      	subs	r0, #0
3400141e:	bf18      	it	ne
34001420:	2001      	movne	r0, #1
34001422:	4240      	negs	r0, r0
34001424:	e7e4      	b.n	340013f0 <MX25UM51245G_EnableDTRMemoryMappedMode+0x6a>

34001426 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001426:	b5f0      	push	{r4, r5, r6, r7, lr}
34001428:	460c      	mov	r4, r1
3400142a:	b099      	sub	sp, #100	@ 0x64
  XSPI_RegularCmdTypeDef     s_command = {0};
3400142c:	2100      	movs	r1, #0
{
3400142e:	4606      	mov	r6, r0
34001430:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef     s_command = {0};
34001432:	a805      	add	r0, sp, #20
34001434:	224c      	movs	r2, #76	@ 0x4c
34001436:	f00b fe31 	bl	3400d09c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
3400143a:	2214      	movs	r2, #20
3400143c:	2100      	movs	r1, #0
3400143e:	4668      	mov	r0, sp
34001440:	f00b fe2c 	bl	3400d09c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001444:	b934      	cbnz	r4, 34001454 <MX25UM51245G_WriteEnable+0x2e>
  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001446:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001448:	429d      	cmp	r5, r3
3400144a:	d104      	bne.n	34001456 <MX25UM51245G_WriteEnable+0x30>
    return MX25UM51245G_ERROR;
3400144c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001450:	b019      	add	sp, #100	@ 0x64
34001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001454:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001456:	f105 3cff 	add.w	ip, r5, #4294967295	@ 0xffffffff
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400145a:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400145c:	f1dc 0300 	rsbs	r3, ip, #0
34001460:	eb43 030c 	adc.w	r3, r3, ip
34001464:	00db      	lsls	r3, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001466:	930a      	str	r3, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001468:	2c00      	cmp	r4, #0
3400146a:	d045      	beq.n	340014f8 <MX25UM51245G_WriteEnable+0xd2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400146c:	2310      	movs	r3, #16
3400146e:	9309      	str	r3, [sp, #36]	@ 0x24
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001470:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001474:	f241 3288 	movw	r2, #5000	@ 0x1388
34001478:	4630      	mov	r0, r6
3400147a:	a905      	add	r1, sp, #20
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400147c:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400147e:	f009 fbd7 	bl	3400ac30 <HAL_XSPI_Command>
34001482:	4603      	mov	r3, r0
34001484:	2800      	cmp	r0, #0
34001486:	d1e1      	bne.n	3400144c <MX25UM51245G_WriteEnable+0x26>
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001488:	2c00      	cmp	r4, #0
3400148a:	d037      	beq.n	340014fc <MX25UM51245G_WriteEnable+0xd6>
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
3400148c:	2d01      	cmp	r5, #1
3400148e:	f240 5cfa 	movw	ip, #1530	@ 0x5fa
34001492:	d03d      	beq.n	34001510 <MX25UM51245G_WriteEnable+0xea>
34001494:	4607      	mov	r7, r0
34001496:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
3400149a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
3400149e:	2004      	movs	r0, #4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340014a0:	2101      	movs	r1, #1
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340014a2:	461a      	mov	r2, r3
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
340014a4:	940c      	str	r4, [sp, #48]	@ 0x30
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
340014a6:	f44f 5440 	mov.w	r4, #12288	@ 0x3000
340014aa:	940d      	str	r4, [sp, #52]	@ 0x34
  s_command.Address        = 0U;
340014ac:	2400      	movs	r4, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
340014ae:	e9cd 3015 	strd	r3, r0, [sp, #84]	@ 0x54
340014b2:	9114      	str	r1, [sp, #80]	@ 0x50
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340014b4:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340014b6:	4630      	mov	r0, r6
340014b8:	f241 3288 	movw	r2, #5000	@ 0x1388
340014bc:	a905      	add	r1, sp, #20
340014be:	f8cd c01c 	str.w	ip, [sp, #28]
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340014c2:	970e      	str	r7, [sp, #56]	@ 0x38
  s_command.Address        = 0U;
340014c4:	940b      	str	r4, [sp, #44]	@ 0x2c
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340014c6:	9513      	str	r5, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340014c8:	f009 fbb2 	bl	3400ac30 <HAL_XSPI_Command>
340014cc:	2800      	cmp	r0, #0
340014ce:	d1bd      	bne.n	3400144c <MX25UM51245G_WriteEnable+0x26>
  s_config.MatchValue      = 2U;
340014d0:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340014d2:	2210      	movs	r2, #16
  s_config.MatchMask       = 2U;
340014d4:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340014d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
340014dc:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340014de:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340014e2:	4669      	mov	r1, sp
340014e4:	f241 3288 	movw	r2, #5000	@ 0x1388
340014e8:	4630      	mov	r0, r6
340014ea:	f009 fd53 	bl	3400af94 <HAL_XSPI_AutoPolling>
340014ee:	1b00      	subs	r0, r0, r4
340014f0:	bf18      	it	ne
340014f2:	2001      	movne	r0, #1
340014f4:	4240      	negs	r0, r0
340014f6:	e7ab      	b.n	34001450 <MX25UM51245G_WriteEnable+0x2a>
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
340014f8:	2306      	movs	r3, #6
340014fa:	e7bb      	b.n	34001474 <MX25UM51245G_WriteEnable+0x4e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340014fc:	2d01      	cmp	r5, #1
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
340014fe:	f04f 0c05 	mov.w	ip, #5
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001502:	d012      	beq.n	3400152a <MX25UM51245G_WriteEnable+0x104>
34001504:	4623      	mov	r3, r4
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001506:	4627      	mov	r7, r4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001508:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
3400150c:	4620      	mov	r0, r4
3400150e:	e7c7      	b.n	340014a0 <MX25UM51245G_WriteEnable+0x7a>
34001510:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001514:	f44f 6700 	mov.w	r7, #2048	@ 0x800
34001518:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
3400151c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001520:	2005      	movs	r0, #5
34001522:	2102      	movs	r1, #2
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001524:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34001528:	e7bc      	b.n	340014a4 <MX25UM51245G_WriteEnable+0x7e>
3400152a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400152e:	f44f 6700 	mov.w	r7, #2048	@ 0x800
34001532:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
34001536:	4620      	mov	r0, r4
34001538:	e7f3      	b.n	34001522 <MX25UM51245G_WriteEnable+0xfc>

3400153a <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
3400153a:	b5f0      	push	{r4, r5, r6, r7, lr}
3400153c:	460d      	mov	r5, r1
3400153e:	b095      	sub	sp, #84	@ 0x54
34001540:	4606      	mov	r6, r0
34001542:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001544:	2100      	movs	r1, #0
34001546:	224c      	movs	r2, #76	@ 0x4c
34001548:	a801      	add	r0, sp, #4
{
3400154a:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
3400154c:	f00b fda6 	bl	3400d09c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001550:	b935      	cbnz	r5, 34001560 <MX25UM51245G_WriteCfg2Register+0x26>
  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001552:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001554:	429c      	cmp	r4, r3
34001556:	d104      	bne.n	34001562 <MX25UM51245G_WriteCfg2Register+0x28>
    return MX25UM51245G_ERROR;
34001558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
3400155c:	b015      	add	sp, #84	@ 0x54
3400155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001560:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001562:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001564:	1e63      	subs	r3, r4, #1
34001566:	425a      	negs	r2, r3
34001568:	415a      	adcs	r2, r3
3400156a:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400156c:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400156e:	2d00      	cmp	r5, #0
34001570:	d030      	beq.n	340015d4 <MX25UM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001572:	2310      	movs	r3, #16
34001574:	f247 218d 	movw	r1, #29325	@ 0x728d
34001578:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400157a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400157e:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001580:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001582:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001584:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001588:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400158a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400158c:	bf14      	ite	ne
3400158e:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
34001592:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001596:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400159a:	9103      	str	r1, [sp, #12]
  s_command.Address            = WriteAddr;
3400159c:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400159e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
340015a0:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
340015a2:	d01b      	beq.n	340015dc <MX25UM51245G_WriteCfg2Register+0xa2>
340015a4:	2c01      	cmp	r4, #1
340015a6:	bf0c      	ite	eq
340015a8:	2302      	moveq	r3, #2
340015aa:	2301      	movne	r3, #1
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340015ac:	f241 3288 	movw	r2, #5000	@ 0x1388
340015b0:	4630      	mov	r0, r6
340015b2:	a901      	add	r1, sp, #4
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
340015b4:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340015b6:	f009 fb3b 	bl	3400ac30 <HAL_XSPI_Command>
340015ba:	2800      	cmp	r0, #0
340015bc:	d1cc      	bne.n	34001558 <MX25UM51245G_WriteCfg2Register+0x1e>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340015be:	f241 3288 	movw	r2, #5000	@ 0x1388
340015c2:	4630      	mov	r0, r6
340015c4:	a91a      	add	r1, sp, #104	@ 0x68
340015c6:	f009 fc4b 	bl	3400ae60 <HAL_XSPI_Transmit>
340015ca:	3800      	subs	r0, #0
340015cc:	bf18      	it	ne
340015ce:	2001      	movne	r0, #1
340015d0:	4240      	negs	r0, r0
340015d2:	e7c3      	b.n	3400155c <MX25UM51245G_WriteCfg2Register+0x22>
340015d4:	2172      	movs	r1, #114	@ 0x72
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340015d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
340015da:	e7d0      	b.n	3400157e <MX25UM51245G_WriteCfg2Register+0x44>
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
340015dc:	2301      	movs	r3, #1
340015de:	e7e5      	b.n	340015ac <MX25UM51245G_WriteCfg2Register+0x72>

340015e0 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
340015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
340015e2:	460d      	mov	r5, r1
340015e4:	b095      	sub	sp, #84	@ 0x54
340015e6:	4606      	mov	r6, r0
340015e8:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340015ea:	2100      	movs	r1, #0
340015ec:	224c      	movs	r2, #76	@ 0x4c
340015ee:	a801      	add	r0, sp, #4
{
340015f0:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
340015f2:	f00b fd53 	bl	3400d09c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340015f6:	b935      	cbnz	r5, 34001606 <MX25UM51245G_ReadCfg2Register+0x26>
  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340015f8:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340015fa:	429c      	cmp	r4, r3
340015fc:	d104      	bne.n	34001608 <MX25UM51245G_ReadCfg2Register+0x28>
    return MX25UM51245G_ERROR;
340015fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001602:	b015      	add	sp, #84	@ 0x54
34001604:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001606:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001608:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400160a:	1e63      	subs	r3, r4, #1
3400160c:	425a      	negs	r2, r3
3400160e:	415a      	adcs	r2, r3
34001610:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001612:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001614:	2d00      	cmp	r5, #0
34001616:	d034      	beq.n	34001682 <MX25UM51245G_ReadCfg2Register+0xa2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001618:	2310      	movs	r3, #16
3400161a:	f247 118e 	movw	r1, #29070	@ 0x718e
3400161e:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001624:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001626:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001628:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400162a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400162e:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001630:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001632:	bf14      	ite	ne
34001634:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
34001638:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
3400163c:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001640:	9103      	str	r1, [sp, #12]
  s_command.Address            = ReadAddr;
34001642:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001644:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001646:	9211      	str	r2, [sp, #68]	@ 0x44
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001648:	d024      	beq.n	34001694 <MX25UM51245G_ReadCfg2Register+0xb4>
3400164a:	2c01      	cmp	r4, #1
3400164c:	d11d      	bne.n	3400168a <MX25UM51245G_ReadCfg2Register+0xaa>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
3400164e:	2305      	movs	r3, #5
34001650:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001652:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001654:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001658:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400165a:	4630      	mov	r0, r6
3400165c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001660:	a901      	add	r1, sp, #4
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001662:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001664:	f009 fae4 	bl	3400ac30 <HAL_XSPI_Command>
34001668:	2800      	cmp	r0, #0
3400166a:	d1c8      	bne.n	340015fe <MX25UM51245G_ReadCfg2Register+0x1e>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400166c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001670:	4630      	mov	r0, r6
34001672:	991a      	ldr	r1, [sp, #104]	@ 0x68
34001674:	f009 fc38 	bl	3400aee8 <HAL_XSPI_Receive>
34001678:	3800      	subs	r0, #0
3400167a:	bf18      	it	ne
3400167c:	2001      	movne	r0, #1
3400167e:	4240      	negs	r0, r0
34001680:	e7bf      	b.n	34001602 <MX25UM51245G_ReadCfg2Register+0x22>
34001682:	2171      	movs	r1, #113	@ 0x71
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001684:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001688:	e7cc      	b.n	34001624 <MX25UM51245G_ReadCfg2Register+0x44>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
3400168a:	2304      	movs	r3, #4
3400168c:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400168e:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001690:	2300      	movs	r3, #0
34001692:	e7e1      	b.n	34001658 <MX25UM51245G_ReadCfg2Register+0x78>
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001694:	2c01      	cmp	r4, #1
34001696:	d1fa      	bne.n	3400168e <MX25UM51245G_ReadCfg2Register+0xae>
34001698:	e7db      	b.n	34001652 <MX25UM51245G_ReadCfg2Register+0x72>

3400169a <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
3400169a:	b570      	push	{r4, r5, r6, lr}
3400169c:	460d      	mov	r5, r1
3400169e:	b094      	sub	sp, #80	@ 0x50
340016a0:	4606      	mov	r6, r0
340016a2:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340016a4:	2100      	movs	r1, #0
340016a6:	224c      	movs	r2, #76	@ 0x4c
340016a8:	a801      	add	r0, sp, #4
340016aa:	f00b fcf7 	bl	3400d09c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340016ae:	b9d5      	cbnz	r5, 340016e6 <MX25UM51245G_ResetEnable+0x4c>
340016b0:	2c01      	cmp	r4, #1
340016b2:	d01c      	beq.n	340016ee <MX25UM51245G_ResetEnable+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340016b4:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340016b6:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340016b8:	1e63      	subs	r3, r4, #1
340016ba:	425c      	negs	r4, r3
340016bc:	415c      	adcs	r4, r3
340016be:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340016c0:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340016c2:	b195      	cbz	r5, 340016ea <MX25UM51245G_ResetEnable+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340016c4:	2310      	movs	r3, #16
340016c6:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
340016c8:	f246 6399 	movw	r3, #26265	@ 0x6699
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016cc:	f241 3288 	movw	r2, #5000	@ 0x1388
340016d0:	4630      	mov	r0, r6
340016d2:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340016d4:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016d6:	f009 faab 	bl	3400ac30 <HAL_XSPI_Command>
340016da:	3800      	subs	r0, #0
340016dc:	bf18      	it	ne
340016de:	2001      	movne	r0, #1
340016e0:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340016e2:	b014      	add	sp, #80	@ 0x50
340016e4:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340016e6:	2304      	movs	r3, #4
340016e8:	e7e5      	b.n	340016b6 <MX25UM51245G_ResetEnable+0x1c>
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
340016ea:	2366      	movs	r3, #102	@ 0x66
340016ec:	e7ee      	b.n	340016cc <MX25UM51245G_ResetEnable+0x32>
    return MX25UM51245G_ERROR;
340016ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340016f2:	e7f6      	b.n	340016e2 <MX25UM51245G_ResetEnable+0x48>

340016f4 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340016f4:	b570      	push	{r4, r5, r6, lr}
340016f6:	460d      	mov	r5, r1
340016f8:	b094      	sub	sp, #80	@ 0x50
340016fa:	4606      	mov	r6, r0
340016fc:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340016fe:	2100      	movs	r1, #0
34001700:	224c      	movs	r2, #76	@ 0x4c
34001702:	a801      	add	r0, sp, #4
34001704:	f00b fcca 	bl	3400d09c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001708:	b9d5      	cbnz	r5, 34001740 <MX25UM51245G_ResetMemory+0x4c>
3400170a:	2c01      	cmp	r4, #1
3400170c:	d01c      	beq.n	34001748 <MX25UM51245G_ResetMemory+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400170e:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001710:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001712:	1e63      	subs	r3, r4, #1
34001714:	425c      	negs	r4, r3
34001716:	415c      	adcs	r4, r3
34001718:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400171a:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400171c:	b195      	cbz	r5, 34001744 <MX25UM51245G_ResetMemory+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400171e:	2310      	movs	r3, #16
34001720:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34001722:	f649 1366 	movw	r3, #39270	@ 0x9966
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001726:	f241 3288 	movw	r2, #5000	@ 0x1388
3400172a:	4630      	mov	r0, r6
3400172c:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400172e:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001730:	f009 fa7e 	bl	3400ac30 <HAL_XSPI_Command>
34001734:	3800      	subs	r0, #0
34001736:	bf18      	it	ne
34001738:	2001      	movne	r0, #1
3400173a:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
3400173c:	b014      	add	sp, #80	@ 0x50
3400173e:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001740:	2304      	movs	r3, #4
34001742:	e7e5      	b.n	34001710 <MX25UM51245G_ResetMemory+0x1c>
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34001744:	2399      	movs	r3, #153	@ 0x99
34001746:	e7ee      	b.n	34001726 <MX25UM51245G_ResetMemory+0x32>
    return MX25UM51245G_ERROR;
34001748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400174c:	e7f6      	b.n	3400173c <MX25UM51245G_ResetMemory+0x48>
	...

34001750 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001750:	4b04      	ldr	r3, [pc, #16]	@ (34001764 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001752:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001754:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001758:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400175c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400175e:	9b01      	ldr	r3, [sp, #4]
}
34001760:	b002      	add	sp, #8
34001762:	4770      	bx	lr
34001764:	56028000 	.word	0x56028000

34001768 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34001768:	b570      	push	{r4, r5, r6, lr}
3400176a:	4604      	mov	r4, r0
3400176c:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
3400176e:	2002      	movs	r0, #2
34001770:	f7ff ffee 	bl	34001750 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001774:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001776:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  GPIO_InitTypeDef  gpio_init_structure = {0};
3400177a:	9303      	str	r3, [sp, #12]
3400177c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3400177e:	2301      	movs	r3, #1
34001780:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001784:	2303      	movs	r3, #3
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001786:	4d06      	ldr	r5, [pc, #24]	@ (340017a0 <BSP_SMPS_Init+0x38>)
34001788:	a901      	add	r1, sp, #4
3400178a:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3400178c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
3400178e:	f001 fb9f 	bl	34002ed0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
34001792:	4622      	mov	r2, r4
34001794:	4631      	mov	r1, r6
34001796:	4628      	mov	r0, r5
34001798:	f001 fdb2 	bl	34003300 <HAL_GPIO_WritePin>
}
3400179c:	b006      	add	sp, #24
3400179e:	bd70      	pop	{r4, r5, r6, pc}
340017a0:	56020400 	.word	0x56020400

340017a4 <MX_USART1_Init>:
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
340017a4:	4a0a      	ldr	r2, [pc, #40]	@ (340017d0 <MX_USART1_Init+0x2c>)
340017a6:	6812      	ldr	r2, [r2, #0]
340017a8:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
340017aa:	680a      	ldr	r2, [r1, #0]
340017ac:	6042      	str	r2, [r0, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
340017ae:	220c      	movs	r2, #12
340017b0:	6142      	str	r2, [r0, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
340017b2:	894a      	ldrh	r2, [r1, #10]
340017b4:	6102      	str	r2, [r0, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
340017b6:	684a      	ldr	r2, [r1, #4]
340017b8:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
340017ba:	890a      	ldrh	r2, [r1, #8]
340017bc:	60c2      	str	r2, [r0, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
340017be:	898a      	ldrh	r2, [r1, #12]
340017c0:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
340017c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
340017c6:	61c2      	str	r2, [r0, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
340017c8:	2200      	movs	r2, #0
340017ca:	6242      	str	r2, [r0, #36]	@ 0x24
  return HAL_UART_Init(huart);
340017cc:	f008 bed8 	b.w	3400a580 <HAL_UART_Init>
340017d0:	3400f9ac 	.word	0x3400f9ac

340017d4 <BSP_COM_Init>:
{
340017d4:	b570      	push	{r4, r5, r6, lr}
340017d6:	4604      	mov	r4, r0
  if (COM_Init == NULL)
340017d8:	460d      	mov	r5, r1
{
340017da:	b086      	sub	sp, #24
  if (COM_Init == NULL)
340017dc:	2900      	cmp	r1, #0
340017de:	d034      	beq.n	3400184a <BSP_COM_Init+0x76>
    hcom_uart[COM].Instance = COM_UART[COM];
340017e0:	4b1d      	ldr	r3, [pc, #116]	@ (34001858 <BSP_COM_Init+0x84>)
340017e2:	491e      	ldr	r1, [pc, #120]	@ (3400185c <BSP_COM_Init+0x88>)
340017e4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
340017e8:	2394      	movs	r3, #148	@ 0x94
340017ea:	4343      	muls	r3, r0
340017ec:	50ca      	str	r2, [r1, r3]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
340017ee:	4b1c      	ldr	r3, [pc, #112]	@ (34001860 <BSP_COM_Init+0x8c>)
340017f0:	429a      	cmp	r2, r3
340017f2:	d121      	bne.n	34001838 <BSP_COM_Init+0x64>
  WRITE_REG(RCC->APB2ENSR, Periphs);
340017f4:	2210      	movs	r2, #16
  {
    COM = COM1;
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
340017f6:	2010      	movs	r0, #16
340017f8:	f7ff ffaa 	bl	34001750 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
340017fc:	2008      	movs	r0, #8
340017fe:	f7ff ffa7 	bl	34001750 <LL_AHB4_GRP1_EnableClock>
34001802:	4b18      	ldr	r3, [pc, #96]	@ (34001864 <BSP_COM_Init+0x90>)
  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001804:	2607      	movs	r6, #7
34001806:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
3400180a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
3400180e:	2220      	movs	r2, #32
34001810:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001812:	9b00      	ldr	r3, [sp, #0]
34001814:	2302      	movs	r3, #2
34001816:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
3400181a:	9304      	str	r3, [sp, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;
3400181c:	2301      	movs	r3, #1
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
3400181e:	4812      	ldr	r0, [pc, #72]	@ (34001868 <BSP_COM_Init+0x94>)
34001820:	a901      	add	r1, sp, #4
  GPIO_Init.Pull      = GPIO_PULLUP;
34001822:	9303      	str	r3, [sp, #12]
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001824:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34001826:	f001 fb53 	bl	34002ed0 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
3400182a:	2340      	movs	r3, #64	@ 0x40
  GPIO_Init.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
3400182c:	480f      	ldr	r0, [pc, #60]	@ (3400186c <BSP_COM_Init+0x98>)
3400182e:	a901      	add	r1, sp, #4
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34001830:	9301      	str	r3, [sp, #4]
  GPIO_Init.Alternate = COM_RX_AF[COM];
34001832:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34001834:	f001 fb4c 	bl	34002ed0 <HAL_GPIO_Init>
      if (COM == COM1)
34001838:	b924      	cbnz	r4, 34001844 <BSP_COM_Init+0x70>
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
3400183a:	4629      	mov	r1, r5
3400183c:	4807      	ldr	r0, [pc, #28]	@ (3400185c <BSP_COM_Init+0x88>)
3400183e:	f7ff ffb1 	bl	340017a4 <MX_USART1_Init>
34001842:	b928      	cbnz	r0, 34001850 <BSP_COM_Init+0x7c>
  int32_t status = BSP_ERROR_NONE;
34001844:	2000      	movs	r0, #0
}
34001846:	b006      	add	sp, #24
34001848:	bd70      	pop	{r4, r5, r6, pc}
    status = BSP_ERROR_WRONG_PARAM;
3400184a:	f06f 0001 	mvn.w	r0, #1
3400184e:	e7fa      	b.n	34001846 <BSP_COM_Init+0x72>
          status = BSP_ERROR_PERIPH_FAILURE;
34001850:	f06f 0003 	mvn.w	r0, #3
  return status;
34001854:	e7f7      	b.n	34001846 <BSP_COM_Init+0x72>
34001856:	bf00      	nop
34001858:	3400f9ac 	.word	0x3400f9ac
3400185c:	3400fbc0 	.word	0x3400fbc0
34001860:	52001000 	.word	0x52001000
34001864:	56028000 	.word	0x56028000
34001868:	56021000 	.word	0x56021000
3400186c:	56020c00 	.word	0x56020c00

34001870 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001870:	4b04      	ldr	r3, [pc, #16]	@ (34001884 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001872:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001874:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001878:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400187c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400187e:	9b01      	ldr	r3, [sp, #4]
}
34001880:	b002      	add	sp, #8
34001882:	4770      	bx	lr
34001884:	56028000 	.word	0x56028000

34001888 <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001888:	b530      	push	{r4, r5, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400188a:	4c20      	ldr	r4, [pc, #128]	@ (3400190c <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
3400188c:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400188e:	78a2      	ldrb	r2, [r4, #2]
34001890:	7861      	ldrb	r1, [r4, #1]
34001892:	481f      	ldr	r0, [pc, #124]	@ (34001910 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001894:	f7ff fdc7 	bl	34001426 <MX25UM51245G_WriteEnable>
34001898:	b118      	cbz	r0, 340018a2 <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400189a:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
3400189e:	b005      	add	sp, #20
340018a0:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340018a2:	9000      	str	r0, [sp, #0]
340018a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
340018a8:	78a2      	ldrb	r2, [r4, #2]
340018aa:	7861      	ldrb	r1, [r4, #1]
340018ac:	4818      	ldr	r0, [pc, #96]	@ (34001910 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
340018ae:	f7ff fe44 	bl	3400153a <MX25UM51245G_WriteCfg2Register>
340018b2:	2800      	cmp	r0, #0
340018b4:	d1f1      	bne.n	3400189a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340018b6:	78a2      	ldrb	r2, [r4, #2]
340018b8:	7861      	ldrb	r1, [r4, #1]
340018ba:	4815      	ldr	r0, [pc, #84]	@ (34001910 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
340018bc:	f7ff fdb3 	bl	34001426 <MX25UM51245G_WriteEnable>
340018c0:	4603      	mov	r3, r0
340018c2:	2800      	cmp	r0, #0
340018c4:	d1e9      	bne.n	3400189a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340018c6:	2501      	movs	r5, #1
340018c8:	9500      	str	r5, [sp, #0]
340018ca:	78a2      	ldrb	r2, [r4, #2]
340018cc:	7861      	ldrb	r1, [r4, #1]
340018ce:	4810      	ldr	r0, [pc, #64]	@ (34001910 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
340018d0:	f7ff fe33 	bl	3400153a <MX25UM51245G_WriteCfg2Register>
340018d4:	4604      	mov	r4, r0
340018d6:	2800      	cmp	r0, #0
340018d8:	d1df      	bne.n	3400189a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
340018da:	2028      	movs	r0, #40	@ 0x28
340018dc:	f000 fc18 	bl	34002110 <HAL_Delay>
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340018e0:	4622      	mov	r2, r4
340018e2:	4629      	mov	r1, r5
340018e4:	480a      	ldr	r0, [pc, #40]	@ (34001910 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
340018e6:	f7ff fc83 	bl	340011f0 <MX25UM51245G_AutoPollingMemReady>
340018ea:	4603      	mov	r3, r0
340018ec:	2800      	cmp	r0, #0
340018ee:	d1d4      	bne.n	3400189a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
340018f0:	aa03      	add	r2, sp, #12
340018f2:	9200      	str	r2, [sp, #0]
340018f4:	4629      	mov	r1, r5
340018f6:	4602      	mov	r2, r0
340018f8:	4805      	ldr	r0, [pc, #20]	@ (34001910 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
340018fa:	f7ff fe71 	bl	340015e0 <MX25UM51245G_ReadCfg2Register>
340018fe:	2800      	cmp	r0, #0
34001900:	d1cb      	bne.n	3400189a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
34001902:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001906:	42ab      	cmp	r3, r5
34001908:	d0c9      	beq.n	3400189e <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
3400190a:	e7c6      	b.n	3400189a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
3400190c:	3400fce8 	.word	0x3400fce8
34001910:	3400fcec 	.word	0x3400fcec

34001914 <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001914:	b530      	push	{r4, r5, lr}
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001916:	4d27      	ldr	r5, [pc, #156]	@ (340019b4 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
34001918:	4c27      	ldr	r4, [pc, #156]	@ (340019b8 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
3400191a:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400191c:	4620      	mov	r0, r4
3400191e:	78aa      	ldrb	r2, [r5, #2]
34001920:	7869      	ldrb	r1, [r5, #1]
34001922:	f7ff fd80 	bl	34001426 <MX25UM51245G_WriteEnable>
34001926:	b118      	cbz	r0, 34001930 <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001928:	f06f 0004 	mvn.w	r0, #4
}
3400192c:	b005      	add	sp, #20
3400192e:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001930:	9000      	str	r0, [sp, #0]
34001932:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001936:	4620      	mov	r0, r4
34001938:	78aa      	ldrb	r2, [r5, #2]
3400193a:	7869      	ldrb	r1, [r5, #1]
3400193c:	f7ff fdfd 	bl	3400153a <MX25UM51245G_WriteCfg2Register>
34001940:	2800      	cmp	r0, #0
34001942:	d1f1      	bne.n	34001928 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001944:	4620      	mov	r0, r4
34001946:	78aa      	ldrb	r2, [r5, #2]
34001948:	7869      	ldrb	r1, [r5, #1]
3400194a:	f7ff fd6c 	bl	34001426 <MX25UM51245G_WriteEnable>
3400194e:	4603      	mov	r3, r0
34001950:	2800      	cmp	r0, #0
34001952:	d1e9      	bne.n	34001928 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001954:	2202      	movs	r2, #2
34001956:	9200      	str	r2, [sp, #0]
34001958:	4620      	mov	r0, r4
3400195a:	78aa      	ldrb	r2, [r5, #2]
3400195c:	7869      	ldrb	r1, [r5, #1]
3400195e:	f7ff fdec 	bl	3400153a <MX25UM51245G_WriteCfg2Register>
34001962:	2800      	cmp	r0, #0
34001964:	d1e0      	bne.n	34001928 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001966:	2028      	movs	r0, #40	@ 0x28
34001968:	f000 fbd2 	bl	34002110 <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400196c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001970:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001972:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001976:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001978:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400197a:	f009 f81b 	bl	3400a9b4 <HAL_XSPI_Init>
3400197e:	b9a8      	cbnz	r0, 340019ac <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001980:	2201      	movs	r2, #1
34001982:	4620      	mov	r0, r4
34001984:	4611      	mov	r1, r2
34001986:	f7ff fc33 	bl	340011f0 <MX25UM51245G_AutoPollingMemReady>
3400198a:	4603      	mov	r3, r0
3400198c:	2800      	cmp	r0, #0
3400198e:	d1cb      	bne.n	34001928 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34001990:	aa03      	add	r2, sp, #12
34001992:	9200      	str	r2, [sp, #0]
34001994:	2201      	movs	r2, #1
34001996:	4620      	mov	r0, r4
34001998:	4611      	mov	r1, r2
3400199a:	f7ff fe21 	bl	340015e0 <MX25UM51245G_ReadCfg2Register>
3400199e:	2800      	cmp	r0, #0
340019a0:	d1c2      	bne.n	34001928 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
340019a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
340019a6:	2b02      	cmp	r3, #2
340019a8:	d0c0      	beq.n	3400192c <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
340019aa:	e7bd      	b.n	34001928 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
340019ac:	f06f 0003 	mvn.w	r0, #3
  return ret;
340019b0:	e7bc      	b.n	3400192c <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
340019b2:	bf00      	nop
340019b4:	3400fce8 	.word	0x3400fce8
340019b8:	3400fcec 	.word	0x3400fcec

340019bc <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 4;
340019bc:	2304      	movs	r3, #4
340019be:	4a0e      	ldr	r2, [pc, #56]	@ (340019f8 <MX_XSPI_NOR_Init+0x3c>)
340019c0:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
340019c4:	680a      	ldr	r2, [r1, #0]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
340019c6:	2300      	movs	r3, #0
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
340019c8:	6102      	str	r2, [r0, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
340019ca:	2202      	movs	r2, #2
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
340019cc:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
340019d0:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
340019d2:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
340019d6:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
340019d8:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
340019da:	6083      	str	r3, [r0, #8]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
340019dc:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
340019de:	68ca      	ldr	r2, [r1, #12]
  hxspi->Init.ChipSelectBoundary      = 0;
340019e0:	6303      	str	r3, [r0, #48]	@ 0x30
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
340019e2:	2a01      	cmp	r2, #1
340019e4:	bf12      	itee	ne
340019e6:	461a      	movne	r2, r3
340019e8:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
340019ec:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
340019f0:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
340019f2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
340019f4:	f008 bfde 	b.w	3400a9b4 <HAL_XSPI_Init>
340019f8:	5802a000 	.word	0x5802a000

340019fc <BSP_XSPI_NOR_EnableMemoryMappedMode>:
{
340019fc:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340019fe:	b998      	cbnz	r0, 34001a28 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a00:	4c0b      	ldr	r4, [pc, #44]	@ (34001a30 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>)
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001a02:	78a3      	ldrb	r3, [r4, #2]
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a04:	7861      	ldrb	r1, [r4, #1]
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001a06:	b95b      	cbnz	r3, 34001a20 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a08:	2201      	movs	r2, #1
34001a0a:	480a      	ldr	r0, [pc, #40]	@ (34001a34 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001a0c:	f7ff fc56 	bl	340012bc <MX25UM51245G_EnableSTRMemoryMappedMode>
34001a10:	b110      	cbz	r0, 34001a18 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001a12:	f06f 0004 	mvn.w	r0, #4
}
34001a16:	bd10      	pop	{r4, pc}
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001a18:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
34001a1a:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001a1c:	7023      	strb	r3, [r4, #0]
34001a1e:	e7fa      	b.n	34001a16 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
34001a20:	4804      	ldr	r0, [pc, #16]	@ (34001a34 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001a22:	f7ff fcb0 	bl	34001386 <MX25UM51245G_EnableDTRMemoryMappedMode>
34001a26:	e7f3      	b.n	34001a10 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
34001a28:	f06f 0001 	mvn.w	r0, #1
  return ret;
34001a2c:	e7f3      	b.n	34001a16 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
34001a2e:	bf00      	nop
34001a30:	3400fce8 	.word	0x3400fce8
34001a34:	3400fcec 	.word	0x3400fcec

34001a38 <BSP_XSPI_NOR_ConfigFlash>:
{
34001a38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34001a3c:	460d      	mov	r5, r1
34001a3e:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001a40:	2800      	cmp	r0, #0
34001a42:	d15d      	bne.n	34001b00 <BSP_XSPI_NOR_ConfigFlash+0xc8>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
34001a44:	4c31      	ldr	r4, [pc, #196]	@ (34001b0c <BSP_XSPI_NOR_ConfigFlash+0xd4>)
34001a46:	7823      	ldrb	r3, [r4, #0]
34001a48:	2b02      	cmp	r3, #2
34001a4a:	d05c      	beq.n	34001b06 <BSP_XSPI_NOR_ConfigFlash+0xce>
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
34001a4c:	7863      	ldrb	r3, [r4, #1]
34001a4e:	2b01      	cmp	r3, #1
34001a50:	d14d      	bne.n	34001aee <BSP_XSPI_NOR_ConfigFlash+0xb6>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
34001a52:	2901      	cmp	r1, #1
34001a54:	78a2      	ldrb	r2, [r4, #2]
34001a56:	d109      	bne.n	34001a6c <BSP_XSPI_NOR_ConfigFlash+0x34>
34001a58:	4296      	cmp	r6, r2
34001a5a:	d107      	bne.n	34001a6c <BSP_XSPI_NOR_ConfigFlash+0x34>
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001a5c:	2301      	movs	r3, #1
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001a5e:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001a60:	7023      	strb	r3, [r4, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
34001a62:	7065      	strb	r5, [r4, #1]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001a64:	70a6      	strb	r6, [r4, #2]
}
34001a66:	b004      	add	sp, #16
34001a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a6c:	4f28      	ldr	r7, [pc, #160]	@ (34001b10 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001a6e:	2101      	movs	r1, #1
34001a70:	4638      	mov	r0, r7
34001a72:	f7ff fcd8 	bl	34001426 <MX25UM51245G_WriteEnable>
34001a76:	4603      	mov	r3, r0
34001a78:	b9b0      	cbnz	r0, 34001aa8 <BSP_XSPI_NOR_ConfigFlash+0x70>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a7a:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
34001a7c:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a80:	78a2      	ldrb	r2, [r4, #2]
34001a82:	4638      	mov	r0, r7
34001a84:	7861      	ldrb	r1, [r4, #1]
34001a86:	f7ff fd58 	bl	3400153a <MX25UM51245G_WriteCfg2Register>
34001a8a:	4680      	mov	r8, r0
34001a8c:	b960      	cbnz	r0, 34001aa8 <BSP_XSPI_NOR_ConfigFlash+0x70>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001a8e:	2028      	movs	r0, #40	@ 0x28
34001a90:	f000 fb3e 	bl	34002110 <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
34001a94:	78a3      	ldrb	r3, [r4, #2]
34001a96:	2b01      	cmp	r3, #1
34001a98:	d009      	beq.n	34001aae <BSP_XSPI_NOR_ConfigFlash+0x76>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001a9a:	2200      	movs	r2, #0
34001a9c:	481c      	ldr	r0, [pc, #112]	@ (34001b10 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001a9e:	4611      	mov	r1, r2
34001aa0:	f7ff fba6 	bl	340011f0 <MX25UM51245G_AutoPollingMemReady>
34001aa4:	4603      	mov	r3, r0
34001aa6:	b170      	cbz	r0, 34001ac6 <BSP_XSPI_NOR_ConfigFlash+0x8e>
            ret = XSPI_NOR_ExitOPIMode(Instance);
34001aa8:	f06f 0004 	mvn.w	r0, #4
34001aac:	e7db      	b.n	34001a66 <BSP_XSPI_NOR_ConfigFlash+0x2e>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001aae:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34001ab0:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34001ab4:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001ab8:	f008 ff7c 	bl	3400a9b4 <HAL_XSPI_Init>
34001abc:	2800      	cmp	r0, #0
34001abe:	d0ec      	beq.n	34001a9a <BSP_XSPI_NOR_ConfigFlash+0x62>
            ret = XSPI_NOR_ExitOPIMode(Instance);
34001ac0:	f06f 0003 	mvn.w	r0, #3
34001ac4:	e7cf      	b.n	34001a66 <BSP_XSPI_NOR_ConfigFlash+0x2e>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001ac6:	aa03      	add	r2, sp, #12
34001ac8:	4601      	mov	r1, r0
34001aca:	9200      	str	r2, [sp, #0]
34001acc:	4602      	mov	r2, r0
34001ace:	4810      	ldr	r0, [pc, #64]	@ (34001b10 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001ad0:	f7ff fd86 	bl	340015e0 <MX25UM51245G_ReadCfg2Register>
34001ad4:	2800      	cmp	r0, #0
34001ad6:	d1e7      	bne.n	34001aa8 <BSP_XSPI_NOR_ConfigFlash+0x70>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
34001ad8:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001adc:	2b00      	cmp	r3, #0
34001ade:	d1e3      	bne.n	34001aa8 <BSP_XSPI_NOR_ConfigFlash+0x70>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34001ae0:	2d01      	cmp	r5, #1
34001ae2:	d1bb      	bne.n	34001a5c <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001ae4:	78a3      	ldrb	r3, [r4, #2]
34001ae6:	b933      	cbnz	r3, 34001af6 <BSP_XSPI_NOR_ConfigFlash+0xbe>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34001ae8:	f7ff ff14 	bl	34001914 <XSPI_NOR_EnterDOPIMode.constprop.0>
34001aec:	e005      	b.n	34001afa <BSP_XSPI_NOR_ConfigFlash+0xc2>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34001aee:	2901      	cmp	r1, #1
34001af0:	d1b4      	bne.n	34001a5c <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
34001af2:	2a00      	cmp	r2, #0
34001af4:	d1f8      	bne.n	34001ae8 <BSP_XSPI_NOR_ConfigFlash+0xb0>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34001af6:	f7ff fec7 	bl	34001888 <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
34001afa:	2800      	cmp	r0, #0
34001afc:	d1b3      	bne.n	34001a66 <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001afe:	e7ad      	b.n	34001a5c <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
34001b00:	f06f 0001 	mvn.w	r0, #1
34001b04:	e7af      	b.n	34001a66 <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34001b06:	f06f 0019 	mvn.w	r0, #25
  return ret;
34001b0a:	e7ac      	b.n	34001a66 <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001b0c:	3400fce8 	.word	0x3400fce8
34001b10:	3400fcec 	.word	0x3400fcec

34001b14 <BSP_XSPI_NOR_Init>:
{
34001b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34001b18:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001b1a:	4604      	mov	r4, r0
34001b1c:	4e86      	ldr	r6, [pc, #536]	@ (34001d38 <BSP_XSPI_NOR_Init+0x224>)
{
34001b1e:	b08f      	sub	sp, #60	@ 0x3c
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001b20:	2800      	cmp	r0, #0
34001b22:	f040 8102 	bne.w	34001d2a <BSP_XSPI_NOR_Init+0x216>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34001b26:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 34001d48 <BSP_XSPI_NOR_Init+0x234>
34001b2a:	f898 3000 	ldrb.w	r3, [r8]
34001b2e:	b153      	cbz	r3, 34001b46 <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
34001b30:	2500      	movs	r5, #0
  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34001b32:	2064      	movs	r0, #100	@ 0x64
34001b34:	2100      	movs	r1, #0
34001b36:	fb00 6004 	mla	r0, r0, r4, r6
34001b3a:	f009 fb15 	bl	3400b168 <HAL_XSPI_SetClockPrescaler>
}
34001b3e:	4628      	mov	r0, r5
34001b40:	b00f      	add	sp, #60	@ 0x3c
34001b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001b46:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
34001b4a:	4f7c      	ldr	r7, [pc, #496]	@ (34001d3c <BSP_XSPI_NOR_Init+0x228>)
  __HAL_RCC_PWR_CLK_ENABLE();
34001b4c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34001b50:	f8c7 5a60 	str.w	r5, [r7, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001b54:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001b58:	f04f 0b03 	mov.w	fp, #3
34001b5c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001b5e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
34001b60:	f7ff fe86 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34001b64:	f002 f870 	bl	34003c48 <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34001b68:	2101      	movs	r1, #1
34001b6a:	2002      	movs	r0, #2
34001b6c:	f002 f826 	bl	34003bbc <HAL_PWREx_ConfigVddIORange>
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001b70:	4b73      	ldr	r3, [pc, #460]	@ (34001d40 <BSP_XSPI_NOR_Init+0x22c>)
  XSPI_CLK_GPIO_CLK_ENABLE();
34001b72:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001b76:	f8c7 5a20 	str.w	r5, [r7, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001b7a:	f8c3 5220 	str.w	r5, [r3, #544]	@ 0x220
34001b7e:	f7ff fe77 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001b82:	2509      	movs	r5, #9
  XSPI_DQS_GPIO_CLK_ENABLE();
34001b84:	f7ff fe74 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001b88:	2701      	movs	r7, #1
  XSPI_CS_GPIO_CLK_ENABLE();
34001b8a:	f7ff fe71 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
34001b8e:	f7ff fe6f 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34001b92:	f7ff fe6d 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
34001b96:	f7ff fe6b 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34001b9a:	f7ff fe69 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
34001b9e:	f7ff fe67 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34001ba2:	f7ff fe65 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34001ba6:	f7ff fe63 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34001baa:	f7ff fe61 	bl	34001870 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
34001bae:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001bb0:	4864      	ldr	r0, [pc, #400]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001bb2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34001bb4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001bb8:	e9cd 7b07 	strd	r7, fp, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001bbc:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001bbe:	f001 f987 	bl	34002ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001bc2:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001bc4:	485f      	ldr	r0, [pc, #380]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001bc6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001bc8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34001bca:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34001bcc:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001bce:	f001 f97f 	bl	34002ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34001bd2:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34001bd4:	485b      	ldr	r0, [pc, #364]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001bd6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34001bd8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
34001bda:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34001bdc:	f001 f978 	bl	34002ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34001be0:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34001be2:	4858      	ldr	r0, [pc, #352]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001be4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34001be6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34001be8:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34001bea:	f001 f971 	bl	34002ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34001bee:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34001bf0:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34001bf4:	4853      	ldr	r0, [pc, #332]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001bf6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34001bf8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
34001bfa:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34001bfc:	f001 f968 	bl	34002ed0 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34001c00:	4850      	ldr	r0, [pc, #320]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001c02:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34001c04:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34001c08:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34001c0a:	f001 f961 	bl	34002ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34001c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34001c12:	484c      	ldr	r0, [pc, #304]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001c14:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34001c16:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
34001c18:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34001c1a:	f001 f959 	bl	34002ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34001c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34001c22:	4848      	ldr	r0, [pc, #288]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001c24:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34001c26:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
34001c28:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34001c2a:	f001 f951 	bl	34002ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34001c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34001c32:	4844      	ldr	r0, [pc, #272]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001c34:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34001c36:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
34001c38:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34001c3a:	f001 f949 	bl	34002ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34001c3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34001c42:	4840      	ldr	r0, [pc, #256]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001c44:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34001c46:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
34001c48:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34001c4a:	f001 f941 	bl	34002ed0 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34001c4e:	483d      	ldr	r0, [pc, #244]	@ (34001d44 <BSP_XSPI_NOR_Init+0x230>)
34001c50:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
34001c52:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
34001c54:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34001c56:	f001 f93b 	bl	34002ed0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
34001c5a:	4622      	mov	r2, r4
34001c5c:	210f      	movs	r1, #15
34001c5e:	20aa      	movs	r0, #170	@ 0xaa
34001c60:	f000 fb9c 	bl	3400239c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
34001c64:	20aa      	movs	r0, #170	@ 0xaa
34001c66:	f000 fbf7 	bl	34002458 <HAL_NVIC_EnableIRQ>
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
34001c6a:	a805      	add	r0, sp, #20
34001c6c:	f7ff faa7 	bl	340011be <MX25UM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34001c70:	9b05      	ldr	r3, [sp, #20]
34001c72:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
34001c76:	2b00      	cmp	r3, #0
34001c78:	fab3 f283 	clz	r2, r3
34001c7c:	bf08      	it	eq
34001c7e:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34001c80:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001c84:	4630      	mov	r0, r6
34001c86:	a901      	add	r1, sp, #4
      xspi_init.ClockPrescaler = 3;
34001c88:	f8cd b008 	str.w	fp, [sp, #8]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
34001c8c:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34001c8e:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34001c90:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001c92:	f7ff fe93 	bl	340019bc <MX_XSPI_NOR_Init>
34001c96:	2800      	cmp	r0, #0
34001c98:	d14a      	bne.n	34001d30 <BSP_XSPI_NOR_Init+0x21c>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001c9a:	4622      	mov	r2, r4
34001c9c:	4621      	mov	r1, r4
34001c9e:	4630      	mov	r0, r6
34001ca0:	f7ff fcfb 	bl	3400169a <MX25UM51245G_ResetEnable>
34001ca4:	b110      	cbz	r0, 34001cac <BSP_XSPI_NOR_Init+0x198>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001ca6:	f06f 0504 	mvn.w	r5, #4
34001caa:	e742      	b.n	34001b32 <BSP_XSPI_NOR_Init+0x1e>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001cac:	4622      	mov	r2, r4
34001cae:	4621      	mov	r1, r4
34001cb0:	4630      	mov	r0, r6
34001cb2:	f7ff fd1f 	bl	340016f4 <MX25UM51245G_ResetMemory>
34001cb6:	2800      	cmp	r0, #0
34001cb8:	d1f5      	bne.n	34001ca6 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001cba:	4622      	mov	r2, r4
34001cbc:	4639      	mov	r1, r7
34001cbe:	4630      	mov	r0, r6
34001cc0:	f7ff fceb 	bl	3400169a <MX25UM51245G_ResetEnable>
34001cc4:	2800      	cmp	r0, #0
34001cc6:	d1ee      	bne.n	34001ca6 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001cc8:	4622      	mov	r2, r4
34001cca:	4639      	mov	r1, r7
34001ccc:	4630      	mov	r0, r6
34001cce:	f7ff fd11 	bl	340016f4 <MX25UM51245G_ResetMemory>
34001cd2:	2800      	cmp	r0, #0
34001cd4:	d1e7      	bne.n	34001ca6 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001cd6:	463a      	mov	r2, r7
34001cd8:	4639      	mov	r1, r7
34001cda:	4630      	mov	r0, r6
34001cdc:	f7ff fcdd 	bl	3400169a <MX25UM51245G_ResetEnable>
34001ce0:	2800      	cmp	r0, #0
34001ce2:	d1e0      	bne.n	34001ca6 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001ce4:	463a      	mov	r2, r7
34001ce6:	4639      	mov	r1, r7
34001ce8:	4630      	mov	r0, r6
34001cea:	f7ff fd03 	bl	340016f4 <MX25UM51245G_ResetMemory>
34001cee:	2800      	cmp	r0, #0
34001cf0:	d1d9      	bne.n	34001ca6 <BSP_XSPI_NOR_Init+0x192>
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34001cf2:	2064      	movs	r0, #100	@ 0x64
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34001cf4:	f888 7000 	strb.w	r7, [r8]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
34001cf8:	f888 4001 	strb.w	r4, [r8, #1]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
34001cfc:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34001d00:	f000 fa06 	bl	34002110 <HAL_Delay>
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d04:	4630      	mov	r0, r6
34001d06:	f898 2002 	ldrb.w	r2, [r8, #2]
34001d0a:	f898 1001 	ldrb.w	r1, [r8, #1]
34001d0e:	f7ff fa6f 	bl	340011f0 <MX25UM51245G_AutoPollingMemReady>
34001d12:	2800      	cmp	r0, #0
34001d14:	d1c7      	bne.n	34001ca6 <BSP_XSPI_NOR_Init+0x192>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
34001d16:	f899 2001 	ldrb.w	r2, [r9, #1]
34001d1a:	f899 1000 	ldrb.w	r1, [r9]
34001d1e:	f7ff fe8b 	bl	34001a38 <BSP_XSPI_NOR_ConfigFlash>
34001d22:	2800      	cmp	r0, #0
34001d24:	f43f af04 	beq.w	34001b30 <BSP_XSPI_NOR_Init+0x1c>
34001d28:	e7bd      	b.n	34001ca6 <BSP_XSPI_NOR_Init+0x192>
    ret = BSP_ERROR_WRONG_PARAM;
34001d2a:	f06f 0501 	mvn.w	r5, #1
34001d2e:	e700      	b.n	34001b32 <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
34001d30:	f06f 0503 	mvn.w	r5, #3
34001d34:	e6fd      	b.n	34001b32 <BSP_XSPI_NOR_Init+0x1e>
34001d36:	bf00      	nop
34001d38:	3400fcec 	.word	0x3400fcec
34001d3c:	56028000 	.word	0x56028000
34001d40:	56029000 	.word	0x56029000
34001d44:	56023400 	.word	0x56023400
34001d48:	3400fce8 	.word	0x3400fce8

34001d4c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34001d4c:	4b44      	ldr	r3, [pc, #272]	@ (34001e60 <SystemInit+0x114>)
34001d4e:	4a45      	ldr	r2, [pc, #276]	@ (34001e64 <SystemInit+0x118>)
{
34001d50:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34001d52:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
34001d54:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
34001d56:	2502      	movs	r5, #2
  SAU->RNR = 0;
34001d58:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34001d5a:	4943      	ldr	r1, [pc, #268]	@ (34001e68 <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34001d5c:	4e43      	ldr	r6, [pc, #268]	@ (34001e6c <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34001d5e:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34001d62:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34001d66:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34001d6a:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
34001d6e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34001d72:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001d76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
34001d7a:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34001d7e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001d82:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
34001d86:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
34001d8a:	2503      	movs	r5, #3
  SAU->RBAR = 0;
34001d8c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001d90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
34001d94:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
34001d98:	2504      	movs	r5, #4
  SAU->RBAR = 0;
34001d9a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001d9e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
34001da2:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
34001da6:	2505      	movs	r5, #5
  SAU->RBAR = 0;
34001da8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001dac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
34001db0:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
34001db4:	2506      	movs	r5, #6
  SAU->RBAR = 0;
34001db6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001dba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
34001dbe:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
34001dc2:	2507      	movs	r5, #7
  SAU->RBAR = 0;
34001dc4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001dc8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
34001dcc:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34001dd0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001dd4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34001dd8:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
34001ddc:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
34001de0:	689a      	ldr	r2, [r3, #8]
34001de2:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34001de4:	4a22      	ldr	r2, [pc, #136]	@ (34001e70 <SystemInit+0x124>)
34001de6:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34001de8:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
34001dec:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34001dee:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34001df0:	f045 0510 	orr.w	r5, r5, #16
34001df4:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34001df6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34001df8:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
34001dfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34001e00:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34001e04:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34001e08:	f042 0210 	orr.w	r2, r2, #16
34001e0c:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34001e10:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34001e14:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34001e18:	f022 0210 	bic.w	r2, r2, #16
34001e1c:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34001e20:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34001e24:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34001e28:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34001e2c:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34001e2e:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34001e32:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34001e36:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34001e3a:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
34001e3e:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34001e40:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34001e44:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
34001e48:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
34001e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34001e50:	4a08      	ldr	r2, [pc, #32]	@ (34001e74 <SystemInit+0x128>)
34001e52:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
34001e56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34001e5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34001e5e:	bd70      	pop	{r4, r5, r6, pc}
34001e60:	e000ed00 	.word	0xe000ed00
34001e64:	34000400 	.word	0x34000400
34001e68:	56028000 	.word	0x56028000
34001e6c:	56008000 	.word	0x56008000
34001e70:	56024800 	.word	0x56024800
34001e74:	e002ed00 	.word	0xe002ed00

34001e78 <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34001e78:	4b6e      	ldr	r3, [pc, #440]	@ (34002034 <SystemCoreClockUpdate+0x1bc>)
{
34001e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34001e7c:	6a1a      	ldr	r2, [r3, #32]
34001e7e:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
34001e82:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34001e86:	f000 80b8 	beq.w	34001ffa <SystemCoreClockUpdate+0x182>
34001e8a:	d806      	bhi.n	34001e9a <SystemCoreClockUpdate+0x22>
34001e8c:	b962      	cbnz	r2, 34001ea8 <SystemCoreClockUpdate+0x30>
  {
  case 0:  /* HSI used as system clock source (default after reset) */
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34001e8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34001e90:	4b69      	ldr	r3, [pc, #420]	@ (34002038 <SystemCoreClockUpdate+0x1c0>)
34001e92:	f3c2 12c1 	ubfx	r2, r2, #7, #2
34001e96:	40d3      	lsrs	r3, r2
    break;
34001e98:	e003      	b.n	34001ea2 <SystemCoreClockUpdate+0x2a>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34001e9a:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34001e9e:	d00b      	beq.n	34001eb8 <SystemCoreClockUpdate+0x40>
  uint32_t sysclk = 0;
34001ea0:	2300      	movs	r3, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34001ea2:	4a66      	ldr	r2, [pc, #408]	@ (3400203c <SystemCoreClockUpdate+0x1c4>)
34001ea4:	6013      	str	r3, [r2, #0]
}
34001ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
34001eaa:	4a65      	ldr	r2, [pc, #404]	@ (34002040 <SystemCoreClockUpdate+0x1c8>)
34001eac:	f413 7f00 	tst.w	r3, #512	@ 0x200
34001eb0:	4b64      	ldr	r3, [pc, #400]	@ (34002044 <SystemCoreClockUpdate+0x1cc>)
34001eb2:	bf08      	it	eq
34001eb4:	4613      	moveq	r3, r2
34001eb6:	e7f4      	b.n	34001ea2 <SystemCoreClockUpdate+0x2a>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34001eb8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
34001ebc:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34001ec0:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34001ec4:	d02a      	beq.n	34001f1c <SystemCoreClockUpdate+0xa4>
34001ec6:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34001eca:	d036      	beq.n	34001f3a <SystemCoreClockUpdate+0xc2>
34001ecc:	2a00      	cmp	r2, #0
34001ece:	d143      	bne.n	34001f58 <SystemCoreClockUpdate+0xe0>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34001ed0:	f8d3 7080 	ldr.w	r7, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
34001ed4:	013d      	lsls	r5, r7, #4
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34001ed6:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34001eda:	f100 8096 	bmi.w	3400200a <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34001ede:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34001ee2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34001ee6:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34001eea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34001eee:	460e      	mov	r6, r1
    switch (pllsource)
34001ef0:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34001ef4:	f3c2 65c2 	ubfx	r5, r2, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34001ef8:	f3c7 5105 	ubfx	r1, r7, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34001efc:	f3c2 6202 	ubfx	r2, r2, #24, #3
    switch (pllsource)
34001f00:	d04f      	beq.n	34001fa2 <SystemCoreClockUpdate+0x12a>
34001f02:	d87c      	bhi.n	34001ffe <SystemCoreClockUpdate+0x186>
34001f04:	2e00      	cmp	r6, #0
34001f06:	d03c      	beq.n	34001f82 <SystemCoreClockUpdate+0x10a>
34001f08:	2600      	movs	r6, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34001f0a:	4b4a      	ldr	r3, [pc, #296]	@ (34002034 <SystemCoreClockUpdate+0x1bc>)
        sysclk = MSI_VALUE;
34001f0c:	4f4c      	ldr	r7, [pc, #304]	@ (34002040 <SystemCoreClockUpdate+0x1c8>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        sysclk = MSI_VALUE;
34001f10:	f413 7f00 	tst.w	r3, #512	@ 0x200
34001f14:	4b4b      	ldr	r3, [pc, #300]	@ (34002044 <SystemCoreClockUpdate+0x1cc>)
34001f16:	bf08      	it	eq
34001f18:	463b      	moveq	r3, r7
34001f1a:	e038      	b.n	34001f8e <SystemCoreClockUpdate+0x116>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
34001f1c:	f8d3 7090 	ldr.w	r7, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
34001f20:	013c      	lsls	r4, r7, #4
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34001f22:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34001f26:	d470      	bmi.n	3400200a <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34001f28:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
34001f2c:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34001f30:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34001f34:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34001f38:	e7d9      	b.n	34001eee <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34001f3a:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
34001f3e:	0138      	lsls	r0, r7, #4
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
34001f40:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34001f44:	d461      	bmi.n	3400200a <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34001f46:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
34001f4a:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34001f4e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34001f52:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34001f56:	e7ca      	b.n	34001eee <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34001f58:	f8d3 70b0 	ldr.w	r7, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
34001f5c:	013a      	lsls	r2, r7, #4
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34001f5e:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34001f62:	d452      	bmi.n	3400200a <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34001f64:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34001f68:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34001f6c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34001f70:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34001f74:	e7bb      	b.n	34001eee <SystemCoreClockUpdate+0x76>
    switch (pllsource)
34001f76:	460a      	mov	r2, r1
34001f78:	460d      	mov	r5, r1
34001f7a:	4608      	mov	r0, r1
34001f7c:	460c      	mov	r4, r1
34001f7e:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34001f82:	4b2c      	ldr	r3, [pc, #176]	@ (34002034 <SystemCoreClockUpdate+0x1bc>)
34001f84:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
34001f86:	4b2c      	ldr	r3, [pc, #176]	@ (34002038 <SystemCoreClockUpdate+0x1c0>)
34001f88:	f3c7 17c1 	ubfx	r7, r7, #7, #2
34001f8c:	40fb      	lsrs	r3, r7
    if (pllbypass == 0U)
34001f8e:	b14e      	cbz	r6, 34001fa4 <SystemCoreClockUpdate+0x12c>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34001f90:	4a28      	ldr	r2, [pc, #160]	@ (34002034 <SystemCoreClockUpdate+0x1bc>)
34001f92:	f8d2 20c4 	ldr.w	r2, [r2, #196]	@ 0xc4
34001f96:	f3c2 4207 	ubfx	r2, r2, #16, #8
34001f9a:	3201      	adds	r2, #1
    sysclk = sysclk / ic_divider;
34001f9c:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
34001fa0:	e77f      	b.n	34001ea2 <SystemCoreClockUpdate+0x2a>
      sysclk = HSE_VALUE;
34001fa2:	4b29      	ldr	r3, [pc, #164]	@ (34002048 <SystemCoreClockUpdate+0x1d0>)
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34001fa4:	ee07 0a10 	vmov	s14, r0
34001fa8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
34001fac:	ee07 4a10 	vmov	s14, r4
34001fb0:	ee07 3a90 	vmov	s15, r3
34001fb4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 3400204c <SystemCoreClockUpdate+0x1d4>
34001fb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34001fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34001fc0:	eea6 7a26 	vfma.f32	s14, s12, s13
34001fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
34001fc8:	ee07 1a10 	vmov	s14, r1
34001fcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34001fd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34001fd4:	ee07 5a90 	vmov	s15, r5
34001fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
34001fdc:	ee07 2a90 	vmov	s15, r2
34001fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34001fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
34001fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
34001fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34001ff0:	ee17 3a90 	vmov	r3, s15
34001ff4:	e7cc      	b.n	34001f90 <SystemCoreClockUpdate+0x118>
      sysclk = HSE_VALUE;
34001ff6:	4b14      	ldr	r3, [pc, #80]	@ (34002048 <SystemCoreClockUpdate+0x1d0>)
34001ff8:	e7ca      	b.n	34001f90 <SystemCoreClockUpdate+0x118>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34001ffa:	4b13      	ldr	r3, [pc, #76]	@ (34002048 <SystemCoreClockUpdate+0x1d0>)
34001ffc:	e751      	b.n	34001ea2 <SystemCoreClockUpdate+0x2a>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34001ffe:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34002002:	4b13      	ldr	r3, [pc, #76]	@ (34002050 <SystemCoreClockUpdate+0x1d8>)
34002004:	bf18      	it	ne
34002006:	2300      	movne	r3, #0
34002008:	e7cc      	b.n	34001fa4 <SystemCoreClockUpdate+0x12c>
    switch (pllsource)
3400200a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3400200e:	d0f2      	beq.n	34001ff6 <SystemCoreClockUpdate+0x17e>
34002010:	d809      	bhi.n	34002026 <SystemCoreClockUpdate+0x1ae>
34002012:	2900      	cmp	r1, #0
34002014:	d0af      	beq.n	34001f76 <SystemCoreClockUpdate+0xfe>
34002016:	2200      	movs	r2, #0
34002018:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
3400201c:	4615      	mov	r5, r2
3400201e:	4610      	mov	r0, r2
34002020:	4614      	mov	r4, r2
34002022:	4611      	mov	r1, r2
34002024:	e771      	b.n	34001f0a <SystemCoreClockUpdate+0x92>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34002026:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
3400202a:	4b09      	ldr	r3, [pc, #36]	@ (34002050 <SystemCoreClockUpdate+0x1d8>)
3400202c:	bf18      	it	ne
3400202e:	2300      	movne	r3, #0
34002030:	e7ae      	b.n	34001f90 <SystemCoreClockUpdate+0x118>
34002032:	bf00      	nop
34002034:	56028000 	.word	0x56028000
34002038:	03d09000 	.word	0x03d09000
3400203c:	3400f9b4 	.word	0x3400f9b4
34002040:	003d0900 	.word	0x003d0900
34002044:	00f42400 	.word	0x00f42400
34002048:	02dc6c00 	.word	0x02dc6c00
3400204c:	33800000 	.word	0x33800000
34002050:	00bb8000 	.word	0x00bb8000

34002054 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34002054:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34002058:	b500      	push	{lr}
  SystemCoreClockUpdate();
3400205a:	f7ff ff0d 	bl	34001e78 <SystemCoreClockUpdate>

  return SystemCoreClock;
}
3400205e:	4b05      	ldr	r3, [pc, #20]	@ (34002074 <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
34002060:	f85d eb04 	ldr.w	lr, [sp], #4
34002064:	6818      	ldr	r0, [r3, #0]
34002066:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
3400206a:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
3400206e:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34002072:	4774      	bxns	lr
34002074:	3400f9b4 	.word	0x3400f9b4

34002078 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
34002078:	4770      	bx	lr
	...

3400207c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
3400207c:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
3400207e:	4b0f      	ldr	r3, [pc, #60]	@ (340020bc <HAL_InitTick+0x40>)
{
34002080:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq == 0UL)
34002082:	781a      	ldrb	r2, [r3, #0]
34002084:	b90a      	cbnz	r2, 3400208a <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
34002086:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
34002088:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
3400208a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
3400208e:	fbb3 f3f2 	udiv	r3, r3, r2
34002092:	4a0b      	ldr	r2, [pc, #44]	@ (340020c0 <HAL_InitTick+0x44>)
34002094:	6810      	ldr	r0, [r2, #0]
34002096:	fbb0 f0f3 	udiv	r0, r0, r3
3400209a:	f000 f9f1 	bl	34002480 <HAL_SYSTICK_Config>
3400209e:	4604      	mov	r4, r0
340020a0:	2800      	cmp	r0, #0
340020a2:	d1f0      	bne.n	34002086 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
340020a4:	2d0f      	cmp	r5, #15
340020a6:	d8ee      	bhi.n	34002086 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
340020a8:	4602      	mov	r2, r0
340020aa:	4629      	mov	r1, r5
340020ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340020b0:	f000 f974 	bl	3400239c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
340020b4:	4b03      	ldr	r3, [pc, #12]	@ (340020c4 <HAL_InitTick+0x48>)
340020b6:	4620      	mov	r0, r4
340020b8:	601d      	str	r5, [r3, #0]
  return HAL_OK;
340020ba:	e7e5      	b.n	34002088 <HAL_InitTick+0xc>
340020bc:	3400f9b8 	.word	0x3400f9b8
340020c0:	3400f9b4 	.word	0x3400f9b4
340020c4:	3400f9bc 	.word	0x3400f9bc

340020c8 <HAL_Init>:
{
340020c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
340020ca:	2003      	movs	r0, #3
340020cc:	f000 f948 	bl	34002360 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
340020d0:	f7ff fed2 	bl	34001e78 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
340020d4:	200f      	movs	r0, #15
340020d6:	f7ff ffd1 	bl	3400207c <HAL_InitTick>
340020da:	4604      	mov	r4, r0
340020dc:	b918      	cbnz	r0, 340020e6 <HAL_Init+0x1e>
  HAL_MspInit();
340020de:	f7ff ffcb 	bl	34002078 <HAL_MspInit>
}
340020e2:	4620      	mov	r0, r4
340020e4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
340020e6:	2401      	movs	r4, #1
340020e8:	e7fb      	b.n	340020e2 <HAL_Init+0x1a>
	...

340020ec <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
340020ec:	4a03      	ldr	r2, [pc, #12]	@ (340020fc <HAL_IncTick+0x10>)
340020ee:	4b04      	ldr	r3, [pc, #16]	@ (34002100 <HAL_IncTick+0x14>)
340020f0:	6811      	ldr	r1, [r2, #0]
340020f2:	781b      	ldrb	r3, [r3, #0]
340020f4:	440b      	add	r3, r1
340020f6:	6013      	str	r3, [r2, #0]
}
340020f8:	4770      	bx	lr
340020fa:	bf00      	nop
340020fc:	3400fd50 	.word	0x3400fd50
34002100:	3400f9b8 	.word	0x3400f9b8

34002104 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
34002104:	4b01      	ldr	r3, [pc, #4]	@ (3400210c <HAL_GetTick+0x8>)
34002106:	6818      	ldr	r0, [r3, #0]
}
34002108:	4770      	bx	lr
3400210a:	bf00      	nop
3400210c:	3400fd50 	.word	0x3400fd50

34002110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34002110:	b538      	push	{r3, r4, r5, lr}
34002112:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
34002114:	f7ff fff6 	bl	34002104 <HAL_GetTick>
34002118:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
3400211a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
3400211c:	bf1e      	ittt	ne
3400211e:	4b04      	ldrne	r3, [pc, #16]	@ (34002130 <HAL_Delay+0x20>)
34002120:	781b      	ldrbne	r3, [r3, #0]
34002122:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
34002124:	f7ff ffee 	bl	34002104 <HAL_GetTick>
34002128:	1b43      	subs	r3, r0, r5
3400212a:	42a3      	cmp	r3, r4
3400212c:	d3fa      	bcc.n	34002124 <HAL_Delay+0x14>
  {
  }
}
3400212e:	bd38      	pop	{r3, r4, r5, pc}
34002130:	3400f9b8 	.word	0x3400f9b8

34002134 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34002134:	b570      	push	{r4, r5, r6, lr}
34002136:	4604      	mov	r4, r0
34002138:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
3400213a:	f7ff ffe3 	bl	34002104 <HAL_GetTick>
3400213e:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
34002140:	b12c      	cbz	r4, 3400214e <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34002142:	6822      	ldr	r2, [r4, #0]
34002144:	4b1b      	ldr	r3, [pc, #108]	@ (340021b4 <HAL_BSEC_OTP_Reload+0x80>)
34002146:	429a      	cmp	r2, r3
34002148:	d003      	beq.n	34002152 <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400214a:	2301      	movs	r3, #1
3400214c:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400214e:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
34002150:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
34002152:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
34002156:	d2f8      	bcs.n	3400214a <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
34002158:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400215a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
3400215e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34002162:	2301      	movs	r3, #1
34002164:	f005 001f 	and.w	r0, r5, #31
34002168:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400216a:	420b      	tst	r3, r1
3400216c:	d11f      	bne.n	340021ae <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
3400216e:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
34002172:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34002176:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3400217a:	432b      	orrs	r3, r5
3400217c:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34002180:	6823      	ldr	r3, [r4, #0]
34002182:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
34002186:	07d2      	lsls	r2, r2, #31
34002188:	d409      	bmi.n	3400219e <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
3400218a:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
3400218e:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
34002192:	d0dd      	beq.n	34002150 <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
34002194:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34002198:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
3400219c:	e7d6      	b.n	3400214c <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
3400219e:	f7ff ffb1 	bl	34002104 <HAL_GetTick>
340021a2:	1b80      	subs	r0, r0, r6
340021a4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
340021a8:	d9ea      	bls.n	34002180 <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
340021aa:	230a      	movs	r3, #10
340021ac:	e7ce      	b.n	3400214c <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
340021ae:	2304      	movs	r3, #4
340021b0:	e7cc      	b.n	3400214c <HAL_BSEC_OTP_Reload+0x18>
340021b2:	bf00      	nop
340021b4:	56009000 	.word	0x56009000

340021b8 <HAL_BSEC_OTP_Read>:
{
340021b8:	b570      	push	{r4, r5, r6, lr}
340021ba:	460e      	mov	r6, r1
340021bc:	4615      	mov	r5, r2
  if (hbsec == NULL)
340021be:	4604      	mov	r4, r0
340021c0:	b130      	cbz	r0, 340021d0 <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
340021c2:	b11a      	cbz	r2, 340021cc <HAL_BSEC_OTP_Read+0x14>
340021c4:	6802      	ldr	r2, [r0, #0]
340021c6:	4b09      	ldr	r3, [pc, #36]	@ (340021ec <HAL_BSEC_OTP_Read+0x34>)
340021c8:	429a      	cmp	r2, r3
340021ca:	d003      	beq.n	340021d4 <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340021cc:	2301      	movs	r3, #1
340021ce:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340021d0:	2001      	movs	r0, #1
}
340021d2:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
340021d4:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
340021d8:	d2f8      	bcs.n	340021cc <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
340021da:	f7ff ffab 	bl	34002134 <HAL_BSEC_OTP_Reload>
340021de:	2800      	cmp	r0, #0
340021e0:	d1f6      	bne.n	340021d0 <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
340021e2:	6823      	ldr	r3, [r4, #0]
340021e4:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
340021e8:	602b      	str	r3, [r5, #0]
  return HAL_OK;
340021ea:	e7f2      	b.n	340021d2 <HAL_BSEC_OTP_Read+0x1a>
340021ec:	56009000 	.word	0x56009000

340021f0 <HAL_BSEC_OTP_Program>:
{
340021f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
340021f4:	4604      	mov	r4, r0
340021f6:	460e      	mov	r6, r1
340021f8:	4617      	mov	r7, r2
340021fa:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
340021fc:	f7ff ff82 	bl	34002104 <HAL_GetTick>
34002200:	4680      	mov	r8, r0
  if (hbsec == NULL)
34002202:	b12c      	cbz	r4, 34002210 <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
34002204:	6822      	ldr	r2, [r4, #0]
34002206:	4b28      	ldr	r3, [pc, #160]	@ (340022a8 <HAL_BSEC_OTP_Program+0xb8>)
34002208:	429a      	cmp	r2, r3
3400220a:	d005      	beq.n	34002218 <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400220c:	2301      	movs	r3, #1
3400220e:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
34002210:	2001      	movs	r0, #1
}
34002212:	b003      	add	sp, #12
34002214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
34002218:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
3400221c:	d004      	beq.n	34002228 <HAL_BSEC_OTP_Program+0x38>
3400221e:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
34002222:	4822      	ldr	r0, [pc, #136]	@ (340022ac <HAL_BSEC_OTP_Program+0xbc>)
34002224:	f7fe ff72 	bl	3400110c <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
34002228:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
3400222c:	d2ee      	bcs.n	3400220c <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400222e:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
34002230:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34002232:	f503 7300 	add.w	r3, r3, #512	@ 0x200
34002236:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400223a:	2301      	movs	r3, #1
3400223c:	f006 001f 	and.w	r0, r6, #31
34002240:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34002242:	420b      	tst	r3, r1
34002244:	d12e      	bne.n	340022a4 <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
34002246:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
3400224a:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
3400224e:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
34002252:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
34002256:	4335      	orrs	r5, r6
34002258:	ea45 0509 	orr.w	r5, r5, r9
3400225c:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
34002260:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34002264:	6823      	ldr	r3, [r4, #0]
34002266:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400226a:	07d2      	lsls	r2, r2, #31
3400226c:	d406      	bmi.n	3400227c <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
3400226e:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34002272:	03db      	lsls	r3, r3, #15
34002274:	d50b      	bpl.n	3400228e <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
34002276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3400227a:	e7c8      	b.n	3400220e <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
3400227c:	f7ff ff42 	bl	34002104 <HAL_GetTick>
34002280:	eba0 0008 	sub.w	r0, r0, r8
34002284:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34002288:	d9ec      	bls.n	34002264 <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
3400228a:	230a      	movs	r3, #10
3400228c:	e7bf      	b.n	3400220e <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
3400228e:	4631      	mov	r1, r6
34002290:	4620      	mov	r0, r4
34002292:	aa01      	add	r2, sp, #4
34002294:	f7ff ff90 	bl	340021b8 <HAL_BSEC_OTP_Read>
34002298:	2800      	cmp	r0, #0
3400229a:	d1b9      	bne.n	34002210 <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
3400229c:	9b01      	ldr	r3, [sp, #4]
3400229e:	42bb      	cmp	r3, r7
340022a0:	d1e9      	bne.n	34002276 <HAL_BSEC_OTP_Program+0x86>
340022a2:	e7b6      	b.n	34002212 <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
340022a4:	2304      	movs	r3, #4
340022a6:	e7b2      	b.n	3400220e <HAL_BSEC_OTP_Program+0x1e>
340022a8:	56009000 	.word	0x56009000
340022ac:	3400eab6 	.word	0x3400eab6

340022b0 <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
340022b0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
340022b2:	4604      	mov	r4, r0
340022b4:	b350      	cbz	r0, 3400230c <HAL_CACHEAXI_Enable+0x5c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
340022b6:	6803      	ldr	r3, [r0, #0]
340022b8:	4a15      	ldr	r2, [pc, #84]	@ (34002310 <HAL_CACHEAXI_Enable+0x60>)
340022ba:	4293      	cmp	r3, r2
340022bc:	d008      	beq.n	340022d0 <HAL_CACHEAXI_Enable+0x20>
340022be:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340022c2:	4293      	cmp	r3, r2
340022c4:	d004      	beq.n	340022d0 <HAL_CACHEAXI_Enable+0x20>
340022c6:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
340022ca:	4812      	ldr	r0, [pc, #72]	@ (34002314 <HAL_CACHEAXI_Enable+0x64>)
340022cc:	f7fe ff1e 	bl	3400110c <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340022d0:	6823      	ldr	r3, [r4, #0]
340022d2:	685b      	ldr	r3, [r3, #4]
340022d4:	07d9      	lsls	r1, r3, #31
340022d6:	d407      	bmi.n	340022e8 <HAL_CACHEAXI_Enable+0x38>
  }

  if (status == HAL_OK)
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340022d8:	2000      	movs	r0, #0
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340022da:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340022dc:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340022de:	6813      	ldr	r3, [r2, #0]
340022e0:	f043 0301 	orr.w	r3, r3, #1
340022e4:	6013      	str	r3, [r2, #0]
  }

  return status;
}
340022e6:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
340022e8:	f7ff ff0c 	bl	34002104 <HAL_GetTick>
340022ec:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340022ee:	6823      	ldr	r3, [r4, #0]
340022f0:	685b      	ldr	r3, [r3, #4]
340022f2:	07db      	lsls	r3, r3, #31
340022f4:	d5f0      	bpl.n	340022d8 <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
340022f6:	f7ff ff05 	bl	34002104 <HAL_GetTick>
340022fa:	1b40      	subs	r0, r0, r5
340022fc:	2801      	cmp	r0, #1
340022fe:	d9f6      	bls.n	340022ee <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
34002300:	6823      	ldr	r3, [r4, #0]
34002302:	685b      	ldr	r3, [r3, #4]
34002304:	07da      	lsls	r2, r3, #31
34002306:	d4f2      	bmi.n	340022ee <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
34002308:	2310      	movs	r3, #16
3400230a:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
3400230c:	2001      	movs	r0, #1
3400230e:	e7ea      	b.n	340022e6 <HAL_CACHEAXI_Enable+0x36>
34002310:	580dfc00 	.word	0x580dfc00
34002314:	3400eb5f 	.word	0x3400eb5f

34002318 <HAL_CACHEAXI_Init>:
{
34002318:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
3400231a:	4604      	mov	r4, r0
3400231c:	b1c8      	cbz	r0, 34002352 <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400231e:	6803      	ldr	r3, [r0, #0]
34002320:	4a0d      	ldr	r2, [pc, #52]	@ (34002358 <HAL_CACHEAXI_Init+0x40>)
34002322:	4293      	cmp	r3, r2
34002324:	d007      	beq.n	34002336 <HAL_CACHEAXI_Init+0x1e>
34002326:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400232a:	4293      	cmp	r3, r2
3400232c:	d003      	beq.n	34002336 <HAL_CACHEAXI_Init+0x1e>
3400232e:	21bc      	movs	r1, #188	@ 0xbc
34002330:	480a      	ldr	r0, [pc, #40]	@ (3400235c <HAL_CACHEAXI_Init+0x44>)
34002332:	f7fe feeb 	bl	3400110c <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
34002336:	7923      	ldrb	r3, [r4, #4]
34002338:	b913      	cbnz	r3, 34002340 <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
3400233a:	4620      	mov	r0, r4
3400233c:	f7fe fecc 	bl	340010d8 <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002340:	2300      	movs	r3, #0
34002342:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
34002344:	2301      	movs	r3, #1
34002346:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34002348:	4620      	mov	r0, r4
}
3400234a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400234e:	f7ff bfaf 	b.w	340022b0 <HAL_CACHEAXI_Enable>
}
34002352:	2001      	movs	r0, #1
34002354:	bd10      	pop	{r4, pc}
34002356:	bf00      	nop
34002358:	580dfc00 	.word	0x580dfc00
3400235c:	3400eb5f 	.word	0x3400eb5f

34002360 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002360:	1ec3      	subs	r3, r0, #3
34002362:	2b04      	cmp	r3, #4
{
34002364:	b510      	push	{r4, lr}
34002366:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002368:	d903      	bls.n	34002372 <HAL_NVIC_SetPriorityGrouping+0x12>
3400236a:	21e6      	movs	r1, #230	@ 0xe6
3400236c:	4809      	ldr	r0, [pc, #36]	@ (34002394 <HAL_NVIC_SetPriorityGrouping+0x34>)
3400236e:	f7fe fecd 	bl	3400110c <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34002372:	4909      	ldr	r1, [pc, #36]	@ (34002398 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34002374:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34002376:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34002378:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
3400237c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
34002380:	0412      	lsls	r2, r2, #16
34002382:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34002384:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34002386:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
3400238a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
3400238e:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
34002390:	bd10      	pop	{r4, pc}
34002392:	bf00      	nop
34002394:	3400ec0c 	.word	0x3400ec0c
34002398:	e000ed00 	.word	0xe000ed00

3400239c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400239c:	f110 0f0c 	cmn.w	r0, #12
{
340023a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340023a4:	4605      	mov	r5, r0
340023a6:	460c      	mov	r4, r1
340023a8:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
340023aa:	db01      	blt.n	340023b0 <HAL_NVIC_SetPriority+0x14>
340023ac:	1d03      	adds	r3, r0, #4
340023ae:	d103      	bne.n	340023b8 <HAL_NVIC_SetPriority+0x1c>
340023b0:	21ff      	movs	r1, #255	@ 0xff
340023b2:	4826      	ldr	r0, [pc, #152]	@ (3400244c <HAL_NVIC_SetPriority+0xb0>)
340023b4:	f7fe feaa 	bl	3400110c <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
340023b8:	4b25      	ldr	r3, [pc, #148]	@ (34002450 <HAL_NVIC_SetPriority+0xb4>)
340023ba:	68de      	ldr	r6, [r3, #12]
340023bc:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
340023c0:	2e02      	cmp	r6, #2
340023c2:	d806      	bhi.n	340023d2 <HAL_NVIC_SetPriority+0x36>
340023c4:	b157      	cbz	r7, 340023dc <HAL_NVIC_SetPriority+0x40>
340023c6:	f44f 7181 	mov.w	r1, #258	@ 0x102
340023ca:	4820      	ldr	r0, [pc, #128]	@ (3400244c <HAL_NVIC_SetPriority+0xb0>)
340023cc:	f7fe fe9e 	bl	3400110c <assert_failed>
340023d0:	e004      	b.n	340023dc <HAL_NVIC_SetPriority+0x40>
340023d2:	2301      	movs	r3, #1
340023d4:	1ef2      	subs	r2, r6, #3
340023d6:	4093      	lsls	r3, r2
340023d8:	42bb      	cmp	r3, r7
340023da:	d9f4      	bls.n	340023c6 <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
340023dc:	2c0f      	cmp	r4, #15
340023de:	f1c6 0807 	rsb	r8, r6, #7
340023e2:	d804      	bhi.n	340023ee <HAL_NVIC_SetPriority+0x52>
340023e4:	2301      	movs	r3, #1
340023e6:	fa03 f308 	lsl.w	r3, r3, r8
340023ea:	42a3      	cmp	r3, r4
340023ec:	d804      	bhi.n	340023f8 <HAL_NVIC_SetPriority+0x5c>
340023ee:	f240 1103 	movw	r1, #259	@ 0x103
340023f2:	4816      	ldr	r0, [pc, #88]	@ (3400244c <HAL_NVIC_SetPriority+0xb0>)
340023f4:	f7fe fe8a 	bl	3400110c <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
340023f8:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
340023fc:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34002400:	bf28      	it	cs
34002402:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002406:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400240a:	2b06      	cmp	r3, #6
3400240c:	f1a6 0603 	sub.w	r6, r6, #3
34002410:	bf98      	it	ls
34002412:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002414:	fa02 f808 	lsl.w	r8, r2, r8
34002418:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
3400241c:	40b2      	lsls	r2, r6
3400241e:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002422:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
34002424:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002426:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400242a:	bfac      	ite	ge
3400242c:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002430:	4a08      	ldrlt	r2, [pc, #32]	@ (34002454 <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002432:	ea4f 1303 	mov.w	r3, r3, lsl #4
34002436:	b2db      	uxtb	r3, r3
34002438:	bfab      	itete	ge
3400243a:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400243e:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002442:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002446:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
34002448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400244c:	3400ec0c 	.word	0x3400ec0c
34002450:	e000ed00 	.word	0xe000ed00
34002454:	e000ed14 	.word	0xe000ed14

34002458 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34002458:	2800      	cmp	r0, #0
3400245a:	db08      	blt.n	3400246e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400245c:	2301      	movs	r3, #1
3400245e:	0941      	lsrs	r1, r0, #5
34002460:	4a05      	ldr	r2, [pc, #20]	@ (34002478 <HAL_NVIC_EnableIRQ+0x20>)
34002462:	f000 001f 	and.w	r0, r0, #31
34002466:	4083      	lsls	r3, r0
34002468:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
3400246c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
3400246e:	f240 1115 	movw	r1, #277	@ 0x115
34002472:	4802      	ldr	r0, [pc, #8]	@ (3400247c <HAL_NVIC_EnableIRQ+0x24>)
34002474:	f7fe be4a 	b.w	3400110c <assert_failed>
34002478:	e000e100 	.word	0xe000e100
3400247c:	3400ec0c 	.word	0x3400ec0c

34002480 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34002480:	3801      	subs	r0, #1
34002482:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
34002486:	d20b      	bcs.n	340024a0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002488:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400248c:	21f0      	movs	r1, #240	@ 0xf0
3400248e:	4a05      	ldr	r2, [pc, #20]	@ (340024a4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002490:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002492:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34002496:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34002498:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3400249a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
3400249c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
3400249e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
340024a0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
340024a2:	4770      	bx	lr
340024a4:	e000ed00 	.word	0xe000ed00

340024a8 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @brief  Line Event callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340024a8:	4770      	bx	lr

340024aa <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @brief  Limit callback on the Pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340024aa:	4770      	bx	lr

340024ac <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @brief  Error callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340024ac:	4770      	bx	lr

340024ae <HAL_DCMIPP_ErrorCallback>:
/**
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
340024ae:	4770      	bx	lr

340024b0 <HAL_DCMIPP_IRQHandler>:
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340024b0:	6803      	ldr	r3, [r0, #0]
{
340024b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340024b4:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	@ 0x3f8
{
340024b8:	4604      	mov	r4, r0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
340024ba:	0472      	lsls	r2, r6, #17
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
340024bc:	f8d3 53f0 	ldr.w	r5, [r3, #1008]	@ 0x3f0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
340024c0:	d512      	bpl.n	340024e8 <HAL_DCMIPP_IRQHandler+0x38>
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
340024c2:	0469      	lsls	r1, r5, #17
340024c4:	d510      	bpl.n	340024e8 <HAL_DCMIPP_IRQHandler+0x38>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340024c6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340024ca:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340024cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
340024d0:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
340024d4:	6882      	ldr	r2, [r0, #8]
340024d6:	f042 0204 	orr.w	r2, r2, #4
340024da:	6082      	str	r2, [r0, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
340024dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340024e0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340024e4:	f7ff ffe1 	bl	340024aa <HAL_DCMIPP_PIPE_LimitEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
340024e8:	0572      	lsls	r2, r6, #21
340024ea:	d50a      	bpl.n	34002502 <HAL_DCMIPP_IRQHandler+0x52>
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
340024ec:	056b      	lsls	r3, r5, #21
340024ee:	d508      	bpl.n	34002502 <HAL_DCMIPP_IRQHandler+0x52>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
340024f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340024f4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
340024f6:	2100      	movs	r1, #0
340024f8:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
340024fa:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
340024fe:	f009 f961 	bl	3400b7c4 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34002502:	05b0      	lsls	r0, r6, #22
34002504:	d516      	bpl.n	34002534 <HAL_DCMIPP_IRQHandler+0x84>
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
34002506:	05a9      	lsls	r1, r5, #22
34002508:	d514      	bpl.n	34002534 <HAL_DCMIPP_IRQHandler+0x84>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400250a:	6823      	ldr	r3, [r4, #0]
3400250c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
34002510:	0752      	lsls	r2, r2, #29
34002512:	d507      	bpl.n	34002524 <HAL_DCMIPP_IRQHandler+0x74>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34002514:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002518:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
3400251c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
34002520:	2201      	movs	r2, #1
34002522:	7162      	strb	r2, [r4, #5]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34002524:	f44f 7200 	mov.w	r2, #512	@ 0x200
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34002528:	2100      	movs	r1, #0
3400252a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
3400252c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34002530:	f009 f958 	bl	3400b7e4 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
34002534:	05f3      	lsls	r3, r6, #23
34002536:	d50a      	bpl.n	3400254e <HAL_DCMIPP_IRQHandler+0x9e>
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34002538:	05e8      	lsls	r0, r5, #23
3400253a:	d508      	bpl.n	3400254e <HAL_DCMIPP_IRQHandler+0x9e>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
3400253c:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002540:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34002542:	2100      	movs	r1, #0
34002544:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34002546:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
3400254a:	f7ff ffad 	bl	340024a8 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
3400254e:	0431      	lsls	r1, r6, #16
34002550:	d516      	bpl.n	34002580 <HAL_DCMIPP_IRQHandler+0xd0>
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34002552:	042a      	lsls	r2, r5, #16
34002554:	d514      	bpl.n	34002580 <HAL_DCMIPP_IRQHandler+0xd0>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002556:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002558:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400255a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3400255e:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002560:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34002564:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34002568:	68a2      	ldr	r2, [r4, #8]
3400256a:	f042 0208 	orr.w	r2, r2, #8
3400256e:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34002570:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002574:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002578:	2304      	movs	r3, #4
3400257a:	7163      	strb	r3, [r4, #5]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3400257c:	f7ff ff96 	bl	340024ac <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34002580:	03f3      	lsls	r3, r6, #15
34002582:	d50a      	bpl.n	3400259a <HAL_DCMIPP_IRQHandler+0xea>
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34002584:	03e8      	lsls	r0, r5, #15
34002586:	d508      	bpl.n	3400259a <HAL_DCMIPP_IRQHandler+0xea>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34002588:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400258c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
3400258e:	2101      	movs	r1, #1
34002590:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34002592:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34002596:	f7ff ff87 	bl	340024a8 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
3400259a:	0371      	lsls	r1, r6, #13
3400259c:	d50a      	bpl.n	340025b4 <HAL_DCMIPP_IRQHandler+0x104>
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
3400259e:	036a      	lsls	r2, r5, #13
340025a0:	d508      	bpl.n	340025b4 <HAL_DCMIPP_IRQHandler+0x104>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
340025a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
340025a6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
340025a8:	2101      	movs	r1, #1
340025aa:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
340025ac:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
340025b0:	f009 f908 	bl	3400b7c4 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
340025b4:	03b3      	lsls	r3, r6, #14
340025b6:	d516      	bpl.n	340025e6 <HAL_DCMIPP_IRQHandler+0x136>
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
340025b8:	03a8      	lsls	r0, r5, #14
340025ba:	d514      	bpl.n	340025e6 <HAL_DCMIPP_IRQHandler+0x136>
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340025bc:	6823      	ldr	r3, [r4, #0]
340025be:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
340025c2:	0751      	lsls	r1, r2, #29
340025c4:	d507      	bpl.n	340025d6 <HAL_DCMIPP_IRQHandler+0x126>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
340025c6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340025ca:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
340025ce:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
340025d2:	2201      	movs	r2, #1
340025d4:	71a2      	strb	r2, [r4, #6]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340025d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340025da:	2101      	movs	r1, #1
340025dc:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340025de:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340025e2:	f009 f8ff 	bl	3400b7e4 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
340025e6:	0232      	lsls	r2, r6, #8
340025e8:	d516      	bpl.n	34002618 <HAL_DCMIPP_IRQHandler+0x168>
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
340025ea:	022b      	lsls	r3, r5, #8
340025ec:	d514      	bpl.n	34002618 <HAL_DCMIPP_IRQHandler+0x168>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340025ee:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340025f0:	2101      	movs	r1, #1
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340025f2:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340025f6:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340025f8:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
340025fc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
34002600:	68a2      	ldr	r2, [r4, #8]
34002602:	f042 0210 	orr.w	r2, r2, #16
34002606:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
34002608:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400260c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002610:	2304      	movs	r3, #4
34002612:	71a3      	strb	r3, [r4, #6]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34002614:	f7ff ff4a 	bl	340024ac <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34002618:	01f0      	lsls	r0, r6, #7
3400261a:	d50a      	bpl.n	34002632 <HAL_DCMIPP_IRQHandler+0x182>
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
3400261c:	01e9      	lsls	r1, r5, #7
3400261e:	d508      	bpl.n	34002632 <HAL_DCMIPP_IRQHandler+0x182>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34002620:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002624:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34002626:	2102      	movs	r1, #2
34002628:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
3400262a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
3400262e:	f7ff ff3b 	bl	340024a8 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34002632:	0172      	lsls	r2, r6, #5
34002634:	d50a      	bpl.n	3400264c <HAL_DCMIPP_IRQHandler+0x19c>
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
34002636:	016b      	lsls	r3, r5, #5
34002638:	d508      	bpl.n	3400264c <HAL_DCMIPP_IRQHandler+0x19c>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
3400263a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
3400263e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002640:	2102      	movs	r1, #2
34002642:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34002644:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002648:	f009 f8bc 	bl	3400b7c4 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
3400264c:	01b0      	lsls	r0, r6, #6
3400264e:	d516      	bpl.n	3400267e <HAL_DCMIPP_IRQHandler+0x1ce>
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34002650:	01a9      	lsls	r1, r5, #6
34002652:	d514      	bpl.n	3400267e <HAL_DCMIPP_IRQHandler+0x1ce>
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002654:	6823      	ldr	r3, [r4, #0]
34002656:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
3400265a:	0752      	lsls	r2, r2, #29
3400265c:	d507      	bpl.n	3400266e <HAL_DCMIPP_IRQHandler+0x1be>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
3400265e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002662:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
34002666:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
3400266a:	2201      	movs	r2, #1
3400266c:	71e2      	strb	r2, [r4, #7]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
3400266e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34002672:	2102      	movs	r1, #2
34002674:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34002676:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
3400267a:	f009 f8b3 	bl	3400b7e4 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
3400267e:	2e00      	cmp	r6, #0
34002680:	da16      	bge.n	340026b0 <HAL_DCMIPP_IRQHandler+0x200>
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34002682:	2d00      	cmp	r5, #0
34002684:	da14      	bge.n	340026b0 <HAL_DCMIPP_IRQHandler+0x200>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002686:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002688:	2102      	movs	r1, #2
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3400268a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
3400268e:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002690:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34002694:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34002698:	68a2      	ldr	r2, [r4, #8]
3400269a:	f042 0220 	orr.w	r2, r2, #32
3400269e:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
340026a0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
340026a4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
340026a8:	2304      	movs	r3, #4
340026aa:	71e3      	strb	r3, [r4, #7]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
340026ac:	f7ff fefe 	bl	340024ac <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
340026b0:	0670      	lsls	r0, r6, #25
340026b2:	d514      	bpl.n	340026de <HAL_DCMIPP_IRQHandler+0x22e>
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
340026b4:	0669      	lsls	r1, r5, #25
340026b6:	d512      	bpl.n	340026de <HAL_DCMIPP_IRQHandler+0x22e>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
340026b8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340026ba:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
340026bc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340026c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
340026c4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
340026c8:	68a2      	ldr	r2, [r4, #8]
340026ca:	f042 0202 	orr.w	r2, r2, #2
340026ce:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
340026d0:	2240      	movs	r2, #64	@ 0x40
340026d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340026d6:	2304      	movs	r3, #4
340026d8:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340026da:	f7ff fee8 	bl	340024ae <HAL_DCMIPP_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
340026de:	06b2      	lsls	r2, r6, #26
340026e0:	d514      	bpl.n	3400270c <HAL_DCMIPP_IRQHandler+0x25c>
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
340026e2:	06ab      	lsls	r3, r5, #26
340026e4:	d512      	bpl.n	3400270c <HAL_DCMIPP_IRQHandler+0x25c>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
340026e6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340026e8:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
340026ea:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340026ee:	f022 0220 	bic.w	r2, r2, #32
340026f2:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
340026f6:	68a2      	ldr	r2, [r4, #8]
340026f8:	f042 0201 	orr.w	r2, r2, #1
340026fc:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
340026fe:	2220      	movs	r2, #32
34002700:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002704:	2304      	movs	r3, #4
34002706:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002708:	f7ff fed1 	bl	340024ae <HAL_DCMIPP_ErrorCallback>
}
3400270c:	bd70      	pop	{r4, r5, r6, pc}

3400270e <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @brief  Line Error callback on the Data Lane
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
3400270e:	4770      	bx	lr

34002710 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
/**
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002710:	4770      	bx	lr

34002712 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
/**
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002712:	4770      	bx	lr

34002714 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @brief  End Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34002714:	4770      	bx	lr

34002716 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @brief  Start Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34002716:	4770      	bx	lr

34002718 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @brief  Timer Counter Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
34002718:	4770      	bx	lr

3400271a <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @brief  Line Byte Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
3400271a:	4770      	bx	lr

3400271c <HAL_DCMIPP_CSI_IRQHandler>:
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
3400271c:	4bb5      	ldr	r3, [pc, #724]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
{
3400271e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34002722:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
{
34002726:	4604      	mov	r4, r0
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34002728:	02b2      	lsls	r2, r6, #10
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
3400272a:	f8d3 8094 	ldr.w	r8, [r3, #148]	@ 0x94
  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
3400272e:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
34002732:	f8d3 7084 	ldr.w	r7, [r3, #132]	@ 0x84
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34002736:	d50d      	bpl.n	34002754 <HAL_DCMIPP_CSI_IRQHandler+0x38>
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
34002738:	02a9      	lsls	r1, r5, #10
3400273a:	d50b      	bpl.n	34002754 <HAL_DCMIPP_CSI_IRQHandler+0x38>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
3400273c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002740:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
34002744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34002748:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400274c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34002750:	f7ff ffde 	bl	34002710 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34002754:	0732      	lsls	r2, r6, #28
34002756:	d515      	bpl.n	34002784 <HAL_DCMIPP_CSI_IRQHandler+0x68>
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34002758:	072b      	lsls	r3, r5, #28
3400275a:	d513      	bpl.n	34002784 <HAL_DCMIPP_CSI_IRQHandler+0x68>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400275c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
3400275e:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002760:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002764:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002766:	f013 0f04 	tst.w	r3, #4
3400276a:	4ba2      	ldr	r3, [pc, #648]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
3400276c:	bf1e      	ittt	ne
3400276e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002772:	f022 0208 	bicne.w	r2, r2, #8
34002776:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
3400277a:	2208      	movs	r2, #8
3400277c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002780:	f7ff ffcb 	bl	3400271a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34002784:	0770      	lsls	r0, r6, #29
34002786:	d515      	bpl.n	340027b4 <HAL_DCMIPP_CSI_IRQHandler+0x98>
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34002788:	0769      	lsls	r1, r5, #29
3400278a:	d513      	bpl.n	340027b4 <HAL_DCMIPP_CSI_IRQHandler+0x98>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400278c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
3400278e:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002790:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002794:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002796:	f013 0f04 	tst.w	r3, #4
3400279a:	4b96      	ldr	r3, [pc, #600]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
3400279c:	bf1e      	ittt	ne
3400279e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340027a2:	f022 0204 	bicne.w	r2, r2, #4
340027a6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
340027aa:	2204      	movs	r2, #4
340027ac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
340027b0:	f7ff ffb3 	bl	3400271a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
340027b4:	07b2      	lsls	r2, r6, #30
340027b6:	d515      	bpl.n	340027e4 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
340027b8:	07ab      	lsls	r3, r5, #30
340027ba:	d513      	bpl.n	340027e4 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340027bc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340027be:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340027c0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340027c4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340027c6:	f013 0f04 	tst.w	r3, #4
340027ca:	4b8a      	ldr	r3, [pc, #552]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
340027cc:	bf1e      	ittt	ne
340027ce:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340027d2:	f022 0202 	bicne.w	r2, r2, #2
340027d6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
340027da:	2202      	movs	r2, #2
340027dc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340027e0:	f7ff ff9b 	bl	3400271a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
340027e4:	07f0      	lsls	r0, r6, #31
340027e6:	d515      	bpl.n	34002814 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
340027e8:	07e9      	lsls	r1, r5, #31
340027ea:	d513      	bpl.n	34002814 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340027ec:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
340027ee:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340027f0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
340027f4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340027f6:	f013 0f04 	tst.w	r3, #4
340027fa:	4b7e      	ldr	r3, [pc, #504]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
340027fc:	bf1e      	ittt	ne
340027fe:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002802:	f022 0201 	bicne.w	r2, r2, #1
34002806:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
3400280a:	2201      	movs	r2, #1
3400280c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002810:	f7ff ff83 	bl	3400271a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34002814:	0432      	lsls	r2, r6, #16
34002816:	d516      	bpl.n	34002846 <HAL_DCMIPP_CSI_IRQHandler+0x12a>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34002818:	042b      	lsls	r3, r5, #16
3400281a:	d514      	bpl.n	34002846 <HAL_DCMIPP_CSI_IRQHandler+0x12a>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400281c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3400281e:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002820:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002824:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002826:	f013 0f04 	tst.w	r3, #4
3400282a:	4b72      	ldr	r3, [pc, #456]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
3400282c:	bf1e      	ittt	ne
3400282e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002832:	f422 4200 	bicne.w	r2, r2, #32768	@ 0x8000
34002836:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
3400283a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400283e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002842:	f7ff ff67 	bl	34002714 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34002846:	0470      	lsls	r0, r6, #17
34002848:	d516      	bpl.n	34002878 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
3400284a:	0469      	lsls	r1, r5, #17
3400284c:	d514      	bpl.n	34002878 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400284e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002850:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002852:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002856:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002858:	f013 0f04 	tst.w	r3, #4
3400285c:	4b65      	ldr	r3, [pc, #404]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
3400285e:	bf1e      	ittt	ne
34002860:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002864:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
34002868:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
3400286c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34002870:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002874:	f7ff ff4e 	bl	34002714 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34002878:	04b2      	lsls	r2, r6, #18
3400287a:	d516      	bpl.n	340028aa <HAL_DCMIPP_CSI_IRQHandler+0x18e>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
3400287c:	04ab      	lsls	r3, r5, #18
3400287e:	d514      	bpl.n	340028aa <HAL_DCMIPP_CSI_IRQHandler+0x18e>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002880:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002882:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002884:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002888:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400288a:	f013 0f04 	tst.w	r3, #4
3400288e:	4b59      	ldr	r3, [pc, #356]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34002890:	bf1e      	ittt	ne
34002892:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002896:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
3400289a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
3400289e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340028a2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340028a6:	f7ff ff35 	bl	34002714 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
340028aa:	04f0      	lsls	r0, r6, #19
340028ac:	d516      	bpl.n	340028dc <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
340028ae:	04e9      	lsls	r1, r5, #19
340028b0:	d514      	bpl.n	340028dc <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340028b2:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340028b4:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340028b6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340028ba:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340028bc:	f013 0f04 	tst.w	r3, #4
340028c0:	4b4c      	ldr	r3, [pc, #304]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
340028c2:	bf1e      	ittt	ne
340028c4:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340028c8:	f422 5280 	bicne.w	r2, r2, #4096	@ 0x1000
340028cc:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
340028d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340028d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340028d8:	f7ff ff1c 	bl	34002714 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
340028dc:	0532      	lsls	r2, r6, #20
340028de:	d516      	bpl.n	3400290e <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
340028e0:	052b      	lsls	r3, r5, #20
340028e2:	d514      	bpl.n	3400290e <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340028e4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340028e6:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340028e8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340028ec:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340028ee:	f013 0f04 	tst.w	r3, #4
340028f2:	4b40      	ldr	r3, [pc, #256]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
340028f4:	bf1e      	ittt	ne
340028f6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340028fa:	f422 6200 	bicne.w	r2, r2, #2048	@ 0x800
340028fe:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34002902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34002906:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3400290a:	f7ff ff04 	bl	34002716 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
3400290e:	0570      	lsls	r0, r6, #21
34002910:	d516      	bpl.n	34002940 <HAL_DCMIPP_CSI_IRQHandler+0x224>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34002912:	0569      	lsls	r1, r5, #21
34002914:	d514      	bpl.n	34002940 <HAL_DCMIPP_CSI_IRQHandler+0x224>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002916:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002918:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400291a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
3400291e:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002920:	f013 0f04 	tst.w	r3, #4
34002924:	4b33      	ldr	r3, [pc, #204]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34002926:	bf1e      	ittt	ne
34002928:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3400292c:	f422 6280 	bicne.w	r2, r2, #1024	@ 0x400
34002930:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34002934:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002938:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
3400293c:	f7ff feeb 	bl	34002716 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34002940:	05b2      	lsls	r2, r6, #22
34002942:	d516      	bpl.n	34002972 <HAL_DCMIPP_CSI_IRQHandler+0x256>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34002944:	05ab      	lsls	r3, r5, #22
34002946:	d514      	bpl.n	34002972 <HAL_DCMIPP_CSI_IRQHandler+0x256>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002948:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
3400294a:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400294c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002950:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002952:	f013 0f04 	tst.w	r3, #4
34002956:	4b27      	ldr	r3, [pc, #156]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34002958:	bf1e      	ittt	ne
3400295a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3400295e:	f422 7200 	bicne.w	r2, r2, #512	@ 0x200
34002962:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34002966:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400296a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
3400296e:	f7ff fed2 	bl	34002716 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34002972:	05f0      	lsls	r0, r6, #23
34002974:	d516      	bpl.n	340029a4 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34002976:	05e9      	lsls	r1, r5, #23
34002978:	d514      	bpl.n	340029a4 <HAL_DCMIPP_CSI_IRQHandler+0x288>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400297a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
3400297c:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400297e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002982:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002984:	f013 0f04 	tst.w	r3, #4
34002988:	4b1a      	ldr	r3, [pc, #104]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
3400298a:	bf1e      	ittt	ne
3400298c:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002990:	f422 7280 	bicne.w	r2, r2, #256	@ 0x100
34002994:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34002998:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400299c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340029a0:	f7ff feb9 	bl	34002716 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
340029a4:	0632      	lsls	r2, r6, #24
340029a6:	d515      	bpl.n	340029d4 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
340029a8:	062b      	lsls	r3, r5, #24
340029aa:	d513      	bpl.n	340029d4 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029ac:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
340029ae:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029b0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
340029b4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029b6:	f013 0f04 	tst.w	r3, #4
340029ba:	4b0e      	ldr	r3, [pc, #56]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
340029bc:	bf1e      	ittt	ne
340029be:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340029c2:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
340029c6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
340029ca:	2280      	movs	r2, #128	@ 0x80
340029cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
340029d0:	f7ff fea2 	bl	34002718 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
340029d4:	0670      	lsls	r0, r6, #25
340029d6:	d519      	bpl.n	34002a0c <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
340029d8:	0669      	lsls	r1, r5, #25
340029da:	d517      	bpl.n	34002a0c <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029dc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
340029de:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029e0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
340029e4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029e6:	f013 0f04 	tst.w	r3, #4
340029ea:	4b02      	ldr	r3, [pc, #8]	@ (340029f4 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
340029ec:	bf18      	it	ne
340029ee:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340029f2:	e001      	b.n	340029f8 <HAL_DCMIPP_CSI_IRQHandler+0x2dc>
340029f4:	58006000 	.word	0x58006000
340029f8:	bf1c      	itt	ne
340029fa:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
340029fe:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34002a02:	2240      	movs	r2, #64	@ 0x40
34002a04:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002a08:	f7ff fe86 	bl	34002718 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34002a0c:	06b2      	lsls	r2, r6, #26
34002a0e:	d515      	bpl.n	34002a3c <HAL_DCMIPP_CSI_IRQHandler+0x320>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34002a10:	06ab      	lsls	r3, r5, #26
34002a12:	d513      	bpl.n	34002a3c <HAL_DCMIPP_CSI_IRQHandler+0x320>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a14:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002a16:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a18:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002a1c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a1e:	f013 0f04 	tst.w	r3, #4
34002a22:	4bb9      	ldr	r3, [pc, #740]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34002a24:	bf1e      	ittt	ne
34002a26:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a2a:	f022 0220 	bicne.w	r2, r2, #32
34002a2e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34002a32:	2220      	movs	r2, #32
34002a34:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002a38:	f7ff fe6e 	bl	34002718 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34002a3c:	06f0      	lsls	r0, r6, #27
34002a3e:	d515      	bpl.n	34002a6c <HAL_DCMIPP_CSI_IRQHandler+0x350>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34002a40:	06e9      	lsls	r1, r5, #27
34002a42:	d513      	bpl.n	34002a6c <HAL_DCMIPP_CSI_IRQHandler+0x350>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a44:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002a46:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a48:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002a4c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a4e:	f013 0f04 	tst.w	r3, #4
34002a52:	4bad      	ldr	r3, [pc, #692]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34002a54:	bf1e      	ittt	ne
34002a56:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a5a:	f022 0210 	bicne.w	r2, r2, #16
34002a5e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34002a62:	2210      	movs	r2, #16
34002a64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002a68:	f7ff fe56 	bl	34002718 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34002a6c:	0072      	lsls	r2, r6, #1
34002a6e:	d513      	bpl.n	34002a98 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34002a70:	006b      	lsls	r3, r5, #1
34002a72:	d511      	bpl.n	34002a98 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002a74:	4ba4      	ldr	r3, [pc, #656]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002a76:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002a78:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002a7c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34002a80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34002a84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002a88:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34002a8c:	68a3      	ldr	r3, [r4, #8]
34002a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34002a92:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002a94:	f7ff fd0b 	bl	340024ae <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34002a98:	00b0      	lsls	r0, r6, #2
34002a9a:	d513      	bpl.n	34002ac4 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34002a9c:	00a9      	lsls	r1, r5, #2
34002a9e:	d511      	bpl.n	34002ac4 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002aa0:	4b99      	ldr	r3, [pc, #612]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002aa2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002aa4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002aa8:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
34002aac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34002ab0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34002ab4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34002ab8:	68a3      	ldr	r3, [r4, #8]
34002aba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34002abe:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002ac0:	f7ff fcf5 	bl	340024ae <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34002ac4:	00f2      	lsls	r2, r6, #3
34002ac6:	d513      	bpl.n	34002af0 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34002ac8:	00eb      	lsls	r3, r5, #3
34002aca:	d511      	bpl.n	34002af0 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002acc:	4b8e      	ldr	r3, [pc, #568]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002ace:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002ad0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002ad4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
34002ad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34002adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002ae0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34002ae4:	68a3      	ldr	r3, [r4, #8]
34002ae6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
34002aea:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002aec:	f7ff fcdf 	bl	340024ae <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34002af0:	0130      	lsls	r0, r6, #4
34002af2:	d513      	bpl.n	34002b1c <HAL_DCMIPP_CSI_IRQHandler+0x400>
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34002af4:	0129      	lsls	r1, r5, #4
34002af6:	d511      	bpl.n	34002b1c <HAL_DCMIPP_CSI_IRQHandler+0x400>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002af8:	4b83      	ldr	r3, [pc, #524]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002afa:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002afc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002b00:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
34002b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34002b08:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34002b0c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34002b10:	68a3      	ldr	r3, [r4, #8]
34002b12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
34002b16:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b18:	f7ff fcc9 	bl	340024ae <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34002b1c:	0172      	lsls	r2, r6, #5
34002b1e:	d513      	bpl.n	34002b48 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34002b20:	016b      	lsls	r3, r5, #5
34002b22:	d511      	bpl.n	34002b48 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002b24:	4b78      	ldr	r3, [pc, #480]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b26:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002b28:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002b2c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
34002b30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34002b34:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34002b38:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34002b3c:	68a3      	ldr	r3, [r4, #8]
34002b3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34002b42:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b44:	f7ff fcb3 	bl	340024ae <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34002b48:	01b0      	lsls	r0, r6, #6
34002b4a:	d513      	bpl.n	34002b74 <HAL_DCMIPP_CSI_IRQHandler+0x458>
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34002b4c:	01a9      	lsls	r1, r5, #6
34002b4e:	d511      	bpl.n	34002b74 <HAL_DCMIPP_CSI_IRQHandler+0x458>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002b50:	4b6d      	ldr	r3, [pc, #436]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b52:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002b54:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002b58:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
34002b5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34002b60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34002b64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34002b68:	68a3      	ldr	r3, [r4, #8]
34002b6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34002b6e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b70:	f7ff fc9d 	bl	340024ae <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34002b74:	01f2      	lsls	r2, r6, #7
34002b76:	d513      	bpl.n	34002ba0 <HAL_DCMIPP_CSI_IRQHandler+0x484>
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34002b78:	01eb      	lsls	r3, r5, #7
34002b7a:	d511      	bpl.n	34002ba0 <HAL_DCMIPP_CSI_IRQHandler+0x484>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002b7c:	4b62      	ldr	r3, [pc, #392]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b7e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002b80:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002b84:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
34002b88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34002b8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002b90:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34002b94:	68a3      	ldr	r3, [r4, #8]
34002b96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
34002b9a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002b9c:	f7ff fc87 	bl	340024ae <HAL_DCMIPP_ErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34002ba0:	f018 0f01 	tst.w	r8, #1
34002ba4:	d014      	beq.n	34002bd0 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34002ba6:	07f8      	lsls	r0, r7, #31
34002ba8:	d512      	bpl.n	34002bd0 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002baa:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002bac:	4b56      	ldr	r3, [pc, #344]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002bae:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002bb0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002bb4:	f022 0201 	bic.w	r2, r2, #1
34002bb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002bbc:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34002bc0:	68a3      	ldr	r3, [r4, #8]
34002bc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34002bc6:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002bc8:	2304      	movs	r3, #4
34002bca:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002bcc:	f7ff fd9f 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34002bd0:	f018 0f02 	tst.w	r8, #2
34002bd4:	d015      	beq.n	34002c02 <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34002bd6:	07b9      	lsls	r1, r7, #30
34002bd8:	d513      	bpl.n	34002c02 <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002bda:	4b4b      	ldr	r3, [pc, #300]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002bdc:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002bde:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002be2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002be4:	f022 0202 	bic.w	r2, r2, #2
34002be8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34002bec:	2202      	movs	r2, #2
34002bee:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34002bf2:	68a3      	ldr	r3, [r4, #8]
34002bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34002bf8:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002bfa:	2304      	movs	r3, #4
34002bfc:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002bfe:	f7ff fd86 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34002c02:	f018 0f04 	tst.w	r8, #4
34002c06:	d013      	beq.n	34002c30 <HAL_DCMIPP_CSI_IRQHandler+0x514>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34002c08:	077a      	lsls	r2, r7, #29
34002c0a:	d511      	bpl.n	34002c30 <HAL_DCMIPP_CSI_IRQHandler+0x514>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002c0c:	4b3e      	ldr	r3, [pc, #248]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002c0e:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002c10:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002c14:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002c16:	f022 0204 	bic.w	r2, r2, #4
34002c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34002c1e:	2204      	movs	r2, #4
34002c20:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34002c24:	68a3      	ldr	r3, [r4, #8]
34002c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34002c2a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002c2c:	f7ff fd6f 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34002c30:	f018 0f08 	tst.w	r8, #8
34002c34:	d013      	beq.n	34002c5e <HAL_DCMIPP_CSI_IRQHandler+0x542>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34002c36:	073b      	lsls	r3, r7, #28
34002c38:	d511      	bpl.n	34002c5e <HAL_DCMIPP_CSI_IRQHandler+0x542>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002c3a:	4b33      	ldr	r3, [pc, #204]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002c3c:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002c3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002c42:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002c44:	f022 0208 	bic.w	r2, r2, #8
34002c48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34002c4c:	2208      	movs	r2, #8
34002c4e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34002c52:	68a3      	ldr	r3, [r4, #8]
34002c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34002c58:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002c5a:	f7ff fd58 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34002c5e:	f018 0f10 	tst.w	r8, #16
34002c62:	d013      	beq.n	34002c8c <HAL_DCMIPP_CSI_IRQHandler+0x570>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34002c64:	06f8      	lsls	r0, r7, #27
34002c66:	d511      	bpl.n	34002c8c <HAL_DCMIPP_CSI_IRQHandler+0x570>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002c68:	4b27      	ldr	r3, [pc, #156]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002c6a:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002c6c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002c70:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002c72:	f022 0210 	bic.w	r2, r2, #16
34002c76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34002c7a:	2210      	movs	r2, #16
34002c7c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34002c80:	68a3      	ldr	r3, [r4, #8]
34002c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34002c86:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002c88:	f7ff fd41 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34002c8c:	f418 7f80 	tst.w	r8, #256	@ 0x100
34002c90:	d016      	beq.n	34002cc0 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34002c92:	05f9      	lsls	r1, r7, #23
34002c94:	d514      	bpl.n	34002cc0 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002c96:	4b1c      	ldr	r3, [pc, #112]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002c98:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002c9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002c9e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002ca0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34002ca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34002ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002cac:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34002cb0:	68a3      	ldr	r3, [r4, #8]
34002cb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34002cb6:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002cb8:	2304      	movs	r3, #4
34002cba:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002cbc:	f7ff fd27 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34002cc0:	f418 7f00 	tst.w	r8, #512	@ 0x200
34002cc4:	d016      	beq.n	34002cf4 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34002cc6:	05ba      	lsls	r2, r7, #22
34002cc8:	d514      	bpl.n	34002cf4 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002cca:	4b0f      	ldr	r3, [pc, #60]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002ccc:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002cce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002cd2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002cd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34002cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34002cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
34002ce0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34002ce4:	68a3      	ldr	r3, [r4, #8]
34002ce6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34002cea:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002cec:	2304      	movs	r3, #4
34002cee:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002cf0:	f7ff fd0d 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34002cf4:	f418 6f80 	tst.w	r8, #1024	@ 0x400
34002cf8:	d017      	beq.n	34002d2a <HAL_DCMIPP_CSI_IRQHandler+0x60e>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34002cfa:	057b      	lsls	r3, r7, #21
34002cfc:	d515      	bpl.n	34002d2a <HAL_DCMIPP_CSI_IRQHandler+0x60e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002cfe:	4b02      	ldr	r3, [pc, #8]	@ (34002d08 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002d00:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002d02:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d06:	e001      	b.n	34002d0c <HAL_DCMIPP_CSI_IRQHandler+0x5f0>
34002d08:	58006000 	.word	0x58006000
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002d0c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34002d12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34002d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002d1a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34002d1e:	68a3      	ldr	r3, [r4, #8]
34002d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34002d24:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002d26:	f7ff fcf2 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34002d2a:	f418 6f00 	tst.w	r8, #2048	@ 0x800
34002d2e:	d014      	beq.n	34002d5a <HAL_DCMIPP_CSI_IRQHandler+0x63e>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34002d30:	0538      	lsls	r0, r7, #20
34002d32:	d512      	bpl.n	34002d5a <HAL_DCMIPP_CSI_IRQHandler+0x63e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34002d34:	4b1f      	ldr	r3, [pc, #124]	@ (34002db4 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002d36:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34002d38:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002d3c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34002d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34002d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34002d46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34002d4a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34002d4e:	68a3      	ldr	r3, [r4, #8]
34002d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34002d54:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002d56:	f7ff fcda 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34002d5a:	f418 5f80 	tst.w	r8, #4096	@ 0x1000
34002d5e:	d014      	beq.n	34002d8a <HAL_DCMIPP_CSI_IRQHandler+0x66e>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34002d60:	04f9      	lsls	r1, r7, #19
34002d62:	d512      	bpl.n	34002d8a <HAL_DCMIPP_CSI_IRQHandler+0x66e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34002d64:	4b13      	ldr	r3, [pc, #76]	@ (34002db4 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002d66:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34002d68:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002d6c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34002d6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34002d72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34002d76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34002d7a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34002d7e:	68a3      	ldr	r3, [r4, #8]
34002d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34002d84:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002d86:	f7ff fcc2 	bl	3400270e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
34002d8a:	03f2      	lsls	r2, r6, #15
34002d8c:	d50f      	bpl.n	34002dae <HAL_DCMIPP_CSI_IRQHandler+0x692>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
34002d8e:	03eb      	lsls	r3, r5, #15
34002d90:	d50d      	bpl.n	34002dae <HAL_DCMIPP_CSI_IRQHandler+0x692>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34002d92:	4b08      	ldr	r3, [pc, #32]	@ (34002db4 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34002d94:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34002d96:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34002d9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
34002da2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34002da6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34002daa:	f7ff fcb2 	bl	34002712 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
}
34002dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34002db2:	bf00      	nop
34002db4:	58006000 	.word	0x58006000

34002db8 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
34002db8:	4770      	bx	lr

34002dba <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
34002dba:	4770      	bx	lr

34002dbc <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
34002dbc:	6803      	ldr	r3, [r0, #0]
{
34002dbe:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
34002dc0:	685e      	ldr	r6, [r3, #4]
{
34002dc2:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
34002dc4:	07f2      	lsls	r2, r6, #31
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
34002dc6:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
34002dc8:	d514      	bpl.n	34002df4 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
34002dca:	05e9      	lsls	r1, r5, #23
34002dcc:	d512      	bpl.n	34002df4 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
34002dce:	681a      	ldr	r2, [r3, #0]
34002dd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34002dd4:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
34002dd6:	6e42      	ldr	r2, [r0, #100]	@ 0x64
34002dd8:	f042 0201 	orr.w	r2, r2, #1
34002ddc:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
34002dde:	2201      	movs	r2, #1
34002de0:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34002de2:	2304      	movs	r3, #4
34002de4:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34002de8:	2300      	movs	r3, #0
34002dea:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34002dee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
34002df0:	b103      	cbz	r3, 34002df4 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
34002df2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
34002df4:	06b2      	lsls	r2, r6, #26
34002df6:	d516      	bpl.n	34002e26 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
34002df8:	04ab      	lsls	r3, r5, #18
34002dfa:	d514      	bpl.n	34002e26 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
34002dfc:	6823      	ldr	r3, [r4, #0]
34002dfe:	681a      	ldr	r2, [r3, #0]
34002e00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
34002e04:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
34002e06:	2220      	movs	r2, #32
34002e08:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
34002e0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34002e0c:	f043 0302 	orr.w	r3, r3, #2
34002e10:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34002e12:	2304      	movs	r3, #4
34002e14:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34002e18:	2300      	movs	r3, #0
34002e1a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34002e1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34002e20:	b10b      	cbz	r3, 34002e26 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
34002e22:	4620      	mov	r0, r4
34002e24:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
34002e26:	0730      	lsls	r0, r6, #28
34002e28:	d516      	bpl.n	34002e58 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
34002e2a:	0529      	lsls	r1, r5, #20
34002e2c:	d514      	bpl.n	34002e58 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
34002e2e:	6823      	ldr	r3, [r4, #0]
34002e30:	681a      	ldr	r2, [r3, #0]
34002e32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34002e36:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
34002e38:	2208      	movs	r2, #8
34002e3a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
34002e3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34002e3e:	f043 0304 	orr.w	r3, r3, #4
34002e42:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34002e44:	2304      	movs	r3, #4
34002e46:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34002e4a:	2300      	movs	r3, #0
34002e4c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34002e50:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34002e52:	b10b      	cbz	r3, 34002e58 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
34002e54:	4620      	mov	r0, r4
34002e56:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
34002e58:	0772      	lsls	r2, r6, #29
34002e5a:	d50b      	bpl.n	34002e74 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
34002e5c:	056b      	lsls	r3, r5, #21
34002e5e:	d509      	bpl.n	34002e74 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34002e60:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
34002e62:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34002e64:	681a      	ldr	r2, [r3, #0]
34002e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34002e6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
34002e6c:	2204      	movs	r2, #4
34002e6e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
34002e70:	f7ff ffa2 	bl	34002db8 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
34002e74:	07b0      	lsls	r0, r6, #30
34002e76:	d514      	bpl.n	34002ea2 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
34002e78:	05a9      	lsls	r1, r5, #22
34002e7a:	d512      	bpl.n	34002ea2 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
34002e7c:	6823      	ldr	r3, [r4, #0]
34002e7e:	681a      	ldr	r2, [r3, #0]
34002e80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34002e84:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
34002e86:	2202      	movs	r2, #2
34002e88:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34002e8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34002e8c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
34002e8e:	2301      	movs	r3, #1
34002e90:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34002e94:	2300      	movs	r3, #0
34002e96:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
34002e9a:	6a23      	ldr	r3, [r4, #32]
34002e9c:	b10b      	cbz	r3, 34002ea2 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
34002e9e:	4620      	mov	r0, r4
34002ea0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
34002ea2:	06f2      	lsls	r2, r6, #27
34002ea4:	d513      	bpl.n	34002ece <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
34002ea6:	04eb      	lsls	r3, r5, #19
34002ea8:	d511      	bpl.n	34002ece <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34002eaa:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34002eac:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34002eae:	681a      	ldr	r2, [r3, #0]
34002eb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34002eb4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
34002eb6:	2210      	movs	r2, #16
34002eb8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34002eba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34002ebc:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
34002ebe:	2301      	movs	r3, #1
34002ec0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34002ec4:	2300      	movs	r3, #0
34002ec6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34002eca:	f7ff ff76 	bl	34002dba <HAL_DMA2D_CLUTLoadingCpltCallback>
}
34002ece:	bd70      	pop	{r4, r5, r6, pc}

34002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34002ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34002ed4:	4b47      	ldr	r3, [pc, #284]	@ (34002ff4 <HAL_GPIO_Init+0x124>)
{
34002ed6:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34002ed8:	4298      	cmp	r0, r3
{
34002eda:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34002edc:	d054      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002ede:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002ee2:	4298      	cmp	r0, r3
34002ee4:	d050      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002ee6:	4b44      	ldr	r3, [pc, #272]	@ (34002ff8 <HAL_GPIO_Init+0x128>)
34002ee8:	4298      	cmp	r0, r3
34002eea:	d04d      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002eec:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002ef0:	4298      	cmp	r0, r3
34002ef2:	d049      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002ef4:	4b41      	ldr	r3, [pc, #260]	@ (34002ffc <HAL_GPIO_Init+0x12c>)
34002ef6:	4298      	cmp	r0, r3
34002ef8:	d046      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002efa:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002efe:	4298      	cmp	r0, r3
34002f00:	d042      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f02:	4b3f      	ldr	r3, [pc, #252]	@ (34003000 <HAL_GPIO_Init+0x130>)
34002f04:	4298      	cmp	r0, r3
34002f06:	d03f      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f08:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002f0c:	4298      	cmp	r0, r3
34002f0e:	d03b      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f10:	4b3c      	ldr	r3, [pc, #240]	@ (34003004 <HAL_GPIO_Init+0x134>)
34002f12:	4298      	cmp	r0, r3
34002f14:	d038      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f16:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002f1a:	4298      	cmp	r0, r3
34002f1c:	d034      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f1e:	4b3a      	ldr	r3, [pc, #232]	@ (34003008 <HAL_GPIO_Init+0x138>)
34002f20:	4298      	cmp	r0, r3
34002f22:	d031      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f24:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002f28:	4298      	cmp	r0, r3
34002f2a:	d02d      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f2c:	4b37      	ldr	r3, [pc, #220]	@ (3400300c <HAL_GPIO_Init+0x13c>)
34002f2e:	4298      	cmp	r0, r3
34002f30:	d02a      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f32:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002f36:	4298      	cmp	r0, r3
34002f38:	d026      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f3a:	4b35      	ldr	r3, [pc, #212]	@ (34003010 <HAL_GPIO_Init+0x140>)
34002f3c:	4298      	cmp	r0, r3
34002f3e:	d023      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f40:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002f44:	4298      	cmp	r0, r3
34002f46:	d01f      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f48:	4b32      	ldr	r3, [pc, #200]	@ (34003014 <HAL_GPIO_Init+0x144>)
34002f4a:	4298      	cmp	r0, r3
34002f4c:	d01c      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f4e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002f52:	4298      	cmp	r0, r3
34002f54:	d018      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f56:	4b30      	ldr	r3, [pc, #192]	@ (34003018 <HAL_GPIO_Init+0x148>)
34002f58:	4298      	cmp	r0, r3
34002f5a:	d015      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f5c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002f60:	4298      	cmp	r0, r3
34002f62:	d011      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f64:	4b2d      	ldr	r3, [pc, #180]	@ (3400301c <HAL_GPIO_Init+0x14c>)
34002f66:	4298      	cmp	r0, r3
34002f68:	d00e      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f6a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002f6e:	4298      	cmp	r0, r3
34002f70:	d00a      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f72:	4b2b      	ldr	r3, [pc, #172]	@ (34003020 <HAL_GPIO_Init+0x150>)
34002f74:	4298      	cmp	r0, r3
34002f76:	d007      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f78:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002f7c:	4298      	cmp	r0, r3
34002f7e:	d003      	beq.n	34002f88 <HAL_GPIO_Init+0xb8>
34002f80:	21ad      	movs	r1, #173	@ 0xad
34002f82:	4828      	ldr	r0, [pc, #160]	@ (34003024 <HAL_GPIO_Init+0x154>)
34002f84:	f7fe f8c2 	bl	3400110c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34002f88:	6833      	ldr	r3, [r6, #0]
34002f8a:	b29a      	uxth	r2, r3
34002f8c:	b112      	cbz	r2, 34002f94 <HAL_GPIO_Init+0xc4>
34002f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34002f92:	d303      	bcc.n	34002f9c <HAL_GPIO_Init+0xcc>
34002f94:	21ae      	movs	r1, #174	@ 0xae
34002f96:	4823      	ldr	r0, [pc, #140]	@ (34003024 <HAL_GPIO_Init+0x154>)
34002f98:	f7fe f8b8 	bl	3400110c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
34002f9c:	6873      	ldr	r3, [r6, #4]
34002f9e:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
34002fa2:	d011      	beq.n	34002fc8 <HAL_GPIO_Init+0xf8>
34002fa4:	d81d      	bhi.n	34002fe2 <HAL_GPIO_Init+0x112>
34002fa6:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34002faa:	d00d      	beq.n	34002fc8 <HAL_GPIO_Init+0xf8>
34002fac:	d809      	bhi.n	34002fc2 <HAL_GPIO_Init+0xf2>
34002fae:	2b03      	cmp	r3, #3
34002fb0:	d90a      	bls.n	34002fc8 <HAL_GPIO_Init+0xf8>
34002fb2:	3b11      	subs	r3, #17
34002fb4:	2b01      	cmp	r3, #1
34002fb6:	d907      	bls.n	34002fc8 <HAL_GPIO_Init+0xf8>
34002fb8:	21af      	movs	r1, #175	@ 0xaf
34002fba:	481a      	ldr	r0, [pc, #104]	@ (34003024 <HAL_GPIO_Init+0x154>)
34002fbc:	f7fe f8a6 	bl	3400110c <assert_failed>
34002fc0:	e002      	b.n	34002fc8 <HAL_GPIO_Init+0xf8>
34002fc2:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
34002fc6:	d1f7      	bne.n	34002fb8 <HAL_GPIO_Init+0xe8>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34002fc8:	f04f 0900 	mov.w	r9, #0
34002fcc:	464f      	mov	r7, r9
34002fce:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 34002ff4 <HAL_GPIO_Init+0x124>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34002fd2:	f8df a054 	ldr.w	sl, [pc, #84]	@ 34003028 <HAL_GPIO_Init+0x158>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34002fd6:	6835      	ldr	r5, [r6, #0]
34002fd8:	fa35 f307 	lsrs.w	r3, r5, r7
34002fdc:	d126      	bne.n	3400302c <HAL_GPIO_Init+0x15c>
      }
    }

    position++;
  }
}
34002fde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
34002fe2:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34002fe6:	d0ef      	beq.n	34002fc8 <HAL_GPIO_Init+0xf8>
34002fe8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34002fec:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
34002ff0:	e7e9      	b.n	34002fc6 <HAL_GPIO_Init+0xf6>
34002ff2:	bf00      	nop
34002ff4:	56020000 	.word	0x56020000
34002ff8:	56020400 	.word	0x56020400
34002ffc:	56020800 	.word	0x56020800
34003000:	56020c00 	.word	0x56020c00
34003004:	56021000 	.word	0x56021000
34003008:	56021400 	.word	0x56021400
3400300c:	56021800 	.word	0x56021800
34003010:	56021c00 	.word	0x56021c00
34003014:	56023400 	.word	0x56023400
34003018:	56023800 	.word	0x56023800
3400301c:	56023c00 	.word	0x56023c00
34003020:	56024000 	.word	0x56024000
34003024:	3400ecb7 	.word	0x3400ecb7
34003028:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
3400302c:	f04f 0b01 	mov.w	fp, #1
34003030:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
34003034:	ea1b 0505 	ands.w	r5, fp, r5
34003038:	f000 8130 	beq.w	3400329c <HAL_GPIO_Init+0x3cc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
3400303c:	6873      	ldr	r3, [r6, #4]
3400303e:	f003 0303 	and.w	r3, r3, #3
34003042:	3b01      	subs	r3, #1
34003044:	2b01      	cmp	r3, #1
34003046:	d81a      	bhi.n	3400307e <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34003048:	68f3      	ldr	r3, [r6, #12]
3400304a:	2b03      	cmp	r3, #3
3400304c:	d903      	bls.n	34003056 <HAL_GPIO_Init+0x186>
3400304e:	21be      	movs	r1, #190	@ 0xbe
34003050:	489e      	ldr	r0, [pc, #632]	@ (340032cc <HAL_GPIO_Init+0x3fc>)
34003052:	f7fe f85b 	bl	3400110c <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34003056:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
34003058:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3400305a:	fa03 f309 	lsl.w	r3, r3, r9
3400305e:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34003062:	68f3      	ldr	r3, [r6, #12]
34003064:	fa03 f309 	lsl.w	r3, r3, r9
34003068:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
3400306a:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3400306c:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
3400306e:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34003070:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34003074:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34003078:	40bb      	lsls	r3, r7
3400307a:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
3400307c:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
3400307e:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
34003082:	f003 0303 	and.w	r3, r3, #3
34003086:	2b03      	cmp	r3, #3
34003088:	d102      	bne.n	34003090 <HAL_GPIO_Init+0x1c0>
3400308a:	2a01      	cmp	r2, #1
3400308c:	f000 8082 	beq.w	34003194 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34003090:	2a02      	cmp	r2, #2
34003092:	d903      	bls.n	3400309c <HAL_GPIO_Init+0x1cc>
34003094:	21d1      	movs	r1, #209	@ 0xd1
34003096:	488d      	ldr	r0, [pc, #564]	@ (340032cc <HAL_GPIO_Init+0x3fc>)
34003098:	f7fe f838 	bl	3400110c <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
3400309c:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
3400309e:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
340030a0:	fa03 f309 	lsl.w	r3, r3, r9
340030a4:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
340030a8:	68b3      	ldr	r3, [r6, #8]
340030aa:	fa03 f309 	lsl.w	r3, r3, r9
340030ae:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
340030b0:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
340030b2:	6873      	ldr	r3, [r6, #4]
340030b4:	f003 0303 	and.w	r3, r3, #3
340030b8:	2b02      	cmp	r3, #2
340030ba:	d16b      	bne.n	34003194 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
340030bc:	4544      	cmp	r4, r8
340030be:	d053      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030c0:	4b83      	ldr	r3, [pc, #524]	@ (340032d0 <HAL_GPIO_Init+0x400>)
340030c2:	429c      	cmp	r4, r3
340030c4:	d050      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030c6:	4b83      	ldr	r3, [pc, #524]	@ (340032d4 <HAL_GPIO_Init+0x404>)
340030c8:	429c      	cmp	r4, r3
340030ca:	d04d      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030cc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340030d0:	429c      	cmp	r4, r3
340030d2:	d049      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030d4:	4b80      	ldr	r3, [pc, #512]	@ (340032d8 <HAL_GPIO_Init+0x408>)
340030d6:	429c      	cmp	r4, r3
340030d8:	d046      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030da:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340030de:	429c      	cmp	r4, r3
340030e0:	d042      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030e2:	4b7e      	ldr	r3, [pc, #504]	@ (340032dc <HAL_GPIO_Init+0x40c>)
340030e4:	429c      	cmp	r4, r3
340030e6:	d03f      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030e8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340030ec:	429c      	cmp	r4, r3
340030ee:	d03b      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030f0:	4b7b      	ldr	r3, [pc, #492]	@ (340032e0 <HAL_GPIO_Init+0x410>)
340030f2:	429c      	cmp	r4, r3
340030f4:	d038      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030f6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340030fa:	429c      	cmp	r4, r3
340030fc:	d034      	beq.n	34003168 <HAL_GPIO_Init+0x298>
340030fe:	4b79      	ldr	r3, [pc, #484]	@ (340032e4 <HAL_GPIO_Init+0x414>)
34003100:	429c      	cmp	r4, r3
34003102:	d031      	beq.n	34003168 <HAL_GPIO_Init+0x298>
34003104:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003108:	429c      	cmp	r4, r3
3400310a:	d02d      	beq.n	34003168 <HAL_GPIO_Init+0x298>
3400310c:	4b76      	ldr	r3, [pc, #472]	@ (340032e8 <HAL_GPIO_Init+0x418>)
3400310e:	429c      	cmp	r4, r3
34003110:	d02a      	beq.n	34003168 <HAL_GPIO_Init+0x298>
34003112:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003116:	429c      	cmp	r4, r3
34003118:	d026      	beq.n	34003168 <HAL_GPIO_Init+0x298>
3400311a:	4b74      	ldr	r3, [pc, #464]	@ (340032ec <HAL_GPIO_Init+0x41c>)
3400311c:	429c      	cmp	r4, r3
3400311e:	d023      	beq.n	34003168 <HAL_GPIO_Init+0x298>
34003120:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003124:	429c      	cmp	r4, r3
34003126:	d01f      	beq.n	34003168 <HAL_GPIO_Init+0x298>
34003128:	4b71      	ldr	r3, [pc, #452]	@ (340032f0 <HAL_GPIO_Init+0x420>)
3400312a:	429c      	cmp	r4, r3
3400312c:	d01c      	beq.n	34003168 <HAL_GPIO_Init+0x298>
3400312e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003132:	429c      	cmp	r4, r3
34003134:	d018      	beq.n	34003168 <HAL_GPIO_Init+0x298>
34003136:	4b6f      	ldr	r3, [pc, #444]	@ (340032f4 <HAL_GPIO_Init+0x424>)
34003138:	429c      	cmp	r4, r3
3400313a:	d015      	beq.n	34003168 <HAL_GPIO_Init+0x298>
3400313c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003140:	429c      	cmp	r4, r3
34003142:	d011      	beq.n	34003168 <HAL_GPIO_Init+0x298>
34003144:	4b6c      	ldr	r3, [pc, #432]	@ (340032f8 <HAL_GPIO_Init+0x428>)
34003146:	429c      	cmp	r4, r3
34003148:	d00e      	beq.n	34003168 <HAL_GPIO_Init+0x298>
3400314a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400314e:	429c      	cmp	r4, r3
34003150:	d00a      	beq.n	34003168 <HAL_GPIO_Init+0x298>
34003152:	4b6a      	ldr	r3, [pc, #424]	@ (340032fc <HAL_GPIO_Init+0x42c>)
34003154:	429c      	cmp	r4, r3
34003156:	d007      	beq.n	34003168 <HAL_GPIO_Init+0x298>
34003158:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400315c:	429c      	cmp	r4, r3
3400315e:	d003      	beq.n	34003168 <HAL_GPIO_Init+0x298>
34003160:	21de      	movs	r1, #222	@ 0xde
34003162:	485a      	ldr	r0, [pc, #360]	@ (340032cc <HAL_GPIO_Init+0x3fc>)
34003164:	f7fd ffd2 	bl	3400110c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34003168:	6933      	ldr	r3, [r6, #16]
3400316a:	2b0f      	cmp	r3, #15
3400316c:	d903      	bls.n	34003176 <HAL_GPIO_Init+0x2a6>
3400316e:	21df      	movs	r1, #223	@ 0xdf
34003170:	4856      	ldr	r0, [pc, #344]	@ (340032cc <HAL_GPIO_Init+0x3fc>)
34003172:	f7fd ffcb 	bl	3400110c <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003176:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
34003178:	08fa      	lsrs	r2, r7, #3
3400317a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3400317e:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
34003182:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003184:	0089      	lsls	r1, r1, #2
34003186:	408b      	lsls	r3, r1
34003188:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3400318c:	6933      	ldr	r3, [r6, #16]
3400318e:	408b      	lsls	r3, r1
34003190:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
34003192:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34003194:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
34003196:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34003198:	fa03 f209 	lsl.w	r2, r3, r9
3400319c:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
340031a0:	6872      	ldr	r2, [r6, #4]
340031a2:	ea02 0103 	and.w	r1, r2, r3
340031a6:	fa01 f109 	lsl.w	r1, r1, r9
340031aa:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
340031ac:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
340031b0:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
340031b2:	d073      	beq.n	3400329c <HAL_GPIO_Init+0x3cc>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340031b4:	f04f 0e0f 	mov.w	lr, #15
340031b8:	f027 0103 	bic.w	r1, r7, #3
340031bc:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
340031c0:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
340031c4:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
340031c8:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340031cc:	4098      	lsls	r0, r3
340031ce:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340031d2:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340031d4:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340031d8:	d064      	beq.n	340032a4 <HAL_GPIO_Init+0x3d4>
340031da:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 340032d4 <HAL_GPIO_Init+0x404>
340031de:	4574      	cmp	r4, lr
340031e0:	d062      	beq.n	340032a8 <HAL_GPIO_Init+0x3d8>
340031e2:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340031e6:	4574      	cmp	r4, lr
340031e8:	d060      	beq.n	340032ac <HAL_GPIO_Init+0x3dc>
340031ea:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340031ee:	4574      	cmp	r4, lr
340031f0:	d020      	beq.n	34003234 <HAL_GPIO_Init+0x364>
340031f2:	4b3b      	ldr	r3, [pc, #236]	@ (340032e0 <HAL_GPIO_Init+0x410>)
340031f4:	429c      	cmp	r4, r3
340031f6:	d05b      	beq.n	340032b0 <HAL_GPIO_Init+0x3e0>
340031f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340031fc:	429c      	cmp	r4, r3
340031fe:	d059      	beq.n	340032b4 <HAL_GPIO_Init+0x3e4>
34003200:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003204:	429c      	cmp	r4, r3
34003206:	d057      	beq.n	340032b8 <HAL_GPIO_Init+0x3e8>
34003208:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400320c:	429c      	cmp	r4, r3
3400320e:	d055      	beq.n	340032bc <HAL_GPIO_Init+0x3ec>
34003210:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34003214:	429c      	cmp	r4, r3
34003216:	d053      	beq.n	340032c0 <HAL_GPIO_Init+0x3f0>
34003218:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400321c:	429c      	cmp	r4, r3
3400321e:	d051      	beq.n	340032c4 <HAL_GPIO_Init+0x3f4>
34003220:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003224:	429c      	cmp	r4, r3
34003226:	d04f      	beq.n	340032c8 <HAL_GPIO_Init+0x3f8>
34003228:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400322c:	429c      	cmp	r4, r3
3400322e:	bf14      	ite	ne
34003230:	2310      	movne	r3, #16
34003232:	230b      	moveq	r3, #11
34003234:	4083      	lsls	r3, r0
34003236:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
3400323a:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
3400323c:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
34003240:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
34003244:	ea23 0105 	bic.w	r1, r3, r5
34003248:	ea43 0305 	orr.w	r3, r3, r5
3400324c:	bf08      	it	eq
3400324e:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
34003250:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
34003254:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
34003258:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
3400325c:	ea23 0105 	bic.w	r1, r3, r5
34003260:	ea43 0305 	orr.w	r3, r3, r5
34003264:	bf08      	it	eq
34003266:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
34003268:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
3400326c:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
34003270:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
34003274:	ea23 0105 	bic.w	r1, r3, r5
34003278:	ea43 0305 	orr.w	r3, r3, r5
3400327c:	bf08      	it	eq
3400327e:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
34003280:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
34003284:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
34003288:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
3400328c:	ea23 0105 	bic.w	r1, r3, r5
34003290:	ea45 0503 	orr.w	r5, r5, r3
34003294:	bf08      	it	eq
34003296:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
34003298:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
3400329c:	3701      	adds	r7, #1
3400329e:	f109 0902 	add.w	r9, r9, #2
340032a2:	e698      	b.n	34002fd6 <HAL_GPIO_Init+0x106>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340032a4:	2300      	movs	r3, #0
340032a6:	e7c5      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032a8:	2301      	movs	r3, #1
340032aa:	e7c3      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032ac:	2302      	movs	r3, #2
340032ae:	e7c1      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032b0:	2304      	movs	r3, #4
340032b2:	e7bf      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032b4:	2305      	movs	r3, #5
340032b6:	e7bd      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032b8:	2306      	movs	r3, #6
340032ba:	e7bb      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032bc:	2307      	movs	r3, #7
340032be:	e7b9      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032c0:	2308      	movs	r3, #8
340032c2:	e7b7      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032c4:	2309      	movs	r3, #9
340032c6:	e7b5      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032c8:	230a      	movs	r3, #10
340032ca:	e7b3      	b.n	34003234 <HAL_GPIO_Init+0x364>
340032cc:	3400ecb7 	.word	0x3400ecb7
340032d0:	46020000 	.word	0x46020000
340032d4:	56020400 	.word	0x56020400
340032d8:	56020800 	.word	0x56020800
340032dc:	56020c00 	.word	0x56020c00
340032e0:	56021000 	.word	0x56021000
340032e4:	56021400 	.word	0x56021400
340032e8:	56021800 	.word	0x56021800
340032ec:	56021c00 	.word	0x56021c00
340032f0:	56023400 	.word	0x56023400
340032f4:	56023800 	.word	0x56023800
340032f8:	56023c00 	.word	0x56023c00
340032fc:	56024000 	.word	0x56024000

34003300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34003300:	b570      	push	{r4, r5, r6, lr}
34003302:	4605      	mov	r5, r0
34003304:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34003306:	460c      	mov	r4, r1
34003308:	b921      	cbnz	r1, 34003314 <HAL_GPIO_WritePin+0x14>
3400330a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
3400330e:	4808      	ldr	r0, [pc, #32]	@ (34003330 <HAL_GPIO_WritePin+0x30>)
34003310:	f7fd fefc 	bl	3400110c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34003314:	2e01      	cmp	r6, #1
34003316:	d906      	bls.n	34003326 <HAL_GPIO_WritePin+0x26>
34003318:	f240 11a1 	movw	r1, #417	@ 0x1a1
3400331c:	4804      	ldr	r0, [pc, #16]	@ (34003330 <HAL_GPIO_WritePin+0x30>)
3400331e:	f7fd fef5 	bl	3400110c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34003322:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34003324:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
34003326:	2e00      	cmp	r6, #0
34003328:	d1fb      	bne.n	34003322 <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
3400332a:	62ac      	str	r4, [r5, #40]	@ 0x28
}
3400332c:	e7fa      	b.n	34003324 <HAL_GPIO_WritePin+0x24>
3400332e:	bf00      	nop
34003330:	3400ecb7 	.word	0x3400ecb7

34003334 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
34003334:	b570      	push	{r4, r5, r6, lr}
34003336:	f001 060f 	and.w	r6, r1, #15
3400333a:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
3400333e:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
34003342:	4605      	mov	r5, r0
34003344:	ea4f 0484 	mov.w	r4, r4, lsl #2
34003348:	f04f 0024 	mov.w	r0, #36	@ 0x24
  if ((ep_addr & 0x80U) == 0x80U)
3400334c:	d020      	beq.n	34003390 <HAL_PCD_EP_Open+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
3400334e:	f104 0114 	add.w	r1, r4, #20
    ep->is_in = 1U;
34003352:	2401      	movs	r4, #1
34003354:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003358:	4429      	add	r1, r5
    ep->is_in = 1U;
3400335a:	7544      	strb	r4, [r0, #21]
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
3400335c:	f3c2 020a 	ubfx	r2, r2, #0, #11
34003360:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

  if (ep->is_in != 0U)
34003362:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
34003364:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
34003366:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
34003368:	b102      	cbz	r2, 3400336c <HAL_PCD_EP_Open+0x38>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
3400336a:	834e      	strh	r6, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
3400336c:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
3400336e:	bf04      	itt	eq
34003370:	2300      	moveq	r3, #0
34003372:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
34003374:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
34003378:	2b01      	cmp	r3, #1
3400337a:	d012      	beq.n	340033a2 <HAL_PCD_EP_Open+0x6e>
3400337c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
3400337e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
34003380:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
34003384:	f007 ffcb 	bl	3400b31e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
34003388:	2000      	movs	r0, #0
3400338a:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494

  return ret;
}
3400338e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003390:	f504 7115 	add.w	r1, r4, #596	@ 0x254
    ep->is_in = 0U;
34003394:	2400      	movs	r4, #0
34003396:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
3400339a:	4429      	add	r1, r5
    ep->is_in = 0U;
3400339c:	f880 4255 	strb.w	r4, [r0, #597]	@ 0x255
340033a0:	e7dc      	b.n	3400335c <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
340033a2:	2002      	movs	r0, #2
340033a4:	e7f3      	b.n	3400338e <HAL_PCD_EP_Open+0x5a>

340033a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
340033a6:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
340033a8:	2424      	movs	r4, #36	@ 0x24
340033aa:	f001 050f 	and.w	r5, r1, #15
340033ae:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
340033b2:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
340033b6:	e9c4 2398 	strd	r2, r3, [r4, #608]	@ 0x260
  ep->xfer_count = 0U;
340033ba:	2300      	movs	r3, #0
{
340033bc:	4616      	mov	r6, r2
  ep->xfer_count = 0U;
340033be:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
  ep->is_in = 0U;
340033c2:	f884 3255 	strb.w	r3, [r4, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
340033c6:	f884 5254 	strb.w	r5, [r4, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
340033ca:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
340033cc:	f501 7115 	add.w	r1, r1, #596	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
340033d0:	2a01      	cmp	r2, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
340033d2:	bf08      	it	eq
340033d4:	f8c4 6270 	streq.w	r6, [r4, #624]	@ 0x270
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
340033d8:	6800      	ldr	r0, [r0, #0]
340033da:	f008 f833 	bl	3400b444 <USB_EPStartXfer>

  return HAL_OK;
}
340033de:	2000      	movs	r0, #0
340033e0:	bd70      	pop	{r4, r5, r6, pc}

340033e2 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
340033e2:	2324      	movs	r3, #36	@ 0x24
340033e4:	f001 010f 	and.w	r1, r1, #15
340033e8:	fb03 0001 	mla	r0, r3, r1, r0
}
340033ec:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
340033f0:	4770      	bx	lr

340033f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
340033f2:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340033f4:	2424      	movs	r4, #36	@ 0x24
340033f6:	f001 050f 	and.w	r5, r1, #15
340033fa:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
340033fe:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
34003402:	e9c4 2308 	strd	r2, r3, [r4, #32]
  ep->xfer_count = 0U;
34003406:	2300      	movs	r3, #0
34003408:	62a3      	str	r3, [r4, #40]	@ 0x28
  ep->is_in = 1U;
3400340a:	2301      	movs	r3, #1
{
3400340c:	4616      	mov	r6, r2
  ep->is_in = 1U;
3400340e:	7563      	strb	r3, [r4, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
34003410:	7525      	strb	r5, [r4, #20]

  if (hpcd->Init.dma_enable == 1U)
34003412:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003414:	3114      	adds	r1, #20
  if (hpcd->Init.dma_enable == 1U)
34003416:	429a      	cmp	r2, r3
  {
    ep->dma_addr = (uint32_t)pBuf;
34003418:	bf08      	it	eq
3400341a:	6326      	streq	r6, [r4, #48]	@ 0x30
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
3400341c:	6800      	ldr	r0, [r0, #0]
3400341e:	f008 f811 	bl	3400b444 <USB_EPStartXfer>

  return HAL_OK;
}
34003422:	2000      	movs	r0, #0
34003424:	bd70      	pop	{r4, r5, r6, pc}

34003426 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
34003426:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
34003428:	7903      	ldrb	r3, [r0, #4]
3400342a:	f001 050f 	and.w	r5, r1, #15
3400342e:	42ab      	cmp	r3, r5
{
34003430:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
34003432:	d32b      	bcc.n	3400348c <HAL_PCD_EP_SetStall+0x66>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
34003434:	f011 0f80 	tst.w	r1, #128	@ 0x80
34003438:	f04f 0024 	mov.w	r0, #36	@ 0x24
3400343c:	d01d      	beq.n	3400347a <HAL_PCD_EP_SetStall+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
3400343e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003440:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
34003444:	fb00 4005 	mla	r0, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003448:	3114      	adds	r1, #20
    ep->is_in = 1U;
3400344a:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
3400344c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
3400344e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
34003450:	708b      	strb	r3, [r1, #2]

  __HAL_LOCK(hpcd);
34003452:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
34003456:	429a      	cmp	r2, r3
34003458:	d01a      	beq.n	34003490 <HAL_PCD_EP_SetStall+0x6a>

  (void)USB_EPSetStall(hpcd->Instance, ep);
3400345a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
3400345c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
34003460:	f008 f917 	bl	3400b692 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
34003464:	b92d      	cbnz	r5, 34003472 <HAL_PCD_EP_SetStall+0x4c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
34003466:	79a1      	ldrb	r1, [r4, #6]
34003468:	6820      	ldr	r0, [r4, #0]
3400346a:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
3400346e:	f008 f97b 	bl	3400b768 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
34003472:	2000      	movs	r0, #0
34003474:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
34003478:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
3400347a:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
3400347e:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
34003480:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
34003484:	2300      	movs	r3, #0
34003486:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
3400348a:	e7df      	b.n	3400344c <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
3400348c:	2001      	movs	r0, #1
3400348e:	e7f3      	b.n	34003478 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
34003490:	2002      	movs	r0, #2
34003492:	e7f1      	b.n	34003478 <HAL_PCD_EP_SetStall+0x52>

34003494 <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
34003494:	f001 030f 	and.w	r3, r1, #15
34003498:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
3400349c:	009b      	lsls	r3, r3, #2
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
3400349e:	f103 0214 	add.w	r2, r3, #20
340034a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
340034a6:	4402      	add	r2, r0
340034a8:	4403      	add	r3, r0
340034aa:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
340034ae:	bf0c      	ite	eq
340034b0:	4619      	moveq	r1, r3
340034b2:	4611      	movne	r1, r2
340034b4:	6800      	ldr	r0, [r0, #0]
340034b6:	f007 bf71 	b.w	3400b39c <USB_EPStopXfer>
	...

340034bc <HAL_PCD_IRQHandler>:
{
340034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
340034c0:	6806      	ldr	r6, [r0, #0]
{
340034c2:	4604      	mov	r4, r0
340034c4:	b087      	sub	sp, #28
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
340034c6:	4630      	mov	r0, r6
340034c8:	f008 f93c 	bl	3400b744 <USB_GetMode>
340034cc:	2800      	cmp	r0, #0
340034ce:	f040 8176 	bne.w	340037be <HAL_PCD_IRQHandler+0x302>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
340034d2:	6820      	ldr	r0, [r4, #0]
340034d4:	f008 f908 	bl	3400b6e8 <USB_ReadInterrupts>
340034d8:	2800      	cmp	r0, #0
340034da:	f000 8170 	beq.w	340037be <HAL_PCD_IRQHandler+0x302>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
340034de:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
340034e2:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
340034e4:	f3c3 230d 	ubfx	r3, r3, #8, #14
340034e8:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
340034ec:	f008 f8fc 	bl	3400b6e8 <USB_ReadInterrupts>
340034f0:	0787      	lsls	r7, r0, #30
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340034f2:	bf48      	it	mi
340034f4:	6822      	ldrmi	r2, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
340034f6:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340034f8:	bf48      	it	mi
340034fa:	6953      	ldrmi	r3, [r2, #20]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
340034fc:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
34003500:	bf44      	itt	mi
34003502:	f003 0302 	andmi.w	r3, r3, #2
34003506:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
34003508:	f008 f8ee 	bl	3400b6e8 <USB_ReadInterrupts>
3400350c:	06c0      	lsls	r0, r0, #27
3400350e:	d52d      	bpl.n	3400356c <HAL_PCD_IRQHandler+0xb0>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
34003510:	6822      	ldr	r2, [r4, #0]
34003512:	6993      	ldr	r3, [r2, #24]
34003514:	f023 0310 	bic.w	r3, r3, #16
34003518:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
3400351a:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
3400351e:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
34003522:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
34003526:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
3400352a:	f040 814b 	bne.w	340037c4 <HAL_PCD_IRQHandler+0x308>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
3400352e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
34003532:	ea18 0f03 	tst.w	r8, r3
34003536:	d014      	beq.n	34003562 <HAL_PCD_IRQHandler+0xa6>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
34003538:	2324      	movs	r3, #36	@ 0x24
3400353a:	fb03 4707 	mla	r7, r3, r7, r4
3400353e:	f3c8 190a 	ubfx	r9, r8, #4, #11
34003542:	464a      	mov	r2, r9
34003544:	4630      	mov	r0, r6
34003546:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
3400354a:	f008 f87d 	bl	3400b648 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
3400354e:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
34003552:	444b      	add	r3, r9
34003554:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003558:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
3400355c:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
3400355e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
34003562:	6822      	ldr	r2, [r4, #0]
34003564:	6993      	ldr	r3, [r2, #24]
34003566:	f043 0310 	orr.w	r3, r3, #16
3400356a:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
3400356c:	6820      	ldr	r0, [r4, #0]
3400356e:	f008 f8bb 	bl	3400b6e8 <USB_ReadInterrupts>
34003572:	0301      	lsls	r1, r0, #12
34003574:	f100 8139 	bmi.w	340037ea <HAL_PCD_IRQHandler+0x32e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
34003578:	6820      	ldr	r0, [r4, #0]
3400357a:	f008 f8b5 	bl	3400b6e8 <USB_ReadInterrupts>
3400357e:	0342      	lsls	r2, r0, #13
34003580:	d50d      	bpl.n	3400359e <HAL_PCD_IRQHandler+0xe2>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
34003582:	6820      	ldr	r0, [r4, #0]
34003584:	f008 f8bc 	bl	3400b700 <USB_ReadDevAllInEpInterrupt>
34003588:	4627      	mov	r7, r4
3400358a:	4683      	mov	fp, r0
      epnum = 0U;
3400358c:	f04f 0900 	mov.w	r9, #0
34003590:	f506 6a10 	add.w	sl, r6, #2304	@ 0x900
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003594:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
34003596:	f1bb 0f00 	cmp.w	fp, #0
3400359a:	f040 81f0 	bne.w	3400397e <HAL_PCD_IRQHandler+0x4c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
3400359e:	6820      	ldr	r0, [r4, #0]
340035a0:	f008 f8a2 	bl	3400b6e8 <USB_ReadInterrupts>
340035a4:	2800      	cmp	r0, #0
340035a6:	da13      	bge.n	340035d0 <HAL_PCD_IRQHandler+0x114>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
340035a8:	686b      	ldr	r3, [r5, #4]
340035aa:	f023 0301 	bic.w	r3, r3, #1
340035ae:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
340035b0:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
340035b4:	2b01      	cmp	r3, #1
340035b6:	f040 8286 	bne.w	34003ac6 <HAL_PCD_IRQHandler+0x60a>
        hpcd->LPM_State = LPM_L0;
340035ba:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
340035bc:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
340035be:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
340035c2:	f000 fafa 	bl	34003bba <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
340035c6:	6822      	ldr	r2, [r4, #0]
340035c8:	6953      	ldr	r3, [r2, #20]
340035ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
340035ce:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
340035d0:	6820      	ldr	r0, [r4, #0]
340035d2:	f008 f889 	bl	3400b6e8 <USB_ReadInterrupts>
340035d6:	0502      	lsls	r2, r0, #20
340035d8:	d50a      	bpl.n	340035f0 <HAL_PCD_IRQHandler+0x134>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
340035da:	68ab      	ldr	r3, [r5, #8]
340035dc:	07db      	lsls	r3, r3, #31
340035de:	d502      	bpl.n	340035e6 <HAL_PCD_IRQHandler+0x12a>
        HAL_PCD_SuspendCallback(hpcd);
340035e0:	4620      	mov	r0, r4
340035e2:	f008 fa8f 	bl	3400bb04 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
340035e6:	6822      	ldr	r2, [r4, #0]
340035e8:	6953      	ldr	r3, [r2, #20]
340035ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340035ee:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
340035f0:	6820      	ldr	r0, [r4, #0]
340035f2:	f008 f879 	bl	3400b6e8 <USB_ReadInterrupts>
340035f6:	0107      	lsls	r7, r0, #4
340035f8:	d514      	bpl.n	34003624 <HAL_PCD_IRQHandler+0x168>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
340035fa:	6823      	ldr	r3, [r4, #0]
340035fc:	695a      	ldr	r2, [r3, #20]
340035fe:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
34003602:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
34003604:	f894 24cc 	ldrb.w	r2, [r4, #1228]	@ 0x4cc
34003608:	2a00      	cmp	r2, #0
3400360a:	f040 8260 	bne.w	34003ace <HAL_PCD_IRQHandler+0x612>
        hpcd->LPM_State = LPM_L1;
3400360e:	2101      	movs	r1, #1
34003610:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
34003614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
34003616:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
34003618:	f3c3 0383 	ubfx	r3, r3, #2, #4
3400361c:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
34003620:	f000 facb 	bl	34003bba <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
34003624:	6820      	ldr	r0, [r4, #0]
34003626:	f008 f85f 	bl	3400b6e8 <USB_ReadInterrupts>
3400362a:	04c0      	lsls	r0, r0, #19
3400362c:	d537      	bpl.n	3400369e <HAL_PCD_IRQHandler+0x1e2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
3400362e:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
34003630:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003632:	f023 0301 	bic.w	r3, r3, #1
34003636:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
34003638:	6820      	ldr	r0, [r4, #0]
3400363a:	f007 fe21 	bl	3400b280 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
3400363e:	7921      	ldrb	r1, [r4, #4]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003640:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
34003644:	2900      	cmp	r1, #0
34003646:	f101 0201 	add.w	r2, r1, #1
3400364a:	bf08      	it	eq
3400364c:	2201      	moveq	r2, #1
3400364e:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003652:	3a01      	subs	r2, #1
34003654:	f040 823f 	bne.w	34003ad6 <HAL_PCD_IRQHandler+0x61a>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
34003658:	69eb      	ldr	r3, [r5, #28]
3400365a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
3400365e:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
34003660:	7be3      	ldrb	r3, [r4, #15]
34003662:	2b00      	cmp	r3, #0
34003664:	f000 8252 	beq.w	34003b0c <HAL_PCD_IRQHandler+0x650>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
34003668:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
3400366c:	f043 030b 	orr.w	r3, r3, #11
34003670:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
34003674:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
34003676:	f043 030b 	orr.w	r3, r3, #11
3400367a:	646b      	str	r3, [r5, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
3400367c:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003680:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
34003684:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
34003688:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
3400368c:	79a1      	ldrb	r1, [r4, #6]
3400368e:	6820      	ldr	r0, [r4, #0]
34003690:	f008 f86a 	bl	3400b768 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
34003694:	6822      	ldr	r2, [r4, #0]
34003696:	6953      	ldr	r3, [r2, #20]
34003698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400369c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
3400369e:	6820      	ldr	r0, [r4, #0]
340036a0:	f008 f822 	bl	3400b6e8 <USB_ReadInterrupts>
340036a4:	0481      	lsls	r1, r0, #18
340036a6:	d516      	bpl.n	340036d6 <HAL_PCD_IRQHandler+0x21a>
      (void)USB_ActivateSetup(hpcd->Instance);
340036a8:	6820      	ldr	r0, [r4, #0]
340036aa:	f008 f84f 	bl	3400b74c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
340036ae:	6820      	ldr	r0, [r4, #0]
340036b0:	f007 fe2a 	bl	3400b308 <USB_GetDevSpeed>
340036b4:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
340036b6:	6827      	ldr	r7, [r4, #0]
340036b8:	f001 fb78 	bl	34004dac <HAL_RCC_GetHCLKFreq>
340036bc:	79e2      	ldrb	r2, [r4, #7]
340036be:	4601      	mov	r1, r0
340036c0:	4638      	mov	r0, r7
340036c2:	f007 fd6d 	bl	3400b1a0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
340036c6:	4620      	mov	r0, r4
340036c8:	f008 f9e8 	bl	3400ba9c <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
340036cc:	6822      	ldr	r2, [r4, #0]
340036ce:	6953      	ldr	r3, [r2, #20]
340036d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340036d4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
340036d6:	6820      	ldr	r0, [r4, #0]
340036d8:	f008 f806 	bl	3400b6e8 <USB_ReadInterrupts>
340036dc:	0702      	lsls	r2, r0, #28
340036de:	d507      	bpl.n	340036f0 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_SOFCallback(hpcd);
340036e0:	4620      	mov	r0, r4
340036e2:	f008 fa23 	bl	3400bb2c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
340036e6:	6822      	ldr	r2, [r4, #0]
340036e8:	6953      	ldr	r3, [r2, #20]
340036ea:	f003 0308 	and.w	r3, r3, #8
340036ee:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
340036f0:	6820      	ldr	r0, [r4, #0]
340036f2:	f007 fff9 	bl	3400b6e8 <USB_ReadInterrupts>
340036f6:	0603      	lsls	r3, r0, #24
340036f8:	f100 8213 	bmi.w	34003b22 <HAL_PCD_IRQHandler+0x666>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
340036fc:	6820      	ldr	r0, [r4, #0]
340036fe:	f007 fff3 	bl	3400b6e8 <USB_ReadInterrupts>
34003702:	02c7      	lsls	r7, r0, #11
34003704:	d50c      	bpl.n	34003720 <HAL_PCD_IRQHandler+0x264>
34003706:	46a0      	mov	r8, r4
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003708:	2701      	movs	r7, #1
3400370a:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
3400370e:	7923      	ldrb	r3, [r4, #4]
34003710:	42bb      	cmp	r3, r7
34003712:	f200 821f 	bhi.w	34003b54 <HAL_PCD_IRQHandler+0x698>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
34003716:	6822      	ldr	r2, [r4, #0]
34003718:	6953      	ldr	r3, [r2, #20]
3400371a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3400371e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
34003720:	6820      	ldr	r0, [r4, #0]
34003722:	f007 ffe1 	bl	3400b6e8 <USB_ReadInterrupts>
34003726:	0280      	lsls	r0, r0, #10
34003728:	d52c      	bpl.n	34003784 <HAL_PCD_IRQHandler+0x2c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
3400372a:	7923      	ldrb	r3, [r4, #4]
3400372c:	4622      	mov	r2, r4
3400372e:	2b00      	cmp	r3, #0
34003730:	bf08      	it	eq
34003732:	2301      	moveq	r3, #1
34003734:	f506 6c32 	add.w	ip, r6, #2848	@ 0xb20
34003738:	3b01      	subs	r3, #1
3400373a:	d01e      	beq.n	3400377a <HAL_PCD_IRQHandler+0x2be>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
3400373c:	f892 727c 	ldrb.w	r7, [r2, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
34003740:	f8dc 0000 	ldr.w	r0, [ip]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
34003744:	2f01      	cmp	r7, #1
34003746:	f040 821b 	bne.w	34003b80 <HAL_PCD_IRQHandler+0x6c4>
3400374a:	2800      	cmp	r0, #0
3400374c:	f280 8218 	bge.w	34003b80 <HAL_PCD_IRQHandler+0x6c4>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
34003750:	f8d4 14d4 	ldr.w	r1, [r4, #1236]	@ 0x4d4
34003754:	ea81 4010 	eor.w	r0, r1, r0, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
34003758:	07c1      	lsls	r1, r0, #31
3400375a:	f100 8211 	bmi.w	34003b80 <HAL_PCD_IRQHandler+0x6c4>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
3400375e:	f882 727b 	strb.w	r7, [r2, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
34003762:	69b0      	ldr	r0, [r6, #24]
34003764:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
34003768:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
3400376a:	6970      	ldr	r0, [r6, #20]
3400376c:	0600      	lsls	r0, r0, #24
3400376e:	f100 8207 	bmi.w	34003b80 <HAL_PCD_IRQHandler+0x6c4>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
34003772:	686b      	ldr	r3, [r5, #4]
34003774:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34003778:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
3400377a:	6822      	ldr	r2, [r4, #0]
3400377c:	6953      	ldr	r3, [r2, #20]
3400377e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34003782:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
34003784:	6820      	ldr	r0, [r4, #0]
34003786:	f007 ffaf 	bl	3400b6e8 <USB_ReadInterrupts>
3400378a:	0041      	lsls	r1, r0, #1
3400378c:	d507      	bpl.n	3400379e <HAL_PCD_IRQHandler+0x2e2>
      HAL_PCD_ConnectCallback(hpcd);
3400378e:	4620      	mov	r0, r4
34003790:	f008 f99c 	bl	3400bacc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
34003794:	6822      	ldr	r2, [r4, #0]
34003796:	6953      	ldr	r3, [r2, #20]
34003798:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400379c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
3400379e:	6820      	ldr	r0, [r4, #0]
340037a0:	f007 ffa2 	bl	3400b6e8 <USB_ReadInterrupts>
340037a4:	0742      	lsls	r2, r0, #29
340037a6:	d50a      	bpl.n	340037be <HAL_PCD_IRQHandler+0x302>
      RegVal = hpcd->Instance->GOTGINT;
340037a8:	6823      	ldr	r3, [r4, #0]
340037aa:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
340037ac:	076b      	lsls	r3, r5, #29
340037ae:	d502      	bpl.n	340037b6 <HAL_PCD_IRQHandler+0x2fa>
        HAL_PCD_DisconnectCallback(hpcd);
340037b0:	4620      	mov	r0, r4
340037b2:	f008 f995 	bl	3400bae0 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
340037b6:	6822      	ldr	r2, [r4, #0]
340037b8:	6853      	ldr	r3, [r2, #4]
340037ba:	432b      	orrs	r3, r5
340037bc:	6053      	str	r3, [r2, #4]
}
340037be:	b007      	add	sp, #28
340037c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
340037c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
340037c8:	f47f aecb 	bne.w	34003562 <HAL_PCD_IRQHandler+0xa6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
340037cc:	2208      	movs	r2, #8
340037ce:	4630      	mov	r0, r6
340037d0:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
340037d4:	f007 ff38 	bl	3400b648 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
340037d8:	2324      	movs	r3, #36	@ 0x24
340037da:	fb03 4707 	mla	r7, r3, r7, r4
340037de:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
340037e2:	f3c8 180a 	ubfx	r8, r8, #4, #11
340037e6:	4443      	add	r3, r8
340037e8:	e6b9      	b.n	3400355e <HAL_PCD_IRQHandler+0xa2>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
340037ea:	6820      	ldr	r0, [r4, #0]
340037ec:	f007 ff80 	bl	3400b6f0 <USB_ReadDevAllOutEpInterrupt>
340037f0:	46a2      	mov	sl, r4
      epnum = 0U;
340037f2:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
340037f4:	9002      	str	r0, [sp, #8]
      while (ep_intr != 0U)
340037f6:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
340037fa:	9b02      	ldr	r3, [sp, #8]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
340037fc:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
340037fe:	2b00      	cmp	r3, #0
34003800:	f43f aeba 	beq.w	34003578 <HAL_PCD_IRQHandler+0xbc>
        if ((ep_intr & 0x1U) != 0U)
34003804:	9b02      	ldr	r3, [sp, #8]
34003806:	07db      	lsls	r3, r3, #31
34003808:	d578      	bpl.n	340038fc <HAL_PCD_IRQHandler+0x440>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
3400380a:	fa5f fb87 	uxtb.w	fp, r7
3400380e:	4659      	mov	r1, fp
34003810:	f007 ff7e 	bl	3400b710 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003814:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003818:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
3400381a:	d01f      	beq.n	3400385c <HAL_PCD_IRQHandler+0x3a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
3400381c:	2301      	movs	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
3400381e:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003820:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
34003824:	f894 c006 	ldrb.w	ip, [r4, #6]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003828:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
3400382c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
34003830:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003834:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003836:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
34003838:	f040 808b 	bne.w	34003952 <HAL_PCD_IRQHandler+0x496>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
3400383c:	f012 0f08 	tst.w	r2, #8
34003840:	d007      	beq.n	34003852 <HAL_PCD_IRQHandler+0x396>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003842:	48b0      	ldr	r0, [pc, #704]	@ (34003b04 <HAL_PCD_IRQHandler+0x648>)
34003844:	4281      	cmp	r1, r0
34003846:	d909      	bls.n	3400385c <HAL_PCD_IRQHandler+0x3a0>
34003848:	0412      	lsls	r2, r2, #16
3400384a:	d507      	bpl.n	3400385c <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
3400384c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34003850:	e003      	b.n	3400385a <HAL_PCD_IRQHandler+0x39e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
34003852:	f012 0f20 	tst.w	r2, #32
34003856:	d05a      	beq.n	3400390e <HAL_PCD_IRQHandler+0x452>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003858:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
3400385a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
3400385c:	f019 0f08 	tst.w	r9, #8
34003860:	d021      	beq.n	340038a6 <HAL_PCD_IRQHandler+0x3ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
34003862:	2308      	movs	r3, #8
34003864:	f8c8 3008 	str.w	r3, [r8, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003868:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
3400386a:	49a6      	ldr	r1, [pc, #664]	@ (34003b04 <HAL_PCD_IRQHandler+0x648>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
3400386c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
3400386e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
34003872:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003876:	428a      	cmp	r2, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003878:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
3400387a:	d904      	bls.n	34003886 <HAL_PCD_IRQHandler+0x3ca>
3400387c:	0400      	lsls	r0, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
3400387e:	bf44      	itt	mi
34003880:	f44f 4000 	movmi.w	r0, #32768	@ 0x8000
34003884:	6098      	strmi	r0, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
34003886:	4620      	mov	r0, r4
34003888:	9203      	str	r2, [sp, #12]
3400388a:	f008 f811 	bl	3400b8b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
3400388e:	9a03      	ldr	r2, [sp, #12]
34003890:	499c      	ldr	r1, [pc, #624]	@ (34003b04 <HAL_PCD_IRQHandler+0x648>)
34003892:	428a      	cmp	r2, r1
34003894:	d907      	bls.n	340038a6 <HAL_PCD_IRQHandler+0x3ea>
34003896:	79a1      	ldrb	r1, [r4, #6]
34003898:	2901      	cmp	r1, #1
3400389a:	d104      	bne.n	340038a6 <HAL_PCD_IRQHandler+0x3ea>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
3400389c:	6820      	ldr	r0, [r4, #0]
3400389e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
340038a2:	f007 ff61 	bl	3400b768 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
340038a6:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
340038aa:	bf1c      	itt	ne
340038ac:	2310      	movne	r3, #16
340038ae:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
340038b2:	f019 0f02 	tst.w	r9, #2
340038b6:	d014      	beq.n	340038e2 <HAL_PCD_IRQHandler+0x426>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
340038b8:	6973      	ldr	r3, [r6, #20]
340038ba:	0619      	lsls	r1, r3, #24
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
340038bc:	bf42      	ittt	mi
340038be:	686b      	ldrmi	r3, [r5, #4]
340038c0:	f443 6380 	orrmi.w	r3, r3, #1024	@ 0x400
340038c4:	606b      	strmi	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
340038c6:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
340038ca:	2b01      	cmp	r3, #1
340038cc:	d106      	bne.n	340038dc <HAL_PCD_IRQHandler+0x420>
              ep->is_iso_incomplete = 0U;
340038ce:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
340038d0:	4659      	mov	r1, fp
340038d2:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
340038d4:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
340038d8:	f008 f952 	bl	3400bb80 <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
340038dc:	2302      	movs	r3, #2
340038de:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
340038e2:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
340038e6:	bf1c      	itt	ne
340038e8:	2320      	movne	r3, #32
340038ea:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
340038ee:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
340038f2:	bf1c      	itt	ne
340038f4:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
340038f8:	f8c8 3008 	strne.w	r3, [r8, #8]
        ep_intr >>= 1U;
340038fc:	9b02      	ldr	r3, [sp, #8]
        epnum++;
340038fe:	3701      	adds	r7, #1
        ep_intr >>= 1U;
34003900:	085b      	lsrs	r3, r3, #1
34003902:	9302      	str	r3, [sp, #8]
34003904:	f108 0820 	add.w	r8, r8, #32
34003908:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
3400390c:	e775      	b.n	340037fa <HAL_PCD_IRQHandler+0x33e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
3400390e:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 34003b04 <HAL_PCD_IRQHandler+0x648>
34003912:	4561      	cmp	r1, ip
34003914:	d901      	bls.n	3400391a <HAL_PCD_IRQHandler+0x45e>
34003916:	0412      	lsls	r2, r2, #16
34003918:	d498      	bmi.n	3400384c <HAL_PCD_IRQHandler+0x390>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
3400391a:	691a      	ldr	r2, [r3, #16]
3400391c:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
34003920:	f3c2 0212 	ubfx	r2, r2, #0, #19
34003924:	1a9b      	subs	r3, r3, r2
34003926:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
3400392a:	b96f      	cbnz	r7, 34003948 <HAL_PCD_IRQHandler+0x48c>
          if (ep->xfer_len == 0U)
3400392c:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
34003930:	b92a      	cbnz	r2, 3400393e <HAL_PCD_IRQHandler+0x482>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003932:	2101      	movs	r1, #1
34003934:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003938:	f007 ff16 	bl	3400b768 <USB_EP0_OutStart>
3400393c:	e004      	b.n	34003948 <HAL_PCD_IRQHandler+0x48c>
            ep->xfer_buff += ep->xfer_count;
3400393e:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
34003942:	441a      	add	r2, r3
34003944:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003948:	4659      	mov	r1, fp
3400394a:	4620      	mov	r0, r4
3400394c:	f008 f85c 	bl	3400ba08 <HAL_PCD_DataOutStageCallback>
34003950:	e784      	b.n	3400385c <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
34003952:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 34003b08 <HAL_PCD_IRQHandler+0x64c>
34003956:	4561      	cmp	r1, ip
34003958:	d107      	bne.n	3400396a <HAL_PCD_IRQHandler+0x4ae>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
3400395a:	0411      	lsls	r1, r2, #16
3400395c:	f53f af76 	bmi.w	3400384c <HAL_PCD_IRQHandler+0x390>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003960:	0692      	lsls	r2, r2, #26
34003962:	d5f1      	bpl.n	34003948 <HAL_PCD_IRQHandler+0x48c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003964:	2220      	movs	r2, #32
34003966:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003968:	e7ee      	b.n	34003948 <HAL_PCD_IRQHandler+0x48c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
3400396a:	2f00      	cmp	r7, #0
3400396c:	d1ec      	bne.n	34003948 <HAL_PCD_IRQHandler+0x48c>
3400396e:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
34003972:	2b00      	cmp	r3, #0
34003974:	d1e8      	bne.n	34003948 <HAL_PCD_IRQHandler+0x48c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003976:	4639      	mov	r1, r7
34003978:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
3400397c:	e7dc      	b.n	34003938 <HAL_PCD_IRQHandler+0x47c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
3400397e:	f01b 0f01 	tst.w	fp, #1
34003982:	f000 8098 	beq.w	34003ab6 <HAL_PCD_IRQHandler+0x5fa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003986:	fa5f f389 	uxtb.w	r3, r9
3400398a:	4619      	mov	r1, r3
3400398c:	9302      	str	r3, [sp, #8]
3400398e:	f007 fec8 	bl	3400b722 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003992:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003996:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003998:	d01f      	beq.n	340039da <HAL_PCD_IRQHandler+0x51e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
3400399a:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
3400399c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
3400399e:	f009 020f 	and.w	r2, r9, #15
340039a2:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
340039a6:	ea23 0302 	bic.w	r3, r3, r2
340039aa:	636b      	str	r3, [r5, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
340039ac:	f8ca 1008 	str.w	r1, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
340039b0:	79a1      	ldrb	r1, [r4, #6]
340039b2:	2901      	cmp	r1, #1
340039b4:	d10d      	bne.n	340039d2 <HAL_PCD_IRQHandler+0x516>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
340039b6:	e9d7 2307 	ldrd	r2, r3, [r7, #28]
340039ba:	4413      	add	r3, r2
340039bc:	623b      	str	r3, [r7, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
340039be:	f1b9 0f00 	cmp.w	r9, #0
340039c2:	d106      	bne.n	340039d2 <HAL_PCD_IRQHandler+0x516>
340039c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340039c6:	b923      	cbnz	r3, 340039d2 <HAL_PCD_IRQHandler+0x516>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
340039c8:	6820      	ldr	r0, [r4, #0]
340039ca:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
340039ce:	f007 fecb 	bl	3400b768 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
340039d2:	4620      	mov	r0, r4
340039d4:	9902      	ldr	r1, [sp, #8]
340039d6:	f007 ffb7 	bl	3400b948 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
340039da:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
340039de:	bf1c      	itt	ne
340039e0:	2308      	movne	r3, #8
340039e2:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
340039e6:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
340039ea:	bf1c      	itt	ne
340039ec:	2310      	movne	r3, #16
340039ee:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
340039f2:	f018 0f40 	tst.w	r8, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
340039f6:	bf1c      	itt	ne
340039f8:	2340      	movne	r3, #64	@ 0x40
340039fa:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
340039fe:	f018 0f02 	tst.w	r8, #2
34003a02:	d00f      	beq.n	34003a24 <HAL_PCD_IRQHandler+0x568>
            (void)USB_FlushTxFifo(USBx, epnum);
34003a04:	4649      	mov	r1, r9
34003a06:	4630      	mov	r0, r6
34003a08:	f007 fc3a 	bl	3400b280 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
34003a0c:	7dfb      	ldrb	r3, [r7, #23]
34003a0e:	2b01      	cmp	r3, #1
34003a10:	d105      	bne.n	34003a1e <HAL_PCD_IRQHandler+0x562>
              ep->is_iso_incomplete = 0U;
34003a12:	2300      	movs	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003a14:	4620      	mov	r0, r4
34003a16:	9902      	ldr	r1, [sp, #8]
              ep->is_iso_incomplete = 0U;
34003a18:	75fb      	strb	r3, [r7, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003a1a:	f008 f891 	bl	3400bb40 <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
34003a1e:	2302      	movs	r3, #2
34003a20:	f8ca 3008 	str.w	r3, [sl, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003a24:	6823      	ldr	r3, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003a26:	f018 0f80 	tst.w	r8, #128	@ 0x80
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003a2a:	9303      	str	r3, [sp, #12]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003a2c:	d043      	beq.n	34003ab6 <HAL_PCD_IRQHandler+0x5fa>
  if (ep->xfer_count > ep->xfer_len)
34003a2e:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
34003a32:	429a      	cmp	r2, r3
34003a34:	d83f      	bhi.n	34003ab6 <HAL_PCD_IRQHandler+0x5fa>
  len = ep->xfer_len - ep->xfer_count;
34003a36:	1a9b      	subs	r3, r3, r2
  if (len > ep->maxpacket)
34003a38:	69fa      	ldr	r2, [r7, #28]
34003a3a:	4293      	cmp	r3, r2
34003a3c:	bf28      	it	cs
34003a3e:	4613      	movcs	r3, r2
  len32b = (len + 3U) / 4U;
34003a40:	3303      	adds	r3, #3
34003a42:	089b      	lsrs	r3, r3, #2
34003a44:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003a46:	9b03      	ldr	r3, [sp, #12]
34003a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
34003a4c:	eb03 1349 	add.w	r3, r3, r9, lsl #5
34003a50:	9305      	str	r3, [sp, #20]
34003a52:	9b05      	ldr	r3, [sp, #20]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003a54:	9804      	ldr	r0, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003a56:	6999      	ldr	r1, [r3, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003a58:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003a5c:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003a5e:	4281      	cmp	r1, r0
34003a60:	d327      	bcc.n	34003ab2 <HAL_PCD_IRQHandler+0x5f6>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003a62:	4293      	cmp	r3, r2
34003a64:	d80b      	bhi.n	34003a7e <HAL_PCD_IRQHandler+0x5c2>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003a66:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003a68:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003a6a:	f009 000f 	and.w	r0, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003a6e:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003a72:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003a74:	ea22 0201 	bic.w	r2, r2, r1
34003a78:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
34003a7c:	e01b      	b.n	34003ab6 <HAL_PCD_IRQHandler+0x5fa>
    len = ep->xfer_len - ep->xfer_count;
34003a7e:	eba3 0802 	sub.w	r8, r3, r2
    if (len > ep->maxpacket)
34003a82:	69fb      	ldr	r3, [r7, #28]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003a84:	9a02      	ldr	r2, [sp, #8]
    if (len > ep->maxpacket)
34003a86:	4598      	cmp	r8, r3
34003a88:	bf28      	it	cs
34003a8a:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
34003a8c:	f108 0303 	add.w	r3, r8, #3
34003a90:	089b      	lsrs	r3, r3, #2
34003a92:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003a94:	79a3      	ldrb	r3, [r4, #6]
34003a96:	9803      	ldr	r0, [sp, #12]
34003a98:	9300      	str	r3, [sp, #0]
34003a9a:	6a39      	ldr	r1, [r7, #32]
34003a9c:	fa1f f388 	uxth.w	r3, r8
34003aa0:	f007 fcbe 	bl	3400b420 <USB_WritePacket>
    ep->xfer_buff  += len;
34003aa4:	6a3b      	ldr	r3, [r7, #32]
34003aa6:	4443      	add	r3, r8
34003aa8:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
34003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34003aac:	4443      	add	r3, r8
34003aae:	62bb      	str	r3, [r7, #40]	@ 0x28
34003ab0:	e7cf      	b.n	34003a52 <HAL_PCD_IRQHandler+0x596>
  if (ep->xfer_len <= ep->xfer_count)
34003ab2:	4293      	cmp	r3, r2
34003ab4:	d9d7      	bls.n	34003a66 <HAL_PCD_IRQHandler+0x5aa>
        epnum++;
34003ab6:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
34003aba:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
34003abe:	3724      	adds	r7, #36	@ 0x24
34003ac0:	f10a 0a20 	add.w	sl, sl, #32
34003ac4:	e566      	b.n	34003594 <HAL_PCD_IRQHandler+0xd8>
        HAL_PCD_ResumeCallback(hpcd);
34003ac6:	4620      	mov	r0, r4
34003ac8:	f008 f826 	bl	3400bb18 <HAL_PCD_ResumeCallback>
34003acc:	e57b      	b.n	340035c6 <HAL_PCD_IRQHandler+0x10a>
        HAL_PCD_SuspendCallback(hpcd);
34003ace:	4620      	mov	r0, r4
34003ad0:	f008 f818 	bl	3400bb04 <HAL_PCD_SuspendCallback>
34003ad4:	e5a6      	b.n	34003624 <HAL_PCD_IRQHandler+0x168>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003ad6:	6098      	str	r0, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
34003ad8:	6819      	ldr	r1, [r3, #0]
34003ada:	3320      	adds	r3, #32
34003adc:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003ae0:	f843 1c20 	str.w	r1, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
34003ae4:	f8c3 01e8 	str.w	r0, [r3, #488]	@ 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
34003ae8:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003aec:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003af0:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
34003af4:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003af8:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
34003afc:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003b00:	e5a7      	b.n	34003652 <HAL_PCD_IRQHandler+0x196>
34003b02:	bf00      	nop
34003b04:	4f54300a 	.word	0x4f54300a
34003b08:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
34003b0c:	696b      	ldr	r3, [r5, #20]
34003b0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34003b12:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
34003b16:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
34003b18:	692b      	ldr	r3, [r5, #16]
34003b1a:	f043 030b 	orr.w	r3, r3, #11
34003b1e:	612b      	str	r3, [r5, #16]
34003b20:	e5ac      	b.n	3400367c <HAL_PCD_IRQHandler+0x1c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003b22:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003b24:	f04f 0924 	mov.w	r9, #36	@ 0x24
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003b28:	69b3      	ldr	r3, [r6, #24]
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003b2a:	f204 2857 	addw	r8, r4, #599	@ 0x257
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
34003b32:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003b34:	7923      	ldrb	r3, [r4, #4]
34003b36:	42bb      	cmp	r3, r7
34003b38:	f67f ade0 	bls.w	340036fc <HAL_PCD_IRQHandler+0x240>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003b3c:	fb09 f307 	mul.w	r3, r9, r7
34003b40:	f818 3003 	ldrb.w	r3, [r8, r3]
34003b44:	2b01      	cmp	r3, #1
34003b46:	d103      	bne.n	34003b50 <HAL_PCD_IRQHandler+0x694>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
34003b48:	4620      	mov	r0, r4
34003b4a:	b2f9      	uxtb	r1, r7
34003b4c:	f7ff fca2 	bl	34003494 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003b50:	3701      	adds	r7, #1
34003b52:	e7ef      	b.n	34003b34 <HAL_PCD_IRQHandler+0x678>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003b54:	f898 303c 	ldrb.w	r3, [r8, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
34003b58:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003b5c:	2b01      	cmp	r3, #1
34003b5e:	d109      	bne.n	34003b74 <HAL_PCD_IRQHandler+0x6b8>
34003b60:	2a00      	cmp	r2, #0
34003b62:	da07      	bge.n	34003b74 <HAL_PCD_IRQHandler+0x6b8>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003b64:	f067 017f 	orn	r1, r7, #127	@ 0x7f
34003b68:	4620      	mov	r0, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
34003b6a:	f888 303b 	strb.w	r3, [r8, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003b6e:	b2c9      	uxtb	r1, r1
34003b70:	f7ff fc90 	bl	34003494 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003b74:	3701      	adds	r7, #1
34003b76:	f108 0824 	add.w	r8, r8, #36	@ 0x24
34003b7a:	f109 0920 	add.w	r9, r9, #32
34003b7e:	e5c6      	b.n	3400370e <HAL_PCD_IRQHandler+0x252>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003b80:	3224      	adds	r2, #36	@ 0x24
34003b82:	f10c 0c20 	add.w	ip, ip, #32
34003b86:	e5d7      	b.n	34003738 <HAL_PCD_IRQHandler+0x27c>

34003b88 <HAL_PCD_EP_Flush>:
{
34003b88:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
34003b8a:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
{
34003b8e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
34003b90:	2b01      	cmp	r3, #1
34003b92:	d010      	beq.n	34003bb6 <HAL_PCD_EP_Flush+0x2e>
34003b94:	2301      	movs	r3, #1
34003b96:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
34003b9a:	060b      	lsls	r3, r1, #24
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003b9c:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
34003b9e:	d507      	bpl.n	34003bb0 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003ba0:	f001 010f 	and.w	r1, r1, #15
34003ba4:	f007 fb6c 	bl	3400b280 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
34003ba8:	2000      	movs	r0, #0
34003baa:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
34003bae:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
34003bb0:	f007 fb89 	bl	3400b2c6 <USB_FlushRxFifo>
34003bb4:	e7f8      	b.n	34003ba8 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
34003bb6:	2002      	movs	r0, #2
34003bb8:	e7f9      	b.n	34003bae <HAL_PCD_EP_Flush+0x26>

34003bba <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
34003bba:	4770      	bx	lr

34003bbc <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34003bbc:	2804      	cmp	r0, #4
{
34003bbe:	b538      	push	{r3, r4, r5, lr}
34003bc0:	4605      	mov	r5, r0
34003bc2:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
34003bc4:	d912      	bls.n	34003bec <HAL_PWREx_ConfigVddIORange+0x30>
34003bc6:	f240 316a 	movw	r1, #874	@ 0x36a
34003bca:	481d      	ldr	r0, [pc, #116]	@ (34003c40 <HAL_PWREx_ConfigVddIORange+0x84>)
34003bcc:	f7fd fa9e 	bl	3400110c <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34003bd0:	2c01      	cmp	r4, #1
34003bd2:	d915      	bls.n	34003c00 <HAL_PWREx_ConfigVddIORange+0x44>
34003bd4:	f240 316b 	movw	r1, #875	@ 0x36b
34003bd8:	4819      	ldr	r0, [pc, #100]	@ (34003c40 <HAL_PWREx_ConfigVddIORange+0x84>)
34003bda:	f7fd fa97 	bl	3400110c <assert_failed>

  switch (VddIOPort)
34003bde:	2d04      	cmp	r5, #4
34003be0:	d80e      	bhi.n	34003c00 <HAL_PWREx_ConfigVddIORange+0x44>
34003be2:	e8df f005 	tbb	[pc, r5]
34003be6:	0e06      	.short	0x0e06
34003be8:	1c15      	.short	0x1c15
34003bea:	24          	.byte	0x24
34003beb:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34003bec:	2901      	cmp	r1, #1
34003bee:	d9f6      	bls.n	34003bde <HAL_PWREx_ConfigVddIORange+0x22>
34003bf0:	e7f0      	b.n	34003bd4 <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34003bf2:	4a14      	ldr	r2, [pc, #80]	@ (34003c44 <HAL_PWREx_ConfigVddIORange+0x88>)
34003bf4:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003bf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003bfa:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34003bfe:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
34003c00:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34003c02:	4a10      	ldr	r2, [pc, #64]	@ (34003c44 <HAL_PWREx_ConfigVddIORange+0x88>)
34003c04:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003c06:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
34003c0a:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
34003c0e:	e7f6      	b.n	34003bfe <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34003c10:	4a0c      	ldr	r2, [pc, #48]	@ (34003c44 <HAL_PWREx_ConfigVddIORange+0x88>)
34003c12:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003c14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
34003c18:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
34003c1c:	e7ef      	b.n	34003bfe <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34003c1e:	4a09      	ldr	r2, [pc, #36]	@ (34003c44 <HAL_PWREx_ConfigVddIORange+0x88>)
34003c20:	6b53      	ldr	r3, [r2, #52]	@ 0x34
34003c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003c26:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34003c2a:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
34003c2c:	e7e8      	b.n	34003c00 <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34003c2e:	4a05      	ldr	r2, [pc, #20]	@ (34003c44 <HAL_PWREx_ConfigVddIORange+0x88>)
34003c30:	6b93      	ldr	r3, [r2, #56]	@ 0x38
34003c32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003c36:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34003c3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
34003c3c:	e7e0      	b.n	34003c00 <HAL_PWREx_ConfigVddIORange+0x44>
34003c3e:	bf00      	nop
34003c40:	3400ed60 	.word	0x3400ed60
34003c44:	56024800 	.word	0x56024800

34003c48 <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34003c48:	4a02      	ldr	r2, [pc, #8]	@ (34003c54 <HAL_PWREx_EnableVddIO3+0xc>)
34003c4a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003c4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34003c50:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34003c52:	4770      	bx	lr
34003c54:	56024800 	.word	0x56024800

34003c58 <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003c58:	6803      	ldr	r3, [r0, #0]
34003c5a:	4a1c      	ldr	r2, [pc, #112]	@ (34003ccc <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
34003c5c:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003c5e:	4293      	cmp	r3, r2
{
34003c60:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003c62:	d02c      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003c64:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003c68:	4293      	cmp	r3, r2
34003c6a:	d028      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003c6c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003c70:	3280      	adds	r2, #128	@ 0x80
34003c72:	4293      	cmp	r3, r2
34003c74:	d023      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003c76:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003c7a:	4293      	cmp	r3, r2
34003c7c:	d01f      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003c7e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003c82:	3280      	adds	r2, #128	@ 0x80
34003c84:	4293      	cmp	r3, r2
34003c86:	d01a      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003c88:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003c8c:	4293      	cmp	r3, r2
34003c8e:	d016      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003c90:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003c94:	3280      	adds	r2, #128	@ 0x80
34003c96:	4293      	cmp	r3, r2
34003c98:	d011      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003c9a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003c9e:	4293      	cmp	r3, r2
34003ca0:	d00d      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003ca2:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003ca6:	3280      	adds	r2, #128	@ 0x80
34003ca8:	4293      	cmp	r3, r2
34003caa:	d008      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003cac:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003cb0:	4293      	cmp	r3, r2
34003cb2:	d004      	beq.n	34003cbe <HAL_RAMCFG_EnableAXISRAM+0x66>
34003cb4:	f240 4107 	movw	r1, #1031	@ 0x407
34003cb8:	4805      	ldr	r0, [pc, #20]	@ (34003cd0 <HAL_RAMCFG_EnableAXISRAM+0x78>)
34003cba:	f7fd fa27 	bl	3400110c <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34003cbe:	6822      	ldr	r2, [r4, #0]
34003cc0:	6813      	ldr	r3, [r2, #0]
34003cc2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34003cc6:	6013      	str	r3, [r2, #0]
}
34003cc8:	bd10      	pop	{r4, pc}
34003cca:	bf00      	nop
34003ccc:	52023080 	.word	0x52023080
34003cd0:	3400ee0b 	.word	0x3400ee0b

34003cd4 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34003cd4:	4b02      	ldr	r3, [pc, #8]	@ (34003ce0 <LL_RCC_HSI_IsReady+0xc>)
34003cd6:	6858      	ldr	r0, [r3, #4]
}
34003cd8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34003cdc:	4770      	bx	lr
34003cde:	bf00      	nop
34003ce0:	56028000 	.word	0x56028000

34003ce4 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34003ce4:	4b02      	ldr	r3, [pc, #8]	@ (34003cf0 <LL_RCC_MSI_IsReady+0xc>)
34003ce6:	6858      	ldr	r0, [r3, #4]
}
34003ce8:	f3c0 0080 	ubfx	r0, r0, #2, #1
34003cec:	4770      	bx	lr
34003cee:	bf00      	nop
34003cf0:	56028000 	.word	0x56028000

34003cf4 <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34003cf4:	4b02      	ldr	r3, [pc, #8]	@ (34003d00 <LL_RCC_PLL1_IsReady+0xc>)
34003cf6:	6858      	ldr	r0, [r3, #4]
}
34003cf8:	f3c0 2000 	ubfx	r0, r0, #8, #1
34003cfc:	4770      	bx	lr
34003cfe:	bf00      	nop
34003d00:	56028000 	.word	0x56028000

34003d04 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34003d04:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003d06:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003d08:	4d1b      	ldr	r5, [pc, #108]	@ (34003d78 <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34003d0a:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003d0c:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34003d0e:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003d10:	021b      	lsls	r3, r3, #8
34003d12:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
34003d16:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34003d18:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34003d1c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003d20:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34003d22:	429a      	cmp	r2, r3
34003d24:	d126      	bne.n	34003d74 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34003d26:	4b15      	ldr	r3, [pc, #84]	@ (34003d7c <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34003d28:	68ca      	ldr	r2, [r1, #12]
34003d2a:	58e3      	ldr	r3, [r4, r3]
34003d2c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003d30:	4293      	cmp	r3, r2
34003d32:	d11f      	bne.n	34003d74 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34003d34:	4b12      	ldr	r3, [pc, #72]	@ (34003d80 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34003d36:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34003d38:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34003d3c:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34003d3e:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34003d42:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34003d46:	429a      	cmp	r2, r3
34003d48:	d114      	bne.n	34003d74 <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34003d4a:	4b0e      	ldr	r3, [pc, #56]	@ (34003d84 <RCC_PLL_IsNewConfig+0x80>)
34003d4c:	685a      	ldr	r2, [r3, #4]
34003d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
34003d52:	fa03 f000 	lsl.w	r0, r3, r0
34003d56:	4390      	bics	r0, r2
34003d58:	d00a      	beq.n	34003d70 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34003d5a:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
34003d5c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
34003d60:	bf0c      	ite	eq
34003d62:	2301      	moveq	r3, #1
34003d64:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34003d66:	6808      	ldr	r0, [r1, #0]
34003d68:	1ac0      	subs	r0, r0, r3
34003d6a:	bf18      	it	ne
34003d6c:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
34003d6e:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
34003d70:	2302      	movs	r3, #2
34003d72:	e7f8      	b.n	34003d66 <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
34003d74:	2001      	movs	r0, #1
  return ret;
34003d76:	e7fa      	b.n	34003d6e <RCC_PLL_IsNewConfig+0x6a>
34003d78:	56028080 	.word	0x56028080
34003d7c:	56028084 	.word	0x56028084
34003d80:	56028088 	.word	0x56028088
34003d84:	56028000 	.word	0x56028000

34003d88 <RCC_PLL_Enable>:
{
34003d88:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34003d8a:	f44f 7480 	mov.w	r4, #256	@ 0x100
34003d8e:	4e09      	ldr	r6, [pc, #36]	@ (34003db4 <RCC_PLL_Enable+0x2c>)
34003d90:	4084      	lsls	r4, r0
34003d92:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
34003d96:	f7fe f9b5 	bl	34002104 <HAL_GetTick>
34003d9a:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34003d9c:	6873      	ldr	r3, [r6, #4]
34003d9e:	421c      	tst	r4, r3
34003da0:	d001      	beq.n	34003da6 <RCC_PLL_Enable+0x1e>
  return ret;
34003da2:	2000      	movs	r0, #0
}
34003da4:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34003da6:	f7fe f9ad 	bl	34002104 <HAL_GetTick>
34003daa:	1b40      	subs	r0, r0, r5
34003dac:	2801      	cmp	r0, #1
34003dae:	d9f5      	bls.n	34003d9c <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
34003db0:	2003      	movs	r0, #3
34003db2:	e7f7      	b.n	34003da4 <RCC_PLL_Enable+0x1c>
34003db4:	56028000 	.word	0x56028000

34003db8 <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
34003db8:	680b      	ldr	r3, [r1, #0]
{
34003dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
34003dbe:	2b02      	cmp	r3, #2
{
34003dc0:	4681      	mov	r9, r0
34003dc2:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003dc4:	4f83      	ldr	r7, [pc, #524]	@ (34003fd4 <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34003dc6:	4e84      	ldr	r6, [pc, #528]	@ (34003fd8 <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003dc8:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
34003dcc:	f040 8099 	bne.w	34003f02 <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34003dd0:	684b      	ldr	r3, [r1, #4]
34003dd2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34003dd6:	d004      	beq.n	34003de2 <RCC_PLL_Config+0x2a>
34003dd8:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34003ddc:	487f      	ldr	r0, [pc, #508]	@ (34003fdc <RCC_PLL_Config+0x224>)
34003dde:	f7fd f995 	bl	3400110c <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
34003de2:	68eb      	ldr	r3, [r5, #12]
34003de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34003de8:	d304      	bcc.n	34003df4 <RCC_PLL_Config+0x3c>
34003dea:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34003dee:	487b      	ldr	r0, [pc, #492]	@ (34003fdc <RCC_PLL_Config+0x224>)
34003df0:	f7fd f98c 	bl	3400110c <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34003df4:	68ab      	ldr	r3, [r5, #8]
34003df6:	3b01      	subs	r3, #1
34003df8:	2b3e      	cmp	r3, #62	@ 0x3e
34003dfa:	d904      	bls.n	34003e06 <RCC_PLL_Config+0x4e>
34003dfc:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34003e00:	4876      	ldr	r0, [pc, #472]	@ (34003fdc <RCC_PLL_Config+0x224>)
34003e02:	f7fd f983 	bl	3400110c <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
34003e06:	f640 12ba 	movw	r2, #2490	@ 0x9ba
34003e0a:	692b      	ldr	r3, [r5, #16]
34003e0c:	3b0a      	subs	r3, #10
34003e0e:	4293      	cmp	r3, r2
34003e10:	d904      	bls.n	34003e1c <RCC_PLL_Config+0x64>
34003e12:	f240 71fd 	movw	r1, #2045	@ 0x7fd
34003e16:	4871      	ldr	r0, [pc, #452]	@ (34003fdc <RCC_PLL_Config+0x224>)
34003e18:	f7fd f978 	bl	3400110c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34003e1c:	696b      	ldr	r3, [r5, #20]
34003e1e:	3b01      	subs	r3, #1
34003e20:	2b06      	cmp	r3, #6
34003e22:	d904      	bls.n	34003e2e <RCC_PLL_Config+0x76>
34003e24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
34003e28:	486c      	ldr	r0, [pc, #432]	@ (34003fdc <RCC_PLL_Config+0x224>)
34003e2a:	f7fd f96f 	bl	3400110c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34003e2e:	69ab      	ldr	r3, [r5, #24]
34003e30:	3b01      	subs	r3, #1
34003e32:	2b06      	cmp	r3, #6
34003e34:	d904      	bls.n	34003e40 <RCC_PLL_Config+0x88>
34003e36:	f240 71ff 	movw	r1, #2047	@ 0x7ff
34003e3a:	4868      	ldr	r0, [pc, #416]	@ (34003fdc <RCC_PLL_Config+0x224>)
34003e3c:	f7fd f966 	bl	3400110c <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34003e40:	f44f 7880 	mov.w	r8, #256	@ 0x100
34003e44:	4b66      	ldr	r3, [pc, #408]	@ (34003fe0 <RCC_PLL_Config+0x228>)
34003e46:	fa08 f809 	lsl.w	r8, r8, r9
34003e4a:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
34003e4e:	f7fe f959 	bl	34002104 <HAL_GetTick>
34003e52:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34003e54:	f8df a194 	ldr.w	sl, [pc, #404]	@ 34003fec <RCC_PLL_Config+0x234>
34003e58:	f8da 3004 	ldr.w	r3, [sl, #4]
34003e5c:	ea38 0303 	bics.w	r3, r8, r3
34003e60:	d040      	beq.n	34003ee4 <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34003e62:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34003e64:	495f      	ldr	r1, [pc, #380]	@ (34003fe4 <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34003e66:	f043 0304 	orr.w	r3, r3, #4
34003e6a:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34003e6c:	59e3      	ldr	r3, [r4, r7]
34003e6e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34003e72:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34003e74:	692b      	ldr	r3, [r5, #16]
34003e76:	68aa      	ldr	r2, [r5, #8]
34003e78:	021b      	lsls	r3, r3, #8
34003e7a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
34003e7e:	686a      	ldr	r2, [r5, #4]
34003e80:	59e0      	ldr	r0, [r4, r7]
34003e82:	4313      	orrs	r3, r2
34003e84:	4a58      	ldr	r2, [pc, #352]	@ (34003fe8 <RCC_PLL_Config+0x230>)
34003e86:	4002      	ands	r2, r0
34003e88:	4313      	orrs	r3, r2
34003e8a:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34003e8c:	59a2      	ldr	r2, [r4, r6]
34003e8e:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
34003e92:	061b      	lsls	r3, r3, #24
34003e94:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
34003e98:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
34003e9c:	4313      	orrs	r3, r2
34003e9e:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34003ea0:	5863      	ldr	r3, [r4, r1]
34003ea2:	68ea      	ldr	r2, [r5, #12]
34003ea4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
34003ea8:	4313      	orrs	r3, r2
34003eaa:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34003eac:	59a3      	ldr	r3, [r4, r6]
34003eae:	f023 0308 	bic.w	r3, r3, #8
34003eb2:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
34003eb4:	68eb      	ldr	r3, [r5, #12]
34003eb6:	b11b      	cbz	r3, 34003ec0 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34003eb8:	59a3      	ldr	r3, [r4, r6]
34003eba:	f043 030a 	orr.w	r3, r3, #10
34003ebe:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34003ec0:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34003ec2:	4d4a      	ldr	r5, [pc, #296]	@ (34003fec <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34003ec4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34003ec8:	f043 0301 	orr.w	r3, r3, #1
34003ecc:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34003ece:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
34003ed2:	f7fe f917 	bl	34002104 <HAL_GetTick>
34003ed6:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34003ed8:	686b      	ldr	r3, [r5, #4]
34003eda:	ea18 0f03 	tst.w	r8, r3
34003ede:	d00a      	beq.n	34003ef6 <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
34003ee0:	2000      	movs	r0, #0
34003ee2:	e006      	b.n	34003ef2 <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34003ee4:	f7fe f90e 	bl	34002104 <HAL_GetTick>
34003ee8:	eba0 0009 	sub.w	r0, r0, r9
34003eec:	2801      	cmp	r0, #1
34003eee:	d9b3      	bls.n	34003e58 <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
34003ef0:	2003      	movs	r0, #3
}
34003ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34003ef6:	f7fe f905 	bl	34002104 <HAL_GetTick>
34003efa:	1b00      	subs	r0, r0, r4
34003efc:	2801      	cmp	r0, #1
34003efe:	d9eb      	bls.n	34003ed8 <RCC_PLL_Config+0x120>
34003f00:	e7f6      	b.n	34003ef0 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34003f02:	2b03      	cmp	r3, #3
34003f04:	d146      	bne.n	34003f94 <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34003f06:	684b      	ldr	r3, [r1, #4]
34003f08:	b37b      	cbz	r3, 34003f6a <RCC_PLL_Config+0x1b2>
34003f0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003f0e:	d032      	beq.n	34003f76 <RCC_PLL_Config+0x1be>
34003f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003f14:	d032      	beq.n	34003f7c <RCC_PLL_Config+0x1c4>
34003f16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34003f1a:	d00d      	beq.n	34003f38 <RCC_PLL_Config+0x180>
34003f1c:	f640 013f 	movw	r1, #2111	@ 0x83f
34003f20:	482e      	ldr	r0, [pc, #184]	@ (34003fdc <RCC_PLL_Config+0x224>)
34003f22:	f7fd f8f3 	bl	3400110c <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34003f26:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
34003f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003f2c:	d026      	beq.n	34003f7c <RCC_PLL_Config+0x1c4>
34003f2e:	d803      	bhi.n	34003f38 <RCC_PLL_Config+0x180>
34003f30:	b1db      	cbz	r3, 34003f6a <RCC_PLL_Config+0x1b2>
34003f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003f36:	d01e      	beq.n	34003f76 <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34003f38:	f44f 7680 	mov.w	r6, #256	@ 0x100
34003f3c:	4b28      	ldr	r3, [pc, #160]	@ (34003fe0 <RCC_PLL_Config+0x228>)
34003f3e:	fa06 f609 	lsl.w	r6, r6, r9
34003f42:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
34003f44:	f7fe f8de 	bl	34002104 <HAL_GetTick>
34003f48:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34003f4a:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 34003fec <RCC_PLL_Config+0x234>
34003f4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
34003f52:	ea36 0303 	bics.w	r3, r6, r3
34003f56:	d016      	beq.n	34003f86 <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34003f58:	59e3      	ldr	r3, [r4, r7]
34003f5a:	686a      	ldr	r2, [r5, #4]
34003f5c:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
34003f60:	4313      	orrs	r3, r2
34003f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
34003f66:	51e3      	str	r3, [r4, r7]
34003f68:	e7ba      	b.n	34003ee0 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
34003f6a:	f7ff feb3 	bl	34003cd4 <LL_RCC_HSI_IsReady>
34003f6e:	2800      	cmp	r0, #0
34003f70:	d1e2      	bne.n	34003f38 <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
34003f72:	2001      	movs	r0, #1
34003f74:	e7bd      	b.n	34003ef2 <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
34003f76:	f7ff feb5 	bl	34003ce4 <LL_RCC_MSI_IsReady>
34003f7a:	e7f8      	b.n	34003f6e <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34003f7c:	4b1b      	ldr	r3, [pc, #108]	@ (34003fec <RCC_PLL_Config+0x234>)
34003f7e:	685b      	ldr	r3, [r3, #4]
34003f80:	06db      	lsls	r3, r3, #27
34003f82:	d5f6      	bpl.n	34003f72 <RCC_PLL_Config+0x1ba>
34003f84:	e7d8      	b.n	34003f38 <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34003f86:	f7fe f8bd 	bl	34002104 <HAL_GetTick>
34003f8a:	eba0 0008 	sub.w	r0, r0, r8
34003f8e:	2801      	cmp	r0, #1
34003f90:	d9dd      	bls.n	34003f4e <RCC_PLL_Config+0x196>
34003f92:	e7ad      	b.n	34003ef0 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34003f94:	2b01      	cmp	r3, #1
34003f96:	d1a3      	bne.n	34003ee0 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34003f98:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34003f9c:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34003f9e:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34003fa0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
34003fa4:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34003fa6:	4b0e      	ldr	r3, [pc, #56]	@ (34003fe0 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34003fa8:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 34003fec <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34003fac:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
34003fae:	f7fe f8a9 	bl	34002104 <HAL_GetTick>
34003fb2:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34003fb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
34003fb8:	ea35 0303 	bics.w	r3, r5, r3
34003fbc:	d003      	beq.n	34003fc6 <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34003fbe:	59e3      	ldr	r3, [r4, r7]
34003fc0:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34003fc4:	e7cf      	b.n	34003f66 <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34003fc6:	f7fe f89d 	bl	34002104 <HAL_GetTick>
34003fca:	1b80      	subs	r0, r0, r6
34003fcc:	2801      	cmp	r0, #1
34003fce:	d9f1      	bls.n	34003fb4 <RCC_PLL_Config+0x1fc>
34003fd0:	e78e      	b.n	34003ef0 <RCC_PLL_Config+0x138>
34003fd2:	bf00      	nop
34003fd4:	56028080 	.word	0x56028080
34003fd8:	56028088 	.word	0x56028088
34003fdc:	3400eeb6 	.word	0x3400eeb6
34003fe0:	56029000 	.word	0x56029000
34003fe4:	56028084 	.word	0x56028084
34003fe8:	8c0000ff 	.word	0x8c0000ff
34003fec:	56028000 	.word	0x56028000

34003ff0 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34003ff0:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34003ff4:	b508      	push	{r3, lr}
  switch (PLLSource1)
34003ff6:	d021      	beq.n	3400403c <RCC_IC_CheckPLLSources+0x4c>
34003ff8:	d805      	bhi.n	34004006 <RCC_IC_CheckPLLSources+0x16>
34003ffa:	b9c0      	cbnz	r0, 3400402e <RCC_IC_CheckPLLSources+0x3e>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34003ffc:	f7ff fe7a 	bl	34003cf4 <LL_RCC_PLL1_IsReady>
34004000:	b178      	cbz	r0, 34004022 <RCC_IC_CheckPLLSources+0x32>
  uint32_t ret = 1U;
34004002:	2201      	movs	r2, #1
34004004:	e003      	b.n	3400400e <RCC_IC_CheckPLLSources+0x1e>
  switch (PLLSource1)
34004006:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3400400a:	d01e      	beq.n	3400404a <RCC_IC_CheckPLLSources+0x5a>
3400400c:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
3400400e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
34004012:	d03c      	beq.n	3400408e <RCC_IC_CheckPLLSources+0x9e>
34004014:	d820      	bhi.n	34004058 <RCC_IC_CheckPLLSources+0x68>
34004016:	b349      	cbz	r1, 3400406c <RCC_IC_CheckPLLSources+0x7c>
34004018:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
3400401c:	d030      	beq.n	34004080 <RCC_IC_CheckPLLSources+0x90>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
3400401e:	2200      	movs	r2, #0
34004020:	e02c      	b.n	3400407c <RCC_IC_CheckPLLSources+0x8c>
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34004022:	4b1e      	ldr	r3, [pc, #120]	@ (3400409c <RCC_IC_CheckPLLSources+0xac>)
34004024:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34004028:	f3c2 62c0 	ubfx	r2, r2, #27, #1
3400402c:	e7ef      	b.n	3400400e <RCC_IC_CheckPLLSources+0x1e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400402e:	4b1b      	ldr	r3, [pc, #108]	@ (3400409c <RCC_IC_CheckPLLSources+0xac>)
34004030:	685a      	ldr	r2, [r3, #4]
34004032:	0592      	lsls	r2, r2, #22
34004034:	d4e5      	bmi.n	34004002 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34004036:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3400403a:	e7f5      	b.n	34004028 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3400403c:	4b17      	ldr	r3, [pc, #92]	@ (3400409c <RCC_IC_CheckPLLSources+0xac>)
3400403e:	685a      	ldr	r2, [r3, #4]
34004040:	0550      	lsls	r0, r2, #21
34004042:	d4de      	bmi.n	34004002 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34004044:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34004048:	e7ee      	b.n	34004028 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3400404a:	4b14      	ldr	r3, [pc, #80]	@ (3400409c <RCC_IC_CheckPLLSources+0xac>)
3400404c:	685a      	ldr	r2, [r3, #4]
3400404e:	0512      	lsls	r2, r2, #20
34004050:	d4d7      	bmi.n	34004002 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34004052:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34004056:	e7e7      	b.n	34004028 <RCC_IC_CheckPLLSources+0x38>
  switch (PLLSource2)
34004058:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
3400405c:	d1df      	bne.n	3400401e <RCC_IC_CheckPLLSources+0x2e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3400405e:	4b0f      	ldr	r3, [pc, #60]	@ (3400409c <RCC_IC_CheckPLLSources+0xac>)
34004060:	6859      	ldr	r1, [r3, #4]
34004062:	0509      	lsls	r1, r1, #20
34004064:	d40a      	bmi.n	3400407c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34004066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400406a:	e005      	b.n	34004078 <RCC_IC_CheckPLLSources+0x88>
      if (LL_RCC_PLL1_IsReady() == 0U)
3400406c:	f7ff fe42 	bl	34003cf4 <LL_RCC_PLL1_IsReady>
34004070:	b920      	cbnz	r0, 3400407c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34004072:	4b0a      	ldr	r3, [pc, #40]	@ (3400409c <RCC_IC_CheckPLLSources+0xac>)
34004074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004078:	0118      	lsls	r0, r3, #4
3400407a:	d5d0      	bpl.n	3400401e <RCC_IC_CheckPLLSources+0x2e>
      break;
  }

  return ret;
}
3400407c:	4610      	mov	r0, r2
3400407e:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004080:	4b06      	ldr	r3, [pc, #24]	@ (3400409c <RCC_IC_CheckPLLSources+0xac>)
34004082:	6859      	ldr	r1, [r3, #4]
34004084:	0589      	lsls	r1, r1, #22
34004086:	d4f9      	bmi.n	3400407c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400408c:	e7f4      	b.n	34004078 <RCC_IC_CheckPLLSources+0x88>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3400408e:	4b03      	ldr	r3, [pc, #12]	@ (3400409c <RCC_IC_CheckPLLSources+0xac>)
34004090:	6859      	ldr	r1, [r3, #4]
34004092:	0548      	lsls	r0, r1, #21
34004094:	d4f2      	bmi.n	3400407c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34004096:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400409a:	e7ed      	b.n	34004078 <RCC_IC_CheckPLLSources+0x88>
3400409c:	56028000 	.word	0x56028000

340040a0 <HAL_RCC_OscConfig>:
{
340040a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
340040a4:	4604      	mov	r4, r0
340040a6:	b918      	cbnz	r0, 340040b0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
340040a8:	2001      	movs	r0, #1
}
340040aa:	b003      	add	sp, #12
340040ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
340040b0:	6803      	ldr	r3, [r0, #0]
340040b2:	b133      	cbz	r3, 340040c2 <HAL_RCC_OscConfig+0x22>
340040b4:	06dd      	lsls	r5, r3, #27
340040b6:	d104      	bne.n	340040c2 <HAL_RCC_OscConfig+0x22>
340040b8:	f44f 71b9 	mov.w	r1, #370	@ 0x172
340040bc:	4893      	ldr	r0, [pc, #588]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
340040be:	f7fd f825 	bl	3400110c <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340040c2:	4b93      	ldr	r3, [pc, #588]	@ (34004310 <HAL_RCC_OscConfig+0x270>)
340040c4:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340040c6:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340040c8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340040cc:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340040d0:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340040d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340040d8:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340040dc:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
340040e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
340040e4:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
340040e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
340040ec:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
340040ee:	6823      	ldr	r3, [r4, #0]
340040f0:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
340040f4:	07d8      	lsls	r0, r3, #31
340040f6:	d463      	bmi.n	340041c0 <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
340040f8:	6823      	ldr	r3, [r4, #0]
340040fa:	0799      	lsls	r1, r3, #30
340040fc:	f100 80d4 	bmi.w	340042a8 <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34004100:	6823      	ldr	r3, [r4, #0]
34004102:	06d8      	lsls	r0, r3, #27
34004104:	d522      	bpl.n	3400414c <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
34004106:	69e3      	ldr	r3, [r4, #28]
34004108:	2b00      	cmp	r3, #0
3400410a:	f000 8347 	beq.w	3400479c <HAL_RCC_OscConfig+0x6fc>
3400410e:	2b04      	cmp	r3, #4
34004110:	f000 834d 	beq.w	340047ae <HAL_RCC_OscConfig+0x70e>
34004114:	f240 2105 	movw	r1, #517	@ 0x205
34004118:	487c      	ldr	r0, [pc, #496]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
3400411a:	f7fc fff7 	bl	3400110c <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3400411e:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004122:	f040 8148 	bne.w	340043b6 <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34004126:	69e3      	ldr	r3, [r4, #28]
34004128:	2b00      	cmp	r3, #0
3400412a:	d0bd      	beq.n	340040a8 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
3400412c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400412e:	2b1f      	cmp	r3, #31
34004130:	d904      	bls.n	3400413c <HAL_RCC_OscConfig+0x9c>
34004132:	f44f 7106 	mov.w	r1, #536	@ 0x218
34004136:	4875      	ldr	r0, [pc, #468]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
34004138:	f7fc ffe8 	bl	3400110c <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
3400413c:	4a74      	ldr	r2, [pc, #464]	@ (34004310 <HAL_RCC_OscConfig+0x270>)
3400413e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34004140:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34004142:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
34004146:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400414a:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
3400414c:	6823      	ldr	r3, [r4, #0]
3400414e:	0718      	lsls	r0, r3, #28
34004150:	f100 8189 	bmi.w	34004466 <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34004154:	6823      	ldr	r3, [r4, #0]
34004156:	0759      	lsls	r1, r3, #29
34004158:	f100 81b4 	bmi.w	340044c4 <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
3400415c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400415e:	2b03      	cmp	r3, #3
34004160:	d904      	bls.n	3400416c <HAL_RCC_OscConfig+0xcc>
34004162:	f240 21a5 	movw	r1, #677	@ 0x2a5
34004166:	4869      	ldr	r0, [pc, #420]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
34004168:	f7fc ffd0 	bl	3400110c <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
3400416c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3400416e:	2f00      	cmp	r7, #0
34004170:	f040 8210 	bne.w	34004594 <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34004174:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34004176:	2b03      	cmp	r3, #3
34004178:	d904      	bls.n	34004184 <HAL_RCC_OscConfig+0xe4>
3400417a:	f240 21d3 	movw	r1, #723	@ 0x2d3
3400417e:	4863      	ldr	r0, [pc, #396]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
34004180:	f7fc ffc4 	bl	3400110c <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34004184:	6c67      	ldr	r7, [r4, #68]	@ 0x44
34004186:	2f00      	cmp	r7, #0
34004188:	f040 8246 	bne.w	34004618 <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
3400418c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3400418e:	2b03      	cmp	r3, #3
34004190:	d904      	bls.n	3400419c <HAL_RCC_OscConfig+0xfc>
34004192:	f240 3101 	movw	r1, #769	@ 0x301
34004196:	485d      	ldr	r0, [pc, #372]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
34004198:	f7fc ffb8 	bl	3400110c <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
3400419c:	6e27      	ldr	r7, [r4, #96]	@ 0x60
3400419e:	2f00      	cmp	r7, #0
340041a0:	f040 827a 	bne.w	34004698 <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
340041a4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340041a6:	2b03      	cmp	r3, #3
340041a8:	d904      	bls.n	340041b4 <HAL_RCC_OscConfig+0x114>
340041aa:	f240 312e 	movw	r1, #814	@ 0x32e
340041ae:	4857      	ldr	r0, [pc, #348]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
340041b0:	f7fc ffac 	bl	3400110c <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
340041b4:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
340041b6:	2f00      	cmp	r7, #0
340041b8:	f040 82b0 	bne.w	3400471c <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
340041bc:	2000      	movs	r0, #0
340041be:	e774      	b.n	340040aa <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
340041c0:	6863      	ldr	r3, [r4, #4]
340041c2:	2b00      	cmp	r3, #0
340041c4:	f000 8313 	beq.w	340047ee <HAL_RCC_OscConfig+0x74e>
340041c8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
340041cc:	2a10      	cmp	r2, #16
340041ce:	f000 8305 	beq.w	340047dc <HAL_RCC_OscConfig+0x73c>
340041d2:	4a50      	ldr	r2, [pc, #320]	@ (34004314 <HAL_RCC_OscConfig+0x274>)
340041d4:	4293      	cmp	r3, r2
340041d6:	f000 8301 	beq.w	340047dc <HAL_RCC_OscConfig+0x73c>
340041da:	f44f 71c0 	mov.w	r1, #384	@ 0x180
340041de:	484b      	ldr	r0, [pc, #300]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
340041e0:	f7fc ff94 	bl	3400110c <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340041e4:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
340041e8:	d103      	bne.n	340041f2 <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
340041ea:	6863      	ldr	r3, [r4, #4]
340041ec:	2b00      	cmp	r3, #0
340041ee:	d183      	bne.n	340040f8 <HAL_RCC_OscConfig+0x58>
340041f0:	e75a      	b.n	340040a8 <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340041f2:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
340041f6:	d0f8      	beq.n	340041ea <HAL_RCC_OscConfig+0x14a>
340041f8:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
340041fc:	d101      	bne.n	34004202 <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340041fe:	05fa      	lsls	r2, r7, #23
34004200:	d4f3      	bmi.n	340041ea <HAL_RCC_OscConfig+0x14a>
34004202:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
34004206:	d101      	bne.n	3400420c <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004208:	05bb      	lsls	r3, r7, #22
3400420a:	d4ee      	bmi.n	340041ea <HAL_RCC_OscConfig+0x14a>
3400420c:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
34004210:	d101      	bne.n	34004216 <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34004212:	0578      	lsls	r0, r7, #21
34004214:	d4e9      	bmi.n	340041ea <HAL_RCC_OscConfig+0x14a>
34004216:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
3400421a:	d101      	bne.n	34004220 <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3400421c:	0539      	lsls	r1, r7, #20
3400421e:	d4e4      	bmi.n	340041ea <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34004220:	6862      	ldr	r2, [r4, #4]
34004222:	4b3b      	ldr	r3, [pc, #236]	@ (34004310 <HAL_RCC_OscConfig+0x270>)
34004224:	2a10      	cmp	r2, #16
34004226:	d114      	bne.n	34004252 <HAL_RCC_OscConfig+0x1b2>
34004228:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
3400422c:	f7fd ff6a 	bl	34002104 <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34004230:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
34004232:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34004234:	b35b      	cbz	r3, 3400428e <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34004236:	4b36      	ldr	r3, [pc, #216]	@ (34004310 <HAL_RCC_OscConfig+0x270>)
34004238:	685a      	ldr	r2, [r3, #4]
3400423a:	06d2      	lsls	r2, r2, #27
3400423c:	f53f af5c 	bmi.w	340040f8 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34004240:	f7fd ff60 	bl	34002104 <HAL_GetTick>
34004244:	9b01      	ldr	r3, [sp, #4]
34004246:	1ac0      	subs	r0, r0, r3
34004248:	2864      	cmp	r0, #100	@ 0x64
3400424a:	4b31      	ldr	r3, [pc, #196]	@ (34004310 <HAL_RCC_OscConfig+0x270>)
3400424c:	d9f4      	bls.n	34004238 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
3400424e:	2003      	movs	r0, #3
34004250:	e72b      	b.n	340040aa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34004252:	b93a      	cbnz	r2, 34004264 <HAL_RCC_OscConfig+0x1c4>
34004254:	2110      	movs	r1, #16
34004256:	4a30      	ldr	r2, [pc, #192]	@ (34004318 <HAL_RCC_OscConfig+0x278>)
34004258:	6011      	str	r1, [r2, #0]
3400425a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3400425c:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
34004260:	655a      	str	r2, [r3, #84]	@ 0x54
34004262:	e7e3      	b.n	3400422c <HAL_RCC_OscConfig+0x18c>
34004264:	f248 0110 	movw	r1, #32784	@ 0x8010
34004268:	428a      	cmp	r2, r1
3400426a:	d109      	bne.n	34004280 <HAL_RCC_OscConfig+0x1e0>
3400426c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3400426e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34004272:	655a      	str	r2, [r3, #84]	@ 0x54
34004274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004276:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
3400427a:	655a      	str	r2, [r3, #84]	@ 0x54
3400427c:	2210      	movs	r2, #16
3400427e:	e7d3      	b.n	34004228 <HAL_RCC_OscConfig+0x188>
34004280:	4924      	ldr	r1, [pc, #144]	@ (34004314 <HAL_RCC_OscConfig+0x274>)
34004282:	428a      	cmp	r2, r1
34004284:	d1e6      	bne.n	34004254 <HAL_RCC_OscConfig+0x1b4>
34004286:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004288:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
3400428c:	e7f5      	b.n	3400427a <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
3400428e:	4b20      	ldr	r3, [pc, #128]	@ (34004310 <HAL_RCC_OscConfig+0x270>)
34004290:	685a      	ldr	r2, [r3, #4]
34004292:	06d3      	lsls	r3, r2, #27
34004294:	f57f af30 	bpl.w	340040f8 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34004298:	f7fd ff34 	bl	34002104 <HAL_GetTick>
3400429c:	9b01      	ldr	r3, [sp, #4]
3400429e:	1ac0      	subs	r0, r0, r3
340042a0:	2864      	cmp	r0, #100	@ 0x64
340042a2:	4b1b      	ldr	r3, [pc, #108]	@ (34004310 <HAL_RCC_OscConfig+0x270>)
340042a4:	d9f4      	bls.n	34004290 <HAL_RCC_OscConfig+0x1f0>
340042a6:	e7d2      	b.n	3400424e <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
340042a8:	68e3      	ldr	r3, [r4, #12]
340042aa:	2b00      	cmp	r3, #0
340042ac:	f000 8288 	beq.w	340047c0 <HAL_RCC_OscConfig+0x720>
340042b0:	2b08      	cmp	r3, #8
340042b2:	f000 828c 	beq.w	340047ce <HAL_RCC_OscConfig+0x72e>
340042b6:	f240 11b5 	movw	r1, #437	@ 0x1b5
340042ba:	4814      	ldr	r0, [pc, #80]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
340042bc:	f7fc ff26 	bl	3400110c <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340042c0:	bb66      	cbnz	r6, 3400431c <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
340042c2:	68e3      	ldr	r3, [r4, #12]
340042c4:	2b00      	cmp	r3, #0
340042c6:	f43f aeef 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
340042ca:	6923      	ldr	r3, [r4, #16]
340042cc:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
340042d0:	d004      	beq.n	340042dc <HAL_RCC_OscConfig+0x23c>
340042d2:	f240 11c7 	movw	r1, #455	@ 0x1c7
340042d6:	480d      	ldr	r0, [pc, #52]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
340042d8:	f7fc ff18 	bl	3400110c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
340042dc:	6963      	ldr	r3, [r4, #20]
340042de:	2b7f      	cmp	r3, #127	@ 0x7f
340042e0:	d904      	bls.n	340042ec <HAL_RCC_OscConfig+0x24c>
340042e2:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
340042e6:	4809      	ldr	r0, [pc, #36]	@ (3400430c <HAL_RCC_OscConfig+0x26c>)
340042e8:	f7fc ff10 	bl	3400110c <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
340042ec:	4a08      	ldr	r2, [pc, #32]	@ (34004310 <HAL_RCC_OscConfig+0x270>)
340042ee:	6921      	ldr	r1, [r4, #16]
340042f0:	6c93      	ldr	r3, [r2, #72]	@ 0x48
340042f2:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
340042f6:	430b      	orrs	r3, r1
340042f8:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
340042fa:	6c93      	ldr	r3, [r2, #72]	@ 0x48
340042fc:	6961      	ldr	r1, [r4, #20]
340042fe:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
34004302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004306:	6493      	str	r3, [r2, #72]	@ 0x48
}
34004308:	e6fa      	b.n	34004100 <HAL_RCC_OscConfig+0x60>
3400430a:	bf00      	nop
3400430c:	3400eeb6 	.word	0x3400eeb6
34004310:	56028000 	.word	0x56028000
34004314:	00018010 	.word	0x00018010
34004318:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
3400431c:	2d00      	cmp	r5, #0
3400431e:	d0d0      	beq.n	340042c2 <HAL_RCC_OscConfig+0x222>
34004320:	f1bb 0f00 	cmp.w	fp, #0
34004324:	d101      	bne.n	3400432a <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34004326:	05f8      	lsls	r0, r7, #23
34004328:	d4cb      	bmi.n	340042c2 <HAL_RCC_OscConfig+0x222>
3400432a:	f1ba 0f00 	cmp.w	sl, #0
3400432e:	d101      	bne.n	34004334 <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004330:	05b9      	lsls	r1, r7, #22
34004332:	d4c6      	bmi.n	340042c2 <HAL_RCC_OscConfig+0x222>
34004334:	f1b9 0f00 	cmp.w	r9, #0
34004338:	d101      	bne.n	3400433e <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3400433a:	057a      	lsls	r2, r7, #21
3400433c:	d4c1      	bmi.n	340042c2 <HAL_RCC_OscConfig+0x222>
3400433e:	f1b8 0f00 	cmp.w	r8, #0
34004342:	d101      	bne.n	34004348 <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34004344:	053b      	lsls	r3, r7, #20
34004346:	d4bc      	bmi.n	340042c2 <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34004348:	68e3      	ldr	r3, [r4, #12]
3400434a:	b313      	cbz	r3, 34004392 <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
3400434c:	6923      	ldr	r3, [r4, #16]
3400434e:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
34004352:	d004      	beq.n	3400435e <HAL_RCC_OscConfig+0x2be>
34004354:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34004358:	48ab      	ldr	r0, [pc, #684]	@ (34004608 <HAL_RCC_OscConfig+0x568>)
3400435a:	f7fc fed7 	bl	3400110c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
3400435e:	6963      	ldr	r3, [r4, #20]
34004360:	2b7f      	cmp	r3, #127	@ 0x7f
34004362:	d904      	bls.n	3400436e <HAL_RCC_OscConfig+0x2ce>
34004364:	f240 11d7 	movw	r1, #471	@ 0x1d7
34004368:	48a7      	ldr	r0, [pc, #668]	@ (34004608 <HAL_RCC_OscConfig+0x568>)
3400436a:	f7fc fecf 	bl	3400110c <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
3400436e:	2208      	movs	r2, #8
34004370:	4ba6      	ldr	r3, [pc, #664]	@ (3400460c <HAL_RCC_OscConfig+0x56c>)
34004372:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34004376:	f7fd fec5 	bl	34002104 <HAL_GetTick>
3400437a:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
3400437c:	f7ff fcaa 	bl	34003cd4 <LL_RCC_HSI_IsReady>
34004380:	2800      	cmp	r0, #0
34004382:	d1b3      	bne.n	340042ec <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34004384:	f7fd febe 	bl	34002104 <HAL_GetTick>
34004388:	9b01      	ldr	r3, [sp, #4]
3400438a:	1ac0      	subs	r0, r0, r3
3400438c:	2801      	cmp	r0, #1
3400438e:	d9f5      	bls.n	3400437c <HAL_RCC_OscConfig+0x2dc>
34004390:	e75d      	b.n	3400424e <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34004392:	2208      	movs	r2, #8
34004394:	4b9e      	ldr	r3, [pc, #632]	@ (34004610 <HAL_RCC_OscConfig+0x570>)
34004396:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34004398:	f7fd feb4 	bl	34002104 <HAL_GetTick>
3400439c:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
3400439e:	f7ff fc99 	bl	34003cd4 <LL_RCC_HSI_IsReady>
340043a2:	2800      	cmp	r0, #0
340043a4:	f43f aeac 	beq.w	34004100 <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
340043a8:	f7fd feac 	bl	34002104 <HAL_GetTick>
340043ac:	9b01      	ldr	r3, [sp, #4]
340043ae:	1ac0      	subs	r0, r0, r3
340043b0:	2801      	cmp	r0, #1
340043b2:	d9f4      	bls.n	3400439e <HAL_RCC_OscConfig+0x2fe>
340043b4:	e74b      	b.n	3400424e <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340043b6:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340043ba:	f43f aeb4 	beq.w	34004126 <HAL_RCC_OscConfig+0x86>
340043be:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
340043c2:	d102      	bne.n	340043ca <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340043c4:	05f9      	lsls	r1, r7, #23
340043c6:	f53f aeae 	bmi.w	34004126 <HAL_RCC_OscConfig+0x86>
340043ca:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
340043ce:	d102      	bne.n	340043d6 <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340043d0:	05ba      	lsls	r2, r7, #22
340043d2:	f53f aea8 	bmi.w	34004126 <HAL_RCC_OscConfig+0x86>
340043d6:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
340043da:	d102      	bne.n	340043e2 <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340043dc:	057b      	lsls	r3, r7, #21
340043de:	f53f aea2 	bmi.w	34004126 <HAL_RCC_OscConfig+0x86>
340043e2:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
340043e6:	d102      	bne.n	340043ee <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340043e8:	053f      	lsls	r7, r7, #20
340043ea:	f53f ae9c 	bmi.w	34004126 <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
340043ee:	69e3      	ldr	r3, [r4, #28]
340043f0:	b343      	cbz	r3, 34004444 <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
340043f2:	6a23      	ldr	r3, [r4, #32]
340043f4:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
340043f8:	d004      	beq.n	34004404 <HAL_RCC_OscConfig+0x364>
340043fa:	f44f 7109 	mov.w	r1, #548	@ 0x224
340043fe:	4882      	ldr	r0, [pc, #520]	@ (34004608 <HAL_RCC_OscConfig+0x568>)
34004400:	f7fc fe84 	bl	3400110c <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34004404:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004406:	2b1f      	cmp	r3, #31
34004408:	d904      	bls.n	34004414 <HAL_RCC_OscConfig+0x374>
3400440a:	f240 2125 	movw	r1, #549	@ 0x225
3400440e:	487e      	ldr	r0, [pc, #504]	@ (34004608 <HAL_RCC_OscConfig+0x568>)
34004410:	f7fc fe7c 	bl	3400110c <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34004414:	4a7d      	ldr	r2, [pc, #500]	@ (3400460c <HAL_RCC_OscConfig+0x56c>)
34004416:	6a21      	ldr	r1, [r4, #32]
34004418:	6c53      	ldr	r3, [r2, #68]	@ 0x44
3400441a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
3400441e:	430b      	orrs	r3, r1
34004420:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34004422:	2304      	movs	r3, #4
34004424:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34004428:	f7fd fe6c 	bl	34002104 <HAL_GetTick>
3400442c:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
3400442e:	f7ff fc59 	bl	34003ce4 <LL_RCC_MSI_IsReady>
34004432:	2800      	cmp	r0, #0
34004434:	f47f ae82 	bne.w	3400413c <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34004438:	f7fd fe64 	bl	34002104 <HAL_GetTick>
3400443c:	1bc0      	subs	r0, r0, r7
3400443e:	2801      	cmp	r0, #1
34004440:	d9f5      	bls.n	3400442e <HAL_RCC_OscConfig+0x38e>
34004442:	e704      	b.n	3400424e <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34004444:	2204      	movs	r2, #4
34004446:	4b72      	ldr	r3, [pc, #456]	@ (34004610 <HAL_RCC_OscConfig+0x570>)
34004448:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
3400444a:	f7fd fe5b 	bl	34002104 <HAL_GetTick>
3400444e:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
34004450:	f7ff fc48 	bl	34003ce4 <LL_RCC_MSI_IsReady>
34004454:	2800      	cmp	r0, #0
34004456:	f43f ae79 	beq.w	3400414c <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3400445a:	f7fd fe53 	bl	34002104 <HAL_GetTick>
3400445e:	1bc0      	subs	r0, r0, r7
34004460:	2801      	cmp	r0, #1
34004462:	d9f5      	bls.n	34004450 <HAL_RCC_OscConfig+0x3b0>
34004464:	e6f3      	b.n	3400424e <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34004466:	69a3      	ldr	r3, [r4, #24]
34004468:	2b01      	cmp	r3, #1
3400446a:	d904      	bls.n	34004476 <HAL_RCC_OscConfig+0x3d6>
3400446c:	f240 2155 	movw	r1, #597	@ 0x255
34004470:	4865      	ldr	r0, [pc, #404]	@ (34004608 <HAL_RCC_OscConfig+0x568>)
34004472:	f7fc fe4b 	bl	3400110c <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34004476:	69a2      	ldr	r2, [r4, #24]
34004478:	2301      	movs	r3, #1
3400447a:	b18a      	cbz	r2, 340044a0 <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
3400447c:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 3400460c <HAL_RCC_OscConfig+0x56c>
34004480:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004484:	f7fd fe3e 	bl	34002104 <HAL_GetTick>
34004488:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3400448a:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
3400448e:	07da      	lsls	r2, r3, #31
34004490:	f53f ae60 	bmi.w	34004154 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34004494:	f7fd fe36 	bl	34002104 <HAL_GetTick>
34004498:	1bc0      	subs	r0, r0, r7
3400449a:	2801      	cmp	r0, #1
3400449c:	d9f5      	bls.n	3400448a <HAL_RCC_OscConfig+0x3ea>
3400449e:	e6d6      	b.n	3400424e <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340044a0:	4a5b      	ldr	r2, [pc, #364]	@ (34004610 <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340044a2:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 3400460c <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340044a6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
340044a8:	f7fd fe2c 	bl	34002104 <HAL_GetTick>
340044ac:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340044ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
340044b2:	07db      	lsls	r3, r3, #31
340044b4:	f57f ae4e 	bpl.w	34004154 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
340044b8:	f7fd fe24 	bl	34002104 <HAL_GetTick>
340044bc:	1bc0      	subs	r0, r0, r7
340044be:	2801      	cmp	r0, #1
340044c0:	d9f5      	bls.n	340044ae <HAL_RCC_OscConfig+0x40e>
340044c2:	e6c4      	b.n	3400424e <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
340044c4:	68a3      	ldr	r3, [r4, #8]
340044c6:	f033 0202 	bics.w	r2, r3, #2
340044ca:	d00a      	beq.n	340044e2 <HAL_RCC_OscConfig+0x442>
340044cc:	f248 0202 	movw	r2, #32770	@ 0x8002
340044d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340044d4:	4293      	cmp	r3, r2
340044d6:	d004      	beq.n	340044e2 <HAL_RCC_OscConfig+0x442>
340044d8:	f44f 7120 	mov.w	r1, #640	@ 0x280
340044dc:	484a      	ldr	r0, [pc, #296]	@ (34004608 <HAL_RCC_OscConfig+0x568>)
340044de:	f7fc fe15 	bl	3400110c <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
340044e2:	68a3      	ldr	r3, [r4, #8]
340044e4:	4f49      	ldr	r7, [pc, #292]	@ (3400460c <HAL_RCC_OscConfig+0x56c>)
340044e6:	2b02      	cmp	r3, #2
340044e8:	d113      	bne.n	34004512 <HAL_RCC_OscConfig+0x472>
340044ea:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
340044ee:	f7fd fe09 	bl	34002104 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340044f2:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
340044f6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
340044f8:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 3400460c <HAL_RCC_OscConfig+0x56c>
340044fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
34004500:	0798      	lsls	r0, r3, #30
34004502:	f53f ae2b 	bmi.w	3400415c <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004506:	f7fd fdfd 	bl	34002104 <HAL_GetTick>
3400450a:	1bc3      	subs	r3, r0, r7
3400450c:	4543      	cmp	r3, r8
3400450e:	d9f5      	bls.n	340044fc <HAL_RCC_OscConfig+0x45c>
34004510:	e69d      	b.n	3400424e <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004512:	b9d3      	cbnz	r3, 3400454a <HAL_RCC_OscConfig+0x4aa>
34004514:	2202      	movs	r2, #2
34004516:	4b3e      	ldr	r3, [pc, #248]	@ (34004610 <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004518:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3400451c:	601a      	str	r2, [r3, #0]
3400451e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004524:	643b      	str	r3, [r7, #64]	@ 0x40
34004526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004528:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3400452c:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
3400452e:	f7fd fde9 	bl	34002104 <HAL_GetTick>
34004532:	4680      	mov	r8, r0
34004534:	687b      	ldr	r3, [r7, #4]
34004536:	0799      	lsls	r1, r3, #30
34004538:	f57f ae10 	bpl.w	3400415c <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400453c:	f7fd fde2 	bl	34002104 <HAL_GetTick>
34004540:	eba0 0308 	sub.w	r3, r0, r8
34004544:	454b      	cmp	r3, r9
34004546:	d9f5      	bls.n	34004534 <HAL_RCC_OscConfig+0x494>
34004548:	e681      	b.n	3400424e <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3400454a:	f248 0202 	movw	r2, #32770	@ 0x8002
3400454e:	4293      	cmp	r3, r2
34004550:	d109      	bne.n	34004566 <HAL_RCC_OscConfig+0x4c6>
34004552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34004558:	643b      	str	r3, [r7, #64]	@ 0x40
3400455a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400455c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004560:	643b      	str	r3, [r7, #64]	@ 0x40
34004562:	2302      	movs	r3, #2
34004564:	e7c1      	b.n	340044ea <HAL_RCC_OscConfig+0x44a>
34004566:	4a2b      	ldr	r2, [pc, #172]	@ (34004614 <HAL_RCC_OscConfig+0x574>)
34004568:	4293      	cmp	r3, r2
3400456a:	d107      	bne.n	3400457c <HAL_RCC_OscConfig+0x4dc>
3400456c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400456e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34004572:	643b      	str	r3, [r7, #64]	@ 0x40
34004574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3400457a:	e7f1      	b.n	34004560 <HAL_RCC_OscConfig+0x4c0>
3400457c:	2202      	movs	r2, #2
3400457e:	4b24      	ldr	r3, [pc, #144]	@ (34004610 <HAL_RCC_OscConfig+0x570>)
34004580:	601a      	str	r2, [r3, #0]
34004582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004584:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34004588:	643b      	str	r3, [r7, #64]	@ 0x40
3400458a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400458c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004590:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34004592:	e7ac      	b.n	340044ee <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34004594:	2000      	movs	r0, #0
34004596:	f104 0128 	add.w	r1, r4, #40	@ 0x28
3400459a:	f7ff fbb3 	bl	34003d04 <RCC_PLL_IsNewConfig>
3400459e:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
340045a0:	f7ff fba8 	bl	34003cf4 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
340045a4:	2a01      	cmp	r2, #1
340045a6:	d125      	bne.n	340045f4 <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340045a8:	4b18      	ldr	r3, [pc, #96]	@ (3400460c <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
340045aa:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
340045ae:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340045b2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340045b6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340045ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340045be:	d103      	bne.n	340045c8 <HAL_RCC_OscConfig+0x528>
340045c0:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
340045c4:	f43f ad70 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
340045c8:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
340045cc:	d10b      	bne.n	340045e6 <HAL_RCC_OscConfig+0x546>
340045ce:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
340045d2:	f43f ad69 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
340045d6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
340045da:	f43f ad65 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
340045de:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
340045e2:	f43f ad61 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
340045e6:	2000      	movs	r0, #0
340045e8:	f7ff fbe6 	bl	34003db8 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
340045ec:	2800      	cmp	r0, #0
340045ee:	f43f adc1 	beq.w	34004174 <HAL_RCC_OscConfig+0xd4>
340045f2:	e559      	b.n	340040a8 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
340045f4:	2f02      	cmp	r7, #2
340045f6:	f47f adbd 	bne.w	34004174 <HAL_RCC_OscConfig+0xd4>
340045fa:	2800      	cmp	r0, #0
340045fc:	f47f adba 	bne.w	34004174 <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34004600:	f7ff fbc2 	bl	34003d88 <RCC_PLL_Enable>
34004604:	e7f2      	b.n	340045ec <HAL_RCC_OscConfig+0x54c>
34004606:	bf00      	nop
34004608:	3400eeb6 	.word	0x3400eeb6
3400460c:	56028000 	.word	0x56028000
34004610:	56029000 	.word	0x56029000
34004614:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34004618:	2001      	movs	r0, #1
3400461a:	f104 0144 	add.w	r1, r4, #68	@ 0x44
3400461e:	f7ff fb71 	bl	34003d04 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004622:	4b77      	ldr	r3, [pc, #476]	@ (34004800 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004624:	2801      	cmp	r0, #1
34004626:	685a      	ldr	r2, [r3, #4]
34004628:	d12c      	bne.n	34004684 <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
3400462a:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400462e:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004632:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004636:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400463a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400463e:	d105      	bne.n	3400464c <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004640:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34004644:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34004648:	f43f ad2e 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
3400464c:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004650:	d111      	bne.n	34004676 <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004652:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004656:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
3400465a:	f43f ad25 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400465e:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004662:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34004666:	f43f ad1f 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400466a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
3400466e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004672:	f43f ad19 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34004676:	2001      	movs	r0, #1
34004678:	f7ff fb9e 	bl	34003db8 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
3400467c:	2800      	cmp	r0, #0
3400467e:	f43f ad85 	beq.w	3400418c <HAL_RCC_OscConfig+0xec>
34004682:	e511      	b.n	340040a8 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34004684:	2f02      	cmp	r7, #2
34004686:	f47f ad81 	bne.w	3400418c <HAL_RCC_OscConfig+0xec>
3400468a:	0592      	lsls	r2, r2, #22
3400468c:	f53f ad7e 	bmi.w	3400418c <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004690:	2001      	movs	r0, #1
34004692:	f7ff fb79 	bl	34003d88 <RCC_PLL_Enable>
34004696:	e7f1      	b.n	3400467c <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34004698:	2002      	movs	r0, #2
3400469a:	f104 0160 	add.w	r1, r4, #96	@ 0x60
3400469e:	f7ff fb31 	bl	34003d04 <RCC_PLL_IsNewConfig>
340046a2:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
340046a4:	f7ff fb26 	bl	34003cf4 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
340046a8:	2a01      	cmp	r2, #1
340046aa:	d12d      	bne.n	34004708 <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340046ac:	4b54      	ldr	r3, [pc, #336]	@ (34004800 <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
340046ae:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
340046b2:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340046b6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340046ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340046be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340046c2:	d105      	bne.n	340046d0 <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340046c4:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
340046c8:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
340046cc:	f43f acec 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
340046d0:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
340046d4:	d111      	bne.n	340046fa <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340046d6:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340046da:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
340046de:	f43f ace3 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340046e2:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
340046e6:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
340046ea:	f43f acdd 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340046ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
340046f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340046f6:	f43f acd7 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
340046fa:	2002      	movs	r0, #2
340046fc:	f7ff fb5c 	bl	34003db8 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34004700:	2800      	cmp	r0, #0
34004702:	f43f ad4f 	beq.w	340041a4 <HAL_RCC_OscConfig+0x104>
34004706:	e4cf      	b.n	340040a8 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34004708:	2f02      	cmp	r7, #2
3400470a:	f47f ad4b 	bne.w	340041a4 <HAL_RCC_OscConfig+0x104>
3400470e:	2800      	cmp	r0, #0
34004710:	f47f ad48 	bne.w	340041a4 <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34004714:	4638      	mov	r0, r7
34004716:	f7ff fb37 	bl	34003d88 <RCC_PLL_Enable>
3400471a:	e7f1      	b.n	34004700 <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
3400471c:	2003      	movs	r0, #3
3400471e:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
34004722:	f7ff faef 	bl	34003d04 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004726:	4b36      	ldr	r3, [pc, #216]	@ (34004800 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004728:	2801      	cmp	r0, #1
3400472a:	685a      	ldr	r2, [r3, #4]
3400472c:	d12c      	bne.n	34004788 <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
3400472e:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004732:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004736:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400473a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400473e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004742:	d105      	bne.n	34004750 <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004744:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34004748:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
3400474c:	f43f acac 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004750:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004754:	d111      	bne.n	3400477a <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004756:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
3400475a:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3400475e:	f43f aca3 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004762:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004766:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
3400476a:	f43f ac9d 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400476e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004772:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004776:	f43f ac97 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
3400477a:	2003      	movs	r0, #3
3400477c:	f7ff fb1c 	bl	34003db8 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004780:	3800      	subs	r0, #0
34004782:	bf18      	it	ne
34004784:	2001      	movne	r0, #1
34004786:	e490      	b.n	340040aa <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34004788:	2f02      	cmp	r7, #2
3400478a:	f47f ad17 	bne.w	340041bc <HAL_RCC_OscConfig+0x11c>
3400478e:	0513      	lsls	r3, r2, #20
34004790:	f53f ad14 	bmi.w	340041bc <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004794:	2003      	movs	r0, #3
34004796:	f7ff faf7 	bl	34003d88 <RCC_PLL_Enable>
3400479a:	e7f1      	b.n	34004780 <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3400479c:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
340047a0:	f43f ac82 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
340047a4:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340047a8:	f47f ae09 	bne.w	340043be <HAL_RCC_OscConfig+0x31e>
340047ac:	e47c      	b.n	340040a8 <HAL_RCC_OscConfig+0x8>
340047ae:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
340047b2:	f43f acbb 	beq.w	3400412c <HAL_RCC_OscConfig+0x8c>
340047b6:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340047ba:	f47f ae00 	bne.w	340043be <HAL_RCC_OscConfig+0x31e>
340047be:	e4b5      	b.n	3400412c <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340047c0:	2e00      	cmp	r6, #0
340047c2:	f43f ac71 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
340047c6:	2d00      	cmp	r5, #0
340047c8:	f47f adaa 	bne.w	34004320 <HAL_RCC_OscConfig+0x280>
340047cc:	e46c      	b.n	340040a8 <HAL_RCC_OscConfig+0x8>
340047ce:	2e00      	cmp	r6, #0
340047d0:	f43f ad7b 	beq.w	340042ca <HAL_RCC_OscConfig+0x22a>
340047d4:	2d00      	cmp	r5, #0
340047d6:	f43f ad78 	beq.w	340042ca <HAL_RCC_OscConfig+0x22a>
340047da:	e5a1      	b.n	34004320 <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340047dc:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
340047e0:	f43f ac8a 	beq.w	340040f8 <HAL_RCC_OscConfig+0x58>
340047e4:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
340047e8:	f47f ad06 	bne.w	340041f8 <HAL_RCC_OscConfig+0x158>
340047ec:	e484      	b.n	340040f8 <HAL_RCC_OscConfig+0x58>
340047ee:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
340047f2:	f43f ac59 	beq.w	340040a8 <HAL_RCC_OscConfig+0x8>
340047f6:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
340047fa:	f47f acfd 	bne.w	340041f8 <HAL_RCC_OscConfig+0x158>
340047fe:	e453      	b.n	340040a8 <HAL_RCC_OscConfig+0x8>
34004800:	56028000 	.word	0x56028000

34004804 <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004804:	4b1f      	ldr	r3, [pc, #124]	@ (34004884 <HAL_RCC_GetCpuClockFreq+0x80>)
{
34004806:	b510      	push	{r4, lr}
34004808:	6a1a      	ldr	r2, [r3, #32]
3400480a:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
3400480e:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34004812:	d034      	beq.n	3400487e <HAL_RCC_GetCpuClockFreq+0x7a>
34004814:	d806      	bhi.n	34004824 <HAL_RCC_GetCpuClockFreq+0x20>
34004816:	b952      	cbnz	r2, 3400482e <HAL_RCC_GetCpuClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400481a:	481b      	ldr	r0, [pc, #108]	@ (34004888 <HAL_RCC_GetCpuClockFreq+0x84>)
3400481c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004820:	40d8      	lsrs	r0, r3
}
34004822:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetCpuClkSource())
34004824:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34004828:	d009      	beq.n	3400483e <HAL_RCC_GetCpuClockFreq+0x3a>
      switch (LL_RCC_IC1_GetSource())
3400482a:	2000      	movs	r0, #0
3400482c:	e7f9      	b.n	34004822 <HAL_RCC_GetCpuClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400482e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34004830:	4816      	ldr	r0, [pc, #88]	@ (3400488c <HAL_RCC_GetCpuClockFreq+0x88>)
34004832:	f413 7f00 	tst.w	r3, #512	@ 0x200
34004836:	4b16      	ldr	r3, [pc, #88]	@ (34004890 <HAL_RCC_GetCpuClockFreq+0x8c>)
34004838:	bf08      	it	eq
3400483a:	4618      	moveq	r0, r3
3400483c:	e7f1      	b.n	34004822 <HAL_RCC_GetCpuClockFreq+0x1e>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
3400483e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004842:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004846:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400484a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC1_GetSource())
3400484e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004852:	f100 0401 	add.w	r4, r0, #1
34004856:	d00f      	beq.n	34004878 <HAL_RCC_GetCpuClockFreq+0x74>
34004858:	d805      	bhi.n	34004866 <HAL_RCC_GetCpuClockFreq+0x62>
3400485a:	b953      	cbnz	r3, 34004872 <HAL_RCC_GetCpuClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400485c:	f003 fbb6 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34004860:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34004864:	e7dd      	b.n	34004822 <HAL_RCC_GetCpuClockFreq+0x1e>
      switch (LL_RCC_IC1_GetSource())
34004866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400486a:	d1de      	bne.n	3400482a <HAL_RCC_GetCpuClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400486c:	f003 fc6e 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34004870:	e7f6      	b.n	34004860 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34004872:	f003 fbeb 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
34004876:	e7f3      	b.n	34004860 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34004878:	f003 fc28 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
3400487c:	e7f0      	b.n	34004860 <HAL_RCC_GetCpuClockFreq+0x5c>
  switch (LL_RCC_GetCpuClkSource())
3400487e:	4805      	ldr	r0, [pc, #20]	@ (34004894 <HAL_RCC_GetCpuClockFreq+0x90>)
34004880:	e7cf      	b.n	34004822 <HAL_RCC_GetCpuClockFreq+0x1e>
34004882:	bf00      	nop
34004884:	56028000 	.word	0x56028000
34004888:	03d09000 	.word	0x03d09000
3400488c:	00f42400 	.word	0x00f42400
34004890:	003d0900 	.word	0x003d0900
34004894:	02dc6c00 	.word	0x02dc6c00

34004898 <HAL_RCC_ClockConfig>:
{
34004898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
3400489c:	4604      	mov	r4, r0
3400489e:	b910      	cbnz	r0, 340048a6 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
340048a0:	2001      	movs	r0, #1
}
340048a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
340048a6:	6803      	ldr	r3, [r0, #0]
340048a8:	2b7f      	cmp	r3, #127	@ 0x7f
340048aa:	d904      	bls.n	340048b6 <HAL_RCC_ClockConfig+0x1e>
340048ac:	f240 317e 	movw	r1, #894	@ 0x37e
340048b0:	4893      	ldr	r0, [pc, #588]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
340048b2:	f7fc fc2b 	bl	3400110c <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
340048b6:	6823      	ldr	r3, [r4, #0]
340048b8:	071f      	lsls	r7, r3, #28
340048ba:	d513      	bpl.n	340048e4 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
340048bc:	6923      	ldr	r3, [r4, #16]
340048be:	2b07      	cmp	r3, #7
340048c0:	d904      	bls.n	340048cc <HAL_RCC_ClockConfig+0x34>
340048c2:	f240 3185 	movw	r1, #901	@ 0x385
340048c6:	488e      	ldr	r0, [pc, #568]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
340048c8:	f7fc fc20 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
340048cc:	4a8d      	ldr	r2, [pc, #564]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
340048ce:	6921      	ldr	r1, [r4, #16]
340048d0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340048d2:	f003 0307 	and.w	r3, r3, #7
340048d6:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
340048d8:	bf81      	itttt	hi
340048da:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
340048dc:	f023 0307 	bichi.w	r3, r3, #7
340048e0:	430b      	orrhi	r3, r1
340048e2:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
340048e4:	6823      	ldr	r3, [r4, #0]
340048e6:	06de      	lsls	r6, r3, #27
340048e8:	d516      	bpl.n	34004918 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
340048ea:	6963      	ldr	r3, [r4, #20]
340048ec:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340048f0:	d006      	beq.n	34004900 <HAL_RCC_ClockConfig+0x68>
340048f2:	2b40      	cmp	r3, #64	@ 0x40
340048f4:	d004      	beq.n	34004900 <HAL_RCC_ClockConfig+0x68>
340048f6:	f240 318f 	movw	r1, #911	@ 0x38f
340048fa:	4881      	ldr	r0, [pc, #516]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
340048fc:	f7fc fc06 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004900:	4a80      	ldr	r2, [pc, #512]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
34004902:	6961      	ldr	r1, [r4, #20]
34004904:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
3400490a:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
3400490c:	bf81      	itttt	hi
3400490e:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004910:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
34004914:	430b      	orrhi	r3, r1
34004916:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004918:	6823      	ldr	r3, [r4, #0]
3400491a:	069d      	lsls	r5, r3, #26
3400491c:	d517      	bpl.n	3400494e <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
3400491e:	69a3      	ldr	r3, [r4, #24]
34004920:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004924:	d007      	beq.n	34004936 <HAL_RCC_ClockConfig+0x9e>
34004926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3400492a:	d004      	beq.n	34004936 <HAL_RCC_ClockConfig+0x9e>
3400492c:	f240 3199 	movw	r1, #921	@ 0x399
34004930:	4873      	ldr	r0, [pc, #460]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
34004932:	f7fc fbeb 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004936:	4a73      	ldr	r2, [pc, #460]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
34004938:	69a1      	ldr	r1, [r4, #24]
3400493a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3400493c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004940:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004942:	bf81      	itttt	hi
34004944:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004946:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
3400494a:	430b      	orrhi	r3, r1
3400494c:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3400494e:	6823      	ldr	r3, [r4, #0]
34004950:	0658      	lsls	r0, r3, #25
34004952:	d517      	bpl.n	34004984 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004954:	69e3      	ldr	r3, [r4, #28]
34004956:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3400495a:	d007      	beq.n	3400496c <HAL_RCC_ClockConfig+0xd4>
3400495c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004960:	d004      	beq.n	3400496c <HAL_RCC_ClockConfig+0xd4>
34004962:	f240 31a3 	movw	r1, #931	@ 0x3a3
34004966:	4866      	ldr	r0, [pc, #408]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
34004968:	f7fc fbd0 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3400496c:	4a65      	ldr	r2, [pc, #404]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
3400496e:	69e1      	ldr	r1, [r4, #28]
34004970:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004972:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004976:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004978:	bf81      	itttt	hi
3400497a:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
3400497c:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
34004980:	430b      	orrhi	r3, r1
34004982:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004984:	6823      	ldr	r3, [r4, #0]
34004986:	0759      	lsls	r1, r3, #29
34004988:	d517      	bpl.n	340049ba <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
3400498a:	68e3      	ldr	r3, [r4, #12]
3400498c:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004990:	d007      	beq.n	340049a2 <HAL_RCC_ClockConfig+0x10a>
34004992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004996:	d004      	beq.n	340049a2 <HAL_RCC_ClockConfig+0x10a>
34004998:	f240 31ad 	movw	r1, #941	@ 0x3ad
3400499c:	4858      	ldr	r0, [pc, #352]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
3400499e:	f7fc fbb5 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
340049a2:	4a58      	ldr	r2, [pc, #352]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
340049a4:	68e1      	ldr	r1, [r4, #12]
340049a6:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340049a8:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
340049ac:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340049ae:	bf81      	itttt	hi
340049b0:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
340049b2:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
340049b6:	430b      	orrhi	r3, r1
340049b8:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
340049ba:	6823      	ldr	r3, [r4, #0]
340049bc:	07da      	lsls	r2, r3, #31
340049be:	d52a      	bpl.n	34004a16 <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
340049c0:	6863      	ldr	r3, [r4, #4]
340049c2:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340049c6:	d004      	beq.n	340049d2 <HAL_RCC_ClockConfig+0x13a>
340049c8:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
340049cc:	484c      	ldr	r0, [pc, #304]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
340049ce:	f7fc fb9d 	bl	3400110c <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
340049d2:	6863      	ldr	r3, [r4, #4]
340049d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340049d8:	f040 809a 	bne.w	34004b10 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340049dc:	4b49      	ldr	r3, [pc, #292]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
340049de:	685b      	ldr	r3, [r3, #4]
340049e0:	06db      	lsls	r3, r3, #27
340049e2:	f57f af5d 	bpl.w	340048a0 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
340049e6:	4d47      	ldr	r5, [pc, #284]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
340049e8:	6862      	ldr	r2, [r4, #4]
340049ea:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
340049ec:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
340049f0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340049f4:	4313      	orrs	r3, r2
340049f6:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
340049f8:	f7fd fb84 	bl	34002104 <HAL_GetTick>
340049fc:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340049fe:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34004a00:	6862      	ldr	r2, [r4, #4]
34004a02:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34004a06:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34004a0a:	f040 80b7 	bne.w	34004b7c <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34004a0e:	f7ff fef9 	bl	34004804 <HAL_RCC_GetCpuClockFreq>
34004a12:	4b3d      	ldr	r3, [pc, #244]	@ (34004b08 <HAL_RCC_ClockConfig+0x270>)
34004a14:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34004a16:	6823      	ldr	r3, [r4, #0]
34004a18:	079f      	lsls	r7, r3, #30
34004a1a:	f100 80b7 	bmi.w	34004b8c <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004a1e:	6823      	ldr	r3, [r4, #0]
34004a20:	075e      	lsls	r6, r3, #29
34004a22:	f100 815c 	bmi.w	34004cde <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004a26:	6823      	ldr	r3, [r4, #0]
34004a28:	0718      	lsls	r0, r3, #28
34004a2a:	d513      	bpl.n	34004a54 <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004a2c:	6923      	ldr	r3, [r4, #16]
34004a2e:	2b07      	cmp	r3, #7
34004a30:	d904      	bls.n	34004a3c <HAL_RCC_ClockConfig+0x1a4>
34004a32:	f240 4163 	movw	r1, #1123	@ 0x463
34004a36:	4832      	ldr	r0, [pc, #200]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
34004a38:	f7fc fb68 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004a3c:	4a31      	ldr	r2, [pc, #196]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
34004a3e:	6921      	ldr	r1, [r4, #16]
34004a40:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004a42:	f003 0307 	and.w	r3, r3, #7
34004a46:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004a48:	bf3f      	itttt	cc
34004a4a:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004a4c:	f023 0307 	biccc.w	r3, r3, #7
34004a50:	430b      	orrcc	r3, r1
34004a52:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004a54:	6823      	ldr	r3, [r4, #0]
34004a56:	06d9      	lsls	r1, r3, #27
34004a58:	d516      	bpl.n	34004a88 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004a5a:	6963      	ldr	r3, [r4, #20]
34004a5c:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004a60:	d006      	beq.n	34004a70 <HAL_RCC_ClockConfig+0x1d8>
34004a62:	2b40      	cmp	r3, #64	@ 0x40
34004a64:	d004      	beq.n	34004a70 <HAL_RCC_ClockConfig+0x1d8>
34004a66:	f240 416d 	movw	r1, #1133	@ 0x46d
34004a6a:	4825      	ldr	r0, [pc, #148]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
34004a6c:	f7fc fb4e 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004a70:	4a24      	ldr	r2, [pc, #144]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
34004a72:	6961      	ldr	r1, [r4, #20]
34004a74:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004a76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004a7a:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004a7c:	bf3f      	itttt	cc
34004a7e:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004a80:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
34004a84:	430b      	orrcc	r3, r1
34004a86:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004a88:	6823      	ldr	r3, [r4, #0]
34004a8a:	069a      	lsls	r2, r3, #26
34004a8c:	d517      	bpl.n	34004abe <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004a8e:	69a3      	ldr	r3, [r4, #24]
34004a90:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004a94:	d007      	beq.n	34004aa6 <HAL_RCC_ClockConfig+0x20e>
34004a96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004a9a:	d004      	beq.n	34004aa6 <HAL_RCC_ClockConfig+0x20e>
34004a9c:	f240 4177 	movw	r1, #1143	@ 0x477
34004aa0:	4817      	ldr	r0, [pc, #92]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
34004aa2:	f7fc fb33 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004aa6:	4a17      	ldr	r2, [pc, #92]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
34004aa8:	69a1      	ldr	r1, [r4, #24]
34004aaa:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004aac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004ab0:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004ab2:	bf3f      	itttt	cc
34004ab4:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004ab6:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
34004aba:	430b      	orrcc	r3, r1
34004abc:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004abe:	6823      	ldr	r3, [r4, #0]
34004ac0:	065b      	lsls	r3, r3, #25
34004ac2:	d517      	bpl.n	34004af4 <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004ac4:	69e3      	ldr	r3, [r4, #28]
34004ac6:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004aca:	d007      	beq.n	34004adc <HAL_RCC_ClockConfig+0x244>
34004acc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004ad0:	d004      	beq.n	34004adc <HAL_RCC_ClockConfig+0x244>
34004ad2:	f240 4181 	movw	r1, #1153	@ 0x481
34004ad6:	480a      	ldr	r0, [pc, #40]	@ (34004b00 <HAL_RCC_ClockConfig+0x268>)
34004ad8:	f7fc fb18 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004adc:	4a09      	ldr	r2, [pc, #36]	@ (34004b04 <HAL_RCC_ClockConfig+0x26c>)
34004ade:	69e1      	ldr	r1, [r4, #28]
34004ae0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004ae2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004ae6:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004ae8:	bf3f      	itttt	cc
34004aea:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004aec:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34004af0:	430b      	orrcc	r3, r1
34004af2:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34004af4:	4b05      	ldr	r3, [pc, #20]	@ (34004b0c <HAL_RCC_ClockConfig+0x274>)
}
34004af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
34004afa:	6818      	ldr	r0, [r3, #0]
34004afc:	f7fd babe 	b.w	3400207c <HAL_InitTick>
34004b00:	3400eeb6 	.word	0x3400eeb6
34004b04:	56028000 	.word	0x56028000
34004b08:	3400f9b4 	.word	0x3400f9b4
34004b0c:	3400f9bc 	.word	0x3400f9bc
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34004b10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34004b14:	d126      	bne.n	34004b64 <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34004b16:	6a23      	ldr	r3, [r4, #32]
34004b18:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004b1c:	d004      	beq.n	34004b28 <HAL_RCC_ClockConfig+0x290>
34004b1e:	f240 31c7 	movw	r1, #967	@ 0x3c7
34004b22:	487b      	ldr	r0, [pc, #492]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004b24:	f7fc faf2 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34004b28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004b2a:	3b01      	subs	r3, #1
34004b2c:	2bff      	cmp	r3, #255	@ 0xff
34004b2e:	d904      	bls.n	34004b3a <HAL_RCC_ClockConfig+0x2a2>
34004b30:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34004b34:	4876      	ldr	r0, [pc, #472]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004b36:	f7fc fae9 	bl	3400110c <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004b3a:	4e76      	ldr	r6, [pc, #472]	@ (34004d14 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34004b3c:	6a25      	ldr	r5, [r4, #32]
34004b3e:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
34004b42:	4629      	mov	r1, r5
34004b44:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004b48:	f7ff fa52 	bl	34003ff0 <RCC_IC_CheckPLLSources>
34004b4c:	2801      	cmp	r0, #1
34004b4e:	f47f aea7 	bne.w	340048a0 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34004b52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004b54:	3b01      	subs	r3, #1
34004b56:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
34004b5a:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34004b5e:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
34004b62:	e740      	b.n	340049e6 <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34004b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34004b68:	d105      	bne.n	34004b76 <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
34004b6a:	f7ff f8bb 	bl	34003ce4 <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
34004b6e:	2800      	cmp	r0, #0
34004b70:	f47f af39 	bne.w	340049e6 <HAL_RCC_ClockConfig+0x14e>
34004b74:	e694      	b.n	340048a0 <HAL_RCC_ClockConfig+0x8>
34004b76:	f7ff f8ad 	bl	34003cd4 <LL_RCC_HSI_IsReady>
34004b7a:	e7f8      	b.n	34004b6e <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004b7c:	f7fd fac2 	bl	34002104 <HAL_GetTick>
34004b80:	1b80      	subs	r0, r0, r6
34004b82:	42b8      	cmp	r0, r7
34004b84:	f67f af3b 	bls.w	340049fe <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
34004b88:	2003      	movs	r0, #3
34004b8a:	e68a      	b.n	340048a2 <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34004b8c:	68a3      	ldr	r3, [r4, #8]
34004b8e:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34004b92:	d004      	beq.n	34004b9e <HAL_RCC_ClockConfig+0x306>
34004b94:	f240 4101 	movw	r1, #1025	@ 0x401
34004b98:	485d      	ldr	r0, [pc, #372]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004b9a:	f7fc fab7 	bl	3400110c <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34004b9e:	68a3      	ldr	r3, [r4, #8]
34004ba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34004ba4:	d11e      	bne.n	34004be4 <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004ba6:	4b5b      	ldr	r3, [pc, #364]	@ (34004d14 <HAL_RCC_ClockConfig+0x47c>)
34004ba8:	685b      	ldr	r3, [r3, #4]
34004baa:	06dd      	lsls	r5, r3, #27
34004bac:	f57f ae78 	bpl.w	340048a0 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34004bb0:	4d58      	ldr	r5, [pc, #352]	@ (34004d14 <HAL_RCC_ClockConfig+0x47c>)
34004bb2:	68a2      	ldr	r2, [r4, #8]
34004bb4:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004bb6:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34004bba:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34004bbe:	4313      	orrs	r3, r2
34004bc0:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34004bc2:	f7fd fa9f 	bl	34002104 <HAL_GetTick>
34004bc6:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004bc8:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34004bca:	68a2      	ldr	r2, [r4, #8]
34004bcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34004bd0:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34004bd4:	f43f af23 	beq.w	34004a1e <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004bd8:	f7fd fa94 	bl	34002104 <HAL_GetTick>
34004bdc:	1b80      	subs	r0, r0, r6
34004bde:	42b8      	cmp	r0, r7
34004be0:	d9f2      	bls.n	34004bc8 <HAL_RCC_ClockConfig+0x330>
34004be2:	e7d1      	b.n	34004b88 <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34004be4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34004be8:	d16f      	bne.n	34004cca <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34004bea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34004bec:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004bf0:	d004      	beq.n	34004bfc <HAL_RCC_ClockConfig+0x364>
34004bf2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34004bf6:	4846      	ldr	r0, [pc, #280]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004bf8:	f7fc fa88 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34004bfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004bfe:	3b01      	subs	r3, #1
34004c00:	2bff      	cmp	r3, #255	@ 0xff
34004c02:	d904      	bls.n	34004c0e <HAL_RCC_ClockConfig+0x376>
34004c04:	f240 4111 	movw	r1, #1041	@ 0x411
34004c08:	4841      	ldr	r0, [pc, #260]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004c0a:	f7fc fa7f 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34004c0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34004c10:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004c14:	d004      	beq.n	34004c20 <HAL_RCC_ClockConfig+0x388>
34004c16:	f240 4112 	movw	r1, #1042	@ 0x412
34004c1a:	483d      	ldr	r0, [pc, #244]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004c1c:	f7fc fa76 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34004c20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34004c22:	3b01      	subs	r3, #1
34004c24:	2bff      	cmp	r3, #255	@ 0xff
34004c26:	d904      	bls.n	34004c32 <HAL_RCC_ClockConfig+0x39a>
34004c28:	f240 4113 	movw	r1, #1043	@ 0x413
34004c2c:	4838      	ldr	r0, [pc, #224]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004c2e:	f7fc fa6d 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
34004c32:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34004c34:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004c38:	d004      	beq.n	34004c44 <HAL_RCC_ClockConfig+0x3ac>
34004c3a:	f240 4114 	movw	r1, #1044	@ 0x414
34004c3e:	4834      	ldr	r0, [pc, #208]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004c40:	f7fc fa64 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34004c44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34004c46:	3b01      	subs	r3, #1
34004c48:	2bff      	cmp	r3, #255	@ 0xff
34004c4a:	d904      	bls.n	34004c56 <HAL_RCC_ClockConfig+0x3be>
34004c4c:	f240 4115 	movw	r1, #1045	@ 0x415
34004c50:	482f      	ldr	r0, [pc, #188]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004c52:	f7fc fa5b 	bl	3400110c <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004c56:	4d2f      	ldr	r5, [pc, #188]	@ (34004d14 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34004c58:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
34004c5c:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
34004c60:	4641      	mov	r1, r8
34004c62:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004c66:	f7ff f9c3 	bl	34003ff0 <RCC_IC_CheckPLLSources>
34004c6a:	2801      	cmp	r0, #1
34004c6c:	f47f ae18 	bne.w	340048a0 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004c70:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34004c74:	6b27      	ldr	r7, [r4, #48]	@ 0x30
34004c76:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004c7a:	4639      	mov	r1, r7
34004c7c:	f7ff f9b8 	bl	34003ff0 <RCC_IC_CheckPLLSources>
34004c80:	2801      	cmp	r0, #1
34004c82:	f47f ae0d 	bne.w	340048a0 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004c86:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34004c8a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
34004c8c:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004c90:	4631      	mov	r1, r6
34004c92:	f7ff f9ad 	bl	34003ff0 <RCC_IC_CheckPLLSources>
34004c96:	2801      	cmp	r0, #1
34004c98:	f47f ae02 	bne.w	340048a0 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34004c9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004c9e:	3b01      	subs	r3, #1
34004ca0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
34004ca4:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34004ca8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34004caa:	3b01      	subs	r3, #1
34004cac:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
34004cb0:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34004cb4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34004cb6:	3b01      	subs	r3, #1
34004cb8:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34004cbc:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34004cc0:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34004cc4:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
34004cc8:	e772      	b.n	34004bb0 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34004cca:	b92b      	cbnz	r3, 34004cd8 <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
34004ccc:	f7ff f802 	bl	34003cd4 <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
34004cd0:	2800      	cmp	r0, #0
34004cd2:	f47f af6d 	bne.w	34004bb0 <HAL_RCC_ClockConfig+0x318>
34004cd6:	e5e3      	b.n	340048a0 <HAL_RCC_ClockConfig+0x8>
34004cd8:	f7ff f804 	bl	34003ce4 <LL_RCC_MSI_IsReady>
34004cdc:	e7f8      	b.n	34004cd0 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34004cde:	68e3      	ldr	r3, [r4, #12]
34004ce0:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004ce4:	d007      	beq.n	34004cf6 <HAL_RCC_ClockConfig+0x45e>
34004ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004cea:	d004      	beq.n	34004cf6 <HAL_RCC_ClockConfig+0x45e>
34004cec:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34004cf0:	4807      	ldr	r0, [pc, #28]	@ (34004d10 <HAL_RCC_ClockConfig+0x478>)
34004cf2:	f7fc fa0b 	bl	3400110c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34004cf6:	4a07      	ldr	r2, [pc, #28]	@ (34004d14 <HAL_RCC_ClockConfig+0x47c>)
34004cf8:	68e1      	ldr	r1, [r4, #12]
34004cfa:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004cfc:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34004d00:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34004d02:	bf3f      	itttt	cc
34004d04:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004d06:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
34004d0a:	430b      	orrcc	r3, r1
34004d0c:	6253      	strcc	r3, [r2, #36]	@ 0x24
34004d0e:	e68a      	b.n	34004a26 <HAL_RCC_ClockConfig+0x18e>
34004d10:	3400eeb6 	.word	0x3400eeb6
34004d14:	56028000 	.word	0x56028000

34004d18 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004d18:	4b1f      	ldr	r3, [pc, #124]	@ (34004d98 <HAL_RCC_GetSysClockFreq+0x80>)
{
34004d1a:	b510      	push	{r4, lr}
34004d1c:	6a1a      	ldr	r2, [r3, #32]
34004d1e:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
34004d22:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34004d26:	d034      	beq.n	34004d92 <HAL_RCC_GetSysClockFreq+0x7a>
34004d28:	d806      	bhi.n	34004d38 <HAL_RCC_GetSysClockFreq+0x20>
34004d2a:	b952      	cbnz	r2, 34004d42 <HAL_RCC_GetSysClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34004d2e:	481b      	ldr	r0, [pc, #108]	@ (34004d9c <HAL_RCC_GetSysClockFreq+0x84>)
34004d30:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004d34:	40d8      	lsrs	r0, r3
}
34004d36:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSysClkSource())
34004d38:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34004d3c:	d009      	beq.n	34004d52 <HAL_RCC_GetSysClockFreq+0x3a>
      switch (LL_RCC_IC2_GetSource())
34004d3e:	2000      	movs	r0, #0
34004d40:	e7f9      	b.n	34004d36 <HAL_RCC_GetSysClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34004d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34004d44:	4816      	ldr	r0, [pc, #88]	@ (34004da0 <HAL_RCC_GetSysClockFreq+0x88>)
34004d46:	f413 7f00 	tst.w	r3, #512	@ 0x200
34004d4a:	4b16      	ldr	r3, [pc, #88]	@ (34004da4 <HAL_RCC_GetSysClockFreq+0x8c>)
34004d4c:	bf08      	it	eq
34004d4e:	4618      	moveq	r0, r3
34004d50:	e7f1      	b.n	34004d36 <HAL_RCC_GetSysClockFreq+0x1e>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34004d52:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004d56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34004d5a:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004d5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC2_GetSource())
34004d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34004d66:	f100 0401 	add.w	r4, r0, #1
34004d6a:	d00f      	beq.n	34004d8c <HAL_RCC_GetSysClockFreq+0x74>
34004d6c:	d805      	bhi.n	34004d7a <HAL_RCC_GetSysClockFreq+0x62>
34004d6e:	b953      	cbnz	r3, 34004d86 <HAL_RCC_GetSysClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34004d70:	f003 f92c 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34004d74:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34004d78:	e7dd      	b.n	34004d36 <HAL_RCC_GetSysClockFreq+0x1e>
      switch (LL_RCC_IC2_GetSource())
34004d7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004d7e:	d1de      	bne.n	34004d3e <HAL_RCC_GetSysClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34004d80:	f003 f9e4 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34004d84:	e7f6      	b.n	34004d74 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34004d86:	f003 f961 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
34004d8a:	e7f3      	b.n	34004d74 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34004d8c:	f003 f99e 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
34004d90:	e7f0      	b.n	34004d74 <HAL_RCC_GetSysClockFreq+0x5c>
  switch (LL_RCC_GetSysClkSource())
34004d92:	4805      	ldr	r0, [pc, #20]	@ (34004da8 <HAL_RCC_GetSysClockFreq+0x90>)
34004d94:	e7cf      	b.n	34004d36 <HAL_RCC_GetSysClockFreq+0x1e>
34004d96:	bf00      	nop
34004d98:	56028000 	.word	0x56028000
34004d9c:	03d09000 	.word	0x03d09000
34004da0:	00f42400 	.word	0x00f42400
34004da4:	003d0900 	.word	0x003d0900
34004da8:	02dc6c00 	.word	0x02dc6c00

34004dac <HAL_RCC_GetHCLKFreq>:
{
34004dac:	b508      	push	{r3, lr}
  return LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler());
34004dae:	f7ff ffb3 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34004db2:	4b03      	ldr	r3, [pc, #12]	@ (34004dc0 <HAL_RCC_GetHCLKFreq+0x14>)
34004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34004db6:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34004dba:	40d8      	lsrs	r0, r3
34004dbc:	bd08      	pop	{r3, pc}
34004dbe:	bf00      	nop
34004dc0:	56028000 	.word	0x56028000

34004dc4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34004dc4:	4a02      	ldr	r2, [pc, #8]	@ (34004dd0 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
34004dc6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34004dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34004dcc:	6553      	str	r3, [r2, #84]	@ 0x54
}
34004dce:	4770      	bx	lr
34004dd0:	56028000 	.word	0x56028000

34004dd4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34004dd4:	4a02      	ldr	r2, [pc, #8]	@ (34004de0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
34004dd6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34004dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34004ddc:	6553      	str	r3, [r2, #84]	@ 0x54
}
34004dde:	4770      	bx	lr
34004de0:	56028000 	.word	0x56028000

34004de4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34004de4:	4b02      	ldr	r3, [pc, #8]	@ (34004df0 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
34004de6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
34004de8:	f3c0 1080 	ubfx	r0, r0, #6, #1
34004dec:	4770      	bx	lr
34004dee:	bf00      	nop
34004df0:	56028000 	.word	0x56028000

34004df4 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004df4:	4b02      	ldr	r3, [pc, #8]	@ (34004e00 <LL_RCC_HSE_IsReady+0xc>)
34004df6:	6858      	ldr	r0, [r3, #4]
}
34004df8:	f3c0 1000 	ubfx	r0, r0, #4, #1
34004dfc:	4770      	bx	lr
34004dfe:	bf00      	nop
34004e00:	56028000 	.word	0x56028000

34004e04 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34004e04:	4b02      	ldr	r3, [pc, #8]	@ (34004e10 <LL_RCC_HSI_IsReady+0xc>)
34004e06:	6858      	ldr	r0, [r3, #4]
}
34004e08:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34004e0c:	4770      	bx	lr
34004e0e:	bf00      	nop
34004e10:	56028000 	.word	0x56028000

34004e14 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34004e14:	4b02      	ldr	r3, [pc, #8]	@ (34004e20 <LL_RCC_MSI_IsReady+0xc>)
34004e16:	6858      	ldr	r0, [r3, #4]
}
34004e18:	f3c0 0080 	ubfx	r0, r0, #2, #1
34004e1c:	4770      	bx	lr
34004e1e:	bf00      	nop
34004e20:	56028000 	.word	0x56028000

34004e24 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34004e24:	4b02      	ldr	r3, [pc, #8]	@ (34004e30 <LL_RCC_LSE_IsReady+0xc>)
34004e26:	6858      	ldr	r0, [r3, #4]
}
34004e28:	f3c0 0040 	ubfx	r0, r0, #1, #1
34004e2c:	4770      	bx	lr
34004e2e:	bf00      	nop
34004e30:	56028000 	.word	0x56028000

34004e34 <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34004e34:	4907      	ldr	r1, [pc, #28]	@ (34004e54 <LL_RCC_SetClockSource+0x20>)
{
34004e36:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34004e38:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34004e3a:	f3c0 2504 	ubfx	r5, r0, #8, #5
34004e3e:	5863      	ldr	r3, [r4, r1]
34004e40:	0e02      	lsrs	r2, r0, #24
34004e42:	40aa      	lsls	r2, r5
34004e44:	f3c0 4007 	ubfx	r0, r0, #16, #8
34004e48:	ea23 0302 	bic.w	r3, r3, r2
34004e4c:	40a8      	lsls	r0, r5
34004e4e:	4303      	orrs	r3, r0
34004e50:	5063      	str	r3, [r4, r1]
}
34004e52:	bd30      	pop	{r4, r5, pc}
34004e54:	56028144 	.word	0x56028144

34004e58 <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34004e58:	4b05      	ldr	r3, [pc, #20]	@ (34004e70 <LL_RCC_GetClockSource+0x18>)
34004e5a:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34004e5c:	58d1      	ldr	r1, [r2, r3]
34004e5e:	f3c0 2204 	ubfx	r2, r0, #8, #5
34004e62:	0e03      	lsrs	r3, r0, #24
34004e64:	4093      	lsls	r3, r2
34004e66:	400b      	ands	r3, r1
34004e68:	40d3      	lsrs	r3, r2
}
34004e6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
34004e6e:	4770      	bx	lr
34004e70:	56028144 	.word	0x56028144

34004e74 <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34004e74:	4b02      	ldr	r3, [pc, #8]	@ (34004e80 <LL_RCC_IC7_IsEnabled+0xc>)
34004e76:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34004e7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
34004e7e:	4770      	bx	lr
34004e80:	56028000 	.word	0x56028000

34004e84 <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34004e84:	4b03      	ldr	r3, [pc, #12]	@ (34004e94 <LL_RCC_IC7_GetDivider+0x10>)
34004e86:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
34004e8a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34004e8e:	3001      	adds	r0, #1
34004e90:	4770      	bx	lr
34004e92:	bf00      	nop
34004e94:	56028000 	.word	0x56028000

34004e98 <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34004e98:	4b02      	ldr	r3, [pc, #8]	@ (34004ea4 <LL_RCC_IC8_IsEnabled+0xc>)
34004e9a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34004e9e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
34004ea2:	4770      	bx	lr
34004ea4:	56028000 	.word	0x56028000

34004ea8 <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34004ea8:	4b03      	ldr	r3, [pc, #12]	@ (34004eb8 <LL_RCC_IC8_GetDivider+0x10>)
34004eaa:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
34004eae:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34004eb2:	3001      	adds	r0, #1
34004eb4:	4770      	bx	lr
34004eb6:	bf00      	nop
34004eb8:	56028000 	.word	0x56028000

34004ebc <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34004ebc:	4b02      	ldr	r3, [pc, #8]	@ (34004ec8 <LL_RCC_IC9_IsEnabled+0xc>)
34004ebe:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34004ec2:	f3c0 2000 	ubfx	r0, r0, #8, #1
34004ec6:	4770      	bx	lr
34004ec8:	56028000 	.word	0x56028000

34004ecc <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34004ecc:	4b03      	ldr	r3, [pc, #12]	@ (34004edc <LL_RCC_IC9_GetDivider+0x10>)
34004ece:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
34004ed2:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34004ed6:	3001      	adds	r0, #1
34004ed8:	4770      	bx	lr
34004eda:	bf00      	nop
34004edc:	56028000 	.word	0x56028000

34004ee0 <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34004ee0:	4b02      	ldr	r3, [pc, #8]	@ (34004eec <LL_RCC_IC14_IsEnabled+0xc>)
34004ee2:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34004ee6:	f3c0 3040 	ubfx	r0, r0, #13, #1
34004eea:	4770      	bx	lr
34004eec:	56028000 	.word	0x56028000

34004ef0 <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34004ef0:	4b03      	ldr	r3, [pc, #12]	@ (34004f00 <LL_RCC_IC14_GetDivider+0x10>)
34004ef2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
34004ef6:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34004efa:	3001      	adds	r0, #1
34004efc:	4770      	bx	lr
34004efe:	bf00      	nop
34004f00:	56028000 	.word	0x56028000

34004f04 <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34004f04:	4b02      	ldr	r3, [pc, #8]	@ (34004f10 <LL_RCC_IC15_IsEnabled+0xc>)
34004f06:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34004f0a:	f3c0 3080 	ubfx	r0, r0, #14, #1
34004f0e:	4770      	bx	lr
34004f10:	56028000 	.word	0x56028000

34004f14 <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34004f14:	4b03      	ldr	r3, [pc, #12]	@ (34004f24 <LL_RCC_IC15_GetDivider+0x10>)
34004f16:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
34004f1a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34004f1e:	3001      	adds	r0, #1
34004f20:	4770      	bx	lr
34004f22:	bf00      	nop
34004f24:	56028000 	.word	0x56028000

34004f28 <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34004f28:	4b02      	ldr	r3, [pc, #8]	@ (34004f34 <RCCEx_GetHCLKFreq+0xc>)
34004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34004f2c:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34004f30:	40d8      	lsrs	r0, r3
34004f32:	4770      	bx	lr
34004f34:	56028000 	.word	0x56028000

34004f38 <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
34004f38:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34004f3c:	b508      	push	{r3, lr}
  switch (PLLsource)
34004f3e:	d01d      	beq.n	34004f7c <RCCEx_GetPLLSourceFreq+0x44>
34004f40:	d80a      	bhi.n	34004f58 <RCCEx_GetPLLSourceFreq+0x20>
34004f42:	b970      	cbnz	r0, 34004f62 <RCCEx_GetPLLSourceFreq+0x2a>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34004f44:	f7ff ff5e 	bl	34004e04 <LL_RCC_HSI_IsReady>
34004f48:	b148      	cbz	r0, 34004f5e <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004f4a:	4b10      	ldr	r3, [pc, #64]	@ (34004f8c <RCCEx_GetPLLSourceFreq+0x54>)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34004f4c:	4810      	ldr	r0, [pc, #64]	@ (34004f90 <RCCEx_GetPLLSourceFreq+0x58>)
34004f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34004f50:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004f54:	40d8      	lsrs	r0, r3
34004f56:	e003      	b.n	34004f60 <RCCEx_GetPLLSourceFreq+0x28>
  switch (PLLsource)
34004f58:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34004f5c:	d014      	beq.n	34004f88 <RCCEx_GetPLLSourceFreq+0x50>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34004f5e:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
34004f60:	bd08      	pop	{r3, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34004f62:	f7ff ff57 	bl	34004e14 <LL_RCC_MSI_IsReady>
34004f66:	2800      	cmp	r0, #0
34004f68:	d0f9      	beq.n	34004f5e <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34004f6a:	4b08      	ldr	r3, [pc, #32]	@ (34004f8c <RCCEx_GetPLLSourceFreq+0x54>)
          pllinputfreq = MSI_VALUE;
34004f6c:	4809      	ldr	r0, [pc, #36]	@ (34004f94 <RCCEx_GetPLLSourceFreq+0x5c>)
34004f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34004f70:	f413 7f00 	tst.w	r3, #512	@ 0x200
34004f74:	4b08      	ldr	r3, [pc, #32]	@ (34004f98 <RCCEx_GetPLLSourceFreq+0x60>)
34004f76:	bf08      	it	eq
34004f78:	4618      	moveq	r0, r3
34004f7a:	e7f1      	b.n	34004f60 <RCCEx_GetPLLSourceFreq+0x28>
      if (LL_RCC_HSE_IsReady() != 0U)
34004f7c:	f7ff ff3a 	bl	34004df4 <LL_RCC_HSE_IsReady>
34004f80:	2800      	cmp	r0, #0
34004f82:	d0ec      	beq.n	34004f5e <RCCEx_GetPLLSourceFreq+0x26>
        pllinputfreq = HSE_VALUE;
34004f84:	4805      	ldr	r0, [pc, #20]	@ (34004f9c <RCCEx_GetPLLSourceFreq+0x64>)
34004f86:	e7eb      	b.n	34004f60 <RCCEx_GetPLLSourceFreq+0x28>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34004f88:	4805      	ldr	r0, [pc, #20]	@ (34004fa0 <RCCEx_GetPLLSourceFreq+0x68>)
34004f8a:	e7e9      	b.n	34004f60 <RCCEx_GetPLLSourceFreq+0x28>
34004f8c:	56028000 	.word	0x56028000
34004f90:	03d09000 	.word	0x03d09000
34004f94:	00f42400 	.word	0x00f42400
34004f98:	003d0900 	.word	0x003d0900
34004f9c:	02dc6c00 	.word	0x02dc6c00
34004fa0:	00bb8000 	.word	0x00bb8000

34004fa4 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34004fa4:	ee07 2a10 	vmov	s14, r2
34004fa8:	ee06 3a10 	vmov	s12, r3
34004fac:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34004fb0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
34004fb4:	eddf 5a10 	vldr	s11, [pc, #64]	@ 34004ff8 <RCCEx_CalcPLLFreq+0x54>
34004fb8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
34004fbc:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34004fc0:	eea6 7a25 	vfma.f32	s14, s12, s11
34004fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
34004fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
34004fcc:	eeb8 7a66 	vcvt.f32.u32	s14, s13
34004fd0:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
34004fd4:	eddd 7a00 	vldr	s15, [sp]
34004fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
34004fdc:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
34004fe0:	eddd 7a01 	vldr	s15, [sp, #4]
34004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
34004fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
34004fec:	eefc 7ac7 	vcvt.u32.f32	s15, s14
34004ff0:	ee17 0a90 	vmov	r0, s15
34004ff4:	4770      	bx	lr
34004ff6:	bf00      	nop
34004ff8:	33800000 	.word	0x33800000

34004ffc <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34004ffc:	e9d0 2300 	ldrd	r2, r3, [r0]
34005000:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
34005004:	431a      	orrs	r2, r3
{
34005006:	b570      	push	{r4, r5, r6, lr}
34005008:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
3400500a:	d103      	bne.n	34005014 <HAL_RCCEx_PeriphCLKConfig+0x18>
3400500c:	2188      	movs	r1, #136	@ 0x88
3400500e:	4861      	ldr	r0, [pc, #388]	@ (34005194 <HAL_RCCEx_PeriphCLKConfig+0x198>)
34005010:	f7fc f87c 	bl	3400110c <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34005014:	6823      	ldr	r3, [r4, #0]
34005016:	011a      	lsls	r2, r3, #4
34005018:	f140 808e 	bpl.w	34005138 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
3400501c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34005020:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34005024:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
34005028:	d05a      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400502a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400502e:	d057      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005030:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
34005034:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
34005038:	d052      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400503a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
3400503e:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
34005042:	d04d      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005044:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
34005048:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
3400504c:	d048      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400504e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34005052:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
34005056:	d043      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005058:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
3400505c:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
34005060:	d03e      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005062:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005066:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
3400506a:	d039      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400506c:	494a      	ldr	r1, [pc, #296]	@ (34005198 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
3400506e:	428a      	cmp	r2, r1
34005070:	d036      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005072:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005076:	428a      	cmp	r2, r1
34005078:	d032      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400507a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400507e:	428a      	cmp	r2, r1
34005080:	d02e      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005082:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
34005086:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400508a:	4288      	cmp	r0, r1
3400508c:	d028      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400508e:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
34005092:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
34005096:	4288      	cmp	r0, r1
34005098:	d022      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400509a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
3400509e:	428a      	cmp	r2, r1
340050a0:	d01e      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340050a2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340050a6:	428a      	cmp	r2, r1
340050a8:	d01a      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340050aa:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340050ae:	428a      	cmp	r2, r1
340050b0:	d016      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340050b2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340050b6:	428a      	cmp	r2, r1
340050b8:	d012      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340050ba:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340050be:	428a      	cmp	r2, r1
340050c0:	d00e      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340050c2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340050c6:	428a      	cmp	r2, r1
340050c8:	d00a      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340050ca:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340050ce:	428a      	cmp	r2, r1
340050d0:	d006      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340050d2:	4a32      	ldr	r2, [pc, #200]	@ (3400519c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
340050d4:	4293      	cmp	r3, r2
340050d6:	d003      	beq.n	340050e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340050d8:	218e      	movs	r1, #142	@ 0x8e
340050da:	482e      	ldr	r0, [pc, #184]	@ (34005194 <HAL_RCCEx_PeriphCLKConfig+0x198>)
340050dc:	f7fc f816 	bl	3400110c <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
340050e0:	4b2f      	ldr	r3, [pc, #188]	@ (340051a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
340050e2:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
340050e6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340050ea:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
340050ee:	d13b      	bne.n	34005168 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
340050f0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
340050f4:	d108      	bne.n	34005108 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
340050f6:	f7fd f805 	bl	34002104 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340050fa:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
340050fe:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
34005100:	f7ff fe90 	bl	34004e24 <LL_RCC_LSE_IsReady>
34005104:	2800      	cmp	r0, #0
34005106:	d03d      	beq.n	34005184 <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34005108:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
3400510c:	4a24      	ldr	r2, [pc, #144]	@ (340051a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
3400510e:	f403 7040 	and.w	r0, r3, #768	@ 0x300
34005112:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
34005116:	d108      	bne.n	3400512a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34005118:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
3400511c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34005120:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
34005124:	430b      	orrs	r3, r1
34005126:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
3400512a:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3400512e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34005132:	4303      	orrs	r3, r0
34005134:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34005138:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3400513a:	6823      	ldr	r3, [r4, #0]
3400513c:	075e      	lsls	r6, r3, #29
3400513e:	d55f      	bpl.n	34005200 <HAL_RCCEx_PeriphCLKConfig+0x204>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
34005140:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34005144:	2b07      	cmp	r3, #7
34005146:	d903      	bls.n	34005150 <HAL_RCCEx_PeriphCLKConfig+0x154>
34005148:	21d4      	movs	r1, #212	@ 0xd4
3400514a:	4812      	ldr	r0, [pc, #72]	@ (34005194 <HAL_RCCEx_PeriphCLKConfig+0x198>)
3400514c:	f7fb ffde 	bl	3400110c <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34005150:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34005154:	3b03      	subs	r3, #3
34005156:	2b04      	cmp	r3, #4
34005158:	d848      	bhi.n	340051ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
3400515a:	e8df f013 	tbh	[pc, r3, lsl #1]
3400515e:	0f27      	.short	0x0f27
34005160:	0ee10025 	.word	0x0ee10025
34005164:	0f500f04 	.word	0x0f500f04
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34005168:	f401 7240 	and.w	r2, r1, #768	@ 0x300
3400516c:	429a      	cmp	r2, r3
3400516e:	d0bf      	beq.n	340050f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34005170:	4b0c      	ldr	r3, [pc, #48]	@ (340051a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
34005172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34005174:	f042 0201 	orr.w	r2, r2, #1
34005178:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3400517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400517c:	07db      	lsls	r3, r3, #31
3400517e:	d4b7      	bmi.n	340050f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
34005180:	2501      	movs	r5, #1
34005182:	e7da      	b.n	3400513a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34005184:	f7fc ffbe 	bl	34002104 <HAL_GetTick>
34005188:	1b40      	subs	r0, r0, r5
3400518a:	42b0      	cmp	r0, r6
3400518c:	d9b8      	bls.n	34005100 <HAL_RCCEx_PeriphCLKConfig+0x104>
        status = ret;
3400518e:	2503      	movs	r5, #3
34005190:	e7d3      	b.n	3400513a <HAL_RCCEx_PeriphCLKConfig+0x13e>
34005192:	bf00      	nop
34005194:	3400ef5e 	.word	0x3400ef5e
34005198:	00010300 	.word	0x00010300
3400519c:	0003e300 	.word	0x0003e300
340051a0:	56028000 	.word	0x56028000
340051a4:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340051a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340051aa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340051ae:	d003      	beq.n	340051b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
340051b0:	21d9      	movs	r1, #217	@ 0xd9
340051b2:	48bd      	ldr	r0, [pc, #756]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340051b4:	f7fb ffaa 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
340051b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340051ba:	3b01      	subs	r3, #1
340051bc:	2bff      	cmp	r3, #255	@ 0xff
340051be:	d903      	bls.n	340051c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
340051c0:	21da      	movs	r1, #218	@ 0xda
340051c2:	48b9      	ldr	r0, [pc, #740]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340051c4:	f7fb ffa2 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340051c8:	4ab8      	ldr	r2, [pc, #736]	@ (340054ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340051ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340051cc:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340051d0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340051d2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340051d6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340051da:	3901      	subs	r1, #1
340051dc:	4303      	orrs	r3, r0
340051de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340051e2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340051e6:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340051e8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340051ec:	4aaf      	ldr	r2, [pc, #700]	@ (340054ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340051ee:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
340051f2:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340051f6:	f023 0307 	bic.w	r3, r3, #7
340051fa:	430b      	orrs	r3, r1
340051fc:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34005200:	6863      	ldr	r3, [r4, #4]
34005202:	0258      	lsls	r0, r3, #9
34005204:	d539      	bpl.n	3400527a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
34005206:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
3400520a:	4aa9      	ldr	r2, [pc, #676]	@ (340054b0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
3400520c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005210:	4293      	cmp	r3, r2
34005212:	d004      	beq.n	3400521e <HAL_RCCEx_PeriphCLKConfig+0x222>
34005214:	f44f 7192 	mov.w	r1, #292	@ 0x124
34005218:	48a3      	ldr	r0, [pc, #652]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400521a:	f7fb ff77 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3400521e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
34005222:	4aa4      	ldr	r2, [pc, #656]	@ (340054b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
34005224:	4293      	cmp	r3, r2
34005226:	f041 8713 	bne.w	34007050 <HAL_RCCEx_PeriphCLKConfig+0x2054>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400522a:	69a3      	ldr	r3, [r4, #24]
3400522c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005230:	d004      	beq.n	3400523c <HAL_RCCEx_PeriphCLKConfig+0x240>
34005232:	f240 1129 	movw	r1, #297	@ 0x129
34005236:	489c      	ldr	r0, [pc, #624]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005238:	f7fb ff68 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400523c:	69e3      	ldr	r3, [r4, #28]
3400523e:	3b01      	subs	r3, #1
34005240:	2bff      	cmp	r3, #255	@ 0xff
34005242:	d904      	bls.n	3400524e <HAL_RCCEx_PeriphCLKConfig+0x252>
34005244:	f44f 7195 	mov.w	r1, #298	@ 0x12a
34005248:	4897      	ldr	r0, [pc, #604]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400524a:	f7fb ff5f 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400524e:	4a97      	ldr	r2, [pc, #604]	@ (340054ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005250:	69e1      	ldr	r1, [r4, #28]
34005252:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34005256:	69a0      	ldr	r0, [r4, #24]
34005258:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400525c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005260:	3901      	subs	r1, #1
34005262:	4303      	orrs	r3, r0
34005264:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005268:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3400526c:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400526e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005272:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
34005276:	f7ff fddd 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3400527a:	6863      	ldr	r3, [r4, #4]
3400527c:	0219      	lsls	r1, r3, #8
3400527e:	d539      	bpl.n	340052f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
34005280:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34005284:	4a8c      	ldr	r2, [pc, #560]	@ (340054b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
34005286:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400528a:	4293      	cmp	r3, r2
3400528c:	d004      	beq.n	34005298 <HAL_RCCEx_PeriphCLKConfig+0x29c>
3400528e:	f240 1151 	movw	r1, #337	@ 0x151
34005292:	4885      	ldr	r0, [pc, #532]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005294:	f7fb ff3a 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34005298:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
3400529c:	4a87      	ldr	r2, [pc, #540]	@ (340054bc <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
3400529e:	4293      	cmp	r3, r2
340052a0:	f041 8706 	bne.w	340070b0 <HAL_RCCEx_PeriphCLKConfig+0x20b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340052a4:	69a3      	ldr	r3, [r4, #24]
340052a6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340052aa:	d004      	beq.n	340052b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
340052ac:	f44f 71ab 	mov.w	r1, #342	@ 0x156
340052b0:	487d      	ldr	r0, [pc, #500]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340052b2:	f7fb ff2b 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340052b6:	69e3      	ldr	r3, [r4, #28]
340052b8:	3b01      	subs	r3, #1
340052ba:	2bff      	cmp	r3, #255	@ 0xff
340052bc:	d904      	bls.n	340052c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
340052be:	f240 1157 	movw	r1, #343	@ 0x157
340052c2:	4879      	ldr	r0, [pc, #484]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340052c4:	f7fb ff22 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340052c8:	4a78      	ldr	r2, [pc, #480]	@ (340054ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340052ca:	69e1      	ldr	r1, [r4, #28]
340052cc:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340052d0:	69a0      	ldr	r0, [r4, #24]
340052d2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340052d6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340052da:	3901      	subs	r1, #1
340052dc:	4303      	orrs	r3, r0
340052de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340052e2:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340052e6:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340052e8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340052ec:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
340052f0:	f7ff fda0 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
340052f4:	6863      	ldr	r3, [r4, #4]
340052f6:	01da      	lsls	r2, r3, #7
340052f8:	d539      	bpl.n	3400536e <HAL_RCCEx_PeriphCLKConfig+0x372>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
340052fa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
340052fe:	4a70      	ldr	r2, [pc, #448]	@ (340054c0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
34005300:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005304:	4293      	cmp	r3, r2
34005306:	d004      	beq.n	34005312 <HAL_RCCEx_PeriphCLKConfig+0x316>
34005308:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
3400530c:	4866      	ldr	r0, [pc, #408]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400530e:	f7fb fefd 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34005312:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
34005316:	4a6b      	ldr	r2, [pc, #428]	@ (340054c4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
34005318:	4293      	cmp	r3, r2
3400531a:	f041 86f9 	bne.w	34007110 <HAL_RCCEx_PeriphCLKConfig+0x2114>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400531e:	69a3      	ldr	r3, [r4, #24]
34005320:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005324:	d004      	beq.n	34005330 <HAL_RCCEx_PeriphCLKConfig+0x334>
34005326:	f240 1183 	movw	r1, #387	@ 0x183
3400532a:	485f      	ldr	r0, [pc, #380]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400532c:	f7fb feee 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005330:	69e3      	ldr	r3, [r4, #28]
34005332:	3b01      	subs	r3, #1
34005334:	2bff      	cmp	r3, #255	@ 0xff
34005336:	d904      	bls.n	34005342 <HAL_RCCEx_PeriphCLKConfig+0x346>
34005338:	f44f 71c2 	mov.w	r1, #388	@ 0x184
3400533c:	485a      	ldr	r0, [pc, #360]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400533e:	f7fb fee5 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34005342:	4a5a      	ldr	r2, [pc, #360]	@ (340054ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005344:	69e1      	ldr	r1, [r4, #28]
34005346:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
3400534a:	69a0      	ldr	r0, [r4, #24]
3400534c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005350:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005354:	3901      	subs	r1, #1
34005356:	4303      	orrs	r3, r0
34005358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400535c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34005360:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005362:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005366:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
3400536a:	f7ff fd63 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3400536e:	6823      	ldr	r3, [r4, #0]
34005370:	051b      	lsls	r3, r3, #20
34005372:	d53c      	bpl.n	340053ee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
34005374:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34005378:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400537c:	d004      	beq.n	34005388 <HAL_RCCEx_PeriphCLKConfig+0x38c>
3400537e:	f240 11ab 	movw	r1, #427	@ 0x1ab
34005382:	4849      	ldr	r0, [pc, #292]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005384:	f7fb fec2 	bl	3400110c <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34005388:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
3400538c:	2b20      	cmp	r3, #32
3400538e:	f041 86ff 	bne.w	34007190 <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005392:	69a3      	ldr	r3, [r4, #24]
34005394:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005398:	d004      	beq.n	340053a4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
3400539a:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
3400539e:	4842      	ldr	r0, [pc, #264]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340053a0:	f7fb feb4 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340053a4:	69e3      	ldr	r3, [r4, #28]
340053a6:	3b01      	subs	r3, #1
340053a8:	2bff      	cmp	r3, #255	@ 0xff
340053aa:	d904      	bls.n	340053b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
340053ac:	f240 11b1 	movw	r1, #433	@ 0x1b1
340053b0:	483d      	ldr	r0, [pc, #244]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340053b2:	f7fb feab 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340053b6:	4a3d      	ldr	r2, [pc, #244]	@ (340054ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340053b8:	69e1      	ldr	r1, [r4, #28]
340053ba:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340053be:	69a0      	ldr	r0, [r4, #24]
340053c0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340053c4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340053c8:	3901      	subs	r1, #1
340053ca:	4303      	orrs	r3, r0
340053cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340053d0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340053d4:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340053d6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
340053da:	4a34      	ldr	r2, [pc, #208]	@ (340054ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340053dc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
340053e0:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
340053e4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340053e8:	430b      	orrs	r3, r1
340053ea:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
340053ee:	6823      	ldr	r3, [r4, #0]
340053f0:	005e      	lsls	r6, r3, #1
340053f2:	d539      	bpl.n	34005468 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
340053f4:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
340053f8:	4a33      	ldr	r2, [pc, #204]	@ (340054c8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
340053fa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340053fe:	4293      	cmp	r3, r2
34005400:	d004      	beq.n	3400540c <HAL_RCCEx_PeriphCLKConfig+0x410>
34005402:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
34005406:	4828      	ldr	r0, [pc, #160]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005408:	f7fb fe80 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3400540c:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34005410:	4a2e      	ldr	r2, [pc, #184]	@ (340054cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
34005412:	4293      	cmp	r3, r2
34005414:	f041 86ea 	bne.w	340071ec <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34005418:	6a23      	ldr	r3, [r4, #32]
3400541a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400541e:	d004      	beq.n	3400542a <HAL_RCCEx_PeriphCLKConfig+0x42e>
34005420:	f240 11dd 	movw	r1, #477	@ 0x1dd
34005424:	4820      	ldr	r0, [pc, #128]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005426:	f7fb fe71 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400542a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400542c:	3b01      	subs	r3, #1
3400542e:	2bff      	cmp	r3, #255	@ 0xff
34005430:	d904      	bls.n	3400543c <HAL_RCCEx_PeriphCLKConfig+0x440>
34005432:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
34005436:	481c      	ldr	r0, [pc, #112]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005438:	f7fb fe68 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400543c:	4a1b      	ldr	r2, [pc, #108]	@ (340054ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
3400543e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34005440:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34005444:	6a20      	ldr	r0, [r4, #32]
34005446:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400544a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400544e:	3901      	subs	r1, #1
34005450:	4303      	orrs	r3, r0
34005452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005456:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400545a:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3400545c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005460:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
34005464:	f7ff fce6 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34005468:	6823      	ldr	r3, [r4, #0]
3400546a:	2b00      	cmp	r3, #0
3400546c:	da53      	bge.n	34005516 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
3400546e:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34005472:	4a17      	ldr	r2, [pc, #92]	@ (340054d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
34005474:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005478:	4293      	cmp	r3, r2
3400547a:	d004      	beq.n	34005486 <HAL_RCCEx_PeriphCLKConfig+0x48a>
3400547c:	f240 2105 	movw	r1, #517	@ 0x205
34005480:	4809      	ldr	r0, [pc, #36]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005482:	f7fb fe43 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
34005486:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
3400548a:	4a12      	ldr	r2, [pc, #72]	@ (340054d4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
3400548c:	4293      	cmp	r3, r2
3400548e:	f041 86dd 	bne.w	3400724c <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34005492:	6a23      	ldr	r3, [r4, #32]
34005494:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005498:	d01e      	beq.n	340054d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
3400549a:	f240 210a 	movw	r1, #522	@ 0x20a
3400549e:	4802      	ldr	r0, [pc, #8]	@ (340054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340054a0:	f7fb fe34 	bl	3400110c <assert_failed>
340054a4:	e018      	b.n	340054d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
340054a6:	bf00      	nop
340054a8:	3400ef5e 	.word	0x3400ef5e
340054ac:	56028000 	.word	0x56028000
340054b0:	03000014 	.word	0x03000014
340054b4:	03020014 	.word	0x03020014
340054b8:	03000414 	.word	0x03000414
340054bc:	03020414 	.word	0x03020414
340054c0:	03000814 	.word	0x03000814
340054c4:	03020814 	.word	0x03020814
340054c8:	0300001c 	.word	0x0300001c
340054cc:	0302001c 	.word	0x0302001c
340054d0:	0300041c 	.word	0x0300041c
340054d4:	0302041c 	.word	0x0302041c
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340054d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340054da:	3b01      	subs	r3, #1
340054dc:	2bff      	cmp	r3, #255	@ 0xff
340054de:	d904      	bls.n	340054ea <HAL_RCCEx_PeriphCLKConfig+0x4ee>
340054e0:	f240 210b 	movw	r1, #523	@ 0x20b
340054e4:	48c4      	ldr	r0, [pc, #784]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340054e6:	f7fb fe11 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340054ea:	4ac4      	ldr	r2, [pc, #784]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
340054ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340054ee:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340054f2:	6a20      	ldr	r0, [r4, #32]
340054f4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340054f8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340054fc:	3901      	subs	r1, #1
340054fe:	4303      	orrs	r3, r0
34005500:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005504:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005508:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3400550a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400550e:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
34005512:	f7ff fc8f 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34005516:	6823      	ldr	r3, [r4, #0]
34005518:	07d8      	lsls	r0, r3, #31
3400551a:	d54f      	bpl.n	340055bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
3400551c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34005520:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34005524:	d006      	beq.n	34005534 <HAL_RCCEx_PeriphCLKConfig+0x538>
34005526:	2b40      	cmp	r3, #64	@ 0x40
34005528:	d004      	beq.n	34005534 <HAL_RCCEx_PeriphCLKConfig+0x538>
3400552a:	f240 2132 	movw	r1, #562	@ 0x232
3400552e:	48b2      	ldr	r0, [pc, #712]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005530:	f7fb fdec 	bl	3400110c <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
34005534:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
34005538:	3b01      	subs	r3, #1
3400553a:	2bff      	cmp	r3, #255	@ 0xff
3400553c:	d904      	bls.n	34005548 <HAL_RCCEx_PeriphCLKConfig+0x54c>
3400553e:	f240 2133 	movw	r1, #563	@ 0x233
34005542:	48ad      	ldr	r0, [pc, #692]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005544:	f7fb fde2 	bl	3400110c <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34005548:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
3400554c:	2b20      	cmp	r3, #32
3400554e:	f041 86ad 	bne.w	340072ac <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34005552:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34005554:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005558:	d004      	beq.n	34005564 <HAL_RCCEx_PeriphCLKConfig+0x568>
3400555a:	f44f 710e 	mov.w	r1, #568	@ 0x238
3400555e:	48a6      	ldr	r0, [pc, #664]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005560:	f7fb fdd4 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34005564:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34005566:	3b01      	subs	r3, #1
34005568:	2bff      	cmp	r3, #255	@ 0xff
3400556a:	d904      	bls.n	34005576 <HAL_RCCEx_PeriphCLKConfig+0x57a>
3400556c:	f240 2139 	movw	r1, #569	@ 0x239
34005570:	48a1      	ldr	r0, [pc, #644]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005572:	f7fb fdcb 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34005576:	4aa1      	ldr	r2, [pc, #644]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005578:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400557a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400557e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34005580:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005584:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005588:	3901      	subs	r1, #1
3400558a:	4303      	orrs	r3, r0
3400558c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005590:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34005594:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34005596:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3400559a:	4998      	ldr	r1, [pc, #608]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
3400559c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
340055a0:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
340055a4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
340055a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
340055ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
340055b0:	3a01      	subs	r2, #1
340055b2:	4303      	orrs	r3, r0
340055b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
340055b8:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
340055bc:	6823      	ldr	r3, [r4, #0]
340055be:	0799      	lsls	r1, r3, #30
340055c0:	d53b      	bpl.n	3400563a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
340055c2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
340055c6:	2b07      	cmp	r3, #7
340055c8:	d904      	bls.n	340055d4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
340055ca:	f240 2161 	movw	r1, #609	@ 0x261
340055ce:	488a      	ldr	r0, [pc, #552]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340055d0:	f7fb fd9c 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
340055d4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
340055d8:	2b02      	cmp	r3, #2
340055da:	f041 8695 	bne.w	34007308 <HAL_RCCEx_PeriphCLKConfig+0x230c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340055de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340055e0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340055e4:	d004      	beq.n	340055f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
340055e6:	f240 2166 	movw	r1, #614	@ 0x266
340055ea:	4883      	ldr	r0, [pc, #524]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340055ec:	f7fb fd8e 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340055f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340055f2:	3b01      	subs	r3, #1
340055f4:	2bff      	cmp	r3, #255	@ 0xff
340055f6:	d904      	bls.n	34005602 <HAL_RCCEx_PeriphCLKConfig+0x606>
340055f8:	f240 2167 	movw	r1, #615	@ 0x267
340055fc:	487e      	ldr	r0, [pc, #504]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340055fe:	f7fb fd85 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34005602:	4a7e      	ldr	r2, [pc, #504]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005604:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34005606:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400560a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400560c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005610:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005614:	3901      	subs	r1, #1
34005616:	4303      	orrs	r3, r0
34005618:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400561c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34005620:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34005622:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34005626:	4a75      	ldr	r2, [pc, #468]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005628:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
3400562c:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005630:	f023 0307 	bic.w	r3, r3, #7
34005634:	430b      	orrs	r3, r1
34005636:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3400563a:	6823      	ldr	r3, [r4, #0]
3400563c:	071a      	lsls	r2, r3, #28
3400563e:	d528      	bpl.n	34005692 <HAL_RCCEx_PeriphCLKConfig+0x696>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
34005640:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34005644:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005648:	d004      	beq.n	34005654 <HAL_RCCEx_PeriphCLKConfig+0x658>
3400564a:	f240 218e 	movw	r1, #654	@ 0x28e
3400564e:	486a      	ldr	r0, [pc, #424]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005650:	f7fb fd5c 	bl	3400110c <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
34005654:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
34005658:	3b01      	subs	r3, #1
3400565a:	2bff      	cmp	r3, #255	@ 0xff
3400565c:	d904      	bls.n	34005668 <HAL_RCCEx_PeriphCLKConfig+0x66c>
3400565e:	f240 218f 	movw	r1, #655	@ 0x28f
34005662:	4865      	ldr	r0, [pc, #404]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005664:	f7fb fd52 	bl	3400110c <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34005668:	4a64      	ldr	r2, [pc, #400]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
3400566a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
3400566e:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
34005672:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
34005676:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400567a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400567e:	3901      	subs	r1, #1
34005680:	4303      	orrs	r3, r0
34005682:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005686:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
3400568a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
3400568e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34005692:	6823      	ldr	r3, [r4, #0]
34005694:	06db      	lsls	r3, r3, #27
34005696:	d542      	bpl.n	3400571e <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
34005698:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
3400569c:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
340056a0:	d004      	beq.n	340056ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>
340056a2:	f240 219d 	movw	r1, #669	@ 0x29d
340056a6:	4854      	ldr	r0, [pc, #336]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340056a8:	f7fb fd30 	bl	3400110c <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
340056ac:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
340056b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340056b4:	f041 8656 	bne.w	34007364 <HAL_RCCEx_PeriphCLKConfig+0x2368>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
340056b8:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
340056bc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340056c0:	d004      	beq.n	340056cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
340056c2:	f240 21a2 	movw	r1, #674	@ 0x2a2
340056c6:	484c      	ldr	r0, [pc, #304]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340056c8:	f7fb fd20 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
340056cc:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
340056d0:	3b01      	subs	r3, #1
340056d2:	2bff      	cmp	r3, #255	@ 0xff
340056d4:	d904      	bls.n	340056e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
340056d6:	f240 21a3 	movw	r1, #675	@ 0x2a3
340056da:	4847      	ldr	r0, [pc, #284]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340056dc:	f7fb fd16 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
340056e0:	4a46      	ldr	r2, [pc, #280]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
340056e2:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
340056e6:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
340056ea:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
340056ee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340056f2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340056f6:	3901      	subs	r1, #1
340056f8:	4303      	orrs	r3, r0
340056fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340056fe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34005702:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34005706:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
3400570a:	4a3c      	ldr	r2, [pc, #240]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
3400570c:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
34005710:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005714:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34005718:	430b      	orrs	r3, r1
3400571a:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3400571e:	6823      	ldr	r3, [r4, #0]
34005720:	069e      	lsls	r6, r3, #26
34005722:	d53e      	bpl.n	340057a2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
34005724:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34005728:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400572c:	d004      	beq.n	34005738 <HAL_RCCEx_PeriphCLKConfig+0x73c>
3400572e:	f240 21bd 	movw	r1, #701	@ 0x2bd
34005732:	4831      	ldr	r0, [pc, #196]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005734:	f7fb fcea 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34005738:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
3400573c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34005740:	f041 8619 	bne.w	34007376 <HAL_RCCEx_PeriphCLKConfig+0x237a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
34005744:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34005746:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400574a:	d004      	beq.n	34005756 <HAL_RCCEx_PeriphCLKConfig+0x75a>
3400574c:	f240 21c2 	movw	r1, #706	@ 0x2c2
34005750:	4829      	ldr	r0, [pc, #164]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005752:	f7fb fcdb 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34005756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34005758:	3b01      	subs	r3, #1
3400575a:	2bff      	cmp	r3, #255	@ 0xff
3400575c:	d904      	bls.n	34005768 <HAL_RCCEx_PeriphCLKConfig+0x76c>
3400575e:	f240 21c3 	movw	r1, #707	@ 0x2c3
34005762:	4825      	ldr	r0, [pc, #148]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005764:	f7fb fcd2 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34005768:	4a24      	ldr	r2, [pc, #144]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
3400576a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
3400576c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
34005770:	6e20      	ldr	r0, [r4, #96]	@ 0x60
34005772:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005776:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400577a:	3901      	subs	r1, #1
3400577c:	4303      	orrs	r3, r0
3400577e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005782:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34005786:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400578a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
3400578e:	4a1b      	ldr	r2, [pc, #108]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005790:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34005794:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005798:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
3400579c:	430b      	orrs	r3, r1
3400579e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
340057a2:	6823      	ldr	r3, [r4, #0]
340057a4:	0658      	lsls	r0, r3, #25
340057a6:	d516      	bpl.n	340057d6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
340057a8:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
340057ac:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
340057b0:	d007      	beq.n	340057c2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
340057b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340057b6:	d004      	beq.n	340057c2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
340057b8:	f240 21dd 	movw	r1, #733	@ 0x2dd
340057bc:	480e      	ldr	r0, [pc, #56]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340057be:	f7fb fca5 	bl	3400110c <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
340057c2:	4a0e      	ldr	r2, [pc, #56]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
340057c4:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
340057c8:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
340057cc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
340057d0:	430b      	orrs	r3, r1
340057d2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
340057d6:	6823      	ldr	r3, [r4, #0]
340057d8:	0619      	lsls	r1, r3, #24
340057da:	d518      	bpl.n	3400580e <HAL_RCCEx_PeriphCLKConfig+0x812>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
340057dc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
340057e0:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
340057e4:	d004      	beq.n	340057f0 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
340057e6:	f240 21e7 	movw	r1, #743	@ 0x2e7
340057ea:	4803      	ldr	r0, [pc, #12]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340057ec:	f7fb fc8e 	bl	3400110c <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
340057f0:	4a02      	ldr	r2, [pc, #8]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x800>)
340057f2:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
340057f6:	e003      	b.n	34005800 <HAL_RCCEx_PeriphCLKConfig+0x804>
340057f8:	3400ef5e 	.word	0x3400ef5e
340057fc:	56028000 	.word	0x56028000
34005800:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005804:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34005808:	430b      	orrs	r3, r1
3400580a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3400580e:	6823      	ldr	r3, [r4, #0]
34005810:	05da      	lsls	r2, r3, #23
34005812:	d513      	bpl.n	3400583c <HAL_RCCEx_PeriphCLKConfig+0x840>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
34005814:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
34005818:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3400581c:	d004      	beq.n	34005828 <HAL_RCCEx_PeriphCLKConfig+0x82c>
3400581e:	f240 21f1 	movw	r1, #753	@ 0x2f1
34005822:	48c1      	ldr	r0, [pc, #772]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005824:	f7fb fc72 	bl	3400110c <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34005828:	4ac0      	ldr	r2, [pc, #768]	@ (34005b2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
3400582a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
3400582e:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34005836:	430b      	orrs	r3, r1
34005838:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3400583c:	6823      	ldr	r3, [r4, #0]
3400583e:	059b      	lsls	r3, r3, #22
34005840:	d54b      	bpl.n	340058da <HAL_RCCEx_PeriphCLKConfig+0x8de>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34005842:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005846:	2b03      	cmp	r3, #3
34005848:	d904      	bls.n	34005854 <HAL_RCCEx_PeriphCLKConfig+0x858>
3400584a:	f240 21fb 	movw	r1, #763	@ 0x2fb
3400584e:	48b6      	ldr	r0, [pc, #728]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005850:	f7fb fc5c 	bl	3400110c <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34005854:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
34005858:	3b01      	subs	r3, #1
3400585a:	2b0f      	cmp	r3, #15
3400585c:	d904      	bls.n	34005868 <HAL_RCCEx_PeriphCLKConfig+0x86c>
3400585e:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
34005862:	48b1      	ldr	r0, [pc, #708]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005864:	f7fb fc52 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34005868:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
3400586c:	2b02      	cmp	r3, #2
3400586e:	f041 858b 	bne.w	34007388 <HAL_RCCEx_PeriphCLKConfig+0x238c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
34005872:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
34005874:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005878:	d004      	beq.n	34005884 <HAL_RCCEx_PeriphCLKConfig+0x888>
3400587a:	f240 3101 	movw	r1, #769	@ 0x301
3400587e:	48aa      	ldr	r0, [pc, #680]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005880:	f7fb fc44 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
34005884:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
34005886:	3b01      	subs	r3, #1
34005888:	2bff      	cmp	r3, #255	@ 0xff
3400588a:	d904      	bls.n	34005896 <HAL_RCCEx_PeriphCLKConfig+0x89a>
3400588c:	f240 3102 	movw	r1, #770	@ 0x302
34005890:	48a5      	ldr	r0, [pc, #660]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005892:	f7fb fc3b 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34005896:	4aa5      	ldr	r2, [pc, #660]	@ (34005b2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005898:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
3400589a:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
3400589e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
340058a0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340058a4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340058a8:	3901      	subs	r1, #1
340058aa:	4303      	orrs	r3, r0
340058ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340058b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
340058b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
340058b8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
340058bc:	499b      	ldr	r1, [pc, #620]	@ (34005b2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
340058be:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
340058c2:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
340058c6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
340058ca:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
340058ce:	3a01      	subs	r2, #1
340058d0:	4303      	orrs	r3, r0
340058d2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
340058d6:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
340058da:	6823      	ldr	r3, [r4, #0]
340058dc:	055e      	lsls	r6, r3, #21
340058de:	d540      	bpl.n	34005962 <HAL_RCCEx_PeriphCLKConfig+0x966>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
340058e0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
340058e4:	2b03      	cmp	r3, #3
340058e6:	d904      	bls.n	340058f2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
340058e8:	f240 311d 	movw	r1, #797	@ 0x31d
340058ec:	488e      	ldr	r0, [pc, #568]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340058ee:	f7fb fc0d 	bl	3400110c <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
340058f2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
340058f6:	2b02      	cmp	r3, #2
340058f8:	f041 854e 	bne.w	34007398 <HAL_RCCEx_PeriphCLKConfig+0x239c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
340058fc:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34005900:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005904:	d004      	beq.n	34005910 <HAL_RCCEx_PeriphCLKConfig+0x914>
34005906:	f240 3122 	movw	r1, #802	@ 0x322
3400590a:	4887      	ldr	r0, [pc, #540]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3400590c:	f7fb fbfe 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34005910:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34005914:	3b01      	subs	r3, #1
34005916:	2bff      	cmp	r3, #255	@ 0xff
34005918:	d904      	bls.n	34005924 <HAL_RCCEx_PeriphCLKConfig+0x928>
3400591a:	f240 3123 	movw	r1, #803	@ 0x323
3400591e:	4882      	ldr	r0, [pc, #520]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005920:	f7fb fbf4 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34005924:	4a81      	ldr	r2, [pc, #516]	@ (34005b2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005926:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
3400592a:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
3400592e:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34005932:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005936:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400593a:	3901      	subs	r1, #1
3400593c:	4303      	orrs	r3, r0
3400593e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005942:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34005946:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
3400594a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
3400594e:	4a77      	ldr	r2, [pc, #476]	@ (34005b2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005950:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
34005954:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34005958:	f023 0303 	bic.w	r3, r3, #3
3400595c:	430b      	orrs	r3, r1
3400595e:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34005962:	6823      	ldr	r3, [r4, #0]
34005964:	04d8      	lsls	r0, r3, #19
34005966:	d540      	bpl.n	340059ea <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34005968:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
3400596c:	4a70      	ldr	r2, [pc, #448]	@ (34005b30 <HAL_RCCEx_PeriphCLKConfig+0xb34>)
3400596e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005972:	4291      	cmp	r1, r2
34005974:	d00a      	beq.n	3400598c <HAL_RCCEx_PeriphCLKConfig+0x990>
34005976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400597a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400597e:	4293      	cmp	r3, r2
34005980:	d004      	beq.n	3400598c <HAL_RCCEx_PeriphCLKConfig+0x990>
34005982:	f240 313d 	movw	r1, #829	@ 0x33d
34005986:	4868      	ldr	r0, [pc, #416]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005988:	f7fb fbc0 	bl	3400110c <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
3400598c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005990:	4a68      	ldr	r2, [pc, #416]	@ (34005b34 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
34005992:	4293      	cmp	r3, r2
34005994:	f041 8508 	bne.w	340073a8 <HAL_RCCEx_PeriphCLKConfig+0x23ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005998:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3400599a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400599e:	d004      	beq.n	340059aa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
340059a0:	f240 3142 	movw	r1, #834	@ 0x342
340059a4:	4860      	ldr	r0, [pc, #384]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340059a6:	f7fb fbb1 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340059aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340059ac:	3b01      	subs	r3, #1
340059ae:	2bff      	cmp	r3, #255	@ 0xff
340059b0:	d904      	bls.n	340059bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>
340059b2:	f240 3143 	movw	r1, #835	@ 0x343
340059b6:	485c      	ldr	r0, [pc, #368]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340059b8:	f7fb fba8 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340059bc:	4a5b      	ldr	r2, [pc, #364]	@ (34005b2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
340059be:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340059c0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340059c4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340059c6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340059ca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340059ce:	3901      	subs	r1, #1
340059d0:	4303      	orrs	r3, r0
340059d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340059d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340059da:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340059de:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340059e2:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
340059e6:	f7ff fa25 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
340059ea:	6823      	ldr	r3, [r4, #0]
340059ec:	0499      	lsls	r1, r3, #18
340059ee:	d540      	bpl.n	34005a72 <HAL_RCCEx_PeriphCLKConfig+0xa76>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
340059f0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
340059f4:	4a50      	ldr	r2, [pc, #320]	@ (34005b38 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
340059f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340059fa:	4291      	cmp	r1, r2
340059fc:	d00a      	beq.n	34005a14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
340059fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005a02:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005a06:	4293      	cmp	r3, r2
34005a08:	d004      	beq.n	34005a14 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34005a0a:	f240 316a 	movw	r1, #874	@ 0x36a
34005a0e:	4846      	ldr	r0, [pc, #280]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005a10:	f7fb fb7c 	bl	3400110c <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34005a14:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34005a18:	4a48      	ldr	r2, [pc, #288]	@ (34005b3c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
34005a1a:	4293      	cmp	r3, r2
34005a1c:	f041 84f5 	bne.w	3400740a <HAL_RCCEx_PeriphCLKConfig+0x240e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005a20:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005a22:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005a26:	d004      	beq.n	34005a32 <HAL_RCCEx_PeriphCLKConfig+0xa36>
34005a28:	f240 316f 	movw	r1, #879	@ 0x36f
34005a2c:	483e      	ldr	r0, [pc, #248]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005a2e:	f7fb fb6d 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005a32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005a34:	3b01      	subs	r3, #1
34005a36:	2bff      	cmp	r3, #255	@ 0xff
34005a38:	d904      	bls.n	34005a44 <HAL_RCCEx_PeriphCLKConfig+0xa48>
34005a3a:	f44f 715c 	mov.w	r1, #880	@ 0x370
34005a3e:	483a      	ldr	r0, [pc, #232]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005a40:	f7fb fb64 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005a44:	4a39      	ldr	r2, [pc, #228]	@ (34005b2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005a46:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005a48:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005a4c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005a4e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005a52:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005a56:	3901      	subs	r1, #1
34005a58:	4303      	orrs	r3, r0
34005a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005a5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005a62:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005a66:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005a6a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34005a6e:	f7ff f9e1 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34005a72:	6823      	ldr	r3, [r4, #0]
34005a74:	045a      	lsls	r2, r3, #17
34005a76:	d540      	bpl.n	34005afa <HAL_RCCEx_PeriphCLKConfig+0xafe>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34005a78:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005a7c:	4a30      	ldr	r2, [pc, #192]	@ (34005b40 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
34005a7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005a82:	4291      	cmp	r1, r2
34005a84:	d00a      	beq.n	34005a9c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34005a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005a8a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005a8e:	4293      	cmp	r3, r2
34005a90:	d004      	beq.n	34005a9c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34005a92:	f240 3197 	movw	r1, #919	@ 0x397
34005a96:	4824      	ldr	r0, [pc, #144]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005a98:	f7fb fb38 	bl	3400110c <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34005a9c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005aa0:	4a28      	ldr	r2, [pc, #160]	@ (34005b44 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
34005aa2:	4293      	cmp	r3, r2
34005aa4:	f041 84f6 	bne.w	34007494 <HAL_RCCEx_PeriphCLKConfig+0x2498>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005aa8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005aaa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005aae:	d004      	beq.n	34005aba <HAL_RCCEx_PeriphCLKConfig+0xabe>
34005ab0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34005ab4:	481c      	ldr	r0, [pc, #112]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005ab6:	f7fb fb29 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005aba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005abc:	3b01      	subs	r3, #1
34005abe:	2bff      	cmp	r3, #255	@ 0xff
34005ac0:	d904      	bls.n	34005acc <HAL_RCCEx_PeriphCLKConfig+0xad0>
34005ac2:	f240 319d 	movw	r1, #925	@ 0x39d
34005ac6:	4818      	ldr	r0, [pc, #96]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005ac8:	f7fb fb20 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005acc:	4a17      	ldr	r2, [pc, #92]	@ (34005b2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005ace:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005ad0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005ad4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005ad6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005ada:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005ade:	3901      	subs	r1, #1
34005ae0:	4303      	orrs	r3, r0
34005ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005ae6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005aee:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005af2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
34005af6:	f7ff f99d 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34005afa:	6823      	ldr	r3, [r4, #0]
34005afc:	041b      	lsls	r3, r3, #16
34005afe:	d554      	bpl.n	34005baa <HAL_RCCEx_PeriphCLKConfig+0xbae>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34005b00:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005b04:	4a10      	ldr	r2, [pc, #64]	@ (34005b48 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
34005b06:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005b0a:	4291      	cmp	r1, r2
34005b0c:	d01e      	beq.n	34005b4c <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005b12:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005b16:	4293      	cmp	r3, r2
34005b18:	d018      	beq.n	34005b4c <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005b1a:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34005b1e:	4802      	ldr	r0, [pc, #8]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b20:	f7fb faf4 	bl	3400110c <assert_failed>
34005b24:	e012      	b.n	34005b4c <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005b26:	bf00      	nop
34005b28:	3400ef5e 	.word	0x3400ef5e
34005b2c:	56028000 	.word	0x56028000
34005b30:	0700000c 	.word	0x0700000c
34005b34:	0702000c 	.word	0x0702000c
34005b38:	0700040c 	.word	0x0700040c
34005b3c:	0702040c 	.word	0x0702040c
34005b40:	0700080c 	.word	0x0700080c
34005b44:	0702080c 	.word	0x0702080c
34005b48:	07000c0c 	.word	0x07000c0c
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34005b4c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005b50:	4abd      	ldr	r2, [pc, #756]	@ (34005e48 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
34005b52:	4293      	cmp	r3, r2
34005b54:	f041 84cf 	bne.w	340074f6 <HAL_RCCEx_PeriphCLKConfig+0x24fa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005b58:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005b5a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005b5e:	d004      	beq.n	34005b6a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
34005b60:	f240 31c9 	movw	r1, #969	@ 0x3c9
34005b64:	48b9      	ldr	r0, [pc, #740]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005b66:	f7fb fad1 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005b6a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005b6c:	3b01      	subs	r3, #1
34005b6e:	2bff      	cmp	r3, #255	@ 0xff
34005b70:	d904      	bls.n	34005b7c <HAL_RCCEx_PeriphCLKConfig+0xb80>
34005b72:	f240 31ca 	movw	r1, #970	@ 0x3ca
34005b76:	48b5      	ldr	r0, [pc, #724]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005b78:	f7fb fac8 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005b7c:	4ab4      	ldr	r2, [pc, #720]	@ (34005e50 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005b7e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005b80:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005b84:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005b86:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005b8a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005b8e:	3901      	subs	r1, #1
34005b90:	4303      	orrs	r3, r0
34005b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005b96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005b9e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005ba2:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
34005ba6:	f7ff f945 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34005baa:	6823      	ldr	r3, [r4, #0]
34005bac:	03de      	lsls	r6, r3, #15
34005bae:	d540      	bpl.n	34005c32 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34005bb0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34005bb4:	4aa7      	ldr	r2, [pc, #668]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
34005bb6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005bba:	4291      	cmp	r1, r2
34005bbc:	d00a      	beq.n	34005bd4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34005bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005bc2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005bc6:	4293      	cmp	r3, r2
34005bc8:	d004      	beq.n	34005bd4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34005bca:	f240 31f1 	movw	r1, #1009	@ 0x3f1
34005bce:	489f      	ldr	r0, [pc, #636]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005bd0:	f7fb fa9c 	bl	3400110c <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34005bd4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34005bd8:	4a9f      	ldr	r2, [pc, #636]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
34005bda:	4293      	cmp	r3, r2
34005bdc:	f041 84bc 	bne.w	34007558 <HAL_RCCEx_PeriphCLKConfig+0x255c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005be0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005be2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005be6:	d004      	beq.n	34005bf2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
34005be8:	f240 31f6 	movw	r1, #1014	@ 0x3f6
34005bec:	4897      	ldr	r0, [pc, #604]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005bee:	f7fb fa8d 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005bf2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005bf4:	3b01      	subs	r3, #1
34005bf6:	2bff      	cmp	r3, #255	@ 0xff
34005bf8:	d904      	bls.n	34005c04 <HAL_RCCEx_PeriphCLKConfig+0xc08>
34005bfa:	f240 31f7 	movw	r1, #1015	@ 0x3f7
34005bfe:	4893      	ldr	r0, [pc, #588]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005c00:	f7fb fa84 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005c04:	4a92      	ldr	r2, [pc, #584]	@ (34005e50 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005c06:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005c08:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005c0c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005c0e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005c12:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005c16:	3901      	subs	r1, #1
34005c18:	4303      	orrs	r3, r0
34005c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005c26:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005c2a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34005c2e:	f7ff f901 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34005c32:	6823      	ldr	r3, [r4, #0]
34005c34:	0398      	lsls	r0, r3, #14
34005c36:	d540      	bpl.n	34005cba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34005c38:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34005c3c:	4a87      	ldr	r2, [pc, #540]	@ (34005e5c <HAL_RCCEx_PeriphCLKConfig+0xe60>)
34005c3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005c42:	4291      	cmp	r1, r2
34005c44:	d00a      	beq.n	34005c5c <HAL_RCCEx_PeriphCLKConfig+0xc60>
34005c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005c4a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005c4e:	4293      	cmp	r3, r2
34005c50:	d004      	beq.n	34005c5c <HAL_RCCEx_PeriphCLKConfig+0xc60>
34005c52:	f240 411e 	movw	r1, #1054	@ 0x41e
34005c56:	487d      	ldr	r0, [pc, #500]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005c58:	f7fb fa58 	bl	3400110c <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34005c5c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34005c60:	4a7f      	ldr	r2, [pc, #508]	@ (34005e60 <HAL_RCCEx_PeriphCLKConfig+0xe64>)
34005c62:	4293      	cmp	r3, r2
34005c64:	f041 84a9 	bne.w	340075ba <HAL_RCCEx_PeriphCLKConfig+0x25be>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005c68:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005c6a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005c6e:	d004      	beq.n	34005c7a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
34005c70:	f240 4123 	movw	r1, #1059	@ 0x423
34005c74:	4875      	ldr	r0, [pc, #468]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005c76:	f7fb fa49 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005c7a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005c7c:	3b01      	subs	r3, #1
34005c7e:	2bff      	cmp	r3, #255	@ 0xff
34005c80:	d904      	bls.n	34005c8c <HAL_RCCEx_PeriphCLKConfig+0xc90>
34005c82:	f240 4124 	movw	r1, #1060	@ 0x424
34005c86:	4871      	ldr	r0, [pc, #452]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005c88:	f7fb fa40 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005c8c:	4a70      	ldr	r2, [pc, #448]	@ (34005e50 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005c8e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005c90:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005c94:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005c96:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005c9a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005c9e:	3901      	subs	r1, #1
34005ca0:	4303      	orrs	r3, r0
34005ca2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005caa:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005cae:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005cb2:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
34005cb6:	f7ff f8bd 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34005cba:	6823      	ldr	r3, [r4, #0]
34005cbc:	0359      	lsls	r1, r3, #13
34005cbe:	d540      	bpl.n	34005d42 <HAL_RCCEx_PeriphCLKConfig+0xd46>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
34005cc0:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34005cc4:	4a67      	ldr	r2, [pc, #412]	@ (34005e64 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
34005cc6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005cca:	4291      	cmp	r1, r2
34005ccc:	d00a      	beq.n	34005ce4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
34005cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005cd2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005cd6:	4293      	cmp	r3, r2
34005cd8:	d004      	beq.n	34005ce4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
34005cda:	f240 414b 	movw	r1, #1099	@ 0x44b
34005cde:	485b      	ldr	r0, [pc, #364]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005ce0:	f7fb fa14 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34005ce4:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34005ce8:	4a5f      	ldr	r2, [pc, #380]	@ (34005e68 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
34005cea:	4293      	cmp	r3, r2
34005cec:	f041 8496 	bne.w	3400761c <HAL_RCCEx_PeriphCLKConfig+0x2620>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005cf0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005cf2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005cf6:	d004      	beq.n	34005d02 <HAL_RCCEx_PeriphCLKConfig+0xd06>
34005cf8:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34005cfc:	4853      	ldr	r0, [pc, #332]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005cfe:	f7fb fa05 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005d02:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005d04:	3b01      	subs	r3, #1
34005d06:	2bff      	cmp	r3, #255	@ 0xff
34005d08:	d904      	bls.n	34005d14 <HAL_RCCEx_PeriphCLKConfig+0xd18>
34005d0a:	f240 4151 	movw	r1, #1105	@ 0x451
34005d0e:	484f      	ldr	r0, [pc, #316]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005d10:	f7fb f9fc 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005d14:	4a4e      	ldr	r2, [pc, #312]	@ (34005e50 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005d16:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005d18:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005d1c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005d1e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005d22:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005d26:	3901      	subs	r1, #1
34005d28:	4303      	orrs	r3, r0
34005d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005d2e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005d32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005d36:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005d3a:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
34005d3e:	f7ff f879 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34005d42:	6823      	ldr	r3, [r4, #0]
34005d44:	031a      	lsls	r2, r3, #12
34005d46:	d540      	bpl.n	34005dca <HAL_RCCEx_PeriphCLKConfig+0xdce>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
34005d48:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34005d4c:	4a47      	ldr	r2, [pc, #284]	@ (34005e6c <HAL_RCCEx_PeriphCLKConfig+0xe70>)
34005d4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005d52:	4291      	cmp	r1, r2
34005d54:	d00a      	beq.n	34005d6c <HAL_RCCEx_PeriphCLKConfig+0xd70>
34005d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005d5a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005d5e:	4293      	cmp	r3, r2
34005d60:	d004      	beq.n	34005d6c <HAL_RCCEx_PeriphCLKConfig+0xd70>
34005d62:	f240 416b 	movw	r1, #1131	@ 0x46b
34005d66:	4839      	ldr	r0, [pc, #228]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005d68:	f7fb f9d0 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34005d6c:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34005d70:	4a3f      	ldr	r2, [pc, #252]	@ (34005e70 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
34005d72:	4293      	cmp	r3, r2
34005d74:	f041 845b 	bne.w	3400762e <HAL_RCCEx_PeriphCLKConfig+0x2632>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005d78:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005d7a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005d7e:	d004      	beq.n	34005d8a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
34005d80:	f44f 618e 	mov.w	r1, #1136	@ 0x470
34005d84:	4831      	ldr	r0, [pc, #196]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005d86:	f7fb f9c1 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005d8a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005d8c:	3b01      	subs	r3, #1
34005d8e:	2bff      	cmp	r3, #255	@ 0xff
34005d90:	d904      	bls.n	34005d9c <HAL_RCCEx_PeriphCLKConfig+0xda0>
34005d92:	f240 4171 	movw	r1, #1137	@ 0x471
34005d96:	482d      	ldr	r0, [pc, #180]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005d98:	f7fb f9b8 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005d9c:	4a2c      	ldr	r2, [pc, #176]	@ (34005e50 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005d9e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005da0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005da4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005da6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005daa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005dae:	3901      	subs	r1, #1
34005db0:	4303      	orrs	r3, r0
34005db2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005db6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005dba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005dbe:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005dc2:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
34005dc6:	f7ff f835 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34005dca:	6823      	ldr	r3, [r4, #0]
34005dcc:	02db      	lsls	r3, r3, #11
34005dce:	d55b      	bpl.n	34005e88 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
34005dd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34005dd4:	4a27      	ldr	r2, [pc, #156]	@ (34005e74 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
34005dd6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005dda:	4291      	cmp	r1, r2
34005ddc:	d00a      	beq.n	34005df4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34005dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005de2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005de6:	4293      	cmp	r3, r2
34005de8:	d004      	beq.n	34005df4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34005dea:	f240 418b 	movw	r1, #1163	@ 0x48b
34005dee:	4817      	ldr	r0, [pc, #92]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005df0:	f7fb f98c 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34005df4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34005df8:	4a1f      	ldr	r2, [pc, #124]	@ (34005e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
34005dfa:	4293      	cmp	r3, r2
34005dfc:	f041 8420 	bne.w	34007640 <HAL_RCCEx_PeriphCLKConfig+0x2644>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005e00:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005e02:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005e06:	d004      	beq.n	34005e12 <HAL_RCCEx_PeriphCLKConfig+0xe16>
34005e08:	f44f 6192 	mov.w	r1, #1168	@ 0x490
34005e0c:	480f      	ldr	r0, [pc, #60]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005e0e:	f7fb f97d 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005e12:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005e14:	3b01      	subs	r3, #1
34005e16:	2bff      	cmp	r3, #255	@ 0xff
34005e18:	d904      	bls.n	34005e24 <HAL_RCCEx_PeriphCLKConfig+0xe28>
34005e1a:	f240 4191 	movw	r1, #1169	@ 0x491
34005e1e:	480b      	ldr	r0, [pc, #44]	@ (34005e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005e20:	f7fb f974 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005e24:	4a0a      	ldr	r2, [pc, #40]	@ (34005e50 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005e26:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005e28:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005e2c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005e2e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005e32:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005e36:	3901      	subs	r1, #1
34005e38:	4303      	orrs	r3, r0
34005e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005e3e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005e42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005e46:	e019      	b.n	34005e7c <HAL_RCCEx_PeriphCLKConfig+0xe80>
34005e48:	07020c0c 	.word	0x07020c0c
34005e4c:	3400ef5e 	.word	0x3400ef5e
34005e50:	56028000 	.word	0x56028000
34005e54:	0700100c 	.word	0x0700100c
34005e58:	0702100c 	.word	0x0702100c
34005e5c:	0700140c 	.word	0x0700140c
34005e60:	0702140c 	.word	0x0702140c
34005e64:	0700082c 	.word	0x0700082c
34005e68:	0702082c 	.word	0x0702082c
34005e6c:	07000c2c 	.word	0x07000c2c
34005e70:	07020c2c 	.word	0x07020c2c
34005e74:	0700102c 	.word	0x0700102c
34005e78:	0702102c 	.word	0x0702102c
34005e7c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005e80:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
34005e84:	f7fe ffd6 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34005e88:	6823      	ldr	r3, [r4, #0]
34005e8a:	029e      	lsls	r6, r3, #10
34005e8c:	d540      	bpl.n	34005f10 <HAL_RCCEx_PeriphCLKConfig+0xf14>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
34005e8e:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34005e92:	4ac2      	ldr	r2, [pc, #776]	@ (3400619c <HAL_RCCEx_PeriphCLKConfig+0x11a0>)
34005e94:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005e98:	4291      	cmp	r1, r2
34005e9a:	d00a      	beq.n	34005eb2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34005e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005ea0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005ea4:	4293      	cmp	r3, r2
34005ea6:	d004      	beq.n	34005eb2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34005ea8:	f240 41ab 	movw	r1, #1195	@ 0x4ab
34005eac:	48bc      	ldr	r0, [pc, #752]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34005eae:	f7fb f92d 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34005eb2:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34005eb6:	4abb      	ldr	r2, [pc, #748]	@ (340061a4 <HAL_RCCEx_PeriphCLKConfig+0x11a8>)
34005eb8:	4293      	cmp	r3, r2
34005eba:	f041 83ca 	bne.w	34007652 <HAL_RCCEx_PeriphCLKConfig+0x2656>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005ebe:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005ec0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005ec4:	d004      	beq.n	34005ed0 <HAL_RCCEx_PeriphCLKConfig+0xed4>
34005ec6:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
34005eca:	48b5      	ldr	r0, [pc, #724]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34005ecc:	f7fb f91e 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005ed0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005ed2:	3b01      	subs	r3, #1
34005ed4:	2bff      	cmp	r3, #255	@ 0xff
34005ed6:	d904      	bls.n	34005ee2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
34005ed8:	f240 41b1 	movw	r1, #1201	@ 0x4b1
34005edc:	48b0      	ldr	r0, [pc, #704]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34005ede:	f7fb f915 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005ee2:	4ab1      	ldr	r2, [pc, #708]	@ (340061a8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34005ee4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005ee6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005eea:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005eec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005ef0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005ef4:	3901      	subs	r1, #1
34005ef6:	4303      	orrs	r3, r0
34005ef8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005efc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005f00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005f04:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005f08:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
34005f0c:	f7fe ff92 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34005f10:	6823      	ldr	r3, [r4, #0]
34005f12:	0258      	lsls	r0, r3, #9
34005f14:	d540      	bpl.n	34005f98 <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
34005f16:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34005f1a:	4aa4      	ldr	r2, [pc, #656]	@ (340061ac <HAL_RCCEx_PeriphCLKConfig+0x11b0>)
34005f1c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005f20:	4291      	cmp	r1, r2
34005f22:	d00a      	beq.n	34005f3a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34005f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005f28:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005f2c:	4293      	cmp	r3, r2
34005f2e:	d004      	beq.n	34005f3a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34005f30:	f240 41cb 	movw	r1, #1227	@ 0x4cb
34005f34:	489a      	ldr	r0, [pc, #616]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34005f36:	f7fb f8e9 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34005f3a:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34005f3e:	4a9c      	ldr	r2, [pc, #624]	@ (340061b0 <HAL_RCCEx_PeriphCLKConfig+0x11b4>)
34005f40:	4293      	cmp	r3, r2
34005f42:	f041 838f 	bne.w	34007664 <HAL_RCCEx_PeriphCLKConfig+0x2668>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005f46:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005f48:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005f4c:	d004      	beq.n	34005f58 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
34005f4e:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
34005f52:	4893      	ldr	r0, [pc, #588]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34005f54:	f7fb f8da 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005f58:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005f5a:	3b01      	subs	r3, #1
34005f5c:	2bff      	cmp	r3, #255	@ 0xff
34005f5e:	d904      	bls.n	34005f6a <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34005f60:	f240 41d1 	movw	r1, #1233	@ 0x4d1
34005f64:	488e      	ldr	r0, [pc, #568]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34005f66:	f7fb f8d1 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005f6a:	4a8f      	ldr	r2, [pc, #572]	@ (340061a8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34005f6c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005f6e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005f72:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005f74:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005f78:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005f7c:	3901      	subs	r1, #1
34005f7e:	4303      	orrs	r3, r0
34005f80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005f84:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005f88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005f8c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005f90:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
34005f94:	f7fe ff4e 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34005f98:	6823      	ldr	r3, [r4, #0]
34005f9a:	0219      	lsls	r1, r3, #8
34005f9c:	d546      	bpl.n	3400602c <HAL_RCCEx_PeriphCLKConfig+0x1030>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
34005f9e:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
34005fa2:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
34005fa6:	d00c      	beq.n	34005fc2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34005fa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34005fac:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
34005fb0:	d007      	beq.n	34005fc2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34005fb2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34005fb6:	d004      	beq.n	34005fc2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34005fb8:	f240 41eb 	movw	r1, #1259	@ 0x4eb
34005fbc:	4878      	ldr	r0, [pc, #480]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34005fbe:	f7fb f8a5 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34005fc2:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
34005fc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34005fca:	f041 8354 	bne.w	34007676 <HAL_RCCEx_PeriphCLKConfig+0x267a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34005fce:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34005fd0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005fd4:	d004      	beq.n	34005fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
34005fd6:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
34005fda:	4871      	ldr	r0, [pc, #452]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34005fdc:	f7fb f896 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34005fe0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34005fe2:	3b01      	subs	r3, #1
34005fe4:	2bff      	cmp	r3, #255	@ 0xff
34005fe6:	d904      	bls.n	34005ff2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
34005fe8:	f240 41f1 	movw	r1, #1265	@ 0x4f1
34005fec:	486c      	ldr	r0, [pc, #432]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34005fee:	f7fb f88d 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005ff2:	4a6d      	ldr	r2, [pc, #436]	@ (340061a8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34005ff4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005ff6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34005ffa:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34005ffc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006000:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006004:	3901      	subs	r1, #1
34006006:	4303      	orrs	r3, r0
34006008:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400600c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006010:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006014:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34006018:	4a63      	ldr	r2, [pc, #396]	@ (340061a8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400601a:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
3400601e:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34006022:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
34006026:	430b      	orrs	r3, r1
34006028:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
3400602c:	6823      	ldr	r3, [r4, #0]
3400602e:	01da      	lsls	r2, r3, #7
34006030:	d542      	bpl.n	340060b8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
34006032:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
34006036:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
3400603a:	d004      	beq.n	34006046 <HAL_RCCEx_PeriphCLKConfig+0x104a>
3400603c:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
34006040:	4857      	ldr	r0, [pc, #348]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006042:	f7fb f863 	bl	3400110c <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34006046:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
3400604a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400604e:	f041 8343 	bne.w	340076d8 <HAL_RCCEx_PeriphCLKConfig+0x26dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
34006052:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34006056:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400605a:	d004      	beq.n	34006066 <HAL_RCCEx_PeriphCLKConfig+0x106a>
3400605c:	f240 511d 	movw	r1, #1309	@ 0x51d
34006060:	484f      	ldr	r0, [pc, #316]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006062:	f7fb f853 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
34006066:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
3400606a:	3b01      	subs	r3, #1
3400606c:	2bff      	cmp	r3, #255	@ 0xff
3400606e:	d904      	bls.n	3400607a <HAL_RCCEx_PeriphCLKConfig+0x107e>
34006070:	f240 511e 	movw	r1, #1310	@ 0x51e
34006074:	484a      	ldr	r0, [pc, #296]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006076:	f7fb f849 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3400607a:	4a4b      	ldr	r2, [pc, #300]	@ (340061a8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400607c:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
34006080:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
34006084:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
34006088:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400608c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006090:	3901      	subs	r1, #1
34006092:	4303      	orrs	r3, r0
34006094:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006098:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
3400609c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340060a0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340060a4:	4a40      	ldr	r2, [pc, #256]	@ (340061a8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340060a6:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
340060aa:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
340060ae:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
340060b2:	430b      	orrs	r3, r1
340060b4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
340060b8:	6823      	ldr	r3, [r4, #0]
340060ba:	019b      	lsls	r3, r3, #6
340060bc:	d540      	bpl.n	34006140 <HAL_RCCEx_PeriphCLKConfig+0x1144>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
340060be:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340060c2:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340060c6:	d007      	beq.n	340060d8 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
340060c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340060cc:	d004      	beq.n	340060d8 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
340060ce:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
340060d2:	4833      	ldr	r0, [pc, #204]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340060d4:	f7fb f81a 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
340060d8:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340060dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340060e0:	f041 8303 	bne.w	340076ea <HAL_RCCEx_PeriphCLKConfig+0x26ee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340060e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340060e6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340060ea:	d004      	beq.n	340060f6 <HAL_RCCEx_PeriphCLKConfig+0x10fa>
340060ec:	f240 513d 	movw	r1, #1341	@ 0x53d
340060f0:	482b      	ldr	r0, [pc, #172]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340060f2:	f7fb f80b 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340060f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340060f8:	3b01      	subs	r3, #1
340060fa:	2bff      	cmp	r3, #255	@ 0xff
340060fc:	d904      	bls.n	34006108 <HAL_RCCEx_PeriphCLKConfig+0x110c>
340060fe:	f240 513e 	movw	r1, #1342	@ 0x53e
34006102:	4827      	ldr	r0, [pc, #156]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006104:	f7fb f802 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006108:	4a27      	ldr	r2, [pc, #156]	@ (340061a8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400610a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400610c:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006110:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006112:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006116:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400611a:	3901      	subs	r1, #1
3400611c:	4303      	orrs	r3, r0
3400611e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006122:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006126:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006128:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
3400612c:	4a1e      	ldr	r2, [pc, #120]	@ (340061a8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400612e:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
34006132:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
34006136:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3400613a:	430b      	orrs	r3, r1
3400613c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34006140:	6823      	ldr	r3, [r4, #0]
34006142:	015e      	lsls	r6, r3, #5
34006144:	d54e      	bpl.n	340061e4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
34006146:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
3400614a:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400614e:	d004      	beq.n	3400615a <HAL_RCCEx_PeriphCLKConfig+0x115e>
34006150:	f240 5165 	movw	r1, #1381	@ 0x565
34006154:	4812      	ldr	r0, [pc, #72]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006156:	f7fa ffd9 	bl	3400110c <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3400615a:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
3400615e:	2b20      	cmp	r3, #32
34006160:	f041 82f3 	bne.w	3400774a <HAL_RCCEx_PeriphCLKConfig+0x274e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34006164:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34006168:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400616c:	d004      	beq.n	34006178 <HAL_RCCEx_PeriphCLKConfig+0x117c>
3400616e:	f240 516a 	movw	r1, #1386	@ 0x56a
34006172:	480b      	ldr	r0, [pc, #44]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006174:	f7fa ffca 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34006178:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
3400617c:	3b01      	subs	r3, #1
3400617e:	2bff      	cmp	r3, #255	@ 0xff
34006180:	d904      	bls.n	3400618c <HAL_RCCEx_PeriphCLKConfig+0x1190>
34006182:	f240 516b 	movw	r1, #1387	@ 0x56b
34006186:	4806      	ldr	r0, [pc, #24]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006188:	f7fa ffc0 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400618c:	4a06      	ldr	r2, [pc, #24]	@ (340061a8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400618e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34006192:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
34006196:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
3400619a:	e00b      	b.n	340061b4 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
3400619c:	0700142c 	.word	0x0700142c
340061a0:	3400ef5e 	.word	0x3400ef5e
340061a4:	0702142c 	.word	0x0702142c
340061a8:	56028000 	.word	0x56028000
340061ac:	0700182c 	.word	0x0700182c
340061b0:	0702182c 	.word	0x0702182c
340061b4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340061b8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340061bc:	3901      	subs	r1, #1
340061be:	4303      	orrs	r3, r0
340061c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340061c4:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340061c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
340061cc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
340061d0:	4abc      	ldr	r2, [pc, #752]	@ (340064c4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340061d2:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
340061d6:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340061da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340061de:	430b      	orrs	r3, r1
340061e0:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
340061e4:	6823      	ldr	r3, [r4, #0]
340061e6:	00d8      	lsls	r0, r3, #3
340061e8:	d53d      	bpl.n	34006266 <HAL_RCCEx_PeriphCLKConfig+0x126a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
340061ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340061ee:	4ab6      	ldr	r2, [pc, #728]	@ (340064c8 <HAL_RCCEx_PeriphCLKConfig+0x14cc>)
340061f0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340061f4:	4293      	cmp	r3, r2
340061f6:	d008      	beq.n	3400620a <HAL_RCCEx_PeriphCLKConfig+0x120e>
340061f8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340061fc:	4293      	cmp	r3, r2
340061fe:	d004      	beq.n	3400620a <HAL_RCCEx_PeriphCLKConfig+0x120e>
34006200:	f240 5185 	movw	r1, #1413	@ 0x585
34006204:	48b1      	ldr	r0, [pc, #708]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006206:	f7fa ff81 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3400620a:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
3400620e:	4ab0      	ldr	r2, [pc, #704]	@ (340064d0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>)
34006210:	4293      	cmp	r3, r2
34006212:	f041 82c1 	bne.w	34007798 <HAL_RCCEx_PeriphCLKConfig+0x279c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34006216:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006218:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400621c:	d004      	beq.n	34006228 <HAL_RCCEx_PeriphCLKConfig+0x122c>
3400621e:	f240 518a 	movw	r1, #1418	@ 0x58a
34006222:	48aa      	ldr	r0, [pc, #680]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006224:	f7fa ff72 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006228:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400622a:	3b01      	subs	r3, #1
3400622c:	2bff      	cmp	r3, #255	@ 0xff
3400622e:	d904      	bls.n	3400623a <HAL_RCCEx_PeriphCLKConfig+0x123e>
34006230:	f240 518b 	movw	r1, #1419	@ 0x58b
34006234:	48a5      	ldr	r0, [pc, #660]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006236:	f7fa ff69 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400623a:	4aa2      	ldr	r2, [pc, #648]	@ (340064c4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3400623c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400623e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006242:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006244:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006248:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400624c:	3901      	subs	r1, #1
3400624e:	4303      	orrs	r3, r0
34006250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006254:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006258:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400625a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400625e:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
34006262:	f7fe fde7 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34006266:	6823      	ldr	r3, [r4, #0]
34006268:	0099      	lsls	r1, r3, #2
3400626a:	d53d      	bpl.n	340062e8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
3400626c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34006270:	4a98      	ldr	r2, [pc, #608]	@ (340064d4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>)
34006272:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34006276:	4293      	cmp	r3, r2
34006278:	d008      	beq.n	3400628c <HAL_RCCEx_PeriphCLKConfig+0x1290>
3400627a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400627e:	4293      	cmp	r3, r2
34006280:	d004      	beq.n	3400628c <HAL_RCCEx_PeriphCLKConfig+0x1290>
34006282:	f240 51b2 	movw	r1, #1458	@ 0x5b2
34006286:	4891      	ldr	r0, [pc, #580]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006288:	f7fa ff40 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3400628c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34006290:	4a91      	ldr	r2, [pc, #580]	@ (340064d8 <HAL_RCCEx_PeriphCLKConfig+0x14dc>)
34006292:	4293      	cmp	r3, r2
34006294:	f041 82b0 	bne.w	340077f8 <HAL_RCCEx_PeriphCLKConfig+0x27fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34006298:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400629a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400629e:	d004      	beq.n	340062aa <HAL_RCCEx_PeriphCLKConfig+0x12ae>
340062a0:	f240 51b7 	movw	r1, #1463	@ 0x5b7
340062a4:	4889      	ldr	r0, [pc, #548]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340062a6:	f7fa ff31 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340062aa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340062ac:	3b01      	subs	r3, #1
340062ae:	2bff      	cmp	r3, #255	@ 0xff
340062b0:	d904      	bls.n	340062bc <HAL_RCCEx_PeriphCLKConfig+0x12c0>
340062b2:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
340062b6:	4885      	ldr	r0, [pc, #532]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340062b8:	f7fa ff28 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340062bc:	4a81      	ldr	r2, [pc, #516]	@ (340064c4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340062be:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340062c0:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340062c4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340062c6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340062ca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340062ce:	3901      	subs	r1, #1
340062d0:	4303      	orrs	r3, r0
340062d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340062d6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340062da:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340062dc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340062e0:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
340062e4:	f7fe fda6 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
340062e8:	6863      	ldr	r3, [r4, #4]
340062ea:	07da      	lsls	r2, r3, #31
340062ec:	d53b      	bpl.n	34006366 <HAL_RCCEx_PeriphCLKConfig+0x136a>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
340062ee:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
340062f2:	2b06      	cmp	r3, #6
340062f4:	d904      	bls.n	34006300 <HAL_RCCEx_PeriphCLKConfig+0x1304>
340062f6:	f240 51df 	movw	r1, #1503	@ 0x5df
340062fa:	4874      	ldr	r0, [pc, #464]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340062fc:	f7fa ff06 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34006300:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
34006304:	2b02      	cmp	r3, #2
34006306:	f041 82a7 	bne.w	34007858 <HAL_RCCEx_PeriphCLKConfig+0x285c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400630a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400630c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006310:	d004      	beq.n	3400631c <HAL_RCCEx_PeriphCLKConfig+0x1320>
34006312:	f240 51e4 	movw	r1, #1508	@ 0x5e4
34006316:	486d      	ldr	r0, [pc, #436]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006318:	f7fa fef8 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400631c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400631e:	3b01      	subs	r3, #1
34006320:	2bff      	cmp	r3, #255	@ 0xff
34006322:	d904      	bls.n	3400632e <HAL_RCCEx_PeriphCLKConfig+0x1332>
34006324:	f240 51e5 	movw	r1, #1509	@ 0x5e5
34006328:	4868      	ldr	r0, [pc, #416]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400632a:	f7fa feef 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400632e:	4a65      	ldr	r2, [pc, #404]	@ (340064c4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006330:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006332:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006336:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006338:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400633c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006340:	3901      	subs	r1, #1
34006342:	4303      	orrs	r3, r0
34006344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006348:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400634c:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400634e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34006352:	4a5c      	ldr	r2, [pc, #368]	@ (340064c4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006354:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
34006358:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
3400635c:	f023 0307 	bic.w	r3, r3, #7
34006360:	430b      	orrs	r3, r1
34006362:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
34006366:	6863      	ldr	r3, [r4, #4]
34006368:	079b      	lsls	r3, r3, #30
3400636a:	d543      	bpl.n	340063f4 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
3400636c:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34006370:	4a5a      	ldr	r2, [pc, #360]	@ (340064dc <HAL_RCCEx_PeriphCLKConfig+0x14e0>)
34006372:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006376:	4291      	cmp	r1, r2
34006378:	d00e      	beq.n	34006398 <HAL_RCCEx_PeriphCLKConfig+0x139c>
3400637a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400637e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006382:	4291      	cmp	r1, r2
34006384:	d008      	beq.n	34006398 <HAL_RCCEx_PeriphCLKConfig+0x139c>
34006386:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400638a:	4293      	cmp	r3, r2
3400638c:	d004      	beq.n	34006398 <HAL_RCCEx_PeriphCLKConfig+0x139c>
3400638e:	f240 610c 	movw	r1, #1548	@ 0x60c
34006392:	484e      	ldr	r0, [pc, #312]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006394:	f7fa feba 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34006398:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
3400639c:	4a50      	ldr	r2, [pc, #320]	@ (340064e0 <HAL_RCCEx_PeriphCLKConfig+0x14e4>)
3400639e:	4293      	cmp	r3, r2
340063a0:	f041 8288 	bne.w	340078b4 <HAL_RCCEx_PeriphCLKConfig+0x28b8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340063a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340063a6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340063aa:	d004      	beq.n	340063b6 <HAL_RCCEx_PeriphCLKConfig+0x13ba>
340063ac:	f240 6111 	movw	r1, #1553	@ 0x611
340063b0:	4846      	ldr	r0, [pc, #280]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340063b2:	f7fa feab 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340063b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340063b8:	3b01      	subs	r3, #1
340063ba:	2bff      	cmp	r3, #255	@ 0xff
340063bc:	d904      	bls.n	340063c8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
340063be:	f240 6112 	movw	r1, #1554	@ 0x612
340063c2:	4842      	ldr	r0, [pc, #264]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340063c4:	f7fa fea2 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340063c8:	4a3e      	ldr	r2, [pc, #248]	@ (340064c4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340063ca:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340063cc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340063d0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340063d2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340063d6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340063da:	3901      	subs	r1, #1
340063dc:	4303      	orrs	r3, r0
340063de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340063e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340063e6:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340063e8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340063ec:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
340063f0:	f7fe fd20 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
340063f4:	6863      	ldr	r3, [r4, #4]
340063f6:	075e      	lsls	r6, r3, #29
340063f8:	d543      	bpl.n	34006482 <HAL_RCCEx_PeriphCLKConfig+0x1486>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
340063fa:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
340063fe:	4a39      	ldr	r2, [pc, #228]	@ (340064e4 <HAL_RCCEx_PeriphCLKConfig+0x14e8>)
34006400:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006404:	4291      	cmp	r1, r2
34006406:	d00e      	beq.n	34006426 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34006408:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400640c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006410:	4291      	cmp	r1, r2
34006412:	d008      	beq.n	34006426 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34006414:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006418:	4293      	cmp	r3, r2
3400641a:	d004      	beq.n	34006426 <HAL_RCCEx_PeriphCLKConfig+0x142a>
3400641c:	f240 6139 	movw	r1, #1593	@ 0x639
34006420:	482a      	ldr	r0, [pc, #168]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006422:	f7fa fe73 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34006426:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
3400642a:	4a2f      	ldr	r2, [pc, #188]	@ (340064e8 <HAL_RCCEx_PeriphCLKConfig+0x14ec>)
3400642c:	4293      	cmp	r3, r2
3400642e:	f041 8272 	bne.w	34007916 <HAL_RCCEx_PeriphCLKConfig+0x291a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006432:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006434:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006438:	d004      	beq.n	34006444 <HAL_RCCEx_PeriphCLKConfig+0x1448>
3400643a:	f240 613e 	movw	r1, #1598	@ 0x63e
3400643e:	4823      	ldr	r0, [pc, #140]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006440:	f7fa fe64 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006444:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006446:	3b01      	subs	r3, #1
34006448:	2bff      	cmp	r3, #255	@ 0xff
3400644a:	d904      	bls.n	34006456 <HAL_RCCEx_PeriphCLKConfig+0x145a>
3400644c:	f240 613f 	movw	r1, #1599	@ 0x63f
34006450:	481e      	ldr	r0, [pc, #120]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006452:	f7fa fe5b 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006456:	4a1b      	ldr	r2, [pc, #108]	@ (340064c4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006458:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3400645a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3400645e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006460:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006464:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006468:	3901      	subs	r1, #1
3400646a:	4303      	orrs	r3, r0
3400646c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006470:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006474:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006476:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400647a:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
3400647e:	f7fe fcd9 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34006482:	6863      	ldr	r3, [r4, #4]
34006484:	0718      	lsls	r0, r3, #28
34006486:	d55d      	bpl.n	34006544 <HAL_RCCEx_PeriphCLKConfig+0x1548>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
34006488:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
3400648c:	4a17      	ldr	r2, [pc, #92]	@ (340064ec <HAL_RCCEx_PeriphCLKConfig+0x14f0>)
3400648e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006492:	4291      	cmp	r1, r2
34006494:	d00e      	beq.n	340064b4 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34006496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400649a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400649e:	4291      	cmp	r1, r2
340064a0:	d008      	beq.n	340064b4 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
340064a2:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340064a6:	4293      	cmp	r3, r2
340064a8:	d004      	beq.n	340064b4 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
340064aa:	f240 6166 	movw	r1, #1638	@ 0x666
340064ae:	4807      	ldr	r0, [pc, #28]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340064b0:	f7fa fe2c 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
340064b4:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
340064b8:	4a0d      	ldr	r2, [pc, #52]	@ (340064f0 <HAL_RCCEx_PeriphCLKConfig+0x14f4>)
340064ba:	4293      	cmp	r3, r2
340064bc:	f041 825c 	bne.w	34007978 <HAL_RCCEx_PeriphCLKConfig+0x297c>
340064c0:	e018      	b.n	340064f4 <HAL_RCCEx_PeriphCLKConfig+0x14f8>
340064c2:	bf00      	nop
340064c4:	56028000 	.word	0x56028000
340064c8:	07001418 	.word	0x07001418
340064cc:	3400ef5e 	.word	0x3400ef5e
340064d0:	07021418 	.word	0x07021418
340064d4:	07001818 	.word	0x07001818
340064d8:	07021818 	.word	0x07021818
340064dc:	07000420 	.word	0x07000420
340064e0:	07020420 	.word	0x07020420
340064e4:	07000820 	.word	0x07000820
340064e8:	07020820 	.word	0x07020820
340064ec:	07000c20 	.word	0x07000c20
340064f0:	07020c20 	.word	0x07020c20
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340064f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340064f6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340064fa:	d004      	beq.n	34006506 <HAL_RCCEx_PeriphCLKConfig+0x150a>
340064fc:	f240 616b 	movw	r1, #1643	@ 0x66b
34006500:	48bb      	ldr	r0, [pc, #748]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006502:	f7fa fe03 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006506:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006508:	3b01      	subs	r3, #1
3400650a:	2bff      	cmp	r3, #255	@ 0xff
3400650c:	d904      	bls.n	34006518 <HAL_RCCEx_PeriphCLKConfig+0x151c>
3400650e:	f240 616c 	movw	r1, #1644	@ 0x66c
34006512:	48b7      	ldr	r0, [pc, #732]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006514:	f7fa fdfa 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006518:	4ab6      	ldr	r2, [pc, #728]	@ (340067f4 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
3400651a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3400651c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006520:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006522:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006526:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400652a:	3901      	subs	r1, #1
3400652c:	4303      	orrs	r3, r0
3400652e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006532:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006536:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006538:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400653c:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
34006540:	f7fe fc78 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34006544:	6863      	ldr	r3, [r4, #4]
34006546:	06d9      	lsls	r1, r3, #27
34006548:	d544      	bpl.n	340065d4 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
3400654a:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400654e:	4aaa      	ldr	r2, [pc, #680]	@ (340067f8 <HAL_RCCEx_PeriphCLKConfig+0x17fc>)
34006550:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006554:	4291      	cmp	r1, r2
34006556:	d00e      	beq.n	34006576 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34006558:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400655c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006560:	4291      	cmp	r1, r2
34006562:	d008      	beq.n	34006576 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34006564:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006568:	4293      	cmp	r3, r2
3400656a:	d004      	beq.n	34006576 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400656c:	f240 6193 	movw	r1, #1683	@ 0x693
34006570:	489f      	ldr	r0, [pc, #636]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006572:	f7fa fdcb 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34006576:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400657a:	4aa0      	ldr	r2, [pc, #640]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x1800>)
3400657c:	4293      	cmp	r3, r2
3400657e:	f041 822c 	bne.w	340079da <HAL_RCCEx_PeriphCLKConfig+0x29de>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006582:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006584:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006588:	d004      	beq.n	34006594 <HAL_RCCEx_PeriphCLKConfig+0x1598>
3400658a:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
3400658e:	4898      	ldr	r0, [pc, #608]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006590:	f7fa fdbc 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006594:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006596:	3b01      	subs	r3, #1
34006598:	2bff      	cmp	r3, #255	@ 0xff
3400659a:	d904      	bls.n	340065a6 <HAL_RCCEx_PeriphCLKConfig+0x15aa>
3400659c:	f240 6199 	movw	r1, #1689	@ 0x699
340065a0:	4893      	ldr	r0, [pc, #588]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340065a2:	f7fa fdb3 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340065a6:	4a93      	ldr	r2, [pc, #588]	@ (340067f4 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
340065a8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340065aa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340065ae:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340065b0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340065b4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340065b8:	3901      	subs	r1, #1
340065ba:	4303      	orrs	r3, r0
340065bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340065c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340065c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340065c8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340065cc:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
340065d0:	f7fe fc30 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
340065d4:	6863      	ldr	r3, [r4, #4]
340065d6:	069a      	lsls	r2, r3, #26
340065d8:	d544      	bpl.n	34006664 <HAL_RCCEx_PeriphCLKConfig+0x1668>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
340065da:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
340065de:	4a88      	ldr	r2, [pc, #544]	@ (34006800 <HAL_RCCEx_PeriphCLKConfig+0x1804>)
340065e0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340065e4:	4291      	cmp	r1, r2
340065e6:	d00e      	beq.n	34006606 <HAL_RCCEx_PeriphCLKConfig+0x160a>
340065e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340065ec:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340065f0:	4291      	cmp	r1, r2
340065f2:	d008      	beq.n	34006606 <HAL_RCCEx_PeriphCLKConfig+0x160a>
340065f4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340065f8:	4293      	cmp	r3, r2
340065fa:	d004      	beq.n	34006606 <HAL_RCCEx_PeriphCLKConfig+0x160a>
340065fc:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
34006600:	487b      	ldr	r0, [pc, #492]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006602:	f7fa fd83 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34006606:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
3400660a:	4a7e      	ldr	r2, [pc, #504]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x1808>)
3400660c:	4293      	cmp	r3, r2
3400660e:	f041 8231 	bne.w	34007a74 <HAL_RCCEx_PeriphCLKConfig+0x2a78>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006612:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006614:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006618:	d004      	beq.n	34006624 <HAL_RCCEx_PeriphCLKConfig+0x1628>
3400661a:	f240 61c5 	movw	r1, #1733	@ 0x6c5
3400661e:	4874      	ldr	r0, [pc, #464]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006620:	f7fa fd74 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006624:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006626:	3b01      	subs	r3, #1
34006628:	2bff      	cmp	r3, #255	@ 0xff
3400662a:	d904      	bls.n	34006636 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400662c:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34006630:	486f      	ldr	r0, [pc, #444]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006632:	f7fa fd6b 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006636:	4a6f      	ldr	r2, [pc, #444]	@ (340067f4 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006638:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400663a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400663e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006640:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006644:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006648:	3901      	subs	r1, #1
3400664a:	4303      	orrs	r3, r0
3400664c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006650:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006654:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006658:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400665c:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34006660:	f7fe fbe8 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34006664:	6863      	ldr	r3, [r4, #4]
34006666:	065b      	lsls	r3, r3, #25
34006668:	d543      	bpl.n	340066f2 <HAL_RCCEx_PeriphCLKConfig+0x16f6>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
3400666a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
3400666e:	4a66      	ldr	r2, [pc, #408]	@ (34006808 <HAL_RCCEx_PeriphCLKConfig+0x180c>)
34006670:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006674:	4291      	cmp	r1, r2
34006676:	d00e      	beq.n	34006696 <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006678:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400667c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006680:	4291      	cmp	r1, r2
34006682:	d008      	beq.n	34006696 <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006684:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006688:	4293      	cmp	r3, r2
3400668a:	d004      	beq.n	34006696 <HAL_RCCEx_PeriphCLKConfig+0x169a>
3400668c:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34006690:	4857      	ldr	r0, [pc, #348]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006692:	f7fa fd3b 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34006696:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
3400669a:	4a5c      	ldr	r2, [pc, #368]	@ (3400680c <HAL_RCCEx_PeriphCLKConfig+0x1810>)
3400669c:	4293      	cmp	r3, r2
3400669e:	f041 821a 	bne.w	34007ad6 <HAL_RCCEx_PeriphCLKConfig+0x2ada>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340066a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340066a4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340066a8:	d004      	beq.n	340066b4 <HAL_RCCEx_PeriphCLKConfig+0x16b8>
340066aa:	f240 61f2 	movw	r1, #1778	@ 0x6f2
340066ae:	4850      	ldr	r0, [pc, #320]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340066b0:	f7fa fd2c 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340066b4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340066b6:	3b01      	subs	r3, #1
340066b8:	2bff      	cmp	r3, #255	@ 0xff
340066ba:	d904      	bls.n	340066c6 <HAL_RCCEx_PeriphCLKConfig+0x16ca>
340066bc:	f240 61f3 	movw	r1, #1779	@ 0x6f3
340066c0:	484b      	ldr	r0, [pc, #300]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340066c2:	f7fa fd23 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340066c6:	4a4b      	ldr	r2, [pc, #300]	@ (340067f4 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
340066c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340066ca:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340066ce:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340066d0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340066d4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340066d8:	3901      	subs	r1, #1
340066da:	4303      	orrs	r3, r0
340066dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340066e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340066e4:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340066e6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340066ea:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
340066ee:	f7fe fba1 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
340066f2:	6863      	ldr	r3, [r4, #4]
340066f4:	05de      	lsls	r6, r3, #23
340066f6:	d544      	bpl.n	34006782 <HAL_RCCEx_PeriphCLKConfig+0x1786>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
340066f8:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
340066fc:	4a44      	ldr	r2, [pc, #272]	@ (34006810 <HAL_RCCEx_PeriphCLKConfig+0x1814>)
340066fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006702:	4291      	cmp	r1, r2
34006704:	d00e      	beq.n	34006724 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006706:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400670a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400670e:	4291      	cmp	r1, r2
34006710:	d008      	beq.n	34006724 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006712:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006716:	4293      	cmp	r3, r2
34006718:	d004      	beq.n	34006724 <HAL_RCCEx_PeriphCLKConfig+0x1728>
3400671a:	f240 711a 	movw	r1, #1818	@ 0x71a
3400671e:	4834      	ldr	r0, [pc, #208]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006720:	f7fa fcf4 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34006724:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34006728:	4a3a      	ldr	r2, [pc, #232]	@ (34006814 <HAL_RCCEx_PeriphCLKConfig+0x1818>)
3400672a:	4293      	cmp	r3, r2
3400672c:	f041 8204 	bne.w	34007b38 <HAL_RCCEx_PeriphCLKConfig+0x2b3c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006730:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006732:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006736:	d004      	beq.n	34006742 <HAL_RCCEx_PeriphCLKConfig+0x1746>
34006738:	f240 711f 	movw	r1, #1823	@ 0x71f
3400673c:	482c      	ldr	r0, [pc, #176]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3400673e:	f7fa fce5 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006742:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006744:	3b01      	subs	r3, #1
34006746:	2bff      	cmp	r3, #255	@ 0xff
34006748:	d904      	bls.n	34006754 <HAL_RCCEx_PeriphCLKConfig+0x1758>
3400674a:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
3400674e:	4828      	ldr	r0, [pc, #160]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006750:	f7fa fcdc 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006754:	4a27      	ldr	r2, [pc, #156]	@ (340067f4 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006756:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006758:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400675c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3400675e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006762:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006766:	3901      	subs	r1, #1
34006768:	4303      	orrs	r3, r0
3400676a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400676e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006772:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006776:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400677a:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
3400677e:	f7fe fb59 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34006782:	6863      	ldr	r3, [r4, #4]
34006784:	0598      	lsls	r0, r3, #22
34006786:	d55d      	bpl.n	34006844 <HAL_RCCEx_PeriphCLKConfig+0x1848>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34006788:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
3400678c:	4a22      	ldr	r2, [pc, #136]	@ (34006818 <HAL_RCCEx_PeriphCLKConfig+0x181c>)
3400678e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006792:	4291      	cmp	r1, r2
34006794:	d00e      	beq.n	340067b4 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006796:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400679a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400679e:	4291      	cmp	r1, r2
340067a0:	d008      	beq.n	340067b4 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
340067a2:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340067a6:	4293      	cmp	r3, r2
340067a8:	d004      	beq.n	340067b4 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
340067aa:	f240 7147 	movw	r1, #1863	@ 0x747
340067ae:	4810      	ldr	r0, [pc, #64]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340067b0:	f7fa fcac 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
340067b4:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
340067b8:	4a18      	ldr	r2, [pc, #96]	@ (3400681c <HAL_RCCEx_PeriphCLKConfig+0x1820>)
340067ba:	4293      	cmp	r3, r2
340067bc:	f041 81ed 	bne.w	34007b9a <HAL_RCCEx_PeriphCLKConfig+0x2b9e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340067c0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340067c2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340067c6:	d004      	beq.n	340067d2 <HAL_RCCEx_PeriphCLKConfig+0x17d6>
340067c8:	f240 714c 	movw	r1, #1868	@ 0x74c
340067cc:	4808      	ldr	r0, [pc, #32]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340067ce:	f7fa fc9d 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340067d2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340067d4:	3b01      	subs	r3, #1
340067d6:	2bff      	cmp	r3, #255	@ 0xff
340067d8:	d904      	bls.n	340067e4 <HAL_RCCEx_PeriphCLKConfig+0x17e8>
340067da:	f240 714d 	movw	r1, #1869	@ 0x74d
340067de:	4804      	ldr	r0, [pc, #16]	@ (340067f0 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340067e0:	f7fa fc94 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340067e4:	4a03      	ldr	r2, [pc, #12]	@ (340067f4 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
340067e6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340067e8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340067ec:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340067ee:	e017      	b.n	34006820 <HAL_RCCEx_PeriphCLKConfig+0x1824>
340067f0:	3400ef5e 	.word	0x3400ef5e
340067f4:	56028000 	.word	0x56028000
340067f8:	07001020 	.word	0x07001020
340067fc:	07021020 	.word	0x07021020
34006800:	07001420 	.word	0x07001420
34006804:	07021420 	.word	0x07021420
34006808:	07001820 	.word	0x07001820
3400680c:	07021820 	.word	0x07021820
34006810:	07000030 	.word	0x07000030
34006814:	07020030 	.word	0x07020030
34006818:	07000430 	.word	0x07000430
3400681c:	07020430 	.word	0x07020430
34006820:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006824:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006828:	3901      	subs	r1, #1
3400682a:	4303      	orrs	r3, r0
3400682c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006830:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006834:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006838:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400683c:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
34006840:	f7fe faf8 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34006844:	6863      	ldr	r3, [r4, #4]
34006846:	0559      	lsls	r1, r3, #21
34006848:	d544      	bpl.n	340068d4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
3400684a:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
3400684e:	4abc      	ldr	r2, [pc, #752]	@ (34006b40 <HAL_RCCEx_PeriphCLKConfig+0x1b44>)
34006850:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006854:	4291      	cmp	r1, r2
34006856:	d00e      	beq.n	34006876 <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006858:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400685c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006860:	4291      	cmp	r1, r2
34006862:	d008      	beq.n	34006876 <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006864:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006868:	4293      	cmp	r3, r2
3400686a:	d004      	beq.n	34006876 <HAL_RCCEx_PeriphCLKConfig+0x187a>
3400686c:	f240 7174 	movw	r1, #1908	@ 0x774
34006870:	48b4      	ldr	r0, [pc, #720]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006872:	f7fa fc4b 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34006876:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
3400687a:	4ab3      	ldr	r2, [pc, #716]	@ (34006b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>)
3400687c:	4293      	cmp	r3, r2
3400687e:	f041 81bd 	bne.w	34007bfc <HAL_RCCEx_PeriphCLKConfig+0x2c00>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006882:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006884:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006888:	d004      	beq.n	34006894 <HAL_RCCEx_PeriphCLKConfig+0x1898>
3400688a:	f240 7179 	movw	r1, #1913	@ 0x779
3400688e:	48ad      	ldr	r0, [pc, #692]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006890:	f7fa fc3c 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006894:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006896:	3b01      	subs	r3, #1
34006898:	2bff      	cmp	r3, #255	@ 0xff
3400689a:	d904      	bls.n	340068a6 <HAL_RCCEx_PeriphCLKConfig+0x18aa>
3400689c:	f240 717a 	movw	r1, #1914	@ 0x77a
340068a0:	48a8      	ldr	r0, [pc, #672]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340068a2:	f7fa fc33 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340068a6:	4aa9      	ldr	r2, [pc, #676]	@ (34006b4c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
340068a8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340068aa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340068ae:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340068b0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340068b4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340068b8:	3901      	subs	r1, #1
340068ba:	4303      	orrs	r3, r0
340068bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340068c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340068c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340068c8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340068cc:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
340068d0:	f7fe fab0 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
340068d4:	6863      	ldr	r3, [r4, #4]
340068d6:	051a      	lsls	r2, r3, #20
340068d8:	d544      	bpl.n	34006964 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
340068da:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
340068de:	4a9c      	ldr	r2, [pc, #624]	@ (34006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
340068e0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340068e4:	4291      	cmp	r1, r2
340068e6:	d00e      	beq.n	34006906 <HAL_RCCEx_PeriphCLKConfig+0x190a>
340068e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340068ec:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340068f0:	4291      	cmp	r1, r2
340068f2:	d008      	beq.n	34006906 <HAL_RCCEx_PeriphCLKConfig+0x190a>
340068f4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340068f8:	4293      	cmp	r3, r2
340068fa:	d004      	beq.n	34006906 <HAL_RCCEx_PeriphCLKConfig+0x190a>
340068fc:	f240 71a1 	movw	r1, #1953	@ 0x7a1
34006900:	4890      	ldr	r0, [pc, #576]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006902:	f7fa fc03 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34006906:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
3400690a:	4a92      	ldr	r2, [pc, #584]	@ (34006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
3400690c:	4293      	cmp	r3, r2
3400690e:	f041 81a6 	bne.w	34007c5e <HAL_RCCEx_PeriphCLKConfig+0x2c62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006912:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006914:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006918:	d004      	beq.n	34006924 <HAL_RCCEx_PeriphCLKConfig+0x1928>
3400691a:	f240 71a6 	movw	r1, #1958	@ 0x7a6
3400691e:	4889      	ldr	r0, [pc, #548]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006920:	f7fa fbf4 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006924:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006926:	3b01      	subs	r3, #1
34006928:	2bff      	cmp	r3, #255	@ 0xff
3400692a:	d904      	bls.n	34006936 <HAL_RCCEx_PeriphCLKConfig+0x193a>
3400692c:	f240 71a7 	movw	r1, #1959	@ 0x7a7
34006930:	4884      	ldr	r0, [pc, #528]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006932:	f7fa fbeb 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006936:	4a85      	ldr	r2, [pc, #532]	@ (34006b4c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006938:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400693a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400693e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006940:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006944:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006948:	3901      	subs	r1, #1
3400694a:	4303      	orrs	r3, r0
3400694c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006950:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006954:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006958:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400695c:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
34006960:	f7fe fa68 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34006964:	6863      	ldr	r3, [r4, #4]
34006966:	04db      	lsls	r3, r3, #19
34006968:	d544      	bpl.n	340069f4 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
3400696a:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
3400696e:	4a7a      	ldr	r2, [pc, #488]	@ (34006b58 <HAL_RCCEx_PeriphCLKConfig+0x1b5c>)
34006970:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006974:	4291      	cmp	r1, r2
34006976:	d00e      	beq.n	34006996 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006978:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400697c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006980:	4291      	cmp	r1, r2
34006982:	d008      	beq.n	34006996 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006984:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006988:	4293      	cmp	r3, r2
3400698a:	d004      	beq.n	34006996 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400698c:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34006990:	486c      	ldr	r0, [pc, #432]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006992:	f7fa fbbb 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34006996:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
3400699a:	4a70      	ldr	r2, [pc, #448]	@ (34006b5c <HAL_RCCEx_PeriphCLKConfig+0x1b60>)
3400699c:	4293      	cmp	r3, r2
3400699e:	f041 818f 	bne.w	34007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2cc4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340069a2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340069a4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340069a8:	d004      	beq.n	340069b4 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
340069aa:	f240 71d3 	movw	r1, #2003	@ 0x7d3
340069ae:	4865      	ldr	r0, [pc, #404]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340069b0:	f7fa fbac 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340069b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340069b6:	3b01      	subs	r3, #1
340069b8:	2bff      	cmp	r3, #255	@ 0xff
340069ba:	d904      	bls.n	340069c6 <HAL_RCCEx_PeriphCLKConfig+0x19ca>
340069bc:	f240 71d4 	movw	r1, #2004	@ 0x7d4
340069c0:	4860      	ldr	r0, [pc, #384]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340069c2:	f7fa fba3 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340069c6:	4a61      	ldr	r2, [pc, #388]	@ (34006b4c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
340069c8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340069ca:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340069ce:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340069d0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340069d4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340069d8:	3901      	subs	r1, #1
340069da:	4303      	orrs	r3, r0
340069dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340069e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340069e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340069e8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340069ec:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
340069f0:	f7fe fa20 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
340069f4:	6863      	ldr	r3, [r4, #4]
340069f6:	049e      	lsls	r6, r3, #18
340069f8:	d544      	bpl.n	34006a84 <HAL_RCCEx_PeriphCLKConfig+0x1a88>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
340069fa:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
340069fe:	4a58      	ldr	r2, [pc, #352]	@ (34006b60 <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
34006a00:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006a04:	4291      	cmp	r1, r2
34006a06:	d00e      	beq.n	34006a26 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006a08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006a0c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006a10:	4291      	cmp	r1, r2
34006a12:	d008      	beq.n	34006a26 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006a14:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006a18:	4293      	cmp	r3, r2
34006a1a:	d004      	beq.n	34006a26 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006a1c:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34006a20:	4848      	ldr	r0, [pc, #288]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006a22:	f7fa fb73 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34006a26:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34006a2a:	4a4e      	ldr	r2, [pc, #312]	@ (34006b64 <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
34006a2c:	4293      	cmp	r3, r2
34006a2e:	f041 8199 	bne.w	34007d64 <HAL_RCCEx_PeriphCLKConfig+0x2d68>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006a32:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006a34:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006a38:	d004      	beq.n	34006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
34006a3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34006a3e:	4841      	ldr	r0, [pc, #260]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006a40:	f7fa fb64 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006a44:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006a46:	3b01      	subs	r3, #1
34006a48:	2bff      	cmp	r3, #255	@ 0xff
34006a4a:	d904      	bls.n	34006a56 <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
34006a4c:	f640 0101 	movw	r1, #2049	@ 0x801
34006a50:	483c      	ldr	r0, [pc, #240]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006a52:	f7fa fb5b 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006a56:	4a3d      	ldr	r2, [pc, #244]	@ (34006b4c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006a58:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006a5a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006a5e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006a60:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006a64:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006a68:	3901      	subs	r1, #1
34006a6a:	4303      	orrs	r3, r0
34006a6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006a70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006a78:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006a7c:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34006a80:	f7fe f9d8 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34006a84:	6863      	ldr	r3, [r4, #4]
34006a86:	0458      	lsls	r0, r3, #17
34006a88:	d544      	bpl.n	34006b14 <HAL_RCCEx_PeriphCLKConfig+0x1b18>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34006a8a:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006a8e:	4a36      	ldr	r2, [pc, #216]	@ (34006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b6c>)
34006a90:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006a94:	4291      	cmp	r1, r2
34006a96:	d00e      	beq.n	34006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006a98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006a9c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006aa0:	4291      	cmp	r1, r2
34006aa2:	d008      	beq.n	34006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006aa4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006aa8:	4293      	cmp	r3, r2
34006aaa:	d004      	beq.n	34006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006aac:	f640 0128 	movw	r1, #2088	@ 0x828
34006ab0:	4824      	ldr	r0, [pc, #144]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006ab2:	f7fa fb2b 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34006ab6:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006aba:	4a2c      	ldr	r2, [pc, #176]	@ (34006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b70>)
34006abc:	4293      	cmp	r3, r2
34006abe:	f041 8182 	bne.w	34007dc6 <HAL_RCCEx_PeriphCLKConfig+0x2dca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006ac2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006ac4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006ac8:	d004      	beq.n	34006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
34006aca:	f640 012d 	movw	r1, #2093	@ 0x82d
34006ace:	481d      	ldr	r0, [pc, #116]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006ad0:	f7fa fb1c 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006ad4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006ad6:	3b01      	subs	r3, #1
34006ad8:	2bff      	cmp	r3, #255	@ 0xff
34006ada:	d904      	bls.n	34006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
34006adc:	f640 012e 	movw	r1, #2094	@ 0x82e
34006ae0:	4818      	ldr	r0, [pc, #96]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006ae2:	f7fa fb13 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006ae6:	4a19      	ldr	r2, [pc, #100]	@ (34006b4c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006ae8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006aea:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006aee:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006af0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006af4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006af8:	3901      	subs	r1, #1
34006afa:	4303      	orrs	r3, r0
34006afc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006b00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006b04:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006b08:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006b0c:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
34006b10:	f7fe f990 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34006b14:	6863      	ldr	r3, [r4, #4]
34006b16:	0419      	lsls	r1, r3, #16
34006b18:	d560      	bpl.n	34006bdc <HAL_RCCEx_PeriphCLKConfig+0x1be0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34006b1a:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006b1e:	4a14      	ldr	r2, [pc, #80]	@ (34006b70 <HAL_RCCEx_PeriphCLKConfig+0x1b74>)
34006b20:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006b24:	4291      	cmp	r1, r2
34006b26:	d02a      	beq.n	34006b7e <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006b28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006b2c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006b30:	4291      	cmp	r1, r2
34006b32:	d024      	beq.n	34006b7e <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006b34:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006b38:	4293      	cmp	r3, r2
34006b3a:	d020      	beq.n	34006b7e <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006b3c:	e01a      	b.n	34006b74 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
34006b3e:	bf00      	nop
34006b40:	07000830 	.word	0x07000830
34006b44:	3400ef5e 	.word	0x3400ef5e
34006b48:	07020830 	.word	0x07020830
34006b4c:	56028000 	.word	0x56028000
34006b50:	07000c30 	.word	0x07000c30
34006b54:	07020c30 	.word	0x07020c30
34006b58:	07001030 	.word	0x07001030
34006b5c:	07021030 	.word	0x07021030
34006b60:	07001430 	.word	0x07001430
34006b64:	07021430 	.word	0x07021430
34006b68:	07001830 	.word	0x07001830
34006b6c:	07021830 	.word	0x07021830
34006b70:	07001c30 	.word	0x07001c30
34006b74:	f640 0155 	movw	r1, #2133	@ 0x855
34006b78:	48bb      	ldr	r0, [pc, #748]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006b7a:	f7fa fac7 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34006b7e:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006b82:	4aba      	ldr	r2, [pc, #744]	@ (34006e6c <HAL_RCCEx_PeriphCLKConfig+0x1e70>)
34006b84:	4293      	cmp	r3, r2
34006b86:	f041 814f 	bne.w	34007e28 <HAL_RCCEx_PeriphCLKConfig+0x2e2c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006b8a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006b8c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006b90:	d004      	beq.n	34006b9c <HAL_RCCEx_PeriphCLKConfig+0x1ba0>
34006b92:	f640 015a 	movw	r1, #2138	@ 0x85a
34006b96:	48b4      	ldr	r0, [pc, #720]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006b98:	f7fa fab8 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006b9c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006b9e:	3b01      	subs	r3, #1
34006ba0:	2bff      	cmp	r3, #255	@ 0xff
34006ba2:	d904      	bls.n	34006bae <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
34006ba4:	f640 015b 	movw	r1, #2139	@ 0x85b
34006ba8:	48af      	ldr	r0, [pc, #700]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006baa:	f7fa faaf 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006bae:	4ab0      	ldr	r2, [pc, #704]	@ (34006e70 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006bb0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006bb2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006bb6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006bb8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006bbc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006bc0:	3901      	subs	r1, #1
34006bc2:	4303      	orrs	r3, r0
34006bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006bc8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006bcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006bd0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006bd4:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34006bd8:	f7fe f92c 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34006bdc:	6863      	ldr	r3, [r4, #4]
34006bde:	03da      	lsls	r2, r3, #15
34006be0:	d544      	bpl.n	34006c6c <HAL_RCCEx_PeriphCLKConfig+0x1c70>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
34006be2:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34006be6:	4aa3      	ldr	r2, [pc, #652]	@ (34006e74 <HAL_RCCEx_PeriphCLKConfig+0x1e78>)
34006be8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006bec:	4291      	cmp	r1, r2
34006bee:	d00e      	beq.n	34006c0e <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34006bf0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006bf4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006bf8:	4291      	cmp	r1, r2
34006bfa:	d008      	beq.n	34006c0e <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34006bfc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006c00:	4293      	cmp	r3, r2
34006c02:	d004      	beq.n	34006c0e <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34006c04:	f640 0182 	movw	r1, #2178	@ 0x882
34006c08:	4897      	ldr	r0, [pc, #604]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006c0a:	f7fa fa7f 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34006c0e:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34006c12:	4a99      	ldr	r2, [pc, #612]	@ (34006e78 <HAL_RCCEx_PeriphCLKConfig+0x1e7c>)
34006c14:	4293      	cmp	r3, r2
34006c16:	f041 8138 	bne.w	34007e8a <HAL_RCCEx_PeriphCLKConfig+0x2e8e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006c1a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006c1c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006c20:	d004      	beq.n	34006c2c <HAL_RCCEx_PeriphCLKConfig+0x1c30>
34006c22:	f640 0187 	movw	r1, #2183	@ 0x887
34006c26:	4890      	ldr	r0, [pc, #576]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006c28:	f7fa fa70 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006c2c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006c2e:	3b01      	subs	r3, #1
34006c30:	2bff      	cmp	r3, #255	@ 0xff
34006c32:	d904      	bls.n	34006c3e <HAL_RCCEx_PeriphCLKConfig+0x1c42>
34006c34:	f640 0188 	movw	r1, #2184	@ 0x888
34006c38:	488b      	ldr	r0, [pc, #556]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006c3a:	f7fa fa67 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006c3e:	4a8c      	ldr	r2, [pc, #560]	@ (34006e70 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006c40:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006c42:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006c46:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006c48:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006c4c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006c50:	3901      	subs	r1, #1
34006c52:	4303      	orrs	r3, r0
34006c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006c58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006c60:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006c64:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
34006c68:	f7fe f8e4 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34006c6c:	6863      	ldr	r3, [r4, #4]
34006c6e:	039b      	lsls	r3, r3, #14
34006c70:	d544      	bpl.n	34006cfc <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
34006c72:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34006c76:	4a81      	ldr	r2, [pc, #516]	@ (34006e7c <HAL_RCCEx_PeriphCLKConfig+0x1e80>)
34006c78:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006c7c:	4291      	cmp	r1, r2
34006c7e:	d00e      	beq.n	34006c9e <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34006c80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006c84:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006c88:	4291      	cmp	r1, r2
34006c8a:	d008      	beq.n	34006c9e <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34006c8c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006c90:	4293      	cmp	r3, r2
34006c92:	d004      	beq.n	34006c9e <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34006c94:	f640 01af 	movw	r1, #2223	@ 0x8af
34006c98:	4873      	ldr	r0, [pc, #460]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006c9a:	f7fa fa37 	bl	3400110c <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34006c9e:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34006ca2:	4a77      	ldr	r2, [pc, #476]	@ (34006e80 <HAL_RCCEx_PeriphCLKConfig+0x1e84>)
34006ca4:	4293      	cmp	r3, r2
34006ca6:	f041 8121 	bne.w	34007eec <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006caa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006cac:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006cb0:	d004      	beq.n	34006cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
34006cb2:	f640 01b4 	movw	r1, #2228	@ 0x8b4
34006cb6:	486c      	ldr	r0, [pc, #432]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006cb8:	f7fa fa28 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006cbc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006cbe:	3b01      	subs	r3, #1
34006cc0:	2bff      	cmp	r3, #255	@ 0xff
34006cc2:	d904      	bls.n	34006cce <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
34006cc4:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34006cc8:	4867      	ldr	r0, [pc, #412]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006cca:	f7fa fa1f 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006cce:	4a68      	ldr	r2, [pc, #416]	@ (34006e70 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006cd0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006cd2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006cd6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006cd8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006cdc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006ce0:	3901      	subs	r1, #1
34006ce2:	4303      	orrs	r3, r0
34006ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006ce8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006cf0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006cf4:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
34006cf8:	f7fe f89c 	bl	34004e34 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34006cfc:	6863      	ldr	r3, [r4, #4]
34006cfe:	035e      	lsls	r6, r3, #13
34006d00:	d51e      	bpl.n	34006d40 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
34006d02:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34006d06:	4a5f      	ldr	r2, [pc, #380]	@ (34006e84 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
34006d08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006d0c:	4291      	cmp	r1, r2
34006d0e:	d00a      	beq.n	34006d26 <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34006d10:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34006d14:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34006d18:	4293      	cmp	r3, r2
34006d1a:	d004      	beq.n	34006d26 <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34006d1c:	f640 01dc 	movw	r1, #2268	@ 0x8dc
34006d20:	4851      	ldr	r0, [pc, #324]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006d22:	f7fa f9f3 	bl	3400110c <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34006d26:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
34006d2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34006d2e:	f7fe f881 	bl	34004e34 <LL_RCC_SetClockSource>
34006d32:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34006d36:	2b00      	cmp	r3, #0
34006d38:	f281 8109 	bge.w	34007f4e <HAL_RCCEx_PeriphCLKConfig+0x2f52>
34006d3c:	f7fe f84a 	bl	34004dd4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34006d40:	6863      	ldr	r3, [r4, #4]
34006d42:	02d8      	lsls	r0, r3, #11
34006d44:	d51e      	bpl.n	34006d84 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
34006d46:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34006d4a:	4a4f      	ldr	r2, [pc, #316]	@ (34006e88 <HAL_RCCEx_PeriphCLKConfig+0x1e8c>)
34006d4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006d50:	4291      	cmp	r1, r2
34006d52:	d00a      	beq.n	34006d6a <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34006d54:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34006d58:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34006d5c:	4293      	cmp	r3, r2
34006d5e:	d004      	beq.n	34006d6a <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34006d60:	f640 01e6 	movw	r1, #2278	@ 0x8e6
34006d64:	4840      	ldr	r0, [pc, #256]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006d66:	f7fa f9d1 	bl	3400110c <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34006d6a:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
34006d6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34006d72:	f7fe f85f 	bl	34004e34 <LL_RCC_SetClockSource>
34006d76:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34006d7a:	2b00      	cmp	r3, #0
34006d7c:	f281 80eb 	bge.w	34007f56 <HAL_RCCEx_PeriphCLKConfig+0x2f5a>
34006d80:	f7fe f828 	bl	34004dd4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34006d84:	6863      	ldr	r3, [r4, #4]
34006d86:	0319      	lsls	r1, r3, #12
34006d88:	d549      	bpl.n	34006e1e <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
34006d8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34006d8e:	4a3f      	ldr	r2, [pc, #252]	@ (34006e8c <HAL_RCCEx_PeriphCLKConfig+0x1e90>)
34006d90:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006d94:	4291      	cmp	r1, r2
34006d96:	d00a      	beq.n	34006dae <HAL_RCCEx_PeriphCLKConfig+0x1db2>
34006d98:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34006d9c:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34006da0:	4293      	cmp	r3, r2
34006da2:	d004      	beq.n	34006dae <HAL_RCCEx_PeriphCLKConfig+0x1db2>
34006da4:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
34006da8:	482f      	ldr	r0, [pc, #188]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006daa:	f7fa f9af 	bl	3400110c <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34006dae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34006db2:	4a37      	ldr	r2, [pc, #220]	@ (34006e90 <HAL_RCCEx_PeriphCLKConfig+0x1e94>)
34006db4:	4293      	cmp	r3, r2
34006db6:	f041 80d2 	bne.w	34007f5e <HAL_RCCEx_PeriphCLKConfig+0x2f62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006dba:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006dbc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006dc0:	d004      	beq.n	34006dcc <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
34006dc2:	f640 01f5 	movw	r1, #2293	@ 0x8f5
34006dc6:	4828      	ldr	r0, [pc, #160]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006dc8:	f7fa f9a0 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006dcc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006dce:	3b01      	subs	r3, #1
34006dd0:	2bff      	cmp	r3, #255	@ 0xff
34006dd2:	d904      	bls.n	34006dde <HAL_RCCEx_PeriphCLKConfig+0x1de2>
34006dd4:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34006dd8:	4823      	ldr	r0, [pc, #140]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006dda:	f7fa f997 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006dde:	4a24      	ldr	r2, [pc, #144]	@ (34006e70 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006de0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006de2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006de6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006de8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006dec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006df0:	3901      	subs	r1, #1
34006df2:	4303      	orrs	r3, r0
34006df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006df8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006dfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006e00:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34006e04:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
34006e08:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34006e0c:	f7fe f812 	bl	34004e34 <LL_RCC_SetClockSource>
34006e10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34006e14:	2b00      	cmp	r3, #0
34006e16:	f281 80ab 	bge.w	34007f70 <HAL_RCCEx_PeriphCLKConfig+0x2f74>
34006e1a:	f7fd ffdb 	bl	34004dd4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34006e1e:	6863      	ldr	r3, [r4, #4]
34006e20:	029a      	lsls	r2, r3, #10
34006e22:	d564      	bpl.n	34006eee <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
34006e24:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34006e28:	4a1a      	ldr	r2, [pc, #104]	@ (34006e94 <HAL_RCCEx_PeriphCLKConfig+0x1e98>)
34006e2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006e2e:	4291      	cmp	r1, r2
34006e30:	d00a      	beq.n	34006e48 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34006e32:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34006e36:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34006e3a:	4293      	cmp	r3, r2
34006e3c:	d004      	beq.n	34006e48 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34006e3e:	f44f 6111 	mov.w	r1, #2320	@ 0x910
34006e42:	4809      	ldr	r0, [pc, #36]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006e44:	f7fa f962 	bl	3400110c <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34006e48:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34006e4c:	4a12      	ldr	r2, [pc, #72]	@ (34006e98 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>)
34006e4e:	4293      	cmp	r3, r2
34006e50:	f041 8092 	bne.w	34007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006e54:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006e56:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006e5a:	d01f      	beq.n	34006e9c <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34006e5c:	f640 1115 	movw	r1, #2325	@ 0x915
34006e60:	4801      	ldr	r0, [pc, #4]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006e62:	f7fa f953 	bl	3400110c <assert_failed>
34006e66:	e019      	b.n	34006e9c <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34006e68:	3400ef5e 	.word	0x3400ef5e
34006e6c:	07021c30 	.word	0x07021c30
34006e70:	56028000 	.word	0x56028000
34006e74:	07000034 	.word	0x07000034
34006e78:	07020034 	.word	0x07020034
34006e7c:	07000434 	.word	0x07000434
34006e80:	07020434 	.word	0x07020434
34006e84:	01001014 	.word	0x01001014
34006e88:	01001814 	.word	0x01001814
34006e8c:	03000c14 	.word	0x03000c14
34006e90:	03020c14 	.word	0x03020c14
34006e94:	03001414 	.word	0x03001414
34006e98:	03021414 	.word	0x03021414
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006e9c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006e9e:	3b01      	subs	r3, #1
34006ea0:	2bff      	cmp	r3, #255	@ 0xff
34006ea2:	d904      	bls.n	34006eae <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
34006ea4:	f640 1116 	movw	r1, #2326	@ 0x916
34006ea8:	48b1      	ldr	r0, [pc, #708]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34006eaa:	f7fa f92f 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006eae:	4ab1      	ldr	r2, [pc, #708]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34006eb0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006eb2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006eb6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006eb8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006ebc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006ec0:	3901      	subs	r1, #1
34006ec2:	4303      	orrs	r3, r0
34006ec4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006ec8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006ecc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006ed0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34006ed4:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
34006ed8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34006edc:	f7fd ffaa 	bl	34004e34 <LL_RCC_SetClockSource>
34006ee0:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34006ee4:	2b00      	cmp	r3, #0
34006ee6:	f281 8050 	bge.w	34007f8a <HAL_RCCEx_PeriphCLKConfig+0x2f8e>
34006eea:	f7fd ff73 	bl	34004dd4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34006eee:	6863      	ldr	r3, [r4, #4]
34006ef0:	061b      	lsls	r3, r3, #24
34006ef2:	d511      	bpl.n	34006f18 <HAL_RCCEx_PeriphCLKConfig+0x1f1c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
34006ef4:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
34006ef8:	2b03      	cmp	r3, #3
34006efa:	d904      	bls.n	34006f06 <HAL_RCCEx_PeriphCLKConfig+0x1f0a>
34006efc:	f44f 6113 	mov.w	r1, #2352	@ 0x930
34006f00:	489b      	ldr	r0, [pc, #620]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34006f02:	f7fa f903 	bl	3400110c <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34006f06:	4a9b      	ldr	r2, [pc, #620]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34006f08:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
34006f0c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34006f0e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34006f12:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
34006f16:	6253      	str	r3, [r2, #36]	@ 0x24
}
34006f18:	1e28      	subs	r0, r5, #0
34006f1a:	bf18      	it	ne
34006f1c:	2001      	movne	r0, #1
34006f1e:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34006f20:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34006f22:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006f26:	d003      	beq.n	34006f30 <HAL_RCCEx_PeriphCLKConfig+0x1f34>
34006f28:	21e6      	movs	r1, #230	@ 0xe6
34006f2a:	4891      	ldr	r0, [pc, #580]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34006f2c:	f7fa f8ee 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34006f30:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34006f32:	3b01      	subs	r3, #1
34006f34:	2bff      	cmp	r3, #255	@ 0xff
34006f36:	d903      	bls.n	34006f40 <HAL_RCCEx_PeriphCLKConfig+0x1f44>
34006f38:	21e7      	movs	r1, #231	@ 0xe7
34006f3a:	488d      	ldr	r0, [pc, #564]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34006f3c:	f7fa f8e6 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34006f40:	4a8c      	ldr	r2, [pc, #560]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34006f42:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34006f44:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34006f48:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34006f4a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006f4e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006f52:	3901      	subs	r1, #1
34006f54:	4303      	orrs	r3, r0
34006f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006f5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34006f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
34006f62:	f7fe b941 	b.w	340051e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006f66:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006f68:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006f6c:	d003      	beq.n	34006f76 <HAL_RCCEx_PeriphCLKConfig+0x1f7a>
34006f6e:	21f3      	movs	r1, #243	@ 0xf3
34006f70:	487f      	ldr	r0, [pc, #508]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34006f72:	f7fa f8cb 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006f76:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006f78:	3b01      	subs	r3, #1
34006f7a:	2bff      	cmp	r3, #255	@ 0xff
34006f7c:	d903      	bls.n	34006f86 <HAL_RCCEx_PeriphCLKConfig+0x1f8a>
34006f7e:	21f4      	movs	r1, #244	@ 0xf4
34006f80:	487b      	ldr	r0, [pc, #492]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34006f82:	f7fa f8c3 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006f86:	4a7b      	ldr	r2, [pc, #492]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34006f88:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006f8a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006f8e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006f90:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006f94:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006f98:	3901      	subs	r1, #1
34006f9a:	4303      	orrs	r3, r0
34006f9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006fa0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006fa4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006fa8:	f7fe b91e 	b.w	340051e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34006fac:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34006fb0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006fb4:	d004      	beq.n	34006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
34006fb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
34006fba:	486d      	ldr	r0, [pc, #436]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34006fbc:	f7fa f8a6 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34006fc0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34006fc4:	3b01      	subs	r3, #1
34006fc6:	2bff      	cmp	r3, #255	@ 0xff
34006fc8:	d904      	bls.n	34006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1fd8>
34006fca:	f240 1101 	movw	r1, #257	@ 0x101
34006fce:	4868      	ldr	r0, [pc, #416]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34006fd0:	f7fa f89c 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34006fd4:	4a67      	ldr	r2, [pc, #412]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34006fd6:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34006fda:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34006fde:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34006fe2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006fe6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006fea:	3901      	subs	r1, #1
34006fec:	4303      	orrs	r3, r0
34006fee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006ff2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34006ff6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34006ffa:	f7fe b8f5 	b.w	340051e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34006ffe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34007002:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007006:	d004      	beq.n	34007012 <HAL_RCCEx_PeriphCLKConfig+0x2016>
34007008:	f240 110d 	movw	r1, #269	@ 0x10d
3400700c:	4858      	ldr	r0, [pc, #352]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400700e:	f7fa f87d 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34007012:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34007016:	3b01      	subs	r3, #1
34007018:	2bff      	cmp	r3, #255	@ 0xff
3400701a:	d904      	bls.n	34007026 <HAL_RCCEx_PeriphCLKConfig+0x202a>
3400701c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
34007020:	4853      	ldr	r0, [pc, #332]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007022:	f7fa f873 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34007026:	4a53      	ldr	r2, [pc, #332]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007028:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
3400702c:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
34007030:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34007034:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007038:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400703c:	3901      	subs	r1, #1
3400703e:	4303      	orrs	r3, r0
34007040:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007044:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34007048:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
3400704c:	f7fe b8cc 	b.w	340051e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34007050:	4a49      	ldr	r2, [pc, #292]	@ (34007178 <HAL_RCCEx_PeriphCLKConfig+0x217c>)
34007052:	4293      	cmp	r3, r2
34007054:	d123      	bne.n	3400709e <HAL_RCCEx_PeriphCLKConfig+0x20a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34007056:	6a23      	ldr	r3, [r4, #32]
34007058:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400705c:	d004      	beq.n	34007068 <HAL_RCCEx_PeriphCLKConfig+0x206c>
3400705e:	f44f 719b 	mov.w	r1, #310	@ 0x136
34007062:	4843      	ldr	r0, [pc, #268]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007064:	f7fa f852 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007068:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400706a:	3b01      	subs	r3, #1
3400706c:	2bff      	cmp	r3, #255	@ 0xff
3400706e:	d904      	bls.n	3400707a <HAL_RCCEx_PeriphCLKConfig+0x207e>
34007070:	f240 1137 	movw	r1, #311	@ 0x137
34007074:	483e      	ldr	r0, [pc, #248]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007076:	f7fa f849 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400707a:	4a3e      	ldr	r2, [pc, #248]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400707c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400707e:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34007082:	6a20      	ldr	r0, [r4, #32]
34007084:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007088:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400708c:	3901      	subs	r1, #1
3400708e:	4303      	orrs	r3, r0
34007090:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007094:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34007098:	2308      	movs	r3, #8
3400709a:	f7fe b8e8 	b.w	3400526e <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3400709e:	4a37      	ldr	r2, [pc, #220]	@ (3400717c <HAL_RCCEx_PeriphCLKConfig+0x2180>)
340070a0:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340070a2:	bf02      	ittt	eq
340070a4:	2240      	moveq	r2, #64	@ 0x40
340070a6:	4b33      	ldreq	r3, [pc, #204]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340070a8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340070ac:	f7fe b8e1 	b.w	34005272 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
340070b0:	4a33      	ldr	r2, [pc, #204]	@ (34007180 <HAL_RCCEx_PeriphCLKConfig+0x2184>)
340070b2:	4293      	cmp	r3, r2
340070b4:	d123      	bne.n	340070fe <HAL_RCCEx_PeriphCLKConfig+0x2102>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340070b6:	6a23      	ldr	r3, [r4, #32]
340070b8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340070bc:	d004      	beq.n	340070c8 <HAL_RCCEx_PeriphCLKConfig+0x20cc>
340070be:	f240 1163 	movw	r1, #355	@ 0x163
340070c2:	482b      	ldr	r0, [pc, #172]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340070c4:	f7fa f822 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340070c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340070ca:	3b01      	subs	r3, #1
340070cc:	2bff      	cmp	r3, #255	@ 0xff
340070ce:	d904      	bls.n	340070da <HAL_RCCEx_PeriphCLKConfig+0x20de>
340070d0:	f44f 71b2 	mov.w	r1, #356	@ 0x164
340070d4:	4826      	ldr	r0, [pc, #152]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340070d6:	f7fa f819 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340070da:	4a26      	ldr	r2, [pc, #152]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340070dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340070de:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340070e2:	6a20      	ldr	r0, [r4, #32]
340070e4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340070e8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340070ec:	3901      	subs	r1, #1
340070ee:	4303      	orrs	r3, r0
340070f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340070f4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340070f8:	2308      	movs	r3, #8
340070fa:	f7fe b8f5 	b.w	340052e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
340070fe:	4a21      	ldr	r2, [pc, #132]	@ (34007184 <HAL_RCCEx_PeriphCLKConfig+0x2188>)
34007100:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007102:	bf02      	ittt	eq
34007104:	2240      	moveq	r2, #64	@ 0x40
34007106:	4b1b      	ldreq	r3, [pc, #108]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007108:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400710c:	f7fe b8ee 	b.w	340052ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34007110:	4a1d      	ldr	r2, [pc, #116]	@ (34007188 <HAL_RCCEx_PeriphCLKConfig+0x218c>)
34007112:	4293      	cmp	r3, r2
34007114:	d123      	bne.n	3400715e <HAL_RCCEx_PeriphCLKConfig+0x2162>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34007116:	6a23      	ldr	r3, [r4, #32]
34007118:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400711c:	d004      	beq.n	34007128 <HAL_RCCEx_PeriphCLKConfig+0x212c>
3400711e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
34007122:	4813      	ldr	r0, [pc, #76]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007124:	f7f9 fff2 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007128:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400712a:	3b01      	subs	r3, #1
3400712c:	2bff      	cmp	r3, #255	@ 0xff
3400712e:	d904      	bls.n	3400713a <HAL_RCCEx_PeriphCLKConfig+0x213e>
34007130:	f240 1191 	movw	r1, #401	@ 0x191
34007134:	480e      	ldr	r0, [pc, #56]	@ (34007170 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007136:	f7f9 ffe9 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400713a:	4a0e      	ldr	r2, [pc, #56]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400713c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400713e:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34007142:	6a20      	ldr	r0, [r4, #32]
34007144:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007148:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400714c:	3901      	subs	r1, #1
3400714e:	4303      	orrs	r3, r0
34007150:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007154:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34007158:	2308      	movs	r3, #8
3400715a:	f7fe b902 	b.w	34005362 <HAL_RCCEx_PeriphCLKConfig+0x366>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3400715e:	4a0b      	ldr	r2, [pc, #44]	@ (3400718c <HAL_RCCEx_PeriphCLKConfig+0x2190>)
34007160:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007162:	bf02      	ittt	eq
34007164:	2240      	moveq	r2, #64	@ 0x40
34007166:	4b03      	ldreq	r3, [pc, #12]	@ (34007174 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007168:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400716c:	f7fe b8fb 	b.w	34005366 <HAL_RCCEx_PeriphCLKConfig+0x36a>
34007170:	3400ef5e 	.word	0x3400ef5e
34007174:	56028000 	.word	0x56028000
34007178:	03030014 	.word	0x03030014
3400717c:	03010014 	.word	0x03010014
34007180:	03030414 	.word	0x03030414
34007184:	03010414 	.word	0x03010414
34007188:	03030814 	.word	0x03030814
3400718c:	03010814 	.word	0x03010814
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34007190:	2b30      	cmp	r3, #48	@ 0x30
34007192:	d123      	bne.n	340071dc <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34007194:	6a23      	ldr	r3, [r4, #32]
34007196:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400719a:	d004      	beq.n	340071a6 <HAL_RCCEx_PeriphCLKConfig+0x21aa>
3400719c:	f240 11bd 	movw	r1, #445	@ 0x1bd
340071a0:	48b2      	ldr	r0, [pc, #712]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340071a2:	f7f9 ffb3 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340071a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340071a8:	3b01      	subs	r3, #1
340071aa:	2bff      	cmp	r3, #255	@ 0xff
340071ac:	d904      	bls.n	340071b8 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
340071ae:	f44f 71df 	mov.w	r1, #446	@ 0x1be
340071b2:	48ae      	ldr	r0, [pc, #696]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340071b4:	f7f9 ffaa 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340071b8:	4aad      	ldr	r2, [pc, #692]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340071ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340071bc:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340071c0:	6a20      	ldr	r0, [r4, #32]
340071c2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340071c6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340071ca:	3901      	subs	r1, #1
340071cc:	4303      	orrs	r3, r0
340071ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340071d2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340071d6:	2308      	movs	r3, #8
340071d8:	f7fe b8fd 	b.w	340053d6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
340071dc:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340071de:	bf02      	ittt	eq
340071e0:	2240      	moveq	r2, #64	@ 0x40
340071e2:	4ba3      	ldreq	r3, [pc, #652]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340071e4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340071e8:	f7fe b8f7 	b.w	340053da <HAL_RCCEx_PeriphCLKConfig+0x3de>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
340071ec:	4aa1      	ldr	r2, [pc, #644]	@ (34007474 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
340071ee:	4293      	cmp	r3, r2
340071f0:	d123      	bne.n	3400723a <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340071f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340071f4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340071f8:	d004      	beq.n	34007204 <HAL_RCCEx_PeriphCLKConfig+0x2208>
340071fa:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
340071fe:	489b      	ldr	r0, [pc, #620]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007200:	f7f9 ff84 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34007204:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34007206:	3b01      	subs	r3, #1
34007208:	2bff      	cmp	r3, #255	@ 0xff
3400720a:	d904      	bls.n	34007216 <HAL_RCCEx_PeriphCLKConfig+0x221a>
3400720c:	f240 11eb 	movw	r1, #491	@ 0x1eb
34007210:	4896      	ldr	r0, [pc, #600]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007212:	f7f9 ff7b 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34007216:	4a96      	ldr	r2, [pc, #600]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007218:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400721a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
3400721e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34007220:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007224:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007228:	3901      	subs	r1, #1
3400722a:	4303      	orrs	r3, r0
3400722c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007230:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34007234:	2310      	movs	r3, #16
34007236:	f7fe b911 	b.w	3400545c <HAL_RCCEx_PeriphCLKConfig+0x460>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3400723a:	4a8f      	ldr	r2, [pc, #572]	@ (34007478 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
3400723c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400723e:	bf02      	ittt	eq
34007240:	2240      	moveq	r2, #64	@ 0x40
34007242:	4b8b      	ldreq	r3, [pc, #556]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007244:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007248:	f7fe b90a 	b.w	34005460 <HAL_RCCEx_PeriphCLKConfig+0x464>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3400724c:	4a8b      	ldr	r2, [pc, #556]	@ (3400747c <HAL_RCCEx_PeriphCLKConfig+0x2480>)
3400724e:	4293      	cmp	r3, r2
34007250:	d123      	bne.n	3400729a <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34007252:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34007254:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007258:	d004      	beq.n	34007264 <HAL_RCCEx_PeriphCLKConfig+0x2268>
3400725a:	f240 2117 	movw	r1, #535	@ 0x217
3400725e:	4883      	ldr	r0, [pc, #524]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007260:	f7f9 ff54 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34007264:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34007266:	3b01      	subs	r3, #1
34007268:	2bff      	cmp	r3, #255	@ 0xff
3400726a:	d904      	bls.n	34007276 <HAL_RCCEx_PeriphCLKConfig+0x227a>
3400726c:	f44f 7106 	mov.w	r1, #536	@ 0x218
34007270:	487e      	ldr	r0, [pc, #504]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007272:	f7f9 ff4b 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34007276:	4a7e      	ldr	r2, [pc, #504]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007278:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400727a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
3400727e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34007280:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007284:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007288:	3901      	subs	r1, #1
3400728a:	4303      	orrs	r3, r0
3400728c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007290:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34007294:	2310      	movs	r3, #16
34007296:	f7fe b938 	b.w	3400550a <HAL_RCCEx_PeriphCLKConfig+0x50e>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3400729a:	4a79      	ldr	r2, [pc, #484]	@ (34007480 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
3400729c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400729e:	bf02      	ittt	eq
340072a0:	2240      	moveq	r2, #64	@ 0x40
340072a2:	4b73      	ldreq	r3, [pc, #460]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340072a4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340072a8:	f7fe b931 	b.w	3400550e <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
340072ac:	2b30      	cmp	r3, #48	@ 0x30
340072ae:	d123      	bne.n	340072f8 <HAL_RCCEx_PeriphCLKConfig+0x22fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340072b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340072b2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340072b6:	d004      	beq.n	340072c2 <HAL_RCCEx_PeriphCLKConfig+0x22c6>
340072b8:	f240 2145 	movw	r1, #581	@ 0x245
340072bc:	486b      	ldr	r0, [pc, #428]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340072be:	f7f9 ff25 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340072c2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340072c4:	3b01      	subs	r3, #1
340072c6:	2bff      	cmp	r3, #255	@ 0xff
340072c8:	d904      	bls.n	340072d4 <HAL_RCCEx_PeriphCLKConfig+0x22d8>
340072ca:	f240 2146 	movw	r1, #582	@ 0x246
340072ce:	4867      	ldr	r0, [pc, #412]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340072d0:	f7f9 ff1c 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340072d4:	4a66      	ldr	r2, [pc, #408]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340072d6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340072d8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340072dc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340072de:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340072e2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340072e6:	3901      	subs	r1, #1
340072e8:	4303      	orrs	r3, r0
340072ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340072ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340072f2:	2380      	movs	r3, #128	@ 0x80
340072f4:	f7fe b94f 	b.w	34005596 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
340072f8:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340072fa:	bf02      	ittt	eq
340072fc:	2240      	moveq	r2, #64	@ 0x40
340072fe:	4b5c      	ldreq	r3, [pc, #368]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007300:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007304:	f7fe b949 	b.w	3400559a <HAL_RCCEx_PeriphCLKConfig+0x59e>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34007308:	2b03      	cmp	r3, #3
3400730a:	d123      	bne.n	34007354 <HAL_RCCEx_PeriphCLKConfig+0x2358>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400730c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400730e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007312:	d004      	beq.n	3400731e <HAL_RCCEx_PeriphCLKConfig+0x2322>
34007314:	f240 2173 	movw	r1, #627	@ 0x273
34007318:	4854      	ldr	r0, [pc, #336]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400731a:	f7f9 fef7 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400731e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007320:	3b01      	subs	r3, #1
34007322:	2bff      	cmp	r3, #255	@ 0xff
34007324:	d904      	bls.n	34007330 <HAL_RCCEx_PeriphCLKConfig+0x2334>
34007326:	f44f 711d 	mov.w	r1, #628	@ 0x274
3400732a:	4850      	ldr	r0, [pc, #320]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400732c:	f7f9 feee 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007330:	4a4f      	ldr	r2, [pc, #316]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007332:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007334:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007338:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400733a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400733e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007342:	3901      	subs	r1, #1
34007344:	4303      	orrs	r3, r0
34007346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400734a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400734e:	2380      	movs	r3, #128	@ 0x80
34007350:	f7fe b967 	b.w	34005622 <HAL_RCCEx_PeriphCLKConfig+0x626>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
34007354:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007356:	bf02      	ittt	eq
34007358:	2240      	moveq	r2, #64	@ 0x40
3400735a:	4b45      	ldreq	r3, [pc, #276]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400735c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007360:	f7fe b961 	b.w	34005626 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
34007364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007368:	bf02      	ittt	eq
3400736a:	2240      	moveq	r2, #64	@ 0x40
3400736c:	4b40      	ldreq	r3, [pc, #256]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400736e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007372:	f7fe b9ca 	b.w	3400570a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
34007376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400737a:	bf02      	ittt	eq
3400737c:	2240      	moveq	r2, #64	@ 0x40
3400737e:	4b3c      	ldreq	r3, [pc, #240]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007380:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007384:	f7fe ba03 	b.w	3400578e <HAL_RCCEx_PeriphCLKConfig+0x792>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
34007388:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400738a:	bf02      	ittt	eq
3400738c:	2240      	moveq	r2, #64	@ 0x40
3400738e:	4b38      	ldreq	r3, [pc, #224]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007390:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007394:	f7fe ba92 	b.w	340058bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34007398:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400739a:	bf02      	ittt	eq
3400739c:	2240      	moveq	r2, #64	@ 0x40
3400739e:	4b34      	ldreq	r3, [pc, #208]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340073a0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340073a4:	f7fe bad3 	b.w	3400594e <HAL_RCCEx_PeriphCLKConfig+0x952>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
340073a8:	4a36      	ldr	r2, [pc, #216]	@ (34007484 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
340073aa:	4293      	cmp	r3, r2
340073ac:	d124      	bne.n	340073f8 <HAL_RCCEx_PeriphCLKConfig+0x23fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340073ae:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340073b0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340073b4:	d004      	beq.n	340073c0 <HAL_RCCEx_PeriphCLKConfig+0x23c4>
340073b6:	f240 314f 	movw	r1, #847	@ 0x34f
340073ba:	482c      	ldr	r0, [pc, #176]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340073bc:	f7f9 fea6 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340073c0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340073c2:	3b01      	subs	r3, #1
340073c4:	2bff      	cmp	r3, #255	@ 0xff
340073c6:	d904      	bls.n	340073d2 <HAL_RCCEx_PeriphCLKConfig+0x23d6>
340073c8:	f44f 7154 	mov.w	r1, #848	@ 0x350
340073cc:	4827      	ldr	r0, [pc, #156]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340073ce:	f7f9 fe9d 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340073d2:	4a27      	ldr	r2, [pc, #156]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340073d4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340073d6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340073da:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340073dc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340073e0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340073e4:	3901      	subs	r1, #1
340073e6:	4303      	orrs	r3, r0
340073e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340073ec:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340073f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340073f4:	f7fe baf3 	b.w	340059de <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
340073f8:	4a23      	ldr	r2, [pc, #140]	@ (34007488 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
340073fa:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340073fc:	bf02      	ittt	eq
340073fe:	2240      	moveq	r2, #64	@ 0x40
34007400:	4b1b      	ldreq	r3, [pc, #108]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007402:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007406:	f7fe baec 	b.w	340059e2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3400740a:	4a20      	ldr	r2, [pc, #128]	@ (3400748c <HAL_RCCEx_PeriphCLKConfig+0x2490>)
3400740c:	4293      	cmp	r3, r2
3400740e:	d124      	bne.n	3400745a <HAL_RCCEx_PeriphCLKConfig+0x245e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007410:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007412:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007416:	d004      	beq.n	34007422 <HAL_RCCEx_PeriphCLKConfig+0x2426>
34007418:	f44f 715f 	mov.w	r1, #892	@ 0x37c
3400741c:	4813      	ldr	r0, [pc, #76]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400741e:	f7f9 fe75 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007422:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007424:	3b01      	subs	r3, #1
34007426:	2bff      	cmp	r3, #255	@ 0xff
34007428:	d904      	bls.n	34007434 <HAL_RCCEx_PeriphCLKConfig+0x2438>
3400742a:	f240 317d 	movw	r1, #893	@ 0x37d
3400742e:	480f      	ldr	r0, [pc, #60]	@ (3400746c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007430:	f7f9 fe6c 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007434:	4a0e      	ldr	r2, [pc, #56]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007436:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007438:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400743c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400743e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007442:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007446:	3901      	subs	r1, #1
34007448:	4303      	orrs	r3, r0
3400744a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400744e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007452:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007456:	f7fe bb06 	b.w	34005a66 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3400745a:	4a0d      	ldr	r2, [pc, #52]	@ (34007490 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
3400745c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400745e:	bf02      	ittt	eq
34007460:	2240      	moveq	r2, #64	@ 0x40
34007462:	4b03      	ldreq	r3, [pc, #12]	@ (34007470 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007464:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007468:	f7fe baff 	b.w	34005a6a <HAL_RCCEx_PeriphCLKConfig+0xa6e>
3400746c:	3400ef5e 	.word	0x3400ef5e
34007470:	56028000 	.word	0x56028000
34007474:	0303001c 	.word	0x0303001c
34007478:	0301001c 	.word	0x0301001c
3400747c:	0303041c 	.word	0x0303041c
34007480:	0301041c 	.word	0x0301041c
34007484:	0703000c 	.word	0x0703000c
34007488:	0701000c 	.word	0x0701000c
3400748c:	0703040c 	.word	0x0703040c
34007490:	0701040c 	.word	0x0701040c
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34007494:	4ab1      	ldr	r2, [pc, #708]	@ (3400775c <HAL_RCCEx_PeriphCLKConfig+0x2760>)
34007496:	4293      	cmp	r3, r2
34007498:	d124      	bne.n	340074e4 <HAL_RCCEx_PeriphCLKConfig+0x24e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400749a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400749c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340074a0:	d004      	beq.n	340074ac <HAL_RCCEx_PeriphCLKConfig+0x24b0>
340074a2:	f240 31a9 	movw	r1, #937	@ 0x3a9
340074a6:	48ae      	ldr	r0, [pc, #696]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340074a8:	f7f9 fe30 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340074ac:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340074ae:	3b01      	subs	r3, #1
340074b0:	2bff      	cmp	r3, #255	@ 0xff
340074b2:	d904      	bls.n	340074be <HAL_RCCEx_PeriphCLKConfig+0x24c2>
340074b4:	f240 31aa 	movw	r1, #938	@ 0x3aa
340074b8:	48a9      	ldr	r0, [pc, #676]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340074ba:	f7f9 fe27 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340074be:	4aa9      	ldr	r2, [pc, #676]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340074c0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340074c2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340074c6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340074c8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340074cc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340074d0:	3901      	subs	r1, #1
340074d2:	4303      	orrs	r3, r0
340074d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340074d8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340074dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340074e0:	f7fe bb05 	b.w	34005aee <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
340074e4:	4aa0      	ldr	r2, [pc, #640]	@ (34007768 <HAL_RCCEx_PeriphCLKConfig+0x276c>)
340074e6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340074e8:	bf02      	ittt	eq
340074ea:	2240      	moveq	r2, #64	@ 0x40
340074ec:	4b9d      	ldreq	r3, [pc, #628]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340074ee:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340074f2:	f7fe bafe 	b.w	34005af2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
340074f6:	4a9d      	ldr	r2, [pc, #628]	@ (3400776c <HAL_RCCEx_PeriphCLKConfig+0x2770>)
340074f8:	4293      	cmp	r3, r2
340074fa:	d124      	bne.n	34007546 <HAL_RCCEx_PeriphCLKConfig+0x254a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340074fc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340074fe:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007502:	d004      	beq.n	3400750e <HAL_RCCEx_PeriphCLKConfig+0x2512>
34007504:	f240 31d6 	movw	r1, #982	@ 0x3d6
34007508:	4895      	ldr	r0, [pc, #596]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3400750a:	f7f9 fdff 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400750e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007510:	3b01      	subs	r3, #1
34007512:	2bff      	cmp	r3, #255	@ 0xff
34007514:	d904      	bls.n	34007520 <HAL_RCCEx_PeriphCLKConfig+0x2524>
34007516:	f240 31d7 	movw	r1, #983	@ 0x3d7
3400751a:	4891      	ldr	r0, [pc, #580]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3400751c:	f7f9 fdf6 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007520:	4a90      	ldr	r2, [pc, #576]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007522:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007524:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007528:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400752a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400752e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007532:	3901      	subs	r1, #1
34007534:	4303      	orrs	r3, r0
34007536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400753a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400753e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007542:	f7fe bb2c 	b.w	34005b9e <HAL_RCCEx_PeriphCLKConfig+0xba2>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34007546:	4a8a      	ldr	r2, [pc, #552]	@ (34007770 <HAL_RCCEx_PeriphCLKConfig+0x2774>)
34007548:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400754a:	bf02      	ittt	eq
3400754c:	2240      	moveq	r2, #64	@ 0x40
3400754e:	4b85      	ldreq	r3, [pc, #532]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007550:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007554:	f7fe bb25 	b.w	34005ba2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34007558:	4a86      	ldr	r2, [pc, #536]	@ (34007774 <HAL_RCCEx_PeriphCLKConfig+0x2778>)
3400755a:	4293      	cmp	r3, r2
3400755c:	d124      	bne.n	340075a8 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400755e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007560:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007564:	d004      	beq.n	34007570 <HAL_RCCEx_PeriphCLKConfig+0x2574>
34007566:	f240 4103 	movw	r1, #1027	@ 0x403
3400756a:	487d      	ldr	r0, [pc, #500]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3400756c:	f7f9 fdce 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007570:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007572:	3b01      	subs	r3, #1
34007574:	2bff      	cmp	r3, #255	@ 0xff
34007576:	d904      	bls.n	34007582 <HAL_RCCEx_PeriphCLKConfig+0x2586>
34007578:	f240 4104 	movw	r1, #1028	@ 0x404
3400757c:	4878      	ldr	r0, [pc, #480]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3400757e:	f7f9 fdc5 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007582:	4a78      	ldr	r2, [pc, #480]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007584:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007586:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400758a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400758c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007590:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007594:	3901      	subs	r1, #1
34007596:	4303      	orrs	r3, r0
34007598:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400759c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340075a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340075a4:	f7fe bb3f 	b.w	34005c26 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
340075a8:	4a73      	ldr	r2, [pc, #460]	@ (34007778 <HAL_RCCEx_PeriphCLKConfig+0x277c>)
340075aa:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340075ac:	bf02      	ittt	eq
340075ae:	2240      	moveq	r2, #64	@ 0x40
340075b0:	4b6c      	ldreq	r3, [pc, #432]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340075b2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340075b6:	f7fe bb38 	b.w	34005c2a <HAL_RCCEx_PeriphCLKConfig+0xc2e>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
340075ba:	4a70      	ldr	r2, [pc, #448]	@ (3400777c <HAL_RCCEx_PeriphCLKConfig+0x2780>)
340075bc:	4293      	cmp	r3, r2
340075be:	d124      	bne.n	3400760a <HAL_RCCEx_PeriphCLKConfig+0x260e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340075c0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340075c2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340075c6:	d004      	beq.n	340075d2 <HAL_RCCEx_PeriphCLKConfig+0x25d6>
340075c8:	f44f 6186 	mov.w	r1, #1072	@ 0x430
340075cc:	4864      	ldr	r0, [pc, #400]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340075ce:	f7f9 fd9d 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340075d2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340075d4:	3b01      	subs	r3, #1
340075d6:	2bff      	cmp	r3, #255	@ 0xff
340075d8:	d904      	bls.n	340075e4 <HAL_RCCEx_PeriphCLKConfig+0x25e8>
340075da:	f240 4131 	movw	r1, #1073	@ 0x431
340075de:	4860      	ldr	r0, [pc, #384]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340075e0:	f7f9 fd94 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340075e4:	4a5f      	ldr	r2, [pc, #380]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340075e6:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340075e8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340075ec:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340075ee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340075f2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340075f6:	3901      	subs	r1, #1
340075f8:	4303      	orrs	r3, r0
340075fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340075fe:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007602:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007606:	f7fe bb52 	b.w	34005cae <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
3400760a:	4a5d      	ldr	r2, [pc, #372]	@ (34007780 <HAL_RCCEx_PeriphCLKConfig+0x2784>)
3400760c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400760e:	bf02      	ittt	eq
34007610:	2240      	moveq	r2, #64	@ 0x40
34007612:	4b54      	ldreq	r3, [pc, #336]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007614:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007618:	f7fe bb4b 	b.w	34005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3400761c:	4a59      	ldr	r2, [pc, #356]	@ (34007784 <HAL_RCCEx_PeriphCLKConfig+0x2788>)
3400761e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007620:	bf02      	ittt	eq
34007622:	2240      	moveq	r2, #64	@ 0x40
34007624:	4b4f      	ldreq	r3, [pc, #316]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007626:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400762a:	f7fe bb86 	b.w	34005d3a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3400762e:	4a56      	ldr	r2, [pc, #344]	@ (34007788 <HAL_RCCEx_PeriphCLKConfig+0x278c>)
34007630:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007632:	bf02      	ittt	eq
34007634:	2240      	moveq	r2, #64	@ 0x40
34007636:	4b4b      	ldreq	r3, [pc, #300]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007638:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400763c:	f7fe bbc1 	b.w	34005dc2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34007640:	4a52      	ldr	r2, [pc, #328]	@ (3400778c <HAL_RCCEx_PeriphCLKConfig+0x2790>)
34007642:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007644:	bf02      	ittt	eq
34007646:	2240      	moveq	r2, #64	@ 0x40
34007648:	4b46      	ldreq	r3, [pc, #280]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400764a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400764e:	f7fe bc17 	b.w	34005e80 <HAL_RCCEx_PeriphCLKConfig+0xe84>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34007652:	4a4f      	ldr	r2, [pc, #316]	@ (34007790 <HAL_RCCEx_PeriphCLKConfig+0x2794>)
34007654:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007656:	bf02      	ittt	eq
34007658:	2240      	moveq	r2, #64	@ 0x40
3400765a:	4b42      	ldreq	r3, [pc, #264]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400765c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007660:	f7fe bc52 	b.w	34005f08 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34007664:	4a4b      	ldr	r2, [pc, #300]	@ (34007794 <HAL_RCCEx_PeriphCLKConfig+0x2798>)
34007666:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007668:	bf02      	ittt	eq
3400766a:	2240      	moveq	r2, #64	@ 0x40
3400766c:	4b3d      	ldreq	r3, [pc, #244]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400766e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007672:	f7fe bc8d 	b.w	34005f90 <HAL_RCCEx_PeriphCLKConfig+0xf94>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34007676:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400767a:	d124      	bne.n	340076c6 <HAL_RCCEx_PeriphCLKConfig+0x26ca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400767c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3400767e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007682:	d004      	beq.n	3400768e <HAL_RCCEx_PeriphCLKConfig+0x2692>
34007684:	f240 41fd 	movw	r1, #1277	@ 0x4fd
34007688:	4835      	ldr	r0, [pc, #212]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3400768a:	f7f9 fd3f 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400768e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007690:	3b01      	subs	r3, #1
34007692:	2bff      	cmp	r3, #255	@ 0xff
34007694:	d904      	bls.n	340076a0 <HAL_RCCEx_PeriphCLKConfig+0x26a4>
34007696:	f240 41fe 	movw	r1, #1278	@ 0x4fe
3400769a:	4831      	ldr	r0, [pc, #196]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3400769c:	f7f9 fd36 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340076a0:	4a30      	ldr	r2, [pc, #192]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340076a2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340076a4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340076a8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340076aa:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340076ae:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340076b2:	3901      	subs	r1, #1
340076b4:	4303      	orrs	r3, r0
340076b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340076ba:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340076be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340076c2:	f7fe bca7 	b.w	34006014 <HAL_RCCEx_PeriphCLKConfig+0x1018>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
340076c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340076ca:	bf02      	ittt	eq
340076cc:	2240      	moveq	r2, #64	@ 0x40
340076ce:	4b25      	ldreq	r3, [pc, #148]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340076d0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340076d4:	f7fe bca0 	b.w	34006018 <HAL_RCCEx_PeriphCLKConfig+0x101c>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
340076d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340076dc:	bf02      	ittt	eq
340076de:	2240      	moveq	r2, #64	@ 0x40
340076e0:	4b20      	ldreq	r3, [pc, #128]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340076e2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340076e6:	f7fe bcdd 	b.w	340060a4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
340076ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340076ee:	d123      	bne.n	34007738 <HAL_RCCEx_PeriphCLKConfig+0x273c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340076f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340076f2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340076f6:	d004      	beq.n	34007702 <HAL_RCCEx_PeriphCLKConfig+0x2706>
340076f8:	f240 514a 	movw	r1, #1354	@ 0x54a
340076fc:	4818      	ldr	r0, [pc, #96]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340076fe:	f7f9 fd05 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007702:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007704:	3b01      	subs	r3, #1
34007706:	2bff      	cmp	r3, #255	@ 0xff
34007708:	d904      	bls.n	34007714 <HAL_RCCEx_PeriphCLKConfig+0x2718>
3400770a:	f240 514b 	movw	r1, #1355	@ 0x54b
3400770e:	4814      	ldr	r0, [pc, #80]	@ (34007760 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007710:	f7f9 fcfc 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007714:	4a13      	ldr	r2, [pc, #76]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007716:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007718:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3400771c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400771e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007722:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007726:	3901      	subs	r1, #1
34007728:	4303      	orrs	r3, r0
3400772a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400772e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007732:	2380      	movs	r3, #128	@ 0x80
34007734:	f7fe bcf8 	b.w	34006128 <HAL_RCCEx_PeriphCLKConfig+0x112c>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34007738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400773c:	bf02      	ittt	eq
3400773e:	2240      	moveq	r2, #64	@ 0x40
34007740:	4b08      	ldreq	r3, [pc, #32]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007742:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007746:	f7fe bcf1 	b.w	3400612c <HAL_RCCEx_PeriphCLKConfig+0x1130>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
3400774a:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400774c:	bf02      	ittt	eq
3400774e:	2240      	moveq	r2, #64	@ 0x40
34007750:	4b04      	ldreq	r3, [pc, #16]	@ (34007764 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007752:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007756:	f7fe bd3b 	b.w	340061d0 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
3400775a:	bf00      	nop
3400775c:	0703080c 	.word	0x0703080c
34007760:	3400ef5e 	.word	0x3400ef5e
34007764:	56028000 	.word	0x56028000
34007768:	0701080c 	.word	0x0701080c
3400776c:	07030c0c 	.word	0x07030c0c
34007770:	07010c0c 	.word	0x07010c0c
34007774:	0703100c 	.word	0x0703100c
34007778:	0701100c 	.word	0x0701100c
3400777c:	0703140c 	.word	0x0703140c
34007780:	0701140c 	.word	0x0701140c
34007784:	0701082c 	.word	0x0701082c
34007788:	07010c2c 	.word	0x07010c2c
3400778c:	0701102c 	.word	0x0701102c
34007790:	0701142c 	.word	0x0701142c
34007794:	0701182c 	.word	0x0701182c
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34007798:	4aa8      	ldr	r2, [pc, #672]	@ (34007a3c <HAL_RCCEx_PeriphCLKConfig+0x2a40>)
3400779a:	4293      	cmp	r3, r2
3400779c:	d123      	bne.n	340077e6 <HAL_RCCEx_PeriphCLKConfig+0x27ea>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400779e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340077a0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340077a4:	d004      	beq.n	340077b0 <HAL_RCCEx_PeriphCLKConfig+0x27b4>
340077a6:	f240 5197 	movw	r1, #1431	@ 0x597
340077aa:	48a5      	ldr	r0, [pc, #660]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340077ac:	f7f9 fcae 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340077b0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340077b2:	3b01      	subs	r3, #1
340077b4:	2bff      	cmp	r3, #255	@ 0xff
340077b6:	d904      	bls.n	340077c2 <HAL_RCCEx_PeriphCLKConfig+0x27c6>
340077b8:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
340077bc:	48a0      	ldr	r0, [pc, #640]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340077be:	f7f9 fca5 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340077c2:	4aa0      	ldr	r2, [pc, #640]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340077c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340077c6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340077ca:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340077cc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340077d0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340077d4:	3901      	subs	r1, #1
340077d6:	4303      	orrs	r3, r0
340077d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340077dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340077e0:	2380      	movs	r3, #128	@ 0x80
340077e2:	f7fe bd3a 	b.w	3400625a <HAL_RCCEx_PeriphCLKConfig+0x125e>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
340077e6:	4a98      	ldr	r2, [pc, #608]	@ (34007a48 <HAL_RCCEx_PeriphCLKConfig+0x2a4c>)
340077e8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077ea:	bf02      	ittt	eq
340077ec:	2240      	moveq	r2, #64	@ 0x40
340077ee:	4b95      	ldreq	r3, [pc, #596]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340077f0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077f4:	f7fe bd33 	b.w	3400625e <HAL_RCCEx_PeriphCLKConfig+0x1262>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
340077f8:	4a94      	ldr	r2, [pc, #592]	@ (34007a4c <HAL_RCCEx_PeriphCLKConfig+0x2a50>)
340077fa:	4293      	cmp	r3, r2
340077fc:	d123      	bne.n	34007846 <HAL_RCCEx_PeriphCLKConfig+0x284a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340077fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007800:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007804:	d004      	beq.n	34007810 <HAL_RCCEx_PeriphCLKConfig+0x2814>
34007806:	f240 51c4 	movw	r1, #1476	@ 0x5c4
3400780a:	488d      	ldr	r0, [pc, #564]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400780c:	f7f9 fc7e 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007810:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007812:	3b01      	subs	r3, #1
34007814:	2bff      	cmp	r3, #255	@ 0xff
34007816:	d904      	bls.n	34007822 <HAL_RCCEx_PeriphCLKConfig+0x2826>
34007818:	f240 51c5 	movw	r1, #1477	@ 0x5c5
3400781c:	4888      	ldr	r0, [pc, #544]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400781e:	f7f9 fc75 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007822:	4a88      	ldr	r2, [pc, #544]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007824:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007826:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3400782a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400782c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007830:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007834:	3901      	subs	r1, #1
34007836:	4303      	orrs	r3, r0
34007838:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400783c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007840:	2380      	movs	r3, #128	@ 0x80
34007842:	f7fe bd4b 	b.w	340062dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34007846:	4a82      	ldr	r2, [pc, #520]	@ (34007a50 <HAL_RCCEx_PeriphCLKConfig+0x2a54>)
34007848:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400784a:	bf02      	ittt	eq
3400784c:	2240      	moveq	r2, #64	@ 0x40
3400784e:	4b7d      	ldreq	r3, [pc, #500]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007850:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007854:	f7fe bd44 	b.w	340062e0 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34007858:	2b03      	cmp	r3, #3
3400785a:	d123      	bne.n	340078a4 <HAL_RCCEx_PeriphCLKConfig+0x28a8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400785c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400785e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007862:	d004      	beq.n	3400786e <HAL_RCCEx_PeriphCLKConfig+0x2872>
34007864:	f240 51f1 	movw	r1, #1521	@ 0x5f1
34007868:	4875      	ldr	r0, [pc, #468]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400786a:	f7f9 fc4f 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400786e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007870:	3b01      	subs	r3, #1
34007872:	2bff      	cmp	r3, #255	@ 0xff
34007874:	d904      	bls.n	34007880 <HAL_RCCEx_PeriphCLKConfig+0x2884>
34007876:	f240 51f2 	movw	r1, #1522	@ 0x5f2
3400787a:	4871      	ldr	r0, [pc, #452]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400787c:	f7f9 fc46 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007880:	4a70      	ldr	r2, [pc, #448]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007882:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007884:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007888:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400788a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400788e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007892:	3901      	subs	r1, #1
34007894:	4303      	orrs	r3, r0
34007896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400789a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400789e:	2380      	movs	r3, #128	@ 0x80
340078a0:	f7fe bd55 	b.w	3400634e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
340078a4:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078a6:	bf02      	ittt	eq
340078a8:	2240      	moveq	r2, #64	@ 0x40
340078aa:	4b66      	ldreq	r3, [pc, #408]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340078ac:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078b0:	f7fe bd4f 	b.w	34006352 <HAL_RCCEx_PeriphCLKConfig+0x1356>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
340078b4:	4a67      	ldr	r2, [pc, #412]	@ (34007a54 <HAL_RCCEx_PeriphCLKConfig+0x2a58>)
340078b6:	4293      	cmp	r3, r2
340078b8:	d124      	bne.n	34007904 <HAL_RCCEx_PeriphCLKConfig+0x2908>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340078ba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340078bc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340078c0:	d004      	beq.n	340078cc <HAL_RCCEx_PeriphCLKConfig+0x28d0>
340078c2:	f240 611e 	movw	r1, #1566	@ 0x61e
340078c6:	485e      	ldr	r0, [pc, #376]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340078c8:	f7f9 fc20 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340078cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340078ce:	3b01      	subs	r3, #1
340078d0:	2bff      	cmp	r3, #255	@ 0xff
340078d2:	d904      	bls.n	340078de <HAL_RCCEx_PeriphCLKConfig+0x28e2>
340078d4:	f240 611f 	movw	r1, #1567	@ 0x61f
340078d8:	4859      	ldr	r0, [pc, #356]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340078da:	f7f9 fc17 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340078de:	4a59      	ldr	r2, [pc, #356]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340078e0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340078e2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340078e6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340078e8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340078ec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340078f0:	3901      	subs	r1, #1
340078f2:	4303      	orrs	r3, r0
340078f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340078f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340078fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007900:	f7fe bd72 	b.w	340063e8 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34007904:	4a54      	ldr	r2, [pc, #336]	@ (34007a58 <HAL_RCCEx_PeriphCLKConfig+0x2a5c>)
34007906:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007908:	bf02      	ittt	eq
3400790a:	2240      	moveq	r2, #64	@ 0x40
3400790c:	4b4d      	ldreq	r3, [pc, #308]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
3400790e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007912:	f7fe bd6b 	b.w	340063ec <HAL_RCCEx_PeriphCLKConfig+0x13f0>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34007916:	4a51      	ldr	r2, [pc, #324]	@ (34007a5c <HAL_RCCEx_PeriphCLKConfig+0x2a60>)
34007918:	4293      	cmp	r3, r2
3400791a:	d124      	bne.n	34007966 <HAL_RCCEx_PeriphCLKConfig+0x296a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400791c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400791e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007922:	d004      	beq.n	3400792e <HAL_RCCEx_PeriphCLKConfig+0x2932>
34007924:	f240 614b 	movw	r1, #1611	@ 0x64b
34007928:	4845      	ldr	r0, [pc, #276]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400792a:	f7f9 fbef 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400792e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007930:	3b01      	subs	r3, #1
34007932:	2bff      	cmp	r3, #255	@ 0xff
34007934:	d904      	bls.n	34007940 <HAL_RCCEx_PeriphCLKConfig+0x2944>
34007936:	f240 614c 	movw	r1, #1612	@ 0x64c
3400793a:	4841      	ldr	r0, [pc, #260]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400793c:	f7f9 fbe6 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007940:	4a40      	ldr	r2, [pc, #256]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007942:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007944:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007948:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3400794a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400794e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007952:	3901      	subs	r1, #1
34007954:	4303      	orrs	r3, r0
34007956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400795a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400795e:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007962:	f7fe bd88 	b.w	34006476 <HAL_RCCEx_PeriphCLKConfig+0x147a>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34007966:	4a3e      	ldr	r2, [pc, #248]	@ (34007a60 <HAL_RCCEx_PeriphCLKConfig+0x2a64>)
34007968:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400796a:	bf02      	ittt	eq
3400796c:	2240      	moveq	r2, #64	@ 0x40
3400796e:	4b35      	ldreq	r3, [pc, #212]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007970:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007974:	f7fe bd81 	b.w	3400647a <HAL_RCCEx_PeriphCLKConfig+0x147e>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34007978:	4a3a      	ldr	r2, [pc, #232]	@ (34007a64 <HAL_RCCEx_PeriphCLKConfig+0x2a68>)
3400797a:	4293      	cmp	r3, r2
3400797c:	d124      	bne.n	340079c8 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400797e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007980:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007984:	d004      	beq.n	34007990 <HAL_RCCEx_PeriphCLKConfig+0x2994>
34007986:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
3400798a:	482d      	ldr	r0, [pc, #180]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400798c:	f7f9 fbbe 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007990:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007992:	3b01      	subs	r3, #1
34007994:	2bff      	cmp	r3, #255	@ 0xff
34007996:	d904      	bls.n	340079a2 <HAL_RCCEx_PeriphCLKConfig+0x29a6>
34007998:	f240 6179 	movw	r1, #1657	@ 0x679
3400799c:	4828      	ldr	r0, [pc, #160]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400799e:	f7f9 fbb5 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340079a2:	4a28      	ldr	r2, [pc, #160]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340079a4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340079a6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340079aa:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340079ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340079b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340079b4:	3901      	subs	r1, #1
340079b6:	4303      	orrs	r3, r0
340079b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340079bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340079c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
340079c4:	f7fe bdb8 	b.w	34006538 <HAL_RCCEx_PeriphCLKConfig+0x153c>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
340079c8:	4a27      	ldr	r2, [pc, #156]	@ (34007a68 <HAL_RCCEx_PeriphCLKConfig+0x2a6c>)
340079ca:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079cc:	bf02      	ittt	eq
340079ce:	2240      	moveq	r2, #64	@ 0x40
340079d0:	4b1c      	ldreq	r3, [pc, #112]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340079d2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079d6:	f7fe bdb1 	b.w	3400653c <HAL_RCCEx_PeriphCLKConfig+0x1540>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
340079da:	4a24      	ldr	r2, [pc, #144]	@ (34007a6c <HAL_RCCEx_PeriphCLKConfig+0x2a70>)
340079dc:	4293      	cmp	r3, r2
340079de:	d124      	bne.n	34007a2a <HAL_RCCEx_PeriphCLKConfig+0x2a2e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340079e0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340079e2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340079e6:	d004      	beq.n	340079f2 <HAL_RCCEx_PeriphCLKConfig+0x29f6>
340079e8:	f240 61a5 	movw	r1, #1701	@ 0x6a5
340079ec:	4814      	ldr	r0, [pc, #80]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340079ee:	f7f9 fb8d 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340079f2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340079f4:	3b01      	subs	r3, #1
340079f6:	2bff      	cmp	r3, #255	@ 0xff
340079f8:	d904      	bls.n	34007a04 <HAL_RCCEx_PeriphCLKConfig+0x2a08>
340079fa:	f240 61a6 	movw	r1, #1702	@ 0x6a6
340079fe:	4810      	ldr	r0, [pc, #64]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007a00:	f7f9 fb84 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007a04:	4a0f      	ldr	r2, [pc, #60]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007a06:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007a08:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007a0c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007a0e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007a12:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007a16:	3901      	subs	r1, #1
34007a18:	4303      	orrs	r3, r0
34007a1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007a1e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007a26:	f7fe bdcf 	b.w	340065c8 <HAL_RCCEx_PeriphCLKConfig+0x15cc>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34007a2a:	4a11      	ldr	r2, [pc, #68]	@ (34007a70 <HAL_RCCEx_PeriphCLKConfig+0x2a74>)
34007a2c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a2e:	bf02      	ittt	eq
34007a30:	2240      	moveq	r2, #64	@ 0x40
34007a32:	4b04      	ldreq	r3, [pc, #16]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007a34:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a38:	f7fe bdc8 	b.w	340065cc <HAL_RCCEx_PeriphCLKConfig+0x15d0>
34007a3c:	07031418 	.word	0x07031418
34007a40:	3400ef5e 	.word	0x3400ef5e
34007a44:	56028000 	.word	0x56028000
34007a48:	07011418 	.word	0x07011418
34007a4c:	07031818 	.word	0x07031818
34007a50:	07011818 	.word	0x07011818
34007a54:	07030420 	.word	0x07030420
34007a58:	07010420 	.word	0x07010420
34007a5c:	07030820 	.word	0x07030820
34007a60:	07010820 	.word	0x07010820
34007a64:	07030c20 	.word	0x07030c20
34007a68:	07010c20 	.word	0x07010c20
34007a6c:	07031020 	.word	0x07031020
34007a70:	07011020 	.word	0x07011020
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34007a74:	4aab      	ldr	r2, [pc, #684]	@ (34007d24 <HAL_RCCEx_PeriphCLKConfig+0x2d28>)
34007a76:	4293      	cmp	r3, r2
34007a78:	d124      	bne.n	34007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2ac8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007a7a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007a7c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007a80:	d004      	beq.n	34007a8c <HAL_RCCEx_PeriphCLKConfig+0x2a90>
34007a82:	f240 61d2 	movw	r1, #1746	@ 0x6d2
34007a86:	48a8      	ldr	r0, [pc, #672]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007a88:	f7f9 fb40 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007a8c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007a8e:	3b01      	subs	r3, #1
34007a90:	2bff      	cmp	r3, #255	@ 0xff
34007a92:	d904      	bls.n	34007a9e <HAL_RCCEx_PeriphCLKConfig+0x2aa2>
34007a94:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34007a98:	48a3      	ldr	r0, [pc, #652]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007a9a:	f7f9 fb37 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007a9e:	4aa3      	ldr	r2, [pc, #652]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007aa0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007aa2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007aa6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007aa8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007aac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007ab0:	3901      	subs	r1, #1
34007ab2:	4303      	orrs	r3, r0
34007ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ab8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007abc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007ac0:	f7fe bdca 	b.w	34006658 <HAL_RCCEx_PeriphCLKConfig+0x165c>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34007ac4:	4a9a      	ldr	r2, [pc, #616]	@ (34007d30 <HAL_RCCEx_PeriphCLKConfig+0x2d34>)
34007ac6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ac8:	bf02      	ittt	eq
34007aca:	2240      	moveq	r2, #64	@ 0x40
34007acc:	4b97      	ldreq	r3, [pc, #604]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007ace:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007ad2:	f7fe bdc3 	b.w	3400665c <HAL_RCCEx_PeriphCLKConfig+0x1660>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34007ad6:	4a97      	ldr	r2, [pc, #604]	@ (34007d34 <HAL_RCCEx_PeriphCLKConfig+0x2d38>)
34007ad8:	4293      	cmp	r3, r2
34007ada:	d124      	bne.n	34007b26 <HAL_RCCEx_PeriphCLKConfig+0x2b2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007adc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007ade:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ae2:	d004      	beq.n	34007aee <HAL_RCCEx_PeriphCLKConfig+0x2af2>
34007ae4:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34007ae8:	488f      	ldr	r0, [pc, #572]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007aea:	f7f9 fb0f 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007aee:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007af0:	3b01      	subs	r3, #1
34007af2:	2bff      	cmp	r3, #255	@ 0xff
34007af4:	d904      	bls.n	34007b00 <HAL_RCCEx_PeriphCLKConfig+0x2b04>
34007af6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34007afa:	488b      	ldr	r0, [pc, #556]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007afc:	f7f9 fb06 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007b00:	4a8a      	ldr	r2, [pc, #552]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007b02:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007b04:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007b08:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007b0a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b0e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b12:	3901      	subs	r1, #1
34007b14:	4303      	orrs	r3, r0
34007b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b1a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007b1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007b22:	f7fe bde0 	b.w	340066e6 <HAL_RCCEx_PeriphCLKConfig+0x16ea>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34007b26:	4a84      	ldr	r2, [pc, #528]	@ (34007d38 <HAL_RCCEx_PeriphCLKConfig+0x2d3c>)
34007b28:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b2a:	bf02      	ittt	eq
34007b2c:	2240      	moveq	r2, #64	@ 0x40
34007b2e:	4b7f      	ldreq	r3, [pc, #508]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007b30:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b34:	f7fe bdd9 	b.w	340066ea <HAL_RCCEx_PeriphCLKConfig+0x16ee>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34007b38:	4a80      	ldr	r2, [pc, #512]	@ (34007d3c <HAL_RCCEx_PeriphCLKConfig+0x2d40>)
34007b3a:	4293      	cmp	r3, r2
34007b3c:	d124      	bne.n	34007b88 <HAL_RCCEx_PeriphCLKConfig+0x2b8c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007b3e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007b40:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007b44:	d004      	beq.n	34007b50 <HAL_RCCEx_PeriphCLKConfig+0x2b54>
34007b46:	f240 712c 	movw	r1, #1836	@ 0x72c
34007b4a:	4877      	ldr	r0, [pc, #476]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007b4c:	f7f9 fade 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007b50:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007b52:	3b01      	subs	r3, #1
34007b54:	2bff      	cmp	r3, #255	@ 0xff
34007b56:	d904      	bls.n	34007b62 <HAL_RCCEx_PeriphCLKConfig+0x2b66>
34007b58:	f240 712d 	movw	r1, #1837	@ 0x72d
34007b5c:	4872      	ldr	r0, [pc, #456]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007b5e:	f7f9 fad5 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007b62:	4a72      	ldr	r2, [pc, #456]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007b64:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007b66:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007b6a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007b6c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b70:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b74:	3901      	subs	r1, #1
34007b76:	4303      	orrs	r3, r0
34007b78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b7c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007b80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007b84:	f7fe bdf7 	b.w	34006776 <HAL_RCCEx_PeriphCLKConfig+0x177a>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34007b88:	4a6d      	ldr	r2, [pc, #436]	@ (34007d40 <HAL_RCCEx_PeriphCLKConfig+0x2d44>)
34007b8a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b8c:	bf02      	ittt	eq
34007b8e:	2240      	moveq	r2, #64	@ 0x40
34007b90:	4b66      	ldreq	r3, [pc, #408]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007b92:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b96:	f7fe bdf0 	b.w	3400677a <HAL_RCCEx_PeriphCLKConfig+0x177e>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34007b9a:	4a6a      	ldr	r2, [pc, #424]	@ (34007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d48>)
34007b9c:	4293      	cmp	r3, r2
34007b9e:	d124      	bne.n	34007bea <HAL_RCCEx_PeriphCLKConfig+0x2bee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007ba0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ba2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ba6:	d004      	beq.n	34007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2bb6>
34007ba8:	f240 7159 	movw	r1, #1881	@ 0x759
34007bac:	485e      	ldr	r0, [pc, #376]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007bae:	f7f9 faad 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007bb2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007bb4:	3b01      	subs	r3, #1
34007bb6:	2bff      	cmp	r3, #255	@ 0xff
34007bb8:	d904      	bls.n	34007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc8>
34007bba:	f240 715a 	movw	r1, #1882	@ 0x75a
34007bbe:	485a      	ldr	r0, [pc, #360]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007bc0:	f7f9 faa4 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007bc4:	4a59      	ldr	r2, [pc, #356]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007bc6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007bc8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007bcc:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007bce:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007bd2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007bd6:	3901      	subs	r1, #1
34007bd8:	4303      	orrs	r3, r0
34007bda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007bde:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007be2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007be6:	f7fe be27 	b.w	34006838 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34007bea:	4a57      	ldr	r2, [pc, #348]	@ (34007d48 <HAL_RCCEx_PeriphCLKConfig+0x2d4c>)
34007bec:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007bee:	bf02      	ittt	eq
34007bf0:	2240      	moveq	r2, #64	@ 0x40
34007bf2:	4b4e      	ldreq	r3, [pc, #312]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007bf4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007bf8:	f7fe be20 	b.w	3400683c <HAL_RCCEx_PeriphCLKConfig+0x1840>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34007bfc:	4a53      	ldr	r2, [pc, #332]	@ (34007d4c <HAL_RCCEx_PeriphCLKConfig+0x2d50>)
34007bfe:	4293      	cmp	r3, r2
34007c00:	d124      	bne.n	34007c4c <HAL_RCCEx_PeriphCLKConfig+0x2c50>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007c02:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007c04:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007c08:	d004      	beq.n	34007c14 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
34007c0a:	f240 7186 	movw	r1, #1926	@ 0x786
34007c0e:	4846      	ldr	r0, [pc, #280]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007c10:	f7f9 fa7c 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007c14:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007c16:	3b01      	subs	r3, #1
34007c18:	2bff      	cmp	r3, #255	@ 0xff
34007c1a:	d904      	bls.n	34007c26 <HAL_RCCEx_PeriphCLKConfig+0x2c2a>
34007c1c:	f240 7187 	movw	r1, #1927	@ 0x787
34007c20:	4841      	ldr	r0, [pc, #260]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007c22:	f7f9 fa73 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007c26:	4a41      	ldr	r2, [pc, #260]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007c28:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007c2a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007c2e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007c30:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c34:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c38:	3901      	subs	r1, #1
34007c3a:	4303      	orrs	r3, r0
34007c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007c40:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007c48:	f7fe be3e 	b.w	340068c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34007c4c:	4a40      	ldr	r2, [pc, #256]	@ (34007d50 <HAL_RCCEx_PeriphCLKConfig+0x2d54>)
34007c4e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c50:	bf02      	ittt	eq
34007c52:	2240      	moveq	r2, #64	@ 0x40
34007c54:	4b35      	ldreq	r3, [pc, #212]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007c56:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c5a:	f7fe be37 	b.w	340068cc <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34007c5e:	4a3d      	ldr	r2, [pc, #244]	@ (34007d54 <HAL_RCCEx_PeriphCLKConfig+0x2d58>)
34007c60:	4293      	cmp	r3, r2
34007c62:	d124      	bne.n	34007cae <HAL_RCCEx_PeriphCLKConfig+0x2cb2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007c64:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007c66:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007c6a:	d004      	beq.n	34007c76 <HAL_RCCEx_PeriphCLKConfig+0x2c7a>
34007c6c:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34007c70:	482d      	ldr	r0, [pc, #180]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007c72:	f7f9 fa4b 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007c76:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007c78:	3b01      	subs	r3, #1
34007c7a:	2bff      	cmp	r3, #255	@ 0xff
34007c7c:	d904      	bls.n	34007c88 <HAL_RCCEx_PeriphCLKConfig+0x2c8c>
34007c7e:	f240 71b4 	movw	r1, #1972	@ 0x7b4
34007c82:	4829      	ldr	r0, [pc, #164]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007c84:	f7f9 fa42 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007c88:	4a28      	ldr	r2, [pc, #160]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007c8a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007c8c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007c90:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007c92:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c96:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c9a:	3901      	subs	r1, #1
34007c9c:	4303      	orrs	r3, r0
34007c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ca2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007ca6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007caa:	f7fe be55 	b.w	34006958 <HAL_RCCEx_PeriphCLKConfig+0x195c>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34007cae:	4a2a      	ldr	r2, [pc, #168]	@ (34007d58 <HAL_RCCEx_PeriphCLKConfig+0x2d5c>)
34007cb0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007cb2:	bf02      	ittt	eq
34007cb4:	2240      	moveq	r2, #64	@ 0x40
34007cb6:	4b1d      	ldreq	r3, [pc, #116]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007cb8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007cbc:	f7fe be4e 	b.w	3400695c <HAL_RCCEx_PeriphCLKConfig+0x1960>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34007cc0:	4a26      	ldr	r2, [pc, #152]	@ (34007d5c <HAL_RCCEx_PeriphCLKConfig+0x2d60>)
34007cc2:	4293      	cmp	r3, r2
34007cc4:	d124      	bne.n	34007d10 <HAL_RCCEx_PeriphCLKConfig+0x2d14>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007cc6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007cc8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ccc:	d004      	beq.n	34007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2cdc>
34007cce:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
34007cd2:	4815      	ldr	r0, [pc, #84]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007cd4:	f7f9 fa1a 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007cd8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007cda:	3b01      	subs	r3, #1
34007cdc:	2bff      	cmp	r3, #255	@ 0xff
34007cde:	d904      	bls.n	34007cea <HAL_RCCEx_PeriphCLKConfig+0x2cee>
34007ce0:	f240 71e1 	movw	r1, #2017	@ 0x7e1
34007ce4:	4810      	ldr	r0, [pc, #64]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007ce6:	f7f9 fa11 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007cea:	4a10      	ldr	r2, [pc, #64]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007cec:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007cee:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007cf2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007cf4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007cf8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007cfc:	3901      	subs	r1, #1
34007cfe:	4303      	orrs	r3, r0
34007d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007d04:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007d08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007d0c:	f7fe be6c 	b.w	340069e8 <HAL_RCCEx_PeriphCLKConfig+0x19ec>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34007d10:	4a13      	ldr	r2, [pc, #76]	@ (34007d60 <HAL_RCCEx_PeriphCLKConfig+0x2d64>)
34007d12:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007d14:	bf02      	ittt	eq
34007d16:	2240      	moveq	r2, #64	@ 0x40
34007d18:	4b04      	ldreq	r3, [pc, #16]	@ (34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007d1a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007d1e:	f7fe be65 	b.w	340069ec <HAL_RCCEx_PeriphCLKConfig+0x19f0>
34007d22:	bf00      	nop
34007d24:	07031420 	.word	0x07031420
34007d28:	3400ef5e 	.word	0x3400ef5e
34007d2c:	56028000 	.word	0x56028000
34007d30:	07011420 	.word	0x07011420
34007d34:	07031820 	.word	0x07031820
34007d38:	07011820 	.word	0x07011820
34007d3c:	07030030 	.word	0x07030030
34007d40:	07010030 	.word	0x07010030
34007d44:	07030430 	.word	0x07030430
34007d48:	07010430 	.word	0x07010430
34007d4c:	07030830 	.word	0x07030830
34007d50:	07010830 	.word	0x07010830
34007d54:	07030c30 	.word	0x07030c30
34007d58:	07010c30 	.word	0x07010c30
34007d5c:	07031030 	.word	0x07031030
34007d60:	07011030 	.word	0x07011030
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34007d64:	4a8b      	ldr	r2, [pc, #556]	@ (34007f94 <HAL_RCCEx_PeriphCLKConfig+0x2f98>)
34007d66:	4293      	cmp	r3, r2
34007d68:	d124      	bne.n	34007db4 <HAL_RCCEx_PeriphCLKConfig+0x2db8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007d6a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007d6c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007d70:	d004      	beq.n	34007d7c <HAL_RCCEx_PeriphCLKConfig+0x2d80>
34007d72:	f640 010d 	movw	r1, #2061	@ 0x80d
34007d76:	4888      	ldr	r0, [pc, #544]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007d78:	f7f9 f9c8 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007d7c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007d7e:	3b01      	subs	r3, #1
34007d80:	2bff      	cmp	r3, #255	@ 0xff
34007d82:	d904      	bls.n	34007d8e <HAL_RCCEx_PeriphCLKConfig+0x2d92>
34007d84:	f640 010e 	movw	r1, #2062	@ 0x80e
34007d88:	4883      	ldr	r0, [pc, #524]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007d8a:	f7f9 f9bf 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007d8e:	4a83      	ldr	r2, [pc, #524]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007d90:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007d92:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007d96:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007d98:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007d9c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007da0:	3901      	subs	r1, #1
34007da2:	4303      	orrs	r3, r0
34007da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007da8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007db0:	f7fe be62 	b.w	34006a78 <HAL_RCCEx_PeriphCLKConfig+0x1a7c>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34007db4:	4a7a      	ldr	r2, [pc, #488]	@ (34007fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fa4>)
34007db6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007db8:	bf02      	ittt	eq
34007dba:	2240      	moveq	r2, #64	@ 0x40
34007dbc:	4b77      	ldreq	r3, [pc, #476]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007dbe:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007dc2:	f7fe be5b 	b.w	34006a7c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34007dc6:	4a77      	ldr	r2, [pc, #476]	@ (34007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2fa8>)
34007dc8:	4293      	cmp	r3, r2
34007dca:	d124      	bne.n	34007e16 <HAL_RCCEx_PeriphCLKConfig+0x2e1a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007dcc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007dce:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007dd2:	d004      	beq.n	34007dde <HAL_RCCEx_PeriphCLKConfig+0x2de2>
34007dd4:	f640 013a 	movw	r1, #2106	@ 0x83a
34007dd8:	486f      	ldr	r0, [pc, #444]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007dda:	f7f9 f997 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007dde:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007de0:	3b01      	subs	r3, #1
34007de2:	2bff      	cmp	r3, #255	@ 0xff
34007de4:	d904      	bls.n	34007df0 <HAL_RCCEx_PeriphCLKConfig+0x2df4>
34007de6:	f640 013b 	movw	r1, #2107	@ 0x83b
34007dea:	486b      	ldr	r0, [pc, #428]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007dec:	f7f9 f98e 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007df0:	4a6a      	ldr	r2, [pc, #424]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007df2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007df4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007df8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007dfa:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007dfe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e02:	3901      	subs	r1, #1
34007e04:	4303      	orrs	r3, r0
34007e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e0a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007e12:	f7fe be79 	b.w	34006b08 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34007e16:	4a64      	ldr	r2, [pc, #400]	@ (34007fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fac>)
34007e18:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007e1a:	bf02      	ittt	eq
34007e1c:	2240      	moveq	r2, #64	@ 0x40
34007e1e:	4b5f      	ldreq	r3, [pc, #380]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007e20:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007e24:	f7fe be72 	b.w	34006b0c <HAL_RCCEx_PeriphCLKConfig+0x1b10>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34007e28:	4a60      	ldr	r2, [pc, #384]	@ (34007fac <HAL_RCCEx_PeriphCLKConfig+0x2fb0>)
34007e2a:	4293      	cmp	r3, r2
34007e2c:	d124      	bne.n	34007e78 <HAL_RCCEx_PeriphCLKConfig+0x2e7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007e2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007e30:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e34:	d004      	beq.n	34007e40 <HAL_RCCEx_PeriphCLKConfig+0x2e44>
34007e36:	f640 0167 	movw	r1, #2151	@ 0x867
34007e3a:	4857      	ldr	r0, [pc, #348]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007e3c:	f7f9 f966 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007e40:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007e42:	3b01      	subs	r3, #1
34007e44:	2bff      	cmp	r3, #255	@ 0xff
34007e46:	d904      	bls.n	34007e52 <HAL_RCCEx_PeriphCLKConfig+0x2e56>
34007e48:	f640 0168 	movw	r1, #2152	@ 0x868
34007e4c:	4852      	ldr	r0, [pc, #328]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007e4e:	f7f9 f95d 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007e52:	4a52      	ldr	r2, [pc, #328]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007e54:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007e56:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007e5a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007e5c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e60:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e64:	3901      	subs	r1, #1
34007e66:	4303      	orrs	r3, r0
34007e68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e6c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007e70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007e74:	f7fe beac 	b.w	34006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1bd4>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34007e78:	4a4d      	ldr	r2, [pc, #308]	@ (34007fb0 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
34007e7a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007e7c:	bf02      	ittt	eq
34007e7e:	2240      	moveq	r2, #64	@ 0x40
34007e80:	4b46      	ldreq	r3, [pc, #280]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007e82:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007e86:	f7fe bea5 	b.w	34006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bd8>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34007e8a:	4a4a      	ldr	r2, [pc, #296]	@ (34007fb4 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
34007e8c:	4293      	cmp	r3, r2
34007e8e:	d124      	bne.n	34007eda <HAL_RCCEx_PeriphCLKConfig+0x2ede>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007e90:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007e92:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e96:	d004      	beq.n	34007ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ea6>
34007e98:	f640 0194 	movw	r1, #2196	@ 0x894
34007e9c:	483e      	ldr	r0, [pc, #248]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007e9e:	f7f9 f935 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007ea2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007ea4:	3b01      	subs	r3, #1
34007ea6:	2bff      	cmp	r3, #255	@ 0xff
34007ea8:	d904      	bls.n	34007eb4 <HAL_RCCEx_PeriphCLKConfig+0x2eb8>
34007eaa:	f640 0195 	movw	r1, #2197	@ 0x895
34007eae:	483a      	ldr	r0, [pc, #232]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007eb0:	f7f9 f92c 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007eb4:	4a39      	ldr	r2, [pc, #228]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007eb6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007eb8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007ebc:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007ebe:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007ec2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007ec6:	3901      	subs	r1, #1
34007ec8:	4303      	orrs	r3, r0
34007eca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ece:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007ed2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007ed6:	f7fe bec3 	b.w	34006c60 <HAL_RCCEx_PeriphCLKConfig+0x1c64>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34007eda:	4a37      	ldr	r2, [pc, #220]	@ (34007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
34007edc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ede:	bf02      	ittt	eq
34007ee0:	2240      	moveq	r2, #64	@ 0x40
34007ee2:	4b2e      	ldreq	r3, [pc, #184]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007ee4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007ee8:	f7fe bebc 	b.w	34006c64 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34007eec:	4a33      	ldr	r2, [pc, #204]	@ (34007fbc <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
34007eee:	4293      	cmp	r3, r2
34007ef0:	d124      	bne.n	34007f3c <HAL_RCCEx_PeriphCLKConfig+0x2f40>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007ef2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ef4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ef8:	d004      	beq.n	34007f04 <HAL_RCCEx_PeriphCLKConfig+0x2f08>
34007efa:	f640 01c1 	movw	r1, #2241	@ 0x8c1
34007efe:	4826      	ldr	r0, [pc, #152]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007f00:	f7f9 f904 	bl	3400110c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007f04:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007f06:	3b01      	subs	r3, #1
34007f08:	2bff      	cmp	r3, #255	@ 0xff
34007f0a:	d904      	bls.n	34007f16 <HAL_RCCEx_PeriphCLKConfig+0x2f1a>
34007f0c:	f640 01c2 	movw	r1, #2242	@ 0x8c2
34007f10:	4821      	ldr	r0, [pc, #132]	@ (34007f98 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34007f12:	f7f9 f8fb 	bl	3400110c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007f16:	4a21      	ldr	r2, [pc, #132]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007f18:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007f1a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007f1e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007f20:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007f24:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007f28:	3901      	subs	r1, #1
34007f2a:	4303      	orrs	r3, r0
34007f2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007f30:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007f38:	f7fe beda 	b.w	34006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34007f3c:	4a20      	ldr	r2, [pc, #128]	@ (34007fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
34007f3e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f40:	bf02      	ittt	eq
34007f42:	2240      	moveq	r2, #64	@ 0x40
34007f44:	4b15      	ldreq	r3, [pc, #84]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007f46:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f4a:	f7fe bed3 	b.w	34006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1cf8>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34007f4e:	f7fc ff39 	bl	34004dc4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34007f52:	f7fe bef5 	b.w	34006d40 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34007f56:	f7fc ff35 	bl	34004dc4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34007f5a:	f7fe bf13 	b.w	34006d84 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34007f5e:	4a19      	ldr	r2, [pc, #100]	@ (34007fc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
34007f60:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f62:	bf02      	ittt	eq
34007f64:	2240      	moveq	r2, #64	@ 0x40
34007f66:	4b0d      	ldreq	r3, [pc, #52]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007f68:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f6c:	f7fe bf4a 	b.w	34006e04 <HAL_RCCEx_PeriphCLKConfig+0x1e08>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34007f70:	f7fc ff28 	bl	34004dc4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34007f74:	f7fe bf53 	b.w	34006e1e <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34007f78:	4a13      	ldr	r2, [pc, #76]	@ (34007fc8 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
34007f7a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f7c:	bf02      	ittt	eq
34007f7e:	2240      	moveq	r2, #64	@ 0x40
34007f80:	4b06      	ldreq	r3, [pc, #24]	@ (34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34007f82:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f86:	f7fe bfa5 	b.w	34006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ed8>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34007f8a:	f7fc ff1b 	bl	34004dc4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34007f8e:	f7fe bfae 	b.w	34006eee <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
34007f92:	bf00      	nop
34007f94:	07031430 	.word	0x07031430
34007f98:	3400ef5e 	.word	0x3400ef5e
34007f9c:	56028000 	.word	0x56028000
34007fa0:	07011430 	.word	0x07011430
34007fa4:	07031830 	.word	0x07031830
34007fa8:	07011830 	.word	0x07011830
34007fac:	07031c30 	.word	0x07031c30
34007fb0:	07011c30 	.word	0x07011c30
34007fb4:	07030034 	.word	0x07030034
34007fb8:	07010034 	.word	0x07010034
34007fbc:	07030434 	.word	0x07030434
34007fc0:	07010434 	.word	0x07010434
34007fc4:	03010c14 	.word	0x03010c14
34007fc8:	03011414 	.word	0x03011414

34007fcc <HAL_RCCEx_GetPLL1CLKFreq>:
{
34007fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34007fce:	4c1e      	ldr	r4, [pc, #120]	@ (34008048 <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
34007fd0:	6863      	ldr	r3, [r4, #4]
34007fd2:	05d9      	lsls	r1, r3, #23
34007fd4:	d506      	bpl.n	34007fe4 <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34007fd6:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34007fda:	005a      	lsls	r2, r3, #1
34007fdc:	d40f      	bmi.n	34007ffe <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34007fde:	2000      	movs	r0, #0
}
34007fe0:	b003      	add	sp, #12
34007fe2:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34007fe4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34007fe8:	011b      	lsls	r3, r3, #4
34007fea:	d5f8      	bpl.n	34007fde <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34007fec:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34007ff0:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34007ff4:	b003      	add	sp, #12
34007ff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34007ffa:	f7fc bf9d 	b.w	34004f38 <RCCEx_GetPLLSourceFreq>
34007ffe:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34008002:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34008006:	f7fc ff97 	bl	34004f38 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3400800a:	2800      	cmp	r0, #0
3400800c:	d0e7      	beq.n	34007fde <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3400800e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
34008012:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34008016:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400801a:	d0e0      	beq.n	34007fde <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
3400801c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34008020:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008024:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008028:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
3400802c:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008030:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34008034:	9401      	str	r4, [sp, #4]
34008036:	9500      	str	r5, [sp, #0]
34008038:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400803c:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008040:	f7fc ffb0 	bl	34004fa4 <RCCEx_CalcPLLFreq>
34008044:	e7cc      	b.n	34007fe0 <HAL_RCCEx_GetPLL1CLKFreq+0x14>
34008046:	bf00      	nop
34008048:	56028000 	.word	0x56028000

3400804c <HAL_RCCEx_GetPLL2CLKFreq>:
{
3400804c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400804e:	4c1e      	ldr	r4, [pc, #120]	@ (340080c8 <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
34008050:	6863      	ldr	r3, [r4, #4]
34008052:	0599      	lsls	r1, r3, #22
34008054:	d506      	bpl.n	34008064 <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34008056:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3400805a:	005a      	lsls	r2, r3, #1
3400805c:	d40f      	bmi.n	3400807e <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3400805e:	2000      	movs	r0, #0
}
34008060:	b003      	add	sp, #12
34008062:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34008064:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34008068:	011b      	lsls	r3, r3, #4
3400806a:	d5f8      	bpl.n	3400805e <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3400806c:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34008070:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34008074:	b003      	add	sp, #12
34008076:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3400807a:	f7fc bf5d 	b.w	34004f38 <RCCEx_GetPLLSourceFreq>
3400807e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34008082:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34008086:	f7fc ff57 	bl	34004f38 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3400808a:	2800      	cmp	r0, #0
3400808c:	d0e7      	beq.n	3400805e <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
3400808e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
34008092:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34008096:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400809a:	d0e0      	beq.n	3400805e <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
3400809c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
340080a0:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340080a4:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340080a8:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340080ac:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340080b0:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
340080b4:	9401      	str	r4, [sp, #4]
340080b6:	9500      	str	r5, [sp, #0]
340080b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340080bc:	f3c2 220b 	ubfx	r2, r2, #8, #12
340080c0:	f7fc ff70 	bl	34004fa4 <RCCEx_CalcPLLFreq>
340080c4:	e7cc      	b.n	34008060 <HAL_RCCEx_GetPLL2CLKFreq+0x14>
340080c6:	bf00      	nop
340080c8:	56028000 	.word	0x56028000

340080cc <HAL_RCCEx_GetPLL3CLKFreq>:
{
340080cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340080ce:	4c1e      	ldr	r4, [pc, #120]	@ (34008148 <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
340080d0:	6863      	ldr	r3, [r4, #4]
340080d2:	0559      	lsls	r1, r3, #21
340080d4:	d506      	bpl.n	340080e4 <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
340080d6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340080da:	005a      	lsls	r2, r3, #1
340080dc:	d40f      	bmi.n	340080fe <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340080de:	2000      	movs	r0, #0
}
340080e0:	b003      	add	sp, #12
340080e2:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340080e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340080e8:	011b      	lsls	r3, r3, #4
340080ea:	d5f8      	bpl.n	340080de <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
340080ec:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340080f0:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340080f4:	b003      	add	sp, #12
340080f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340080fa:	f7fc bf1d 	b.w	34004f38 <RCCEx_GetPLLSourceFreq>
340080fe:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34008102:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34008106:	f7fc ff17 	bl	34004f38 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3400810a:	2800      	cmp	r0, #0
3400810c:	d0e7      	beq.n	340080de <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3400810e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
34008112:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34008116:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400811a:	d0e0      	beq.n	340080de <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
3400811c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34008120:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008124:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34008128:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
3400812c:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34008130:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34008134:	9401      	str	r4, [sp, #4]
34008136:	9500      	str	r5, [sp, #0]
34008138:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400813c:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008140:	f7fc ff30 	bl	34004fa4 <RCCEx_CalcPLLFreq>
34008144:	e7cc      	b.n	340080e0 <HAL_RCCEx_GetPLL3CLKFreq+0x14>
34008146:	bf00      	nop
34008148:	56028000 	.word	0x56028000

3400814c <HAL_RCCEx_GetPLL4CLKFreq>:
{
3400814c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3400814e:	4c1e      	ldr	r4, [pc, #120]	@ (340081c8 <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
34008150:	6863      	ldr	r3, [r4, #4]
34008152:	0519      	lsls	r1, r3, #20
34008154:	d506      	bpl.n	34008164 <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
34008156:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3400815a:	005a      	lsls	r2, r3, #1
3400815c:	d40f      	bmi.n	3400817e <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3400815e:	2000      	movs	r0, #0
}
34008160:	b003      	add	sp, #12
34008162:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34008164:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34008168:	011b      	lsls	r3, r3, #4
3400816a:	d5f8      	bpl.n	3400815e <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3400816c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34008170:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34008174:	b003      	add	sp, #12
34008176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3400817a:	f7fc bedd 	b.w	34004f38 <RCCEx_GetPLLSourceFreq>
3400817e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34008182:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34008186:	f7fc fed7 	bl	34004f38 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3400818a:	2800      	cmp	r0, #0
3400818c:	d0e7      	beq.n	3400815e <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
3400818e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
34008192:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34008196:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400819a:	d0e0      	beq.n	3400815e <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
3400819c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
340081a0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340081a4:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340081a8:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340081ac:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340081b0:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
340081b4:	9401      	str	r4, [sp, #4]
340081b6:	9500      	str	r5, [sp, #0]
340081b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340081bc:	f3c2 220b 	ubfx	r2, r2, #8, #12
340081c0:	f7fc fef0 	bl	34004fa4 <RCCEx_CalcPLLFreq>
340081c4:	e7cc      	b.n	34008160 <HAL_RCCEx_GetPLL4CLKFreq+0x14>
340081c6:	bf00      	nop
340081c8:	56028000 	.word	0x56028000

340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
340081cc:	4b3e      	ldr	r3, [pc, #248]	@ (340082c8 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
340081ce:	b510      	push	{r4, lr}
340081d0:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
340081d4:	0652      	lsls	r2, r2, #25
340081d6:	d56b      	bpl.n	340082b0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
340081d8:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
340081dc:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
340081e0:	3a01      	subs	r2, #1
340081e2:	2a06      	cmp	r2, #6
340081e4:	d805      	bhi.n	340081f2 <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
340081e6:	e8df f002 	tbb	[pc, r2]
340081ea:	150f      	.short	0x150f
340081ec:	3e321b48 	.word	0x3e321b48
340081f0:	54          	.byte	0x54
340081f1:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
340081f2:	f7fc fe07 	bl	34004e04 <LL_RCC_HSI_IsReady>
340081f6:	2800      	cmp	r0, #0
340081f8:	d05a      	beq.n	340082b0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340081fa:	4b33      	ldr	r3, [pc, #204]	@ (340082c8 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340081fc:	4833      	ldr	r0, [pc, #204]	@ (340082cc <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
340081fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008200:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008204:	40d8      	lsrs	r0, r3
34008206:	e054      	b.n	340082b2 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34008208:	f7fc fe04 	bl	34004e14 <LL_RCC_MSI_IsReady>
3400820c:	2800      	cmp	r0, #0
3400820e:	d04f      	beq.n	340082b0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = MSI_VALUE;
34008210:	482f      	ldr	r0, [pc, #188]	@ (340082d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
34008212:	e04e      	b.n	340082b2 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34008214:	f7fc fdee 	bl	34004df4 <LL_RCC_HSE_IsReady>
34008218:	2800      	cmp	r0, #0
3400821a:	d049      	beq.n	340082b0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = HSE_VALUE;
3400821c:	482d      	ldr	r0, [pc, #180]	@ (340082d4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
3400821e:	e048      	b.n	340082b2 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34008220:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008224:	06d4      	lsls	r4, r2, #27
34008226:	d543      	bpl.n	340082b0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008228:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3400822c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008230:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008234:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008236:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          switch (LL_RCC_IC20_GetSource())
3400823a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400823e:	d03c      	beq.n	340082ba <RCCEx_GetCLKPCLKFreq.constprop.0+0xee>
34008240:	d833      	bhi.n	340082aa <RCCEx_GetCLKPCLKFreq.constprop.0+0xde>
34008242:	bbbb      	cbnz	r3, 340082b4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe8>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008244:	f7ff fec2 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
34008248:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
3400824c:	e031      	b.n	340082b2 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3400824e:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008252:	0590      	lsls	r0, r2, #22
34008254:	d52c      	bpl.n	340082b0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34008256:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3400825a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400825e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008262:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34008264:	e7e7      	b.n	34008236 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
        if (LL_RCC_IC15_IsEnabled() != 0U)
34008266:	f7fc fe4d 	bl	34004f04 <LL_RCC_IC15_IsEnabled>
3400826a:	b308      	cbz	r0, 340082b0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
          ic_divider = LL_RCC_IC15_GetDivider();
3400826c:	f7fc fe52 	bl	34004f14 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008270:	4b15      	ldr	r3, [pc, #84]	@ (340082c8 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
34008272:	4604      	mov	r4, r0
34008274:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34008278:	e7dd      	b.n	34008236 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
3400827a:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400827e:	0351      	lsls	r1, r2, #13
34008280:	d516      	bpl.n	340082b0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34008282:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34008286:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3400828a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400828e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34008290:	e7d1      	b.n	34008236 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34008292:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008296:	0312      	lsls	r2, r2, #12
34008298:	d50a      	bpl.n	340082b0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3400829a:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3400829e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340082a2:	f3c0 4007 	ubfx	r0, r0, #16, #8
340082a6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340082a8:	e7c5      	b.n	34008236 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
          switch (LL_RCC_IC20_GetSource())
340082aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340082ae:	d007      	beq.n	340082c0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf4>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
340082b0:	2000      	movs	r0, #0
}
340082b2:	bd10      	pop	{r4, pc}
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340082b4:	f7ff feca 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
340082b8:	e7c6      	b.n	34008248 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340082ba:	f7ff ff07 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
340082be:	e7c3      	b.n	34008248 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340082c0:	f7ff ff44 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
340082c4:	e7c0      	b.n	34008248 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
340082c6:	bf00      	nop
340082c8:	56028000 	.word	0x56028000
340082cc:	03d09000 	.word	0x03d09000
340082d0:	003d0900 	.word	0x003d0900
340082d4:	02dc6c00 	.word	0x02dc6c00

340082d8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
340082d8:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
340082da:	4d2b      	ldr	r5, [pc, #172]	@ (34008388 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb0>)
340082dc:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
340082e0:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
340082e4:	2b06      	cmp	r3, #6
340082e6:	d835      	bhi.n	34008354 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
340082e8:	e8df f003 	tbb	[pc, r3]
340082ec:	28110d04 	.word	0x28110d04
340082f0:	3c45      	.short	0x3c45
340082f2:	4b          	.byte	0x4b
340082f3:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340082f4:	f7fc fd10 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
340082f8:	f7fc fe16 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340082fc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
340082fe:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008302:	40d8      	lsrs	r0, r3
34008304:	e027      	b.n	34008356 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
34008306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400830a:	f7ff bf5f 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3400830e:	f7fc fdb1 	bl	34004e74 <LL_RCC_IC7_IsEnabled>
34008312:	b1f8      	cbz	r0, 34008354 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC7_GetDivider();
34008314:	f7fc fdb6 	bl	34004e84 <LL_RCC_IC7_GetDivider>
34008318:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3400831a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3400831e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34008322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008326:	d017      	beq.n	34008358 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x80>
34008328:	d811      	bhi.n	3400834e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x76>
3400832a:	b913      	cbnz	r3, 34008332 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400832c:	f7ff fe4e 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
34008330:	e001      	b.n	34008336 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008332:	f7ff fe8b 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008336:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400833a:	e00c      	b.n	34008356 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3400833c:	f7fc fdac 	bl	34004e98 <LL_RCC_IC8_IsEnabled>
34008340:	b140      	cbz	r0, 34008354 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC8_GetDivider();
34008342:	f7fc fdb1 	bl	34004ea8 <LL_RCC_IC8_GetDivider>
34008346:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3400834a:	4604      	mov	r4, r0
3400834c:	e7e7      	b.n	3400831e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
        switch (LL_RCC_IC8_GetSource())
3400834e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008352:	d004      	beq.n	3400835e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x86>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34008354:	2000      	movs	r0, #0
}
34008356:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008358:	f7ff feb8 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
3400835c:	e7eb      	b.n	34008336 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400835e:	f7ff fef5 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34008362:	e7e8      	b.n	34008336 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
      if (LL_RCC_HSI_IsReady() != 0U)
34008364:	f7fc fd4e 	bl	34004e04 <LL_RCC_HSI_IsReady>
34008368:	2800      	cmp	r0, #0
3400836a:	d0f3      	beq.n	34008354 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400836c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400836e:	4807      	ldr	r0, [pc, #28]	@ (3400838c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb4>)
34008370:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008374:	e7c5      	b.n	34008302 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
34008376:	f7fc fd4d 	bl	34004e14 <LL_RCC_MSI_IsReady>
3400837a:	2800      	cmp	r0, #0
3400837c:	d0ea      	beq.n	34008354 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        spdifrx_frequency = MSI_VALUE;
3400837e:	4804      	ldr	r0, [pc, #16]	@ (34008390 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
34008380:	e7e9      	b.n	34008356 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34008382:	4804      	ldr	r0, [pc, #16]	@ (34008394 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
  return spdifrx_frequency;
34008384:	e7e7      	b.n	34008356 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
34008386:	bf00      	nop
34008388:	56028000 	.word	0x56028000
3400838c:	03d09000 	.word	0x03d09000
34008390:	003d0900 	.word	0x003d0900
34008394:	00bb8000 	.word	0x00bb8000

34008398 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34008398:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400839a:	f7fc fd5d 	bl	34004e58 <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3400839e:	4b36      	ldr	r3, [pc, #216]	@ (34008478 <RCCEx_GetXSPICLKFreq+0xe0>)
340083a0:	4298      	cmp	r0, r3
340083a2:	d028      	beq.n	340083f6 <RCCEx_GetXSPICLKFreq+0x5e>
340083a4:	d81b      	bhi.n	340083de <RCCEx_GetXSPICLKFreq+0x46>
340083a6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340083aa:	4298      	cmp	r0, r3
340083ac:	d013      	beq.n	340083d6 <RCCEx_GetXSPICLKFreq+0x3e>
340083ae:	d80b      	bhi.n	340083c8 <RCCEx_GetXSPICLKFreq+0x30>
340083b0:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340083b4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340083b8:	429a      	cmp	r2, r3
340083ba:	d04a      	beq.n	34008452 <RCCEx_GetXSPICLKFreq+0xba>
340083bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340083c0:	4298      	cmp	r0, r3
340083c2:	d046      	beq.n	34008452 <RCCEx_GetXSPICLKFreq+0xba>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
340083c4:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
340083c6:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340083c8:	4b2c      	ldr	r3, [pc, #176]	@ (3400847c <RCCEx_GetXSPICLKFreq+0xe4>)
340083ca:	4298      	cmp	r0, r3
340083cc:	d003      	beq.n	340083d6 <RCCEx_GetXSPICLKFreq+0x3e>
340083ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340083d2:	4298      	cmp	r0, r3
340083d4:	d1f6      	bne.n	340083c4 <RCCEx_GetXSPICLKFreq+0x2c>
}
340083d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340083da:	f7ff bef7 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340083de:	4b28      	ldr	r3, [pc, #160]	@ (34008480 <RCCEx_GetXSPICLKFreq+0xe8>)
340083e0:	4298      	cmp	r0, r3
340083e2:	d028      	beq.n	34008436 <RCCEx_GetXSPICLKFreq+0x9e>
340083e4:	d820      	bhi.n	34008428 <RCCEx_GetXSPICLKFreq+0x90>
340083e6:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340083ea:	4298      	cmp	r0, r3
340083ec:	d003      	beq.n	340083f6 <RCCEx_GetXSPICLKFreq+0x5e>
340083ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340083f2:	4298      	cmp	r0, r3
340083f4:	d1e6      	bne.n	340083c4 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
340083f6:	4b23      	ldr	r3, [pc, #140]	@ (34008484 <RCCEx_GetXSPICLKFreq+0xec>)
340083f8:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
340083fc:	f010 0004 	ands.w	r0, r0, #4
34008400:	d0e1      	beq.n	340083c6 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34008402:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34008406:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3400840a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400840e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008410:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC4_GetSource())
34008414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008418:	d02a      	beq.n	34008470 <RCCEx_GetXSPICLKFreq+0xd8>
3400841a:	d820      	bhi.n	3400845e <RCCEx_GetXSPICLKFreq+0xc6>
3400841c:	bb2b      	cbnz	r3, 3400846a <RCCEx_GetXSPICLKFreq+0xd2>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400841e:	f7ff fdd5 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
34008422:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
34008426:	e7ce      	b.n	340083c6 <RCCEx_GetXSPICLKFreq+0x2e>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008428:	4b17      	ldr	r3, [pc, #92]	@ (34008488 <RCCEx_GetXSPICLKFreq+0xf0>)
3400842a:	4298      	cmp	r0, r3
3400842c:	d003      	beq.n	34008436 <RCCEx_GetXSPICLKFreq+0x9e>
3400842e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008432:	4298      	cmp	r0, r3
34008434:	d1c6      	bne.n	340083c4 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34008436:	4b13      	ldr	r3, [pc, #76]	@ (34008484 <RCCEx_GetXSPICLKFreq+0xec>)
34008438:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
3400843c:	f010 0008 	ands.w	r0, r0, #8
34008440:	d0c1      	beq.n	340083c6 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34008442:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008446:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3400844a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400844e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008450:	e7de      	b.n	34008410 <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008452:	f7fc fc61 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
}
34008456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3400845a:	f7fc bd65 	b.w	34004f28 <RCCEx_GetHCLKFreq>
        switch (LL_RCC_IC4_GetSource())
3400845e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008462:	d1af      	bne.n	340083c4 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008464:	f7ff fe72 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34008468:	e7db      	b.n	34008422 <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400846a:	f7ff fdef 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
3400846e:	e7d8      	b.n	34008422 <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008470:	f7ff fe2c 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
34008474:	e7d5      	b.n	34008422 <RCCEx_GetXSPICLKFreq+0x8a>
34008476:	bf00      	nop
34008478:	03020014 	.word	0x03020014
3400847c:	03010414 	.word	0x03010414
34008480:	03030014 	.word	0x03030014
34008484:	56028000 	.word	0x56028000
34008488:	03030414 	.word	0x03030414

3400848c <RCCEx_GetOTGPHYCLKFreq>:
{
3400848c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400848e:	f7fc fce3 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34008492:	4b2b      	ldr	r3, [pc, #172]	@ (34008540 <RCCEx_GetOTGPHYCLKFreq+0xb4>)
34008494:	4298      	cmp	r0, r3
34008496:	d021      	beq.n	340084dc <RCCEx_GetOTGPHYCLKFreq+0x50>
34008498:	d815      	bhi.n	340084c6 <RCCEx_GetOTGPHYCLKFreq+0x3a>
3400849a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400849e:	4298      	cmp	r0, r3
340084a0:	d00d      	beq.n	340084be <RCCEx_GetOTGPHYCLKFreq+0x32>
340084a2:	d809      	bhi.n	340084b8 <RCCEx_GetOTGPHYCLKFreq+0x2c>
340084a4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340084a8:	4298      	cmp	r0, r3
340084aa:	d02d      	beq.n	34008508 <RCCEx_GetOTGPHYCLKFreq+0x7c>
340084ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340084b0:	4298      	cmp	r0, r3
340084b2:	d029      	beq.n	34008508 <RCCEx_GetOTGPHYCLKFreq+0x7c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
340084b4:	2000      	movs	r0, #0
}
340084b6:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340084b8:	4b22      	ldr	r3, [pc, #136]	@ (34008544 <RCCEx_GetOTGPHYCLKFreq+0xb8>)
340084ba:	4298      	cmp	r0, r3
340084bc:	d1fa      	bne.n	340084b4 <RCCEx_GetOTGPHYCLKFreq+0x28>
}
340084be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340084c2:	f7ff be83 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340084c6:	4b20      	ldr	r3, [pc, #128]	@ (34008548 <RCCEx_GetOTGPHYCLKFreq+0xbc>)
340084c8:	4298      	cmp	r0, r3
340084ca:	d023      	beq.n	34008514 <RCCEx_GetOTGPHYCLKFreq+0x88>
340084cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340084d0:	4298      	cmp	r0, r3
340084d2:	d01f      	beq.n	34008514 <RCCEx_GetOTGPHYCLKFreq+0x88>
340084d4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340084d8:	4298      	cmp	r0, r3
340084da:	d1eb      	bne.n	340084b4 <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340084dc:	f7fc fd12 	bl	34004f04 <LL_RCC_IC15_IsEnabled>
340084e0:	2800      	cmp	r0, #0
340084e2:	d0e7      	beq.n	340084b4 <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
340084e4:	f7fc fd16 	bl	34004f14 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340084e8:	4b18      	ldr	r3, [pc, #96]	@ (3400854c <RCCEx_GetOTGPHYCLKFreq+0xc0>)
340084ea:	4604      	mov	r4, r0
340084ec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340084f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
340084f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340084f8:	d01f      	beq.n	3400853a <RCCEx_GetOTGPHYCLKFreq+0xae>
340084fa:	d815      	bhi.n	34008528 <RCCEx_GetOTGPHYCLKFreq+0x9c>
340084fc:	b9d3      	cbnz	r3, 34008534 <RCCEx_GetOTGPHYCLKFreq+0xa8>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340084fe:	f7ff fd65 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
34008502:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008506:	e7d6      	b.n	340084b6 <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34008508:	f7fc fc74 	bl	34004df4 <LL_RCC_HSE_IsReady>
3400850c:	2800      	cmp	r0, #0
3400850e:	d0d1      	beq.n	340084b4 <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
34008510:	480f      	ldr	r0, [pc, #60]	@ (34008550 <RCCEx_GetOTGPHYCLKFreq+0xc4>)
34008512:	e7d0      	b.n	340084b6 <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34008514:	f7fc fc6e 	bl	34004df4 <LL_RCC_HSE_IsReady>
34008518:	2800      	cmp	r0, #0
3400851a:	d0cb      	beq.n	340084b4 <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3400851c:	f7fc fc62 	bl	34004de4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34008520:	2800      	cmp	r0, #0
34008522:	d1f5      	bne.n	34008510 <RCCEx_GetOTGPHYCLKFreq+0x84>
          usb_frequency = HSE_VALUE;
34008524:	480b      	ldr	r0, [pc, #44]	@ (34008554 <RCCEx_GetOTGPHYCLKFreq+0xc8>)
  return usb_frequency;
34008526:	e7c6      	b.n	340084b6 <RCCEx_GetOTGPHYCLKFreq+0x2a>
        switch (LL_RCC_IC15_GetSource())
34008528:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400852c:	d1c2      	bne.n	340084b4 <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400852e:	f7ff fe0d 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34008532:	e7e6      	b.n	34008502 <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008534:	f7ff fd8a 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
34008538:	e7e3      	b.n	34008502 <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400853a:	f7ff fdc7 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
3400853e:	e7e0      	b.n	34008502 <RCCEx_GetOTGPHYCLKFreq+0x76>
34008540:	03020c14 	.word	0x03020c14
34008544:	03011414 	.word	0x03011414
34008548:	03030c14 	.word	0x03030c14
3400854c:	56028000 	.word	0x56028000
34008550:	016e3600 	.word	0x016e3600
34008554:	02dc6c00 	.word	0x02dc6c00

34008558 <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
34008558:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
3400855a:	f7fc fc7d 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3400855e:	4b11      	ldr	r3, [pc, #68]	@ (340085a4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
34008560:	4298      	cmp	r0, r3
34008562:	d01c      	beq.n	3400859e <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
34008564:	d805      	bhi.n	34008572 <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
34008566:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400856a:	4298      	cmp	r0, r3
3400856c:	d012      	beq.n	34008594 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3400856e:	2000      	movs	r0, #0
}
34008570:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34008572:	4b0d      	ldr	r3, [pc, #52]	@ (340085a8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
34008574:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34008578:	4298      	cmp	r0, r3
3400857a:	d1f8      	bne.n	3400856e <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
3400857c:	f7fc fc3a 	bl	34004df4 <LL_RCC_HSE_IsReady>
34008580:	2800      	cmp	r0, #0
34008582:	d0f4      	beq.n	3400856e <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34008584:	f7fc fc2e 	bl	34004de4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
34008588:	4b08      	ldr	r3, [pc, #32]	@ (340085ac <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
3400858a:	2800      	cmp	r0, #0
3400858c:	4808      	ldr	r0, [pc, #32]	@ (340085b0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
3400858e:	bf08      	it	eq
34008590:	4618      	moveq	r0, r3
34008592:	e7ed      	b.n	34008570 <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34008594:	4807      	ldr	r0, [pc, #28]	@ (340085b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
34008596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3400859a:	f7ff bf77 	b.w	3400848c <RCCEx_GetOTGPHYCLKFreq>
3400859e:	4806      	ldr	r0, [pc, #24]	@ (340085b8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
340085a0:	e7f9      	b.n	34008596 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
340085a2:	bf00      	nop
340085a4:	01001814 	.word	0x01001814
340085a8:	01011014 	.word	0x01011014
340085ac:	02dc6c00 	.word	0x02dc6c00
340085b0:	016e3600 	.word	0x016e3600
340085b4:	03000c14 	.word	0x03000c14
340085b8:	03001414 	.word	0x03001414

340085bc <RCCEx_GetUSARTCLKFreq>:
{
340085bc:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340085be:	f7fc fc4b 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340085c2:	4b6f      	ldr	r3, [pc, #444]	@ (34008780 <RCCEx_GetUSARTCLKFreq+0x1c4>)
340085c4:	4298      	cmp	r0, r3
340085c6:	d039      	beq.n	3400863c <RCCEx_GetUSARTCLKFreq+0x80>
340085c8:	d852      	bhi.n	34008670 <RCCEx_GetUSARTCLKFreq+0xb4>
340085ca:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
340085ce:	4298      	cmp	r0, r3
340085d0:	f000 80b5 	beq.w	3400873e <RCCEx_GetUSARTCLKFreq+0x182>
340085d4:	d813      	bhi.n	340085fe <RCCEx_GetUSARTCLKFreq+0x42>
340085d6:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
340085da:	4298      	cmp	r0, r3
340085dc:	f000 80af 	beq.w	3400873e <RCCEx_GetUSARTCLKFreq+0x182>
340085e0:	d80b      	bhi.n	340085fa <RCCEx_GetUSARTCLKFreq+0x3e>
340085e2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
340085e6:	4298      	cmp	r0, r3
340085e8:	f000 80a9 	beq.w	3400873e <RCCEx_GetUSARTCLKFreq+0x182>
340085ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340085f0:	4298      	cmp	r0, r3
340085f2:	f000 80ae 	beq.w	34008752 <RCCEx_GetUSARTCLKFreq+0x196>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
340085f6:	2000      	movs	r0, #0
}
340085f8:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340085fa:	4b62      	ldr	r3, [pc, #392]	@ (34008784 <RCCEx_GetUSARTCLKFreq+0x1c8>)
340085fc:	e7f8      	b.n	340085f0 <RCCEx_GetUSARTCLKFreq+0x34>
340085fe:	4b62      	ldr	r3, [pc, #392]	@ (34008788 <RCCEx_GetUSARTCLKFreq+0x1cc>)
34008600:	4298      	cmp	r0, r3
34008602:	d00c      	beq.n	3400861e <RCCEx_GetUSARTCLKFreq+0x62>
34008604:	d80f      	bhi.n	34008626 <RCCEx_GetUSARTCLKFreq+0x6a>
34008606:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
3400860a:	4298      	cmp	r0, r3
3400860c:	d007      	beq.n	3400861e <RCCEx_GetUSARTCLKFreq+0x62>
3400860e:	bf8e      	itee	hi
34008610:	4b5e      	ldrhi	r3, [pc, #376]	@ (3400878c <RCCEx_GetUSARTCLKFreq+0x1d0>)
34008612:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34008616:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
3400861a:	4298      	cmp	r0, r3
3400861c:	d1eb      	bne.n	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
}
3400861e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008622:	f7ff bdd3 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008626:	4b5a      	ldr	r3, [pc, #360]	@ (34008790 <RCCEx_GetUSARTCLKFreq+0x1d4>)
34008628:	4298      	cmp	r0, r3
3400862a:	d007      	beq.n	3400863c <RCCEx_GetUSARTCLKFreq+0x80>
3400862c:	bf8e      	itee	hi
3400862e:	4b59      	ldrhi	r3, [pc, #356]	@ (34008794 <RCCEx_GetUSARTCLKFreq+0x1d8>)
34008630:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34008634:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34008638:	4298      	cmp	r0, r3
3400863a:	d1dc      	bne.n	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3400863c:	f7fc fc3e 	bl	34004ebc <LL_RCC_IC9_IsEnabled>
34008640:	2800      	cmp	r0, #0
34008642:	d0d8      	beq.n	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
34008644:	f7fc fc42 	bl	34004ecc <LL_RCC_IC9_GetDivider>
34008648:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3400864a:	4b53      	ldr	r3, [pc, #332]	@ (34008798 <RCCEx_GetUSARTCLKFreq+0x1dc>)
3400864c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008650:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008658:	f000 808e 	beq.w	34008778 <RCCEx_GetUSARTCLKFreq+0x1bc>
3400865c:	f200 8082 	bhi.w	34008764 <RCCEx_GetUSARTCLKFreq+0x1a8>
34008660:	2b00      	cmp	r3, #0
34008662:	f040 8086 	bne.w	34008772 <RCCEx_GetUSARTCLKFreq+0x1b6>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008666:	f7ff fcb1 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
3400866a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400866e:	e7c3      	b.n	340085f8 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008670:	4b4a      	ldr	r3, [pc, #296]	@ (3400879c <RCCEx_GetUSARTCLKFreq+0x1e0>)
34008672:	4298      	cmp	r0, r3
34008674:	d045      	beq.n	34008702 <RCCEx_GetUSARTCLKFreq+0x146>
34008676:	d833      	bhi.n	340086e0 <RCCEx_GetUSARTCLKFreq+0x124>
34008678:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400867c:	4298      	cmp	r0, r3
3400867e:	d028      	beq.n	340086d2 <RCCEx_GetUSARTCLKFreq+0x116>
34008680:	d81c      	bhi.n	340086bc <RCCEx_GetUSARTCLKFreq+0x100>
34008682:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
34008686:	3bfc      	subs	r3, #252	@ 0xfc
34008688:	4298      	cmp	r0, r3
3400868a:	d006      	beq.n	3400869a <RCCEx_GetUSARTCLKFreq+0xde>
3400868c:	d810      	bhi.n	340086b0 <RCCEx_GetUSARTCLKFreq+0xf4>
3400868e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008692:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34008696:	4298      	cmp	r0, r3
34008698:	d1ad      	bne.n	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3400869a:	f7fc fc21 	bl	34004ee0 <LL_RCC_IC14_IsEnabled>
3400869e:	2800      	cmp	r0, #0
340086a0:	d0a9      	beq.n	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
340086a2:	f7fc fc25 	bl	34004ef0 <LL_RCC_IC14_GetDivider>
340086a6:	4b3c      	ldr	r3, [pc, #240]	@ (34008798 <RCCEx_GetUSARTCLKFreq+0x1dc>)
340086a8:	4604      	mov	r4, r0
340086aa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340086ae:	e7cf      	b.n	34008650 <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340086b0:	4b3b      	ldr	r3, [pc, #236]	@ (340087a0 <RCCEx_GetUSARTCLKFreq+0x1e4>)
340086b2:	4298      	cmp	r0, r3
340086b4:	d0f1      	beq.n	3400869a <RCCEx_GetUSARTCLKFreq+0xde>
340086b6:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
340086ba:	e7ec      	b.n	34008696 <RCCEx_GetUSARTCLKFreq+0xda>
340086bc:	4b39      	ldr	r3, [pc, #228]	@ (340087a4 <RCCEx_GetUSARTCLKFreq+0x1e8>)
340086be:	4298      	cmp	r0, r3
340086c0:	d007      	beq.n	340086d2 <RCCEx_GetUSARTCLKFreq+0x116>
340086c2:	bf8e      	itee	hi
340086c4:	4b38      	ldrhi	r3, [pc, #224]	@ (340087a8 <RCCEx_GetUSARTCLKFreq+0x1ec>)
340086c6:	f020 0004 	bicls.w	r0, r0, #4
340086ca:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
340086ce:	4298      	cmp	r0, r3
340086d0:	d191      	bne.n	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
340086d2:	f7fc fba7 	bl	34004e24 <LL_RCC_LSE_IsReady>
340086d6:	3800      	subs	r0, #0
340086d8:	bf18      	it	ne
340086da:	2001      	movne	r0, #1
340086dc:	03c0      	lsls	r0, r0, #15
340086de:	e78b      	b.n	340085f8 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340086e0:	4b32      	ldr	r3, [pc, #200]	@ (340087ac <RCCEx_GetUSARTCLKFreq+0x1f0>)
340086e2:	4298      	cmp	r0, r3
340086e4:	d020      	beq.n	34008728 <RCCEx_GetUSARTCLKFreq+0x16c>
340086e6:	d813      	bhi.n	34008710 <RCCEx_GetUSARTCLKFreq+0x154>
340086e8:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
340086ec:	4298      	cmp	r0, r3
340086ee:	d008      	beq.n	34008702 <RCCEx_GetUSARTCLKFreq+0x146>
340086f0:	bf8e      	itee	hi
340086f2:	4b2f      	ldrhi	r3, [pc, #188]	@ (340087b0 <RCCEx_GetUSARTCLKFreq+0x1f4>)
340086f4:	f020 0004 	bicls.w	r0, r0, #4
340086f8:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
340086fc:	4298      	cmp	r0, r3
340086fe:	f47f af7a 	bne.w	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
34008702:	f7fc fb87 	bl	34004e14 <LL_RCC_MSI_IsReady>
34008706:	2800      	cmp	r0, #0
34008708:	f43f af75 	beq.w	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
3400870c:	4829      	ldr	r0, [pc, #164]	@ (340087b4 <RCCEx_GetUSARTCLKFreq+0x1f8>)
  return usart_frequency;
3400870e:	e773      	b.n	340085f8 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008710:	4b29      	ldr	r3, [pc, #164]	@ (340087b8 <RCCEx_GetUSARTCLKFreq+0x1fc>)
34008712:	4298      	cmp	r0, r3
34008714:	d008      	beq.n	34008728 <RCCEx_GetUSARTCLKFreq+0x16c>
34008716:	bf8e      	itee	hi
34008718:	4b28      	ldrhi	r3, [pc, #160]	@ (340087bc <RCCEx_GetUSARTCLKFreq+0x200>)
3400871a:	f020 0004 	bicls.w	r0, r0, #4
3400871e:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008722:	4298      	cmp	r0, r3
34008724:	f47f af67 	bne.w	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
34008728:	f7fc fb6c 	bl	34004e04 <LL_RCC_HSI_IsReady>
3400872c:	2800      	cmp	r0, #0
3400872e:	f43f af62 	beq.w	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008732:	4b19      	ldr	r3, [pc, #100]	@ (34008798 <RCCEx_GetUSARTCLKFreq+0x1dc>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008734:	4822      	ldr	r0, [pc, #136]	@ (340087c0 <RCCEx_GetUSARTCLKFreq+0x204>)
34008736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008738:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400873c:	e007      	b.n	3400874e <RCCEx_GetUSARTCLKFreq+0x192>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400873e:	f7fc faeb 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34008742:	f7fc fbf1 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008746:	4b14      	ldr	r3, [pc, #80]	@ (34008798 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3400874a:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400874e:	40d8      	lsrs	r0, r3
34008750:	e752      	b.n	340085f8 <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008752:	f7fc fae1 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34008756:	f7fc fbe7 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3400875a:	4b0f      	ldr	r3, [pc, #60]	@ (34008798 <RCCEx_GetUSARTCLKFreq+0x1dc>)
3400875c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400875e:	f003 0307 	and.w	r3, r3, #7
34008762:	e7f4      	b.n	3400874e <RCCEx_GetUSARTCLKFreq+0x192>
        switch (LL_RCC_IC14_GetSource())
34008764:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008768:	f47f af45 	bne.w	340085f6 <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400876c:	f7ff fcee 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34008770:	e77b      	b.n	3400866a <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008772:	f7ff fc6b 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
34008776:	e778      	b.n	3400866a <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008778:	f7ff fca8 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
3400877c:	e775      	b.n	3400866a <RCCEx_GetUSARTCLKFreq+0xae>
3400877e:	bf00      	nop
34008780:	07021430 	.word	0x07021430
34008784:	07000830 	.word	0x07000830
34008788:	07011430 	.word	0x07011430
3400878c:	07010830 	.word	0x07010830
34008790:	07020434 	.word	0x07020434
34008794:	07020830 	.word	0x07020830
34008798:	56028000 	.word	0x56028000
3400879c:	07050030 	.word	0x07050030
340087a0:	07030830 	.word	0x07030830
340087a4:	07040830 	.word	0x07040830
340087a8:	07041430 	.word	0x07041430
340087ac:	07060030 	.word	0x07060030
340087b0:	07051430 	.word	0x07051430
340087b4:	003d0900 	.word	0x003d0900
340087b8:	07060830 	.word	0x07060830
340087bc:	07061430 	.word	0x07061430
340087c0:	03d09000 	.word	0x03d09000

340087c4 <RCCEx_GetUARTCLKFreq>:
{
340087c4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340087c6:	f7fc fb47 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
340087ca:	4b77      	ldr	r3, [pc, #476]	@ (340089a8 <RCCEx_GetUARTCLKFreq+0x1e4>)
340087cc:	4298      	cmp	r0, r3
340087ce:	d03e      	beq.n	3400884e <RCCEx_GetUARTCLKFreq+0x8a>
340087d0:	d859      	bhi.n	34008886 <RCCEx_GetUARTCLKFreq+0xc2>
340087d2:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
340087d6:	4298      	cmp	r0, r3
340087d8:	f000 80c6 	beq.w	34008968 <RCCEx_GetUARTCLKFreq+0x1a4>
340087dc:	d814      	bhi.n	34008808 <RCCEx_GetUARTCLKFreq+0x44>
340087de:	4b73      	ldr	r3, [pc, #460]	@ (340089ac <RCCEx_GetUARTCLKFreq+0x1e8>)
340087e0:	4298      	cmp	r0, r3
340087e2:	f000 80cb 	beq.w	3400897c <RCCEx_GetUARTCLKFreq+0x1b8>
340087e6:	3b01      	subs	r3, #1
340087e8:	4298      	cmp	r0, r3
340087ea:	d90b      	bls.n	34008804 <RCCEx_GetUARTCLKFreq+0x40>
340087ec:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
340087f0:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
340087f4:	429a      	cmp	r2, r3
340087f6:	f000 80b7 	beq.w	34008968 <RCCEx_GetUARTCLKFreq+0x1a4>
340087fa:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
340087fe:	4298      	cmp	r0, r3
34008800:	f000 80b2 	beq.w	34008968 <RCCEx_GetUARTCLKFreq+0x1a4>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34008804:	2000      	movs	r0, #0
}
34008806:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008808:	4b69      	ldr	r3, [pc, #420]	@ (340089b0 <RCCEx_GetUARTCLKFreq+0x1ec>)
3400880a:	4298      	cmp	r0, r3
3400880c:	d00d      	beq.n	3400882a <RCCEx_GetUARTCLKFreq+0x66>
3400880e:	d812      	bhi.n	34008836 <RCCEx_GetUARTCLKFreq+0x72>
34008810:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008814:	4298      	cmp	r0, r3
34008816:	d008      	beq.n	3400882a <RCCEx_GetUARTCLKFreq+0x66>
34008818:	d80b      	bhi.n	34008832 <RCCEx_GetUARTCLKFreq+0x6e>
3400881a:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
3400881e:	4298      	cmp	r0, r3
34008820:	d003      	beq.n	3400882a <RCCEx_GetUARTCLKFreq+0x66>
34008822:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008826:	4298      	cmp	r0, r3
34008828:	d1ec      	bne.n	34008804 <RCCEx_GetUARTCLKFreq+0x40>
}
3400882a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400882e:	f7ff bccd 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008832:	4b60      	ldr	r3, [pc, #384]	@ (340089b4 <RCCEx_GetUARTCLKFreq+0x1f0>)
34008834:	e7f7      	b.n	34008826 <RCCEx_GetUARTCLKFreq+0x62>
34008836:	4b60      	ldr	r3, [pc, #384]	@ (340089b8 <RCCEx_GetUARTCLKFreq+0x1f4>)
34008838:	4298      	cmp	r0, r3
3400883a:	d008      	beq.n	3400884e <RCCEx_GetUARTCLKFreq+0x8a>
3400883c:	d821      	bhi.n	34008882 <RCCEx_GetUARTCLKFreq+0xbe>
3400883e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008842:	4298      	cmp	r0, r3
34008844:	d003      	beq.n	3400884e <RCCEx_GetUARTCLKFreq+0x8a>
34008846:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
3400884a:	4298      	cmp	r0, r3
3400884c:	d1da      	bne.n	34008804 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3400884e:	f7fc fb35 	bl	34004ebc <LL_RCC_IC9_IsEnabled>
34008852:	2800      	cmp	r0, #0
34008854:	d0d6      	beq.n	34008804 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
34008856:	f7fc fb39 	bl	34004ecc <LL_RCC_IC9_GetDivider>
3400885a:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3400885c:	4b57      	ldr	r3, [pc, #348]	@ (340089bc <RCCEx_GetUARTCLKFreq+0x1f8>)
3400885e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008862:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400886a:	f000 809a 	beq.w	340089a2 <RCCEx_GetUARTCLKFreq+0x1de>
3400886e:	f200 808e 	bhi.w	3400898e <RCCEx_GetUARTCLKFreq+0x1ca>
34008872:	2b00      	cmp	r3, #0
34008874:	f040 8092 	bne.w	3400899c <RCCEx_GetUARTCLKFreq+0x1d8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008878:	f7ff fba8 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
3400887c:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008880:	e7c1      	b.n	34008806 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008882:	4b4f      	ldr	r3, [pc, #316]	@ (340089c0 <RCCEx_GetUARTCLKFreq+0x1fc>)
34008884:	e7e1      	b.n	3400884a <RCCEx_GetUARTCLKFreq+0x86>
34008886:	4b4f      	ldr	r3, [pc, #316]	@ (340089c4 <RCCEx_GetUARTCLKFreq+0x200>)
34008888:	4298      	cmp	r0, r3
3400888a:	d04a      	beq.n	34008922 <RCCEx_GetUARTCLKFreq+0x15e>
3400888c:	d836      	bhi.n	340088fc <RCCEx_GetUARTCLKFreq+0x138>
3400888e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008892:	4298      	cmp	r0, r3
34008894:	d029      	beq.n	340088ea <RCCEx_GetUARTCLKFreq+0x126>
34008896:	d81c      	bhi.n	340088d2 <RCCEx_GetUARTCLKFreq+0x10e>
34008898:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
3400889c:	3b04      	subs	r3, #4
3400889e:	4298      	cmp	r0, r3
340088a0:	d008      	beq.n	340088b4 <RCCEx_GetUARTCLKFreq+0xf0>
340088a2:	d812      	bhi.n	340088ca <RCCEx_GetUARTCLKFreq+0x106>
340088a4:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
340088a8:	4298      	cmp	r0, r3
340088aa:	d003      	beq.n	340088b4 <RCCEx_GetUARTCLKFreq+0xf0>
340088ac:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
340088b0:	4298      	cmp	r0, r3
340088b2:	d1a7      	bne.n	34008804 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
340088b4:	f7fc fb14 	bl	34004ee0 <LL_RCC_IC14_IsEnabled>
340088b8:	2800      	cmp	r0, #0
340088ba:	d0a3      	beq.n	34008804 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
340088bc:	f7fc fb18 	bl	34004ef0 <LL_RCC_IC14_GetDivider>
340088c0:	4b3e      	ldr	r3, [pc, #248]	@ (340089bc <RCCEx_GetUARTCLKFreq+0x1f8>)
340088c2:	4604      	mov	r4, r0
340088c4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340088c8:	e7cb      	b.n	34008862 <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
340088ca:	4b3f      	ldr	r3, [pc, #252]	@ (340089c8 <RCCEx_GetUARTCLKFreq+0x204>)
340088cc:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340088d0:	e7ee      	b.n	340088b0 <RCCEx_GetUARTCLKFreq+0xec>
340088d2:	4b3e      	ldr	r3, [pc, #248]	@ (340089cc <RCCEx_GetUARTCLKFreq+0x208>)
340088d4:	4298      	cmp	r0, r3
340088d6:	d008      	beq.n	340088ea <RCCEx_GetUARTCLKFreq+0x126>
340088d8:	d80e      	bhi.n	340088f8 <RCCEx_GetUARTCLKFreq+0x134>
340088da:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
340088de:	4298      	cmp	r0, r3
340088e0:	d003      	beq.n	340088ea <RCCEx_GetUARTCLKFreq+0x126>
340088e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340088e6:	4298      	cmp	r0, r3
340088e8:	d18c      	bne.n	34008804 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
340088ea:	f7fc fa9b 	bl	34004e24 <LL_RCC_LSE_IsReady>
340088ee:	3800      	subs	r0, #0
340088f0:	bf18      	it	ne
340088f2:	2001      	movne	r0, #1
340088f4:	03c0      	lsls	r0, r0, #15
340088f6:	e786      	b.n	34008806 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
340088f8:	4b35      	ldr	r3, [pc, #212]	@ (340089d0 <RCCEx_GetUARTCLKFreq+0x20c>)
340088fa:	e7f4      	b.n	340088e6 <RCCEx_GetUARTCLKFreq+0x122>
340088fc:	4b35      	ldr	r3, [pc, #212]	@ (340089d4 <RCCEx_GetUARTCLKFreq+0x210>)
340088fe:	4298      	cmp	r0, r3
34008900:	d025      	beq.n	3400894e <RCCEx_GetUARTCLKFreq+0x18a>
34008902:	d817      	bhi.n	34008934 <RCCEx_GetUARTCLKFreq+0x170>
34008904:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
34008908:	3b04      	subs	r3, #4
3400890a:	4298      	cmp	r0, r3
3400890c:	d009      	beq.n	34008922 <RCCEx_GetUARTCLKFreq+0x15e>
3400890e:	d80f      	bhi.n	34008930 <RCCEx_GetUARTCLKFreq+0x16c>
34008910:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008914:	4298      	cmp	r0, r3
34008916:	d004      	beq.n	34008922 <RCCEx_GetUARTCLKFreq+0x15e>
34008918:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400891c:	4298      	cmp	r0, r3
3400891e:	f47f af71 	bne.w	34008804 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
34008922:	f7fc fa77 	bl	34004e14 <LL_RCC_MSI_IsReady>
34008926:	2800      	cmp	r0, #0
34008928:	f43f af6c 	beq.w	34008804 <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
3400892c:	482a      	ldr	r0, [pc, #168]	@ (340089d8 <RCCEx_GetUARTCLKFreq+0x214>)
  return uart_frequency;
3400892e:	e76a      	b.n	34008806 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008930:	4b2a      	ldr	r3, [pc, #168]	@ (340089dc <RCCEx_GetUARTCLKFreq+0x218>)
34008932:	e7f3      	b.n	3400891c <RCCEx_GetUARTCLKFreq+0x158>
34008934:	4b2a      	ldr	r3, [pc, #168]	@ (340089e0 <RCCEx_GetUARTCLKFreq+0x21c>)
34008936:	4298      	cmp	r0, r3
34008938:	d009      	beq.n	3400894e <RCCEx_GetUARTCLKFreq+0x18a>
3400893a:	d813      	bhi.n	34008964 <RCCEx_GetUARTCLKFreq+0x1a0>
3400893c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008940:	4298      	cmp	r0, r3
34008942:	d004      	beq.n	3400894e <RCCEx_GetUARTCLKFreq+0x18a>
34008944:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008948:	4298      	cmp	r0, r3
3400894a:	f47f af5b 	bne.w	34008804 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
3400894e:	f7fc fa59 	bl	34004e04 <LL_RCC_HSI_IsReady>
34008952:	2800      	cmp	r0, #0
34008954:	f43f af56 	beq.w	34008804 <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008958:	4b18      	ldr	r3, [pc, #96]	@ (340089bc <RCCEx_GetUARTCLKFreq+0x1f8>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400895a:	4822      	ldr	r0, [pc, #136]	@ (340089e4 <RCCEx_GetUARTCLKFreq+0x220>)
3400895c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400895e:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008962:	e009      	b.n	34008978 <RCCEx_GetUARTCLKFreq+0x1b4>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008964:	4b20      	ldr	r3, [pc, #128]	@ (340089e8 <RCCEx_GetUARTCLKFreq+0x224>)
34008966:	e7ef      	b.n	34008948 <RCCEx_GetUARTCLKFreq+0x184>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008968:	f7fc f9d6 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
3400896c:	f7fc fadc 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008970:	4b12      	ldr	r3, [pc, #72]	@ (340089bc <RCCEx_GetUARTCLKFreq+0x1f8>)
34008972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008974:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008978:	40d8      	lsrs	r0, r3
3400897a:	e744      	b.n	34008806 <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400897c:	f7fc f9cc 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34008980:	f7fc fad2 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008984:	4b0d      	ldr	r3, [pc, #52]	@ (340089bc <RCCEx_GetUARTCLKFreq+0x1f8>)
34008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008988:	f3c3 1302 	ubfx	r3, r3, #4, #3
3400898c:	e7f4      	b.n	34008978 <RCCEx_GetUARTCLKFreq+0x1b4>
        switch (LL_RCC_IC14_GetSource())
3400898e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008992:	f47f af37 	bne.w	34008804 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008996:	f7ff fbd9 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
3400899a:	e76f      	b.n	3400887c <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400899c:	f7ff fb56 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
340089a0:	e76c      	b.n	3400887c <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340089a2:	f7ff fb93 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
340089a6:	e769      	b.n	3400887c <RCCEx_GetUARTCLKFreq+0xb8>
340089a8:	07021c30 	.word	0x07021c30
340089ac:	07000034 	.word	0x07000034
340089b0:	07011c30 	.word	0x07011c30
340089b4:	07011830 	.word	0x07011830
340089b8:	07021030 	.word	0x07021030
340089bc:	56028000 	.word	0x56028000
340089c0:	07021830 	.word	0x07021830
340089c4:	07050034 	.word	0x07050034
340089c8:	07031830 	.word	0x07031830
340089cc:	07041830 	.word	0x07041830
340089d0:	07041c30 	.word	0x07041c30
340089d4:	07060034 	.word	0x07060034
340089d8:	003d0900 	.word	0x003d0900
340089dc:	07051c30 	.word	0x07051c30
340089e0:	07061830 	.word	0x07061830
340089e4:	03d09000 	.word	0x03d09000
340089e8:	07061c30 	.word	0x07061c30

340089ec <RCCEx_GetSPICLKFreq>:
{
340089ec:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340089ee:	f7fc fa33 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
340089f2:	4b89      	ldr	r3, [pc, #548]	@ (34008c18 <RCCEx_GetSPICLKFreq+0x22c>)
340089f4:	4298      	cmp	r0, r3
340089f6:	d055      	beq.n	34008aa4 <RCCEx_GetSPICLKFreq+0xb8>
340089f8:	d865      	bhi.n	34008ac6 <RCCEx_GetSPICLKFreq+0xda>
340089fa:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
340089fe:	4298      	cmp	r0, r3
34008a00:	f000 80ca 	beq.w	34008b98 <RCCEx_GetSPICLKFreq+0x1ac>
34008a04:	d81e      	bhi.n	34008a44 <RCCEx_GetSPICLKFreq+0x58>
34008a06:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008a0a:	4298      	cmp	r0, r3
34008a0c:	f000 80ba 	beq.w	34008b84 <RCCEx_GetSPICLKFreq+0x198>
34008a10:	d80a      	bhi.n	34008a28 <RCCEx_GetSPICLKFreq+0x3c>
34008a12:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008a16:	4298      	cmp	r0, r3
34008a18:	d00b      	beq.n	34008a32 <RCCEx_GetSPICLKFreq+0x46>
34008a1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008a1e:	4298      	cmp	r0, r3
34008a20:	f000 80b0 	beq.w	34008b84 <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34008a24:	2000      	movs	r0, #0
}
34008a26:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008a28:	4b7c      	ldr	r3, [pc, #496]	@ (34008c1c <RCCEx_GetSPICLKFreq+0x230>)
34008a2a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008a2e:	4298      	cmp	r0, r3
34008a30:	d1f8      	bne.n	34008a24 <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008a32:	f7fc f971 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34008a36:	f7fc fa77 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008a3a:	4b79      	ldr	r3, [pc, #484]	@ (34008c20 <RCCEx_GetSPICLKFreq+0x234>)
34008a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008a3e:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008a42:	e0a7      	b.n	34008b94 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008a44:	4b77      	ldr	r3, [pc, #476]	@ (34008c24 <RCCEx_GetSPICLKFreq+0x238>)
34008a46:	4298      	cmp	r0, r3
34008a48:	f000 80af 	beq.w	34008baa <RCCEx_GetSPICLKFreq+0x1be>
34008a4c:	d81d      	bhi.n	34008a8a <RCCEx_GetSPICLKFreq+0x9e>
34008a4e:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34008a52:	4298      	cmp	r0, r3
34008a54:	d00a      	beq.n	34008a6c <RCCEx_GetSPICLKFreq+0x80>
34008a56:	d80d      	bhi.n	34008a74 <RCCEx_GetSPICLKFreq+0x88>
34008a58:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008a5c:	4298      	cmp	r0, r3
34008a5e:	d005      	beq.n	34008a6c <RCCEx_GetSPICLKFreq+0x80>
34008a60:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34008a64:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008a68:	4298      	cmp	r0, r3
34008a6a:	d1db      	bne.n	34008a24 <RCCEx_GetSPICLKFreq+0x38>
}
34008a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008a70:	f7ff bbac 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008a74:	4b6c      	ldr	r3, [pc, #432]	@ (34008c28 <RCCEx_GetSPICLKFreq+0x23c>)
34008a76:	4298      	cmp	r0, r3
34008a78:	d0f8      	beq.n	34008a6c <RCCEx_GetSPICLKFreq+0x80>
34008a7a:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008a7e:	4298      	cmp	r0, r3
34008a80:	f000 8093 	beq.w	34008baa <RCCEx_GetSPICLKFreq+0x1be>
34008a84:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008a88:	e7ee      	b.n	34008a68 <RCCEx_GetSPICLKFreq+0x7c>
34008a8a:	4b68      	ldr	r3, [pc, #416]	@ (34008c2c <RCCEx_GetSPICLKFreq+0x240>)
34008a8c:	4298      	cmp	r0, r3
34008a8e:	d009      	beq.n	34008aa4 <RCCEx_GetSPICLKFreq+0xb8>
34008a90:	d813      	bhi.n	34008aba <RCCEx_GetSPICLKFreq+0xce>
34008a92:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008a96:	4298      	cmp	r0, r3
34008a98:	f000 8087 	beq.w	34008baa <RCCEx_GetSPICLKFreq+0x1be>
34008a9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008aa0:	4298      	cmp	r0, r3
34008aa2:	d1bf      	bne.n	34008a24 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008aa4:	f7fc fa0a 	bl	34004ebc <LL_RCC_IC9_IsEnabled>
34008aa8:	2800      	cmp	r0, #0
34008aaa:	d0bb      	beq.n	34008a24 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
34008aac:	f7fc fa0e 	bl	34004ecc <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008ab0:	4b5b      	ldr	r3, [pc, #364]	@ (34008c20 <RCCEx_GetSPICLKFreq+0x234>)
34008ab2:	4604      	mov	r4, r0
34008ab4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34008ab8:	e082      	b.n	34008bc0 <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008aba:	4b5d      	ldr	r3, [pc, #372]	@ (34008c30 <RCCEx_GetSPICLKFreq+0x244>)
34008abc:	4298      	cmp	r0, r3
34008abe:	d074      	beq.n	34008baa <RCCEx_GetSPICLKFreq+0x1be>
34008ac0:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008ac4:	e7ec      	b.n	34008aa0 <RCCEx_GetSPICLKFreq+0xb4>
34008ac6:	4b5b      	ldr	r3, [pc, #364]	@ (34008c34 <RCCEx_GetSPICLKFreq+0x248>)
34008ac8:	4298      	cmp	r0, r3
34008aca:	d043      	beq.n	34008b54 <RCCEx_GetSPICLKFreq+0x168>
34008acc:	d830      	bhi.n	34008b30 <RCCEx_GetSPICLKFreq+0x144>
34008ace:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
34008ad2:	4298      	cmp	r0, r3
34008ad4:	d0e6      	beq.n	34008aa4 <RCCEx_GetSPICLKFreq+0xb8>
34008ad6:	d808      	bhi.n	34008aea <RCCEx_GetSPICLKFreq+0xfe>
34008ad8:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34008adc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008ae0:	429a      	cmp	r2, r3
34008ae2:	d079      	beq.n	34008bd8 <RCCEx_GetSPICLKFreq+0x1ec>
34008ae4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008ae8:	e7da      	b.n	34008aa0 <RCCEx_GetSPICLKFreq+0xb4>
34008aea:	4b53      	ldr	r3, [pc, #332]	@ (34008c38 <RCCEx_GetSPICLKFreq+0x24c>)
34008aec:	4298      	cmp	r0, r3
34008aee:	d00d      	beq.n	34008b0c <RCCEx_GetSPICLKFreq+0x120>
34008af0:	d814      	bhi.n	34008b1c <RCCEx_GetSPICLKFreq+0x130>
34008af2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008af6:	4298      	cmp	r0, r3
34008af8:	d008      	beq.n	34008b0c <RCCEx_GetSPICLKFreq+0x120>
34008afa:	d80d      	bhi.n	34008b18 <RCCEx_GetSPICLKFreq+0x12c>
34008afc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008b00:	4298      	cmp	r0, r3
34008b02:	d003      	beq.n	34008b0c <RCCEx_GetSPICLKFreq+0x120>
34008b04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008b08:	4298      	cmp	r0, r3
34008b0a:	d18b      	bne.n	34008a24 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34008b0c:	f7fc f982 	bl	34004e14 <LL_RCC_MSI_IsReady>
34008b10:	2800      	cmp	r0, #0
34008b12:	d087      	beq.n	34008a24 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34008b14:	4849      	ldr	r0, [pc, #292]	@ (34008c3c <RCCEx_GetSPICLKFreq+0x250>)
  return spi_frequency;
34008b16:	e786      	b.n	34008a26 <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008b18:	4b49      	ldr	r3, [pc, #292]	@ (34008c40 <RCCEx_GetSPICLKFreq+0x254>)
34008b1a:	e7f5      	b.n	34008b08 <RCCEx_GetSPICLKFreq+0x11c>
34008b1c:	4b49      	ldr	r3, [pc, #292]	@ (34008c44 <RCCEx_GetSPICLKFreq+0x258>)
34008b1e:	4298      	cmp	r0, r3
34008b20:	d018      	beq.n	34008b54 <RCCEx_GetSPICLKFreq+0x168>
34008b22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008b26:	4298      	cmp	r0, r3
34008b28:	d014      	beq.n	34008b54 <RCCEx_GetSPICLKFreq+0x168>
34008b2a:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008b2e:	e7eb      	b.n	34008b08 <RCCEx_GetSPICLKFreq+0x11c>
34008b30:	4b45      	ldr	r3, [pc, #276]	@ (34008c48 <RCCEx_GetSPICLKFreq+0x25c>)
34008b32:	4298      	cmp	r0, r3
34008b34:	d069      	beq.n	34008c0a <RCCEx_GetSPICLKFreq+0x21e>
34008b36:	d81e      	bhi.n	34008b76 <RCCEx_GetSPICLKFreq+0x18a>
34008b38:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008b3c:	4298      	cmp	r0, r3
34008b3e:	d018      	beq.n	34008b72 <RCCEx_GetSPICLKFreq+0x186>
34008b40:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34008b44:	d811      	bhi.n	34008b6a <RCCEx_GetSPICLKFreq+0x17e>
34008b46:	4a41      	ldr	r2, [pc, #260]	@ (34008c4c <RCCEx_GetSPICLKFreq+0x260>)
34008b48:	4293      	cmp	r3, r2
34008b4a:	d003      	beq.n	34008b54 <RCCEx_GetSPICLKFreq+0x168>
34008b4c:	4b40      	ldr	r3, [pc, #256]	@ (34008c50 <RCCEx_GetSPICLKFreq+0x264>)
34008b4e:	4298      	cmp	r0, r3
34008b50:	f47f af68 	bne.w	34008a24 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
34008b54:	f7fc f956 	bl	34004e04 <LL_RCC_HSI_IsReady>
34008b58:	2800      	cmp	r0, #0
34008b5a:	f43f af63 	beq.w	34008a24 <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008b5e:	4b30      	ldr	r3, [pc, #192]	@ (34008c20 <RCCEx_GetSPICLKFreq+0x234>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008b60:	483c      	ldr	r0, [pc, #240]	@ (34008c54 <RCCEx_GetSPICLKFreq+0x268>)
34008b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008b64:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008b68:	e014      	b.n	34008b94 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008b6a:	4a3b      	ldr	r2, [pc, #236]	@ (34008c58 <RCCEx_GetSPICLKFreq+0x26c>)
34008b6c:	4293      	cmp	r3, r2
34008b6e:	f47f af59 	bne.w	34008a24 <RCCEx_GetSPICLKFreq+0x38>
34008b72:	483a      	ldr	r0, [pc, #232]	@ (34008c5c <RCCEx_GetSPICLKFreq+0x270>)
34008b74:	e757      	b.n	34008a26 <RCCEx_GetSPICLKFreq+0x3a>
34008b76:	4b3a      	ldr	r3, [pc, #232]	@ (34008c60 <RCCEx_GetSPICLKFreq+0x274>)
34008b78:	4298      	cmp	r0, r3
34008b7a:	d046      	beq.n	34008c0a <RCCEx_GetSPICLKFreq+0x21e>
34008b7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008b80:	4298      	cmp	r0, r3
34008b82:	e7f4      	b.n	34008b6e <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008b84:	f7fc f8c8 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34008b88:	f7fc f9ce 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008b8c:	4b24      	ldr	r3, [pc, #144]	@ (34008c20 <RCCEx_GetSPICLKFreq+0x234>)
34008b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008b90:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008b94:	40d8      	lsrs	r0, r3
      break;
34008b96:	e746      	b.n	34008a26 <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008b98:	f7fc f8be 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34008b9c:	f7fc f9c4 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34008ba0:	4b1f      	ldr	r3, [pc, #124]	@ (34008c20 <RCCEx_GetSPICLKFreq+0x234>)
34008ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34008ba4:	f3c3 3302 	ubfx	r3, r3, #12, #3
34008ba8:	e7f4      	b.n	34008b94 <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008baa:	f7fc f975 	bl	34004e98 <LL_RCC_IC8_IsEnabled>
34008bae:	2800      	cmp	r0, #0
34008bb0:	f43f af38 	beq.w	34008a24 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
34008bb4:	f7fc f978 	bl	34004ea8 <LL_RCC_IC8_GetDivider>
34008bb8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008bba:	4b19      	ldr	r3, [pc, #100]	@ (34008c20 <RCCEx_GetSPICLKFreq+0x234>)
34008bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008bc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008bc8:	d01c      	beq.n	34008c04 <RCCEx_GetSPICLKFreq+0x218>
34008bca:	d811      	bhi.n	34008bf0 <RCCEx_GetSPICLKFreq+0x204>
34008bcc:	b9bb      	cbnz	r3, 34008bfe <RCCEx_GetSPICLKFreq+0x212>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008bce:	f7ff f9fd 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
34008bd2:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008bd6:	e726      	b.n	34008a26 <RCCEx_GetSPICLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008bd8:	f7fc f982 	bl	34004ee0 <LL_RCC_IC14_IsEnabled>
34008bdc:	2800      	cmp	r0, #0
34008bde:	f43f af21 	beq.w	34008a24 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
34008be2:	f7fc f985 	bl	34004ef0 <LL_RCC_IC14_GetDivider>
34008be6:	4b0e      	ldr	r3, [pc, #56]	@ (34008c20 <RCCEx_GetSPICLKFreq+0x234>)
34008be8:	4604      	mov	r4, r0
34008bea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008bee:	e7e7      	b.n	34008bc0 <RCCEx_GetSPICLKFreq+0x1d4>
        switch (LL_RCC_IC14_GetSource())
34008bf0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008bf4:	f47f af16 	bne.w	34008a24 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008bf8:	f7ff faa8 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34008bfc:	e7e9      	b.n	34008bd2 <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008bfe:	f7ff fa25 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
34008c02:	e7e6      	b.n	34008bd2 <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008c04:	f7ff fa62 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
34008c08:	e7e3      	b.n	34008bd2 <RCCEx_GetSPICLKFreq+0x1e6>
      if (LL_RCC_HSE_IsReady() != 0U)
34008c0a:	f7fc f8f3 	bl	34004df4 <LL_RCC_HSE_IsReady>
34008c0e:	2800      	cmp	r0, #0
34008c10:	f43f af08 	beq.w	34008a24 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
34008c14:	4813      	ldr	r0, [pc, #76]	@ (34008c64 <RCCEx_GetSPICLKFreq+0x278>)
34008c16:	e706      	b.n	34008a26 <RCCEx_GetSPICLKFreq+0x3a>
34008c18:	07030820 	.word	0x07030820
34008c1c:	07001020 	.word	0x07001020
34008c20:	56028000 	.word	0x56028000
34008c24:	07020820 	.word	0x07020820
34008c28:	07011820 	.word	0x07011820
34008c2c:	07021420 	.word	0x07021420
34008c30:	07021820 	.word	0x07021820
34008c34:	07050c20 	.word	0x07050c20
34008c38:	07041420 	.word	0x07041420
34008c3c:	003d0900 	.word	0x003d0900
34008c40:	07041020 	.word	0x07041020
34008c44:	07050420 	.word	0x07050420
34008c48:	07061020 	.word	0x07061020
34008c4c:	07051020 	.word	0x07051020
34008c50:	07051820 	.word	0x07051820
34008c54:	03d09000 	.word	0x03d09000
34008c58:	07060820 	.word	0x07060820
34008c5c:	00bb8000 	.word	0x00bb8000
34008c60:	07061420 	.word	0x07061420
34008c64:	02dc6c00 	.word	0x02dc6c00

34008c68 <RCCEx_GetSAICLKFreq>:
{
34008c68:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008c6a:	f7fc f8f5 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008c6e:	4b49      	ldr	r3, [pc, #292]	@ (34008d94 <RCCEx_GetSAICLKFreq+0x12c>)
34008c70:	4298      	cmp	r0, r3
34008c72:	d04a      	beq.n	34008d0a <RCCEx_GetSAICLKFreq+0xa2>
34008c74:	d839      	bhi.n	34008cea <RCCEx_GetSAICLKFreq+0x82>
34008c76:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008c7a:	4298      	cmp	r0, r3
34008c7c:	d021      	beq.n	34008cc2 <RCCEx_GetSAICLKFreq+0x5a>
34008c7e:	d815      	bhi.n	34008cac <RCCEx_GetSAICLKFreq+0x44>
34008c80:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008c84:	4298      	cmp	r0, r3
34008c86:	d00d      	beq.n	34008ca4 <RCCEx_GetSAICLKFreq+0x3c>
34008c88:	d809      	bhi.n	34008c9e <RCCEx_GetSAICLKFreq+0x36>
34008c8a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008c8e:	4298      	cmp	r0, r3
34008c90:	d04e      	beq.n	34008d30 <RCCEx_GetSAICLKFreq+0xc8>
34008c92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008c96:	4298      	cmp	r0, r3
34008c98:	d04a      	beq.n	34008d30 <RCCEx_GetSAICLKFreq+0xc8>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34008c9a:	2000      	movs	r0, #0
}
34008c9c:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008c9e:	4b3e      	ldr	r3, [pc, #248]	@ (34008d98 <RCCEx_GetSAICLKFreq+0x130>)
34008ca0:	4298      	cmp	r0, r3
34008ca2:	d1fa      	bne.n	34008c9a <RCCEx_GetSAICLKFreq+0x32>
}
34008ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008ca8:	f7ff ba90 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008cac:	4b3b      	ldr	r3, [pc, #236]	@ (34008d9c <RCCEx_GetSAICLKFreq+0x134>)
34008cae:	4298      	cmp	r0, r3
34008cb0:	d04d      	beq.n	34008d4e <RCCEx_GetSAICLKFreq+0xe6>
34008cb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008cb6:	4298      	cmp	r0, r3
34008cb8:	d049      	beq.n	34008d4e <RCCEx_GetSAICLKFreq+0xe6>
34008cba:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008cbe:	4298      	cmp	r0, r3
34008cc0:	d1eb      	bne.n	34008c9a <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34008cc2:	f7fc f8d7 	bl	34004e74 <LL_RCC_IC7_IsEnabled>
34008cc6:	2800      	cmp	r0, #0
34008cc8:	d0e7      	beq.n	34008c9a <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
34008cca:	f7fc f8db 	bl	34004e84 <LL_RCC_IC7_GetDivider>
34008cce:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008cd0:	4b33      	ldr	r3, [pc, #204]	@ (34008da0 <RCCEx_GetSAICLKFreq+0x138>)
34008cd2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34008cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008cde:	d047      	beq.n	34008d70 <RCCEx_GetSAICLKFreq+0x108>
34008ce0:	d840      	bhi.n	34008d64 <RCCEx_GetSAICLKFreq+0xfc>
34008ce2:	bb7b      	cbnz	r3, 34008d44 <RCCEx_GetSAICLKFreq+0xdc>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008ce4:	f7ff f972 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
34008ce8:	e02e      	b.n	34008d48 <RCCEx_GetSAICLKFreq+0xe0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008cea:	4b2e      	ldr	r3, [pc, #184]	@ (34008da4 <RCCEx_GetSAICLKFreq+0x13c>)
34008cec:	4298      	cmp	r0, r3
34008cee:	d01d      	beq.n	34008d2c <RCCEx_GetSAICLKFreq+0xc4>
34008cf0:	d811      	bhi.n	34008d16 <RCCEx_GetSAICLKFreq+0xae>
34008cf2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008cf6:	4298      	cmp	r0, r3
34008cf8:	d03d      	beq.n	34008d76 <RCCEx_GetSAICLKFreq+0x10e>
34008cfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008cfe:	4298      	cmp	r0, r3
34008d00:	d039      	beq.n	34008d76 <RCCEx_GetSAICLKFreq+0x10e>
34008d02:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008d06:	4298      	cmp	r0, r3
34008d08:	d1c7      	bne.n	34008c9a <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
34008d0a:	f7fc f883 	bl	34004e14 <LL_RCC_MSI_IsReady>
34008d0e:	2800      	cmp	r0, #0
34008d10:	d0c3      	beq.n	34008c9a <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
34008d12:	4825      	ldr	r0, [pc, #148]	@ (34008da8 <RCCEx_GetSAICLKFreq+0x140>)
  return sai_frequency;
34008d14:	e7c2      	b.n	34008c9c <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008d16:	4b25      	ldr	r3, [pc, #148]	@ (34008dac <RCCEx_GetSAICLKFreq+0x144>)
34008d18:	4298      	cmp	r0, r3
34008d1a:	d036      	beq.n	34008d8a <RCCEx_GetSAICLKFreq+0x122>
34008d1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008d20:	4298      	cmp	r0, r3
34008d22:	d032      	beq.n	34008d8a <RCCEx_GetSAICLKFreq+0x122>
34008d24:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008d28:	4298      	cmp	r0, r3
34008d2a:	d1b6      	bne.n	34008c9a <RCCEx_GetSAICLKFreq+0x32>
34008d2c:	4820      	ldr	r0, [pc, #128]	@ (34008db0 <RCCEx_GetSAICLKFreq+0x148>)
34008d2e:	e7b5      	b.n	34008c9c <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008d30:	f7fb fff2 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34008d34:	f7fc f8f8 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008d38:	4b19      	ldr	r3, [pc, #100]	@ (34008da0 <RCCEx_GetSAICLKFreq+0x138>)
34008d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008d3c:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008d40:	40d8      	lsrs	r0, r3
34008d42:	e7ab      	b.n	34008c9c <RCCEx_GetSAICLKFreq+0x34>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008d44:	f7ff f982 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
34008d48:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008d4c:	e7a6      	b.n	34008c9c <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008d4e:	f7fc f8a3 	bl	34004e98 <LL_RCC_IC8_IsEnabled>
34008d52:	2800      	cmp	r0, #0
34008d54:	d0a1      	beq.n	34008c9a <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
34008d56:	f7fc f8a7 	bl	34004ea8 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008d5a:	4b11      	ldr	r3, [pc, #68]	@ (34008da0 <RCCEx_GetSAICLKFreq+0x138>)
34008d5c:	4604      	mov	r4, r0
34008d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34008d62:	e7b8      	b.n	34008cd6 <RCCEx_GetSAICLKFreq+0x6e>
        switch (LL_RCC_IC8_GetSource())
34008d64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008d68:	d197      	bne.n	34008c9a <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008d6a:	f7ff f9ef 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34008d6e:	e7eb      	b.n	34008d48 <RCCEx_GetSAICLKFreq+0xe0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008d70:	f7ff f9ac 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
34008d74:	e7e8      	b.n	34008d48 <RCCEx_GetSAICLKFreq+0xe0>
      if (LL_RCC_HSI_IsReady() != 0U)
34008d76:	f7fc f845 	bl	34004e04 <LL_RCC_HSI_IsReady>
34008d7a:	2800      	cmp	r0, #0
34008d7c:	d08d      	beq.n	34008c9a <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008d7e:	4b08      	ldr	r3, [pc, #32]	@ (34008da0 <RCCEx_GetSAICLKFreq+0x138>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008d80:	480c      	ldr	r0, [pc, #48]	@ (34008db4 <RCCEx_GetSAICLKFreq+0x14c>)
34008d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008d84:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008d88:	e7da      	b.n	34008d40 <RCCEx_GetSAICLKFreq+0xd8>
}
34008d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34008d8e:	f7ff baa3 	b.w	340082d8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
34008d92:	bf00      	nop
34008d94:	07041418 	.word	0x07041418
34008d98:	07011818 	.word	0x07011818
34008d9c:	07031418 	.word	0x07031418
34008da0:	56028000 	.word	0x56028000
34008da4:	07061418 	.word	0x07061418
34008da8:	003d0900 	.word	0x003d0900
34008dac:	07071418 	.word	0x07071418
34008db0:	00bb8000 	.word	0x00bb8000
34008db4:	03d09000 	.word	0x03d09000

34008db8 <RCCEx_GetI3CCLKFreq>:
{
34008db8:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008dba:	f7fc f84d 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34008dbe:	4b3d      	ldr	r3, [pc, #244]	@ (34008eb4 <RCCEx_GetI3CCLKFreq+0xfc>)
34008dc0:	4298      	cmp	r0, r3
34008dc2:	d060      	beq.n	34008e86 <RCCEx_GetI3CCLKFreq+0xce>
34008dc4:	d830      	bhi.n	34008e28 <RCCEx_GetI3CCLKFreq+0x70>
34008dc6:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34008dca:	4298      	cmp	r0, r3
34008dcc:	d057      	beq.n	34008e7e <RCCEx_GetI3CCLKFreq+0xc6>
34008dce:	d80d      	bhi.n	34008dec <RCCEx_GetI3CCLKFreq+0x34>
34008dd0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008dd4:	4298      	cmp	r0, r3
34008dd6:	d048      	beq.n	34008e6a <RCCEx_GetI3CCLKFreq+0xb2>
34008dd8:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34008ddc:	4298      	cmp	r0, r3
34008dde:	d04e      	beq.n	34008e7e <RCCEx_GetI3CCLKFreq+0xc6>
34008de0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008de4:	4298      	cmp	r0, r3
34008de6:	d040      	beq.n	34008e6a <RCCEx_GetI3CCLKFreq+0xb2>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34008de8:	2000      	movs	r0, #0
}
34008dea:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34008dec:	4b32      	ldr	r3, [pc, #200]	@ (34008eb8 <RCCEx_GetI3CCLKFreq+0x100>)
34008dee:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008df2:	4298      	cmp	r0, r3
34008df4:	d1f8      	bne.n	34008de8 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34008df6:	4b31      	ldr	r3, [pc, #196]	@ (34008ebc <RCCEx_GetI3CCLKFreq+0x104>)
34008df8:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008dfc:	0592      	lsls	r2, r2, #22
34008dfe:	d5f3      	bpl.n	34008de8 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34008e00:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34008e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34008e08:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008e0c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008e0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34008e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008e16:	d04a      	beq.n	34008eae <RCCEx_GetI3CCLKFreq+0xf6>
34008e18:	d840      	bhi.n	34008e9c <RCCEx_GetI3CCLKFreq+0xe4>
34008e1a:	2b00      	cmp	r3, #0
34008e1c:	d144      	bne.n	34008ea8 <RCCEx_GetI3CCLKFreq+0xf0>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008e1e:	f7ff f8d5 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
34008e22:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008e26:	e7e0      	b.n	34008dea <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34008e28:	4b25      	ldr	r3, [pc, #148]	@ (34008ec0 <RCCEx_GetI3CCLKFreq+0x108>)
34008e2a:	4298      	cmp	r0, r3
34008e2c:	d008      	beq.n	34008e40 <RCCEx_GetI3CCLKFreq+0x88>
34008e2e:	d80d      	bhi.n	34008e4c <RCCEx_GetI3CCLKFreq+0x94>
34008e30:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008e34:	4298      	cmp	r0, r3
34008e36:	d026      	beq.n	34008e86 <RCCEx_GetI3CCLKFreq+0xce>
34008e38:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34008e3c:	4298      	cmp	r0, r3
34008e3e:	d1d3      	bne.n	34008de8 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
34008e40:	f7fb ffe8 	bl	34004e14 <LL_RCC_MSI_IsReady>
34008e44:	2800      	cmp	r0, #0
34008e46:	d0cf      	beq.n	34008de8 <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
34008e48:	481e      	ldr	r0, [pc, #120]	@ (34008ec4 <RCCEx_GetI3CCLKFreq+0x10c>)
  return i3c_frequency;
34008e4a:	e7ce      	b.n	34008dea <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34008e4c:	4b1e      	ldr	r3, [pc, #120]	@ (34008ec8 <RCCEx_GetI3CCLKFreq+0x110>)
34008e4e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008e52:	4298      	cmp	r0, r3
34008e54:	d1c8      	bne.n	34008de8 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
34008e56:	f7fb ffd5 	bl	34004e04 <LL_RCC_HSI_IsReady>
34008e5a:	2800      	cmp	r0, #0
34008e5c:	d0c4      	beq.n	34008de8 <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008e5e:	4b17      	ldr	r3, [pc, #92]	@ (34008ebc <RCCEx_GetI3CCLKFreq+0x104>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008e60:	481a      	ldr	r0, [pc, #104]	@ (34008ecc <RCCEx_GetI3CCLKFreq+0x114>)
34008e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008e64:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008e68:	e007      	b.n	34008e7a <RCCEx_GetI3CCLKFreq+0xc2>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008e6a:	f7fb ff55 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34008e6e:	f7fc f85b 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008e72:	4b12      	ldr	r3, [pc, #72]	@ (34008ebc <RCCEx_GetI3CCLKFreq+0x104>)
34008e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008e76:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008e7a:	40d8      	lsrs	r0, r3
34008e7c:	e7b5      	b.n	34008dea <RCCEx_GetI3CCLKFreq+0x32>
}
34008e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008e82:	f7ff b9a3 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34008e86:	f7fc f83d 	bl	34004f04 <LL_RCC_IC15_IsEnabled>
34008e8a:	2800      	cmp	r0, #0
34008e8c:	d0ac      	beq.n	34008de8 <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
34008e8e:	f7fc f841 	bl	34004f14 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008e92:	4b0a      	ldr	r3, [pc, #40]	@ (34008ebc <RCCEx_GetI3CCLKFreq+0x104>)
34008e94:	4604      	mov	r4, r0
34008e96:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34008e9a:	e7b8      	b.n	34008e0e <RCCEx_GetI3CCLKFreq+0x56>
        switch (LL_RCC_IC15_GetSource())
34008e9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008ea0:	d1a2      	bne.n	34008de8 <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008ea2:	f7ff f953 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34008ea6:	e7bc      	b.n	34008e22 <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008ea8:	f7ff f8d0 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
34008eac:	e7b9      	b.n	34008e22 <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008eae:	f7ff f90d 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
34008eb2:	e7b6      	b.n	34008e22 <RCCEx_GetI3CCLKFreq+0x6a>
34008eb4:	0703100c 	.word	0x0703100c
34008eb8:	0702100c 	.word	0x0702100c
34008ebc:	56028000 	.word	0x56028000
34008ec0:	0704140c 	.word	0x0704140c
34008ec4:	003d0900 	.word	0x003d0900
34008ec8:	0705100c 	.word	0x0705100c
34008ecc:	03d09000 	.word	0x03d09000

34008ed0 <RCCEx_GetSDMMCCLKFreq>:
{
34008ed0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008ed2:	f7fb ffc1 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34008ed6:	4b2d      	ldr	r3, [pc, #180]	@ (34008f8c <RCCEx_GetSDMMCCLKFreq+0xbc>)
34008ed8:	4298      	cmp	r0, r3
34008eda:	d01d      	beq.n	34008f18 <RCCEx_GetSDMMCCLKFreq+0x48>
34008edc:	d813      	bhi.n	34008f06 <RCCEx_GetSDMMCCLKFreq+0x36>
34008ede:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008ee2:	4298      	cmp	r0, r3
34008ee4:	d00b      	beq.n	34008efe <RCCEx_GetSDMMCCLKFreq+0x2e>
34008ee6:	d807      	bhi.n	34008ef8 <RCCEx_GetSDMMCCLKFreq+0x28>
34008ee8:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008eec:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008ef0:	4298      	cmp	r0, r3
34008ef2:	d02a      	beq.n	34008f4a <RCCEx_GetSDMMCCLKFreq+0x7a>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34008ef4:	2000      	movs	r0, #0
}
34008ef6:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34008ef8:	4b25      	ldr	r3, [pc, #148]	@ (34008f90 <RCCEx_GetSDMMCCLKFreq+0xc0>)
34008efa:	4298      	cmp	r0, r3
34008efc:	d1fa      	bne.n	34008ef4 <RCCEx_GetSDMMCCLKFreq+0x24>
}
34008efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008f02:	f7ff b963 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34008f06:	4b23      	ldr	r3, [pc, #140]	@ (34008f94 <RCCEx_GetSDMMCCLKFreq+0xc4>)
34008f08:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34008f0c:	429a      	cmp	r2, r3
34008f0e:	d022      	beq.n	34008f56 <RCCEx_GetSDMMCCLKFreq+0x86>
34008f10:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34008f14:	4298      	cmp	r0, r3
34008f16:	d1ed      	bne.n	34008ef4 <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34008f18:	4b1f      	ldr	r3, [pc, #124]	@ (34008f98 <RCCEx_GetSDMMCCLKFreq+0xc8>)
34008f1a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34008f1e:	f010 0008 	ands.w	r0, r0, #8
34008f22:	d0e8      	beq.n	34008ef6 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34008f24:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008f28:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34008f2c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008f30:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34008f32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC5_GetSource())
34008f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008f3a:	d023      	beq.n	34008f84 <RCCEx_GetSDMMCCLKFreq+0xb4>
34008f3c:	d819      	bhi.n	34008f72 <RCCEx_GetSDMMCCLKFreq+0xa2>
34008f3e:	b9f3      	cbnz	r3, 34008f7e <RCCEx_GetSDMMCCLKFreq+0xae>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008f40:	f7ff f844 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34008f44:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
34008f48:	e7d5      	b.n	34008ef6 <RCCEx_GetSDMMCCLKFreq+0x26>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008f4a:	f7fb fee5 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
}
34008f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008f52:	f7fb bfe9 	b.w	34004f28 <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34008f56:	4b10      	ldr	r3, [pc, #64]	@ (34008f98 <RCCEx_GetSDMMCCLKFreq+0xc8>)
34008f58:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34008f5c:	f010 0010 	ands.w	r0, r0, #16
34008f60:	d0c9      	beq.n	34008ef6 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008f62:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34008f66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008f6a:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008f6e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34008f70:	e7df      	b.n	34008f32 <RCCEx_GetSDMMCCLKFreq+0x62>
        switch (LL_RCC_IC5_GetSource())
34008f72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008f76:	d1bd      	bne.n	34008ef4 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008f78:	f7ff f8e8 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34008f7c:	e7e2      	b.n	34008f44 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008f7e:	f7ff f865 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
34008f82:	e7df      	b.n	34008f44 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008f84:	f7ff f8a2 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
34008f88:	e7dc      	b.n	34008f44 <RCCEx_GetSDMMCCLKFreq+0x74>
34008f8a:	bf00      	nop
34008f8c:	0302001c 	.word	0x0302001c
34008f90:	0301041c 	.word	0x0301041c
34008f94:	0303001c 	.word	0x0303001c
34008f98:	56028000 	.word	0x56028000

34008f9c <RCCEx_GetI2CCLKFreq>:
{
34008f9c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008f9e:	f7fb ff5b 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34008fa2:	4b50      	ldr	r3, [pc, #320]	@ (340090e4 <RCCEx_GetI2CCLKFreq+0x148>)
34008fa4:	4298      	cmp	r0, r3
34008fa6:	f000 8085 	beq.w	340090b4 <RCCEx_GetI2CCLKFreq+0x118>
34008faa:	d84b      	bhi.n	34009044 <RCCEx_GetI2CCLKFreq+0xa8>
34008fac:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
34008fb0:	4298      	cmp	r0, r3
34008fb2:	d01a      	beq.n	34008fea <RCCEx_GetI2CCLKFreq+0x4e>
34008fb4:	d81d      	bhi.n	34008ff2 <RCCEx_GetI2CCLKFreq+0x56>
34008fb6:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34008fba:	4298      	cmp	r0, r3
34008fbc:	d008      	beq.n	34008fd0 <RCCEx_GetI2CCLKFreq+0x34>
34008fbe:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34008fc2:	d80f      	bhi.n	34008fe4 <RCCEx_GetI2CCLKFreq+0x48>
34008fc4:	4a48      	ldr	r2, [pc, #288]	@ (340090e8 <RCCEx_GetI2CCLKFreq+0x14c>)
34008fc6:	4293      	cmp	r3, r2
34008fc8:	d002      	beq.n	34008fd0 <RCCEx_GetI2CCLKFreq+0x34>
34008fca:	4b48      	ldr	r3, [pc, #288]	@ (340090ec <RCCEx_GetI2CCLKFreq+0x150>)
34008fcc:	4298      	cmp	r0, r3
34008fce:	d14a      	bne.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008fd0:	f7fb fea2 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34008fd4:	f7fb ffa8 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008fd8:	4b45      	ldr	r3, [pc, #276]	@ (340090f0 <RCCEx_GetI2CCLKFreq+0x154>)
34008fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008fdc:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008fe0:	40d8      	lsrs	r0, r3
34008fe2:	e041      	b.n	34009068 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34008fe4:	4a43      	ldr	r2, [pc, #268]	@ (340090f4 <RCCEx_GetI2CCLKFreq+0x158>)
34008fe6:	4293      	cmp	r3, r2
34008fe8:	d13d      	bne.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
}
34008fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008fee:	f7ff b8ed 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34008ff2:	4b41      	ldr	r3, [pc, #260]	@ (340090f8 <RCCEx_GetI2CCLKFreq+0x15c>)
34008ff4:	4298      	cmp	r0, r3
34008ff6:	d008      	beq.n	3400900a <RCCEx_GetI2CCLKFreq+0x6e>
34008ff8:	d820      	bhi.n	3400903c <RCCEx_GetI2CCLKFreq+0xa0>
34008ffa:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34008ffe:	4298      	cmp	r0, r3
34009000:	d0f3      	beq.n	34008fea <RCCEx_GetI2CCLKFreq+0x4e>
34009002:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34009006:	4298      	cmp	r0, r3
34009008:	d12d      	bne.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3400900a:	4b39      	ldr	r3, [pc, #228]	@ (340090f0 <RCCEx_GetI2CCLKFreq+0x154>)
3400900c:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009010:	0592      	lsls	r2, r2, #22
34009012:	d528      	bpl.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009014:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34009018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400901c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009020:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009022:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34009026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400902a:	d057      	beq.n	340090dc <RCCEx_GetI2CCLKFreq+0x140>
3400902c:	d84d      	bhi.n	340090ca <RCCEx_GetI2CCLKFreq+0x12e>
3400902e:	2b00      	cmp	r3, #0
34009030:	d151      	bne.n	340090d6 <RCCEx_GetI2CCLKFreq+0x13a>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009032:	f7fe ffcb 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
34009036:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400903a:	e015      	b.n	34009068 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400903c:	4b2f      	ldr	r3, [pc, #188]	@ (340090fc <RCCEx_GetI2CCLKFreq+0x160>)
3400903e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009042:	e7e0      	b.n	34009006 <RCCEx_GetI2CCLKFreq+0x6a>
34009044:	4b2e      	ldr	r3, [pc, #184]	@ (34009100 <RCCEx_GetI2CCLKFreq+0x164>)
34009046:	4298      	cmp	r0, r3
34009048:	d014      	beq.n	34009074 <RCCEx_GetI2CCLKFreq+0xd8>
3400904a:	d819      	bhi.n	34009080 <RCCEx_GetI2CCLKFreq+0xe4>
3400904c:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009050:	4298      	cmp	r0, r3
34009052:	d02f      	beq.n	340090b4 <RCCEx_GetI2CCLKFreq+0x118>
34009054:	d809      	bhi.n	3400906a <RCCEx_GetI2CCLKFreq+0xce>
34009056:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400905a:	4298      	cmp	r0, r3
3400905c:	d02a      	beq.n	340090b4 <RCCEx_GetI2CCLKFreq+0x118>
3400905e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009062:	4298      	cmp	r0, r3
34009064:	d026      	beq.n	340090b4 <RCCEx_GetI2CCLKFreq+0x118>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
34009066:	2000      	movs	r0, #0
}
34009068:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400906a:	4b26      	ldr	r3, [pc, #152]	@ (34009104 <RCCEx_GetI2CCLKFreq+0x168>)
3400906c:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009070:	4298      	cmp	r0, r3
34009072:	d1f8      	bne.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_MSI_IsReady() != 0U)
34009074:	f7fb fece 	bl	34004e14 <LL_RCC_MSI_IsReady>
34009078:	2800      	cmp	r0, #0
3400907a:	d0f4      	beq.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
        i2c_frequency = MSI_VALUE;
3400907c:	4822      	ldr	r0, [pc, #136]	@ (34009108 <RCCEx_GetI2CCLKFreq+0x16c>)
  return i2c_frequency;
3400907e:	e7f3      	b.n	34009068 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009080:	4b22      	ldr	r3, [pc, #136]	@ (3400910c <RCCEx_GetI2CCLKFreq+0x170>)
34009082:	4298      	cmp	r0, r3
34009084:	d008      	beq.n	34009098 <RCCEx_GetI2CCLKFreq+0xfc>
34009086:	d811      	bhi.n	340090ac <RCCEx_GetI2CCLKFreq+0x110>
34009088:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3400908c:	4298      	cmp	r0, r3
3400908e:	d0f1      	beq.n	34009074 <RCCEx_GetI2CCLKFreq+0xd8>
34009090:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34009094:	4298      	cmp	r0, r3
34009096:	d1e6      	bne.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_HSI_IsReady() != 0U)
34009098:	f7fb feb4 	bl	34004e04 <LL_RCC_HSI_IsReady>
3400909c:	2800      	cmp	r0, #0
3400909e:	d0e2      	beq.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340090a0:	4b13      	ldr	r3, [pc, #76]	@ (340090f0 <RCCEx_GetI2CCLKFreq+0x154>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340090a2:	481b      	ldr	r0, [pc, #108]	@ (34009110 <RCCEx_GetI2CCLKFreq+0x174>)
340090a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340090a6:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340090aa:	e799      	b.n	34008fe0 <RCCEx_GetI2CCLKFreq+0x44>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340090ac:	4b19      	ldr	r3, [pc, #100]	@ (34009114 <RCCEx_GetI2CCLKFreq+0x178>)
340090ae:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340090b2:	e7ef      	b.n	34009094 <RCCEx_GetI2CCLKFreq+0xf8>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340090b4:	f7fb ff26 	bl	34004f04 <LL_RCC_IC15_IsEnabled>
340090b8:	2800      	cmp	r0, #0
340090ba:	d0d4      	beq.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
        ic_divider = LL_RCC_IC15_GetDivider();
340090bc:	f7fb ff2a 	bl	34004f14 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340090c0:	4b0b      	ldr	r3, [pc, #44]	@ (340090f0 <RCCEx_GetI2CCLKFreq+0x154>)
340090c2:	4604      	mov	r4, r0
340090c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340090c8:	e7ab      	b.n	34009022 <RCCEx_GetI2CCLKFreq+0x86>
        switch (LL_RCC_IC15_GetSource())
340090ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340090ce:	d1ca      	bne.n	34009066 <RCCEx_GetI2CCLKFreq+0xca>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340090d0:	f7ff f83c 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
340090d4:	e7af      	b.n	34009036 <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340090d6:	f7fe ffb9 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
340090da:	e7ac      	b.n	34009036 <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340090dc:	f7fe fff6 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
340090e0:	e7a9      	b.n	34009036 <RCCEx_GetI2CCLKFreq+0x9a>
340090e2:	bf00      	nop
340090e4:	0703000c 	.word	0x0703000c
340090e8:	0700000c 	.word	0x0700000c
340090ec:	0700080c 	.word	0x0700080c
340090f0:	56028000 	.word	0x56028000
340090f4:	0701000c 	.word	0x0701000c
340090f8:	0702040c 	.word	0x0702040c
340090fc:	0702080c 	.word	0x0702080c
34009100:	0704080c 	.word	0x0704080c
34009104:	0704000c 	.word	0x0704000c
34009108:	003d0900 	.word	0x003d0900
3400910c:	0705040c 	.word	0x0705040c
34009110:	03d09000 	.word	0x03d09000
34009114:	0705080c 	.word	0x0705080c

34009118 <RCCEx_GetLPTIMCLKFreq>:
{
34009118:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400911a:	f7fb fe9d 	bl	34004e58 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400911e:	4b63      	ldr	r3, [pc, #396]	@ (340092ac <RCCEx_GetLPTIMCLKFreq+0x194>)
34009120:	4298      	cmp	r0, r3
34009122:	d03a      	beq.n	3400919a <RCCEx_GetLPTIMCLKFreq+0x82>
34009124:	d850      	bhi.n	340091c8 <RCCEx_GetLPTIMCLKFreq+0xb0>
34009126:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
3400912a:	4298      	cmp	r0, r3
3400912c:	f000 80a7 	beq.w	3400927e <RCCEx_GetLPTIMCLKFreq+0x166>
34009130:	d813      	bhi.n	3400915a <RCCEx_GetLPTIMCLKFreq+0x42>
34009132:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34009136:	4298      	cmp	r0, r3
34009138:	f000 8097 	beq.w	3400926a <RCCEx_GetLPTIMCLKFreq+0x152>
3400913c:	3b01      	subs	r3, #1
3400913e:	4298      	cmp	r0, r3
34009140:	d909      	bls.n	34009156 <RCCEx_GetLPTIMCLKFreq+0x3e>
34009142:	f203 4301 	addw	r3, r3, #1025	@ 0x401
34009146:	4298      	cmp	r0, r3
34009148:	f000 8099 	beq.w	3400927e <RCCEx_GetLPTIMCLKFreq+0x166>
3400914c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009150:	4298      	cmp	r0, r3
34009152:	f000 8094 	beq.w	3400927e <RCCEx_GetLPTIMCLKFreq+0x166>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34009156:	2000      	movs	r0, #0
}
34009158:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400915a:	4b55      	ldr	r3, [pc, #340]	@ (340092b0 <RCCEx_GetLPTIMCLKFreq+0x198>)
3400915c:	4298      	cmp	r0, r3
3400915e:	d015      	beq.n	3400918c <RCCEx_GetLPTIMCLKFreq+0x74>
34009160:	d808      	bhi.n	34009174 <RCCEx_GetLPTIMCLKFreq+0x5c>
34009162:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34009166:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400916a:	429a      	cmp	r2, r3
3400916c:	d00e      	beq.n	3400918c <RCCEx_GetLPTIMCLKFreq+0x74>
3400916e:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34009172:	e7ed      	b.n	34009150 <RCCEx_GetLPTIMCLKFreq+0x38>
34009174:	4b4f      	ldr	r3, [pc, #316]	@ (340092b4 <RCCEx_GetLPTIMCLKFreq+0x19c>)
34009176:	4298      	cmp	r0, r3
34009178:	d00f      	beq.n	3400919a <RCCEx_GetLPTIMCLKFreq+0x82>
3400917a:	d80b      	bhi.n	34009194 <RCCEx_GetLPTIMCLKFreq+0x7c>
3400917c:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009180:	4298      	cmp	r0, r3
34009182:	d003      	beq.n	3400918c <RCCEx_GetLPTIMCLKFreq+0x74>
34009184:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009188:	4298      	cmp	r0, r3
3400918a:	d1e4      	bne.n	34009156 <RCCEx_GetLPTIMCLKFreq+0x3e>
}
3400918c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009190:	f7ff b81c 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009194:	4b48      	ldr	r3, [pc, #288]	@ (340092b8 <RCCEx_GetLPTIMCLKFreq+0x1a0>)
34009196:	4298      	cmp	r0, r3
34009198:	d1dd      	bne.n	34009156 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3400919a:	f7fb feb3 	bl	34004f04 <LL_RCC_IC15_IsEnabled>
3400919e:	2800      	cmp	r0, #0
340091a0:	d0d9      	beq.n	34009156 <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
340091a2:	f7fb feb7 	bl	34004f14 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340091a6:	4b45      	ldr	r3, [pc, #276]	@ (340092bc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340091a8:	4604      	mov	r4, r0
340091aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340091ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
340091b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340091b6:	d075      	beq.n	340092a4 <RCCEx_GetLPTIMCLKFreq+0x18c>
340091b8:	d86a      	bhi.n	34009290 <RCCEx_GetLPTIMCLKFreq+0x178>
340091ba:	2b00      	cmp	r3, #0
340091bc:	d16f      	bne.n	3400929e <RCCEx_GetLPTIMCLKFreq+0x186>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340091be:	f7fe ff05 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
340091c2:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340091c6:	e7c7      	b.n	34009158 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340091c8:	4b3d      	ldr	r3, [pc, #244]	@ (340092c0 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
340091ca:	4298      	cmp	r0, r3
340091cc:	d034      	beq.n	34009238 <RCCEx_GetLPTIMCLKFreq+0x120>
340091ce:	d824      	bhi.n	3400921a <RCCEx_GetLPTIMCLKFreq+0x102>
340091d0:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340091d4:	4298      	cmp	r0, r3
340091d6:	d00f      	beq.n	340091f8 <RCCEx_GetLPTIMCLKFreq+0xe0>
340091d8:	d815      	bhi.n	34009206 <RCCEx_GetLPTIMCLKFreq+0xee>
340091da:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340091de:	4298      	cmp	r0, r3
340091e0:	d00a      	beq.n	340091f8 <RCCEx_GetLPTIMCLKFreq+0xe0>
340091e2:	d806      	bhi.n	340091f2 <RCCEx_GetLPTIMCLKFreq+0xda>
340091e4:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340091e8:	4298      	cmp	r0, r3
340091ea:	d0d6      	beq.n	3400919a <RCCEx_GetLPTIMCLKFreq+0x82>
340091ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340091f0:	e7d1      	b.n	34009196 <RCCEx_GetLPTIMCLKFreq+0x7e>
340091f2:	4b34      	ldr	r3, [pc, #208]	@ (340092c4 <RCCEx_GetLPTIMCLKFreq+0x1ac>)
340091f4:	4298      	cmp	r0, r3
340091f6:	d1ae      	bne.n	34009156 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
340091f8:	f7fb fe14 	bl	34004e24 <LL_RCC_LSE_IsReady>
340091fc:	3800      	subs	r0, #0
340091fe:	bf18      	it	ne
34009200:	2001      	movne	r0, #1
34009202:	03c0      	lsls	r0, r0, #15
34009204:	e7a8      	b.n	34009158 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009206:	4b30      	ldr	r3, [pc, #192]	@ (340092c8 <RCCEx_GetLPTIMCLKFreq+0x1b0>)
34009208:	4298      	cmp	r0, r3
3400920a:	d0f5      	beq.n	340091f8 <RCCEx_GetLPTIMCLKFreq+0xe0>
3400920c:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
34009210:	4298      	cmp	r0, r3
34009212:	d011      	beq.n	34009238 <RCCEx_GetLPTIMCLKFreq+0x120>
34009214:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009218:	e7ec      	b.n	340091f4 <RCCEx_GetLPTIMCLKFreq+0xdc>
3400921a:	4b2c      	ldr	r3, [pc, #176]	@ (340092cc <RCCEx_GetLPTIMCLKFreq+0x1b4>)
3400921c:	4298      	cmp	r0, r3
3400921e:	d015      	beq.n	3400924c <RCCEx_GetLPTIMCLKFreq+0x134>
34009220:	d81b      	bhi.n	3400925a <RCCEx_GetLPTIMCLKFreq+0x142>
34009222:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009226:	4298      	cmp	r0, r3
34009228:	d006      	beq.n	34009238 <RCCEx_GetLPTIMCLKFreq+0x120>
3400922a:	d80c      	bhi.n	34009246 <RCCEx_GetLPTIMCLKFreq+0x12e>
3400922c:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009230:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34009234:	4298      	cmp	r0, r3
34009236:	d18e      	bne.n	34009156 <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34009238:	4b20      	ldr	r3, [pc, #128]	@ (340092bc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3400923a:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
3400923c:	07db      	lsls	r3, r3, #31
3400923e:	d58a      	bpl.n	34009156 <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
34009240:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
34009244:	e788      	b.n	34009158 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009246:	4b22      	ldr	r3, [pc, #136]	@ (340092d0 <RCCEx_GetLPTIMCLKFreq+0x1b8>)
34009248:	4298      	cmp	r0, r3
3400924a:	d184      	bne.n	34009156 <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3400924c:	f7fb fd64 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009250:	4b1a      	ldr	r3, [pc, #104]	@ (340092bc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009254:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009258:	e00f      	b.n	3400927a <RCCEx_GetLPTIMCLKFreq+0x162>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400925a:	4b1e      	ldr	r3, [pc, #120]	@ (340092d4 <RCCEx_GetLPTIMCLKFreq+0x1bc>)
3400925c:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34009260:	429a      	cmp	r2, r3
34009262:	d0f3      	beq.n	3400924c <RCCEx_GetLPTIMCLKFreq+0x134>
34009264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34009268:	e7ee      	b.n	34009248 <RCCEx_GetLPTIMCLKFreq+0x130>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400926a:	f7fb fd55 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
3400926e:	f7fb fe5b 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009272:	4b12      	ldr	r3, [pc, #72]	@ (340092bc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009276:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3400927a:	40d8      	lsrs	r0, r3
      break;
3400927c:	e76c      	b.n	34009158 <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400927e:	f7fb fd4b 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
34009282:	f7fb fe51 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34009286:	4b0d      	ldr	r3, [pc, #52]	@ (340092bc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3400928a:	f3c3 3302 	ubfx	r3, r3, #12, #3
3400928e:	e7f4      	b.n	3400927a <RCCEx_GetLPTIMCLKFreq+0x162>
        switch (LL_RCC_IC15_GetSource())
34009290:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009294:	f47f af5f 	bne.w	34009156 <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009298:	f7fe ff58 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
3400929c:	e791      	b.n	340091c2 <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400929e:	f7fe fed5 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
340092a2:	e78e      	b.n	340091c2 <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340092a4:	f7fe ff12 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
340092a8:	e78b      	b.n	340091c2 <RCCEx_GetLPTIMCLKFreq+0xaa>
340092aa:	bf00      	nop
340092ac:	0702102c 	.word	0x0702102c
340092b0:	0701102c 	.word	0x0701102c
340092b4:	0702082c 	.word	0x0702082c
340092b8:	07020c2c 	.word	0x07020c2c
340092bc:	56028000 	.word	0x56028000
340092c0:	07040c2c 	.word	0x07040c2c
340092c4:	07030c2c 	.word	0x07030c2c
340092c8:	0703182c 	.word	0x0703182c
340092cc:	07050c2c 	.word	0x07050c2c
340092d0:	0705082c 	.word	0x0705082c
340092d4:	0705102c 	.word	0x0705102c

340092d8 <HAL_RCCEx_GetPeriphCLKFreq>:
{
340092d8:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
340092da:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
340092de:	430b      	orrs	r3, r1
340092e0:	f000 8447 	beq.w	34009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
340092e4:	4bbf      	ldr	r3, [pc, #764]	@ (340095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
340092e6:	4298      	cmp	r0, r3
340092e8:	f171 0300 	sbcs.w	r3, r1, #0
340092ec:	f080 80e6 	bcs.w	340094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
340092f0:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
340092f4:	430b      	orrs	r3, r1
340092f6:	f000 835b 	beq.w	340099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
340092fa:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
340092fe:	f171 0300 	sbcs.w	r3, r1, #0
34009302:	d26a      	bcs.n	340093da <HAL_RCCEx_GetPeriphCLKFreq+0x102>
34009304:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
34009308:	430b      	orrs	r3, r1
3400930a:	f000 82b9 	beq.w	34009880 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
3400930e:	f240 2301 	movw	r3, #513	@ 0x201
34009312:	4298      	cmp	r0, r3
34009314:	f171 0300 	sbcs.w	r3, r1, #0
34009318:	d224      	bcs.n	34009364 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
3400931a:	2809      	cmp	r0, #9
3400931c:	f171 0300 	sbcs.w	r3, r1, #0
34009320:	d215      	bcs.n	3400934e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
34009322:	ea50 0301 	orrs.w	r3, r0, r1
34009326:	d01b      	beq.n	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34009328:	3801      	subs	r0, #1
3400932a:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
3400932e:	2808      	cmp	r0, #8
34009330:	f171 0100 	sbcs.w	r1, r1, #0
34009334:	d214      	bcs.n	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34009336:	2807      	cmp	r0, #7
34009338:	d812      	bhi.n	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
3400933a:	e8df f010 	tbh	[pc, r0, lsl #1]
3400933e:	01a6      	.short	0x01a6
34009340:	0011020f 	.word	0x0011020f
34009344:	00110285 	.word	0x00110285
34009348:	00110011 	.word	0x00110011
3400934c:	0235      	.short	0x0235
3400934e:	f1a0 0310 	sub.w	r3, r0, #16
34009352:	430b      	orrs	r3, r1
34009354:	f000 8242 	beq.w	340097dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
34009358:	3820      	subs	r0, #32
3400935a:	4308      	orrs	r0, r1
3400935c:	f000 8268 	beq.w	34009830 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34009360:	2000      	movs	r0, #0
34009362:	e219      	b.n	34009798 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
34009364:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
34009368:	430b      	orrs	r3, r1
3400936a:	f000 831d 	beq.w	340099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
3400936e:	f242 0301 	movw	r3, #8193	@ 0x2001
34009372:	4298      	cmp	r0, r3
34009374:	f171 0300 	sbcs.w	r3, r1, #0
34009378:	d224      	bcs.n	340093c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
3400937a:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
3400937e:	430b      	orrs	r3, r1
34009380:	f000 82df 	beq.w	34009942 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
34009384:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
34009388:	430b      	orrs	r3, r1
3400938a:	f000 8308 	beq.w	3400999e <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
3400938e:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
34009392:	4308      	orrs	r0, r1
34009394:	d1e4      	bne.n	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34009396:	4d94      	ldr	r5, [pc, #592]	@ (340095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34009398:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
3400939c:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
340093a0:	2b02      	cmp	r3, #2
340093a2:	f000 82c1 	beq.w	34009928 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
340093a6:	2b03      	cmp	r3, #3
340093a8:	f000 8256 	beq.w	34009858 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
340093ac:	2b01      	cmp	r3, #1
340093ae:	f000 824b 	beq.w	34009848 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340093b2:	f7fb fcb1 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
340093b6:	f7fb fdb7 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340093ba:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
340093bc:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340093c0:	40d8      	lsrs	r0, r3
340093c2:	e1e9      	b.n	34009798 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
340093c4:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
340093c8:	430b      	orrs	r3, r1
340093ca:	f000 82ef 	beq.w	340099ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
340093ce:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
340093d2:	4308      	orrs	r0, r1
340093d4:	d1c4      	bne.n	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
340093d6:	4885      	ldr	r0, [pc, #532]	@ (340095ec <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
340093d8:	e2e2      	b.n	340099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
  switch (PeriphClk)
340093da:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
340093de:	430b      	orrs	r3, r1
340093e0:	f000 82f6 	beq.w	340099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
340093e4:	4b82      	ldr	r3, [pc, #520]	@ (340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
340093e6:	4298      	cmp	r0, r3
340093e8:	f171 0300 	sbcs.w	r3, r1, #0
340093ec:	d224      	bcs.n	34009438 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
340093ee:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
340093f2:	430b      	orrs	r3, r1
340093f4:	f000 82e8 	beq.w	340099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
340093f8:	4b7e      	ldr	r3, [pc, #504]	@ (340095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
340093fa:	4298      	cmp	r0, r3
340093fc:	f171 0300 	sbcs.w	r3, r1, #0
34009400:	d20f      	bcs.n	34009422 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
34009402:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
34009406:	430b      	orrs	r3, r1
34009408:	f000 82d7 	beq.w	340099ba <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
3400940c:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
34009410:	430b      	orrs	r3, r1
34009412:	f000 82d7 	beq.w	340099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34009416:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
3400941a:	4308      	orrs	r0, r1
3400941c:	d1a0      	bne.n	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3400941e:	4876      	ldr	r0, [pc, #472]	@ (340095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
34009420:	e2c7      	b.n	340099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
  switch (PeriphClk)
34009422:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
34009426:	430b      	orrs	r3, r1
34009428:	f000 82d0 	beq.w	340099cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
3400942c:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
34009430:	4308      	orrs	r0, r1
34009432:	d195      	bne.n	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34009434:	4871      	ldr	r0, [pc, #452]	@ (340095fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
34009436:	e2c1      	b.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  switch (PeriphClk)
34009438:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
3400943c:	430b      	orrs	r3, r1
3400943e:	f000 834d 	beq.w	34009adc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
34009442:	4b6f      	ldr	r3, [pc, #444]	@ (34009600 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
34009444:	4298      	cmp	r0, r3
34009446:	f171 0300 	sbcs.w	r3, r1, #0
3400944a:	d228      	bcs.n	3400949e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
3400944c:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
34009450:	430b      	orrs	r3, r1
34009452:	f000 8302 	beq.w	34009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
34009456:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
3400945a:	4308      	orrs	r0, r1
3400945c:	d180      	bne.n	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
3400945e:	4d62      	ldr	r5, [pc, #392]	@ (340095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34009460:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
34009464:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009468:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400946c:	f000 8195 	beq.w	3400979a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34009470:	f200 8319 	bhi.w	34009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
34009474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009478:	f000 831f 	beq.w	34009aba <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
3400947c:	f240 81e1 	bls.w	34009842 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34009480:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34009484:	f47f af6c 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009488:	f7fb fd06 	bl	34004e98 <LL_RCC_IC8_IsEnabled>
3400948c:	2800      	cmp	r0, #0
3400948e:	f43f af67 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
34009492:	f7fb fd09 	bl	34004ea8 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009496:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3400949a:	4604      	mov	r4, r0
3400949c:	e191      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (PeriphClk)
3400949e:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
340094a2:	430b      	orrs	r3, r1
340094a4:	f000 8344 	beq.w	34009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
340094a8:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
340094ac:	4308      	orrs	r0, r1
340094ae:	f47f af57 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
340094b2:	4854      	ldr	r0, [pc, #336]	@ (34009604 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
}
340094b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
340094b8:	f7ff bbd6 	b.w	34008c68 <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
340094bc:	2300      	movs	r3, #0
340094be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340094c2:	4291      	cmp	r1, r2
340094c4:	bf08      	it	eq
340094c6:	4298      	cmpeq	r0, r3
340094c8:	f000 836f 	beq.w	34009baa <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
340094cc:	4283      	cmp	r3, r0
340094ce:	418a      	sbcs	r2, r1
340094d0:	d35f      	bcc.n	34009592 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
340094d2:	2210      	movs	r2, #16
340094d4:	4291      	cmp	r1, r2
340094d6:	bf08      	it	eq
340094d8:	4298      	cmpeq	r0, r3
340094da:	f000 8359 	beq.w	34009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
340094de:	4283      	cmp	r3, r0
340094e0:	418a      	sbcs	r2, r1
340094e2:	d329      	bcc.n	34009538 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
340094e4:	2202      	movs	r2, #2
340094e6:	4291      	cmp	r1, r2
340094e8:	bf08      	it	eq
340094ea:	4298      	cmpeq	r0, r3
340094ec:	f000 8349 	beq.w	34009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
340094f0:	4283      	cmp	r3, r0
340094f2:	418a      	sbcs	r2, r1
340094f4:	d314      	bcc.n	34009520 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
340094f6:	4299      	cmp	r1, r3
340094f8:	bf08      	it	eq
340094fa:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
340094fe:	f000 833a 	beq.w	34009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
34009502:	2901      	cmp	r1, #1
34009504:	bf08      	it	eq
34009506:	4298      	cmpeq	r0, r3
34009508:	f000 8337 	beq.w	34009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
3400950c:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
34009510:	4308      	orrs	r0, r1
34009512:	f47f af25 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34009516:	483c      	ldr	r0, [pc, #240]	@ (34009608 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
}
34009518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3400951c:	f7ff bcd8 	b.w	34008ed0 <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
34009520:	2904      	cmp	r1, #4
34009522:	bf08      	it	eq
34009524:	4298      	cmpeq	r0, r3
34009526:	f000 8331 	beq.w	34009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
3400952a:	2908      	cmp	r1, #8
3400952c:	bf08      	it	eq
3400952e:	4298      	cmpeq	r0, r3
34009530:	f47f af16 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34009534:	4835      	ldr	r0, [pc, #212]	@ (3400960c <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
34009536:	e325      	b.n	34009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34009538:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400953c:	4291      	cmp	r1, r2
3400953e:	bf08      	it	eq
34009540:	4298      	cmpeq	r0, r3
34009542:	f000 832e 	beq.w	34009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
34009546:	4283      	cmp	r3, r0
34009548:	418a      	sbcs	r2, r1
3400954a:	d311      	bcc.n	34009570 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
3400954c:	2940      	cmp	r1, #64	@ 0x40
3400954e:	bf08      	it	eq
34009550:	4298      	cmpeq	r0, r3
34009552:	f000 831f 	beq.w	34009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
34009556:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
3400955a:	bf08      	it	eq
3400955c:	4298      	cmpeq	r0, r3
3400955e:	f000 831b 	beq.w	34009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
34009562:	2920      	cmp	r1, #32
34009564:	bf08      	it	eq
34009566:	2800      	cmpeq	r0, #0
34009568:	f47f aefa 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
3400956c:	4828      	ldr	r0, [pc, #160]	@ (34009610 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
3400956e:	e309      	b.n	34009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34009570:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
34009574:	bf08      	it	eq
34009576:	4298      	cmpeq	r0, r3
34009578:	f000 8315 	beq.w	34009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
3400957c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
34009580:	bf08      	it	eq
34009582:	4298      	cmpeq	r0, r3
34009584:	f47f aeec 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34009588:	4822      	ldr	r0, [pc, #136]	@ (34009614 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
}
3400958a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3400958e:	f7ff b919 	b.w	340087c4 <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
34009592:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34009596:	4291      	cmp	r1, r2
34009598:	bf08      	it	eq
3400959a:	4298      	cmpeq	r0, r3
3400959c:	f000 830f 	beq.w	34009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
340095a0:	4283      	cmp	r3, r0
340095a2:	418a      	sbcs	r2, r1
340095a4:	d34b      	bcc.n	3400963e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
340095a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340095aa:	4291      	cmp	r1, r2
340095ac:	bf08      	it	eq
340095ae:	4298      	cmpeq	r0, r3
340095b0:	f000 8301 	beq.w	34009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
340095b4:	4283      	cmp	r3, r0
340095b6:	418a      	sbcs	r2, r1
340095b8:	d330      	bcc.n	3400961c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
340095ba:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
340095be:	bf08      	it	eq
340095c0:	4298      	cmpeq	r0, r3
340095c2:	f000 82f4 	beq.w	34009bae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
340095c6:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
340095ca:	bf08      	it	eq
340095cc:	4298      	cmpeq	r0, r3
340095ce:	f000 82f0 	beq.w	34009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
340095d2:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
340095d6:	bf08      	it	eq
340095d8:	2800      	cmpeq	r0, #0
340095da:	f47f aec1 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
340095de:	480e      	ldr	r0, [pc, #56]	@ (34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
340095e0:	e2db      	b.n	34009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
340095e2:	bf00      	nop
340095e4:	20000001 	.word	0x20000001
340095e8:	56028000 	.word	0x56028000
340095ec:	07000c0c 	.word	0x07000c0c
340095f0:	00800001 	.word	0x00800001
340095f4:	00100001 	.word	0x00100001
340095f8:	0700140c 	.word	0x0700140c
340095fc:	0700182c 	.word	0x0700182c
34009600:	04000001 	.word	0x04000001
34009604:	07001418 	.word	0x07001418
34009608:	0300001c 	.word	0x0300001c
3400960c:	07000c20 	.word	0x07000c20
34009610:	07001420 	.word	0x07001420
34009614:	07000c30 	.word	0x07000c30
34009618:	07001430 	.word	0x07001430
  switch (PeriphClk)
3400961c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
34009620:	bf08      	it	eq
34009622:	4298      	cmpeq	r0, r3
34009624:	f000 82c9 	beq.w	34009bba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
34009628:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
3400962c:	bf08      	it	eq
3400962e:	4298      	cmpeq	r0, r3
34009630:	f47f ae96 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34009634:	48b4      	ldr	r0, [pc, #720]	@ (34009908 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
}
34009636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3400963a:	f7fe bf8d 	b.w	34008558 <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
3400963e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
34009642:	4291      	cmp	r1, r2
34009644:	bf08      	it	eq
34009646:	4298      	cmpeq	r0, r3
34009648:	f000 82c0 	beq.w	34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
3400964c:	4283      	cmp	r3, r0
3400964e:	418a      	sbcs	r2, r1
34009650:	d30d      	bcc.n	3400966e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
34009652:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
34009656:	bf08      	it	eq
34009658:	4298      	cmpeq	r0, r3
3400965a:	f000 82b5 	beq.w	34009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
3400965e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
34009662:	bf08      	it	eq
34009664:	4298      	cmpeq	r0, r3
34009666:	f47f ae7b 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3400966a:	48a8      	ldr	r0, [pc, #672]	@ (3400990c <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
3400966c:	e2a8      	b.n	34009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  switch (PeriphClk)
3400966e:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34009672:	bf08      	it	eq
34009674:	4298      	cmpeq	r0, r3
34009676:	f000 82ae 	beq.w	34009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
3400967a:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
3400967e:	bf08      	it	eq
34009680:	4298      	cmpeq	r0, r3
34009682:	f47f ae6d 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34009686:	48a2      	ldr	r0, [pc, #648]	@ (34009910 <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
34009688:	e2a1      	b.n	34009bce <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
3400968a:	4da2      	ldr	r5, [pc, #648]	@ (34009914 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3400968c:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009690:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009694:	2b40      	cmp	r3, #64	@ 0x40
34009696:	d053      	beq.n	34009740 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
34009698:	d814      	bhi.n	340096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
3400969a:	2b20      	cmp	r3, #32
3400969c:	d025      	beq.n	340096ea <HAL_RCCEx_GetPeriphCLKFreq+0x412>
3400969e:	d805      	bhi.n	340096ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
340096a0:	bb03      	cbnz	r3, 340096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340096a2:	f7fb fb39 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
340096a6:	f7fb fc3f 	bl	34004f28 <RCCEx_GetHCLKFreq>
      break;
340096aa:	e002      	b.n	340096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
340096ac:	2b30      	cmp	r3, #48	@ 0x30
340096ae:	d034      	beq.n	3400971a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
340096b0:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
340096b2:	4b98      	ldr	r3, [pc, #608]	@ (34009914 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
340096b4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340096b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
340096bc:	3301      	adds	r3, #1
340096be:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
340096c2:	e069      	b.n	34009798 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
340096c4:	2b60      	cmp	r3, #96	@ 0x60
340096c6:	d047      	beq.n	34009758 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
340096c8:	2b70      	cmp	r3, #112	@ 0x70
340096ca:	d03f      	beq.n	3400974c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
340096cc:	2b50      	cmp	r3, #80	@ 0x50
340096ce:	d1ef      	bne.n	340096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (LL_RCC_HSI_IsReady() != 0U)
340096d0:	f7fb fb98 	bl	34004e04 <LL_RCC_HSI_IsReady>
340096d4:	2800      	cmp	r0, #0
340096d6:	d0eb      	beq.n	340096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340096d8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340096da:	488f      	ldr	r0, [pc, #572]	@ (34009918 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
340096dc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340096e0:	40d8      	lsrs	r0, r3
      break;
340096e2:	e7e6      	b.n	340096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340096e4:	f7fe fd72 	bl	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
340096e8:	e7e3      	b.n	340096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC7_IsEnabled() != 0U)
340096ea:	f7fb fbc3 	bl	34004e74 <LL_RCC_IC7_IsEnabled>
340096ee:	2800      	cmp	r0, #0
340096f0:	d0de      	beq.n	340096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC7_GetDivider();
340096f2:	f7fb fbc7 	bl	34004e84 <LL_RCC_IC7_GetDivider>
340096f6:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
340096f8:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340096fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34009700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009704:	d019      	beq.n	3400973a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
34009706:	d812      	bhi.n	3400972e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
34009708:	b913      	cbnz	r3, 34009710 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400970a:	f7fe fc5f 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
3400970e:	e001      	b.n	34009714 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009710:	f7fe fc9c 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
34009714:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009718:	e7cb      	b.n	340096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3400971a:	f7fb fbbd 	bl	34004e98 <LL_RCC_IC8_IsEnabled>
3400971e:	2800      	cmp	r0, #0
34009720:	d0c6      	beq.n	340096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34009722:	f7fb fbc1 	bl	34004ea8 <LL_RCC_IC8_GetDivider>
34009726:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3400972a:	4604      	mov	r4, r0
3400972c:	e7e6      	b.n	340096fc <HAL_RCCEx_GetPeriphCLKFreq+0x424>
        switch (LL_RCC_IC8_GetSource())
3400972e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009732:	d1bd      	bne.n	340096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009734:	f7fe fd0a 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34009738:	e7ec      	b.n	34009714 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400973a:	f7fe fcc7 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
3400973e:	e7e9      	b.n	34009714 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
      if (LL_RCC_MSI_IsReady() != 0U)
34009740:	f7fb fb68 	bl	34004e14 <LL_RCC_MSI_IsReady>
34009744:	2800      	cmp	r0, #0
34009746:	d0b3      	beq.n	340096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        adc_frequency = MSI_VALUE;
34009748:	4874      	ldr	r0, [pc, #464]	@ (3400991c <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
3400974a:	e7b2      	b.n	340096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3400974c:	f7fb fae4 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009750:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009752:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009756:	e7c3      	b.n	340096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009758:	4871      	ldr	r0, [pc, #452]	@ (34009920 <HAL_RCCEx_GetPeriphCLKFreq+0x648>)
3400975a:	e7aa      	b.n	340096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
3400975c:	4d6d      	ldr	r5, [pc, #436]	@ (34009914 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3400975e:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009762:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
34009766:	3b01      	subs	r3, #1
34009768:	2b06      	cmp	r3, #6
3400976a:	f200 80f5 	bhi.w	34009958 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
3400976e:	a201      	add	r2, pc, #4	@ (adr r2, 34009774 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>)
34009770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34009774:	34009849 	.word	0x34009849
34009778:	34009abb 	.word	0x34009abb
3400977c:	34009489 	.word	0x34009489
34009780:	3400979b 	.word	0x3400979b
34009784:	34009809 	.word	0x34009809
34009788:	34009bdb 	.word	0x34009bdb
3400978c:	34009ad1 	.word	0x34009ad1
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009790:	f7fe fc5c 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34009794:	fbb0 f0f4 	udiv	r0, r0, r4
}
34009798:	bd38      	pop	{r3, r4, r5, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
3400979a:	f7fb fb3b 	bl	34004e14 <LL_RCC_MSI_IsReady>
3400979e:	2800      	cmp	r0, #0
340097a0:	f43f adde 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
340097a4:	485d      	ldr	r0, [pc, #372]	@ (3400991c <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
340097a6:	e7f7      	b.n	34009798 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
340097a8:	4b5a      	ldr	r3, [pc, #360]	@ (34009914 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
340097aa:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340097ae:	0395      	lsls	r5, r2, #14
340097b0:	f57f add6 	bpl.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
340097b4:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
340097b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
340097bc:	f3c0 4007 	ubfx	r0, r0, #16, #8
340097c0:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340097c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC20_GetSource())
340097c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340097ca:	f000 81ae 	beq.w	34009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x852>
340097ce:	f200 81a5 	bhi.w	34009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
340097d2:	2b00      	cmp	r3, #0
340097d4:	d1dc      	bne.n	34009790 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340097d6:	f7fe fbf9 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
340097da:	e7db      	b.n	34009794 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
340097dc:	4d4d      	ldr	r5, [pc, #308]	@ (34009914 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
340097de:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
340097e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
340097e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340097ea:	d014      	beq.n	34009816 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
340097ec:	d808      	bhi.n	34009800 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
340097ee:	bb5b      	cbnz	r3, 34009848 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340097f0:	f7fb fa92 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
340097f4:	f7fb fb98 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
340097f8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
340097fa:	f3c3 4302 	ubfx	r3, r3, #16, #3
340097fe:	e5df      	b.n	340093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009800:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009804:	f47f adac 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009808:	f7fb fafc 	bl	34004e04 <LL_RCC_HSI_IsReady>
3400980c:	2800      	cmp	r0, #0
3400980e:	f43f ada7 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009812:	6cab      	ldr	r3, [r5, #72]	@ 0x48
34009814:	e136      	b.n	34009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34009816:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3400981a:	03dc      	lsls	r4, r3, #15
3400981c:	f57f ada0 	bpl.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009820:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009824:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009828:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400982c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
3400982e:	e7c8      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34009830:	4a38      	ldr	r2, [pc, #224]	@ (34009914 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009832:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009836:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
3400983a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400983e:	d012      	beq.n	34009866 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
34009840:	d806      	bhi.n	34009850 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009842:	2b00      	cmp	r3, #0
34009844:	f000 8088 	beq.w	34009958 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
}
34009848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400984c:	f7fe bcbe 	b.w	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009850:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34009854:	f47f ad84 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
34009858:	f7fb facc 	bl	34004df4 <LL_RCC_HSE_IsReady>
3400985c:	2800      	cmp	r0, #0
3400985e:	f43f ad7f 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
34009862:	4830      	ldr	r0, [pc, #192]	@ (34009924 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009864:	e798      	b.n	34009798 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34009866:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
3400986a:	0518      	lsls	r0, r3, #20
3400986c:	f57f ad78 	bpl.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009870:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009874:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009878:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400987c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
3400987e:	e7a0      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34009880:	4a24      	ldr	r2, [pc, #144]	@ (34009914 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009882:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009886:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
3400988a:	2b02      	cmp	r3, #2
3400988c:	d010      	beq.n	340098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
3400988e:	2b03      	cmp	r3, #3
34009890:	d034      	beq.n	340098fc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
34009892:	2b01      	cmp	r3, #1
34009894:	d009      	beq.n	340098aa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009896:	f7fb fa3f 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
3400989a:	f7fb fb45 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
3400989e:	4b1d      	ldr	r3, [pc, #116]	@ (34009914 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
340098a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
340098a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
340098a8:	e708      	b.n	340096bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340098aa:	f7fe fc8f 	bl	340081cc <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
340098ae:	e7f6      	b.n	3400989e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
340098b0:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
340098b4:	04d9      	lsls	r1, r3, #19
340098b6:	d516      	bpl.n	340098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
340098b8:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
340098bc:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
340098c0:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
340098c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC13_GetSource())
340098c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
340098cc:	f100 0401 	add.w	r4, r0, #1
340098d0:	d00e      	beq.n	340098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
340098d2:	d805      	bhi.n	340098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
340098d4:	b94b      	cbnz	r3, 340098ea <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340098d6:	f7fe fb79 	bl	34007fcc <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
340098da:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340098de:	e7de      	b.n	3400989e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        switch (LL_RCC_IC13_GetSource())
340098e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340098e4:	d007      	beq.n	340098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
        eth1ptp_frequency = HSE_VALUE;
340098e6:	2000      	movs	r0, #0
340098e8:	e7d9      	b.n	3400989e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340098ea:	f7fe fbaf 	bl	3400804c <HAL_RCCEx_GetPLL2CLKFreq>
340098ee:	e7f4      	b.n	340098da <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340098f0:	f7fe fbec 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
340098f4:	e7f1      	b.n	340098da <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340098f6:	f7fe fc29 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
340098fa:	e7ee      	b.n	340098da <HAL_RCCEx_GetPeriphCLKFreq+0x602>
      if (LL_RCC_HSE_IsReady() != 0U)
340098fc:	f7fb fa7a 	bl	34004df4 <LL_RCC_HSE_IsReady>
34009900:	2800      	cmp	r0, #0
34009902:	d0f0      	beq.n	340098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        eth1ptp_frequency = HSE_VALUE;
34009904:	4807      	ldr	r0, [pc, #28]	@ (34009924 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009906:	e7ca      	b.n	3400989e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
34009908:	01001014 	.word	0x01001014
3400990c:	03001414 	.word	0x03001414
34009910:	03000814 	.word	0x03000814
34009914:	56028000 	.word	0x56028000
34009918:	03d09000 	.word	0x03d09000
3400991c:	003d0900 	.word	0x003d0900
34009920:	00bb8000 	.word	0x00bb8000
34009924:	02dc6c00 	.word	0x02dc6c00
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34009928:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3400992c:	035b      	lsls	r3, r3, #13
3400992e:	f57f ad17 	bpl.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009932:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009936:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3400993a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400993e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009940:	e73f      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34009942:	4ba7      	ldr	r3, [pc, #668]	@ (34009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009944:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
34009948:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
3400994c:	2a20      	cmp	r2, #32
3400994e:	d019      	beq.n	34009984 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
34009950:	d808      	bhi.n	34009964 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
34009952:	2a00      	cmp	r2, #0
34009954:	f47f af78 	bne.w	34009848 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009958:	f7fb f9de 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
}
3400995c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009960:	f7fb bae2 	b.w	34004f28 <RCCEx_GetHCLKFreq>
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009964:	2a30      	cmp	r2, #48	@ 0x30
34009966:	f47f acfb 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3400996a:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400996e:	0714      	lsls	r4, r2, #28
34009970:	f57f acf6 	bpl.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009974:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009978:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3400997c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009980:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009982:	e71e      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34009984:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009988:	0755      	lsls	r5, r2, #29
3400998a:	f57f ace9 	bpl.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3400998e:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009992:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009996:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400999a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3400999c:	e711      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
3400999e:	4891      	ldr	r0, [pc, #580]	@ (34009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
}
340099a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
340099a4:	f7ff bafa 	b.w	34008f9c <RCCEx_GetI2CCLKFreq>
340099a8:	488f      	ldr	r0, [pc, #572]	@ (34009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
340099aa:	e7f9      	b.n	340099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
340099ac:	488f      	ldr	r0, [pc, #572]	@ (34009bec <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
340099ae:	e7f7      	b.n	340099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
340099b0:	488f      	ldr	r0, [pc, #572]	@ (34009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
}
340099b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
340099b6:	f7ff b9ff 	b.w	34008db8 <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
340099ba:	488e      	ldr	r0, [pc, #568]	@ (34009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
}
340099bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
340099c0:	f7ff bbaa 	b.w	34009118 <RCCEx_GetLPTIMCLKFreq>
340099c4:	488c      	ldr	r0, [pc, #560]	@ (34009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
340099c6:	e7f9      	b.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
340099c8:	488c      	ldr	r0, [pc, #560]	@ (34009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
340099ca:	e7f7      	b.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
340099cc:	488c      	ldr	r0, [pc, #560]	@ (34009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
340099ce:	e7f5      	b.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
340099d0:	4a83      	ldr	r2, [pc, #524]	@ (34009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
340099d2:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
340099d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
340099da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340099de:	d031      	beq.n	34009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
340099e0:	d812      	bhi.n	34009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
340099e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340099e6:	f43f af2f 	beq.w	34009848 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
340099ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340099ee:	d01d      	beq.n	34009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
340099f0:	2b00      	cmp	r3, #0
340099f2:	f47f acb5 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340099f6:	f7fb f98f 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
340099fa:	f7fb fa95 	bl	34004f28 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
340099fe:	4b78      	ldr	r3, [pc, #480]	@ (34009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009a02:	f3c3 3302 	ubfx	r3, r3, #12, #3
34009a06:	e4db      	b.n	340093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34009a08:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34009a0c:	f43f aec5 	beq.w	3400979a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34009a10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34009a14:	d02f      	beq.n	34009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
34009a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
34009a1a:	f47f aca1 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
34009a1e:	f7fb fa01 	bl	34004e24 <LL_RCC_LSE_IsReady>
34009a22:	3800      	subs	r0, #0
34009a24:	bf18      	it	ne
34009a26:	2001      	movne	r0, #1
34009a28:	03c0      	lsls	r0, r0, #15
34009a2a:	e6b5      	b.n	34009798 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34009a2c:	f7fb fa46 	bl	34004ebc <LL_RCC_IC9_IsEnabled>
34009a30:	2800      	cmp	r0, #0
34009a32:	f43f ac95 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
34009a36:	f7fb fa49 	bl	34004ecc <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34009a3a:	4b69      	ldr	r3, [pc, #420]	@ (34009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009a3c:	4604      	mov	r4, r0
34009a3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34009a42:	e6be      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34009a44:	f7fb fa4c 	bl	34004ee0 <LL_RCC_IC14_IsEnabled>
34009a48:	2800      	cmp	r0, #0
34009a4a:	f43f ac89 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
34009a4e:	f7fb fa4f 	bl	34004ef0 <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34009a52:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34009a56:	4604      	mov	r4, r0
34009a58:	e6b3      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34009a5a:	4d61      	ldr	r5, [pc, #388]	@ (34009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009a5c:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
34009a60:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34009a64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34009a68:	d010      	beq.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
34009a6a:	f67f aec0 	bls.w	340097ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
34009a6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34009a72:	f47f ac75 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009a76:	f7fb f9c5 	bl	34004e04 <LL_RCC_HSI_IsReady>
34009a7a:	2800      	cmp	r0, #0
34009a7c:	f43f ac70 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009a80:	4b57      	ldr	r3, [pc, #348]	@ (34009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009a84:	485f      	ldr	r0, [pc, #380]	@ (34009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34009a86:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009a8a:	e499      	b.n	340093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34009a8c:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009a90:	0418      	lsls	r0, r3, #16
34009a92:	f57f ac65 	bpl.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009a96:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009a9a:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009a9e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009aa2:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009aa4:	e68d      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009aa6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34009aaa:	f000 8096 	beq.w	34009bda <HAL_RCCEx_GetPeriphCLKFreq+0x902>
34009aae:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34009ab2:	d00d      	beq.n	34009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
34009ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34009ab8:	e6a4      	b.n	34009804 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34009aba:	f7fb f9db 	bl	34004e74 <LL_RCC_IC7_IsEnabled>
34009abe:	2800      	cmp	r0, #0
34009ac0:	f43f ac4e 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
34009ac4:	f7fb f9de 	bl	34004e84 <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009ac8:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
34009acc:	4604      	mov	r4, r0
34009ace:	e678      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009ad0:	f7fb f922 	bl	34004d18 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009ad4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009ad6:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009ada:	e471      	b.n	340093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34009adc:	4a40      	ldr	r2, [pc, #256]	@ (34009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009ade:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009ae2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009ae6:	2b20      	cmp	r3, #32
34009ae8:	d00b      	beq.n	34009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
34009aea:	f67f aeaa 	bls.w	34009842 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34009aee:	2b30      	cmp	r3, #48	@ 0x30
34009af0:	f47f ac36 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009af4:	f7fb f986 	bl	34004e04 <LL_RCC_HSI_IsReady>
34009af8:	2800      	cmp	r0, #0
34009afa:	f43f ac31 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009afe:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34009b00:	e7c0      	b.n	34009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34009b02:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009b06:	0319      	lsls	r1, r3, #12
34009b08:	f57f ac2a 	bpl.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009b0c:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009b10:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009b14:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009b18:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009b1a:	e652      	b.n	340097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        switch (LL_RCC_IC20_GetSource())
34009b1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009b20:	f47f ac1e 	bne.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009b24:	f7fe fb12 	bl	3400814c <HAL_RCCEx_GetPLL4CLKFreq>
34009b28:	e634      	b.n	34009794 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009b2a:	f7fe facf 	bl	340080cc <HAL_RCCEx_GetPLL3CLKFreq>
34009b2e:	e631      	b.n	34009794 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34009b30:	4a2b      	ldr	r2, [pc, #172]	@ (34009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009b32:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
34009b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009b3e:	d005      	beq.n	34009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
34009b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009b44:	d009      	beq.n	34009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
34009b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009b4a:	e766      	b.n	34009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34009b4c:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34009b4e:	07db      	lsls	r3, r3, #31
34009b50:	f57f ac06 	bpl.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
34009b54:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
34009b58:	e61e      	b.n	34009798 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_HSE_IsReady() != 0U)
34009b5a:	f7fb f94b 	bl	34004df4 <LL_RCC_HSE_IsReady>
34009b5e:	2800      	cmp	r0, #0
34009b60:	f43f abfe 	beq.w	34009360 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009b64:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
34009b68:	4827      	ldr	r0, [pc, #156]	@ (34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009b6a:	f3c3 3305 	ubfx	r3, r3, #12, #6
34009b6e:	3301      	adds	r3, #1
34009b70:	e5a5      	b.n	340096be <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34009b72:	4826      	ldr	r0, [pc, #152]	@ (34009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34009b74:	e49e      	b.n	340094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34009b76:	4826      	ldr	r0, [pc, #152]	@ (34009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
34009b78:	e4ce      	b.n	34009518 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
34009b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34009b7e:	f7fe bbab 	b.w	340082d8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34009b82:	4824      	ldr	r0, [pc, #144]	@ (34009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
}
34009b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009b88:	f7fe bf30 	b.w	340089ec <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34009b8c:	4822      	ldr	r0, [pc, #136]	@ (34009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
34009b8e:	e7f9      	b.n	34009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34009b90:	4822      	ldr	r0, [pc, #136]	@ (34009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
34009b92:	e7f7      	b.n	34009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009b94:	4822      	ldr	r0, [pc, #136]	@ (34009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
34009b96:	e7f5      	b.n	34009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34009b98:	4822      	ldr	r0, [pc, #136]	@ (34009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
}
34009b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34009b9e:	f7fe bd0d 	b.w	340085bc <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34009ba2:	4821      	ldr	r0, [pc, #132]	@ (34009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
34009ba4:	e7f9      	b.n	34009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34009ba6:	4821      	ldr	r0, [pc, #132]	@ (34009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
34009ba8:	e7f7      	b.n	34009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34009baa:	4821      	ldr	r0, [pc, #132]	@ (34009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
34009bac:	e4ed      	b.n	3400958a <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34009bae:	4821      	ldr	r0, [pc, #132]	@ (34009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
34009bb0:	e4eb      	b.n	3400958a <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34009bb2:	4821      	ldr	r0, [pc, #132]	@ (34009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
34009bb4:	e4e9      	b.n	3400958a <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34009bb6:	4821      	ldr	r0, [pc, #132]	@ (34009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
34009bb8:	e4e7      	b.n	3400958a <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34009bba:	4821      	ldr	r0, [pc, #132]	@ (34009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
34009bbc:	e7ed      	b.n	34009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34009bbe:	4821      	ldr	r0, [pc, #132]	@ (34009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
}
34009bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34009bc4:	f7fe bc62 	b.w	3400848c <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34009bc8:	481f      	ldr	r0, [pc, #124]	@ (34009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
34009bca:	e534      	b.n	34009636 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34009bcc:	481f      	ldr	r0, [pc, #124]	@ (34009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
}
34009bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34009bd2:	f7fe bbe1 	b.w	34008398 <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34009bd6:	481e      	ldr	r0, [pc, #120]	@ (34009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
34009bd8:	e7f9      	b.n	34009bce <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009bda:	481e      	ldr	r0, [pc, #120]	@ (34009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
34009bdc:	e5dc      	b.n	34009798 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
34009bde:	bf00      	nop
34009be0:	56028000 	.word	0x56028000
34009be4:	0700000c 	.word	0x0700000c
34009be8:	0700040c 	.word	0x0700040c
34009bec:	0700080c 	.word	0x0700080c
34009bf0:	0700100c 	.word	0x0700100c
34009bf4:	0700082c 	.word	0x0700082c
34009bf8:	07000c2c 	.word	0x07000c2c
34009bfc:	0700102c 	.word	0x0700102c
34009c00:	0700142c 	.word	0x0700142c
34009c04:	03d09000 	.word	0x03d09000
34009c08:	02dc6c00 	.word	0x02dc6c00
34009c0c:	07001818 	.word	0x07001818
34009c10:	0300041c 	.word	0x0300041c
34009c14:	07000420 	.word	0x07000420
34009c18:	07000820 	.word	0x07000820
34009c1c:	07001020 	.word	0x07001020
34009c20:	07001820 	.word	0x07001820
34009c24:	07000030 	.word	0x07000030
34009c28:	07000430 	.word	0x07000430
34009c2c:	07000830 	.word	0x07000830
34009c30:	07001030 	.word	0x07001030
34009c34:	07001830 	.word	0x07001830
34009c38:	07001c30 	.word	0x07001c30
34009c3c:	07000034 	.word	0x07000034
34009c40:	07000434 	.word	0x07000434
34009c44:	03000c14 	.word	0x03000c14
34009c48:	01001814 	.word	0x01001814
34009c4c:	03000014 	.word	0x03000014
34009c50:	03000414 	.word	0x03000414
34009c54:	00bb8000 	.word	0x00bb8000

34009c58 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34009c58:	b538      	push	{r3, r4, r5, lr}
34009c5a:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
34009c5c:	460d      	mov	r5, r1
34009c5e:	b921      	cbnz	r1, 34009c6a <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
34009c60:	f240 1111 	movw	r1, #273	@ 0x111
34009c64:	4825      	ldr	r0, [pc, #148]	@ (34009cfc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009c66:	f7f7 fa51 	bl	3400110c <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
34009c6a:	2c0c      	cmp	r4, #12
34009c6c:	d904      	bls.n	34009c78 <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
34009c6e:	f44f 7189 	mov.w	r1, #274	@ 0x112
34009c72:	4822      	ldr	r0, [pc, #136]	@ (34009cfc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009c74:	f7f7 fa4a 	bl	3400110c <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34009c78:	682b      	ldr	r3, [r5, #0]
34009c7a:	2b20      	cmp	r3, #32
34009c7c:	d838      	bhi.n	34009cf0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x98>
34009c7e:	2b03      	cmp	r3, #3
34009c80:	d82a      	bhi.n	34009cd8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x80>
34009c82:	3b01      	subs	r3, #1
34009c84:	2b01      	cmp	r3, #1
34009c86:	d82d      	bhi.n	34009ce4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
34009c88:	682b      	ldr	r3, [r5, #0]
34009c8a:	2b80      	cmp	r3, #128	@ 0x80
34009c8c:	d001      	beq.n	34009c92 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3a>
34009c8e:	2bff      	cmp	r3, #255	@ 0xff
34009c90:	d904      	bls.n	34009c9c <HAL_RIF_RIMC_ConfigMasterAttributes+0x44>
34009c92:	f44f 718a 	mov.w	r1, #276	@ 0x114
34009c96:	4819      	ldr	r0, [pc, #100]	@ (34009cfc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009c98:	f7f7 fa38 	bl	3400110c <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
34009c9c:	686b      	ldr	r3, [r5, #4]
34009c9e:	2b03      	cmp	r3, #3
34009ca0:	d904      	bls.n	34009cac <HAL_RIF_RIMC_ConfigMasterAttributes+0x54>
34009ca2:	f240 1115 	movw	r1, #277	@ 0x115
34009ca6:	4815      	ldr	r0, [pc, #84]	@ (34009cfc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009ca8:	f7f7 fa30 	bl	3400110c <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34009cac:	682b      	ldr	r3, [r5, #0]
34009cae:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
34009cb2:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
34009cb6:	00a0      	lsls	r0, r4, #2
34009cb8:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
34009cbc:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
34009cc0:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34009cc4:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
34009cc6:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
34009cca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34009cce:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
34009cd2:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
34009cd6:	bd38      	pop	{r3, r4, r5, pc}
34009cd8:	4a09      	ldr	r2, [pc, #36]	@ (34009d00 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa8>)
34009cda:	3b04      	subs	r3, #4
34009cdc:	fa22 f303 	lsr.w	r3, r2, r3
34009ce0:	07db      	lsls	r3, r3, #31
34009ce2:	d4d1      	bmi.n	34009c88 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34009ce4:	f240 1113 	movw	r1, #275	@ 0x113
34009ce8:	4804      	ldr	r0, [pc, #16]	@ (34009cfc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009cea:	f7f7 fa0f 	bl	3400110c <assert_failed>
34009cee:	e7cb      	b.n	34009c88 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
34009cf0:	2b40      	cmp	r3, #64	@ 0x40
34009cf2:	d0c9      	beq.n	34009c88 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
34009cf4:	2b80      	cmp	r3, #128	@ 0x80
34009cf6:	d1f5      	bne.n	34009ce4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
34009cf8:	e7c6      	b.n	34009c88 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
34009cfa:	bf00      	nop
34009cfc:	3400f009 	.word	0x3400f009
34009d00:	10001011 	.word	0x10001011

34009d04 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34009d04:	4b38      	ldr	r3, [pc, #224]	@ (34009de8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
34009d06:	b537      	push	{r0, r1, r2, r4, r5, lr}
34009d08:	4298      	cmp	r0, r3
34009d0a:	4604      	mov	r4, r0
34009d0c:	460d      	mov	r5, r1
34009d0e:	d85c      	bhi.n	34009dca <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
34009d10:	3b1e      	subs	r3, #30
34009d12:	4298      	cmp	r0, r3
34009d14:	d83b      	bhi.n	34009d8e <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
34009d16:	4b35      	ldr	r3, [pc, #212]	@ (34009dec <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
34009d18:	4298      	cmp	r0, r3
34009d1a:	d84b      	bhi.n	34009db4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
34009d1c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34009d20:	d23a      	bcs.n	34009d98 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
34009d22:	4b33      	ldr	r3, [pc, #204]	@ (34009df0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
34009d24:	4298      	cmp	r0, r3
34009d26:	d840      	bhi.n	34009daa <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
34009d28:	1fc2      	subs	r2, r0, #7
34009d2a:	3b22      	subs	r3, #34	@ 0x22
34009d2c:	429a      	cmp	r2, r3
34009d2e:	d937      	bls.n	34009da0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
34009d30:	2d03      	cmp	r5, #3
34009d32:	d904      	bls.n	34009d3e <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
34009d34:	f44f 71ba 	mov.w	r1, #372	@ 0x174
34009d38:	482e      	ldr	r0, [pc, #184]	@ (34009df4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
34009d3a:	f7f7 f9e7 	bl	3400110c <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34009d3e:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34009d40:	0f20      	lsrs	r0, r4, #28
34009d42:	0080      	lsls	r0, r0, #2
34009d44:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
34009d48:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
34009d4c:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34009d4e:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34009d52:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34009d54:	9b01      	ldr	r3, [sp, #4]
34009d56:	40a2      	lsls	r2, r4
34009d58:	ea23 0302 	bic.w	r3, r3, r2
34009d5c:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34009d5e:	9901      	ldr	r1, [sp, #4]
34009d60:	f005 0301 	and.w	r3, r5, #1
34009d64:	40a3      	lsls	r3, r4
34009d66:	430b      	orrs	r3, r1
34009d68:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34009d6a:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34009d6c:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34009d70:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34009d72:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34009d74:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34009d76:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34009d78:	9b01      	ldr	r3, [sp, #4]
34009d7a:	ea23 0302 	bic.w	r3, r3, r2
34009d7e:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34009d80:	9b01      	ldr	r3, [sp, #4]
34009d82:	4319      	orrs	r1, r3
34009d84:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34009d86:	9b01      	ldr	r3, [sp, #4]
34009d88:	6303      	str	r3, [r0, #48]	@ 0x30
}
34009d8a:	b003      	add	sp, #12
34009d8c:	bd30      	pop	{r4, r5, pc}
34009d8e:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
34009d92:	4b19      	ldr	r3, [pc, #100]	@ (34009df8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
34009d94:	3a02      	subs	r2, #2
34009d96:	e01d      	b.n	34009dd4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
34009d98:	4b18      	ldr	r3, [pc, #96]	@ (34009dfc <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
34009d9a:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
34009d9e:	e019      	b.n	34009dd4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
34009da0:	f1a0 0308 	sub.w	r3, r0, #8
34009da4:	2b17      	cmp	r3, #23
34009da6:	d9c3      	bls.n	34009d30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
34009da8:	e017      	b.n	34009dda <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
34009daa:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
34009dae:	3b1c      	subs	r3, #28
34009db0:	2b02      	cmp	r3, #2
34009db2:	e7f8      	b.n	34009da6 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
34009db4:	4b12      	ldr	r3, [pc, #72]	@ (34009e00 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
34009db6:	4298      	cmp	r0, r3
34009db8:	d803      	bhi.n	34009dc2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
34009dba:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34009dbe:	d2b7      	bcs.n	34009d30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
34009dc0:	e00b      	b.n	34009dda <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
34009dc2:	4b10      	ldr	r3, [pc, #64]	@ (34009e04 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
34009dc4:	4298      	cmp	r0, r3
34009dc6:	d0b3      	beq.n	34009d30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
34009dc8:	e007      	b.n	34009dda <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
34009dca:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
34009dce:	2a1e      	cmp	r2, #30
34009dd0:	d803      	bhi.n	34009dda <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
34009dd2:	4b0d      	ldr	r3, [pc, #52]	@ (34009e08 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
34009dd4:	40d3      	lsrs	r3, r2
34009dd6:	07db      	lsls	r3, r3, #31
34009dd8:	d4aa      	bmi.n	34009d30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34009dda:	f240 1173 	movw	r1, #371	@ 0x173
34009dde:	4805      	ldr	r0, [pc, #20]	@ (34009df4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
34009de0:	f7f7 f994 	bl	3400110c <assert_failed>
34009de4:	e7a4      	b.n	34009d30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
34009de6:	bf00      	nop
34009de8:	4000001f 	.word	0x4000001f
34009dec:	2000001e 	.word	0x2000001e
34009df0:	1000001a 	.word	0x1000001a
34009df4:	3400f009 	.word	0x3400f009
34009df8:	2e838c0b 	.word	0x2e838c0b
34009dfc:	77dff03b 	.word	0x77dff03b
34009e00:	30000008 	.word	0x30000008
34009e04:	3000000a 	.word	0x3000000a
34009e08:	49deef7f 	.word	0x49deef7f

34009e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
34009e0c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
34009e0e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34009e10:	e852 3f00 	ldrex	r3, [r2]
34009e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34009e18:	e842 3100 	strex	r1, r3, [r2]
   return(result);
34009e1c:	6802      	ldr	r2, [r0, #0]
34009e1e:	2900      	cmp	r1, #0
34009e20:	d1f5      	bne.n	34009e0e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
34009e22:	4c0f      	ldr	r4, [pc, #60]	@ (34009e60 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34009e24:	f102 0308 	add.w	r3, r2, #8
34009e28:	e853 3f00 	ldrex	r3, [r3]
34009e2c:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34009e2e:	f102 0c08 	add.w	ip, r2, #8
34009e32:	e84c 3100 	strex	r1, r3, [ip]
34009e36:	2900      	cmp	r1, #0
34009e38:	d1f4      	bne.n	34009e24 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
34009e3a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
34009e3c:	2b01      	cmp	r3, #1
34009e3e:	d107      	bne.n	34009e50 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34009e40:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
34009e44:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34009e48:	e842 3100 	strex	r1, r3, [r2]
34009e4c:	2900      	cmp	r1, #0
34009e4e:	d1f7      	bne.n	34009e40 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
34009e50:	2320      	movs	r3, #32
34009e52:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34009e56:	2300      	movs	r3, #0
34009e58:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
34009e5a:	6743      	str	r3, [r0, #116]	@ 0x74
}
34009e5c:	bd10      	pop	{r4, pc}
34009e5e:	bf00      	nop
34009e60:	effffffe 	.word	0xeffffffe

34009e64 <HAL_UART_MspInit>:
}
34009e64:	4770      	bx	lr
	...

34009e68 <UART_SetConfig>:
{
34009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
34009e6a:	6842      	ldr	r2, [r0, #4]
34009e6c:	4bb0      	ldr	r3, [pc, #704]	@ (3400a130 <UART_SetConfig+0x2c8>)
{
34009e6e:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
34009e70:	429a      	cmp	r2, r3
34009e72:	d904      	bls.n	34009e7e <UART_SetConfig+0x16>
34009e74:	f640 414f 	movw	r1, #3151	@ 0xc4f
34009e78:	48ae      	ldr	r0, [pc, #696]	@ (3400a134 <UART_SetConfig+0x2cc>)
34009e7a:	f7f7 f947 	bl	3400110c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
34009e7e:	68a3      	ldr	r3, [r4, #8]
34009e80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009e84:	d007      	beq.n	34009e96 <UART_SetConfig+0x2e>
34009e86:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
34009e8a:	d004      	beq.n	34009e96 <UART_SetConfig+0x2e>
34009e8c:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
34009e90:	48a8      	ldr	r0, [pc, #672]	@ (3400a134 <UART_SetConfig+0x2cc>)
34009e92:	f7f7 f93b 	bl	3400110c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
34009e96:	6822      	ldr	r2, [r4, #0]
34009e98:	49a7      	ldr	r1, [pc, #668]	@ (3400a138 <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
34009e9a:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
34009e9c:	428a      	cmp	r2, r1
34009e9e:	d004      	beq.n	34009eaa <UART_SetConfig+0x42>
34009ea0:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
34009ea4:	428a      	cmp	r2, r1
34009ea6:	f040 80af 	bne.w	3400a008 <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
34009eaa:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
34009eae:	d004      	beq.n	34009eba <UART_SetConfig+0x52>
34009eb0:	f640 4153 	movw	r1, #3155	@ 0xc53
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
34009eb4:	489f      	ldr	r0, [pc, #636]	@ (3400a134 <UART_SetConfig+0x2cc>)
34009eb6:	f7f7 f929 	bl	3400110c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
34009eba:	6923      	ldr	r3, [r4, #16]
34009ebc:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
34009ec0:	d007      	beq.n	34009ed2 <UART_SetConfig+0x6a>
34009ec2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34009ec6:	d004      	beq.n	34009ed2 <UART_SetConfig+0x6a>
34009ec8:	f640 415b 	movw	r1, #3163	@ 0xc5b
34009ecc:	4899      	ldr	r0, [pc, #612]	@ (3400a134 <UART_SetConfig+0x2cc>)
34009ece:	f7f7 f91d 	bl	3400110c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
34009ed2:	6963      	ldr	r3, [r4, #20]
34009ed4:	f033 020c 	bics.w	r2, r3, #12
34009ed8:	d100      	bne.n	34009edc <UART_SetConfig+0x74>
34009eda:	b923      	cbnz	r3, 34009ee6 <UART_SetConfig+0x7e>
34009edc:	f640 415c 	movw	r1, #3164	@ 0xc5c
34009ee0:	4894      	ldr	r0, [pc, #592]	@ (3400a134 <UART_SetConfig+0x2cc>)
34009ee2:	f7f7 f913 	bl	3400110c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
34009ee6:	69a3      	ldr	r3, [r4, #24]
34009ee8:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
34009eec:	d004      	beq.n	34009ef8 <UART_SetConfig+0x90>
34009eee:	f640 415d 	movw	r1, #3165	@ 0xc5d
34009ef2:	4890      	ldr	r0, [pc, #576]	@ (3400a134 <UART_SetConfig+0x2cc>)
34009ef4:	f7f7 f90a 	bl	3400110c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
34009ef8:	69e3      	ldr	r3, [r4, #28]
34009efa:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
34009efe:	d004      	beq.n	34009f0a <UART_SetConfig+0xa2>
34009f00:	f640 415e 	movw	r1, #3166	@ 0xc5e
34009f04:	488b      	ldr	r0, [pc, #556]	@ (3400a134 <UART_SetConfig+0x2cc>)
34009f06:	f7f7 f901 	bl	3400110c <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
34009f0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34009f0c:	2b0b      	cmp	r3, #11
34009f0e:	d904      	bls.n	34009f1a <UART_SetConfig+0xb2>
34009f10:	f640 415f 	movw	r1, #3167	@ 0xc5f
34009f14:	4887      	ldr	r0, [pc, #540]	@ (3400a134 <UART_SetConfig+0x2cc>)
34009f16:	f7f7 f8f9 	bl	3400110c <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34009f1a:	6921      	ldr	r1, [r4, #16]
34009f1c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34009f1e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34009f20:	430a      	orrs	r2, r1
34009f22:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34009f24:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34009f26:	69e5      	ldr	r5, [r4, #28]
34009f28:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34009f2a:	4984      	ldr	r1, [pc, #528]	@ (3400a13c <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34009f2c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34009f2e:	4001      	ands	r1, r0
34009f30:	430a      	orrs	r2, r1
34009f32:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
34009f34:	685a      	ldr	r2, [r3, #4]
34009f36:	68e1      	ldr	r1, [r4, #12]
34009f38:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
34009f3c:	430a      	orrs	r2, r1
34009f3e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
34009f40:	4a7d      	ldr	r2, [pc, #500]	@ (3400a138 <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
34009f42:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
34009f44:	4293      	cmp	r3, r2
34009f46:	d005      	beq.n	34009f54 <UART_SetConfig+0xec>
34009f48:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34009f4c:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
34009f4e:	bf1c      	itt	ne
34009f50:	6a22      	ldrne	r2, [r4, #32]
34009f52:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
34009f54:	689a      	ldr	r2, [r3, #8]
34009f56:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
34009f5a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
34009f5e:	430a      	orrs	r2, r1
34009f60:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
34009f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34009f64:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34009f66:	f022 020f 	bic.w	r2, r2, #15
34009f6a:	430a      	orrs	r2, r1
34009f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
34009f6e:	4a74      	ldr	r2, [pc, #464]	@ (3400a140 <UART_SetConfig+0x2d8>)
34009f70:	4293      	cmp	r3, r2
34009f72:	d07a      	beq.n	3400a06a <UART_SetConfig+0x202>
34009f74:	4a73      	ldr	r2, [pc, #460]	@ (3400a144 <UART_SetConfig+0x2dc>)
34009f76:	4293      	cmp	r3, r2
34009f78:	f000 809c 	beq.w	3400a0b4 <UART_SetConfig+0x24c>
34009f7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34009f80:	4293      	cmp	r3, r2
34009f82:	f000 809b 	beq.w	3400a0bc <UART_SetConfig+0x254>
34009f86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34009f8a:	4293      	cmp	r3, r2
34009f8c:	f000 809a 	beq.w	3400a0c4 <UART_SetConfig+0x25c>
34009f90:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34009f94:	f000 809a 	beq.w	3400a0cc <UART_SetConfig+0x264>
34009f98:	4a6b      	ldr	r2, [pc, #428]	@ (3400a148 <UART_SetConfig+0x2e0>)
34009f9a:	4293      	cmp	r3, r2
34009f9c:	f000 809a 	beq.w	3400a0d4 <UART_SetConfig+0x26c>
34009fa0:	4a6a      	ldr	r2, [pc, #424]	@ (3400a14c <UART_SetConfig+0x2e4>)
34009fa2:	4293      	cmp	r3, r2
34009fa4:	f000 809a 	beq.w	3400a0dc <UART_SetConfig+0x274>
34009fa8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34009fac:	4293      	cmp	r3, r2
34009fae:	f000 8099 	beq.w	3400a0e4 <UART_SetConfig+0x27c>
34009fb2:	4a67      	ldr	r2, [pc, #412]	@ (3400a150 <UART_SetConfig+0x2e8>)
34009fb4:	4293      	cmp	r3, r2
34009fb6:	f000 8099 	beq.w	3400a0ec <UART_SetConfig+0x284>
34009fba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34009fbe:	4293      	cmp	r3, r2
34009fc0:	f000 8098 	beq.w	3400a0f4 <UART_SetConfig+0x28c>
34009fc4:	4a5c      	ldr	r2, [pc, #368]	@ (3400a138 <UART_SetConfig+0x2d0>)
34009fc6:	4293      	cmp	r3, r2
34009fc8:	d02e      	beq.n	3400a028 <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
34009fca:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34009fce:	4293      	cmp	r3, r2
34009fd0:	f04f 0000 	mov.w	r0, #0
34009fd4:	f04f 0100 	mov.w	r1, #0
34009fd8:	d14a      	bne.n	3400a070 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34009fda:	f7ff f97d 	bl	340092d8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
34009fde:	2800      	cmp	r0, #0
34009fe0:	d041      	beq.n	3400a066 <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34009fe2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34009fe4:	4a5b      	ldr	r2, [pc, #364]	@ (3400a154 <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34009fe6:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34009fe8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34009fec:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34009ff0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34009ff4:	4299      	cmp	r1, r3
34009ff6:	d91b      	bls.n	3400a030 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
34009ff8:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
34009ffa:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
34009ffe:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
3400a000:	2300      	movs	r3, #0
  huart->TxISR = NULL;
3400a002:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
3400a006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a008:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400a00c:	d004      	beq.n	3400a018 <UART_SetConfig+0x1b0>
3400a00e:	f640 4157 	movw	r1, #3159	@ 0xc57
3400a012:	4848      	ldr	r0, [pc, #288]	@ (3400a134 <UART_SetConfig+0x2cc>)
3400a014:	f7f7 f87a 	bl	3400110c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a018:	6a23      	ldr	r3, [r4, #32]
3400a01a:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400a01e:	f43f af4c 	beq.w	34009eba <UART_SetConfig+0x52>
3400a022:	f640 4158 	movw	r1, #3160	@ 0xc58
3400a026:	e745      	b.n	34009eb4 <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a028:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
3400a02c:	2100      	movs	r1, #0
3400a02e:	e7d4      	b.n	34009fda <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a030:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
3400a034:	d8e0      	bhi.n	34009ff8 <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a036:	2300      	movs	r3, #0
3400a038:	4619      	mov	r1, r3
3400a03a:	f7f6 fbb1 	bl	340007a0 <__aeabi_uldivmod>
3400a03e:	4606      	mov	r6, r0
3400a040:	460f      	mov	r7, r1
3400a042:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
3400a046:	0868      	lsrs	r0, r5, #1
3400a048:	1830      	adds	r0, r6, r0
3400a04a:	462a      	mov	r2, r5
3400a04c:	f04f 0300 	mov.w	r3, #0
3400a050:	f147 0100 	adc.w	r1, r7, #0
3400a054:	f7f6 fba4 	bl	340007a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3400a058:	4b3f      	ldr	r3, [pc, #252]	@ (3400a158 <UART_SetConfig+0x2f0>)
3400a05a:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
3400a05e:	429a      	cmp	r2, r3
3400a060:	d8ca      	bhi.n	34009ff8 <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
3400a062:	6823      	ldr	r3, [r4, #0]
3400a064:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
3400a066:	2000      	movs	r0, #0
3400a068:	e7c7      	b.n	34009ffa <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a06a:	2000      	movs	r0, #0
3400a06c:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3400a070:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
3400a074:	d142      	bne.n	3400a0fc <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a076:	f7ff f92f 	bl	340092d8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a07a:	2800      	cmp	r0, #0
3400a07c:	d0f3      	beq.n	3400a066 <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a07e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a080:	4b34      	ldr	r3, [pc, #208]	@ (3400a154 <UART_SetConfig+0x2ec>)
3400a082:	6862      	ldr	r2, [r4, #4]
3400a084:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a088:	fbb0 f0f3 	udiv	r0, r0, r3
3400a08c:	0853      	lsrs	r3, r2, #1
3400a08e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
3400a092:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a096:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a09a:	f1a3 0110 	sub.w	r1, r3, #16
3400a09e:	4291      	cmp	r1, r2
3400a0a0:	d8aa      	bhi.n	34009ff8 <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a0a2:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
3400a0a6:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a0a8:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3400a0aa:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
3400a0ae:	4313      	orrs	r3, r2
3400a0b0:	60cb      	str	r3, [r1, #12]
3400a0b2:	e7d8      	b.n	3400a066 <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a0b4:	2000      	movs	r0, #0
3400a0b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400a0ba:	e7d9      	b.n	3400a070 <UART_SetConfig+0x208>
3400a0bc:	2000      	movs	r0, #0
3400a0be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3400a0c2:	e7d5      	b.n	3400a070 <UART_SetConfig+0x208>
3400a0c4:	2000      	movs	r0, #0
3400a0c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400a0ca:	e7d1      	b.n	3400a070 <UART_SetConfig+0x208>
3400a0cc:	2000      	movs	r0, #0
3400a0ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3400a0d2:	e7cd      	b.n	3400a070 <UART_SetConfig+0x208>
3400a0d4:	2000      	movs	r0, #0
3400a0d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3400a0da:	e7c9      	b.n	3400a070 <UART_SetConfig+0x208>
3400a0dc:	2000      	movs	r0, #0
3400a0de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
3400a0e2:	e7c5      	b.n	3400a070 <UART_SetConfig+0x208>
3400a0e4:	2000      	movs	r0, #0
3400a0e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3400a0ea:	e7c1      	b.n	3400a070 <UART_SetConfig+0x208>
3400a0ec:	2000      	movs	r0, #0
3400a0ee:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
3400a0f2:	e7bd      	b.n	3400a070 <UART_SetConfig+0x208>
3400a0f4:	2000      	movs	r0, #0
3400a0f6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3400a0fa:	e7b9      	b.n	3400a070 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a0fc:	f7ff f8ec 	bl	340092d8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a100:	2800      	cmp	r0, #0
3400a102:	d0b0      	beq.n	3400a066 <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a104:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a106:	4b13      	ldr	r3, [pc, #76]	@ (3400a154 <UART_SetConfig+0x2ec>)
3400a108:	6862      	ldr	r2, [r4, #4]
3400a10a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a10e:	fbb0 f3f3 	udiv	r3, r0, r3
3400a112:	eb03 0352 	add.w	r3, r3, r2, lsr #1
3400a116:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a11a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a11e:	f1a3 0110 	sub.w	r1, r3, #16
3400a122:	4291      	cmp	r1, r2
3400a124:	f63f af68 	bhi.w	34009ff8 <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
3400a128:	6822      	ldr	r2, [r4, #0]
3400a12a:	60d3      	str	r3, [r2, #12]
3400a12c:	e79b      	b.n	3400a066 <UART_SetConfig+0x1fe>
3400a12e:	bf00      	nop
3400a130:	00bebc1f 	.word	0x00bebc1f
3400a134:	3400f0b1 	.word	0x3400f0b1
3400a138:	56000c00 	.word	0x56000c00
3400a13c:	cfff69f3 	.word	0xcfff69f3
3400a140:	52001000 	.word	0x52001000
3400a144:	50004400 	.word	0x50004400
3400a148:	52001400 	.word	0x52001400
3400a14c:	50007800 	.word	0x50007800
3400a150:	52001800 	.word	0x52001800
3400a154:	3400f724 	.word	0x3400f724
3400a158:	000ffcff 	.word	0x000ffcff

3400a15c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a15c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
3400a15e:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a160:	2bff      	cmp	r3, #255	@ 0xff
{
3400a162:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a164:	d904      	bls.n	3400a170 <UART_AdvFeatureConfig+0x14>
3400a166:	f640 41e4 	movw	r1, #3300	@ 0xce4
3400a16a:	487e      	ldr	r0, [pc, #504]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a16c:	f7f6 ffce 	bl	3400110c <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3400a170:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a172:	0718      	lsls	r0, r3, #28
3400a174:	d50f      	bpl.n	3400a196 <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3400a176:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400a178:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a17c:	d004      	beq.n	3400a188 <UART_AdvFeatureConfig+0x2c>
3400a17e:	f640 41e9 	movw	r1, #3305	@ 0xce9
3400a182:	4878      	ldr	r0, [pc, #480]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a184:	f7f6 ffc2 	bl	3400110c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3400a188:	6822      	ldr	r2, [r4, #0]
3400a18a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400a18c:	6853      	ldr	r3, [r2, #4]
3400a18e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3400a192:	430b      	orrs	r3, r1
3400a194:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3400a196:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a198:	07d9      	lsls	r1, r3, #31
3400a19a:	d50f      	bpl.n	3400a1bc <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3400a19c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a19e:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
3400a1a2:	d004      	beq.n	3400a1ae <UART_AdvFeatureConfig+0x52>
3400a1a4:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
3400a1a8:	486e      	ldr	r0, [pc, #440]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a1aa:	f7f6 ffaf 	bl	3400110c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3400a1ae:	6822      	ldr	r2, [r4, #0]
3400a1b0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400a1b2:	6853      	ldr	r3, [r2, #4]
3400a1b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3400a1b8:	430b      	orrs	r3, r1
3400a1ba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3400a1bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a1be:	079a      	lsls	r2, r3, #30
3400a1c0:	d50f      	bpl.n	3400a1e2 <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3400a1c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a1c4:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3400a1c8:	d004      	beq.n	3400a1d4 <UART_AdvFeatureConfig+0x78>
3400a1ca:	f640 41f7 	movw	r1, #3319	@ 0xcf7
3400a1ce:	4865      	ldr	r0, [pc, #404]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a1d0:	f7f6 ff9c 	bl	3400110c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3400a1d4:	6822      	ldr	r2, [r4, #0]
3400a1d6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3400a1d8:	6853      	ldr	r3, [r2, #4]
3400a1da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400a1de:	430b      	orrs	r3, r1
3400a1e0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3400a1e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a1e4:	075b      	lsls	r3, r3, #29
3400a1e6:	d50f      	bpl.n	3400a208 <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3400a1e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400a1ea:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
3400a1ee:	d004      	beq.n	3400a1fa <UART_AdvFeatureConfig+0x9e>
3400a1f0:	f640 41fe 	movw	r1, #3326	@ 0xcfe
3400a1f4:	485b      	ldr	r0, [pc, #364]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a1f6:	f7f6 ff89 	bl	3400110c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3400a1fa:	6822      	ldr	r2, [r4, #0]
3400a1fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400a1fe:	6853      	ldr	r3, [r2, #4]
3400a200:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
3400a204:	430b      	orrs	r3, r1
3400a206:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3400a208:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a20a:	06d8      	lsls	r0, r3, #27
3400a20c:	d50f      	bpl.n	3400a22e <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3400a20e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a210:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a214:	d004      	beq.n	3400a220 <UART_AdvFeatureConfig+0xc4>
3400a216:	f640 5105 	movw	r1, #3333	@ 0xd05
3400a21a:	4852      	ldr	r0, [pc, #328]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a21c:	f7f6 ff76 	bl	3400110c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3400a220:	6822      	ldr	r2, [r4, #0]
3400a222:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400a224:	6893      	ldr	r3, [r2, #8]
3400a226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400a22a:	430b      	orrs	r3, r1
3400a22c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3400a22e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a230:	0699      	lsls	r1, r3, #26
3400a232:	d50f      	bpl.n	3400a254 <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3400a234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400a236:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a23a:	d004      	beq.n	3400a246 <UART_AdvFeatureConfig+0xea>
3400a23c:	f640 510d 	movw	r1, #3341	@ 0xd0d
3400a240:	4848      	ldr	r0, [pc, #288]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a242:	f7f6 ff63 	bl	3400110c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3400a246:	6822      	ldr	r2, [r4, #0]
3400a248:	6c21      	ldr	r1, [r4, #64]	@ 0x40
3400a24a:	6893      	ldr	r3, [r2, #8]
3400a24c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
3400a250:	430b      	orrs	r3, r1
3400a252:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3400a254:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a256:	065a      	lsls	r2, r3, #25
3400a258:	d56f      	bpl.n	3400a33a <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3400a25a:	6823      	ldr	r3, [r4, #0]
3400a25c:	4a42      	ldr	r2, [pc, #264]	@ (3400a368 <UART_AdvFeatureConfig+0x20c>)
3400a25e:	4293      	cmp	r3, r2
3400a260:	d047      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a262:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a266:	4293      	cmp	r3, r2
3400a268:	d043      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a26a:	4a40      	ldr	r2, [pc, #256]	@ (3400a36c <UART_AdvFeatureConfig+0x210>)
3400a26c:	4293      	cmp	r3, r2
3400a26e:	d040      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a270:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a274:	4293      	cmp	r3, r2
3400a276:	d03c      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a278:	4a3d      	ldr	r2, [pc, #244]	@ (3400a370 <UART_AdvFeatureConfig+0x214>)
3400a27a:	4293      	cmp	r3, r2
3400a27c:	d039      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a27e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a282:	4293      	cmp	r3, r2
3400a284:	d035      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a286:	4a3b      	ldr	r2, [pc, #236]	@ (3400a374 <UART_AdvFeatureConfig+0x218>)
3400a288:	4293      	cmp	r3, r2
3400a28a:	d032      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a28c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a290:	4293      	cmp	r3, r2
3400a292:	d02e      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a294:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a298:	d02b      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a29a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a29e:	4293      	cmp	r3, r2
3400a2a0:	d027      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2a2:	4a35      	ldr	r2, [pc, #212]	@ (3400a378 <UART_AdvFeatureConfig+0x21c>)
3400a2a4:	4293      	cmp	r3, r2
3400a2a6:	d024      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2a8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a2ac:	4293      	cmp	r3, r2
3400a2ae:	d020      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2b0:	4a32      	ldr	r2, [pc, #200]	@ (3400a37c <UART_AdvFeatureConfig+0x220>)
3400a2b2:	4293      	cmp	r3, r2
3400a2b4:	d01d      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2b6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a2ba:	4293      	cmp	r3, r2
3400a2bc:	d019      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2be:	4a30      	ldr	r2, [pc, #192]	@ (3400a380 <UART_AdvFeatureConfig+0x224>)
3400a2c0:	4293      	cmp	r3, r2
3400a2c2:	d016      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2c4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a2c8:	4293      	cmp	r3, r2
3400a2ca:	d012      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2cc:	4a2d      	ldr	r2, [pc, #180]	@ (3400a384 <UART_AdvFeatureConfig+0x228>)
3400a2ce:	4293      	cmp	r3, r2
3400a2d0:	d00f      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2d2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a2d6:	4293      	cmp	r3, r2
3400a2d8:	d00b      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2da:	4a2b      	ldr	r2, [pc, #172]	@ (3400a388 <UART_AdvFeatureConfig+0x22c>)
3400a2dc:	4293      	cmp	r3, r2
3400a2de:	d008      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2e0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a2e4:	4293      	cmp	r3, r2
3400a2e6:	d004      	beq.n	3400a2f2 <UART_AdvFeatureConfig+0x196>
3400a2e8:	f640 5115 	movw	r1, #3349	@ 0xd15
3400a2ec:	481d      	ldr	r0, [pc, #116]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a2ee:	f7f6 ff0d 	bl	3400110c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3400a2f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400a2f4:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
3400a2f8:	d004      	beq.n	3400a304 <UART_AdvFeatureConfig+0x1a8>
3400a2fa:	f640 5116 	movw	r1, #3350	@ 0xd16
3400a2fe:	4819      	ldr	r0, [pc, #100]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a300:	f7f6 ff04 	bl	3400110c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a304:	6821      	ldr	r1, [r4, #0]
3400a306:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3400a308:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a30a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a30e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3400a312:	ea43 0302 	orr.w	r3, r3, r2
3400a316:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a318:	d10f      	bne.n	3400a33a <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3400a31a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400a31c:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
3400a320:	d004      	beq.n	3400a32c <UART_AdvFeatureConfig+0x1d0>
3400a322:	f640 511b 	movw	r1, #3355	@ 0xd1b
3400a326:	480f      	ldr	r0, [pc, #60]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a328:	f7f6 fef0 	bl	3400110c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3400a32c:	6822      	ldr	r2, [r4, #0]
3400a32e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3400a330:	6853      	ldr	r3, [r2, #4]
3400a332:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
3400a336:	430b      	orrs	r3, r1
3400a338:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3400a33a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a33c:	061b      	lsls	r3, r3, #24
3400a33e:	d50f      	bpl.n	3400a360 <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3400a340:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400a342:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400a346:	d004      	beq.n	3400a352 <UART_AdvFeatureConfig+0x1f6>
3400a348:	f640 5123 	movw	r1, #3363	@ 0xd23
3400a34c:	4805      	ldr	r0, [pc, #20]	@ (3400a364 <UART_AdvFeatureConfig+0x208>)
3400a34e:	f7f6 fedd 	bl	3400110c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3400a352:	6822      	ldr	r2, [r4, #0]
3400a354:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400a356:	6853      	ldr	r3, [r2, #4]
3400a358:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
3400a35c:	430b      	orrs	r3, r1
3400a35e:	6053      	str	r3, [r2, #4]
}
3400a360:	bd10      	pop	{r4, pc}
3400a362:	bf00      	nop
3400a364:	3400f0b1 	.word	0x3400f0b1
3400a368:	52001000 	.word	0x52001000
3400a36c:	50004400 	.word	0x50004400
3400a370:	50004800 	.word	0x50004800
3400a374:	50004c00 	.word	0x50004c00
3400a378:	52001400 	.word	0x52001400
3400a37c:	50007800 	.word	0x50007800
3400a380:	50007c00 	.word	0x50007c00
3400a384:	52001800 	.word	0x52001800
3400a388:	52001c00 	.word	0x52001c00

3400a38c <UART_WaitOnFlagUntilTimeout>:
{
3400a38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400a390:	4604      	mov	r4, r0
3400a392:	460d      	mov	r5, r1
3400a394:	4617      	mov	r7, r2
3400a396:	4698      	mov	r8, r3
3400a398:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3400a39c:	6822      	ldr	r2, [r4, #0]
3400a39e:	69d3      	ldr	r3, [r2, #28]
3400a3a0:	ea35 0303 	bics.w	r3, r5, r3
3400a3a4:	bf0c      	ite	eq
3400a3a6:	2301      	moveq	r3, #1
3400a3a8:	2300      	movne	r3, #0
3400a3aa:	42bb      	cmp	r3, r7
3400a3ac:	d001      	beq.n	3400a3b2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
3400a3ae:	2000      	movs	r0, #0
3400a3b0:	e022      	b.n	3400a3f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
3400a3b2:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
3400a3b6:	d0f2      	beq.n	3400a39e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400a3b8:	f7f7 fea4 	bl	34002104 <HAL_GetTick>
3400a3bc:	eba0 0008 	sub.w	r0, r0, r8
3400a3c0:	4548      	cmp	r0, r9
3400a3c2:	d829      	bhi.n	3400a418 <UART_WaitOnFlagUntilTimeout+0x8c>
3400a3c4:	f1b9 0f00 	cmp.w	r9, #0
3400a3c8:	d026      	beq.n	3400a418 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3400a3ca:	6821      	ldr	r1, [r4, #0]
3400a3cc:	680b      	ldr	r3, [r1, #0]
3400a3ce:	075a      	lsls	r2, r3, #29
3400a3d0:	d5e4      	bpl.n	3400a39c <UART_WaitOnFlagUntilTimeout+0x10>
3400a3d2:	2d80      	cmp	r5, #128	@ 0x80
3400a3d4:	d0e2      	beq.n	3400a39c <UART_WaitOnFlagUntilTimeout+0x10>
3400a3d6:	2d40      	cmp	r5, #64	@ 0x40
3400a3d8:	d0e0      	beq.n	3400a39c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3400a3da:	69ce      	ldr	r6, [r1, #28]
3400a3dc:	f016 0608 	ands.w	r6, r6, #8
3400a3e0:	d00c      	beq.n	3400a3fc <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a3e2:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
3400a3e4:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a3e6:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3400a3e8:	f7ff fd10 	bl	34009e0c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
3400a3ec:	2300      	movs	r3, #0
          return HAL_ERROR;
3400a3ee:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
3400a3f0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
3400a3f4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3400a3fc:	69cb      	ldr	r3, [r1, #28]
3400a3fe:	051b      	lsls	r3, r3, #20
3400a400:	d5cc      	bpl.n	3400a39c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a402:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
3400a406:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a408:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
3400a40a:	f7ff fcff 	bl	34009e0c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a40e:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
3400a410:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a414:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
3400a418:	2003      	movs	r0, #3
3400a41a:	e7ed      	b.n	3400a3f8 <UART_WaitOnFlagUntilTimeout+0x6c>

3400a41c <HAL_UART_Transmit>:
{
3400a41c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400a420:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
3400a422:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
3400a426:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
3400a428:	2b20      	cmp	r3, #32
{
3400a42a:	460d      	mov	r5, r1
3400a42c:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
3400a42e:	d148      	bne.n	3400a4c2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
3400a430:	2900      	cmp	r1, #0
3400a432:	d048      	beq.n	3400a4c6 <HAL_UART_Transmit+0xaa>
3400a434:	2a00      	cmp	r2, #0
3400a436:	d046      	beq.n	3400a4c6 <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a438:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a43a:	f04f 0900 	mov.w	r9, #0
3400a43e:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a442:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
3400a446:	f7f7 fe5d 	bl	34002104 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a44a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
3400a44c:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
3400a454:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
3400a458:	4607      	mov	r7, r0
      pdata16bits = NULL;
3400a45a:	464e      	mov	r6, r9
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a45c:	d103      	bne.n	3400a466 <HAL_UART_Transmit+0x4a>
3400a45e:	6923      	ldr	r3, [r4, #16]
3400a460:	b90b      	cbnz	r3, 3400a466 <HAL_UART_Transmit+0x4a>
      pdata16bits = (const uint16_t *) pData;
3400a462:	462e      	mov	r6, r5
      pdata8bits  = NULL;
3400a464:	461d      	mov	r5, r3
    while (huart->TxXferCount > 0U)
3400a466:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a46a:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
3400a46c:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a46e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
3400a472:	b942      	cbnz	r2, 3400a486 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3400a474:	2140      	movs	r1, #64	@ 0x40
3400a476:	4620      	mov	r0, r4
3400a478:	f7ff ff88 	bl	3400a38c <UART_WaitOnFlagUntilTimeout>
3400a47c:	2320      	movs	r3, #32
3400a47e:	b948      	cbnz	r0, 3400a494 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
3400a480:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
3400a484:	e009      	b.n	3400a49a <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a486:	2200      	movs	r2, #0
3400a488:	2180      	movs	r1, #128	@ 0x80
3400a48a:	4620      	mov	r0, r4
3400a48c:	f7ff ff7e 	bl	3400a38c <UART_WaitOnFlagUntilTimeout>
3400a490:	b130      	cbz	r0, 3400a4a0 <HAL_UART_Transmit+0x84>
        huart->gState = HAL_UART_STATE_READY;
3400a492:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
3400a494:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
3400a496:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
3400a49a:	b003      	add	sp, #12
3400a49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a4a0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
3400a4a2:	b95d      	cbnz	r5, 3400a4bc <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a4a4:	f836 3b02 	ldrh.w	r3, [r6], #2
3400a4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a4ac:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
3400a4ae:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
3400a4b2:	3a01      	subs	r2, #1
3400a4b4:	b292      	uxth	r2, r2
3400a4b6:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
3400a4ba:	e7d4      	b.n	3400a466 <HAL_UART_Transmit+0x4a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a4bc:	f815 3b01 	ldrb.w	r3, [r5], #1
3400a4c0:	e7f4      	b.n	3400a4ac <HAL_UART_Transmit+0x90>
    return HAL_BUSY;
3400a4c2:	2002      	movs	r0, #2
3400a4c4:	e7e9      	b.n	3400a49a <HAL_UART_Transmit+0x7e>
      return  HAL_ERROR;
3400a4c6:	2001      	movs	r0, #1
3400a4c8:	e7e7      	b.n	3400a49a <HAL_UART_Transmit+0x7e>

3400a4ca <UART_CheckIdleState>:
{
3400a4ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a4cc:	2600      	movs	r6, #0
{
3400a4ce:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a4d0:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
3400a4d4:	f7f7 fe16 	bl	34002104 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a4d8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
3400a4da:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a4dc:	681b      	ldr	r3, [r3, #0]
3400a4de:	071a      	lsls	r2, r3, #28
3400a4e0:	d51c      	bpl.n	3400a51c <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a4e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a4e6:	4632      	mov	r2, r6
3400a4e8:	9300      	str	r3, [sp, #0]
3400a4ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400a4ee:	4603      	mov	r3, r0
3400a4f0:	4620      	mov	r0, r4
3400a4f2:	f7ff ff4b 	bl	3400a38c <UART_WaitOnFlagUntilTimeout>
3400a4f6:	b188      	cbz	r0, 3400a51c <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3400a4f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a4fa:	e852 3f00 	ldrex	r3, [r2]
3400a4fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a502:	e842 3100 	strex	r1, r3, [r2]
3400a506:	2900      	cmp	r1, #0
3400a508:	d1f6      	bne.n	3400a4f8 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
3400a50a:	2320      	movs	r3, #32
3400a50c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
3400a510:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
3400a512:	2300      	movs	r3, #0
3400a514:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a518:	b002      	add	sp, #8
3400a51a:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3400a51c:	6823      	ldr	r3, [r4, #0]
3400a51e:	681b      	ldr	r3, [r3, #0]
3400a520:	075b      	lsls	r3, r3, #29
3400a522:	d524      	bpl.n	3400a56e <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a524:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a528:	2200      	movs	r2, #0
3400a52a:	9300      	str	r3, [sp, #0]
3400a52c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400a530:	462b      	mov	r3, r5
3400a532:	4620      	mov	r0, r4
3400a534:	f7ff ff2a 	bl	3400a38c <UART_WaitOnFlagUntilTimeout>
3400a538:	b1c8      	cbz	r0, 3400a56e <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a53a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a53c:	e852 3f00 	ldrex	r3, [r2]
3400a540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a544:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a548:	6822      	ldr	r2, [r4, #0]
3400a54a:	2900      	cmp	r1, #0
3400a54c:	d1f5      	bne.n	3400a53a <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a54e:	f102 0308 	add.w	r3, r2, #8
3400a552:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3400a556:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a55a:	f102 0008 	add.w	r0, r2, #8
3400a55e:	e840 3100 	strex	r1, r3, [r0]
3400a562:	2900      	cmp	r1, #0
3400a564:	d1f3      	bne.n	3400a54e <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3400a566:	2320      	movs	r3, #32
3400a568:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
3400a56c:	e7d0      	b.n	3400a510 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
3400a56e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a570:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
3400a572:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3400a576:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a57a:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3400a57c:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
3400a57e:	e7c8      	b.n	3400a512 <UART_CheckIdleState+0x48>

3400a580 <HAL_UART_Init>:
{
3400a580:	b510      	push	{r4, lr}
  if (huart == NULL)
3400a582:	4604      	mov	r4, r0
3400a584:	2800      	cmp	r0, #0
3400a586:	f000 80d0 	beq.w	3400a72a <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a58a:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a58c:	6803      	ldr	r3, [r0, #0]
3400a58e:	4a68      	ldr	r2, [pc, #416]	@ (3400a730 <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a590:	2900      	cmp	r1, #0
3400a592:	d07c      	beq.n	3400a68e <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a594:	4293      	cmp	r3, r2
3400a596:	d04e      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a598:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a59c:	4293      	cmp	r3, r2
3400a59e:	d04a      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5a0:	4a64      	ldr	r2, [pc, #400]	@ (3400a734 <HAL_UART_Init+0x1b4>)
3400a5a2:	4293      	cmp	r3, r2
3400a5a4:	d047      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5a6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5aa:	4293      	cmp	r3, r2
3400a5ac:	d043      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5ae:	4a62      	ldr	r2, [pc, #392]	@ (3400a738 <HAL_UART_Init+0x1b8>)
3400a5b0:	4293      	cmp	r3, r2
3400a5b2:	d040      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5b4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5b8:	4293      	cmp	r3, r2
3400a5ba:	d03c      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5bc:	4a5f      	ldr	r2, [pc, #380]	@ (3400a73c <HAL_UART_Init+0x1bc>)
3400a5be:	4293      	cmp	r3, r2
3400a5c0:	d039      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5c2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5c6:	4293      	cmp	r3, r2
3400a5c8:	d035      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5ca:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a5ce:	d032      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a5d4:	4293      	cmp	r3, r2
3400a5d6:	d02e      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5d8:	4a59      	ldr	r2, [pc, #356]	@ (3400a740 <HAL_UART_Init+0x1c0>)
3400a5da:	4293      	cmp	r3, r2
3400a5dc:	d02b      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5de:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5e2:	4293      	cmp	r3, r2
3400a5e4:	d027      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5e6:	4a57      	ldr	r2, [pc, #348]	@ (3400a744 <HAL_UART_Init+0x1c4>)
3400a5e8:	4293      	cmp	r3, r2
3400a5ea:	d024      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5ec:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5f0:	4293      	cmp	r3, r2
3400a5f2:	d020      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5f4:	4a54      	ldr	r2, [pc, #336]	@ (3400a748 <HAL_UART_Init+0x1c8>)
3400a5f6:	4293      	cmp	r3, r2
3400a5f8:	d01d      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a5fa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5fe:	4293      	cmp	r3, r2
3400a600:	d019      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a602:	4a52      	ldr	r2, [pc, #328]	@ (3400a74c <HAL_UART_Init+0x1cc>)
3400a604:	4293      	cmp	r3, r2
3400a606:	d016      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a608:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a60c:	4293      	cmp	r3, r2
3400a60e:	d012      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a610:	4a4f      	ldr	r2, [pc, #316]	@ (3400a750 <HAL_UART_Init+0x1d0>)
3400a612:	4293      	cmp	r3, r2
3400a614:	d00f      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a616:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a61a:	4293      	cmp	r3, r2
3400a61c:	d00b      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a61e:	4a4d      	ldr	r2, [pc, #308]	@ (3400a754 <HAL_UART_Init+0x1d4>)
3400a620:	4293      	cmp	r3, r2
3400a622:	d008      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a624:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a628:	4293      	cmp	r3, r2
3400a62a:	d004      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a62c:	f240 113f 	movw	r1, #319	@ 0x13f
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400a630:	4849      	ldr	r0, [pc, #292]	@ (3400a758 <HAL_UART_Init+0x1d8>)
3400a632:	f7f6 fd6b 	bl	3400110c <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3400a636:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3400a63a:	b923      	cbnz	r3, 3400a646 <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
3400a63c:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
3400a63e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3400a642:	f7ff fc0f 	bl	34009e64 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3400a646:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
3400a648:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3400a64a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
3400a64e:	6813      	ldr	r3, [r2, #0]
3400a650:	f023 0301 	bic.w	r3, r3, #1
3400a654:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3400a656:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a658:	b113      	cbz	r3, 3400a660 <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
3400a65a:	4620      	mov	r0, r4
3400a65c:	f7ff fd7e 	bl	3400a15c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
3400a660:	4620      	mov	r0, r4
3400a662:	f7ff fc01 	bl	34009e68 <UART_SetConfig>
3400a666:	2801      	cmp	r0, #1
3400a668:	d05f      	beq.n	3400a72a <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400a66a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
3400a66c:	4620      	mov	r0, r4
}
3400a66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400a672:	685a      	ldr	r2, [r3, #4]
3400a674:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3400a678:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3400a67a:	689a      	ldr	r2, [r3, #8]
3400a67c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3400a680:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3400a682:	681a      	ldr	r2, [r3, #0]
3400a684:	f042 0201 	orr.w	r2, r2, #1
3400a688:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
3400a68a:	f7ff bf1e 	b.w	3400a4ca <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400a68e:	4293      	cmp	r3, r2
3400a690:	d0d1      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a692:	4a32      	ldr	r2, [pc, #200]	@ (3400a75c <HAL_UART_Init+0x1dc>)
3400a694:	4293      	cmp	r3, r2
3400a696:	d0ce      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a698:	4a26      	ldr	r2, [pc, #152]	@ (3400a734 <HAL_UART_Init+0x1b4>)
3400a69a:	4293      	cmp	r3, r2
3400a69c:	d0cb      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a69e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6a2:	4293      	cmp	r3, r2
3400a6a4:	d0c7      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6a6:	4a24      	ldr	r2, [pc, #144]	@ (3400a738 <HAL_UART_Init+0x1b8>)
3400a6a8:	4293      	cmp	r3, r2
3400a6aa:	d0c4      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6ac:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6b0:	4293      	cmp	r3, r2
3400a6b2:	d0c0      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6b4:	4a21      	ldr	r2, [pc, #132]	@ (3400a73c <HAL_UART_Init+0x1bc>)
3400a6b6:	4293      	cmp	r3, r2
3400a6b8:	d0bd      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6ba:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6be:	4293      	cmp	r3, r2
3400a6c0:	d0b9      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6c2:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a6c6:	d0b6      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a6cc:	4293      	cmp	r3, r2
3400a6ce:	d0b2      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6d0:	4a1b      	ldr	r2, [pc, #108]	@ (3400a740 <HAL_UART_Init+0x1c0>)
3400a6d2:	4293      	cmp	r3, r2
3400a6d4:	d0af      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6d6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6da:	4293      	cmp	r3, r2
3400a6dc:	d0ab      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6de:	4a19      	ldr	r2, [pc, #100]	@ (3400a744 <HAL_UART_Init+0x1c4>)
3400a6e0:	4293      	cmp	r3, r2
3400a6e2:	d0a8      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6e4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6e8:	4293      	cmp	r3, r2
3400a6ea:	d0a4      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6ec:	4a16      	ldr	r2, [pc, #88]	@ (3400a748 <HAL_UART_Init+0x1c8>)
3400a6ee:	4293      	cmp	r3, r2
3400a6f0:	d0a1      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6f2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a6f6:	4293      	cmp	r3, r2
3400a6f8:	d09d      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a6fa:	4a14      	ldr	r2, [pc, #80]	@ (3400a74c <HAL_UART_Init+0x1cc>)
3400a6fc:	4293      	cmp	r3, r2
3400a6fe:	d09a      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a700:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a704:	4293      	cmp	r3, r2
3400a706:	d096      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a708:	4a11      	ldr	r2, [pc, #68]	@ (3400a750 <HAL_UART_Init+0x1d0>)
3400a70a:	4293      	cmp	r3, r2
3400a70c:	d093      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a70e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a712:	4293      	cmp	r3, r2
3400a714:	d08f      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a716:	4a0f      	ldr	r2, [pc, #60]	@ (3400a754 <HAL_UART_Init+0x1d4>)
3400a718:	4293      	cmp	r3, r2
3400a71a:	d08c      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a71c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a720:	4293      	cmp	r3, r2
3400a722:	d088      	beq.n	3400a636 <HAL_UART_Init+0xb6>
3400a724:	f44f 71a2 	mov.w	r1, #324	@ 0x144
3400a728:	e782      	b.n	3400a630 <HAL_UART_Init+0xb0>
}
3400a72a:	2001      	movs	r0, #1
3400a72c:	bd10      	pop	{r4, pc}
3400a72e:	bf00      	nop
3400a730:	52001000 	.word	0x52001000
3400a734:	50004400 	.word	0x50004400
3400a738:	50004800 	.word	0x50004800
3400a73c:	50004c00 	.word	0x50004c00
3400a740:	52001400 	.word	0x52001400
3400a744:	50007800 	.word	0x50007800
3400a748:	50007c00 	.word	0x50007c00
3400a74c:	52001800 	.word	0x52001800
3400a750:	52001c00 	.word	0x52001c00
3400a754:	56000c00 	.word	0x56000c00
3400a758:	3400f0b1 	.word	0x3400f0b1
3400a75c:	42001000 	.word	0x42001000

3400a760 <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400a760:	6802      	ldr	r2, [r0, #0]
{
3400a762:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400a766:	6813      	ldr	r3, [r2, #0]
{
3400a768:	4606      	mov	r6, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400a76a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400a76e:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400a770:	6883      	ldr	r3, [r0, #8]
{
3400a772:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400a774:	b97b      	cbnz	r3, 3400a796 <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400a776:	684b      	ldr	r3, [r1, #4]
3400a778:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400a77c:	d004      	beq.n	3400a788 <XSPI_ConfigCmd+0x28>
3400a77e:	f640 41a4 	movw	r1, #3236	@ 0xca4
3400a782:	4876      	ldr	r0, [pc, #472]	@ (3400a95c <XSPI_ConfigCmd+0x1fc>)
3400a784:	f7f6 fcc2 	bl	3400110c <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3400a788:	6832      	ldr	r2, [r6, #0]
3400a78a:	6861      	ldr	r1, [r4, #4]
3400a78c:	6813      	ldr	r3, [r2, #0]
3400a78e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
3400a792:	430b      	orrs	r3, r1
3400a794:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400a796:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3400a798:	6831      	ldr	r1, [r6, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400a79a:	2b02      	cmp	r3, #2
3400a79c:	d158      	bne.n	3400a850 <XSPI_ConfigCmd+0xf0>
    ccr_reg = &(hxspi->Instance->WCCR);
3400a79e:	f501 72c0 	add.w	r2, r1, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
3400a7a2:	f501 70c4 	add.w	r0, r1, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
3400a7a6:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
3400a7aa:	f501 73d0 	add.w	r3, r1, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3400a7ae:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
3400a7b0:	6017      	str	r7, [r2, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400a7b2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
3400a7b4:	b167      	cbz	r7, 3400a7d0 <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3400a7b6:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3400a7b8:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3400a7ba:	6b67      	ldr	r7, [r4, #52]	@ 0x34
3400a7bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a7be:	f8d2 c000 	ldr.w	ip, [r2]
3400a7c2:	433b      	orrs	r3, r7
3400a7c4:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3400a7c6:	433b      	orrs	r3, r7
3400a7c8:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
3400a7cc:	433b      	orrs	r3, r7
3400a7ce:	6013      	str	r3, [r2, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3400a7d0:	6803      	ldr	r3, [r0, #0]
3400a7d2:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3400a7d4:	f023 031f 	bic.w	r3, r3, #31
3400a7d8:	433b      	orrs	r3, r7
3400a7da:	6003      	str	r3, [r0, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400a7dc:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
3400a7e0:	f1be 0f00 	cmp.w	lr, #0
3400a7e4:	d00e      	beq.n	3400a804 <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400a7e6:	6823      	ldr	r3, [r4, #0]
3400a7e8:	b913      	cbnz	r3, 3400a7f0 <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3400a7ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a7ec:	3b01      	subs	r3, #1
3400a7ee:	640b      	str	r3, [r1, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3400a7f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400a7f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400a7f6:	d13f      	bne.n	3400a878 <XSPI_ConfigCmd+0x118>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400a7f8:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400a7fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400a800:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400a804:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400a806:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400a80a:	2b00      	cmp	r3, #0
3400a80c:	f000 8083 	beq.w	3400a916 <XSPI_ConfigCmd+0x1b6>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400a810:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400a814:	f1b9 0f00 	cmp.w	r9, #0
3400a818:	d053      	beq.n	3400a8c2 <XSPI_ConfigCmd+0x162>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400a81a:	e9d4 0708 	ldrd	r0, r7, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400a81e:	f1be 0f00 	cmp.w	lr, #0
3400a822:	d032      	beq.n	3400a88a <XSPI_ConfigCmd+0x12a>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400a824:	ea4e 0303 	orr.w	r3, lr, r3
3400a828:	ea43 0309 	orr.w	r3, r3, r9
3400a82c:	ea43 0308 	orr.w	r3, r3, r8
3400a830:	ea43 030c 	orr.w	r3, r3, ip
3400a834:	433b      	orrs	r3, r7
3400a836:	4303      	orrs	r3, r0
3400a838:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400a83a:	6816      	ldr	r6, [r2, #0]
3400a83c:	4303      	orrs	r3, r0
3400a83e:	4848      	ldr	r0, [pc, #288]	@ (3400a960 <XSPI_ConfigCmd+0x200>)
3400a840:	4030      	ands	r0, r6
3400a842:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400a844:	6013      	str	r3, [r2, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3400a846:	68a3      	ldr	r3, [r4, #8]
3400a848:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3400a84a:	69a3      	ldr	r3, [r4, #24]
3400a84c:	648b      	str	r3, [r1, #72]	@ 0x48
3400a84e:	e04c      	b.n	3400a8ea <XSPI_ConfigCmd+0x18a>
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3400a850:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
3400a852:	bf01      	itttt	eq
3400a854:	f501 72a0 	addeq.w	r2, r1, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
3400a858:	f501 70a4 	addeq.w	r0, r1, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
3400a85c:	f501 75a8 	addeq.w	r5, r1, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
3400a860:	f501 73b0 	addeq.w	r3, r1, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
3400a864:	bf1f      	itttt	ne
3400a866:	f501 7280 	addne.w	r2, r1, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
3400a86a:	f501 7084 	addne.w	r0, r1, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
3400a86e:	f501 7588 	addne.w	r5, r1, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
3400a872:	f501 7390 	addne.w	r3, r1, #288	@ 0x120
3400a876:	e79a      	b.n	3400a7ae <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3400a878:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3400a87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400a87e:	d1c1      	bne.n	3400a804 <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400a880:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400a884:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3400a888:	e7ba      	b.n	3400a800 <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400a88a:	ea43 0309 	orr.w	r3, r3, r9
3400a88e:	f8d2 e000 	ldr.w	lr, [r2]
3400a892:	ea43 0308 	orr.w	r3, r3, r8
3400a896:	ea43 030c 	orr.w	r3, r3, ip
3400a89a:	433b      	orrs	r3, r7
3400a89c:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
3400a8a0:	4303      	orrs	r3, r0
3400a8a2:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
3400a8a6:	ea43 030e 	orr.w	r3, r3, lr
3400a8aa:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400a8ac:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400a8ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a8b2:	d1c8      	bne.n	3400a846 <XSPI_ConfigCmd+0xe6>
3400a8b4:	6963      	ldr	r3, [r4, #20]
3400a8b6:	2b08      	cmp	r3, #8
3400a8b8:	d1c5      	bne.n	3400a846 <XSPI_ConfigCmd+0xe6>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400a8ba:	6813      	ldr	r3, [r2, #0]
3400a8bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400a8c0:	e7c0      	b.n	3400a844 <XSPI_ConfigCmd+0xe4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400a8c2:	6811      	ldr	r1, [r2, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400a8c4:	f1be 0f00 	cmp.w	lr, #0
3400a8c8:	d012      	beq.n	3400a8f0 <XSPI_ConfigCmd+0x190>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400a8ca:	ea4e 0303 	orr.w	r3, lr, r3
3400a8ce:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400a8d0:	ea43 0308 	orr.w	r3, r3, r8
3400a8d4:	ea43 030c 	orr.w	r3, r3, ip
3400a8d8:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
3400a8dc:	4303      	orrs	r3, r0
3400a8de:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400a8e2:	430b      	orrs	r3, r1
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400a8e4:	6013      	str	r3, [r2, #0]
      *ir_reg = pCmd->Instruction;
3400a8e6:	68a3      	ldr	r3, [r4, #8]
3400a8e8:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
3400a8ea:	2000      	movs	r0, #0
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  return status;
}
3400a8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3400a8f0:	ea43 0308 	orr.w	r3, r3, r8
3400a8f4:	ea43 030c 	orr.w	r3, r3, ip
3400a8f8:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400a8fc:	430b      	orrs	r3, r1
3400a8fe:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400a900:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400a902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a906:	d1ee      	bne.n	3400a8e6 <XSPI_ConfigCmd+0x186>
3400a908:	6963      	ldr	r3, [r4, #20]
3400a90a:	2b08      	cmp	r3, #8
3400a90c:	d1eb      	bne.n	3400a8e6 <XSPI_ConfigCmd+0x186>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400a90e:	6813      	ldr	r3, [r2, #0]
3400a910:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400a914:	e7e6      	b.n	3400a8e4 <XSPI_ConfigCmd+0x184>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400a916:	f1b9 0f00 	cmp.w	r9, #0
3400a91a:	d01b      	beq.n	3400a954 <XSPI_ConfigCmd+0x1f4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400a91c:	e9d4 6008 	ldrd	r6, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400a920:	f1be 0f00 	cmp.w	lr, #0
3400a924:	d00d      	beq.n	3400a942 <XSPI_ConfigCmd+0x1e2>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3400a926:	ea4e 0309 	orr.w	r3, lr, r9
3400a92a:	6815      	ldr	r5, [r2, #0]
3400a92c:	4303      	orrs	r3, r0
3400a92e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400a930:	4333      	orrs	r3, r6
3400a932:	4303      	orrs	r3, r0
3400a934:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
3400a938:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
3400a93c:	4303      	orrs	r3, r0
3400a93e:	6013      	str	r3, [r2, #0]
3400a940:	e783      	b.n	3400a84a <XSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3400a942:	6813      	ldr	r3, [r2, #0]
3400a944:	ea40 0009 	orr.w	r0, r0, r9
3400a948:	4330      	orrs	r0, r6
3400a94a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400a94e:	4318      	orrs	r0, r3
3400a950:	6010      	str	r0, [r2, #0]
3400a952:	e77a      	b.n	3400a84a <XSPI_ConfigCmd+0xea>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400a954:	2308      	movs	r3, #8
      status = HAL_ERROR;
3400a956:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400a958:	65f3      	str	r3, [r6, #92]	@ 0x5c
3400a95a:	e7c7      	b.n	3400a8ec <XSPI_ConfigCmd+0x18c>
3400a95c:	3400f0e6 	.word	0x3400f0e6
3400a960:	f0ffc0c0 	.word	0xf0ffc0c0

3400a964 <XSPI_WaitFlagStateUntilTimeout>:
{
3400a964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400a968:	4604      	mov	r4, r0
3400a96a:	460e      	mov	r6, r1
3400a96c:	4615      	mov	r5, r2
3400a96e:	461f      	mov	r7, r3
3400a970:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3400a974:	6822      	ldr	r2, [r4, #0]
3400a976:	6a13      	ldr	r3, [r2, #32]
3400a978:	4233      	tst	r3, r6
3400a97a:	bf14      	ite	ne
3400a97c:	2301      	movne	r3, #1
3400a97e:	2300      	moveq	r3, #0
3400a980:	42ab      	cmp	r3, r5
3400a982:	d101      	bne.n	3400a988 <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
3400a984:	2000      	movs	r0, #0
3400a986:	e00e      	b.n	3400a9a6 <XSPI_WaitFlagStateUntilTimeout+0x42>
    if (Timeout != HAL_MAX_DELAY)
3400a988:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
3400a98c:	d0f3      	beq.n	3400a976 <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400a98e:	f7f7 fbb9 	bl	34002104 <HAL_GetTick>
3400a992:	1bc0      	subs	r0, r0, r7
3400a994:	4540      	cmp	r0, r8
3400a996:	d908      	bls.n	3400a9aa <XSPI_WaitFlagStateUntilTimeout+0x46>
        hxspi->State     = HAL_XSPI_STATE_READY;
3400a998:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400a99a:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
3400a99c:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400a99e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3400a9a0:	f043 0301 	orr.w	r3, r3, #1
3400a9a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
3400a9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400a9aa:	f1b8 0f00 	cmp.w	r8, #0
3400a9ae:	d1e1      	bne.n	3400a974 <XSPI_WaitFlagStateUntilTimeout+0x10>
3400a9b0:	e7f2      	b.n	3400a998 <XSPI_WaitFlagStateUntilTimeout+0x34>

3400a9b2 <HAL_XSPI_MspInit>:
}
3400a9b2:	4770      	bx	lr

3400a9b4 <HAL_XSPI_Init>:
{
3400a9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400a9b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3400a9b8:	f7f7 fba4 	bl	34002104 <HAL_GetTick>
3400a9bc:	4606      	mov	r6, r0
  if (hxspi == NULL)
3400a9be:	2c00      	cmp	r4, #0
3400a9c0:	f000 812a 	beq.w	3400ac18 <HAL_XSPI_Init+0x264>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3400a9c4:	68a3      	ldr	r3, [r4, #8]
3400a9c6:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3400a9ca:	d004      	beq.n	3400a9d6 <HAL_XSPI_Init+0x22>
3400a9cc:	f240 1161 	movw	r1, #353	@ 0x161
3400a9d0:	4892      	ldr	r0, [pc, #584]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400a9d2:	f7f6 fb9b 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3400a9d6:	68e3      	ldr	r3, [r4, #12]
3400a9d8:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
3400a9dc:	d009      	beq.n	3400a9f2 <HAL_XSPI_Init+0x3e>
3400a9de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3400a9e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400a9e6:	d004      	beq.n	3400a9f2 <HAL_XSPI_Init+0x3e>
3400a9e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400a9ec:	488b      	ldr	r0, [pc, #556]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400a9ee:	f7f6 fb8d 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3400a9f2:	6923      	ldr	r3, [r4, #16]
3400a9f4:	2b1f      	cmp	r3, #31
3400a9f6:	d904      	bls.n	3400aa02 <HAL_XSPI_Init+0x4e>
3400a9f8:	f240 1163 	movw	r1, #355	@ 0x163
3400a9fc:	4887      	ldr	r0, [pc, #540]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400a9fe:	f7f6 fb85 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3400aa02:	6963      	ldr	r3, [r4, #20]
3400aa04:	3b01      	subs	r3, #1
3400aa06:	2b3f      	cmp	r3, #63	@ 0x3f
3400aa08:	d904      	bls.n	3400aa14 <HAL_XSPI_Init+0x60>
3400aa0a:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400aa0e:	4883      	ldr	r0, [pc, #524]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aa10:	f7f6 fb7c 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
3400aa14:	69a3      	ldr	r3, [r4, #24]
3400aa16:	f033 0302 	bics.w	r3, r3, #2
3400aa1a:	d004      	beq.n	3400aa26 <HAL_XSPI_Init+0x72>
3400aa1c:	f240 1165 	movw	r1, #357	@ 0x165
3400aa20:	487e      	ldr	r0, [pc, #504]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aa22:	f7f6 fb73 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3400aa26:	69e3      	ldr	r3, [r4, #28]
3400aa28:	2b01      	cmp	r3, #1
3400aa2a:	d904      	bls.n	3400aa36 <HAL_XSPI_Init+0x82>
3400aa2c:	f44f 71b3 	mov.w	r1, #358	@ 0x166
3400aa30:	487a      	ldr	r0, [pc, #488]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aa32:	f7f6 fb6b 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3400aa36:	6a23      	ldr	r3, [r4, #32]
3400aa38:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
3400aa3c:	d00c      	beq.n	3400aa58 <HAL_XSPI_Init+0xa4>
3400aa3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400aa42:	d009      	beq.n	3400aa58 <HAL_XSPI_Init+0xa4>
3400aa44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400aa48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400aa4c:	d004      	beq.n	3400aa58 <HAL_XSPI_Init+0xa4>
3400aa4e:	f240 1167 	movw	r1, #359	@ 0x167
3400aa52:	4872      	ldr	r0, [pc, #456]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aa54:	f7f6 fb5a 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
3400aa58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400aa5a:	2bff      	cmp	r3, #255	@ 0xff
3400aa5c:	d904      	bls.n	3400aa68 <HAL_XSPI_Init+0xb4>
3400aa5e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3400aa62:	486e      	ldr	r0, [pc, #440]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aa64:	f7f6 fb52 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
3400aa68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400aa6a:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
3400aa6e:	d004      	beq.n	3400aa7a <HAL_XSPI_Init+0xc6>
3400aa70:	f240 1169 	movw	r1, #361	@ 0x169
3400aa74:	4869      	ldr	r0, [pc, #420]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aa76:	f7f6 fb49 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
3400aa7a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400aa7c:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
3400aa80:	d004      	beq.n	3400aa8c <HAL_XSPI_Init+0xd8>
3400aa82:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400aa86:	4865      	ldr	r0, [pc, #404]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aa88:	f7f6 fb40 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
3400aa8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400aa8e:	2b1f      	cmp	r3, #31
3400aa90:	d904      	bls.n	3400aa9c <HAL_XSPI_Init+0xe8>
3400aa92:	f240 116b 	movw	r1, #363	@ 0x16b
3400aa96:	4861      	ldr	r0, [pc, #388]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aa98:	f7f6 fb38 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
3400aa9c:	6863      	ldr	r3, [r4, #4]
3400aa9e:	3b01      	subs	r3, #1
3400aaa0:	2b3f      	cmp	r3, #63	@ 0x3f
3400aaa2:	d904      	bls.n	3400aaae <HAL_XSPI_Init+0xfa>
3400aaa4:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3400aaa8:	485c      	ldr	r0, [pc, #368]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aaaa:	f7f6 fb2f 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3400aaae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400aab0:	2bff      	cmp	r3, #255	@ 0xff
3400aab2:	d904      	bls.n	3400aabe <HAL_XSPI_Init+0x10a>
3400aab4:	f240 116d 	movw	r1, #365	@ 0x16d
3400aab8:	4858      	ldr	r0, [pc, #352]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aaba:	f7f6 fb27 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3400aabe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400aac0:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3400aac4:	d004      	beq.n	3400aad0 <HAL_XSPI_Init+0x11c>
3400aac6:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3400aaca:	4854      	ldr	r0, [pc, #336]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aacc:	f7f6 fb1e 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
3400aad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400aad2:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3400aad6:	d004      	beq.n	3400aae2 <HAL_XSPI_Init+0x12e>
3400aad8:	f240 116f 	movw	r1, #367	@ 0x16f
3400aadc:	484f      	ldr	r0, [pc, #316]	@ (3400ac1c <HAL_XSPI_Init+0x268>)
3400aade:	f7f6 fb15 	bl	3400110c <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400aae2:	2300      	movs	r3, #0
3400aae4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3400aae6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3400aae8:	2f00      	cmp	r7, #0
3400aaea:	f040 8087 	bne.w	3400abfc <HAL_XSPI_Init+0x248>
      HAL_XSPI_MspInit(hxspi);
3400aaee:	4620      	mov	r0, r4
3400aaf0:	f7ff ff5f 	bl	3400a9b2 <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
3400aaf4:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3400aaf8:	69e3      	ldr	r3, [r4, #28]
3400aafa:	68e5      	ldr	r5, [r4, #12]
3400aafc:	6821      	ldr	r1, [r4, #0]
3400aafe:	431d      	orrs	r5, r3
3400ab00:	6923      	ldr	r3, [r4, #16]
3400ab02:	6888      	ldr	r0, [r1, #8]
3400ab04:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3400ab08:	4b45      	ldr	r3, [pc, #276]	@ (3400ac20 <HAL_XSPI_Init+0x26c>)
  hxspi->Timeout = Timeout;
3400ab0a:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
3400ab0c:	4003      	ands	r3, r0
3400ab0e:	431d      	orrs	r5, r3
3400ab10:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400ab12:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
3400ab14:	3b01      	subs	r3, #1
3400ab16:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3400ab1a:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400ab1c:	68cb      	ldr	r3, [r1, #12]
3400ab1e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3400ab22:	4303      	orrs	r3, r0
3400ab24:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3400ab26:	690b      	ldr	r3, [r1, #16]
3400ab28:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3400ab2a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3400ab2e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400ab32:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3400ab34:	690b      	ldr	r3, [r1, #16]
3400ab36:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3400ab38:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400ab3c:	4303      	orrs	r3, r0
3400ab3e:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400ab40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400ab42:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400ab44:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400ab46:	680b      	ldr	r3, [r1, #0]
3400ab48:	3801      	subs	r0, #1
3400ab4a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400ab4e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
3400ab52:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400ab54:	4620      	mov	r0, r4
3400ab56:	9200      	str	r2, [sp, #0]
3400ab58:	4633      	mov	r3, r6
3400ab5a:	463a      	mov	r2, r7
3400ab5c:	2120      	movs	r1, #32
3400ab5e:	f7ff ff01 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400ab62:	2800      	cmp	r0, #0
3400ab64:	d156      	bne.n	3400ac14 <HAL_XSPI_Init+0x260>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400ab66:	6823      	ldr	r3, [r4, #0]
3400ab68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400ab6a:	68da      	ldr	r2, [r3, #12]
3400ab6c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
3400ab70:	430a      	orrs	r2, r1
3400ab72:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3400ab74:	4a2b      	ldr	r2, [pc, #172]	@ (3400ac24 <HAL_XSPI_Init+0x270>)
3400ab76:	4293      	cmp	r3, r2
3400ab78:	d042      	beq.n	3400ac00 <HAL_XSPI_Init+0x24c>
3400ab7a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab7e:	4293      	cmp	r3, r2
3400ab80:	d03e      	beq.n	3400ac00 <HAL_XSPI_Init+0x24c>
3400ab82:	4a29      	ldr	r2, [pc, #164]	@ (3400ac28 <HAL_XSPI_Init+0x274>)
3400ab84:	4293      	cmp	r3, r2
3400ab86:	d03b      	beq.n	3400ac00 <HAL_XSPI_Init+0x24c>
3400ab88:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab8c:	4293      	cmp	r3, r2
3400ab8e:	d037      	beq.n	3400ac00 <HAL_XSPI_Init+0x24c>
3400ab90:	4a26      	ldr	r2, [pc, #152]	@ (3400ac2c <HAL_XSPI_Init+0x278>)
3400ab92:	4293      	cmp	r3, r2
3400ab94:	d034      	beq.n	3400ac00 <HAL_XSPI_Init+0x24c>
3400ab96:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ab9a:	4293      	cmp	r3, r2
3400ab9c:	d030      	beq.n	3400ac00 <HAL_XSPI_Init+0x24c>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3400ab9e:	6823      	ldr	r3, [r4, #0]
3400aba0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
3400aba2:	6819      	ldr	r1, [r3, #0]
3400aba4:	68a2      	ldr	r2, [r4, #8]
3400aba6:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400abaa:	4302      	orrs	r2, r0
3400abac:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3400abb0:	430a      	orrs	r2, r1
3400abb2:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3400abb4:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
3400abb8:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
3400abbc:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
3400abc0:	4302      	orrs	r2, r0
3400abc2:	430a      	orrs	r2, r1
3400abc4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3400abc8:	681a      	ldr	r2, [r3, #0]
3400abca:	f042 0201 	orr.w	r2, r2, #1
3400abce:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3400abd0:	69a2      	ldr	r2, [r4, #24]
3400abd2:	2a02      	cmp	r2, #2
3400abd4:	d103      	bne.n	3400abde <HAL_XSPI_Init+0x22a>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3400abd6:	689a      	ldr	r2, [r3, #8]
3400abd8:	f042 0202 	orr.w	r2, r2, #2
3400abdc:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3400abde:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400abe0:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3400abe4:	bf02      	ittt	eq
3400abe6:	689a      	ldreq	r2, [r3, #8]
3400abe8:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
3400abec:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400abee:	68e3      	ldr	r3, [r4, #12]
3400abf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3400abf4:	bf0c      	ite	eq
3400abf6:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3400abf8:	2302      	movne	r3, #2
3400abfa:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
3400abfc:	2000      	movs	r0, #0
3400abfe:	e009      	b.n	3400ac14 <HAL_XSPI_Init+0x260>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400ac00:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3400ac02:	2200      	movs	r2, #0
3400ac04:	9300      	str	r3, [sp, #0]
3400ac06:	2120      	movs	r1, #32
3400ac08:	4633      	mov	r3, r6
3400ac0a:	4620      	mov	r0, r4
3400ac0c:	f7ff feaa 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
3400ac10:	2800      	cmp	r0, #0
3400ac12:	d0c4      	beq.n	3400ab9e <HAL_XSPI_Init+0x1ea>
}
3400ac14:	b003      	add	sp, #12
3400ac16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3400ac18:	2001      	movs	r0, #1
3400ac1a:	e7fb      	b.n	3400ac14 <HAL_XSPI_Init+0x260>
3400ac1c:	3400f0e6 	.word	0x3400f0e6
3400ac20:	f8e0c0fc 	.word	0xf8e0c0fc
3400ac24:	58025000 	.word	0x58025000
3400ac28:	5802a000 	.word	0x5802a000
3400ac2c:	5802d000 	.word	0x5802d000

3400ac30 <HAL_XSPI_Command>:
{
3400ac30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400ac32:	460c      	mov	r4, r1
3400ac34:	4605      	mov	r5, r0
3400ac36:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400ac38:	f7f7 fa64 	bl	34002104 <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400ac3c:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400ac3e:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400ac40:	2b03      	cmp	r3, #3
3400ac42:	d904      	bls.n	3400ac4e <HAL_XSPI_Command+0x1e>
3400ac44:	f240 313e 	movw	r1, #830	@ 0x33e
3400ac48:	4884      	ldr	r0, [pc, #528]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ac4a:	f7f6 fa5f 	bl	3400110c <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400ac4e:	68ab      	ldr	r3, [r5, #8]
3400ac50:	b943      	cbnz	r3, 3400ac64 <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400ac52:	6863      	ldr	r3, [r4, #4]
3400ac54:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400ac58:	d004      	beq.n	3400ac64 <HAL_XSPI_Command+0x34>
3400ac5a:	f240 3141 	movw	r1, #833	@ 0x341
3400ac5e:	487f      	ldr	r0, [pc, #508]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ac60:	f7f6 fa54 	bl	3400110c <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3400ac64:	68e3      	ldr	r3, [r4, #12]
3400ac66:	2b04      	cmp	r3, #4
3400ac68:	d904      	bls.n	3400ac74 <HAL_XSPI_Command+0x44>
3400ac6a:	f44f 7151 	mov.w	r1, #836	@ 0x344
3400ac6e:	487b      	ldr	r0, [pc, #492]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ac70:	f7f6 fa4c 	bl	3400110c <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400ac74:	68e3      	ldr	r3, [r4, #12]
3400ac76:	b18b      	cbz	r3, 3400ac9c <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
3400ac78:	6923      	ldr	r3, [r4, #16]
3400ac7a:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400ac7e:	d004      	beq.n	3400ac8a <HAL_XSPI_Command+0x5a>
3400ac80:	f240 3147 	movw	r1, #839	@ 0x347
3400ac84:	4875      	ldr	r0, [pc, #468]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ac86:	f7f6 fa41 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3400ac8a:	6963      	ldr	r3, [r4, #20]
3400ac8c:	f033 0308 	bics.w	r3, r3, #8
3400ac90:	d004      	beq.n	3400ac9c <HAL_XSPI_Command+0x6c>
3400ac92:	f44f 7152 	mov.w	r1, #840	@ 0x348
3400ac96:	4871      	ldr	r0, [pc, #452]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ac98:	f7f6 fa38 	bl	3400110c <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400ac9c:	69e3      	ldr	r3, [r4, #28]
3400ac9e:	b303      	cbz	r3, 3400ace2 <HAL_XSPI_Command+0xb2>
3400aca0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3400aca4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3400aca8:	d10d      	bne.n	3400acc6 <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400acaa:	6a23      	ldr	r3, [r4, #32]
3400acac:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400acb0:	d12c      	bne.n	3400ad0c <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3400acb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400acb4:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400acb8:	d013      	beq.n	3400ace2 <HAL_XSPI_Command+0xb2>
3400acba:	f240 314f 	movw	r1, #847	@ 0x34f
3400acbe:	4867      	ldr	r0, [pc, #412]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400acc0:	f7f6 fa24 	bl	3400110c <assert_failed>
3400acc4:	e00d      	b.n	3400ace2 <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400acc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400acca:	d0ee      	beq.n	3400acaa <HAL_XSPI_Command+0x7a>
3400accc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400acd0:	d0eb      	beq.n	3400acaa <HAL_XSPI_Command+0x7a>
3400acd2:	f240 314b 	movw	r1, #843	@ 0x34b
3400acd6:	4861      	ldr	r0, [pc, #388]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400acd8:	f7f6 fa18 	bl	3400110c <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400acdc:	69e3      	ldr	r3, [r4, #28]
3400acde:	2b00      	cmp	r3, #0
3400ace0:	d1e3      	bne.n	3400acaa <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400ace2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ace4:	b333      	cbz	r3, 3400ad34 <HAL_XSPI_Command+0x104>
3400ace6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3400acea:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3400acee:	d113      	bne.n	3400ad18 <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400acf0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400acf2:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3400acf6:	d13d      	bne.n	3400ad74 <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3400acf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400acfa:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400acfe:	d019      	beq.n	3400ad34 <HAL_XSPI_Command+0x104>
3400ad00:	f240 3156 	movw	r1, #854	@ 0x356
3400ad04:	4855      	ldr	r0, [pc, #340]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ad06:	f7f6 fa01 	bl	3400110c <assert_failed>
3400ad0a:	e013      	b.n	3400ad34 <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400ad0c:	f240 314e 	movw	r1, #846	@ 0x34e
3400ad10:	4852      	ldr	r0, [pc, #328]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ad12:	f7f6 f9fb 	bl	3400110c <assert_failed>
3400ad16:	e7cc      	b.n	3400acb2 <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400ad18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400ad1c:	d0e8      	beq.n	3400acf0 <HAL_XSPI_Command+0xc0>
3400ad1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400ad22:	d0e5      	beq.n	3400acf0 <HAL_XSPI_Command+0xc0>
3400ad24:	f240 3152 	movw	r1, #850	@ 0x352
3400ad28:	484c      	ldr	r0, [pc, #304]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ad2a:	f7f6 f9ef 	bl	3400110c <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400ad2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ad30:	2b00      	cmp	r3, #0
3400ad32:	d1dd      	bne.n	3400acf0 <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400ad34:	68eb      	ldr	r3, [r5, #12]
3400ad36:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400ad38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400ad3c:	d120      	bne.n	3400ad80 <HAL_XSPI_Command+0x150>
3400ad3e:	b389      	cbz	r1, 3400ada4 <HAL_XSPI_Command+0x174>
3400ad40:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400ad44:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
3400ad48:	d124      	bne.n	3400ad94 <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400ad4a:	6823      	ldr	r3, [r4, #0]
3400ad4c:	2b00      	cmp	r3, #0
3400ad4e:	d03d      	beq.n	3400adcc <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3400ad50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400ad52:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
3400ad56:	d004      	beq.n	3400ad62 <HAL_XSPI_Command+0x132>
3400ad58:	f240 3161 	movw	r1, #865	@ 0x361
3400ad5c:	483f      	ldr	r0, [pc, #252]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ad5e:	f7f6 f9d5 	bl	3400110c <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3400ad62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400ad64:	2b1f      	cmp	r3, #31
3400ad66:	d91d      	bls.n	3400ada4 <HAL_XSPI_Command+0x174>
3400ad68:	f240 3162 	movw	r1, #866	@ 0x362
3400ad6c:	483b      	ldr	r0, [pc, #236]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ad6e:	f7f6 f9cd 	bl	3400110c <assert_failed>
3400ad72:	e017      	b.n	3400ada4 <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400ad74:	f240 3155 	movw	r1, #853	@ 0x355
3400ad78:	4838      	ldr	r0, [pc, #224]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ad7a:	f7f6 f9c7 	bl	3400110c <assert_failed>
3400ad7e:	e7bb      	b.n	3400acf8 <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400ad80:	b181      	cbz	r1, 3400ada4 <HAL_XSPI_Command+0x174>
3400ad82:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
3400ad86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400ad8a:	d0de      	beq.n	3400ad4a <HAL_XSPI_Command+0x11a>
3400ad8c:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
3400ad90:	d1d6      	bne.n	3400ad40 <HAL_XSPI_Command+0x110>
3400ad92:	e7da      	b.n	3400ad4a <HAL_XSPI_Command+0x11a>
3400ad94:	f240 3159 	movw	r1, #857	@ 0x359
3400ad98:	4830      	ldr	r0, [pc, #192]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400ad9a:	f7f6 f9b7 	bl	3400110c <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ad9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400ada0:	2b00      	cmp	r3, #0
3400ada2:	d1d2      	bne.n	3400ad4a <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3400ada4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400ada6:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3400adaa:	d004      	beq.n	3400adb6 <HAL_XSPI_Command+0x186>
3400adac:	f240 3165 	movw	r1, #869	@ 0x365
3400adb0:	482a      	ldr	r0, [pc, #168]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400adb2:	f7f6 f9ab 	bl	3400110c <assert_failed>
  state = hxspi->State;
3400adb6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400adb8:	2b02      	cmp	r3, #2
3400adba:	d110      	bne.n	3400adde <HAL_XSPI_Command+0x1ae>
3400adbc:	68eb      	ldr	r3, [r5, #12]
3400adbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400adc2:	d112      	bne.n	3400adea <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400adc4:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400adc6:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400adc8:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400adca:	e028      	b.n	3400ae1e <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3400adcc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400adce:	2b00      	cmp	r3, #0
3400add0:	d1be      	bne.n	3400ad50 <HAL_XSPI_Command+0x120>
3400add2:	f240 315f 	movw	r1, #863	@ 0x35f
3400add6:	4821      	ldr	r0, [pc, #132]	@ (3400ae5c <HAL_XSPI_Command+0x22c>)
3400add8:	f7f6 f998 	bl	3400110c <assert_failed>
3400addc:	e7b8      	b.n	3400ad50 <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400adde:	2b14      	cmp	r3, #20
3400ade0:	d11f      	bne.n	3400ae22 <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3400ade2:	6823      	ldr	r3, [r4, #0]
3400ade4:	3b02      	subs	r3, #2
3400ade6:	2b01      	cmp	r3, #1
3400ade8:	d8ec      	bhi.n	3400adc4 <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400adea:	4633      	mov	r3, r6
3400adec:	2200      	movs	r2, #0
3400adee:	2120      	movs	r1, #32
3400adf0:	4628      	mov	r0, r5
3400adf2:	9700      	str	r7, [sp, #0]
3400adf4:	f7ff fdb6 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400adf8:	bb70      	cbnz	r0, 3400ae58 <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400adfa:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
3400adfc:	4621      	mov	r1, r4
3400adfe:	4628      	mov	r0, r5
3400ae00:	f7ff fcae 	bl	3400a760 <XSPI_ConfigCmd>
      if (status == HAL_OK)
3400ae04:	b958      	cbnz	r0, 3400ae1e <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3400ae06:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400ae08:	b99b      	cbnz	r3, 3400ae32 <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400ae0a:	4602      	mov	r2, r0
3400ae0c:	4633      	mov	r3, r6
3400ae0e:	2120      	movs	r1, #32
3400ae10:	4628      	mov	r0, r5
3400ae12:	9700      	str	r7, [sp, #0]
3400ae14:	f7ff fda6 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400ae18:	2202      	movs	r2, #2
3400ae1a:	682b      	ldr	r3, [r5, #0]
3400ae1c:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400ae1e:	b003      	add	sp, #12
3400ae20:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3400ae22:	2b24      	cmp	r3, #36	@ 0x24
3400ae24:	d1ce      	bne.n	3400adc4 <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3400ae26:	6823      	ldr	r3, [r4, #0]
3400ae28:	f023 0302 	bic.w	r3, r3, #2
3400ae2c:	2b01      	cmp	r3, #1
3400ae2e:	d1c9      	bne.n	3400adc4 <HAL_XSPI_Command+0x194>
3400ae30:	e7db      	b.n	3400adea <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400ae32:	6823      	ldr	r3, [r4, #0]
3400ae34:	b90b      	cbnz	r3, 3400ae3a <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3400ae36:	2304      	movs	r3, #4
3400ae38:	e005      	b.n	3400ae46 <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3400ae3a:	2b01      	cmp	r3, #1
3400ae3c:	d105      	bne.n	3400ae4a <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3400ae3e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400ae40:	2b24      	cmp	r3, #36	@ 0x24
3400ae42:	d0f8      	beq.n	3400ae36 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3400ae44:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400ae46:	65ab      	str	r3, [r5, #88]	@ 0x58
3400ae48:	e7e9      	b.n	3400ae1e <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400ae4a:	2b02      	cmp	r3, #2
3400ae4c:	d1e7      	bne.n	3400ae1e <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3400ae4e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400ae50:	2b14      	cmp	r3, #20
3400ae52:	d0f0      	beq.n	3400ae36 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400ae54:	2324      	movs	r3, #36	@ 0x24
3400ae56:	e7f6      	b.n	3400ae46 <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
3400ae58:	2002      	movs	r0, #2
3400ae5a:	e7e0      	b.n	3400ae1e <HAL_XSPI_Command+0x1ee>
3400ae5c:	3400f0e6 	.word	0x3400f0e6

3400ae60 <HAL_XSPI_Transmit>:
{
3400ae60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400ae64:	4604      	mov	r4, r0
3400ae66:	4688      	mov	r8, r1
3400ae68:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
3400ae6a:	f7f7 f94b 	bl	34002104 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400ae6e:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400ae70:	4605      	mov	r5, r0
  if (pData == NULL)
3400ae72:	f1b8 0f00 	cmp.w	r8, #0
3400ae76:	d103      	bne.n	3400ae80 <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400ae78:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400ae7a:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400ae7c:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400ae7e:	e02e      	b.n	3400aede <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400ae80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400ae82:	2b04      	cmp	r3, #4
3400ae84:	d12e      	bne.n	3400aee4 <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400ae86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
3400ae88:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400ae8c:	3301      	adds	r3, #1
3400ae8e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400ae90:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400ae92:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3400ae94:	683b      	ldr	r3, [r7, #0]
3400ae96:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400ae9a:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3400ae9c:	462b      	mov	r3, r5
3400ae9e:	2201      	movs	r2, #1
3400aea0:	2104      	movs	r1, #4
3400aea2:	4620      	mov	r0, r4
3400aea4:	9600      	str	r6, [sp, #0]
3400aea6:	f7ff fd5d 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400aeaa:	b9c0      	cbnz	r0, 3400aede <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3400aeac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400aeae:	781b      	ldrb	r3, [r3, #0]
3400aeb0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
3400aeb4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400aeb6:	3301      	adds	r3, #1
3400aeb8:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400aeba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400aebc:	3b01      	subs	r3, #1
3400aebe:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400aec0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400aec2:	2b00      	cmp	r3, #0
3400aec4:	d1ea      	bne.n	3400ae9c <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400aec6:	462b      	mov	r3, r5
3400aec8:	2201      	movs	r2, #1
3400aeca:	2102      	movs	r1, #2
3400aecc:	4620      	mov	r0, r4
3400aece:	9600      	str	r6, [sp, #0]
3400aed0:	f7ff fd48 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400aed4:	b918      	cbnz	r0, 3400aede <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400aed6:	2302      	movs	r3, #2
3400aed8:	6822      	ldr	r2, [r4, #0]
3400aeda:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400aedc:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400aede:	b002      	add	sp, #8
3400aee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400aee4:	2310      	movs	r3, #16
3400aee6:	e7c8      	b.n	3400ae7a <HAL_XSPI_Transmit+0x1a>

3400aee8 <HAL_XSPI_Receive>:
{
3400aee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400aeec:	4604      	mov	r4, r0
3400aeee:	4616      	mov	r6, r2
3400aef0:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
3400aef2:	f7f7 f907 	bl	34002104 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400aef6:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400aef8:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400aefa:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400aefc:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
3400af00:	f1b8 0f00 	cmp.w	r8, #0
3400af04:	d103      	bne.n	3400af0e <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400af06:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400af08:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400af0a:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400af0c:	e035      	b.n	3400af7a <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400af0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400af10:	2b04      	cmp	r3, #4
3400af12:	d13d      	bne.n	3400af90 <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400af14:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3400af16:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400af1a:	3301      	adds	r3, #1
3400af1c:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400af1e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400af20:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400af22:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400af24:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400af26:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3400af2a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400af2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400af32:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400af34:	d124      	bne.n	3400af80 <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400af36:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3400af38:	463b      	mov	r3, r7
3400af3a:	2201      	movs	r2, #1
3400af3c:	2106      	movs	r1, #6
3400af3e:	4620      	mov	r0, r4
3400af40:	9600      	str	r6, [sp, #0]
3400af42:	f7ff fd0f 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400af46:	b9c0      	cbnz	r0, 3400af7a <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3400af48:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
3400af4c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400af4e:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3400af50:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400af52:	3301      	adds	r3, #1
3400af54:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400af56:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400af58:	3b01      	subs	r3, #1
3400af5a:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400af5c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400af5e:	2b00      	cmp	r3, #0
3400af60:	d1ea      	bne.n	3400af38 <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400af62:	463b      	mov	r3, r7
3400af64:	2201      	movs	r2, #1
3400af66:	2102      	movs	r1, #2
3400af68:	4620      	mov	r0, r4
3400af6a:	9600      	str	r6, [sp, #0]
3400af6c:	f7ff fcfa 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400af70:	b918      	cbnz	r0, 3400af7a <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400af72:	2302      	movs	r3, #2
3400af74:	6822      	ldr	r2, [r4, #0]
3400af76:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400af78:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400af7a:	b002      	add	sp, #8
3400af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400af80:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
3400af84:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400af88:	d1d5      	bne.n	3400af36 <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400af8a:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
3400af8e:	e7d3      	b.n	3400af38 <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400af90:	2310      	movs	r3, #16
3400af92:	e7b9      	b.n	3400af08 <HAL_XSPI_Receive+0x20>

3400af94 <HAL_XSPI_AutoPolling>:
{
3400af94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3400af98:	4604      	mov	r4, r0
3400af9a:	460d      	mov	r5, r1
3400af9c:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400af9e:	f7f7 f8b1 	bl	34002104 <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
3400afa2:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400afa4:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400afa6:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400afaa:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
3400afae:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
3400afb2:	68ab      	ldr	r3, [r5, #8]
3400afb4:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3400afb8:	d004      	beq.n	3400afc4 <HAL_XSPI_AutoPolling+0x30>
3400afba:	f240 7134 	movw	r1, #1844	@ 0x734
3400afbe:	4832      	ldr	r0, [pc, #200]	@ (3400b088 <HAL_XSPI_AutoPolling+0xf4>)
3400afc0:	f7f6 f8a4 	bl	3400110c <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3400afc4:	68eb      	ldr	r3, [r5, #12]
3400afc6:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3400afca:	d004      	beq.n	3400afd6 <HAL_XSPI_AutoPolling+0x42>
3400afcc:	f240 7135 	movw	r1, #1845	@ 0x735
3400afd0:	482d      	ldr	r0, [pc, #180]	@ (3400b088 <HAL_XSPI_AutoPolling+0xf4>)
3400afd2:	f7f6 f89b 	bl	3400110c <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3400afd6:	692b      	ldr	r3, [r5, #16]
3400afd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400afdc:	d304      	bcc.n	3400afe8 <HAL_XSPI_AutoPolling+0x54>
3400afde:	f240 7136 	movw	r1, #1846	@ 0x736
3400afe2:	4829      	ldr	r0, [pc, #164]	@ (3400b088 <HAL_XSPI_AutoPolling+0xf4>)
3400afe4:	f7f6 f892 	bl	3400110c <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3400afe8:	f1ba 0f03 	cmp.w	sl, #3
3400afec:	d904      	bls.n	3400aff8 <HAL_XSPI_AutoPolling+0x64>
3400afee:	f240 7137 	movw	r1, #1847	@ 0x737
3400aff2:	4825      	ldr	r0, [pc, #148]	@ (3400b088 <HAL_XSPI_AutoPolling+0xf4>)
3400aff4:	f7f6 f88a 	bl	3400110c <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3400aff8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400affa:	2b04      	cmp	r3, #4
3400affc:	d13e      	bne.n	3400b07c <HAL_XSPI_AutoPolling+0xe8>
3400affe:	68eb      	ldr	r3, [r5, #12]
3400b000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3400b004:	d13a      	bne.n	3400b07c <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b006:	4633      	mov	r3, r6
3400b008:	2200      	movs	r2, #0
3400b00a:	2120      	movs	r1, #32
3400b00c:	4620      	mov	r0, r4
3400b00e:	9700      	str	r7, [sp, #0]
3400b010:	f7ff fca8 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b014:	2800      	cmp	r0, #0
3400b016:	d135      	bne.n	3400b084 <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3400b018:	682b      	ldr	r3, [r5, #0]
3400b01a:	6821      	ldr	r1, [r4, #0]
3400b01c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3400b020:	686b      	ldr	r3, [r5, #4]
3400b022:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3400b026:	692b      	ldr	r3, [r5, #16]
3400b028:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b02c:	680a      	ldr	r2, [r1, #0]
3400b02e:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
3400b032:	431d      	orrs	r5, r3
3400b034:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3400b038:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b03a:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b03c:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b040:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b044:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b046:	d111      	bne.n	3400b06c <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b048:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3400b04c:	4633      	mov	r3, r6
3400b04e:	2201      	movs	r2, #1
3400b050:	2108      	movs	r1, #8
3400b052:	4620      	mov	r0, r4
3400b054:	9700      	str	r7, [sp, #0]
3400b056:	f7ff fc85 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400b05a:	b920      	cbnz	r0, 3400b066 <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3400b05c:	2208      	movs	r2, #8
3400b05e:	6823      	ldr	r3, [r4, #0]
3400b060:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
3400b062:	2302      	movs	r3, #2
3400b064:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b066:	b002      	add	sp, #8
3400b068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b06c:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
3400b070:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b074:	d1e8      	bne.n	3400b048 <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b076:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
3400b07a:	e7e7      	b.n	3400b04c <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b07c:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b07e:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b080:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b082:	e7f0      	b.n	3400b066 <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
3400b084:	2002      	movs	r0, #2
3400b086:	e7ee      	b.n	3400b066 <HAL_XSPI_AutoPolling+0xd2>
3400b088:	3400f0e6 	.word	0x3400f0e6

3400b08c <HAL_XSPI_MemoryMapped>:
{
3400b08c:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400b08e:	460c      	mov	r4, r1
3400b090:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
3400b092:	f7f7 f837 	bl	34002104 <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b096:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b098:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b09a:	f033 0308 	bics.w	r3, r3, #8
3400b09e:	d004      	beq.n	3400b0aa <HAL_XSPI_MemoryMapped+0x1e>
3400b0a0:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
3400b0a4:	482f      	ldr	r0, [pc, #188]	@ (3400b164 <HAL_XSPI_MemoryMapped+0xd8>)
3400b0a6:	f7f6 f831 	bl	3400110c <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3400b0aa:	68a3      	ldr	r3, [r4, #8]
3400b0ac:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
3400b0b0:	d004      	beq.n	3400b0bc <HAL_XSPI_MemoryMapped+0x30>
3400b0b2:	f240 71c9 	movw	r1, #1993	@ 0x7c9
3400b0b6:	482b      	ldr	r0, [pc, #172]	@ (3400b164 <HAL_XSPI_MemoryMapped+0xd8>)
3400b0b8:	f7f6 f828 	bl	3400110c <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b0bc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b0be:	2b04      	cmp	r3, #4
3400b0c0:	d14b      	bne.n	3400b15a <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400b0c2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
3400b0c4:	2200      	movs	r2, #0
3400b0c6:	9300      	str	r3, [sp, #0]
3400b0c8:	2120      	movs	r1, #32
3400b0ca:	4633      	mov	r3, r6
3400b0cc:	4628      	mov	r0, r5
3400b0ce:	f7ff fc49 	bl	3400a964 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b0d2:	4606      	mov	r6, r0
3400b0d4:	bb58      	cbnz	r0, 3400b12e <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3400b0d6:	2388      	movs	r3, #136	@ 0x88
3400b0d8:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3400b0da:	68a3      	ldr	r3, [r4, #8]
3400b0dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400b0e0:	d128      	bne.n	3400b134 <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3400b0e2:	682a      	ldr	r2, [r5, #0]
3400b0e4:	6813      	ldr	r3, [r2, #0]
3400b0e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3400b0ea:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3400b0ec:	6823      	ldr	r3, [r4, #0]
3400b0ee:	2b08      	cmp	r3, #8
3400b0f0:	d112      	bne.n	3400b118 <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3400b0f2:	6863      	ldr	r3, [r4, #4]
3400b0f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b0f8:	d304      	bcc.n	3400b104 <HAL_XSPI_MemoryMapped+0x78>
3400b0fa:	f240 71e5 	movw	r1, #2021	@ 0x7e5
3400b0fe:	4819      	ldr	r0, [pc, #100]	@ (3400b164 <HAL_XSPI_MemoryMapped+0xd8>)
3400b100:	f7f6 f804 	bl	3400110c <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3400b104:	682b      	ldr	r3, [r5, #0]
3400b106:	6862      	ldr	r2, [r4, #4]
3400b108:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3400b10c:	2210      	movs	r2, #16
3400b10e:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3400b110:	681a      	ldr	r2, [r3, #0]
3400b112:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3400b116:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3400b118:	682a      	ldr	r2, [r5, #0]
3400b11a:	6821      	ldr	r1, [r4, #0]
3400b11c:	6813      	ldr	r3, [r2, #0]
3400b11e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b122:	f023 0308 	bic.w	r3, r3, #8
3400b126:	430b      	orrs	r3, r1
3400b128:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
3400b12c:	6013      	str	r3, [r2, #0]
}
3400b12e:	4630      	mov	r0, r6
3400b130:	b002      	add	sp, #8
3400b132:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
3400b134:	68e3      	ldr	r3, [r4, #12]
3400b136:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3400b13a:	d004      	beq.n	3400b146 <HAL_XSPI_MemoryMapped+0xba>
3400b13c:	f240 71dd 	movw	r1, #2013	@ 0x7dd
3400b140:	4808      	ldr	r0, [pc, #32]	@ (3400b164 <HAL_XSPI_MemoryMapped+0xd8>)
3400b142:	f7f5 ffe3 	bl	3400110c <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3400b146:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
3400b14a:	6829      	ldr	r1, [r5, #0]
3400b14c:	4303      	orrs	r3, r0
3400b14e:	680a      	ldr	r2, [r1, #0]
3400b150:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
3400b154:	4313      	orrs	r3, r2
3400b156:	600b      	str	r3, [r1, #0]
3400b158:	e7c8      	b.n	3400b0ec <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b15a:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b15c:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b15e:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b160:	e7e5      	b.n	3400b12e <HAL_XSPI_MemoryMapped+0xa2>
3400b162:	bf00      	nop
3400b164:	3400f0e6 	.word	0x3400f0e6

3400b168 <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b168:	29ff      	cmp	r1, #255	@ 0xff
{
3400b16a:	b538      	push	{r3, r4, r5, lr}
3400b16c:	4604      	mov	r4, r0
3400b16e:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b170:	d904      	bls.n	3400b17c <HAL_XSPI_SetClockPrescaler+0x14>
3400b172:	f640 2193 	movw	r1, #2707	@ 0xa93
3400b176:	4809      	ldr	r0, [pc, #36]	@ (3400b19c <HAL_XSPI_SetClockPrescaler+0x34>)
3400b178:	f7f5 ffc8 	bl	3400110c <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3400b17c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400b17e:	f010 0008 	ands.w	r0, r0, #8
3400b182:	d107      	bne.n	3400b194 <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b184:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
3400b186:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b188:	68d3      	ldr	r3, [r2, #12]
3400b18a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400b18e:	432b      	orrs	r3, r5
3400b190:	60d3      	str	r3, [r2, #12]
}
3400b192:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b194:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b196:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b198:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b19a:	e7fa      	b.n	3400b192 <HAL_XSPI_SetClockPrescaler+0x2a>
3400b19c:	3400f0e6 	.word	0x3400f0e6

3400b1a0 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
3400b1a0:	2a02      	cmp	r2, #2
3400b1a2:	d14a      	bne.n	3400b23a <USB_SetTurnaroundTime+0x9a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
3400b1a4:	4b27      	ldr	r3, [pc, #156]	@ (3400b244 <USB_SetTurnaroundTime+0xa4>)
3400b1a6:	4a28      	ldr	r2, [pc, #160]	@ (3400b248 <USB_SetTurnaroundTime+0xa8>)
3400b1a8:	440b      	add	r3, r1
3400b1aa:	4293      	cmp	r3, r2
3400b1ac:	d939      	bls.n	3400b222 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
3400b1ae:	4b27      	ldr	r3, [pc, #156]	@ (3400b24c <USB_SetTurnaroundTime+0xac>)
3400b1b0:	4a27      	ldr	r2, [pc, #156]	@ (3400b250 <USB_SetTurnaroundTime+0xb0>)
3400b1b2:	440b      	add	r3, r1
3400b1b4:	4293      	cmp	r3, r2
3400b1b6:	d936      	bls.n	3400b226 <USB_SetTurnaroundTime+0x86>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
3400b1b8:	4a26      	ldr	r2, [pc, #152]	@ (3400b254 <USB_SetTurnaroundTime+0xb4>)
3400b1ba:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
3400b1be:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
3400b1c2:	4293      	cmp	r3, r2
3400b1c4:	d931      	bls.n	3400b22a <USB_SetTurnaroundTime+0x8a>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
3400b1c6:	4a24      	ldr	r2, [pc, #144]	@ (3400b258 <USB_SetTurnaroundTime+0xb8>)
3400b1c8:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
3400b1cc:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
3400b1d0:	4293      	cmp	r3, r2
3400b1d2:	d32c      	bcc.n	3400b22e <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
3400b1d4:	4b21      	ldr	r3, [pc, #132]	@ (3400b25c <USB_SetTurnaroundTime+0xbc>)
3400b1d6:	4a22      	ldr	r2, [pc, #136]	@ (3400b260 <USB_SetTurnaroundTime+0xc0>)
3400b1d8:	440b      	add	r3, r1
3400b1da:	4293      	cmp	r3, r2
3400b1dc:	d929      	bls.n	3400b232 <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
3400b1de:	4b21      	ldr	r3, [pc, #132]	@ (3400b264 <USB_SetTurnaroundTime+0xc4>)
3400b1e0:	4a21      	ldr	r2, [pc, #132]	@ (3400b268 <USB_SetTurnaroundTime+0xc8>)
3400b1e2:	440b      	add	r3, r1
3400b1e4:	4293      	cmp	r3, r2
3400b1e6:	d326      	bcc.n	3400b236 <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
3400b1e8:	4b20      	ldr	r3, [pc, #128]	@ (3400b26c <USB_SetTurnaroundTime+0xcc>)
3400b1ea:	4a21      	ldr	r2, [pc, #132]	@ (3400b270 <USB_SetTurnaroundTime+0xd0>)
3400b1ec:	440b      	add	r3, r1
3400b1ee:	4293      	cmp	r3, r2
3400b1f0:	d323      	bcc.n	3400b23a <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
3400b1f2:	4a20      	ldr	r2, [pc, #128]	@ (3400b274 <USB_SetTurnaroundTime+0xd4>)
3400b1f4:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
3400b1f8:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
3400b1fc:	4293      	cmp	r3, r2
3400b1fe:	d31e      	bcc.n	3400b23e <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
3400b200:	4b1d      	ldr	r3, [pc, #116]	@ (3400b278 <USB_SetTurnaroundTime+0xd8>)
3400b202:	4a1e      	ldr	r2, [pc, #120]	@ (3400b27c <USB_SetTurnaroundTime+0xdc>)
3400b204:	440b      	add	r3, r1
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
3400b206:	4293      	cmp	r3, r2
3400b208:	bf2c      	ite	cs
3400b20a:	2306      	movcs	r3, #6
3400b20c:	2307      	movcc	r3, #7
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
3400b20e:	68c2      	ldr	r2, [r0, #12]
3400b210:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
3400b214:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
3400b216:	68c2      	ldr	r2, [r0, #12]
3400b218:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
3400b21c:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
3400b21e:	2000      	movs	r0, #0
3400b220:	4770      	bx	lr
      UsbTrd = 0xFU;
3400b222:	230f      	movs	r3, #15
3400b224:	e7f3      	b.n	3400b20e <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
3400b226:	230e      	movs	r3, #14
3400b228:	e7f1      	b.n	3400b20e <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
3400b22a:	230d      	movs	r3, #13
3400b22c:	e7ef      	b.n	3400b20e <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
3400b22e:	230c      	movs	r3, #12
3400b230:	e7ed      	b.n	3400b20e <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
3400b232:	230b      	movs	r3, #11
3400b234:	e7eb      	b.n	3400b20e <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
3400b236:	230a      	movs	r3, #10
3400b238:	e7e9      	b.n	3400b20e <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
3400b23a:	2309      	movs	r3, #9
3400b23c:	e7e7      	b.n	3400b20e <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
3400b23e:	2308      	movs	r3, #8
3400b240:	e7e5      	b.n	3400b20e <USB_SetTurnaroundTime+0x6e>
3400b242:	bf00      	nop
3400b244:	ff275340 	.word	0xff275340
3400b248:	000c34ff 	.word	0x000c34ff
3400b24c:	ff1b1e40 	.word	0xff1b1e40
3400b250:	000f423f 	.word	0x000f423f
3400b254:	00124f7f 	.word	0x00124f7f
3400b258:	0013d620 	.word	0x0013d620
3400b25c:	fee5b660 	.word	0xfee5b660
3400b260:	0016e35f 	.word	0x0016e35f
3400b264:	feced300 	.word	0xfeced300
3400b268:	001b7740 	.word	0x001b7740
3400b26c:	feb35bc0 	.word	0xfeb35bc0
3400b270:	002191c0 	.word	0x002191c0
3400b274:	00387520 	.word	0x00387520
3400b278:	fe5954e0 	.word	0xfe5954e0
3400b27c:	00419ce0 	.word	0x00419ce0

3400b280 <USB_FlushTxFifo>:
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  __IO uint32_t count = 0U;
3400b280:	2300      	movs	r3, #0
{
3400b282:	4602      	mov	r2, r0
3400b284:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b286:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b288:	9b01      	ldr	r3, [sp, #4]
3400b28a:	3301      	adds	r3, #1
3400b28c:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b28e:	9b01      	ldr	r3, [sp, #4]
3400b290:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b294:	d815      	bhi.n	3400b2c2 <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b296:	6913      	ldr	r3, [r2, #16]
3400b298:	2b00      	cmp	r3, #0
3400b29a:	daf5      	bge.n	3400b288 <USB_FlushTxFifo+0x8>

  /* Flush TX Fifo */
  count = 0U;
3400b29c:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b29e:	0189      	lsls	r1, r1, #6
3400b2a0:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
3400b2a4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b2a6:	6111      	str	r1, [r2, #16]

  do
  {
    count++;
3400b2a8:	9b01      	ldr	r3, [sp, #4]
3400b2aa:	3301      	adds	r3, #1
3400b2ac:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b2ae:	9b01      	ldr	r3, [sp, #4]
3400b2b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b2b4:	d805      	bhi.n	3400b2c2 <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
3400b2b6:	6910      	ldr	r0, [r2, #16]
3400b2b8:	f010 0020 	ands.w	r0, r0, #32
3400b2bc:	d1f4      	bne.n	3400b2a8 <USB_FlushTxFifo+0x28>

  return HAL_OK;
}
3400b2be:	b002      	add	sp, #8
3400b2c0:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b2c2:	2003      	movs	r0, #3
3400b2c4:	e7fb      	b.n	3400b2be <USB_FlushTxFifo+0x3e>

3400b2c6 <USB_FlushRxFifo>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
3400b2c6:	2300      	movs	r3, #0
{
3400b2c8:	4602      	mov	r2, r0
3400b2ca:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b2cc:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b2ce:	9b01      	ldr	r3, [sp, #4]
3400b2d0:	3301      	adds	r3, #1
3400b2d2:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b2d4:	9b01      	ldr	r3, [sp, #4]
3400b2d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b2da:	d813      	bhi.n	3400b304 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b2dc:	6913      	ldr	r3, [r2, #16]
3400b2de:	2b00      	cmp	r3, #0
3400b2e0:	daf5      	bge.n	3400b2ce <USB_FlushRxFifo+0x8>

  /* Flush RX Fifo */
  count = 0U;
3400b2e2:	2300      	movs	r3, #0
3400b2e4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
3400b2e6:	2310      	movs	r3, #16
3400b2e8:	6113      	str	r3, [r2, #16]

  do
  {
    count++;
3400b2ea:	9b01      	ldr	r3, [sp, #4]
3400b2ec:	3301      	adds	r3, #1
3400b2ee:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b2f0:	9b01      	ldr	r3, [sp, #4]
3400b2f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b2f6:	d805      	bhi.n	3400b304 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
3400b2f8:	6910      	ldr	r0, [r2, #16]
3400b2fa:	f010 0010 	ands.w	r0, r0, #16
3400b2fe:	d1f4      	bne.n	3400b2ea <USB_FlushRxFifo+0x24>

  return HAL_OK;
}
3400b300:	b002      	add	sp, #8
3400b302:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b304:	2003      	movs	r0, #3
3400b306:	e7fb      	b.n	3400b300 <USB_FlushRxFifo+0x3a>

3400b308 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
3400b308:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
3400b30c:	f013 0006 	ands.w	r0, r3, #6
3400b310:	d004      	beq.n	3400b31c <USB_GetDevSpeed+0x14>
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
3400b312:	f013 0f02 	tst.w	r3, #2
3400b316:	bf14      	ite	ne
3400b318:	2002      	movne	r0, #2
3400b31a:	200f      	moveq	r0, #15
  }

  return speed;
}
3400b31c:	4770      	bx	lr

3400b31e <USB_ActivateEndpoint>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b31e:	2201      	movs	r2, #1
{
3400b320:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
3400b322:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b324:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
3400b328:	f004 050f 	and.w	r5, r4, #15
3400b32c:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
3400b32e:	784d      	ldrb	r5, [r1, #1]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b330:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
3400b334:	2d01      	cmp	r5, #1
3400b336:	d119      	bne.n	3400b36c <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b338:	69dd      	ldr	r5, [r3, #28]
3400b33a:	432a      	orrs	r2, r5
3400b33c:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b33e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b342:	041a      	lsls	r2, r3, #16
3400b344:	d410      	bmi.n	3400b368 <USB_ActivateEndpoint+0x4a>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b346:	688a      	ldr	r2, [r1, #8]
3400b348:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
3400b34c:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
3400b350:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b352:	432b      	orrs	r3, r5
3400b354:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b358:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
3400b35c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b364:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
3400b368:	2000      	movs	r0, #0
3400b36a:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
3400b36c:	69dc      	ldr	r4, [r3, #28]
3400b36e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
3400b372:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
3400b374:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b378:	041b      	lsls	r3, r3, #16
3400b37a:	d4f5      	bmi.n	3400b368 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b37c:	688b      	ldr	r3, [r1, #8]
3400b37e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b382:	f3c3 030a 	ubfx	r3, r3, #0, #11
3400b386:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
3400b388:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b38a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b38e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b396:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b39a:	e7e5      	b.n	3400b368 <USB_ActivateEndpoint+0x4a>

3400b39c <USB_EPStopXfer>:
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  __IO uint32_t count = 0U;
3400b39c:	2300      	movs	r3, #0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* IN endpoint */
  if (ep->is_in == 1U)
3400b39e:	784a      	ldrb	r2, [r1, #1]
{
3400b3a0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b3a2:	9301      	str	r3, [sp, #4]
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b3a4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400b3a6:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b3a8:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
3400b3ac:	d11e      	bne.n	3400b3ec <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b3ae:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
3400b3b2:	58c2      	ldr	r2, [r0, r3]
3400b3b4:	18c1      	adds	r1, r0, r3
3400b3b6:	2a00      	cmp	r2, #0
3400b3b8:	db02      	blt.n	3400b3c0 <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
3400b3ba:	2000      	movs	r0, #0
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
    }
  }

  return ret;
}
3400b3bc:	b002      	add	sp, #8
3400b3be:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
3400b3c0:	58c2      	ldr	r2, [r0, r3]
3400b3c2:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b3c6:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
3400b3c8:	58c2      	ldr	r2, [r0, r3]
3400b3ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b3ce:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b3d0:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b3d4:	9b01      	ldr	r3, [sp, #4]
3400b3d6:	3301      	adds	r3, #1
3400b3d8:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b3da:	9b01      	ldr	r3, [sp, #4]
3400b3dc:	4293      	cmp	r3, r2
3400b3de:	d901      	bls.n	3400b3e4 <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
3400b3e0:	2001      	movs	r0, #1
3400b3e2:	e7eb      	b.n	3400b3bc <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
3400b3e4:	680b      	ldr	r3, [r1, #0]
3400b3e6:	2b00      	cmp	r3, #0
3400b3e8:	dbf4      	blt.n	3400b3d4 <USB_EPStopXfer+0x38>
3400b3ea:	e7e6      	b.n	3400b3ba <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400b3ec:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
3400b3f0:	58c2      	ldr	r2, [r0, r3]
3400b3f2:	18c1      	adds	r1, r0, r3
3400b3f4:	2a00      	cmp	r2, #0
3400b3f6:	dae0      	bge.n	3400b3ba <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
3400b3f8:	58c2      	ldr	r2, [r0, r3]
3400b3fa:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b3fe:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
3400b400:	58c2      	ldr	r2, [r0, r3]
3400b402:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b406:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b408:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b40c:	9b01      	ldr	r3, [sp, #4]
3400b40e:	3301      	adds	r3, #1
3400b410:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b412:	9b01      	ldr	r3, [sp, #4]
3400b414:	4293      	cmp	r3, r2
3400b416:	d8e3      	bhi.n	3400b3e0 <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
3400b418:	680b      	ldr	r3, [r1, #0]
3400b41a:	2b00      	cmp	r3, #0
3400b41c:	dbf6      	blt.n	3400b40c <USB_EPStopXfer+0x70>
3400b41e:	e7cc      	b.n	3400b3ba <USB_EPStopXfer+0x1e>

3400b420 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
3400b420:	b510      	push	{r4, lr}
3400b422:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t *pSrc = src;
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
3400b426:	b93c      	cbnz	r4, 3400b438 <USB_WritePacket+0x18>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
3400b428:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b42a:	3201      	adds	r2, #1
3400b42c:	089b      	lsrs	r3, r3, #2
3400b42e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
3400b432:	3301      	adds	r3, #1
    for (i = 0U; i < count32b; i++)
3400b434:	3b01      	subs	r3, #1
3400b436:	d101      	bne.n	3400b43c <USB_WritePacket+0x1c>
      pSrc++;
    }
  }

  return HAL_OK;
}
3400b438:	2000      	movs	r0, #0
3400b43a:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b43c:	f851 2b04 	ldr.w	r2, [r1], #4
3400b440:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
3400b442:	e7f7      	b.n	3400b434 <USB_WritePacket+0x14>

3400b444 <USB_EPStartXfer>:
{
3400b444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
3400b448:	784b      	ldrb	r3, [r1, #1]
{
3400b44a:	4616      	mov	r6, r2
  uint32_t epnum = (uint32_t)ep->num;
3400b44c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
3400b44e:	2b01      	cmp	r3, #1
    if (ep->xfer_len == 0U)
3400b450:	690c      	ldr	r4, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b452:	790f      	ldrb	r7, [r1, #4]
3400b454:	f8df e1e8 	ldr.w	lr, [pc, #488]	@ 3400b640 <USB_EPStartXfer+0x1fc>
3400b458:	f8df 81e8 	ldr.w	r8, [pc, #488]	@ 3400b644 <USB_EPStartXfer+0x200>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b45c:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
3400b460:	f040 8097 	bne.w	3400b592 <USB_EPStartXfer+0x14e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b464:	f505 6c10 	add.w	ip, r5, #2304	@ 0x900
3400b468:	f8dc 3010 	ldr.w	r3, [ip, #16]
    if (ep->xfer_len == 0U)
3400b46c:	bb74      	cbnz	r4, 3400b4cc <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b46e:	ea03 030e 	and.w	r3, r3, lr
3400b472:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b476:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b47a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
3400b47e:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b482:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b486:	ea03 0308 	and.w	r3, r3, r8
    if (dma == 1U)
3400b48a:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b48c:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400b490:	d157      	bne.n	3400b542 <USB_EPStartXfer+0xfe>
      if ((uint32_t)ep->dma_addr != 0U)
3400b492:	69cb      	ldr	r3, [r1, #28]
3400b494:	b10b      	cbz	r3, 3400b49a <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
3400b496:	f8cc 3014 	str.w	r3, [ip, #20]
      if (ep->type == EP_TYPE_ISOC)
3400b49a:	2f01      	cmp	r7, #1
3400b49c:	d10c      	bne.n	3400b4b8 <USB_EPStartXfer+0x74>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b49e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400b4a2:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b4a6:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b4aa:	bf0c      	ite	eq
3400b4ac:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b4b0:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400b4b4:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b4b8:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b4bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b4c0:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
}
3400b4c4:	2000      	movs	r0, #0
3400b4c6:	b002      	add	sp, #8
3400b4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b4cc:	ea03 0308 	and.w	r3, r3, r8
3400b4d0:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b4d4:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b4d8:	ea03 030e 	and.w	r3, r3, lr
3400b4dc:	f8cc 3010 	str.w	r3, [ip, #16]
        if (ep->xfer_len > ep->maxpacket)
3400b4e0:	688b      	ldr	r3, [r1, #8]
      if (epnum == 0U)
3400b4e2:	b97a      	cbnz	r2, 3400b504 <USB_EPStartXfer+0xc0>
        if (ep->xfer_len > ep->maxpacket)
3400b4e4:	42a3      	cmp	r3, r4
          ep->xfer_len = ep->maxpacket;
3400b4e6:	bf38      	it	cc
3400b4e8:	610b      	strcc	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b4ea:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b4ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b4f2:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b4f6:	690b      	ldr	r3, [r1, #16]
3400b4f8:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b4fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b500:	4323      	orrs	r3, r4
3400b502:	e7c2      	b.n	3400b48a <USB_EPStartXfer+0x46>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400b504:	441c      	add	r4, r3
3400b506:	3c01      	subs	r4, #1
3400b508:	fbb4 f4f3 	udiv	r4, r4, r3
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b50c:	4b4b      	ldr	r3, [pc, #300]	@ (3400b63c <USB_EPStartXfer+0x1f8>)
3400b50e:	f8dc e010 	ldr.w	lr, [ip, #16]
3400b512:	fa1f f884 	uxth.w	r8, r4
3400b516:	ea03 44c4 	and.w	r4, r3, r4, lsl #19
3400b51a:	ea44 040e 	orr.w	r4, r4, lr
        if (ep->type == EP_TYPE_ISOC)
3400b51e:	2f01      	cmp	r7, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b520:	f8cc 4010 	str.w	r4, [ip, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b524:	d1e7      	bne.n	3400b4f6 <USB_EPStartXfer+0xb2>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
3400b526:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b52a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
3400b52e:	f8cc 3010 	str.w	r3, [ip, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b532:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b536:	ea4f 7348 	mov.w	r3, r8, lsl #29
3400b53a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
3400b53e:	4323      	orrs	r3, r4
3400b540:	e7d7      	b.n	3400b4f2 <USB_EPStartXfer+0xae>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b542:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
3400b546:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b548:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b54c:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
3400b550:	690b      	ldr	r3, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
3400b552:	d00b      	beq.n	3400b56c <USB_EPStartXfer+0x128>
        if (ep->xfer_len > 0U)
3400b554:	2b00      	cmp	r3, #0
3400b556:	d0b5      	beq.n	3400b4c4 <USB_EPStartXfer+0x80>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
3400b558:	2301      	movs	r3, #1
3400b55a:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
3400b55e:	f002 020f 	and.w	r2, r2, #15
3400b562:	4093      	lsls	r3, r2
3400b564:	430b      	orrs	r3, r1
3400b566:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
3400b56a:	e7ab      	b.n	3400b4c4 <USB_EPStartXfer+0x80>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b56c:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b570:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b572:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b576:	f8d5 4900 	ldr.w	r4, [r5, #2304]	@ 0x900
3400b57a:	bf0c      	ite	eq
3400b57c:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b580:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
3400b584:	f8c5 4900 	str.w	r4, [r5, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b588:	9600      	str	r6, [sp, #0]
3400b58a:	68c9      	ldr	r1, [r1, #12]
3400b58c:	f7ff ff48 	bl	3400b420 <USB_WritePacket>
3400b590:	e798      	b.n	3400b4c4 <USB_EPStartXfer+0x80>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
3400b592:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
3400b596:	f505 6c30 	add.w	ip, r5, #2816	@ 0xb00
3400b59a:	ea03 0308 	and.w	r3, r3, r8
3400b59e:	f8cc 3010 	str.w	r3, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
3400b5a2:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b5a6:	ea03 030e 	and.w	r3, r3, lr
3400b5aa:	f8cc 3010 	str.w	r3, [ip, #16]
        ep->xfer_len = ep->maxpacket;
3400b5ae:	688b      	ldr	r3, [r1, #8]
    if (epnum == 0U)
3400b5b0:	bb5a      	cbnz	r2, 3400b60a <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
3400b5b2:	b104      	cbz	r4, 3400b5b6 <USB_EPStartXfer+0x172>
        ep->xfer_len = ep->maxpacket;
3400b5b4:	610b      	str	r3, [r1, #16]
      ep->xfer_size = ep->maxpacket;
3400b5b6:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
3400b5b8:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400b5bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b5c0:	4313      	orrs	r3, r2
3400b5c2:	f8cc 3010 	str.w	r3, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400b5c6:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b5ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    if (dma == 1U)
3400b5ce:	2e01      	cmp	r6, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400b5d0:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400b5d4:	d103      	bne.n	3400b5de <USB_EPStartXfer+0x19a>
      if ((uint32_t)ep->xfer_buff != 0U)
3400b5d6:	68cb      	ldr	r3, [r1, #12]
3400b5d8:	b10b      	cbz	r3, 3400b5de <USB_EPStartXfer+0x19a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
3400b5da:	f8cc 3014 	str.w	r3, [ip, #20]
    if (ep->type == EP_TYPE_ISOC)
3400b5de:	2f01      	cmp	r7, #1
3400b5e0:	d10c      	bne.n	3400b5fc <USB_EPStartXfer+0x1b8>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b5e2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400b5e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
3400b5ea:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400b5ee:	bf0c      	ite	eq
3400b5f0:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
3400b5f4:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400b5f8:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
3400b5fc:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400b600:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b604:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
3400b608:	e75c      	b.n	3400b4c4 <USB_EPStartXfer+0x80>
      if (ep->xfer_len == 0U)
3400b60a:	2c00      	cmp	r4, #0
3400b60c:	d0d4      	beq.n	3400b5b8 <USB_EPStartXfer+0x174>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400b60e:	441c      	add	r4, r3
3400b610:	3c01      	subs	r4, #1
3400b612:	fbb4 f4f3 	udiv	r4, r4, r3
3400b616:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
3400b618:	4363      	muls	r3, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400b61a:	4a08      	ldr	r2, [pc, #32]	@ (3400b63c <USB_EPStartXfer+0x1f8>)
3400b61c:	f8dc e010 	ldr.w	lr, [ip, #16]
3400b620:	ea02 42c4 	and.w	r2, r2, r4, lsl #19
3400b624:	ea42 020e 	orr.w	r2, r2, lr
        ep->xfer_size = ep->maxpacket * pktcnt;
3400b628:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400b62a:	f8cc 2010 	str.w	r2, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400b62e:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400b632:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b636:	4313      	orrs	r3, r2
3400b638:	e7c9      	b.n	3400b5ce <USB_EPStartXfer+0x18a>
3400b63a:	bf00      	nop
3400b63c:	1ff80000 	.word	0x1ff80000
3400b640:	e007ffff 	.word	0xe007ffff
3400b644:	fff80000 	.word	0xfff80000

3400b648 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
3400b648:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
  uint16_t remaining_bytes = len % 4U;

  for (i = 0U; i < count32b; i++)
3400b64a:	2500      	movs	r5, #0
  uint32_t count32b = (uint32_t)len >> 2U;
3400b64c:	0894      	lsrs	r4, r2, #2
  uint16_t remaining_bytes = len % 4U;
3400b64e:	42ac      	cmp	r4, r5
{
3400b650:	4603      	mov	r3, r0
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400b652:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
3400b656:	f104 0001 	add.w	r0, r4, #1
3400b65a:	bf08      	it	eq
3400b65c:	2001      	moveq	r0, #1
  uint16_t remaining_bytes = len % 4U;
3400b65e:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
3400b662:	3801      	subs	r0, #1
3400b664:	d110      	bne.n	3400b688 <USB_ReadPacket+0x40>
3400b666:	eb01 0084 	add.w	r0, r1, r4, lsl #2
    pDest++;
    pDest++;
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
3400b66a:	b162      	cbz	r2, 3400b686 <USB_ReadPacket+0x3e>
  {
    i = 0U;
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
3400b66c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400b670:	681c      	ldr	r4, [r3, #0]
    i = 0U;
3400b672:	2300      	movs	r3, #0

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
3400b674:	00d9      	lsls	r1, r3, #3
3400b676:	fa24 f101 	lsr.w	r1, r4, r1
3400b67a:	54c1      	strb	r1, [r0, r3]
      i++;
3400b67c:	3301      	adds	r3, #1
      pDest++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
3400b67e:	b299      	uxth	r1, r3
3400b680:	428a      	cmp	r2, r1
3400b682:	d1f7      	bne.n	3400b674 <USB_ReadPacket+0x2c>
3400b684:	4410      	add	r0, r2
  }

  return ((void *)pDest);
}
3400b686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400b688:	6837      	ldr	r7, [r6, #0]
3400b68a:	f841 7025 	str.w	r7, [r1, r5, lsl #2]
  for (i = 0U; i < count32b; i++)
3400b68e:	3501      	adds	r5, #1
3400b690:	e7e7      	b.n	3400b662 <USB_ReadPacket+0x1a>

3400b692 <USB_EPSetStall>:
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
3400b692:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
3400b694:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400b696:	2a01      	cmp	r2, #1
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b698:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
3400b69c:	d112      	bne.n	3400b6c4 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b69e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
3400b6a2:	2a00      	cmp	r2, #0
3400b6a4:	db06      	blt.n	3400b6b4 <USB_EPSetStall+0x22>
3400b6a6:	b12b      	cbz	r3, 3400b6b4 <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
3400b6a8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b6ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400b6b0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
3400b6b4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b6b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400b6bc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
  }

  return HAL_OK;
}
3400b6c0:	2000      	movs	r0, #0
3400b6c2:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b6c4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b6c8:	2a00      	cmp	r2, #0
3400b6ca:	db06      	blt.n	3400b6da <USB_EPSetStall+0x48>
3400b6cc:	b12b      	cbz	r3, 3400b6da <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
3400b6ce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b6d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400b6d6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
3400b6da:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b6de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400b6e2:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b6e6:	e7eb      	b.n	3400b6c0 <USB_EPSetStall+0x2e>

3400b6e8 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
3400b6e8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
3400b6ea:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
3400b6ec:	4010      	ands	r0, r2
3400b6ee:	4770      	bx	lr

3400b6f0 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400b6f0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400b6f4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400b6f8:	69c0      	ldr	r0, [r0, #28]
3400b6fa:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
3400b6fc:	0c00      	lsrs	r0, r0, #16
3400b6fe:	4770      	bx	lr

3400b700 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400b700:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400b704:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400b708:	69c0      	ldr	r0, [r0, #28]
3400b70a:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
3400b70c:	b280      	uxth	r0, r0
3400b70e:	4770      	bx	lr

3400b710 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400b710:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400b714:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400b718:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400b71c:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
3400b71e:	4010      	ands	r0, r2
3400b720:	4770      	bx	lr

3400b722 <USB_ReadDevInEPInterrupt>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
3400b722:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
3400b726:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400b72a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400b72e:	f001 010f 	and.w	r1, r1, #15
3400b732:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400b734:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400b738:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400b73a:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400b73c:	b2db      	uxtb	r3, r3
3400b73e:	4313      	orrs	r3, r2

  return tmpreg;
}
3400b740:	4018      	ands	r0, r3
3400b742:	4770      	bx	lr

3400b744 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
3400b744:	6940      	ldr	r0, [r0, #20]
}
3400b746:	f000 0001 	and.w	r0, r0, #1
3400b74a:	4770      	bx	lr

3400b74c <USB_ActivateSetup>:
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
3400b74c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b750:	f36f 030a 	bfc	r3, #0, #11
3400b754:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
3400b758:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
3400b75c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3400b760:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804

  return HAL_OK;
}
3400b764:	2000      	movs	r0, #0
3400b766:	4770      	bx	lr

3400b768 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
3400b768:	b530      	push	{r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
3400b76a:	6c05      	ldr	r5, [r0, #64]	@ 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400b76c:	4c10      	ldr	r4, [pc, #64]	@ (3400b7b0 <USB_EP0_OutStart+0x48>)
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400b76e:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400b772:	42a5      	cmp	r5, r4
3400b774:	d903      	bls.n	3400b77e <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400b776:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
3400b77a:	2c00      	cmp	r4, #0
3400b77c:	db16      	blt.n	3400b7ac <USB_EP0_OutStart+0x44>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
3400b77e:	2400      	movs	r4, #0
3400b780:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400b782:	691c      	ldr	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;

  if (dma == 1U)
3400b784:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400b786:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
3400b78a:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
3400b78c:	691c      	ldr	r4, [r3, #16]
3400b78e:	f044 0418 	orr.w	r4, r4, #24
3400b792:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
3400b794:	691c      	ldr	r4, [r3, #16]
3400b796:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
3400b79a:	611c      	str	r4, [r3, #16]
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
3400b79c:	bf01      	itttt	eq
3400b79e:	615a      	streq	r2, [r3, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
3400b7a0:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	@ 0xb00
3400b7a4:	f043 2380 	orreq.w	r3, r3, #2147516416	@ 0x80008000
3400b7a8:	f8c0 3b00 	streq.w	r3, [r0, #2816]	@ 0xb00
  }

  return HAL_OK;
}
3400b7ac:	2000      	movs	r0, #0
3400b7ae:	bd30      	pop	{r4, r5, pc}
3400b7b0:	4f54300a 	.word	0x4f54300a

3400b7b4 <CMW_CAMERA_GetDCMIPPHandle>:
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
    return &hcamera_dcmipp;
}
3400b7b4:	4800      	ldr	r0, [pc, #0]	@ (3400b7b8 <CMW_CAMERA_GetDCMIPPHandle+0x4>)
3400b7b6:	4770      	bx	lr
3400b7b8:	3400ff00 	.word	0x3400ff00

3400b7bc <CMW_CAMERA_PIPE_VsyncEventCallback>:
/**
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
3400b7bc:	2000      	movs	r0, #0
3400b7be:	4770      	bx	lr

3400b7c0 <CMW_CAMERA_PIPE_FrameEventCallback>:
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
  UNUSED(pipe);

  return HAL_OK;
}
3400b7c0:	2000      	movs	r0, #0
3400b7c2:	4770      	bx	lr

3400b7c4 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
3400b7c4:	4b05      	ldr	r3, [pc, #20]	@ (3400b7dc <HAL_DCMIPP_PIPE_VsyncEventCallback+0x18>)
{
3400b7c6:	b510      	push	{r4, lr}
  if(Camera_Drv.VsyncEventCallback != NULL)
3400b7c8:	691b      	ldr	r3, [r3, #16]
{
3400b7ca:	460c      	mov	r4, r1
  if(Camera_Drv.VsyncEventCallback != NULL)
3400b7cc:	b10b      	cbz	r3, 3400b7d2 <HAL_DCMIPP_PIPE_VsyncEventCallback+0xe>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
3400b7ce:	4804      	ldr	r0, [pc, #16]	@ (3400b7e0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>)
3400b7d0:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
3400b7d2:	4620      	mov	r0, r4
3400b7d4:	f7ff fff2 	bl	3400b7bc <CMW_CAMERA_PIPE_VsyncEventCallback>
}
3400b7d8:	bd10      	pop	{r4, pc}
3400b7da:	bf00      	nop
3400b7dc:	3400fe98 	.word	0x3400fe98
3400b7e0:	3400fd54 	.word	0x3400fd54

3400b7e4 <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
3400b7e4:	4b05      	ldr	r3, [pc, #20]	@ (3400b7fc <HAL_DCMIPP_PIPE_FrameEventCallback+0x18>)
{
3400b7e6:	b510      	push	{r4, lr}
  if(Camera_Drv.FrameEventCallback != NULL)
3400b7e8:	695b      	ldr	r3, [r3, #20]
{
3400b7ea:	460c      	mov	r4, r1
  if(Camera_Drv.FrameEventCallback != NULL)
3400b7ec:	b10b      	cbz	r3, 3400b7f2 <HAL_DCMIPP_PIPE_FrameEventCallback+0xe>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
3400b7ee:	4804      	ldr	r0, [pc, #16]	@ (3400b800 <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>)
3400b7f0:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
3400b7f2:	4620      	mov	r0, r4
3400b7f4:	f7ff ffe4 	bl	3400b7c0 <CMW_CAMERA_PIPE_FrameEventCallback>
}
3400b7f8:	bd10      	pop	{r4, pc}
3400b7fa:	bf00      	nop
3400b7fc:	3400fe98 	.word	0x3400fe98
3400b800:	3400fd54 	.word	0x3400fd54

3400b804 <DMA2D_IRQHandler>:
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(dma2d_current);
3400b804:	4b01      	ldr	r3, [pc, #4]	@ (3400b80c <DMA2D_IRQHandler+0x8>)
3400b806:	6818      	ldr	r0, [r3, #0]
3400b808:	f7f7 bad8 	b.w	34002dbc <HAL_DMA2D_IRQHandler>
3400b80c:	3400ff0c 	.word	0x3400ff0c

3400b810 <USB1_OTG_HS_IRQHandler>:
  HAL_NVIC_EnableIRQ(USB1_OTG_HS_IRQn);
}

void USB1_OTG_HS_IRQHandler(void)
{
  UVCL_IRQHandler();
3400b810:	f000 b800 	b.w	3400b814 <UVCL_IRQHandler>

3400b814 <UVCL_IRQHandler>:
void UVCL_IRQHandler()
{
#if defined(UVCL_USBD_USE_THREADX) || defined(UVCL_USBD_USE_FREERTOS)
  UVCL_stm32_usbd_IRQHandler();
#elif defined(UVC_LIB_USE_USBX)
  UVCL_stm32_usbx_IRQHandler();
3400b814:	f000 b800 	b.w	3400b818 <UVCL_stm32_usbx_IRQHandler>

3400b818 <UVCL_stm32_usbx_IRQHandler>:
    __enable_irq();
}
#endif

void UVCL_stm32_usbx_IRQHandler()
{
3400b818:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&uvcl_pcd_handle);
3400b81a:	4804      	ldr	r0, [pc, #16]	@ (3400b82c <UVCL_stm32_usbx_IRQHandler+0x14>)
3400b81c:	f7f7 fe4e 	bl	340034bc <HAL_PCD_IRQHandler>
    assert(ret == pdTRUE);
    HAL_NVIC_DisableIRQ(irqn_type);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  }
#else
  ux_system_tasks_run();
3400b820:	f000 fab6 	bl	3400bd90 <_ux_system_tasks_run>
  ux_system_tasks_run();
#endif
#endif
}
3400b824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ux_system_tasks_run();
3400b828:	f000 bab2 	b.w	3400bd90 <_ux_system_tasks_run>
3400b82c:	3400ff10 	.word	0x3400ff10

3400b830 <simd_matrix_vector_mul_int8>:
    const int8_t* matrix,   // Pointer to MxN matrix
    const int8_t* vector,   // Pointer to vector of size N
    int32_t* result,        // Output vector of size M
    uint32_t M,             // Number of rows
    uint32_t N              // Number of columns (must be multiple of 4)
) {
3400b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400b834:	469c      	mov	ip, r3
    for (uint32_t i = 0; i < M; i++) {
3400b836:	2600      	movs	r6, #0
3400b838:	4566      	cmp	r6, ip
3400b83a:	d101      	bne.n	3400b840 <simd_matrix_vector_mul_int8+0x10>
            acc = __SMLAD(mat_pack2, vec_pack2, acc);
        }

        result[i] = acc;
    }
}
3400b83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int32_t acc = 0;
3400b840:	f04f 0e00 	mov.w	lr, #0
3400b844:	9d09      	ldr	r5, [sp, #36]	@ 0x24
3400b846:	9f09      	ldr	r7, [sp, #36]	@ 0x24
3400b848:	3503      	adds	r5, #3
3400b84a:	08ad      	lsrs	r5, r5, #2
3400b84c:	4577      	cmp	r7, lr
3400b84e:	f105 0501 	add.w	r5, r5, #1
3400b852:	460c      	mov	r4, r1
        for (uint32_t j = 0; j < N; j += 4) {
3400b854:	4603      	mov	r3, r0
3400b856:	bf14      	ite	ne
3400b858:	462f      	movne	r7, r5
3400b85a:	2701      	moveq	r7, #1
3400b85c:	3f01      	subs	r7, #1
3400b85e:	f103 0304 	add.w	r3, r3, #4
3400b862:	f104 0404 	add.w	r4, r4, #4
3400b866:	d105      	bne.n	3400b874 <simd_matrix_vector_mul_int8+0x44>
        result[i] = acc;
3400b868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400b86a:	f842 e026 	str.w	lr, [r2, r6, lsl #2]
    for (uint32_t i = 0; i < M; i++) {
3400b86e:	4418      	add	r0, r3
3400b870:	3601      	adds	r6, #1
3400b872:	e7e1      	b.n	3400b838 <simd_matrix_vector_mul_int8+0x8>
            int32_t mat_pack1 = __PKHBT(mat16_0, mat16_1, 16);
3400b874:	f913 8c03 	ldrsb.w	r8, [r3, #-3]
            int32_t mat_pack2 = __PKHBT(mat16_2, mat16_3, 16);
3400b878:	f913 9c01 	ldrsb.w	r9, [r3, #-1]
            int32_t mat_pack1 = __PKHBT(mat16_0, mat16_1, 16);
3400b87c:	f913 5c04 	ldrsb.w	r5, [r3, #-4]
            int32_t vec_pack1 = __PKHBT(vec16_0, vec16_1, 16);
3400b880:	f914 ac04 	ldrsb.w	sl, [r4, #-4]
            int32_t vec_pack2 = __PKHBT(vec16_2, vec16_3, 16);
3400b884:	f914 bc01 	ldrsb.w	fp, [r4, #-1]
            int32_t mat_pack1 = __PKHBT(mat16_0, mat16_1, 16);
3400b888:	eac5 4508 	pkhbt	r5, r5, r8, lsl #16
            int32_t mat_pack2 = __PKHBT(mat16_2, mat16_3, 16);
3400b88c:	f913 8c02 	ldrsb.w	r8, [r3, #-2]
3400b890:	eac8 4809 	pkhbt	r8, r8, r9, lsl #16
            int32_t vec_pack1 = __PKHBT(vec16_0, vec16_1, 16);
3400b894:	f914 9c03 	ldrsb.w	r9, [r4, #-3]
3400b898:	eaca 4a09 	pkhbt	sl, sl, r9, lsl #16
            int32_t vec_pack2 = __PKHBT(vec16_2, vec16_3, 16);
3400b89c:	f914 9c02 	ldrsb.w	r9, [r4, #-2]
3400b8a0:	eac9 490b 	pkhbt	r9, r9, fp, lsl #16

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
3400b8a4:	fb25 e50a 	smlad	r5, r5, sl, lr
3400b8a8:	fb28 5e09 	smlad	lr, r8, r9, r5
        for (uint32_t j = 0; j < N; j += 4) {
3400b8ac:	e7d6      	b.n	3400b85c <simd_matrix_vector_mul_int8+0x2c>
	...

3400b8b0 <HAL_PCD_SetupStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400b8b0:	4b24      	ldr	r3, [pc, #144]	@ (3400b944 <HAL_PCD_SetupStageCallback+0x94>)
{
3400b8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400b8b6:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400b8b8:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400b8bc:	69dd      	ldr	r5, [r3, #28]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400b8be:	2208      	movs	r2, #8
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
3400b8c0:	686c      	ldr	r4, [r5, #4]
{
3400b8c2:	4606      	mov	r6, r0
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400b8c4:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
3400b8c8:	f000 fa96 	bl	3400bdf8 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400b8cc:	2301      	movs	r3, #1
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400b8ce:	2200      	movs	r2, #0
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400b8d0:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400b8d2:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400b8d4:	63a2      	str	r2, [r4, #56]	@ 0x38
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400b8d6:	f023 030e 	bic.w	r3, r3, #14
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400b8da:	6462      	str	r2, [r4, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400b8dc:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
3400b8de:	f994 105c 	ldrsb.w	r1, [r4, #92]	@ 0x5c
3400b8e2:	4291      	cmp	r1, r2
3400b8e4:	da04      	bge.n	3400b8f0 <HAL_PCD_SetupStageCallback+0x40>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
3400b8e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400b8ea:	60ab      	str	r3, [r5, #8]
                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
            }
        }
    }
}
3400b8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
3400b8f0:	73aa      	strb	r2, [r5, #14]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
3400b8f2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
3400b8f6:	b92a      	cbnz	r2, 3400b904 <HAL_PCD_SetupStageCallback+0x54>
3400b8f8:	f894 2063 	ldrb.w	r2, [r4, #99]	@ 0x63
3400b8fc:	b912      	cbnz	r2, 3400b904 <HAL_PCD_SetupStageCallback+0x54>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400b8fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3400b902:	e7f2      	b.n	3400b8ea <HAL_PCD_SetupStageCallback+0x3a>
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400b904:	f104 0062 	add.w	r0, r4, #98	@ 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400b908:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400b90a:	f000 fa7f 	bl	3400be0c <_ux_utility_short_get>
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400b90e:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400b912:	4603      	mov	r3, r0
3400b914:	f04f 0800 	mov.w	r8, #0
3400b918:	6360      	str	r0, [r4, #52]	@ 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400b91a:	d907      	bls.n	3400b92c <HAL_PCD_SetupStageCallback+0x7c>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
3400b91c:	4639      	mov	r1, r7
3400b91e:	4628      	mov	r0, r5
3400b920:	f000 f94e 	bl	3400bbc0 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400b924:	68ab      	ldr	r3, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
3400b926:	f885 800c 	strb.w	r8, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400b92a:	e7e8      	b.n	3400b8fe <HAL_PCD_SetupStageCallback+0x4e>
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400b92c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400b92e:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400b932:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Receive(hpcd,
3400b934:	4630      	mov	r0, r6
3400b936:	7bb9      	ldrb	r1, [r7, #14]
3400b938:	f7f7 fd35 	bl	340033a6 <HAL_PCD_EP_Receive>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
3400b93c:	2302      	movs	r3, #2
3400b93e:	732b      	strb	r3, [r5, #12]
3400b940:	e7d4      	b.n	3400b8ec <HAL_PCD_SetupStageCallback+0x3c>
3400b942:	bf00      	nop
3400b944:	340103f4 	.word	0x340103f4

3400b948 <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400b948:	4b2e      	ldr	r3, [pc, #184]	@ (3400ba04 <HAL_PCD_DataInStageCallback+0xbc>)
{
3400b94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400b94e:	681b      	ldr	r3, [r3, #0]
3400b950:	f001 020f 	and.w	r2, r1, #15
3400b954:	69df      	ldr	r7, [r3, #28]
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400b956:	eb02 0242 	add.w	r2, r2, r2, lsl #1
3400b95a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
{
3400b95e:	4606      	mov	r6, r0
3400b960:	460d      	mov	r5, r1
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400b962:	6854      	ldr	r4, [r2, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400b964:	2900      	cmp	r1, #0
3400b966:	d13b      	bne.n	3400b9e0 <HAL_PCD_DataInStageCallback+0x98>

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
3400b968:	7b3b      	ldrb	r3, [r7, #12]
3400b96a:	2b01      	cmp	r3, #1
3400b96c:	d115      	bne.n	3400b99a <HAL_PCD_DataInStageCallback+0x52>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400b96e:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
3400b972:	460b      	mov	r3, r1
3400b974:	460a      	mov	r2, r1
3400b976:	f7f7 fd16 	bl	340033a6 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
3400b97a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400b97c:	f8b8 0010 	ldrh.w	r0, [r8, #16]
3400b980:	4281      	cmp	r1, r0
3400b982:	d81d      	bhi.n	3400b9c0 <HAL_PCD_DataInStageCallback+0x78>
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
3400b984:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b986:	2b01      	cmp	r3, #1
3400b988:	d109      	bne.n	3400b99e <HAL_PCD_DataInStageCallback+0x56>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
3400b98a:	462b      	mov	r3, r5
3400b98c:	462a      	mov	r2, r5
3400b98e:	4630      	mov	r0, r6
3400b990:	f898 100e 	ldrb.w	r1, [r8, #14]
3400b994:	f7f7 fd2d 	bl	340033f2 <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400b998:	65a5      	str	r5, [r4, #88]	@ 0x58
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
3400b99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400b99e:	2302      	movs	r3, #2
3400b9a0:	6223      	str	r3, [r4, #32]
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400b9a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400b9a4:	6465      	str	r5, [r4, #68]	@ 0x44
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400b9a6:	63a3      	str	r3, [r4, #56]	@ 0x38
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400b9a8:	68bb      	ldr	r3, [r7, #8]
3400b9aa:	f043 0308 	orr.w	r3, r3, #8
3400b9ae:	60bb      	str	r3, [r7, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
3400b9b0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b9b2:	b113      	cbz	r3, 3400b9ba <HAL_PCD_DataInStageCallback+0x72>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400b9b4:	f104 0020 	add.w	r0, r4, #32
3400b9b8:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
3400b9ba:	2304      	movs	r3, #4
3400b9bc:	733b      	strb	r3, [r7, #12]
3400b9be:	e7ec      	b.n	3400b99a <HAL_PCD_DataInStageCallback+0x52>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400b9c0:	1a0b      	subs	r3, r1, r0
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
3400b9c2:	4283      	cmp	r3, r0
3400b9c4:	bf28      	it	cs
3400b9c6:	4603      	movcs	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400b9c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400b9ca:	1ac9      	subs	r1, r1, r3
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400b9cc:	4402      	add	r2, r0
                HAL_PCD_EP_Transmit(hpcd,
3400b9ce:	4630      	mov	r0, r6
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400b9d0:	6322      	str	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400b9d2:	63e1      	str	r1, [r4, #60]	@ 0x3c
                HAL_PCD_EP_Transmit(hpcd,
3400b9d4:	f898 100e 	ldrb.w	r1, [r8, #14]
}
3400b9d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400b9dc:	f7f7 bd09 	b.w	340033f2 <HAL_PCD_EP_Transmit>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400b9e0:	6da6      	ldr	r6, [r4, #88]	@ 0x58
3400b9e2:	2300      	movs	r3, #0
            transfer_request -> ux_slave_transfer_request_requested_length)
3400b9e4:	6b65      	ldr	r5, [r4, #52]	@ 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400b9e6:	b126      	cbz	r6, 3400b9f2 <HAL_PCD_DataInStageCallback+0xaa>
3400b9e8:	b11d      	cbz	r5, 3400b9f2 <HAL_PCD_DataInStageCallback+0xaa>
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400b9ea:	461a      	mov	r2, r3
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400b9ec:	65a3      	str	r3, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
3400b9ee:	63e3      	str	r3, [r4, #60]	@ 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400b9f0:	e7f2      	b.n	3400b9d8 <HAL_PCD_DataInStageCallback+0x90>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400b9f2:	6463      	str	r3, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400b9f4:	2302      	movs	r3, #2
3400b9f6:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400b9f8:	6893      	ldr	r3, [r2, #8]
            transfer_request -> ux_slave_transfer_request_actual_length =
3400b9fa:	63a5      	str	r5, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400b9fc:	f043 0308 	orr.w	r3, r3, #8
3400ba00:	6093      	str	r3, [r2, #8]
}
3400ba02:	e7ca      	b.n	3400b99a <HAL_PCD_DataInStageCallback+0x52>
3400ba04:	340103f4 	.word	0x340103f4

3400ba08 <HAL_PCD_DataOutStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400ba08:	4a23      	ldr	r2, [pc, #140]	@ (3400ba98 <HAL_PCD_DataOutStageCallback+0x90>)
{
3400ba0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400ba0e:	6812      	ldr	r2, [r2, #0]
3400ba10:	f001 050f 	and.w	r5, r1, #15
3400ba14:	69d6      	ldr	r6, [r2, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400ba16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3400ba1a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
{
3400ba1e:	4607      	mov	r7, r0
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400ba20:	686c      	ldr	r4, [r5, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400ba22:	bb61      	cbnz	r1, 3400ba7e <HAL_PCD_DataOutStageCallback+0x76>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
3400ba24:	7b33      	ldrb	r3, [r6, #12]
3400ba26:	2b02      	cmp	r3, #2
3400ba28:	d110      	bne.n	3400ba4c <HAL_PCD_DataOutStageCallback+0x44>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
3400ba2a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400ba2c:	f7f7 fcd9 	bl	340033e2 <HAL_PCD_EP_GetRxCount>

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400ba30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
                transfer_request -> ux_slave_transfer_request_requested_length)
3400ba32:	6b62      	ldr	r2, [r4, #52]	@ 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400ba34:	4403      	add	r3, r0
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400ba36:	4293      	cmp	r3, r2
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400ba38:	63a3      	str	r3, [r4, #56]	@ 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400ba3a:	d812      	bhi.n	3400ba62 <HAL_PCD_DataOutStageCallback+0x5a>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
3400ba3c:	d002      	beq.n	3400ba44 <HAL_PCD_DataOutStageCallback+0x3c>
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
3400ba3e:	8a2b      	ldrh	r3, [r5, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
3400ba40:	4283      	cmp	r3, r0
3400ba42:	d005      	beq.n	3400ba50 <HAL_PCD_DataOutStageCallback+0x48>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
3400ba44:	68b3      	ldr	r3, [r6, #8]
3400ba46:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
3400ba4a:	60b3      	str	r3, [r6, #8]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
3400ba4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400ba50:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400ba52:	4638      	mov	r0, r7
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400ba54:	441a      	add	r2, r3
3400ba56:	6322      	str	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400ba58:	7ba9      	ldrb	r1, [r5, #14]
}
3400ba5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    HAL_PCD_EP_Receive(hpcd,
3400ba5e:	f7f7 bca2 	b.w	340033a6 <HAL_PCD_EP_Receive>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
3400ba62:	2327      	movs	r3, #39	@ 0x27
3400ba64:	6463      	str	r3, [r4, #68]	@ 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400ba66:	68b3      	ldr	r3, [r6, #8]
3400ba68:	f043 0308 	orr.w	r3, r3, #8
3400ba6c:	60b3      	str	r3, [r6, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
3400ba6e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400ba70:	2b00      	cmp	r3, #0
3400ba72:	d0eb      	beq.n	3400ba4c <HAL_PCD_DataOutStageCallback+0x44>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400ba74:	f104 0020 	add.w	r0, r4, #32
}
3400ba78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400ba7c:	4718      	bx	r3
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400ba7e:	f7f7 fcb0 	bl	340033e2 <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400ba82:	2300      	movs	r3, #0
3400ba84:	6463      	str	r3, [r4, #68]	@ 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400ba86:	2302      	movs	r3, #2
3400ba88:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400ba8a:	68ab      	ldr	r3, [r5, #8]
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400ba8c:	63a0      	str	r0, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400ba8e:	f043 0308 	orr.w	r3, r3, #8
3400ba92:	60ab      	str	r3, [r5, #8]
}
3400ba94:	e7da      	b.n	3400ba4c <HAL_PCD_DataOutStageCallback+0x44>
3400ba96:	bf00      	nop
3400ba98:	340103f4 	.word	0x340103f4

3400ba9c <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
3400ba9c:	b538      	push	{r3, r4, r5, lr}

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400ba9e:	4c0a      	ldr	r4, [pc, #40]	@ (3400bac8 <HAL_PCD_ResetCallback+0x2c>)
{
3400baa0:	4605      	mov	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400baa2:	6823      	ldr	r3, [r4, #0]
3400baa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400baa6:	b10b      	cbz	r3, 3400baac <HAL_PCD_ResetCallback+0x10>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
3400baa8:	f000 f902 	bl	3400bcb0 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
3400baac:	79ea      	ldrb	r2, [r5, #7]
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400baae:	6823      	ldr	r3, [r4, #0]
    switch(hpcd -> Init.speed)
3400bab0:	2a00      	cmp	r2, #0
3400bab2:	bf0c      	ite	eq
3400bab4:	2202      	moveq	r2, #2
3400bab6:	2201      	movne	r2, #1
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400bab8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
3400babc:	f000 f88e 	bl	3400bbdc <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400bac0:	2201      	movs	r2, #1
3400bac2:	6823      	ldr	r3, [r4, #0]
3400bac4:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400bac6:	bd38      	pop	{r3, r4, r5, pc}
3400bac8:	340103f4 	.word	0x340103f4

3400bacc <HAL_PCD_ConnectCallback>:
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bacc:	4b03      	ldr	r3, [pc, #12]	@ (3400badc <HAL_PCD_ConnectCallback+0x10>)
3400bace:	681b      	ldr	r3, [r3, #0]
3400bad0:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bad4:	b10b      	cbz	r3, 3400bada <HAL_PCD_ConnectCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
3400bad6:	20f1      	movs	r0, #241	@ 0xf1
3400bad8:	4718      	bx	r3
    }
}
3400bada:	4770      	bx	lr
3400badc:	340103f4 	.word	0x340103f4

3400bae0 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
3400bae0:	b510      	push	{r4, lr}

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bae2:	4c07      	ldr	r4, [pc, #28]	@ (3400bb00 <HAL_PCD_DisconnectCallback+0x20>)
3400bae4:	6823      	ldr	r3, [r4, #0]
3400bae6:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400baea:	b10b      	cbz	r3, 3400baf0 <HAL_PCD_DisconnectCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
3400baec:	20f2      	movs	r0, #242	@ 0xf2
3400baee:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400baf0:	6823      	ldr	r3, [r4, #0]
3400baf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400baf4:	b11b      	cbz	r3, 3400bafe <HAL_PCD_DisconnectCallback+0x1e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
    }
}
3400baf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _ux_device_stack_disconnect();
3400bafa:	f000 b8d9 	b.w	3400bcb0 <_ux_device_stack_disconnect>
}
3400bafe:	bd10      	pop	{r4, pc}
3400bb00:	340103f4 	.word	0x340103f4

3400bb04 <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bb04:	4b03      	ldr	r3, [pc, #12]	@ (3400bb14 <HAL_PCD_SuspendCallback+0x10>)
3400bb06:	681b      	ldr	r3, [r3, #0]
3400bb08:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bb0c:	b10b      	cbz	r3, 3400bb12 <HAL_PCD_SuspendCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
3400bb0e:	20f4      	movs	r0, #244	@ 0xf4
3400bb10:	4718      	bx	r3
    }
}
3400bb12:	4770      	bx	lr
3400bb14:	340103f4 	.word	0x340103f4

3400bb18 <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bb18:	4b03      	ldr	r3, [pc, #12]	@ (3400bb28 <HAL_PCD_ResumeCallback+0x10>)
3400bb1a:	681b      	ldr	r3, [r3, #0]
3400bb1c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bb20:	b10b      	cbz	r3, 3400bb26 <HAL_PCD_ResumeCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
3400bb22:	20f3      	movs	r0, #243	@ 0xf3
3400bb24:	4718      	bx	r3
    }
}
3400bb26:	4770      	bx	lr
3400bb28:	340103f4 	.word	0x340103f4

3400bb2c <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bb2c:	4b03      	ldr	r3, [pc, #12]	@ (3400bb3c <HAL_PCD_SOFCallback+0x10>)
3400bb2e:	681b      	ldr	r3, [r3, #0]
3400bb30:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bb34:	b10b      	cbz	r3, 3400bb3a <HAL_PCD_SOFCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
3400bb36:	20f0      	movs	r0, #240	@ 0xf0
3400bb38:	4718      	bx	r3
    }
}
3400bb3a:	4770      	bx	lr
3400bb3c:	340103f4 	.word	0x340103f4

3400bb40 <HAL_PCD_ISOINIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb40:	4b0e      	ldr	r3, [pc, #56]	@ (3400bb7c <HAL_PCD_ISOINIncompleteCallback+0x3c>)
3400bb42:	f001 010f 	and.w	r1, r1, #15
3400bb46:	681b      	ldr	r3, [r3, #0]
3400bb48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400bb4c:	69d8      	ldr	r0, [r3, #28]
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
#else
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0U)
3400bb4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400bb52:	688b      	ldr	r3, [r1, #8]
3400bb54:	07db      	lsls	r3, r3, #31
3400bb56:	d50f      	bpl.n	3400bb78 <HAL_PCD_ISOINIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400bb58:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bb5a:	7bd3      	ldrb	r3, [r2, #15]
3400bb5c:	f003 0303 	and.w	r3, r3, #3
3400bb60:	2b01      	cmp	r3, #1
3400bb62:	d109      	bne.n	3400bb78 <HAL_PCD_ISOINIncompleteCallback+0x38>
3400bb64:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != 0)
3400bb68:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bb6a:	2b00      	cmp	r3, #0
3400bb6c:	da04      	bge.n	3400bb78 <HAL_PCD_ISOINIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
3400bb6e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400bb70:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400bb72:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400bb74:	f7f7 bc3d 	b.w	340033f2 <HAL_PCD_EP_Transmit>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400bb78:	4770      	bx	lr
3400bb7a:	bf00      	nop
3400bb7c:	340103f4 	.word	0x340103f4

3400bb80 <HAL_PCD_ISOOUTIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb80:	4b0e      	ldr	r3, [pc, #56]	@ (3400bbbc <HAL_PCD_ISOOUTIncompleteCallback+0x3c>)
3400bb82:	f001 010f 	and.w	r1, r1, #15
3400bb86:	681b      	ldr	r3, [r3, #0]
3400bb88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400bb8c:	69d8      	ldr	r0, [r3, #28]

    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
3400bb8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400bb92:	688b      	ldr	r3, [r1, #8]
3400bb94:	07db      	lsls	r3, r3, #31
3400bb96:	d50f      	bpl.n	3400bbb8 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400bb98:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bb9a:	7bd3      	ldrb	r3, [r2, #15]
3400bb9c:	f003 0303 	and.w	r3, r3, #3
3400bba0:	2b01      	cmp	r3, #1
3400bba2:	d109      	bne.n	3400bbb8 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
3400bba4:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == 0)
3400bba8:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bbaa:	2b00      	cmp	r3, #0
3400bbac:	db04      	blt.n	3400bbb8 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
3400bbae:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400bbb0:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400bbb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400bbb4:	f7f7 bbf7 	b.w	340033a6 <HAL_PCD_EP_Receive>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400bbb8:	4770      	bx	lr
3400bbba:	bf00      	nop
3400bbbc:	340103f4 	.word	0x340103f4

3400bbc0 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
3400bbc0:	b508      	push	{r3, lr}

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
3400bbc2:	688b      	ldr	r3, [r1, #8]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400bbc4:	6f00      	ldr	r0, [r0, #112]	@ 0x70
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
3400bbc6:	685a      	ldr	r2, [r3, #4]
3400bbc8:	f042 0204 	orr.w	r2, r2, #4
3400bbcc:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400bbce:	7b89      	ldrb	r1, [r1, #14]
3400bbd0:	7a9b      	ldrb	r3, [r3, #10]
3400bbd2:	4319      	orrs	r1, r3
3400bbd4:	f7f7 fc27 	bl	34003426 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
3400bbd8:	2000      	movs	r0, #0
3400bbda:	bd08      	pop	{r3, pc}

3400bbdc <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
3400bbdc:	b570      	push	{r4, r5, r6, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400bbde:	4e32      	ldr	r6, [pc, #200]	@ (3400bca8 <_ux_dcd_stm32_initialize_complete+0xcc>)
3400bbe0:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400bbe2:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bbe6:	69e5      	ldr	r5, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400bbe8:	2b01      	cmp	r3, #1
3400bbea:	d147      	bne.n	3400bc7c <_ux_dcd_stm32_initialize_complete+0xa0>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
3400bbec:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
3400bbf0:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400bbf4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
3400bbf8:	220e      	movs	r2, #14
3400bbfa:	492c      	ldr	r1, [pc, #176]	@ (3400bcac <_ux_dcd_stm32_initialize_complete+0xd0>)
3400bbfc:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400bc00:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
    _ux_utility_descriptor_parse(device_framework,
3400bc04:	f104 0328 	add.w	r3, r4, #40	@ 0x28
3400bc08:	f000 f8c7 	bl	3400bd9a <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
3400bc0c:	f242 7310 	movw	r3, #10000	@ 0x2710
3400bc10:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400bc14:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
                            transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400bc16:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400bc1a:	66e3      	str	r3, [r4, #108]	@ 0x6c

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400bc1c:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400bc20:	6662      	str	r2, [r4, #100]	@ 0x64

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400bc22:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400bc24:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400bc28:	6723      	str	r3, [r4, #112]	@ 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400bc2a:	4620      	mov	r0, r4
3400bc2c:	69a3      	ldr	r3, [r4, #24]
3400bc2e:	4798      	blx	r3
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
3400bc30:	2100      	movs	r1, #0
3400bc32:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400bc34:	f7f7 ffa8 	bl	34003b88 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400bc38:	2300      	movs	r3, #0
3400bc3a:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400bc3e:	4619      	mov	r1, r3
3400bc40:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400bc42:	f7f7 fb77 	bl	34003334 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
3400bc46:	2180      	movs	r1, #128	@ 0x80
3400bc48:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400bc4a:	f7f7 ff9d 	bl	34003b88 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400bc4e:	2300      	movs	r3, #0
3400bc50:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400bc54:	2180      	movs	r1, #128	@ 0x80
3400bc56:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400bc58:	f7f7 fb6c 	bl	34003334 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400bc5c:	2300      	movs	r3, #0

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400bc5e:	2208      	movs	r2, #8
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bc60:	2001      	movs	r0, #1
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bc62:	e9c4 321d 	strd	r3, r2, [r4, #116]	@ 0x74
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400bc66:	6423      	str	r3, [r4, #64]	@ 0x40

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bc68:	6833      	ldr	r3, [r6, #0]
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
3400bc6a:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bc6e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400bc72:	6722      	str	r2, [r4, #112]	@ 0x70
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bc74:	b103      	cbz	r3, 3400bc78 <_ux_dcd_stm32_initialize_complete+0x9c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
3400bc76:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
3400bc78:	2000      	movs	r0, #0
3400bc7a:	bd70      	pop	{r4, r5, r6, pc}
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
3400bc7c:	2300      	movs	r3, #0
3400bc7e:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
3400bc82:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400bc86:	2b01      	cmp	r3, #1
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400bc88:	bf0b      	itete	eq
3400bc8a:	f8d4 30d4 	ldreq.w	r3, [r4, #212]	@ 0xd4
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400bc8e:	f8d4 30dc 	ldrne.w	r3, [r4, #220]	@ 0xdc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400bc92:	f8c4 30cc 	streq.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400bc96:	f8c4 30cc 	strne.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
3400bc9a:	bf0c      	ite	eq
3400bc9c:	f8d4 30d8 	ldreq.w	r3, [r4, #216]	@ 0xd8
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
3400bca0:	f8d4 30e0 	ldrne.w	r3, [r4, #224]	@ 0xe0
3400bca4:	e7a8      	b.n	3400bbf8 <_ux_dcd_stm32_initialize_complete+0x1c>
3400bca6:	bf00      	nop
3400bca8:	340103f4 	.word	0x340103f4
3400bcac:	3400f9c0 	.word	0x3400f9c0

3400bcb0 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
3400bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400bcb4:	4f19      	ldr	r7, [pc, #100]	@ (3400bd1c <_ux_device_stack_disconnect+0x6c>)
{
3400bcb6:	b08c      	sub	sp, #48	@ 0x30
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400bcb8:	683c      	ldr	r4, [r7, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
3400bcba:	6a66      	ldr	r6, [r4, #36]	@ 0x24
3400bcbc:	2e03      	cmp	r6, #3
3400bcbe:	d128      	bne.n	3400bd12 <_ux_device_stack_disconnect+0x62>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
3400bcc0:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
3400bcc4:	b9b5      	cbnz	r5, 3400bcf4 <_ux_device_stack_disconnect+0x44>
            interface_ptr =  next_interface;
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400bcc6:	2301      	movs	r3, #1
3400bcc8:	6263      	str	r3, [r4, #36]	@ 0x24

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
3400bcca:	210f      	movs	r1, #15
3400bccc:	4620      	mov	r0, r4
3400bcce:	69a3      	ldr	r3, [r4, #24]
3400bcd0:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
3400bcd4:	4798      	blx	r3
3400bcd6:	4605      	mov	r5, r0
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
3400bcd8:	2300      	movs	r3, #0
3400bcda:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
3400bcde:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bce0:	683b      	ldr	r3, [r7, #0]
3400bce2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bce6:	b10b      	cbz	r3, 3400bcec <_ux_device_stack_disconnect+0x3c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
3400bce8:	200a      	movs	r0, #10
3400bcea:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
3400bcec:	4628      	mov	r0, r5
3400bcee:	b00c      	add	sp, #48	@ 0x30
3400bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            class_ptr =  interface_ptr -> ux_slave_interface_class;
3400bcf4:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
3400bcf6:	9601      	str	r6, [sp, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
3400bcf8:	9503      	str	r5, [sp, #12]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
3400bcfa:	9309      	str	r3, [sp, #36]	@ 0x24
            if (class_ptr != UX_NULL)
3400bcfc:	b113      	cbz	r3, 3400bd04 <_ux_device_stack_disconnect+0x54>
                class_ptr -> ux_slave_class_entry_function(&class_command);
3400bcfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400bd00:	a801      	add	r0, sp, #4
3400bd02:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bd04:	f8d5 8018 	ldr.w	r8, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
3400bd08:	4628      	mov	r0, r5
3400bd0a:	f000 f809 	bl	3400bd20 <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
3400bd0e:	4645      	mov	r5, r8
3400bd10:	e7d8      	b.n	3400bcc4 <_ux_device_stack_disconnect+0x14>
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
3400bd12:	2e01      	cmp	r6, #1
3400bd14:	d0d9      	beq.n	3400bcca <_ux_device_stack_disconnect+0x1a>
UINT                        status = UX_ERROR;
3400bd16:	25ff      	movs	r5, #255	@ 0xff
3400bd18:	e7de      	b.n	3400bcd8 <_ux_device_stack_disconnect+0x28>
3400bd1a:	bf00      	nop
3400bd1c:	340103f4 	.word	0x340103f4

3400bd20 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
3400bd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400bd24:	4605      	mov	r5, r0

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
3400bd26:	2600      	movs	r6, #0
    device =  &_ux_system_slave -> ux_system_slave_device;
3400bd28:	4f0e      	ldr	r7, [pc, #56]	@ (3400bd64 <_ux_device_stack_interface_delete+0x44>)
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
3400bd2a:	69c4      	ldr	r4, [r0, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
3400bd2c:	f8d7 8000 	ldr.w	r8, [r7]
    while (next_endpoint != UX_NULL)
3400bd30:	b954      	cbnz	r4, 3400bd48 <_ux_device_stack_interface_delete+0x28>
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bd32:	69ab      	ldr	r3, [r5, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
3400bd34:	4620      	mov	r0, r4
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bd36:	f8c8 30b4 	str.w	r3, [r8, #180]	@ 0xb4
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
3400bd3a:	e9c5 4401 	strd	r4, r4, [r5, #4]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
3400bd3e:	e9c5 4406 	strd	r4, r4, [r5, #24]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
3400bd42:	602c      	str	r4, [r5, #0]
}
3400bd44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
3400bd48:	6838      	ldr	r0, [r7, #0]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400bd4a:	f8d4 9014 	ldr.w	r9, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
3400bd4e:	4622      	mov	r2, r4
3400bd50:	210f      	movs	r1, #15
3400bd52:	6983      	ldr	r3, [r0, #24]
3400bd54:	4798      	blx	r3
        endpoint -> ux_slave_endpoint_state =  0;
3400bd56:	e9c4 6600 	strd	r6, r6, [r4]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
3400bd5a:	e9c4 6605 	strd	r6, r6, [r4, #20]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
3400bd5e:	61e6      	str	r6, [r4, #28]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400bd60:	464c      	mov	r4, r9
3400bd62:	e7e5      	b.n	3400bd30 <_ux_device_stack_interface_delete+0x10>
3400bd64:	340103f4 	.word	0x340103f4

3400bd68 <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
3400bd68:	b510      	push	{r4, lr}


    status = UX_STATE_RESET;

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400bd6a:	4c08      	ldr	r4, [pc, #32]	@ (3400bd8c <_ux_device_stack_tasks_run+0x24>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400bd6c:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400bd6e:	6820      	ldr	r0, [r4, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400bd70:	2112      	movs	r1, #18
3400bd72:	6983      	ldr	r3, [r0, #24]
3400bd74:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400bd76:	6823      	ldr	r3, [r4, #0]
    status = UX_STATE_RESET;
3400bd78:	2000      	movs	r0, #0
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400bd7a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
3400bd7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400bd80:	b11a      	cbz	r2, 3400bd8a <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
3400bd82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400bd84:	b10a      	cbz	r2, 3400bd8a <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
3400bd86:	6c98      	ldr	r0, [r3, #72]	@ 0x48
3400bd88:	4790      	blx	r2
        class_instance ++;
    }

    /* Return overall status.  */
    return(status);
}
3400bd8a:	bd10      	pop	{r4, pc}
3400bd8c:	340103f4 	.word	0x340103f4

3400bd90 <_ux_system_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_tasks_run(VOID)
{
3400bd90:	b508      	push	{r3, lr}
#if defined(UX_DEVICE_STANDALONE) && !defined(UX_HOST_SIDE_ONLY)
    _ux_device_stack_tasks_run();
3400bd92:	f7ff ffe9 	bl	3400bd68 <_ux_device_stack_tasks_run>
    _ux_otg_tasks_run();
#endif

   /* Return code not used now.  */
   return(0);
}
3400bd96:	2000      	movs	r0, #0
3400bd98:	bd08      	pop	{r3, pc}

3400bd9a <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
3400bd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400bd9e:	4605      	mov	r5, r0
3400bda0:	460e      	mov	r6, r1
3400bda2:	461c      	mov	r4, r3
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
                *descriptor++ =  0;
3400bda4:	f04f 0800 	mov.w	r8, #0
3400bda8:	188f      	adds	r7, r1, r2
    while(descriptor_entries--)
3400bdaa:	42be      	cmp	r6, r7
3400bdac:	d101      	bne.n	3400bdb2 <_ux_utility_descriptor_parse+0x18>
        }
    }

    /* Return to caller.  */
    return;
}
3400bdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(*descriptor_structure++)
3400bdb2:	f816 3b01 	ldrb.w	r3, [r6], #1
3400bdb6:	2b02      	cmp	r3, #2
3400bdb8:	d013      	beq.n	3400bde2 <_ux_utility_descriptor_parse+0x48>
3400bdba:	2b04      	cmp	r3, #4
3400bdbc:	d006      	beq.n	3400bdcc <_ux_utility_descriptor_parse+0x32>
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
3400bdbe:	f815 3b01 	ldrb.w	r3, [r5], #1
3400bdc2:	f804 3b01 	strb.w	r3, [r4], #1
            descriptor ++;
3400bdc6:	e7f0      	b.n	3400bdaa <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400bdc8:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 3u)
3400bdcc:	07a2      	lsls	r2, r4, #30
3400bdce:	d1fb      	bne.n	3400bdc8 <_ux_utility_descriptor_parse+0x2e>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400bdd0:	4628      	mov	r0, r5
3400bdd2:	f000 f80f 	bl	3400bdf4 <_ux_utility_long_get>
            raw_descriptor +=  4;
3400bdd6:	3504      	adds	r5, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400bdd8:	f844 0b04 	str.w	r0, [r4], #4
            break;
3400bddc:	e7e5      	b.n	3400bdaa <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400bdde:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 1u)
3400bde2:	07e3      	lsls	r3, r4, #31
3400bde4:	d4fb      	bmi.n	3400bdde <_ux_utility_descriptor_parse+0x44>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400bde6:	4628      	mov	r0, r5
3400bde8:	f000 f810 	bl	3400be0c <_ux_utility_short_get>
            raw_descriptor += 2;
3400bdec:	3502      	adds	r5, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400bdee:	f824 0b02 	strh.w	r0, [r4], #2
            break;
3400bdf2:	e7da      	b.n	3400bdaa <_ux_utility_descriptor_parse+0x10>

3400bdf4 <_ux_utility_long_get>:
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;

    /* Return 32-bit value.  */
    return(value);
}
3400bdf4:	6800      	ldr	r0, [r0, #0]
3400bdf6:	4770      	bx	lr

3400bdf8 <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
3400bdf8:	3801      	subs	r0, #1
3400bdfa:	3201      	adds	r2, #1
3400bdfc:	3a01      	subs	r2, #1
3400bdfe:	d100      	bne.n	3400be02 <_ux_utility_memory_copy+0xa>
        *destination++ =  *source++;
    }

    /* Return to caller.  */
    return; 
}
3400be00:	4770      	bx	lr
        *destination++ =  *source++;
3400be02:	f811 3b01 	ldrb.w	r3, [r1], #1
3400be06:	f800 3f01 	strb.w	r3, [r0, #1]!
3400be0a:	e7f7      	b.n	3400bdfc <_ux_utility_memory_copy+0x4>

3400be0c <_ux_utility_short_get>:
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);

    /* Return to caller.  */
    return((ULONG) value);
}
3400be0c:	8800      	ldrh	r0, [r0, #0]
3400be0e:	4770      	bx	lr

3400be10 <EpochBlock_EpochControllerUnit>:
  {
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
  }

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3400be10:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3400be12:	8a03      	ldrh	r3, [r0, #16]
3400be14:	075b      	lsls	r3, r3, #29
3400be16:	d406      	bmi.n	3400be26 <EpochBlock_EpochControllerUnit+0x16>
3400be18:	f240 212f 	movw	r1, #559	@ 0x22f
3400be1c:	4b03      	ldr	r3, [pc, #12]	@ (3400be2c <EpochBlock_EpochControllerUnit+0x1c>)
3400be1e:	4a04      	ldr	r2, [pc, #16]	@ (3400be30 <EpochBlock_EpochControllerUnit+0x20>)
3400be20:	4804      	ldr	r0, [pc, #16]	@ (3400be34 <EpochBlock_EpochControllerUnit+0x24>)
3400be22:	f000 f953 	bl	3400c0cc <__assert_func>
    return eb->wait_mask;
  }
3400be26:	68c0      	ldr	r0, [r0, #12]
3400be28:	bd08      	pop	{r3, pc}
3400be2a:	bf00      	nop
3400be2c:	3400f1b9 	.word	0x3400f1b9
3400be30:	3400f77a 	.word	0x3400f77a
3400be34:	3400f1d4 	.word	0x3400f1d4

3400be38 <dump_dma_state>:
#error current ATON runtime supports only up to 32 epoch controllers!
#endif // (ATON_EPOCHCTRL_NUM > 32)

#endif // `ATON_INT_NR` and `ATON_STRENG_NUM` are defined

LL_ATON_WEAK void dump_dma_state(void){};
3400be38:	4770      	bx	lr
	...

3400be3c <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3400be3c:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3400be3e:	4604      	mov	r4, r0
3400be40:	2800      	cmp	r0, #0
3400be42:	d060      	beq.n	3400bf06 <__LL_ATON_RT_IrqErr+0xca>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3400be44:	4b30      	ldr	r3, [pc, #192]	@ (3400bf08 <__LL_ATON_RT_IrqErr+0xcc>)
3400be46:	4003      	ands	r3, r0
3400be48:	d007      	beq.n	3400be5a <__LL_ATON_RT_IrqErr+0x1e>

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3400be4a:	4259      	negs	r1, r3
3400be4c:	4019      	ands	r1, r3
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3400be4e:	4b2f      	ldr	r3, [pc, #188]	@ (3400bf0c <__LL_ATON_RT_IrqErr+0xd0>)
3400be50:	030a      	lsls	r2, r1, #12
3400be52:	58d2      	ldr	r2, [r2, r3]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
3400be54:	482e      	ldr	r0, [pc, #184]	@ (3400bf10 <__LL_ATON_RT_IrqErr+0xd4>)
3400be56:	f000 ffd9 	bl	3400ce0c <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3400be5a:	f3c4 0309 	ubfx	r3, r4, #0, #10
3400be5e:	b113      	cbz	r3, 3400be66 <__LL_ATON_RT_IrqErr+0x2a>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3400be60:	482c      	ldr	r0, [pc, #176]	@ (3400bf14 <__LL_ATON_RT_IrqErr+0xd8>)
3400be62:	f001 f83b 	bl	3400cedc <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3400be66:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
3400be6a:	d002      	beq.n	3400be72 <__LL_ATON_RT_IrqErr+0x36>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3400be6c:	482a      	ldr	r0, [pc, #168]	@ (3400bf18 <__LL_ATON_RT_IrqErr+0xdc>)
3400be6e:	f001 f835 	bl	3400cedc <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3400be72:	01e5      	lsls	r5, r4, #7
3400be74:	d502      	bpl.n	3400be7c <__LL_ATON_RT_IrqErr+0x40>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3400be76:	4829      	ldr	r0, [pc, #164]	@ (3400bf1c <__LL_ATON_RT_IrqErr+0xe0>)
3400be78:	f001 f830 	bl	3400cedc <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3400be7c:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
3400be80:	d00e      	beq.n	3400bea0 <__LL_ATON_RT_IrqErr+0x64>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3400be82:	4827      	ldr	r0, [pc, #156]	@ (3400bf20 <__LL_ATON_RT_IrqErr+0xe4>)
3400be84:	f001 f82a 	bl	3400cedc <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3400be88:	4b26      	ldr	r3, [pc, #152]	@ (3400bf24 <__LL_ATON_RT_IrqErr+0xe8>)
3400be8a:	2100      	movs	r1, #0
3400be8c:	691a      	ldr	r2, [r3, #16]
3400be8e:	4826      	ldr	r0, [pc, #152]	@ (3400bf28 <__LL_ATON_RT_IrqErr+0xec>)
3400be90:	f000 ffbc 	bl	3400ce0c <iprintf>
3400be94:	4b25      	ldr	r3, [pc, #148]	@ (3400bf2c <__LL_ATON_RT_IrqErr+0xf0>)
3400be96:	2101      	movs	r1, #1
3400be98:	691a      	ldr	r2, [r3, #16]
3400be9a:	4823      	ldr	r0, [pc, #140]	@ (3400bf28 <__LL_ATON_RT_IrqErr+0xec>)
3400be9c:	f000 ffb6 	bl	3400ce0c <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3400bea0:	0120      	lsls	r0, r4, #4
3400bea2:	d502      	bpl.n	3400beaa <__LL_ATON_RT_IrqErr+0x6e>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3400bea4:	4822      	ldr	r0, [pc, #136]	@ (3400bf30 <__LL_ATON_RT_IrqErr+0xf4>)
3400bea6:	f001 f819 	bl	3400cedc <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3400beaa:	0061      	lsls	r1, r4, #1
3400beac:	d50c      	bpl.n	3400bec8 <__LL_ATON_RT_IrqErr+0x8c>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3400beae:	4d21      	ldr	r5, [pc, #132]	@ (3400bf34 <__LL_ATON_RT_IrqErr+0xf8>)
3400beb0:	4821      	ldr	r0, [pc, #132]	@ (3400bf38 <__LL_ATON_RT_IrqErr+0xfc>)
3400beb2:	68e9      	ldr	r1, [r5, #12]
3400beb4:	f000 ffaa 	bl	3400ce0c <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3400beb8:	6a29      	ldr	r1, [r5, #32]
3400beba:	4820      	ldr	r0, [pc, #128]	@ (3400bf3c <__LL_ATON_RT_IrqErr+0x100>)
3400bebc:	f000 ffa6 	bl	3400ce0c <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3400bec0:	69e9      	ldr	r1, [r5, #28]
3400bec2:	481f      	ldr	r0, [pc, #124]	@ (3400bf40 <__LL_ATON_RT_IrqErr+0x104>)
3400bec4:	f000 ffa2 	bl	3400ce0c <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3400bec8:	00a2      	lsls	r2, r4, #2
3400beca:	d502      	bpl.n	3400bed2 <__LL_ATON_RT_IrqErr+0x96>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3400becc:	481d      	ldr	r0, [pc, #116]	@ (3400bf44 <__LL_ATON_RT_IrqErr+0x108>)
3400bece:	f001 f805 	bl	3400cedc <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3400bed2:	00e3      	lsls	r3, r4, #3
3400bed4:	d502      	bpl.n	3400bedc <__LL_ATON_RT_IrqErr+0xa0>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3400bed6:	481c      	ldr	r0, [pc, #112]	@ (3400bf48 <__LL_ATON_RT_IrqErr+0x10c>)
3400bed8:	f001 f800 	bl	3400cedc <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3400bedc:	f7ff ffac 	bl	3400be38 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3400bee0:	4622      	mov	r2, r4
3400bee2:	f240 314a 	movw	r1, #842	@ 0x34a
3400bee6:	2300      	movs	r3, #0
3400bee8:	4818      	ldr	r0, [pc, #96]	@ (3400bf4c <__LL_ATON_RT_IrqErr+0x110>)
3400beea:	f000 ff8f 	bl	3400ce0c <iprintf>
//#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
3400beee:	4b18      	ldr	r3, [pc, #96]	@ (3400bf50 <__LL_ATON_RT_IrqErr+0x114>)
3400bef0:	681b      	ldr	r3, [r3, #0]
3400bef2:	6898      	ldr	r0, [r3, #8]
3400bef4:	f000 fea2 	bl	3400cc3c <fflush>
//#endif
  LL_ATON_ASSERT(false); // may never happen
3400bef8:	f240 314e 	movw	r1, #846	@ 0x34e
3400befc:	4b15      	ldr	r3, [pc, #84]	@ (3400bf54 <__LL_ATON_RT_IrqErr+0x118>)
3400befe:	4a16      	ldr	r2, [pc, #88]	@ (3400bf58 <__LL_ATON_RT_IrqErr+0x11c>)
3400bf00:	4816      	ldr	r0, [pc, #88]	@ (3400bf5c <__LL_ATON_RT_IrqErr+0x120>)
3400bf02:	f000 f8e3 	bl	3400c0cc <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3400bf06:	bd38      	pop	{r3, r4, r5, pc}
3400bf08:	000ffc00 	.word	0x000ffc00
3400bf0c:	580e503c 	.word	0x580e503c
3400bf10:	3400f3aa 	.word	0x3400f3aa
3400bf14:	3400f3d7 	.word	0x3400f3d7
3400bf18:	3400f3fd 	.word	0x3400f3fd
3400bf1c:	3400f421 	.word	0x3400f421
3400bf20:	3400f441 	.word	0x3400f441
3400bf24:	580e2000 	.word	0x580e2000
3400bf28:	3400f459 	.word	0x3400f459
3400bf2c:	580e3000 	.word	0x580e3000
3400bf30:	3400f46e 	.word	0x3400f46e
3400bf34:	580fe000 	.word	0x580fe000
3400bf38:	3400f486 	.word	0x3400f486
3400bf3c:	3400f4ba 	.word	0x3400f4ba
3400bf40:	3400f4e4 	.word	0x3400f4e4
3400bf44:	3400f505 	.word	0x3400f505
3400bf48:	3400f526 	.word	0x3400f526
3400bf4c:	3400f541 	.word	0x3400f541
3400bf50:	3400f9dc 	.word	0x3400f9dc
3400bf54:	3400f568 	.word	0x3400f568
3400bf58:	3400f756 	.word	0x3400f756
3400bf5c:	3400f27a 	.word	0x3400f27a

3400bf60 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3400bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400bf62:	4b38      	ldr	r3, [pc, #224]	@ (3400c044 <NPU0_IRQHandler+0xe4>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3400bf64:	4c38      	ldr	r4, [pc, #224]	@ (3400c048 <NPU0_IRQHandler+0xe8>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400bf66:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
3400bf68:	6823      	ldr	r3, [r4, #0]
3400bf6a:	b343      	cbz	r3, 3400bfbe <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3400bf6c:	6823      	ldr	r3, [r4, #0]
3400bf6e:	685b      	ldr	r3, [r3, #4]
3400bf70:	b933      	cbnz	r3, 3400bf80 <NPU0_IRQHandler+0x20>
3400bf72:	f240 31b1 	movw	r1, #945	@ 0x3b1
3400bf76:	4b35      	ldr	r3, [pc, #212]	@ (3400c04c <NPU0_IRQHandler+0xec>)
3400bf78:	4a35      	ldr	r2, [pc, #212]	@ (3400c050 <NPU0_IRQHandler+0xf0>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400bf7a:	4836      	ldr	r0, [pc, #216]	@ (3400c054 <NPU0_IRQHandler+0xf4>)
3400bf7c:	f000 f8a6 	bl	3400c0cc <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400bf80:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3400bf82:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400bf84:	8a1b      	ldrh	r3, [r3, #16]
3400bf86:	075b      	lsls	r3, r3, #29
3400bf88:	d40c      	bmi.n	3400bfa4 <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
3400bf8a:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
3400bf8e:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400bf92:	f7ff ff53 	bl	3400be3c <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400bf96:	6823      	ldr	r3, [r4, #0]
3400bf98:	b99b      	cbnz	r3, 3400bfc2 <NPU0_IRQHandler+0x62>
3400bf9a:	f240 31d2 	movw	r1, #978	@ 0x3d2
3400bf9e:	4b2e      	ldr	r3, [pc, #184]	@ (3400c058 <NPU0_IRQHandler+0xf8>)
3400bfa0:	4a2b      	ldr	r2, [pc, #172]	@ (3400c050 <NPU0_IRQHandler+0xf0>)
3400bfa2:	e7ea      	b.n	3400bf7a <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400bfa4:	6823      	ldr	r3, [r4, #0]
3400bfa6:	6858      	ldr	r0, [r3, #4]
3400bfa8:	f7ff ff32 	bl	3400be10 <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400bfac:	b120      	cbz	r0, 3400bfb8 <NPU0_IRQHandler+0x58>
3400bfae:	f240 31be 	movw	r1, #958	@ 0x3be
3400bfb2:	4b2a      	ldr	r3, [pc, #168]	@ (3400c05c <NPU0_IRQHandler+0xfc>)
3400bfb4:	4a26      	ldr	r2, [pc, #152]	@ (3400c050 <NPU0_IRQHandler+0xf0>)
3400bfb6:	e7e0      	b.n	3400bf7a <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
3400bfb8:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
3400bfbc:	e7e9      	b.n	3400bf92 <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400bfbe:	4628      	mov	r0, r5
3400bfc0:	e7e7      	b.n	3400bf92 <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3400bfc2:	6823      	ldr	r3, [r4, #0]
3400bfc4:	685b      	ldr	r3, [r3, #4]
3400bfc6:	8a1b      	ldrh	r3, [r3, #16]
3400bfc8:	f013 0304 	ands.w	r3, r3, #4
3400bfcc:	d123      	bne.n	3400c016 <NPU0_IRQHandler+0xb6>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3400bfce:	6822      	ldr	r2, [r4, #0]
3400bfd0:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
3400bfd2:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
3400bfd4:	402a      	ands	r2, r5
3400bfd6:	d017      	beq.n	3400c008 <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
3400bfd8:	f04f 0c01 	mov.w	ip, #1
3400bfdc:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400bfde:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400bfe0:	4e1f      	ldr	r6, [pc, #124]	@ (3400c060 <NPU0_IRQHandler+0x100>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400bfe2:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
3400bfe4:	fa22 f703 	lsr.w	r7, r2, r3
3400bfe8:	07ff      	lsls	r7, r7, #31
3400bfea:	d507      	bpl.n	3400bffc <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400bfec:	031f      	lsls	r7, r3, #12
3400bfee:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
3400bff2:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
3400bff6:	fa0c f703 	lsl.w	r7, ip, r3
3400bffa:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
3400bffc:	3801      	subs	r0, #1
3400bffe:	f103 0301 	add.w	r3, r3, #1
3400c002:	d1ef      	bne.n	3400bfe4 <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400c004:	6823      	ldr	r3, [r4, #0]
3400c006:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
3400c008:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3400c00c:	4b0d      	ldr	r3, [pc, #52]	@ (3400c044 <NPU0_IRQHandler+0xe4>)
3400c00e:	611d      	str	r5, [r3, #16]
3400c010:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
3400c014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400c016:	6823      	ldr	r3, [r4, #0]
3400c018:	6858      	ldr	r0, [r3, #4]
3400c01a:	f7ff fef9 	bl	3400be10 <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400c01e:	b120      	cbz	r0, 3400c02a <NPU0_IRQHandler+0xca>
3400c020:	f240 3191 	movw	r1, #913	@ 0x391
3400c024:	4b0d      	ldr	r3, [pc, #52]	@ (3400c05c <NPU0_IRQHandler+0xfc>)
3400c026:	4a0f      	ldr	r2, [pc, #60]	@ (3400c064 <NPU0_IRQHandler+0x104>)
3400c028:	e7a7      	b.n	3400bf7a <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3400c02a:	00eb      	lsls	r3, r5, #3
3400c02c:	d5ec      	bpl.n	3400c008 <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3400c02e:	4b0e      	ldr	r3, [pc, #56]	@ (3400c068 <NPU0_IRQHandler+0x108>)
3400c030:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3400c032:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400c034:	6823      	ldr	r3, [r4, #0]
3400c036:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400c038:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
3400c03a:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400c03e:	61d3      	str	r3, [r2, #28]
3400c040:	e7e2      	b.n	3400c008 <NPU0_IRQHandler+0xa8>
3400c042:	bf00      	nop
3400c044:	580e1000 	.word	0x580e1000
3400c048:	340103f8 	.word	0x340103f8
3400c04c:	3400f56a 	.word	0x3400f56a
3400c050:	3400f76a 	.word	0x3400f76a
3400c054:	3400f27a 	.word	0x3400f27a
3400c058:	3400f18f 	.word	0x3400f18f
3400c05c:	3400f271 	.word	0x3400f271
3400c060:	580e503c 	.word	0x580e503c
3400c064:	3400f73c 	.word	0x3400f73c
3400c068:	580fe000 	.word	0x580fe000

3400c06c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3400c06c:	480f      	ldr	r0, [pc, #60]	@ (3400c0ac <LoopForever+0x4>)
  msr   MSPLIM, r0
3400c06e:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3400c072:	480f      	ldr	r0, [pc, #60]	@ (3400c0b0 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3400c074:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3400c076:	f7f5 fe69 	bl	34001d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3400c07a:	480e      	ldr	r0, [pc, #56]	@ (3400c0b4 <LoopForever+0xc>)
  ldr r1, =_edata
3400c07c:	490e      	ldr	r1, [pc, #56]	@ (3400c0b8 <LoopForever+0x10>)
  ldr r2, =_sidata
3400c07e:	4a0f      	ldr	r2, [pc, #60]	@ (3400c0bc <LoopForever+0x14>)
  movs r3, #0
3400c080:	2300      	movs	r3, #0
  b LoopCopyDataInit
3400c082:	e002      	b.n	3400c08a <LoopCopyDataInit>

3400c084 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3400c084:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3400c086:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3400c088:	3304      	adds	r3, #4

3400c08a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3400c08a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3400c08c:	428c      	cmp	r4, r1
  bcc CopyDataInit
3400c08e:	d3f9      	bcc.n	3400c084 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3400c090:	4a0b      	ldr	r2, [pc, #44]	@ (3400c0c0 <LoopForever+0x18>)
  ldr r4, =_ebss
3400c092:	4c0c      	ldr	r4, [pc, #48]	@ (3400c0c4 <LoopForever+0x1c>)
  movs r3, #0
3400c094:	2300      	movs	r3, #0
  b LoopFillZerobss
3400c096:	e001      	b.n	3400c09c <LoopFillZerobss>

3400c098 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3400c098:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3400c09a:	3204      	adds	r2, #4

3400c09c <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3400c09c:	42a2      	cmp	r2, r4
  bcc FillZerobss
3400c09e:	d3fb      	bcc.n	3400c098 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3400c0a0:	f001 f864 	bl	3400d16c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3400c0a4:	f7f5 f800 	bl	340010a8 <main>

3400c0a8 <LoopForever>:

LoopForever:
  b LoopForever
3400c0a8:	e7fe      	b.n	3400c0a8 <LoopForever>
3400c0aa:	0000      	.short	0x0000
  ldr   r0, =_sstack
3400c0ac:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3400c0b0:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3400c0b4:	3400f9ac 	.word	0x3400f9ac
  ldr r1, =_edata
3400c0b8:	3400fb98 	.word	0x3400fb98
  ldr r2, =_sidata
3400c0bc:	3400f9ac 	.word	0x3400f9ac
  ldr r2, =_sbss
3400c0c0:	3400fb98 	.word	0x3400fb98
  ldr r4, =_ebss
3400c0c4:	3401054c 	.word	0x3401054c

3400c0c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3400c0c8:	e7fe      	b.n	3400c0c8 <ADC1_2_IRQHandler>
	...

3400c0cc <__assert_func>:
3400c0cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400c0ce:	4614      	mov	r4, r2
3400c0d0:	461a      	mov	r2, r3
3400c0d2:	4b09      	ldr	r3, [pc, #36]	@ (3400c0f8 <__assert_func+0x2c>)
3400c0d4:	4605      	mov	r5, r0
3400c0d6:	681b      	ldr	r3, [r3, #0]
3400c0d8:	68d8      	ldr	r0, [r3, #12]
3400c0da:	b14c      	cbz	r4, 3400c0f0 <__assert_func+0x24>
3400c0dc:	4b07      	ldr	r3, [pc, #28]	@ (3400c0fc <__assert_func+0x30>)
3400c0de:	9100      	str	r1, [sp, #0]
3400c0e0:	4907      	ldr	r1, [pc, #28]	@ (3400c100 <__assert_func+0x34>)
3400c0e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400c0e6:	462b      	mov	r3, r5
3400c0e8:	f000 fe60 	bl	3400cdac <fiprintf>
3400c0ec:	f001 f880 	bl	3400d1f0 <abort>
3400c0f0:	4b04      	ldr	r3, [pc, #16]	@ (3400c104 <__assert_func+0x38>)
3400c0f2:	461c      	mov	r4, r3
3400c0f4:	e7f3      	b.n	3400c0de <__assert_func+0x12>
3400c0f6:	bf00      	nop
3400c0f8:	3400f9dc 	.word	0x3400f9dc
3400c0fc:	3400f5b4 	.word	0x3400f5b4
3400c100:	3400f5c1 	.word	0x3400f5c1
3400c104:	3400f5ef 	.word	0x3400f5ef

3400c108 <malloc>:
3400c108:	4b02      	ldr	r3, [pc, #8]	@ (3400c114 <malloc+0xc>)
3400c10a:	4601      	mov	r1, r0
3400c10c:	6818      	ldr	r0, [r3, #0]
3400c10e:	f000 b825 	b.w	3400c15c <_malloc_r>
3400c112:	bf00      	nop
3400c114:	3400f9dc 	.word	0x3400f9dc

3400c118 <sbrk_aligned>:
3400c118:	b570      	push	{r4, r5, r6, lr}
3400c11a:	4e0f      	ldr	r6, [pc, #60]	@ (3400c158 <sbrk_aligned+0x40>)
3400c11c:	460c      	mov	r4, r1
3400c11e:	4605      	mov	r5, r0
3400c120:	6831      	ldr	r1, [r6, #0]
3400c122:	b911      	cbnz	r1, 3400c12a <sbrk_aligned+0x12>
3400c124:	f000 fffa 	bl	3400d11c <_sbrk_r>
3400c128:	6030      	str	r0, [r6, #0]
3400c12a:	4621      	mov	r1, r4
3400c12c:	4628      	mov	r0, r5
3400c12e:	f000 fff5 	bl	3400d11c <_sbrk_r>
3400c132:	1c43      	adds	r3, r0, #1
3400c134:	d103      	bne.n	3400c13e <sbrk_aligned+0x26>
3400c136:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3400c13a:	4620      	mov	r0, r4
3400c13c:	bd70      	pop	{r4, r5, r6, pc}
3400c13e:	1cc4      	adds	r4, r0, #3
3400c140:	f024 0403 	bic.w	r4, r4, #3
3400c144:	42a0      	cmp	r0, r4
3400c146:	d0f8      	beq.n	3400c13a <sbrk_aligned+0x22>
3400c148:	1a21      	subs	r1, r4, r0
3400c14a:	4628      	mov	r0, r5
3400c14c:	f000 ffe6 	bl	3400d11c <_sbrk_r>
3400c150:	3001      	adds	r0, #1
3400c152:	d1f2      	bne.n	3400c13a <sbrk_aligned+0x22>
3400c154:	e7ef      	b.n	3400c136 <sbrk_aligned+0x1e>
3400c156:	bf00      	nop
3400c158:	340103fc 	.word	0x340103fc

3400c15c <_malloc_r>:
3400c15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400c160:	1ccd      	adds	r5, r1, #3
3400c162:	4606      	mov	r6, r0
3400c164:	f025 0503 	bic.w	r5, r5, #3
3400c168:	3508      	adds	r5, #8
3400c16a:	2d0c      	cmp	r5, #12
3400c16c:	bf38      	it	cc
3400c16e:	250c      	movcc	r5, #12
3400c170:	2d00      	cmp	r5, #0
3400c172:	db01      	blt.n	3400c178 <_malloc_r+0x1c>
3400c174:	42a9      	cmp	r1, r5
3400c176:	d904      	bls.n	3400c182 <_malloc_r+0x26>
3400c178:	230c      	movs	r3, #12
3400c17a:	6033      	str	r3, [r6, #0]
3400c17c:	2000      	movs	r0, #0
3400c17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400c182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3400c258 <_malloc_r+0xfc>
3400c186:	f000 f869 	bl	3400c25c <__malloc_lock>
3400c18a:	f8d8 3000 	ldr.w	r3, [r8]
3400c18e:	461c      	mov	r4, r3
3400c190:	bb44      	cbnz	r4, 3400c1e4 <_malloc_r+0x88>
3400c192:	4629      	mov	r1, r5
3400c194:	4630      	mov	r0, r6
3400c196:	f7ff ffbf 	bl	3400c118 <sbrk_aligned>
3400c19a:	1c43      	adds	r3, r0, #1
3400c19c:	4604      	mov	r4, r0
3400c19e:	d158      	bne.n	3400c252 <_malloc_r+0xf6>
3400c1a0:	f8d8 4000 	ldr.w	r4, [r8]
3400c1a4:	4627      	mov	r7, r4
3400c1a6:	2f00      	cmp	r7, #0
3400c1a8:	d143      	bne.n	3400c232 <_malloc_r+0xd6>
3400c1aa:	2c00      	cmp	r4, #0
3400c1ac:	d04b      	beq.n	3400c246 <_malloc_r+0xea>
3400c1ae:	6823      	ldr	r3, [r4, #0]
3400c1b0:	4639      	mov	r1, r7
3400c1b2:	4630      	mov	r0, r6
3400c1b4:	eb04 0903 	add.w	r9, r4, r3
3400c1b8:	f000 ffb0 	bl	3400d11c <_sbrk_r>
3400c1bc:	4581      	cmp	r9, r0
3400c1be:	d142      	bne.n	3400c246 <_malloc_r+0xea>
3400c1c0:	6821      	ldr	r1, [r4, #0]
3400c1c2:	4630      	mov	r0, r6
3400c1c4:	1a6d      	subs	r5, r5, r1
3400c1c6:	4629      	mov	r1, r5
3400c1c8:	f7ff ffa6 	bl	3400c118 <sbrk_aligned>
3400c1cc:	3001      	adds	r0, #1
3400c1ce:	d03a      	beq.n	3400c246 <_malloc_r+0xea>
3400c1d0:	6823      	ldr	r3, [r4, #0]
3400c1d2:	442b      	add	r3, r5
3400c1d4:	6023      	str	r3, [r4, #0]
3400c1d6:	f8d8 3000 	ldr.w	r3, [r8]
3400c1da:	685a      	ldr	r2, [r3, #4]
3400c1dc:	bb62      	cbnz	r2, 3400c238 <_malloc_r+0xdc>
3400c1de:	f8c8 7000 	str.w	r7, [r8]
3400c1e2:	e00f      	b.n	3400c204 <_malloc_r+0xa8>
3400c1e4:	6822      	ldr	r2, [r4, #0]
3400c1e6:	1b52      	subs	r2, r2, r5
3400c1e8:	d420      	bmi.n	3400c22c <_malloc_r+0xd0>
3400c1ea:	2a0b      	cmp	r2, #11
3400c1ec:	d917      	bls.n	3400c21e <_malloc_r+0xc2>
3400c1ee:	1961      	adds	r1, r4, r5
3400c1f0:	42a3      	cmp	r3, r4
3400c1f2:	6025      	str	r5, [r4, #0]
3400c1f4:	bf18      	it	ne
3400c1f6:	6059      	strne	r1, [r3, #4]
3400c1f8:	6863      	ldr	r3, [r4, #4]
3400c1fa:	bf08      	it	eq
3400c1fc:	f8c8 1000 	streq.w	r1, [r8]
3400c200:	5162      	str	r2, [r4, r5]
3400c202:	604b      	str	r3, [r1, #4]
3400c204:	4630      	mov	r0, r6
3400c206:	f000 f82f 	bl	3400c268 <__malloc_unlock>
3400c20a:	f104 000b 	add.w	r0, r4, #11
3400c20e:	1d23      	adds	r3, r4, #4
3400c210:	f020 0007 	bic.w	r0, r0, #7
3400c214:	1ac2      	subs	r2, r0, r3
3400c216:	bf1c      	itt	ne
3400c218:	1a1b      	subne	r3, r3, r0
3400c21a:	50a3      	strne	r3, [r4, r2]
3400c21c:	e7af      	b.n	3400c17e <_malloc_r+0x22>
3400c21e:	6862      	ldr	r2, [r4, #4]
3400c220:	42a3      	cmp	r3, r4
3400c222:	bf0c      	ite	eq
3400c224:	f8c8 2000 	streq.w	r2, [r8]
3400c228:	605a      	strne	r2, [r3, #4]
3400c22a:	e7eb      	b.n	3400c204 <_malloc_r+0xa8>
3400c22c:	4623      	mov	r3, r4
3400c22e:	6864      	ldr	r4, [r4, #4]
3400c230:	e7ae      	b.n	3400c190 <_malloc_r+0x34>
3400c232:	463c      	mov	r4, r7
3400c234:	687f      	ldr	r7, [r7, #4]
3400c236:	e7b6      	b.n	3400c1a6 <_malloc_r+0x4a>
3400c238:	461a      	mov	r2, r3
3400c23a:	685b      	ldr	r3, [r3, #4]
3400c23c:	42a3      	cmp	r3, r4
3400c23e:	d1fb      	bne.n	3400c238 <_malloc_r+0xdc>
3400c240:	2300      	movs	r3, #0
3400c242:	6053      	str	r3, [r2, #4]
3400c244:	e7de      	b.n	3400c204 <_malloc_r+0xa8>
3400c246:	230c      	movs	r3, #12
3400c248:	4630      	mov	r0, r6
3400c24a:	6033      	str	r3, [r6, #0]
3400c24c:	f000 f80c 	bl	3400c268 <__malloc_unlock>
3400c250:	e794      	b.n	3400c17c <_malloc_r+0x20>
3400c252:	6005      	str	r5, [r0, #0]
3400c254:	e7d6      	b.n	3400c204 <_malloc_r+0xa8>
3400c256:	bf00      	nop
3400c258:	34010400 	.word	0x34010400

3400c25c <__malloc_lock>:
3400c25c:	4801      	ldr	r0, [pc, #4]	@ (3400c264 <__malloc_lock+0x8>)
3400c25e:	f000 bfaa 	b.w	3400d1b6 <__retarget_lock_acquire_recursive>
3400c262:	bf00      	nop
3400c264:	34010544 	.word	0x34010544

3400c268 <__malloc_unlock>:
3400c268:	4801      	ldr	r0, [pc, #4]	@ (3400c270 <__malloc_unlock+0x8>)
3400c26a:	f000 bfa5 	b.w	3400d1b8 <__retarget_lock_release_recursive>
3400c26e:	bf00      	nop
3400c270:	34010544 	.word	0x34010544

3400c274 <__cvt>:
3400c274:	b5f0      	push	{r4, r5, r6, r7, lr}
3400c276:	ed2d 8b02 	vpush	{d8}
3400c27a:	eeb0 8b40 	vmov.f64	d8, d0
3400c27e:	b085      	sub	sp, #20
3400c280:	4617      	mov	r7, r2
3400c282:	460c      	mov	r4, r1
3400c284:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3400c286:	ee18 2a90 	vmov	r2, s17
3400c28a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400c28c:	f025 0520 	bic.w	r5, r5, #32
3400c290:	2a00      	cmp	r2, #0
3400c292:	bfb6      	itet	lt
3400c294:	222d      	movlt	r2, #45	@ 0x2d
3400c296:	2200      	movge	r2, #0
3400c298:	eeb1 8b40 	vneglt.f64	d8, d0
3400c29c:	2d46      	cmp	r5, #70	@ 0x46
3400c29e:	701a      	strb	r2, [r3, #0]
3400c2a0:	d004      	beq.n	3400c2ac <__cvt+0x38>
3400c2a2:	2d45      	cmp	r5, #69	@ 0x45
3400c2a4:	d100      	bne.n	3400c2a8 <__cvt+0x34>
3400c2a6:	3401      	adds	r4, #1
3400c2a8:	2102      	movs	r1, #2
3400c2aa:	e000      	b.n	3400c2ae <__cvt+0x3a>
3400c2ac:	2103      	movs	r1, #3
3400c2ae:	ab03      	add	r3, sp, #12
3400c2b0:	eeb0 0b48 	vmov.f64	d0, d8
3400c2b4:	4622      	mov	r2, r4
3400c2b6:	9301      	str	r3, [sp, #4]
3400c2b8:	ab02      	add	r3, sp, #8
3400c2ba:	9300      	str	r3, [sp, #0]
3400c2bc:	4633      	mov	r3, r6
3400c2be:	f001 f82b 	bl	3400d318 <_dtoa_r>
3400c2c2:	2d47      	cmp	r5, #71	@ 0x47
3400c2c4:	d114      	bne.n	3400c2f0 <__cvt+0x7c>
3400c2c6:	07fb      	lsls	r3, r7, #31
3400c2c8:	d50a      	bpl.n	3400c2e0 <__cvt+0x6c>
3400c2ca:	1902      	adds	r2, r0, r4
3400c2cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400c2d0:	2130      	movs	r1, #48	@ 0x30
3400c2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c2d6:	bf08      	it	eq
3400c2d8:	9203      	streq	r2, [sp, #12]
3400c2da:	9b03      	ldr	r3, [sp, #12]
3400c2dc:	4293      	cmp	r3, r2
3400c2de:	d319      	bcc.n	3400c314 <__cvt+0xa0>
3400c2e0:	9b03      	ldr	r3, [sp, #12]
3400c2e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400c2e4:	1a1b      	subs	r3, r3, r0
3400c2e6:	6013      	str	r3, [r2, #0]
3400c2e8:	b005      	add	sp, #20
3400c2ea:	ecbd 8b02 	vpop	{d8}
3400c2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400c2f0:	2d46      	cmp	r5, #70	@ 0x46
3400c2f2:	eb00 0204 	add.w	r2, r0, r4
3400c2f6:	d1e9      	bne.n	3400c2cc <__cvt+0x58>
3400c2f8:	7803      	ldrb	r3, [r0, #0]
3400c2fa:	2b30      	cmp	r3, #48	@ 0x30
3400c2fc:	d107      	bne.n	3400c30e <__cvt+0x9a>
3400c2fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400c302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c306:	bf1c      	itt	ne
3400c308:	f1c4 0401 	rsbne	r4, r4, #1
3400c30c:	6034      	strne	r4, [r6, #0]
3400c30e:	6833      	ldr	r3, [r6, #0]
3400c310:	441a      	add	r2, r3
3400c312:	e7db      	b.n	3400c2cc <__cvt+0x58>
3400c314:	1c5c      	adds	r4, r3, #1
3400c316:	9403      	str	r4, [sp, #12]
3400c318:	7019      	strb	r1, [r3, #0]
3400c31a:	e7de      	b.n	3400c2da <__cvt+0x66>

3400c31c <__exponent>:
3400c31c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400c31e:	2900      	cmp	r1, #0
3400c320:	7002      	strb	r2, [r0, #0]
3400c322:	bfba      	itte	lt
3400c324:	4249      	neglt	r1, r1
3400c326:	232d      	movlt	r3, #45	@ 0x2d
3400c328:	232b      	movge	r3, #43	@ 0x2b
3400c32a:	2909      	cmp	r1, #9
3400c32c:	7043      	strb	r3, [r0, #1]
3400c32e:	dd28      	ble.n	3400c382 <__exponent+0x66>
3400c330:	f10d 0307 	add.w	r3, sp, #7
3400c334:	270a      	movs	r7, #10
3400c336:	461d      	mov	r5, r3
3400c338:	461a      	mov	r2, r3
3400c33a:	3b01      	subs	r3, #1
3400c33c:	fbb1 f6f7 	udiv	r6, r1, r7
3400c340:	fb07 1416 	mls	r4, r7, r6, r1
3400c344:	3430      	adds	r4, #48	@ 0x30
3400c346:	f802 4c01 	strb.w	r4, [r2, #-1]
3400c34a:	460c      	mov	r4, r1
3400c34c:	4631      	mov	r1, r6
3400c34e:	2c63      	cmp	r4, #99	@ 0x63
3400c350:	dcf2      	bgt.n	3400c338 <__exponent+0x1c>
3400c352:	3130      	adds	r1, #48	@ 0x30
3400c354:	1e94      	subs	r4, r2, #2
3400c356:	f803 1c01 	strb.w	r1, [r3, #-1]
3400c35a:	1c41      	adds	r1, r0, #1
3400c35c:	4623      	mov	r3, r4
3400c35e:	42ab      	cmp	r3, r5
3400c360:	d30a      	bcc.n	3400c378 <__exponent+0x5c>
3400c362:	f10d 0309 	add.w	r3, sp, #9
3400c366:	1a9b      	subs	r3, r3, r2
3400c368:	42ac      	cmp	r4, r5
3400c36a:	bf88      	it	hi
3400c36c:	2300      	movhi	r3, #0
3400c36e:	3302      	adds	r3, #2
3400c370:	4403      	add	r3, r0
3400c372:	1a18      	subs	r0, r3, r0
3400c374:	b003      	add	sp, #12
3400c376:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400c378:	f813 6b01 	ldrb.w	r6, [r3], #1
3400c37c:	f801 6f01 	strb.w	r6, [r1, #1]!
3400c380:	e7ed      	b.n	3400c35e <__exponent+0x42>
3400c382:	2330      	movs	r3, #48	@ 0x30
3400c384:	3130      	adds	r1, #48	@ 0x30
3400c386:	7083      	strb	r3, [r0, #2]
3400c388:	1d03      	adds	r3, r0, #4
3400c38a:	70c1      	strb	r1, [r0, #3]
3400c38c:	e7f1      	b.n	3400c372 <__exponent+0x56>
	...

3400c390 <_printf_float>:
3400c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400c394:	b08d      	sub	sp, #52	@ 0x34
3400c396:	460c      	mov	r4, r1
3400c398:	4616      	mov	r6, r2
3400c39a:	461f      	mov	r7, r3
3400c39c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3400c3a0:	4605      	mov	r5, r0
3400c3a2:	f000 fe83 	bl	3400d0ac <_localeconv_r>
3400c3a6:	f8d0 b000 	ldr.w	fp, [r0]
3400c3aa:	4658      	mov	r0, fp
3400c3ac:	f7f4 f9f0 	bl	34000790 <strlen>
3400c3b0:	2300      	movs	r3, #0
3400c3b2:	f894 9018 	ldrb.w	r9, [r4, #24]
3400c3b6:	930a      	str	r3, [sp, #40]	@ 0x28
3400c3b8:	f8d8 3000 	ldr.w	r3, [r8]
3400c3bc:	6822      	ldr	r2, [r4, #0]
3400c3be:	3307      	adds	r3, #7
3400c3c0:	9005      	str	r0, [sp, #20]
3400c3c2:	f023 0307 	bic.w	r3, r3, #7
3400c3c6:	f103 0108 	add.w	r1, r3, #8
3400c3ca:	f8c8 1000 	str.w	r1, [r8]
3400c3ce:	ed93 0b00 	vldr	d0, [r3]
3400c3d2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3400c630 <_printf_float+0x2a0>
3400c3d6:	eeb0 7bc0 	vabs.f64	d7, d0
3400c3da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3400c3de:	eeb4 7b46 	vcmp.f64	d7, d6
3400c3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c3e6:	dd24      	ble.n	3400c432 <_printf_float+0xa2>
3400c3e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3400c3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c3f0:	d502      	bpl.n	3400c3f8 <_printf_float+0x68>
3400c3f2:	232d      	movs	r3, #45	@ 0x2d
3400c3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400c3f8:	498f      	ldr	r1, [pc, #572]	@ (3400c638 <_printf_float+0x2a8>)
3400c3fa:	4b90      	ldr	r3, [pc, #576]	@ (3400c63c <_printf_float+0x2ac>)
3400c3fc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3400c400:	bf8c      	ite	hi
3400c402:	4688      	movhi	r8, r1
3400c404:	4698      	movls	r8, r3
3400c406:	f022 0204 	bic.w	r2, r2, #4
3400c40a:	2303      	movs	r3, #3
3400c40c:	f04f 0a00 	mov.w	sl, #0
3400c410:	6022      	str	r2, [r4, #0]
3400c412:	6123      	str	r3, [r4, #16]
3400c414:	4633      	mov	r3, r6
3400c416:	aa0b      	add	r2, sp, #44	@ 0x2c
3400c418:	4621      	mov	r1, r4
3400c41a:	4628      	mov	r0, r5
3400c41c:	9700      	str	r7, [sp, #0]
3400c41e:	f000 f9d1 	bl	3400c7c4 <_printf_common>
3400c422:	3001      	adds	r0, #1
3400c424:	f040 8089 	bne.w	3400c53a <_printf_float+0x1aa>
3400c428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400c42c:	b00d      	add	sp, #52	@ 0x34
3400c42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400c432:	eeb4 0b40 	vcmp.f64	d0, d0
3400c436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c43a:	d709      	bvc.n	3400c450 <_printf_float+0xc0>
3400c43c:	ee10 3a90 	vmov	r3, s1
3400c440:	497f      	ldr	r1, [pc, #508]	@ (3400c640 <_printf_float+0x2b0>)
3400c442:	2b00      	cmp	r3, #0
3400c444:	bfbc      	itt	lt
3400c446:	232d      	movlt	r3, #45	@ 0x2d
3400c448:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3400c44c:	4b7d      	ldr	r3, [pc, #500]	@ (3400c644 <_printf_float+0x2b4>)
3400c44e:	e7d5      	b.n	3400c3fc <_printf_float+0x6c>
3400c450:	6863      	ldr	r3, [r4, #4]
3400c452:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3400c456:	1c59      	adds	r1, r3, #1
3400c458:	d139      	bne.n	3400c4ce <_printf_float+0x13e>
3400c45a:	2306      	movs	r3, #6
3400c45c:	6063      	str	r3, [r4, #4]
3400c45e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3400c462:	2300      	movs	r3, #0
3400c464:	4628      	mov	r0, r5
3400c466:	6022      	str	r2, [r4, #0]
3400c468:	9303      	str	r3, [sp, #12]
3400c46a:	ab0a      	add	r3, sp, #40	@ 0x28
3400c46c:	e9cd 9301 	strd	r9, r3, [sp, #4]
3400c470:	ab09      	add	r3, sp, #36	@ 0x24
3400c472:	9300      	str	r3, [sp, #0]
3400c474:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3400c478:	6861      	ldr	r1, [r4, #4]
3400c47a:	f7ff fefb 	bl	3400c274 <__cvt>
3400c47e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400c482:	4680      	mov	r8, r0
3400c484:	9909      	ldr	r1, [sp, #36]	@ 0x24
3400c486:	d129      	bne.n	3400c4dc <_printf_float+0x14c>
3400c488:	1cc8      	adds	r0, r1, #3
3400c48a:	db02      	blt.n	3400c492 <_printf_float+0x102>
3400c48c:	6863      	ldr	r3, [r4, #4]
3400c48e:	4299      	cmp	r1, r3
3400c490:	dd41      	ble.n	3400c516 <_printf_float+0x186>
3400c492:	f1a9 0902 	sub.w	r9, r9, #2
3400c496:	fa5f f989 	uxtb.w	r9, r9
3400c49a:	3901      	subs	r1, #1
3400c49c:	464a      	mov	r2, r9
3400c49e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3400c4a2:	9109      	str	r1, [sp, #36]	@ 0x24
3400c4a4:	f7ff ff3a 	bl	3400c31c <__exponent>
3400c4a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400c4aa:	4682      	mov	sl, r0
3400c4ac:	1813      	adds	r3, r2, r0
3400c4ae:	2a01      	cmp	r2, #1
3400c4b0:	6123      	str	r3, [r4, #16]
3400c4b2:	dc02      	bgt.n	3400c4ba <_printf_float+0x12a>
3400c4b4:	6822      	ldr	r2, [r4, #0]
3400c4b6:	07d2      	lsls	r2, r2, #31
3400c4b8:	d501      	bpl.n	3400c4be <_printf_float+0x12e>
3400c4ba:	3301      	adds	r3, #1
3400c4bc:	6123      	str	r3, [r4, #16]
3400c4be:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3400c4c2:	2b00      	cmp	r3, #0
3400c4c4:	d0a6      	beq.n	3400c414 <_printf_float+0x84>
3400c4c6:	232d      	movs	r3, #45	@ 0x2d
3400c4c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400c4cc:	e7a2      	b.n	3400c414 <_printf_float+0x84>
3400c4ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400c4d2:	d1c4      	bne.n	3400c45e <_printf_float+0xce>
3400c4d4:	2b00      	cmp	r3, #0
3400c4d6:	d1c2      	bne.n	3400c45e <_printf_float+0xce>
3400c4d8:	2301      	movs	r3, #1
3400c4da:	e7bf      	b.n	3400c45c <_printf_float+0xcc>
3400c4dc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400c4e0:	d9db      	bls.n	3400c49a <_printf_float+0x10a>
3400c4e2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3400c4e6:	d118      	bne.n	3400c51a <_printf_float+0x18a>
3400c4e8:	2900      	cmp	r1, #0
3400c4ea:	6863      	ldr	r3, [r4, #4]
3400c4ec:	dd0b      	ble.n	3400c506 <_printf_float+0x176>
3400c4ee:	6121      	str	r1, [r4, #16]
3400c4f0:	b913      	cbnz	r3, 3400c4f8 <_printf_float+0x168>
3400c4f2:	6822      	ldr	r2, [r4, #0]
3400c4f4:	07d0      	lsls	r0, r2, #31
3400c4f6:	d502      	bpl.n	3400c4fe <_printf_float+0x16e>
3400c4f8:	3301      	adds	r3, #1
3400c4fa:	440b      	add	r3, r1
3400c4fc:	6123      	str	r3, [r4, #16]
3400c4fe:	f04f 0a00 	mov.w	sl, #0
3400c502:	65a1      	str	r1, [r4, #88]	@ 0x58
3400c504:	e7db      	b.n	3400c4be <_printf_float+0x12e>
3400c506:	b913      	cbnz	r3, 3400c50e <_printf_float+0x17e>
3400c508:	6822      	ldr	r2, [r4, #0]
3400c50a:	07d2      	lsls	r2, r2, #31
3400c50c:	d501      	bpl.n	3400c512 <_printf_float+0x182>
3400c50e:	3302      	adds	r3, #2
3400c510:	e7f4      	b.n	3400c4fc <_printf_float+0x16c>
3400c512:	2301      	movs	r3, #1
3400c514:	e7f2      	b.n	3400c4fc <_printf_float+0x16c>
3400c516:	f04f 0967 	mov.w	r9, #103	@ 0x67
3400c51a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400c51c:	4299      	cmp	r1, r3
3400c51e:	db05      	blt.n	3400c52c <_printf_float+0x19c>
3400c520:	6823      	ldr	r3, [r4, #0]
3400c522:	6121      	str	r1, [r4, #16]
3400c524:	07d8      	lsls	r0, r3, #31
3400c526:	d5ea      	bpl.n	3400c4fe <_printf_float+0x16e>
3400c528:	1c4b      	adds	r3, r1, #1
3400c52a:	e7e7      	b.n	3400c4fc <_printf_float+0x16c>
3400c52c:	2900      	cmp	r1, #0
3400c52e:	bfd4      	ite	le
3400c530:	f1c1 0202 	rsble	r2, r1, #2
3400c534:	2201      	movgt	r2, #1
3400c536:	4413      	add	r3, r2
3400c538:	e7e0      	b.n	3400c4fc <_printf_float+0x16c>
3400c53a:	6823      	ldr	r3, [r4, #0]
3400c53c:	055a      	lsls	r2, r3, #21
3400c53e:	d407      	bmi.n	3400c550 <_printf_float+0x1c0>
3400c540:	6923      	ldr	r3, [r4, #16]
3400c542:	4642      	mov	r2, r8
3400c544:	4631      	mov	r1, r6
3400c546:	4628      	mov	r0, r5
3400c548:	47b8      	blx	r7
3400c54a:	3001      	adds	r0, #1
3400c54c:	d12a      	bne.n	3400c5a4 <_printf_float+0x214>
3400c54e:	e76b      	b.n	3400c428 <_printf_float+0x98>
3400c550:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400c554:	f240 80e0 	bls.w	3400c718 <_printf_float+0x388>
3400c558:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400c55c:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400c560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c564:	d133      	bne.n	3400c5ce <_printf_float+0x23e>
3400c566:	2301      	movs	r3, #1
3400c568:	4a37      	ldr	r2, [pc, #220]	@ (3400c648 <_printf_float+0x2b8>)
3400c56a:	4631      	mov	r1, r6
3400c56c:	4628      	mov	r0, r5
3400c56e:	47b8      	blx	r7
3400c570:	3001      	adds	r0, #1
3400c572:	f43f af59 	beq.w	3400c428 <_printf_float+0x98>
3400c576:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3400c57a:	4543      	cmp	r3, r8
3400c57c:	db02      	blt.n	3400c584 <_printf_float+0x1f4>
3400c57e:	6823      	ldr	r3, [r4, #0]
3400c580:	07d8      	lsls	r0, r3, #31
3400c582:	d50f      	bpl.n	3400c5a4 <_printf_float+0x214>
3400c584:	9b05      	ldr	r3, [sp, #20]
3400c586:	465a      	mov	r2, fp
3400c588:	4631      	mov	r1, r6
3400c58a:	4628      	mov	r0, r5
3400c58c:	47b8      	blx	r7
3400c58e:	3001      	adds	r0, #1
3400c590:	f43f af4a 	beq.w	3400c428 <_printf_float+0x98>
3400c594:	f04f 0900 	mov.w	r9, #0
3400c598:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400c59c:	f104 0a1a 	add.w	sl, r4, #26
3400c5a0:	45c8      	cmp	r8, r9
3400c5a2:	dc09      	bgt.n	3400c5b8 <_printf_float+0x228>
3400c5a4:	6823      	ldr	r3, [r4, #0]
3400c5a6:	079b      	lsls	r3, r3, #30
3400c5a8:	f100 8107 	bmi.w	3400c7ba <_printf_float+0x42a>
3400c5ac:	68e0      	ldr	r0, [r4, #12]
3400c5ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400c5b0:	4298      	cmp	r0, r3
3400c5b2:	bfb8      	it	lt
3400c5b4:	4618      	movlt	r0, r3
3400c5b6:	e739      	b.n	3400c42c <_printf_float+0x9c>
3400c5b8:	2301      	movs	r3, #1
3400c5ba:	4652      	mov	r2, sl
3400c5bc:	4631      	mov	r1, r6
3400c5be:	4628      	mov	r0, r5
3400c5c0:	47b8      	blx	r7
3400c5c2:	3001      	adds	r0, #1
3400c5c4:	f43f af30 	beq.w	3400c428 <_printf_float+0x98>
3400c5c8:	f109 0901 	add.w	r9, r9, #1
3400c5cc:	e7e8      	b.n	3400c5a0 <_printf_float+0x210>
3400c5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400c5d0:	2b00      	cmp	r3, #0
3400c5d2:	dc3b      	bgt.n	3400c64c <_printf_float+0x2bc>
3400c5d4:	2301      	movs	r3, #1
3400c5d6:	4a1c      	ldr	r2, [pc, #112]	@ (3400c648 <_printf_float+0x2b8>)
3400c5d8:	4631      	mov	r1, r6
3400c5da:	4628      	mov	r0, r5
3400c5dc:	47b8      	blx	r7
3400c5de:	3001      	adds	r0, #1
3400c5e0:	f43f af22 	beq.w	3400c428 <_printf_float+0x98>
3400c5e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3400c5e8:	ea59 0303 	orrs.w	r3, r9, r3
3400c5ec:	d102      	bne.n	3400c5f4 <_printf_float+0x264>
3400c5ee:	6823      	ldr	r3, [r4, #0]
3400c5f0:	07d9      	lsls	r1, r3, #31
3400c5f2:	d5d7      	bpl.n	3400c5a4 <_printf_float+0x214>
3400c5f4:	9b05      	ldr	r3, [sp, #20]
3400c5f6:	465a      	mov	r2, fp
3400c5f8:	4631      	mov	r1, r6
3400c5fa:	4628      	mov	r0, r5
3400c5fc:	47b8      	blx	r7
3400c5fe:	3001      	adds	r0, #1
3400c600:	f43f af12 	beq.w	3400c428 <_printf_float+0x98>
3400c604:	f04f 0a00 	mov.w	sl, #0
3400c608:	f104 0b1a 	add.w	fp, r4, #26
3400c60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400c60e:	425b      	negs	r3, r3
3400c610:	4553      	cmp	r3, sl
3400c612:	dc01      	bgt.n	3400c618 <_printf_float+0x288>
3400c614:	464b      	mov	r3, r9
3400c616:	e794      	b.n	3400c542 <_printf_float+0x1b2>
3400c618:	2301      	movs	r3, #1
3400c61a:	465a      	mov	r2, fp
3400c61c:	4631      	mov	r1, r6
3400c61e:	4628      	mov	r0, r5
3400c620:	47b8      	blx	r7
3400c622:	3001      	adds	r0, #1
3400c624:	f43f af00 	beq.w	3400c428 <_printf_float+0x98>
3400c628:	f10a 0a01 	add.w	sl, sl, #1
3400c62c:	e7ee      	b.n	3400c60c <_printf_float+0x27c>
3400c62e:	bf00      	nop
3400c630:	ffffffff 	.word	0xffffffff
3400c634:	7fefffff 	.word	0x7fefffff
3400c638:	3400f5f4 	.word	0x3400f5f4
3400c63c:	3400f5f0 	.word	0x3400f5f0
3400c640:	3400f5fc 	.word	0x3400f5fc
3400c644:	3400f5f8 	.word	0x3400f5f8
3400c648:	3400f568 	.word	0x3400f568
3400c64c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400c64e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3400c652:	4553      	cmp	r3, sl
3400c654:	bfa8      	it	ge
3400c656:	4653      	movge	r3, sl
3400c658:	2b00      	cmp	r3, #0
3400c65a:	4699      	mov	r9, r3
3400c65c:	dc37      	bgt.n	3400c6ce <_printf_float+0x33e>
3400c65e:	2300      	movs	r3, #0
3400c660:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400c664:	f104 021a 	add.w	r2, r4, #26
3400c668:	9307      	str	r3, [sp, #28]
3400c66a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400c66c:	9907      	ldr	r1, [sp, #28]
3400c66e:	9306      	str	r3, [sp, #24]
3400c670:	eba3 0309 	sub.w	r3, r3, r9
3400c674:	428b      	cmp	r3, r1
3400c676:	dc31      	bgt.n	3400c6dc <_printf_float+0x34c>
3400c678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400c67a:	459a      	cmp	sl, r3
3400c67c:	dc3b      	bgt.n	3400c6f6 <_printf_float+0x366>
3400c67e:	6823      	ldr	r3, [r4, #0]
3400c680:	07da      	lsls	r2, r3, #31
3400c682:	d438      	bmi.n	3400c6f6 <_printf_float+0x366>
3400c684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400c686:	ebaa 0903 	sub.w	r9, sl, r3
3400c68a:	9b06      	ldr	r3, [sp, #24]
3400c68c:	ebaa 0303 	sub.w	r3, sl, r3
3400c690:	4599      	cmp	r9, r3
3400c692:	bfa8      	it	ge
3400c694:	4699      	movge	r9, r3
3400c696:	f1b9 0f00 	cmp.w	r9, #0
3400c69a:	dc34      	bgt.n	3400c706 <_printf_float+0x376>
3400c69c:	f04f 0800 	mov.w	r8, #0
3400c6a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400c6a4:	f104 0b1a 	add.w	fp, r4, #26
3400c6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400c6aa:	ebaa 0303 	sub.w	r3, sl, r3
3400c6ae:	eba3 0309 	sub.w	r3, r3, r9
3400c6b2:	4543      	cmp	r3, r8
3400c6b4:	f77f af76 	ble.w	3400c5a4 <_printf_float+0x214>
3400c6b8:	2301      	movs	r3, #1
3400c6ba:	465a      	mov	r2, fp
3400c6bc:	4631      	mov	r1, r6
3400c6be:	4628      	mov	r0, r5
3400c6c0:	47b8      	blx	r7
3400c6c2:	3001      	adds	r0, #1
3400c6c4:	f43f aeb0 	beq.w	3400c428 <_printf_float+0x98>
3400c6c8:	f108 0801 	add.w	r8, r8, #1
3400c6cc:	e7ec      	b.n	3400c6a8 <_printf_float+0x318>
3400c6ce:	4642      	mov	r2, r8
3400c6d0:	4631      	mov	r1, r6
3400c6d2:	4628      	mov	r0, r5
3400c6d4:	47b8      	blx	r7
3400c6d6:	3001      	adds	r0, #1
3400c6d8:	d1c1      	bne.n	3400c65e <_printf_float+0x2ce>
3400c6da:	e6a5      	b.n	3400c428 <_printf_float+0x98>
3400c6dc:	2301      	movs	r3, #1
3400c6de:	4631      	mov	r1, r6
3400c6e0:	4628      	mov	r0, r5
3400c6e2:	9206      	str	r2, [sp, #24]
3400c6e4:	47b8      	blx	r7
3400c6e6:	3001      	adds	r0, #1
3400c6e8:	f43f ae9e 	beq.w	3400c428 <_printf_float+0x98>
3400c6ec:	9b07      	ldr	r3, [sp, #28]
3400c6ee:	9a06      	ldr	r2, [sp, #24]
3400c6f0:	3301      	adds	r3, #1
3400c6f2:	9307      	str	r3, [sp, #28]
3400c6f4:	e7b9      	b.n	3400c66a <_printf_float+0x2da>
3400c6f6:	9b05      	ldr	r3, [sp, #20]
3400c6f8:	465a      	mov	r2, fp
3400c6fa:	4631      	mov	r1, r6
3400c6fc:	4628      	mov	r0, r5
3400c6fe:	47b8      	blx	r7
3400c700:	3001      	adds	r0, #1
3400c702:	d1bf      	bne.n	3400c684 <_printf_float+0x2f4>
3400c704:	e690      	b.n	3400c428 <_printf_float+0x98>
3400c706:	9a06      	ldr	r2, [sp, #24]
3400c708:	464b      	mov	r3, r9
3400c70a:	4631      	mov	r1, r6
3400c70c:	4628      	mov	r0, r5
3400c70e:	4442      	add	r2, r8
3400c710:	47b8      	blx	r7
3400c712:	3001      	adds	r0, #1
3400c714:	d1c2      	bne.n	3400c69c <_printf_float+0x30c>
3400c716:	e687      	b.n	3400c428 <_printf_float+0x98>
3400c718:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3400c71c:	f1b9 0f01 	cmp.w	r9, #1
3400c720:	dc01      	bgt.n	3400c726 <_printf_float+0x396>
3400c722:	07db      	lsls	r3, r3, #31
3400c724:	d536      	bpl.n	3400c794 <_printf_float+0x404>
3400c726:	2301      	movs	r3, #1
3400c728:	4642      	mov	r2, r8
3400c72a:	4631      	mov	r1, r6
3400c72c:	4628      	mov	r0, r5
3400c72e:	47b8      	blx	r7
3400c730:	3001      	adds	r0, #1
3400c732:	f43f ae79 	beq.w	3400c428 <_printf_float+0x98>
3400c736:	9b05      	ldr	r3, [sp, #20]
3400c738:	465a      	mov	r2, fp
3400c73a:	4631      	mov	r1, r6
3400c73c:	4628      	mov	r0, r5
3400c73e:	47b8      	blx	r7
3400c740:	3001      	adds	r0, #1
3400c742:	f43f ae71 	beq.w	3400c428 <_printf_float+0x98>
3400c746:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3400c74a:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400c74e:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400c752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c756:	d018      	beq.n	3400c78a <_printf_float+0x3fa>
3400c758:	464b      	mov	r3, r9
3400c75a:	f108 0201 	add.w	r2, r8, #1
3400c75e:	4631      	mov	r1, r6
3400c760:	4628      	mov	r0, r5
3400c762:	47b8      	blx	r7
3400c764:	3001      	adds	r0, #1
3400c766:	d10c      	bne.n	3400c782 <_printf_float+0x3f2>
3400c768:	e65e      	b.n	3400c428 <_printf_float+0x98>
3400c76a:	2301      	movs	r3, #1
3400c76c:	465a      	mov	r2, fp
3400c76e:	4631      	mov	r1, r6
3400c770:	4628      	mov	r0, r5
3400c772:	47b8      	blx	r7
3400c774:	3001      	adds	r0, #1
3400c776:	f43f ae57 	beq.w	3400c428 <_printf_float+0x98>
3400c77a:	f108 0801 	add.w	r8, r8, #1
3400c77e:	45c8      	cmp	r8, r9
3400c780:	dbf3      	blt.n	3400c76a <_printf_float+0x3da>
3400c782:	4653      	mov	r3, sl
3400c784:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3400c788:	e6dc      	b.n	3400c544 <_printf_float+0x1b4>
3400c78a:	f04f 0800 	mov.w	r8, #0
3400c78e:	f104 0b1a 	add.w	fp, r4, #26
3400c792:	e7f4      	b.n	3400c77e <_printf_float+0x3ee>
3400c794:	2301      	movs	r3, #1
3400c796:	4642      	mov	r2, r8
3400c798:	e7e1      	b.n	3400c75e <_printf_float+0x3ce>
3400c79a:	2301      	movs	r3, #1
3400c79c:	464a      	mov	r2, r9
3400c79e:	4631      	mov	r1, r6
3400c7a0:	4628      	mov	r0, r5
3400c7a2:	47b8      	blx	r7
3400c7a4:	3001      	adds	r0, #1
3400c7a6:	f43f ae3f 	beq.w	3400c428 <_printf_float+0x98>
3400c7aa:	f108 0801 	add.w	r8, r8, #1
3400c7ae:	68e3      	ldr	r3, [r4, #12]
3400c7b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3400c7b2:	1a5b      	subs	r3, r3, r1
3400c7b4:	4543      	cmp	r3, r8
3400c7b6:	dcf0      	bgt.n	3400c79a <_printf_float+0x40a>
3400c7b8:	e6f8      	b.n	3400c5ac <_printf_float+0x21c>
3400c7ba:	f04f 0800 	mov.w	r8, #0
3400c7be:	f104 0919 	add.w	r9, r4, #25
3400c7c2:	e7f4      	b.n	3400c7ae <_printf_float+0x41e>

3400c7c4 <_printf_common>:
3400c7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400c7c8:	4616      	mov	r6, r2
3400c7ca:	4698      	mov	r8, r3
3400c7cc:	688a      	ldr	r2, [r1, #8]
3400c7ce:	4607      	mov	r7, r0
3400c7d0:	690b      	ldr	r3, [r1, #16]
3400c7d2:	460c      	mov	r4, r1
3400c7d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
3400c7d8:	4293      	cmp	r3, r2
3400c7da:	bfb8      	it	lt
3400c7dc:	4613      	movlt	r3, r2
3400c7de:	6033      	str	r3, [r6, #0]
3400c7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3400c7e4:	b10a      	cbz	r2, 3400c7ea <_printf_common+0x26>
3400c7e6:	3301      	adds	r3, #1
3400c7e8:	6033      	str	r3, [r6, #0]
3400c7ea:	6823      	ldr	r3, [r4, #0]
3400c7ec:	0699      	lsls	r1, r3, #26
3400c7ee:	bf42      	ittt	mi
3400c7f0:	6833      	ldrmi	r3, [r6, #0]
3400c7f2:	3302      	addmi	r3, #2
3400c7f4:	6033      	strmi	r3, [r6, #0]
3400c7f6:	6825      	ldr	r5, [r4, #0]
3400c7f8:	f015 0506 	ands.w	r5, r5, #6
3400c7fc:	d106      	bne.n	3400c80c <_printf_common+0x48>
3400c7fe:	f104 0a19 	add.w	sl, r4, #25
3400c802:	68e3      	ldr	r3, [r4, #12]
3400c804:	6832      	ldr	r2, [r6, #0]
3400c806:	1a9b      	subs	r3, r3, r2
3400c808:	42ab      	cmp	r3, r5
3400c80a:	dc2b      	bgt.n	3400c864 <_printf_common+0xa0>
3400c80c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3400c810:	6822      	ldr	r2, [r4, #0]
3400c812:	3b00      	subs	r3, #0
3400c814:	bf18      	it	ne
3400c816:	2301      	movne	r3, #1
3400c818:	0692      	lsls	r2, r2, #26
3400c81a:	d430      	bmi.n	3400c87e <_printf_common+0xba>
3400c81c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3400c820:	4641      	mov	r1, r8
3400c822:	4638      	mov	r0, r7
3400c824:	47c8      	blx	r9
3400c826:	3001      	adds	r0, #1
3400c828:	d023      	beq.n	3400c872 <_printf_common+0xae>
3400c82a:	6823      	ldr	r3, [r4, #0]
3400c82c:	341a      	adds	r4, #26
3400c82e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3400c832:	f003 0306 	and.w	r3, r3, #6
3400c836:	2b04      	cmp	r3, #4
3400c838:	bf0a      	itet	eq
3400c83a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3400c83e:	2500      	movne	r5, #0
3400c840:	6833      	ldreq	r3, [r6, #0]
3400c842:	f04f 0600 	mov.w	r6, #0
3400c846:	bf08      	it	eq
3400c848:	1aed      	subeq	r5, r5, r3
3400c84a:	f854 3c12 	ldr.w	r3, [r4, #-18]
3400c84e:	bf08      	it	eq
3400c850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3400c854:	4293      	cmp	r3, r2
3400c856:	bfc4      	itt	gt
3400c858:	1a9b      	subgt	r3, r3, r2
3400c85a:	18ed      	addgt	r5, r5, r3
3400c85c:	42b5      	cmp	r5, r6
3400c85e:	d11a      	bne.n	3400c896 <_printf_common+0xd2>
3400c860:	2000      	movs	r0, #0
3400c862:	e008      	b.n	3400c876 <_printf_common+0xb2>
3400c864:	2301      	movs	r3, #1
3400c866:	4652      	mov	r2, sl
3400c868:	4641      	mov	r1, r8
3400c86a:	4638      	mov	r0, r7
3400c86c:	47c8      	blx	r9
3400c86e:	3001      	adds	r0, #1
3400c870:	d103      	bne.n	3400c87a <_printf_common+0xb6>
3400c872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400c876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400c87a:	3501      	adds	r5, #1
3400c87c:	e7c1      	b.n	3400c802 <_printf_common+0x3e>
3400c87e:	18e1      	adds	r1, r4, r3
3400c880:	1c5a      	adds	r2, r3, #1
3400c882:	2030      	movs	r0, #48	@ 0x30
3400c884:	3302      	adds	r3, #2
3400c886:	4422      	add	r2, r4
3400c888:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3400c88c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3400c890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3400c894:	e7c2      	b.n	3400c81c <_printf_common+0x58>
3400c896:	2301      	movs	r3, #1
3400c898:	4622      	mov	r2, r4
3400c89a:	4641      	mov	r1, r8
3400c89c:	4638      	mov	r0, r7
3400c89e:	47c8      	blx	r9
3400c8a0:	3001      	adds	r0, #1
3400c8a2:	d0e6      	beq.n	3400c872 <_printf_common+0xae>
3400c8a4:	3601      	adds	r6, #1
3400c8a6:	e7d9      	b.n	3400c85c <_printf_common+0x98>

3400c8a8 <_printf_i>:
3400c8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3400c8ac:	7e0f      	ldrb	r7, [r1, #24]
3400c8ae:	4691      	mov	r9, r2
3400c8b0:	4680      	mov	r8, r0
3400c8b2:	460c      	mov	r4, r1
3400c8b4:	2f78      	cmp	r7, #120	@ 0x78
3400c8b6:	469a      	mov	sl, r3
3400c8b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400c8ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3400c8be:	d807      	bhi.n	3400c8d0 <_printf_i+0x28>
3400c8c0:	2f62      	cmp	r7, #98	@ 0x62
3400c8c2:	d80a      	bhi.n	3400c8da <_printf_i+0x32>
3400c8c4:	2f00      	cmp	r7, #0
3400c8c6:	f000 80d1 	beq.w	3400ca6c <_printf_i+0x1c4>
3400c8ca:	2f58      	cmp	r7, #88	@ 0x58
3400c8cc:	f000 80b8 	beq.w	3400ca40 <_printf_i+0x198>
3400c8d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400c8d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3400c8d8:	e03a      	b.n	3400c950 <_printf_i+0xa8>
3400c8da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3400c8de:	2b15      	cmp	r3, #21
3400c8e0:	d8f6      	bhi.n	3400c8d0 <_printf_i+0x28>
3400c8e2:	a101      	add	r1, pc, #4	@ (adr r1, 3400c8e8 <_printf_i+0x40>)
3400c8e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3400c8e8:	3400c941 	.word	0x3400c941
3400c8ec:	3400c955 	.word	0x3400c955
3400c8f0:	3400c8d1 	.word	0x3400c8d1
3400c8f4:	3400c8d1 	.word	0x3400c8d1
3400c8f8:	3400c8d1 	.word	0x3400c8d1
3400c8fc:	3400c8d1 	.word	0x3400c8d1
3400c900:	3400c955 	.word	0x3400c955
3400c904:	3400c8d1 	.word	0x3400c8d1
3400c908:	3400c8d1 	.word	0x3400c8d1
3400c90c:	3400c8d1 	.word	0x3400c8d1
3400c910:	3400c8d1 	.word	0x3400c8d1
3400c914:	3400ca53 	.word	0x3400ca53
3400c918:	3400c97f 	.word	0x3400c97f
3400c91c:	3400ca0d 	.word	0x3400ca0d
3400c920:	3400c8d1 	.word	0x3400c8d1
3400c924:	3400c8d1 	.word	0x3400c8d1
3400c928:	3400ca75 	.word	0x3400ca75
3400c92c:	3400c8d1 	.word	0x3400c8d1
3400c930:	3400c97f 	.word	0x3400c97f
3400c934:	3400c8d1 	.word	0x3400c8d1
3400c938:	3400c8d1 	.word	0x3400c8d1
3400c93c:	3400ca15 	.word	0x3400ca15
3400c940:	6833      	ldr	r3, [r6, #0]
3400c942:	1d1a      	adds	r2, r3, #4
3400c944:	681b      	ldr	r3, [r3, #0]
3400c946:	6032      	str	r2, [r6, #0]
3400c948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400c94c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3400c950:	2301      	movs	r3, #1
3400c952:	e09c      	b.n	3400ca8e <_printf_i+0x1e6>
3400c954:	6833      	ldr	r3, [r6, #0]
3400c956:	6820      	ldr	r0, [r4, #0]
3400c958:	1d19      	adds	r1, r3, #4
3400c95a:	6031      	str	r1, [r6, #0]
3400c95c:	0606      	lsls	r6, r0, #24
3400c95e:	d501      	bpl.n	3400c964 <_printf_i+0xbc>
3400c960:	681d      	ldr	r5, [r3, #0]
3400c962:	e003      	b.n	3400c96c <_printf_i+0xc4>
3400c964:	0645      	lsls	r5, r0, #25
3400c966:	d5fb      	bpl.n	3400c960 <_printf_i+0xb8>
3400c968:	f9b3 5000 	ldrsh.w	r5, [r3]
3400c96c:	2d00      	cmp	r5, #0
3400c96e:	da03      	bge.n	3400c978 <_printf_i+0xd0>
3400c970:	232d      	movs	r3, #45	@ 0x2d
3400c972:	426d      	negs	r5, r5
3400c974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400c978:	4858      	ldr	r0, [pc, #352]	@ (3400cadc <_printf_i+0x234>)
3400c97a:	230a      	movs	r3, #10
3400c97c:	e011      	b.n	3400c9a2 <_printf_i+0xfa>
3400c97e:	6821      	ldr	r1, [r4, #0]
3400c980:	6833      	ldr	r3, [r6, #0]
3400c982:	0608      	lsls	r0, r1, #24
3400c984:	f853 5b04 	ldr.w	r5, [r3], #4
3400c988:	d402      	bmi.n	3400c990 <_printf_i+0xe8>
3400c98a:	0649      	lsls	r1, r1, #25
3400c98c:	bf48      	it	mi
3400c98e:	b2ad      	uxthmi	r5, r5
3400c990:	2f6f      	cmp	r7, #111	@ 0x6f
3400c992:	6033      	str	r3, [r6, #0]
3400c994:	4851      	ldr	r0, [pc, #324]	@ (3400cadc <_printf_i+0x234>)
3400c996:	bf14      	ite	ne
3400c998:	230a      	movne	r3, #10
3400c99a:	2308      	moveq	r3, #8
3400c99c:	2100      	movs	r1, #0
3400c99e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3400c9a2:	6866      	ldr	r6, [r4, #4]
3400c9a4:	2e00      	cmp	r6, #0
3400c9a6:	60a6      	str	r6, [r4, #8]
3400c9a8:	db05      	blt.n	3400c9b6 <_printf_i+0x10e>
3400c9aa:	6821      	ldr	r1, [r4, #0]
3400c9ac:	432e      	orrs	r6, r5
3400c9ae:	f021 0104 	bic.w	r1, r1, #4
3400c9b2:	6021      	str	r1, [r4, #0]
3400c9b4:	d04b      	beq.n	3400ca4e <_printf_i+0x1a6>
3400c9b6:	4616      	mov	r6, r2
3400c9b8:	fbb5 f1f3 	udiv	r1, r5, r3
3400c9bc:	fb03 5711 	mls	r7, r3, r1, r5
3400c9c0:	5dc7      	ldrb	r7, [r0, r7]
3400c9c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
3400c9c6:	462f      	mov	r7, r5
3400c9c8:	460d      	mov	r5, r1
3400c9ca:	42bb      	cmp	r3, r7
3400c9cc:	d9f4      	bls.n	3400c9b8 <_printf_i+0x110>
3400c9ce:	2b08      	cmp	r3, #8
3400c9d0:	d10b      	bne.n	3400c9ea <_printf_i+0x142>
3400c9d2:	6823      	ldr	r3, [r4, #0]
3400c9d4:	07df      	lsls	r7, r3, #31
3400c9d6:	d508      	bpl.n	3400c9ea <_printf_i+0x142>
3400c9d8:	6923      	ldr	r3, [r4, #16]
3400c9da:	6861      	ldr	r1, [r4, #4]
3400c9dc:	4299      	cmp	r1, r3
3400c9de:	bfde      	ittt	le
3400c9e0:	2330      	movle	r3, #48	@ 0x30
3400c9e2:	f806 3c01 	strble.w	r3, [r6, #-1]
3400c9e6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3400c9ea:	1b92      	subs	r2, r2, r6
3400c9ec:	6122      	str	r2, [r4, #16]
3400c9ee:	464b      	mov	r3, r9
3400c9f0:	aa03      	add	r2, sp, #12
3400c9f2:	4621      	mov	r1, r4
3400c9f4:	4640      	mov	r0, r8
3400c9f6:	f8cd a000 	str.w	sl, [sp]
3400c9fa:	f7ff fee3 	bl	3400c7c4 <_printf_common>
3400c9fe:	3001      	adds	r0, #1
3400ca00:	d14a      	bne.n	3400ca98 <_printf_i+0x1f0>
3400ca02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400ca06:	b004      	add	sp, #16
3400ca08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400ca0c:	6823      	ldr	r3, [r4, #0]
3400ca0e:	f043 0320 	orr.w	r3, r3, #32
3400ca12:	6023      	str	r3, [r4, #0]
3400ca14:	2778      	movs	r7, #120	@ 0x78
3400ca16:	4832      	ldr	r0, [pc, #200]	@ (3400cae0 <_printf_i+0x238>)
3400ca18:	6823      	ldr	r3, [r4, #0]
3400ca1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3400ca1e:	061f      	lsls	r7, r3, #24
3400ca20:	6831      	ldr	r1, [r6, #0]
3400ca22:	f851 5b04 	ldr.w	r5, [r1], #4
3400ca26:	d402      	bmi.n	3400ca2e <_printf_i+0x186>
3400ca28:	065f      	lsls	r7, r3, #25
3400ca2a:	bf48      	it	mi
3400ca2c:	b2ad      	uxthmi	r5, r5
3400ca2e:	6031      	str	r1, [r6, #0]
3400ca30:	07d9      	lsls	r1, r3, #31
3400ca32:	bf44      	itt	mi
3400ca34:	f043 0320 	orrmi.w	r3, r3, #32
3400ca38:	6023      	strmi	r3, [r4, #0]
3400ca3a:	b11d      	cbz	r5, 3400ca44 <_printf_i+0x19c>
3400ca3c:	2310      	movs	r3, #16
3400ca3e:	e7ad      	b.n	3400c99c <_printf_i+0xf4>
3400ca40:	4826      	ldr	r0, [pc, #152]	@ (3400cadc <_printf_i+0x234>)
3400ca42:	e7e9      	b.n	3400ca18 <_printf_i+0x170>
3400ca44:	6823      	ldr	r3, [r4, #0]
3400ca46:	f023 0320 	bic.w	r3, r3, #32
3400ca4a:	6023      	str	r3, [r4, #0]
3400ca4c:	e7f6      	b.n	3400ca3c <_printf_i+0x194>
3400ca4e:	4616      	mov	r6, r2
3400ca50:	e7bd      	b.n	3400c9ce <_printf_i+0x126>
3400ca52:	6833      	ldr	r3, [r6, #0]
3400ca54:	6825      	ldr	r5, [r4, #0]
3400ca56:	1d18      	adds	r0, r3, #4
3400ca58:	6961      	ldr	r1, [r4, #20]
3400ca5a:	6030      	str	r0, [r6, #0]
3400ca5c:	062e      	lsls	r6, r5, #24
3400ca5e:	681b      	ldr	r3, [r3, #0]
3400ca60:	d501      	bpl.n	3400ca66 <_printf_i+0x1be>
3400ca62:	6019      	str	r1, [r3, #0]
3400ca64:	e002      	b.n	3400ca6c <_printf_i+0x1c4>
3400ca66:	0668      	lsls	r0, r5, #25
3400ca68:	d5fb      	bpl.n	3400ca62 <_printf_i+0x1ba>
3400ca6a:	8019      	strh	r1, [r3, #0]
3400ca6c:	2300      	movs	r3, #0
3400ca6e:	4616      	mov	r6, r2
3400ca70:	6123      	str	r3, [r4, #16]
3400ca72:	e7bc      	b.n	3400c9ee <_printf_i+0x146>
3400ca74:	6833      	ldr	r3, [r6, #0]
3400ca76:	2100      	movs	r1, #0
3400ca78:	1d1a      	adds	r2, r3, #4
3400ca7a:	6032      	str	r2, [r6, #0]
3400ca7c:	681e      	ldr	r6, [r3, #0]
3400ca7e:	6862      	ldr	r2, [r4, #4]
3400ca80:	4630      	mov	r0, r6
3400ca82:	f000 fb9a 	bl	3400d1ba <memchr>
3400ca86:	b108      	cbz	r0, 3400ca8c <_printf_i+0x1e4>
3400ca88:	1b80      	subs	r0, r0, r6
3400ca8a:	6060      	str	r0, [r4, #4]
3400ca8c:	6863      	ldr	r3, [r4, #4]
3400ca8e:	6123      	str	r3, [r4, #16]
3400ca90:	2300      	movs	r3, #0
3400ca92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400ca96:	e7aa      	b.n	3400c9ee <_printf_i+0x146>
3400ca98:	6923      	ldr	r3, [r4, #16]
3400ca9a:	4632      	mov	r2, r6
3400ca9c:	4649      	mov	r1, r9
3400ca9e:	4640      	mov	r0, r8
3400caa0:	47d0      	blx	sl
3400caa2:	3001      	adds	r0, #1
3400caa4:	d0ad      	beq.n	3400ca02 <_printf_i+0x15a>
3400caa6:	6823      	ldr	r3, [r4, #0]
3400caa8:	079b      	lsls	r3, r3, #30
3400caaa:	d413      	bmi.n	3400cad4 <_printf_i+0x22c>
3400caac:	68e0      	ldr	r0, [r4, #12]
3400caae:	9b03      	ldr	r3, [sp, #12]
3400cab0:	4298      	cmp	r0, r3
3400cab2:	bfb8      	it	lt
3400cab4:	4618      	movlt	r0, r3
3400cab6:	e7a6      	b.n	3400ca06 <_printf_i+0x15e>
3400cab8:	2301      	movs	r3, #1
3400caba:	4632      	mov	r2, r6
3400cabc:	4649      	mov	r1, r9
3400cabe:	4640      	mov	r0, r8
3400cac0:	47d0      	blx	sl
3400cac2:	3001      	adds	r0, #1
3400cac4:	d09d      	beq.n	3400ca02 <_printf_i+0x15a>
3400cac6:	3501      	adds	r5, #1
3400cac8:	68e3      	ldr	r3, [r4, #12]
3400caca:	9903      	ldr	r1, [sp, #12]
3400cacc:	1a5b      	subs	r3, r3, r1
3400cace:	42ab      	cmp	r3, r5
3400cad0:	dcf2      	bgt.n	3400cab8 <_printf_i+0x210>
3400cad2:	e7eb      	b.n	3400caac <_printf_i+0x204>
3400cad4:	2500      	movs	r5, #0
3400cad6:	f104 0619 	add.w	r6, r4, #25
3400cada:	e7f5      	b.n	3400cac8 <_printf_i+0x220>
3400cadc:	3400f600 	.word	0x3400f600
3400cae0:	3400f611 	.word	0x3400f611

3400cae4 <__sflush_r>:
3400cae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3400cae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400caec:	0716      	lsls	r6, r2, #28
3400caee:	4605      	mov	r5, r0
3400caf0:	460c      	mov	r4, r1
3400caf2:	d454      	bmi.n	3400cb9e <__sflush_r+0xba>
3400caf4:	684b      	ldr	r3, [r1, #4]
3400caf6:	2b00      	cmp	r3, #0
3400caf8:	dc02      	bgt.n	3400cb00 <__sflush_r+0x1c>
3400cafa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3400cafc:	2b00      	cmp	r3, #0
3400cafe:	dd48      	ble.n	3400cb92 <__sflush_r+0xae>
3400cb00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400cb02:	2e00      	cmp	r6, #0
3400cb04:	d045      	beq.n	3400cb92 <__sflush_r+0xae>
3400cb06:	2300      	movs	r3, #0
3400cb08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3400cb0c:	682f      	ldr	r7, [r5, #0]
3400cb0e:	6a21      	ldr	r1, [r4, #32]
3400cb10:	602b      	str	r3, [r5, #0]
3400cb12:	d030      	beq.n	3400cb76 <__sflush_r+0x92>
3400cb14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3400cb16:	89a3      	ldrh	r3, [r4, #12]
3400cb18:	0759      	lsls	r1, r3, #29
3400cb1a:	d505      	bpl.n	3400cb28 <__sflush_r+0x44>
3400cb1c:	6863      	ldr	r3, [r4, #4]
3400cb1e:	1ad2      	subs	r2, r2, r3
3400cb20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400cb22:	b10b      	cbz	r3, 3400cb28 <__sflush_r+0x44>
3400cb24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400cb26:	1ad2      	subs	r2, r2, r3
3400cb28:	2300      	movs	r3, #0
3400cb2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400cb2c:	6a21      	ldr	r1, [r4, #32]
3400cb2e:	4628      	mov	r0, r5
3400cb30:	47b0      	blx	r6
3400cb32:	1c43      	adds	r3, r0, #1
3400cb34:	89a3      	ldrh	r3, [r4, #12]
3400cb36:	d106      	bne.n	3400cb46 <__sflush_r+0x62>
3400cb38:	6829      	ldr	r1, [r5, #0]
3400cb3a:	291d      	cmp	r1, #29
3400cb3c:	d82b      	bhi.n	3400cb96 <__sflush_r+0xb2>
3400cb3e:	4a2a      	ldr	r2, [pc, #168]	@ (3400cbe8 <__sflush_r+0x104>)
3400cb40:	40ca      	lsrs	r2, r1
3400cb42:	07d6      	lsls	r6, r2, #31
3400cb44:	d527      	bpl.n	3400cb96 <__sflush_r+0xb2>
3400cb46:	2200      	movs	r2, #0
3400cb48:	04d9      	lsls	r1, r3, #19
3400cb4a:	6062      	str	r2, [r4, #4]
3400cb4c:	6922      	ldr	r2, [r4, #16]
3400cb4e:	6022      	str	r2, [r4, #0]
3400cb50:	d504      	bpl.n	3400cb5c <__sflush_r+0x78>
3400cb52:	1c42      	adds	r2, r0, #1
3400cb54:	d101      	bne.n	3400cb5a <__sflush_r+0x76>
3400cb56:	682b      	ldr	r3, [r5, #0]
3400cb58:	b903      	cbnz	r3, 3400cb5c <__sflush_r+0x78>
3400cb5a:	6560      	str	r0, [r4, #84]	@ 0x54
3400cb5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400cb5e:	602f      	str	r7, [r5, #0]
3400cb60:	b1b9      	cbz	r1, 3400cb92 <__sflush_r+0xae>
3400cb62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400cb66:	4299      	cmp	r1, r3
3400cb68:	d002      	beq.n	3400cb70 <__sflush_r+0x8c>
3400cb6a:	4628      	mov	r0, r5
3400cb6c:	f001 f932 	bl	3400ddd4 <_free_r>
3400cb70:	2300      	movs	r3, #0
3400cb72:	6363      	str	r3, [r4, #52]	@ 0x34
3400cb74:	e00d      	b.n	3400cb92 <__sflush_r+0xae>
3400cb76:	2301      	movs	r3, #1
3400cb78:	4628      	mov	r0, r5
3400cb7a:	47b0      	blx	r6
3400cb7c:	4602      	mov	r2, r0
3400cb7e:	1c50      	adds	r0, r2, #1
3400cb80:	d1c9      	bne.n	3400cb16 <__sflush_r+0x32>
3400cb82:	682b      	ldr	r3, [r5, #0]
3400cb84:	2b00      	cmp	r3, #0
3400cb86:	d0c6      	beq.n	3400cb16 <__sflush_r+0x32>
3400cb88:	2b1d      	cmp	r3, #29
3400cb8a:	d001      	beq.n	3400cb90 <__sflush_r+0xac>
3400cb8c:	2b16      	cmp	r3, #22
3400cb8e:	d11d      	bne.n	3400cbcc <__sflush_r+0xe8>
3400cb90:	602f      	str	r7, [r5, #0]
3400cb92:	2000      	movs	r0, #0
3400cb94:	e021      	b.n	3400cbda <__sflush_r+0xf6>
3400cb96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400cb9a:	b21b      	sxth	r3, r3
3400cb9c:	e01a      	b.n	3400cbd4 <__sflush_r+0xf0>
3400cb9e:	690f      	ldr	r7, [r1, #16]
3400cba0:	2f00      	cmp	r7, #0
3400cba2:	d0f6      	beq.n	3400cb92 <__sflush_r+0xae>
3400cba4:	0793      	lsls	r3, r2, #30
3400cba6:	680e      	ldr	r6, [r1, #0]
3400cba8:	600f      	str	r7, [r1, #0]
3400cbaa:	bf0c      	ite	eq
3400cbac:	694b      	ldreq	r3, [r1, #20]
3400cbae:	2300      	movne	r3, #0
3400cbb0:	eba6 0807 	sub.w	r8, r6, r7
3400cbb4:	608b      	str	r3, [r1, #8]
3400cbb6:	f1b8 0f00 	cmp.w	r8, #0
3400cbba:	ddea      	ble.n	3400cb92 <__sflush_r+0xae>
3400cbbc:	4643      	mov	r3, r8
3400cbbe:	463a      	mov	r2, r7
3400cbc0:	6a21      	ldr	r1, [r4, #32]
3400cbc2:	4628      	mov	r0, r5
3400cbc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3400cbc6:	47b0      	blx	r6
3400cbc8:	2800      	cmp	r0, #0
3400cbca:	dc08      	bgt.n	3400cbde <__sflush_r+0xfa>
3400cbcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400cbd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400cbd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400cbd8:	81a3      	strh	r3, [r4, #12]
3400cbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400cbde:	4407      	add	r7, r0
3400cbe0:	eba8 0800 	sub.w	r8, r8, r0
3400cbe4:	e7e7      	b.n	3400cbb6 <__sflush_r+0xd2>
3400cbe6:	bf00      	nop
3400cbe8:	20400001 	.word	0x20400001

3400cbec <_fflush_r>:
3400cbec:	b538      	push	{r3, r4, r5, lr}
3400cbee:	690b      	ldr	r3, [r1, #16]
3400cbf0:	4605      	mov	r5, r0
3400cbf2:	460c      	mov	r4, r1
3400cbf4:	b913      	cbnz	r3, 3400cbfc <_fflush_r+0x10>
3400cbf6:	2500      	movs	r5, #0
3400cbf8:	4628      	mov	r0, r5
3400cbfa:	bd38      	pop	{r3, r4, r5, pc}
3400cbfc:	b118      	cbz	r0, 3400cc06 <_fflush_r+0x1a>
3400cbfe:	6a03      	ldr	r3, [r0, #32]
3400cc00:	b90b      	cbnz	r3, 3400cc06 <_fflush_r+0x1a>
3400cc02:	f000 f8bb 	bl	3400cd7c <__sinit>
3400cc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400cc0a:	2b00      	cmp	r3, #0
3400cc0c:	d0f3      	beq.n	3400cbf6 <_fflush_r+0xa>
3400cc0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3400cc10:	07d0      	lsls	r0, r2, #31
3400cc12:	d404      	bmi.n	3400cc1e <_fflush_r+0x32>
3400cc14:	0599      	lsls	r1, r3, #22
3400cc16:	d402      	bmi.n	3400cc1e <_fflush_r+0x32>
3400cc18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400cc1a:	f000 facc 	bl	3400d1b6 <__retarget_lock_acquire_recursive>
3400cc1e:	4628      	mov	r0, r5
3400cc20:	4621      	mov	r1, r4
3400cc22:	f7ff ff5f 	bl	3400cae4 <__sflush_r>
3400cc26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400cc28:	4605      	mov	r5, r0
3400cc2a:	07da      	lsls	r2, r3, #31
3400cc2c:	d4e4      	bmi.n	3400cbf8 <_fflush_r+0xc>
3400cc2e:	89a3      	ldrh	r3, [r4, #12]
3400cc30:	059b      	lsls	r3, r3, #22
3400cc32:	d4e1      	bmi.n	3400cbf8 <_fflush_r+0xc>
3400cc34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400cc36:	f000 fabf 	bl	3400d1b8 <__retarget_lock_release_recursive>
3400cc3a:	e7dd      	b.n	3400cbf8 <_fflush_r+0xc>

3400cc3c <fflush>:
3400cc3c:	4601      	mov	r1, r0
3400cc3e:	b920      	cbnz	r0, 3400cc4a <fflush+0xe>
3400cc40:	4a04      	ldr	r2, [pc, #16]	@ (3400cc54 <fflush+0x18>)
3400cc42:	4905      	ldr	r1, [pc, #20]	@ (3400cc58 <fflush+0x1c>)
3400cc44:	4805      	ldr	r0, [pc, #20]	@ (3400cc5c <fflush+0x20>)
3400cc46:	f000 b8c3 	b.w	3400cdd0 <_fwalk_sglue>
3400cc4a:	4b05      	ldr	r3, [pc, #20]	@ (3400cc60 <fflush+0x24>)
3400cc4c:	6818      	ldr	r0, [r3, #0]
3400cc4e:	f7ff bfcd 	b.w	3400cbec <_fflush_r>
3400cc52:	bf00      	nop
3400cc54:	3400f9d0 	.word	0x3400f9d0
3400cc58:	3400cbed 	.word	0x3400cbed
3400cc5c:	3400f9e0 	.word	0x3400f9e0
3400cc60:	3400f9dc 	.word	0x3400f9dc

3400cc64 <std>:
3400cc64:	2300      	movs	r3, #0
3400cc66:	b510      	push	{r4, lr}
3400cc68:	4604      	mov	r4, r0
3400cc6a:	6083      	str	r3, [r0, #8]
3400cc6c:	8181      	strh	r1, [r0, #12]
3400cc6e:	4619      	mov	r1, r3
3400cc70:	6643      	str	r3, [r0, #100]	@ 0x64
3400cc72:	81c2      	strh	r2, [r0, #14]
3400cc74:	2208      	movs	r2, #8
3400cc76:	6183      	str	r3, [r0, #24]
3400cc78:	e9c0 3300 	strd	r3, r3, [r0]
3400cc7c:	e9c0 3304 	strd	r3, r3, [r0, #16]
3400cc80:	305c      	adds	r0, #92	@ 0x5c
3400cc82:	f000 fa0b 	bl	3400d09c <memset>
3400cc86:	4b0d      	ldr	r3, [pc, #52]	@ (3400ccbc <std+0x58>)
3400cc88:	6224      	str	r4, [r4, #32]
3400cc8a:	6263      	str	r3, [r4, #36]	@ 0x24
3400cc8c:	4b0c      	ldr	r3, [pc, #48]	@ (3400ccc0 <std+0x5c>)
3400cc8e:	62a3      	str	r3, [r4, #40]	@ 0x28
3400cc90:	4b0c      	ldr	r3, [pc, #48]	@ (3400ccc4 <std+0x60>)
3400cc92:	62e3      	str	r3, [r4, #44]	@ 0x2c
3400cc94:	4b0c      	ldr	r3, [pc, #48]	@ (3400ccc8 <std+0x64>)
3400cc96:	6323      	str	r3, [r4, #48]	@ 0x30
3400cc98:	4b0c      	ldr	r3, [pc, #48]	@ (3400cccc <std+0x68>)
3400cc9a:	429c      	cmp	r4, r3
3400cc9c:	d006      	beq.n	3400ccac <std+0x48>
3400cc9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3400cca2:	4294      	cmp	r4, r2
3400cca4:	d002      	beq.n	3400ccac <std+0x48>
3400cca6:	33d0      	adds	r3, #208	@ 0xd0
3400cca8:	429c      	cmp	r4, r3
3400ccaa:	d105      	bne.n	3400ccb8 <std+0x54>
3400ccac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3400ccb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400ccb4:	f000 ba7e 	b.w	3400d1b4 <__retarget_lock_init_recursive>
3400ccb8:	bd10      	pop	{r4, pc}
3400ccba:	bf00      	nop
3400ccbc:	3400ceed 	.word	0x3400ceed
3400ccc0:	3400cf0f 	.word	0x3400cf0f
3400ccc4:	3400cf47 	.word	0x3400cf47
3400ccc8:	3400cf6b 	.word	0x3400cf6b
3400cccc:	34010404 	.word	0x34010404

3400ccd0 <stdio_exit_handler>:
3400ccd0:	4a02      	ldr	r2, [pc, #8]	@ (3400ccdc <stdio_exit_handler+0xc>)
3400ccd2:	4903      	ldr	r1, [pc, #12]	@ (3400cce0 <stdio_exit_handler+0x10>)
3400ccd4:	4803      	ldr	r0, [pc, #12]	@ (3400cce4 <stdio_exit_handler+0x14>)
3400ccd6:	f000 b87b 	b.w	3400cdd0 <_fwalk_sglue>
3400ccda:	bf00      	nop
3400ccdc:	3400f9d0 	.word	0x3400f9d0
3400cce0:	3400cbed 	.word	0x3400cbed
3400cce4:	3400f9e0 	.word	0x3400f9e0

3400cce8 <cleanup_stdio>:
3400cce8:	6841      	ldr	r1, [r0, #4]
3400ccea:	4b0c      	ldr	r3, [pc, #48]	@ (3400cd1c <cleanup_stdio+0x34>)
3400ccec:	4299      	cmp	r1, r3
3400ccee:	b510      	push	{r4, lr}
3400ccf0:	4604      	mov	r4, r0
3400ccf2:	d001      	beq.n	3400ccf8 <cleanup_stdio+0x10>
3400ccf4:	f7ff ff7a 	bl	3400cbec <_fflush_r>
3400ccf8:	68a1      	ldr	r1, [r4, #8]
3400ccfa:	4b09      	ldr	r3, [pc, #36]	@ (3400cd20 <cleanup_stdio+0x38>)
3400ccfc:	4299      	cmp	r1, r3
3400ccfe:	d002      	beq.n	3400cd06 <cleanup_stdio+0x1e>
3400cd00:	4620      	mov	r0, r4
3400cd02:	f7ff ff73 	bl	3400cbec <_fflush_r>
3400cd06:	68e1      	ldr	r1, [r4, #12]
3400cd08:	4b06      	ldr	r3, [pc, #24]	@ (3400cd24 <cleanup_stdio+0x3c>)
3400cd0a:	4299      	cmp	r1, r3
3400cd0c:	d004      	beq.n	3400cd18 <cleanup_stdio+0x30>
3400cd0e:	4620      	mov	r0, r4
3400cd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400cd14:	f7ff bf6a 	b.w	3400cbec <_fflush_r>
3400cd18:	bd10      	pop	{r4, pc}
3400cd1a:	bf00      	nop
3400cd1c:	34010404 	.word	0x34010404
3400cd20:	3401046c 	.word	0x3401046c
3400cd24:	340104d4 	.word	0x340104d4

3400cd28 <global_stdio_init.part.0>:
3400cd28:	b510      	push	{r4, lr}
3400cd2a:	4b0b      	ldr	r3, [pc, #44]	@ (3400cd58 <global_stdio_init.part.0+0x30>)
3400cd2c:	2104      	movs	r1, #4
3400cd2e:	4c0b      	ldr	r4, [pc, #44]	@ (3400cd5c <global_stdio_init.part.0+0x34>)
3400cd30:	4a0b      	ldr	r2, [pc, #44]	@ (3400cd60 <global_stdio_init.part.0+0x38>)
3400cd32:	4620      	mov	r0, r4
3400cd34:	601a      	str	r2, [r3, #0]
3400cd36:	2200      	movs	r2, #0
3400cd38:	f7ff ff94 	bl	3400cc64 <std>
3400cd3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3400cd40:	2201      	movs	r2, #1
3400cd42:	2109      	movs	r1, #9
3400cd44:	f7ff ff8e 	bl	3400cc64 <std>
3400cd48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3400cd4c:	2202      	movs	r2, #2
3400cd4e:	2112      	movs	r1, #18
3400cd50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400cd54:	f7ff bf86 	b.w	3400cc64 <std>
3400cd58:	3401053c 	.word	0x3401053c
3400cd5c:	34010404 	.word	0x34010404
3400cd60:	3400ccd1 	.word	0x3400ccd1

3400cd64 <__sfp_lock_acquire>:
3400cd64:	4801      	ldr	r0, [pc, #4]	@ (3400cd6c <__sfp_lock_acquire+0x8>)
3400cd66:	f000 ba26 	b.w	3400d1b6 <__retarget_lock_acquire_recursive>
3400cd6a:	bf00      	nop
3400cd6c:	34010545 	.word	0x34010545

3400cd70 <__sfp_lock_release>:
3400cd70:	4801      	ldr	r0, [pc, #4]	@ (3400cd78 <__sfp_lock_release+0x8>)
3400cd72:	f000 ba21 	b.w	3400d1b8 <__retarget_lock_release_recursive>
3400cd76:	bf00      	nop
3400cd78:	34010545 	.word	0x34010545

3400cd7c <__sinit>:
3400cd7c:	b510      	push	{r4, lr}
3400cd7e:	4604      	mov	r4, r0
3400cd80:	f7ff fff0 	bl	3400cd64 <__sfp_lock_acquire>
3400cd84:	6a23      	ldr	r3, [r4, #32]
3400cd86:	b11b      	cbz	r3, 3400cd90 <__sinit+0x14>
3400cd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400cd8c:	f7ff bff0 	b.w	3400cd70 <__sfp_lock_release>
3400cd90:	4b04      	ldr	r3, [pc, #16]	@ (3400cda4 <__sinit+0x28>)
3400cd92:	6223      	str	r3, [r4, #32]
3400cd94:	4b04      	ldr	r3, [pc, #16]	@ (3400cda8 <__sinit+0x2c>)
3400cd96:	681b      	ldr	r3, [r3, #0]
3400cd98:	2b00      	cmp	r3, #0
3400cd9a:	d1f5      	bne.n	3400cd88 <__sinit+0xc>
3400cd9c:	f7ff ffc4 	bl	3400cd28 <global_stdio_init.part.0>
3400cda0:	e7f2      	b.n	3400cd88 <__sinit+0xc>
3400cda2:	bf00      	nop
3400cda4:	3400cce9 	.word	0x3400cce9
3400cda8:	3401053c 	.word	0x3401053c

3400cdac <fiprintf>:
3400cdac:	b40e      	push	{r1, r2, r3}
3400cdae:	b503      	push	{r0, r1, lr}
3400cdb0:	ab03      	add	r3, sp, #12
3400cdb2:	4601      	mov	r1, r0
3400cdb4:	4805      	ldr	r0, [pc, #20]	@ (3400cdcc <fiprintf+0x20>)
3400cdb6:	f853 2b04 	ldr.w	r2, [r3], #4
3400cdba:	6800      	ldr	r0, [r0, #0]
3400cdbc:	9301      	str	r3, [sp, #4]
3400cdbe:	f001 fbff 	bl	3400e5c0 <_vfiprintf_r>
3400cdc2:	b002      	add	sp, #8
3400cdc4:	f85d eb04 	ldr.w	lr, [sp], #4
3400cdc8:	b003      	add	sp, #12
3400cdca:	4770      	bx	lr
3400cdcc:	3400f9dc 	.word	0x3400f9dc

3400cdd0 <_fwalk_sglue>:
3400cdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400cdd4:	4607      	mov	r7, r0
3400cdd6:	4688      	mov	r8, r1
3400cdd8:	4614      	mov	r4, r2
3400cdda:	2600      	movs	r6, #0
3400cddc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3400cde0:	f1b9 0901 	subs.w	r9, r9, #1
3400cde4:	d505      	bpl.n	3400cdf2 <_fwalk_sglue+0x22>
3400cde6:	6824      	ldr	r4, [r4, #0]
3400cde8:	2c00      	cmp	r4, #0
3400cdea:	d1f7      	bne.n	3400cddc <_fwalk_sglue+0xc>
3400cdec:	4630      	mov	r0, r6
3400cdee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400cdf2:	89ab      	ldrh	r3, [r5, #12]
3400cdf4:	2b01      	cmp	r3, #1
3400cdf6:	d907      	bls.n	3400ce08 <_fwalk_sglue+0x38>
3400cdf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3400cdfc:	3301      	adds	r3, #1
3400cdfe:	d003      	beq.n	3400ce08 <_fwalk_sglue+0x38>
3400ce00:	4629      	mov	r1, r5
3400ce02:	4638      	mov	r0, r7
3400ce04:	47c0      	blx	r8
3400ce06:	4306      	orrs	r6, r0
3400ce08:	3568      	adds	r5, #104	@ 0x68
3400ce0a:	e7e9      	b.n	3400cde0 <_fwalk_sglue+0x10>

3400ce0c <iprintf>:
3400ce0c:	b40f      	push	{r0, r1, r2, r3}
3400ce0e:	b507      	push	{r0, r1, r2, lr}
3400ce10:	4906      	ldr	r1, [pc, #24]	@ (3400ce2c <iprintf+0x20>)
3400ce12:	ab04      	add	r3, sp, #16
3400ce14:	6808      	ldr	r0, [r1, #0]
3400ce16:	f853 2b04 	ldr.w	r2, [r3], #4
3400ce1a:	6881      	ldr	r1, [r0, #8]
3400ce1c:	9301      	str	r3, [sp, #4]
3400ce1e:	f001 fbcf 	bl	3400e5c0 <_vfiprintf_r>
3400ce22:	b003      	add	sp, #12
3400ce24:	f85d eb04 	ldr.w	lr, [sp], #4
3400ce28:	b004      	add	sp, #16
3400ce2a:	4770      	bx	lr
3400ce2c:	3400f9dc 	.word	0x3400f9dc

3400ce30 <_puts_r>:
3400ce30:	6a03      	ldr	r3, [r0, #32]
3400ce32:	b570      	push	{r4, r5, r6, lr}
3400ce34:	4605      	mov	r5, r0
3400ce36:	460e      	mov	r6, r1
3400ce38:	6884      	ldr	r4, [r0, #8]
3400ce3a:	b90b      	cbnz	r3, 3400ce40 <_puts_r+0x10>
3400ce3c:	f7ff ff9e 	bl	3400cd7c <__sinit>
3400ce40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400ce42:	07db      	lsls	r3, r3, #31
3400ce44:	d405      	bmi.n	3400ce52 <_puts_r+0x22>
3400ce46:	89a3      	ldrh	r3, [r4, #12]
3400ce48:	0598      	lsls	r0, r3, #22
3400ce4a:	d402      	bmi.n	3400ce52 <_puts_r+0x22>
3400ce4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400ce4e:	f000 f9b2 	bl	3400d1b6 <__retarget_lock_acquire_recursive>
3400ce52:	89a3      	ldrh	r3, [r4, #12]
3400ce54:	0719      	lsls	r1, r3, #28
3400ce56:	d502      	bpl.n	3400ce5e <_puts_r+0x2e>
3400ce58:	6923      	ldr	r3, [r4, #16]
3400ce5a:	2b00      	cmp	r3, #0
3400ce5c:	d135      	bne.n	3400ceca <_puts_r+0x9a>
3400ce5e:	4621      	mov	r1, r4
3400ce60:	4628      	mov	r0, r5
3400ce62:	f000 f8c5 	bl	3400cff0 <__swsetup_r>
3400ce66:	b380      	cbz	r0, 3400ceca <_puts_r+0x9a>
3400ce68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3400ce6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400ce6e:	07da      	lsls	r2, r3, #31
3400ce70:	d405      	bmi.n	3400ce7e <_puts_r+0x4e>
3400ce72:	89a3      	ldrh	r3, [r4, #12]
3400ce74:	059b      	lsls	r3, r3, #22
3400ce76:	d402      	bmi.n	3400ce7e <_puts_r+0x4e>
3400ce78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400ce7a:	f000 f99d 	bl	3400d1b8 <__retarget_lock_release_recursive>
3400ce7e:	4628      	mov	r0, r5
3400ce80:	bd70      	pop	{r4, r5, r6, pc}
3400ce82:	2b00      	cmp	r3, #0
3400ce84:	da04      	bge.n	3400ce90 <_puts_r+0x60>
3400ce86:	69a2      	ldr	r2, [r4, #24]
3400ce88:	429a      	cmp	r2, r3
3400ce8a:	dc17      	bgt.n	3400cebc <_puts_r+0x8c>
3400ce8c:	290a      	cmp	r1, #10
3400ce8e:	d015      	beq.n	3400cebc <_puts_r+0x8c>
3400ce90:	6823      	ldr	r3, [r4, #0]
3400ce92:	1c5a      	adds	r2, r3, #1
3400ce94:	6022      	str	r2, [r4, #0]
3400ce96:	7019      	strb	r1, [r3, #0]
3400ce98:	68a3      	ldr	r3, [r4, #8]
3400ce9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400ce9e:	3b01      	subs	r3, #1
3400cea0:	60a3      	str	r3, [r4, #8]
3400cea2:	2900      	cmp	r1, #0
3400cea4:	d1ed      	bne.n	3400ce82 <_puts_r+0x52>
3400cea6:	2b00      	cmp	r3, #0
3400cea8:	da11      	bge.n	3400cece <_puts_r+0x9e>
3400ceaa:	4622      	mov	r2, r4
3400ceac:	210a      	movs	r1, #10
3400ceae:	4628      	mov	r0, r5
3400ceb0:	f000 f85f 	bl	3400cf72 <__swbuf_r>
3400ceb4:	3001      	adds	r0, #1
3400ceb6:	d0d7      	beq.n	3400ce68 <_puts_r+0x38>
3400ceb8:	250a      	movs	r5, #10
3400ceba:	e7d7      	b.n	3400ce6c <_puts_r+0x3c>
3400cebc:	4622      	mov	r2, r4
3400cebe:	4628      	mov	r0, r5
3400cec0:	f000 f857 	bl	3400cf72 <__swbuf_r>
3400cec4:	3001      	adds	r0, #1
3400cec6:	d1e7      	bne.n	3400ce98 <_puts_r+0x68>
3400cec8:	e7ce      	b.n	3400ce68 <_puts_r+0x38>
3400ceca:	3e01      	subs	r6, #1
3400cecc:	e7e4      	b.n	3400ce98 <_puts_r+0x68>
3400cece:	6823      	ldr	r3, [r4, #0]
3400ced0:	1c5a      	adds	r2, r3, #1
3400ced2:	6022      	str	r2, [r4, #0]
3400ced4:	220a      	movs	r2, #10
3400ced6:	701a      	strb	r2, [r3, #0]
3400ced8:	e7ee      	b.n	3400ceb8 <_puts_r+0x88>
	...

3400cedc <puts>:
3400cedc:	4b02      	ldr	r3, [pc, #8]	@ (3400cee8 <puts+0xc>)
3400cede:	4601      	mov	r1, r0
3400cee0:	6818      	ldr	r0, [r3, #0]
3400cee2:	f7ff bfa5 	b.w	3400ce30 <_puts_r>
3400cee6:	bf00      	nop
3400cee8:	3400f9dc 	.word	0x3400f9dc

3400ceec <__sread>:
3400ceec:	b510      	push	{r4, lr}
3400ceee:	460c      	mov	r4, r1
3400cef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400cef4:	f000 f900 	bl	3400d0f8 <_read_r>
3400cef8:	2800      	cmp	r0, #0
3400cefa:	bfab      	itete	ge
3400cefc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3400cefe:	89a3      	ldrhlt	r3, [r4, #12]
3400cf00:	181b      	addge	r3, r3, r0
3400cf02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3400cf06:	bfac      	ite	ge
3400cf08:	6563      	strge	r3, [r4, #84]	@ 0x54
3400cf0a:	81a3      	strhlt	r3, [r4, #12]
3400cf0c:	bd10      	pop	{r4, pc}

3400cf0e <__swrite>:
3400cf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400cf12:	461f      	mov	r7, r3
3400cf14:	898b      	ldrh	r3, [r1, #12]
3400cf16:	4605      	mov	r5, r0
3400cf18:	460c      	mov	r4, r1
3400cf1a:	05db      	lsls	r3, r3, #23
3400cf1c:	4616      	mov	r6, r2
3400cf1e:	d505      	bpl.n	3400cf2c <__swrite+0x1e>
3400cf20:	2302      	movs	r3, #2
3400cf22:	2200      	movs	r2, #0
3400cf24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400cf28:	f000 f8d4 	bl	3400d0d4 <_lseek_r>
3400cf2c:	89a3      	ldrh	r3, [r4, #12]
3400cf2e:	4632      	mov	r2, r6
3400cf30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400cf34:	4628      	mov	r0, r5
3400cf36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400cf3a:	81a3      	strh	r3, [r4, #12]
3400cf3c:	463b      	mov	r3, r7
3400cf3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3400cf42:	f000 b8fb 	b.w	3400d13c <_write_r>

3400cf46 <__sseek>:
3400cf46:	b510      	push	{r4, lr}
3400cf48:	460c      	mov	r4, r1
3400cf4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400cf4e:	f000 f8c1 	bl	3400d0d4 <_lseek_r>
3400cf52:	1c43      	adds	r3, r0, #1
3400cf54:	89a3      	ldrh	r3, [r4, #12]
3400cf56:	bf15      	itete	ne
3400cf58:	6560      	strne	r0, [r4, #84]	@ 0x54
3400cf5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3400cf5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3400cf62:	81a3      	strheq	r3, [r4, #12]
3400cf64:	bf18      	it	ne
3400cf66:	81a3      	strhne	r3, [r4, #12]
3400cf68:	bd10      	pop	{r4, pc}

3400cf6a <__sclose>:
3400cf6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400cf6e:	f000 b8a1 	b.w	3400d0b4 <_close_r>

3400cf72 <__swbuf_r>:
3400cf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400cf74:	460e      	mov	r6, r1
3400cf76:	4614      	mov	r4, r2
3400cf78:	4605      	mov	r5, r0
3400cf7a:	b118      	cbz	r0, 3400cf84 <__swbuf_r+0x12>
3400cf7c:	6a03      	ldr	r3, [r0, #32]
3400cf7e:	b90b      	cbnz	r3, 3400cf84 <__swbuf_r+0x12>
3400cf80:	f7ff fefc 	bl	3400cd7c <__sinit>
3400cf84:	69a3      	ldr	r3, [r4, #24]
3400cf86:	60a3      	str	r3, [r4, #8]
3400cf88:	89a3      	ldrh	r3, [r4, #12]
3400cf8a:	071a      	lsls	r2, r3, #28
3400cf8c:	d501      	bpl.n	3400cf92 <__swbuf_r+0x20>
3400cf8e:	6923      	ldr	r3, [r4, #16]
3400cf90:	b943      	cbnz	r3, 3400cfa4 <__swbuf_r+0x32>
3400cf92:	4621      	mov	r1, r4
3400cf94:	4628      	mov	r0, r5
3400cf96:	f000 f82b 	bl	3400cff0 <__swsetup_r>
3400cf9a:	b118      	cbz	r0, 3400cfa4 <__swbuf_r+0x32>
3400cf9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3400cfa0:	4638      	mov	r0, r7
3400cfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400cfa4:	6823      	ldr	r3, [r4, #0]
3400cfa6:	b2f6      	uxtb	r6, r6
3400cfa8:	6922      	ldr	r2, [r4, #16]
3400cfaa:	4637      	mov	r7, r6
3400cfac:	1a98      	subs	r0, r3, r2
3400cfae:	6963      	ldr	r3, [r4, #20]
3400cfb0:	4283      	cmp	r3, r0
3400cfb2:	dc05      	bgt.n	3400cfc0 <__swbuf_r+0x4e>
3400cfb4:	4621      	mov	r1, r4
3400cfb6:	4628      	mov	r0, r5
3400cfb8:	f7ff fe18 	bl	3400cbec <_fflush_r>
3400cfbc:	2800      	cmp	r0, #0
3400cfbe:	d1ed      	bne.n	3400cf9c <__swbuf_r+0x2a>
3400cfc0:	68a3      	ldr	r3, [r4, #8]
3400cfc2:	3b01      	subs	r3, #1
3400cfc4:	60a3      	str	r3, [r4, #8]
3400cfc6:	6823      	ldr	r3, [r4, #0]
3400cfc8:	1c5a      	adds	r2, r3, #1
3400cfca:	6022      	str	r2, [r4, #0]
3400cfcc:	701e      	strb	r6, [r3, #0]
3400cfce:	1c43      	adds	r3, r0, #1
3400cfd0:	6962      	ldr	r2, [r4, #20]
3400cfd2:	429a      	cmp	r2, r3
3400cfd4:	d004      	beq.n	3400cfe0 <__swbuf_r+0x6e>
3400cfd6:	89a3      	ldrh	r3, [r4, #12]
3400cfd8:	07db      	lsls	r3, r3, #31
3400cfda:	d5e1      	bpl.n	3400cfa0 <__swbuf_r+0x2e>
3400cfdc:	2e0a      	cmp	r6, #10
3400cfde:	d1df      	bne.n	3400cfa0 <__swbuf_r+0x2e>
3400cfe0:	4621      	mov	r1, r4
3400cfe2:	4628      	mov	r0, r5
3400cfe4:	f7ff fe02 	bl	3400cbec <_fflush_r>
3400cfe8:	2800      	cmp	r0, #0
3400cfea:	d0d9      	beq.n	3400cfa0 <__swbuf_r+0x2e>
3400cfec:	e7d6      	b.n	3400cf9c <__swbuf_r+0x2a>
	...

3400cff0 <__swsetup_r>:
3400cff0:	b538      	push	{r3, r4, r5, lr}
3400cff2:	4b29      	ldr	r3, [pc, #164]	@ (3400d098 <__swsetup_r+0xa8>)
3400cff4:	4605      	mov	r5, r0
3400cff6:	460c      	mov	r4, r1
3400cff8:	6818      	ldr	r0, [r3, #0]
3400cffa:	b118      	cbz	r0, 3400d004 <__swsetup_r+0x14>
3400cffc:	6a03      	ldr	r3, [r0, #32]
3400cffe:	b90b      	cbnz	r3, 3400d004 <__swsetup_r+0x14>
3400d000:	f7ff febc 	bl	3400cd7c <__sinit>
3400d004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400d008:	0719      	lsls	r1, r3, #28
3400d00a:	d422      	bmi.n	3400d052 <__swsetup_r+0x62>
3400d00c:	06da      	lsls	r2, r3, #27
3400d00e:	d407      	bmi.n	3400d020 <__swsetup_r+0x30>
3400d010:	2209      	movs	r2, #9
3400d012:	602a      	str	r2, [r5, #0]
3400d014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400d018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400d01c:	81a3      	strh	r3, [r4, #12]
3400d01e:	e033      	b.n	3400d088 <__swsetup_r+0x98>
3400d020:	0758      	lsls	r0, r3, #29
3400d022:	d512      	bpl.n	3400d04a <__swsetup_r+0x5a>
3400d024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400d026:	b141      	cbz	r1, 3400d03a <__swsetup_r+0x4a>
3400d028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400d02c:	4299      	cmp	r1, r3
3400d02e:	d002      	beq.n	3400d036 <__swsetup_r+0x46>
3400d030:	4628      	mov	r0, r5
3400d032:	f000 fecf 	bl	3400ddd4 <_free_r>
3400d036:	2300      	movs	r3, #0
3400d038:	6363      	str	r3, [r4, #52]	@ 0x34
3400d03a:	89a3      	ldrh	r3, [r4, #12]
3400d03c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3400d040:	81a3      	strh	r3, [r4, #12]
3400d042:	2300      	movs	r3, #0
3400d044:	6063      	str	r3, [r4, #4]
3400d046:	6923      	ldr	r3, [r4, #16]
3400d048:	6023      	str	r3, [r4, #0]
3400d04a:	89a3      	ldrh	r3, [r4, #12]
3400d04c:	f043 0308 	orr.w	r3, r3, #8
3400d050:	81a3      	strh	r3, [r4, #12]
3400d052:	6923      	ldr	r3, [r4, #16]
3400d054:	b94b      	cbnz	r3, 3400d06a <__swsetup_r+0x7a>
3400d056:	89a3      	ldrh	r3, [r4, #12]
3400d058:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3400d05c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400d060:	d003      	beq.n	3400d06a <__swsetup_r+0x7a>
3400d062:	4621      	mov	r1, r4
3400d064:	4628      	mov	r0, r5
3400d066:	f001 fbe8 	bl	3400e83a <__smakebuf_r>
3400d06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400d06e:	f013 0201 	ands.w	r2, r3, #1
3400d072:	d00a      	beq.n	3400d08a <__swsetup_r+0x9a>
3400d074:	2200      	movs	r2, #0
3400d076:	60a2      	str	r2, [r4, #8]
3400d078:	6962      	ldr	r2, [r4, #20]
3400d07a:	4252      	negs	r2, r2
3400d07c:	61a2      	str	r2, [r4, #24]
3400d07e:	6922      	ldr	r2, [r4, #16]
3400d080:	b942      	cbnz	r2, 3400d094 <__swsetup_r+0xa4>
3400d082:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3400d086:	d1c5      	bne.n	3400d014 <__swsetup_r+0x24>
3400d088:	bd38      	pop	{r3, r4, r5, pc}
3400d08a:	0799      	lsls	r1, r3, #30
3400d08c:	bf58      	it	pl
3400d08e:	6962      	ldrpl	r2, [r4, #20]
3400d090:	60a2      	str	r2, [r4, #8]
3400d092:	e7f4      	b.n	3400d07e <__swsetup_r+0x8e>
3400d094:	2000      	movs	r0, #0
3400d096:	e7f7      	b.n	3400d088 <__swsetup_r+0x98>
3400d098:	3400f9dc 	.word	0x3400f9dc

3400d09c <memset>:
3400d09c:	4402      	add	r2, r0
3400d09e:	4603      	mov	r3, r0
3400d0a0:	4293      	cmp	r3, r2
3400d0a2:	d100      	bne.n	3400d0a6 <memset+0xa>
3400d0a4:	4770      	bx	lr
3400d0a6:	f803 1b01 	strb.w	r1, [r3], #1
3400d0aa:	e7f9      	b.n	3400d0a0 <memset+0x4>

3400d0ac <_localeconv_r>:
3400d0ac:	4800      	ldr	r0, [pc, #0]	@ (3400d0b0 <_localeconv_r+0x4>)
3400d0ae:	4770      	bx	lr
3400d0b0:	3400fb1c 	.word	0x3400fb1c

3400d0b4 <_close_r>:
3400d0b4:	b538      	push	{r3, r4, r5, lr}
3400d0b6:	2300      	movs	r3, #0
3400d0b8:	4d05      	ldr	r5, [pc, #20]	@ (3400d0d0 <_close_r+0x1c>)
3400d0ba:	4604      	mov	r4, r0
3400d0bc:	4608      	mov	r0, r1
3400d0be:	602b      	str	r3, [r5, #0]
3400d0c0:	f7f4 f871 	bl	340011a6 <_close>
3400d0c4:	1c43      	adds	r3, r0, #1
3400d0c6:	d102      	bne.n	3400d0ce <_close_r+0x1a>
3400d0c8:	682b      	ldr	r3, [r5, #0]
3400d0ca:	b103      	cbz	r3, 3400d0ce <_close_r+0x1a>
3400d0cc:	6023      	str	r3, [r4, #0]
3400d0ce:	bd38      	pop	{r3, r4, r5, pc}
3400d0d0:	34010540 	.word	0x34010540

3400d0d4 <_lseek_r>:
3400d0d4:	b538      	push	{r3, r4, r5, lr}
3400d0d6:	4604      	mov	r4, r0
3400d0d8:	4d06      	ldr	r5, [pc, #24]	@ (3400d0f4 <_lseek_r+0x20>)
3400d0da:	4608      	mov	r0, r1
3400d0dc:	4611      	mov	r1, r2
3400d0de:	2200      	movs	r2, #0
3400d0e0:	602a      	str	r2, [r5, #0]
3400d0e2:	461a      	mov	r2, r3
3400d0e4:	f7f4 f869 	bl	340011ba <_lseek>
3400d0e8:	1c43      	adds	r3, r0, #1
3400d0ea:	d102      	bne.n	3400d0f2 <_lseek_r+0x1e>
3400d0ec:	682b      	ldr	r3, [r5, #0]
3400d0ee:	b103      	cbz	r3, 3400d0f2 <_lseek_r+0x1e>
3400d0f0:	6023      	str	r3, [r4, #0]
3400d0f2:	bd38      	pop	{r3, r4, r5, pc}
3400d0f4:	34010540 	.word	0x34010540

3400d0f8 <_read_r>:
3400d0f8:	b538      	push	{r3, r4, r5, lr}
3400d0fa:	4604      	mov	r4, r0
3400d0fc:	4d06      	ldr	r5, [pc, #24]	@ (3400d118 <_read_r+0x20>)
3400d0fe:	4608      	mov	r0, r1
3400d100:	4611      	mov	r1, r2
3400d102:	2200      	movs	r2, #0
3400d104:	602a      	str	r2, [r5, #0]
3400d106:	461a      	mov	r2, r3
3400d108:	f7f4 f83f 	bl	3400118a <_read>
3400d10c:	1c43      	adds	r3, r0, #1
3400d10e:	d102      	bne.n	3400d116 <_read_r+0x1e>
3400d110:	682b      	ldr	r3, [r5, #0]
3400d112:	b103      	cbz	r3, 3400d116 <_read_r+0x1e>
3400d114:	6023      	str	r3, [r4, #0]
3400d116:	bd38      	pop	{r3, r4, r5, pc}
3400d118:	34010540 	.word	0x34010540

3400d11c <_sbrk_r>:
3400d11c:	b538      	push	{r3, r4, r5, lr}
3400d11e:	2300      	movs	r3, #0
3400d120:	4d05      	ldr	r5, [pc, #20]	@ (3400d138 <_sbrk_r+0x1c>)
3400d122:	4604      	mov	r4, r0
3400d124:	4608      	mov	r0, r1
3400d126:	602b      	str	r3, [r5, #0]
3400d128:	f001 fc5e 	bl	3400e9e8 <_sbrk>
3400d12c:	1c43      	adds	r3, r0, #1
3400d12e:	d102      	bne.n	3400d136 <_sbrk_r+0x1a>
3400d130:	682b      	ldr	r3, [r5, #0]
3400d132:	b103      	cbz	r3, 3400d136 <_sbrk_r+0x1a>
3400d134:	6023      	str	r3, [r4, #0]
3400d136:	bd38      	pop	{r3, r4, r5, pc}
3400d138:	34010540 	.word	0x34010540

3400d13c <_write_r>:
3400d13c:	b538      	push	{r3, r4, r5, lr}
3400d13e:	4604      	mov	r4, r0
3400d140:	4d06      	ldr	r5, [pc, #24]	@ (3400d15c <_write_r+0x20>)
3400d142:	4608      	mov	r0, r1
3400d144:	4611      	mov	r1, r2
3400d146:	2200      	movs	r2, #0
3400d148:	602a      	str	r2, [r5, #0]
3400d14a:	461a      	mov	r2, r3
3400d14c:	f7f3 ffb6 	bl	340010bc <_write>
3400d150:	1c43      	adds	r3, r0, #1
3400d152:	d102      	bne.n	3400d15a <_write_r+0x1e>
3400d154:	682b      	ldr	r3, [r5, #0]
3400d156:	b103      	cbz	r3, 3400d15a <_write_r+0x1e>
3400d158:	6023      	str	r3, [r4, #0]
3400d15a:	bd38      	pop	{r3, r4, r5, pc}
3400d15c:	34010540 	.word	0x34010540

3400d160 <__errno>:
3400d160:	4b01      	ldr	r3, [pc, #4]	@ (3400d168 <__errno+0x8>)
3400d162:	6818      	ldr	r0, [r3, #0]
3400d164:	4770      	bx	lr
3400d166:	bf00      	nop
3400d168:	3400f9dc 	.word	0x3400f9dc

3400d16c <__libc_init_array>:
3400d16c:	b570      	push	{r4, r5, r6, lr}
3400d16e:	4d0d      	ldr	r5, [pc, #52]	@ (3400d1a4 <__libc_init_array+0x38>)
3400d170:	2600      	movs	r6, #0
3400d172:	4c0d      	ldr	r4, [pc, #52]	@ (3400d1a8 <__libc_init_array+0x3c>)
3400d174:	1b64      	subs	r4, r4, r5
3400d176:	10a4      	asrs	r4, r4, #2
3400d178:	42a6      	cmp	r6, r4
3400d17a:	d109      	bne.n	3400d190 <__libc_init_array+0x24>
3400d17c:	4d0b      	ldr	r5, [pc, #44]	@ (3400d1ac <__libc_init_array+0x40>)
3400d17e:	2600      	movs	r6, #0
3400d180:	4c0b      	ldr	r4, [pc, #44]	@ (3400d1b0 <__libc_init_array+0x44>)
3400d182:	f001 fc3f 	bl	3400ea04 <_init>
3400d186:	1b64      	subs	r4, r4, r5
3400d188:	10a4      	asrs	r4, r4, #2
3400d18a:	42a6      	cmp	r6, r4
3400d18c:	d105      	bne.n	3400d19a <__libc_init_array+0x2e>
3400d18e:	bd70      	pop	{r4, r5, r6, pc}
3400d190:	f855 3b04 	ldr.w	r3, [r5], #4
3400d194:	3601      	adds	r6, #1
3400d196:	4798      	blx	r3
3400d198:	e7ee      	b.n	3400d178 <__libc_init_array+0xc>
3400d19a:	f855 3b04 	ldr.w	r3, [r5], #4
3400d19e:	3601      	adds	r6, #1
3400d1a0:	4798      	blx	r3
3400d1a2:	e7f2      	b.n	3400d18a <__libc_init_array+0x1e>
3400d1a4:	3400f9a4 	.word	0x3400f9a4
3400d1a8:	3400f9a4 	.word	0x3400f9a4
3400d1ac:	3400f9a4 	.word	0x3400f9a4
3400d1b0:	3400f9a8 	.word	0x3400f9a8

3400d1b4 <__retarget_lock_init_recursive>:
3400d1b4:	4770      	bx	lr

3400d1b6 <__retarget_lock_acquire_recursive>:
3400d1b6:	4770      	bx	lr

3400d1b8 <__retarget_lock_release_recursive>:
3400d1b8:	4770      	bx	lr

3400d1ba <memchr>:
3400d1ba:	b2c9      	uxtb	r1, r1
3400d1bc:	4603      	mov	r3, r0
3400d1be:	4402      	add	r2, r0
3400d1c0:	b510      	push	{r4, lr}
3400d1c2:	4293      	cmp	r3, r2
3400d1c4:	4618      	mov	r0, r3
3400d1c6:	d101      	bne.n	3400d1cc <memchr+0x12>
3400d1c8:	2000      	movs	r0, #0
3400d1ca:	e003      	b.n	3400d1d4 <memchr+0x1a>
3400d1cc:	7804      	ldrb	r4, [r0, #0]
3400d1ce:	3301      	adds	r3, #1
3400d1d0:	428c      	cmp	r4, r1
3400d1d2:	d1f6      	bne.n	3400d1c2 <memchr+0x8>
3400d1d4:	bd10      	pop	{r4, pc}

3400d1d6 <memcpy>:
3400d1d6:	440a      	add	r2, r1
3400d1d8:	1e43      	subs	r3, r0, #1
3400d1da:	4291      	cmp	r1, r2
3400d1dc:	d100      	bne.n	3400d1e0 <memcpy+0xa>
3400d1de:	4770      	bx	lr
3400d1e0:	b510      	push	{r4, lr}
3400d1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
3400d1e6:	4291      	cmp	r1, r2
3400d1e8:	f803 4f01 	strb.w	r4, [r3, #1]!
3400d1ec:	d1f9      	bne.n	3400d1e2 <memcpy+0xc>
3400d1ee:	bd10      	pop	{r4, pc}

3400d1f0 <abort>:
3400d1f0:	2006      	movs	r0, #6
3400d1f2:	b508      	push	{r3, lr}
3400d1f4:	f001 fb86 	bl	3400e904 <raise>
3400d1f8:	2001      	movs	r0, #1
3400d1fa:	f7f3 ffc0 	bl	3400117e <_exit>

3400d1fe <quorem>:
3400d1fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400d202:	6903      	ldr	r3, [r0, #16]
3400d204:	4607      	mov	r7, r0
3400d206:	690c      	ldr	r4, [r1, #16]
3400d208:	42a3      	cmp	r3, r4
3400d20a:	f2c0 8083 	blt.w	3400d314 <quorem+0x116>
3400d20e:	3c01      	subs	r4, #1
3400d210:	f100 0514 	add.w	r5, r0, #20
3400d214:	f101 0814 	add.w	r8, r1, #20
3400d218:	00a3      	lsls	r3, r4, #2
3400d21a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400d21e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3400d222:	9300      	str	r3, [sp, #0]
3400d224:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400d228:	9301      	str	r3, [sp, #4]
3400d22a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3400d22e:	3301      	adds	r3, #1
3400d230:	429a      	cmp	r2, r3
3400d232:	fbb2 f6f3 	udiv	r6, r2, r3
3400d236:	d331      	bcc.n	3400d29c <quorem+0x9e>
3400d238:	f04f 0a00 	mov.w	sl, #0
3400d23c:	46c4      	mov	ip, r8
3400d23e:	46ae      	mov	lr, r5
3400d240:	46d3      	mov	fp, sl
3400d242:	f85c 3b04 	ldr.w	r3, [ip], #4
3400d246:	b298      	uxth	r0, r3
3400d248:	45e1      	cmp	r9, ip
3400d24a:	ea4f 4313 	mov.w	r3, r3, lsr #16
3400d24e:	fb06 a000 	mla	r0, r6, r0, sl
3400d252:	ea4f 4210 	mov.w	r2, r0, lsr #16
3400d256:	b280      	uxth	r0, r0
3400d258:	fb06 2303 	mla	r3, r6, r3, r2
3400d25c:	f8de 2000 	ldr.w	r2, [lr]
3400d260:	b292      	uxth	r2, r2
3400d262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400d266:	eba2 0200 	sub.w	r2, r2, r0
3400d26a:	b29b      	uxth	r3, r3
3400d26c:	f8de 0000 	ldr.w	r0, [lr]
3400d270:	445a      	add	r2, fp
3400d272:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3400d276:	b292      	uxth	r2, r2
3400d278:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3400d27c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3400d280:	ea4f 4b23 	mov.w	fp, r3, asr #16
3400d284:	f84e 2b04 	str.w	r2, [lr], #4
3400d288:	d2db      	bcs.n	3400d242 <quorem+0x44>
3400d28a:	9b00      	ldr	r3, [sp, #0]
3400d28c:	58eb      	ldr	r3, [r5, r3]
3400d28e:	b92b      	cbnz	r3, 3400d29c <quorem+0x9e>
3400d290:	9b01      	ldr	r3, [sp, #4]
3400d292:	3b04      	subs	r3, #4
3400d294:	429d      	cmp	r5, r3
3400d296:	461a      	mov	r2, r3
3400d298:	d330      	bcc.n	3400d2fc <quorem+0xfe>
3400d29a:	613c      	str	r4, [r7, #16]
3400d29c:	4638      	mov	r0, r7
3400d29e:	f001 f859 	bl	3400e354 <__mcmp>
3400d2a2:	2800      	cmp	r0, #0
3400d2a4:	db26      	blt.n	3400d2f4 <quorem+0xf6>
3400d2a6:	4629      	mov	r1, r5
3400d2a8:	2000      	movs	r0, #0
3400d2aa:	f858 2b04 	ldr.w	r2, [r8], #4
3400d2ae:	f8d1 c000 	ldr.w	ip, [r1]
3400d2b2:	fa1f fe82 	uxth.w	lr, r2
3400d2b6:	45c1      	cmp	r9, r8
3400d2b8:	fa1f f38c 	uxth.w	r3, ip
3400d2bc:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400d2c0:	eba3 030e 	sub.w	r3, r3, lr
3400d2c4:	4403      	add	r3, r0
3400d2c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3400d2ca:	b29b      	uxth	r3, r3
3400d2cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3400d2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400d2d4:	ea4f 4022 	mov.w	r0, r2, asr #16
3400d2d8:	f841 3b04 	str.w	r3, [r1], #4
3400d2dc:	d2e5      	bcs.n	3400d2aa <quorem+0xac>
3400d2de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400d2e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400d2e6:	b922      	cbnz	r2, 3400d2f2 <quorem+0xf4>
3400d2e8:	3b04      	subs	r3, #4
3400d2ea:	429d      	cmp	r5, r3
3400d2ec:	461a      	mov	r2, r3
3400d2ee:	d30b      	bcc.n	3400d308 <quorem+0x10a>
3400d2f0:	613c      	str	r4, [r7, #16]
3400d2f2:	3601      	adds	r6, #1
3400d2f4:	4630      	mov	r0, r6
3400d2f6:	b003      	add	sp, #12
3400d2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400d2fc:	6812      	ldr	r2, [r2, #0]
3400d2fe:	3b04      	subs	r3, #4
3400d300:	2a00      	cmp	r2, #0
3400d302:	d1ca      	bne.n	3400d29a <quorem+0x9c>
3400d304:	3c01      	subs	r4, #1
3400d306:	e7c5      	b.n	3400d294 <quorem+0x96>
3400d308:	6812      	ldr	r2, [r2, #0]
3400d30a:	3b04      	subs	r3, #4
3400d30c:	2a00      	cmp	r2, #0
3400d30e:	d1ef      	bne.n	3400d2f0 <quorem+0xf2>
3400d310:	3c01      	subs	r4, #1
3400d312:	e7ea      	b.n	3400d2ea <quorem+0xec>
3400d314:	2000      	movs	r0, #0
3400d316:	e7ee      	b.n	3400d2f6 <quorem+0xf8>

3400d318 <_dtoa_r>:
3400d318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400d31c:	69c7      	ldr	r7, [r0, #28]
3400d31e:	4681      	mov	r9, r0
3400d320:	ed2d 8b02 	vpush	{d8}
3400d324:	b091      	sub	sp, #68	@ 0x44
3400d326:	ec55 4b10 	vmov	r4, r5, d0
3400d32a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3400d32c:	9107      	str	r1, [sp, #28]
3400d32e:	9209      	str	r2, [sp, #36]	@ 0x24
3400d330:	930d      	str	r3, [sp, #52]	@ 0x34
3400d332:	ed8d 0b02 	vstr	d0, [sp, #8]
3400d336:	b97f      	cbnz	r7, 3400d358 <_dtoa_r+0x40>
3400d338:	2010      	movs	r0, #16
3400d33a:	f7fe fee5 	bl	3400c108 <malloc>
3400d33e:	4602      	mov	r2, r0
3400d340:	f8c9 001c 	str.w	r0, [r9, #28]
3400d344:	b920      	cbnz	r0, 3400d350 <_dtoa_r+0x38>
3400d346:	4ba0      	ldr	r3, [pc, #640]	@ (3400d5c8 <_dtoa_r+0x2b0>)
3400d348:	21ef      	movs	r1, #239	@ 0xef
3400d34a:	48a0      	ldr	r0, [pc, #640]	@ (3400d5cc <_dtoa_r+0x2b4>)
3400d34c:	f7fe febe 	bl	3400c0cc <__assert_func>
3400d350:	e9c0 7701 	strd	r7, r7, [r0, #4]
3400d354:	6007      	str	r7, [r0, #0]
3400d356:	60c7      	str	r7, [r0, #12]
3400d358:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400d35c:	6819      	ldr	r1, [r3, #0]
3400d35e:	b159      	cbz	r1, 3400d378 <_dtoa_r+0x60>
3400d360:	685a      	ldr	r2, [r3, #4]
3400d362:	2301      	movs	r3, #1
3400d364:	4648      	mov	r0, r9
3400d366:	4093      	lsls	r3, r2
3400d368:	604a      	str	r2, [r1, #4]
3400d36a:	608b      	str	r3, [r1, #8]
3400d36c:	f000 fdbc 	bl	3400dee8 <_Bfree>
3400d370:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400d374:	2200      	movs	r2, #0
3400d376:	601a      	str	r2, [r3, #0]
3400d378:	1e2b      	subs	r3, r5, #0
3400d37a:	bfb7      	itett	lt
3400d37c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3400d380:	2300      	movge	r3, #0
3400d382:	2201      	movlt	r2, #1
3400d384:	9303      	strlt	r3, [sp, #12]
3400d386:	bfac      	ite	ge
3400d388:	6033      	strge	r3, [r6, #0]
3400d38a:	6032      	strlt	r2, [r6, #0]
3400d38c:	4b90      	ldr	r3, [pc, #576]	@ (3400d5d0 <_dtoa_r+0x2b8>)
3400d38e:	9e03      	ldr	r6, [sp, #12]
3400d390:	43b3      	bics	r3, r6
3400d392:	d110      	bne.n	3400d3b6 <_dtoa_r+0x9e>
3400d394:	f242 730f 	movw	r3, #9999	@ 0x270f
3400d398:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400d39a:	6013      	str	r3, [r2, #0]
3400d39c:	f3c6 0313 	ubfx	r3, r6, #0, #20
3400d3a0:	4323      	orrs	r3, r4
3400d3a2:	f000 84e6 	beq.w	3400dd72 <_dtoa_r+0xa5a>
3400d3a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400d3a8:	4f8a      	ldr	r7, [pc, #552]	@ (3400d5d4 <_dtoa_r+0x2bc>)
3400d3aa:	2b00      	cmp	r3, #0
3400d3ac:	f000 84e8 	beq.w	3400dd80 <_dtoa_r+0xa68>
3400d3b0:	1cfb      	adds	r3, r7, #3
3400d3b2:	f000 bce3 	b.w	3400dd7c <_dtoa_r+0xa64>
3400d3b6:	ed9d 8b02 	vldr	d8, [sp, #8]
3400d3ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400d3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d3c2:	d10a      	bne.n	3400d3da <_dtoa_r+0xc2>
3400d3c4:	2301      	movs	r3, #1
3400d3c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400d3c8:	6013      	str	r3, [r2, #0]
3400d3ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400d3cc:	b113      	cbz	r3, 3400d3d4 <_dtoa_r+0xbc>
3400d3ce:	4b82      	ldr	r3, [pc, #520]	@ (3400d5d8 <_dtoa_r+0x2c0>)
3400d3d0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400d3d2:	6013      	str	r3, [r2, #0]
3400d3d4:	4f81      	ldr	r7, [pc, #516]	@ (3400d5dc <_dtoa_r+0x2c4>)
3400d3d6:	f000 bcd3 	b.w	3400dd80 <_dtoa_r+0xa68>
3400d3da:	aa0e      	add	r2, sp, #56	@ 0x38
3400d3dc:	eeb0 0b48 	vmov.f64	d0, d8
3400d3e0:	a90f      	add	r1, sp, #60	@ 0x3c
3400d3e2:	4648      	mov	r0, r9
3400d3e4:	f001 f86a 	bl	3400e4bc <__d2b>
3400d3e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
3400d3ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400d3ee:	9001      	str	r0, [sp, #4]
3400d3f0:	2b00      	cmp	r3, #0
3400d3f2:	d045      	beq.n	3400d480 <_dtoa_r+0x168>
3400d3f4:	ee18 1a90 	vmov	r1, s17
3400d3f8:	eeb0 7b48 	vmov.f64	d7, d8
3400d3fc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3400d400:	2500      	movs	r5, #0
3400d402:	f3c1 0113 	ubfx	r1, r1, #0, #20
3400d406:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3400d40a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3400d40e:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3400d412:	ee07 1a90 	vmov	s15, r1
3400d416:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3400d5b0 <_dtoa_r+0x298>
3400d41a:	ee37 7b46 	vsub.f64	d7, d7, d6
3400d41e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3400d5b8 <_dtoa_r+0x2a0>
3400d422:	eea7 6b05 	vfma.f64	d6, d7, d5
3400d426:	ee07 3a90 	vmov	s15, r3
3400d42a:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3400d42e:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3400d5c0 <_dtoa_r+0x2a8>
3400d432:	eeb0 7b46 	vmov.f64	d7, d6
3400d436:	eea4 7b05 	vfma.f64	d7, d4, d5
3400d43a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3400d43e:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3400d442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d446:	ee16 8a90 	vmov	r8, s13
3400d44a:	d508      	bpl.n	3400d45e <_dtoa_r+0x146>
3400d44c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3400d450:	eeb4 6b47 	vcmp.f64	d6, d7
3400d454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d458:	bf18      	it	ne
3400d45a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3400d45e:	f1b8 0f16 	cmp.w	r8, #22
3400d462:	d82d      	bhi.n	3400d4c0 <_dtoa_r+0x1a8>
3400d464:	495e      	ldr	r1, [pc, #376]	@ (3400d5e0 <_dtoa_r+0x2c8>)
3400d466:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3400d46a:	ed91 7b00 	vldr	d7, [r1]
3400d46e:	eeb4 8bc7 	vcmpe.f64	d8, d7
3400d472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d476:	d501      	bpl.n	3400d47c <_dtoa_r+0x164>
3400d478:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400d47c:	2100      	movs	r1, #0
3400d47e:	e020      	b.n	3400d4c2 <_dtoa_r+0x1aa>
3400d480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3400d482:	2501      	movs	r5, #1
3400d484:	4413      	add	r3, r2
3400d486:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3400d48a:	2920      	cmp	r1, #32
3400d48c:	bfc9      	itett	gt
3400d48e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3400d492:	f1c1 0120 	rsble	r1, r1, #32
3400d496:	408e      	lslgt	r6, r1
3400d498:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3400d49c:	bfd8      	it	le
3400d49e:	fa04 f101 	lslle.w	r1, r4, r1
3400d4a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3400d4a6:	bfc4      	itt	gt
3400d4a8:	fa24 f101 	lsrgt.w	r1, r4, r1
3400d4ac:	4331      	orrgt	r1, r6
3400d4ae:	ee07 1a90 	vmov	s15, r1
3400d4b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3400d4b6:	ee17 1a90 	vmov	r1, s15
3400d4ba:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3400d4be:	e7a6      	b.n	3400d40e <_dtoa_r+0xf6>
3400d4c0:	2101      	movs	r1, #1
3400d4c2:	1ad2      	subs	r2, r2, r3
3400d4c4:	910c      	str	r1, [sp, #48]	@ 0x30
3400d4c6:	1e53      	subs	r3, r2, #1
3400d4c8:	9306      	str	r3, [sp, #24]
3400d4ca:	bf49      	itett	mi
3400d4cc:	f1c2 0301 	rsbmi	r3, r2, #1
3400d4d0:	2300      	movpl	r3, #0
3400d4d2:	9304      	strmi	r3, [sp, #16]
3400d4d4:	2300      	movmi	r3, #0
3400d4d6:	bf54      	ite	pl
3400d4d8:	9304      	strpl	r3, [sp, #16]
3400d4da:	9306      	strmi	r3, [sp, #24]
3400d4dc:	f1b8 0f00 	cmp.w	r8, #0
3400d4e0:	db16      	blt.n	3400d510 <_dtoa_r+0x1f8>
3400d4e2:	9b06      	ldr	r3, [sp, #24]
3400d4e4:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3400d4e8:	4443      	add	r3, r8
3400d4ea:	9306      	str	r3, [sp, #24]
3400d4ec:	2300      	movs	r3, #0
3400d4ee:	9a07      	ldr	r2, [sp, #28]
3400d4f0:	2a09      	cmp	r2, #9
3400d4f2:	d843      	bhi.n	3400d57c <_dtoa_r+0x264>
3400d4f4:	2a05      	cmp	r2, #5
3400d4f6:	bfc5      	ittet	gt
3400d4f8:	3a04      	subgt	r2, #4
3400d4fa:	2400      	movgt	r4, #0
3400d4fc:	2401      	movle	r4, #1
3400d4fe:	9207      	strgt	r2, [sp, #28]
3400d500:	9a07      	ldr	r2, [sp, #28]
3400d502:	3a02      	subs	r2, #2
3400d504:	2a03      	cmp	r2, #3
3400d506:	d844      	bhi.n	3400d592 <_dtoa_r+0x27a>
3400d508:	e8df f002 	tbb	[pc, r2]
3400d50c:	0b173634 	.word	0x0b173634
3400d510:	9b04      	ldr	r3, [sp, #16]
3400d512:	2200      	movs	r2, #0
3400d514:	eba3 0308 	sub.w	r3, r3, r8
3400d518:	920a      	str	r2, [sp, #40]	@ 0x28
3400d51a:	9304      	str	r3, [sp, #16]
3400d51c:	f1c8 0300 	rsb	r3, r8, #0
3400d520:	e7e5      	b.n	3400d4ee <_dtoa_r+0x1d6>
3400d522:	2201      	movs	r2, #1
3400d524:	9208      	str	r2, [sp, #32]
3400d526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400d528:	eb08 0b02 	add.w	fp, r8, r2
3400d52c:	f10b 0a01 	add.w	sl, fp, #1
3400d530:	4652      	mov	r2, sl
3400d532:	2a01      	cmp	r2, #1
3400d534:	bfb8      	it	lt
3400d536:	2201      	movlt	r2, #1
3400d538:	e006      	b.n	3400d548 <_dtoa_r+0x230>
3400d53a:	2201      	movs	r2, #1
3400d53c:	9208      	str	r2, [sp, #32]
3400d53e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400d540:	2a00      	cmp	r2, #0
3400d542:	dd29      	ble.n	3400d598 <_dtoa_r+0x280>
3400d544:	4693      	mov	fp, r2
3400d546:	4692      	mov	sl, r2
3400d548:	f8d9 701c 	ldr.w	r7, [r9, #28]
3400d54c:	2100      	movs	r1, #0
3400d54e:	2004      	movs	r0, #4
3400d550:	f100 0614 	add.w	r6, r0, #20
3400d554:	4296      	cmp	r6, r2
3400d556:	d926      	bls.n	3400d5a6 <_dtoa_r+0x28e>
3400d558:	6079      	str	r1, [r7, #4]
3400d55a:	4648      	mov	r0, r9
3400d55c:	9305      	str	r3, [sp, #20]
3400d55e:	f000 fc83 	bl	3400de68 <_Balloc>
3400d562:	9b05      	ldr	r3, [sp, #20]
3400d564:	4607      	mov	r7, r0
3400d566:	2800      	cmp	r0, #0
3400d568:	d13e      	bne.n	3400d5e8 <_dtoa_r+0x2d0>
3400d56a:	4b1e      	ldr	r3, [pc, #120]	@ (3400d5e4 <_dtoa_r+0x2cc>)
3400d56c:	4602      	mov	r2, r0
3400d56e:	f240 11af 	movw	r1, #431	@ 0x1af
3400d572:	e6ea      	b.n	3400d34a <_dtoa_r+0x32>
3400d574:	2200      	movs	r2, #0
3400d576:	e7e1      	b.n	3400d53c <_dtoa_r+0x224>
3400d578:	2200      	movs	r2, #0
3400d57a:	e7d3      	b.n	3400d524 <_dtoa_r+0x20c>
3400d57c:	2401      	movs	r4, #1
3400d57e:	2200      	movs	r2, #0
3400d580:	e9cd 2407 	strd	r2, r4, [sp, #28]
3400d584:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3400d588:	2100      	movs	r1, #0
3400d58a:	2212      	movs	r2, #18
3400d58c:	46da      	mov	sl, fp
3400d58e:	9109      	str	r1, [sp, #36]	@ 0x24
3400d590:	e7da      	b.n	3400d548 <_dtoa_r+0x230>
3400d592:	2201      	movs	r2, #1
3400d594:	9208      	str	r2, [sp, #32]
3400d596:	e7f5      	b.n	3400d584 <_dtoa_r+0x26c>
3400d598:	f04f 0b01 	mov.w	fp, #1
3400d59c:	46da      	mov	sl, fp
3400d59e:	465a      	mov	r2, fp
3400d5a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3400d5a4:	e7d0      	b.n	3400d548 <_dtoa_r+0x230>
3400d5a6:	3101      	adds	r1, #1
3400d5a8:	0040      	lsls	r0, r0, #1
3400d5aa:	e7d1      	b.n	3400d550 <_dtoa_r+0x238>
3400d5ac:	f3af 8000 	nop.w
3400d5b0:	636f4361 	.word	0x636f4361
3400d5b4:	3fd287a7 	.word	0x3fd287a7
3400d5b8:	8b60c8b3 	.word	0x8b60c8b3
3400d5bc:	3fc68a28 	.word	0x3fc68a28
3400d5c0:	509f79fb 	.word	0x509f79fb
3400d5c4:	3fd34413 	.word	0x3fd34413
3400d5c8:	3400f62f 	.word	0x3400f62f
3400d5cc:	3400f646 	.word	0x3400f646
3400d5d0:	7ff00000 	.word	0x7ff00000
3400d5d4:	3400f62b 	.word	0x3400f62b
3400d5d8:	3400f569 	.word	0x3400f569
3400d5dc:	3400f568 	.word	0x3400f568
3400d5e0:	3400f7d0 	.word	0x3400f7d0
3400d5e4:	3400f69e 	.word	0x3400f69e
3400d5e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
3400d5ec:	f1ba 0f0e 	cmp.w	sl, #14
3400d5f0:	6010      	str	r0, [r2, #0]
3400d5f2:	d86e      	bhi.n	3400d6d2 <_dtoa_r+0x3ba>
3400d5f4:	2c00      	cmp	r4, #0
3400d5f6:	d06c      	beq.n	3400d6d2 <_dtoa_r+0x3ba>
3400d5f8:	f1b8 0f00 	cmp.w	r8, #0
3400d5fc:	f340 80b4 	ble.w	3400d768 <_dtoa_r+0x450>
3400d600:	f008 010f 	and.w	r1, r8, #15
3400d604:	4ac7      	ldr	r2, [pc, #796]	@ (3400d924 <_dtoa_r+0x60c>)
3400d606:	f418 7f80 	tst.w	r8, #256	@ 0x100
3400d60a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3400d60e:	ea4f 1128 	mov.w	r1, r8, asr #4
3400d612:	ed92 7b00 	vldr	d7, [r2]
3400d616:	f000 809b 	beq.w	3400d750 <_dtoa_r+0x438>
3400d61a:	4ac3      	ldr	r2, [pc, #780]	@ (3400d928 <_dtoa_r+0x610>)
3400d61c:	f001 010f 	and.w	r1, r1, #15
3400d620:	ed92 6b08 	vldr	d6, [r2, #32]
3400d624:	2203      	movs	r2, #3
3400d626:	ee88 6b06 	vdiv.f64	d6, d8, d6
3400d62a:	ed8d 6b02 	vstr	d6, [sp, #8]
3400d62e:	48be      	ldr	r0, [pc, #760]	@ (3400d928 <_dtoa_r+0x610>)
3400d630:	2900      	cmp	r1, #0
3400d632:	f040 808f 	bne.w	3400d754 <_dtoa_r+0x43c>
3400d636:	ed9d 6b02 	vldr	d6, [sp, #8]
3400d63a:	ee86 7b07 	vdiv.f64	d7, d6, d7
3400d63e:	ed8d 7b02 	vstr	d7, [sp, #8]
3400d642:	990c      	ldr	r1, [sp, #48]	@ 0x30
3400d644:	ed9d 7b02 	vldr	d7, [sp, #8]
3400d648:	2900      	cmp	r1, #0
3400d64a:	f000 80b3 	beq.w	3400d7b4 <_dtoa_r+0x49c>
3400d64e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3400d652:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400d656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d65a:	f140 80ab 	bpl.w	3400d7b4 <_dtoa_r+0x49c>
3400d65e:	f1ba 0f00 	cmp.w	sl, #0
3400d662:	f000 80a7 	beq.w	3400d7b4 <_dtoa_r+0x49c>
3400d666:	f1bb 0f00 	cmp.w	fp, #0
3400d66a:	dd30      	ble.n	3400d6ce <_dtoa_r+0x3b6>
3400d66c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3400d670:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3400d674:	3201      	adds	r2, #1
3400d676:	465c      	mov	r4, fp
3400d678:	9105      	str	r1, [sp, #20]
3400d67a:	ee27 7b06 	vmul.f64	d7, d7, d6
3400d67e:	ed8d 7b02 	vstr	d7, [sp, #8]
3400d682:	ee07 2a90 	vmov	s15, r2
3400d686:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3400d68a:	ed9d 6b02 	vldr	d6, [sp, #8]
3400d68e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3400d692:	eea7 5b06 	vfma.f64	d5, d7, d6
3400d696:	ee15 2a90 	vmov	r2, s11
3400d69a:	ec51 0b15 	vmov	r0, r1, d5
3400d69e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3400d6a2:	2c00      	cmp	r4, #0
3400d6a4:	f040 808a 	bne.w	3400d7bc <_dtoa_r+0x4a4>
3400d6a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400d6ac:	ee36 6b47 	vsub.f64	d6, d6, d7
3400d6b0:	ec41 0b17 	vmov	d7, r0, r1
3400d6b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400d6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d6bc:	f300 826a 	bgt.w	3400db94 <_dtoa_r+0x87c>
3400d6c0:	eeb1 7b47 	vneg.f64	d7, d7
3400d6c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400d6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d6cc:	d423      	bmi.n	3400d716 <_dtoa_r+0x3fe>
3400d6ce:	ed8d 8b02 	vstr	d8, [sp, #8]
3400d6d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3400d6d4:	2a00      	cmp	r2, #0
3400d6d6:	f2c0 8129 	blt.w	3400d92c <_dtoa_r+0x614>
3400d6da:	f1b8 0f0e 	cmp.w	r8, #14
3400d6de:	f300 8125 	bgt.w	3400d92c <_dtoa_r+0x614>
3400d6e2:	4b90      	ldr	r3, [pc, #576]	@ (3400d924 <_dtoa_r+0x60c>)
3400d6e4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3400d6e8:	ed93 6b00 	vldr	d6, [r3]
3400d6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400d6ee:	2b00      	cmp	r3, #0
3400d6f0:	f280 80c8 	bge.w	3400d884 <_dtoa_r+0x56c>
3400d6f4:	f1ba 0f00 	cmp.w	sl, #0
3400d6f8:	f300 80c4 	bgt.w	3400d884 <_dtoa_r+0x56c>
3400d6fc:	d10b      	bne.n	3400d716 <_dtoa_r+0x3fe>
3400d6fe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400d702:	ee26 6b07 	vmul.f64	d6, d6, d7
3400d706:	ed9d 7b02 	vldr	d7, [sp, #8]
3400d70a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400d70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d712:	f2c0 823c 	blt.w	3400db8e <_dtoa_r+0x876>
3400d716:	2400      	movs	r4, #0
3400d718:	4625      	mov	r5, r4
3400d71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400d71c:	463e      	mov	r6, r7
3400d71e:	43db      	mvns	r3, r3
3400d720:	9305      	str	r3, [sp, #20]
3400d722:	f04f 0800 	mov.w	r8, #0
3400d726:	4621      	mov	r1, r4
3400d728:	4648      	mov	r0, r9
3400d72a:	f000 fbdd 	bl	3400dee8 <_Bfree>
3400d72e:	2d00      	cmp	r5, #0
3400d730:	f000 80a2 	beq.w	3400d878 <_dtoa_r+0x560>
3400d734:	f1b8 0f00 	cmp.w	r8, #0
3400d738:	d005      	beq.n	3400d746 <_dtoa_r+0x42e>
3400d73a:	45a8      	cmp	r8, r5
3400d73c:	d003      	beq.n	3400d746 <_dtoa_r+0x42e>
3400d73e:	4641      	mov	r1, r8
3400d740:	4648      	mov	r0, r9
3400d742:	f000 fbd1 	bl	3400dee8 <_Bfree>
3400d746:	4629      	mov	r1, r5
3400d748:	4648      	mov	r0, r9
3400d74a:	f000 fbcd 	bl	3400dee8 <_Bfree>
3400d74e:	e093      	b.n	3400d878 <_dtoa_r+0x560>
3400d750:	2202      	movs	r2, #2
3400d752:	e76c      	b.n	3400d62e <_dtoa_r+0x316>
3400d754:	07cc      	lsls	r4, r1, #31
3400d756:	d504      	bpl.n	3400d762 <_dtoa_r+0x44a>
3400d758:	3201      	adds	r2, #1
3400d75a:	ed90 6b00 	vldr	d6, [r0]
3400d75e:	ee27 7b06 	vmul.f64	d7, d7, d6
3400d762:	1049      	asrs	r1, r1, #1
3400d764:	3008      	adds	r0, #8
3400d766:	e763      	b.n	3400d630 <_dtoa_r+0x318>
3400d768:	d022      	beq.n	3400d7b0 <_dtoa_r+0x498>
3400d76a:	f1c8 0100 	rsb	r1, r8, #0
3400d76e:	4a6d      	ldr	r2, [pc, #436]	@ (3400d924 <_dtoa_r+0x60c>)
3400d770:	2400      	movs	r4, #0
3400d772:	f001 000f 	and.w	r0, r1, #15
3400d776:	1109      	asrs	r1, r1, #4
3400d778:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3400d77c:	486a      	ldr	r0, [pc, #424]	@ (3400d928 <_dtoa_r+0x610>)
3400d77e:	ed92 7b00 	vldr	d7, [r2]
3400d782:	2202      	movs	r2, #2
3400d784:	ee28 7b07 	vmul.f64	d7, d8, d7
3400d788:	ed8d 7b02 	vstr	d7, [sp, #8]
3400d78c:	b929      	cbnz	r1, 3400d79a <_dtoa_r+0x482>
3400d78e:	2c00      	cmp	r4, #0
3400d790:	f43f af57 	beq.w	3400d642 <_dtoa_r+0x32a>
3400d794:	ed8d 7b02 	vstr	d7, [sp, #8]
3400d798:	e753      	b.n	3400d642 <_dtoa_r+0x32a>
3400d79a:	07ce      	lsls	r6, r1, #31
3400d79c:	d505      	bpl.n	3400d7aa <_dtoa_r+0x492>
3400d79e:	3201      	adds	r2, #1
3400d7a0:	2401      	movs	r4, #1
3400d7a2:	ed90 6b00 	vldr	d6, [r0]
3400d7a6:	ee27 7b06 	vmul.f64	d7, d7, d6
3400d7aa:	1049      	asrs	r1, r1, #1
3400d7ac:	3008      	adds	r0, #8
3400d7ae:	e7ed      	b.n	3400d78c <_dtoa_r+0x474>
3400d7b0:	2202      	movs	r2, #2
3400d7b2:	e746      	b.n	3400d642 <_dtoa_r+0x32a>
3400d7b4:	4654      	mov	r4, sl
3400d7b6:	f8cd 8014 	str.w	r8, [sp, #20]
3400d7ba:	e762      	b.n	3400d682 <_dtoa_r+0x36a>
3400d7bc:	4a59      	ldr	r2, [pc, #356]	@ (3400d924 <_dtoa_r+0x60c>)
3400d7be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3400d7c2:	443c      	add	r4, r7
3400d7c4:	ed12 4b02 	vldr	d4, [r2, #-8]
3400d7c8:	9a08      	ldr	r2, [sp, #32]
3400d7ca:	ec41 0b17 	vmov	d7, r0, r1
3400d7ce:	b34a      	cbz	r2, 3400d824 <_dtoa_r+0x50c>
3400d7d0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3400d7d4:	463e      	mov	r6, r7
3400d7d6:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3400d7da:	ee83 5b04 	vdiv.f64	d5, d3, d4
3400d7de:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400d7e2:	ee35 7b47 	vsub.f64	d7, d5, d7
3400d7e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400d7ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400d7ee:	ee14 2a90 	vmov	r2, s9
3400d7f2:	3230      	adds	r2, #48	@ 0x30
3400d7f4:	ee36 6b45 	vsub.f64	d6, d6, d5
3400d7f8:	f806 2b01 	strb.w	r2, [r6], #1
3400d7fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400d800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d804:	d438      	bmi.n	3400d878 <_dtoa_r+0x560>
3400d806:	ee32 5b46 	vsub.f64	d5, d2, d6
3400d80a:	eeb4 5bc7 	vcmpe.f64	d5, d7
3400d80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d812:	d46e      	bmi.n	3400d8f2 <_dtoa_r+0x5da>
3400d814:	42a6      	cmp	r6, r4
3400d816:	f43f af5a 	beq.w	3400d6ce <_dtoa_r+0x3b6>
3400d81a:	ee27 7b03 	vmul.f64	d7, d7, d3
3400d81e:	ee26 6b03 	vmul.f64	d6, d6, d3
3400d822:	e7e0      	b.n	3400d7e6 <_dtoa_r+0x4ce>
3400d824:	ee27 7b04 	vmul.f64	d7, d7, d4
3400d828:	4621      	mov	r1, r4
3400d82a:	463e      	mov	r6, r7
3400d82c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400d830:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400d834:	ee14 2a90 	vmov	r2, s9
3400d838:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400d83c:	3230      	adds	r2, #48	@ 0x30
3400d83e:	ee36 6b45 	vsub.f64	d6, d6, d5
3400d842:	f806 2b01 	strb.w	r2, [r6], #1
3400d846:	42a6      	cmp	r6, r4
3400d848:	d119      	bne.n	3400d87e <_dtoa_r+0x566>
3400d84a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3400d84e:	ee37 4b05 	vadd.f64	d4, d7, d5
3400d852:	eeb4 6bc4 	vcmpe.f64	d6, d4
3400d856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d85a:	dc4a      	bgt.n	3400d8f2 <_dtoa_r+0x5da>
3400d85c:	ee35 5b47 	vsub.f64	d5, d5, d7
3400d860:	eeb4 6bc5 	vcmpe.f64	d6, d5
3400d864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d868:	f57f af31 	bpl.w	3400d6ce <_dtoa_r+0x3b6>
3400d86c:	460e      	mov	r6, r1
3400d86e:	3901      	subs	r1, #1
3400d870:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3400d874:	2b30      	cmp	r3, #48	@ 0x30
3400d876:	d0f9      	beq.n	3400d86c <_dtoa_r+0x554>
3400d878:	f8dd 8014 	ldr.w	r8, [sp, #20]
3400d87c:	e027      	b.n	3400d8ce <_dtoa_r+0x5b6>
3400d87e:	ee26 6b03 	vmul.f64	d6, d6, d3
3400d882:	e7d5      	b.n	3400d830 <_dtoa_r+0x518>
3400d884:	ed9d 7b02 	vldr	d7, [sp, #8]
3400d888:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3400d88c:	463e      	mov	r6, r7
3400d88e:	ee87 5b06 	vdiv.f64	d5, d7, d6
3400d892:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3400d896:	ee15 3a10 	vmov	r3, s10
3400d89a:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3400d89e:	3330      	adds	r3, #48	@ 0x30
3400d8a0:	eea3 7b46 	vfms.f64	d7, d3, d6
3400d8a4:	f806 3b01 	strb.w	r3, [r6], #1
3400d8a8:	1bf3      	subs	r3, r6, r7
3400d8aa:	459a      	cmp	sl, r3
3400d8ac:	d132      	bne.n	3400d914 <_dtoa_r+0x5fc>
3400d8ae:	ee37 7b07 	vadd.f64	d7, d7, d7
3400d8b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400d8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d8ba:	dc18      	bgt.n	3400d8ee <_dtoa_r+0x5d6>
3400d8bc:	eeb4 7b46 	vcmp.f64	d7, d6
3400d8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d8c4:	d103      	bne.n	3400d8ce <_dtoa_r+0x5b6>
3400d8c6:	ee15 3a10 	vmov	r3, s10
3400d8ca:	07db      	lsls	r3, r3, #31
3400d8cc:	d40f      	bmi.n	3400d8ee <_dtoa_r+0x5d6>
3400d8ce:	9901      	ldr	r1, [sp, #4]
3400d8d0:	4648      	mov	r0, r9
3400d8d2:	f000 fb09 	bl	3400dee8 <_Bfree>
3400d8d6:	2300      	movs	r3, #0
3400d8d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400d8da:	7033      	strb	r3, [r6, #0]
3400d8dc:	f108 0301 	add.w	r3, r8, #1
3400d8e0:	6013      	str	r3, [r2, #0]
3400d8e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400d8e4:	2b00      	cmp	r3, #0
3400d8e6:	f000 824b 	beq.w	3400dd80 <_dtoa_r+0xa68>
3400d8ea:	601e      	str	r6, [r3, #0]
3400d8ec:	e248      	b.n	3400dd80 <_dtoa_r+0xa68>
3400d8ee:	f8cd 8014 	str.w	r8, [sp, #20]
3400d8f2:	4633      	mov	r3, r6
3400d8f4:	461e      	mov	r6, r3
3400d8f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400d8fa:	2a39      	cmp	r2, #57	@ 0x39
3400d8fc:	d106      	bne.n	3400d90c <_dtoa_r+0x5f4>
3400d8fe:	429f      	cmp	r7, r3
3400d900:	d1f8      	bne.n	3400d8f4 <_dtoa_r+0x5dc>
3400d902:	9a05      	ldr	r2, [sp, #20]
3400d904:	3201      	adds	r2, #1
3400d906:	9205      	str	r2, [sp, #20]
3400d908:	2230      	movs	r2, #48	@ 0x30
3400d90a:	703a      	strb	r2, [r7, #0]
3400d90c:	781a      	ldrb	r2, [r3, #0]
3400d90e:	3201      	adds	r2, #1
3400d910:	701a      	strb	r2, [r3, #0]
3400d912:	e7b1      	b.n	3400d878 <_dtoa_r+0x560>
3400d914:	ee27 7b04 	vmul.f64	d7, d7, d4
3400d918:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400d91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d920:	d1b5      	bne.n	3400d88e <_dtoa_r+0x576>
3400d922:	e7d4      	b.n	3400d8ce <_dtoa_r+0x5b6>
3400d924:	3400f7d0 	.word	0x3400f7d0
3400d928:	3400f7a8 	.word	0x3400f7a8
3400d92c:	9908      	ldr	r1, [sp, #32]
3400d92e:	2900      	cmp	r1, #0
3400d930:	f000 80e9 	beq.w	3400db06 <_dtoa_r+0x7ee>
3400d934:	9907      	ldr	r1, [sp, #28]
3400d936:	2901      	cmp	r1, #1
3400d938:	f300 80cb 	bgt.w	3400dad2 <_dtoa_r+0x7ba>
3400d93c:	2d00      	cmp	r5, #0
3400d93e:	f000 80c4 	beq.w	3400daca <_dtoa_r+0x7b2>
3400d942:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3400d946:	461c      	mov	r4, r3
3400d948:	9e04      	ldr	r6, [sp, #16]
3400d94a:	9305      	str	r3, [sp, #20]
3400d94c:	2101      	movs	r1, #1
3400d94e:	9b04      	ldr	r3, [sp, #16]
3400d950:	4648      	mov	r0, r9
3400d952:	4413      	add	r3, r2
3400d954:	9304      	str	r3, [sp, #16]
3400d956:	9b06      	ldr	r3, [sp, #24]
3400d958:	4413      	add	r3, r2
3400d95a:	9306      	str	r3, [sp, #24]
3400d95c:	f000 fb7a 	bl	3400e054 <__i2b>
3400d960:	9b05      	ldr	r3, [sp, #20]
3400d962:	4605      	mov	r5, r0
3400d964:	b166      	cbz	r6, 3400d980 <_dtoa_r+0x668>
3400d966:	9a06      	ldr	r2, [sp, #24]
3400d968:	2a00      	cmp	r2, #0
3400d96a:	dd09      	ble.n	3400d980 <_dtoa_r+0x668>
3400d96c:	42b2      	cmp	r2, r6
3400d96e:	9904      	ldr	r1, [sp, #16]
3400d970:	bfa8      	it	ge
3400d972:	4632      	movge	r2, r6
3400d974:	1a89      	subs	r1, r1, r2
3400d976:	1ab6      	subs	r6, r6, r2
3400d978:	9104      	str	r1, [sp, #16]
3400d97a:	9906      	ldr	r1, [sp, #24]
3400d97c:	1a8a      	subs	r2, r1, r2
3400d97e:	9206      	str	r2, [sp, #24]
3400d980:	b30b      	cbz	r3, 3400d9c6 <_dtoa_r+0x6ae>
3400d982:	9a08      	ldr	r2, [sp, #32]
3400d984:	2a00      	cmp	r2, #0
3400d986:	f000 80c5 	beq.w	3400db14 <_dtoa_r+0x7fc>
3400d98a:	2c00      	cmp	r4, #0
3400d98c:	f000 80bf 	beq.w	3400db0e <_dtoa_r+0x7f6>
3400d990:	4629      	mov	r1, r5
3400d992:	4622      	mov	r2, r4
3400d994:	4648      	mov	r0, r9
3400d996:	930b      	str	r3, [sp, #44]	@ 0x2c
3400d998:	f000 fc16 	bl	3400e1c8 <__pow5mult>
3400d99c:	9a01      	ldr	r2, [sp, #4]
3400d99e:	4601      	mov	r1, r0
3400d9a0:	4605      	mov	r5, r0
3400d9a2:	4648      	mov	r0, r9
3400d9a4:	f000 fb6c 	bl	3400e080 <__multiply>
3400d9a8:	9901      	ldr	r1, [sp, #4]
3400d9aa:	9005      	str	r0, [sp, #20]
3400d9ac:	4648      	mov	r0, r9
3400d9ae:	f000 fa9b 	bl	3400dee8 <_Bfree>
3400d9b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400d9b4:	1b1b      	subs	r3, r3, r4
3400d9b6:	f000 80b0 	beq.w	3400db1a <_dtoa_r+0x802>
3400d9ba:	461a      	mov	r2, r3
3400d9bc:	9905      	ldr	r1, [sp, #20]
3400d9be:	4648      	mov	r0, r9
3400d9c0:	f000 fc02 	bl	3400e1c8 <__pow5mult>
3400d9c4:	9001      	str	r0, [sp, #4]
3400d9c6:	2101      	movs	r1, #1
3400d9c8:	4648      	mov	r0, r9
3400d9ca:	f000 fb43 	bl	3400e054 <__i2b>
3400d9ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400d9d0:	4604      	mov	r4, r0
3400d9d2:	2b00      	cmp	r3, #0
3400d9d4:	f000 81da 	beq.w	3400dd8c <_dtoa_r+0xa74>
3400d9d8:	461a      	mov	r2, r3
3400d9da:	4601      	mov	r1, r0
3400d9dc:	4648      	mov	r0, r9
3400d9de:	f000 fbf3 	bl	3400e1c8 <__pow5mult>
3400d9e2:	9b07      	ldr	r3, [sp, #28]
3400d9e4:	4604      	mov	r4, r0
3400d9e6:	2b01      	cmp	r3, #1
3400d9e8:	f300 80a0 	bgt.w	3400db2c <_dtoa_r+0x814>
3400d9ec:	9b02      	ldr	r3, [sp, #8]
3400d9ee:	2b00      	cmp	r3, #0
3400d9f0:	f040 8096 	bne.w	3400db20 <_dtoa_r+0x808>
3400d9f4:	9b03      	ldr	r3, [sp, #12]
3400d9f6:	f3c3 0213 	ubfx	r2, r3, #0, #20
3400d9fa:	2a00      	cmp	r2, #0
3400d9fc:	f040 8092 	bne.w	3400db24 <_dtoa_r+0x80c>
3400da00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3400da04:	0d12      	lsrs	r2, r2, #20
3400da06:	0512      	lsls	r2, r2, #20
3400da08:	2a00      	cmp	r2, #0
3400da0a:	f000 808d 	beq.w	3400db28 <_dtoa_r+0x810>
3400da0e:	9b04      	ldr	r3, [sp, #16]
3400da10:	3301      	adds	r3, #1
3400da12:	9304      	str	r3, [sp, #16]
3400da14:	9b06      	ldr	r3, [sp, #24]
3400da16:	3301      	adds	r3, #1
3400da18:	9306      	str	r3, [sp, #24]
3400da1a:	2301      	movs	r3, #1
3400da1c:	930b      	str	r3, [sp, #44]	@ 0x2c
3400da1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400da20:	2b00      	cmp	r3, #0
3400da22:	f000 81b9 	beq.w	3400dd98 <_dtoa_r+0xa80>
3400da26:	6922      	ldr	r2, [r4, #16]
3400da28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3400da2c:	6910      	ldr	r0, [r2, #16]
3400da2e:	f000 fac5 	bl	3400dfbc <__hi0bits>
3400da32:	f1c0 0020 	rsb	r0, r0, #32
3400da36:	9b06      	ldr	r3, [sp, #24]
3400da38:	4418      	add	r0, r3
3400da3a:	f010 001f 	ands.w	r0, r0, #31
3400da3e:	f000 8081 	beq.w	3400db44 <_dtoa_r+0x82c>
3400da42:	f1c0 0220 	rsb	r2, r0, #32
3400da46:	2a04      	cmp	r2, #4
3400da48:	dd73      	ble.n	3400db32 <_dtoa_r+0x81a>
3400da4a:	f1c0 001c 	rsb	r0, r0, #28
3400da4e:	9b04      	ldr	r3, [sp, #16]
3400da50:	4403      	add	r3, r0
3400da52:	4406      	add	r6, r0
3400da54:	9304      	str	r3, [sp, #16]
3400da56:	9b06      	ldr	r3, [sp, #24]
3400da58:	4403      	add	r3, r0
3400da5a:	9306      	str	r3, [sp, #24]
3400da5c:	9b04      	ldr	r3, [sp, #16]
3400da5e:	2b00      	cmp	r3, #0
3400da60:	dd05      	ble.n	3400da6e <_dtoa_r+0x756>
3400da62:	461a      	mov	r2, r3
3400da64:	9901      	ldr	r1, [sp, #4]
3400da66:	4648      	mov	r0, r9
3400da68:	f000 fc08 	bl	3400e27c <__lshift>
3400da6c:	9001      	str	r0, [sp, #4]
3400da6e:	9b06      	ldr	r3, [sp, #24]
3400da70:	2b00      	cmp	r3, #0
3400da72:	dd05      	ble.n	3400da80 <_dtoa_r+0x768>
3400da74:	4621      	mov	r1, r4
3400da76:	461a      	mov	r2, r3
3400da78:	4648      	mov	r0, r9
3400da7a:	f000 fbff 	bl	3400e27c <__lshift>
3400da7e:	4604      	mov	r4, r0
3400da80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400da82:	2b00      	cmp	r3, #0
3400da84:	d060      	beq.n	3400db48 <_dtoa_r+0x830>
3400da86:	4621      	mov	r1, r4
3400da88:	9801      	ldr	r0, [sp, #4]
3400da8a:	f000 fc63 	bl	3400e354 <__mcmp>
3400da8e:	2800      	cmp	r0, #0
3400da90:	da5a      	bge.n	3400db48 <_dtoa_r+0x830>
3400da92:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3400da96:	220a      	movs	r2, #10
3400da98:	9901      	ldr	r1, [sp, #4]
3400da9a:	4648      	mov	r0, r9
3400da9c:	9305      	str	r3, [sp, #20]
3400da9e:	2300      	movs	r3, #0
3400daa0:	f000 fa44 	bl	3400df2c <__multadd>
3400daa4:	9b08      	ldr	r3, [sp, #32]
3400daa6:	9001      	str	r0, [sp, #4]
3400daa8:	2b00      	cmp	r3, #0
3400daaa:	f000 8177 	beq.w	3400dd9c <_dtoa_r+0xa84>
3400daae:	4629      	mov	r1, r5
3400dab0:	2300      	movs	r3, #0
3400dab2:	220a      	movs	r2, #10
3400dab4:	4648      	mov	r0, r9
3400dab6:	f000 fa39 	bl	3400df2c <__multadd>
3400daba:	f1bb 0f00 	cmp.w	fp, #0
3400dabe:	4605      	mov	r5, r0
3400dac0:	dc6e      	bgt.n	3400dba0 <_dtoa_r+0x888>
3400dac2:	9b07      	ldr	r3, [sp, #28]
3400dac4:	2b02      	cmp	r3, #2
3400dac6:	dc48      	bgt.n	3400db5a <_dtoa_r+0x842>
3400dac8:	e06a      	b.n	3400dba0 <_dtoa_r+0x888>
3400daca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400dacc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3400dad0:	e739      	b.n	3400d946 <_dtoa_r+0x62e>
3400dad2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3400dad6:	42a3      	cmp	r3, r4
3400dad8:	db07      	blt.n	3400daea <_dtoa_r+0x7d2>
3400dada:	f1ba 0f00 	cmp.w	sl, #0
3400dade:	eba3 0404 	sub.w	r4, r3, r4
3400dae2:	db0b      	blt.n	3400dafc <_dtoa_r+0x7e4>
3400dae4:	9e04      	ldr	r6, [sp, #16]
3400dae6:	4652      	mov	r2, sl
3400dae8:	e72f      	b.n	3400d94a <_dtoa_r+0x632>
3400daea:	1ae2      	subs	r2, r4, r3
3400daec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400daee:	9e04      	ldr	r6, [sp, #16]
3400daf0:	4413      	add	r3, r2
3400daf2:	4652      	mov	r2, sl
3400daf4:	930a      	str	r3, [sp, #40]	@ 0x28
3400daf6:	4623      	mov	r3, r4
3400daf8:	2400      	movs	r4, #0
3400dafa:	e726      	b.n	3400d94a <_dtoa_r+0x632>
3400dafc:	9a04      	ldr	r2, [sp, #16]
3400dafe:	eba2 060a 	sub.w	r6, r2, sl
3400db02:	2200      	movs	r2, #0
3400db04:	e721      	b.n	3400d94a <_dtoa_r+0x632>
3400db06:	461c      	mov	r4, r3
3400db08:	9e04      	ldr	r6, [sp, #16]
3400db0a:	9d08      	ldr	r5, [sp, #32]
3400db0c:	e72a      	b.n	3400d964 <_dtoa_r+0x64c>
3400db0e:	9a01      	ldr	r2, [sp, #4]
3400db10:	9205      	str	r2, [sp, #20]
3400db12:	e752      	b.n	3400d9ba <_dtoa_r+0x6a2>
3400db14:	461a      	mov	r2, r3
3400db16:	9901      	ldr	r1, [sp, #4]
3400db18:	e751      	b.n	3400d9be <_dtoa_r+0x6a6>
3400db1a:	9b05      	ldr	r3, [sp, #20]
3400db1c:	9301      	str	r3, [sp, #4]
3400db1e:	e752      	b.n	3400d9c6 <_dtoa_r+0x6ae>
3400db20:	2300      	movs	r3, #0
3400db22:	e77b      	b.n	3400da1c <_dtoa_r+0x704>
3400db24:	9b02      	ldr	r3, [sp, #8]
3400db26:	e779      	b.n	3400da1c <_dtoa_r+0x704>
3400db28:	920b      	str	r2, [sp, #44]	@ 0x2c
3400db2a:	e778      	b.n	3400da1e <_dtoa_r+0x706>
3400db2c:	2300      	movs	r3, #0
3400db2e:	930b      	str	r3, [sp, #44]	@ 0x2c
3400db30:	e779      	b.n	3400da26 <_dtoa_r+0x70e>
3400db32:	d093      	beq.n	3400da5c <_dtoa_r+0x744>
3400db34:	321c      	adds	r2, #28
3400db36:	9b04      	ldr	r3, [sp, #16]
3400db38:	4413      	add	r3, r2
3400db3a:	4416      	add	r6, r2
3400db3c:	9304      	str	r3, [sp, #16]
3400db3e:	9b06      	ldr	r3, [sp, #24]
3400db40:	4413      	add	r3, r2
3400db42:	e78a      	b.n	3400da5a <_dtoa_r+0x742>
3400db44:	4602      	mov	r2, r0
3400db46:	e7f5      	b.n	3400db34 <_dtoa_r+0x81c>
3400db48:	f1ba 0f00 	cmp.w	sl, #0
3400db4c:	46d3      	mov	fp, sl
3400db4e:	f8cd 8014 	str.w	r8, [sp, #20]
3400db52:	dc21      	bgt.n	3400db98 <_dtoa_r+0x880>
3400db54:	9b07      	ldr	r3, [sp, #28]
3400db56:	2b02      	cmp	r3, #2
3400db58:	dd1e      	ble.n	3400db98 <_dtoa_r+0x880>
3400db5a:	f1bb 0f00 	cmp.w	fp, #0
3400db5e:	f47f addc 	bne.w	3400d71a <_dtoa_r+0x402>
3400db62:	4621      	mov	r1, r4
3400db64:	465b      	mov	r3, fp
3400db66:	2205      	movs	r2, #5
3400db68:	4648      	mov	r0, r9
3400db6a:	f000 f9df 	bl	3400df2c <__multadd>
3400db6e:	4601      	mov	r1, r0
3400db70:	4604      	mov	r4, r0
3400db72:	9801      	ldr	r0, [sp, #4]
3400db74:	f000 fbee 	bl	3400e354 <__mcmp>
3400db78:	2800      	cmp	r0, #0
3400db7a:	f77f adce 	ble.w	3400d71a <_dtoa_r+0x402>
3400db7e:	2331      	movs	r3, #49	@ 0x31
3400db80:	463e      	mov	r6, r7
3400db82:	f806 3b01 	strb.w	r3, [r6], #1
3400db86:	9b05      	ldr	r3, [sp, #20]
3400db88:	3301      	adds	r3, #1
3400db8a:	9305      	str	r3, [sp, #20]
3400db8c:	e5c9      	b.n	3400d722 <_dtoa_r+0x40a>
3400db8e:	4654      	mov	r4, sl
3400db90:	f8cd 8014 	str.w	r8, [sp, #20]
3400db94:	4625      	mov	r5, r4
3400db96:	e7f2      	b.n	3400db7e <_dtoa_r+0x866>
3400db98:	9b08      	ldr	r3, [sp, #32]
3400db9a:	2b00      	cmp	r3, #0
3400db9c:	f000 8102 	beq.w	3400dda4 <_dtoa_r+0xa8c>
3400dba0:	2e00      	cmp	r6, #0
3400dba2:	dd05      	ble.n	3400dbb0 <_dtoa_r+0x898>
3400dba4:	4629      	mov	r1, r5
3400dba6:	4632      	mov	r2, r6
3400dba8:	4648      	mov	r0, r9
3400dbaa:	f000 fb67 	bl	3400e27c <__lshift>
3400dbae:	4605      	mov	r5, r0
3400dbb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400dbb2:	2b00      	cmp	r3, #0
3400dbb4:	d058      	beq.n	3400dc68 <_dtoa_r+0x950>
3400dbb6:	6869      	ldr	r1, [r5, #4]
3400dbb8:	4648      	mov	r0, r9
3400dbba:	f000 f955 	bl	3400de68 <_Balloc>
3400dbbe:	4606      	mov	r6, r0
3400dbc0:	b928      	cbnz	r0, 3400dbce <_dtoa_r+0x8b6>
3400dbc2:	4b82      	ldr	r3, [pc, #520]	@ (3400ddcc <_dtoa_r+0xab4>)
3400dbc4:	4602      	mov	r2, r0
3400dbc6:	f240 21ef 	movw	r1, #751	@ 0x2ef
3400dbca:	f7ff bbbe 	b.w	3400d34a <_dtoa_r+0x32>
3400dbce:	692a      	ldr	r2, [r5, #16]
3400dbd0:	f105 010c 	add.w	r1, r5, #12
3400dbd4:	300c      	adds	r0, #12
3400dbd6:	3202      	adds	r2, #2
3400dbd8:	0092      	lsls	r2, r2, #2
3400dbda:	f7ff fafc 	bl	3400d1d6 <memcpy>
3400dbde:	2201      	movs	r2, #1
3400dbe0:	4631      	mov	r1, r6
3400dbe2:	4648      	mov	r0, r9
3400dbe4:	f000 fb4a 	bl	3400e27c <__lshift>
3400dbe8:	1c7b      	adds	r3, r7, #1
3400dbea:	46a8      	mov	r8, r5
3400dbec:	4605      	mov	r5, r0
3400dbee:	9304      	str	r3, [sp, #16]
3400dbf0:	eb07 030b 	add.w	r3, r7, fp
3400dbf4:	9309      	str	r3, [sp, #36]	@ 0x24
3400dbf6:	9b02      	ldr	r3, [sp, #8]
3400dbf8:	f003 0301 	and.w	r3, r3, #1
3400dbfc:	9308      	str	r3, [sp, #32]
3400dbfe:	9b04      	ldr	r3, [sp, #16]
3400dc00:	4621      	mov	r1, r4
3400dc02:	9801      	ldr	r0, [sp, #4]
3400dc04:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3400dc08:	f7ff faf9 	bl	3400d1fe <quorem>
3400dc0c:	4641      	mov	r1, r8
3400dc0e:	9002      	str	r0, [sp, #8]
3400dc10:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400dc14:	9801      	ldr	r0, [sp, #4]
3400dc16:	f000 fb9d 	bl	3400e354 <__mcmp>
3400dc1a:	462a      	mov	r2, r5
3400dc1c:	9006      	str	r0, [sp, #24]
3400dc1e:	4621      	mov	r1, r4
3400dc20:	4648      	mov	r0, r9
3400dc22:	f000 fbb3 	bl	3400e38c <__mdiff>
3400dc26:	68c2      	ldr	r2, [r0, #12]
3400dc28:	4606      	mov	r6, r0
3400dc2a:	b9fa      	cbnz	r2, 3400dc6c <_dtoa_r+0x954>
3400dc2c:	4601      	mov	r1, r0
3400dc2e:	9801      	ldr	r0, [sp, #4]
3400dc30:	f000 fb90 	bl	3400e354 <__mcmp>
3400dc34:	4602      	mov	r2, r0
3400dc36:	4631      	mov	r1, r6
3400dc38:	4648      	mov	r0, r9
3400dc3a:	920a      	str	r2, [sp, #40]	@ 0x28
3400dc3c:	f000 f954 	bl	3400dee8 <_Bfree>
3400dc40:	9b07      	ldr	r3, [sp, #28]
3400dc42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400dc44:	9e04      	ldr	r6, [sp, #16]
3400dc46:	ea42 0103 	orr.w	r1, r2, r3
3400dc4a:	9b08      	ldr	r3, [sp, #32]
3400dc4c:	4319      	orrs	r1, r3
3400dc4e:	d10f      	bne.n	3400dc70 <_dtoa_r+0x958>
3400dc50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400dc54:	d028      	beq.n	3400dca8 <_dtoa_r+0x990>
3400dc56:	9b06      	ldr	r3, [sp, #24]
3400dc58:	2b00      	cmp	r3, #0
3400dc5a:	dd02      	ble.n	3400dc62 <_dtoa_r+0x94a>
3400dc5c:	9b02      	ldr	r3, [sp, #8]
3400dc5e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3400dc62:	f88b a000 	strb.w	sl, [fp]
3400dc66:	e55e      	b.n	3400d726 <_dtoa_r+0x40e>
3400dc68:	4628      	mov	r0, r5
3400dc6a:	e7bd      	b.n	3400dbe8 <_dtoa_r+0x8d0>
3400dc6c:	2201      	movs	r2, #1
3400dc6e:	e7e2      	b.n	3400dc36 <_dtoa_r+0x91e>
3400dc70:	9b06      	ldr	r3, [sp, #24]
3400dc72:	2b00      	cmp	r3, #0
3400dc74:	db04      	blt.n	3400dc80 <_dtoa_r+0x968>
3400dc76:	9907      	ldr	r1, [sp, #28]
3400dc78:	430b      	orrs	r3, r1
3400dc7a:	9908      	ldr	r1, [sp, #32]
3400dc7c:	430b      	orrs	r3, r1
3400dc7e:	d120      	bne.n	3400dcc2 <_dtoa_r+0x9aa>
3400dc80:	2a00      	cmp	r2, #0
3400dc82:	ddee      	ble.n	3400dc62 <_dtoa_r+0x94a>
3400dc84:	2201      	movs	r2, #1
3400dc86:	9901      	ldr	r1, [sp, #4]
3400dc88:	4648      	mov	r0, r9
3400dc8a:	f000 faf7 	bl	3400e27c <__lshift>
3400dc8e:	4621      	mov	r1, r4
3400dc90:	9001      	str	r0, [sp, #4]
3400dc92:	f000 fb5f 	bl	3400e354 <__mcmp>
3400dc96:	2800      	cmp	r0, #0
3400dc98:	dc03      	bgt.n	3400dca2 <_dtoa_r+0x98a>
3400dc9a:	d1e2      	bne.n	3400dc62 <_dtoa_r+0x94a>
3400dc9c:	f01a 0f01 	tst.w	sl, #1
3400dca0:	d0df      	beq.n	3400dc62 <_dtoa_r+0x94a>
3400dca2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400dca6:	d1d9      	bne.n	3400dc5c <_dtoa_r+0x944>
3400dca8:	2339      	movs	r3, #57	@ 0x39
3400dcaa:	f88b 3000 	strb.w	r3, [fp]
3400dcae:	4633      	mov	r3, r6
3400dcb0:	461e      	mov	r6, r3
3400dcb2:	3b01      	subs	r3, #1
3400dcb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3400dcb8:	2a39      	cmp	r2, #57	@ 0x39
3400dcba:	d052      	beq.n	3400dd62 <_dtoa_r+0xa4a>
3400dcbc:	3201      	adds	r2, #1
3400dcbe:	701a      	strb	r2, [r3, #0]
3400dcc0:	e531      	b.n	3400d726 <_dtoa_r+0x40e>
3400dcc2:	2a00      	cmp	r2, #0
3400dcc4:	dd07      	ble.n	3400dcd6 <_dtoa_r+0x9be>
3400dcc6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400dcca:	d0ed      	beq.n	3400dca8 <_dtoa_r+0x990>
3400dccc:	f10a 0301 	add.w	r3, sl, #1
3400dcd0:	f88b 3000 	strb.w	r3, [fp]
3400dcd4:	e527      	b.n	3400d726 <_dtoa_r+0x40e>
3400dcd6:	9b04      	ldr	r3, [sp, #16]
3400dcd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400dcda:	f803 ac01 	strb.w	sl, [r3, #-1]
3400dcde:	4293      	cmp	r3, r2
3400dce0:	d029      	beq.n	3400dd36 <_dtoa_r+0xa1e>
3400dce2:	2300      	movs	r3, #0
3400dce4:	220a      	movs	r2, #10
3400dce6:	9901      	ldr	r1, [sp, #4]
3400dce8:	4648      	mov	r0, r9
3400dcea:	f000 f91f 	bl	3400df2c <__multadd>
3400dcee:	45a8      	cmp	r8, r5
3400dcf0:	9001      	str	r0, [sp, #4]
3400dcf2:	f04f 0300 	mov.w	r3, #0
3400dcf6:	f04f 020a 	mov.w	r2, #10
3400dcfa:	4641      	mov	r1, r8
3400dcfc:	4648      	mov	r0, r9
3400dcfe:	d107      	bne.n	3400dd10 <_dtoa_r+0x9f8>
3400dd00:	f000 f914 	bl	3400df2c <__multadd>
3400dd04:	4680      	mov	r8, r0
3400dd06:	4605      	mov	r5, r0
3400dd08:	9b04      	ldr	r3, [sp, #16]
3400dd0a:	3301      	adds	r3, #1
3400dd0c:	9304      	str	r3, [sp, #16]
3400dd0e:	e776      	b.n	3400dbfe <_dtoa_r+0x8e6>
3400dd10:	f000 f90c 	bl	3400df2c <__multadd>
3400dd14:	4629      	mov	r1, r5
3400dd16:	4680      	mov	r8, r0
3400dd18:	2300      	movs	r3, #0
3400dd1a:	220a      	movs	r2, #10
3400dd1c:	4648      	mov	r0, r9
3400dd1e:	f000 f905 	bl	3400df2c <__multadd>
3400dd22:	4605      	mov	r5, r0
3400dd24:	e7f0      	b.n	3400dd08 <_dtoa_r+0x9f0>
3400dd26:	f1bb 0f00 	cmp.w	fp, #0
3400dd2a:	f04f 0800 	mov.w	r8, #0
3400dd2e:	bfcc      	ite	gt
3400dd30:	465e      	movgt	r6, fp
3400dd32:	2601      	movle	r6, #1
3400dd34:	443e      	add	r6, r7
3400dd36:	2201      	movs	r2, #1
3400dd38:	9901      	ldr	r1, [sp, #4]
3400dd3a:	4648      	mov	r0, r9
3400dd3c:	f000 fa9e 	bl	3400e27c <__lshift>
3400dd40:	4621      	mov	r1, r4
3400dd42:	9001      	str	r0, [sp, #4]
3400dd44:	f000 fb06 	bl	3400e354 <__mcmp>
3400dd48:	2800      	cmp	r0, #0
3400dd4a:	dcb0      	bgt.n	3400dcae <_dtoa_r+0x996>
3400dd4c:	d102      	bne.n	3400dd54 <_dtoa_r+0xa3c>
3400dd4e:	f01a 0f01 	tst.w	sl, #1
3400dd52:	d1ac      	bne.n	3400dcae <_dtoa_r+0x996>
3400dd54:	4633      	mov	r3, r6
3400dd56:	461e      	mov	r6, r3
3400dd58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400dd5c:	2a30      	cmp	r2, #48	@ 0x30
3400dd5e:	d0fa      	beq.n	3400dd56 <_dtoa_r+0xa3e>
3400dd60:	e4e1      	b.n	3400d726 <_dtoa_r+0x40e>
3400dd62:	429f      	cmp	r7, r3
3400dd64:	d1a4      	bne.n	3400dcb0 <_dtoa_r+0x998>
3400dd66:	9b05      	ldr	r3, [sp, #20]
3400dd68:	3301      	adds	r3, #1
3400dd6a:	9305      	str	r3, [sp, #20]
3400dd6c:	2331      	movs	r3, #49	@ 0x31
3400dd6e:	703b      	strb	r3, [r7, #0]
3400dd70:	e4d9      	b.n	3400d726 <_dtoa_r+0x40e>
3400dd72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400dd74:	4f16      	ldr	r7, [pc, #88]	@ (3400ddd0 <_dtoa_r+0xab8>)
3400dd76:	b11b      	cbz	r3, 3400dd80 <_dtoa_r+0xa68>
3400dd78:	f107 0308 	add.w	r3, r7, #8
3400dd7c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400dd7e:	6013      	str	r3, [r2, #0]
3400dd80:	4638      	mov	r0, r7
3400dd82:	b011      	add	sp, #68	@ 0x44
3400dd84:	ecbd 8b02 	vpop	{d8}
3400dd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400dd8c:	9b07      	ldr	r3, [sp, #28]
3400dd8e:	2b01      	cmp	r3, #1
3400dd90:	f77f ae2c 	ble.w	3400d9ec <_dtoa_r+0x6d4>
3400dd94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400dd96:	930b      	str	r3, [sp, #44]	@ 0x2c
3400dd98:	2001      	movs	r0, #1
3400dd9a:	e64c      	b.n	3400da36 <_dtoa_r+0x71e>
3400dd9c:	f1bb 0f00 	cmp.w	fp, #0
3400dda0:	f77f aed8 	ble.w	3400db54 <_dtoa_r+0x83c>
3400dda4:	463e      	mov	r6, r7
3400dda6:	4621      	mov	r1, r4
3400dda8:	9801      	ldr	r0, [sp, #4]
3400ddaa:	f7ff fa28 	bl	3400d1fe <quorem>
3400ddae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400ddb2:	f806 ab01 	strb.w	sl, [r6], #1
3400ddb6:	1bf2      	subs	r2, r6, r7
3400ddb8:	4593      	cmp	fp, r2
3400ddba:	ddb4      	ble.n	3400dd26 <_dtoa_r+0xa0e>
3400ddbc:	2300      	movs	r3, #0
3400ddbe:	220a      	movs	r2, #10
3400ddc0:	9901      	ldr	r1, [sp, #4]
3400ddc2:	4648      	mov	r0, r9
3400ddc4:	f000 f8b2 	bl	3400df2c <__multadd>
3400ddc8:	9001      	str	r0, [sp, #4]
3400ddca:	e7ec      	b.n	3400dda6 <_dtoa_r+0xa8e>
3400ddcc:	3400f69e 	.word	0x3400f69e
3400ddd0:	3400f622 	.word	0x3400f622

3400ddd4 <_free_r>:
3400ddd4:	b538      	push	{r3, r4, r5, lr}
3400ddd6:	4605      	mov	r5, r0
3400ddd8:	2900      	cmp	r1, #0
3400ddda:	d041      	beq.n	3400de60 <_free_r+0x8c>
3400dddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
3400dde0:	1f0c      	subs	r4, r1, #4
3400dde2:	2b00      	cmp	r3, #0
3400dde4:	bfb8      	it	lt
3400dde6:	18e4      	addlt	r4, r4, r3
3400dde8:	f7fe fa38 	bl	3400c25c <__malloc_lock>
3400ddec:	4a1d      	ldr	r2, [pc, #116]	@ (3400de64 <_free_r+0x90>)
3400ddee:	6813      	ldr	r3, [r2, #0]
3400ddf0:	b933      	cbnz	r3, 3400de00 <_free_r+0x2c>
3400ddf2:	6063      	str	r3, [r4, #4]
3400ddf4:	6014      	str	r4, [r2, #0]
3400ddf6:	4628      	mov	r0, r5
3400ddf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400ddfc:	f7fe ba34 	b.w	3400c268 <__malloc_unlock>
3400de00:	42a3      	cmp	r3, r4
3400de02:	d908      	bls.n	3400de16 <_free_r+0x42>
3400de04:	6820      	ldr	r0, [r4, #0]
3400de06:	1821      	adds	r1, r4, r0
3400de08:	428b      	cmp	r3, r1
3400de0a:	bf01      	itttt	eq
3400de0c:	6819      	ldreq	r1, [r3, #0]
3400de0e:	685b      	ldreq	r3, [r3, #4]
3400de10:	1809      	addeq	r1, r1, r0
3400de12:	6021      	streq	r1, [r4, #0]
3400de14:	e7ed      	b.n	3400ddf2 <_free_r+0x1e>
3400de16:	461a      	mov	r2, r3
3400de18:	685b      	ldr	r3, [r3, #4]
3400de1a:	b10b      	cbz	r3, 3400de20 <_free_r+0x4c>
3400de1c:	42a3      	cmp	r3, r4
3400de1e:	d9fa      	bls.n	3400de16 <_free_r+0x42>
3400de20:	6811      	ldr	r1, [r2, #0]
3400de22:	1850      	adds	r0, r2, r1
3400de24:	42a0      	cmp	r0, r4
3400de26:	d10b      	bne.n	3400de40 <_free_r+0x6c>
3400de28:	6820      	ldr	r0, [r4, #0]
3400de2a:	4401      	add	r1, r0
3400de2c:	1850      	adds	r0, r2, r1
3400de2e:	6011      	str	r1, [r2, #0]
3400de30:	4283      	cmp	r3, r0
3400de32:	d1e0      	bne.n	3400ddf6 <_free_r+0x22>
3400de34:	6818      	ldr	r0, [r3, #0]
3400de36:	685b      	ldr	r3, [r3, #4]
3400de38:	4408      	add	r0, r1
3400de3a:	6053      	str	r3, [r2, #4]
3400de3c:	6010      	str	r0, [r2, #0]
3400de3e:	e7da      	b.n	3400ddf6 <_free_r+0x22>
3400de40:	d902      	bls.n	3400de48 <_free_r+0x74>
3400de42:	230c      	movs	r3, #12
3400de44:	602b      	str	r3, [r5, #0]
3400de46:	e7d6      	b.n	3400ddf6 <_free_r+0x22>
3400de48:	6820      	ldr	r0, [r4, #0]
3400de4a:	1821      	adds	r1, r4, r0
3400de4c:	428b      	cmp	r3, r1
3400de4e:	bf02      	ittt	eq
3400de50:	6819      	ldreq	r1, [r3, #0]
3400de52:	685b      	ldreq	r3, [r3, #4]
3400de54:	1809      	addeq	r1, r1, r0
3400de56:	6063      	str	r3, [r4, #4]
3400de58:	bf08      	it	eq
3400de5a:	6021      	streq	r1, [r4, #0]
3400de5c:	6054      	str	r4, [r2, #4]
3400de5e:	e7ca      	b.n	3400ddf6 <_free_r+0x22>
3400de60:	bd38      	pop	{r3, r4, r5, pc}
3400de62:	bf00      	nop
3400de64:	34010400 	.word	0x34010400

3400de68 <_Balloc>:
3400de68:	b570      	push	{r4, r5, r6, lr}
3400de6a:	69c6      	ldr	r6, [r0, #28]
3400de6c:	4604      	mov	r4, r0
3400de6e:	460d      	mov	r5, r1
3400de70:	b976      	cbnz	r6, 3400de90 <_Balloc+0x28>
3400de72:	2010      	movs	r0, #16
3400de74:	f7fe f948 	bl	3400c108 <malloc>
3400de78:	4602      	mov	r2, r0
3400de7a:	61e0      	str	r0, [r4, #28]
3400de7c:	b920      	cbnz	r0, 3400de88 <_Balloc+0x20>
3400de7e:	4b18      	ldr	r3, [pc, #96]	@ (3400dee0 <_Balloc+0x78>)
3400de80:	216b      	movs	r1, #107	@ 0x6b
3400de82:	4818      	ldr	r0, [pc, #96]	@ (3400dee4 <_Balloc+0x7c>)
3400de84:	f7fe f922 	bl	3400c0cc <__assert_func>
3400de88:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400de8c:	6006      	str	r6, [r0, #0]
3400de8e:	60c6      	str	r6, [r0, #12]
3400de90:	69e6      	ldr	r6, [r4, #28]
3400de92:	68f3      	ldr	r3, [r6, #12]
3400de94:	b183      	cbz	r3, 3400deb8 <_Balloc+0x50>
3400de96:	69e3      	ldr	r3, [r4, #28]
3400de98:	68db      	ldr	r3, [r3, #12]
3400de9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3400de9e:	b9b8      	cbnz	r0, 3400ded0 <_Balloc+0x68>
3400dea0:	2101      	movs	r1, #1
3400dea2:	4620      	mov	r0, r4
3400dea4:	fa01 f605 	lsl.w	r6, r1, r5
3400dea8:	1d72      	adds	r2, r6, #5
3400deaa:	0092      	lsls	r2, r2, #2
3400deac:	f000 fd68 	bl	3400e980 <_calloc_r>
3400deb0:	b160      	cbz	r0, 3400decc <_Balloc+0x64>
3400deb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
3400deb6:	e00e      	b.n	3400ded6 <_Balloc+0x6e>
3400deb8:	2221      	movs	r2, #33	@ 0x21
3400deba:	2104      	movs	r1, #4
3400debc:	4620      	mov	r0, r4
3400debe:	f000 fd5f 	bl	3400e980 <_calloc_r>
3400dec2:	69e3      	ldr	r3, [r4, #28]
3400dec4:	60f0      	str	r0, [r6, #12]
3400dec6:	68db      	ldr	r3, [r3, #12]
3400dec8:	2b00      	cmp	r3, #0
3400deca:	d1e4      	bne.n	3400de96 <_Balloc+0x2e>
3400decc:	2000      	movs	r0, #0
3400dece:	bd70      	pop	{r4, r5, r6, pc}
3400ded0:	6802      	ldr	r2, [r0, #0]
3400ded2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3400ded6:	2300      	movs	r3, #0
3400ded8:	e9c0 3303 	strd	r3, r3, [r0, #12]
3400dedc:	e7f7      	b.n	3400dece <_Balloc+0x66>
3400dede:	bf00      	nop
3400dee0:	3400f62f 	.word	0x3400f62f
3400dee4:	3400f6af 	.word	0x3400f6af

3400dee8 <_Bfree>:
3400dee8:	b570      	push	{r4, r5, r6, lr}
3400deea:	69c6      	ldr	r6, [r0, #28]
3400deec:	4605      	mov	r5, r0
3400deee:	460c      	mov	r4, r1
3400def0:	b976      	cbnz	r6, 3400df10 <_Bfree+0x28>
3400def2:	2010      	movs	r0, #16
3400def4:	f7fe f908 	bl	3400c108 <malloc>
3400def8:	4602      	mov	r2, r0
3400defa:	61e8      	str	r0, [r5, #28]
3400defc:	b920      	cbnz	r0, 3400df08 <_Bfree+0x20>
3400defe:	4b09      	ldr	r3, [pc, #36]	@ (3400df24 <_Bfree+0x3c>)
3400df00:	218f      	movs	r1, #143	@ 0x8f
3400df02:	4809      	ldr	r0, [pc, #36]	@ (3400df28 <_Bfree+0x40>)
3400df04:	f7fe f8e2 	bl	3400c0cc <__assert_func>
3400df08:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400df0c:	6006      	str	r6, [r0, #0]
3400df0e:	60c6      	str	r6, [r0, #12]
3400df10:	b13c      	cbz	r4, 3400df22 <_Bfree+0x3a>
3400df12:	69eb      	ldr	r3, [r5, #28]
3400df14:	6862      	ldr	r2, [r4, #4]
3400df16:	68db      	ldr	r3, [r3, #12]
3400df18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3400df1c:	6021      	str	r1, [r4, #0]
3400df1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3400df22:	bd70      	pop	{r4, r5, r6, pc}
3400df24:	3400f62f 	.word	0x3400f62f
3400df28:	3400f6af 	.word	0x3400f6af

3400df2c <__multadd>:
3400df2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400df30:	f101 0c14 	add.w	ip, r1, #20
3400df34:	4607      	mov	r7, r0
3400df36:	460c      	mov	r4, r1
3400df38:	461e      	mov	r6, r3
3400df3a:	690d      	ldr	r5, [r1, #16]
3400df3c:	2000      	movs	r0, #0
3400df3e:	f8dc 3000 	ldr.w	r3, [ip]
3400df42:	3001      	adds	r0, #1
3400df44:	b299      	uxth	r1, r3
3400df46:	4285      	cmp	r5, r0
3400df48:	fb02 6101 	mla	r1, r2, r1, r6
3400df4c:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400df50:	ea4f 4311 	mov.w	r3, r1, lsr #16
3400df54:	b289      	uxth	r1, r1
3400df56:	fb02 3306 	mla	r3, r2, r6, r3
3400df5a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3400df5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400df62:	f84c 1b04 	str.w	r1, [ip], #4
3400df66:	dcea      	bgt.n	3400df3e <__multadd+0x12>
3400df68:	b30e      	cbz	r6, 3400dfae <__multadd+0x82>
3400df6a:	68a3      	ldr	r3, [r4, #8]
3400df6c:	42ab      	cmp	r3, r5
3400df6e:	dc19      	bgt.n	3400dfa4 <__multadd+0x78>
3400df70:	6861      	ldr	r1, [r4, #4]
3400df72:	4638      	mov	r0, r7
3400df74:	3101      	adds	r1, #1
3400df76:	f7ff ff77 	bl	3400de68 <_Balloc>
3400df7a:	4680      	mov	r8, r0
3400df7c:	b928      	cbnz	r0, 3400df8a <__multadd+0x5e>
3400df7e:	4602      	mov	r2, r0
3400df80:	4b0c      	ldr	r3, [pc, #48]	@ (3400dfb4 <__multadd+0x88>)
3400df82:	21ba      	movs	r1, #186	@ 0xba
3400df84:	480c      	ldr	r0, [pc, #48]	@ (3400dfb8 <__multadd+0x8c>)
3400df86:	f7fe f8a1 	bl	3400c0cc <__assert_func>
3400df8a:	6922      	ldr	r2, [r4, #16]
3400df8c:	f104 010c 	add.w	r1, r4, #12
3400df90:	300c      	adds	r0, #12
3400df92:	3202      	adds	r2, #2
3400df94:	0092      	lsls	r2, r2, #2
3400df96:	f7ff f91e 	bl	3400d1d6 <memcpy>
3400df9a:	4621      	mov	r1, r4
3400df9c:	4644      	mov	r4, r8
3400df9e:	4638      	mov	r0, r7
3400dfa0:	f7ff ffa2 	bl	3400dee8 <_Bfree>
3400dfa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3400dfa8:	3501      	adds	r5, #1
3400dfaa:	615e      	str	r6, [r3, #20]
3400dfac:	6125      	str	r5, [r4, #16]
3400dfae:	4620      	mov	r0, r4
3400dfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400dfb4:	3400f69e 	.word	0x3400f69e
3400dfb8:	3400f6af 	.word	0x3400f6af

3400dfbc <__hi0bits>:
3400dfbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3400dfc0:	4603      	mov	r3, r0
3400dfc2:	bf36      	itet	cc
3400dfc4:	0403      	lslcc	r3, r0, #16
3400dfc6:	2000      	movcs	r0, #0
3400dfc8:	2010      	movcc	r0, #16
3400dfca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400dfce:	bf3c      	itt	cc
3400dfd0:	021b      	lslcc	r3, r3, #8
3400dfd2:	3008      	addcc	r0, #8
3400dfd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dfd8:	bf3c      	itt	cc
3400dfda:	011b      	lslcc	r3, r3, #4
3400dfdc:	3004      	addcc	r0, #4
3400dfde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400dfe2:	bf3c      	itt	cc
3400dfe4:	009b      	lslcc	r3, r3, #2
3400dfe6:	3002      	addcc	r0, #2
3400dfe8:	2b00      	cmp	r3, #0
3400dfea:	db05      	blt.n	3400dff8 <__hi0bits+0x3c>
3400dfec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3400dff0:	f100 0001 	add.w	r0, r0, #1
3400dff4:	bf08      	it	eq
3400dff6:	2020      	moveq	r0, #32
3400dff8:	4770      	bx	lr

3400dffa <__lo0bits>:
3400dffa:	6803      	ldr	r3, [r0, #0]
3400dffc:	4602      	mov	r2, r0
3400dffe:	f013 0007 	ands.w	r0, r3, #7
3400e002:	d00b      	beq.n	3400e01c <__lo0bits+0x22>
3400e004:	07d9      	lsls	r1, r3, #31
3400e006:	d421      	bmi.n	3400e04c <__lo0bits+0x52>
3400e008:	0798      	lsls	r0, r3, #30
3400e00a:	bf47      	ittee	mi
3400e00c:	085b      	lsrmi	r3, r3, #1
3400e00e:	2001      	movmi	r0, #1
3400e010:	089b      	lsrpl	r3, r3, #2
3400e012:	2002      	movpl	r0, #2
3400e014:	bf4c      	ite	mi
3400e016:	6013      	strmi	r3, [r2, #0]
3400e018:	6013      	strpl	r3, [r2, #0]
3400e01a:	4770      	bx	lr
3400e01c:	b299      	uxth	r1, r3
3400e01e:	b909      	cbnz	r1, 3400e024 <__lo0bits+0x2a>
3400e020:	0c1b      	lsrs	r3, r3, #16
3400e022:	2010      	movs	r0, #16
3400e024:	b2d9      	uxtb	r1, r3
3400e026:	b909      	cbnz	r1, 3400e02c <__lo0bits+0x32>
3400e028:	3008      	adds	r0, #8
3400e02a:	0a1b      	lsrs	r3, r3, #8
3400e02c:	0719      	lsls	r1, r3, #28
3400e02e:	bf04      	itt	eq
3400e030:	091b      	lsreq	r3, r3, #4
3400e032:	3004      	addeq	r0, #4
3400e034:	0799      	lsls	r1, r3, #30
3400e036:	bf04      	itt	eq
3400e038:	089b      	lsreq	r3, r3, #2
3400e03a:	3002      	addeq	r0, #2
3400e03c:	07d9      	lsls	r1, r3, #31
3400e03e:	d403      	bmi.n	3400e048 <__lo0bits+0x4e>
3400e040:	085b      	lsrs	r3, r3, #1
3400e042:	f100 0001 	add.w	r0, r0, #1
3400e046:	d003      	beq.n	3400e050 <__lo0bits+0x56>
3400e048:	6013      	str	r3, [r2, #0]
3400e04a:	4770      	bx	lr
3400e04c:	2000      	movs	r0, #0
3400e04e:	4770      	bx	lr
3400e050:	2020      	movs	r0, #32
3400e052:	4770      	bx	lr

3400e054 <__i2b>:
3400e054:	b510      	push	{r4, lr}
3400e056:	460c      	mov	r4, r1
3400e058:	2101      	movs	r1, #1
3400e05a:	f7ff ff05 	bl	3400de68 <_Balloc>
3400e05e:	4602      	mov	r2, r0
3400e060:	b928      	cbnz	r0, 3400e06e <__i2b+0x1a>
3400e062:	4b05      	ldr	r3, [pc, #20]	@ (3400e078 <__i2b+0x24>)
3400e064:	f240 1145 	movw	r1, #325	@ 0x145
3400e068:	4804      	ldr	r0, [pc, #16]	@ (3400e07c <__i2b+0x28>)
3400e06a:	f7fe f82f 	bl	3400c0cc <__assert_func>
3400e06e:	2301      	movs	r3, #1
3400e070:	6144      	str	r4, [r0, #20]
3400e072:	6103      	str	r3, [r0, #16]
3400e074:	bd10      	pop	{r4, pc}
3400e076:	bf00      	nop
3400e078:	3400f69e 	.word	0x3400f69e
3400e07c:	3400f6af 	.word	0x3400f6af

3400e080 <__multiply>:
3400e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e084:	4617      	mov	r7, r2
3400e086:	690a      	ldr	r2, [r1, #16]
3400e088:	4689      	mov	r9, r1
3400e08a:	b085      	sub	sp, #20
3400e08c:	693b      	ldr	r3, [r7, #16]
3400e08e:	429a      	cmp	r2, r3
3400e090:	bfa2      	ittt	ge
3400e092:	463b      	movge	r3, r7
3400e094:	460f      	movge	r7, r1
3400e096:	4699      	movge	r9, r3
3400e098:	693d      	ldr	r5, [r7, #16]
3400e09a:	68bb      	ldr	r3, [r7, #8]
3400e09c:	f8d9 a010 	ldr.w	sl, [r9, #16]
3400e0a0:	6879      	ldr	r1, [r7, #4]
3400e0a2:	eb05 060a 	add.w	r6, r5, sl
3400e0a6:	42b3      	cmp	r3, r6
3400e0a8:	bfb8      	it	lt
3400e0aa:	3101      	addlt	r1, #1
3400e0ac:	f7ff fedc 	bl	3400de68 <_Balloc>
3400e0b0:	b930      	cbnz	r0, 3400e0c0 <__multiply+0x40>
3400e0b2:	4602      	mov	r2, r0
3400e0b4:	4b42      	ldr	r3, [pc, #264]	@ (3400e1c0 <__multiply+0x140>)
3400e0b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400e0ba:	4842      	ldr	r0, [pc, #264]	@ (3400e1c4 <__multiply+0x144>)
3400e0bc:	f7fe f806 	bl	3400c0cc <__assert_func>
3400e0c0:	f100 0414 	add.w	r4, r0, #20
3400e0c4:	2200      	movs	r2, #0
3400e0c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3400e0ca:	4623      	mov	r3, r4
3400e0cc:	4573      	cmp	r3, lr
3400e0ce:	d320      	bcc.n	3400e112 <__multiply+0x92>
3400e0d0:	f107 0814 	add.w	r8, r7, #20
3400e0d4:	f109 0114 	add.w	r1, r9, #20
3400e0d8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3400e0dc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3400e0e0:	9302      	str	r3, [sp, #8]
3400e0e2:	1beb      	subs	r3, r5, r7
3400e0e4:	3715      	adds	r7, #21
3400e0e6:	3b15      	subs	r3, #21
3400e0e8:	f023 0303 	bic.w	r3, r3, #3
3400e0ec:	3304      	adds	r3, #4
3400e0ee:	42bd      	cmp	r5, r7
3400e0f0:	bf38      	it	cc
3400e0f2:	2304      	movcc	r3, #4
3400e0f4:	9301      	str	r3, [sp, #4]
3400e0f6:	9b02      	ldr	r3, [sp, #8]
3400e0f8:	9103      	str	r1, [sp, #12]
3400e0fa:	428b      	cmp	r3, r1
3400e0fc:	d80c      	bhi.n	3400e118 <__multiply+0x98>
3400e0fe:	2e00      	cmp	r6, #0
3400e100:	dd03      	ble.n	3400e10a <__multiply+0x8a>
3400e102:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3400e106:	2b00      	cmp	r3, #0
3400e108:	d057      	beq.n	3400e1ba <__multiply+0x13a>
3400e10a:	6106      	str	r6, [r0, #16]
3400e10c:	b005      	add	sp, #20
3400e10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400e112:	f843 2b04 	str.w	r2, [r3], #4
3400e116:	e7d9      	b.n	3400e0cc <__multiply+0x4c>
3400e118:	f8b1 a000 	ldrh.w	sl, [r1]
3400e11c:	f1ba 0f00 	cmp.w	sl, #0
3400e120:	d021      	beq.n	3400e166 <__multiply+0xe6>
3400e122:	46c4      	mov	ip, r8
3400e124:	46a1      	mov	r9, r4
3400e126:	2700      	movs	r7, #0
3400e128:	f85c 2b04 	ldr.w	r2, [ip], #4
3400e12c:	f8d9 3000 	ldr.w	r3, [r9]
3400e130:	fa1f fb82 	uxth.w	fp, r2
3400e134:	4565      	cmp	r5, ip
3400e136:	b29b      	uxth	r3, r3
3400e138:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400e13c:	fb0a 330b 	mla	r3, sl, fp, r3
3400e140:	443b      	add	r3, r7
3400e142:	f8d9 7000 	ldr.w	r7, [r9]
3400e146:	ea4f 4717 	mov.w	r7, r7, lsr #16
3400e14a:	fb0a 7202 	mla	r2, sl, r2, r7
3400e14e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3400e152:	b29b      	uxth	r3, r3
3400e154:	ea4f 4712 	mov.w	r7, r2, lsr #16
3400e158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400e15c:	f849 3b04 	str.w	r3, [r9], #4
3400e160:	d8e2      	bhi.n	3400e128 <__multiply+0xa8>
3400e162:	9b01      	ldr	r3, [sp, #4]
3400e164:	50e7      	str	r7, [r4, r3]
3400e166:	9b03      	ldr	r3, [sp, #12]
3400e168:	3104      	adds	r1, #4
3400e16a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3400e16e:	f1b9 0f00 	cmp.w	r9, #0
3400e172:	d020      	beq.n	3400e1b6 <__multiply+0x136>
3400e174:	6823      	ldr	r3, [r4, #0]
3400e176:	4647      	mov	r7, r8
3400e178:	46a4      	mov	ip, r4
3400e17a:	f04f 0a00 	mov.w	sl, #0
3400e17e:	f8b7 b000 	ldrh.w	fp, [r7]
3400e182:	b29b      	uxth	r3, r3
3400e184:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3400e188:	fb09 220b 	mla	r2, r9, fp, r2
3400e18c:	4452      	add	r2, sl
3400e18e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400e192:	f84c 3b04 	str.w	r3, [ip], #4
3400e196:	f857 3b04 	ldr.w	r3, [r7], #4
3400e19a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400e19e:	f8bc 3000 	ldrh.w	r3, [ip]
3400e1a2:	42bd      	cmp	r5, r7
3400e1a4:	fb09 330a 	mla	r3, r9, sl, r3
3400e1a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
3400e1ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400e1b0:	d8e5      	bhi.n	3400e17e <__multiply+0xfe>
3400e1b2:	9a01      	ldr	r2, [sp, #4]
3400e1b4:	50a3      	str	r3, [r4, r2]
3400e1b6:	3404      	adds	r4, #4
3400e1b8:	e79d      	b.n	3400e0f6 <__multiply+0x76>
3400e1ba:	3e01      	subs	r6, #1
3400e1bc:	e79f      	b.n	3400e0fe <__multiply+0x7e>
3400e1be:	bf00      	nop
3400e1c0:	3400f69e 	.word	0x3400f69e
3400e1c4:	3400f6af 	.word	0x3400f6af

3400e1c8 <__pow5mult>:
3400e1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400e1cc:	4615      	mov	r5, r2
3400e1ce:	f012 0203 	ands.w	r2, r2, #3
3400e1d2:	4607      	mov	r7, r0
3400e1d4:	460e      	mov	r6, r1
3400e1d6:	d007      	beq.n	3400e1e8 <__pow5mult+0x20>
3400e1d8:	3a01      	subs	r2, #1
3400e1da:	4c25      	ldr	r4, [pc, #148]	@ (3400e270 <__pow5mult+0xa8>)
3400e1dc:	2300      	movs	r3, #0
3400e1de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3400e1e2:	f7ff fea3 	bl	3400df2c <__multadd>
3400e1e6:	4606      	mov	r6, r0
3400e1e8:	10ad      	asrs	r5, r5, #2
3400e1ea:	d03d      	beq.n	3400e268 <__pow5mult+0xa0>
3400e1ec:	69fc      	ldr	r4, [r7, #28]
3400e1ee:	b97c      	cbnz	r4, 3400e210 <__pow5mult+0x48>
3400e1f0:	2010      	movs	r0, #16
3400e1f2:	f7fd ff89 	bl	3400c108 <malloc>
3400e1f6:	4602      	mov	r2, r0
3400e1f8:	61f8      	str	r0, [r7, #28]
3400e1fa:	b928      	cbnz	r0, 3400e208 <__pow5mult+0x40>
3400e1fc:	4b1d      	ldr	r3, [pc, #116]	@ (3400e274 <__pow5mult+0xac>)
3400e1fe:	f240 11b3 	movw	r1, #435	@ 0x1b3
3400e202:	481d      	ldr	r0, [pc, #116]	@ (3400e278 <__pow5mult+0xb0>)
3400e204:	f7fd ff62 	bl	3400c0cc <__assert_func>
3400e208:	e9c0 4401 	strd	r4, r4, [r0, #4]
3400e20c:	6004      	str	r4, [r0, #0]
3400e20e:	60c4      	str	r4, [r0, #12]
3400e210:	f8d7 801c 	ldr.w	r8, [r7, #28]
3400e214:	f8d8 4008 	ldr.w	r4, [r8, #8]
3400e218:	b94c      	cbnz	r4, 3400e22e <__pow5mult+0x66>
3400e21a:	f240 2171 	movw	r1, #625	@ 0x271
3400e21e:	4638      	mov	r0, r7
3400e220:	f7ff ff18 	bl	3400e054 <__i2b>
3400e224:	2300      	movs	r3, #0
3400e226:	4604      	mov	r4, r0
3400e228:	f8c8 0008 	str.w	r0, [r8, #8]
3400e22c:	6003      	str	r3, [r0, #0]
3400e22e:	f04f 0900 	mov.w	r9, #0
3400e232:	07eb      	lsls	r3, r5, #31
3400e234:	d50a      	bpl.n	3400e24c <__pow5mult+0x84>
3400e236:	4631      	mov	r1, r6
3400e238:	4622      	mov	r2, r4
3400e23a:	4638      	mov	r0, r7
3400e23c:	f7ff ff20 	bl	3400e080 <__multiply>
3400e240:	4680      	mov	r8, r0
3400e242:	4631      	mov	r1, r6
3400e244:	4638      	mov	r0, r7
3400e246:	4646      	mov	r6, r8
3400e248:	f7ff fe4e 	bl	3400dee8 <_Bfree>
3400e24c:	106d      	asrs	r5, r5, #1
3400e24e:	d00b      	beq.n	3400e268 <__pow5mult+0xa0>
3400e250:	6820      	ldr	r0, [r4, #0]
3400e252:	b938      	cbnz	r0, 3400e264 <__pow5mult+0x9c>
3400e254:	4622      	mov	r2, r4
3400e256:	4621      	mov	r1, r4
3400e258:	4638      	mov	r0, r7
3400e25a:	f7ff ff11 	bl	3400e080 <__multiply>
3400e25e:	6020      	str	r0, [r4, #0]
3400e260:	f8c0 9000 	str.w	r9, [r0]
3400e264:	4604      	mov	r4, r0
3400e266:	e7e4      	b.n	3400e232 <__pow5mult+0x6a>
3400e268:	4630      	mov	r0, r6
3400e26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400e26e:	bf00      	nop
3400e270:	3400f79c 	.word	0x3400f79c
3400e274:	3400f62f 	.word	0x3400f62f
3400e278:	3400f6af 	.word	0x3400f6af

3400e27c <__lshift>:
3400e27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400e280:	460c      	mov	r4, r1
3400e282:	4607      	mov	r7, r0
3400e284:	4691      	mov	r9, r2
3400e286:	ea4f 1a62 	mov.w	sl, r2, asr #5
3400e28a:	6923      	ldr	r3, [r4, #16]
3400e28c:	6849      	ldr	r1, [r1, #4]
3400e28e:	eb03 1862 	add.w	r8, r3, r2, asr #5
3400e292:	68a3      	ldr	r3, [r4, #8]
3400e294:	f108 0601 	add.w	r6, r8, #1
3400e298:	42b3      	cmp	r3, r6
3400e29a:	db0b      	blt.n	3400e2b4 <__lshift+0x38>
3400e29c:	4638      	mov	r0, r7
3400e29e:	f7ff fde3 	bl	3400de68 <_Balloc>
3400e2a2:	4605      	mov	r5, r0
3400e2a4:	b948      	cbnz	r0, 3400e2ba <__lshift+0x3e>
3400e2a6:	4602      	mov	r2, r0
3400e2a8:	4b28      	ldr	r3, [pc, #160]	@ (3400e34c <__lshift+0xd0>)
3400e2aa:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400e2ae:	4828      	ldr	r0, [pc, #160]	@ (3400e350 <__lshift+0xd4>)
3400e2b0:	f7fd ff0c 	bl	3400c0cc <__assert_func>
3400e2b4:	3101      	adds	r1, #1
3400e2b6:	005b      	lsls	r3, r3, #1
3400e2b8:	e7ee      	b.n	3400e298 <__lshift+0x1c>
3400e2ba:	2300      	movs	r3, #0
3400e2bc:	f100 0114 	add.w	r1, r0, #20
3400e2c0:	f100 0210 	add.w	r2, r0, #16
3400e2c4:	4618      	mov	r0, r3
3400e2c6:	4553      	cmp	r3, sl
3400e2c8:	db33      	blt.n	3400e332 <__lshift+0xb6>
3400e2ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3400e2ce:	f104 0314 	add.w	r3, r4, #20
3400e2d2:	6920      	ldr	r0, [r4, #16]
3400e2d4:	f019 091f 	ands.w	r9, r9, #31
3400e2d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3400e2dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3400e2e0:	d02b      	beq.n	3400e33a <__lshift+0xbe>
3400e2e2:	f1c9 0e20 	rsb	lr, r9, #32
3400e2e6:	468a      	mov	sl, r1
3400e2e8:	2200      	movs	r2, #0
3400e2ea:	6818      	ldr	r0, [r3, #0]
3400e2ec:	fa00 f009 	lsl.w	r0, r0, r9
3400e2f0:	4310      	orrs	r0, r2
3400e2f2:	f84a 0b04 	str.w	r0, [sl], #4
3400e2f6:	f853 2b04 	ldr.w	r2, [r3], #4
3400e2fa:	459c      	cmp	ip, r3
3400e2fc:	fa22 f20e 	lsr.w	r2, r2, lr
3400e300:	d8f3      	bhi.n	3400e2ea <__lshift+0x6e>
3400e302:	ebac 0304 	sub.w	r3, ip, r4
3400e306:	f104 0015 	add.w	r0, r4, #21
3400e30a:	3b15      	subs	r3, #21
3400e30c:	f023 0303 	bic.w	r3, r3, #3
3400e310:	3304      	adds	r3, #4
3400e312:	4560      	cmp	r0, ip
3400e314:	bf88      	it	hi
3400e316:	2304      	movhi	r3, #4
3400e318:	50ca      	str	r2, [r1, r3]
3400e31a:	b10a      	cbz	r2, 3400e320 <__lshift+0xa4>
3400e31c:	f108 0602 	add.w	r6, r8, #2
3400e320:	3e01      	subs	r6, #1
3400e322:	4638      	mov	r0, r7
3400e324:	4621      	mov	r1, r4
3400e326:	612e      	str	r6, [r5, #16]
3400e328:	f7ff fdde 	bl	3400dee8 <_Bfree>
3400e32c:	4628      	mov	r0, r5
3400e32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400e332:	3301      	adds	r3, #1
3400e334:	f842 0f04 	str.w	r0, [r2, #4]!
3400e338:	e7c5      	b.n	3400e2c6 <__lshift+0x4a>
3400e33a:	3904      	subs	r1, #4
3400e33c:	f853 2b04 	ldr.w	r2, [r3], #4
3400e340:	459c      	cmp	ip, r3
3400e342:	f841 2f04 	str.w	r2, [r1, #4]!
3400e346:	d8f9      	bhi.n	3400e33c <__lshift+0xc0>
3400e348:	e7ea      	b.n	3400e320 <__lshift+0xa4>
3400e34a:	bf00      	nop
3400e34c:	3400f69e 	.word	0x3400f69e
3400e350:	3400f6af 	.word	0x3400f6af

3400e354 <__mcmp>:
3400e354:	4603      	mov	r3, r0
3400e356:	690a      	ldr	r2, [r1, #16]
3400e358:	6900      	ldr	r0, [r0, #16]
3400e35a:	1a80      	subs	r0, r0, r2
3400e35c:	b530      	push	{r4, r5, lr}
3400e35e:	d10e      	bne.n	3400e37e <__mcmp+0x2a>
3400e360:	3314      	adds	r3, #20
3400e362:	3114      	adds	r1, #20
3400e364:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3400e368:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3400e36c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3400e370:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3400e374:	4295      	cmp	r5, r2
3400e376:	d003      	beq.n	3400e380 <__mcmp+0x2c>
3400e378:	d205      	bcs.n	3400e386 <__mcmp+0x32>
3400e37a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e37e:	bd30      	pop	{r4, r5, pc}
3400e380:	42a3      	cmp	r3, r4
3400e382:	d3f3      	bcc.n	3400e36c <__mcmp+0x18>
3400e384:	e7fb      	b.n	3400e37e <__mcmp+0x2a>
3400e386:	2001      	movs	r0, #1
3400e388:	e7f9      	b.n	3400e37e <__mcmp+0x2a>
	...

3400e38c <__mdiff>:
3400e38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e390:	4689      	mov	r9, r1
3400e392:	4606      	mov	r6, r0
3400e394:	4611      	mov	r1, r2
3400e396:	4614      	mov	r4, r2
3400e398:	4648      	mov	r0, r9
3400e39a:	f7ff ffdb 	bl	3400e354 <__mcmp>
3400e39e:	1e05      	subs	r5, r0, #0
3400e3a0:	d112      	bne.n	3400e3c8 <__mdiff+0x3c>
3400e3a2:	4629      	mov	r1, r5
3400e3a4:	4630      	mov	r0, r6
3400e3a6:	f7ff fd5f 	bl	3400de68 <_Balloc>
3400e3aa:	4602      	mov	r2, r0
3400e3ac:	b928      	cbnz	r0, 3400e3ba <__mdiff+0x2e>
3400e3ae:	4b41      	ldr	r3, [pc, #260]	@ (3400e4b4 <__mdiff+0x128>)
3400e3b0:	f240 2137 	movw	r1, #567	@ 0x237
3400e3b4:	4840      	ldr	r0, [pc, #256]	@ (3400e4b8 <__mdiff+0x12c>)
3400e3b6:	f7fd fe89 	bl	3400c0cc <__assert_func>
3400e3ba:	2301      	movs	r3, #1
3400e3bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
3400e3c0:	4610      	mov	r0, r2
3400e3c2:	b003      	add	sp, #12
3400e3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400e3c8:	bfbc      	itt	lt
3400e3ca:	464b      	movlt	r3, r9
3400e3cc:	46a1      	movlt	r9, r4
3400e3ce:	4630      	mov	r0, r6
3400e3d0:	bfb8      	it	lt
3400e3d2:	2501      	movlt	r5, #1
3400e3d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
3400e3d8:	bfb4      	ite	lt
3400e3da:	461c      	movlt	r4, r3
3400e3dc:	2500      	movge	r5, #0
3400e3de:	f7ff fd43 	bl	3400de68 <_Balloc>
3400e3e2:	4602      	mov	r2, r0
3400e3e4:	b918      	cbnz	r0, 3400e3ee <__mdiff+0x62>
3400e3e6:	4b33      	ldr	r3, [pc, #204]	@ (3400e4b4 <__mdiff+0x128>)
3400e3e8:	f240 2145 	movw	r1, #581	@ 0x245
3400e3ec:	e7e2      	b.n	3400e3b4 <__mdiff+0x28>
3400e3ee:	f8d9 7010 	ldr.w	r7, [r9, #16]
3400e3f2:	f104 0e14 	add.w	lr, r4, #20
3400e3f6:	6926      	ldr	r6, [r4, #16]
3400e3f8:	f100 0b14 	add.w	fp, r0, #20
3400e3fc:	60c5      	str	r5, [r0, #12]
3400e3fe:	f109 0514 	add.w	r5, r9, #20
3400e402:	f109 0310 	add.w	r3, r9, #16
3400e406:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3400e40a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3400e40e:	46d9      	mov	r9, fp
3400e410:	f04f 0c00 	mov.w	ip, #0
3400e414:	9301      	str	r3, [sp, #4]
3400e416:	9b01      	ldr	r3, [sp, #4]
3400e418:	f85e 0b04 	ldr.w	r0, [lr], #4
3400e41c:	f853 af04 	ldr.w	sl, [r3, #4]!
3400e420:	4576      	cmp	r6, lr
3400e422:	9301      	str	r3, [sp, #4]
3400e424:	fa1f f38a 	uxth.w	r3, sl
3400e428:	4619      	mov	r1, r3
3400e42a:	b283      	uxth	r3, r0
3400e42c:	ea4f 4010 	mov.w	r0, r0, lsr #16
3400e430:	eba1 0303 	sub.w	r3, r1, r3
3400e434:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3400e438:	4463      	add	r3, ip
3400e43a:	eb00 4023 	add.w	r0, r0, r3, asr #16
3400e43e:	b29b      	uxth	r3, r3
3400e440:	ea4f 4c20 	mov.w	ip, r0, asr #16
3400e444:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400e448:	f849 3b04 	str.w	r3, [r9], #4
3400e44c:	d8e3      	bhi.n	3400e416 <__mdiff+0x8a>
3400e44e:	1b33      	subs	r3, r6, r4
3400e450:	3415      	adds	r4, #21
3400e452:	3b15      	subs	r3, #21
3400e454:	f023 0303 	bic.w	r3, r3, #3
3400e458:	3304      	adds	r3, #4
3400e45a:	42a6      	cmp	r6, r4
3400e45c:	bf38      	it	cc
3400e45e:	2304      	movcc	r3, #4
3400e460:	441d      	add	r5, r3
3400e462:	445b      	add	r3, fp
3400e464:	462c      	mov	r4, r5
3400e466:	461e      	mov	r6, r3
3400e468:	4544      	cmp	r4, r8
3400e46a:	d30e      	bcc.n	3400e48a <__mdiff+0xfe>
3400e46c:	f108 0103 	add.w	r1, r8, #3
3400e470:	1b49      	subs	r1, r1, r5
3400e472:	3d03      	subs	r5, #3
3400e474:	f021 0103 	bic.w	r1, r1, #3
3400e478:	45a8      	cmp	r8, r5
3400e47a:	bf38      	it	cc
3400e47c:	2100      	movcc	r1, #0
3400e47e:	440b      	add	r3, r1
3400e480:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3400e484:	b199      	cbz	r1, 3400e4ae <__mdiff+0x122>
3400e486:	6117      	str	r7, [r2, #16]
3400e488:	e79a      	b.n	3400e3c0 <__mdiff+0x34>
3400e48a:	f854 1b04 	ldr.w	r1, [r4], #4
3400e48e:	46e6      	mov	lr, ip
3400e490:	fa1f fc81 	uxth.w	ip, r1
3400e494:	0c08      	lsrs	r0, r1, #16
3400e496:	4471      	add	r1, lr
3400e498:	44f4      	add	ip, lr
3400e49a:	b289      	uxth	r1, r1
3400e49c:	eb00 402c 	add.w	r0, r0, ip, asr #16
3400e4a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3400e4a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
3400e4a8:	f846 1b04 	str.w	r1, [r6], #4
3400e4ac:	e7dc      	b.n	3400e468 <__mdiff+0xdc>
3400e4ae:	3f01      	subs	r7, #1
3400e4b0:	e7e6      	b.n	3400e480 <__mdiff+0xf4>
3400e4b2:	bf00      	nop
3400e4b4:	3400f69e 	.word	0x3400f69e
3400e4b8:	3400f6af 	.word	0x3400f6af

3400e4bc <__d2b>:
3400e4bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400e4c0:	460f      	mov	r7, r1
3400e4c2:	2101      	movs	r1, #1
3400e4c4:	4616      	mov	r6, r2
3400e4c6:	ec59 8b10 	vmov	r8, r9, d0
3400e4ca:	f7ff fccd 	bl	3400de68 <_Balloc>
3400e4ce:	4604      	mov	r4, r0
3400e4d0:	b930      	cbnz	r0, 3400e4e0 <__d2b+0x24>
3400e4d2:	4602      	mov	r2, r0
3400e4d4:	4b23      	ldr	r3, [pc, #140]	@ (3400e564 <__d2b+0xa8>)
3400e4d6:	f240 310f 	movw	r1, #783	@ 0x30f
3400e4da:	4823      	ldr	r0, [pc, #140]	@ (3400e568 <__d2b+0xac>)
3400e4dc:	f7fd fdf6 	bl	3400c0cc <__assert_func>
3400e4e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
3400e4e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
3400e4e8:	b10d      	cbz	r5, 3400e4ee <__d2b+0x32>
3400e4ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3400e4ee:	9301      	str	r3, [sp, #4]
3400e4f0:	f1b8 0300 	subs.w	r3, r8, #0
3400e4f4:	d023      	beq.n	3400e53e <__d2b+0x82>
3400e4f6:	4668      	mov	r0, sp
3400e4f8:	9300      	str	r3, [sp, #0]
3400e4fa:	f7ff fd7e 	bl	3400dffa <__lo0bits>
3400e4fe:	e9dd 1200 	ldrd	r1, r2, [sp]
3400e502:	b1d0      	cbz	r0, 3400e53a <__d2b+0x7e>
3400e504:	f1c0 0320 	rsb	r3, r0, #32
3400e508:	fa02 f303 	lsl.w	r3, r2, r3
3400e50c:	40c2      	lsrs	r2, r0
3400e50e:	430b      	orrs	r3, r1
3400e510:	9201      	str	r2, [sp, #4]
3400e512:	6163      	str	r3, [r4, #20]
3400e514:	9b01      	ldr	r3, [sp, #4]
3400e516:	2b00      	cmp	r3, #0
3400e518:	61a3      	str	r3, [r4, #24]
3400e51a:	bf0c      	ite	eq
3400e51c:	2201      	moveq	r2, #1
3400e51e:	2202      	movne	r2, #2
3400e520:	6122      	str	r2, [r4, #16]
3400e522:	b1a5      	cbz	r5, 3400e54e <__d2b+0x92>
3400e524:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3400e528:	4405      	add	r5, r0
3400e52a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3400e52e:	603d      	str	r5, [r7, #0]
3400e530:	6030      	str	r0, [r6, #0]
3400e532:	4620      	mov	r0, r4
3400e534:	b003      	add	sp, #12
3400e536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3400e53a:	6161      	str	r1, [r4, #20]
3400e53c:	e7ea      	b.n	3400e514 <__d2b+0x58>
3400e53e:	a801      	add	r0, sp, #4
3400e540:	f7ff fd5b 	bl	3400dffa <__lo0bits>
3400e544:	9b01      	ldr	r3, [sp, #4]
3400e546:	3020      	adds	r0, #32
3400e548:	2201      	movs	r2, #1
3400e54a:	6163      	str	r3, [r4, #20]
3400e54c:	e7e8      	b.n	3400e520 <__d2b+0x64>
3400e54e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3400e552:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3400e556:	6038      	str	r0, [r7, #0]
3400e558:	6918      	ldr	r0, [r3, #16]
3400e55a:	f7ff fd2f 	bl	3400dfbc <__hi0bits>
3400e55e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3400e562:	e7e5      	b.n	3400e530 <__d2b+0x74>
3400e564:	3400f69e 	.word	0x3400f69e
3400e568:	3400f6af 	.word	0x3400f6af

3400e56c <__sfputc_r>:
3400e56c:	6893      	ldr	r3, [r2, #8]
3400e56e:	3b01      	subs	r3, #1
3400e570:	2b00      	cmp	r3, #0
3400e572:	b410      	push	{r4}
3400e574:	6093      	str	r3, [r2, #8]
3400e576:	da08      	bge.n	3400e58a <__sfputc_r+0x1e>
3400e578:	6994      	ldr	r4, [r2, #24]
3400e57a:	42a3      	cmp	r3, r4
3400e57c:	db01      	blt.n	3400e582 <__sfputc_r+0x16>
3400e57e:	290a      	cmp	r1, #10
3400e580:	d103      	bne.n	3400e58a <__sfputc_r+0x1e>
3400e582:	f85d 4b04 	ldr.w	r4, [sp], #4
3400e586:	f7fe bcf4 	b.w	3400cf72 <__swbuf_r>
3400e58a:	6813      	ldr	r3, [r2, #0]
3400e58c:	1c58      	adds	r0, r3, #1
3400e58e:	6010      	str	r0, [r2, #0]
3400e590:	4608      	mov	r0, r1
3400e592:	7019      	strb	r1, [r3, #0]
3400e594:	f85d 4b04 	ldr.w	r4, [sp], #4
3400e598:	4770      	bx	lr

3400e59a <__sfputs_r>:
3400e59a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400e59c:	4606      	mov	r6, r0
3400e59e:	460f      	mov	r7, r1
3400e5a0:	4614      	mov	r4, r2
3400e5a2:	18d5      	adds	r5, r2, r3
3400e5a4:	42ac      	cmp	r4, r5
3400e5a6:	d101      	bne.n	3400e5ac <__sfputs_r+0x12>
3400e5a8:	2000      	movs	r0, #0
3400e5aa:	e007      	b.n	3400e5bc <__sfputs_r+0x22>
3400e5ac:	463a      	mov	r2, r7
3400e5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
3400e5b2:	4630      	mov	r0, r6
3400e5b4:	f7ff ffda 	bl	3400e56c <__sfputc_r>
3400e5b8:	1c43      	adds	r3, r0, #1
3400e5ba:	d1f3      	bne.n	3400e5a4 <__sfputs_r+0xa>
3400e5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3400e5c0 <_vfiprintf_r>:
3400e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e5c4:	460d      	mov	r5, r1
3400e5c6:	b09d      	sub	sp, #116	@ 0x74
3400e5c8:	4614      	mov	r4, r2
3400e5ca:	4698      	mov	r8, r3
3400e5cc:	4606      	mov	r6, r0
3400e5ce:	b118      	cbz	r0, 3400e5d8 <_vfiprintf_r+0x18>
3400e5d0:	6a03      	ldr	r3, [r0, #32]
3400e5d2:	b90b      	cbnz	r3, 3400e5d8 <_vfiprintf_r+0x18>
3400e5d4:	f7fe fbd2 	bl	3400cd7c <__sinit>
3400e5d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3400e5da:	07d9      	lsls	r1, r3, #31
3400e5dc:	d405      	bmi.n	3400e5ea <_vfiprintf_r+0x2a>
3400e5de:	89ab      	ldrh	r3, [r5, #12]
3400e5e0:	059a      	lsls	r2, r3, #22
3400e5e2:	d402      	bmi.n	3400e5ea <_vfiprintf_r+0x2a>
3400e5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3400e5e6:	f7fe fde6 	bl	3400d1b6 <__retarget_lock_acquire_recursive>
3400e5ea:	89ab      	ldrh	r3, [r5, #12]
3400e5ec:	071b      	lsls	r3, r3, #28
3400e5ee:	d501      	bpl.n	3400e5f4 <_vfiprintf_r+0x34>
3400e5f0:	692b      	ldr	r3, [r5, #16]
3400e5f2:	b99b      	cbnz	r3, 3400e61c <_vfiprintf_r+0x5c>
3400e5f4:	4629      	mov	r1, r5
3400e5f6:	4630      	mov	r0, r6
3400e5f8:	f7fe fcfa 	bl	3400cff0 <__swsetup_r>
3400e5fc:	b170      	cbz	r0, 3400e61c <_vfiprintf_r+0x5c>
3400e5fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3400e600:	07dc      	lsls	r4, r3, #31
3400e602:	d504      	bpl.n	3400e60e <_vfiprintf_r+0x4e>
3400e604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e608:	b01d      	add	sp, #116	@ 0x74
3400e60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400e60e:	89ab      	ldrh	r3, [r5, #12]
3400e610:	0598      	lsls	r0, r3, #22
3400e612:	d4f7      	bmi.n	3400e604 <_vfiprintf_r+0x44>
3400e614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3400e616:	f7fe fdcf 	bl	3400d1b8 <__retarget_lock_release_recursive>
3400e61a:	e7f3      	b.n	3400e604 <_vfiprintf_r+0x44>
3400e61c:	2300      	movs	r3, #0
3400e61e:	f8cd 800c 	str.w	r8, [sp, #12]
3400e622:	f04f 0901 	mov.w	r9, #1
3400e626:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3400e7dc <_vfiprintf_r+0x21c>
3400e62a:	9309      	str	r3, [sp, #36]	@ 0x24
3400e62c:	2320      	movs	r3, #32
3400e62e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3400e632:	2330      	movs	r3, #48	@ 0x30
3400e634:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3400e638:	4623      	mov	r3, r4
3400e63a:	469a      	mov	sl, r3
3400e63c:	f813 2b01 	ldrb.w	r2, [r3], #1
3400e640:	b10a      	cbz	r2, 3400e646 <_vfiprintf_r+0x86>
3400e642:	2a25      	cmp	r2, #37	@ 0x25
3400e644:	d1f9      	bne.n	3400e63a <_vfiprintf_r+0x7a>
3400e646:	ebba 0b04 	subs.w	fp, sl, r4
3400e64a:	d00b      	beq.n	3400e664 <_vfiprintf_r+0xa4>
3400e64c:	465b      	mov	r3, fp
3400e64e:	4622      	mov	r2, r4
3400e650:	4629      	mov	r1, r5
3400e652:	4630      	mov	r0, r6
3400e654:	f7ff ffa1 	bl	3400e59a <__sfputs_r>
3400e658:	3001      	adds	r0, #1
3400e65a:	f000 80a7 	beq.w	3400e7ac <_vfiprintf_r+0x1ec>
3400e65e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400e660:	445a      	add	r2, fp
3400e662:	9209      	str	r2, [sp, #36]	@ 0x24
3400e664:	f89a 3000 	ldrb.w	r3, [sl]
3400e668:	2b00      	cmp	r3, #0
3400e66a:	f000 809f 	beq.w	3400e7ac <_vfiprintf_r+0x1ec>
3400e66e:	2300      	movs	r3, #0
3400e670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400e674:	f10a 0a01 	add.w	sl, sl, #1
3400e678:	9304      	str	r3, [sp, #16]
3400e67a:	9307      	str	r3, [sp, #28]
3400e67c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3400e680:	931a      	str	r3, [sp, #104]	@ 0x68
3400e682:	e9cd 2305 	strd	r2, r3, [sp, #20]
3400e686:	4654      	mov	r4, sl
3400e688:	2205      	movs	r2, #5
3400e68a:	4854      	ldr	r0, [pc, #336]	@ (3400e7dc <_vfiprintf_r+0x21c>)
3400e68c:	f814 1b01 	ldrb.w	r1, [r4], #1
3400e690:	f7fe fd93 	bl	3400d1ba <memchr>
3400e694:	9a04      	ldr	r2, [sp, #16]
3400e696:	b9d8      	cbnz	r0, 3400e6d0 <_vfiprintf_r+0x110>
3400e698:	06d1      	lsls	r1, r2, #27
3400e69a:	bf44      	itt	mi
3400e69c:	2320      	movmi	r3, #32
3400e69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3400e6a2:	0713      	lsls	r3, r2, #28
3400e6a4:	bf44      	itt	mi
3400e6a6:	232b      	movmi	r3, #43	@ 0x2b
3400e6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3400e6ac:	f89a 3000 	ldrb.w	r3, [sl]
3400e6b0:	2b2a      	cmp	r3, #42	@ 0x2a
3400e6b2:	d015      	beq.n	3400e6e0 <_vfiprintf_r+0x120>
3400e6b4:	9a07      	ldr	r2, [sp, #28]
3400e6b6:	4654      	mov	r4, sl
3400e6b8:	2000      	movs	r0, #0
3400e6ba:	f04f 0c0a 	mov.w	ip, #10
3400e6be:	4621      	mov	r1, r4
3400e6c0:	f811 3b01 	ldrb.w	r3, [r1], #1
3400e6c4:	3b30      	subs	r3, #48	@ 0x30
3400e6c6:	2b09      	cmp	r3, #9
3400e6c8:	d94b      	bls.n	3400e762 <_vfiprintf_r+0x1a2>
3400e6ca:	b1b0      	cbz	r0, 3400e6fa <_vfiprintf_r+0x13a>
3400e6cc:	9207      	str	r2, [sp, #28]
3400e6ce:	e014      	b.n	3400e6fa <_vfiprintf_r+0x13a>
3400e6d0:	eba0 0308 	sub.w	r3, r0, r8
3400e6d4:	46a2      	mov	sl, r4
3400e6d6:	fa09 f303 	lsl.w	r3, r9, r3
3400e6da:	4313      	orrs	r3, r2
3400e6dc:	9304      	str	r3, [sp, #16]
3400e6de:	e7d2      	b.n	3400e686 <_vfiprintf_r+0xc6>
3400e6e0:	9b03      	ldr	r3, [sp, #12]
3400e6e2:	1d19      	adds	r1, r3, #4
3400e6e4:	681b      	ldr	r3, [r3, #0]
3400e6e6:	2b00      	cmp	r3, #0
3400e6e8:	9103      	str	r1, [sp, #12]
3400e6ea:	bfbb      	ittet	lt
3400e6ec:	425b      	neglt	r3, r3
3400e6ee:	f042 0202 	orrlt.w	r2, r2, #2
3400e6f2:	9307      	strge	r3, [sp, #28]
3400e6f4:	9307      	strlt	r3, [sp, #28]
3400e6f6:	bfb8      	it	lt
3400e6f8:	9204      	strlt	r2, [sp, #16]
3400e6fa:	7823      	ldrb	r3, [r4, #0]
3400e6fc:	2b2e      	cmp	r3, #46	@ 0x2e
3400e6fe:	d10a      	bne.n	3400e716 <_vfiprintf_r+0x156>
3400e700:	7863      	ldrb	r3, [r4, #1]
3400e702:	2b2a      	cmp	r3, #42	@ 0x2a
3400e704:	d132      	bne.n	3400e76c <_vfiprintf_r+0x1ac>
3400e706:	9b03      	ldr	r3, [sp, #12]
3400e708:	3402      	adds	r4, #2
3400e70a:	1d1a      	adds	r2, r3, #4
3400e70c:	681b      	ldr	r3, [r3, #0]
3400e70e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3400e712:	9203      	str	r2, [sp, #12]
3400e714:	9305      	str	r3, [sp, #20]
3400e716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3400e7ec <_vfiprintf_r+0x22c>
3400e71a:	2203      	movs	r2, #3
3400e71c:	7821      	ldrb	r1, [r4, #0]
3400e71e:	4650      	mov	r0, sl
3400e720:	f7fe fd4b 	bl	3400d1ba <memchr>
3400e724:	b138      	cbz	r0, 3400e736 <_vfiprintf_r+0x176>
3400e726:	eba0 000a 	sub.w	r0, r0, sl
3400e72a:	2240      	movs	r2, #64	@ 0x40
3400e72c:	9b04      	ldr	r3, [sp, #16]
3400e72e:	3401      	adds	r4, #1
3400e730:	4082      	lsls	r2, r0
3400e732:	4313      	orrs	r3, r2
3400e734:	9304      	str	r3, [sp, #16]
3400e736:	f814 1b01 	ldrb.w	r1, [r4], #1
3400e73a:	2206      	movs	r2, #6
3400e73c:	4828      	ldr	r0, [pc, #160]	@ (3400e7e0 <_vfiprintf_r+0x220>)
3400e73e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3400e742:	f7fe fd3a 	bl	3400d1ba <memchr>
3400e746:	2800      	cmp	r0, #0
3400e748:	d03f      	beq.n	3400e7ca <_vfiprintf_r+0x20a>
3400e74a:	4b26      	ldr	r3, [pc, #152]	@ (3400e7e4 <_vfiprintf_r+0x224>)
3400e74c:	bb1b      	cbnz	r3, 3400e796 <_vfiprintf_r+0x1d6>
3400e74e:	9b03      	ldr	r3, [sp, #12]
3400e750:	3307      	adds	r3, #7
3400e752:	f023 0307 	bic.w	r3, r3, #7
3400e756:	3308      	adds	r3, #8
3400e758:	9303      	str	r3, [sp, #12]
3400e75a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e75c:	443b      	add	r3, r7
3400e75e:	9309      	str	r3, [sp, #36]	@ 0x24
3400e760:	e76a      	b.n	3400e638 <_vfiprintf_r+0x78>
3400e762:	fb0c 3202 	mla	r2, ip, r2, r3
3400e766:	460c      	mov	r4, r1
3400e768:	2001      	movs	r0, #1
3400e76a:	e7a8      	b.n	3400e6be <_vfiprintf_r+0xfe>
3400e76c:	2300      	movs	r3, #0
3400e76e:	3401      	adds	r4, #1
3400e770:	f04f 0c0a 	mov.w	ip, #10
3400e774:	4619      	mov	r1, r3
3400e776:	9305      	str	r3, [sp, #20]
3400e778:	4620      	mov	r0, r4
3400e77a:	f810 2b01 	ldrb.w	r2, [r0], #1
3400e77e:	3a30      	subs	r2, #48	@ 0x30
3400e780:	2a09      	cmp	r2, #9
3400e782:	d903      	bls.n	3400e78c <_vfiprintf_r+0x1cc>
3400e784:	2b00      	cmp	r3, #0
3400e786:	d0c6      	beq.n	3400e716 <_vfiprintf_r+0x156>
3400e788:	9105      	str	r1, [sp, #20]
3400e78a:	e7c4      	b.n	3400e716 <_vfiprintf_r+0x156>
3400e78c:	fb0c 2101 	mla	r1, ip, r1, r2
3400e790:	4604      	mov	r4, r0
3400e792:	2301      	movs	r3, #1
3400e794:	e7f0      	b.n	3400e778 <_vfiprintf_r+0x1b8>
3400e796:	ab03      	add	r3, sp, #12
3400e798:	462a      	mov	r2, r5
3400e79a:	a904      	add	r1, sp, #16
3400e79c:	4630      	mov	r0, r6
3400e79e:	9300      	str	r3, [sp, #0]
3400e7a0:	4b11      	ldr	r3, [pc, #68]	@ (3400e7e8 <_vfiprintf_r+0x228>)
3400e7a2:	f7fd fdf5 	bl	3400c390 <_printf_float>
3400e7a6:	4607      	mov	r7, r0
3400e7a8:	1c78      	adds	r0, r7, #1
3400e7aa:	d1d6      	bne.n	3400e75a <_vfiprintf_r+0x19a>
3400e7ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3400e7ae:	07d9      	lsls	r1, r3, #31
3400e7b0:	d405      	bmi.n	3400e7be <_vfiprintf_r+0x1fe>
3400e7b2:	89ab      	ldrh	r3, [r5, #12]
3400e7b4:	059a      	lsls	r2, r3, #22
3400e7b6:	d402      	bmi.n	3400e7be <_vfiprintf_r+0x1fe>
3400e7b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3400e7ba:	f7fe fcfd 	bl	3400d1b8 <__retarget_lock_release_recursive>
3400e7be:	89ab      	ldrh	r3, [r5, #12]
3400e7c0:	065b      	lsls	r3, r3, #25
3400e7c2:	f53f af1f 	bmi.w	3400e604 <_vfiprintf_r+0x44>
3400e7c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
3400e7c8:	e71e      	b.n	3400e608 <_vfiprintf_r+0x48>
3400e7ca:	ab03      	add	r3, sp, #12
3400e7cc:	462a      	mov	r2, r5
3400e7ce:	a904      	add	r1, sp, #16
3400e7d0:	4630      	mov	r0, r6
3400e7d2:	9300      	str	r3, [sp, #0]
3400e7d4:	4b04      	ldr	r3, [pc, #16]	@ (3400e7e8 <_vfiprintf_r+0x228>)
3400e7d6:	f7fe f867 	bl	3400c8a8 <_printf_i>
3400e7da:	e7e4      	b.n	3400e7a6 <_vfiprintf_r+0x1e6>
3400e7dc:	3400f708 	.word	0x3400f708
3400e7e0:	3400f712 	.word	0x3400f712
3400e7e4:	3400c391 	.word	0x3400c391
3400e7e8:	3400e59b 	.word	0x3400e59b
3400e7ec:	3400f70e 	.word	0x3400f70e

3400e7f0 <__swhatbuf_r>:
3400e7f0:	b570      	push	{r4, r5, r6, lr}
3400e7f2:	460c      	mov	r4, r1
3400e7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e7f8:	b096      	sub	sp, #88	@ 0x58
3400e7fa:	4615      	mov	r5, r2
3400e7fc:	2900      	cmp	r1, #0
3400e7fe:	461e      	mov	r6, r3
3400e800:	da0c      	bge.n	3400e81c <__swhatbuf_r+0x2c>
3400e802:	89a3      	ldrh	r3, [r4, #12]
3400e804:	2100      	movs	r1, #0
3400e806:	f013 0f80 	tst.w	r3, #128	@ 0x80
3400e80a:	bf14      	ite	ne
3400e80c:	2340      	movne	r3, #64	@ 0x40
3400e80e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3400e812:	2000      	movs	r0, #0
3400e814:	6031      	str	r1, [r6, #0]
3400e816:	602b      	str	r3, [r5, #0]
3400e818:	b016      	add	sp, #88	@ 0x58
3400e81a:	bd70      	pop	{r4, r5, r6, pc}
3400e81c:	466a      	mov	r2, sp
3400e81e:	f000 f879 	bl	3400e914 <_fstat_r>
3400e822:	2800      	cmp	r0, #0
3400e824:	dbed      	blt.n	3400e802 <__swhatbuf_r+0x12>
3400e826:	9901      	ldr	r1, [sp, #4]
3400e828:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3400e82c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3400e830:	4259      	negs	r1, r3
3400e832:	4159      	adcs	r1, r3
3400e834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400e838:	e7eb      	b.n	3400e812 <__swhatbuf_r+0x22>

3400e83a <__smakebuf_r>:
3400e83a:	898b      	ldrh	r3, [r1, #12]
3400e83c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400e83e:	079d      	lsls	r5, r3, #30
3400e840:	4606      	mov	r6, r0
3400e842:	460c      	mov	r4, r1
3400e844:	d507      	bpl.n	3400e856 <__smakebuf_r+0x1c>
3400e846:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3400e84a:	6023      	str	r3, [r4, #0]
3400e84c:	6123      	str	r3, [r4, #16]
3400e84e:	2301      	movs	r3, #1
3400e850:	6163      	str	r3, [r4, #20]
3400e852:	b003      	add	sp, #12
3400e854:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400e856:	ab01      	add	r3, sp, #4
3400e858:	466a      	mov	r2, sp
3400e85a:	f7ff ffc9 	bl	3400e7f0 <__swhatbuf_r>
3400e85e:	9f00      	ldr	r7, [sp, #0]
3400e860:	4605      	mov	r5, r0
3400e862:	4630      	mov	r0, r6
3400e864:	4639      	mov	r1, r7
3400e866:	f7fd fc79 	bl	3400c15c <_malloc_r>
3400e86a:	b948      	cbnz	r0, 3400e880 <__smakebuf_r+0x46>
3400e86c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e870:	059a      	lsls	r2, r3, #22
3400e872:	d4ee      	bmi.n	3400e852 <__smakebuf_r+0x18>
3400e874:	f023 0303 	bic.w	r3, r3, #3
3400e878:	f043 0302 	orr.w	r3, r3, #2
3400e87c:	81a3      	strh	r3, [r4, #12]
3400e87e:	e7e2      	b.n	3400e846 <__smakebuf_r+0xc>
3400e880:	89a3      	ldrh	r3, [r4, #12]
3400e882:	6020      	str	r0, [r4, #0]
3400e884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3400e888:	81a3      	strh	r3, [r4, #12]
3400e88a:	9b01      	ldr	r3, [sp, #4]
3400e88c:	e9c4 0704 	strd	r0, r7, [r4, #16]
3400e890:	b15b      	cbz	r3, 3400e8aa <__smakebuf_r+0x70>
3400e892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400e896:	4630      	mov	r0, r6
3400e898:	f000 f84e 	bl	3400e938 <_isatty_r>
3400e89c:	b128      	cbz	r0, 3400e8aa <__smakebuf_r+0x70>
3400e89e:	89a3      	ldrh	r3, [r4, #12]
3400e8a0:	f023 0303 	bic.w	r3, r3, #3
3400e8a4:	f043 0301 	orr.w	r3, r3, #1
3400e8a8:	81a3      	strh	r3, [r4, #12]
3400e8aa:	89a3      	ldrh	r3, [r4, #12]
3400e8ac:	431d      	orrs	r5, r3
3400e8ae:	81a5      	strh	r5, [r4, #12]
3400e8b0:	e7cf      	b.n	3400e852 <__smakebuf_r+0x18>

3400e8b2 <_raise_r>:
3400e8b2:	291f      	cmp	r1, #31
3400e8b4:	b538      	push	{r3, r4, r5, lr}
3400e8b6:	4605      	mov	r5, r0
3400e8b8:	460c      	mov	r4, r1
3400e8ba:	d904      	bls.n	3400e8c6 <_raise_r+0x14>
3400e8bc:	2316      	movs	r3, #22
3400e8be:	6003      	str	r3, [r0, #0]
3400e8c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e8c4:	bd38      	pop	{r3, r4, r5, pc}
3400e8c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
3400e8c8:	b112      	cbz	r2, 3400e8d0 <_raise_r+0x1e>
3400e8ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3400e8ce:	b94b      	cbnz	r3, 3400e8e4 <_raise_r+0x32>
3400e8d0:	4628      	mov	r0, r5
3400e8d2:	f000 f853 	bl	3400e97c <_getpid_r>
3400e8d6:	4622      	mov	r2, r4
3400e8d8:	4601      	mov	r1, r0
3400e8da:	4628      	mov	r0, r5
3400e8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400e8e0:	f000 b83a 	b.w	3400e958 <_kill_r>
3400e8e4:	2b01      	cmp	r3, #1
3400e8e6:	d00a      	beq.n	3400e8fe <_raise_r+0x4c>
3400e8e8:	1c59      	adds	r1, r3, #1
3400e8ea:	d103      	bne.n	3400e8f4 <_raise_r+0x42>
3400e8ec:	2316      	movs	r3, #22
3400e8ee:	6003      	str	r3, [r0, #0]
3400e8f0:	2001      	movs	r0, #1
3400e8f2:	e7e7      	b.n	3400e8c4 <_raise_r+0x12>
3400e8f4:	2100      	movs	r1, #0
3400e8f6:	4620      	mov	r0, r4
3400e8f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3400e8fc:	4798      	blx	r3
3400e8fe:	2000      	movs	r0, #0
3400e900:	e7e0      	b.n	3400e8c4 <_raise_r+0x12>
	...

3400e904 <raise>:
3400e904:	4b02      	ldr	r3, [pc, #8]	@ (3400e910 <raise+0xc>)
3400e906:	4601      	mov	r1, r0
3400e908:	6818      	ldr	r0, [r3, #0]
3400e90a:	f7ff bfd2 	b.w	3400e8b2 <_raise_r>
3400e90e:	bf00      	nop
3400e910:	3400f9dc 	.word	0x3400f9dc

3400e914 <_fstat_r>:
3400e914:	b538      	push	{r3, r4, r5, lr}
3400e916:	2300      	movs	r3, #0
3400e918:	4d06      	ldr	r5, [pc, #24]	@ (3400e934 <_fstat_r+0x20>)
3400e91a:	4604      	mov	r4, r0
3400e91c:	4608      	mov	r0, r1
3400e91e:	4611      	mov	r1, r2
3400e920:	602b      	str	r3, [r5, #0]
3400e922:	f7f2 fc43 	bl	340011ac <_fstat>
3400e926:	1c43      	adds	r3, r0, #1
3400e928:	d102      	bne.n	3400e930 <_fstat_r+0x1c>
3400e92a:	682b      	ldr	r3, [r5, #0]
3400e92c:	b103      	cbz	r3, 3400e930 <_fstat_r+0x1c>
3400e92e:	6023      	str	r3, [r4, #0]
3400e930:	bd38      	pop	{r3, r4, r5, pc}
3400e932:	bf00      	nop
3400e934:	34010540 	.word	0x34010540

3400e938 <_isatty_r>:
3400e938:	b538      	push	{r3, r4, r5, lr}
3400e93a:	2300      	movs	r3, #0
3400e93c:	4d05      	ldr	r5, [pc, #20]	@ (3400e954 <_isatty_r+0x1c>)
3400e93e:	4604      	mov	r4, r0
3400e940:	4608      	mov	r0, r1
3400e942:	602b      	str	r3, [r5, #0]
3400e944:	f7f2 fc37 	bl	340011b6 <_isatty>
3400e948:	1c43      	adds	r3, r0, #1
3400e94a:	d102      	bne.n	3400e952 <_isatty_r+0x1a>
3400e94c:	682b      	ldr	r3, [r5, #0]
3400e94e:	b103      	cbz	r3, 3400e952 <_isatty_r+0x1a>
3400e950:	6023      	str	r3, [r4, #0]
3400e952:	bd38      	pop	{r3, r4, r5, pc}
3400e954:	34010540 	.word	0x34010540

3400e958 <_kill_r>:
3400e958:	b538      	push	{r3, r4, r5, lr}
3400e95a:	2300      	movs	r3, #0
3400e95c:	4d06      	ldr	r5, [pc, #24]	@ (3400e978 <_kill_r+0x20>)
3400e95e:	4604      	mov	r4, r0
3400e960:	4608      	mov	r0, r1
3400e962:	4611      	mov	r1, r2
3400e964:	602b      	str	r3, [r5, #0]
3400e966:	f7f2 fc02 	bl	3400116e <_kill>
3400e96a:	1c43      	adds	r3, r0, #1
3400e96c:	d102      	bne.n	3400e974 <_kill_r+0x1c>
3400e96e:	682b      	ldr	r3, [r5, #0]
3400e970:	b103      	cbz	r3, 3400e974 <_kill_r+0x1c>
3400e972:	6023      	str	r3, [r4, #0]
3400e974:	bd38      	pop	{r3, r4, r5, pc}
3400e976:	bf00      	nop
3400e978:	34010540 	.word	0x34010540

3400e97c <_getpid_r>:
3400e97c:	f7f2 bbf5 	b.w	3400116a <_getpid>

3400e980 <_calloc_r>:
3400e980:	b570      	push	{r4, r5, r6, lr}
3400e982:	fba1 5402 	umull	r5, r4, r1, r2
3400e986:	b934      	cbnz	r4, 3400e996 <_calloc_r+0x16>
3400e988:	4629      	mov	r1, r5
3400e98a:	f7fd fbe7 	bl	3400c15c <_malloc_r>
3400e98e:	4606      	mov	r6, r0
3400e990:	b928      	cbnz	r0, 3400e99e <_calloc_r+0x1e>
3400e992:	4630      	mov	r0, r6
3400e994:	bd70      	pop	{r4, r5, r6, pc}
3400e996:	220c      	movs	r2, #12
3400e998:	2600      	movs	r6, #0
3400e99a:	6002      	str	r2, [r0, #0]
3400e99c:	e7f9      	b.n	3400e992 <_calloc_r+0x12>
3400e99e:	462a      	mov	r2, r5
3400e9a0:	4621      	mov	r1, r4
3400e9a2:	f7fe fb7b 	bl	3400d09c <memset>
3400e9a6:	e7f4      	b.n	3400e992 <_calloc_r+0x12>

3400e9a8 <__ascii_mbtowc>:
3400e9a8:	b082      	sub	sp, #8
3400e9aa:	b901      	cbnz	r1, 3400e9ae <__ascii_mbtowc+0x6>
3400e9ac:	a901      	add	r1, sp, #4
3400e9ae:	b142      	cbz	r2, 3400e9c2 <__ascii_mbtowc+0x1a>
3400e9b0:	b14b      	cbz	r3, 3400e9c6 <__ascii_mbtowc+0x1e>
3400e9b2:	7813      	ldrb	r3, [r2, #0]
3400e9b4:	600b      	str	r3, [r1, #0]
3400e9b6:	7812      	ldrb	r2, [r2, #0]
3400e9b8:	1e10      	subs	r0, r2, #0
3400e9ba:	bf18      	it	ne
3400e9bc:	2001      	movne	r0, #1
3400e9be:	b002      	add	sp, #8
3400e9c0:	4770      	bx	lr
3400e9c2:	4610      	mov	r0, r2
3400e9c4:	e7fb      	b.n	3400e9be <__ascii_mbtowc+0x16>
3400e9c6:	f06f 0001 	mvn.w	r0, #1
3400e9ca:	e7f8      	b.n	3400e9be <__ascii_mbtowc+0x16>

3400e9cc <__ascii_wctomb>:
3400e9cc:	4603      	mov	r3, r0
3400e9ce:	4608      	mov	r0, r1
3400e9d0:	b141      	cbz	r1, 3400e9e4 <__ascii_wctomb+0x18>
3400e9d2:	2aff      	cmp	r2, #255	@ 0xff
3400e9d4:	d904      	bls.n	3400e9e0 <__ascii_wctomb+0x14>
3400e9d6:	228a      	movs	r2, #138	@ 0x8a
3400e9d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e9dc:	601a      	str	r2, [r3, #0]
3400e9de:	4770      	bx	lr
3400e9e0:	2001      	movs	r0, #1
3400e9e2:	700a      	strb	r2, [r1, #0]
3400e9e4:	4770      	bx	lr
	...

3400e9e8 <_sbrk>:
3400e9e8:	4a04      	ldr	r2, [pc, #16]	@ (3400e9fc <_sbrk+0x14>)
3400e9ea:	4603      	mov	r3, r0
3400e9ec:	6811      	ldr	r1, [r2, #0]
3400e9ee:	b909      	cbnz	r1, 3400e9f4 <_sbrk+0xc>
3400e9f0:	4903      	ldr	r1, [pc, #12]	@ (3400ea00 <_sbrk+0x18>)
3400e9f2:	6011      	str	r1, [r2, #0]
3400e9f4:	6810      	ldr	r0, [r2, #0]
3400e9f6:	4403      	add	r3, r0
3400e9f8:	6013      	str	r3, [r2, #0]
3400e9fa:	4770      	bx	lr
3400e9fc:	34010548 	.word	0x34010548
3400ea00:	34010550 	.word	0x34010550

3400ea04 <_init>:
3400ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400ea06:	bf00      	nop
3400ea08:	bcf8      	pop	{r3, r4, r5, r6, r7}
3400ea0a:	bc08      	pop	{r3}
3400ea0c:	469e      	mov	lr, r3
3400ea0e:	4770      	bx	lr

3400ea10 <_fini>:
3400ea10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400ea12:	bf00      	nop
3400ea14:	bcf8      	pop	{r3, r4, r5, r6, r7}
3400ea16:	bc08      	pop	{r3}
3400ea18:	469e      	mov	lr, r3
3400ea1a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3400ea20 <SECURE_SystemCoreClockUpdate>:
3400ea20:	e97f e97f 	sg
3400ea24:	f7f3 bb16 	b.w	34002054 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
