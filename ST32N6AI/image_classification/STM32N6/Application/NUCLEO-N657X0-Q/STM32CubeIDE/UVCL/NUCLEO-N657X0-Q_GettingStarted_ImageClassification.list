
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001013c  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  340108a0  340108a0  000108a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001f14  340108c0  340108c0  000108c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  340127d4  340127d4  00012a00  2**0
                  CONTENTS
  5 .ARM          00000008  340127d4  340127d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  340127dc  34012a00  00012a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  340127dc  340127dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  340127e0  340127e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000021c  340127e4  340127e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000a00  34012a00  34012a00  00012a00  2**2
                  ALLOC
 11 ._user_heap_stack 00004200  34013400  34013400  00012a00  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  00012a00  2**0
                  CONTENTS, READONLY
 13 .debug_info   000687dd  00000000  00000000  00012a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009fd1  00000000  00000000  0007b217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00022403  00000000  00000000  000851e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a00  00000000  00000000  000a75f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003625  00000000  00000000  000a9ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0007f8dc  00000000  00000000  000ad615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d288  00000000  00000000  0012cef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    003b1e6f  00000000  00000000  0017a179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0052bfe8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000084ec  00000000  00000000  0052c02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000156  00000000  00000000  00534518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	34012a00 	.word	0x34012a00
3400076c:	00000000 	.word	0x00000000
34000770:	34010874 	.word	0x34010874

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	34012a04 	.word	0x34012a04
3400078c:	34010874 	.word	0x34010874

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b9b0 	b.w	34000b18 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	4688      	mov	r8, r1
340007d8:	4604      	mov	r4, r0
340007da:	468e      	mov	lr, r1
340007dc:	2b00      	cmp	r3, #0
340007de:	d14a      	bne.n	34000876 <__udivmoddi4+0xa6>
340007e0:	428a      	cmp	r2, r1
340007e2:	4617      	mov	r7, r2
340007e4:	d95f      	bls.n	340008a6 <__udivmoddi4+0xd6>
340007e6:	fab2 f682 	clz	r6, r2
340007ea:	b14e      	cbz	r6, 34000800 <__udivmoddi4+0x30>
340007ec:	f1c6 0320 	rsb	r3, r6, #32
340007f0:	fa01 fe06 	lsl.w	lr, r1, r6
340007f4:	40b7      	lsls	r7, r6
340007f6:	40b4      	lsls	r4, r6
340007f8:	fa20 f303 	lsr.w	r3, r0, r3
340007fc:	ea43 0e0e 	orr.w	lr, r3, lr
34000800:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000804:	fa1f fc87 	uxth.w	ip, r7
34000808:	0c23      	lsrs	r3, r4, #16
3400080a:	fbbe f1f8 	udiv	r1, lr, r8
3400080e:	fb08 ee11 	mls	lr, r8, r1, lr
34000812:	fb01 f20c 	mul.w	r2, r1, ip
34000816:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
3400081a:	429a      	cmp	r2, r3
3400081c:	d907      	bls.n	3400082e <__udivmoddi4+0x5e>
3400081e:	18fb      	adds	r3, r7, r3
34000820:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34000824:	d202      	bcs.n	3400082c <__udivmoddi4+0x5c>
34000826:	429a      	cmp	r2, r3
34000828:	f200 8154 	bhi.w	34000ad4 <__udivmoddi4+0x304>
3400082c:	4601      	mov	r1, r0
3400082e:	1a9b      	subs	r3, r3, r2
34000830:	b2a2      	uxth	r2, r4
34000832:	fbb3 f0f8 	udiv	r0, r3, r8
34000836:	fb08 3310 	mls	r3, r8, r0, r3
3400083a:	fb00 fc0c 	mul.w	ip, r0, ip
3400083e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34000842:	4594      	cmp	ip, r2
34000844:	d90b      	bls.n	3400085e <__udivmoddi4+0x8e>
34000846:	18ba      	adds	r2, r7, r2
34000848:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
3400084c:	bf2c      	ite	cs
3400084e:	2401      	movcs	r4, #1
34000850:	2400      	movcc	r4, #0
34000852:	4594      	cmp	ip, r2
34000854:	d902      	bls.n	3400085c <__udivmoddi4+0x8c>
34000856:	2c00      	cmp	r4, #0
34000858:	f000 813f 	beq.w	34000ada <__udivmoddi4+0x30a>
3400085c:	4618      	mov	r0, r3
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	eba2 020c 	sub.w	r2, r2, ip
34000866:	2100      	movs	r1, #0
34000868:	b11d      	cbz	r5, 34000872 <__udivmoddi4+0xa2>
3400086a:	40f2      	lsrs	r2, r6
3400086c:	2300      	movs	r3, #0
3400086e:	e9c5 2300 	strd	r2, r3, [r5]
34000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000876:	428b      	cmp	r3, r1
34000878:	d905      	bls.n	34000886 <__udivmoddi4+0xb6>
3400087a:	b10d      	cbz	r5, 34000880 <__udivmoddi4+0xb0>
3400087c:	e9c5 0100 	strd	r0, r1, [r5]
34000880:	2100      	movs	r1, #0
34000882:	4608      	mov	r0, r1
34000884:	e7f5      	b.n	34000872 <__udivmoddi4+0xa2>
34000886:	fab3 f183 	clz	r1, r3
3400088a:	2900      	cmp	r1, #0
3400088c:	d14e      	bne.n	3400092c <__udivmoddi4+0x15c>
3400088e:	4543      	cmp	r3, r8
34000890:	f0c0 8112 	bcc.w	34000ab8 <__udivmoddi4+0x2e8>
34000894:	4282      	cmp	r2, r0
34000896:	f240 810f 	bls.w	34000ab8 <__udivmoddi4+0x2e8>
3400089a:	4608      	mov	r0, r1
3400089c:	2d00      	cmp	r5, #0
3400089e:	d0e8      	beq.n	34000872 <__udivmoddi4+0xa2>
340008a0:	e9c5 4e00 	strd	r4, lr, [r5]
340008a4:	e7e5      	b.n	34000872 <__udivmoddi4+0xa2>
340008a6:	2a00      	cmp	r2, #0
340008a8:	f000 80ac 	beq.w	34000a04 <__udivmoddi4+0x234>
340008ac:	fab2 f682 	clz	r6, r2
340008b0:	2e00      	cmp	r6, #0
340008b2:	f040 80bb 	bne.w	34000a2c <__udivmoddi4+0x25c>
340008b6:	1a8b      	subs	r3, r1, r2
340008b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
340008bc:	b2bc      	uxth	r4, r7
340008be:	2101      	movs	r1, #1
340008c0:	0c02      	lsrs	r2, r0, #16
340008c2:	b280      	uxth	r0, r0
340008c4:	fbb3 fcfe 	udiv	ip, r3, lr
340008c8:	fb0e 331c 	mls	r3, lr, ip, r3
340008cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
340008d0:	fb04 f20c 	mul.w	r2, r4, ip
340008d4:	429a      	cmp	r2, r3
340008d6:	d90e      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d8:	18fb      	adds	r3, r7, r3
340008da:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	429a      	cmp	r2, r3
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80ec 	beq.w	34000acc <__udivmoddi4+0x2fc>
340008f4:	46c4      	mov	ip, r8
340008f6:	1a9b      	subs	r3, r3, r2
340008f8:	fbb3 f8fe 	udiv	r8, r3, lr
340008fc:	fb0e 3318 	mls	r3, lr, r8, r3
34000900:	fb04 f408 	mul.w	r4, r4, r8
34000904:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34000908:	4294      	cmp	r4, r2
3400090a:	d90b      	bls.n	34000924 <__udivmoddi4+0x154>
3400090c:	18ba      	adds	r2, r7, r2
3400090e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34000912:	bf2c      	ite	cs
34000914:	2001      	movcs	r0, #1
34000916:	2000      	movcc	r0, #0
34000918:	4294      	cmp	r4, r2
3400091a:	d902      	bls.n	34000922 <__udivmoddi4+0x152>
3400091c:	2800      	cmp	r0, #0
3400091e:	f000 80d1 	beq.w	34000ac4 <__udivmoddi4+0x2f4>
34000922:	4698      	mov	r8, r3
34000924:	1b12      	subs	r2, r2, r4
34000926:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa08 f401 	lsl.w	r4, r8, r1
34000936:	fa00 f901 	lsl.w	r9, r0, r1
3400093a:	fa22 f706 	lsr.w	r7, r2, r6
3400093e:	fa28 f806 	lsr.w	r8, r8, r6
34000942:	408a      	lsls	r2, r1
34000944:	431f      	orrs	r7, r3
34000946:	fa20 f306 	lsr.w	r3, r0, r6
3400094a:	0c38      	lsrs	r0, r7, #16
3400094c:	4323      	orrs	r3, r4
3400094e:	fa1f fc87 	uxth.w	ip, r7
34000952:	0c1c      	lsrs	r4, r3, #16
34000954:	fbb8 fef0 	udiv	lr, r8, r0
34000958:	fb00 881e 	mls	r8, r0, lr, r8
3400095c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34000960:	fb0e f80c 	mul.w	r8, lr, ip
34000964:	45a0      	cmp	r8, r4
34000966:	d90e      	bls.n	34000986 <__udivmoddi4+0x1b6>
34000968:	193c      	adds	r4, r7, r4
3400096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3400096e:	bf2c      	ite	cs
34000970:	f04f 0b01 	movcs.w	fp, #1
34000974:	f04f 0b00 	movcc.w	fp, #0
34000978:	45a0      	cmp	r8, r4
3400097a:	d903      	bls.n	34000984 <__udivmoddi4+0x1b4>
3400097c:	f1bb 0f00 	cmp.w	fp, #0
34000980:	f000 80b8 	beq.w	34000af4 <__udivmoddi4+0x324>
34000984:	46d6      	mov	lr, sl
34000986:	eba4 0408 	sub.w	r4, r4, r8
3400098a:	fa1f f883 	uxth.w	r8, r3
3400098e:	fbb4 f3f0 	udiv	r3, r4, r0
34000992:	fb00 4413 	mls	r4, r0, r3, r4
34000996:	fb03 fc0c 	mul.w	ip, r3, ip
3400099a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3400099e:	45a4      	cmp	ip, r4
340009a0:	d90e      	bls.n	340009c0 <__udivmoddi4+0x1f0>
340009a2:	193c      	adds	r4, r7, r4
340009a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
340009a8:	bf2c      	ite	cs
340009aa:	f04f 0801 	movcs.w	r8, #1
340009ae:	f04f 0800 	movcc.w	r8, #0
340009b2:	45a4      	cmp	ip, r4
340009b4:	d903      	bls.n	340009be <__udivmoddi4+0x1ee>
340009b6:	f1b8 0f00 	cmp.w	r8, #0
340009ba:	f000 809f 	beq.w	34000afc <__udivmoddi4+0x32c>
340009be:	4603      	mov	r3, r0
340009c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
340009c4:	eba4 040c 	sub.w	r4, r4, ip
340009c8:	fba0 ec02 	umull	lr, ip, r0, r2
340009cc:	4564      	cmp	r4, ip
340009ce:	4673      	mov	r3, lr
340009d0:	46e0      	mov	r8, ip
340009d2:	d302      	bcc.n	340009da <__udivmoddi4+0x20a>
340009d4:	d107      	bne.n	340009e6 <__udivmoddi4+0x216>
340009d6:	45f1      	cmp	r9, lr
340009d8:	d205      	bcs.n	340009e6 <__udivmoddi4+0x216>
340009da:	ebbe 0302 	subs.w	r3, lr, r2
340009de:	eb6c 0c07 	sbc.w	ip, ip, r7
340009e2:	3801      	subs	r0, #1
340009e4:	46e0      	mov	r8, ip
340009e6:	b15d      	cbz	r5, 34000a00 <__udivmoddi4+0x230>
340009e8:	ebb9 0203 	subs.w	r2, r9, r3
340009ec:	eb64 0408 	sbc.w	r4, r4, r8
340009f0:	fa04 f606 	lsl.w	r6, r4, r6
340009f4:	fa22 f301 	lsr.w	r3, r2, r1
340009f8:	40cc      	lsrs	r4, r1
340009fa:	431e      	orrs	r6, r3
340009fc:	e9c5 6400 	strd	r6, r4, [r5]
34000a00:	2100      	movs	r1, #0
34000a02:	e736      	b.n	34000872 <__udivmoddi4+0xa2>
34000a04:	fbb1 fcf2 	udiv	ip, r1, r2
34000a08:	0c01      	lsrs	r1, r0, #16
34000a0a:	4614      	mov	r4, r2
34000a0c:	b280      	uxth	r0, r0
34000a0e:	4696      	mov	lr, r2
34000a10:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a14:	2620      	movs	r6, #32
34000a16:	4690      	mov	r8, r2
34000a18:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34000a1c:	4610      	mov	r0, r2
34000a1e:	fbb1 f1f2 	udiv	r1, r1, r2
34000a22:	eba3 0308 	sub.w	r3, r3, r8
34000a26:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34000a2a:	e74b      	b.n	340008c4 <__udivmoddi4+0xf4>
34000a2c:	40b7      	lsls	r7, r6
34000a2e:	f1c6 0320 	rsb	r3, r6, #32
34000a32:	fa01 f206 	lsl.w	r2, r1, r6
34000a36:	fa21 f803 	lsr.w	r8, r1, r3
34000a3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34000a3e:	fa20 f303 	lsr.w	r3, r0, r3
34000a42:	b2bc      	uxth	r4, r7
34000a44:	40b0      	lsls	r0, r6
34000a46:	4313      	orrs	r3, r2
34000a48:	0c02      	lsrs	r2, r0, #16
34000a4a:	0c19      	lsrs	r1, r3, #16
34000a4c:	b280      	uxth	r0, r0
34000a4e:	fbb8 f9fe 	udiv	r9, r8, lr
34000a52:	fb0e 8819 	mls	r8, lr, r9, r8
34000a56:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a5a:	fb09 f804 	mul.w	r8, r9, r4
34000a5e:	4588      	cmp	r8, r1
34000a60:	d951      	bls.n	34000b06 <__udivmoddi4+0x336>
34000a62:	1879      	adds	r1, r7, r1
34000a64:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34000a68:	bf2c      	ite	cs
34000a6a:	f04f 0a01 	movcs.w	sl, #1
34000a6e:	f04f 0a00 	movcc.w	sl, #0
34000a72:	4588      	cmp	r8, r1
34000a74:	d902      	bls.n	34000a7c <__udivmoddi4+0x2ac>
34000a76:	f1ba 0f00 	cmp.w	sl, #0
34000a7a:	d031      	beq.n	34000ae0 <__udivmoddi4+0x310>
34000a7c:	eba1 0108 	sub.w	r1, r1, r8
34000a80:	fbb1 f9fe 	udiv	r9, r1, lr
34000a84:	fb09 f804 	mul.w	r8, r9, r4
34000a88:	fb0e 1119 	mls	r1, lr, r9, r1
34000a8c:	b29b      	uxth	r3, r3
34000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34000a92:	4543      	cmp	r3, r8
34000a94:	d235      	bcs.n	34000b02 <__udivmoddi4+0x332>
34000a96:	18fb      	adds	r3, r7, r3
34000a98:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34000a9c:	bf2c      	ite	cs
34000a9e:	f04f 0a01 	movcs.w	sl, #1
34000aa2:	f04f 0a00 	movcc.w	sl, #0
34000aa6:	4543      	cmp	r3, r8
34000aa8:	d2bb      	bcs.n	34000a22 <__udivmoddi4+0x252>
34000aaa:	f1ba 0f00 	cmp.w	sl, #0
34000aae:	d1b8      	bne.n	34000a22 <__udivmoddi4+0x252>
34000ab0:	f1a9 0102 	sub.w	r1, r9, #2
34000ab4:	443b      	add	r3, r7
34000ab6:	e7b4      	b.n	34000a22 <__udivmoddi4+0x252>
34000ab8:	1a84      	subs	r4, r0, r2
34000aba:	eb68 0203 	sbc.w	r2, r8, r3
34000abe:	2001      	movs	r0, #1
34000ac0:	4696      	mov	lr, r2
34000ac2:	e6eb      	b.n	3400089c <__udivmoddi4+0xcc>
34000ac4:	443a      	add	r2, r7
34000ac6:	f1a8 0802 	sub.w	r8, r8, #2
34000aca:	e72b      	b.n	34000924 <__udivmoddi4+0x154>
34000acc:	f1ac 0c02 	sub.w	ip, ip, #2
34000ad0:	443b      	add	r3, r7
34000ad2:	e710      	b.n	340008f6 <__udivmoddi4+0x126>
34000ad4:	3902      	subs	r1, #2
34000ad6:	443b      	add	r3, r7
34000ad8:	e6a9      	b.n	3400082e <__udivmoddi4+0x5e>
34000ada:	443a      	add	r2, r7
34000adc:	3802      	subs	r0, #2
34000ade:	e6be      	b.n	3400085e <__udivmoddi4+0x8e>
34000ae0:	eba7 0808 	sub.w	r8, r7, r8
34000ae4:	f1a9 0c02 	sub.w	ip, r9, #2
34000ae8:	4441      	add	r1, r8
34000aea:	fbb1 f9fe 	udiv	r9, r1, lr
34000aee:	fb09 f804 	mul.w	r8, r9, r4
34000af2:	e7c9      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000af4:	f1ae 0e02 	sub.w	lr, lr, #2
34000af8:	443c      	add	r4, r7
34000afa:	e744      	b.n	34000986 <__udivmoddi4+0x1b6>
34000afc:	3b02      	subs	r3, #2
34000afe:	443c      	add	r4, r7
34000b00:	e75e      	b.n	340009c0 <__udivmoddi4+0x1f0>
34000b02:	4649      	mov	r1, r9
34000b04:	e78d      	b.n	34000a22 <__udivmoddi4+0x252>
34000b06:	eba1 0108 	sub.w	r1, r1, r8
34000b0a:	46cc      	mov	ip, r9
34000b0c:	fbb1 f9fe 	udiv	r9, r1, lr
34000b10:	fb09 f804 	mul.w	r8, r9, r4
34000b14:	e7b8      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000b16:	bf00      	nop

34000b18 <__aeabi_idiv0>:
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop

34000b1c <update_weights_int8>:
    memcpy(NNweights, new_weights, Num_weights * sizeof(float));
//    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
    SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(float));
}

void update_weights_int8(int8_t* NNweights, const int8_t *new_weights,size_t Num_weights) {
34000b1c:	b538      	push	{r3, r4, r5, lr}
34000b1e:	4615      	mov	r5, r2
34000b20:	4604      	mov	r4, r0
    memcpy(NNweights, new_weights, Num_weights * sizeof(int8_t));
34000b22:	f00e fa8e 	bl	3400f042 <memcpy>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34000b26:	2d00      	cmp	r5, #0
34000b28:	dd1c      	ble.n	34000b64 <update_weights_int8+0x48>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000b2a:	f004 031f 	and.w	r3, r4, #31
34000b2e:	195a      	adds	r2, r3, r5
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000b30:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34000b34:	4620      	mov	r0, r4

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34000b36:	43c3      	mvns	r3, r0
34000b38:	4414      	add	r4, r2
34000b3a:	4423      	add	r3, r4
34000b3c:	3a20      	subs	r2, #32
34000b3e:	095b      	lsrs	r3, r3, #5
34000b40:	3220      	adds	r2, #32
34000b42:	f103 0e01 	add.w	lr, r3, #1
34000b46:	bfd8      	it	le
34000b48:	f04f 0e01 	movle.w	lr, #1
34000b4c:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000b50:	4905      	ldr	r1, [pc, #20]	@ (34000b68 <update_weights_int8+0x4c>)
34000b52:	f8c1 0268 	str.w	r0, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000b56:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34000b58:	f00f c805 	le	lr, 34000b52 <update_weights_int8+0x36>
34000b5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000b60:	f3bf 8f6f 	isb	sy
//    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
	SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(int8_t));
}
34000b64:	bd38      	pop	{r3, r4, r5, pc}
34000b66:	bf00      	nop
34000b68:	e000ed00 	.word	0xe000ed00

34000b6c <calcAdresses>:

void calcAdresses(size_t insize, size_t outsize,size_t bytesOfType,volatile Matmul_info* infoStruct){
	infoStruct->bytes = bytesOfType;
34000b6c:	601a      	str	r2, [r3, #0]
	infoStruct->insize = insize;
34000b6e:	6058      	str	r0, [r3, #4]
	infoStruct->outsize = outsize;
34000b70:	6099      	str	r1, [r3, #8]

	int inBytes = bytesOfType * insize;
34000b72:	4350      	muls	r0, r2
	int outBytes = bytesOfType * outsize;
34000b74:	434a      	muls	r2, r1

	infoStruct->weight_start = 0;
34000b76:	2100      	movs	r1, #0
34000b78:	60d9      	str	r1, [r3, #12]
	infoStruct->weight_end   = infoStruct->weight_start + inBytes * outBytes;
34000b7a:	68d9      	ldr	r1, [r3, #12]
34000b7c:	fb02 1100 	mla	r1, r2, r0, r1
34000b80:	6119      	str	r1, [r3, #16]
	infoStruct->weight_limit = infoStruct->weight_end + inBytes;
34000b82:	6919      	ldr	r1, [r3, #16]
34000b84:	4401      	add	r1, r0
34000b86:	6159      	str	r1, [r3, #20]

	infoStruct->input_start = infoStruct->weight_limit ;
34000b88:	6959      	ldr	r1, [r3, #20]
34000b8a:	6199      	str	r1, [r3, #24]
	infoStruct->input_end   = infoStruct->input_start + inBytes;
34000b8c:	6999      	ldr	r1, [r3, #24]
34000b8e:	4401      	add	r1, r0
34000b90:	61d9      	str	r1, [r3, #28]
	infoStruct->input_limit = infoStruct->input_end + inBytes;
34000b92:	69d9      	ldr	r1, [r3, #28]
34000b94:	4401      	add	r1, r0
34000b96:	6219      	str	r1, [r3, #32]

	infoStruct->output_start = infoStruct->input_limit;
34000b98:	6a19      	ldr	r1, [r3, #32]
34000b9a:	6259      	str	r1, [r3, #36]	@ 0x24
	infoStruct->output_end   = infoStruct->output_start + outBytes;
34000b9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
34000b9e:	4411      	add	r1, r2
34000ba0:	6299      	str	r1, [r3, #40]	@ 0x28
	infoStruct->output_limit = infoStruct->output_end + outBytes;
34000ba2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
34000ba4:	440a      	add	r2, r1
34000ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
34000ba8:	4770      	bx	lr
	...

34000bac <npu_matvec_int8_init>:
	extern volatile Matmul_info matmulInfo_int;
	size_t insizeNPU = 0;
	size_t outsizeNPU = 0;

	// Calculate valid insize and outsize. At the moment only 8,16,24 are valid
	if((insize > 24) || (outsize > 24)){
34000bac:	2818      	cmp	r0, #24
int npu_matvec_int8_init(size_t insize,size_t outsize){
34000bae:	b510      	push	{r4, lr}
	if((insize > 24) || (outsize > 24)){
34000bb0:	d801      	bhi.n	34000bb6 <npu_matvec_int8_init+0xa>
34000bb2:	2918      	cmp	r1, #24
34000bb4:	d905      	bls.n	34000bc2 <npu_matvec_int8_init+0x16>
		printf("Insize or Outsize too big. Has to be lower or equal to 24\n\r");
34000bb6:	4810      	ldr	r0, [pc, #64]	@ (34000bf8 <npu_matvec_int8_init+0x4c>)
		return -1;
	}

	if((insize < 1) || (outsize < 1)){
		printf("Insize or Outsize too small. Has to be higher or equal to 1\n\r");
34000bb8:	f00d fe6c 	bl	3400e894 <iprintf>
		return -1;
34000bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}

	// Calculate Adresses
	calcAdresses(insizeNPU,outsizeNPU,1,&matmulInfo_int);
	return 0;
}
34000bc0:	bd10      	pop	{r4, pc}
	if((insize < 1) || (outsize < 1)){
34000bc2:	b100      	cbz	r0, 34000bc6 <npu_matvec_int8_init+0x1a>
34000bc4:	b909      	cbnz	r1, 34000bca <npu_matvec_int8_init+0x1e>
		printf("Insize or Outsize too small. Has to be higher or equal to 1\n\r");
34000bc6:	480d      	ldr	r0, [pc, #52]	@ (34000bfc <npu_matvec_int8_init+0x50>)
34000bc8:	e7f6      	b.n	34000bb8 <npu_matvec_int8_init+0xc>
		insizeNPU = ((insize/8) + 1) * 8;
34000bca:	f020 0307 	bic.w	r3, r0, #7
34000bce:	f010 0f07 	tst.w	r0, #7
		outsizeNPU = ((outsize/8) + 1) * 8;
34000bd2:	f021 0407 	bic.w	r4, r1, #7
		insizeNPU = ((insize/8) + 1) * 8;
34000bd6:	f103 0308 	add.w	r3, r3, #8
34000bda:	bf18      	it	ne
34000bdc:	4618      	movne	r0, r3
		outsizeNPU = ((outsize/8) + 1) * 8;
34000bde:	3408      	adds	r4, #8
34000be0:	f011 0f07 	tst.w	r1, #7
	calcAdresses(insizeNPU,outsizeNPU,1,&matmulInfo_int);
34000be4:	f04f 0201 	mov.w	r2, #1
34000be8:	bf18      	it	ne
34000bea:	4621      	movne	r1, r4
34000bec:	4b04      	ldr	r3, [pc, #16]	@ (34000c00 <npu_matvec_int8_init+0x54>)
34000bee:	f7ff ffbd 	bl	34000b6c <calcAdresses>
	return 0;
34000bf2:	2000      	movs	r0, #0
34000bf4:	e7e4      	b.n	34000bc0 <npu_matvec_int8_init+0x14>
34000bf6:	bf00      	nop
34000bf8:	340108c0 	.word	0x340108c0
34000bfc:	340108fc 	.word	0x340108fc
34000c00:	34012a1c 	.word	0x34012a1c

34000c04 <npu_matvec_int8_run>:

int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34000c06:	460c      	mov	r4, r1
	//LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(int8);
	extern volatile Matmul_info matmulInfo_int;

	// Prepare input buffer: 0x34200000UL is the base address
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000c08:	4f1f      	ldr	r7, [pc, #124]	@ (34000c88 <npu_matvec_int8_run+0x84>)
int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000c0a:	461d      	mov	r5, r3
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000c0c:	69bb      	ldr	r3, [r7, #24]
34000c0e:	4601      	mov	r1, r0
34000c10:	f103 5050 	add.w	r0, r3, #872415232	@ 0x34000000
int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000c14:	4616      	mov	r6, r2
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000c16:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
34000c1a:	687a      	ldr	r2, [r7, #4]
34000c1c:	f00e fa11 	bl	3400f042 <memcpy>
    if ( dsize > 0 ) {
34000c20:	2c00      	cmp	r4, #0
	SCB_CleanDCache_by_Addr((void*)(0x34200000UL + matmulInfo_int.input_start), insizeVec);
34000c22:	69bb      	ldr	r3, [r7, #24]
34000c24:	dd20      	ble.n	34000c68 <npu_matvec_int8_run+0x64>
34000c26:	f103 5250 	add.w	r2, r3, #872415232	@ 0x34000000
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000c2a:	f003 001f 	and.w	r0, r3, #31
34000c2e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
34000c32:	4420      	add	r0, r4
  __ASM volatile ("dsb 0xF":::"memory");
34000c34:	f3bf 8f4f 	dsb	sy
34000c38:	f003 031f 	and.w	r3, r3, #31
34000c3c:	4423      	add	r3, r4
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000c3e:	3801      	subs	r0, #1
34000c40:	3b20      	subs	r3, #32
34000c42:	0940      	lsrs	r0, r0, #5
34000c44:	3320      	adds	r3, #32
34000c46:	f100 0e01 	add.w	lr, r0, #1
34000c4a:	bfd8      	it	le
34000c4c:	f04f 0e01 	movle.w	lr, #1
34000c50:	f04e e001 	dls	lr, lr
34000c54:	490d      	ldr	r1, [pc, #52]	@ (34000c8c <npu_matvec_int8_run+0x88>)
34000c56:	f8c1 2268 	str.w	r2, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000c5a:	3220      	adds	r2, #32
      } while ( op_size > 0 );
34000c5c:	f00f c805 	le	lr, 34000c56 <npu_matvec_int8_run+0x52>
34000c60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000c64:	f3bf 8f6f 	isb	sy

	// Prepare Matrix
	update_weights_int8((int8_t*)(0x34200000UL), inMat, insizeVec * outSize);
34000c68:	4629      	mov	r1, r5
34000c6a:	fb06 f204 	mul.w	r2, r6, r4
34000c6e:	4808      	ldr	r0, [pc, #32]	@ (34000c90 <npu_matvec_int8_run+0x8c>)
34000c70:	f7ff ff54 	bl	34000b1c <update_weights_int8>

	LL_ATON_RT_Main(&NN_Instance_int8);
34000c74:	4807      	ldr	r0, [pc, #28]	@ (34000c94 <npu_matvec_int8_run+0x90>)
34000c76:	f00c fabd 	bl	3400d1f4 <LL_ATON_RT_Main>

	return (int8_t*)(0x34200000UL + matmulInfo_int.output_start);
34000c7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
}
34000c7c:	f100 5050 	add.w	r0, r0, #872415232	@ 0x34000000
34000c80:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
34000c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34000c86:	bf00      	nop
34000c88:	34012a1c 	.word	0x34012a1c
34000c8c:	e000ed00 	.word	0xe000ed00
34000c90:	34200000 	.word	0x34200000
34000c94:	340127e4 	.word	0x340127e4

34000c98 <getIdentityWeights_int8>:
	LL_ATON_RT_Main(&NN_Instance_int8);

	return (float*)(matmulInfo_Float.output_start);
}

int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000c9a:	fb01 f700 	mul.w	r7, r1, r0
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000c9e:	4605      	mov	r5, r0
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000ca0:	4638      	mov	r0, r7
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000ca2:	460c      	mov	r4, r1
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000ca4:	f00c ff6a 	bl	3400db7c <malloc>
    if (identity == NULL) {
34000ca8:	4606      	mov	r6, r0
34000caa:	b160      	cbz	r0, 34000cc6 <getIdentityWeights_int8+0x2e>
        return NULL;
    }

    // Initialize to 0
    memset(identity, 0, insize * outsize * sizeof(int8_t));
34000cac:	463a      	mov	r2, r7
34000cae:	2100      	movs	r1, #0
34000cb0:	f00d ff38 	bl	3400eb24 <memset>

    // Identity matrix is defined by: out[i] = in[i]
    // So we need to set W[i][i] = 1, which is at index: i * insize + i
    size_t min_dim = (insize < outsize) ? insize : outsize;
34000cb4:	42ac      	cmp	r4, r5
34000cb6:	bf28      	it	cs
34000cb8:	462c      	movcs	r4, r5

    for (size_t i = 0; i < min_dim; i++) {
        identity[i * insize + i] = 1;
34000cba:	2201      	movs	r2, #1
34000cbc:	4633      	mov	r3, r6
34000cbe:	3501      	adds	r5, #1
34000cc0:	18a1      	adds	r1, r4, r2
    for (size_t i = 0; i < min_dim; i++) {
34000cc2:	3901      	subs	r1, #1
34000cc4:	d101      	bne.n	34000cca <getIdentityWeights_int8+0x32>
    }

    return identity;
}
34000cc6:	4630      	mov	r0, r6
34000cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        identity[i * insize + i] = 1;
34000cca:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < min_dim; i++) {
34000ccc:	442b      	add	r3, r5
34000cce:	e7f8      	b.n	34000cc2 <getIdentityWeights_int8+0x2a>

34000cd0 <copy_submatrix>:



void copy_submatrix(int8_t *dest, int8_t *src,
                    size_t start_row, size_t start_col,
                    size_t src_cols, size_t sub_rows, size_t sub_cols) {
34000cd0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
34000cd4:	4604      	mov	r4, r0
    for (size_t i = 0; i < sub_rows; i++) {
34000cd6:	2700      	movs	r7, #0
                    size_t src_cols, size_t sub_rows, size_t sub_cols) {
34000cd8:	9e06      	ldr	r6, [sp, #24]
34000cda:	f8dd 9020 	ldr.w	r9, [sp, #32]
34000cde:	fb06 3302 	mla	r3, r6, r2, r3
34000ce2:	18cd      	adds	r5, r1, r3
    for (size_t i = 0; i < sub_rows; i++) {
34000ce4:	9b07      	ldr	r3, [sp, #28]
34000ce6:	429f      	cmp	r7, r3
34000ce8:	d101      	bne.n	34000cee <copy_submatrix+0x1e>
        size_t src_index = (start_row + i) * src_cols + start_col;
        size_t dest_index = i * sub_cols;
        memcpy(&dest[dest_index], &src[src_index], sub_cols * sizeof(int8_t));
    }
}
34000cea:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        memcpy(&dest[dest_index], &src[src_index], sub_cols * sizeof(int8_t));
34000cee:	4629      	mov	r1, r5
34000cf0:	4620      	mov	r0, r4
34000cf2:	464a      	mov	r2, r9
34000cf4:	f00e f9a5 	bl	3400f042 <memcpy>
    for (size_t i = 0; i < sub_rows; i++) {
34000cf8:	3701      	adds	r7, #1
34000cfa:	444c      	add	r4, r9
34000cfc:	4435      	add	r5, r6
34000cfe:	e7f1      	b.n	34000ce4 <copy_submatrix+0x14>

34000d00 <printNPUData>:

void printNPUData(int8_t* invec,size_t insize,int8_t* outvec,size_t outsize,int8_t*wightvec){
34000d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000d04:	4680      	mov	r8, r0
34000d06:	460e      	mov	r6, r1
34000d08:	4617      	mov	r7, r2
34000d0a:	461d      	mov	r5, r3
	for(int i = 0; i<insize;i++){
34000d0c:	2400      	movs	r4, #0
		printf("Input[%2d]:%4d",i,invec[i]);
34000d0e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 34000d8c <printNPUData+0x8c>
	for(int i = 0; i<insize;i++){
34000d12:	42b4      	cmp	r4, r6
34000d14:	d114      	bne.n	34000d40 <printNPUData+0x40>
	}
	printf("\n\r");
	printf("Weights:\n\r");
	for(int i = 0; i<outsize;i++){
34000d16:	f04f 0800 	mov.w	r8, #0
	printf("\n\r");
34000d1a:	4819      	ldr	r0, [pc, #100]	@ (34000d80 <printNPUData+0x80>)
34000d1c:	f00d fdba 	bl	3400e894 <iprintf>
	printf("Weights:\n\r");
34000d20:	4818      	ldr	r0, [pc, #96]	@ (34000d84 <printNPUData+0x84>)
34000d22:	f00d fdb7 	bl	3400e894 <iprintf>
		for(int j = 0; j < insize;j++){
			printf("%4d", wightvec[i * insize + j]);
34000d26:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 34000d90 <printNPUData+0x90>
34000d2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		}
		printf("\n\r");
34000d2c:	f8df a050 	ldr.w	sl, [pc, #80]	@ 34000d80 <printNPUData+0x80>
	for(int i = 0; i<outsize;i++){
34000d30:	45a8      	cmp	r8, r5
34000d32:	d11a      	bne.n	34000d6a <printNPUData+0x6a>
	}

	for(int i = 0; i<outsize;i++){
34000d34:	2400      	movs	r4, #0
			printf("Output[%2d]:%4d",i,outvec[i]);
34000d36:	4e14      	ldr	r6, [pc, #80]	@ (34000d88 <printNPUData+0x88>)
	for(int i = 0; i<outsize;i++){
34000d38:	42ac      	cmp	r4, r5
34000d3a:	d119      	bne.n	34000d70 <printNPUData+0x70>
	}
}
34000d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Input[%2d]:%4d",i,invec[i]);
34000d40:	4621      	mov	r1, r4
34000d42:	f918 2004 	ldrsb.w	r2, [r8, r4]
34000d46:	4648      	mov	r0, r9
34000d48:	f00d fda4 	bl	3400e894 <iprintf>
	for(int i = 0; i<insize;i++){
34000d4c:	3401      	adds	r4, #1
34000d4e:	e7e0      	b.n	34000d12 <printNPUData+0x12>
			printf("%4d", wightvec[i * insize + j]);
34000d50:	4648      	mov	r0, r9
34000d52:	f914 1b01 	ldrsb.w	r1, [r4], #1
34000d56:	f00d fd9d 	bl	3400e894 <iprintf>
		for(int j = 0; j < insize;j++){
34000d5a:	455c      	cmp	r4, fp
34000d5c:	d1f8      	bne.n	34000d50 <printNPUData+0x50>
		printf("\n\r");
34000d5e:	4650      	mov	r0, sl
34000d60:	f00d fd98 	bl	3400e894 <iprintf>
	for(int i = 0; i<outsize;i++){
34000d64:	f108 0801 	add.w	r8, r8, #1
34000d68:	e7e2      	b.n	34000d30 <printNPUData+0x30>
34000d6a:	eb06 0b04 	add.w	fp, r6, r4
34000d6e:	e7f4      	b.n	34000d5a <printNPUData+0x5a>
			printf("Output[%2d]:%4d",i,outvec[i]);
34000d70:	4621      	mov	r1, r4
34000d72:	573a      	ldrsb	r2, [r7, r4]
34000d74:	4630      	mov	r0, r6
34000d76:	f00d fd8d 	bl	3400e894 <iprintf>
	for(int i = 0; i<outsize;i++){
34000d7a:	3401      	adds	r4, #1
34000d7c:	e7dc      	b.n	34000d38 <printNPUData+0x38>
34000d7e:	bf00      	nop
34000d80:	34010937 	.word	0x34010937
34000d84:	34010949 	.word	0x34010949
34000d88:	34010954 	.word	0x34010954
34000d8c:	3401093a 	.word	0x3401093a
34000d90:	34010945 	.word	0x34010945

34000d94 <npu_tiledmatvec_int8>:
int npu_tiledmatvec_int8(int8_t* invec, size_t insize, int8_t* outvec, size_t outsize, int8_t* inMat) {
34000d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000d98:	4688      	mov	r8, r1
    calcAdresses(refSize, refSize, 1, &matmulInfo_int);
34000d9a:	2110      	movs	r1, #16
int npu_tiledmatvec_int8(int8_t* invec, size_t insize, int8_t* outvec, size_t outsize, int8_t* inMat) {
34000d9c:	461d      	mov	r5, r3
    for (size_t i = 0; i < num_tiles_out; i++) {
34000d9e:	2700      	movs	r7, #0
    calcAdresses(refSize, refSize, 1, &matmulInfo_int);
34000da0:	4e56      	ldr	r6, [pc, #344]	@ (34000efc <npu_tiledmatvec_int8+0x168>)
int npu_tiledmatvec_int8(int8_t* invec, size_t insize, int8_t* outvec, size_t outsize, int8_t* inMat) {
34000da2:	b0d5      	sub	sp, #340	@ 0x154
    calcAdresses(refSize, refSize, 1, &matmulInfo_int);
34000da4:	4633      	mov	r3, r6
int npu_tiledmatvec_int8(int8_t* invec, size_t insize, int8_t* outvec, size_t outsize, int8_t* inMat) {
34000da6:	900b      	str	r0, [sp, #44]	@ 0x2c
34000da8:	9207      	str	r2, [sp, #28]
    calcAdresses(refSize, refSize, 1, &matmulInfo_int);
34000daa:	4608      	mov	r0, r1
34000dac:	2201      	movs	r2, #1
34000dae:	f7ff fedd 	bl	34000b6c <calcAdresses>
    int8_t* outp = (int8_t*)(0x34200000UL + matmulInfo_int.output_start);
34000db2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
    memset(outvec, 0, outsize * sizeof(int8_t));
34000db4:	462a      	mov	r2, r5
    int8_t* outp = (int8_t*)(0x34200000UL + matmulInfo_int.output_start);
34000db6:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
34000dba:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
    memset(outvec, 0, outsize * sizeof(int8_t));
34000dbe:	2100      	movs	r1, #0
34000dc0:	9807      	ldr	r0, [sp, #28]
    int8_t* outp = (int8_t*)(0x34200000UL + matmulInfo_int.output_start);
34000dc2:	9304      	str	r3, [sp, #16]
    memset(outvec, 0, outsize * sizeof(int8_t));
34000dc4:	f00d feae 	bl	3400eb24 <memset>
    size_t num_tiles_out = (outsize + refSize - 1) / refSize;
34000dc8:	f105 030f 	add.w	r3, r5, #15
34000dcc:	f023 030f 	bic.w	r3, r3, #15
34000dd0:	930a      	str	r3, [sp, #40]	@ 0x28
    size_t num_tiles_in  = (insize + refSize - 1) / refSize;
34000dd2:	f108 030f 	add.w	r3, r8, #15
34000dd6:	f023 030f 	bic.w	r3, r3, #15
34000dda:	9309      	str	r3, [sp, #36]	@ 0x24
    for (size_t i = 0; i < num_tiles_out; i++) {
34000ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34000dde:	429f      	cmp	r7, r3
34000de0:	d103      	bne.n	34000dea <npu_tiledmatvec_int8+0x56>
}
34000de2:	2000      	movs	r0, #0
34000de4:	b055      	add	sp, #340	@ 0x154
34000de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t acc[16] = {0};  // Accumulator for output tile
34000dea:	2210      	movs	r2, #16
34000dec:	2100      	movs	r1, #0
34000dee:	a80c      	add	r0, sp, #48	@ 0x30
34000df0:	f107 0b10 	add.w	fp, r7, #16
34000df4:	f00d fe96 	bl	3400eb24 <memset>
            size_t sub_rows = (i * refSize + refSize <= outsize) ? refSize : (outsize - i * refSize);
34000df8:	1beb      	subs	r3, r5, r7
34000dfa:	455d      	cmp	r5, fp
34000dfc:	9308      	str	r3, [sp, #32]
34000dfe:	bf28      	it	cs
34000e00:	2310      	movcs	r3, #16
        for (size_t j = 0; j < num_tiles_in; j++) {
34000e02:	f04f 0a00 	mov.w	sl, #0
34000e06:	9305      	str	r3, [sp, #20]
34000e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34000e0a:	459a      	cmp	sl, r3
34000e0c:	d10b      	bne.n	34000e26 <npu_tiledmatvec_int8+0x92>
        memcpy(&outvec[i * refSize], acc, write_count);
34000e0e:	9b07      	ldr	r3, [sp, #28]
        size_t write_count = (i * refSize + refSize <= outsize) ? refSize : (outsize - i * refSize);
34000e10:	455d      	cmp	r5, fp
        memcpy(&outvec[i * refSize], acc, write_count);
34000e12:	9a08      	ldr	r2, [sp, #32]
34000e14:	eb03 0007 	add.w	r0, r3, r7
34000e18:	bf28      	it	cs
34000e1a:	2210      	movcs	r2, #16
34000e1c:	a90c      	add	r1, sp, #48	@ 0x30
34000e1e:	f00e f910 	bl	3400f042 <memcpy>
    for (size_t i = 0; i < num_tiles_out; i++) {
34000e22:	465f      	mov	r7, fp
34000e24:	e7da      	b.n	34000ddc <npu_tiledmatvec_int8+0x48>
            int8_t vecTile[16] = {0};
34000e26:	2210      	movs	r2, #16
34000e28:	2100      	movs	r1, #0
34000e2a:	a810      	add	r0, sp, #64	@ 0x40
34000e2c:	f00d fe7a 	bl	3400eb24 <memset>
            size_t vecCopy = (j * refSize + refSize <= insize) ? refSize : (insize - j * refSize);
34000e30:	f10a 0310 	add.w	r3, sl, #16
34000e34:	4598      	cmp	r8, r3
34000e36:	eba8 090a 	sub.w	r9, r8, sl
34000e3a:	bf28      	it	cs
34000e3c:	f04f 0910 	movcs.w	r9, #16
            memcpy(vecTile, &invec[j * refSize], vecCopy);
34000e40:	9306      	str	r3, [sp, #24]
34000e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34000e44:	464a      	mov	r2, r9
34000e46:	eb03 010a 	add.w	r1, r3, sl
34000e4a:	a810      	add	r0, sp, #64	@ 0x40
34000e4c:	f00e f8f9 	bl	3400f042 <memcpy>
            memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), vecTile, refSize);
34000e50:	69b4      	ldr	r4, [r6, #24]
34000e52:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
34000e56:	f104 5450 	add.w	r4, r4, #872415232	@ 0x34000000
34000e5a:	f504 1400 	add.w	r4, r4, #2097152	@ 0x200000
34000e5e:	f10d 0e50 	add.w	lr, sp, #80	@ 0x50
34000e62:	4662      	mov	r2, ip
34000e64:	ca03      	ldmia	r2!, {r0, r1}
34000e66:	4572      	cmp	r2, lr
34000e68:	6020      	str	r0, [r4, #0]
34000e6a:	6061      	str	r1, [r4, #4]
34000e6c:	4694      	mov	ip, r2
34000e6e:	f104 0408 	add.w	r4, r4, #8
34000e72:	d1f6      	bne.n	34000e62 <npu_tiledmatvec_int8+0xce>
            int8_t matTile[16*16] = {0};
34000e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
34000e78:	2100      	movs	r1, #0
34000e7a:	a814      	add	r0, sp, #80	@ 0x50
34000e7c:	f00d fe52 	bl	3400eb24 <memset>
            copy_submatrix(
34000e80:	9b05      	ldr	r3, [sp, #20]
34000e82:	463a      	mov	r2, r7
34000e84:	e9cd 8300 	strd	r8, r3, [sp]
34000e88:	995e      	ldr	r1, [sp, #376]	@ 0x178
34000e8a:	4653      	mov	r3, sl
34000e8c:	a814      	add	r0, sp, #80	@ 0x50
34000e8e:	f8cd 9008 	str.w	r9, [sp, #8]
34000e92:	f7ff ff1d 	bl	34000cd0 <copy_submatrix>
            memcpy((int8_t*)(0x34200000UL + matmulInfo_int.weight_start), matTile, refSize * refSize);
34000e96:	68f0      	ldr	r0, [r6, #12]
34000e98:	f44f 7280 	mov.w	r2, #256	@ 0x100
34000e9c:	f100 5050 	add.w	r0, r0, #872415232	@ 0x34000000
34000ea0:	a914      	add	r1, sp, #80	@ 0x50
34000ea2:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
34000ea6:	f00e f8cc 	bl	3400f042 <memcpy>
            LL_ATON_RT_Main(&NN_Instance_int8);
34000eaa:	4815      	ldr	r0, [pc, #84]	@ (34000f00 <npu_tiledmatvec_int8+0x16c>)
34000eac:	f00c f9a2 	bl	3400d1f4 <LL_ATON_RT_Main>
            		(int8_t*)(0x34200000UL + matmulInfo_int.input_start),
34000eb0:	69b0      	ldr	r0, [r6, #24]
					(int8_t*)(0x34200000UL + matmulInfo_int.output_start),
34000eb2:	6a72      	ldr	r2, [r6, #36]	@ 0x24
					(int8_t*)(0x34200000UL + matmulInfo_int.weight_start)
34000eb4:	68f3      	ldr	r3, [r6, #12]
            printNPUData(
34000eb6:	f102 5250 	add.w	r2, r2, #872415232	@ 0x34000000
					(int8_t*)(0x34200000UL + matmulInfo_int.weight_start)
34000eba:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
34000ebe:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
            printNPUData(
34000ec2:	9300      	str	r3, [sp, #0]
34000ec4:	2310      	movs	r3, #16
34000ec6:	f100 5050 	add.w	r0, r0, #872415232	@ 0x34000000
34000eca:	4619      	mov	r1, r3
34000ecc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
34000ed0:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
34000ed4:	f7ff ff14 	bl	34000d00 <printNPUData>
            for (size_t k = 0; k < sub_rows; k++) {
34000ed8:	2100      	movs	r1, #0
34000eda:	9b05      	ldr	r3, [sp, #20]
34000edc:	aa0c      	add	r2, sp, #48	@ 0x30
34000ede:	3301      	adds	r3, #1
34000ee0:	3b01      	subs	r3, #1
34000ee2:	d102      	bne.n	34000eea <npu_tiledmatvec_int8+0x156>
        for (size_t j = 0; j < num_tiles_in; j++) {
34000ee4:	f8dd a018 	ldr.w	sl, [sp, #24]
34000ee8:	e78e      	b.n	34000e08 <npu_tiledmatvec_int8+0x74>
                acc[k] += outp[k];
34000eea:	9804      	ldr	r0, [sp, #16]
34000eec:	f992 4000 	ldrsb.w	r4, [r2]
34000ef0:	5c40      	ldrb	r0, [r0, r1]
            for (size_t k = 0; k < sub_rows; k++) {
34000ef2:	3101      	adds	r1, #1
                acc[k] += outp[k];
34000ef4:	4420      	add	r0, r4
34000ef6:	f802 0b01 	strb.w	r0, [r2], #1
            for (size_t k = 0; k < sub_rows; k++) {
34000efa:	e7f1      	b.n	34000ee0 <npu_tiledmatvec_int8+0x14c>
34000efc:	34012a1c 	.word	0x34012a1c
34000f00:	340127e4 	.word	0x340127e4

34000f04 <LL_ATON_End_EpochBlock_int8>:
  };
  LL_ATON_EnableUnits_Init(enable_units, 4);
}

static void LL_ATON_End_EpochBlock_int8(const void *epoch_block)
{
34000f04:	b508      	push	{r3, lr}

    { LL_Switch_Init_Dest() = ATONN_DSTPORT(STRSWITCH, 0, STRENG, 3, 0),
      LL_Switch_Init_Source(0) = ATONN_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0),
      LL_Switch_Init_Context(0) = 1, LL_Switch_Init_Frames(0) = 0 },
  };
  LL_Switch_Deinit(switch_deinit, 3);
34000f06:	2103      	movs	r1, #3
34000f08:	4804      	ldr	r0, [pc, #16]	@ (34000f1c <LL_ATON_End_EpochBlock_int8+0x18>)
34000f0a:	f00b fddf 	bl	3400cacc <LL_Switch_Deinit>
    { {CONVACC, 0} },
    { {STRENG, 1} },
    { {STRENG, 9} },
  };
  LL_ATON_DisableUnits_Init(disable_units, 4);
}
34000f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DisableUnits_Init(disable_units, 4);
34000f12:	2104      	movs	r1, #4
34000f14:	4802      	ldr	r0, [pc, #8]	@ (34000f20 <LL_ATON_End_EpochBlock_int8+0x1c>)
34000f16:	f00c b8d5 	b.w	3400d0c4 <LL_ATON_DisableUnits_Init>
34000f1a:	bf00      	nop
34000f1c:	340123c4 	.word	0x340123c4
34000f20:	340123b4 	.word	0x340123b4

34000f24 <LL_ATON_Start_EpochBlock_int8>:
{
34000f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34000f28:	b0c1      	sub	sp, #260	@ 0x104
  LL_Convacc_InitTypeDef conv_init = {
34000f2a:	223c      	movs	r2, #60	@ 0x3c
34000f2c:	2100      	movs	r1, #0
34000f2e:	a801      	add	r0, sp, #4
34000f30:	f00d fdf8 	bl	3400eb24 <memset>
34000f34:	4b40      	ldr	r3, [pc, #256]	@ (34001038 <LL_ATON_Start_EpochBlock_int8+0x114>)
34000f36:	2501      	movs	r5, #1
  LL_Streng_TensorInitTypeDef input_tensor = {
34000f38:	2640      	movs	r6, #64	@ 0x40
  LL_Convacc_InitTypeDef conv_init = {
34000f3a:	9301      	str	r3, [sp, #4]
34000f3c:	f240 1301 	movw	r3, #257	@ 0x101
    .nKernels = matmulInfo_int.insize,
34000f40:	4c3e      	ldr	r4, [pc, #248]	@ (3400103c <LL_ATON_Start_EpochBlock_int8+0x118>)
  LL_Convacc_Init(0, &conv_init);
34000f42:	a901      	add	r1, sp, #4
    .nKernels = matmulInfo_int.insize,
34000f44:	6862      	ldr	r2, [r4, #4]
  LL_Convacc_Init(0, &conv_init);
34000f46:	2000      	movs	r0, #0
  LL_Convacc_InitTypeDef conv_init = {
34000f48:	f88d 2016 	strb.w	r2, [sp, #22]
    .batchDepth = matmulInfo_int.outsize,
34000f4c:	68a2      	ldr	r2, [r4, #8]
  LL_Convacc_InitTypeDef conv_init = {
34000f4e:	f8ad 3014 	strh.w	r3, [sp, #20]
34000f52:	f8ad 301a 	strh.w	r3, [sp, #26]
34000f56:	f8ad 2018 	strh.w	r2, [sp, #24]
34000f5a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  LL_Convacc_Init(0, &conv_init);
34000f5e:	f00b ff27 	bl	3400cdb0 <LL_Convacc_Init>
  LL_Streng_TensorInitTypeDef input_tensor = {
34000f62:	4632      	mov	r2, r6
34000f64:	eb0d 0006 	add.w	r0, sp, r6
34000f68:	2100      	movs	r1, #0
34000f6a:	f00d fddb 	bl	3400eb24 <memset>
34000f6e:	2302      	movs	r3, #2
34000f70:	f640 0708 	movw	r7, #2056	@ 0x808
34000f74:	f04f 0910 	mov.w	r9, #16
34000f78:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
    .offset_start = matmulInfo_int.input_start,
34000f7c:	69a3      	ldr	r3, [r4, #24]
  LL_Streng_TensorInitTypeDef input_tensor = {
34000f7e:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 34001048 <LL_ATON_Start_EpochBlock_int8+0x124>
34000f82:	9312      	str	r3, [sp, #72]	@ 0x48
    .offset_end = matmulInfo_int.input_end,
34000f84:	69e3      	ldr	r3, [r4, #28]
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000f86:	eb0d 0106 	add.w	r1, sp, r6
  LL_Streng_TensorInitTypeDef input_tensor = {
34000f8a:	9313      	str	r3, [sp, #76]	@ 0x4c
    .offset_limit = matmulInfo_int.input_limit,
34000f8c:	6a23      	ldr	r3, [r4, #32]
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000f8e:	462a      	mov	r2, r5
34000f90:	4628      	mov	r0, r5
  LL_Streng_TensorInitTypeDef input_tensor = {
34000f92:	9314      	str	r3, [sp, #80]	@ 0x50
34000f94:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
34000f98:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
34000f9c:	951e      	str	r5, [sp, #120]	@ 0x78
34000f9e:	f8ad 707c 	strh.w	r7, [sp, #124]	@ 0x7c
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000fa2:	f00b fdb9 	bl	3400cb18 <LL_Streng_TensorInit>
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000fa6:	4632      	mov	r2, r6
34000fa8:	2100      	movs	r1, #0
34000faa:	a820      	add	r0, sp, #128	@ 0x80
34000fac:	f00d fdba 	bl	3400eb24 <memset>
34000fb0:	230a      	movs	r3, #10
34000fb2:	f88d 3080 	strb.w	r3, [sp, #128]	@ 0x80
    .offset_start = matmulInfo_int.weight_start,
34000fb6:	68e3      	ldr	r3, [r4, #12]
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000fb8:	462a      	mov	r2, r5
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000fba:	9322      	str	r3, [sp, #136]	@ 0x88
    .offset_end = matmulInfo_int.weight_end,
34000fbc:	6923      	ldr	r3, [r4, #16]
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000fbe:	a920      	add	r1, sp, #128	@ 0x80
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000fc0:	9323      	str	r3, [sp, #140]	@ 0x8c
    .offset_limit = matmulInfo_int.weight_limit,
34000fc2:	6963      	ldr	r3, [r4, #20]
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000fc4:	2009      	movs	r0, #9
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000fc6:	9324      	str	r3, [sp, #144]	@ 0x90
34000fc8:	f8cd 8084 	str.w	r8, [sp, #132]	@ 0x84
34000fcc:	952e      	str	r5, [sp, #184]	@ 0xb8
34000fce:	f8ad 70bc 	strh.w	r7, [sp, #188]	@ 0xbc
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000fd2:	f00b fda1 	bl	3400cb18 <LL_Streng_TensorInit>
  LL_Streng_TensorInitTypeDef output_tensor = {
34000fd6:	4632      	mov	r2, r6
34000fd8:	2603      	movs	r6, #3
34000fda:	2100      	movs	r1, #0
34000fdc:	a830      	add	r0, sp, #192	@ 0xc0
34000fde:	f00d fda1 	bl	3400eb24 <memset>
    .offset_start = matmulInfo_int.output_start,
34000fe2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000fe4:	462a      	mov	r2, r5
  LL_Streng_TensorInitTypeDef output_tensor = {
34000fe6:	9332      	str	r3, [sp, #200]	@ 0xc8
    .offset_end = matmulInfo_int.output_end,
34000fe8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000fea:	a930      	add	r1, sp, #192	@ 0xc0
  LL_Streng_TensorInitTypeDef output_tensor = {
34000fec:	9333      	str	r3, [sp, #204]	@ 0xcc
    .offset_limit = matmulInfo_int.output_limit,
34000fee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000ff0:	4630      	mov	r0, r6
  LL_Streng_TensorInitTypeDef output_tensor = {
34000ff2:	9334      	str	r3, [sp, #208]	@ 0xd0
34000ff4:	f88d 60c0 	strb.w	r6, [sp, #192]	@ 0xc0
34000ff8:	f8cd 80c4 	str.w	r8, [sp, #196]	@ 0xc4
34000ffc:	f8cd 90e8 	str.w	r9, [sp, #232]	@ 0xe8
34001000:	953e      	str	r5, [sp, #248]	@ 0xf8
34001002:	f8ad 70fc 	strh.w	r7, [sp, #252]	@ 0xfc
  LL_Streng_TensorInit(3, &output_tensor, 1);
34001006:	f00b fd87 	bl	3400cb18 <LL_Streng_TensorInit>
  LL_Switch_Init(switch_init, 3);
3400100a:	4631      	mov	r1, r6
3400100c:	480c      	ldr	r0, [pc, #48]	@ (34001040 <LL_ATON_Start_EpochBlock_int8+0x11c>)
3400100e:	f00b fd4d 	bl	3400caac <LL_Switch_Init>
  LL_ATON_Cache_MCU_Invalidate_Range((uintptr_t)(0x34200000UL + matmulInfo_int.input_start), matmulInfo_int.output_end - matmulInfo_int.input_start); /// Very Important!!
34001012:	69a0      	ldr	r0, [r4, #24]
34001014:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
34001016:	69a3      	ldr	r3, [r4, #24]
34001018:	f100 5050 	add.w	r0, r0, #872415232	@ 0x34000000
3400101c:	1ac9      	subs	r1, r1, r3
3400101e:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
34001022:	4401      	add	r1, r0
34001024:	f000 fb78 	bl	34001718 <mcu_cache_invalidate_range>
  LL_ATON_EnableUnits_Init(enable_units, 4);
34001028:	2104      	movs	r1, #4
3400102a:	4806      	ldr	r0, [pc, #24]	@ (34001044 <LL_ATON_Start_EpochBlock_int8+0x120>)
3400102c:	f00b fccc 	bl	3400c9c8 <LL_ATON_EnableUnits_Init>
}
34001030:	b041      	add	sp, #260	@ 0x104
34001032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
34001036:	bf00      	nop
34001038:	004015d0 	.word	0x004015d0
3400103c:	34012a1c 	.word	0x34012a1c
34001040:	34012384 	.word	0x34012384
34001044:	34012374 	.word	0x34012374
34001048:	34200000 	.word	0x34200000

3400104c <LL_ATON_Set_User_Input_Buffer_int8>:
}
3400104c:	2003      	movs	r0, #3
3400104e:	4770      	bx	lr

34001050 <LL_ATON_Get_User_Input_Buffer_int8>:
}
34001050:	2000      	movs	r0, #0
34001052:	4770      	bx	lr

34001054 <LL_ATON_Set_User_Output_Buffer_int8>:
LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_int8(uint32_t num, void* buffer, uint32_t size)
34001054:	2003      	movs	r0, #3
34001056:	4770      	bx	lr

34001058 <LL_ATON_Get_User_Output_Buffer_int8>:
void *LL_ATON_Get_User_Output_Buffer_int8(uint32_t num)
34001058:	2000      	movs	r0, #0
3400105a:	4770      	bx	lr

3400105c <LL_ATON_EC_Network_Init_int8>:
}
3400105c:	2001      	movs	r0, #1
3400105e:	4770      	bx	lr

34001060 <LL_ATON_EC_Inference_Init_int8>:
bool LL_ATON_EC_Inference_Init_int8(void)
34001060:	2001      	movs	r0, #1
34001062:	4770      	bx	lr

34001064 <LL_ATON_EpochBlockItems_int8>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
34001064:	4800      	ldr	r0, [pc, #0]	@ (34001068 <LL_ATON_EpochBlockItems_int8+0x4>)
34001066:	4770      	bx	lr
34001068:	340123f4 	.word	0x340123f4

3400106c <LL_ATON_Input_Buffers_Info_int8>:
#endif // LL_ATON_DBG_BUFFER_INFO_EXCLUDED == 0
  LL_Buffer_InfoTypeDef buff_info[] = {
    {
      .name = "Input_0_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
3400106c:	4b02      	ldr	r3, [pc, #8]	@ (34001078 <LL_ATON_Input_Buffers_Info_int8+0xc>)
      .name = NULL,
    }
  };

  return buff_info;
}
3400106e:	2000      	movs	r0, #0
      .offset_start = matmulInfo_int.input_start,
34001070:	699a      	ldr	r2, [r3, #24]
      .offset_end = matmulInfo_int.input_end,
34001072:	69da      	ldr	r2, [r3, #28]
      .offset_limit = matmulInfo_int.input_limit,
34001074:	6a1b      	ldr	r3, [r3, #32]
}
34001076:	4770      	bx	lr
34001078:	34012a1c 	.word	0x34012a1c

3400107c <LL_ATON_Output_Buffers_Info_int8>:
  static const int16_t buff_info_Quantize_3_out_0_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
    {
      .name = "Quantize_3_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.output_start,
3400107c:	4b02      	ldr	r3, [pc, #8]	@ (34001088 <LL_ATON_Output_Buffers_Info_int8+0xc>)
      .name = NULL,
    }
  };

  return buff_info;
}
3400107e:	2000      	movs	r0, #0
      .offset_start = matmulInfo_int.output_start,
34001080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      .offset_end = matmulInfo_int.output_end,
34001082:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      .offset_limit = matmulInfo_int.output_limit,
34001084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
34001086:	4770      	bx	lr
34001088:	34012a1c 	.word	0x34012a1c

3400108c <LL_ATON_Internal_Buffers_Info_int8>:
  static const int16_t buff_info_Gemm_2_conv_4_off_bias_out_13_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
    {
      .name = "Gemm_2_reshape_x_2",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
3400108c:	4b04      	ldr	r3, [pc, #16]	@ (340010a0 <LL_ATON_Internal_Buffers_Info_int8+0x14>)
      .name = NULL,
    }
  };

  return buff_info;
}
3400108e:	2000      	movs	r0, #0
      .offset_start = matmulInfo_int.input_start,
34001090:	699a      	ldr	r2, [r3, #24]
      .offset_end = matmulInfo_int.input_end,
34001092:	69da      	ldr	r2, [r3, #28]
      .offset_limit = matmulInfo_int.input_limit,
34001094:	6a1a      	ldr	r2, [r3, #32]
      .offset_start = matmulInfo_int.output_start,
34001096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      .offset_end = matmulInfo_int.output_end,
34001098:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      .offset_limit = matmulInfo_int.output_limit,
3400109a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
3400109c:	4770      	bx	lr
3400109e:	bf00      	nop
340010a0:	34012a1c 	.word	0x34012a1c

340010a4 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
340010a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
340010a6:	4b15      	ldr	r3, [pc, #84]	@ (340010fc <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
340010a8:	217c      	movs	r1, #124	@ 0x7c
340010aa:	aa01      	add	r2, sp, #4
340010ac:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
340010ae:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
340010b0:	f001 fbb0 	bl	34002814 <HAL_BSEC_OTP_Read>
340010b4:	4603      	mov	r3, r0
340010b6:	b9e0      	cbnz	r0, 340010f2 <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
340010b8:	9a01      	ldr	r2, [sp, #4]
340010ba:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
340010be:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
340010c2:	d017      	beq.n	340010f4 <Fuse_Programming+0x50>
    {
      data |= bit_mask;
340010c4:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
340010c8:	217c      	movs	r1, #124	@ 0x7c
340010ca:	a802      	add	r0, sp, #8
      data |= bit_mask;
340010cc:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
340010ce:	f001 fbbd 	bl	3400284c <HAL_BSEC_OTP_Program>
340010d2:	b968      	cbnz	r0, 340010f0 <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
340010d4:	217c      	movs	r1, #124	@ 0x7c
340010d6:	aa01      	add	r2, sp, #4
340010d8:	a802      	add	r0, sp, #8
340010da:	f001 fb9b 	bl	34002814 <HAL_BSEC_OTP_Read>
340010de:	b930      	cbnz	r0, 340010ee <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
340010e0:	9b01      	ldr	r3, [sp, #4]
340010e2:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
340010e6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
340010ea:	d003      	beq.n	340010f4 <Fuse_Programming+0x50>
340010ec:	e7fe      	b.n	340010ec <Fuse_Programming+0x48>
340010ee:	e7fe      	b.n	340010ee <Fuse_Programming+0x4a>
340010f0:	e7fe      	b.n	340010f0 <Fuse_Programming+0x4c>
340010f2:	e7fe      	b.n	340010f2 <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
340010f4:	b005      	add	sp, #20
340010f6:	f85d fb04 	ldr.w	pc, [sp], #4
340010fa:	bf00      	nop
340010fc:	56009000 	.word	0x56009000

34001100 <LL_MEM_EnableClock>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34001100:	4b04      	ldr	r3, [pc, #16]	@ (34001114 <LL_MEM_EnableClock+0x14>)
{
34001102:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
34001104:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34001108:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
3400110c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400110e:	9b01      	ldr	r3, [sp, #4]
}
34001110:	b002      	add	sp, #8
34001112:	4770      	bx	lr
34001114:	56028000 	.word	0x56028000

34001118 <LL_MEM_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34001118:	4b04      	ldr	r3, [pc, #16]	@ (3400112c <LL_MEM_EnableClockLowPower+0x14>)
{
3400111a:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMLPENSR, Memories);
3400111c:	f8c3 0a8c 	str.w	r0, [r3, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
34001120:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34001124:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001126:	9b01      	ldr	r3, [sp, #4]
}
34001128:	b002      	add	sp, #8
3400112a:	4770      	bx	lr
3400112c:	56028000 	.word	0x56028000

34001130 <LL_AHB5_GRP1_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34001130:	4b04      	ldr	r3, [pc, #16]	@ (34001144 <LL_AHB5_GRP1_EnableClockLowPower+0x14>)
{
34001132:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34001134:	f8c3 0aa0 	str.w	r0, [r3, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34001138:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
3400113c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400113e:	9b01      	ldr	r3, [sp, #4]
}
34001140:	b002      	add	sp, #8
34001142:	4770      	bx	lr
34001144:	56028000 	.word	0x56028000

34001148 <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
34001148:	b530      	push	{r4, r5, lr}
3400114a:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3400114e:	2240      	movs	r2, #64	@ 0x40
34001150:	2100      	movs	r1, #0
34001152:	4668      	mov	r0, sp
34001154:	f00d fce6 	bl	3400eb24 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34001158:	2298      	movs	r2, #152	@ 0x98
3400115a:	2100      	movs	r1, #0
3400115c:	a810      	add	r0, sp, #64	@ 0x40
3400115e:	f00d fce1 	bl	3400eb24 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34001162:	f44f 72c8 	mov.w	r2, #400	@ 0x190
34001166:	2100      	movs	r1, #0
34001168:	a836      	add	r0, sp, #216	@ 0xd8
3400116a:	f00d fcdb 	bl	3400eb24 <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
3400116e:	2001      	movs	r0, #1
34001170:	f000 fe28 	bl	34001dc4 <BSP_SMPS_Init>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34001174:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34001176:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34001178:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
3400117a:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
3400117c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
3400117e:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34001182:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
34001186:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
34001188:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
3400118a:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
3400118e:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34001192:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
34001196:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
3400119a:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
3400119e:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
340011a2:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
340011a6:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
340011a8:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
340011aa:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
340011ac:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
340011b0:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
340011b4:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
340011b8:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
340011bc:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
340011be:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
340011c0:	f003 fa9c 	bl	340046fc <HAL_RCC_OscConfig>
340011c4:	b100      	cbz	r0, 340011c8 <SystemClock_Config+0x80>
  {
    while(1);
340011c6:	e7fe      	b.n	340011c6 <SystemClock_Config+0x7e>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
340011c8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
340011cc:	227f      	movs	r2, #127	@ 0x7f
340011ce:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
340011d2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
340011d6:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
340011d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
340011dc:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
340011e0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
340011e4:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
340011e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
340011ec:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
340011f0:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
340011f4:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
340011f8:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
340011fc:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
340011fe:	4668      	mov	r0, sp
34001200:	f003 fe78 	bl	34004ef4 <HAL_RCC_ClockConfig>
34001204:	b100      	cbz	r0, 34001208 <SystemClock_Config+0xc0>
  {
    while(1);
34001206:	e7fe      	b.n	34001206 <SystemClock_Config+0xbe>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34001208:	4b08      	ldr	r3, [pc, #32]	@ (3400122c <SystemClock_Config+0xe4>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3400120a:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
3400120c:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3400120e:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
34001212:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34001216:	4b06      	ldr	r3, [pc, #24]	@ (34001230 <SystemClock_Config+0xe8>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34001218:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
3400121a:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3400121c:	f004 fa1c 	bl	34005658 <HAL_RCCEx_PeriphCLKConfig>
34001220:	b100      	cbz	r0, 34001224 <SystemClock_Config+0xdc>
  {
    while (1);
34001222:	e7fe      	b.n	34001222 <SystemClock_Config+0xda>
  }
}
34001224:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
34001228:	bd30      	pop	{r4, r5, pc}
3400122a:	bf00      	nop
3400122c:	03000014 	.word	0x03000014
34001230:	03000414 	.word	0x03000414

34001234 <Hardware_init>:
{
34001234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34001238:	4a89      	ldr	r2, [pc, #548]	@ (34001460 <Hardware_init+0x22c>)
{
3400123a:	b08d      	sub	sp, #52	@ 0x34
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
3400123c:	6813      	ldr	r3, [r2, #0]
3400123e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34001242:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
34001244:	4b87      	ldr	r3, [pc, #540]	@ (34001464 <Hardware_init+0x230>)
34001246:	6a1a      	ldr	r2, [r3, #32]
34001248:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
3400124c:	621a      	str	r2, [r3, #32]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
3400124e:	6a1a      	ldr	r2, [r3, #32]
34001250:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
34001254:	621a      	str	r2, [r3, #32]
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34001256:	2210      	movs	r2, #16
34001258:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
3400125c:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34001260:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001262:	9b01      	ldr	r3, [sp, #4]
  HAL_Init();
34001264:	f001 fa5e 	bl	34002724 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34001268:	4b7f      	ldr	r3, [pc, #508]	@ (34001468 <Hardware_init+0x234>)
3400126a:	695a      	ldr	r2, [r3, #20]
3400126c:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
34001270:	d111      	bne.n	34001296 <Hardware_init+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
34001272:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34001276:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3400127a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3400127e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34001282:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
34001286:	695a      	ldr	r2, [r3, #20]
34001288:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
3400128c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3400128e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34001292:	f3bf 8f6f 	isb	sy
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001296:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
  WRITE_REG(RCC->AHB2ENSR, Periphs);
3400129a:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
  RAMCFG_HandleTypeDef hramcfg = {0};
3400129e:	2600      	movs	r6, #0
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340012a0:	4c70      	ldr	r4, [pc, #448]	@ (34001464 <Hardware_init+0x230>)
  SystemClock_Config();
340012a2:	f7ff ff51 	bl	34001148 <SystemClock_Config>
340012a6:	f8c4 7a60 	str.w	r7, [r4, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
340012aa:	f8d4 3260 	ldr.w	r3, [r4, #608]	@ 0x260
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340012ae:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 3400149c <Hardware_init+0x268>
  tmpreg = READ_REG(RCC->AHB5ENR);
340012b2:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
340012b4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
340012b6:	2001      	movs	r0, #1
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340012b8:	f8c4 7a20 	str.w	r7, [r4, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340012bc:	f8cb 7220 	str.w	r7, [fp, #544]	@ 0x220
340012c0:	f7ff ff1e 	bl	34001100 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
340012c4:	2002      	movs	r0, #2
340012c6:	f7ff ff1b 	bl	34001100 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
340012ca:	2004      	movs	r0, #4
340012cc:	f7ff ff18 	bl	34001100 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
340012d0:	2008      	movs	r0, #8
340012d2:	f7ff ff15 	bl	34001100 <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
340012d6:	f8c4 aa54 	str.w	sl, [r4, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
340012da:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340012de:	a808      	add	r0, sp, #32
340012e0:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
340012e2:	9b02      	ldr	r3, [sp, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
340012e4:	4b61      	ldr	r3, [pc, #388]	@ (3400146c <Hardware_init+0x238>)
  RAMCFG_HandleTypeDef hramcfg = {0};
340012e6:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
340012ea:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340012ec:	f002 ffe2 	bl	340042b4 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
340012f0:	4b5f      	ldr	r3, [pc, #380]	@ (34001470 <Hardware_init+0x23c>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340012f2:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
340012f4:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340012f6:	f002 ffdd 	bl	340042b4 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
340012fa:	4b5e      	ldr	r3, [pc, #376]	@ (34001474 <Hardware_init+0x240>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340012fc:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
340012fe:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001300:	f002 ffd8 	bl	340042b4 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34001304:	4b5c      	ldr	r3, [pc, #368]	@ (34001478 <Hardware_init+0x244>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001306:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34001308:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3400130a:	f002 ffd3 	bl	340042b4 <HAL_RAMCFG_EnableAXISRAM>
  Fuse_Programming();
3400130e:	f7ff fec9 	bl	340010a4 <Fuse_Programming>
  npu_cache_init();
34001312:	f000 fa2b 	bl	3400176c <npu_cache_init>
  npu_cache_enable();
34001316:	f000 fa33 	bl	34001780 <npu_cache_enable>
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3400131a:	f240 1301 	movw	r3, #257	@ 0x101
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3400131e:	f44f 7900 	mov.w	r9, #512	@ 0x200
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34001322:	2503      	movs	r5, #3
34001324:	f04f 0802 	mov.w	r8, #2
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001328:	4669      	mov	r1, sp
3400132a:	4630      	mov	r0, r6
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3400132c:	f8ad 3000 	strh.w	r3, [sp]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001330:	f000 ff1e 	bl	34002170 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
34001334:	4630      	mov	r0, r6
34001336:	f000 fe8f 	bl	34002058 <BSP_XSPI_NOR_EnableMemoryMappedMode>
3400133a:	f8c4 9a58 	str.w	r9, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
3400133e:	f8d4 3258 	ldr.w	r3, [r4, #600]	@ 0x258
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34001342:	a908      	add	r1, sp, #32
34001344:	9304      	str	r3, [sp, #16]
34001346:	2001      	movs	r0, #1
  (void)tmpreg;
34001348:	9b04      	ldr	r3, [sp, #16]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3400134a:	e9cd 8508 	strd	r8, r5, [sp, #32]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3400134e:	f008 ffb1 	bl	3400a2b4 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
34001352:	a908      	add	r1, sp, #32
34001354:	2008      	movs	r0, #8
34001356:	f008 ffad 	bl	3400a2b4 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
3400135a:	a908      	add	r1, sp, #32
3400135c:	2009      	movs	r0, #9
3400135e:	f008 ffa9 	bl	3400a2b4 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
34001362:	a908      	add	r1, sp, #32
34001364:	200a      	movs	r0, #10
34001366:	f008 ffa5 	bl	3400a2b4 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
3400136a:	a908      	add	r1, sp, #32
3400136c:	200b      	movs	r0, #11
3400136e:	f008 ffa1 	bl	3400a2b4 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
34001372:	a908      	add	r1, sp, #32
34001374:	2004      	movs	r0, #4
34001376:	f008 ff9d 	bl	3400a2b4 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400137a:	4629      	mov	r1, r5
3400137c:	483f      	ldr	r0, [pc, #252]	@ (3400147c <Hardware_init+0x248>)
3400137e:	f008 ffef 	bl	3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001382:	4629      	mov	r1, r5
34001384:	483e      	ldr	r0, [pc, #248]	@ (34001480 <Hardware_init+0x24c>)
34001386:	f008 ffeb 	bl	3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400138a:	4629      	mov	r1, r5
3400138c:	483d      	ldr	r0, [pc, #244]	@ (34001484 <Hardware_init+0x250>)
3400138e:	f008 ffe7 	bl	3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001392:	4629      	mov	r1, r5
34001394:	483c      	ldr	r0, [pc, #240]	@ (34001488 <Hardware_init+0x254>)
34001396:	f008 ffe3 	bl	3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400139a:	4629      	mov	r1, r5
3400139c:	483b      	ldr	r0, [pc, #236]	@ (3400148c <Hardware_init+0x258>)
3400139e:	f008 ffdf 	bl	3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340013a2:	4629      	mov	r1, r5
340013a4:	483a      	ldr	r0, [pc, #232]	@ (34001490 <Hardware_init+0x25c>)
340013a6:	f008 ffdb 	bl	3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340013aa:	4629      	mov	r1, r5
340013ac:	4839      	ldr	r0, [pc, #228]	@ (34001494 <Hardware_init+0x260>)
340013ae:	f008 ffd7 	bl	3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340013b2:	4629      	mov	r1, r5
340013b4:	4838      	ldr	r0, [pc, #224]	@ (34001498 <Hardware_init+0x264>)
340013b6:	f008 ffd3 	bl	3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340013ba:	4629      	mov	r1, r5
340013bc:	2004      	movs	r0, #4
340013be:	f008 ffcf 	bl	3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
340013c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340013c6:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
340013ca:	f8d4 2258 	ldr.w	r2, [r4, #600]	@ 0x258
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
340013ce:	2020      	movs	r0, #32
340013d0:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
340013d2:	9a05      	ldr	r2, [sp, #20]
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
340013d4:	2204      	movs	r2, #4
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
340013d6:	f8c4 3a18 	str.w	r3, [r4, #2584]	@ 0xa18
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
340013da:	f8cb 3218 	str.w	r3, [fp, #536]	@ 0x218
340013de:	f7ff fea7 	bl	34001130 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
340013e2:	4650      	mov	r0, sl
340013e4:	f7ff fea4 	bl	34001130 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
340013e8:	4638      	mov	r0, r7
340013ea:	f7ff fea1 	bl	34001130 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
340013ee:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
340013f2:	f7ff fe9d 	bl	34001130 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
340013f6:	4640      	mov	r0, r8
340013f8:	f7ff fe9a 	bl	34001130 <LL_AHB5_GRP1_EnableClockLowPower>
  WRITE_REG(RCC->APB5LPENSR, Periphs);
340013fc:	f8c4 2abc 	str.w	r2, [r4, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34001400:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34001404:	4648      	mov	r0, r9
34001406:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
34001408:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
3400140a:	2340      	movs	r3, #64	@ 0x40
3400140c:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34001410:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  BSP_COM_Init(COM1, &com_config);
34001414:	a908      	add	r1, sp, #32
34001416:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
34001418:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
3400141a:	f7ff fe7d 	bl	34001118 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
3400141e:	2080      	movs	r0, #128	@ 0x80
34001420:	f7ff fe7a 	bl	34001118 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
34001424:	f44f 7080 	mov.w	r0, #256	@ 0x100
34001428:	f7ff fe76 	bl	34001118 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
3400142c:	2001      	movs	r0, #1
3400142e:	f7ff fe73 	bl	34001118 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
34001432:	4640      	mov	r0, r8
34001434:	f7ff fe70 	bl	34001118 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
34001438:	4610      	mov	r0, r2
3400143a:	f7ff fe6d 	bl	34001118 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
3400143e:	2008      	movs	r0, #8
34001440:	f7ff fe6a 	bl	34001118 <LL_MEM_EnableClockLowPower>
  COM_InitTypeDef com_config = {
34001444:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  BSP_COM_Init(COM1, &com_config);
34001448:	4630      	mov	r0, r6
  COM_InitTypeDef com_config = {
3400144a:	e9cd 3608 	strd	r3, r6, [sp, #32]
3400144e:	960a      	str	r6, [sp, #40]	@ 0x28
34001450:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
  BSP_COM_Init(COM1, &com_config);
34001454:	f000 fcec 	bl	34001e30 <BSP_COM_Init>
}
34001458:	b00d      	add	sp, #52	@ 0x34
3400145a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400145e:	bf00      	nop
34001460:	e001e000 	.word	0xe001e000
34001464:	56028000 	.word	0x56028000
34001468:	e000ed00 	.word	0xe000ed00
3400146c:	52023100 	.word	0x52023100
34001470:	52023180 	.word	0x52023180
34001474:	52023200 	.word	0x52023200
34001478:	52023280 	.word	0x52023280
3400147c:	3000000a 	.word	0x3000000a
34001480:	30000005 	.word	0x30000005
34001484:	2000001c 	.word	0x2000001c
34001488:	2000001d 	.word	0x2000001d
3400148c:	30000006 	.word	0x30000006
34001490:	30000007 	.word	0x30000007
34001494:	30000008 	.word	0x30000008
34001498:	10000018 	.word	0x10000018
3400149c:	56029000 	.word	0x56029000

340014a0 <enableTiming_Cyc>:
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
340014a0:	4a06      	ldr	r2, [pc, #24]	@ (340014bc <enableTiming_Cyc+0x1c>)
340014a2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340014a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
340014aa:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
340014ae:	f5a2 425d 	sub.w	r2, r2, #56576	@ 0xdd00
340014b2:	6813      	ldr	r3, [r2, #0]
340014b4:	f043 0301 	orr.w	r3, r3, #1
340014b8:	6013      	str	r3, [r2, #0]
}
340014ba:	4770      	bx	lr
340014bc:	e000ed00 	.word	0xe000ed00

340014c0 <tiledMatVec>:
int tiledMatVec(size_t insize,size_t outsize){
340014c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int8_t inVec[insize];
340014c4:	1dc3      	adds	r3, r0, #7
int tiledMatVec(size_t insize,size_t outsize){
340014c6:	b083      	sub	sp, #12
    int8_t inVec[insize];
340014c8:	f023 0307 	bic.w	r3, r3, #7
int tiledMatVec(size_t insize,size_t outsize){
340014cc:	af02      	add	r7, sp, #8
    int8_t inVec[insize];
340014ce:	ebad 0d03 	sub.w	sp, sp, r3
    int8_t outVec[outsize];
340014d2:	1dcb      	adds	r3, r1, #7
340014d4:	f023 0307 	bic.w	r3, r3, #7
int tiledMatVec(size_t insize,size_t outsize){
340014d8:	4604      	mov	r4, r0
340014da:	460d      	mov	r5, r1
    int8_t inVec[insize];
340014dc:	ae02      	add	r6, sp, #8
    printf("Tiled MatVec Size: %4d\n\r",insize);
340014de:	4601      	mov	r1, r0
    int8_t outVec[outsize];
340014e0:	ebad 0d03 	sub.w	sp, sp, r3
    printf("Tiled MatVec Size: %4d\n\r",insize);
340014e4:	4812      	ldr	r0, [pc, #72]	@ (34001530 <tiledMatVec+0x70>)
340014e6:	f00d f9d5 	bl	3400e894 <iprintf>
    for (int i = 0; i < insize; i++) {
340014ea:	2300      	movs	r3, #0
    int8_t outVec[outsize];
340014ec:	f10d 0908 	add.w	r9, sp, #8
    for (int i = 0; i < insize; i++) {
340014f0:	1c62      	adds	r2, r4, #1
340014f2:	3a01      	subs	r2, #1
340014f4:	d118      	bne.n	34001528 <tiledMatVec+0x68>
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
340014f6:	4629      	mov	r1, r5
340014f8:	4620      	mov	r0, r4
340014fa:	f7ff fbcd 	bl	34000c98 <getIdentityWeights_int8>
	DWT->CYCCNT = 0; // Reset counter
340014fe:	2300      	movs	r3, #0
34001500:	f8df 8034 	ldr.w	r8, [pc, #52]	@ 34001538 <tiledMatVec+0x78>
	npu_tiledmatvec_int8(inVec,insize,outVec,outsize,identityWeights);
34001504:	464a      	mov	r2, r9
	DWT->CYCCNT = 0; // Reset counter
34001506:	f8c8 3004 	str.w	r3, [r8, #4]
	npu_tiledmatvec_int8(inVec,insize,outVec,outsize,identityWeights);
3400150a:	4621      	mov	r1, r4
3400150c:	462b      	mov	r3, r5
3400150e:	9000      	str	r0, [sp, #0]
34001510:	4630      	mov	r0, r6
34001512:	f7ff fc3f 	bl	34000d94 <npu_tiledmatvec_int8>
	uint32_t cycles = DWT->CYCCNT;
34001516:	f8d8 1004 	ldr.w	r1, [r8, #4]
	printf("Cycles Tiled MatVec: %4d\n\r", cycles);
3400151a:	4806      	ldr	r0, [pc, #24]	@ (34001534 <tiledMatVec+0x74>)
3400151c:	f00d f9ba 	bl	3400e894 <iprintf>
}
34001520:	3704      	adds	r7, #4
34001522:	46bd      	mov	sp, r7
34001524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	inVec[i] = (int8_t)((i) % 256);  // Example input: cycles through -128 to 127
34001528:	54f3      	strb	r3, [r6, r3]
    for (int i = 0; i < insize; i++) {
3400152a:	3301      	adds	r3, #1
3400152c:	e7e1      	b.n	340014f2 <tiledMatVec+0x32>
3400152e:	bf00      	nop
34001530:	34010969 	.word	0x34010969
34001534:	34010982 	.word	0x34010982
34001538:	e0001000 	.word	0xe0001000

3400153c <NPU_MatMul_int8>:
int NPU_MatMul_int8(size_t insize,size_t outsize){
3400153c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34001540:	4604      	mov	r4, r0
34001542:	af00      	add	r7, sp, #0
34001544:	460d      	mov	r5, r1
	Hardware_init();
34001546:	f7ff fe75 	bl	34001234 <Hardware_init>
    int8_t inVec[insize];
3400154a:	1de3      	adds	r3, r4, #7
3400154c:	f023 0307 	bic.w	r3, r3, #7
34001550:	ebad 0d03 	sub.w	sp, sp, r3
34001554:	46e8      	mov	r8, sp
    for (int i = 0; i < insize; i++) {
34001556:	2300      	movs	r3, #0
34001558:	1c62      	adds	r2, r4, #1
3400155a:	3a01      	subs	r2, #1
3400155c:	d11e      	bne.n	3400159c <NPU_MatMul_int8+0x60>
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
3400155e:	4629      	mov	r1, r5
34001560:	4620      	mov	r0, r4
34001562:	f7ff fb99 	bl	34000c98 <getIdentityWeights_int8>
	npu_matvec_int8_init(insize,outsize);
34001566:	4629      	mov	r1, r5
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
34001568:	4606      	mov	r6, r0
	npu_matvec_int8_init(insize,outsize);
3400156a:	4620      	mov	r0, r4
3400156c:	f7ff fb1e 	bl	34000bac <npu_matvec_int8_init>
	DWT->CYCCNT = 0; // Reset counter
34001570:	2300      	movs	r3, #0
34001572:	f8df 9034 	ldr.w	r9, [pc, #52]	@ 340015a8 <NPU_MatMul_int8+0x6c>
	outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
34001576:	462a      	mov	r2, r5
34001578:	4621      	mov	r1, r4
	DWT->CYCCNT = 0; // Reset counter
3400157a:	f8c9 3004 	str.w	r3, [r9, #4]
	outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
3400157e:	4640      	mov	r0, r8
34001580:	4633      	mov	r3, r6
34001582:	f7ff fb3f 	bl	34000c04 <npu_matvec_int8_run>
	uint32_t cycles = DWT->CYCCNT;
34001586:	f8d9 1004 	ldr.w	r1, [r9, #4]
	printf("NPU int8 Cycles: %4d\n\r",cycles);
3400158a:	4806      	ldr	r0, [pc, #24]	@ (340015a4 <NPU_MatMul_int8+0x68>)
3400158c:	f00d f982 	bl	3400e894 <iprintf>
	free(identityWeights);
34001590:	4630      	mov	r0, r6
34001592:	f00c fafb 	bl	3400db8c <free>
}
34001596:	46bd      	mov	sp, r7
34001598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    	inVec[i] = (int8_t)((i) % 256);  // Example input: cycles through -128 to 127
3400159c:	f808 3003 	strb.w	r3, [r8, r3]
    for (int i = 0; i < insize; i++) {
340015a0:	3301      	adds	r3, #1
340015a2:	e7da      	b.n	3400155a <NPU_MatMul_int8+0x1e>
340015a4:	3401099d 	.word	0x3401099d
340015a8:	e0001000 	.word	0xe0001000

340015ac <ARM_MatMul_int8>:
int ARM_MatMul_int8(size_t insize,size_t outsize) {
340015ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t inVec[insize];
340015b0:	1dc3      	adds	r3, r0, #7
int ARM_MatMul_int8(size_t insize,size_t outsize) {
340015b2:	b083      	sub	sp, #12
    int8_t inVec[insize];
340015b4:	f023 0307 	bic.w	r3, r3, #7
int ARM_MatMul_int8(size_t insize,size_t outsize) {
340015b8:	4605      	mov	r5, r0
340015ba:	af02      	add	r7, sp, #8
340015bc:	460e      	mov	r6, r1
    int8_t inVec[insize];
340015be:	ebad 0d03 	sub.w	sp, sp, r3
    for (int i = 0; i < insize; i++) {
340015c2:	2300      	movs	r3, #0
    int8_t inVec[insize];
340015c4:	f10d 0808 	add.w	r8, sp, #8
    for (int i = 0; i < insize; i++) {
340015c8:	1c42      	adds	r2, r0, #1
340015ca:	3a01      	subs	r2, #1
340015cc:	d116      	bne.n	340015fc <ARM_MatMul_int8+0x50>
    int32_t outVec[outsize];
340015ce:	00b3      	lsls	r3, r6, #2
340015d0:	3307      	adds	r3, #7
340015d2:	f023 0307 	bic.w	r3, r3, #7
340015d6:	ebad 0d03 	sub.w	sp, sp, r3
    int8_t* identityWeights = getIdentityWeights_int8(insize, outsize);
340015da:	4631      	mov	r1, r6
340015dc:	4628      	mov	r0, r5
340015de:	f7ff fb5b 	bl	34000c98 <getIdentityWeights_int8>
    int32_t outVec[outsize];
340015e2:	f10d 0b08 	add.w	fp, sp, #8
    if (!identityWeights) {
340015e6:	4681      	mov	r9, r0
340015e8:	b960      	cbnz	r0, 34001604 <ARM_MatMul_int8+0x58>
        printf("Memory allocation failed\n");
340015ea:	4818      	ldr	r0, [pc, #96]	@ (3400164c <ARM_MatMul_int8+0xa0>)
340015ec:	f00d f9ba 	bl	3400e964 <puts>
        return -1;
340015f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
340015f4:	3704      	adds	r7, #4
340015f6:	46bd      	mov	sp, r7
340015f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	inVec[i] = (int8_t)(i);  // e.g., 0, 16, 32, ..., 112
340015fc:	f808 3003 	strb.w	r3, [r8, r3]
    for (int i = 0; i < insize; i++) {
34001600:	3301      	adds	r3, #1
34001602:	e7e2      	b.n	340015ca <ARM_MatMul_int8+0x1e>
	DWT->CYCCNT = 0; // Reset counter
34001604:	2400      	movs	r4, #0
34001606:	f8df a058 	ldr.w	sl, [pc, #88]	@ 34001660 <ARM_MatMul_int8+0xb4>
    	simd_matrix_vector_mul_int8(identityWeights,inVec,outVec,outsize,insize);
3400160a:	4633      	mov	r3, r6
3400160c:	465a      	mov	r2, fp
3400160e:	4641      	mov	r1, r8
	DWT->CYCCNT = 0; // Reset counter
34001610:	f8ca 4004 	str.w	r4, [sl, #4]
    	simd_matrix_vector_mul_int8(identityWeights,inVec,outVec,outsize,insize);
34001614:	9500      	str	r5, [sp, #0]
34001616:	f00a fc39 	bl	3400be8c <simd_matrix_vector_mul_int8>
	uint32_t cycles = DWT->CYCCNT;
3400161a:	f8da 5004 	ldr.w	r5, [sl, #4]
		printf("Output MatVec ARM\n\r");
3400161e:	480c      	ldr	r0, [pc, #48]	@ (34001650 <ARM_MatMul_int8+0xa4>)
34001620:	f00d f938 	bl	3400e894 <iprintf>
		printf("Cycles ARM int8: %6d\n\r", cycles);
34001624:	4629      	mov	r1, r5
34001626:	480b      	ldr	r0, [pc, #44]	@ (34001654 <ARM_MatMul_int8+0xa8>)
34001628:	f00d f934 	bl	3400e894 <iprintf>
    printf("Controll Output:\n\r ");
3400162c:	480a      	ldr	r0, [pc, #40]	@ (34001658 <ARM_MatMul_int8+0xac>)
	DWT->CYCCNT = 0; // Reset counter
3400162e:	f8ca 4004 	str.w	r4, [sl, #4]
    printf("Controll Output:\n\r ");
34001632:	f00d f92f 	bl	3400e894 <iprintf>
	uint32_t cycles = DWT->CYCCNT;
34001636:	f8da 1004 	ldr.w	r1, [sl, #4]
		printf("Cycles Controll ARM int8: %6d\n\r", cycles);
3400163a:	4808      	ldr	r0, [pc, #32]	@ (3400165c <ARM_MatMul_int8+0xb0>)
3400163c:	f00d f92a 	bl	3400e894 <iprintf>
	free(identityWeights);
34001640:	4648      	mov	r0, r9
34001642:	f00c faa3 	bl	3400db8c <free>
    return 0;
34001646:	4620      	mov	r0, r4
34001648:	e7d4      	b.n	340015f4 <ARM_MatMul_int8+0x48>
3400164a:	bf00      	nop
3400164c:	340109b4 	.word	0x340109b4
34001650:	340109cd 	.word	0x340109cd
34001654:	340109e1 	.word	0x340109e1
34001658:	340109f8 	.word	0x340109f8
3400165c:	34010a0c 	.word	0x34010a0c
34001660:	e0001000 	.word	0xe0001000

34001664 <preformanceMeasurment_int8>:
int preformanceMeasurment_int8(void){
34001664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(int i  = 0; i< 7;i++){
34001668:	2500      	movs	r5, #0
		insize  = base << i;
3400166a:	f04f 0810 	mov.w	r8, #16
		printf("========");
3400166e:	4f0e      	ldr	r7, [pc, #56]	@ (340016a8 <preformanceMeasurment_int8+0x44>)
		printf("Size: %4d\n\r",insize);
34001670:	4e0e      	ldr	r6, [pc, #56]	@ (340016ac <preformanceMeasurment_int8+0x48>)
		insize  = base << i;
34001672:	fa08 f405 	lsl.w	r4, r8, r5
		printf("========");
34001676:	4638      	mov	r0, r7
34001678:	f00d f90c 	bl	3400e894 <iprintf>
		printf("Size: %4d\n\r",insize);
3400167c:	4621      	mov	r1, r4
3400167e:	4630      	mov	r0, r6
34001680:	f00d f908 	bl	3400e894 <iprintf>
		ARM_MatMul_int8(insize,outsize);
34001684:	4621      	mov	r1, r4
34001686:	4620      	mov	r0, r4
34001688:	f7ff ff90 	bl	340015ac <ARM_MatMul_int8>
		NPU_MatMul_int8(insize,outsize);
3400168c:	4621      	mov	r1, r4
3400168e:	4620      	mov	r0, r4
34001690:	f7ff ff54 	bl	3400153c <NPU_MatMul_int8>
	for(int i  = 0; i< 7;i++){
34001694:	3501      	adds	r5, #1
		tiledMatVec(insize,outsize);
34001696:	4621      	mov	r1, r4
34001698:	4620      	mov	r0, r4
3400169a:	f7ff ff11 	bl	340014c0 <tiledMatVec>
	for(int i  = 0; i< 7;i++){
3400169e:	2d07      	cmp	r5, #7
340016a0:	d1e7      	bne.n	34001672 <preformanceMeasurment_int8+0xe>
}
340016a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340016a6:	bf00      	nop
340016a8:	34010a2c 	.word	0x34010a2c
340016ac:	34010976 	.word	0x34010976

340016b0 <main>:
{
340016b0:	b508      	push	{r3, lr}
	Hardware_init();
340016b2:	f7ff fdbf 	bl	34001234 <Hardware_init>
	enableTiming_Cyc();
340016b6:	f7ff fef3 	bl	340014a0 <enableTiming_Cyc>
	preformanceMeasurment_int8();
340016ba:	f7ff ffd3 	bl	34001664 <preformanceMeasurment_int8>
}
340016be:	2000      	movs	r0, #0
340016c0:	bd08      	pop	{r3, pc}
	...

340016c4 <_write>:
{
340016c4:	b510      	push	{r4, lr}
340016c6:	4614      	mov	r4, r2
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
340016c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340016cc:	b292      	uxth	r2, r2
340016ce:	4802      	ldr	r0, [pc, #8]	@ (340016d8 <_write+0x14>)
340016d0:	f009 f9d2 	bl	3400aa78 <HAL_UART_Transmit>
}
340016d4:	4620      	mov	r0, r4
340016d6:	bd10      	pop	{r4, pc}
340016d8:	34012a58 	.word	0x34012a58

340016dc <IAC_IRQHandler>:
  while (1)
340016dc:	e7fe      	b.n	340016dc <IAC_IRQHandler>
	...

340016e0 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
340016e0:	b507      	push	{r0, r1, r2, lr}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340016e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
340016e6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
340016ea:	f7ff fd09 	bl	34001100 <LL_MEM_EnableClock>
340016ee:	4b08      	ldr	r3, [pc, #32]	@ (34001710 <HAL_CACHEAXI_MspInit+0x30>)
340016f0:	f8c3 2a60 	str.w	r2, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
340016f4:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
340016f8:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
340016fa:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340016fc:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34001704:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
34001708:	b003      	add	sp, #12
3400170a:	f85d fb04 	ldr.w	pc, [sp], #4
3400170e:	bf00      	nop
34001710:	56028000 	.word	0x56028000

34001714 <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
34001714:	be00      	bkpt	0x0000
  while (1)
34001716:	e7fe      	b.n	34001716 <assert_failed+0x2>

34001718 <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
34001718:	b530      	push	{r4, r5, lr}

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
3400171a:	4d13      	ldr	r5, [pc, #76]	@ (34001768 <mcu_cache_invalidate_range+0x50>)
3400171c:	696b      	ldr	r3, [r5, #20]
3400171e:	03db      	lsls	r3, r3, #15
34001720:	d51f      	bpl.n	34001762 <mcu_cache_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34001722:	1a0a      	subs	r2, r1, r0
    if ( dsize > 0 ) {
34001724:	2a00      	cmp	r2, #0
34001726:	dd1c      	ble.n	34001762 <mcu_cache_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34001728:	f000 031f 	and.w	r3, r0, #31
3400172c:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3400172e:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
34001732:	1884      	adds	r4, r0, r2
34001734:	43c2      	mvns	r2, r0
34001736:	1a1b      	subs	r3, r3, r0
34001738:	440b      	add	r3, r1
3400173a:	4422      	add	r2, r4
3400173c:	3b20      	subs	r3, #32
3400173e:	0952      	lsrs	r2, r2, #5
34001740:	3320      	adds	r3, #32
34001742:	f102 0e01 	add.w	lr, r2, #1
34001746:	bfd8      	it	le
34001748:	f04f 0e01 	movle.w	lr, #1
3400174c:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34001750:	f8c5 025c 	str.w	r0, [r5, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34001754:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34001756:	f00f c805 	le	lr, 34001750 <mcu_cache_invalidate_range+0x38>
3400175a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400175e:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
34001762:	2000      	movs	r0, #0
34001764:	bd30      	pop	{r4, r5, pc}
34001766:	bf00      	nop
34001768:	e000ed00 	.word	0xe000ed00

3400176c <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
3400176c:	4802      	ldr	r0, [pc, #8]	@ (34001778 <npu_cache_init+0xc>)
3400176e:	4b03      	ldr	r3, [pc, #12]	@ (3400177c <npu_cache_init+0x10>)
34001770:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
34001772:	f001 b8ff 	b.w	34002974 <HAL_CACHEAXI_Init>
34001776:	bf00      	nop
34001778:	34012a4c 	.word	0x34012a4c
3400177c:	580dfc00 	.word	0x580dfc00

34001780 <npu_cache_enable>:
}

void npu_cache_enable(void)
{
34001780:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
34001782:	4c03      	ldr	r4, [pc, #12]	@ (34001790 <npu_cache_enable+0x10>)
34001784:	4620      	mov	r0, r4
34001786:	f001 f8c1 	bl	3400290c <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
3400178a:	2802      	cmp	r0, #2
3400178c:	d0fa      	beq.n	34001784 <npu_cache_enable+0x4>
}
3400178e:	bd10      	pop	{r4, pc}
34001790:	34012a4c 	.word	0x34012a4c

34001794 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
34001794:	4770      	bx	lr

34001796 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
34001796:	e7fe      	b.n	34001796 <HardFault_Handler>

34001798 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
34001798:	e7fe      	b.n	34001798 <MemManage_Handler>

3400179a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
3400179a:	e7fe      	b.n	3400179a <BusFault_Handler>

3400179c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
3400179c:	e7fe      	b.n	3400179c <UsageFault_Handler>

3400179e <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
3400179e:	e7fe      	b.n	3400179e <SecureFault_Handler>

340017a0 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
340017a0:	4770      	bx	lr

340017a2 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
340017a2:	e7fe      	b.n	340017a2 <DebugMon_Handler>

340017a4 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
  while (1)
340017a4:	e7fe      	b.n	340017a4 <PendSV_Handler>

340017a6 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
340017a6:	f000 bfcf 	b.w	34002748 <HAL_IncTick>

340017aa <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
340017aa:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
340017ac:	f00a fb30 	bl	3400be10 <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
}
340017b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
340017b4:	f001 bae0 	b.w	34002d78 <HAL_DCMIPP_CSI_IRQHandler>

340017b8 <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
340017b8:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
340017ba:	f00a fb29 	bl	3400be10 <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
340017be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
340017c2:	f001 b9a3 	b.w	34002b0c <HAL_DCMIPP_IRQHandler>

340017c6 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
340017c6:	2001      	movs	r0, #1
340017c8:	4770      	bx	lr

340017ca <_kill>:

int _kill(int pid, int sig)
{
340017ca:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
340017cc:	f00d fbfe 	bl	3400efcc <__errno>
340017d0:	2316      	movs	r3, #22
340017d2:	6003      	str	r3, [r0, #0]
  return -1;
}
340017d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340017d8:	bd08      	pop	{r3, pc}

340017da <_exit>:

void _exit (int status)
{
340017da:	b508      	push	{r3, lr}
  errno = EINVAL;
340017dc:	f00d fbf6 	bl	3400efcc <__errno>
340017e0:	2316      	movs	r3, #22
340017e2:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
340017e4:	e7fe      	b.n	340017e4 <_exit+0xa>

340017e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
340017e6:	b570      	push	{r4, r5, r6, lr}
340017e8:	460d      	mov	r5, r1
340017ea:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
340017ec:	460e      	mov	r6, r1
340017ee:	1b73      	subs	r3, r6, r5
340017f0:	429c      	cmp	r4, r3
340017f2:	dc01      	bgt.n	340017f8 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
340017f4:	4620      	mov	r0, r4
340017f6:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
340017f8:	f3af 8000 	nop.w
340017fc:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001800:	e7f5      	b.n	340017ee <_read+0x8>

34001802 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
34001802:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001806:	4770      	bx	lr

34001808 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
34001808:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
3400180c:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
3400180e:	604b      	str	r3, [r1, #4]
}
34001810:	4770      	bx	lr

34001812 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
34001812:	2001      	movs	r0, #1
34001814:	4770      	bx	lr

34001816 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
34001816:	2000      	movs	r0, #0
34001818:	4770      	bx	lr

3400181a <MX25UM51245G_GetFlashInfo>:
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
3400181a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
3400181e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34001822:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
34001826:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400182a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400182e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001832:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
34001836:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
3400183a:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
3400183e:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
34001840:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34001844:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25UM51245G_OK;
};
34001848:	2000      	movs	r0, #0
3400184a:	4770      	bx	lr

3400184c <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
3400184c:	b570      	push	{r4, r5, r6, lr}
3400184e:	460d      	mov	r5, r1
34001850:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef  s_command = {0};
34001852:	2100      	movs	r1, #0
{
34001854:	4606      	mov	r6, r0
34001856:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef  s_command = {0};
34001858:	a805      	add	r0, sp, #20
3400185a:	224c      	movs	r2, #76	@ 0x4c
3400185c:	f00d f962 	bl	3400eb24 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001860:	2214      	movs	r2, #20
34001862:	2100      	movs	r1, #0
34001864:	4668      	mov	r0, sp
34001866:	f00d f95d 	bl	3400eb24 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400186a:	b935      	cbnz	r5, 3400187a <MX25UM51245G_AutoPollingMemReady+0x2e>
  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400186c:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400186e:	429c      	cmp	r4, r3
34001870:	d104      	bne.n	3400187c <MX25UM51245G_AutoPollingMemReady+0x30>
    return MX25UM51245G_ERROR;
34001872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001876:	b018      	add	sp, #96	@ 0x60
34001878:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400187a:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400187c:	1e60      	subs	r0, r4, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400187e:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001880:	4243      	negs	r3, r0
34001882:	4143      	adcs	r3, r0
34001884:	00da      	lsls	r2, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001886:	920a      	str	r2, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001888:	2d00      	cmp	r5, #0
3400188a:	d03a      	beq.n	34001902 <MX25UM51245G_AutoPollingMemReady+0xb6>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400188c:	2210      	movs	r2, #16
3400188e:	f240 51fa 	movw	r1, #1530	@ 0x5fa
34001892:	9209      	str	r2, [sp, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001894:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34001898:	920c      	str	r2, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400189a:	02da      	lsls	r2, r3, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
3400189c:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400189e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340018a2:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340018a4:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340018a6:	bf14      	ite	ne
340018a8:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
340018ac:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
340018b0:	ea4f 63c3 	mov.w	r3, r3, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340018b4:	9107      	str	r1, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340018b6:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
340018b8:	9315      	str	r3, [sp, #84]	@ 0x54
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
340018ba:	d02a      	beq.n	34001912 <MX25UM51245G_AutoPollingMemReady+0xc6>
340018bc:	2c01      	cmp	r4, #1
340018be:	d123      	bne.n	34001908 <MX25UM51245G_AutoPollingMemReady+0xbc>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
340018c0:	2305      	movs	r3, #5
340018c2:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340018c4:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340018c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
340018ca:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
340018cc:	2301      	movs	r3, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340018ce:	2110      	movs	r1, #16
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
340018d0:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340018d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
340018d6:	9214      	str	r2, [sp, #80]	@ 0x50
340018d8:	e9cd 3103 	strd	r3, r1, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340018dc:	f241 3288 	movw	r2, #5000	@ 0x1388
340018e0:	4630      	mov	r0, r6
340018e2:	a905      	add	r1, sp, #20
340018e4:	f009 fcd2 	bl	3400b28c <HAL_XSPI_Command>
340018e8:	2800      	cmp	r0, #0
340018ea:	d1c2      	bne.n	34001872 <MX25UM51245G_AutoPollingMemReady+0x26>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340018ec:	f241 3288 	movw	r2, #5000	@ 0x1388
340018f0:	4669      	mov	r1, sp
340018f2:	4630      	mov	r0, r6
340018f4:	f009 fe7c 	bl	3400b5f0 <HAL_XSPI_AutoPolling>
340018f8:	3800      	subs	r0, #0
340018fa:	bf18      	it	ne
340018fc:	2001      	movne	r0, #1
340018fe:	4240      	negs	r0, r0
34001900:	e7b9      	b.n	34001876 <MX25UM51245G_AutoPollingMemReady+0x2a>
34001902:	2105      	movs	r1, #5
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001904:	462a      	mov	r2, r5
34001906:	e7c7      	b.n	34001898 <MX25UM51245G_AutoPollingMemReady+0x4c>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001908:	2304      	movs	r3, #4
3400190a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400190c:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400190e:	2300      	movs	r3, #0
34001910:	e7db      	b.n	340018ca <MX25UM51245G_AutoPollingMemReady+0x7e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001912:	2c01      	cmp	r4, #1
34001914:	d1fa      	bne.n	3400190c <MX25UM51245G_AutoPollingMemReady+0xc0>
34001916:	e7d5      	b.n	340018c4 <MX25UM51245G_AutoPollingMemReady+0x78>

34001918 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
34001918:	b570      	push	{r4, r5, r6, lr}
3400191a:	460c      	mov	r4, r1
3400191c:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef      s_command = {0};
3400191e:	2100      	movs	r1, #0
{
34001920:	4606      	mov	r6, r0
34001922:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef      s_command = {0};
34001924:	a805      	add	r0, sp, #20
34001926:	224c      	movs	r2, #76	@ 0x4c
34001928:	f00d f8fc 	bl	3400eb24 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400192c:	2210      	movs	r2, #16
3400192e:	2100      	movs	r1, #0
34001930:	a801      	add	r0, sp, #4
34001932:	f00d f8f7 	bl	3400eb24 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
34001936:	2c01      	cmp	r4, #1
34001938:	d144      	bne.n	340019c4 <MX25UM51245G_EnableSTRMemoryMappedMode+0xac>
3400193a:	b91d      	cbnz	r5, 34001944 <MX25UM51245G_EnableSTRMemoryMappedMode+0x2c>
  {
    return MX25UM51245G_ERROR;
3400193c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001940:	b018      	add	sp, #96	@ 0x60
34001942:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001944:	9405      	str	r4, [sp, #20]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001946:	2204      	movs	r2, #4
34001948:	2310      	movs	r3, #16
3400194a:	e9cd 2308 	strd	r2, r3, [sp, #32]
3400194e:	f64e 4213 	movw	r2, #60435	@ 0xec13
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                                 : HAL_XSPI_ADDRESS_32_BITS;
34001956:	2d00      	cmp	r5, #0
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001958:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_32_BITS;
3400195a:	bf14      	ite	ne
3400195c:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
34001960:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001964:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001966:	9207      	str	r2, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001968:	bf0c      	ite	eq
3400196a:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
3400196e:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
34001972:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001974:	bf0c      	ite	eq
34001976:	2308      	moveq	r3, #8
34001978:	2306      	movne	r3, #6
3400197a:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400197c:	4630      	mov	r0, r6
3400197e:	f241 3288 	movw	r2, #5000	@ 0x1388
34001982:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
34001984:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001986:	f009 fc81 	bl	3400b28c <HAL_XSPI_Command>
3400198a:	2800      	cmp	r0, #0
3400198c:	d1d6      	bne.n	3400193c <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
3400198e:	2302      	movs	r3, #2
34001990:	9305      	str	r3, [sp, #20]
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001992:	bb1c      	cbnz	r4, 340019dc <MX25UM51245G_EnableSTRMemoryMappedMode+0xc4>
34001994:	2d00      	cmp	r5, #0
34001996:	bf18      	it	ne
34001998:	2312      	movne	r3, #18
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400199a:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles        = 0U;
3400199c:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400199e:	f241 3288 	movw	r2, #5000	@ 0x1388
340019a2:	4630      	mov	r0, r6
340019a4:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = 0U;
340019a6:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340019a8:	f009 fc70 	bl	3400b28c <HAL_XSPI_Command>
340019ac:	2800      	cmp	r0, #0
340019ae:	d1c5      	bne.n	3400193c <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340019b0:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
340019b2:	a901      	add	r1, sp, #4
340019b4:	4630      	mov	r0, r6
340019b6:	f009 fe97 	bl	3400b6e8 <HAL_XSPI_MemoryMapped>
340019ba:	3800      	subs	r0, #0
340019bc:	bf18      	it	ne
340019be:	2001      	movne	r0, #1
340019c0:	4240      	negs	r0, r0
340019c2:	e7bd      	b.n	34001940 <MX25UM51245G_EnableSTRMemoryMappedMode+0x28>
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340019c4:	2301      	movs	r3, #1
340019c6:	9305      	str	r3, [sp, #20]
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340019c8:	2c00      	cmp	r4, #0
340019ca:	d1bc      	bne.n	34001946 <MX25UM51245G_EnableSTRMemoryMappedMode+0x2e>
                                 : MX25UM51245G_OCTA_READ_CMD;
340019cc:	2d00      	cmp	r5, #0
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340019ce:	9308      	str	r3, [sp, #32]
                                 : MX25UM51245G_OCTA_READ_CMD;
340019d0:	bf14      	ite	ne
340019d2:	220c      	movne	r2, #12
340019d4:	220b      	moveq	r2, #11
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340019d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
340019da:	e7bc      	b.n	34001956 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
340019dc:	f241 23ed 	movw	r3, #4845	@ 0x12ed
340019e0:	e7db      	b.n	3400199a <MX25UM51245G_EnableSTRMemoryMappedMode+0x82>

340019e2 <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
340019e2:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
340019e4:	2510      	movs	r5, #16
{
340019e6:	b099      	sub	sp, #100	@ 0x64
340019e8:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef      s_command = {0};
340019ea:	223c      	movs	r2, #60	@ 0x3c
340019ec:	2100      	movs	r1, #0
340019ee:	a806      	add	r0, sp, #24
340019f0:	f00d f898 	bl	3400eb24 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
340019f4:	462a      	mov	r2, r5
340019f6:	2100      	movs	r1, #0
340019f8:	a801      	add	r0, sp, #4
340019fa:	f00d f893 	bl	3400eb24 <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340019fe:	2301      	movs	r3, #1
34001a00:	9305      	str	r3, [sp, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34001a02:	2304      	movs	r3, #4
34001a04:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
34001a06:	2308      	movs	r3, #8
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
34001a08:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
34001a0c:	f64e 6311 	movw	r3, #60945	@ 0xee11
34001a10:	9307      	str	r3, [sp, #28]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34001a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001a16:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34001a1a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001a1c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001a20:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34001a24:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
34001a28:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34001a2c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
34001a2e:	2306      	movs	r3, #6
34001a30:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
34001a34:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a38:	f241 3288 	movw	r2, #5000	@ 0x1388
34001a3c:	4620      	mov	r0, r4
34001a3e:	a905      	add	r1, sp, #20
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
34001a40:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a42:	f009 fc23 	bl	3400b28c <HAL_XSPI_Command>
34001a46:	b118      	cbz	r0, 34001a50 <MX25UM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25UM51245G_ERROR;
34001a48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001a4c:	b019      	add	sp, #100	@ 0x64
34001a4e:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
34001a50:	2302      	movs	r3, #2
34001a52:	9305      	str	r3, [sp, #20]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001a54:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
34001a58:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001a60:	4620      	mov	r0, r4
34001a62:	a905      	add	r1, sp, #20
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001a64:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a66:	f009 fc11 	bl	3400b28c <HAL_XSPI_Command>
34001a6a:	2800      	cmp	r0, #0
34001a6c:	d1ec      	bne.n	34001a48 <MX25UM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001a6e:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001a70:	a901      	add	r1, sp, #4
34001a72:	4620      	mov	r0, r4
34001a74:	f009 fe38 	bl	3400b6e8 <HAL_XSPI_MemoryMapped>
34001a78:	3800      	subs	r0, #0
34001a7a:	bf18      	it	ne
34001a7c:	2001      	movne	r0, #1
34001a7e:	4240      	negs	r0, r0
34001a80:	e7e4      	b.n	34001a4c <MX25UM51245G_EnableDTRMemoryMappedMode+0x6a>

34001a82 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001a82:	b5f0      	push	{r4, r5, r6, r7, lr}
34001a84:	460c      	mov	r4, r1
34001a86:	b099      	sub	sp, #100	@ 0x64
  XSPI_RegularCmdTypeDef     s_command = {0};
34001a88:	2100      	movs	r1, #0
{
34001a8a:	4606      	mov	r6, r0
34001a8c:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef     s_command = {0};
34001a8e:	a805      	add	r0, sp, #20
34001a90:	224c      	movs	r2, #76	@ 0x4c
34001a92:	f00d f847 	bl	3400eb24 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001a96:	2214      	movs	r2, #20
34001a98:	2100      	movs	r1, #0
34001a9a:	4668      	mov	r0, sp
34001a9c:	f00d f842 	bl	3400eb24 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001aa0:	b934      	cbnz	r4, 34001ab0 <MX25UM51245G_WriteEnable+0x2e>
  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001aa2:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001aa4:	429d      	cmp	r5, r3
34001aa6:	d104      	bne.n	34001ab2 <MX25UM51245G_WriteEnable+0x30>
    return MX25UM51245G_ERROR;
34001aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001aac:	b019      	add	sp, #100	@ 0x64
34001aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001ab0:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001ab2:	f105 3cff 	add.w	ip, r5, #4294967295	@ 0xffffffff
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001ab6:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001ab8:	f1dc 0300 	rsbs	r3, ip, #0
34001abc:	eb43 030c 	adc.w	r3, r3, ip
34001ac0:	00db      	lsls	r3, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001ac2:	930a      	str	r3, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001ac4:	2c00      	cmp	r4, #0
34001ac6:	d045      	beq.n	34001b54 <MX25UM51245G_WriteEnable+0xd2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001ac8:	2310      	movs	r3, #16
34001aca:	9309      	str	r3, [sp, #36]	@ 0x24
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001acc:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
34001ad4:	4630      	mov	r0, r6
34001ad6:	a905      	add	r1, sp, #20
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001ad8:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001ada:	f009 fbd7 	bl	3400b28c <HAL_XSPI_Command>
34001ade:	4603      	mov	r3, r0
34001ae0:	2800      	cmp	r0, #0
34001ae2:	d1e1      	bne.n	34001aa8 <MX25UM51245G_WriteEnable+0x26>
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001ae4:	2c00      	cmp	r4, #0
34001ae6:	d037      	beq.n	34001b58 <MX25UM51245G_WriteEnable+0xd6>
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001ae8:	2d01      	cmp	r5, #1
34001aea:	f240 5cfa 	movw	ip, #1530	@ 0x5fa
34001aee:	d03d      	beq.n	34001b6c <MX25UM51245G_WriteEnable+0xea>
34001af0:	4607      	mov	r7, r0
34001af2:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
34001af6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001afa:	2004      	movs	r0, #4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001afc:	2101      	movs	r1, #1
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001afe:	461a      	mov	r2, r3
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001b00:	940c      	str	r4, [sp, #48]	@ 0x30
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
34001b02:	f44f 5440 	mov.w	r4, #12288	@ 0x3000
34001b06:	940d      	str	r4, [sp, #52]	@ 0x34
  s_command.Address        = 0U;
34001b08:	2400      	movs	r4, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
34001b0a:	e9cd 3015 	strd	r3, r0, [sp, #84]	@ 0x54
34001b0e:	9114      	str	r1, [sp, #80]	@ 0x50
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001b10:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001b12:	4630      	mov	r0, r6
34001b14:	f241 3288 	movw	r2, #5000	@ 0x1388
34001b18:	a905      	add	r1, sp, #20
34001b1a:	f8cd c01c 	str.w	ip, [sp, #28]
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001b1e:	970e      	str	r7, [sp, #56]	@ 0x38
  s_command.Address        = 0U;
34001b20:	940b      	str	r4, [sp, #44]	@ 0x2c
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001b22:	9513      	str	r5, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001b24:	f009 fbb2 	bl	3400b28c <HAL_XSPI_Command>
34001b28:	2800      	cmp	r0, #0
34001b2a:	d1bd      	bne.n	34001aa8 <MX25UM51245G_WriteEnable+0x26>
  s_config.MatchValue      = 2U;
34001b2c:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001b2e:	2210      	movs	r2, #16
  s_config.MatchMask       = 2U;
34001b30:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001b34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
34001b38:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001b3a:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001b3e:	4669      	mov	r1, sp
34001b40:	f241 3288 	movw	r2, #5000	@ 0x1388
34001b44:	4630      	mov	r0, r6
34001b46:	f009 fd53 	bl	3400b5f0 <HAL_XSPI_AutoPolling>
34001b4a:	1b00      	subs	r0, r0, r4
34001b4c:	bf18      	it	ne
34001b4e:	2001      	movne	r0, #1
34001b50:	4240      	negs	r0, r0
34001b52:	e7ab      	b.n	34001aac <MX25UM51245G_WriteEnable+0x2a>
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001b54:	2306      	movs	r3, #6
34001b56:	e7bb      	b.n	34001ad0 <MX25UM51245G_WriteEnable+0x4e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001b58:	2d01      	cmp	r5, #1
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
34001b5a:	f04f 0c05 	mov.w	ip, #5
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001b5e:	d012      	beq.n	34001b86 <MX25UM51245G_WriteEnable+0x104>
34001b60:	4623      	mov	r3, r4
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001b62:	4627      	mov	r7, r4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001b64:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
34001b68:	4620      	mov	r0, r4
34001b6a:	e7c7      	b.n	34001afc <MX25UM51245G_WriteEnable+0x7a>
34001b6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001b70:	f44f 6700 	mov.w	r7, #2048	@ 0x800
34001b74:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
34001b78:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001b7c:	2005      	movs	r0, #5
34001b7e:	2102      	movs	r1, #2
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001b80:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34001b84:	e7bc      	b.n	34001b00 <MX25UM51245G_WriteEnable+0x7e>
34001b86:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001b8a:	f44f 6700 	mov.w	r7, #2048	@ 0x800
34001b8e:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
34001b92:	4620      	mov	r0, r4
34001b94:	e7f3      	b.n	34001b7e <MX25UM51245G_WriteEnable+0xfc>

34001b96 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
34001b96:	b5f0      	push	{r4, r5, r6, r7, lr}
34001b98:	460d      	mov	r5, r1
34001b9a:	b095      	sub	sp, #84	@ 0x54
34001b9c:	4606      	mov	r6, r0
34001b9e:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001ba0:	2100      	movs	r1, #0
34001ba2:	224c      	movs	r2, #76	@ 0x4c
34001ba4:	a801      	add	r0, sp, #4
{
34001ba6:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
34001ba8:	f00c ffbc 	bl	3400eb24 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001bac:	b935      	cbnz	r5, 34001bbc <MX25UM51245G_WriteCfg2Register+0x26>
  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001bae:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001bb0:	429c      	cmp	r4, r3
34001bb2:	d104      	bne.n	34001bbe <MX25UM51245G_WriteCfg2Register+0x28>
    return MX25UM51245G_ERROR;
34001bb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001bb8:	b015      	add	sp, #84	@ 0x54
34001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001bbc:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001bbe:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001bc0:	1e63      	subs	r3, r4, #1
34001bc2:	425a      	negs	r2, r3
34001bc4:	415a      	adcs	r2, r3
34001bc6:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001bc8:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001bca:	2d00      	cmp	r5, #0
34001bcc:	d030      	beq.n	34001c30 <MX25UM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001bce:	2310      	movs	r3, #16
34001bd0:	f247 218d 	movw	r1, #29325	@ 0x728d
34001bd4:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001bda:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001bdc:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001bde:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001be0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001be4:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001be6:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001be8:	bf14      	ite	ne
34001bea:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
34001bee:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001bf2:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001bf6:	9103      	str	r1, [sp, #12]
  s_command.Address            = WriteAddr;
34001bf8:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001bfa:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001bfc:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34001bfe:	d01b      	beq.n	34001c38 <MX25UM51245G_WriteCfg2Register+0xa2>
34001c00:	2c01      	cmp	r4, #1
34001c02:	bf0c      	ite	eq
34001c04:	2302      	moveq	r3, #2
34001c06:	2301      	movne	r3, #1
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001c08:	f241 3288 	movw	r2, #5000	@ 0x1388
34001c0c:	4630      	mov	r0, r6
34001c0e:	a901      	add	r1, sp, #4
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34001c10:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001c12:	f009 fb3b 	bl	3400b28c <HAL_XSPI_Command>
34001c16:	2800      	cmp	r0, #0
34001c18:	d1cc      	bne.n	34001bb4 <MX25UM51245G_WriteCfg2Register+0x1e>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
34001c1e:	4630      	mov	r0, r6
34001c20:	a91a      	add	r1, sp, #104	@ 0x68
34001c22:	f009 fc4b 	bl	3400b4bc <HAL_XSPI_Transmit>
34001c26:	3800      	subs	r0, #0
34001c28:	bf18      	it	ne
34001c2a:	2001      	movne	r0, #1
34001c2c:	4240      	negs	r0, r0
34001c2e:	e7c3      	b.n	34001bb8 <MX25UM51245G_WriteCfg2Register+0x22>
34001c30:	2172      	movs	r1, #114	@ 0x72
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001c32:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001c36:	e7d0      	b.n	34001bda <MX25UM51245G_WriteCfg2Register+0x44>
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34001c38:	2301      	movs	r3, #1
34001c3a:	e7e5      	b.n	34001c08 <MX25UM51245G_WriteCfg2Register+0x72>

34001c3c <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
34001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
34001c3e:	460d      	mov	r5, r1
34001c40:	b095      	sub	sp, #84	@ 0x54
34001c42:	4606      	mov	r6, r0
34001c44:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001c46:	2100      	movs	r1, #0
34001c48:	224c      	movs	r2, #76	@ 0x4c
34001c4a:	a801      	add	r0, sp, #4
{
34001c4c:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
34001c4e:	f00c ff69 	bl	3400eb24 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001c52:	b935      	cbnz	r5, 34001c62 <MX25UM51245G_ReadCfg2Register+0x26>
  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001c54:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001c56:	429c      	cmp	r4, r3
34001c58:	d104      	bne.n	34001c64 <MX25UM51245G_ReadCfg2Register+0x28>
    return MX25UM51245G_ERROR;
34001c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001c5e:	b015      	add	sp, #84	@ 0x54
34001c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001c62:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001c64:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001c66:	1e63      	subs	r3, r4, #1
34001c68:	425a      	negs	r2, r3
34001c6a:	415a      	adcs	r2, r3
34001c6c:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001c6e:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001c70:	2d00      	cmp	r5, #0
34001c72:	d034      	beq.n	34001cde <MX25UM51245G_ReadCfg2Register+0xa2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001c74:	2310      	movs	r3, #16
34001c76:	f247 118e 	movw	r1, #29070	@ 0x718e
34001c7a:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001c7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001c80:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001c82:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001c84:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001c86:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001c8a:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001c8c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001c8e:	bf14      	ite	ne
34001c90:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
34001c94:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001c98:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001c9c:	9103      	str	r1, [sp, #12]
  s_command.Address            = ReadAddr;
34001c9e:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001ca0:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001ca2:	9211      	str	r2, [sp, #68]	@ 0x44
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001ca4:	d024      	beq.n	34001cf0 <MX25UM51245G_ReadCfg2Register+0xb4>
34001ca6:	2c01      	cmp	r4, #1
34001ca8:	d11d      	bne.n	34001ce6 <MX25UM51245G_ReadCfg2Register+0xaa>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001caa:	2305      	movs	r3, #5
34001cac:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001cae:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001cb0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001cb4:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001cb6:	4630      	mov	r0, r6
34001cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
34001cbc:	a901      	add	r1, sp, #4
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001cbe:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001cc0:	f009 fae4 	bl	3400b28c <HAL_XSPI_Command>
34001cc4:	2800      	cmp	r0, #0
34001cc6:	d1c8      	bne.n	34001c5a <MX25UM51245G_ReadCfg2Register+0x1e>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
34001ccc:	4630      	mov	r0, r6
34001cce:	991a      	ldr	r1, [sp, #104]	@ 0x68
34001cd0:	f009 fc38 	bl	3400b544 <HAL_XSPI_Receive>
34001cd4:	3800      	subs	r0, #0
34001cd6:	bf18      	it	ne
34001cd8:	2001      	movne	r0, #1
34001cda:	4240      	negs	r0, r0
34001cdc:	e7bf      	b.n	34001c5e <MX25UM51245G_ReadCfg2Register+0x22>
34001cde:	2171      	movs	r1, #113	@ 0x71
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001ce4:	e7cc      	b.n	34001c80 <MX25UM51245G_ReadCfg2Register+0x44>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001ce6:	2304      	movs	r3, #4
34001ce8:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001cea:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001cec:	2300      	movs	r3, #0
34001cee:	e7e1      	b.n	34001cb4 <MX25UM51245G_ReadCfg2Register+0x78>
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001cf0:	2c01      	cmp	r4, #1
34001cf2:	d1fa      	bne.n	34001cea <MX25UM51245G_ReadCfg2Register+0xae>
34001cf4:	e7db      	b.n	34001cae <MX25UM51245G_ReadCfg2Register+0x72>

34001cf6 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001cf6:	b570      	push	{r4, r5, r6, lr}
34001cf8:	460d      	mov	r5, r1
34001cfa:	b094      	sub	sp, #80	@ 0x50
34001cfc:	4606      	mov	r6, r0
34001cfe:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001d00:	2100      	movs	r1, #0
34001d02:	224c      	movs	r2, #76	@ 0x4c
34001d04:	a801      	add	r0, sp, #4
34001d06:	f00c ff0d 	bl	3400eb24 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001d0a:	b9d5      	cbnz	r5, 34001d42 <MX25UM51245G_ResetEnable+0x4c>
34001d0c:	2c01      	cmp	r4, #1
34001d0e:	d01c      	beq.n	34001d4a <MX25UM51245G_ResetEnable+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001d10:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001d12:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001d14:	1e63      	subs	r3, r4, #1
34001d16:	425c      	negs	r4, r3
34001d18:	415c      	adcs	r4, r3
34001d1a:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001d1c:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001d1e:	b195      	cbz	r5, 34001d46 <MX25UM51245G_ResetEnable+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001d20:	2310      	movs	r3, #16
34001d22:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
34001d24:	f246 6399 	movw	r3, #26265	@ 0x6699
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001d28:	f241 3288 	movw	r2, #5000	@ 0x1388
34001d2c:	4630      	mov	r0, r6
34001d2e:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001d30:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001d32:	f009 faab 	bl	3400b28c <HAL_XSPI_Command>
34001d36:	3800      	subs	r0, #0
34001d38:	bf18      	it	ne
34001d3a:	2001      	movne	r0, #1
34001d3c:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001d3e:	b014      	add	sp, #80	@ 0x50
34001d40:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001d42:	2304      	movs	r3, #4
34001d44:	e7e5      	b.n	34001d12 <MX25UM51245G_ResetEnable+0x1c>
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
34001d46:	2366      	movs	r3, #102	@ 0x66
34001d48:	e7ee      	b.n	34001d28 <MX25UM51245G_ResetEnable+0x32>
    return MX25UM51245G_ERROR;
34001d4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001d4e:	e7f6      	b.n	34001d3e <MX25UM51245G_ResetEnable+0x48>

34001d50 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001d50:	b570      	push	{r4, r5, r6, lr}
34001d52:	460d      	mov	r5, r1
34001d54:	b094      	sub	sp, #80	@ 0x50
34001d56:	4606      	mov	r6, r0
34001d58:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001d5a:	2100      	movs	r1, #0
34001d5c:	224c      	movs	r2, #76	@ 0x4c
34001d5e:	a801      	add	r0, sp, #4
34001d60:	f00c fee0 	bl	3400eb24 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001d64:	b9d5      	cbnz	r5, 34001d9c <MX25UM51245G_ResetMemory+0x4c>
34001d66:	2c01      	cmp	r4, #1
34001d68:	d01c      	beq.n	34001da4 <MX25UM51245G_ResetMemory+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001d6a:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001d6c:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001d6e:	1e63      	subs	r3, r4, #1
34001d70:	425c      	negs	r4, r3
34001d72:	415c      	adcs	r4, r3
34001d74:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001d76:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001d78:	b195      	cbz	r5, 34001da0 <MX25UM51245G_ResetMemory+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001d7a:	2310      	movs	r3, #16
34001d7c:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34001d7e:	f649 1366 	movw	r3, #39270	@ 0x9966
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001d82:	f241 3288 	movw	r2, #5000	@ 0x1388
34001d86:	4630      	mov	r0, r6
34001d88:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001d8a:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001d8c:	f009 fa7e 	bl	3400b28c <HAL_XSPI_Command>
34001d90:	3800      	subs	r0, #0
34001d92:	bf18      	it	ne
34001d94:	2001      	movne	r0, #1
34001d96:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001d98:	b014      	add	sp, #80	@ 0x50
34001d9a:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001d9c:	2304      	movs	r3, #4
34001d9e:	e7e5      	b.n	34001d6c <MX25UM51245G_ResetMemory+0x1c>
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34001da0:	2399      	movs	r3, #153	@ 0x99
34001da2:	e7ee      	b.n	34001d82 <MX25UM51245G_ResetMemory+0x32>
    return MX25UM51245G_ERROR;
34001da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001da8:	e7f6      	b.n	34001d98 <MX25UM51245G_ResetMemory+0x48>
	...

34001dac <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001dac:	4b04      	ldr	r3, [pc, #16]	@ (34001dc0 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001dae:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001db0:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001db4:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001db8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001dba:	9b01      	ldr	r3, [sp, #4]
}
34001dbc:	b002      	add	sp, #8
34001dbe:	4770      	bx	lr
34001dc0:	56028000 	.word	0x56028000

34001dc4 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34001dc4:	b570      	push	{r4, r5, r6, lr}
34001dc6:	4604      	mov	r4, r0
34001dc8:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
34001dca:	2002      	movs	r0, #2
34001dcc:	f7ff ffee 	bl	34001dac <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001dd0:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001dd2:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001dd6:	9303      	str	r3, [sp, #12]
34001dd8:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001dda:	2301      	movs	r3, #1
34001ddc:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001de0:	2303      	movs	r3, #3
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001de2:	4d06      	ldr	r5, [pc, #24]	@ (34001dfc <BSP_SMPS_Init+0x38>)
34001de4:	a901      	add	r1, sp, #4
34001de6:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001de8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001dea:	f001 fb9f 	bl	3400352c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
34001dee:	4622      	mov	r2, r4
34001df0:	4631      	mov	r1, r6
34001df2:	4628      	mov	r0, r5
34001df4:	f001 fdb2 	bl	3400395c <HAL_GPIO_WritePin>
}
34001df8:	b006      	add	sp, #24
34001dfa:	bd70      	pop	{r4, r5, r6, pc}
34001dfc:	56020400 	.word	0x56020400

34001e00 <MX_USART1_Init>:
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
34001e00:	4a0a      	ldr	r2, [pc, #40]	@ (34001e2c <MX_USART1_Init+0x2c>)
34001e02:	6812      	ldr	r2, [r2, #0]
34001e04:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
34001e06:	680a      	ldr	r2, [r1, #0]
34001e08:	6042      	str	r2, [r0, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
34001e0a:	220c      	movs	r2, #12
34001e0c:	6142      	str	r2, [r0, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
34001e0e:	894a      	ldrh	r2, [r1, #10]
34001e10:	6102      	str	r2, [r0, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
34001e12:	684a      	ldr	r2, [r1, #4]
34001e14:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
34001e16:	890a      	ldrh	r2, [r1, #8]
34001e18:	60c2      	str	r2, [r0, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
34001e1a:	898a      	ldrh	r2, [r1, #12]
34001e1c:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
34001e1e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34001e22:	61c2      	str	r2, [r0, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
34001e24:	2200      	movs	r2, #0
34001e26:	6242      	str	r2, [r0, #36]	@ 0x24
  return HAL_UART_Init(huart);
34001e28:	f008 bed8 	b.w	3400abdc <HAL_UART_Init>
34001e2c:	34012814 	.word	0x34012814

34001e30 <BSP_COM_Init>:
{
34001e30:	b570      	push	{r4, r5, r6, lr}
34001e32:	4604      	mov	r4, r0
  if (COM_Init == NULL)
34001e34:	460d      	mov	r5, r1
{
34001e36:	b086      	sub	sp, #24
  if (COM_Init == NULL)
34001e38:	2900      	cmp	r1, #0
34001e3a:	d034      	beq.n	34001ea6 <BSP_COM_Init+0x76>
    hcom_uart[COM].Instance = COM_UART[COM];
34001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (34001eb4 <BSP_COM_Init+0x84>)
34001e3e:	491e      	ldr	r1, [pc, #120]	@ (34001eb8 <BSP_COM_Init+0x88>)
34001e40:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
34001e44:	2394      	movs	r3, #148	@ 0x94
34001e46:	4343      	muls	r3, r0
34001e48:	50ca      	str	r2, [r1, r3]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
34001e4a:	4b1c      	ldr	r3, [pc, #112]	@ (34001ebc <BSP_COM_Init+0x8c>)
34001e4c:	429a      	cmp	r2, r3
34001e4e:	d121      	bne.n	34001e94 <BSP_COM_Init+0x64>
  WRITE_REG(RCC->APB2ENSR, Periphs);
34001e50:	2210      	movs	r2, #16
  {
    COM = COM1;
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
34001e52:	2010      	movs	r0, #16
34001e54:	f7ff ffaa 	bl	34001dac <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
34001e58:	2008      	movs	r0, #8
34001e5a:	f7ff ffa7 	bl	34001dac <LL_AHB4_GRP1_EnableClock>
34001e5e:	4b18      	ldr	r3, [pc, #96]	@ (34001ec0 <BSP_COM_Init+0x90>)
  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001e60:	2607      	movs	r6, #7
34001e62:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
34001e66:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
34001e6a:	2220      	movs	r2, #32
34001e6c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001e6e:	9b00      	ldr	r3, [sp, #0]
34001e70:	2302      	movs	r3, #2
34001e72:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
34001e76:	9304      	str	r3, [sp, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;
34001e78:	2301      	movs	r3, #1
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34001e7a:	4812      	ldr	r0, [pc, #72]	@ (34001ec4 <BSP_COM_Init+0x94>)
34001e7c:	a901      	add	r1, sp, #4
  GPIO_Init.Pull      = GPIO_PULLUP;
34001e7e:	9303      	str	r3, [sp, #12]
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001e80:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34001e82:	f001 fb53 	bl	3400352c <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34001e86:	2340      	movs	r3, #64	@ 0x40
  GPIO_Init.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34001e88:	480f      	ldr	r0, [pc, #60]	@ (34001ec8 <BSP_COM_Init+0x98>)
34001e8a:	a901      	add	r1, sp, #4
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34001e8c:	9301      	str	r3, [sp, #4]
  GPIO_Init.Alternate = COM_RX_AF[COM];
34001e8e:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34001e90:	f001 fb4c 	bl	3400352c <HAL_GPIO_Init>
      if (COM == COM1)
34001e94:	b924      	cbnz	r4, 34001ea0 <BSP_COM_Init+0x70>
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
34001e96:	4629      	mov	r1, r5
34001e98:	4807      	ldr	r0, [pc, #28]	@ (34001eb8 <BSP_COM_Init+0x88>)
34001e9a:	f7ff ffb1 	bl	34001e00 <MX_USART1_Init>
34001e9e:	b928      	cbnz	r0, 34001eac <BSP_COM_Init+0x7c>
  int32_t status = BSP_ERROR_NONE;
34001ea0:	2000      	movs	r0, #0
}
34001ea2:	b006      	add	sp, #24
34001ea4:	bd70      	pop	{r4, r5, r6, pc}
    status = BSP_ERROR_WRONG_PARAM;
34001ea6:	f06f 0001 	mvn.w	r0, #1
34001eaa:	e7fa      	b.n	34001ea2 <BSP_COM_Init+0x72>
          status = BSP_ERROR_PERIPH_FAILURE;
34001eac:	f06f 0003 	mvn.w	r0, #3
  return status;
34001eb0:	e7f7      	b.n	34001ea2 <BSP_COM_Init+0x72>
34001eb2:	bf00      	nop
34001eb4:	34012814 	.word	0x34012814
34001eb8:	34012a58 	.word	0x34012a58
34001ebc:	52001000 	.word	0x52001000
34001ec0:	56028000 	.word	0x56028000
34001ec4:	56021000 	.word	0x56021000
34001ec8:	56020c00 	.word	0x56020c00

34001ecc <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001ecc:	4b04      	ldr	r3, [pc, #16]	@ (34001ee0 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001ece:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001ed0:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001ed4:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001ed8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001eda:	9b01      	ldr	r3, [sp, #4]
}
34001edc:	b002      	add	sp, #8
34001ede:	4770      	bx	lr
34001ee0:	56028000 	.word	0x56028000

34001ee4 <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001ee4:	b530      	push	{r4, r5, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001ee6:	4c20      	ldr	r4, [pc, #128]	@ (34001f68 <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001ee8:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001eea:	78a2      	ldrb	r2, [r4, #2]
34001eec:	7861      	ldrb	r1, [r4, #1]
34001eee:	481f      	ldr	r0, [pc, #124]	@ (34001f6c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001ef0:	f7ff fdc7 	bl	34001a82 <MX25UM51245G_WriteEnable>
34001ef4:	b118      	cbz	r0, 34001efe <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001ef6:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
34001efa:	b005      	add	sp, #20
34001efc:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001efe:	9000      	str	r0, [sp, #0]
34001f00:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001f04:	78a2      	ldrb	r2, [r4, #2]
34001f06:	7861      	ldrb	r1, [r4, #1]
34001f08:	4818      	ldr	r0, [pc, #96]	@ (34001f6c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001f0a:	f7ff fe44 	bl	34001b96 <MX25UM51245G_WriteCfg2Register>
34001f0e:	2800      	cmp	r0, #0
34001f10:	d1f1      	bne.n	34001ef6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001f12:	78a2      	ldrb	r2, [r4, #2]
34001f14:	7861      	ldrb	r1, [r4, #1]
34001f16:	4815      	ldr	r0, [pc, #84]	@ (34001f6c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001f18:	f7ff fdb3 	bl	34001a82 <MX25UM51245G_WriteEnable>
34001f1c:	4603      	mov	r3, r0
34001f1e:	2800      	cmp	r0, #0
34001f20:	d1e9      	bne.n	34001ef6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001f22:	2501      	movs	r5, #1
34001f24:	9500      	str	r5, [sp, #0]
34001f26:	78a2      	ldrb	r2, [r4, #2]
34001f28:	7861      	ldrb	r1, [r4, #1]
34001f2a:	4810      	ldr	r0, [pc, #64]	@ (34001f6c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001f2c:	f7ff fe33 	bl	34001b96 <MX25UM51245G_WriteCfg2Register>
34001f30:	4604      	mov	r4, r0
34001f32:	2800      	cmp	r0, #0
34001f34:	d1df      	bne.n	34001ef6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001f36:	2028      	movs	r0, #40	@ 0x28
34001f38:	f000 fc18 	bl	3400276c <HAL_Delay>
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001f3c:	4622      	mov	r2, r4
34001f3e:	4629      	mov	r1, r5
34001f40:	480a      	ldr	r0, [pc, #40]	@ (34001f6c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001f42:	f7ff fc83 	bl	3400184c <MX25UM51245G_AutoPollingMemReady>
34001f46:	4603      	mov	r3, r0
34001f48:	2800      	cmp	r0, #0
34001f4a:	d1d4      	bne.n	34001ef6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001f4c:	aa03      	add	r2, sp, #12
34001f4e:	9200      	str	r2, [sp, #0]
34001f50:	4629      	mov	r1, r5
34001f52:	4602      	mov	r2, r0
34001f54:	4805      	ldr	r0, [pc, #20]	@ (34001f6c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001f56:	f7ff fe71 	bl	34001c3c <MX25UM51245G_ReadCfg2Register>
34001f5a:	2800      	cmp	r0, #0
34001f5c:	d1cb      	bne.n	34001ef6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
34001f5e:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001f62:	42ab      	cmp	r3, r5
34001f64:	d0c9      	beq.n	34001efa <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
34001f66:	e7c6      	b.n	34001ef6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
34001f68:	34012b80 	.word	0x34012b80
34001f6c:	34012b84 	.word	0x34012b84

34001f70 <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001f70:	b530      	push	{r4, r5, lr}
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001f72:	4d27      	ldr	r5, [pc, #156]	@ (34002010 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
34001f74:	4c27      	ldr	r4, [pc, #156]	@ (34002014 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001f76:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001f78:	4620      	mov	r0, r4
34001f7a:	78aa      	ldrb	r2, [r5, #2]
34001f7c:	7869      	ldrb	r1, [r5, #1]
34001f7e:	f7ff fd80 	bl	34001a82 <MX25UM51245G_WriteEnable>
34001f82:	b118      	cbz	r0, 34001f8c <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001f84:	f06f 0004 	mvn.w	r0, #4
}
34001f88:	b005      	add	sp, #20
34001f8a:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001f8c:	9000      	str	r0, [sp, #0]
34001f8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001f92:	4620      	mov	r0, r4
34001f94:	78aa      	ldrb	r2, [r5, #2]
34001f96:	7869      	ldrb	r1, [r5, #1]
34001f98:	f7ff fdfd 	bl	34001b96 <MX25UM51245G_WriteCfg2Register>
34001f9c:	2800      	cmp	r0, #0
34001f9e:	d1f1      	bne.n	34001f84 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001fa0:	4620      	mov	r0, r4
34001fa2:	78aa      	ldrb	r2, [r5, #2]
34001fa4:	7869      	ldrb	r1, [r5, #1]
34001fa6:	f7ff fd6c 	bl	34001a82 <MX25UM51245G_WriteEnable>
34001faa:	4603      	mov	r3, r0
34001fac:	2800      	cmp	r0, #0
34001fae:	d1e9      	bne.n	34001f84 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001fb0:	2202      	movs	r2, #2
34001fb2:	9200      	str	r2, [sp, #0]
34001fb4:	4620      	mov	r0, r4
34001fb6:	78aa      	ldrb	r2, [r5, #2]
34001fb8:	7869      	ldrb	r1, [r5, #1]
34001fba:	f7ff fdec 	bl	34001b96 <MX25UM51245G_WriteCfg2Register>
34001fbe:	2800      	cmp	r0, #0
34001fc0:	d1e0      	bne.n	34001f84 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001fc2:	2028      	movs	r0, #40	@ 0x28
34001fc4:	f000 fbd2 	bl	3400276c <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34001fc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001fcc:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001fce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001fd2:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001fd6:	f009 f81b 	bl	3400b010 <HAL_XSPI_Init>
34001fda:	b9a8      	cbnz	r0, 34002008 <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001fdc:	2201      	movs	r2, #1
34001fde:	4620      	mov	r0, r4
34001fe0:	4611      	mov	r1, r2
34001fe2:	f7ff fc33 	bl	3400184c <MX25UM51245G_AutoPollingMemReady>
34001fe6:	4603      	mov	r3, r0
34001fe8:	2800      	cmp	r0, #0
34001fea:	d1cb      	bne.n	34001f84 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34001fec:	aa03      	add	r2, sp, #12
34001fee:	9200      	str	r2, [sp, #0]
34001ff0:	2201      	movs	r2, #1
34001ff2:	4620      	mov	r0, r4
34001ff4:	4611      	mov	r1, r2
34001ff6:	f7ff fe21 	bl	34001c3c <MX25UM51245G_ReadCfg2Register>
34001ffa:	2800      	cmp	r0, #0
34001ffc:	d1c2      	bne.n	34001f84 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
34001ffe:	f89d 300c 	ldrb.w	r3, [sp, #12]
34002002:	2b02      	cmp	r3, #2
34002004:	d0c0      	beq.n	34001f88 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34002006:	e7bd      	b.n	34001f84 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
34002008:	f06f 0003 	mvn.w	r0, #3
  return ret;
3400200c:	e7bc      	b.n	34001f88 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
3400200e:	bf00      	nop
34002010:	34012b80 	.word	0x34012b80
34002014:	34012b84 	.word	0x34012b84

34002018 <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 4;
34002018:	2304      	movs	r3, #4
3400201a:	4a0e      	ldr	r2, [pc, #56]	@ (34002054 <MX_XSPI_NOR_Init+0x3c>)
3400201c:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34002020:	680a      	ldr	r2, [r1, #0]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34002022:	2300      	movs	r3, #0
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34002024:	6102      	str	r2, [r0, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
34002026:	2202      	movs	r2, #2
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34002028:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
3400202c:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
3400202e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34002032:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34002034:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34002036:	6083      	str	r3, [r0, #8]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34002038:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
3400203a:	68ca      	ldr	r2, [r1, #12]
  hxspi->Init.ChipSelectBoundary      = 0;
3400203c:	6303      	str	r3, [r0, #48]	@ 0x30
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
3400203e:	2a01      	cmp	r2, #1
34002040:	bf12      	itee	ne
34002042:	461a      	movne	r2, r3
34002044:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
34002048:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400204c:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400204e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
34002050:	f008 bfde 	b.w	3400b010 <HAL_XSPI_Init>
34002054:	5802a000 	.word	0x5802a000

34002058 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
{
34002058:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400205a:	b998      	cbnz	r0, 34002084 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400205c:	4c0b      	ldr	r4, [pc, #44]	@ (3400208c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>)
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400205e:	78a3      	ldrb	r3, [r4, #2]
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002060:	7861      	ldrb	r1, [r4, #1]
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34002062:	b95b      	cbnz	r3, 3400207c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002064:	2201      	movs	r2, #1
34002066:	480a      	ldr	r0, [pc, #40]	@ (34002090 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34002068:	f7ff fc56 	bl	34001918 <MX25UM51245G_EnableSTRMemoryMappedMode>
3400206c:	b110      	cbz	r0, 34002074 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
3400206e:	f06f 0004 	mvn.w	r0, #4
}
34002072:	bd10      	pop	{r4, pc}
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002074:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
34002076:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002078:	7023      	strb	r3, [r4, #0]
3400207a:	e7fa      	b.n	34002072 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
3400207c:	4804      	ldr	r0, [pc, #16]	@ (34002090 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
3400207e:	f7ff fcb0 	bl	340019e2 <MX25UM51245G_EnableDTRMemoryMappedMode>
34002082:	e7f3      	b.n	3400206c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
34002084:	f06f 0001 	mvn.w	r0, #1
  return ret;
34002088:	e7f3      	b.n	34002072 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
3400208a:	bf00      	nop
3400208c:	34012b80 	.word	0x34012b80
34002090:	34012b84 	.word	0x34012b84

34002094 <BSP_XSPI_NOR_ConfigFlash>:
{
34002094:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34002098:	460d      	mov	r5, r1
3400209a:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400209c:	2800      	cmp	r0, #0
3400209e:	d15d      	bne.n	3400215c <BSP_XSPI_NOR_ConfigFlash+0xc8>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
340020a0:	4c31      	ldr	r4, [pc, #196]	@ (34002168 <BSP_XSPI_NOR_ConfigFlash+0xd4>)
340020a2:	7823      	ldrb	r3, [r4, #0]
340020a4:	2b02      	cmp	r3, #2
340020a6:	d05c      	beq.n	34002162 <BSP_XSPI_NOR_ConfigFlash+0xce>
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
340020a8:	7863      	ldrb	r3, [r4, #1]
340020aa:	2b01      	cmp	r3, #1
340020ac:	d14d      	bne.n	3400214a <BSP_XSPI_NOR_ConfigFlash+0xb6>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
340020ae:	2901      	cmp	r1, #1
340020b0:	78a2      	ldrb	r2, [r4, #2]
340020b2:	d109      	bne.n	340020c8 <BSP_XSPI_NOR_ConfigFlash+0x34>
340020b4:	4296      	cmp	r6, r2
340020b6:	d107      	bne.n	340020c8 <BSP_XSPI_NOR_ConfigFlash+0x34>
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
340020b8:	2301      	movs	r3, #1
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
340020ba:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
340020bc:	7023      	strb	r3, [r4, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
340020be:	7065      	strb	r5, [r4, #1]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
340020c0:	70a6      	strb	r6, [r4, #2]
}
340020c2:	b004      	add	sp, #16
340020c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340020c8:	4f28      	ldr	r7, [pc, #160]	@ (3400216c <BSP_XSPI_NOR_ConfigFlash+0xd8>)
340020ca:	2101      	movs	r1, #1
340020cc:	4638      	mov	r0, r7
340020ce:	f7ff fcd8 	bl	34001a82 <MX25UM51245G_WriteEnable>
340020d2:	4603      	mov	r3, r0
340020d4:	b9b0      	cbnz	r0, 34002104 <BSP_XSPI_NOR_ConfigFlash+0x70>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340020d6:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
340020d8:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340020dc:	78a2      	ldrb	r2, [r4, #2]
340020de:	4638      	mov	r0, r7
340020e0:	7861      	ldrb	r1, [r4, #1]
340020e2:	f7ff fd58 	bl	34001b96 <MX25UM51245G_WriteCfg2Register>
340020e6:	4680      	mov	r8, r0
340020e8:	b960      	cbnz	r0, 34002104 <BSP_XSPI_NOR_ConfigFlash+0x70>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
340020ea:	2028      	movs	r0, #40	@ 0x28
340020ec:	f000 fb3e 	bl	3400276c <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
340020f0:	78a3      	ldrb	r3, [r4, #2]
340020f2:	2b01      	cmp	r3, #1
340020f4:	d009      	beq.n	3400210a <BSP_XSPI_NOR_ConfigFlash+0x76>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340020f6:	2200      	movs	r2, #0
340020f8:	481c      	ldr	r0, [pc, #112]	@ (3400216c <BSP_XSPI_NOR_ConfigFlash+0xd8>)
340020fa:	4611      	mov	r1, r2
340020fc:	f7ff fba6 	bl	3400184c <MX25UM51245G_AutoPollingMemReady>
34002100:	4603      	mov	r3, r0
34002102:	b170      	cbz	r0, 34002122 <BSP_XSPI_NOR_ConfigFlash+0x8e>
            ret = XSPI_NOR_ExitOPIMode(Instance);
34002104:	f06f 0004 	mvn.w	r0, #4
34002108:	e7db      	b.n	340020c2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400210a:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
3400210c:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34002110:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34002114:	f008 ff7c 	bl	3400b010 <HAL_XSPI_Init>
34002118:	2800      	cmp	r0, #0
3400211a:	d0ec      	beq.n	340020f6 <BSP_XSPI_NOR_ConfigFlash+0x62>
            ret = XSPI_NOR_ExitOPIMode(Instance);
3400211c:	f06f 0003 	mvn.w	r0, #3
34002120:	e7cf      	b.n	340020c2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34002122:	aa03      	add	r2, sp, #12
34002124:	4601      	mov	r1, r0
34002126:	9200      	str	r2, [sp, #0]
34002128:	4602      	mov	r2, r0
3400212a:	4810      	ldr	r0, [pc, #64]	@ (3400216c <BSP_XSPI_NOR_ConfigFlash+0xd8>)
3400212c:	f7ff fd86 	bl	34001c3c <MX25UM51245G_ReadCfg2Register>
34002130:	2800      	cmp	r0, #0
34002132:	d1e7      	bne.n	34002104 <BSP_XSPI_NOR_ConfigFlash+0x70>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
34002134:	f89d 300c 	ldrb.w	r3, [sp, #12]
34002138:	2b00      	cmp	r3, #0
3400213a:	d1e3      	bne.n	34002104 <BSP_XSPI_NOR_ConfigFlash+0x70>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
3400213c:	2d01      	cmp	r5, #1
3400213e:	d1bb      	bne.n	340020b8 <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34002140:	78a3      	ldrb	r3, [r4, #2]
34002142:	b933      	cbnz	r3, 34002152 <BSP_XSPI_NOR_ConfigFlash+0xbe>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34002144:	f7ff ff14 	bl	34001f70 <XSPI_NOR_EnterDOPIMode.constprop.0>
34002148:	e005      	b.n	34002156 <BSP_XSPI_NOR_ConfigFlash+0xc2>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
3400214a:	2901      	cmp	r1, #1
3400214c:	d1b4      	bne.n	340020b8 <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
3400214e:	2a00      	cmp	r2, #0
34002150:	d1f8      	bne.n	34002144 <BSP_XSPI_NOR_ConfigFlash+0xb0>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34002152:	f7ff fec7 	bl	34001ee4 <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
34002156:	2800      	cmp	r0, #0
34002158:	d1b3      	bne.n	340020c2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
3400215a:	e7ad      	b.n	340020b8 <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
3400215c:	f06f 0001 	mvn.w	r0, #1
34002160:	e7af      	b.n	340020c2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34002162:	f06f 0019 	mvn.w	r0, #25
  return ret;
34002166:	e7ac      	b.n	340020c2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
34002168:	34012b80 	.word	0x34012b80
3400216c:	34012b84 	.word	0x34012b84

34002170 <BSP_XSPI_NOR_Init>:
{
34002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34002174:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002176:	4604      	mov	r4, r0
34002178:	4e86      	ldr	r6, [pc, #536]	@ (34002394 <BSP_XSPI_NOR_Init+0x224>)
{
3400217a:	b08f      	sub	sp, #60	@ 0x3c
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400217c:	2800      	cmp	r0, #0
3400217e:	f040 8102 	bne.w	34002386 <BSP_XSPI_NOR_Init+0x216>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34002182:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 340023a4 <BSP_XSPI_NOR_Init+0x234>
34002186:	f898 3000 	ldrb.w	r3, [r8]
3400218a:	b153      	cbz	r3, 340021a2 <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
3400218c:	2500      	movs	r5, #0
  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
3400218e:	2064      	movs	r0, #100	@ 0x64
34002190:	2100      	movs	r1, #0
34002192:	fb00 6004 	mla	r0, r0, r4, r6
34002196:	f009 fb15 	bl	3400b7c4 <HAL_XSPI_SetClockPrescaler>
}
3400219a:	4628      	mov	r0, r5
3400219c:	b00f      	add	sp, #60	@ 0x3c
3400219e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340021a2:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
340021a6:	4f7c      	ldr	r7, [pc, #496]	@ (34002398 <BSP_XSPI_NOR_Init+0x228>)
  __HAL_RCC_PWR_CLK_ENABLE();
340021a8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
340021ac:	f8c7 5a60 	str.w	r5, [r7, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
340021b0:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
340021b4:	f04f 0b03 	mov.w	fp, #3
340021b8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
340021ba:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
340021bc:	f7ff fe86 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
340021c0:	f002 f870 	bl	340042a4 <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
340021c4:	2101      	movs	r1, #1
340021c6:	2002      	movs	r0, #2
340021c8:	f002 f826 	bl	34004218 <HAL_PWREx_ConfigVddIORange>
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340021cc:	4b73      	ldr	r3, [pc, #460]	@ (3400239c <BSP_XSPI_NOR_Init+0x22c>)
  XSPI_CLK_GPIO_CLK_ENABLE();
340021ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340021d2:	f8c7 5a20 	str.w	r5, [r7, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340021d6:	f8c3 5220 	str.w	r5, [r3, #544]	@ 0x220
340021da:	f7ff fe77 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
340021de:	2509      	movs	r5, #9
  XSPI_DQS_GPIO_CLK_ENABLE();
340021e0:	f7ff fe74 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
340021e4:	2701      	movs	r7, #1
  XSPI_CS_GPIO_CLK_ENABLE();
340021e6:	f7ff fe71 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
340021ea:	f7ff fe6f 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
340021ee:	f7ff fe6d 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
340021f2:	f7ff fe6b 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
340021f6:	f7ff fe69 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
340021fa:	f7ff fe67 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
340021fe:	f7ff fe65 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34002202:	f7ff fe63 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34002206:	f7ff fe61 	bl	34001ecc <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
3400220a:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
3400220c:	4864      	ldr	r0, [pc, #400]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
3400220e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34002210:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34002214:	e9cd 7b07 	strd	r7, fp, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34002218:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
3400221a:	f001 f987 	bl	3400352c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
3400221e:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34002220:	485f      	ldr	r0, [pc, #380]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
34002222:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34002224:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34002226:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34002228:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
3400222a:	f001 f97f 	bl	3400352c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
3400222e:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34002230:	485b      	ldr	r0, [pc, #364]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
34002232:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34002234:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
34002236:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34002238:	f001 f978 	bl	3400352c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
3400223c:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
3400223e:	4858      	ldr	r0, [pc, #352]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
34002240:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34002242:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34002244:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34002246:	f001 f971 	bl	3400352c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
3400224a:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
3400224c:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34002250:	4853      	ldr	r0, [pc, #332]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
34002252:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34002254:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
34002256:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34002258:	f001 f968 	bl	3400352c <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
3400225c:	4850      	ldr	r0, [pc, #320]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
3400225e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34002260:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34002264:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34002266:	f001 f961 	bl	3400352c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
3400226a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
3400226e:	484c      	ldr	r0, [pc, #304]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
34002270:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34002272:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
34002274:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34002276:	f001 f959 	bl	3400352c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
3400227a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
3400227e:	4848      	ldr	r0, [pc, #288]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
34002280:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34002282:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
34002284:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34002286:	f001 f951 	bl	3400352c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
3400228a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
3400228e:	4844      	ldr	r0, [pc, #272]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
34002290:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34002292:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
34002294:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34002296:	f001 f949 	bl	3400352c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
3400229a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
3400229e:	4840      	ldr	r0, [pc, #256]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
340022a0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
340022a2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
340022a4:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
340022a6:	f001 f941 	bl	3400352c <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
340022aa:	483d      	ldr	r0, [pc, #244]	@ (340023a0 <BSP_XSPI_NOR_Init+0x230>)
340022ac:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
340022ae:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
340022b0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
340022b2:	f001 f93b 	bl	3400352c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
340022b6:	4622      	mov	r2, r4
340022b8:	210f      	movs	r1, #15
340022ba:	20aa      	movs	r0, #170	@ 0xaa
340022bc:	f000 fb9c 	bl	340029f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
340022c0:	20aa      	movs	r0, #170	@ 0xaa
340022c2:	f000 fbf7 	bl	34002ab4 <HAL_NVIC_EnableIRQ>
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
340022c6:	a805      	add	r0, sp, #20
340022c8:	f7ff faa7 	bl	3400181a <MX25UM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
340022cc:	9b05      	ldr	r3, [sp, #20]
340022ce:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
340022d2:	2b00      	cmp	r3, #0
340022d4:	fab3 f283 	clz	r2, r3
340022d8:	bf08      	it	eq
340022da:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
340022dc:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
340022e0:	4630      	mov	r0, r6
340022e2:	a901      	add	r1, sp, #4
      xspi_init.ClockPrescaler = 3;
340022e4:	f8cd b008 	str.w	fp, [sp, #8]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
340022e8:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
340022ea:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
340022ec:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
340022ee:	f7ff fe93 	bl	34002018 <MX_XSPI_NOR_Init>
340022f2:	2800      	cmp	r0, #0
340022f4:	d14a      	bne.n	3400238c <BSP_XSPI_NOR_Init+0x21c>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340022f6:	4622      	mov	r2, r4
340022f8:	4621      	mov	r1, r4
340022fa:	4630      	mov	r0, r6
340022fc:	f7ff fcfb 	bl	34001cf6 <MX25UM51245G_ResetEnable>
34002300:	b110      	cbz	r0, 34002308 <BSP_XSPI_NOR_Init+0x198>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002302:	f06f 0504 	mvn.w	r5, #4
34002306:	e742      	b.n	3400218e <BSP_XSPI_NOR_Init+0x1e>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34002308:	4622      	mov	r2, r4
3400230a:	4621      	mov	r1, r4
3400230c:	4630      	mov	r0, r6
3400230e:	f7ff fd1f 	bl	34001d50 <MX25UM51245G_ResetMemory>
34002312:	2800      	cmp	r0, #0
34002314:	d1f5      	bne.n	34002302 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002316:	4622      	mov	r2, r4
34002318:	4639      	mov	r1, r7
3400231a:	4630      	mov	r0, r6
3400231c:	f7ff fceb 	bl	34001cf6 <MX25UM51245G_ResetEnable>
34002320:	2800      	cmp	r0, #0
34002322:	d1ee      	bne.n	34002302 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002324:	4622      	mov	r2, r4
34002326:	4639      	mov	r1, r7
34002328:	4630      	mov	r0, r6
3400232a:	f7ff fd11 	bl	34001d50 <MX25UM51245G_ResetMemory>
3400232e:	2800      	cmp	r0, #0
34002330:	d1e7      	bne.n	34002302 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002332:	463a      	mov	r2, r7
34002334:	4639      	mov	r1, r7
34002336:	4630      	mov	r0, r6
34002338:	f7ff fcdd 	bl	34001cf6 <MX25UM51245G_ResetEnable>
3400233c:	2800      	cmp	r0, #0
3400233e:	d1e0      	bne.n	34002302 <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002340:	463a      	mov	r2, r7
34002342:	4639      	mov	r1, r7
34002344:	4630      	mov	r0, r6
34002346:	f7ff fd03 	bl	34001d50 <MX25UM51245G_ResetMemory>
3400234a:	2800      	cmp	r0, #0
3400234c:	d1d9      	bne.n	34002302 <BSP_XSPI_NOR_Init+0x192>
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
3400234e:	2064      	movs	r0, #100	@ 0x64
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34002350:	f888 7000 	strb.w	r7, [r8]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
34002354:	f888 4001 	strb.w	r4, [r8, #1]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
34002358:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
3400235c:	f000 fa06 	bl	3400276c <HAL_Delay>
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002360:	4630      	mov	r0, r6
34002362:	f898 2002 	ldrb.w	r2, [r8, #2]
34002366:	f898 1001 	ldrb.w	r1, [r8, #1]
3400236a:	f7ff fa6f 	bl	3400184c <MX25UM51245G_AutoPollingMemReady>
3400236e:	2800      	cmp	r0, #0
34002370:	d1c7      	bne.n	34002302 <BSP_XSPI_NOR_Init+0x192>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
34002372:	f899 2001 	ldrb.w	r2, [r9, #1]
34002376:	f899 1000 	ldrb.w	r1, [r9]
3400237a:	f7ff fe8b 	bl	34002094 <BSP_XSPI_NOR_ConfigFlash>
3400237e:	2800      	cmp	r0, #0
34002380:	f43f af04 	beq.w	3400218c <BSP_XSPI_NOR_Init+0x1c>
34002384:	e7bd      	b.n	34002302 <BSP_XSPI_NOR_Init+0x192>
    ret = BSP_ERROR_WRONG_PARAM;
34002386:	f06f 0501 	mvn.w	r5, #1
3400238a:	e700      	b.n	3400218e <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
3400238c:	f06f 0503 	mvn.w	r5, #3
34002390:	e6fd      	b.n	3400218e <BSP_XSPI_NOR_Init+0x1e>
34002392:	bf00      	nop
34002394:	34012b84 	.word	0x34012b84
34002398:	56028000 	.word	0x56028000
3400239c:	56029000 	.word	0x56029000
340023a0:	56023400 	.word	0x56023400
340023a4:	34012b80 	.word	0x34012b80

340023a8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
340023a8:	4b44      	ldr	r3, [pc, #272]	@ (340024bc <SystemInit+0x114>)
340023aa:	4a45      	ldr	r2, [pc, #276]	@ (340024c0 <SystemInit+0x118>)
{
340023ac:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
340023ae:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
340023b0:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
340023b2:	2502      	movs	r5, #2
  SAU->RNR = 0;
340023b4:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
340023b6:	4943      	ldr	r1, [pc, #268]	@ (340024c4 <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
340023b8:	4e43      	ldr	r6, [pc, #268]	@ (340024c8 <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
340023ba:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
340023be:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
340023c2:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
340023c6:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
340023ca:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
340023ce:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340023d2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
340023d6:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
340023da:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340023de:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
340023e2:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
340023e6:	2503      	movs	r5, #3
  SAU->RBAR = 0;
340023e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340023ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
340023f0:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
340023f4:	2504      	movs	r5, #4
  SAU->RBAR = 0;
340023f6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340023fa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
340023fe:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
34002402:	2505      	movs	r5, #5
  SAU->RBAR = 0;
34002404:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002408:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
3400240c:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
34002410:	2506      	movs	r5, #6
  SAU->RBAR = 0;
34002412:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002416:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
3400241a:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
3400241e:	2507      	movs	r5, #7
  SAU->RBAR = 0;
34002420:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002424:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
34002428:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
3400242c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002430:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34002434:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
34002438:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
3400243c:	689a      	ldr	r2, [r3, #8]
3400243e:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34002440:	4a22      	ldr	r2, [pc, #136]	@ (340024cc <SystemInit+0x124>)
34002442:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34002444:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
34002448:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
3400244a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
3400244c:	f045 0510 	orr.w	r5, r5, #16
34002450:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34002452:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34002454:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
34002458:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
3400245c:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34002460:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34002464:	f042 0210 	orr.w	r2, r2, #16
34002468:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
3400246c:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34002470:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34002474:	f022 0210 	bic.w	r2, r2, #16
34002478:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
3400247c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34002480:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34002484:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34002488:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
3400248a:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
3400248e:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34002492:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34002496:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3400249a:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
3400249c:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
340024a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
340024a4:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
340024a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
340024ac:	4a08      	ldr	r2, [pc, #32]	@ (340024d0 <SystemInit+0x128>)
340024ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
340024b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
340024b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
340024ba:	bd70      	pop	{r4, r5, r6, pc}
340024bc:	e000ed00 	.word	0xe000ed00
340024c0:	34000400 	.word	0x34000400
340024c4:	56028000 	.word	0x56028000
340024c8:	56008000 	.word	0x56008000
340024cc:	56024800 	.word	0x56024800
340024d0:	e002ed00 	.word	0xe002ed00

340024d4 <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340024d4:	4b6e      	ldr	r3, [pc, #440]	@ (34002690 <SystemCoreClockUpdate+0x1bc>)
{
340024d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340024d8:	6a1a      	ldr	r2, [r3, #32]
340024da:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
340024de:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
340024e2:	f000 80b8 	beq.w	34002656 <SystemCoreClockUpdate+0x182>
340024e6:	d806      	bhi.n	340024f6 <SystemCoreClockUpdate+0x22>
340024e8:	b962      	cbnz	r2, 34002504 <SystemCoreClockUpdate+0x30>
  {
  case 0:  /* HSI used as system clock source (default after reset) */
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340024ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340024ec:	4b69      	ldr	r3, [pc, #420]	@ (34002694 <SystemCoreClockUpdate+0x1c0>)
340024ee:	f3c2 12c1 	ubfx	r2, r2, #7, #2
340024f2:	40d3      	lsrs	r3, r2
    break;
340024f4:	e003      	b.n	340024fe <SystemCoreClockUpdate+0x2a>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340024f6:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
340024fa:	d00b      	beq.n	34002514 <SystemCoreClockUpdate+0x40>
  uint32_t sysclk = 0;
340024fc:	2300      	movs	r3, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
340024fe:	4a66      	ldr	r2, [pc, #408]	@ (34002698 <SystemCoreClockUpdate+0x1c4>)
34002500:	6013      	str	r3, [r2, #0]
}
34002502:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
34002506:	4a65      	ldr	r2, [pc, #404]	@ (3400269c <SystemCoreClockUpdate+0x1c8>)
34002508:	f413 7f00 	tst.w	r3, #512	@ 0x200
3400250c:	4b64      	ldr	r3, [pc, #400]	@ (340026a0 <SystemCoreClockUpdate+0x1cc>)
3400250e:	bf08      	it	eq
34002510:	4613      	moveq	r3, r2
34002512:	e7f4      	b.n	340024fe <SystemCoreClockUpdate+0x2a>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34002514:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
34002518:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
3400251c:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34002520:	d02a      	beq.n	34002578 <SystemCoreClockUpdate+0xa4>
34002522:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34002526:	d036      	beq.n	34002596 <SystemCoreClockUpdate+0xc2>
34002528:	2a00      	cmp	r2, #0
3400252a:	d143      	bne.n	340025b4 <SystemCoreClockUpdate+0xe0>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
3400252c:	f8d3 7080 	ldr.w	r7, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
34002530:	013d      	lsls	r5, r7, #4
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34002532:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002536:	f100 8096 	bmi.w	34002666 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400253a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
3400253e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34002542:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34002546:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400254a:	460e      	mov	r6, r1
    switch (pllsource)
3400254c:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34002550:	f3c2 65c2 	ubfx	r5, r2, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34002554:	f3c7 5105 	ubfx	r1, r7, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34002558:	f3c2 6202 	ubfx	r2, r2, #24, #3
    switch (pllsource)
3400255c:	d04f      	beq.n	340025fe <SystemCoreClockUpdate+0x12a>
3400255e:	d87c      	bhi.n	3400265a <SystemCoreClockUpdate+0x186>
34002560:	2e00      	cmp	r6, #0
34002562:	d03c      	beq.n	340025de <SystemCoreClockUpdate+0x10a>
34002564:	2600      	movs	r6, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34002566:	4b4a      	ldr	r3, [pc, #296]	@ (34002690 <SystemCoreClockUpdate+0x1bc>)
        sysclk = MSI_VALUE;
34002568:	4f4c      	ldr	r7, [pc, #304]	@ (3400269c <SystemCoreClockUpdate+0x1c8>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400256a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        sysclk = MSI_VALUE;
3400256c:	f413 7f00 	tst.w	r3, #512	@ 0x200
34002570:	4b4b      	ldr	r3, [pc, #300]	@ (340026a0 <SystemCoreClockUpdate+0x1cc>)
34002572:	bf08      	it	eq
34002574:	463b      	moveq	r3, r7
34002576:	e038      	b.n	340025ea <SystemCoreClockUpdate+0x116>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
34002578:	f8d3 7090 	ldr.w	r7, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
3400257c:	013c      	lsls	r4, r7, #4
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
3400257e:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002582:	d470      	bmi.n	34002666 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34002584:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
34002588:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
3400258c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34002590:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34002594:	e7d9      	b.n	3400254a <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34002596:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
3400259a:	0138      	lsls	r0, r7, #4
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
3400259c:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340025a0:	d461      	bmi.n	34002666 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
340025a2:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
340025a6:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
340025aa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
340025ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
340025b2:	e7ca      	b.n	3400254a <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
340025b4:	f8d3 70b0 	ldr.w	r7, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
340025b8:	013a      	lsls	r2, r7, #4
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
340025ba:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340025be:	d452      	bmi.n	34002666 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
340025c0:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
340025c4:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
340025c8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
340025cc:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
340025d0:	e7bb      	b.n	3400254a <SystemCoreClockUpdate+0x76>
    switch (pllsource)
340025d2:	460a      	mov	r2, r1
340025d4:	460d      	mov	r5, r1
340025d6:	4608      	mov	r0, r1
340025d8:	460c      	mov	r4, r1
340025da:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340025de:	4b2c      	ldr	r3, [pc, #176]	@ (34002690 <SystemCoreClockUpdate+0x1bc>)
340025e0:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
340025e2:	4b2c      	ldr	r3, [pc, #176]	@ (34002694 <SystemCoreClockUpdate+0x1c0>)
340025e4:	f3c7 17c1 	ubfx	r7, r7, #7, #2
340025e8:	40fb      	lsrs	r3, r7
    if (pllbypass == 0U)
340025ea:	b14e      	cbz	r6, 34002600 <SystemCoreClockUpdate+0x12c>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
340025ec:	4a28      	ldr	r2, [pc, #160]	@ (34002690 <SystemCoreClockUpdate+0x1bc>)
340025ee:	f8d2 20c4 	ldr.w	r2, [r2, #196]	@ 0xc4
340025f2:	f3c2 4207 	ubfx	r2, r2, #16, #8
340025f6:	3201      	adds	r2, #1
    sysclk = sysclk / ic_divider;
340025f8:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
340025fc:	e77f      	b.n	340024fe <SystemCoreClockUpdate+0x2a>
      sysclk = HSE_VALUE;
340025fe:	4b29      	ldr	r3, [pc, #164]	@ (340026a4 <SystemCoreClockUpdate+0x1d0>)
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34002600:	ee07 0a10 	vmov	s14, r0
34002604:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
34002608:	ee07 4a10 	vmov	s14, r4
3400260c:	ee07 3a90 	vmov	s15, r3
34002610:	eddf 6a25 	vldr	s13, [pc, #148]	@ 340026a8 <SystemCoreClockUpdate+0x1d4>
34002614:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34002618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400261c:	eea6 7a26 	vfma.f32	s14, s12, s13
34002620:	ee67 7a87 	vmul.f32	s15, s15, s14
34002624:	ee07 1a10 	vmov	s14, r1
34002628:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
3400262c:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34002630:	ee07 5a90 	vmov	s15, r5
34002634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
34002638:	ee07 2a90 	vmov	s15, r2
3400263c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34002640:	ee27 7a27 	vmul.f32	s14, s14, s15
34002644:	eec6 7a87 	vdiv.f32	s15, s13, s14
34002648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3400264c:	ee17 3a90 	vmov	r3, s15
34002650:	e7cc      	b.n	340025ec <SystemCoreClockUpdate+0x118>
      sysclk = HSE_VALUE;
34002652:	4b14      	ldr	r3, [pc, #80]	@ (340026a4 <SystemCoreClockUpdate+0x1d0>)
34002654:	e7ca      	b.n	340025ec <SystemCoreClockUpdate+0x118>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34002656:	4b13      	ldr	r3, [pc, #76]	@ (340026a4 <SystemCoreClockUpdate+0x1d0>)
34002658:	e751      	b.n	340024fe <SystemCoreClockUpdate+0x2a>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3400265a:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
3400265e:	4b13      	ldr	r3, [pc, #76]	@ (340026ac <SystemCoreClockUpdate+0x1d8>)
34002660:	bf18      	it	ne
34002662:	2300      	movne	r3, #0
34002664:	e7cc      	b.n	34002600 <SystemCoreClockUpdate+0x12c>
    switch (pllsource)
34002666:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3400266a:	d0f2      	beq.n	34002652 <SystemCoreClockUpdate+0x17e>
3400266c:	d809      	bhi.n	34002682 <SystemCoreClockUpdate+0x1ae>
3400266e:	2900      	cmp	r1, #0
34002670:	d0af      	beq.n	340025d2 <SystemCoreClockUpdate+0xfe>
34002672:	2200      	movs	r2, #0
34002674:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
34002678:	4615      	mov	r5, r2
3400267a:	4610      	mov	r0, r2
3400267c:	4614      	mov	r4, r2
3400267e:	4611      	mov	r1, r2
34002680:	e771      	b.n	34002566 <SystemCoreClockUpdate+0x92>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34002682:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
34002686:	4b09      	ldr	r3, [pc, #36]	@ (340026ac <SystemCoreClockUpdate+0x1d8>)
34002688:	bf18      	it	ne
3400268a:	2300      	movne	r3, #0
3400268c:	e7ae      	b.n	340025ec <SystemCoreClockUpdate+0x118>
3400268e:	bf00      	nop
34002690:	56028000 	.word	0x56028000
34002694:	03d09000 	.word	0x03d09000
34002698:	3401281c 	.word	0x3401281c
3400269c:	003d0900 	.word	0x003d0900
340026a0:	00f42400 	.word	0x00f42400
340026a4:	02dc6c00 	.word	0x02dc6c00
340026a8:	33800000 	.word	0x33800000
340026ac:	00bb8000 	.word	0x00bb8000

340026b0 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
340026b0:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
340026b4:	b500      	push	{lr}
  SystemCoreClockUpdate();
340026b6:	f7ff ff0d 	bl	340024d4 <SystemCoreClockUpdate>

  return SystemCoreClock;
}
340026ba:	4b05      	ldr	r3, [pc, #20]	@ (340026d0 <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
340026bc:	f85d eb04 	ldr.w	lr, [sp], #4
340026c0:	6818      	ldr	r0, [r3, #0]
340026c2:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
340026c6:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
340026ca:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
340026ce:	4774      	bxns	lr
340026d0:	3401281c 	.word	0x3401281c

340026d4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
340026d4:	4770      	bx	lr
	...

340026d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
340026d8:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
340026da:	4b0f      	ldr	r3, [pc, #60]	@ (34002718 <HAL_InitTick+0x40>)
{
340026dc:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq == 0UL)
340026de:	781a      	ldrb	r2, [r3, #0]
340026e0:	b90a      	cbnz	r2, 340026e6 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
340026e2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
340026e4:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
340026e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
340026ea:	fbb3 f3f2 	udiv	r3, r3, r2
340026ee:	4a0b      	ldr	r2, [pc, #44]	@ (3400271c <HAL_InitTick+0x44>)
340026f0:	6810      	ldr	r0, [r2, #0]
340026f2:	fbb0 f0f3 	udiv	r0, r0, r3
340026f6:	f000 f9f1 	bl	34002adc <HAL_SYSTICK_Config>
340026fa:	4604      	mov	r4, r0
340026fc:	2800      	cmp	r0, #0
340026fe:	d1f0      	bne.n	340026e2 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34002700:	2d0f      	cmp	r5, #15
34002702:	d8ee      	bhi.n	340026e2 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34002704:	4602      	mov	r2, r0
34002706:	4629      	mov	r1, r5
34002708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400270c:	f000 f974 	bl	340029f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
34002710:	4b03      	ldr	r3, [pc, #12]	@ (34002720 <HAL_InitTick+0x48>)
34002712:	4620      	mov	r0, r4
34002714:	601d      	str	r5, [r3, #0]
  return HAL_OK;
34002716:	e7e5      	b.n	340026e4 <HAL_InitTick+0xc>
34002718:	34012820 	.word	0x34012820
3400271c:	3401281c 	.word	0x3401281c
34002720:	34012824 	.word	0x34012824

34002724 <HAL_Init>:
{
34002724:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34002726:	2003      	movs	r0, #3
34002728:	f000 f948 	bl	340029bc <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
3400272c:	f7ff fed2 	bl	340024d4 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34002730:	200f      	movs	r0, #15
34002732:	f7ff ffd1 	bl	340026d8 <HAL_InitTick>
34002736:	4604      	mov	r4, r0
34002738:	b918      	cbnz	r0, 34002742 <HAL_Init+0x1e>
  HAL_MspInit();
3400273a:	f7ff ffcb 	bl	340026d4 <HAL_MspInit>
}
3400273e:	4620      	mov	r0, r4
34002740:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
34002742:	2401      	movs	r4, #1
34002744:	e7fb      	b.n	3400273e <HAL_Init+0x1a>
	...

34002748 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
34002748:	4a03      	ldr	r2, [pc, #12]	@ (34002758 <HAL_IncTick+0x10>)
3400274a:	4b04      	ldr	r3, [pc, #16]	@ (3400275c <HAL_IncTick+0x14>)
3400274c:	6811      	ldr	r1, [r2, #0]
3400274e:	781b      	ldrb	r3, [r3, #0]
34002750:	440b      	add	r3, r1
34002752:	6013      	str	r3, [r2, #0]
}
34002754:	4770      	bx	lr
34002756:	bf00      	nop
34002758:	34012be8 	.word	0x34012be8
3400275c:	34012820 	.word	0x34012820

34002760 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
34002760:	4b01      	ldr	r3, [pc, #4]	@ (34002768 <HAL_GetTick+0x8>)
34002762:	6818      	ldr	r0, [r3, #0]
}
34002764:	4770      	bx	lr
34002766:	bf00      	nop
34002768:	34012be8 	.word	0x34012be8

3400276c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
3400276c:	b538      	push	{r3, r4, r5, lr}
3400276e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
34002770:	f7ff fff6 	bl	34002760 <HAL_GetTick>
34002774:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34002776:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
34002778:	bf1e      	ittt	ne
3400277a:	4b04      	ldrne	r3, [pc, #16]	@ (3400278c <HAL_Delay+0x20>)
3400277c:	781b      	ldrbne	r3, [r3, #0]
3400277e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
34002780:	f7ff ffee 	bl	34002760 <HAL_GetTick>
34002784:	1b43      	subs	r3, r0, r5
34002786:	42a3      	cmp	r3, r4
34002788:	d3fa      	bcc.n	34002780 <HAL_Delay+0x14>
  {
  }
}
3400278a:	bd38      	pop	{r3, r4, r5, pc}
3400278c:	34012820 	.word	0x34012820

34002790 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34002790:	b570      	push	{r4, r5, r6, lr}
34002792:	4604      	mov	r4, r0
34002794:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
34002796:	f7ff ffe3 	bl	34002760 <HAL_GetTick>
3400279a:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
3400279c:	b12c      	cbz	r4, 340027aa <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
3400279e:	6822      	ldr	r2, [r4, #0]
340027a0:	4b1b      	ldr	r3, [pc, #108]	@ (34002810 <HAL_BSEC_OTP_Reload+0x80>)
340027a2:	429a      	cmp	r2, r3
340027a4:	d003      	beq.n	340027ae <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340027a6:	2301      	movs	r3, #1
340027a8:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340027aa:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
340027ac:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
340027ae:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
340027b2:	d2f8      	bcs.n	340027a6 <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
340027b4:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
340027b6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
340027ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
340027be:	2301      	movs	r3, #1
340027c0:	f005 001f 	and.w	r0, r5, #31
340027c4:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
340027c6:	420b      	tst	r3, r1
340027c8:	d11f      	bne.n	3400280a <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
340027ca:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
340027ce:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
340027d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
340027d6:	432b      	orrs	r3, r5
340027d8:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
340027dc:	6823      	ldr	r3, [r4, #0]
340027de:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
340027e2:	07d2      	lsls	r2, r2, #31
340027e4:	d409      	bmi.n	340027fa <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
340027e6:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
340027ea:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
340027ee:	d0dd      	beq.n	340027ac <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
340027f0:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340027f4:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
340027f8:	e7d6      	b.n	340027a8 <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
340027fa:	f7ff ffb1 	bl	34002760 <HAL_GetTick>
340027fe:	1b80      	subs	r0, r0, r6
34002800:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34002804:	d9ea      	bls.n	340027dc <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34002806:	230a      	movs	r3, #10
34002808:	e7ce      	b.n	340027a8 <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400280a:	2304      	movs	r3, #4
3400280c:	e7cc      	b.n	340027a8 <HAL_BSEC_OTP_Reload+0x18>
3400280e:	bf00      	nop
34002810:	56009000 	.word	0x56009000

34002814 <HAL_BSEC_OTP_Read>:
{
34002814:	b570      	push	{r4, r5, r6, lr}
34002816:	460e      	mov	r6, r1
34002818:	4615      	mov	r5, r2
  if (hbsec == NULL)
3400281a:	4604      	mov	r4, r0
3400281c:	b130      	cbz	r0, 3400282c <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
3400281e:	b11a      	cbz	r2, 34002828 <HAL_BSEC_OTP_Read+0x14>
34002820:	6802      	ldr	r2, [r0, #0]
34002822:	4b09      	ldr	r3, [pc, #36]	@ (34002848 <HAL_BSEC_OTP_Read+0x34>)
34002824:	429a      	cmp	r2, r3
34002826:	d003      	beq.n	34002830 <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34002828:	2301      	movs	r3, #1
3400282a:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400282c:	2001      	movs	r0, #1
}
3400282e:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
34002830:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
34002834:	d2f8      	bcs.n	34002828 <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
34002836:	f7ff ffab 	bl	34002790 <HAL_BSEC_OTP_Reload>
3400283a:	2800      	cmp	r0, #0
3400283c:	d1f6      	bne.n	3400282c <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
3400283e:	6823      	ldr	r3, [r4, #0]
34002840:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
34002844:	602b      	str	r3, [r5, #0]
  return HAL_OK;
34002846:	e7f2      	b.n	3400282e <HAL_BSEC_OTP_Read+0x1a>
34002848:	56009000 	.word	0x56009000

3400284c <HAL_BSEC_OTP_Program>:
{
3400284c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
34002850:	4604      	mov	r4, r0
34002852:	460e      	mov	r6, r1
34002854:	4617      	mov	r7, r2
34002856:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
34002858:	f7ff ff82 	bl	34002760 <HAL_GetTick>
3400285c:	4680      	mov	r8, r0
  if (hbsec == NULL)
3400285e:	b12c      	cbz	r4, 3400286c <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
34002860:	6822      	ldr	r2, [r4, #0]
34002862:	4b28      	ldr	r3, [pc, #160]	@ (34002904 <HAL_BSEC_OTP_Program+0xb8>)
34002864:	429a      	cmp	r2, r3
34002866:	d005      	beq.n	34002874 <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34002868:	2301      	movs	r3, #1
3400286a:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400286c:	2001      	movs	r0, #1
}
3400286e:	b003      	add	sp, #12
34002870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
34002874:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
34002878:	d004      	beq.n	34002884 <HAL_BSEC_OTP_Program+0x38>
3400287a:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
3400287e:	4822      	ldr	r0, [pc, #136]	@ (34002908 <HAL_BSEC_OTP_Program+0xbc>)
34002880:	f7fe ff48 	bl	34001714 <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
34002884:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
34002888:	d2ee      	bcs.n	34002868 <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400288a:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
3400288c:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400288e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
34002892:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34002896:	2301      	movs	r3, #1
34002898:	f006 001f 	and.w	r0, r6, #31
3400289c:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400289e:	420b      	tst	r3, r1
340028a0:	d12e      	bne.n	34002900 <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
340028a2:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
340028a6:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
340028aa:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
340028ae:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
340028b2:	4335      	orrs	r5, r6
340028b4:	ea45 0509 	orr.w	r5, r5, r9
340028b8:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
340028bc:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
340028c0:	6823      	ldr	r3, [r4, #0]
340028c2:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
340028c6:	07d2      	lsls	r2, r2, #31
340028c8:	d406      	bmi.n	340028d8 <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
340028ca:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340028ce:	03db      	lsls	r3, r3, #15
340028d0:	d50b      	bpl.n	340028ea <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
340028d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340028d6:	e7c8      	b.n	3400286a <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
340028d8:	f7ff ff42 	bl	34002760 <HAL_GetTick>
340028dc:	eba0 0008 	sub.w	r0, r0, r8
340028e0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
340028e4:	d9ec      	bls.n	340028c0 <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
340028e6:	230a      	movs	r3, #10
340028e8:	e7bf      	b.n	3400286a <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
340028ea:	4631      	mov	r1, r6
340028ec:	4620      	mov	r0, r4
340028ee:	aa01      	add	r2, sp, #4
340028f0:	f7ff ff90 	bl	34002814 <HAL_BSEC_OTP_Read>
340028f4:	2800      	cmp	r0, #0
340028f6:	d1b9      	bne.n	3400286c <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
340028f8:	9b01      	ldr	r3, [sp, #4]
340028fa:	42bb      	cmp	r3, r7
340028fc:	d1e9      	bne.n	340028d2 <HAL_BSEC_OTP_Program+0x86>
340028fe:	e7b6      	b.n	3400286e <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34002900:	2304      	movs	r3, #4
34002902:	e7b2      	b.n	3400286a <HAL_BSEC_OTP_Program+0x1e>
34002904:	56009000 	.word	0x56009000
34002908:	34010a35 	.word	0x34010a35

3400290c <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
3400290c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
3400290e:	4604      	mov	r4, r0
34002910:	b350      	cbz	r0, 34002968 <HAL_CACHEAXI_Enable+0x5c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34002912:	6803      	ldr	r3, [r0, #0]
34002914:	4a15      	ldr	r2, [pc, #84]	@ (3400296c <HAL_CACHEAXI_Enable+0x60>)
34002916:	4293      	cmp	r3, r2
34002918:	d008      	beq.n	3400292c <HAL_CACHEAXI_Enable+0x20>
3400291a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400291e:	4293      	cmp	r3, r2
34002920:	d004      	beq.n	3400292c <HAL_CACHEAXI_Enable+0x20>
34002922:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
34002926:	4812      	ldr	r0, [pc, #72]	@ (34002970 <HAL_CACHEAXI_Enable+0x64>)
34002928:	f7fe fef4 	bl	34001714 <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
3400292c:	6823      	ldr	r3, [r4, #0]
3400292e:	685b      	ldr	r3, [r3, #4]
34002930:	07d9      	lsls	r1, r3, #31
34002932:	d407      	bmi.n	34002944 <HAL_CACHEAXI_Enable+0x38>
  }

  if (status == HAL_OK)
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002934:	2000      	movs	r0, #0
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
34002936:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002938:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
3400293a:	6813      	ldr	r3, [r2, #0]
3400293c:	f043 0301 	orr.w	r3, r3, #1
34002940:	6013      	str	r3, [r2, #0]
  }

  return status;
}
34002942:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
34002944:	f7ff ff0c 	bl	34002760 <HAL_GetTick>
34002948:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
3400294a:	6823      	ldr	r3, [r4, #0]
3400294c:	685b      	ldr	r3, [r3, #4]
3400294e:	07db      	lsls	r3, r3, #31
34002950:	d5f0      	bpl.n	34002934 <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
34002952:	f7ff ff05 	bl	34002760 <HAL_GetTick>
34002956:	1b40      	subs	r0, r0, r5
34002958:	2801      	cmp	r0, #1
3400295a:	d9f6      	bls.n	3400294a <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
3400295c:	6823      	ldr	r3, [r4, #0]
3400295e:	685b      	ldr	r3, [r3, #4]
34002960:	07da      	lsls	r2, r3, #31
34002962:	d4f2      	bmi.n	3400294a <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
34002964:	2310      	movs	r3, #16
34002966:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
34002968:	2001      	movs	r0, #1
3400296a:	e7ea      	b.n	34002942 <HAL_CACHEAXI_Enable+0x36>
3400296c:	580dfc00 	.word	0x580dfc00
34002970:	34010ade 	.word	0x34010ade

34002974 <HAL_CACHEAXI_Init>:
{
34002974:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
34002976:	4604      	mov	r4, r0
34002978:	b1c8      	cbz	r0, 340029ae <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400297a:	6803      	ldr	r3, [r0, #0]
3400297c:	4a0d      	ldr	r2, [pc, #52]	@ (340029b4 <HAL_CACHEAXI_Init+0x40>)
3400297e:	4293      	cmp	r3, r2
34002980:	d007      	beq.n	34002992 <HAL_CACHEAXI_Init+0x1e>
34002982:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34002986:	4293      	cmp	r3, r2
34002988:	d003      	beq.n	34002992 <HAL_CACHEAXI_Init+0x1e>
3400298a:	21bc      	movs	r1, #188	@ 0xbc
3400298c:	480a      	ldr	r0, [pc, #40]	@ (340029b8 <HAL_CACHEAXI_Init+0x44>)
3400298e:	f7fe fec1 	bl	34001714 <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
34002992:	7923      	ldrb	r3, [r4, #4]
34002994:	b913      	cbnz	r3, 3400299c <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
34002996:	4620      	mov	r0, r4
34002998:	f7fe fea2 	bl	340016e0 <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400299c:	2300      	movs	r3, #0
3400299e:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
340029a0:	2301      	movs	r3, #1
340029a2:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
340029a4:	4620      	mov	r0, r4
}
340029a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
340029aa:	f7ff bfaf 	b.w	3400290c <HAL_CACHEAXI_Enable>
}
340029ae:	2001      	movs	r0, #1
340029b0:	bd10      	pop	{r4, pc}
340029b2:	bf00      	nop
340029b4:	580dfc00 	.word	0x580dfc00
340029b8:	34010ade 	.word	0x34010ade

340029bc <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
340029bc:	1ec3      	subs	r3, r0, #3
340029be:	2b04      	cmp	r3, #4
{
340029c0:	b510      	push	{r4, lr}
340029c2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
340029c4:	d903      	bls.n	340029ce <HAL_NVIC_SetPriorityGrouping+0x12>
340029c6:	21e6      	movs	r1, #230	@ 0xe6
340029c8:	4809      	ldr	r0, [pc, #36]	@ (340029f0 <HAL_NVIC_SetPriorityGrouping+0x34>)
340029ca:	f7fe fea3 	bl	34001714 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
340029ce:	4909      	ldr	r1, [pc, #36]	@ (340029f4 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
340029d0:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
340029d2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
340029d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
340029d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
340029dc:	0412      	lsls	r2, r2, #16
340029de:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
340029e0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
340029e2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
340029e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
340029ea:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
340029ec:	bd10      	pop	{r4, pc}
340029ee:	bf00      	nop
340029f0:	34010b8b 	.word	0x34010b8b
340029f4:	e000ed00 	.word	0xe000ed00

340029f8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
340029f8:	f110 0f0c 	cmn.w	r0, #12
{
340029fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34002a00:	4605      	mov	r5, r0
34002a02:	460c      	mov	r4, r1
34002a04:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34002a06:	db01      	blt.n	34002a0c <HAL_NVIC_SetPriority+0x14>
34002a08:	1d03      	adds	r3, r0, #4
34002a0a:	d103      	bne.n	34002a14 <HAL_NVIC_SetPriority+0x1c>
34002a0c:	21ff      	movs	r1, #255	@ 0xff
34002a0e:	4826      	ldr	r0, [pc, #152]	@ (34002aa8 <HAL_NVIC_SetPriority+0xb0>)
34002a10:	f7fe fe80 	bl	34001714 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34002a14:	4b25      	ldr	r3, [pc, #148]	@ (34002aac <HAL_NVIC_SetPriority+0xb4>)
34002a16:	68de      	ldr	r6, [r3, #12]
34002a18:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
34002a1c:	2e02      	cmp	r6, #2
34002a1e:	d806      	bhi.n	34002a2e <HAL_NVIC_SetPriority+0x36>
34002a20:	b157      	cbz	r7, 34002a38 <HAL_NVIC_SetPriority+0x40>
34002a22:	f44f 7181 	mov.w	r1, #258	@ 0x102
34002a26:	4820      	ldr	r0, [pc, #128]	@ (34002aa8 <HAL_NVIC_SetPriority+0xb0>)
34002a28:	f7fe fe74 	bl	34001714 <assert_failed>
34002a2c:	e004      	b.n	34002a38 <HAL_NVIC_SetPriority+0x40>
34002a2e:	2301      	movs	r3, #1
34002a30:	1ef2      	subs	r2, r6, #3
34002a32:	4093      	lsls	r3, r2
34002a34:	42bb      	cmp	r3, r7
34002a36:	d9f4      	bls.n	34002a22 <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
34002a38:	2c0f      	cmp	r4, #15
34002a3a:	f1c6 0807 	rsb	r8, r6, #7
34002a3e:	d804      	bhi.n	34002a4a <HAL_NVIC_SetPriority+0x52>
34002a40:	2301      	movs	r3, #1
34002a42:	fa03 f308 	lsl.w	r3, r3, r8
34002a46:	42a3      	cmp	r3, r4
34002a48:	d804      	bhi.n	34002a54 <HAL_NVIC_SetPriority+0x5c>
34002a4a:	f240 1103 	movw	r1, #259	@ 0x103
34002a4e:	4816      	ldr	r0, [pc, #88]	@ (34002aa8 <HAL_NVIC_SetPriority+0xb0>)
34002a50:	f7fe fe60 	bl	34001714 <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34002a54:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34002a58:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34002a5c:	bf28      	it	cs
34002a5e:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002a62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34002a66:	2b06      	cmp	r3, #6
34002a68:	f1a6 0603 	sub.w	r6, r6, #3
34002a6c:	bf98      	it	ls
34002a6e:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002a70:	fa02 f808 	lsl.w	r8, r2, r8
34002a74:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34002a78:	40b2      	lsls	r2, r6
34002a7a:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002a7e:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
34002a80:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34002a82:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002a86:	bfac      	ite	ge
34002a88:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002a8c:	4a08      	ldrlt	r2, [pc, #32]	@ (34002ab0 <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002a8e:	ea4f 1303 	mov.w	r3, r3, lsl #4
34002a92:	b2db      	uxtb	r3, r3
34002a94:	bfab      	itete	ge
34002a96:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002a9a:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002a9e:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002aa2:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
34002aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34002aa8:	34010b8b 	.word	0x34010b8b
34002aac:	e000ed00 	.word	0xe000ed00
34002ab0:	e000ed14 	.word	0xe000ed14

34002ab4 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34002ab4:	2800      	cmp	r0, #0
34002ab6:	db08      	blt.n	34002aca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34002ab8:	2301      	movs	r3, #1
34002aba:	0941      	lsrs	r1, r0, #5
34002abc:	4a05      	ldr	r2, [pc, #20]	@ (34002ad4 <HAL_NVIC_EnableIRQ+0x20>)
34002abe:	f000 001f 	and.w	r0, r0, #31
34002ac2:	4083      	lsls	r3, r0
34002ac4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
34002ac8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34002aca:	f240 1115 	movw	r1, #277	@ 0x115
34002ace:	4802      	ldr	r0, [pc, #8]	@ (34002ad8 <HAL_NVIC_EnableIRQ+0x24>)
34002ad0:	f7fe be20 	b.w	34001714 <assert_failed>
34002ad4:	e000e100 	.word	0xe000e100
34002ad8:	34010b8b 	.word	0x34010b8b

34002adc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34002adc:	3801      	subs	r0, #1
34002ade:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
34002ae2:	d20b      	bcs.n	34002afc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002ae4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002ae8:	21f0      	movs	r1, #240	@ 0xf0
34002aea:	4a05      	ldr	r2, [pc, #20]	@ (34002b00 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002aec:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002aee:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34002af2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34002af4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34002af6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34002af8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34002afa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
34002afc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
34002afe:	4770      	bx	lr
34002b00:	e000ed00 	.word	0xe000ed00

34002b04 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @brief  Line Event callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34002b04:	4770      	bx	lr

34002b06 <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @brief  Limit callback on the Pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34002b06:	4770      	bx	lr

34002b08 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @brief  Error callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34002b08:	4770      	bx	lr

34002b0a <HAL_DCMIPP_ErrorCallback>:
/**
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002b0a:	4770      	bx	lr

34002b0c <HAL_DCMIPP_IRQHandler>:
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34002b0c:	6803      	ldr	r3, [r0, #0]
{
34002b0e:	b570      	push	{r4, r5, r6, lr}
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34002b10:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	@ 0x3f8
{
34002b14:	4604      	mov	r4, r0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34002b16:	0472      	lsls	r2, r6, #17
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
34002b18:	f8d3 53f0 	ldr.w	r5, [r3, #1008]	@ 0x3f0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34002b1c:	d512      	bpl.n	34002b44 <HAL_DCMIPP_IRQHandler+0x38>
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
34002b1e:	0469      	lsls	r1, r5, #17
34002b20:	d510      	bpl.n	34002b44 <HAL_DCMIPP_IRQHandler+0x38>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
34002b22:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34002b26:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
34002b28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34002b2c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
34002b30:	6882      	ldr	r2, [r0, #8]
34002b32:	f042 0204 	orr.w	r2, r2, #4
34002b36:	6082      	str	r2, [r0, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
34002b38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34002b3c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34002b40:	f7ff ffe1 	bl	34002b06 <HAL_DCMIPP_PIPE_LimitEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
34002b44:	0572      	lsls	r2, r6, #21
34002b46:	d50a      	bpl.n	34002b5e <HAL_DCMIPP_IRQHandler+0x52>
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
34002b48:	056b      	lsls	r3, r5, #21
34002b4a:	d508      	bpl.n	34002b5e <HAL_DCMIPP_IRQHandler+0x52>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34002b4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002b50:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
34002b52:	2100      	movs	r1, #0
34002b54:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34002b56:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
34002b5a:	f009 f961 	bl	3400be20 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34002b5e:	05b0      	lsls	r0, r6, #22
34002b60:	d516      	bpl.n	34002b90 <HAL_DCMIPP_IRQHandler+0x84>
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
34002b62:	05a9      	lsls	r1, r5, #22
34002b64:	d514      	bpl.n	34002b90 <HAL_DCMIPP_IRQHandler+0x84>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b66:	6823      	ldr	r3, [r4, #0]
34002b68:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
34002b6c:	0752      	lsls	r2, r2, #29
34002b6e:	d507      	bpl.n	34002b80 <HAL_DCMIPP_IRQHandler+0x74>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34002b70:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002b74:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
34002b78:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
34002b7c:	2201      	movs	r2, #1
34002b7e:	7162      	strb	r2, [r4, #5]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34002b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34002b84:	2100      	movs	r1, #0
34002b86:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34002b88:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34002b8c:	f009 f958 	bl	3400be40 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
34002b90:	05f3      	lsls	r3, r6, #23
34002b92:	d50a      	bpl.n	34002baa <HAL_DCMIPP_IRQHandler+0x9e>
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34002b94:	05e8      	lsls	r0, r5, #23
34002b96:	d508      	bpl.n	34002baa <HAL_DCMIPP_IRQHandler+0x9e>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34002b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002b9c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34002b9e:	2100      	movs	r1, #0
34002ba0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34002ba2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34002ba6:	f7ff ffad 	bl	34002b04 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
34002baa:	0431      	lsls	r1, r6, #16
34002bac:	d516      	bpl.n	34002bdc <HAL_DCMIPP_IRQHandler+0xd0>
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34002bae:	042a      	lsls	r2, r5, #16
34002bb0:	d514      	bpl.n	34002bdc <HAL_DCMIPP_IRQHandler+0xd0>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002bb2:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002bb4:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002bb6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002bba:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002bbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34002bc0:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34002bc4:	68a2      	ldr	r2, [r4, #8]
34002bc6:	f042 0208 	orr.w	r2, r2, #8
34002bca:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34002bcc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002bd0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002bd4:	2304      	movs	r3, #4
34002bd6:	7163      	strb	r3, [r4, #5]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002bd8:	f7ff ff96 	bl	34002b08 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34002bdc:	03f3      	lsls	r3, r6, #15
34002bde:	d50a      	bpl.n	34002bf6 <HAL_DCMIPP_IRQHandler+0xea>
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34002be0:	03e8      	lsls	r0, r5, #15
34002be2:	d508      	bpl.n	34002bf6 <HAL_DCMIPP_IRQHandler+0xea>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34002be4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34002be8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34002bea:	2101      	movs	r1, #1
34002bec:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34002bee:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34002bf2:	f7ff ff87 	bl	34002b04 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34002bf6:	0371      	lsls	r1, r6, #13
34002bf8:	d50a      	bpl.n	34002c10 <HAL_DCMIPP_IRQHandler+0x104>
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
34002bfa:	036a      	lsls	r2, r5, #13
34002bfc:	d508      	bpl.n	34002c10 <HAL_DCMIPP_IRQHandler+0x104>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34002bfe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34002c02:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34002c04:	2101      	movs	r1, #1
34002c06:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34002c08:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34002c0c:	f009 f908 	bl	3400be20 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
34002c10:	03b3      	lsls	r3, r6, #14
34002c12:	d516      	bpl.n	34002c42 <HAL_DCMIPP_IRQHandler+0x136>
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
34002c14:	03a8      	lsls	r0, r5, #14
34002c16:	d514      	bpl.n	34002c42 <HAL_DCMIPP_IRQHandler+0x136>
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c18:	6823      	ldr	r3, [r4, #0]
34002c1a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
34002c1e:	0751      	lsls	r1, r2, #29
34002c20:	d507      	bpl.n	34002c32 <HAL_DCMIPP_IRQHandler+0x126>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
34002c22:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002c26:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34002c2a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
34002c2e:	2201      	movs	r2, #1
34002c30:	71a2      	strb	r2, [r4, #6]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34002c32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34002c36:	2101      	movs	r1, #1
34002c38:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34002c3a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34002c3e:	f009 f8ff 	bl	3400be40 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
34002c42:	0232      	lsls	r2, r6, #8
34002c44:	d516      	bpl.n	34002c74 <HAL_DCMIPP_IRQHandler+0x168>
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
34002c46:	022b      	lsls	r3, r5, #8
34002c48:	d514      	bpl.n	34002c74 <HAL_DCMIPP_IRQHandler+0x168>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34002c4a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34002c4c:	2101      	movs	r1, #1
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34002c4e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34002c52:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34002c54:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
34002c58:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
34002c5c:	68a2      	ldr	r2, [r4, #8]
34002c5e:	f042 0210 	orr.w	r2, r2, #16
34002c62:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
34002c64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34002c68:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002c6c:	2304      	movs	r3, #4
34002c6e:	71a3      	strb	r3, [r4, #6]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34002c70:	f7ff ff4a 	bl	34002b08 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34002c74:	01f0      	lsls	r0, r6, #7
34002c76:	d50a      	bpl.n	34002c8e <HAL_DCMIPP_IRQHandler+0x182>
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
34002c78:	01e9      	lsls	r1, r5, #7
34002c7a:	d508      	bpl.n	34002c8e <HAL_DCMIPP_IRQHandler+0x182>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34002c7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002c80:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34002c82:	2102      	movs	r1, #2
34002c84:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34002c86:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34002c8a:	f7ff ff3b 	bl	34002b04 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34002c8e:	0172      	lsls	r2, r6, #5
34002c90:	d50a      	bpl.n	34002ca8 <HAL_DCMIPP_IRQHandler+0x19c>
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
34002c92:	016b      	lsls	r3, r5, #5
34002c94:	d508      	bpl.n	34002ca8 <HAL_DCMIPP_IRQHandler+0x19c>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34002c96:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34002c9a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002c9c:	2102      	movs	r1, #2
34002c9e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34002ca0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002ca4:	f009 f8bc 	bl	3400be20 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34002ca8:	01b0      	lsls	r0, r6, #6
34002caa:	d516      	bpl.n	34002cda <HAL_DCMIPP_IRQHandler+0x1ce>
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34002cac:	01a9      	lsls	r1, r5, #6
34002cae:	d514      	bpl.n	34002cda <HAL_DCMIPP_IRQHandler+0x1ce>
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cb0:	6823      	ldr	r3, [r4, #0]
34002cb2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
34002cb6:	0752      	lsls	r2, r2, #29
34002cb8:	d507      	bpl.n	34002cca <HAL_DCMIPP_IRQHandler+0x1be>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34002cba:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002cbe:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
34002cc2:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
34002cc6:	2201      	movs	r2, #1
34002cc8:	71e2      	strb	r2, [r4, #7]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34002cca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34002cce:	2102      	movs	r1, #2
34002cd0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34002cd2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34002cd6:	f009 f8b3 	bl	3400be40 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34002cda:	2e00      	cmp	r6, #0
34002cdc:	da16      	bge.n	34002d0c <HAL_DCMIPP_IRQHandler+0x200>
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34002cde:	2d00      	cmp	r5, #0
34002ce0:	da14      	bge.n	34002d0c <HAL_DCMIPP_IRQHandler+0x200>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002ce2:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002ce4:	2102      	movs	r1, #2
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002ce6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002cea:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002cec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34002cf0:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34002cf4:	68a2      	ldr	r2, [r4, #8]
34002cf6:	f042 0220 	orr.w	r2, r2, #32
34002cfa:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
34002cfc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34002d00:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002d04:	2304      	movs	r3, #4
34002d06:	71e3      	strb	r3, [r4, #7]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002d08:	f7ff fefe 	bl	34002b08 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
34002d0c:	0670      	lsls	r0, r6, #25
34002d0e:	d514      	bpl.n	34002d3a <HAL_DCMIPP_IRQHandler+0x22e>
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
34002d10:	0669      	lsls	r1, r5, #25
34002d12:	d512      	bpl.n	34002d3a <HAL_DCMIPP_IRQHandler+0x22e>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34002d14:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d16:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34002d18:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002d1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
34002d20:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34002d24:	68a2      	ldr	r2, [r4, #8]
34002d26:	f042 0202 	orr.w	r2, r2, #2
34002d2a:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
34002d2c:	2240      	movs	r2, #64	@ 0x40
34002d2e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002d32:	2304      	movs	r3, #4
34002d34:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d36:	f7ff fee8 	bl	34002b0a <HAL_DCMIPP_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
34002d3a:	06b2      	lsls	r2, r6, #26
34002d3c:	d514      	bpl.n	34002d68 <HAL_DCMIPP_IRQHandler+0x25c>
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
34002d3e:	06ab      	lsls	r3, r5, #26
34002d40:	d512      	bpl.n	34002d68 <HAL_DCMIPP_IRQHandler+0x25c>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34002d42:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d44:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34002d46:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002d4a:	f022 0220 	bic.w	r2, r2, #32
34002d4e:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
34002d52:	68a2      	ldr	r2, [r4, #8]
34002d54:	f042 0201 	orr.w	r2, r2, #1
34002d58:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
34002d5a:	2220      	movs	r2, #32
34002d5c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002d60:	2304      	movs	r3, #4
34002d62:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d64:	f7ff fed1 	bl	34002b0a <HAL_DCMIPP_ErrorCallback>
}
34002d68:	bd70      	pop	{r4, r5, r6, pc}

34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @brief  Line Error callback on the Data Lane
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
34002d6a:	4770      	bx	lr

34002d6c <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
/**
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002d6c:	4770      	bx	lr

34002d6e <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
/**
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002d6e:	4770      	bx	lr

34002d70 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @brief  End Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34002d70:	4770      	bx	lr

34002d72 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @brief  Start Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34002d72:	4770      	bx	lr

34002d74 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @brief  Timer Counter Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
34002d74:	4770      	bx	lr

34002d76 <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @brief  Line Byte Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
34002d76:	4770      	bx	lr

34002d78 <HAL_DCMIPP_CSI_IRQHandler>:
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34002d78:	4bb5      	ldr	r3, [pc, #724]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
{
34002d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34002d7e:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
{
34002d82:	4604      	mov	r4, r0
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34002d84:	02b2      	lsls	r2, r6, #10
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
34002d86:	f8d3 8094 	ldr.w	r8, [r3, #148]	@ 0x94
  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
34002d8a:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
34002d8e:	f8d3 7084 	ldr.w	r7, [r3, #132]	@ 0x84
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34002d92:	d50d      	bpl.n	34002db0 <HAL_DCMIPP_CSI_IRQHandler+0x38>
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
34002d94:	02a9      	lsls	r1, r5, #10
34002d96:	d50b      	bpl.n	34002db0 <HAL_DCMIPP_CSI_IRQHandler+0x38>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
34002d98:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d9c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
34002da0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34002da4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34002da8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34002dac:	f7ff ffde 	bl	34002d6c <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34002db0:	0732      	lsls	r2, r6, #28
34002db2:	d515      	bpl.n	34002de0 <HAL_DCMIPP_CSI_IRQHandler+0x68>
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34002db4:	072b      	lsls	r3, r5, #28
34002db6:	d513      	bpl.n	34002de0 <HAL_DCMIPP_CSI_IRQHandler+0x68>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002db8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002dba:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002dbc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002dc0:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002dc2:	f013 0f04 	tst.w	r3, #4
34002dc6:	4ba2      	ldr	r3, [pc, #648]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34002dc8:	bf1e      	ittt	ne
34002dca:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002dce:	f022 0208 	bicne.w	r2, r2, #8
34002dd2:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34002dd6:	2208      	movs	r2, #8
34002dd8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002ddc:	f7ff ffcb 	bl	34002d76 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34002de0:	0770      	lsls	r0, r6, #29
34002de2:	d515      	bpl.n	34002e10 <HAL_DCMIPP_CSI_IRQHandler+0x98>
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34002de4:	0769      	lsls	r1, r5, #29
34002de6:	d513      	bpl.n	34002e10 <HAL_DCMIPP_CSI_IRQHandler+0x98>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002de8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002dea:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002dec:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002df0:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002df2:	f013 0f04 	tst.w	r3, #4
34002df6:	4b96      	ldr	r3, [pc, #600]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34002df8:	bf1e      	ittt	ne
34002dfa:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002dfe:	f022 0204 	bicne.w	r2, r2, #4
34002e02:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34002e06:	2204      	movs	r2, #4
34002e08:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002e0c:	f7ff ffb3 	bl	34002d76 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
34002e10:	07b2      	lsls	r2, r6, #30
34002e12:	d515      	bpl.n	34002e40 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
34002e14:	07ab      	lsls	r3, r5, #30
34002e16:	d513      	bpl.n	34002e40 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e18:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002e1a:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e1c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002e20:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e22:	f013 0f04 	tst.w	r3, #4
34002e26:	4b8a      	ldr	r3, [pc, #552]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
34002e28:	bf1e      	ittt	ne
34002e2a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002e2e:	f022 0202 	bicne.w	r2, r2, #2
34002e32:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
34002e36:	2202      	movs	r2, #2
34002e38:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002e3c:	f7ff ff9b 	bl	34002d76 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
34002e40:	07f0      	lsls	r0, r6, #31
34002e42:	d515      	bpl.n	34002e70 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
34002e44:	07e9      	lsls	r1, r5, #31
34002e46:	d513      	bpl.n	34002e70 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e48:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002e4a:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e4c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002e50:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e52:	f013 0f04 	tst.w	r3, #4
34002e56:	4b7e      	ldr	r3, [pc, #504]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34002e58:	bf1e      	ittt	ne
34002e5a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002e5e:	f022 0201 	bicne.w	r2, r2, #1
34002e62:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34002e66:	2201      	movs	r2, #1
34002e68:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002e6c:	f7ff ff83 	bl	34002d76 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34002e70:	0432      	lsls	r2, r6, #16
34002e72:	d516      	bpl.n	34002ea2 <HAL_DCMIPP_CSI_IRQHandler+0x12a>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34002e74:	042b      	lsls	r3, r5, #16
34002e76:	d514      	bpl.n	34002ea2 <HAL_DCMIPP_CSI_IRQHandler+0x12a>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e78:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002e7a:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e7c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002e80:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002e82:	f013 0f04 	tst.w	r3, #4
34002e86:	4b72      	ldr	r3, [pc, #456]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34002e88:	bf1e      	ittt	ne
34002e8a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002e8e:	f422 4200 	bicne.w	r2, r2, #32768	@ 0x8000
34002e92:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34002e96:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002e9a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002e9e:	f7ff ff67 	bl	34002d70 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34002ea2:	0470      	lsls	r0, r6, #17
34002ea4:	d516      	bpl.n	34002ed4 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34002ea6:	0469      	lsls	r1, r5, #17
34002ea8:	d514      	bpl.n	34002ed4 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002eaa:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002eac:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002eae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002eb2:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002eb4:	f013 0f04 	tst.w	r3, #4
34002eb8:	4b65      	ldr	r3, [pc, #404]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
34002eba:	bf1e      	ittt	ne
34002ebc:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002ec0:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
34002ec4:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
34002ec8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34002ecc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002ed0:	f7ff ff4e 	bl	34002d70 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34002ed4:	04b2      	lsls	r2, r6, #18
34002ed6:	d516      	bpl.n	34002f06 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
34002ed8:	04ab      	lsls	r3, r5, #18
34002eda:	d514      	bpl.n	34002f06 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002edc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002ede:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ee0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002ee4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ee6:	f013 0f04 	tst.w	r3, #4
34002eea:	4b59      	ldr	r3, [pc, #356]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34002eec:	bf1e      	ittt	ne
34002eee:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002ef2:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
34002ef6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34002efa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34002efe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002f02:	f7ff ff35 	bl	34002d70 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
34002f06:	04f0      	lsls	r0, r6, #19
34002f08:	d516      	bpl.n	34002f38 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34002f0a:	04e9      	lsls	r1, r5, #19
34002f0c:	d514      	bpl.n	34002f38 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002f0e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002f10:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002f12:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002f16:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002f18:	f013 0f04 	tst.w	r3, #4
34002f1c:	4b4c      	ldr	r3, [pc, #304]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
34002f1e:	bf1e      	ittt	ne
34002f20:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002f24:	f422 5280 	bicne.w	r2, r2, #4096	@ 0x1000
34002f28:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34002f2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34002f30:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002f34:	f7ff ff1c 	bl	34002d70 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34002f38:	0532      	lsls	r2, r6, #20
34002f3a:	d516      	bpl.n	34002f6a <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34002f3c:	052b      	lsls	r3, r5, #20
34002f3e:	d514      	bpl.n	34002f6a <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002f40:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002f42:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002f44:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002f48:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002f4a:	f013 0f04 	tst.w	r3, #4
34002f4e:	4b40      	ldr	r3, [pc, #256]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34002f50:	bf1e      	ittt	ne
34002f52:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002f56:	f422 6200 	bicne.w	r2, r2, #2048	@ 0x800
34002f5a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34002f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34002f62:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002f66:	f7ff ff04 	bl	34002d72 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34002f6a:	0570      	lsls	r0, r6, #21
34002f6c:	d516      	bpl.n	34002f9c <HAL_DCMIPP_CSI_IRQHandler+0x224>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34002f6e:	0569      	lsls	r1, r5, #21
34002f70:	d514      	bpl.n	34002f9c <HAL_DCMIPP_CSI_IRQHandler+0x224>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002f72:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002f74:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002f76:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002f7a:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002f7c:	f013 0f04 	tst.w	r3, #4
34002f80:	4b33      	ldr	r3, [pc, #204]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34002f82:	bf1e      	ittt	ne
34002f84:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002f88:	f422 6280 	bicne.w	r2, r2, #1024	@ 0x400
34002f8c:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34002f90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002f94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002f98:	f7ff feeb 	bl	34002d72 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34002f9c:	05b2      	lsls	r2, r6, #22
34002f9e:	d516      	bpl.n	34002fce <HAL_DCMIPP_CSI_IRQHandler+0x256>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34002fa0:	05ab      	lsls	r3, r5, #22
34002fa2:	d514      	bpl.n	34002fce <HAL_DCMIPP_CSI_IRQHandler+0x256>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002fa4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002fa6:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002fa8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002fac:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002fae:	f013 0f04 	tst.w	r3, #4
34002fb2:	4b27      	ldr	r3, [pc, #156]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34002fb4:	bf1e      	ittt	ne
34002fb6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002fba:	f422 7200 	bicne.w	r2, r2, #512	@ 0x200
34002fbe:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34002fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
34002fc6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002fca:	f7ff fed2 	bl	34002d72 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34002fce:	05f0      	lsls	r0, r6, #23
34002fd0:	d516      	bpl.n	34003000 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34002fd2:	05e9      	lsls	r1, r5, #23
34002fd4:	d514      	bpl.n	34003000 <HAL_DCMIPP_CSI_IRQHandler+0x288>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002fd6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002fd8:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002fda:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002fde:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002fe0:	f013 0f04 	tst.w	r3, #4
34002fe4:	4b1a      	ldr	r3, [pc, #104]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34002fe6:	bf1e      	ittt	ne
34002fe8:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002fec:	f422 7280 	bicne.w	r2, r2, #256	@ 0x100
34002ff0:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34002ff4:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002ff8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002ffc:	f7ff feb9 	bl	34002d72 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34003000:	0632      	lsls	r2, r6, #24
34003002:	d515      	bpl.n	34003030 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34003004:	062b      	lsls	r3, r5, #24
34003006:	d513      	bpl.n	34003030 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34003008:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
3400300a:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400300c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34003010:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34003012:	f013 0f04 	tst.w	r3, #4
34003016:	4b0e      	ldr	r3, [pc, #56]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34003018:	bf1e      	ittt	ne
3400301a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3400301e:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
34003022:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34003026:	2280      	movs	r2, #128	@ 0x80
34003028:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
3400302c:	f7ff fea2 	bl	34002d74 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34003030:	0670      	lsls	r0, r6, #25
34003032:	d519      	bpl.n	34003068 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34003034:	0669      	lsls	r1, r5, #25
34003036:	d517      	bpl.n	34003068 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34003038:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
3400303a:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400303c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34003040:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34003042:	f013 0f04 	tst.w	r3, #4
34003046:	4b02      	ldr	r3, [pc, #8]	@ (34003050 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34003048:	bf18      	it	ne
3400304a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3400304e:	e001      	b.n	34003054 <HAL_DCMIPP_CSI_IRQHandler+0x2dc>
34003050:	58006000 	.word	0x58006000
34003054:	bf1c      	itt	ne
34003056:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
3400305a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
3400305e:	2240      	movs	r2, #64	@ 0x40
34003060:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34003064:	f7ff fe86 	bl	34002d74 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34003068:	06b2      	lsls	r2, r6, #26
3400306a:	d515      	bpl.n	34003098 <HAL_DCMIPP_CSI_IRQHandler+0x320>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
3400306c:	06ab      	lsls	r3, r5, #26
3400306e:	d513      	bpl.n	34003098 <HAL_DCMIPP_CSI_IRQHandler+0x320>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34003070:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34003072:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34003074:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34003078:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400307a:	f013 0f04 	tst.w	r3, #4
3400307e:	4bb9      	ldr	r3, [pc, #740]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34003080:	bf1e      	ittt	ne
34003082:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34003086:	f022 0220 	bicne.w	r2, r2, #32
3400308a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
3400308e:	2220      	movs	r2, #32
34003090:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34003094:	f7ff fe6e 	bl	34002d74 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34003098:	06f0      	lsls	r0, r6, #27
3400309a:	d515      	bpl.n	340030c8 <HAL_DCMIPP_CSI_IRQHandler+0x350>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
3400309c:	06e9      	lsls	r1, r5, #27
3400309e:	d513      	bpl.n	340030c8 <HAL_DCMIPP_CSI_IRQHandler+0x350>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340030a0:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
340030a2:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340030a4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
340030a8:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340030aa:	f013 0f04 	tst.w	r3, #4
340030ae:	4bad      	ldr	r3, [pc, #692]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
340030b0:	bf1e      	ittt	ne
340030b2:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340030b6:	f022 0210 	bicne.w	r2, r2, #16
340030ba:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
340030be:	2210      	movs	r2, #16
340030c0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
340030c4:	f7ff fe56 	bl	34002d74 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
340030c8:	0072      	lsls	r2, r6, #1
340030ca:	d513      	bpl.n	340030f4 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
340030cc:	006b      	lsls	r3, r5, #1
340030ce:	d511      	bpl.n	340030f4 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
340030d0:	4ba4      	ldr	r3, [pc, #656]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340030d2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
340030d4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340030d8:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
340030dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
340030e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
340030e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
340030e8:	68a3      	ldr	r3, [r4, #8]
340030ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
340030ee:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340030f0:	f7ff fd0b 	bl	34002b0a <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
340030f4:	00b0      	lsls	r0, r6, #2
340030f6:	d513      	bpl.n	34003120 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
340030f8:	00a9      	lsls	r1, r5, #2
340030fa:	d511      	bpl.n	34003120 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
340030fc:	4b99      	ldr	r3, [pc, #612]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340030fe:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34003100:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34003104:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
34003108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
3400310c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34003110:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34003114:	68a3      	ldr	r3, [r4, #8]
34003116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3400311a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3400311c:	f7ff fcf5 	bl	34002b0a <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34003120:	00f2      	lsls	r2, r6, #3
34003122:	d513      	bpl.n	3400314c <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34003124:	00eb      	lsls	r3, r5, #3
34003126:	d511      	bpl.n	3400314c <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34003128:	4b8e      	ldr	r3, [pc, #568]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3400312a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
3400312c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34003130:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
34003134:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34003138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400313c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34003140:	68a3      	ldr	r3, [r4, #8]
34003142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
34003146:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34003148:	f7ff fcdf 	bl	34002b0a <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
3400314c:	0130      	lsls	r0, r6, #4
3400314e:	d513      	bpl.n	34003178 <HAL_DCMIPP_CSI_IRQHandler+0x400>
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34003150:	0129      	lsls	r1, r5, #4
34003152:	d511      	bpl.n	34003178 <HAL_DCMIPP_CSI_IRQHandler+0x400>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34003154:	4b83      	ldr	r3, [pc, #524]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34003156:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34003158:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400315c:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
34003160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34003164:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34003168:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
3400316c:	68a3      	ldr	r3, [r4, #8]
3400316e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
34003172:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34003174:	f7ff fcc9 	bl	34002b0a <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34003178:	0172      	lsls	r2, r6, #5
3400317a:	d513      	bpl.n	340031a4 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
3400317c:	016b      	lsls	r3, r5, #5
3400317e:	d511      	bpl.n	340031a4 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34003180:	4b78      	ldr	r3, [pc, #480]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34003182:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34003184:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34003188:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
3400318c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34003190:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34003194:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34003198:	68a3      	ldr	r3, [r4, #8]
3400319a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3400319e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340031a0:	f7ff fcb3 	bl	34002b0a <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
340031a4:	01b0      	lsls	r0, r6, #6
340031a6:	d513      	bpl.n	340031d0 <HAL_DCMIPP_CSI_IRQHandler+0x458>
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
340031a8:	01a9      	lsls	r1, r5, #6
340031aa:	d511      	bpl.n	340031d0 <HAL_DCMIPP_CSI_IRQHandler+0x458>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
340031ac:	4b6d      	ldr	r3, [pc, #436]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340031ae:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
340031b0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340031b4:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
340031b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
340031bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
340031c0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
340031c4:	68a3      	ldr	r3, [r4, #8]
340031c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
340031ca:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340031cc:	f7ff fc9d 	bl	34002b0a <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
340031d0:	01f2      	lsls	r2, r6, #7
340031d2:	d513      	bpl.n	340031fc <HAL_DCMIPP_CSI_IRQHandler+0x484>
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
340031d4:	01eb      	lsls	r3, r5, #7
340031d6:	d511      	bpl.n	340031fc <HAL_DCMIPP_CSI_IRQHandler+0x484>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
340031d8:	4b62      	ldr	r3, [pc, #392]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340031da:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
340031dc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340031e0:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
340031e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
340031e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340031ec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
340031f0:	68a3      	ldr	r3, [r4, #8]
340031f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
340031f6:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340031f8:	f7ff fc87 	bl	34002b0a <HAL_DCMIPP_ErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
340031fc:	f018 0f01 	tst.w	r8, #1
34003200:	d014      	beq.n	3400322c <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34003202:	07f8      	lsls	r0, r7, #31
34003204:	d512      	bpl.n	3400322c <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34003206:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34003208:	4b56      	ldr	r3, [pc, #344]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400320a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
3400320c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34003210:	f022 0201 	bic.w	r2, r2, #1
34003214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34003218:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
3400321c:	68a3      	ldr	r3, [r4, #8]
3400321e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34003222:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34003224:	2304      	movs	r3, #4
34003226:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34003228:	f7ff fd9f 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
3400322c:	f018 0f02 	tst.w	r8, #2
34003230:	d015      	beq.n	3400325e <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34003232:	07b9      	lsls	r1, r7, #30
34003234:	d513      	bpl.n	3400325e <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34003236:	4b4b      	ldr	r3, [pc, #300]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34003238:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
3400323a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400323e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34003240:	f022 0202 	bic.w	r2, r2, #2
34003244:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34003248:	2202      	movs	r2, #2
3400324a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
3400324e:	68a3      	ldr	r3, [r4, #8]
34003250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34003254:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34003256:	2304      	movs	r3, #4
34003258:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400325a:	f7ff fd86 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
3400325e:	f018 0f04 	tst.w	r8, #4
34003262:	d013      	beq.n	3400328c <HAL_DCMIPP_CSI_IRQHandler+0x514>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34003264:	077a      	lsls	r2, r7, #29
34003266:	d511      	bpl.n	3400328c <HAL_DCMIPP_CSI_IRQHandler+0x514>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34003268:	4b3e      	ldr	r3, [pc, #248]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400326a:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
3400326c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34003270:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34003272:	f022 0204 	bic.w	r2, r2, #4
34003276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
3400327a:	2204      	movs	r2, #4
3400327c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34003280:	68a3      	ldr	r3, [r4, #8]
34003282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34003286:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34003288:	f7ff fd6f 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
3400328c:	f018 0f08 	tst.w	r8, #8
34003290:	d013      	beq.n	340032ba <HAL_DCMIPP_CSI_IRQHandler+0x542>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34003292:	073b      	lsls	r3, r7, #28
34003294:	d511      	bpl.n	340032ba <HAL_DCMIPP_CSI_IRQHandler+0x542>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34003296:	4b33      	ldr	r3, [pc, #204]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34003298:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
3400329a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400329e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
340032a0:	f022 0208 	bic.w	r2, r2, #8
340032a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
340032a8:	2208      	movs	r2, #8
340032aa:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
340032ae:	68a3      	ldr	r3, [r4, #8]
340032b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
340032b4:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340032b6:	f7ff fd58 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
340032ba:	f018 0f10 	tst.w	r8, #16
340032be:	d013      	beq.n	340032e8 <HAL_DCMIPP_CSI_IRQHandler+0x570>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
340032c0:	06f8      	lsls	r0, r7, #27
340032c2:	d511      	bpl.n	340032e8 <HAL_DCMIPP_CSI_IRQHandler+0x570>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
340032c4:	4b27      	ldr	r3, [pc, #156]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340032c6:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
340032c8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340032cc:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
340032ce:	f022 0210 	bic.w	r2, r2, #16
340032d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
340032d6:	2210      	movs	r2, #16
340032d8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340032dc:	68a3      	ldr	r3, [r4, #8]
340032de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340032e2:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340032e4:	f7ff fd41 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
340032e8:	f418 7f80 	tst.w	r8, #256	@ 0x100
340032ec:	d016      	beq.n	3400331c <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
340032ee:	05f9      	lsls	r1, r7, #23
340032f0:	d514      	bpl.n	3400331c <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340032f2:	4b1c      	ldr	r3, [pc, #112]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340032f4:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340032f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340032fa:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340032fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34003300:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34003304:	f44f 7280 	mov.w	r2, #256	@ 0x100
34003308:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
3400330c:	68a3      	ldr	r3, [r4, #8]
3400330e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34003312:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34003314:	2304      	movs	r3, #4
34003316:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003318:	f7ff fd27 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
3400331c:	f418 7f00 	tst.w	r8, #512	@ 0x200
34003320:	d016      	beq.n	34003350 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34003322:	05ba      	lsls	r2, r7, #22
34003324:	d514      	bpl.n	34003350 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34003326:	4b0f      	ldr	r3, [pc, #60]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003328:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
3400332a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400332e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34003330:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34003334:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34003338:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400333c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34003340:	68a3      	ldr	r3, [r4, #8]
34003342:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34003346:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34003348:	2304      	movs	r3, #4
3400334a:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400334c:	f7ff fd0d 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34003350:	f418 6f80 	tst.w	r8, #1024	@ 0x400
34003354:	d017      	beq.n	34003386 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34003356:	057b      	lsls	r3, r7, #21
34003358:	d515      	bpl.n	34003386 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3400335a:	4b02      	ldr	r3, [pc, #8]	@ (34003364 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400335c:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3400335e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34003362:	e001      	b.n	34003368 <HAL_DCMIPP_CSI_IRQHandler+0x5f0>
34003364:	58006000 	.word	0x58006000
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003368:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3400336a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
3400336e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34003372:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34003376:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
3400337a:	68a3      	ldr	r3, [r4, #8]
3400337c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34003380:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003382:	f7ff fcf2 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34003386:	f418 6f00 	tst.w	r8, #2048	@ 0x800
3400338a:	d014      	beq.n	340033b6 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
3400338c:	0538      	lsls	r0, r7, #20
3400338e:	d512      	bpl.n	340033b6 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34003390:	4b1f      	ldr	r3, [pc, #124]	@ (34003410 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003392:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34003394:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003398:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
3400339a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
3400339e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
340033a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
340033a6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
340033aa:	68a3      	ldr	r3, [r4, #8]
340033ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
340033b0:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340033b2:	f7ff fcda 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
340033b6:	f418 5f80 	tst.w	r8, #4096	@ 0x1000
340033ba:	d014      	beq.n	340033e6 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
340033bc:	04f9      	lsls	r1, r7, #19
340033be:	d512      	bpl.n	340033e6 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340033c0:	4b13      	ldr	r3, [pc, #76]	@ (34003410 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340033c2:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340033c4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340033c8:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340033ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
340033ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340033d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340033d6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340033da:	68a3      	ldr	r3, [r4, #8]
340033dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340033e0:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340033e2:	f7ff fcc2 	bl	34002d6a <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
340033e6:	03f2      	lsls	r2, r6, #15
340033e8:	d50f      	bpl.n	3400340a <HAL_DCMIPP_CSI_IRQHandler+0x692>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
340033ea:	03eb      	lsls	r3, r5, #15
340033ec:	d50d      	bpl.n	3400340a <HAL_DCMIPP_CSI_IRQHandler+0x692>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340033ee:	4b08      	ldr	r3, [pc, #32]	@ (34003410 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340033f0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340033f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340033f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
340033fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
340033fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34003402:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34003406:	f7ff fcb2 	bl	34002d6e <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
}
3400340a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400340e:	bf00      	nop
34003410:	58006000 	.word	0x58006000

34003414 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
34003414:	4770      	bx	lr

34003416 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
34003416:	4770      	bx	lr

34003418 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
34003418:	6803      	ldr	r3, [r0, #0]
{
3400341a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
3400341c:	685e      	ldr	r6, [r3, #4]
{
3400341e:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
34003420:	07f2      	lsls	r2, r6, #31
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
34003422:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
34003424:	d514      	bpl.n	34003450 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
34003426:	05e9      	lsls	r1, r5, #23
34003428:	d512      	bpl.n	34003450 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
3400342a:	681a      	ldr	r2, [r3, #0]
3400342c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34003430:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
34003432:	6e42      	ldr	r2, [r0, #100]	@ 0x64
34003434:	f042 0201 	orr.w	r2, r2, #1
34003438:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
3400343a:	2201      	movs	r2, #1
3400343c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
3400343e:	2304      	movs	r3, #4
34003440:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34003444:	2300      	movs	r3, #0
34003446:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
3400344a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
3400344c:	b103      	cbz	r3, 34003450 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
3400344e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
34003450:	06b2      	lsls	r2, r6, #26
34003452:	d516      	bpl.n	34003482 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
34003454:	04ab      	lsls	r3, r5, #18
34003456:	d514      	bpl.n	34003482 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
34003458:	6823      	ldr	r3, [r4, #0]
3400345a:	681a      	ldr	r2, [r3, #0]
3400345c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
34003460:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
34003462:	2220      	movs	r2, #32
34003464:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
34003466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003468:	f043 0302 	orr.w	r3, r3, #2
3400346c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
3400346e:	2304      	movs	r3, #4
34003470:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34003474:	2300      	movs	r3, #0
34003476:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
3400347a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400347c:	b10b      	cbz	r3, 34003482 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
3400347e:	4620      	mov	r0, r4
34003480:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
34003482:	0730      	lsls	r0, r6, #28
34003484:	d516      	bpl.n	340034b4 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
34003486:	0529      	lsls	r1, r5, #20
34003488:	d514      	bpl.n	340034b4 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
3400348a:	6823      	ldr	r3, [r4, #0]
3400348c:	681a      	ldr	r2, [r3, #0]
3400348e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34003492:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
34003494:	2208      	movs	r2, #8
34003496:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
34003498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400349a:	f043 0304 	orr.w	r3, r3, #4
3400349e:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
340034a0:	2304      	movs	r3, #4
340034a2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
340034a6:	2300      	movs	r3, #0
340034a8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
340034ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340034ae:	b10b      	cbz	r3, 340034b4 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
340034b0:	4620      	mov	r0, r4
340034b2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
340034b4:	0772      	lsls	r2, r6, #29
340034b6:	d50b      	bpl.n	340034d0 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
340034b8:	056b      	lsls	r3, r5, #21
340034ba:	d509      	bpl.n	340034d0 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
340034bc:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
340034be:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
340034c0:	681a      	ldr	r2, [r3, #0]
340034c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
340034c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
340034c8:	2204      	movs	r2, #4
340034ca:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
340034cc:	f7ff ffa2 	bl	34003414 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
340034d0:	07b0      	lsls	r0, r6, #30
340034d2:	d514      	bpl.n	340034fe <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
340034d4:	05a9      	lsls	r1, r5, #22
340034d6:	d512      	bpl.n	340034fe <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
340034d8:	6823      	ldr	r3, [r4, #0]
340034da:	681a      	ldr	r2, [r3, #0]
340034dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
340034e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
340034e2:	2202      	movs	r2, #2
340034e4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
340034e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340034e8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
340034ea:	2301      	movs	r3, #1
340034ec:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
340034f0:	2300      	movs	r3, #0
340034f2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
340034f6:	6a23      	ldr	r3, [r4, #32]
340034f8:	b10b      	cbz	r3, 340034fe <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
340034fa:	4620      	mov	r0, r4
340034fc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
340034fe:	06f2      	lsls	r2, r6, #27
34003500:	d513      	bpl.n	3400352a <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
34003502:	04eb      	lsls	r3, r5, #19
34003504:	d511      	bpl.n	3400352a <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34003506:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34003508:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
3400350a:	681a      	ldr	r2, [r3, #0]
3400350c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34003510:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
34003512:	2210      	movs	r2, #16
34003514:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34003516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003518:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
3400351a:	2301      	movs	r3, #1
3400351c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34003520:	2300      	movs	r3, #0
34003522:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34003526:	f7ff ff76 	bl	34003416 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
3400352a:	bd70      	pop	{r4, r5, r6, pc}

3400352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
3400352c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34003530:	4b47      	ldr	r3, [pc, #284]	@ (34003650 <HAL_GPIO_Init+0x124>)
{
34003532:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34003534:	4298      	cmp	r0, r3
{
34003536:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34003538:	d054      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
3400353a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400353e:	4298      	cmp	r0, r3
34003540:	d050      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
34003542:	4b44      	ldr	r3, [pc, #272]	@ (34003654 <HAL_GPIO_Init+0x128>)
34003544:	4298      	cmp	r0, r3
34003546:	d04d      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
34003548:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400354c:	4298      	cmp	r0, r3
3400354e:	d049      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
34003550:	4b41      	ldr	r3, [pc, #260]	@ (34003658 <HAL_GPIO_Init+0x12c>)
34003552:	4298      	cmp	r0, r3
34003554:	d046      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
34003556:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400355a:	4298      	cmp	r0, r3
3400355c:	d042      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
3400355e:	4b3f      	ldr	r3, [pc, #252]	@ (3400365c <HAL_GPIO_Init+0x130>)
34003560:	4298      	cmp	r0, r3
34003562:	d03f      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
34003564:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003568:	4298      	cmp	r0, r3
3400356a:	d03b      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
3400356c:	4b3c      	ldr	r3, [pc, #240]	@ (34003660 <HAL_GPIO_Init+0x134>)
3400356e:	4298      	cmp	r0, r3
34003570:	d038      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
34003572:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003576:	4298      	cmp	r0, r3
34003578:	d034      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
3400357a:	4b3a      	ldr	r3, [pc, #232]	@ (34003664 <HAL_GPIO_Init+0x138>)
3400357c:	4298      	cmp	r0, r3
3400357e:	d031      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
34003580:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003584:	4298      	cmp	r0, r3
34003586:	d02d      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
34003588:	4b37      	ldr	r3, [pc, #220]	@ (34003668 <HAL_GPIO_Init+0x13c>)
3400358a:	4298      	cmp	r0, r3
3400358c:	d02a      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
3400358e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003592:	4298      	cmp	r0, r3
34003594:	d026      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
34003596:	4b35      	ldr	r3, [pc, #212]	@ (3400366c <HAL_GPIO_Init+0x140>)
34003598:	4298      	cmp	r0, r3
3400359a:	d023      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
3400359c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340035a0:	4298      	cmp	r0, r3
340035a2:	d01f      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
340035a4:	4b32      	ldr	r3, [pc, #200]	@ (34003670 <HAL_GPIO_Init+0x144>)
340035a6:	4298      	cmp	r0, r3
340035a8:	d01c      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
340035aa:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340035ae:	4298      	cmp	r0, r3
340035b0:	d018      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
340035b2:	4b30      	ldr	r3, [pc, #192]	@ (34003674 <HAL_GPIO_Init+0x148>)
340035b4:	4298      	cmp	r0, r3
340035b6:	d015      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
340035b8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340035bc:	4298      	cmp	r0, r3
340035be:	d011      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
340035c0:	4b2d      	ldr	r3, [pc, #180]	@ (34003678 <HAL_GPIO_Init+0x14c>)
340035c2:	4298      	cmp	r0, r3
340035c4:	d00e      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
340035c6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340035ca:	4298      	cmp	r0, r3
340035cc:	d00a      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
340035ce:	4b2b      	ldr	r3, [pc, #172]	@ (3400367c <HAL_GPIO_Init+0x150>)
340035d0:	4298      	cmp	r0, r3
340035d2:	d007      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
340035d4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340035d8:	4298      	cmp	r0, r3
340035da:	d003      	beq.n	340035e4 <HAL_GPIO_Init+0xb8>
340035dc:	21ad      	movs	r1, #173	@ 0xad
340035de:	4828      	ldr	r0, [pc, #160]	@ (34003680 <HAL_GPIO_Init+0x154>)
340035e0:	f7fe f898 	bl	34001714 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
340035e4:	6833      	ldr	r3, [r6, #0]
340035e6:	b29a      	uxth	r2, r3
340035e8:	b112      	cbz	r2, 340035f0 <HAL_GPIO_Init+0xc4>
340035ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340035ee:	d303      	bcc.n	340035f8 <HAL_GPIO_Init+0xcc>
340035f0:	21ae      	movs	r1, #174	@ 0xae
340035f2:	4823      	ldr	r0, [pc, #140]	@ (34003680 <HAL_GPIO_Init+0x154>)
340035f4:	f7fe f88e 	bl	34001714 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
340035f8:	6873      	ldr	r3, [r6, #4]
340035fa:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
340035fe:	d011      	beq.n	34003624 <HAL_GPIO_Init+0xf8>
34003600:	d81d      	bhi.n	3400363e <HAL_GPIO_Init+0x112>
34003602:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34003606:	d00d      	beq.n	34003624 <HAL_GPIO_Init+0xf8>
34003608:	d809      	bhi.n	3400361e <HAL_GPIO_Init+0xf2>
3400360a:	2b03      	cmp	r3, #3
3400360c:	d90a      	bls.n	34003624 <HAL_GPIO_Init+0xf8>
3400360e:	3b11      	subs	r3, #17
34003610:	2b01      	cmp	r3, #1
34003612:	d907      	bls.n	34003624 <HAL_GPIO_Init+0xf8>
34003614:	21af      	movs	r1, #175	@ 0xaf
34003616:	481a      	ldr	r0, [pc, #104]	@ (34003680 <HAL_GPIO_Init+0x154>)
34003618:	f7fe f87c 	bl	34001714 <assert_failed>
3400361c:	e002      	b.n	34003624 <HAL_GPIO_Init+0xf8>
3400361e:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
34003622:	d1f7      	bne.n	34003614 <HAL_GPIO_Init+0xe8>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003624:	f04f 0900 	mov.w	r9, #0
34003628:	464f      	mov	r7, r9
3400362a:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 34003650 <HAL_GPIO_Init+0x124>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
3400362e:	f8df a054 	ldr.w	sl, [pc, #84]	@ 34003684 <HAL_GPIO_Init+0x158>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34003632:	6835      	ldr	r5, [r6, #0]
34003634:	fa35 f307 	lsrs.w	r3, r5, r7
34003638:	d126      	bne.n	34003688 <HAL_GPIO_Init+0x15c>
      }
    }

    position++;
  }
}
3400363a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400363e:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34003642:	d0ef      	beq.n	34003624 <HAL_GPIO_Init+0xf8>
34003644:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34003648:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
3400364c:	e7e9      	b.n	34003622 <HAL_GPIO_Init+0xf6>
3400364e:	bf00      	nop
34003650:	56020000 	.word	0x56020000
34003654:	56020400 	.word	0x56020400
34003658:	56020800 	.word	0x56020800
3400365c:	56020c00 	.word	0x56020c00
34003660:	56021000 	.word	0x56021000
34003664:	56021400 	.word	0x56021400
34003668:	56021800 	.word	0x56021800
3400366c:	56021c00 	.word	0x56021c00
34003670:	56023400 	.word	0x56023400
34003674:	56023800 	.word	0x56023800
34003678:	56023c00 	.word	0x56023c00
3400367c:	56024000 	.word	0x56024000
34003680:	34010c36 	.word	0x34010c36
34003684:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34003688:	f04f 0b01 	mov.w	fp, #1
3400368c:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
34003690:	ea1b 0505 	ands.w	r5, fp, r5
34003694:	f000 8130 	beq.w	340038f8 <HAL_GPIO_Init+0x3cc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34003698:	6873      	ldr	r3, [r6, #4]
3400369a:	f003 0303 	and.w	r3, r3, #3
3400369e:	3b01      	subs	r3, #1
340036a0:	2b01      	cmp	r3, #1
340036a2:	d81a      	bhi.n	340036da <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
340036a4:	68f3      	ldr	r3, [r6, #12]
340036a6:	2b03      	cmp	r3, #3
340036a8:	d903      	bls.n	340036b2 <HAL_GPIO_Init+0x186>
340036aa:	21be      	movs	r1, #190	@ 0xbe
340036ac:	489e      	ldr	r0, [pc, #632]	@ (34003928 <HAL_GPIO_Init+0x3fc>)
340036ae:	f7fe f831 	bl	34001714 <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340036b2:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
340036b4:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340036b6:	fa03 f309 	lsl.w	r3, r3, r9
340036ba:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340036be:	68f3      	ldr	r3, [r6, #12]
340036c0:	fa03 f309 	lsl.w	r3, r3, r9
340036c4:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
340036c6:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
340036c8:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
340036ca:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
340036cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
340036d0:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
340036d4:	40bb      	lsls	r3, r7
340036d6:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
340036d8:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
340036da:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
340036de:	f003 0303 	and.w	r3, r3, #3
340036e2:	2b03      	cmp	r3, #3
340036e4:	d102      	bne.n	340036ec <HAL_GPIO_Init+0x1c0>
340036e6:	2a01      	cmp	r2, #1
340036e8:	f000 8082 	beq.w	340037f0 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
340036ec:	2a02      	cmp	r2, #2
340036ee:	d903      	bls.n	340036f8 <HAL_GPIO_Init+0x1cc>
340036f0:	21d1      	movs	r1, #209	@ 0xd1
340036f2:	488d      	ldr	r0, [pc, #564]	@ (34003928 <HAL_GPIO_Init+0x3fc>)
340036f4:	f7fe f80e 	bl	34001714 <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
340036f8:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
340036fa:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
340036fc:	fa03 f309 	lsl.w	r3, r3, r9
34003700:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34003704:	68b3      	ldr	r3, [r6, #8]
34003706:	fa03 f309 	lsl.w	r3, r3, r9
3400370a:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
3400370c:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
3400370e:	6873      	ldr	r3, [r6, #4]
34003710:	f003 0303 	and.w	r3, r3, #3
34003714:	2b02      	cmp	r3, #2
34003716:	d16b      	bne.n	340037f0 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34003718:	4544      	cmp	r4, r8
3400371a:	d053      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
3400371c:	4b83      	ldr	r3, [pc, #524]	@ (3400392c <HAL_GPIO_Init+0x400>)
3400371e:	429c      	cmp	r4, r3
34003720:	d050      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003722:	4b83      	ldr	r3, [pc, #524]	@ (34003930 <HAL_GPIO_Init+0x404>)
34003724:	429c      	cmp	r4, r3
34003726:	d04d      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003728:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400372c:	429c      	cmp	r4, r3
3400372e:	d049      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003730:	4b80      	ldr	r3, [pc, #512]	@ (34003934 <HAL_GPIO_Init+0x408>)
34003732:	429c      	cmp	r4, r3
34003734:	d046      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003736:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400373a:	429c      	cmp	r4, r3
3400373c:	d042      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
3400373e:	4b7e      	ldr	r3, [pc, #504]	@ (34003938 <HAL_GPIO_Init+0x40c>)
34003740:	429c      	cmp	r4, r3
34003742:	d03f      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003744:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003748:	429c      	cmp	r4, r3
3400374a:	d03b      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
3400374c:	4b7b      	ldr	r3, [pc, #492]	@ (3400393c <HAL_GPIO_Init+0x410>)
3400374e:	429c      	cmp	r4, r3
34003750:	d038      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003752:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003756:	429c      	cmp	r4, r3
34003758:	d034      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
3400375a:	4b79      	ldr	r3, [pc, #484]	@ (34003940 <HAL_GPIO_Init+0x414>)
3400375c:	429c      	cmp	r4, r3
3400375e:	d031      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003760:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003764:	429c      	cmp	r4, r3
34003766:	d02d      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003768:	4b76      	ldr	r3, [pc, #472]	@ (34003944 <HAL_GPIO_Init+0x418>)
3400376a:	429c      	cmp	r4, r3
3400376c:	d02a      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
3400376e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003772:	429c      	cmp	r4, r3
34003774:	d026      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003776:	4b74      	ldr	r3, [pc, #464]	@ (34003948 <HAL_GPIO_Init+0x41c>)
34003778:	429c      	cmp	r4, r3
3400377a:	d023      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
3400377c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003780:	429c      	cmp	r4, r3
34003782:	d01f      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003784:	4b71      	ldr	r3, [pc, #452]	@ (3400394c <HAL_GPIO_Init+0x420>)
34003786:	429c      	cmp	r4, r3
34003788:	d01c      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
3400378a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400378e:	429c      	cmp	r4, r3
34003790:	d018      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003792:	4b6f      	ldr	r3, [pc, #444]	@ (34003950 <HAL_GPIO_Init+0x424>)
34003794:	429c      	cmp	r4, r3
34003796:	d015      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
34003798:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400379c:	429c      	cmp	r4, r3
3400379e:	d011      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
340037a0:	4b6c      	ldr	r3, [pc, #432]	@ (34003954 <HAL_GPIO_Init+0x428>)
340037a2:	429c      	cmp	r4, r3
340037a4:	d00e      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
340037a6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340037aa:	429c      	cmp	r4, r3
340037ac:	d00a      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
340037ae:	4b6a      	ldr	r3, [pc, #424]	@ (34003958 <HAL_GPIO_Init+0x42c>)
340037b0:	429c      	cmp	r4, r3
340037b2:	d007      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
340037b4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340037b8:	429c      	cmp	r4, r3
340037ba:	d003      	beq.n	340037c4 <HAL_GPIO_Init+0x298>
340037bc:	21de      	movs	r1, #222	@ 0xde
340037be:	485a      	ldr	r0, [pc, #360]	@ (34003928 <HAL_GPIO_Init+0x3fc>)
340037c0:	f7fd ffa8 	bl	34001714 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
340037c4:	6933      	ldr	r3, [r6, #16]
340037c6:	2b0f      	cmp	r3, #15
340037c8:	d903      	bls.n	340037d2 <HAL_GPIO_Init+0x2a6>
340037ca:	21df      	movs	r1, #223	@ 0xdf
340037cc:	4856      	ldr	r0, [pc, #344]	@ (34003928 <HAL_GPIO_Init+0x3fc>)
340037ce:	f7fd ffa1 	bl	34001714 <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
340037d2:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
340037d4:	08fa      	lsrs	r2, r7, #3
340037d6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
340037da:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
340037de:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
340037e0:	0089      	lsls	r1, r1, #2
340037e2:	408b      	lsls	r3, r1
340037e4:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
340037e8:	6933      	ldr	r3, [r6, #16]
340037ea:	408b      	lsls	r3, r1
340037ec:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
340037ee:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
340037f0:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
340037f2:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
340037f4:	fa03 f209 	lsl.w	r2, r3, r9
340037f8:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
340037fc:	6872      	ldr	r2, [r6, #4]
340037fe:	ea02 0103 	and.w	r1, r2, r3
34003802:	fa01 f109 	lsl.w	r1, r1, r9
34003806:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34003808:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
3400380c:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
3400380e:	d073      	beq.n	340038f8 <HAL_GPIO_Init+0x3cc>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003810:	f04f 0e0f 	mov.w	lr, #15
34003814:	f027 0103 	bic.w	r1, r7, #3
34003818:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
3400381c:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
34003820:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
34003824:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003828:	4098      	lsls	r0, r3
3400382a:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
3400382e:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003830:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003834:	d064      	beq.n	34003900 <HAL_GPIO_Init+0x3d4>
34003836:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 34003930 <HAL_GPIO_Init+0x404>
3400383a:	4574      	cmp	r4, lr
3400383c:	d062      	beq.n	34003904 <HAL_GPIO_Init+0x3d8>
3400383e:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
34003842:	4574      	cmp	r4, lr
34003844:	d060      	beq.n	34003908 <HAL_GPIO_Init+0x3dc>
34003846:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
3400384a:	4574      	cmp	r4, lr
3400384c:	d020      	beq.n	34003890 <HAL_GPIO_Init+0x364>
3400384e:	4b3b      	ldr	r3, [pc, #236]	@ (3400393c <HAL_GPIO_Init+0x410>)
34003850:	429c      	cmp	r4, r3
34003852:	d05b      	beq.n	3400390c <HAL_GPIO_Init+0x3e0>
34003854:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003858:	429c      	cmp	r4, r3
3400385a:	d059      	beq.n	34003910 <HAL_GPIO_Init+0x3e4>
3400385c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003860:	429c      	cmp	r4, r3
34003862:	d057      	beq.n	34003914 <HAL_GPIO_Init+0x3e8>
34003864:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003868:	429c      	cmp	r4, r3
3400386a:	d055      	beq.n	34003918 <HAL_GPIO_Init+0x3ec>
3400386c:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34003870:	429c      	cmp	r4, r3
34003872:	d053      	beq.n	3400391c <HAL_GPIO_Init+0x3f0>
34003874:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003878:	429c      	cmp	r4, r3
3400387a:	d051      	beq.n	34003920 <HAL_GPIO_Init+0x3f4>
3400387c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003880:	429c      	cmp	r4, r3
34003882:	d04f      	beq.n	34003924 <HAL_GPIO_Init+0x3f8>
34003884:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003888:	429c      	cmp	r4, r3
3400388a:	bf14      	ite	ne
3400388c:	2310      	movne	r3, #16
3400388e:	230b      	moveq	r3, #11
34003890:	4083      	lsls	r3, r0
34003892:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
34003896:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
34003898:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
3400389c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
340038a0:	ea23 0105 	bic.w	r1, r3, r5
340038a4:	ea43 0305 	orr.w	r3, r3, r5
340038a8:	bf08      	it	eq
340038aa:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
340038ac:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
340038b0:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
340038b4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
340038b8:	ea23 0105 	bic.w	r1, r3, r5
340038bc:	ea43 0305 	orr.w	r3, r3, r5
340038c0:	bf08      	it	eq
340038c2:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
340038c4:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
340038c8:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
340038cc:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
340038d0:	ea23 0105 	bic.w	r1, r3, r5
340038d4:	ea43 0305 	orr.w	r3, r3, r5
340038d8:	bf08      	it	eq
340038da:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
340038dc:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
340038e0:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
340038e4:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
340038e8:	ea23 0105 	bic.w	r1, r3, r5
340038ec:	ea45 0503 	orr.w	r5, r5, r3
340038f0:	bf08      	it	eq
340038f2:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
340038f4:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
340038f8:	3701      	adds	r7, #1
340038fa:	f109 0902 	add.w	r9, r9, #2
340038fe:	e698      	b.n	34003632 <HAL_GPIO_Init+0x106>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003900:	2300      	movs	r3, #0
34003902:	e7c5      	b.n	34003890 <HAL_GPIO_Init+0x364>
34003904:	2301      	movs	r3, #1
34003906:	e7c3      	b.n	34003890 <HAL_GPIO_Init+0x364>
34003908:	2302      	movs	r3, #2
3400390a:	e7c1      	b.n	34003890 <HAL_GPIO_Init+0x364>
3400390c:	2304      	movs	r3, #4
3400390e:	e7bf      	b.n	34003890 <HAL_GPIO_Init+0x364>
34003910:	2305      	movs	r3, #5
34003912:	e7bd      	b.n	34003890 <HAL_GPIO_Init+0x364>
34003914:	2306      	movs	r3, #6
34003916:	e7bb      	b.n	34003890 <HAL_GPIO_Init+0x364>
34003918:	2307      	movs	r3, #7
3400391a:	e7b9      	b.n	34003890 <HAL_GPIO_Init+0x364>
3400391c:	2308      	movs	r3, #8
3400391e:	e7b7      	b.n	34003890 <HAL_GPIO_Init+0x364>
34003920:	2309      	movs	r3, #9
34003922:	e7b5      	b.n	34003890 <HAL_GPIO_Init+0x364>
34003924:	230a      	movs	r3, #10
34003926:	e7b3      	b.n	34003890 <HAL_GPIO_Init+0x364>
34003928:	34010c36 	.word	0x34010c36
3400392c:	46020000 	.word	0x46020000
34003930:	56020400 	.word	0x56020400
34003934:	56020800 	.word	0x56020800
34003938:	56020c00 	.word	0x56020c00
3400393c:	56021000 	.word	0x56021000
34003940:	56021400 	.word	0x56021400
34003944:	56021800 	.word	0x56021800
34003948:	56021c00 	.word	0x56021c00
3400394c:	56023400 	.word	0x56023400
34003950:	56023800 	.word	0x56023800
34003954:	56023c00 	.word	0x56023c00
34003958:	56024000 	.word	0x56024000

3400395c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
3400395c:	b570      	push	{r4, r5, r6, lr}
3400395e:	4605      	mov	r5, r0
34003960:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34003962:	460c      	mov	r4, r1
34003964:	b921      	cbnz	r1, 34003970 <HAL_GPIO_WritePin+0x14>
34003966:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
3400396a:	4808      	ldr	r0, [pc, #32]	@ (3400398c <HAL_GPIO_WritePin+0x30>)
3400396c:	f7fd fed2 	bl	34001714 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34003970:	2e01      	cmp	r6, #1
34003972:	d906      	bls.n	34003982 <HAL_GPIO_WritePin+0x26>
34003974:	f240 11a1 	movw	r1, #417	@ 0x1a1
34003978:	4804      	ldr	r0, [pc, #16]	@ (3400398c <HAL_GPIO_WritePin+0x30>)
3400397a:	f7fd fecb 	bl	34001714 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
3400397e:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34003980:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
34003982:	2e00      	cmp	r6, #0
34003984:	d1fb      	bne.n	3400397e <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34003986:	62ac      	str	r4, [r5, #40]	@ 0x28
}
34003988:	e7fa      	b.n	34003980 <HAL_GPIO_WritePin+0x24>
3400398a:	bf00      	nop
3400398c:	34010c36 	.word	0x34010c36

34003990 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
34003990:	b570      	push	{r4, r5, r6, lr}
34003992:	f001 060f 	and.w	r6, r1, #15
34003996:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
3400399a:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
3400399e:	4605      	mov	r5, r0
340039a0:	ea4f 0484 	mov.w	r4, r4, lsl #2
340039a4:	f04f 0024 	mov.w	r0, #36	@ 0x24
  if ((ep_addr & 0x80U) == 0x80U)
340039a8:	d020      	beq.n	340039ec <HAL_PCD_EP_Open+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340039aa:	f104 0114 	add.w	r1, r4, #20
    ep->is_in = 1U;
340039ae:	2401      	movs	r4, #1
340039b0:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340039b4:	4429      	add	r1, r5
    ep->is_in = 1U;
340039b6:	7544      	strb	r4, [r0, #21]
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
340039b8:	f3c2 020a 	ubfx	r2, r2, #0, #11
340039bc:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

  if (ep->is_in != 0U)
340039be:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
340039c0:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
340039c2:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
340039c4:	b102      	cbz	r2, 340039c8 <HAL_PCD_EP_Open+0x38>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
340039c6:	834e      	strh	r6, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
340039c8:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
340039ca:	bf04      	itt	eq
340039cc:	2300      	moveq	r3, #0
340039ce:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
340039d0:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
340039d4:	2b01      	cmp	r3, #1
340039d6:	d012      	beq.n	340039fe <HAL_PCD_EP_Open+0x6e>
340039d8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
340039da:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
340039dc:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
340039e0:	f007 ffcb 	bl	3400b97a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
340039e4:	2000      	movs	r0, #0
340039e6:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494

  return ret;
}
340039ea:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
340039ec:	f504 7115 	add.w	r1, r4, #596	@ 0x254
    ep->is_in = 0U;
340039f0:	2400      	movs	r4, #0
340039f2:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
340039f6:	4429      	add	r1, r5
    ep->is_in = 0U;
340039f8:	f880 4255 	strb.w	r4, [r0, #597]	@ 0x255
340039fc:	e7dc      	b.n	340039b8 <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
340039fe:	2002      	movs	r0, #2
34003a00:	e7f3      	b.n	340039ea <HAL_PCD_EP_Open+0x5a>

34003a02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
34003a02:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003a04:	2424      	movs	r4, #36	@ 0x24
34003a06:	f001 050f 	and.w	r5, r1, #15
34003a0a:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
34003a0e:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
34003a12:	e9c4 2398 	strd	r2, r3, [r4, #608]	@ 0x260
  ep->xfer_count = 0U;
34003a16:	2300      	movs	r3, #0
{
34003a18:	4616      	mov	r6, r2
  ep->xfer_count = 0U;
34003a1a:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
  ep->is_in = 0U;
34003a1e:	f884 3255 	strb.w	r3, [r4, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
34003a22:	f884 5254 	strb.w	r5, [r4, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
34003a26:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003a28:	f501 7115 	add.w	r1, r1, #596	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
34003a2c:	2a01      	cmp	r2, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
34003a2e:	bf08      	it	eq
34003a30:	f8c4 6270 	streq.w	r6, [r4, #624]	@ 0x270
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
34003a34:	6800      	ldr	r0, [r0, #0]
34003a36:	f008 f833 	bl	3400baa0 <USB_EPStartXfer>

  return HAL_OK;
}
34003a3a:	2000      	movs	r0, #0
34003a3c:	bd70      	pop	{r4, r5, r6, pc}

34003a3e <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
34003a3e:	2324      	movs	r3, #36	@ 0x24
34003a40:	f001 010f 	and.w	r1, r1, #15
34003a44:	fb03 0001 	mla	r0, r3, r1, r0
}
34003a48:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
34003a4c:	4770      	bx	lr

34003a4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
34003a4e:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003a50:	2424      	movs	r4, #36	@ 0x24
34003a52:	f001 050f 	and.w	r5, r1, #15
34003a56:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
34003a5a:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
34003a5e:	e9c4 2308 	strd	r2, r3, [r4, #32]
  ep->xfer_count = 0U;
34003a62:	2300      	movs	r3, #0
34003a64:	62a3      	str	r3, [r4, #40]	@ 0x28
  ep->is_in = 1U;
34003a66:	2301      	movs	r3, #1
{
34003a68:	4616      	mov	r6, r2
  ep->is_in = 1U;
34003a6a:	7563      	strb	r3, [r4, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
34003a6c:	7525      	strb	r5, [r4, #20]

  if (hpcd->Init.dma_enable == 1U)
34003a6e:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003a70:	3114      	adds	r1, #20
  if (hpcd->Init.dma_enable == 1U)
34003a72:	429a      	cmp	r2, r3
  {
    ep->dma_addr = (uint32_t)pBuf;
34003a74:	bf08      	it	eq
34003a76:	6326      	streq	r6, [r4, #48]	@ 0x30
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
34003a78:	6800      	ldr	r0, [r0, #0]
34003a7a:	f008 f811 	bl	3400baa0 <USB_EPStartXfer>

  return HAL_OK;
}
34003a7e:	2000      	movs	r0, #0
34003a80:	bd70      	pop	{r4, r5, r6, pc}

34003a82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
34003a82:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
34003a84:	7903      	ldrb	r3, [r0, #4]
34003a86:	f001 050f 	and.w	r5, r1, #15
34003a8a:	42ab      	cmp	r3, r5
{
34003a8c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
34003a8e:	d32b      	bcc.n	34003ae8 <HAL_PCD_EP_SetStall+0x66>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
34003a90:	f011 0f80 	tst.w	r1, #128	@ 0x80
34003a94:	f04f 0024 	mov.w	r0, #36	@ 0x24
34003a98:	d01d      	beq.n	34003ad6 <HAL_PCD_EP_SetStall+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
34003a9a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003a9c:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
34003aa0:	fb00 4005 	mla	r0, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003aa4:	3114      	adds	r1, #20
    ep->is_in = 1U;
34003aa6:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
34003aa8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
34003aaa:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
34003aac:	708b      	strb	r3, [r1, #2]

  __HAL_LOCK(hpcd);
34003aae:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
34003ab2:	429a      	cmp	r2, r3
34003ab4:	d01a      	beq.n	34003aec <HAL_PCD_EP_SetStall+0x6a>

  (void)USB_EPSetStall(hpcd->Instance, ep);
34003ab6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
34003ab8:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
34003abc:	f008 f917 	bl	3400bcee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
34003ac0:	b92d      	cbnz	r5, 34003ace <HAL_PCD_EP_SetStall+0x4c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
34003ac2:	79a1      	ldrb	r1, [r4, #6]
34003ac4:	6820      	ldr	r0, [r4, #0]
34003ac6:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003aca:	f008 f97b 	bl	3400bdc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
34003ace:	2000      	movs	r0, #0
34003ad0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
34003ad4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
34003ad6:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
34003ada:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
34003adc:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
34003ae0:	2300      	movs	r3, #0
34003ae2:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
34003ae6:	e7df      	b.n	34003aa8 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
34003ae8:	2001      	movs	r0, #1
34003aea:	e7f3      	b.n	34003ad4 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
34003aec:	2002      	movs	r0, #2
34003aee:	e7f1      	b.n	34003ad4 <HAL_PCD_EP_SetStall+0x52>

34003af0 <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
34003af0:	f001 030f 	and.w	r3, r1, #15
34003af4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
34003af8:	009b      	lsls	r3, r3, #2
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003afa:	f103 0214 	add.w	r2, r3, #20
34003afe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
34003b02:	4402      	add	r2, r0
34003b04:	4403      	add	r3, r0
34003b06:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
34003b0a:	bf0c      	ite	eq
34003b0c:	4619      	moveq	r1, r3
34003b0e:	4611      	movne	r1, r2
34003b10:	6800      	ldr	r0, [r0, #0]
34003b12:	f007 bf71 	b.w	3400b9f8 <USB_EPStopXfer>
	...

34003b18 <HAL_PCD_IRQHandler>:
{
34003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003b1c:	6806      	ldr	r6, [r0, #0]
{
34003b1e:	4604      	mov	r4, r0
34003b20:	b087      	sub	sp, #28
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
34003b22:	4630      	mov	r0, r6
34003b24:	f008 f93c 	bl	3400bda0 <USB_GetMode>
34003b28:	2800      	cmp	r0, #0
34003b2a:	f040 8176 	bne.w	34003e1a <HAL_PCD_IRQHandler+0x302>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
34003b2e:	6820      	ldr	r0, [r4, #0]
34003b30:	f008 f908 	bl	3400bd44 <USB_ReadInterrupts>
34003b34:	2800      	cmp	r0, #0
34003b36:	f000 8170 	beq.w	34003e1a <HAL_PCD_IRQHandler+0x302>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
34003b3a:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
34003b3e:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
34003b40:	f3c3 230d 	ubfx	r3, r3, #8, #14
34003b44:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
34003b48:	f008 f8fc 	bl	3400bd44 <USB_ReadInterrupts>
34003b4c:	0787      	lsls	r7, r0, #30
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
34003b4e:	bf48      	it	mi
34003b50:	6822      	ldrmi	r2, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
34003b52:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
34003b54:	bf48      	it	mi
34003b56:	6953      	ldrmi	r3, [r2, #20]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
34003b58:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
34003b5c:	bf44      	itt	mi
34003b5e:	f003 0302 	andmi.w	r3, r3, #2
34003b62:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
34003b64:	f008 f8ee 	bl	3400bd44 <USB_ReadInterrupts>
34003b68:	06c0      	lsls	r0, r0, #27
34003b6a:	d52d      	bpl.n	34003bc8 <HAL_PCD_IRQHandler+0xb0>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
34003b6c:	6822      	ldr	r2, [r4, #0]
34003b6e:	6993      	ldr	r3, [r2, #24]
34003b70:	f023 0310 	bic.w	r3, r3, #16
34003b74:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
34003b76:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
34003b7a:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
34003b7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
34003b82:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
34003b86:	f040 814b 	bne.w	34003e20 <HAL_PCD_IRQHandler+0x308>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
34003b8a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
34003b8e:	ea18 0f03 	tst.w	r8, r3
34003b92:	d014      	beq.n	34003bbe <HAL_PCD_IRQHandler+0xa6>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
34003b94:	2324      	movs	r3, #36	@ 0x24
34003b96:	fb03 4707 	mla	r7, r3, r7, r4
34003b9a:	f3c8 190a 	ubfx	r9, r8, #4, #11
34003b9e:	464a      	mov	r2, r9
34003ba0:	4630      	mov	r0, r6
34003ba2:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
34003ba6:	f008 f87d 	bl	3400bca4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003baa:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
34003bae:	444b      	add	r3, r9
34003bb0:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003bb4:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
34003bb8:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003bba:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
34003bbe:	6822      	ldr	r2, [r4, #0]
34003bc0:	6993      	ldr	r3, [r2, #24]
34003bc2:	f043 0310 	orr.w	r3, r3, #16
34003bc6:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
34003bc8:	6820      	ldr	r0, [r4, #0]
34003bca:	f008 f8bb 	bl	3400bd44 <USB_ReadInterrupts>
34003bce:	0301      	lsls	r1, r0, #12
34003bd0:	f100 8139 	bmi.w	34003e46 <HAL_PCD_IRQHandler+0x32e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
34003bd4:	6820      	ldr	r0, [r4, #0]
34003bd6:	f008 f8b5 	bl	3400bd44 <USB_ReadInterrupts>
34003bda:	0342      	lsls	r2, r0, #13
34003bdc:	d50d      	bpl.n	34003bfa <HAL_PCD_IRQHandler+0xe2>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
34003bde:	6820      	ldr	r0, [r4, #0]
34003be0:	f008 f8bc 	bl	3400bd5c <USB_ReadDevAllInEpInterrupt>
34003be4:	4627      	mov	r7, r4
34003be6:	4683      	mov	fp, r0
      epnum = 0U;
34003be8:	f04f 0900 	mov.w	r9, #0
34003bec:	f506 6a10 	add.w	sl, r6, #2304	@ 0x900
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003bf0:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
34003bf2:	f1bb 0f00 	cmp.w	fp, #0
34003bf6:	f040 81f0 	bne.w	34003fda <HAL_PCD_IRQHandler+0x4c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
34003bfa:	6820      	ldr	r0, [r4, #0]
34003bfc:	f008 f8a2 	bl	3400bd44 <USB_ReadInterrupts>
34003c00:	2800      	cmp	r0, #0
34003c02:	da13      	bge.n	34003c2c <HAL_PCD_IRQHandler+0x114>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003c04:	686b      	ldr	r3, [r5, #4]
34003c06:	f023 0301 	bic.w	r3, r3, #1
34003c0a:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
34003c0c:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
34003c10:	2b01      	cmp	r3, #1
34003c12:	f040 8286 	bne.w	34004122 <HAL_PCD_IRQHandler+0x60a>
        hpcd->LPM_State = LPM_L0;
34003c16:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
34003c18:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
34003c1a:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
34003c1e:	f000 fafa 	bl	34004216 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
34003c22:	6822      	ldr	r2, [r4, #0]
34003c24:	6953      	ldr	r3, [r2, #20]
34003c26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
34003c2a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
34003c2c:	6820      	ldr	r0, [r4, #0]
34003c2e:	f008 f889 	bl	3400bd44 <USB_ReadInterrupts>
34003c32:	0502      	lsls	r2, r0, #20
34003c34:	d50a      	bpl.n	34003c4c <HAL_PCD_IRQHandler+0x134>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
34003c36:	68ab      	ldr	r3, [r5, #8]
34003c38:	07db      	lsls	r3, r3, #31
34003c3a:	d502      	bpl.n	34003c42 <HAL_PCD_IRQHandler+0x12a>
        HAL_PCD_SuspendCallback(hpcd);
34003c3c:	4620      	mov	r0, r4
34003c3e:	f008 fa8f 	bl	3400c160 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
34003c42:	6822      	ldr	r2, [r4, #0]
34003c44:	6953      	ldr	r3, [r2, #20]
34003c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34003c4a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
34003c4c:	6820      	ldr	r0, [r4, #0]
34003c4e:	f008 f879 	bl	3400bd44 <USB_ReadInterrupts>
34003c52:	0107      	lsls	r7, r0, #4
34003c54:	d514      	bpl.n	34003c80 <HAL_PCD_IRQHandler+0x168>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
34003c56:	6823      	ldr	r3, [r4, #0]
34003c58:	695a      	ldr	r2, [r3, #20]
34003c5a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
34003c5e:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
34003c60:	f894 24cc 	ldrb.w	r2, [r4, #1228]	@ 0x4cc
34003c64:	2a00      	cmp	r2, #0
34003c66:	f040 8260 	bne.w	3400412a <HAL_PCD_IRQHandler+0x612>
        hpcd->LPM_State = LPM_L1;
34003c6a:	2101      	movs	r1, #1
34003c6c:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
34003c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
34003c72:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
34003c74:	f3c3 0383 	ubfx	r3, r3, #2, #4
34003c78:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
34003c7c:	f000 facb 	bl	34004216 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
34003c80:	6820      	ldr	r0, [r4, #0]
34003c82:	f008 f85f 	bl	3400bd44 <USB_ReadInterrupts>
34003c86:	04c0      	lsls	r0, r0, #19
34003c88:	d537      	bpl.n	34003cfa <HAL_PCD_IRQHandler+0x1e2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003c8a:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
34003c8c:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003c8e:	f023 0301 	bic.w	r3, r3, #1
34003c92:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
34003c94:	6820      	ldr	r0, [r4, #0]
34003c96:	f007 fe21 	bl	3400b8dc <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003c9a:	7921      	ldrb	r1, [r4, #4]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003c9c:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
34003ca0:	2900      	cmp	r1, #0
34003ca2:	f101 0201 	add.w	r2, r1, #1
34003ca6:	bf08      	it	eq
34003ca8:	2201      	moveq	r2, #1
34003caa:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003cae:	3a01      	subs	r2, #1
34003cb0:	f040 823f 	bne.w	34004132 <HAL_PCD_IRQHandler+0x61a>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
34003cb4:	69eb      	ldr	r3, [r5, #28]
34003cb6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
34003cba:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
34003cbc:	7be3      	ldrb	r3, [r4, #15]
34003cbe:	2b00      	cmp	r3, #0
34003cc0:	f000 8252 	beq.w	34004168 <HAL_PCD_IRQHandler+0x650>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
34003cc4:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
34003cc8:	f043 030b 	orr.w	r3, r3, #11
34003ccc:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
34003cd0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
34003cd2:	f043 030b 	orr.w	r3, r3, #11
34003cd6:	646b      	str	r3, [r5, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
34003cd8:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003cdc:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
34003ce0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
34003ce4:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003ce8:	79a1      	ldrb	r1, [r4, #6]
34003cea:	6820      	ldr	r0, [r4, #0]
34003cec:	f008 f86a 	bl	3400bdc4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
34003cf0:	6822      	ldr	r2, [r4, #0]
34003cf2:	6953      	ldr	r3, [r2, #20]
34003cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34003cf8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
34003cfa:	6820      	ldr	r0, [r4, #0]
34003cfc:	f008 f822 	bl	3400bd44 <USB_ReadInterrupts>
34003d00:	0481      	lsls	r1, r0, #18
34003d02:	d516      	bpl.n	34003d32 <HAL_PCD_IRQHandler+0x21a>
      (void)USB_ActivateSetup(hpcd->Instance);
34003d04:	6820      	ldr	r0, [r4, #0]
34003d06:	f008 f84f 	bl	3400bda8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
34003d0a:	6820      	ldr	r0, [r4, #0]
34003d0c:	f007 fe2a 	bl	3400b964 <USB_GetDevSpeed>
34003d10:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
34003d12:	6827      	ldr	r7, [r4, #0]
34003d14:	f001 fb78 	bl	34005408 <HAL_RCC_GetHCLKFreq>
34003d18:	79e2      	ldrb	r2, [r4, #7]
34003d1a:	4601      	mov	r1, r0
34003d1c:	4638      	mov	r0, r7
34003d1e:	f007 fd6d 	bl	3400b7fc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
34003d22:	4620      	mov	r0, r4
34003d24:	f008 f9e8 	bl	3400c0f8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
34003d28:	6822      	ldr	r2, [r4, #0]
34003d2a:	6953      	ldr	r3, [r2, #20]
34003d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34003d30:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
34003d32:	6820      	ldr	r0, [r4, #0]
34003d34:	f008 f806 	bl	3400bd44 <USB_ReadInterrupts>
34003d38:	0702      	lsls	r2, r0, #28
34003d3a:	d507      	bpl.n	34003d4c <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_SOFCallback(hpcd);
34003d3c:	4620      	mov	r0, r4
34003d3e:	f008 fa23 	bl	3400c188 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
34003d42:	6822      	ldr	r2, [r4, #0]
34003d44:	6953      	ldr	r3, [r2, #20]
34003d46:	f003 0308 	and.w	r3, r3, #8
34003d4a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
34003d4c:	6820      	ldr	r0, [r4, #0]
34003d4e:	f007 fff9 	bl	3400bd44 <USB_ReadInterrupts>
34003d52:	0603      	lsls	r3, r0, #24
34003d54:	f100 8213 	bmi.w	3400417e <HAL_PCD_IRQHandler+0x666>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
34003d58:	6820      	ldr	r0, [r4, #0]
34003d5a:	f007 fff3 	bl	3400bd44 <USB_ReadInterrupts>
34003d5e:	02c7      	lsls	r7, r0, #11
34003d60:	d50c      	bpl.n	34003d7c <HAL_PCD_IRQHandler+0x264>
34003d62:	46a0      	mov	r8, r4
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003d64:	2701      	movs	r7, #1
34003d66:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
34003d6a:	7923      	ldrb	r3, [r4, #4]
34003d6c:	42bb      	cmp	r3, r7
34003d6e:	f200 821f 	bhi.w	340041b0 <HAL_PCD_IRQHandler+0x698>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
34003d72:	6822      	ldr	r2, [r4, #0]
34003d74:	6953      	ldr	r3, [r2, #20]
34003d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34003d7a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
34003d7c:	6820      	ldr	r0, [r4, #0]
34003d7e:	f007 ffe1 	bl	3400bd44 <USB_ReadInterrupts>
34003d82:	0280      	lsls	r0, r0, #10
34003d84:	d52c      	bpl.n	34003de0 <HAL_PCD_IRQHandler+0x2c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003d86:	7923      	ldrb	r3, [r4, #4]
34003d88:	4622      	mov	r2, r4
34003d8a:	2b00      	cmp	r3, #0
34003d8c:	bf08      	it	eq
34003d8e:	2301      	moveq	r3, #1
34003d90:	f506 6c32 	add.w	ip, r6, #2848	@ 0xb20
34003d94:	3b01      	subs	r3, #1
34003d96:	d01e      	beq.n	34003dd6 <HAL_PCD_IRQHandler+0x2be>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
34003d98:	f892 727c 	ldrb.w	r7, [r2, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
34003d9c:	f8dc 0000 	ldr.w	r0, [ip]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
34003da0:	2f01      	cmp	r7, #1
34003da2:	f040 821b 	bne.w	340041dc <HAL_PCD_IRQHandler+0x6c4>
34003da6:	2800      	cmp	r0, #0
34003da8:	f280 8218 	bge.w	340041dc <HAL_PCD_IRQHandler+0x6c4>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
34003dac:	f8d4 14d4 	ldr.w	r1, [r4, #1236]	@ 0x4d4
34003db0:	ea81 4010 	eor.w	r0, r1, r0, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
34003db4:	07c1      	lsls	r1, r0, #31
34003db6:	f100 8211 	bmi.w	340041dc <HAL_PCD_IRQHandler+0x6c4>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
34003dba:	f882 727b 	strb.w	r7, [r2, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
34003dbe:	69b0      	ldr	r0, [r6, #24]
34003dc0:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
34003dc4:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
34003dc6:	6970      	ldr	r0, [r6, #20]
34003dc8:	0600      	lsls	r0, r0, #24
34003dca:	f100 8207 	bmi.w	340041dc <HAL_PCD_IRQHandler+0x6c4>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
34003dce:	686b      	ldr	r3, [r5, #4]
34003dd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34003dd4:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
34003dd6:	6822      	ldr	r2, [r4, #0]
34003dd8:	6953      	ldr	r3, [r2, #20]
34003dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34003dde:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
34003de0:	6820      	ldr	r0, [r4, #0]
34003de2:	f007 ffaf 	bl	3400bd44 <USB_ReadInterrupts>
34003de6:	0041      	lsls	r1, r0, #1
34003de8:	d507      	bpl.n	34003dfa <HAL_PCD_IRQHandler+0x2e2>
      HAL_PCD_ConnectCallback(hpcd);
34003dea:	4620      	mov	r0, r4
34003dec:	f008 f99c 	bl	3400c128 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
34003df0:	6822      	ldr	r2, [r4, #0]
34003df2:	6953      	ldr	r3, [r2, #20]
34003df4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34003df8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
34003dfa:	6820      	ldr	r0, [r4, #0]
34003dfc:	f007 ffa2 	bl	3400bd44 <USB_ReadInterrupts>
34003e00:	0742      	lsls	r2, r0, #29
34003e02:	d50a      	bpl.n	34003e1a <HAL_PCD_IRQHandler+0x302>
      RegVal = hpcd->Instance->GOTGINT;
34003e04:	6823      	ldr	r3, [r4, #0]
34003e06:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
34003e08:	076b      	lsls	r3, r5, #29
34003e0a:	d502      	bpl.n	34003e12 <HAL_PCD_IRQHandler+0x2fa>
        HAL_PCD_DisconnectCallback(hpcd);
34003e0c:	4620      	mov	r0, r4
34003e0e:	f008 f995 	bl	3400c13c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
34003e12:	6822      	ldr	r2, [r4, #0]
34003e14:	6853      	ldr	r3, [r2, #4]
34003e16:	432b      	orrs	r3, r5
34003e18:	6053      	str	r3, [r2, #4]
}
34003e1a:	b007      	add	sp, #28
34003e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
34003e20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
34003e24:	f47f aecb 	bne.w	34003bbe <HAL_PCD_IRQHandler+0xa6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
34003e28:	2208      	movs	r2, #8
34003e2a:	4630      	mov	r0, r6
34003e2c:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
34003e30:	f007 ff38 	bl	3400bca4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003e34:	2324      	movs	r3, #36	@ 0x24
34003e36:	fb03 4707 	mla	r7, r3, r7, r4
34003e3a:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
34003e3e:	f3c8 180a 	ubfx	r8, r8, #4, #11
34003e42:	4443      	add	r3, r8
34003e44:	e6b9      	b.n	34003bba <HAL_PCD_IRQHandler+0xa2>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
34003e46:	6820      	ldr	r0, [r4, #0]
34003e48:	f007 ff80 	bl	3400bd4c <USB_ReadDevAllOutEpInterrupt>
34003e4c:	46a2      	mov	sl, r4
      epnum = 0U;
34003e4e:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
34003e50:	9002      	str	r0, [sp, #8]
      while (ep_intr != 0U)
34003e52:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
34003e56:	9b02      	ldr	r3, [sp, #8]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003e58:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
34003e5a:	2b00      	cmp	r3, #0
34003e5c:	f43f aeba 	beq.w	34003bd4 <HAL_PCD_IRQHandler+0xbc>
        if ((ep_intr & 0x1U) != 0U)
34003e60:	9b02      	ldr	r3, [sp, #8]
34003e62:	07db      	lsls	r3, r3, #31
34003e64:	d578      	bpl.n	34003f58 <HAL_PCD_IRQHandler+0x440>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003e66:	fa5f fb87 	uxtb.w	fp, r7
34003e6a:	4659      	mov	r1, fp
34003e6c:	f007 ff7e 	bl	3400bd6c <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003e70:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003e74:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003e76:	d01f      	beq.n	34003eb8 <HAL_PCD_IRQHandler+0x3a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003e78:	2301      	movs	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003e7a:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003e7c:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
34003e80:	f894 c006 	ldrb.w	ip, [r4, #6]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003e84:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
34003e88:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
34003e8c:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003e90:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003e92:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
34003e94:	f040 808b 	bne.w	34003fae <HAL_PCD_IRQHandler+0x496>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
34003e98:	f012 0f08 	tst.w	r2, #8
34003e9c:	d007      	beq.n	34003eae <HAL_PCD_IRQHandler+0x396>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003e9e:	48b0      	ldr	r0, [pc, #704]	@ (34004160 <HAL_PCD_IRQHandler+0x648>)
34003ea0:	4281      	cmp	r1, r0
34003ea2:	d909      	bls.n	34003eb8 <HAL_PCD_IRQHandler+0x3a0>
34003ea4:	0412      	lsls	r2, r2, #16
34003ea6:	d507      	bpl.n	34003eb8 <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003ea8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34003eac:	e003      	b.n	34003eb6 <HAL_PCD_IRQHandler+0x39e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
34003eae:	f012 0f20 	tst.w	r2, #32
34003eb2:	d05a      	beq.n	34003f6a <HAL_PCD_IRQHandler+0x452>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003eb4:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003eb6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
34003eb8:	f019 0f08 	tst.w	r9, #8
34003ebc:	d021      	beq.n	34003f02 <HAL_PCD_IRQHandler+0x3ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
34003ebe:	2308      	movs	r3, #8
34003ec0:	f8c8 3008 	str.w	r3, [r8, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003ec4:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003ec6:	49a6      	ldr	r1, [pc, #664]	@ (34004160 <HAL_PCD_IRQHandler+0x648>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003ec8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
34003ece:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003ed2:	428a      	cmp	r2, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003ed4:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003ed6:	d904      	bls.n	34003ee2 <HAL_PCD_IRQHandler+0x3ca>
34003ed8:	0400      	lsls	r0, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003eda:	bf44      	itt	mi
34003edc:	f44f 4000 	movmi.w	r0, #32768	@ 0x8000
34003ee0:	6098      	strmi	r0, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
34003ee2:	4620      	mov	r0, r4
34003ee4:	9203      	str	r2, [sp, #12]
34003ee6:	f008 f811 	bl	3400bf0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
34003eea:	9a03      	ldr	r2, [sp, #12]
34003eec:	499c      	ldr	r1, [pc, #624]	@ (34004160 <HAL_PCD_IRQHandler+0x648>)
34003eee:	428a      	cmp	r2, r1
34003ef0:	d907      	bls.n	34003f02 <HAL_PCD_IRQHandler+0x3ea>
34003ef2:	79a1      	ldrb	r1, [r4, #6]
34003ef4:	2901      	cmp	r1, #1
34003ef6:	d104      	bne.n	34003f02 <HAL_PCD_IRQHandler+0x3ea>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003ef8:	6820      	ldr	r0, [r4, #0]
34003efa:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003efe:	f007 ff61 	bl	3400bdc4 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
34003f02:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
34003f06:	bf1c      	itt	ne
34003f08:	2310      	movne	r3, #16
34003f0a:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
34003f0e:	f019 0f02 	tst.w	r9, #2
34003f12:	d014      	beq.n	34003f3e <HAL_PCD_IRQHandler+0x426>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
34003f14:	6973      	ldr	r3, [r6, #20]
34003f16:	0619      	lsls	r1, r3, #24
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
34003f18:	bf42      	ittt	mi
34003f1a:	686b      	ldrmi	r3, [r5, #4]
34003f1c:	f443 6380 	orrmi.w	r3, r3, #1024	@ 0x400
34003f20:	606b      	strmi	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
34003f22:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
34003f26:	2b01      	cmp	r3, #1
34003f28:	d106      	bne.n	34003f38 <HAL_PCD_IRQHandler+0x420>
              ep->is_iso_incomplete = 0U;
34003f2a:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003f2c:	4659      	mov	r1, fp
34003f2e:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
34003f30:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003f34:	f008 f952 	bl	3400c1dc <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
34003f38:	2302      	movs	r3, #2
34003f3a:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003f3e:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003f42:	bf1c      	itt	ne
34003f44:	2320      	movne	r3, #32
34003f46:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
34003f4a:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
34003f4e:	bf1c      	itt	ne
34003f50:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
34003f54:	f8c8 3008 	strne.w	r3, [r8, #8]
        ep_intr >>= 1U;
34003f58:	9b02      	ldr	r3, [sp, #8]
        epnum++;
34003f5a:	3701      	adds	r7, #1
        ep_intr >>= 1U;
34003f5c:	085b      	lsrs	r3, r3, #1
34003f5e:	9302      	str	r3, [sp, #8]
34003f60:	f108 0820 	add.w	r8, r8, #32
34003f64:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
34003f68:	e775      	b.n	34003e56 <HAL_PCD_IRQHandler+0x33e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003f6a:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 34004160 <HAL_PCD_IRQHandler+0x648>
34003f6e:	4561      	cmp	r1, ip
34003f70:	d901      	bls.n	34003f76 <HAL_PCD_IRQHandler+0x45e>
34003f72:	0412      	lsls	r2, r2, #16
34003f74:	d498      	bmi.n	34003ea8 <HAL_PCD_IRQHandler+0x390>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
34003f76:	691a      	ldr	r2, [r3, #16]
34003f78:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
34003f7c:	f3c2 0212 	ubfx	r2, r2, #0, #19
34003f80:	1a9b      	subs	r3, r3, r2
34003f82:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
34003f86:	b96f      	cbnz	r7, 34003fa4 <HAL_PCD_IRQHandler+0x48c>
          if (ep->xfer_len == 0U)
34003f88:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
34003f8c:	b92a      	cbnz	r2, 34003f9a <HAL_PCD_IRQHandler+0x482>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003f8e:	2101      	movs	r1, #1
34003f90:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003f94:	f007 ff16 	bl	3400bdc4 <USB_EP0_OutStart>
34003f98:	e004      	b.n	34003fa4 <HAL_PCD_IRQHandler+0x48c>
            ep->xfer_buff += ep->xfer_count;
34003f9a:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
34003f9e:	441a      	add	r2, r3
34003fa0:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003fa4:	4659      	mov	r1, fp
34003fa6:	4620      	mov	r0, r4
34003fa8:	f008 f85c 	bl	3400c064 <HAL_PCD_DataOutStageCallback>
34003fac:	e784      	b.n	34003eb8 <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
34003fae:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 34004164 <HAL_PCD_IRQHandler+0x64c>
34003fb2:	4561      	cmp	r1, ip
34003fb4:	d107      	bne.n	34003fc6 <HAL_PCD_IRQHandler+0x4ae>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
34003fb6:	0411      	lsls	r1, r2, #16
34003fb8:	f53f af76 	bmi.w	34003ea8 <HAL_PCD_IRQHandler+0x390>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003fbc:	0692      	lsls	r2, r2, #26
34003fbe:	d5f1      	bpl.n	34003fa4 <HAL_PCD_IRQHandler+0x48c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003fc0:	2220      	movs	r2, #32
34003fc2:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003fc4:	e7ee      	b.n	34003fa4 <HAL_PCD_IRQHandler+0x48c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
34003fc6:	2f00      	cmp	r7, #0
34003fc8:	d1ec      	bne.n	34003fa4 <HAL_PCD_IRQHandler+0x48c>
34003fca:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
34003fce:	2b00      	cmp	r3, #0
34003fd0:	d1e8      	bne.n	34003fa4 <HAL_PCD_IRQHandler+0x48c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003fd2:	4639      	mov	r1, r7
34003fd4:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003fd8:	e7dc      	b.n	34003f94 <HAL_PCD_IRQHandler+0x47c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
34003fda:	f01b 0f01 	tst.w	fp, #1
34003fde:	f000 8098 	beq.w	34004112 <HAL_PCD_IRQHandler+0x5fa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003fe2:	fa5f f389 	uxtb.w	r3, r9
34003fe6:	4619      	mov	r1, r3
34003fe8:	9302      	str	r3, [sp, #8]
34003fea:	f007 fec8 	bl	3400bd7e <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003fee:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003ff2:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003ff4:	d01f      	beq.n	34004036 <HAL_PCD_IRQHandler+0x51e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003ff6:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003ff8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003ffa:	f009 020f 	and.w	r2, r9, #15
34003ffe:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34004002:	ea23 0302 	bic.w	r3, r3, r2
34004006:	636b      	str	r3, [r5, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
34004008:	f8ca 1008 	str.w	r1, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
3400400c:	79a1      	ldrb	r1, [r4, #6]
3400400e:	2901      	cmp	r1, #1
34004010:	d10d      	bne.n	3400402e <HAL_PCD_IRQHandler+0x516>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
34004012:	e9d7 2307 	ldrd	r2, r3, [r7, #28]
34004016:	4413      	add	r3, r2
34004018:	623b      	str	r3, [r7, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
3400401a:	f1b9 0f00 	cmp.w	r9, #0
3400401e:	d106      	bne.n	3400402e <HAL_PCD_IRQHandler+0x516>
34004020:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004022:	b923      	cbnz	r3, 3400402e <HAL_PCD_IRQHandler+0x516>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34004024:	6820      	ldr	r0, [r4, #0]
34004026:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
3400402a:	f007 fecb 	bl	3400bdc4 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
3400402e:	4620      	mov	r0, r4
34004030:	9902      	ldr	r1, [sp, #8]
34004032:	f007 ffb7 	bl	3400bfa4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
34004036:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
3400403a:	bf1c      	itt	ne
3400403c:	2308      	movne	r3, #8
3400403e:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
34004042:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
34004046:	bf1c      	itt	ne
34004048:	2310      	movne	r3, #16
3400404a:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
3400404e:	f018 0f40 	tst.w	r8, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
34004052:	bf1c      	itt	ne
34004054:	2340      	movne	r3, #64	@ 0x40
34004056:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
3400405a:	f018 0f02 	tst.w	r8, #2
3400405e:	d00f      	beq.n	34004080 <HAL_PCD_IRQHandler+0x568>
            (void)USB_FlushTxFifo(USBx, epnum);
34004060:	4649      	mov	r1, r9
34004062:	4630      	mov	r0, r6
34004064:	f007 fc3a 	bl	3400b8dc <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
34004068:	7dfb      	ldrb	r3, [r7, #23]
3400406a:	2b01      	cmp	r3, #1
3400406c:	d105      	bne.n	3400407a <HAL_PCD_IRQHandler+0x562>
              ep->is_iso_incomplete = 0U;
3400406e:	2300      	movs	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34004070:	4620      	mov	r0, r4
34004072:	9902      	ldr	r1, [sp, #8]
              ep->is_iso_incomplete = 0U;
34004074:	75fb      	strb	r3, [r7, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34004076:	f008 f891 	bl	3400c19c <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
3400407a:	2302      	movs	r3, #2
3400407c:	f8ca 3008 	str.w	r3, [sl, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34004080:	6823      	ldr	r3, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34004082:	f018 0f80 	tst.w	r8, #128	@ 0x80
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34004086:	9303      	str	r3, [sp, #12]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34004088:	d043      	beq.n	34004112 <HAL_PCD_IRQHandler+0x5fa>
  if (ep->xfer_count > ep->xfer_len)
3400408a:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
3400408e:	429a      	cmp	r2, r3
34004090:	d83f      	bhi.n	34004112 <HAL_PCD_IRQHandler+0x5fa>
  len = ep->xfer_len - ep->xfer_count;
34004092:	1a9b      	subs	r3, r3, r2
  if (len > ep->maxpacket)
34004094:	69fa      	ldr	r2, [r7, #28]
34004096:	4293      	cmp	r3, r2
34004098:	bf28      	it	cs
3400409a:	4613      	movcs	r3, r2
  len32b = (len + 3U) / 4U;
3400409c:	3303      	adds	r3, #3
3400409e:	089b      	lsrs	r3, r3, #2
340040a0:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
340040a2:	9b03      	ldr	r3, [sp, #12]
340040a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
340040a8:	eb03 1349 	add.w	r3, r3, r9, lsl #5
340040ac:	9305      	str	r3, [sp, #20]
340040ae:	9b05      	ldr	r3, [sp, #20]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
340040b0:	9804      	ldr	r0, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
340040b2:	6999      	ldr	r1, [r3, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
340040b4:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
340040b8:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
340040ba:	4281      	cmp	r1, r0
340040bc:	d327      	bcc.n	3400410e <HAL_PCD_IRQHandler+0x5f6>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
340040be:	4293      	cmp	r3, r2
340040c0:	d80b      	bhi.n	340040da <HAL_PCD_IRQHandler+0x5c2>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
340040c2:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
340040c4:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
340040c6:	f009 000f 	and.w	r0, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
340040ca:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
340040ce:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
340040d0:	ea22 0201 	bic.w	r2, r2, r1
340040d4:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
340040d8:	e01b      	b.n	34004112 <HAL_PCD_IRQHandler+0x5fa>
    len = ep->xfer_len - ep->xfer_count;
340040da:	eba3 0802 	sub.w	r8, r3, r2
    if (len > ep->maxpacket)
340040de:	69fb      	ldr	r3, [r7, #28]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
340040e0:	9a02      	ldr	r2, [sp, #8]
    if (len > ep->maxpacket)
340040e2:	4598      	cmp	r8, r3
340040e4:	bf28      	it	cs
340040e6:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
340040e8:	f108 0303 	add.w	r3, r8, #3
340040ec:	089b      	lsrs	r3, r3, #2
340040ee:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
340040f0:	79a3      	ldrb	r3, [r4, #6]
340040f2:	9803      	ldr	r0, [sp, #12]
340040f4:	9300      	str	r3, [sp, #0]
340040f6:	6a39      	ldr	r1, [r7, #32]
340040f8:	fa1f f388 	uxth.w	r3, r8
340040fc:	f007 fcbe 	bl	3400ba7c <USB_WritePacket>
    ep->xfer_buff  += len;
34004100:	6a3b      	ldr	r3, [r7, #32]
34004102:	4443      	add	r3, r8
34004104:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
34004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34004108:	4443      	add	r3, r8
3400410a:	62bb      	str	r3, [r7, #40]	@ 0x28
3400410c:	e7cf      	b.n	340040ae <HAL_PCD_IRQHandler+0x596>
  if (ep->xfer_len <= ep->xfer_count)
3400410e:	4293      	cmp	r3, r2
34004110:	d9d7      	bls.n	340040c2 <HAL_PCD_IRQHandler+0x5aa>
        epnum++;
34004112:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
34004116:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
3400411a:	3724      	adds	r7, #36	@ 0x24
3400411c:	f10a 0a20 	add.w	sl, sl, #32
34004120:	e566      	b.n	34003bf0 <HAL_PCD_IRQHandler+0xd8>
        HAL_PCD_ResumeCallback(hpcd);
34004122:	4620      	mov	r0, r4
34004124:	f008 f826 	bl	3400c174 <HAL_PCD_ResumeCallback>
34004128:	e57b      	b.n	34003c22 <HAL_PCD_IRQHandler+0x10a>
        HAL_PCD_SuspendCallback(hpcd);
3400412a:	4620      	mov	r0, r4
3400412c:	f008 f818 	bl	3400c160 <HAL_PCD_SuspendCallback>
34004130:	e5a6      	b.n	34003c80 <HAL_PCD_IRQHandler+0x168>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34004132:	6098      	str	r0, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
34004134:	6819      	ldr	r1, [r3, #0]
34004136:	3320      	adds	r3, #32
34004138:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
3400413c:	f843 1c20 	str.w	r1, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
34004140:	f8c3 01e8 	str.w	r0, [r3, #488]	@ 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
34004144:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34004148:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
3400414c:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
34004150:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34004154:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
34004158:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
3400415c:	e5a7      	b.n	34003cae <HAL_PCD_IRQHandler+0x196>
3400415e:	bf00      	nop
34004160:	4f54300a 	.word	0x4f54300a
34004164:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
34004168:	696b      	ldr	r3, [r5, #20]
3400416a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
3400416e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
34004172:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
34004174:	692b      	ldr	r3, [r5, #16]
34004176:	f043 030b 	orr.w	r3, r3, #11
3400417a:	612b      	str	r3, [r5, #16]
3400417c:	e5ac      	b.n	34003cd8 <HAL_PCD_IRQHandler+0x1c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
3400417e:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34004180:	f04f 0924 	mov.w	r9, #36	@ 0x24
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34004184:	69b3      	ldr	r3, [r6, #24]
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34004186:	f204 2857 	addw	r8, r4, #599	@ 0x257
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
3400418a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3400418e:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34004190:	7923      	ldrb	r3, [r4, #4]
34004192:	42bb      	cmp	r3, r7
34004194:	f67f ade0 	bls.w	34003d58 <HAL_PCD_IRQHandler+0x240>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34004198:	fb09 f307 	mul.w	r3, r9, r7
3400419c:	f818 3003 	ldrb.w	r3, [r8, r3]
340041a0:	2b01      	cmp	r3, #1
340041a2:	d103      	bne.n	340041ac <HAL_PCD_IRQHandler+0x694>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
340041a4:	4620      	mov	r0, r4
340041a6:	b2f9      	uxtb	r1, r7
340041a8:	f7ff fca2 	bl	34003af0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
340041ac:	3701      	adds	r7, #1
340041ae:	e7ef      	b.n	34004190 <HAL_PCD_IRQHandler+0x678>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
340041b0:	f898 303c 	ldrb.w	r3, [r8, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
340041b4:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
340041b8:	2b01      	cmp	r3, #1
340041ba:	d109      	bne.n	340041d0 <HAL_PCD_IRQHandler+0x6b8>
340041bc:	2a00      	cmp	r2, #0
340041be:	da07      	bge.n	340041d0 <HAL_PCD_IRQHandler+0x6b8>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
340041c0:	f067 017f 	orn	r1, r7, #127	@ 0x7f
340041c4:	4620      	mov	r0, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
340041c6:	f888 303b 	strb.w	r3, [r8, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
340041ca:	b2c9      	uxtb	r1, r1
340041cc:	f7ff fc90 	bl	34003af0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
340041d0:	3701      	adds	r7, #1
340041d2:	f108 0824 	add.w	r8, r8, #36	@ 0x24
340041d6:	f109 0920 	add.w	r9, r9, #32
340041da:	e5c6      	b.n	34003d6a <HAL_PCD_IRQHandler+0x252>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
340041dc:	3224      	adds	r2, #36	@ 0x24
340041de:	f10c 0c20 	add.w	ip, ip, #32
340041e2:	e5d7      	b.n	34003d94 <HAL_PCD_IRQHandler+0x27c>

340041e4 <HAL_PCD_EP_Flush>:
{
340041e4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
340041e6:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
{
340041ea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
340041ec:	2b01      	cmp	r3, #1
340041ee:	d010      	beq.n	34004212 <HAL_PCD_EP_Flush+0x2e>
340041f0:	2301      	movs	r3, #1
340041f2:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
340041f6:	060b      	lsls	r3, r1, #24
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
340041f8:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
340041fa:	d507      	bpl.n	3400420c <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
340041fc:	f001 010f 	and.w	r1, r1, #15
34004200:	f007 fb6c 	bl	3400b8dc <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
34004204:	2000      	movs	r0, #0
34004206:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
3400420a:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
3400420c:	f007 fb89 	bl	3400b922 <USB_FlushRxFifo>
34004210:	e7f8      	b.n	34004204 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
34004212:	2002      	movs	r0, #2
34004214:	e7f9      	b.n	3400420a <HAL_PCD_EP_Flush+0x26>

34004216 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
34004216:	4770      	bx	lr

34004218 <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34004218:	2804      	cmp	r0, #4
{
3400421a:	b538      	push	{r3, r4, r5, lr}
3400421c:	4605      	mov	r5, r0
3400421e:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
34004220:	d912      	bls.n	34004248 <HAL_PWREx_ConfigVddIORange+0x30>
34004222:	f240 316a 	movw	r1, #874	@ 0x36a
34004226:	481d      	ldr	r0, [pc, #116]	@ (3400429c <HAL_PWREx_ConfigVddIORange+0x84>)
34004228:	f7fd fa74 	bl	34001714 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
3400422c:	2c01      	cmp	r4, #1
3400422e:	d915      	bls.n	3400425c <HAL_PWREx_ConfigVddIORange+0x44>
34004230:	f240 316b 	movw	r1, #875	@ 0x36b
34004234:	4819      	ldr	r0, [pc, #100]	@ (3400429c <HAL_PWREx_ConfigVddIORange+0x84>)
34004236:	f7fd fa6d 	bl	34001714 <assert_failed>

  switch (VddIOPort)
3400423a:	2d04      	cmp	r5, #4
3400423c:	d80e      	bhi.n	3400425c <HAL_PWREx_ConfigVddIORange+0x44>
3400423e:	e8df f005 	tbb	[pc, r5]
34004242:	0e06      	.short	0x0e06
34004244:	1c15      	.short	0x1c15
34004246:	24          	.byte	0x24
34004247:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34004248:	2901      	cmp	r1, #1
3400424a:	d9f6      	bls.n	3400423a <HAL_PWREx_ConfigVddIORange+0x22>
3400424c:	e7f0      	b.n	34004230 <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
3400424e:	4a14      	ldr	r2, [pc, #80]	@ (340042a0 <HAL_PWREx_ConfigVddIORange+0x88>)
34004250:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34004252:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34004256:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
3400425a:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
3400425c:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
3400425e:	4a10      	ldr	r2, [pc, #64]	@ (340042a0 <HAL_PWREx_ConfigVddIORange+0x88>)
34004260:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34004262:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
34004266:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
3400426a:	e7f6      	b.n	3400425a <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
3400426c:	4a0c      	ldr	r2, [pc, #48]	@ (340042a0 <HAL_PWREx_ConfigVddIORange+0x88>)
3400426e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34004270:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
34004274:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
34004278:	e7ef      	b.n	3400425a <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
3400427a:	4a09      	ldr	r2, [pc, #36]	@ (340042a0 <HAL_PWREx_ConfigVddIORange+0x88>)
3400427c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400427e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34004282:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34004286:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
34004288:	e7e8      	b.n	3400425c <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
3400428a:	4a05      	ldr	r2, [pc, #20]	@ (340042a0 <HAL_PWREx_ConfigVddIORange+0x88>)
3400428c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
3400428e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34004292:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34004296:	6393      	str	r3, [r2, #56]	@ 0x38
}
34004298:	e7e0      	b.n	3400425c <HAL_PWREx_ConfigVddIORange+0x44>
3400429a:	bf00      	nop
3400429c:	34010cdf 	.word	0x34010cdf
340042a0:	56024800 	.word	0x56024800

340042a4 <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
340042a4:	4a02      	ldr	r2, [pc, #8]	@ (340042b0 <HAL_PWREx_EnableVddIO3+0xc>)
340042a6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
340042a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
340042ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
340042ae:	4770      	bx	lr
340042b0:	56024800 	.word	0x56024800

340042b4 <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
340042b4:	6803      	ldr	r3, [r0, #0]
340042b6:	4a1c      	ldr	r2, [pc, #112]	@ (34004328 <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
340042b8:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
340042ba:	4293      	cmp	r3, r2
{
340042bc:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
340042be:	d02c      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
340042c0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340042c4:	4293      	cmp	r3, r2
340042c6:	d028      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
340042c8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
340042cc:	3280      	adds	r2, #128	@ 0x80
340042ce:	4293      	cmp	r3, r2
340042d0:	d023      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
340042d2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340042d6:	4293      	cmp	r3, r2
340042d8:	d01f      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
340042da:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
340042de:	3280      	adds	r2, #128	@ 0x80
340042e0:	4293      	cmp	r3, r2
340042e2:	d01a      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
340042e4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340042e8:	4293      	cmp	r3, r2
340042ea:	d016      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
340042ec:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
340042f0:	3280      	adds	r2, #128	@ 0x80
340042f2:	4293      	cmp	r3, r2
340042f4:	d011      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
340042f6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340042fa:	4293      	cmp	r3, r2
340042fc:	d00d      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
340042fe:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34004302:	3280      	adds	r2, #128	@ 0x80
34004304:	4293      	cmp	r3, r2
34004306:	d008      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
34004308:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400430c:	4293      	cmp	r3, r2
3400430e:	d004      	beq.n	3400431a <HAL_RAMCFG_EnableAXISRAM+0x66>
34004310:	f240 4107 	movw	r1, #1031	@ 0x407
34004314:	4805      	ldr	r0, [pc, #20]	@ (3400432c <HAL_RAMCFG_EnableAXISRAM+0x78>)
34004316:	f7fd f9fd 	bl	34001714 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
3400431a:	6822      	ldr	r2, [r4, #0]
3400431c:	6813      	ldr	r3, [r2, #0]
3400431e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34004322:	6013      	str	r3, [r2, #0]
}
34004324:	bd10      	pop	{r4, pc}
34004326:	bf00      	nop
34004328:	52023080 	.word	0x52023080
3400432c:	34010d8a 	.word	0x34010d8a

34004330 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34004330:	4b02      	ldr	r3, [pc, #8]	@ (3400433c <LL_RCC_HSI_IsReady+0xc>)
34004332:	6858      	ldr	r0, [r3, #4]
}
34004334:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34004338:	4770      	bx	lr
3400433a:	bf00      	nop
3400433c:	56028000 	.word	0x56028000

34004340 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34004340:	4b02      	ldr	r3, [pc, #8]	@ (3400434c <LL_RCC_MSI_IsReady+0xc>)
34004342:	6858      	ldr	r0, [r3, #4]
}
34004344:	f3c0 0080 	ubfx	r0, r0, #2, #1
34004348:	4770      	bx	lr
3400434a:	bf00      	nop
3400434c:	56028000 	.word	0x56028000

34004350 <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34004350:	4b02      	ldr	r3, [pc, #8]	@ (3400435c <LL_RCC_PLL1_IsReady+0xc>)
34004352:	6858      	ldr	r0, [r3, #4]
}
34004354:	f3c0 2000 	ubfx	r0, r0, #8, #1
34004358:	4770      	bx	lr
3400435a:	bf00      	nop
3400435c:	56028000 	.word	0x56028000

34004360 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34004360:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34004362:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34004364:	4d1b      	ldr	r5, [pc, #108]	@ (340043d4 <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34004366:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34004368:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3400436a:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
3400436c:	021b      	lsls	r3, r3, #8
3400436e:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
34004372:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34004374:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34004378:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
3400437c:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3400437e:	429a      	cmp	r2, r3
34004380:	d126      	bne.n	340043d0 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34004382:	4b15      	ldr	r3, [pc, #84]	@ (340043d8 <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34004384:	68ca      	ldr	r2, [r1, #12]
34004386:	58e3      	ldr	r3, [r4, r3]
34004388:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400438c:	4293      	cmp	r3, r2
3400438e:	d11f      	bne.n	340043d0 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34004390:	4b12      	ldr	r3, [pc, #72]	@ (340043dc <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34004392:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34004394:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34004398:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3400439a:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
3400439e:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
340043a2:	429a      	cmp	r2, r3
340043a4:	d114      	bne.n	340043d0 <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340043a6:	4b0e      	ldr	r3, [pc, #56]	@ (340043e0 <RCC_PLL_IsNewConfig+0x80>)
340043a8:	685a      	ldr	r2, [r3, #4]
340043aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
340043ae:	fa03 f000 	lsl.w	r0, r3, r0
340043b2:	4390      	bics	r0, r2
340043b4:	d00a      	beq.n	340043cc <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
340043b6:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
340043b8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
340043bc:	bf0c      	ite	eq
340043be:	2301      	moveq	r3, #1
340043c0:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
340043c2:	6808      	ldr	r0, [r1, #0]
340043c4:	1ac0      	subs	r0, r0, r3
340043c6:	bf18      	it	ne
340043c8:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
340043ca:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
340043cc:	2302      	movs	r3, #2
340043ce:	e7f8      	b.n	340043c2 <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
340043d0:	2001      	movs	r0, #1
  return ret;
340043d2:	e7fa      	b.n	340043ca <RCC_PLL_IsNewConfig+0x6a>
340043d4:	56028080 	.word	0x56028080
340043d8:	56028084 	.word	0x56028084
340043dc:	56028088 	.word	0x56028088
340043e0:	56028000 	.word	0x56028000

340043e4 <RCC_PLL_Enable>:
{
340043e4:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340043e6:	f44f 7480 	mov.w	r4, #256	@ 0x100
340043ea:	4e09      	ldr	r6, [pc, #36]	@ (34004410 <RCC_PLL_Enable+0x2c>)
340043ec:	4084      	lsls	r4, r0
340043ee:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
340043f2:	f7fe f9b5 	bl	34002760 <HAL_GetTick>
340043f6:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
340043f8:	6873      	ldr	r3, [r6, #4]
340043fa:	421c      	tst	r4, r3
340043fc:	d001      	beq.n	34004402 <RCC_PLL_Enable+0x1e>
  return ret;
340043fe:	2000      	movs	r0, #0
}
34004400:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34004402:	f7fe f9ad 	bl	34002760 <HAL_GetTick>
34004406:	1b40      	subs	r0, r0, r5
34004408:	2801      	cmp	r0, #1
3400440a:	d9f5      	bls.n	340043f8 <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
3400440c:	2003      	movs	r0, #3
3400440e:	e7f7      	b.n	34004400 <RCC_PLL_Enable+0x1c>
34004410:	56028000 	.word	0x56028000

34004414 <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
34004414:	680b      	ldr	r3, [r1, #0]
{
34004416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
3400441a:	2b02      	cmp	r3, #2
{
3400441c:	4681      	mov	r9, r0
3400441e:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34004420:	4f83      	ldr	r7, [pc, #524]	@ (34004630 <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34004422:	4e84      	ldr	r6, [pc, #528]	@ (34004634 <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34004424:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
34004428:	f040 8099 	bne.w	3400455e <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
3400442c:	684b      	ldr	r3, [r1, #4]
3400442e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004432:	d004      	beq.n	3400443e <RCC_PLL_Config+0x2a>
34004434:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34004438:	487f      	ldr	r0, [pc, #508]	@ (34004638 <RCC_PLL_Config+0x224>)
3400443a:	f7fd f96b 	bl	34001714 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
3400443e:	68eb      	ldr	r3, [r5, #12]
34004440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34004444:	d304      	bcc.n	34004450 <RCC_PLL_Config+0x3c>
34004446:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3400444a:	487b      	ldr	r0, [pc, #492]	@ (34004638 <RCC_PLL_Config+0x224>)
3400444c:	f7fd f962 	bl	34001714 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34004450:	68ab      	ldr	r3, [r5, #8]
34004452:	3b01      	subs	r3, #1
34004454:	2b3e      	cmp	r3, #62	@ 0x3e
34004456:	d904      	bls.n	34004462 <RCC_PLL_Config+0x4e>
34004458:	f240 71fc 	movw	r1, #2044	@ 0x7fc
3400445c:	4876      	ldr	r0, [pc, #472]	@ (34004638 <RCC_PLL_Config+0x224>)
3400445e:	f7fd f959 	bl	34001714 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
34004462:	f640 12ba 	movw	r2, #2490	@ 0x9ba
34004466:	692b      	ldr	r3, [r5, #16]
34004468:	3b0a      	subs	r3, #10
3400446a:	4293      	cmp	r3, r2
3400446c:	d904      	bls.n	34004478 <RCC_PLL_Config+0x64>
3400446e:	f240 71fd 	movw	r1, #2045	@ 0x7fd
34004472:	4871      	ldr	r0, [pc, #452]	@ (34004638 <RCC_PLL_Config+0x224>)
34004474:	f7fd f94e 	bl	34001714 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34004478:	696b      	ldr	r3, [r5, #20]
3400447a:	3b01      	subs	r3, #1
3400447c:	2b06      	cmp	r3, #6
3400447e:	d904      	bls.n	3400448a <RCC_PLL_Config+0x76>
34004480:	f240 71fe 	movw	r1, #2046	@ 0x7fe
34004484:	486c      	ldr	r0, [pc, #432]	@ (34004638 <RCC_PLL_Config+0x224>)
34004486:	f7fd f945 	bl	34001714 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
3400448a:	69ab      	ldr	r3, [r5, #24]
3400448c:	3b01      	subs	r3, #1
3400448e:	2b06      	cmp	r3, #6
34004490:	d904      	bls.n	3400449c <RCC_PLL_Config+0x88>
34004492:	f240 71ff 	movw	r1, #2047	@ 0x7ff
34004496:	4868      	ldr	r0, [pc, #416]	@ (34004638 <RCC_PLL_Config+0x224>)
34004498:	f7fd f93c 	bl	34001714 <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400449c:	f44f 7880 	mov.w	r8, #256	@ 0x100
340044a0:	4b66      	ldr	r3, [pc, #408]	@ (3400463c <RCC_PLL_Config+0x228>)
340044a2:	fa08 f809 	lsl.w	r8, r8, r9
340044a6:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
340044aa:	f7fe f959 	bl	34002760 <HAL_GetTick>
340044ae:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340044b0:	f8df a194 	ldr.w	sl, [pc, #404]	@ 34004648 <RCC_PLL_Config+0x234>
340044b4:	f8da 3004 	ldr.w	r3, [sl, #4]
340044b8:	ea38 0303 	bics.w	r3, r8, r3
340044bc:	d040      	beq.n	34004540 <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
340044be:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
340044c0:	495f      	ldr	r1, [pc, #380]	@ (34004640 <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
340044c2:	f043 0304 	orr.w	r3, r3, #4
340044c6:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
340044c8:	59e3      	ldr	r3, [r4, r7]
340044ca:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
340044ce:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
340044d0:	692b      	ldr	r3, [r5, #16]
340044d2:	68aa      	ldr	r2, [r5, #8]
340044d4:	021b      	lsls	r3, r3, #8
340044d6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
340044da:	686a      	ldr	r2, [r5, #4]
340044dc:	59e0      	ldr	r0, [r4, r7]
340044de:	4313      	orrs	r3, r2
340044e0:	4a58      	ldr	r2, [pc, #352]	@ (34004644 <RCC_PLL_Config+0x230>)
340044e2:	4002      	ands	r2, r0
340044e4:	4313      	orrs	r3, r2
340044e6:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
340044e8:	59a2      	ldr	r2, [r4, r6]
340044ea:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
340044ee:	061b      	lsls	r3, r3, #24
340044f0:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
340044f4:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
340044f8:	4313      	orrs	r3, r2
340044fa:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
340044fc:	5863      	ldr	r3, [r4, r1]
340044fe:	68ea      	ldr	r2, [r5, #12]
34004500:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
34004504:	4313      	orrs	r3, r2
34004506:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34004508:	59a3      	ldr	r3, [r4, r6]
3400450a:	f023 0308 	bic.w	r3, r3, #8
3400450e:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
34004510:	68eb      	ldr	r3, [r5, #12]
34004512:	b11b      	cbz	r3, 3400451c <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34004514:	59a3      	ldr	r3, [r4, r6]
34004516:	f043 030a 	orr.w	r3, r3, #10
3400451a:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
3400451c:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3400451e:	4d4a      	ldr	r5, [pc, #296]	@ (34004648 <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34004520:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34004524:	f043 0301 	orr.w	r3, r3, #1
34004528:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3400452a:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
3400452e:	f7fe f917 	bl	34002760 <HAL_GetTick>
34004532:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34004534:	686b      	ldr	r3, [r5, #4]
34004536:	ea18 0f03 	tst.w	r8, r3
3400453a:	d00a      	beq.n	34004552 <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
3400453c:	2000      	movs	r0, #0
3400453e:	e006      	b.n	3400454e <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34004540:	f7fe f90e 	bl	34002760 <HAL_GetTick>
34004544:	eba0 0009 	sub.w	r0, r0, r9
34004548:	2801      	cmp	r0, #1
3400454a:	d9b3      	bls.n	340044b4 <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
3400454c:	2003      	movs	r0, #3
}
3400454e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34004552:	f7fe f905 	bl	34002760 <HAL_GetTick>
34004556:	1b00      	subs	r0, r0, r4
34004558:	2801      	cmp	r0, #1
3400455a:	d9eb      	bls.n	34004534 <RCC_PLL_Config+0x120>
3400455c:	e7f6      	b.n	3400454c <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
3400455e:	2b03      	cmp	r3, #3
34004560:	d146      	bne.n	340045f0 <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34004562:	684b      	ldr	r3, [r1, #4]
34004564:	b37b      	cbz	r3, 340045c6 <RCC_PLL_Config+0x1b2>
34004566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400456a:	d032      	beq.n	340045d2 <RCC_PLL_Config+0x1be>
3400456c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004570:	d032      	beq.n	340045d8 <RCC_PLL_Config+0x1c4>
34004572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004576:	d00d      	beq.n	34004594 <RCC_PLL_Config+0x180>
34004578:	f640 013f 	movw	r1, #2111	@ 0x83f
3400457c:	482e      	ldr	r0, [pc, #184]	@ (34004638 <RCC_PLL_Config+0x224>)
3400457e:	f7fd f8c9 	bl	34001714 <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34004582:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
34004584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004588:	d026      	beq.n	340045d8 <RCC_PLL_Config+0x1c4>
3400458a:	d803      	bhi.n	34004594 <RCC_PLL_Config+0x180>
3400458c:	b1db      	cbz	r3, 340045c6 <RCC_PLL_Config+0x1b2>
3400458e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004592:	d01e      	beq.n	340045d2 <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004594:	f44f 7680 	mov.w	r6, #256	@ 0x100
34004598:	4b28      	ldr	r3, [pc, #160]	@ (3400463c <RCC_PLL_Config+0x228>)
3400459a:	fa06 f609 	lsl.w	r6, r6, r9
3400459e:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
340045a0:	f7fe f8de 	bl	34002760 <HAL_GetTick>
340045a4:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340045a6:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 34004648 <RCC_PLL_Config+0x234>
340045aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
340045ae:	ea36 0303 	bics.w	r3, r6, r3
340045b2:	d016      	beq.n	340045e2 <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
340045b4:	59e3      	ldr	r3, [r4, r7]
340045b6:	686a      	ldr	r2, [r5, #4]
340045b8:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
340045bc:	4313      	orrs	r3, r2
340045be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
340045c2:	51e3      	str	r3, [r4, r7]
340045c4:	e7ba      	b.n	3400453c <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
340045c6:	f7ff feb3 	bl	34004330 <LL_RCC_HSI_IsReady>
340045ca:	2800      	cmp	r0, #0
340045cc:	d1e2      	bne.n	34004594 <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
340045ce:	2001      	movs	r0, #1
340045d0:	e7bd      	b.n	3400454e <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
340045d2:	f7ff feb5 	bl	34004340 <LL_RCC_MSI_IsReady>
340045d6:	e7f8      	b.n	340045ca <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340045d8:	4b1b      	ldr	r3, [pc, #108]	@ (34004648 <RCC_PLL_Config+0x234>)
340045da:	685b      	ldr	r3, [r3, #4]
340045dc:	06db      	lsls	r3, r3, #27
340045de:	d5f6      	bpl.n	340045ce <RCC_PLL_Config+0x1ba>
340045e0:	e7d8      	b.n	34004594 <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340045e2:	f7fe f8bd 	bl	34002760 <HAL_GetTick>
340045e6:	eba0 0008 	sub.w	r0, r0, r8
340045ea:	2801      	cmp	r0, #1
340045ec:	d9dd      	bls.n	340045aa <RCC_PLL_Config+0x196>
340045ee:	e7ad      	b.n	3400454c <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
340045f0:	2b01      	cmp	r3, #1
340045f2:	d1a3      	bne.n	3400453c <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340045f4:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
340045f8:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340045fa:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
340045fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
34004600:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004602:	4b0e      	ldr	r3, [pc, #56]	@ (3400463c <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34004604:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 34004648 <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004608:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
3400460a:	f7fe f8a9 	bl	34002760 <HAL_GetTick>
3400460e:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34004610:	f8d8 3004 	ldr.w	r3, [r8, #4]
34004614:	ea35 0303 	bics.w	r3, r5, r3
34004618:	d003      	beq.n	34004622 <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3400461a:	59e3      	ldr	r3, [r4, r7]
3400461c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34004620:	e7cf      	b.n	340045c2 <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34004622:	f7fe f89d 	bl	34002760 <HAL_GetTick>
34004626:	1b80      	subs	r0, r0, r6
34004628:	2801      	cmp	r0, #1
3400462a:	d9f1      	bls.n	34004610 <RCC_PLL_Config+0x1fc>
3400462c:	e78e      	b.n	3400454c <RCC_PLL_Config+0x138>
3400462e:	bf00      	nop
34004630:	56028080 	.word	0x56028080
34004634:	56028088 	.word	0x56028088
34004638:	34010e35 	.word	0x34010e35
3400463c:	56029000 	.word	0x56029000
34004640:	56028084 	.word	0x56028084
34004644:	8c0000ff 	.word	0x8c0000ff
34004648:	56028000 	.word	0x56028000

3400464c <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
3400464c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34004650:	b508      	push	{r3, lr}
  switch (PLLSource1)
34004652:	d021      	beq.n	34004698 <RCC_IC_CheckPLLSources+0x4c>
34004654:	d805      	bhi.n	34004662 <RCC_IC_CheckPLLSources+0x16>
34004656:	b9c0      	cbnz	r0, 3400468a <RCC_IC_CheckPLLSources+0x3e>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34004658:	f7ff fe7a 	bl	34004350 <LL_RCC_PLL1_IsReady>
3400465c:	b178      	cbz	r0, 3400467e <RCC_IC_CheckPLLSources+0x32>
  uint32_t ret = 1U;
3400465e:	2201      	movs	r2, #1
34004660:	e003      	b.n	3400466a <RCC_IC_CheckPLLSources+0x1e>
  switch (PLLSource1)
34004662:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34004666:	d01e      	beq.n	340046a6 <RCC_IC_CheckPLLSources+0x5a>
34004668:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
3400466a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3400466e:	d03c      	beq.n	340046ea <RCC_IC_CheckPLLSources+0x9e>
34004670:	d820      	bhi.n	340046b4 <RCC_IC_CheckPLLSources+0x68>
34004672:	b349      	cbz	r1, 340046c8 <RCC_IC_CheckPLLSources+0x7c>
34004674:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
34004678:	d030      	beq.n	340046dc <RCC_IC_CheckPLLSources+0x90>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
3400467a:	2200      	movs	r2, #0
3400467c:	e02c      	b.n	340046d8 <RCC_IC_CheckPLLSources+0x8c>
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400467e:	4b1e      	ldr	r3, [pc, #120]	@ (340046f8 <RCC_IC_CheckPLLSources+0xac>)
34004680:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34004684:	f3c2 62c0 	ubfx	r2, r2, #27, #1
34004688:	e7ef      	b.n	3400466a <RCC_IC_CheckPLLSources+0x1e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400468a:	4b1b      	ldr	r3, [pc, #108]	@ (340046f8 <RCC_IC_CheckPLLSources+0xac>)
3400468c:	685a      	ldr	r2, [r3, #4]
3400468e:	0592      	lsls	r2, r2, #22
34004690:	d4e5      	bmi.n	3400465e <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34004692:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34004696:	e7f5      	b.n	34004684 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34004698:	4b17      	ldr	r3, [pc, #92]	@ (340046f8 <RCC_IC_CheckPLLSources+0xac>)
3400469a:	685a      	ldr	r2, [r3, #4]
3400469c:	0550      	lsls	r0, r2, #21
3400469e:	d4de      	bmi.n	3400465e <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340046a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
340046a4:	e7ee      	b.n	34004684 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340046a6:	4b14      	ldr	r3, [pc, #80]	@ (340046f8 <RCC_IC_CheckPLLSources+0xac>)
340046a8:	685a      	ldr	r2, [r3, #4]
340046aa:	0512      	lsls	r2, r2, #20
340046ac:	d4d7      	bmi.n	3400465e <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340046ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
340046b2:	e7e7      	b.n	34004684 <RCC_IC_CheckPLLSources+0x38>
  switch (PLLSource2)
340046b4:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
340046b8:	d1df      	bne.n	3400467a <RCC_IC_CheckPLLSources+0x2e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340046ba:	4b0f      	ldr	r3, [pc, #60]	@ (340046f8 <RCC_IC_CheckPLLSources+0xac>)
340046bc:	6859      	ldr	r1, [r3, #4]
340046be:	0509      	lsls	r1, r1, #20
340046c0:	d40a      	bmi.n	340046d8 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340046c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340046c6:	e005      	b.n	340046d4 <RCC_IC_CheckPLLSources+0x88>
      if (LL_RCC_PLL1_IsReady() == 0U)
340046c8:	f7ff fe42 	bl	34004350 <LL_RCC_PLL1_IsReady>
340046cc:	b920      	cbnz	r0, 340046d8 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
340046ce:	4b0a      	ldr	r3, [pc, #40]	@ (340046f8 <RCC_IC_CheckPLLSources+0xac>)
340046d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340046d4:	0118      	lsls	r0, r3, #4
340046d6:	d5d0      	bpl.n	3400467a <RCC_IC_CheckPLLSources+0x2e>
      break;
  }

  return ret;
}
340046d8:	4610      	mov	r0, r2
340046da:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340046dc:	4b06      	ldr	r3, [pc, #24]	@ (340046f8 <RCC_IC_CheckPLLSources+0xac>)
340046de:	6859      	ldr	r1, [r3, #4]
340046e0:	0589      	lsls	r1, r1, #22
340046e2:	d4f9      	bmi.n	340046d8 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340046e8:	e7f4      	b.n	340046d4 <RCC_IC_CheckPLLSources+0x88>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340046ea:	4b03      	ldr	r3, [pc, #12]	@ (340046f8 <RCC_IC_CheckPLLSources+0xac>)
340046ec:	6859      	ldr	r1, [r3, #4]
340046ee:	0548      	lsls	r0, r1, #21
340046f0:	d4f2      	bmi.n	340046d8 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340046f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340046f6:	e7ed      	b.n	340046d4 <RCC_IC_CheckPLLSources+0x88>
340046f8:	56028000 	.word	0x56028000

340046fc <HAL_RCC_OscConfig>:
{
340046fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
34004700:	4604      	mov	r4, r0
34004702:	b918      	cbnz	r0, 3400470c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
34004704:	2001      	movs	r0, #1
}
34004706:	b003      	add	sp, #12
34004708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
3400470c:	6803      	ldr	r3, [r0, #0]
3400470e:	b133      	cbz	r3, 3400471e <HAL_RCC_OscConfig+0x22>
34004710:	06dd      	lsls	r5, r3, #27
34004712:	d104      	bne.n	3400471e <HAL_RCC_OscConfig+0x22>
34004714:	f44f 71b9 	mov.w	r1, #370	@ 0x172
34004718:	4893      	ldr	r0, [pc, #588]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
3400471a:	f7fc fffb 	bl	34001714 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3400471e:	4b93      	ldr	r3, [pc, #588]	@ (3400496c <HAL_RCC_OscConfig+0x270>)
34004720:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004722:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34004724:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004728:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
3400472c:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34004730:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004734:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34004738:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3400473c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34004740:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34004744:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
34004748:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
3400474a:	6823      	ldr	r3, [r4, #0]
3400474c:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
34004750:	07d8      	lsls	r0, r3, #31
34004752:	d463      	bmi.n	3400481c <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34004754:	6823      	ldr	r3, [r4, #0]
34004756:	0799      	lsls	r1, r3, #30
34004758:	f100 80d4 	bmi.w	34004904 <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
3400475c:	6823      	ldr	r3, [r4, #0]
3400475e:	06d8      	lsls	r0, r3, #27
34004760:	d522      	bpl.n	340047a8 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
34004762:	69e3      	ldr	r3, [r4, #28]
34004764:	2b00      	cmp	r3, #0
34004766:	f000 8347 	beq.w	34004df8 <HAL_RCC_OscConfig+0x6fc>
3400476a:	2b04      	cmp	r3, #4
3400476c:	f000 834d 	beq.w	34004e0a <HAL_RCC_OscConfig+0x70e>
34004770:	f240 2105 	movw	r1, #517	@ 0x205
34004774:	487c      	ldr	r0, [pc, #496]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
34004776:	f7fc ffcd 	bl	34001714 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3400477a:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
3400477e:	f040 8148 	bne.w	34004a12 <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34004782:	69e3      	ldr	r3, [r4, #28]
34004784:	2b00      	cmp	r3, #0
34004786:	d0bd      	beq.n	34004704 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34004788:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400478a:	2b1f      	cmp	r3, #31
3400478c:	d904      	bls.n	34004798 <HAL_RCC_OscConfig+0x9c>
3400478e:	f44f 7106 	mov.w	r1, #536	@ 0x218
34004792:	4875      	ldr	r0, [pc, #468]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
34004794:	f7fc ffbe 	bl	34001714 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34004798:	4a74      	ldr	r2, [pc, #464]	@ (3400496c <HAL_RCC_OscConfig+0x270>)
3400479a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400479c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
3400479e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
340047a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340047a6:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
340047a8:	6823      	ldr	r3, [r4, #0]
340047aa:	0718      	lsls	r0, r3, #28
340047ac:	f100 8189 	bmi.w	34004ac2 <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
340047b0:	6823      	ldr	r3, [r4, #0]
340047b2:	0759      	lsls	r1, r3, #29
340047b4:	f100 81b4 	bmi.w	34004b20 <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
340047b8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340047ba:	2b03      	cmp	r3, #3
340047bc:	d904      	bls.n	340047c8 <HAL_RCC_OscConfig+0xcc>
340047be:	f240 21a5 	movw	r1, #677	@ 0x2a5
340047c2:	4869      	ldr	r0, [pc, #420]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
340047c4:	f7fc ffa6 	bl	34001714 <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
340047c8:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
340047ca:	2f00      	cmp	r7, #0
340047cc:	f040 8210 	bne.w	34004bf0 <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
340047d0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340047d2:	2b03      	cmp	r3, #3
340047d4:	d904      	bls.n	340047e0 <HAL_RCC_OscConfig+0xe4>
340047d6:	f240 21d3 	movw	r1, #723	@ 0x2d3
340047da:	4863      	ldr	r0, [pc, #396]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
340047dc:	f7fc ff9a 	bl	34001714 <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
340047e0:	6c67      	ldr	r7, [r4, #68]	@ 0x44
340047e2:	2f00      	cmp	r7, #0
340047e4:	f040 8246 	bne.w	34004c74 <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
340047e8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
340047ea:	2b03      	cmp	r3, #3
340047ec:	d904      	bls.n	340047f8 <HAL_RCC_OscConfig+0xfc>
340047ee:	f240 3101 	movw	r1, #769	@ 0x301
340047f2:	485d      	ldr	r0, [pc, #372]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
340047f4:	f7fc ff8e 	bl	34001714 <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
340047f8:	6e27      	ldr	r7, [r4, #96]	@ 0x60
340047fa:	2f00      	cmp	r7, #0
340047fc:	f040 827a 	bne.w	34004cf4 <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
34004800:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34004802:	2b03      	cmp	r3, #3
34004804:	d904      	bls.n	34004810 <HAL_RCC_OscConfig+0x114>
34004806:	f240 312e 	movw	r1, #814	@ 0x32e
3400480a:	4857      	ldr	r0, [pc, #348]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
3400480c:	f7fc ff82 	bl	34001714 <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34004810:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
34004812:	2f00      	cmp	r7, #0
34004814:	f040 82b0 	bne.w	34004d78 <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
34004818:	2000      	movs	r0, #0
3400481a:	e774      	b.n	34004706 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
3400481c:	6863      	ldr	r3, [r4, #4]
3400481e:	2b00      	cmp	r3, #0
34004820:	f000 8313 	beq.w	34004e4a <HAL_RCC_OscConfig+0x74e>
34004824:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34004828:	2a10      	cmp	r2, #16
3400482a:	f000 8305 	beq.w	34004e38 <HAL_RCC_OscConfig+0x73c>
3400482e:	4a50      	ldr	r2, [pc, #320]	@ (34004970 <HAL_RCC_OscConfig+0x274>)
34004830:	4293      	cmp	r3, r2
34004832:	f000 8301 	beq.w	34004e38 <HAL_RCC_OscConfig+0x73c>
34004836:	f44f 71c0 	mov.w	r1, #384	@ 0x180
3400483a:	484b      	ldr	r0, [pc, #300]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
3400483c:	f7fc ff6a 	bl	34001714 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34004840:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004844:	d103      	bne.n	3400484e <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
34004846:	6863      	ldr	r3, [r4, #4]
34004848:	2b00      	cmp	r3, #0
3400484a:	d183      	bne.n	34004754 <HAL_RCC_OscConfig+0x58>
3400484c:	e75a      	b.n	34004704 <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3400484e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004852:	d0f8      	beq.n	34004846 <HAL_RCC_OscConfig+0x14a>
34004854:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
34004858:	d101      	bne.n	3400485e <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3400485a:	05fa      	lsls	r2, r7, #23
3400485c:	d4f3      	bmi.n	34004846 <HAL_RCC_OscConfig+0x14a>
3400485e:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
34004862:	d101      	bne.n	34004868 <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004864:	05bb      	lsls	r3, r7, #22
34004866:	d4ee      	bmi.n	34004846 <HAL_RCC_OscConfig+0x14a>
34004868:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
3400486c:	d101      	bne.n	34004872 <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3400486e:	0578      	lsls	r0, r7, #21
34004870:	d4e9      	bmi.n	34004846 <HAL_RCC_OscConfig+0x14a>
34004872:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
34004876:	d101      	bne.n	3400487c <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34004878:	0539      	lsls	r1, r7, #20
3400487a:	d4e4      	bmi.n	34004846 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3400487c:	6862      	ldr	r2, [r4, #4]
3400487e:	4b3b      	ldr	r3, [pc, #236]	@ (3400496c <HAL_RCC_OscConfig+0x270>)
34004880:	2a10      	cmp	r2, #16
34004882:	d114      	bne.n	340048ae <HAL_RCC_OscConfig+0x1b2>
34004884:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004888:	f7fd ff6a 	bl	34002760 <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
3400488c:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
3400488e:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34004890:	b35b      	cbz	r3, 340048ea <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34004892:	4b36      	ldr	r3, [pc, #216]	@ (3400496c <HAL_RCC_OscConfig+0x270>)
34004894:	685a      	ldr	r2, [r3, #4]
34004896:	06d2      	lsls	r2, r2, #27
34004898:	f53f af5c 	bmi.w	34004754 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3400489c:	f7fd ff60 	bl	34002760 <HAL_GetTick>
340048a0:	9b01      	ldr	r3, [sp, #4]
340048a2:	1ac0      	subs	r0, r0, r3
340048a4:	2864      	cmp	r0, #100	@ 0x64
340048a6:	4b31      	ldr	r3, [pc, #196]	@ (3400496c <HAL_RCC_OscConfig+0x270>)
340048a8:	d9f4      	bls.n	34004894 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
340048aa:	2003      	movs	r0, #3
340048ac:	e72b      	b.n	34004706 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
340048ae:	b93a      	cbnz	r2, 340048c0 <HAL_RCC_OscConfig+0x1c4>
340048b0:	2110      	movs	r1, #16
340048b2:	4a30      	ldr	r2, [pc, #192]	@ (34004974 <HAL_RCC_OscConfig+0x278>)
340048b4:	6011      	str	r1, [r2, #0]
340048b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340048b8:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
340048bc:	655a      	str	r2, [r3, #84]	@ 0x54
340048be:	e7e3      	b.n	34004888 <HAL_RCC_OscConfig+0x18c>
340048c0:	f248 0110 	movw	r1, #32784	@ 0x8010
340048c4:	428a      	cmp	r2, r1
340048c6:	d109      	bne.n	340048dc <HAL_RCC_OscConfig+0x1e0>
340048c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340048ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340048ce:	655a      	str	r2, [r3, #84]	@ 0x54
340048d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340048d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
340048d6:	655a      	str	r2, [r3, #84]	@ 0x54
340048d8:	2210      	movs	r2, #16
340048da:	e7d3      	b.n	34004884 <HAL_RCC_OscConfig+0x188>
340048dc:	4924      	ldr	r1, [pc, #144]	@ (34004970 <HAL_RCC_OscConfig+0x274>)
340048de:	428a      	cmp	r2, r1
340048e0:	d1e6      	bne.n	340048b0 <HAL_RCC_OscConfig+0x1b4>
340048e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340048e4:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
340048e8:	e7f5      	b.n	340048d6 <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
340048ea:	4b20      	ldr	r3, [pc, #128]	@ (3400496c <HAL_RCC_OscConfig+0x270>)
340048ec:	685a      	ldr	r2, [r3, #4]
340048ee:	06d3      	lsls	r3, r2, #27
340048f0:	f57f af30 	bpl.w	34004754 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340048f4:	f7fd ff34 	bl	34002760 <HAL_GetTick>
340048f8:	9b01      	ldr	r3, [sp, #4]
340048fa:	1ac0      	subs	r0, r0, r3
340048fc:	2864      	cmp	r0, #100	@ 0x64
340048fe:	4b1b      	ldr	r3, [pc, #108]	@ (3400496c <HAL_RCC_OscConfig+0x270>)
34004900:	d9f4      	bls.n	340048ec <HAL_RCC_OscConfig+0x1f0>
34004902:	e7d2      	b.n	340048aa <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
34004904:	68e3      	ldr	r3, [r4, #12]
34004906:	2b00      	cmp	r3, #0
34004908:	f000 8288 	beq.w	34004e1c <HAL_RCC_OscConfig+0x720>
3400490c:	2b08      	cmp	r3, #8
3400490e:	f000 828c 	beq.w	34004e2a <HAL_RCC_OscConfig+0x72e>
34004912:	f240 11b5 	movw	r1, #437	@ 0x1b5
34004916:	4814      	ldr	r0, [pc, #80]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
34004918:	f7fc fefc 	bl	34001714 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
3400491c:	bb66      	cbnz	r6, 34004978 <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
3400491e:	68e3      	ldr	r3, [r4, #12]
34004920:	2b00      	cmp	r3, #0
34004922:	f43f aeef 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34004926:	6923      	ldr	r3, [r4, #16]
34004928:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
3400492c:	d004      	beq.n	34004938 <HAL_RCC_OscConfig+0x23c>
3400492e:	f240 11c7 	movw	r1, #455	@ 0x1c7
34004932:	480d      	ldr	r0, [pc, #52]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
34004934:	f7fc feee 	bl	34001714 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34004938:	6963      	ldr	r3, [r4, #20]
3400493a:	2b7f      	cmp	r3, #127	@ 0x7f
3400493c:	d904      	bls.n	34004948 <HAL_RCC_OscConfig+0x24c>
3400493e:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
34004942:	4809      	ldr	r0, [pc, #36]	@ (34004968 <HAL_RCC_OscConfig+0x26c>)
34004944:	f7fc fee6 	bl	34001714 <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34004948:	4a08      	ldr	r2, [pc, #32]	@ (3400496c <HAL_RCC_OscConfig+0x270>)
3400494a:	6921      	ldr	r1, [r4, #16]
3400494c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
3400494e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
34004952:	430b      	orrs	r3, r1
34004954:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34004956:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34004958:	6961      	ldr	r1, [r4, #20]
3400495a:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
3400495e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004962:	6493      	str	r3, [r2, #72]	@ 0x48
}
34004964:	e6fa      	b.n	3400475c <HAL_RCC_OscConfig+0x60>
34004966:	bf00      	nop
34004968:	34010e35 	.word	0x34010e35
3400496c:	56028000 	.word	0x56028000
34004970:	00018010 	.word	0x00018010
34004974:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004978:	2d00      	cmp	r5, #0
3400497a:	d0d0      	beq.n	3400491e <HAL_RCC_OscConfig+0x222>
3400497c:	f1bb 0f00 	cmp.w	fp, #0
34004980:	d101      	bne.n	34004986 <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34004982:	05f8      	lsls	r0, r7, #23
34004984:	d4cb      	bmi.n	3400491e <HAL_RCC_OscConfig+0x222>
34004986:	f1ba 0f00 	cmp.w	sl, #0
3400498a:	d101      	bne.n	34004990 <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3400498c:	05b9      	lsls	r1, r7, #22
3400498e:	d4c6      	bmi.n	3400491e <HAL_RCC_OscConfig+0x222>
34004990:	f1b9 0f00 	cmp.w	r9, #0
34004994:	d101      	bne.n	3400499a <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34004996:	057a      	lsls	r2, r7, #21
34004998:	d4c1      	bmi.n	3400491e <HAL_RCC_OscConfig+0x222>
3400499a:	f1b8 0f00 	cmp.w	r8, #0
3400499e:	d101      	bne.n	340049a4 <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340049a0:	053b      	lsls	r3, r7, #20
340049a2:	d4bc      	bmi.n	3400491e <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
340049a4:	68e3      	ldr	r3, [r4, #12]
340049a6:	b313      	cbz	r3, 340049ee <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
340049a8:	6923      	ldr	r3, [r4, #16]
340049aa:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
340049ae:	d004      	beq.n	340049ba <HAL_RCC_OscConfig+0x2be>
340049b0:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
340049b4:	48ab      	ldr	r0, [pc, #684]	@ (34004c64 <HAL_RCC_OscConfig+0x568>)
340049b6:	f7fc fead 	bl	34001714 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
340049ba:	6963      	ldr	r3, [r4, #20]
340049bc:	2b7f      	cmp	r3, #127	@ 0x7f
340049be:	d904      	bls.n	340049ca <HAL_RCC_OscConfig+0x2ce>
340049c0:	f240 11d7 	movw	r1, #471	@ 0x1d7
340049c4:	48a7      	ldr	r0, [pc, #668]	@ (34004c64 <HAL_RCC_OscConfig+0x568>)
340049c6:	f7fc fea5 	bl	34001714 <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
340049ca:	2208      	movs	r2, #8
340049cc:	4ba6      	ldr	r3, [pc, #664]	@ (34004c68 <HAL_RCC_OscConfig+0x56c>)
340049ce:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
340049d2:	f7fd fec5 	bl	34002760 <HAL_GetTick>
340049d6:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
340049d8:	f7ff fcaa 	bl	34004330 <LL_RCC_HSI_IsReady>
340049dc:	2800      	cmp	r0, #0
340049de:	d1b3      	bne.n	34004948 <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
340049e0:	f7fd febe 	bl	34002760 <HAL_GetTick>
340049e4:	9b01      	ldr	r3, [sp, #4]
340049e6:	1ac0      	subs	r0, r0, r3
340049e8:	2801      	cmp	r0, #1
340049ea:	d9f5      	bls.n	340049d8 <HAL_RCC_OscConfig+0x2dc>
340049ec:	e75d      	b.n	340048aa <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
340049ee:	2208      	movs	r2, #8
340049f0:	4b9e      	ldr	r3, [pc, #632]	@ (34004c6c <HAL_RCC_OscConfig+0x570>)
340049f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
340049f4:	f7fd feb4 	bl	34002760 <HAL_GetTick>
340049f8:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
340049fa:	f7ff fc99 	bl	34004330 <LL_RCC_HSI_IsReady>
340049fe:	2800      	cmp	r0, #0
34004a00:	f43f aeac 	beq.w	3400475c <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34004a04:	f7fd feac 	bl	34002760 <HAL_GetTick>
34004a08:	9b01      	ldr	r3, [sp, #4]
34004a0a:	1ac0      	subs	r0, r0, r3
34004a0c:	2801      	cmp	r0, #1
34004a0e:	d9f4      	bls.n	340049fa <HAL_RCC_OscConfig+0x2fe>
34004a10:	e74b      	b.n	340048aa <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34004a12:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004a16:	f43f aeb4 	beq.w	34004782 <HAL_RCC_OscConfig+0x86>
34004a1a:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
34004a1e:	d102      	bne.n	34004a26 <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34004a20:	05f9      	lsls	r1, r7, #23
34004a22:	f53f aeae 	bmi.w	34004782 <HAL_RCC_OscConfig+0x86>
34004a26:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
34004a2a:	d102      	bne.n	34004a32 <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004a2c:	05ba      	lsls	r2, r7, #22
34004a2e:	f53f aea8 	bmi.w	34004782 <HAL_RCC_OscConfig+0x86>
34004a32:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
34004a36:	d102      	bne.n	34004a3e <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34004a38:	057b      	lsls	r3, r7, #21
34004a3a:	f53f aea2 	bmi.w	34004782 <HAL_RCC_OscConfig+0x86>
34004a3e:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
34004a42:	d102      	bne.n	34004a4a <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34004a44:	053f      	lsls	r7, r7, #20
34004a46:	f53f ae9c 	bmi.w	34004782 <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34004a4a:	69e3      	ldr	r3, [r4, #28]
34004a4c:	b343      	cbz	r3, 34004aa0 <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
34004a4e:	6a23      	ldr	r3, [r4, #32]
34004a50:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
34004a54:	d004      	beq.n	34004a60 <HAL_RCC_OscConfig+0x364>
34004a56:	f44f 7109 	mov.w	r1, #548	@ 0x224
34004a5a:	4882      	ldr	r0, [pc, #520]	@ (34004c64 <HAL_RCC_OscConfig+0x568>)
34004a5c:	f7fc fe5a 	bl	34001714 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34004a60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004a62:	2b1f      	cmp	r3, #31
34004a64:	d904      	bls.n	34004a70 <HAL_RCC_OscConfig+0x374>
34004a66:	f240 2125 	movw	r1, #549	@ 0x225
34004a6a:	487e      	ldr	r0, [pc, #504]	@ (34004c64 <HAL_RCC_OscConfig+0x568>)
34004a6c:	f7fc fe52 	bl	34001714 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34004a70:	4a7d      	ldr	r2, [pc, #500]	@ (34004c68 <HAL_RCC_OscConfig+0x56c>)
34004a72:	6a21      	ldr	r1, [r4, #32]
34004a74:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34004a76:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
34004a7a:	430b      	orrs	r3, r1
34004a7c:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34004a7e:	2304      	movs	r3, #4
34004a80:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34004a84:	f7fd fe6c 	bl	34002760 <HAL_GetTick>
34004a88:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
34004a8a:	f7ff fc59 	bl	34004340 <LL_RCC_MSI_IsReady>
34004a8e:	2800      	cmp	r0, #0
34004a90:	f47f ae82 	bne.w	34004798 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34004a94:	f7fd fe64 	bl	34002760 <HAL_GetTick>
34004a98:	1bc0      	subs	r0, r0, r7
34004a9a:	2801      	cmp	r0, #1
34004a9c:	d9f5      	bls.n	34004a8a <HAL_RCC_OscConfig+0x38e>
34004a9e:	e704      	b.n	340048aa <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34004aa0:	2204      	movs	r2, #4
34004aa2:	4b72      	ldr	r3, [pc, #456]	@ (34004c6c <HAL_RCC_OscConfig+0x570>)
34004aa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34004aa6:	f7fd fe5b 	bl	34002760 <HAL_GetTick>
34004aaa:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
34004aac:	f7ff fc48 	bl	34004340 <LL_RCC_MSI_IsReady>
34004ab0:	2800      	cmp	r0, #0
34004ab2:	f43f ae79 	beq.w	340047a8 <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34004ab6:	f7fd fe53 	bl	34002760 <HAL_GetTick>
34004aba:	1bc0      	subs	r0, r0, r7
34004abc:	2801      	cmp	r0, #1
34004abe:	d9f5      	bls.n	34004aac <HAL_RCC_OscConfig+0x3b0>
34004ac0:	e6f3      	b.n	340048aa <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34004ac2:	69a3      	ldr	r3, [r4, #24]
34004ac4:	2b01      	cmp	r3, #1
34004ac6:	d904      	bls.n	34004ad2 <HAL_RCC_OscConfig+0x3d6>
34004ac8:	f240 2155 	movw	r1, #597	@ 0x255
34004acc:	4865      	ldr	r0, [pc, #404]	@ (34004c64 <HAL_RCC_OscConfig+0x568>)
34004ace:	f7fc fe21 	bl	34001714 <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34004ad2:	69a2      	ldr	r2, [r4, #24]
34004ad4:	2301      	movs	r3, #1
34004ad6:	b18a      	cbz	r2, 34004afc <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34004ad8:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 34004c68 <HAL_RCC_OscConfig+0x56c>
34004adc:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004ae0:	f7fd fe3e 	bl	34002760 <HAL_GetTick>
34004ae4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34004ae6:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
34004aea:	07da      	lsls	r2, r3, #31
34004aec:	f53f ae60 	bmi.w	340047b0 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34004af0:	f7fd fe36 	bl	34002760 <HAL_GetTick>
34004af4:	1bc0      	subs	r0, r0, r7
34004af6:	2801      	cmp	r0, #1
34004af8:	d9f5      	bls.n	34004ae6 <HAL_RCC_OscConfig+0x3ea>
34004afa:	e6d6      	b.n	340048aa <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34004afc:	4a5b      	ldr	r2, [pc, #364]	@ (34004c6c <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34004afe:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 34004c68 <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34004b02:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
34004b04:	f7fd fe2c 	bl	34002760 <HAL_GetTick>
34004b08:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34004b0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
34004b0e:	07db      	lsls	r3, r3, #31
34004b10:	f57f ae4e 	bpl.w	340047b0 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34004b14:	f7fd fe24 	bl	34002760 <HAL_GetTick>
34004b18:	1bc0      	subs	r0, r0, r7
34004b1a:	2801      	cmp	r0, #1
34004b1c:	d9f5      	bls.n	34004b0a <HAL_RCC_OscConfig+0x40e>
34004b1e:	e6c4      	b.n	340048aa <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
34004b20:	68a3      	ldr	r3, [r4, #8]
34004b22:	f033 0202 	bics.w	r2, r3, #2
34004b26:	d00a      	beq.n	34004b3e <HAL_RCC_OscConfig+0x442>
34004b28:	f248 0202 	movw	r2, #32770	@ 0x8002
34004b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004b30:	4293      	cmp	r3, r2
34004b32:	d004      	beq.n	34004b3e <HAL_RCC_OscConfig+0x442>
34004b34:	f44f 7120 	mov.w	r1, #640	@ 0x280
34004b38:	484a      	ldr	r0, [pc, #296]	@ (34004c64 <HAL_RCC_OscConfig+0x568>)
34004b3a:	f7fc fdeb 	bl	34001714 <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004b3e:	68a3      	ldr	r3, [r4, #8]
34004b40:	4f49      	ldr	r7, [pc, #292]	@ (34004c68 <HAL_RCC_OscConfig+0x56c>)
34004b42:	2b02      	cmp	r3, #2
34004b44:	d113      	bne.n	34004b6e <HAL_RCC_OscConfig+0x472>
34004b46:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004b4a:	f7fd fe09 	bl	34002760 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004b4e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
34004b52:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34004b54:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 34004c68 <HAL_RCC_OscConfig+0x56c>
34004b58:	f8d9 3004 	ldr.w	r3, [r9, #4]
34004b5c:	0798      	lsls	r0, r3, #30
34004b5e:	f53f ae2b 	bmi.w	340047b8 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004b62:	f7fd fdfd 	bl	34002760 <HAL_GetTick>
34004b66:	1bc3      	subs	r3, r0, r7
34004b68:	4543      	cmp	r3, r8
34004b6a:	d9f5      	bls.n	34004b58 <HAL_RCC_OscConfig+0x45c>
34004b6c:	e69d      	b.n	340048aa <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004b6e:	b9d3      	cbnz	r3, 34004ba6 <HAL_RCC_OscConfig+0x4aa>
34004b70:	2202      	movs	r2, #2
34004b72:	4b3e      	ldr	r3, [pc, #248]	@ (34004c6c <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004b74:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004b78:	601a      	str	r2, [r3, #0]
34004b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004b80:	643b      	str	r3, [r7, #64]	@ 0x40
34004b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004b84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34004b88:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
34004b8a:	f7fd fde9 	bl	34002760 <HAL_GetTick>
34004b8e:	4680      	mov	r8, r0
34004b90:	687b      	ldr	r3, [r7, #4]
34004b92:	0799      	lsls	r1, r3, #30
34004b94:	f57f ae10 	bpl.w	340047b8 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004b98:	f7fd fde2 	bl	34002760 <HAL_GetTick>
34004b9c:	eba0 0308 	sub.w	r3, r0, r8
34004ba0:	454b      	cmp	r3, r9
34004ba2:	d9f5      	bls.n	34004b90 <HAL_RCC_OscConfig+0x494>
34004ba4:	e681      	b.n	340048aa <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004ba6:	f248 0202 	movw	r2, #32770	@ 0x8002
34004baa:	4293      	cmp	r3, r2
34004bac:	d109      	bne.n	34004bc2 <HAL_RCC_OscConfig+0x4c6>
34004bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34004bb4:	643b      	str	r3, [r7, #64]	@ 0x40
34004bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004bb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004bbc:	643b      	str	r3, [r7, #64]	@ 0x40
34004bbe:	2302      	movs	r3, #2
34004bc0:	e7c1      	b.n	34004b46 <HAL_RCC_OscConfig+0x44a>
34004bc2:	4a2b      	ldr	r2, [pc, #172]	@ (34004c70 <HAL_RCC_OscConfig+0x574>)
34004bc4:	4293      	cmp	r3, r2
34004bc6:	d107      	bne.n	34004bd8 <HAL_RCC_OscConfig+0x4dc>
34004bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34004bce:	643b      	str	r3, [r7, #64]	@ 0x40
34004bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34004bd6:	e7f1      	b.n	34004bbc <HAL_RCC_OscConfig+0x4c0>
34004bd8:	2202      	movs	r2, #2
34004bda:	4b24      	ldr	r3, [pc, #144]	@ (34004c6c <HAL_RCC_OscConfig+0x570>)
34004bdc:	601a      	str	r2, [r3, #0]
34004bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004be0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34004be4:	643b      	str	r3, [r7, #64]	@ 0x40
34004be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004bec:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34004bee:	e7ac      	b.n	34004b4a <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34004bf0:	2000      	movs	r0, #0
34004bf2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
34004bf6:	f7ff fbb3 	bl	34004360 <RCC_PLL_IsNewConfig>
34004bfa:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34004bfc:	f7ff fba8 	bl	34004350 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34004c00:	2a01      	cmp	r2, #1
34004c02:	d125      	bne.n	34004c50 <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004c04:	4b18      	ldr	r3, [pc, #96]	@ (34004c68 <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34004c06:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34004c0a:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004c0e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004c12:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004c16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004c1a:	d103      	bne.n	34004c24 <HAL_RCC_OscConfig+0x528>
34004c1c:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
34004c20:	f43f ad70 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34004c24:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004c28:	d10b      	bne.n	34004c42 <HAL_RCC_OscConfig+0x546>
34004c2a:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
34004c2e:	f43f ad69 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
34004c32:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
34004c36:	f43f ad65 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34004c3a:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
34004c3e:	f43f ad61 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34004c42:	2000      	movs	r0, #0
34004c44:	f7ff fbe6 	bl	34004414 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34004c48:	2800      	cmp	r0, #0
34004c4a:	f43f adc1 	beq.w	340047d0 <HAL_RCC_OscConfig+0xd4>
34004c4e:	e559      	b.n	34004704 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34004c50:	2f02      	cmp	r7, #2
34004c52:	f47f adbd 	bne.w	340047d0 <HAL_RCC_OscConfig+0xd4>
34004c56:	2800      	cmp	r0, #0
34004c58:	f47f adba 	bne.w	340047d0 <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34004c5c:	f7ff fbc2 	bl	340043e4 <RCC_PLL_Enable>
34004c60:	e7f2      	b.n	34004c48 <HAL_RCC_OscConfig+0x54c>
34004c62:	bf00      	nop
34004c64:	34010e35 	.word	0x34010e35
34004c68:	56028000 	.word	0x56028000
34004c6c:	56029000 	.word	0x56029000
34004c70:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34004c74:	2001      	movs	r0, #1
34004c76:	f104 0144 	add.w	r1, r4, #68	@ 0x44
34004c7a:	f7ff fb71 	bl	34004360 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004c7e:	4b77      	ldr	r3, [pc, #476]	@ (34004e5c <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004c80:	2801      	cmp	r0, #1
34004c82:	685a      	ldr	r2, [r3, #4]
34004c84:	d12c      	bne.n	34004ce0 <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34004c86:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004c8a:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004c8e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004c92:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004c96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004c9a:	d105      	bne.n	34004ca8 <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004c9c:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34004ca0:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34004ca4:	f43f ad2e 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34004ca8:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004cac:	d111      	bne.n	34004cd2 <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004cae:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004cb2:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34004cb6:	f43f ad25 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004cba:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004cbe:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34004cc2:	f43f ad1f 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004cc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34004cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004cce:	f43f ad19 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34004cd2:	2001      	movs	r0, #1
34004cd4:	f7ff fb9e 	bl	34004414 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004cd8:	2800      	cmp	r0, #0
34004cda:	f43f ad85 	beq.w	340047e8 <HAL_RCC_OscConfig+0xec>
34004cde:	e511      	b.n	34004704 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34004ce0:	2f02      	cmp	r7, #2
34004ce2:	f47f ad81 	bne.w	340047e8 <HAL_RCC_OscConfig+0xec>
34004ce6:	0592      	lsls	r2, r2, #22
34004ce8:	f53f ad7e 	bmi.w	340047e8 <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004cec:	2001      	movs	r0, #1
34004cee:	f7ff fb79 	bl	340043e4 <RCC_PLL_Enable>
34004cf2:	e7f1      	b.n	34004cd8 <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34004cf4:	2002      	movs	r0, #2
34004cf6:	f104 0160 	add.w	r1, r4, #96	@ 0x60
34004cfa:	f7ff fb31 	bl	34004360 <RCC_PLL_IsNewConfig>
34004cfe:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34004d00:	f7ff fb26 	bl	34004350 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34004d04:	2a01      	cmp	r2, #1
34004d06:	d12d      	bne.n	34004d64 <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004d08:	4b54      	ldr	r3, [pc, #336]	@ (34004e5c <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34004d0a:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34004d0e:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004d12:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004d16:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004d1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004d1e:	d105      	bne.n	34004d2c <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004d20:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34004d24:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
34004d28:	f43f acec 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34004d2c:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004d30:	d111      	bne.n	34004d56 <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004d32:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004d36:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34004d3a:	f43f ace3 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004d3e:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004d42:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34004d46:	f43f acdd 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004d4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34004d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004d52:	f43f acd7 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34004d56:	2002      	movs	r0, #2
34004d58:	f7ff fb5c 	bl	34004414 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34004d5c:	2800      	cmp	r0, #0
34004d5e:	f43f ad4f 	beq.w	34004800 <HAL_RCC_OscConfig+0x104>
34004d62:	e4cf      	b.n	34004704 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34004d64:	2f02      	cmp	r7, #2
34004d66:	f47f ad4b 	bne.w	34004800 <HAL_RCC_OscConfig+0x104>
34004d6a:	2800      	cmp	r0, #0
34004d6c:	f47f ad48 	bne.w	34004800 <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34004d70:	4638      	mov	r0, r7
34004d72:	f7ff fb37 	bl	340043e4 <RCC_PLL_Enable>
34004d76:	e7f1      	b.n	34004d5c <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34004d78:	2003      	movs	r0, #3
34004d7a:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
34004d7e:	f7ff faef 	bl	34004360 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004d82:	4b36      	ldr	r3, [pc, #216]	@ (34004e5c <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004d84:	2801      	cmp	r0, #1
34004d86:	685a      	ldr	r2, [r3, #4]
34004d88:	d12c      	bne.n	34004de4 <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34004d8a:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004d8e:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004d92:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004d96:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004d9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004d9e:	d105      	bne.n	34004dac <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004da0:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34004da4:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34004da8:	f43f acac 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004dac:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004db0:	d111      	bne.n	34004dd6 <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004db2:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004db6:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34004dba:	f43f aca3 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004dbe:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004dc2:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34004dc6:	f43f ac9d 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004dce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004dd2:	f43f ac97 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34004dd6:	2003      	movs	r0, #3
34004dd8:	f7ff fb1c 	bl	34004414 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004ddc:	3800      	subs	r0, #0
34004dde:	bf18      	it	ne
34004de0:	2001      	movne	r0, #1
34004de2:	e490      	b.n	34004706 <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34004de4:	2f02      	cmp	r7, #2
34004de6:	f47f ad17 	bne.w	34004818 <HAL_RCC_OscConfig+0x11c>
34004dea:	0513      	lsls	r3, r2, #20
34004dec:	f53f ad14 	bmi.w	34004818 <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004df0:	2003      	movs	r0, #3
34004df2:	f7ff faf7 	bl	340043e4 <RCC_PLL_Enable>
34004df6:	e7f1      	b.n	34004ddc <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34004df8:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004dfc:	f43f ac82 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
34004e00:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004e04:	f47f ae09 	bne.w	34004a1a <HAL_RCC_OscConfig+0x31e>
34004e08:	e47c      	b.n	34004704 <HAL_RCC_OscConfig+0x8>
34004e0a:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004e0e:	f43f acbb 	beq.w	34004788 <HAL_RCC_OscConfig+0x8c>
34004e12:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004e16:	f47f ae00 	bne.w	34004a1a <HAL_RCC_OscConfig+0x31e>
34004e1a:	e4b5      	b.n	34004788 <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004e1c:	2e00      	cmp	r6, #0
34004e1e:	f43f ac71 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
34004e22:	2d00      	cmp	r5, #0
34004e24:	f47f adaa 	bne.w	3400497c <HAL_RCC_OscConfig+0x280>
34004e28:	e46c      	b.n	34004704 <HAL_RCC_OscConfig+0x8>
34004e2a:	2e00      	cmp	r6, #0
34004e2c:	f43f ad7b 	beq.w	34004926 <HAL_RCC_OscConfig+0x22a>
34004e30:	2d00      	cmp	r5, #0
34004e32:	f43f ad78 	beq.w	34004926 <HAL_RCC_OscConfig+0x22a>
34004e36:	e5a1      	b.n	3400497c <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34004e38:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004e3c:	f43f ac8a 	beq.w	34004754 <HAL_RCC_OscConfig+0x58>
34004e40:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004e44:	f47f ad06 	bne.w	34004854 <HAL_RCC_OscConfig+0x158>
34004e48:	e484      	b.n	34004754 <HAL_RCC_OscConfig+0x58>
34004e4a:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004e4e:	f43f ac59 	beq.w	34004704 <HAL_RCC_OscConfig+0x8>
34004e52:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004e56:	f47f acfd 	bne.w	34004854 <HAL_RCC_OscConfig+0x158>
34004e5a:	e453      	b.n	34004704 <HAL_RCC_OscConfig+0x8>
34004e5c:	56028000 	.word	0x56028000

34004e60 <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004e60:	4b1f      	ldr	r3, [pc, #124]	@ (34004ee0 <HAL_RCC_GetCpuClockFreq+0x80>)
{
34004e62:	b510      	push	{r4, lr}
34004e64:	6a1a      	ldr	r2, [r3, #32]
34004e66:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
34004e6a:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34004e6e:	d034      	beq.n	34004eda <HAL_RCC_GetCpuClockFreq+0x7a>
34004e70:	d806      	bhi.n	34004e80 <HAL_RCC_GetCpuClockFreq+0x20>
34004e72:	b952      	cbnz	r2, 34004e8a <HAL_RCC_GetCpuClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34004e76:	481b      	ldr	r0, [pc, #108]	@ (34004ee4 <HAL_RCC_GetCpuClockFreq+0x84>)
34004e78:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004e7c:	40d8      	lsrs	r0, r3
}
34004e7e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetCpuClkSource())
34004e80:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34004e84:	d009      	beq.n	34004e9a <HAL_RCC_GetCpuClockFreq+0x3a>
      switch (LL_RCC_IC1_GetSource())
34004e86:	2000      	movs	r0, #0
34004e88:	e7f9      	b.n	34004e7e <HAL_RCC_GetCpuClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34004e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34004e8c:	4816      	ldr	r0, [pc, #88]	@ (34004ee8 <HAL_RCC_GetCpuClockFreq+0x88>)
34004e8e:	f413 7f00 	tst.w	r3, #512	@ 0x200
34004e92:	4b16      	ldr	r3, [pc, #88]	@ (34004eec <HAL_RCC_GetCpuClockFreq+0x8c>)
34004e94:	bf08      	it	eq
34004e96:	4618      	moveq	r0, r3
34004e98:	e7f1      	b.n	34004e7e <HAL_RCC_GetCpuClockFreq+0x1e>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004e9a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004e9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004ea2:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004ea6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC1_GetSource())
34004eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004eae:	f100 0401 	add.w	r4, r0, #1
34004eb2:	d00f      	beq.n	34004ed4 <HAL_RCC_GetCpuClockFreq+0x74>
34004eb4:	d805      	bhi.n	34004ec2 <HAL_RCC_GetCpuClockFreq+0x62>
34004eb6:	b953      	cbnz	r3, 34004ece <HAL_RCC_GetCpuClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34004eb8:	f003 fbb6 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34004ebc:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34004ec0:	e7dd      	b.n	34004e7e <HAL_RCC_GetCpuClockFreq+0x1e>
      switch (LL_RCC_IC1_GetSource())
34004ec2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004ec6:	d1de      	bne.n	34004e86 <HAL_RCC_GetCpuClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34004ec8:	f003 fc6e 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34004ecc:	e7f6      	b.n	34004ebc <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34004ece:	f003 fbeb 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
34004ed2:	e7f3      	b.n	34004ebc <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34004ed4:	f003 fc28 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
34004ed8:	e7f0      	b.n	34004ebc <HAL_RCC_GetCpuClockFreq+0x5c>
  switch (LL_RCC_GetCpuClkSource())
34004eda:	4805      	ldr	r0, [pc, #20]	@ (34004ef0 <HAL_RCC_GetCpuClockFreq+0x90>)
34004edc:	e7cf      	b.n	34004e7e <HAL_RCC_GetCpuClockFreq+0x1e>
34004ede:	bf00      	nop
34004ee0:	56028000 	.word	0x56028000
34004ee4:	03d09000 	.word	0x03d09000
34004ee8:	00f42400 	.word	0x00f42400
34004eec:	003d0900 	.word	0x003d0900
34004ef0:	02dc6c00 	.word	0x02dc6c00

34004ef4 <HAL_RCC_ClockConfig>:
{
34004ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
34004ef8:	4604      	mov	r4, r0
34004efa:	b910      	cbnz	r0, 34004f02 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
34004efc:	2001      	movs	r0, #1
}
34004efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34004f02:	6803      	ldr	r3, [r0, #0]
34004f04:	2b7f      	cmp	r3, #127	@ 0x7f
34004f06:	d904      	bls.n	34004f12 <HAL_RCC_ClockConfig+0x1e>
34004f08:	f240 317e 	movw	r1, #894	@ 0x37e
34004f0c:	4893      	ldr	r0, [pc, #588]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
34004f0e:	f7fc fc01 	bl	34001714 <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004f12:	6823      	ldr	r3, [r4, #0]
34004f14:	071f      	lsls	r7, r3, #28
34004f16:	d513      	bpl.n	34004f40 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004f18:	6923      	ldr	r3, [r4, #16]
34004f1a:	2b07      	cmp	r3, #7
34004f1c:	d904      	bls.n	34004f28 <HAL_RCC_ClockConfig+0x34>
34004f1e:	f240 3185 	movw	r1, #901	@ 0x385
34004f22:	488e      	ldr	r0, [pc, #568]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
34004f24:	f7fc fbf6 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004f28:	4a8d      	ldr	r2, [pc, #564]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
34004f2a:	6921      	ldr	r1, [r4, #16]
34004f2c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004f2e:	f003 0307 	and.w	r3, r3, #7
34004f32:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004f34:	bf81      	itttt	hi
34004f36:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004f38:	f023 0307 	bichi.w	r3, r3, #7
34004f3c:	430b      	orrhi	r3, r1
34004f3e:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004f40:	6823      	ldr	r3, [r4, #0]
34004f42:	06de      	lsls	r6, r3, #27
34004f44:	d516      	bpl.n	34004f74 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004f46:	6963      	ldr	r3, [r4, #20]
34004f48:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004f4c:	d006      	beq.n	34004f5c <HAL_RCC_ClockConfig+0x68>
34004f4e:	2b40      	cmp	r3, #64	@ 0x40
34004f50:	d004      	beq.n	34004f5c <HAL_RCC_ClockConfig+0x68>
34004f52:	f240 318f 	movw	r1, #911	@ 0x38f
34004f56:	4881      	ldr	r0, [pc, #516]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
34004f58:	f7fc fbdc 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004f5c:	4a80      	ldr	r2, [pc, #512]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
34004f5e:	6961      	ldr	r1, [r4, #20]
34004f60:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004f62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004f66:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004f68:	bf81      	itttt	hi
34004f6a:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004f6c:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
34004f70:	430b      	orrhi	r3, r1
34004f72:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004f74:	6823      	ldr	r3, [r4, #0]
34004f76:	069d      	lsls	r5, r3, #26
34004f78:	d517      	bpl.n	34004faa <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004f7a:	69a3      	ldr	r3, [r4, #24]
34004f7c:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004f80:	d007      	beq.n	34004f92 <HAL_RCC_ClockConfig+0x9e>
34004f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004f86:	d004      	beq.n	34004f92 <HAL_RCC_ClockConfig+0x9e>
34004f88:	f240 3199 	movw	r1, #921	@ 0x399
34004f8c:	4873      	ldr	r0, [pc, #460]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
34004f8e:	f7fc fbc1 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004f92:	4a73      	ldr	r2, [pc, #460]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
34004f94:	69a1      	ldr	r1, [r4, #24]
34004f96:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004f98:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004f9c:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004f9e:	bf81      	itttt	hi
34004fa0:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004fa2:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
34004fa6:	430b      	orrhi	r3, r1
34004fa8:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004faa:	6823      	ldr	r3, [r4, #0]
34004fac:	0658      	lsls	r0, r3, #25
34004fae:	d517      	bpl.n	34004fe0 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004fb0:	69e3      	ldr	r3, [r4, #28]
34004fb2:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004fb6:	d007      	beq.n	34004fc8 <HAL_RCC_ClockConfig+0xd4>
34004fb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004fbc:	d004      	beq.n	34004fc8 <HAL_RCC_ClockConfig+0xd4>
34004fbe:	f240 31a3 	movw	r1, #931	@ 0x3a3
34004fc2:	4866      	ldr	r0, [pc, #408]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
34004fc4:	f7fc fba6 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004fc8:	4a65      	ldr	r2, [pc, #404]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
34004fca:	69e1      	ldr	r1, [r4, #28]
34004fcc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004fce:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004fd2:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004fd4:	bf81      	itttt	hi
34004fd6:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004fd8:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
34004fdc:	430b      	orrhi	r3, r1
34004fde:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004fe0:	6823      	ldr	r3, [r4, #0]
34004fe2:	0759      	lsls	r1, r3, #29
34004fe4:	d517      	bpl.n	34005016 <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34004fe6:	68e3      	ldr	r3, [r4, #12]
34004fe8:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004fec:	d007      	beq.n	34004ffe <HAL_RCC_ClockConfig+0x10a>
34004fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004ff2:	d004      	beq.n	34004ffe <HAL_RCC_ClockConfig+0x10a>
34004ff4:	f240 31ad 	movw	r1, #941	@ 0x3ad
34004ff8:	4858      	ldr	r0, [pc, #352]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
34004ffa:	f7fc fb8b 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34004ffe:	4a58      	ldr	r2, [pc, #352]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
34005000:	68e1      	ldr	r1, [r4, #12]
34005002:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34005004:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34005008:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3400500a:	bf81      	itttt	hi
3400500c:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
3400500e:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
34005012:	430b      	orrhi	r3, r1
34005014:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34005016:	6823      	ldr	r3, [r4, #0]
34005018:	07da      	lsls	r2, r3, #31
3400501a:	d52a      	bpl.n	34005072 <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
3400501c:	6863      	ldr	r3, [r4, #4]
3400501e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34005022:	d004      	beq.n	3400502e <HAL_RCC_ClockConfig+0x13a>
34005024:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
34005028:	484c      	ldr	r0, [pc, #304]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
3400502a:	f7fc fb73 	bl	34001714 <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
3400502e:	6863      	ldr	r3, [r4, #4]
34005030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34005034:	f040 809a 	bne.w	3400516c <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34005038:	4b49      	ldr	r3, [pc, #292]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
3400503a:	685b      	ldr	r3, [r3, #4]
3400503c:	06db      	lsls	r3, r3, #27
3400503e:	f57f af5d 	bpl.w	34004efc <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34005042:	4d47      	ldr	r5, [pc, #284]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
34005044:	6862      	ldr	r2, [r4, #4]
34005046:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34005048:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
3400504c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005050:	4313      	orrs	r3, r2
34005052:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34005054:	f7fd fb84 	bl	34002760 <HAL_GetTick>
34005058:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3400505a:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
3400505c:	6862      	ldr	r2, [r4, #4]
3400505e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34005062:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34005066:	f040 80b7 	bne.w	340051d8 <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
3400506a:	f7ff fef9 	bl	34004e60 <HAL_RCC_GetCpuClockFreq>
3400506e:	4b3d      	ldr	r3, [pc, #244]	@ (34005164 <HAL_RCC_ClockConfig+0x270>)
34005070:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34005072:	6823      	ldr	r3, [r4, #0]
34005074:	079f      	lsls	r7, r3, #30
34005076:	f100 80b7 	bmi.w	340051e8 <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
3400507a:	6823      	ldr	r3, [r4, #0]
3400507c:	075e      	lsls	r6, r3, #29
3400507e:	f100 815c 	bmi.w	3400533a <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34005082:	6823      	ldr	r3, [r4, #0]
34005084:	0718      	lsls	r0, r3, #28
34005086:	d513      	bpl.n	340050b0 <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34005088:	6923      	ldr	r3, [r4, #16]
3400508a:	2b07      	cmp	r3, #7
3400508c:	d904      	bls.n	34005098 <HAL_RCC_ClockConfig+0x1a4>
3400508e:	f240 4163 	movw	r1, #1123	@ 0x463
34005092:	4832      	ldr	r0, [pc, #200]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
34005094:	f7fc fb3e 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34005098:	4a31      	ldr	r2, [pc, #196]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
3400509a:	6921      	ldr	r1, [r4, #16]
3400509c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3400509e:	f003 0307 	and.w	r3, r3, #7
340050a2:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
340050a4:	bf3f      	itttt	cc
340050a6:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
340050a8:	f023 0307 	biccc.w	r3, r3, #7
340050ac:	430b      	orrcc	r3, r1
340050ae:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
340050b0:	6823      	ldr	r3, [r4, #0]
340050b2:	06d9      	lsls	r1, r3, #27
340050b4:	d516      	bpl.n	340050e4 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
340050b6:	6963      	ldr	r3, [r4, #20]
340050b8:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340050bc:	d006      	beq.n	340050cc <HAL_RCC_ClockConfig+0x1d8>
340050be:	2b40      	cmp	r3, #64	@ 0x40
340050c0:	d004      	beq.n	340050cc <HAL_RCC_ClockConfig+0x1d8>
340050c2:	f240 416d 	movw	r1, #1133	@ 0x46d
340050c6:	4825      	ldr	r0, [pc, #148]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
340050c8:	f7fc fb24 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
340050cc:	4a24      	ldr	r2, [pc, #144]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
340050ce:	6961      	ldr	r1, [r4, #20]
340050d0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340050d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
340050d6:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
340050d8:	bf3f      	itttt	cc
340050da:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
340050dc:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
340050e0:	430b      	orrcc	r3, r1
340050e2:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
340050e4:	6823      	ldr	r3, [r4, #0]
340050e6:	069a      	lsls	r2, r3, #26
340050e8:	d517      	bpl.n	3400511a <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
340050ea:	69a3      	ldr	r3, [r4, #24]
340050ec:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
340050f0:	d007      	beq.n	34005102 <HAL_RCC_ClockConfig+0x20e>
340050f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
340050f6:	d004      	beq.n	34005102 <HAL_RCC_ClockConfig+0x20e>
340050f8:	f240 4177 	movw	r1, #1143	@ 0x477
340050fc:	4817      	ldr	r0, [pc, #92]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
340050fe:	f7fc fb09 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34005102:	4a17      	ldr	r2, [pc, #92]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
34005104:	69a1      	ldr	r1, [r4, #24]
34005106:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34005108:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3400510c:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
3400510e:	bf3f      	itttt	cc
34005110:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34005112:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
34005116:	430b      	orrcc	r3, r1
34005118:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3400511a:	6823      	ldr	r3, [r4, #0]
3400511c:	065b      	lsls	r3, r3, #25
3400511e:	d517      	bpl.n	34005150 <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34005120:	69e3      	ldr	r3, [r4, #28]
34005122:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34005126:	d007      	beq.n	34005138 <HAL_RCC_ClockConfig+0x244>
34005128:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400512c:	d004      	beq.n	34005138 <HAL_RCC_ClockConfig+0x244>
3400512e:	f240 4181 	movw	r1, #1153	@ 0x481
34005132:	480a      	ldr	r0, [pc, #40]	@ (3400515c <HAL_RCC_ClockConfig+0x268>)
34005134:	f7fc faee 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34005138:	4a09      	ldr	r2, [pc, #36]	@ (34005160 <HAL_RCC_ClockConfig+0x26c>)
3400513a:	69e1      	ldr	r1, [r4, #28]
3400513c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3400513e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34005142:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34005144:	bf3f      	itttt	cc
34005146:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34005148:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
3400514c:	430b      	orrcc	r3, r1
3400514e:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34005150:	4b05      	ldr	r3, [pc, #20]	@ (34005168 <HAL_RCC_ClockConfig+0x274>)
}
34005152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
34005156:	6818      	ldr	r0, [r3, #0]
34005158:	f7fd babe 	b.w	340026d8 <HAL_InitTick>
3400515c:	34010e35 	.word	0x34010e35
34005160:	56028000 	.word	0x56028000
34005164:	3401281c 	.word	0x3401281c
34005168:	34012824 	.word	0x34012824
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
3400516c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34005170:	d126      	bne.n	340051c0 <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34005172:	6a23      	ldr	r3, [r4, #32]
34005174:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005178:	d004      	beq.n	34005184 <HAL_RCC_ClockConfig+0x290>
3400517a:	f240 31c7 	movw	r1, #967	@ 0x3c7
3400517e:	487b      	ldr	r0, [pc, #492]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
34005180:	f7fc fac8 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34005184:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34005186:	3b01      	subs	r3, #1
34005188:	2bff      	cmp	r3, #255	@ 0xff
3400518a:	d904      	bls.n	34005196 <HAL_RCC_ClockConfig+0x2a2>
3400518c:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34005190:	4876      	ldr	r0, [pc, #472]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
34005192:	f7fc fabf 	bl	34001714 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34005196:	4e76      	ldr	r6, [pc, #472]	@ (34005370 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34005198:	6a25      	ldr	r5, [r4, #32]
3400519a:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
3400519e:	4629      	mov	r1, r5
340051a0:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340051a4:	f7ff fa52 	bl	3400464c <RCC_IC_CheckPLLSources>
340051a8:	2801      	cmp	r0, #1
340051aa:	f47f aea7 	bne.w	34004efc <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
340051ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340051b0:	3b01      	subs	r3, #1
340051b2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
340051b6:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
340051ba:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
340051be:	e740      	b.n	34005042 <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
340051c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340051c4:	d105      	bne.n	340051d2 <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
340051c6:	f7ff f8bb 	bl	34004340 <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
340051ca:	2800      	cmp	r0, #0
340051cc:	f47f af39 	bne.w	34005042 <HAL_RCC_ClockConfig+0x14e>
340051d0:	e694      	b.n	34004efc <HAL_RCC_ClockConfig+0x8>
340051d2:	f7ff f8ad 	bl	34004330 <LL_RCC_HSI_IsReady>
340051d6:	e7f8      	b.n	340051ca <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
340051d8:	f7fd fac2 	bl	34002760 <HAL_GetTick>
340051dc:	1b80      	subs	r0, r0, r6
340051de:	42b8      	cmp	r0, r7
340051e0:	f67f af3b 	bls.w	3400505a <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
340051e4:	2003      	movs	r0, #3
340051e6:	e68a      	b.n	34004efe <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
340051e8:	68a3      	ldr	r3, [r4, #8]
340051ea:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
340051ee:	d004      	beq.n	340051fa <HAL_RCC_ClockConfig+0x306>
340051f0:	f240 4101 	movw	r1, #1025	@ 0x401
340051f4:	485d      	ldr	r0, [pc, #372]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
340051f6:	f7fc fa8d 	bl	34001714 <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
340051fa:	68a3      	ldr	r3, [r4, #8]
340051fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34005200:	d11e      	bne.n	34005240 <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34005202:	4b5b      	ldr	r3, [pc, #364]	@ (34005370 <HAL_RCC_ClockConfig+0x47c>)
34005204:	685b      	ldr	r3, [r3, #4]
34005206:	06dd      	lsls	r5, r3, #27
34005208:	f57f ae78 	bpl.w	34004efc <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
3400520c:	4d58      	ldr	r5, [pc, #352]	@ (34005370 <HAL_RCC_ClockConfig+0x47c>)
3400520e:	68a2      	ldr	r2, [r4, #8]
34005210:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34005212:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34005216:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
3400521a:	4313      	orrs	r3, r2
3400521c:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
3400521e:	f7fd fa9f 	bl	34002760 <HAL_GetTick>
34005222:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34005224:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34005226:	68a2      	ldr	r2, [r4, #8]
34005228:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3400522c:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34005230:	f43f af23 	beq.w	3400507a <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34005234:	f7fd fa94 	bl	34002760 <HAL_GetTick>
34005238:	1b80      	subs	r0, r0, r6
3400523a:	42b8      	cmp	r0, r7
3400523c:	d9f2      	bls.n	34005224 <HAL_RCC_ClockConfig+0x330>
3400523e:	e7d1      	b.n	340051e4 <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34005240:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34005244:	d16f      	bne.n	34005326 <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34005246:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34005248:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400524c:	d004      	beq.n	34005258 <HAL_RCC_ClockConfig+0x364>
3400524e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34005252:	4846      	ldr	r0, [pc, #280]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
34005254:	f7fc fa5e 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34005258:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400525a:	3b01      	subs	r3, #1
3400525c:	2bff      	cmp	r3, #255	@ 0xff
3400525e:	d904      	bls.n	3400526a <HAL_RCC_ClockConfig+0x376>
34005260:	f240 4111 	movw	r1, #1041	@ 0x411
34005264:	4841      	ldr	r0, [pc, #260]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
34005266:	f7fc fa55 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
3400526a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400526c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005270:	d004      	beq.n	3400527c <HAL_RCC_ClockConfig+0x388>
34005272:	f240 4112 	movw	r1, #1042	@ 0x412
34005276:	483d      	ldr	r0, [pc, #244]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
34005278:	f7fc fa4c 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
3400527c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400527e:	3b01      	subs	r3, #1
34005280:	2bff      	cmp	r3, #255	@ 0xff
34005282:	d904      	bls.n	3400528e <HAL_RCC_ClockConfig+0x39a>
34005284:	f240 4113 	movw	r1, #1043	@ 0x413
34005288:	4838      	ldr	r0, [pc, #224]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
3400528a:	f7fc fa43 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
3400528e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34005290:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005294:	d004      	beq.n	340052a0 <HAL_RCC_ClockConfig+0x3ac>
34005296:	f240 4114 	movw	r1, #1044	@ 0x414
3400529a:	4834      	ldr	r0, [pc, #208]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
3400529c:	f7fc fa3a 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
340052a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340052a2:	3b01      	subs	r3, #1
340052a4:	2bff      	cmp	r3, #255	@ 0xff
340052a6:	d904      	bls.n	340052b2 <HAL_RCC_ClockConfig+0x3be>
340052a8:	f240 4115 	movw	r1, #1045	@ 0x415
340052ac:	482f      	ldr	r0, [pc, #188]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
340052ae:	f7fc fa31 	bl	34001714 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340052b2:	4d2f      	ldr	r5, [pc, #188]	@ (34005370 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
340052b4:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
340052b8:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
340052bc:	4641      	mov	r1, r8
340052be:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340052c2:	f7ff f9c3 	bl	3400464c <RCC_IC_CheckPLLSources>
340052c6:	2801      	cmp	r0, #1
340052c8:	f47f ae18 	bne.w	34004efc <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340052cc:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
340052d0:	6b27      	ldr	r7, [r4, #48]	@ 0x30
340052d2:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340052d6:	4639      	mov	r1, r7
340052d8:	f7ff f9b8 	bl	3400464c <RCC_IC_CheckPLLSources>
340052dc:	2801      	cmp	r0, #1
340052de:	f47f ae0d 	bne.w	34004efc <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340052e2:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
340052e6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
340052e8:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340052ec:	4631      	mov	r1, r6
340052ee:	f7ff f9ad 	bl	3400464c <RCC_IC_CheckPLLSources>
340052f2:	2801      	cmp	r0, #1
340052f4:	f47f ae02 	bne.w	34004efc <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
340052f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340052fa:	3b01      	subs	r3, #1
340052fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
34005300:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34005304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34005306:	3b01      	subs	r3, #1
34005308:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
3400530c:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34005310:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34005312:	3b01      	subs	r3, #1
34005314:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34005318:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
3400531c:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34005320:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
34005324:	e772      	b.n	3400520c <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34005326:	b92b      	cbnz	r3, 34005334 <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
34005328:	f7ff f802 	bl	34004330 <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
3400532c:	2800      	cmp	r0, #0
3400532e:	f47f af6d 	bne.w	3400520c <HAL_RCC_ClockConfig+0x318>
34005332:	e5e3      	b.n	34004efc <HAL_RCC_ClockConfig+0x8>
34005334:	f7ff f804 	bl	34004340 <LL_RCC_MSI_IsReady>
34005338:	e7f8      	b.n	3400532c <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
3400533a:	68e3      	ldr	r3, [r4, #12]
3400533c:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34005340:	d007      	beq.n	34005352 <HAL_RCC_ClockConfig+0x45e>
34005342:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34005346:	d004      	beq.n	34005352 <HAL_RCC_ClockConfig+0x45e>
34005348:	f44f 618b 	mov.w	r1, #1112	@ 0x458
3400534c:	4807      	ldr	r0, [pc, #28]	@ (3400536c <HAL_RCC_ClockConfig+0x478>)
3400534e:	f7fc f9e1 	bl	34001714 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34005352:	4a07      	ldr	r2, [pc, #28]	@ (34005370 <HAL_RCC_ClockConfig+0x47c>)
34005354:	68e1      	ldr	r1, [r4, #12]
34005356:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34005358:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3400535c:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3400535e:	bf3f      	itttt	cc
34005360:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34005362:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
34005366:	430b      	orrcc	r3, r1
34005368:	6253      	strcc	r3, [r2, #36]	@ 0x24
3400536a:	e68a      	b.n	34005082 <HAL_RCC_ClockConfig+0x18e>
3400536c:	34010e35 	.word	0x34010e35
34005370:	56028000 	.word	0x56028000

34005374 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34005374:	4b1f      	ldr	r3, [pc, #124]	@ (340053f4 <HAL_RCC_GetSysClockFreq+0x80>)
{
34005376:	b510      	push	{r4, lr}
34005378:	6a1a      	ldr	r2, [r3, #32]
3400537a:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
3400537e:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34005382:	d034      	beq.n	340053ee <HAL_RCC_GetSysClockFreq+0x7a>
34005384:	d806      	bhi.n	34005394 <HAL_RCC_GetSysClockFreq+0x20>
34005386:	b952      	cbnz	r2, 3400539e <HAL_RCC_GetSysClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34005388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400538a:	481b      	ldr	r0, [pc, #108]	@ (340053f8 <HAL_RCC_GetSysClockFreq+0x84>)
3400538c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34005390:	40d8      	lsrs	r0, r3
}
34005392:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSysClkSource())
34005394:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34005398:	d009      	beq.n	340053ae <HAL_RCC_GetSysClockFreq+0x3a>
      switch (LL_RCC_IC2_GetSource())
3400539a:	2000      	movs	r0, #0
3400539c:	e7f9      	b.n	34005392 <HAL_RCC_GetSysClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400539e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
340053a0:	4816      	ldr	r0, [pc, #88]	@ (340053fc <HAL_RCC_GetSysClockFreq+0x88>)
340053a2:	f413 7f00 	tst.w	r3, #512	@ 0x200
340053a6:	4b16      	ldr	r3, [pc, #88]	@ (34005400 <HAL_RCC_GetSysClockFreq+0x8c>)
340053a8:	bf08      	it	eq
340053aa:	4618      	moveq	r0, r3
340053ac:	e7f1      	b.n	34005392 <HAL_RCC_GetSysClockFreq+0x1e>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
340053ae:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340053b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
340053b6:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340053ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC2_GetSource())
340053be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
340053c2:	f100 0401 	add.w	r4, r0, #1
340053c6:	d00f      	beq.n	340053e8 <HAL_RCC_GetSysClockFreq+0x74>
340053c8:	d805      	bhi.n	340053d6 <HAL_RCC_GetSysClockFreq+0x62>
340053ca:	b953      	cbnz	r3, 340053e2 <HAL_RCC_GetSysClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
340053cc:	f003 f92c 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
340053d0:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
340053d4:	e7dd      	b.n	34005392 <HAL_RCC_GetSysClockFreq+0x1e>
      switch (LL_RCC_IC2_GetSource())
340053d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340053da:	d1de      	bne.n	3400539a <HAL_RCC_GetSysClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
340053dc:	f003 f9e4 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
340053e0:	e7f6      	b.n	340053d0 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
340053e2:	f003 f961 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
340053e6:	e7f3      	b.n	340053d0 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
340053e8:	f003 f99e 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
340053ec:	e7f0      	b.n	340053d0 <HAL_RCC_GetSysClockFreq+0x5c>
  switch (LL_RCC_GetSysClkSource())
340053ee:	4805      	ldr	r0, [pc, #20]	@ (34005404 <HAL_RCC_GetSysClockFreq+0x90>)
340053f0:	e7cf      	b.n	34005392 <HAL_RCC_GetSysClockFreq+0x1e>
340053f2:	bf00      	nop
340053f4:	56028000 	.word	0x56028000
340053f8:	03d09000 	.word	0x03d09000
340053fc:	00f42400 	.word	0x00f42400
34005400:	003d0900 	.word	0x003d0900
34005404:	02dc6c00 	.word	0x02dc6c00

34005408 <HAL_RCC_GetHCLKFreq>:
{
34005408:	b508      	push	{r3, lr}
  return LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler());
3400540a:	f7ff ffb3 	bl	34005374 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3400540e:	4b03      	ldr	r3, [pc, #12]	@ (3400541c <HAL_RCC_GetHCLKFreq+0x14>)
34005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34005412:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34005416:	40d8      	lsrs	r0, r3
34005418:	bd08      	pop	{r3, pc}
3400541a:	bf00      	nop
3400541c:	56028000 	.word	0x56028000

34005420 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34005420:	4a02      	ldr	r2, [pc, #8]	@ (3400542c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
34005422:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34005424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34005428:	6553      	str	r3, [r2, #84]	@ 0x54
}
3400542a:	4770      	bx	lr
3400542c:	56028000 	.word	0x56028000

34005430 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34005430:	4a02      	ldr	r2, [pc, #8]	@ (3400543c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
34005432:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34005434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34005438:	6553      	str	r3, [r2, #84]	@ 0x54
}
3400543a:	4770      	bx	lr
3400543c:	56028000 	.word	0x56028000

34005440 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34005440:	4b02      	ldr	r3, [pc, #8]	@ (3400544c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
34005442:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
34005444:	f3c0 1080 	ubfx	r0, r0, #6, #1
34005448:	4770      	bx	lr
3400544a:	bf00      	nop
3400544c:	56028000 	.word	0x56028000

34005450 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34005450:	4b02      	ldr	r3, [pc, #8]	@ (3400545c <LL_RCC_HSE_IsReady+0xc>)
34005452:	6858      	ldr	r0, [r3, #4]
}
34005454:	f3c0 1000 	ubfx	r0, r0, #4, #1
34005458:	4770      	bx	lr
3400545a:	bf00      	nop
3400545c:	56028000 	.word	0x56028000

34005460 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34005460:	4b02      	ldr	r3, [pc, #8]	@ (3400546c <LL_RCC_HSI_IsReady+0xc>)
34005462:	6858      	ldr	r0, [r3, #4]
}
34005464:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34005468:	4770      	bx	lr
3400546a:	bf00      	nop
3400546c:	56028000 	.word	0x56028000

34005470 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34005470:	4b02      	ldr	r3, [pc, #8]	@ (3400547c <LL_RCC_MSI_IsReady+0xc>)
34005472:	6858      	ldr	r0, [r3, #4]
}
34005474:	f3c0 0080 	ubfx	r0, r0, #2, #1
34005478:	4770      	bx	lr
3400547a:	bf00      	nop
3400547c:	56028000 	.word	0x56028000

34005480 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34005480:	4b02      	ldr	r3, [pc, #8]	@ (3400548c <LL_RCC_LSE_IsReady+0xc>)
34005482:	6858      	ldr	r0, [r3, #4]
}
34005484:	f3c0 0040 	ubfx	r0, r0, #1, #1
34005488:	4770      	bx	lr
3400548a:	bf00      	nop
3400548c:	56028000 	.word	0x56028000

34005490 <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34005490:	4907      	ldr	r1, [pc, #28]	@ (340054b0 <LL_RCC_SetClockSource+0x20>)
{
34005492:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34005494:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34005496:	f3c0 2504 	ubfx	r5, r0, #8, #5
3400549a:	5863      	ldr	r3, [r4, r1]
3400549c:	0e02      	lsrs	r2, r0, #24
3400549e:	40aa      	lsls	r2, r5
340054a0:	f3c0 4007 	ubfx	r0, r0, #16, #8
340054a4:	ea23 0302 	bic.w	r3, r3, r2
340054a8:	40a8      	lsls	r0, r5
340054aa:	4303      	orrs	r3, r0
340054ac:	5063      	str	r3, [r4, r1]
}
340054ae:	bd30      	pop	{r4, r5, pc}
340054b0:	56028144 	.word	0x56028144

340054b4 <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
340054b4:	4b05      	ldr	r3, [pc, #20]	@ (340054cc <LL_RCC_GetClockSource+0x18>)
340054b6:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
340054b8:	58d1      	ldr	r1, [r2, r3]
340054ba:	f3c0 2204 	ubfx	r2, r0, #8, #5
340054be:	0e03      	lsrs	r3, r0, #24
340054c0:	4093      	lsls	r3, r2
340054c2:	400b      	ands	r3, r1
340054c4:	40d3      	lsrs	r3, r2
}
340054c6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
340054ca:	4770      	bx	lr
340054cc:	56028144 	.word	0x56028144

340054d0 <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
340054d0:	4b02      	ldr	r3, [pc, #8]	@ (340054dc <LL_RCC_IC7_IsEnabled+0xc>)
340054d2:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340054d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
340054da:	4770      	bx	lr
340054dc:	56028000 	.word	0x56028000

340054e0 <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
340054e0:	4b03      	ldr	r3, [pc, #12]	@ (340054f0 <LL_RCC_IC7_GetDivider+0x10>)
340054e2:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
340054e6:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340054ea:	3001      	adds	r0, #1
340054ec:	4770      	bx	lr
340054ee:	bf00      	nop
340054f0:	56028000 	.word	0x56028000

340054f4 <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
340054f4:	4b02      	ldr	r3, [pc, #8]	@ (34005500 <LL_RCC_IC8_IsEnabled+0xc>)
340054f6:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340054fa:	f3c0 10c0 	ubfx	r0, r0, #7, #1
340054fe:	4770      	bx	lr
34005500:	56028000 	.word	0x56028000

34005504 <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34005504:	4b03      	ldr	r3, [pc, #12]	@ (34005514 <LL_RCC_IC8_GetDivider+0x10>)
34005506:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
3400550a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3400550e:	3001      	adds	r0, #1
34005510:	4770      	bx	lr
34005512:	bf00      	nop
34005514:	56028000 	.word	0x56028000

34005518 <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34005518:	4b02      	ldr	r3, [pc, #8]	@ (34005524 <LL_RCC_IC9_IsEnabled+0xc>)
3400551a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3400551e:	f3c0 2000 	ubfx	r0, r0, #8, #1
34005522:	4770      	bx	lr
34005524:	56028000 	.word	0x56028000

34005528 <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34005528:	4b03      	ldr	r3, [pc, #12]	@ (34005538 <LL_RCC_IC9_GetDivider+0x10>)
3400552a:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
3400552e:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34005532:	3001      	adds	r0, #1
34005534:	4770      	bx	lr
34005536:	bf00      	nop
34005538:	56028000 	.word	0x56028000

3400553c <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
3400553c:	4b02      	ldr	r3, [pc, #8]	@ (34005548 <LL_RCC_IC14_IsEnabled+0xc>)
3400553e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34005542:	f3c0 3040 	ubfx	r0, r0, #13, #1
34005546:	4770      	bx	lr
34005548:	56028000 	.word	0x56028000

3400554c <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
3400554c:	4b03      	ldr	r3, [pc, #12]	@ (3400555c <LL_RCC_IC14_GetDivider+0x10>)
3400554e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
34005552:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34005556:	3001      	adds	r0, #1
34005558:	4770      	bx	lr
3400555a:	bf00      	nop
3400555c:	56028000 	.word	0x56028000

34005560 <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34005560:	4b02      	ldr	r3, [pc, #8]	@ (3400556c <LL_RCC_IC15_IsEnabled+0xc>)
34005562:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34005566:	f3c0 3080 	ubfx	r0, r0, #14, #1
3400556a:	4770      	bx	lr
3400556c:	56028000 	.word	0x56028000

34005570 <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34005570:	4b03      	ldr	r3, [pc, #12]	@ (34005580 <LL_RCC_IC15_GetDivider+0x10>)
34005572:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
34005576:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3400557a:	3001      	adds	r0, #1
3400557c:	4770      	bx	lr
3400557e:	bf00      	nop
34005580:	56028000 	.word	0x56028000

34005584 <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34005584:	4b02      	ldr	r3, [pc, #8]	@ (34005590 <RCCEx_GetHCLKFreq+0xc>)
34005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34005588:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
3400558c:	40d8      	lsrs	r0, r3
3400558e:	4770      	bx	lr
34005590:	56028000 	.word	0x56028000

34005594 <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
34005594:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34005598:	b508      	push	{r3, lr}
  switch (PLLsource)
3400559a:	d01d      	beq.n	340055d8 <RCCEx_GetPLLSourceFreq+0x44>
3400559c:	d80a      	bhi.n	340055b4 <RCCEx_GetPLLSourceFreq+0x20>
3400559e:	b970      	cbnz	r0, 340055be <RCCEx_GetPLLSourceFreq+0x2a>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340055a0:	f7ff ff5e 	bl	34005460 <LL_RCC_HSI_IsReady>
340055a4:	b148      	cbz	r0, 340055ba <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340055a6:	4b10      	ldr	r3, [pc, #64]	@ (340055e8 <RCCEx_GetPLLSourceFreq+0x54>)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340055a8:	4810      	ldr	r0, [pc, #64]	@ (340055ec <RCCEx_GetPLLSourceFreq+0x58>)
340055aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340055ac:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340055b0:	40d8      	lsrs	r0, r3
340055b2:	e003      	b.n	340055bc <RCCEx_GetPLLSourceFreq+0x28>
  switch (PLLsource)
340055b4:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
340055b8:	d014      	beq.n	340055e4 <RCCEx_GetPLLSourceFreq+0x50>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
340055ba:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
340055bc:	bd08      	pop	{r3, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
340055be:	f7ff ff57 	bl	34005470 <LL_RCC_MSI_IsReady>
340055c2:	2800      	cmp	r0, #0
340055c4:	d0f9      	beq.n	340055ba <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
340055c6:	4b08      	ldr	r3, [pc, #32]	@ (340055e8 <RCCEx_GetPLLSourceFreq+0x54>)
          pllinputfreq = MSI_VALUE;
340055c8:	4809      	ldr	r0, [pc, #36]	@ (340055f0 <RCCEx_GetPLLSourceFreq+0x5c>)
340055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340055cc:	f413 7f00 	tst.w	r3, #512	@ 0x200
340055d0:	4b08      	ldr	r3, [pc, #32]	@ (340055f4 <RCCEx_GetPLLSourceFreq+0x60>)
340055d2:	bf08      	it	eq
340055d4:	4618      	moveq	r0, r3
340055d6:	e7f1      	b.n	340055bc <RCCEx_GetPLLSourceFreq+0x28>
      if (LL_RCC_HSE_IsReady() != 0U)
340055d8:	f7ff ff3a 	bl	34005450 <LL_RCC_HSE_IsReady>
340055dc:	2800      	cmp	r0, #0
340055de:	d0ec      	beq.n	340055ba <RCCEx_GetPLLSourceFreq+0x26>
        pllinputfreq = HSE_VALUE;
340055e0:	4805      	ldr	r0, [pc, #20]	@ (340055f8 <RCCEx_GetPLLSourceFreq+0x64>)
340055e2:	e7eb      	b.n	340055bc <RCCEx_GetPLLSourceFreq+0x28>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
340055e4:	4805      	ldr	r0, [pc, #20]	@ (340055fc <RCCEx_GetPLLSourceFreq+0x68>)
340055e6:	e7e9      	b.n	340055bc <RCCEx_GetPLLSourceFreq+0x28>
340055e8:	56028000 	.word	0x56028000
340055ec:	03d09000 	.word	0x03d09000
340055f0:	00f42400 	.word	0x00f42400
340055f4:	003d0900 	.word	0x003d0900
340055f8:	02dc6c00 	.word	0x02dc6c00
340055fc:	00bb8000 	.word	0x00bb8000

34005600 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34005600:	ee07 2a10 	vmov	s14, r2
34005604:	ee06 3a10 	vmov	s12, r3
34005608:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3400560c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
34005610:	eddf 5a10 	vldr	s11, [pc, #64]	@ 34005654 <RCCEx_CalcPLLFreq+0x54>
34005614:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
34005618:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3400561c:	eea6 7a25 	vfma.f32	s14, s12, s11
34005620:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005624:	ee67 7a87 	vmul.f32	s15, s15, s14
34005628:	eeb8 7a66 	vcvt.f32.u32	s14, s13
3400562c:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
34005630:	eddd 7a00 	vldr	s15, [sp]
34005634:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005638:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
3400563c:	eddd 7a01 	vldr	s15, [sp, #4]
34005640:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005644:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
34005648:	eefc 7ac7 	vcvt.u32.f32	s15, s14
3400564c:	ee17 0a90 	vmov	r0, s15
34005650:	4770      	bx	lr
34005652:	bf00      	nop
34005654:	33800000 	.word	0x33800000

34005658 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34005658:	e9d0 2300 	ldrd	r2, r3, [r0]
3400565c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
34005660:	431a      	orrs	r2, r3
{
34005662:	b570      	push	{r4, r5, r6, lr}
34005664:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34005666:	d103      	bne.n	34005670 <HAL_RCCEx_PeriphCLKConfig+0x18>
34005668:	2188      	movs	r1, #136	@ 0x88
3400566a:	4861      	ldr	r0, [pc, #388]	@ (340057f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
3400566c:	f7fc f852 	bl	34001714 <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34005670:	6823      	ldr	r3, [r4, #0]
34005672:	011a      	lsls	r2, r3, #4
34005674:	f140 808e 	bpl.w	34005794 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
34005678:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
3400567c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34005680:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
34005684:	d05a      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400568a:	d057      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400568c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
34005690:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
34005694:	d052      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005696:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
3400569a:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
3400569e:	d04d      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056a0:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
340056a4:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
340056a8:	d048      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056aa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
340056ae:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
340056b2:	d043      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
340056b8:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
340056bc:	d03e      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340056c2:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
340056c6:	d039      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056c8:	494a      	ldr	r1, [pc, #296]	@ (340057f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
340056ca:	428a      	cmp	r2, r1
340056cc:	d036      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056ce:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340056d2:	428a      	cmp	r2, r1
340056d4:	d032      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056d6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340056da:	428a      	cmp	r2, r1
340056dc:	d02e      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056de:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
340056e2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340056e6:	4288      	cmp	r0, r1
340056e8:	d028      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056ea:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
340056ee:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
340056f2:	4288      	cmp	r0, r1
340056f4:	d022      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056f6:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
340056fa:	428a      	cmp	r2, r1
340056fc:	d01e      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340056fe:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005702:	428a      	cmp	r2, r1
34005704:	d01a      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005706:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400570a:	428a      	cmp	r2, r1
3400570c:	d016      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400570e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005712:	428a      	cmp	r2, r1
34005714:	d012      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005716:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400571a:	428a      	cmp	r2, r1
3400571c:	d00e      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400571e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005722:	428a      	cmp	r2, r1
34005724:	d00a      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005726:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400572a:	428a      	cmp	r2, r1
3400572c:	d006      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400572e:	4a32      	ldr	r2, [pc, #200]	@ (340057f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
34005730:	4293      	cmp	r3, r2
34005732:	d003      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005734:	218e      	movs	r1, #142	@ 0x8e
34005736:	482e      	ldr	r0, [pc, #184]	@ (340057f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
34005738:	f7fb ffec 	bl	34001714 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3400573c:	4b2f      	ldr	r3, [pc, #188]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3400573e:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
34005742:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34005746:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
3400574a:	d13b      	bne.n	340057c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3400574c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
34005750:	d108      	bne.n	34005764 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
34005752:	f7fd f805 	bl	34002760 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34005756:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
3400575a:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
3400575c:	f7ff fe90 	bl	34005480 <LL_RCC_LSE_IsReady>
34005760:	2800      	cmp	r0, #0
34005762:	d03d      	beq.n	340057e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34005764:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34005768:	4a24      	ldr	r2, [pc, #144]	@ (340057fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
3400576a:	f403 7040 	and.w	r0, r3, #768	@ 0x300
3400576e:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
34005772:	d108      	bne.n	34005786 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34005774:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
34005778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3400577c:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
34005780:	430b      	orrs	r3, r1
34005782:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34005786:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3400578a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3400578e:	4303      	orrs	r3, r0
34005790:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34005794:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
34005796:	6823      	ldr	r3, [r4, #0]
34005798:	075e      	lsls	r6, r3, #29
3400579a:	d55f      	bpl.n	3400585c <HAL_RCCEx_PeriphCLKConfig+0x204>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
3400579c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
340057a0:	2b07      	cmp	r3, #7
340057a2:	d903      	bls.n	340057ac <HAL_RCCEx_PeriphCLKConfig+0x154>
340057a4:	21d4      	movs	r1, #212	@ 0xd4
340057a6:	4812      	ldr	r0, [pc, #72]	@ (340057f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
340057a8:	f7fb ffb4 	bl	34001714 <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
340057ac:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
340057b0:	3b03      	subs	r3, #3
340057b2:	2b04      	cmp	r3, #4
340057b4:	d848      	bhi.n	34005848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
340057b6:	e8df f013 	tbh	[pc, r3, lsl #1]
340057ba:	0f27      	.short	0x0f27
340057bc:	0ee10025 	.word	0x0ee10025
340057c0:	0f500f04 	.word	0x0f500f04
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
340057c4:	f401 7240 	and.w	r2, r1, #768	@ 0x300
340057c8:	429a      	cmp	r2, r3
340057ca:	d0bf      	beq.n	3400574c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
340057cc:	4b0c      	ldr	r3, [pc, #48]	@ (34005800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
340057ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
340057d0:	f042 0201 	orr.w	r2, r2, #1
340057d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
340057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340057d8:	07db      	lsls	r3, r3, #31
340057da:	d4b7      	bmi.n	3400574c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
340057dc:	2501      	movs	r5, #1
340057de:	e7da      	b.n	34005796 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340057e0:	f7fc ffbe 	bl	34002760 <HAL_GetTick>
340057e4:	1b40      	subs	r0, r0, r5
340057e6:	42b0      	cmp	r0, r6
340057e8:	d9b8      	bls.n	3400575c <HAL_RCCEx_PeriphCLKConfig+0x104>
        status = ret;
340057ea:	2503      	movs	r5, #3
340057ec:	e7d3      	b.n	34005796 <HAL_RCCEx_PeriphCLKConfig+0x13e>
340057ee:	bf00      	nop
340057f0:	34010edd 	.word	0x34010edd
340057f4:	00010300 	.word	0x00010300
340057f8:	0003e300 	.word	0x0003e300
340057fc:	56028000 	.word	0x56028000
34005800:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34005804:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34005806:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400580a:	d003      	beq.n	34005814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
3400580c:	21d9      	movs	r1, #217	@ 0xd9
3400580e:	48bd      	ldr	r0, [pc, #756]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005810:	f7fb ff80 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34005814:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34005816:	3b01      	subs	r3, #1
34005818:	2bff      	cmp	r3, #255	@ 0xff
3400581a:	d903      	bls.n	34005824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
3400581c:	21da      	movs	r1, #218	@ 0xda
3400581e:	48b9      	ldr	r0, [pc, #740]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005820:	f7fb ff78 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34005824:	4ab8      	ldr	r2, [pc, #736]	@ (34005b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005826:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34005828:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
3400582c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
3400582e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005832:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005836:	3901      	subs	r1, #1
34005838:	4303      	orrs	r3, r0
3400583a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400583e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34005842:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34005844:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34005848:	4aaf      	ldr	r2, [pc, #700]	@ (34005b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
3400584a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
3400584e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34005852:	f023 0307 	bic.w	r3, r3, #7
34005856:	430b      	orrs	r3, r1
34005858:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
3400585c:	6863      	ldr	r3, [r4, #4]
3400585e:	0258      	lsls	r0, r3, #9
34005860:	d539      	bpl.n	340058d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
34005862:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
34005866:	4aa9      	ldr	r2, [pc, #676]	@ (34005b0c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
34005868:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400586c:	4293      	cmp	r3, r2
3400586e:	d004      	beq.n	3400587a <HAL_RCCEx_PeriphCLKConfig+0x222>
34005870:	f44f 7192 	mov.w	r1, #292	@ 0x124
34005874:	48a3      	ldr	r0, [pc, #652]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005876:	f7fb ff4d 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3400587a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
3400587e:	4aa4      	ldr	r2, [pc, #656]	@ (34005b10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
34005880:	4293      	cmp	r3, r2
34005882:	f041 8713 	bne.w	340076ac <HAL_RCCEx_PeriphCLKConfig+0x2054>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005886:	69a3      	ldr	r3, [r4, #24]
34005888:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400588c:	d004      	beq.n	34005898 <HAL_RCCEx_PeriphCLKConfig+0x240>
3400588e:	f240 1129 	movw	r1, #297	@ 0x129
34005892:	489c      	ldr	r0, [pc, #624]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005894:	f7fb ff3e 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005898:	69e3      	ldr	r3, [r4, #28]
3400589a:	3b01      	subs	r3, #1
3400589c:	2bff      	cmp	r3, #255	@ 0xff
3400589e:	d904      	bls.n	340058aa <HAL_RCCEx_PeriphCLKConfig+0x252>
340058a0:	f44f 7195 	mov.w	r1, #298	@ 0x12a
340058a4:	4897      	ldr	r0, [pc, #604]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340058a6:	f7fb ff35 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340058aa:	4a97      	ldr	r2, [pc, #604]	@ (34005b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340058ac:	69e1      	ldr	r1, [r4, #28]
340058ae:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340058b2:	69a0      	ldr	r0, [r4, #24]
340058b4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340058b8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340058bc:	3901      	subs	r1, #1
340058be:	4303      	orrs	r3, r0
340058c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340058c4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340058c8:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340058ca:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340058ce:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
340058d2:	f7ff fddd 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
340058d6:	6863      	ldr	r3, [r4, #4]
340058d8:	0219      	lsls	r1, r3, #8
340058da:	d539      	bpl.n	34005950 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
340058dc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340058e0:	4a8c      	ldr	r2, [pc, #560]	@ (34005b14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
340058e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340058e6:	4293      	cmp	r3, r2
340058e8:	d004      	beq.n	340058f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
340058ea:	f240 1151 	movw	r1, #337	@ 0x151
340058ee:	4885      	ldr	r0, [pc, #532]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340058f0:	f7fb ff10 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
340058f4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340058f8:	4a87      	ldr	r2, [pc, #540]	@ (34005b18 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
340058fa:	4293      	cmp	r3, r2
340058fc:	f041 8706 	bne.w	3400770c <HAL_RCCEx_PeriphCLKConfig+0x20b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005900:	69a3      	ldr	r3, [r4, #24]
34005902:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005906:	d004      	beq.n	34005912 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
34005908:	f44f 71ab 	mov.w	r1, #342	@ 0x156
3400590c:	487d      	ldr	r0, [pc, #500]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400590e:	f7fb ff01 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005912:	69e3      	ldr	r3, [r4, #28]
34005914:	3b01      	subs	r3, #1
34005916:	2bff      	cmp	r3, #255	@ 0xff
34005918:	d904      	bls.n	34005924 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
3400591a:	f240 1157 	movw	r1, #343	@ 0x157
3400591e:	4879      	ldr	r0, [pc, #484]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005920:	f7fb fef8 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34005924:	4a78      	ldr	r2, [pc, #480]	@ (34005b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005926:	69e1      	ldr	r1, [r4, #28]
34005928:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
3400592c:	69a0      	ldr	r0, [r4, #24]
3400592e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005932:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005936:	3901      	subs	r1, #1
34005938:	4303      	orrs	r3, r0
3400593a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400593e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34005942:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005944:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005948:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
3400594c:	f7ff fda0 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34005950:	6863      	ldr	r3, [r4, #4]
34005952:	01da      	lsls	r2, r3, #7
34005954:	d539      	bpl.n	340059ca <HAL_RCCEx_PeriphCLKConfig+0x372>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
34005956:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
3400595a:	4a70      	ldr	r2, [pc, #448]	@ (34005b1c <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
3400595c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005960:	4293      	cmp	r3, r2
34005962:	d004      	beq.n	3400596e <HAL_RCCEx_PeriphCLKConfig+0x316>
34005964:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
34005968:	4866      	ldr	r0, [pc, #408]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400596a:	f7fb fed3 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3400596e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
34005972:	4a6b      	ldr	r2, [pc, #428]	@ (34005b20 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
34005974:	4293      	cmp	r3, r2
34005976:	f041 86f9 	bne.w	3400776c <HAL_RCCEx_PeriphCLKConfig+0x2114>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400597a:	69a3      	ldr	r3, [r4, #24]
3400597c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005980:	d004      	beq.n	3400598c <HAL_RCCEx_PeriphCLKConfig+0x334>
34005982:	f240 1183 	movw	r1, #387	@ 0x183
34005986:	485f      	ldr	r0, [pc, #380]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005988:	f7fb fec4 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400598c:	69e3      	ldr	r3, [r4, #28]
3400598e:	3b01      	subs	r3, #1
34005990:	2bff      	cmp	r3, #255	@ 0xff
34005992:	d904      	bls.n	3400599e <HAL_RCCEx_PeriphCLKConfig+0x346>
34005994:	f44f 71c2 	mov.w	r1, #388	@ 0x184
34005998:	485a      	ldr	r0, [pc, #360]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400599a:	f7fb febb 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400599e:	4a5a      	ldr	r2, [pc, #360]	@ (34005b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340059a0:	69e1      	ldr	r1, [r4, #28]
340059a2:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340059a6:	69a0      	ldr	r0, [r4, #24]
340059a8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340059ac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340059b0:	3901      	subs	r1, #1
340059b2:	4303      	orrs	r3, r0
340059b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340059b8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340059bc:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340059be:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340059c2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
340059c6:	f7ff fd63 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
340059ca:	6823      	ldr	r3, [r4, #0]
340059cc:	051b      	lsls	r3, r3, #20
340059ce:	d53c      	bpl.n	34005a4a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
340059d0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340059d4:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340059d8:	d004      	beq.n	340059e4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
340059da:	f240 11ab 	movw	r1, #427	@ 0x1ab
340059de:	4849      	ldr	r0, [pc, #292]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340059e0:	f7fb fe98 	bl	34001714 <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
340059e4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340059e8:	2b20      	cmp	r3, #32
340059ea:	f041 86ff 	bne.w	340077ec <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340059ee:	69a3      	ldr	r3, [r4, #24]
340059f0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340059f4:	d004      	beq.n	34005a00 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
340059f6:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
340059fa:	4842      	ldr	r0, [pc, #264]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340059fc:	f7fb fe8a 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005a00:	69e3      	ldr	r3, [r4, #28]
34005a02:	3b01      	subs	r3, #1
34005a04:	2bff      	cmp	r3, #255	@ 0xff
34005a06:	d904      	bls.n	34005a12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
34005a08:	f240 11b1 	movw	r1, #433	@ 0x1b1
34005a0c:	483d      	ldr	r0, [pc, #244]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005a0e:	f7fb fe81 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34005a12:	4a3d      	ldr	r2, [pc, #244]	@ (34005b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005a14:	69e1      	ldr	r1, [r4, #28]
34005a16:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34005a1a:	69a0      	ldr	r0, [r4, #24]
34005a1c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005a20:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005a24:	3901      	subs	r1, #1
34005a26:	4303      	orrs	r3, r0
34005a28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005a2c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34005a30:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005a32:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34005a36:	4a34      	ldr	r2, [pc, #208]	@ (34005b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005a38:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
34005a3c:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34005a40:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
34005a44:	430b      	orrs	r3, r1
34005a46:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
34005a4a:	6823      	ldr	r3, [r4, #0]
34005a4c:	005e      	lsls	r6, r3, #1
34005a4e:	d539      	bpl.n	34005ac4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
34005a50:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34005a54:	4a33      	ldr	r2, [pc, #204]	@ (34005b24 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
34005a56:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005a5a:	4293      	cmp	r3, r2
34005a5c:	d004      	beq.n	34005a68 <HAL_RCCEx_PeriphCLKConfig+0x410>
34005a5e:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
34005a62:	4828      	ldr	r0, [pc, #160]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005a64:	f7fb fe56 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34005a68:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34005a6c:	4a2e      	ldr	r2, [pc, #184]	@ (34005b28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
34005a6e:	4293      	cmp	r3, r2
34005a70:	f041 86ea 	bne.w	34007848 <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34005a74:	6a23      	ldr	r3, [r4, #32]
34005a76:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005a7a:	d004      	beq.n	34005a86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
34005a7c:	f240 11dd 	movw	r1, #477	@ 0x1dd
34005a80:	4820      	ldr	r0, [pc, #128]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005a82:	f7fb fe47 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34005a86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34005a88:	3b01      	subs	r3, #1
34005a8a:	2bff      	cmp	r3, #255	@ 0xff
34005a8c:	d904      	bls.n	34005a98 <HAL_RCCEx_PeriphCLKConfig+0x440>
34005a8e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
34005a92:	481c      	ldr	r0, [pc, #112]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005a94:	f7fb fe3e 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34005a98:	4a1b      	ldr	r2, [pc, #108]	@ (34005b08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005a9a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34005a9c:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34005aa0:	6a20      	ldr	r0, [r4, #32]
34005aa2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005aa6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005aaa:	3901      	subs	r1, #1
34005aac:	4303      	orrs	r3, r0
34005aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005ab2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005ab6:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34005ab8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005abc:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
34005ac0:	f7ff fce6 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34005ac4:	6823      	ldr	r3, [r4, #0]
34005ac6:	2b00      	cmp	r3, #0
34005ac8:	da53      	bge.n	34005b72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
34005aca:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34005ace:	4a17      	ldr	r2, [pc, #92]	@ (34005b2c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
34005ad0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005ad4:	4293      	cmp	r3, r2
34005ad6:	d004      	beq.n	34005ae2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
34005ad8:	f240 2105 	movw	r1, #517	@ 0x205
34005adc:	4809      	ldr	r0, [pc, #36]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005ade:	f7fb fe19 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
34005ae2:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34005ae6:	4a12      	ldr	r2, [pc, #72]	@ (34005b30 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
34005ae8:	4293      	cmp	r3, r2
34005aea:	f041 86dd 	bne.w	340078a8 <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34005aee:	6a23      	ldr	r3, [r4, #32]
34005af0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005af4:	d01e      	beq.n	34005b34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
34005af6:	f240 210a 	movw	r1, #522	@ 0x20a
34005afa:	4802      	ldr	r0, [pc, #8]	@ (34005b04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005afc:	f7fb fe0a 	bl	34001714 <assert_failed>
34005b00:	e018      	b.n	34005b34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
34005b02:	bf00      	nop
34005b04:	34010edd 	.word	0x34010edd
34005b08:	56028000 	.word	0x56028000
34005b0c:	03000014 	.word	0x03000014
34005b10:	03020014 	.word	0x03020014
34005b14:	03000414 	.word	0x03000414
34005b18:	03020414 	.word	0x03020414
34005b1c:	03000814 	.word	0x03000814
34005b20:	03020814 	.word	0x03020814
34005b24:	0300001c 	.word	0x0300001c
34005b28:	0302001c 	.word	0x0302001c
34005b2c:	0300041c 	.word	0x0300041c
34005b30:	0302041c 	.word	0x0302041c
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34005b34:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34005b36:	3b01      	subs	r3, #1
34005b38:	2bff      	cmp	r3, #255	@ 0xff
34005b3a:	d904      	bls.n	34005b46 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
34005b3c:	f240 210b 	movw	r1, #523	@ 0x20b
34005b40:	48c4      	ldr	r0, [pc, #784]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005b42:	f7fb fde7 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34005b46:	4ac4      	ldr	r2, [pc, #784]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005b48:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34005b4a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34005b4e:	6a20      	ldr	r0, [r4, #32]
34005b50:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005b54:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005b58:	3901      	subs	r1, #1
34005b5a:	4303      	orrs	r3, r0
34005b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005b60:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005b64:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34005b66:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005b6a:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
34005b6e:	f7ff fc8f 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34005b72:	6823      	ldr	r3, [r4, #0]
34005b74:	07d8      	lsls	r0, r3, #31
34005b76:	d54f      	bpl.n	34005c18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
34005b78:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34005b7c:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34005b80:	d006      	beq.n	34005b90 <HAL_RCCEx_PeriphCLKConfig+0x538>
34005b82:	2b40      	cmp	r3, #64	@ 0x40
34005b84:	d004      	beq.n	34005b90 <HAL_RCCEx_PeriphCLKConfig+0x538>
34005b86:	f240 2132 	movw	r1, #562	@ 0x232
34005b8a:	48b2      	ldr	r0, [pc, #712]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005b8c:	f7fb fdc2 	bl	34001714 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
34005b90:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
34005b94:	3b01      	subs	r3, #1
34005b96:	2bff      	cmp	r3, #255	@ 0xff
34005b98:	d904      	bls.n	34005ba4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
34005b9a:	f240 2133 	movw	r1, #563	@ 0x233
34005b9e:	48ad      	ldr	r0, [pc, #692]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005ba0:	f7fb fdb8 	bl	34001714 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34005ba4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34005ba8:	2b20      	cmp	r3, #32
34005baa:	f041 86ad 	bne.w	34007908 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34005bae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34005bb0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005bb4:	d004      	beq.n	34005bc0 <HAL_RCCEx_PeriphCLKConfig+0x568>
34005bb6:	f44f 710e 	mov.w	r1, #568	@ 0x238
34005bba:	48a6      	ldr	r0, [pc, #664]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005bbc:	f7fb fdaa 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34005bc0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34005bc2:	3b01      	subs	r3, #1
34005bc4:	2bff      	cmp	r3, #255	@ 0xff
34005bc6:	d904      	bls.n	34005bd2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
34005bc8:	f240 2139 	movw	r1, #569	@ 0x239
34005bcc:	48a1      	ldr	r0, [pc, #644]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005bce:	f7fb fda1 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34005bd2:	4aa1      	ldr	r2, [pc, #644]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005bd4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34005bd6:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34005bda:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34005bdc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005be0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005be4:	3901      	subs	r1, #1
34005be6:	4303      	orrs	r3, r0
34005be8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005bec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34005bf0:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34005bf2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
34005bf6:	4998      	ldr	r1, [pc, #608]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005bf8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
34005bfc:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
34005c00:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
34005c04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
34005c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
34005c0c:	3a01      	subs	r2, #1
34005c0e:	4303      	orrs	r3, r0
34005c10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34005c14:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34005c18:	6823      	ldr	r3, [r4, #0]
34005c1a:	0799      	lsls	r1, r3, #30
34005c1c:	d53b      	bpl.n	34005c96 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
34005c1e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34005c22:	2b07      	cmp	r3, #7
34005c24:	d904      	bls.n	34005c30 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
34005c26:	f240 2161 	movw	r1, #609	@ 0x261
34005c2a:	488a      	ldr	r0, [pc, #552]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005c2c:	f7fb fd72 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34005c30:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34005c34:	2b02      	cmp	r3, #2
34005c36:	f041 8695 	bne.w	34007964 <HAL_RCCEx_PeriphCLKConfig+0x230c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34005c3a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34005c3c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005c40:	d004      	beq.n	34005c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
34005c42:	f240 2166 	movw	r1, #614	@ 0x266
34005c46:	4883      	ldr	r0, [pc, #524]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005c48:	f7fb fd64 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34005c4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34005c4e:	3b01      	subs	r3, #1
34005c50:	2bff      	cmp	r3, #255	@ 0xff
34005c52:	d904      	bls.n	34005c5e <HAL_RCCEx_PeriphCLKConfig+0x606>
34005c54:	f240 2167 	movw	r1, #615	@ 0x267
34005c58:	487e      	ldr	r0, [pc, #504]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005c5a:	f7fb fd5b 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34005c5e:	4a7e      	ldr	r2, [pc, #504]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005c60:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34005c62:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34005c66:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34005c68:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005c6c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005c70:	3901      	subs	r1, #1
34005c72:	4303      	orrs	r3, r0
34005c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005c78:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34005c7c:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34005c7e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34005c82:	4a75      	ldr	r2, [pc, #468]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005c84:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
34005c88:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005c8c:	f023 0307 	bic.w	r3, r3, #7
34005c90:	430b      	orrs	r3, r1
34005c92:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
34005c96:	6823      	ldr	r3, [r4, #0]
34005c98:	071a      	lsls	r2, r3, #28
34005c9a:	d528      	bpl.n	34005cee <HAL_RCCEx_PeriphCLKConfig+0x696>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
34005c9c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34005ca0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005ca4:	d004      	beq.n	34005cb0 <HAL_RCCEx_PeriphCLKConfig+0x658>
34005ca6:	f240 218e 	movw	r1, #654	@ 0x28e
34005caa:	486a      	ldr	r0, [pc, #424]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005cac:	f7fb fd32 	bl	34001714 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
34005cb0:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
34005cb4:	3b01      	subs	r3, #1
34005cb6:	2bff      	cmp	r3, #255	@ 0xff
34005cb8:	d904      	bls.n	34005cc4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
34005cba:	f240 218f 	movw	r1, #655	@ 0x28f
34005cbe:	4865      	ldr	r0, [pc, #404]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005cc0:	f7fb fd28 	bl	34001714 <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34005cc4:	4a64      	ldr	r2, [pc, #400]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005cc6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
34005cca:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
34005cce:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
34005cd2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005cd6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005cda:	3901      	subs	r1, #1
34005cdc:	4303      	orrs	r3, r0
34005cde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005ce2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34005ce6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34005cea:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34005cee:	6823      	ldr	r3, [r4, #0]
34005cf0:	06db      	lsls	r3, r3, #27
34005cf2:	d542      	bpl.n	34005d7a <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
34005cf4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34005cf8:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34005cfc:	d004      	beq.n	34005d08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
34005cfe:	f240 219d 	movw	r1, #669	@ 0x29d
34005d02:	4854      	ldr	r0, [pc, #336]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005d04:	f7fb fd06 	bl	34001714 <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34005d08:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34005d0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34005d10:	f041 8656 	bne.w	340079c0 <HAL_RCCEx_PeriphCLKConfig+0x2368>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
34005d14:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34005d18:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005d1c:	d004      	beq.n	34005d28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
34005d1e:	f240 21a2 	movw	r1, #674	@ 0x2a2
34005d22:	484c      	ldr	r0, [pc, #304]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005d24:	f7fb fcf6 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
34005d28:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
34005d2c:	3b01      	subs	r3, #1
34005d2e:	2bff      	cmp	r3, #255	@ 0xff
34005d30:	d904      	bls.n	34005d3c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
34005d32:	f240 21a3 	movw	r1, #675	@ 0x2a3
34005d36:	4847      	ldr	r0, [pc, #284]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005d38:	f7fb fcec 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34005d3c:	4a46      	ldr	r2, [pc, #280]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005d3e:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
34005d42:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
34005d46:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
34005d4a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005d4e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005d52:	3901      	subs	r1, #1
34005d54:	4303      	orrs	r3, r0
34005d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005d5a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34005d5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34005d62:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34005d66:	4a3c      	ldr	r2, [pc, #240]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005d68:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
34005d6c:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005d70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34005d74:	430b      	orrs	r3, r1
34005d76:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34005d7a:	6823      	ldr	r3, [r4, #0]
34005d7c:	069e      	lsls	r6, r3, #26
34005d7e:	d53e      	bpl.n	34005dfe <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
34005d80:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34005d84:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34005d88:	d004      	beq.n	34005d94 <HAL_RCCEx_PeriphCLKConfig+0x73c>
34005d8a:	f240 21bd 	movw	r1, #701	@ 0x2bd
34005d8e:	4831      	ldr	r0, [pc, #196]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005d90:	f7fb fcc0 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34005d94:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34005d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34005d9c:	f041 8619 	bne.w	340079d2 <HAL_RCCEx_PeriphCLKConfig+0x237a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
34005da0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34005da2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005da6:	d004      	beq.n	34005db2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
34005da8:	f240 21c2 	movw	r1, #706	@ 0x2c2
34005dac:	4829      	ldr	r0, [pc, #164]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005dae:	f7fb fcb1 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34005db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34005db4:	3b01      	subs	r3, #1
34005db6:	2bff      	cmp	r3, #255	@ 0xff
34005db8:	d904      	bls.n	34005dc4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
34005dba:	f240 21c3 	movw	r1, #707	@ 0x2c3
34005dbe:	4825      	ldr	r0, [pc, #148]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005dc0:	f7fb fca8 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34005dc4:	4a24      	ldr	r2, [pc, #144]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005dc6:	6e61      	ldr	r1, [r4, #100]	@ 0x64
34005dc8:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
34005dcc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
34005dce:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005dd2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005dd6:	3901      	subs	r1, #1
34005dd8:	4303      	orrs	r3, r0
34005dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005dde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34005de2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34005de6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34005dea:	4a1b      	ldr	r2, [pc, #108]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005dec:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34005df0:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005df4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
34005df8:	430b      	orrs	r3, r1
34005dfa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34005dfe:	6823      	ldr	r3, [r4, #0]
34005e00:	0658      	lsls	r0, r3, #25
34005e02:	d516      	bpl.n	34005e32 <HAL_RCCEx_PeriphCLKConfig+0x7da>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
34005e04:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
34005e08:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
34005e0c:	d007      	beq.n	34005e1e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34005e0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34005e12:	d004      	beq.n	34005e1e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34005e14:	f240 21dd 	movw	r1, #733	@ 0x2dd
34005e18:	480e      	ldr	r0, [pc, #56]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005e1a:	f7fb fc7b 	bl	34001714 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34005e1e:	4a0e      	ldr	r2, [pc, #56]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005e20:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
34005e24:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005e28:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34005e2c:	430b      	orrs	r3, r1
34005e2e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34005e32:	6823      	ldr	r3, [r4, #0]
34005e34:	0619      	lsls	r1, r3, #24
34005e36:	d518      	bpl.n	34005e6a <HAL_RCCEx_PeriphCLKConfig+0x812>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
34005e38:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
34005e3c:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
34005e40:	d004      	beq.n	34005e4c <HAL_RCCEx_PeriphCLKConfig+0x7f4>
34005e42:	f240 21e7 	movw	r1, #743	@ 0x2e7
34005e46:	4803      	ldr	r0, [pc, #12]	@ (34005e54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005e48:	f7fb fc64 	bl	34001714 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34005e4c:	4a02      	ldr	r2, [pc, #8]	@ (34005e58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005e4e:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
34005e52:	e003      	b.n	34005e5c <HAL_RCCEx_PeriphCLKConfig+0x804>
34005e54:	34010edd 	.word	0x34010edd
34005e58:	56028000 	.word	0x56028000
34005e5c:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005e60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34005e64:	430b      	orrs	r3, r1
34005e66:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34005e6a:	6823      	ldr	r3, [r4, #0]
34005e6c:	05da      	lsls	r2, r3, #23
34005e6e:	d513      	bpl.n	34005e98 <HAL_RCCEx_PeriphCLKConfig+0x840>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
34005e70:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
34005e74:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34005e78:	d004      	beq.n	34005e84 <HAL_RCCEx_PeriphCLKConfig+0x82c>
34005e7a:	f240 21f1 	movw	r1, #753	@ 0x2f1
34005e7e:	48c1      	ldr	r0, [pc, #772]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005e80:	f7fb fc48 	bl	34001714 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34005e84:	4ac0      	ldr	r2, [pc, #768]	@ (34006188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005e86:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
34005e8a:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34005e92:	430b      	orrs	r3, r1
34005e94:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34005e98:	6823      	ldr	r3, [r4, #0]
34005e9a:	059b      	lsls	r3, r3, #22
34005e9c:	d54b      	bpl.n	34005f36 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34005e9e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005ea2:	2b03      	cmp	r3, #3
34005ea4:	d904      	bls.n	34005eb0 <HAL_RCCEx_PeriphCLKConfig+0x858>
34005ea6:	f240 21fb 	movw	r1, #763	@ 0x2fb
34005eaa:	48b6      	ldr	r0, [pc, #728]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005eac:	f7fb fc32 	bl	34001714 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34005eb0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
34005eb4:	3b01      	subs	r3, #1
34005eb6:	2b0f      	cmp	r3, #15
34005eb8:	d904      	bls.n	34005ec4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
34005eba:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
34005ebe:	48b1      	ldr	r0, [pc, #708]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005ec0:	f7fb fc28 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34005ec4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005ec8:	2b02      	cmp	r3, #2
34005eca:	f041 858b 	bne.w	340079e4 <HAL_RCCEx_PeriphCLKConfig+0x238c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
34005ece:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
34005ed0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005ed4:	d004      	beq.n	34005ee0 <HAL_RCCEx_PeriphCLKConfig+0x888>
34005ed6:	f240 3101 	movw	r1, #769	@ 0x301
34005eda:	48aa      	ldr	r0, [pc, #680]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005edc:	f7fb fc1a 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
34005ee0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
34005ee2:	3b01      	subs	r3, #1
34005ee4:	2bff      	cmp	r3, #255	@ 0xff
34005ee6:	d904      	bls.n	34005ef2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
34005ee8:	f240 3102 	movw	r1, #770	@ 0x302
34005eec:	48a5      	ldr	r0, [pc, #660]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005eee:	f7fb fc11 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34005ef2:	4aa5      	ldr	r2, [pc, #660]	@ (34006188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005ef4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
34005ef6:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
34005efa:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
34005efc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005f00:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005f04:	3901      	subs	r1, #1
34005f06:	4303      	orrs	r3, r0
34005f08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005f0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34005f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34005f14:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34005f18:	499b      	ldr	r1, [pc, #620]	@ (34006188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005f1a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
34005f1e:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
34005f22:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
34005f26:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
34005f2a:	3a01      	subs	r2, #1
34005f2c:	4303      	orrs	r3, r0
34005f2e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
34005f32:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34005f36:	6823      	ldr	r3, [r4, #0]
34005f38:	055e      	lsls	r6, r3, #21
34005f3a:	d540      	bpl.n	34005fbe <HAL_RCCEx_PeriphCLKConfig+0x966>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
34005f3c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005f40:	2b03      	cmp	r3, #3
34005f42:	d904      	bls.n	34005f4e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
34005f44:	f240 311d 	movw	r1, #797	@ 0x31d
34005f48:	488e      	ldr	r0, [pc, #568]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005f4a:	f7fb fbe3 	bl	34001714 <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
34005f4e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005f52:	2b02      	cmp	r3, #2
34005f54:	f041 854e 	bne.w	340079f4 <HAL_RCCEx_PeriphCLKConfig+0x239c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34005f58:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34005f5c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005f60:	d004      	beq.n	34005f6c <HAL_RCCEx_PeriphCLKConfig+0x914>
34005f62:	f240 3122 	movw	r1, #802	@ 0x322
34005f66:	4887      	ldr	r0, [pc, #540]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005f68:	f7fb fbd4 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34005f6c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34005f70:	3b01      	subs	r3, #1
34005f72:	2bff      	cmp	r3, #255	@ 0xff
34005f74:	d904      	bls.n	34005f80 <HAL_RCCEx_PeriphCLKConfig+0x928>
34005f76:	f240 3123 	movw	r1, #803	@ 0x323
34005f7a:	4882      	ldr	r0, [pc, #520]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005f7c:	f7fb fbca 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34005f80:	4a81      	ldr	r2, [pc, #516]	@ (34006188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005f82:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34005f86:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34005f8a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34005f8e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005f92:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005f96:	3901      	subs	r1, #1
34005f98:	4303      	orrs	r3, r0
34005f9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005f9e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34005fa2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34005fa6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34005faa:	4a77      	ldr	r2, [pc, #476]	@ (34006188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005fac:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
34005fb0:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34005fb4:	f023 0303 	bic.w	r3, r3, #3
34005fb8:	430b      	orrs	r3, r1
34005fba:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34005fbe:	6823      	ldr	r3, [r4, #0]
34005fc0:	04d8      	lsls	r0, r3, #19
34005fc2:	d540      	bpl.n	34006046 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34005fc4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005fc8:	4a70      	ldr	r2, [pc, #448]	@ (3400618c <HAL_RCCEx_PeriphCLKConfig+0xb34>)
34005fca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005fce:	4291      	cmp	r1, r2
34005fd0:	d00a      	beq.n	34005fe8 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005fd6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005fda:	4293      	cmp	r3, r2
34005fdc:	d004      	beq.n	34005fe8 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005fde:	f240 313d 	movw	r1, #829	@ 0x33d
34005fe2:	4868      	ldr	r0, [pc, #416]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005fe4:	f7fb fb96 	bl	34001714 <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34005fe8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005fec:	4a68      	ldr	r2, [pc, #416]	@ (34006190 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
34005fee:	4293      	cmp	r3, r2
34005ff0:	f041 8508 	bne.w	34007a04 <HAL_RCCEx_PeriphCLKConfig+0x23ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005ff4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005ff6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005ffa:	d004      	beq.n	34006006 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
34005ffc:	f240 3142 	movw	r1, #834	@ 0x342
34006000:	4860      	ldr	r0, [pc, #384]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34006002:	f7fb fb87 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34006006:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34006008:	3b01      	subs	r3, #1
3400600a:	2bff      	cmp	r3, #255	@ 0xff
3400600c:	d904      	bls.n	34006018 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
3400600e:	f240 3143 	movw	r1, #835	@ 0x343
34006012:	485c      	ldr	r0, [pc, #368]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34006014:	f7fb fb7e 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34006018:	4a5b      	ldr	r2, [pc, #364]	@ (34006188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
3400601a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
3400601c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34006020:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34006022:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006026:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400602a:	3901      	subs	r1, #1
3400602c:	4303      	orrs	r3, r0
3400602e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006032:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34006036:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400603a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400603e:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
34006042:	f7ff fa25 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34006046:	6823      	ldr	r3, [r4, #0]
34006048:	0499      	lsls	r1, r3, #18
3400604a:	d540      	bpl.n	340060ce <HAL_RCCEx_PeriphCLKConfig+0xa76>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
3400604c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34006050:	4a50      	ldr	r2, [pc, #320]	@ (34006194 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
34006052:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006056:	4291      	cmp	r1, r2
34006058:	d00a      	beq.n	34006070 <HAL_RCCEx_PeriphCLKConfig+0xa18>
3400605a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400605e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006062:	4293      	cmp	r3, r2
34006064:	d004      	beq.n	34006070 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34006066:	f240 316a 	movw	r1, #874	@ 0x36a
3400606a:	4846      	ldr	r0, [pc, #280]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3400606c:	f7fb fb52 	bl	34001714 <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34006070:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34006074:	4a48      	ldr	r2, [pc, #288]	@ (34006198 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
34006076:	4293      	cmp	r3, r2
34006078:	f041 84f5 	bne.w	34007a66 <HAL_RCCEx_PeriphCLKConfig+0x240e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400607c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3400607e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006082:	d004      	beq.n	3400608e <HAL_RCCEx_PeriphCLKConfig+0xa36>
34006084:	f240 316f 	movw	r1, #879	@ 0x36f
34006088:	483e      	ldr	r0, [pc, #248]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3400608a:	f7fb fb43 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400608e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34006090:	3b01      	subs	r3, #1
34006092:	2bff      	cmp	r3, #255	@ 0xff
34006094:	d904      	bls.n	340060a0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
34006096:	f44f 715c 	mov.w	r1, #880	@ 0x370
3400609a:	483a      	ldr	r0, [pc, #232]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3400609c:	f7fb fb3a 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340060a0:	4a39      	ldr	r2, [pc, #228]	@ (34006188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
340060a2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340060a4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340060a8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340060aa:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340060ae:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340060b2:	3901      	subs	r1, #1
340060b4:	4303      	orrs	r3, r0
340060b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340060ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340060be:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340060c2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340060c6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
340060ca:	f7ff f9e1 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
340060ce:	6823      	ldr	r3, [r4, #0]
340060d0:	045a      	lsls	r2, r3, #17
340060d2:	d540      	bpl.n	34006156 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
340060d4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340060d8:	4a30      	ldr	r2, [pc, #192]	@ (3400619c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
340060da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340060de:	4291      	cmp	r1, r2
340060e0:	d00a      	beq.n	340060f8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
340060e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340060e6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340060ea:	4293      	cmp	r3, r2
340060ec:	d004      	beq.n	340060f8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
340060ee:	f240 3197 	movw	r1, #919	@ 0x397
340060f2:	4824      	ldr	r0, [pc, #144]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340060f4:	f7fb fb0e 	bl	34001714 <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
340060f8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340060fc:	4a28      	ldr	r2, [pc, #160]	@ (340061a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
340060fe:	4293      	cmp	r3, r2
34006100:	f041 84f6 	bne.w	34007af0 <HAL_RCCEx_PeriphCLKConfig+0x2498>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34006104:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34006106:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400610a:	d004      	beq.n	34006116 <HAL_RCCEx_PeriphCLKConfig+0xabe>
3400610c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34006110:	481c      	ldr	r0, [pc, #112]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34006112:	f7fb faff 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34006116:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34006118:	3b01      	subs	r3, #1
3400611a:	2bff      	cmp	r3, #255	@ 0xff
3400611c:	d904      	bls.n	34006128 <HAL_RCCEx_PeriphCLKConfig+0xad0>
3400611e:	f240 319d 	movw	r1, #925	@ 0x39d
34006122:	4818      	ldr	r0, [pc, #96]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34006124:	f7fb faf6 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34006128:	4a17      	ldr	r2, [pc, #92]	@ (34006188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
3400612a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
3400612c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34006130:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34006132:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006136:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400613a:	3901      	subs	r1, #1
3400613c:	4303      	orrs	r3, r0
3400613e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006142:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34006146:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400614a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400614e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
34006152:	f7ff f99d 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34006156:	6823      	ldr	r3, [r4, #0]
34006158:	041b      	lsls	r3, r3, #16
3400615a:	d554      	bpl.n	34006206 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
3400615c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34006160:	4a10      	ldr	r2, [pc, #64]	@ (340061a4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
34006162:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006166:	4291      	cmp	r1, r2
34006168:	d01e      	beq.n	340061a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
3400616a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400616e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006172:	4293      	cmp	r3, r2
34006174:	d018      	beq.n	340061a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34006176:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
3400617a:	4802      	ldr	r0, [pc, #8]	@ (34006184 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3400617c:	f7fb faca 	bl	34001714 <assert_failed>
34006180:	e012      	b.n	340061a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34006182:	bf00      	nop
34006184:	34010edd 	.word	0x34010edd
34006188:	56028000 	.word	0x56028000
3400618c:	0700000c 	.word	0x0700000c
34006190:	0702000c 	.word	0x0702000c
34006194:	0700040c 	.word	0x0700040c
34006198:	0702040c 	.word	0x0702040c
3400619c:	0700080c 	.word	0x0700080c
340061a0:	0702080c 	.word	0x0702080c
340061a4:	07000c0c 	.word	0x07000c0c
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
340061a8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
340061ac:	4abd      	ldr	r2, [pc, #756]	@ (340064a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
340061ae:	4293      	cmp	r3, r2
340061b0:	f041 84cf 	bne.w	34007b52 <HAL_RCCEx_PeriphCLKConfig+0x24fa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
340061b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
340061b6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340061ba:	d004      	beq.n	340061c6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
340061bc:	f240 31c9 	movw	r1, #969	@ 0x3c9
340061c0:	48b9      	ldr	r0, [pc, #740]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340061c2:	f7fb faa7 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340061c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340061c8:	3b01      	subs	r3, #1
340061ca:	2bff      	cmp	r3, #255	@ 0xff
340061cc:	d904      	bls.n	340061d8 <HAL_RCCEx_PeriphCLKConfig+0xb80>
340061ce:	f240 31ca 	movw	r1, #970	@ 0x3ca
340061d2:	48b5      	ldr	r0, [pc, #724]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340061d4:	f7fb fa9e 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340061d8:	4ab4      	ldr	r2, [pc, #720]	@ (340064ac <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340061da:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340061dc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340061e0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340061e2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340061e6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340061ea:	3901      	subs	r1, #1
340061ec:	4303      	orrs	r3, r0
340061ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340061f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340061f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340061fa:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340061fe:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
34006202:	f7ff f945 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34006206:	6823      	ldr	r3, [r4, #0]
34006208:	03de      	lsls	r6, r3, #15
3400620a:	d540      	bpl.n	3400628e <HAL_RCCEx_PeriphCLKConfig+0xc36>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
3400620c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34006210:	4aa7      	ldr	r2, [pc, #668]	@ (340064b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
34006212:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006216:	4291      	cmp	r1, r2
34006218:	d00a      	beq.n	34006230 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
3400621a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400621e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006222:	4293      	cmp	r3, r2
34006224:	d004      	beq.n	34006230 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34006226:	f240 31f1 	movw	r1, #1009	@ 0x3f1
3400622a:	489f      	ldr	r0, [pc, #636]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400622c:	f7fb fa72 	bl	34001714 <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34006230:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34006234:	4a9f      	ldr	r2, [pc, #636]	@ (340064b4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
34006236:	4293      	cmp	r3, r2
34006238:	f041 84bc 	bne.w	34007bb4 <HAL_RCCEx_PeriphCLKConfig+0x255c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400623c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3400623e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006242:	d004      	beq.n	3400624e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
34006244:	f240 31f6 	movw	r1, #1014	@ 0x3f6
34006248:	4897      	ldr	r0, [pc, #604]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400624a:	f7fb fa63 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400624e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34006250:	3b01      	subs	r3, #1
34006252:	2bff      	cmp	r3, #255	@ 0xff
34006254:	d904      	bls.n	34006260 <HAL_RCCEx_PeriphCLKConfig+0xc08>
34006256:	f240 31f7 	movw	r1, #1015	@ 0x3f7
3400625a:	4893      	ldr	r0, [pc, #588]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400625c:	f7fb fa5a 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34006260:	4a92      	ldr	r2, [pc, #584]	@ (340064ac <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34006262:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34006264:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34006268:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3400626a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400626e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006272:	3901      	subs	r1, #1
34006274:	4303      	orrs	r3, r0
34006276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400627a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3400627e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006282:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006286:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
3400628a:	f7ff f901 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
3400628e:	6823      	ldr	r3, [r4, #0]
34006290:	0398      	lsls	r0, r3, #14
34006292:	d540      	bpl.n	34006316 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34006294:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34006298:	4a87      	ldr	r2, [pc, #540]	@ (340064b8 <HAL_RCCEx_PeriphCLKConfig+0xe60>)
3400629a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400629e:	4291      	cmp	r1, r2
340062a0:	d00a      	beq.n	340062b8 <HAL_RCCEx_PeriphCLKConfig+0xc60>
340062a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340062a6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340062aa:	4293      	cmp	r3, r2
340062ac:	d004      	beq.n	340062b8 <HAL_RCCEx_PeriphCLKConfig+0xc60>
340062ae:	f240 411e 	movw	r1, #1054	@ 0x41e
340062b2:	487d      	ldr	r0, [pc, #500]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340062b4:	f7fb fa2e 	bl	34001714 <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
340062b8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
340062bc:	4a7f      	ldr	r2, [pc, #508]	@ (340064bc <HAL_RCCEx_PeriphCLKConfig+0xe64>)
340062be:	4293      	cmp	r3, r2
340062c0:	f041 84a9 	bne.w	34007c16 <HAL_RCCEx_PeriphCLKConfig+0x25be>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
340062c4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
340062c6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340062ca:	d004      	beq.n	340062d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
340062cc:	f240 4123 	movw	r1, #1059	@ 0x423
340062d0:	4875      	ldr	r0, [pc, #468]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340062d2:	f7fb fa1f 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340062d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340062d8:	3b01      	subs	r3, #1
340062da:	2bff      	cmp	r3, #255	@ 0xff
340062dc:	d904      	bls.n	340062e8 <HAL_RCCEx_PeriphCLKConfig+0xc90>
340062de:	f240 4124 	movw	r1, #1060	@ 0x424
340062e2:	4871      	ldr	r0, [pc, #452]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340062e4:	f7fb fa16 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340062e8:	4a70      	ldr	r2, [pc, #448]	@ (340064ac <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340062ea:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340062ec:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340062f0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340062f2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340062f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340062fa:	3901      	subs	r1, #1
340062fc:	4303      	orrs	r3, r0
340062fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006302:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34006306:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400630a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400630e:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
34006312:	f7ff f8bd 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34006316:	6823      	ldr	r3, [r4, #0]
34006318:	0359      	lsls	r1, r3, #13
3400631a:	d540      	bpl.n	3400639e <HAL_RCCEx_PeriphCLKConfig+0xd46>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
3400631c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34006320:	4a67      	ldr	r2, [pc, #412]	@ (340064c0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
34006322:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006326:	4291      	cmp	r1, r2
34006328:	d00a      	beq.n	34006340 <HAL_RCCEx_PeriphCLKConfig+0xce8>
3400632a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400632e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006332:	4293      	cmp	r3, r2
34006334:	d004      	beq.n	34006340 <HAL_RCCEx_PeriphCLKConfig+0xce8>
34006336:	f240 414b 	movw	r1, #1099	@ 0x44b
3400633a:	485b      	ldr	r0, [pc, #364]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400633c:	f7fb f9ea 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34006340:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34006344:	4a5f      	ldr	r2, [pc, #380]	@ (340064c4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
34006346:	4293      	cmp	r3, r2
34006348:	f041 8496 	bne.w	34007c78 <HAL_RCCEx_PeriphCLKConfig+0x2620>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400634c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400634e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006352:	d004      	beq.n	3400635e <HAL_RCCEx_PeriphCLKConfig+0xd06>
34006354:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34006358:	4853      	ldr	r0, [pc, #332]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400635a:	f7fb f9db 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400635e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006360:	3b01      	subs	r3, #1
34006362:	2bff      	cmp	r3, #255	@ 0xff
34006364:	d904      	bls.n	34006370 <HAL_RCCEx_PeriphCLKConfig+0xd18>
34006366:	f240 4151 	movw	r1, #1105	@ 0x451
3400636a:	484f      	ldr	r0, [pc, #316]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400636c:	f7fb f9d2 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006370:	4a4e      	ldr	r2, [pc, #312]	@ (340064ac <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34006372:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006374:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006378:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400637a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400637e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006382:	3901      	subs	r1, #1
34006384:	4303      	orrs	r3, r0
34006386:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400638a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400638e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006392:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006396:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
3400639a:	f7ff f879 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3400639e:	6823      	ldr	r3, [r4, #0]
340063a0:	031a      	lsls	r2, r3, #12
340063a2:	d540      	bpl.n	34006426 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
340063a4:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
340063a8:	4a47      	ldr	r2, [pc, #284]	@ (340064c8 <HAL_RCCEx_PeriphCLKConfig+0xe70>)
340063aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340063ae:	4291      	cmp	r1, r2
340063b0:	d00a      	beq.n	340063c8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
340063b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340063b6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340063ba:	4293      	cmp	r3, r2
340063bc:	d004      	beq.n	340063c8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
340063be:	f240 416b 	movw	r1, #1131	@ 0x46b
340063c2:	4839      	ldr	r0, [pc, #228]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340063c4:	f7fb f9a6 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
340063c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
340063cc:	4a3f      	ldr	r2, [pc, #252]	@ (340064cc <HAL_RCCEx_PeriphCLKConfig+0xe74>)
340063ce:	4293      	cmp	r3, r2
340063d0:	f041 845b 	bne.w	34007c8a <HAL_RCCEx_PeriphCLKConfig+0x2632>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340063d4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340063d6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340063da:	d004      	beq.n	340063e6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
340063dc:	f44f 618e 	mov.w	r1, #1136	@ 0x470
340063e0:	4831      	ldr	r0, [pc, #196]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340063e2:	f7fb f997 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340063e6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340063e8:	3b01      	subs	r3, #1
340063ea:	2bff      	cmp	r3, #255	@ 0xff
340063ec:	d904      	bls.n	340063f8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
340063ee:	f240 4171 	movw	r1, #1137	@ 0x471
340063f2:	482d      	ldr	r0, [pc, #180]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340063f4:	f7fb f98e 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340063f8:	4a2c      	ldr	r2, [pc, #176]	@ (340064ac <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340063fa:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340063fc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006400:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006402:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006406:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400640a:	3901      	subs	r1, #1
3400640c:	4303      	orrs	r3, r0
3400640e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006412:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006416:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400641a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400641e:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
34006422:	f7ff f835 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34006426:	6823      	ldr	r3, [r4, #0]
34006428:	02db      	lsls	r3, r3, #11
3400642a:	d55b      	bpl.n	340064e4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
3400642c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34006430:	4a27      	ldr	r2, [pc, #156]	@ (340064d0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
34006432:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006436:	4291      	cmp	r1, r2
34006438:	d00a      	beq.n	34006450 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
3400643a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400643e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006442:	4293      	cmp	r3, r2
34006444:	d004      	beq.n	34006450 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34006446:	f240 418b 	movw	r1, #1163	@ 0x48b
3400644a:	4817      	ldr	r0, [pc, #92]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400644c:	f7fb f962 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34006450:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34006454:	4a1f      	ldr	r2, [pc, #124]	@ (340064d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
34006456:	4293      	cmp	r3, r2
34006458:	f041 8420 	bne.w	34007c9c <HAL_RCCEx_PeriphCLKConfig+0x2644>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400645c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400645e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006462:	d004      	beq.n	3400646e <HAL_RCCEx_PeriphCLKConfig+0xe16>
34006464:	f44f 6192 	mov.w	r1, #1168	@ 0x490
34006468:	480f      	ldr	r0, [pc, #60]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400646a:	f7fb f953 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400646e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006470:	3b01      	subs	r3, #1
34006472:	2bff      	cmp	r3, #255	@ 0xff
34006474:	d904      	bls.n	34006480 <HAL_RCCEx_PeriphCLKConfig+0xe28>
34006476:	f240 4191 	movw	r1, #1169	@ 0x491
3400647a:	480b      	ldr	r0, [pc, #44]	@ (340064a8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400647c:	f7fb f94a 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006480:	4a0a      	ldr	r2, [pc, #40]	@ (340064ac <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34006482:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006484:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006488:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400648a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400648e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006492:	3901      	subs	r1, #1
34006494:	4303      	orrs	r3, r0
34006496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400649a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400649e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340064a2:	e019      	b.n	340064d8 <HAL_RCCEx_PeriphCLKConfig+0xe80>
340064a4:	07020c0c 	.word	0x07020c0c
340064a8:	34010edd 	.word	0x34010edd
340064ac:	56028000 	.word	0x56028000
340064b0:	0700100c 	.word	0x0700100c
340064b4:	0702100c 	.word	0x0702100c
340064b8:	0700140c 	.word	0x0700140c
340064bc:	0702140c 	.word	0x0702140c
340064c0:	0700082c 	.word	0x0700082c
340064c4:	0702082c 	.word	0x0702082c
340064c8:	07000c2c 	.word	0x07000c2c
340064cc:	07020c2c 	.word	0x07020c2c
340064d0:	0700102c 	.word	0x0700102c
340064d4:	0702102c 	.word	0x0702102c
340064d8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340064dc:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
340064e0:	f7fe ffd6 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
340064e4:	6823      	ldr	r3, [r4, #0]
340064e6:	029e      	lsls	r6, r3, #10
340064e8:	d540      	bpl.n	3400656c <HAL_RCCEx_PeriphCLKConfig+0xf14>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
340064ea:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
340064ee:	4ac2      	ldr	r2, [pc, #776]	@ (340067f8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>)
340064f0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340064f4:	4291      	cmp	r1, r2
340064f6:	d00a      	beq.n	3400650e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
340064f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340064fc:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006500:	4293      	cmp	r3, r2
34006502:	d004      	beq.n	3400650e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34006504:	f240 41ab 	movw	r1, #1195	@ 0x4ab
34006508:	48bc      	ldr	r0, [pc, #752]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400650a:	f7fb f903 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3400650e:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34006512:	4abb      	ldr	r2, [pc, #748]	@ (34006800 <HAL_RCCEx_PeriphCLKConfig+0x11a8>)
34006514:	4293      	cmp	r3, r2
34006516:	f041 83ca 	bne.w	34007cae <HAL_RCCEx_PeriphCLKConfig+0x2656>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400651a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400651c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006520:	d004      	beq.n	3400652c <HAL_RCCEx_PeriphCLKConfig+0xed4>
34006522:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
34006526:	48b5      	ldr	r0, [pc, #724]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006528:	f7fb f8f4 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400652c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400652e:	3b01      	subs	r3, #1
34006530:	2bff      	cmp	r3, #255	@ 0xff
34006532:	d904      	bls.n	3400653e <HAL_RCCEx_PeriphCLKConfig+0xee6>
34006534:	f240 41b1 	movw	r1, #1201	@ 0x4b1
34006538:	48b0      	ldr	r0, [pc, #704]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400653a:	f7fb f8eb 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400653e:	4ab1      	ldr	r2, [pc, #708]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006540:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006542:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006546:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006548:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400654c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006550:	3901      	subs	r1, #1
34006552:	4303      	orrs	r3, r0
34006554:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006558:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400655c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006560:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006564:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
34006568:	f7fe ff92 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
3400656c:	6823      	ldr	r3, [r4, #0]
3400656e:	0258      	lsls	r0, r3, #9
34006570:	d540      	bpl.n	340065f4 <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
34006572:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34006576:	4aa4      	ldr	r2, [pc, #656]	@ (34006808 <HAL_RCCEx_PeriphCLKConfig+0x11b0>)
34006578:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400657c:	4291      	cmp	r1, r2
3400657e:	d00a      	beq.n	34006596 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34006580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006584:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006588:	4293      	cmp	r3, r2
3400658a:	d004      	beq.n	34006596 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
3400658c:	f240 41cb 	movw	r1, #1227	@ 0x4cb
34006590:	489a      	ldr	r0, [pc, #616]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006592:	f7fb f8bf 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34006596:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
3400659a:	4a9c      	ldr	r2, [pc, #624]	@ (3400680c <HAL_RCCEx_PeriphCLKConfig+0x11b4>)
3400659c:	4293      	cmp	r3, r2
3400659e:	f041 838f 	bne.w	34007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2668>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340065a2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340065a4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340065a8:	d004      	beq.n	340065b4 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
340065aa:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
340065ae:	4893      	ldr	r0, [pc, #588]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340065b0:	f7fb f8b0 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340065b4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340065b6:	3b01      	subs	r3, #1
340065b8:	2bff      	cmp	r3, #255	@ 0xff
340065ba:	d904      	bls.n	340065c6 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
340065bc:	f240 41d1 	movw	r1, #1233	@ 0x4d1
340065c0:	488e      	ldr	r0, [pc, #568]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340065c2:	f7fb f8a7 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340065c6:	4a8f      	ldr	r2, [pc, #572]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340065c8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340065ca:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340065ce:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340065d0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340065d4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340065d8:	3901      	subs	r1, #1
340065da:	4303      	orrs	r3, r0
340065dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340065e0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340065e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340065e8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340065ec:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
340065f0:	f7fe ff4e 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
340065f4:	6823      	ldr	r3, [r4, #0]
340065f6:	0219      	lsls	r1, r3, #8
340065f8:	d546      	bpl.n	34006688 <HAL_RCCEx_PeriphCLKConfig+0x1030>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
340065fa:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
340065fe:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
34006602:	d00c      	beq.n	3400661e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34006604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34006608:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
3400660c:	d007      	beq.n	3400661e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
3400660e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34006612:	d004      	beq.n	3400661e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34006614:	f240 41eb 	movw	r1, #1259	@ 0x4eb
34006618:	4878      	ldr	r0, [pc, #480]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400661a:	f7fb f87b 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3400661e:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
34006622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34006626:	f041 8354 	bne.w	34007cd2 <HAL_RCCEx_PeriphCLKConfig+0x267a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400662a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400662c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006630:	d004      	beq.n	3400663c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
34006632:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
34006636:	4871      	ldr	r0, [pc, #452]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006638:	f7fb f86c 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400663c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400663e:	3b01      	subs	r3, #1
34006640:	2bff      	cmp	r3, #255	@ 0xff
34006642:	d904      	bls.n	3400664e <HAL_RCCEx_PeriphCLKConfig+0xff6>
34006644:	f240 41f1 	movw	r1, #1265	@ 0x4f1
34006648:	486c      	ldr	r0, [pc, #432]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400664a:	f7fb f863 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400664e:	4a6d      	ldr	r2, [pc, #436]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006650:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006652:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006656:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006658:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400665c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006660:	3901      	subs	r1, #1
34006662:	4303      	orrs	r3, r0
34006664:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006668:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400666c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006670:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34006674:	4a63      	ldr	r2, [pc, #396]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006676:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
3400667a:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
3400667e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
34006682:	430b      	orrs	r3, r1
34006684:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34006688:	6823      	ldr	r3, [r4, #0]
3400668a:	01da      	lsls	r2, r3, #7
3400668c:	d542      	bpl.n	34006714 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
3400668e:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
34006692:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34006696:	d004      	beq.n	340066a2 <HAL_RCCEx_PeriphCLKConfig+0x104a>
34006698:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
3400669c:	4857      	ldr	r0, [pc, #348]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400669e:	f7fb f839 	bl	34001714 <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
340066a2:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
340066a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340066aa:	f041 8343 	bne.w	34007d34 <HAL_RCCEx_PeriphCLKConfig+0x26dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
340066ae:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
340066b2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340066b6:	d004      	beq.n	340066c2 <HAL_RCCEx_PeriphCLKConfig+0x106a>
340066b8:	f240 511d 	movw	r1, #1309	@ 0x51d
340066bc:	484f      	ldr	r0, [pc, #316]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340066be:	f7fb f829 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
340066c2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
340066c6:	3b01      	subs	r3, #1
340066c8:	2bff      	cmp	r3, #255	@ 0xff
340066ca:	d904      	bls.n	340066d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
340066cc:	f240 511e 	movw	r1, #1310	@ 0x51e
340066d0:	484a      	ldr	r0, [pc, #296]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340066d2:	f7fb f81f 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
340066d6:	4a4b      	ldr	r2, [pc, #300]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340066d8:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
340066dc:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
340066e0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
340066e4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340066e8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340066ec:	3901      	subs	r1, #1
340066ee:	4303      	orrs	r3, r0
340066f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340066f4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
340066f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340066fc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34006700:	4a40      	ldr	r2, [pc, #256]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006702:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
34006706:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
3400670a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
3400670e:	430b      	orrs	r3, r1
34006710:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34006714:	6823      	ldr	r3, [r4, #0]
34006716:	019b      	lsls	r3, r3, #6
34006718:	d540      	bpl.n	3400679c <HAL_RCCEx_PeriphCLKConfig+0x1144>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
3400671a:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
3400671e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34006722:	d007      	beq.n	34006734 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
34006724:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34006728:	d004      	beq.n	34006734 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
3400672a:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3400672e:	4833      	ldr	r0, [pc, #204]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006730:	f7fa fff0 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34006734:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
34006738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400673c:	f041 8303 	bne.w	34007d46 <HAL_RCCEx_PeriphCLKConfig+0x26ee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34006740:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006742:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006746:	d004      	beq.n	34006752 <HAL_RCCEx_PeriphCLKConfig+0x10fa>
34006748:	f240 513d 	movw	r1, #1341	@ 0x53d
3400674c:	482b      	ldr	r0, [pc, #172]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400674e:	f7fa ffe1 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006752:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006754:	3b01      	subs	r3, #1
34006756:	2bff      	cmp	r3, #255	@ 0xff
34006758:	d904      	bls.n	34006764 <HAL_RCCEx_PeriphCLKConfig+0x110c>
3400675a:	f240 513e 	movw	r1, #1342	@ 0x53e
3400675e:	4827      	ldr	r0, [pc, #156]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006760:	f7fa ffd8 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006764:	4a27      	ldr	r2, [pc, #156]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006766:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006768:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400676c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400676e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006772:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006776:	3901      	subs	r1, #1
34006778:	4303      	orrs	r3, r0
3400677a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400677e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006782:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006784:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34006788:	4a1e      	ldr	r2, [pc, #120]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400678a:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
3400678e:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
34006792:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34006796:	430b      	orrs	r3, r1
34006798:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3400679c:	6823      	ldr	r3, [r4, #0]
3400679e:	015e      	lsls	r6, r3, #5
340067a0:	d54e      	bpl.n	34006840 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
340067a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
340067a6:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340067aa:	d004      	beq.n	340067b6 <HAL_RCCEx_PeriphCLKConfig+0x115e>
340067ac:	f240 5165 	movw	r1, #1381	@ 0x565
340067b0:	4812      	ldr	r0, [pc, #72]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340067b2:	f7fa ffaf 	bl	34001714 <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
340067b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
340067ba:	2b20      	cmp	r3, #32
340067bc:	f041 82f3 	bne.w	34007da6 <HAL_RCCEx_PeriphCLKConfig+0x274e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
340067c0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340067c4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340067c8:	d004      	beq.n	340067d4 <HAL_RCCEx_PeriphCLKConfig+0x117c>
340067ca:	f240 516a 	movw	r1, #1386	@ 0x56a
340067ce:	480b      	ldr	r0, [pc, #44]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340067d0:	f7fa ffa0 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
340067d4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
340067d8:	3b01      	subs	r3, #1
340067da:	2bff      	cmp	r3, #255	@ 0xff
340067dc:	d904      	bls.n	340067e8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
340067de:	f240 516b 	movw	r1, #1387	@ 0x56b
340067e2:	4806      	ldr	r0, [pc, #24]	@ (340067fc <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340067e4:	f7fa ff96 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
340067e8:	4a06      	ldr	r2, [pc, #24]	@ (34006804 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340067ea:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
340067ee:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
340067f2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
340067f6:	e00b      	b.n	34006810 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
340067f8:	0700142c 	.word	0x0700142c
340067fc:	34010edd 	.word	0x34010edd
34006800:	0702142c 	.word	0x0702142c
34006804:	56028000 	.word	0x56028000
34006808:	0700182c 	.word	0x0700182c
3400680c:	0702182c 	.word	0x0702182c
34006810:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006814:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006818:	3901      	subs	r1, #1
3400681a:	4303      	orrs	r3, r0
3400681c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006820:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34006824:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34006828:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
3400682c:	4abc      	ldr	r2, [pc, #752]	@ (34006b20 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3400682e:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
34006832:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34006836:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
3400683a:	430b      	orrs	r3, r1
3400683c:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
34006840:	6823      	ldr	r3, [r4, #0]
34006842:	00d8      	lsls	r0, r3, #3
34006844:	d53d      	bpl.n	340068c2 <HAL_RCCEx_PeriphCLKConfig+0x126a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
34006846:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
3400684a:	4ab6      	ldr	r2, [pc, #728]	@ (34006b24 <HAL_RCCEx_PeriphCLKConfig+0x14cc>)
3400684c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34006850:	4293      	cmp	r3, r2
34006852:	d008      	beq.n	34006866 <HAL_RCCEx_PeriphCLKConfig+0x120e>
34006854:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006858:	4293      	cmp	r3, r2
3400685a:	d004      	beq.n	34006866 <HAL_RCCEx_PeriphCLKConfig+0x120e>
3400685c:	f240 5185 	movw	r1, #1413	@ 0x585
34006860:	48b1      	ldr	r0, [pc, #708]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006862:	f7fa ff57 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
34006866:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
3400686a:	4ab0      	ldr	r2, [pc, #704]	@ (34006b2c <HAL_RCCEx_PeriphCLKConfig+0x14d4>)
3400686c:	4293      	cmp	r3, r2
3400686e:	f041 82c1 	bne.w	34007df4 <HAL_RCCEx_PeriphCLKConfig+0x279c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34006872:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006874:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006878:	d004      	beq.n	34006884 <HAL_RCCEx_PeriphCLKConfig+0x122c>
3400687a:	f240 518a 	movw	r1, #1418	@ 0x58a
3400687e:	48aa      	ldr	r0, [pc, #680]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006880:	f7fa ff48 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006884:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006886:	3b01      	subs	r3, #1
34006888:	2bff      	cmp	r3, #255	@ 0xff
3400688a:	d904      	bls.n	34006896 <HAL_RCCEx_PeriphCLKConfig+0x123e>
3400688c:	f240 518b 	movw	r1, #1419	@ 0x58b
34006890:	48a5      	ldr	r0, [pc, #660]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006892:	f7fa ff3f 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006896:	4aa2      	ldr	r2, [pc, #648]	@ (34006b20 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006898:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400689a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400689e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340068a0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340068a4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340068a8:	3901      	subs	r1, #1
340068aa:	4303      	orrs	r3, r0
340068ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340068b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340068b4:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340068b6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340068ba:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
340068be:	f7fe fde7 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
340068c2:	6823      	ldr	r3, [r4, #0]
340068c4:	0099      	lsls	r1, r3, #2
340068c6:	d53d      	bpl.n	34006944 <HAL_RCCEx_PeriphCLKConfig+0x12ec>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
340068c8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
340068cc:	4a98      	ldr	r2, [pc, #608]	@ (34006b30 <HAL_RCCEx_PeriphCLKConfig+0x14d8>)
340068ce:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340068d2:	4293      	cmp	r3, r2
340068d4:	d008      	beq.n	340068e8 <HAL_RCCEx_PeriphCLKConfig+0x1290>
340068d6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340068da:	4293      	cmp	r3, r2
340068dc:	d004      	beq.n	340068e8 <HAL_RCCEx_PeriphCLKConfig+0x1290>
340068de:	f240 51b2 	movw	r1, #1458	@ 0x5b2
340068e2:	4891      	ldr	r0, [pc, #580]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340068e4:	f7fa ff16 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
340068e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
340068ec:	4a91      	ldr	r2, [pc, #580]	@ (34006b34 <HAL_RCCEx_PeriphCLKConfig+0x14dc>)
340068ee:	4293      	cmp	r3, r2
340068f0:	f041 82b0 	bne.w	34007e54 <HAL_RCCEx_PeriphCLKConfig+0x27fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340068f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340068f6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340068fa:	d004      	beq.n	34006906 <HAL_RCCEx_PeriphCLKConfig+0x12ae>
340068fc:	f240 51b7 	movw	r1, #1463	@ 0x5b7
34006900:	4889      	ldr	r0, [pc, #548]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006902:	f7fa ff07 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006906:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006908:	3b01      	subs	r3, #1
3400690a:	2bff      	cmp	r3, #255	@ 0xff
3400690c:	d904      	bls.n	34006918 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
3400690e:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
34006912:	4885      	ldr	r0, [pc, #532]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006914:	f7fa fefe 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006918:	4a81      	ldr	r2, [pc, #516]	@ (34006b20 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3400691a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400691c:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006920:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006922:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006926:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400692a:	3901      	subs	r1, #1
3400692c:	4303      	orrs	r3, r0
3400692e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006932:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006936:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006938:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400693c:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
34006940:	f7fe fda6 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34006944:	6863      	ldr	r3, [r4, #4]
34006946:	07da      	lsls	r2, r3, #31
34006948:	d53b      	bpl.n	340069c2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
3400694a:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
3400694e:	2b06      	cmp	r3, #6
34006950:	d904      	bls.n	3400695c <HAL_RCCEx_PeriphCLKConfig+0x1304>
34006952:	f240 51df 	movw	r1, #1503	@ 0x5df
34006956:	4874      	ldr	r0, [pc, #464]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006958:	f7fa fedc 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3400695c:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
34006960:	2b02      	cmp	r3, #2
34006962:	f041 82a7 	bne.w	34007eb4 <HAL_RCCEx_PeriphCLKConfig+0x285c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34006966:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006968:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400696c:	d004      	beq.n	34006978 <HAL_RCCEx_PeriphCLKConfig+0x1320>
3400696e:	f240 51e4 	movw	r1, #1508	@ 0x5e4
34006972:	486d      	ldr	r0, [pc, #436]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006974:	f7fa fece 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006978:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400697a:	3b01      	subs	r3, #1
3400697c:	2bff      	cmp	r3, #255	@ 0xff
3400697e:	d904      	bls.n	3400698a <HAL_RCCEx_PeriphCLKConfig+0x1332>
34006980:	f240 51e5 	movw	r1, #1509	@ 0x5e5
34006984:	4868      	ldr	r0, [pc, #416]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006986:	f7fa fec5 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400698a:	4a65      	ldr	r2, [pc, #404]	@ (34006b20 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3400698c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400698e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006992:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006994:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006998:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400699c:	3901      	subs	r1, #1
3400699e:	4303      	orrs	r3, r0
340069a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340069a4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340069a8:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340069aa:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
340069ae:	4a5c      	ldr	r2, [pc, #368]	@ (34006b20 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340069b0:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
340069b4:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
340069b8:	f023 0307 	bic.w	r3, r3, #7
340069bc:	430b      	orrs	r3, r1
340069be:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
340069c2:	6863      	ldr	r3, [r4, #4]
340069c4:	079b      	lsls	r3, r3, #30
340069c6:	d543      	bpl.n	34006a50 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
340069c8:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
340069cc:	4a5a      	ldr	r2, [pc, #360]	@ (34006b38 <HAL_RCCEx_PeriphCLKConfig+0x14e0>)
340069ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340069d2:	4291      	cmp	r1, r2
340069d4:	d00e      	beq.n	340069f4 <HAL_RCCEx_PeriphCLKConfig+0x139c>
340069d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340069da:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340069de:	4291      	cmp	r1, r2
340069e0:	d008      	beq.n	340069f4 <HAL_RCCEx_PeriphCLKConfig+0x139c>
340069e2:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340069e6:	4293      	cmp	r3, r2
340069e8:	d004      	beq.n	340069f4 <HAL_RCCEx_PeriphCLKConfig+0x139c>
340069ea:	f240 610c 	movw	r1, #1548	@ 0x60c
340069ee:	484e      	ldr	r0, [pc, #312]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340069f0:	f7fa fe90 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
340069f4:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
340069f8:	4a50      	ldr	r2, [pc, #320]	@ (34006b3c <HAL_RCCEx_PeriphCLKConfig+0x14e4>)
340069fa:	4293      	cmp	r3, r2
340069fc:	f041 8288 	bne.w	34007f10 <HAL_RCCEx_PeriphCLKConfig+0x28b8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006a00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006a02:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006a06:	d004      	beq.n	34006a12 <HAL_RCCEx_PeriphCLKConfig+0x13ba>
34006a08:	f240 6111 	movw	r1, #1553	@ 0x611
34006a0c:	4846      	ldr	r0, [pc, #280]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006a0e:	f7fa fe81 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006a12:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006a14:	3b01      	subs	r3, #1
34006a16:	2bff      	cmp	r3, #255	@ 0xff
34006a18:	d904      	bls.n	34006a24 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
34006a1a:	f240 6112 	movw	r1, #1554	@ 0x612
34006a1e:	4842      	ldr	r0, [pc, #264]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006a20:	f7fa fe78 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006a24:	4a3e      	ldr	r2, [pc, #248]	@ (34006b20 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006a26:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006a28:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006a2c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006a2e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006a32:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006a36:	3901      	subs	r1, #1
34006a38:	4303      	orrs	r3, r0
34006a3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006a42:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006a44:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006a48:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
34006a4c:	f7fe fd20 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
34006a50:	6863      	ldr	r3, [r4, #4]
34006a52:	075e      	lsls	r6, r3, #29
34006a54:	d543      	bpl.n	34006ade <HAL_RCCEx_PeriphCLKConfig+0x1486>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
34006a56:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34006a5a:	4a39      	ldr	r2, [pc, #228]	@ (34006b40 <HAL_RCCEx_PeriphCLKConfig+0x14e8>)
34006a5c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006a60:	4291      	cmp	r1, r2
34006a62:	d00e      	beq.n	34006a82 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34006a64:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006a68:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006a6c:	4291      	cmp	r1, r2
34006a6e:	d008      	beq.n	34006a82 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34006a70:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006a74:	4293      	cmp	r3, r2
34006a76:	d004      	beq.n	34006a82 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34006a78:	f240 6139 	movw	r1, #1593	@ 0x639
34006a7c:	482a      	ldr	r0, [pc, #168]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006a7e:	f7fa fe49 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34006a82:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34006a86:	4a2f      	ldr	r2, [pc, #188]	@ (34006b44 <HAL_RCCEx_PeriphCLKConfig+0x14ec>)
34006a88:	4293      	cmp	r3, r2
34006a8a:	f041 8272 	bne.w	34007f72 <HAL_RCCEx_PeriphCLKConfig+0x291a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006a8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006a90:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006a94:	d004      	beq.n	34006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1448>
34006a96:	f240 613e 	movw	r1, #1598	@ 0x63e
34006a9a:	4823      	ldr	r0, [pc, #140]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006a9c:	f7fa fe3a 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006aa0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006aa2:	3b01      	subs	r3, #1
34006aa4:	2bff      	cmp	r3, #255	@ 0xff
34006aa6:	d904      	bls.n	34006ab2 <HAL_RCCEx_PeriphCLKConfig+0x145a>
34006aa8:	f240 613f 	movw	r1, #1599	@ 0x63f
34006aac:	481e      	ldr	r0, [pc, #120]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006aae:	f7fa fe31 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006ab2:	4a1b      	ldr	r2, [pc, #108]	@ (34006b20 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006ab4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006ab6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006aba:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006abc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006ac0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006ac4:	3901      	subs	r1, #1
34006ac6:	4303      	orrs	r3, r0
34006ac8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006ad0:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006ad2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006ad6:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
34006ada:	f7fe fcd9 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34006ade:	6863      	ldr	r3, [r4, #4]
34006ae0:	0718      	lsls	r0, r3, #28
34006ae2:	d55d      	bpl.n	34006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1548>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
34006ae4:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34006ae8:	4a17      	ldr	r2, [pc, #92]	@ (34006b48 <HAL_RCCEx_PeriphCLKConfig+0x14f0>)
34006aea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006aee:	4291      	cmp	r1, r2
34006af0:	d00e      	beq.n	34006b10 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34006af2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006af6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006afa:	4291      	cmp	r1, r2
34006afc:	d008      	beq.n	34006b10 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34006afe:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006b02:	4293      	cmp	r3, r2
34006b04:	d004      	beq.n	34006b10 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34006b06:	f240 6166 	movw	r1, #1638	@ 0x666
34006b0a:	4807      	ldr	r0, [pc, #28]	@ (34006b28 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006b0c:	f7fa fe02 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
34006b10:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34006b14:	4a0d      	ldr	r2, [pc, #52]	@ (34006b4c <HAL_RCCEx_PeriphCLKConfig+0x14f4>)
34006b16:	4293      	cmp	r3, r2
34006b18:	f041 825c 	bne.w	34007fd4 <HAL_RCCEx_PeriphCLKConfig+0x297c>
34006b1c:	e018      	b.n	34006b50 <HAL_RCCEx_PeriphCLKConfig+0x14f8>
34006b1e:	bf00      	nop
34006b20:	56028000 	.word	0x56028000
34006b24:	07001418 	.word	0x07001418
34006b28:	34010edd 	.word	0x34010edd
34006b2c:	07021418 	.word	0x07021418
34006b30:	07001818 	.word	0x07001818
34006b34:	07021818 	.word	0x07021818
34006b38:	07000420 	.word	0x07000420
34006b3c:	07020420 	.word	0x07020420
34006b40:	07000820 	.word	0x07000820
34006b44:	07020820 	.word	0x07020820
34006b48:	07000c20 	.word	0x07000c20
34006b4c:	07020c20 	.word	0x07020c20
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006b50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006b52:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006b56:	d004      	beq.n	34006b62 <HAL_RCCEx_PeriphCLKConfig+0x150a>
34006b58:	f240 616b 	movw	r1, #1643	@ 0x66b
34006b5c:	48bb      	ldr	r0, [pc, #748]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006b5e:	f7fa fdd9 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006b62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006b64:	3b01      	subs	r3, #1
34006b66:	2bff      	cmp	r3, #255	@ 0xff
34006b68:	d904      	bls.n	34006b74 <HAL_RCCEx_PeriphCLKConfig+0x151c>
34006b6a:	f240 616c 	movw	r1, #1644	@ 0x66c
34006b6e:	48b7      	ldr	r0, [pc, #732]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006b70:	f7fa fdd0 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006b74:	4ab6      	ldr	r2, [pc, #728]	@ (34006e50 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006b76:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006b78:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006b7c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006b7e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006b82:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006b86:	3901      	subs	r1, #1
34006b88:	4303      	orrs	r3, r0
34006b8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006b92:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006b94:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006b98:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
34006b9c:	f7fe fc78 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34006ba0:	6863      	ldr	r3, [r4, #4]
34006ba2:	06d9      	lsls	r1, r3, #27
34006ba4:	d544      	bpl.n	34006c30 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
34006ba6:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34006baa:	4aaa      	ldr	r2, [pc, #680]	@ (34006e54 <HAL_RCCEx_PeriphCLKConfig+0x17fc>)
34006bac:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006bb0:	4291      	cmp	r1, r2
34006bb2:	d00e      	beq.n	34006bd2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34006bb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006bb8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006bbc:	4291      	cmp	r1, r2
34006bbe:	d008      	beq.n	34006bd2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34006bc0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006bc4:	4293      	cmp	r3, r2
34006bc6:	d004      	beq.n	34006bd2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34006bc8:	f240 6193 	movw	r1, #1683	@ 0x693
34006bcc:	489f      	ldr	r0, [pc, #636]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006bce:	f7fa fda1 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34006bd2:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34006bd6:	4aa0      	ldr	r2, [pc, #640]	@ (34006e58 <HAL_RCCEx_PeriphCLKConfig+0x1800>)
34006bd8:	4293      	cmp	r3, r2
34006bda:	f041 822c 	bne.w	34008036 <HAL_RCCEx_PeriphCLKConfig+0x29de>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006bde:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006be0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006be4:	d004      	beq.n	34006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1598>
34006be6:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
34006bea:	4898      	ldr	r0, [pc, #608]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006bec:	f7fa fd92 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006bf0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006bf2:	3b01      	subs	r3, #1
34006bf4:	2bff      	cmp	r3, #255	@ 0xff
34006bf6:	d904      	bls.n	34006c02 <HAL_RCCEx_PeriphCLKConfig+0x15aa>
34006bf8:	f240 6199 	movw	r1, #1689	@ 0x699
34006bfc:	4893      	ldr	r0, [pc, #588]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006bfe:	f7fa fd89 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006c02:	4a93      	ldr	r2, [pc, #588]	@ (34006e50 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006c04:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006c06:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006c0a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006c0c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006c10:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006c14:	3901      	subs	r1, #1
34006c16:	4303      	orrs	r3, r0
34006c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006c1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006c20:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006c24:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006c28:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
34006c2c:	f7fe fc30 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34006c30:	6863      	ldr	r3, [r4, #4]
34006c32:	069a      	lsls	r2, r3, #26
34006c34:	d544      	bpl.n	34006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1668>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
34006c36:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34006c3a:	4a88      	ldr	r2, [pc, #544]	@ (34006e5c <HAL_RCCEx_PeriphCLKConfig+0x1804>)
34006c3c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006c40:	4291      	cmp	r1, r2
34006c42:	d00e      	beq.n	34006c62 <HAL_RCCEx_PeriphCLKConfig+0x160a>
34006c44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006c48:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006c4c:	4291      	cmp	r1, r2
34006c4e:	d008      	beq.n	34006c62 <HAL_RCCEx_PeriphCLKConfig+0x160a>
34006c50:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006c54:	4293      	cmp	r3, r2
34006c56:	d004      	beq.n	34006c62 <HAL_RCCEx_PeriphCLKConfig+0x160a>
34006c58:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
34006c5c:	487b      	ldr	r0, [pc, #492]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006c5e:	f7fa fd59 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34006c62:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34006c66:	4a7e      	ldr	r2, [pc, #504]	@ (34006e60 <HAL_RCCEx_PeriphCLKConfig+0x1808>)
34006c68:	4293      	cmp	r3, r2
34006c6a:	f041 8231 	bne.w	340080d0 <HAL_RCCEx_PeriphCLKConfig+0x2a78>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006c6e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006c70:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006c74:	d004      	beq.n	34006c80 <HAL_RCCEx_PeriphCLKConfig+0x1628>
34006c76:	f240 61c5 	movw	r1, #1733	@ 0x6c5
34006c7a:	4874      	ldr	r0, [pc, #464]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006c7c:	f7fa fd4a 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006c80:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006c82:	3b01      	subs	r3, #1
34006c84:	2bff      	cmp	r3, #255	@ 0xff
34006c86:	d904      	bls.n	34006c92 <HAL_RCCEx_PeriphCLKConfig+0x163a>
34006c88:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34006c8c:	486f      	ldr	r0, [pc, #444]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006c8e:	f7fa fd41 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006c92:	4a6f      	ldr	r2, [pc, #444]	@ (34006e50 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006c94:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006c96:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006c9a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006c9c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006ca0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006ca4:	3901      	subs	r1, #1
34006ca6:	4303      	orrs	r3, r0
34006ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006cac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006cb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006cb4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006cb8:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34006cbc:	f7fe fbe8 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34006cc0:	6863      	ldr	r3, [r4, #4]
34006cc2:	065b      	lsls	r3, r3, #25
34006cc4:	d543      	bpl.n	34006d4e <HAL_RCCEx_PeriphCLKConfig+0x16f6>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
34006cc6:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34006cca:	4a66      	ldr	r2, [pc, #408]	@ (34006e64 <HAL_RCCEx_PeriphCLKConfig+0x180c>)
34006ccc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006cd0:	4291      	cmp	r1, r2
34006cd2:	d00e      	beq.n	34006cf2 <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006cd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006cd8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006cdc:	4291      	cmp	r1, r2
34006cde:	d008      	beq.n	34006cf2 <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006ce0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006ce4:	4293      	cmp	r3, r2
34006ce6:	d004      	beq.n	34006cf2 <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006ce8:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34006cec:	4857      	ldr	r0, [pc, #348]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006cee:	f7fa fd11 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34006cf2:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34006cf6:	4a5c      	ldr	r2, [pc, #368]	@ (34006e68 <HAL_RCCEx_PeriphCLKConfig+0x1810>)
34006cf8:	4293      	cmp	r3, r2
34006cfa:	f041 821a 	bne.w	34008132 <HAL_RCCEx_PeriphCLKConfig+0x2ada>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006cfe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006d00:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006d04:	d004      	beq.n	34006d10 <HAL_RCCEx_PeriphCLKConfig+0x16b8>
34006d06:	f240 61f2 	movw	r1, #1778	@ 0x6f2
34006d0a:	4850      	ldr	r0, [pc, #320]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006d0c:	f7fa fd02 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006d10:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006d12:	3b01      	subs	r3, #1
34006d14:	2bff      	cmp	r3, #255	@ 0xff
34006d16:	d904      	bls.n	34006d22 <HAL_RCCEx_PeriphCLKConfig+0x16ca>
34006d18:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34006d1c:	484b      	ldr	r0, [pc, #300]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006d1e:	f7fa fcf9 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006d22:	4a4b      	ldr	r2, [pc, #300]	@ (34006e50 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006d24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006d26:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006d2a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006d2c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006d30:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006d34:	3901      	subs	r1, #1
34006d36:	4303      	orrs	r3, r0
34006d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006d40:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006d42:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006d46:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
34006d4a:	f7fe fba1 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34006d4e:	6863      	ldr	r3, [r4, #4]
34006d50:	05de      	lsls	r6, r3, #23
34006d52:	d544      	bpl.n	34006dde <HAL_RCCEx_PeriphCLKConfig+0x1786>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
34006d54:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34006d58:	4a44      	ldr	r2, [pc, #272]	@ (34006e6c <HAL_RCCEx_PeriphCLKConfig+0x1814>)
34006d5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006d5e:	4291      	cmp	r1, r2
34006d60:	d00e      	beq.n	34006d80 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006d62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006d66:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006d6a:	4291      	cmp	r1, r2
34006d6c:	d008      	beq.n	34006d80 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006d6e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006d72:	4293      	cmp	r3, r2
34006d74:	d004      	beq.n	34006d80 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34006d76:	f240 711a 	movw	r1, #1818	@ 0x71a
34006d7a:	4834      	ldr	r0, [pc, #208]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006d7c:	f7fa fcca 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34006d80:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34006d84:	4a3a      	ldr	r2, [pc, #232]	@ (34006e70 <HAL_RCCEx_PeriphCLKConfig+0x1818>)
34006d86:	4293      	cmp	r3, r2
34006d88:	f041 8204 	bne.w	34008194 <HAL_RCCEx_PeriphCLKConfig+0x2b3c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006d8c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006d8e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006d92:	d004      	beq.n	34006d9e <HAL_RCCEx_PeriphCLKConfig+0x1746>
34006d94:	f240 711f 	movw	r1, #1823	@ 0x71f
34006d98:	482c      	ldr	r0, [pc, #176]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006d9a:	f7fa fcbb 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006d9e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006da0:	3b01      	subs	r3, #1
34006da2:	2bff      	cmp	r3, #255	@ 0xff
34006da4:	d904      	bls.n	34006db0 <HAL_RCCEx_PeriphCLKConfig+0x1758>
34006da6:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
34006daa:	4828      	ldr	r0, [pc, #160]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006dac:	f7fa fcb2 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006db0:	4a27      	ldr	r2, [pc, #156]	@ (34006e50 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006db2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006db4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006db8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006dba:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006dbe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006dc2:	3901      	subs	r1, #1
34006dc4:	4303      	orrs	r3, r0
34006dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006dca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006dd2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006dd6:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
34006dda:	f7fe fb59 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34006dde:	6863      	ldr	r3, [r4, #4]
34006de0:	0598      	lsls	r0, r3, #22
34006de2:	d55d      	bpl.n	34006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1848>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34006de4:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34006de8:	4a22      	ldr	r2, [pc, #136]	@ (34006e74 <HAL_RCCEx_PeriphCLKConfig+0x181c>)
34006dea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006dee:	4291      	cmp	r1, r2
34006df0:	d00e      	beq.n	34006e10 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006df2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006df6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006dfa:	4291      	cmp	r1, r2
34006dfc:	d008      	beq.n	34006e10 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006dfe:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006e02:	4293      	cmp	r3, r2
34006e04:	d004      	beq.n	34006e10 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006e06:	f240 7147 	movw	r1, #1863	@ 0x747
34006e0a:	4810      	ldr	r0, [pc, #64]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006e0c:	f7fa fc82 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34006e10:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34006e14:	4a18      	ldr	r2, [pc, #96]	@ (34006e78 <HAL_RCCEx_PeriphCLKConfig+0x1820>)
34006e16:	4293      	cmp	r3, r2
34006e18:	f041 81ed 	bne.w	340081f6 <HAL_RCCEx_PeriphCLKConfig+0x2b9e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006e1c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006e1e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006e22:	d004      	beq.n	34006e2e <HAL_RCCEx_PeriphCLKConfig+0x17d6>
34006e24:	f240 714c 	movw	r1, #1868	@ 0x74c
34006e28:	4808      	ldr	r0, [pc, #32]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006e2a:	f7fa fc73 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006e2e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006e30:	3b01      	subs	r3, #1
34006e32:	2bff      	cmp	r3, #255	@ 0xff
34006e34:	d904      	bls.n	34006e40 <HAL_RCCEx_PeriphCLKConfig+0x17e8>
34006e36:	f240 714d 	movw	r1, #1869	@ 0x74d
34006e3a:	4804      	ldr	r0, [pc, #16]	@ (34006e4c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006e3c:	f7fa fc6a 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006e40:	4a03      	ldr	r2, [pc, #12]	@ (34006e50 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006e42:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006e44:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006e48:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006e4a:	e017      	b.n	34006e7c <HAL_RCCEx_PeriphCLKConfig+0x1824>
34006e4c:	34010edd 	.word	0x34010edd
34006e50:	56028000 	.word	0x56028000
34006e54:	07001020 	.word	0x07001020
34006e58:	07021020 	.word	0x07021020
34006e5c:	07001420 	.word	0x07001420
34006e60:	07021420 	.word	0x07021420
34006e64:	07001820 	.word	0x07001820
34006e68:	07021820 	.word	0x07021820
34006e6c:	07000030 	.word	0x07000030
34006e70:	07020030 	.word	0x07020030
34006e74:	07000430 	.word	0x07000430
34006e78:	07020430 	.word	0x07020430
34006e7c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006e80:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006e84:	3901      	subs	r1, #1
34006e86:	4303      	orrs	r3, r0
34006e88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006e8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006e94:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006e98:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
34006e9c:	f7fe faf8 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34006ea0:	6863      	ldr	r3, [r4, #4]
34006ea2:	0559      	lsls	r1, r3, #21
34006ea4:	d544      	bpl.n	34006f30 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
34006ea6:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006eaa:	4abc      	ldr	r2, [pc, #752]	@ (3400719c <HAL_RCCEx_PeriphCLKConfig+0x1b44>)
34006eac:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006eb0:	4291      	cmp	r1, r2
34006eb2:	d00e      	beq.n	34006ed2 <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006eb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006eb8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006ebc:	4291      	cmp	r1, r2
34006ebe:	d008      	beq.n	34006ed2 <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006ec0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006ec4:	4293      	cmp	r3, r2
34006ec6:	d004      	beq.n	34006ed2 <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006ec8:	f240 7174 	movw	r1, #1908	@ 0x774
34006ecc:	48b4      	ldr	r0, [pc, #720]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006ece:	f7fa fc21 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34006ed2:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006ed6:	4ab3      	ldr	r2, [pc, #716]	@ (340071a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>)
34006ed8:	4293      	cmp	r3, r2
34006eda:	f041 81bd 	bne.w	34008258 <HAL_RCCEx_PeriphCLKConfig+0x2c00>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006ede:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006ee0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006ee4:	d004      	beq.n	34006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1898>
34006ee6:	f240 7179 	movw	r1, #1913	@ 0x779
34006eea:	48ad      	ldr	r0, [pc, #692]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006eec:	f7fa fc12 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006ef0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006ef2:	3b01      	subs	r3, #1
34006ef4:	2bff      	cmp	r3, #255	@ 0xff
34006ef6:	d904      	bls.n	34006f02 <HAL_RCCEx_PeriphCLKConfig+0x18aa>
34006ef8:	f240 717a 	movw	r1, #1914	@ 0x77a
34006efc:	48a8      	ldr	r0, [pc, #672]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006efe:	f7fa fc09 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006f02:	4aa9      	ldr	r2, [pc, #676]	@ (340071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006f04:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006f06:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006f0a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006f0c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006f10:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006f14:	3901      	subs	r1, #1
34006f16:	4303      	orrs	r3, r0
34006f18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006f1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006f24:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006f28:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
34006f2c:	f7fe fab0 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34006f30:	6863      	ldr	r3, [r4, #4]
34006f32:	051a      	lsls	r2, r3, #20
34006f34:	d544      	bpl.n	34006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
34006f36:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006f3a:	4a9c      	ldr	r2, [pc, #624]	@ (340071ac <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
34006f3c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006f40:	4291      	cmp	r1, r2
34006f42:	d00e      	beq.n	34006f62 <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006f44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006f48:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006f4c:	4291      	cmp	r1, r2
34006f4e:	d008      	beq.n	34006f62 <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006f50:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006f54:	4293      	cmp	r3, r2
34006f56:	d004      	beq.n	34006f62 <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006f58:	f240 71a1 	movw	r1, #1953	@ 0x7a1
34006f5c:	4890      	ldr	r0, [pc, #576]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006f5e:	f7fa fbd9 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34006f62:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006f66:	4a92      	ldr	r2, [pc, #584]	@ (340071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
34006f68:	4293      	cmp	r3, r2
34006f6a:	f041 81a6 	bne.w	340082ba <HAL_RCCEx_PeriphCLKConfig+0x2c62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006f6e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006f70:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006f74:	d004      	beq.n	34006f80 <HAL_RCCEx_PeriphCLKConfig+0x1928>
34006f76:	f240 71a6 	movw	r1, #1958	@ 0x7a6
34006f7a:	4889      	ldr	r0, [pc, #548]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006f7c:	f7fa fbca 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006f80:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006f82:	3b01      	subs	r3, #1
34006f84:	2bff      	cmp	r3, #255	@ 0xff
34006f86:	d904      	bls.n	34006f92 <HAL_RCCEx_PeriphCLKConfig+0x193a>
34006f88:	f240 71a7 	movw	r1, #1959	@ 0x7a7
34006f8c:	4884      	ldr	r0, [pc, #528]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006f8e:	f7fa fbc1 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006f92:	4a85      	ldr	r2, [pc, #532]	@ (340071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006f94:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006f96:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006f9a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006f9c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006fa0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006fa4:	3901      	subs	r1, #1
34006fa6:	4303      	orrs	r3, r0
34006fa8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006fac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006fb4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006fb8:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
34006fbc:	f7fe fa68 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34006fc0:	6863      	ldr	r3, [r4, #4]
34006fc2:	04db      	lsls	r3, r3, #19
34006fc4:	d544      	bpl.n	34007050 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
34006fc6:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006fca:	4a7a      	ldr	r2, [pc, #488]	@ (340071b4 <HAL_RCCEx_PeriphCLKConfig+0x1b5c>)
34006fcc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006fd0:	4291      	cmp	r1, r2
34006fd2:	d00e      	beq.n	34006ff2 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006fd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006fd8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006fdc:	4291      	cmp	r1, r2
34006fde:	d008      	beq.n	34006ff2 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006fe0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006fe4:	4293      	cmp	r3, r2
34006fe6:	d004      	beq.n	34006ff2 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006fe8:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34006fec:	486c      	ldr	r0, [pc, #432]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006fee:	f7fa fb91 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34006ff2:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006ff6:	4a70      	ldr	r2, [pc, #448]	@ (340071b8 <HAL_RCCEx_PeriphCLKConfig+0x1b60>)
34006ff8:	4293      	cmp	r3, r2
34006ffa:	f041 818f 	bne.w	3400831c <HAL_RCCEx_PeriphCLKConfig+0x2cc4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006ffe:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007000:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007004:	d004      	beq.n	34007010 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
34007006:	f240 71d3 	movw	r1, #2003	@ 0x7d3
3400700a:	4865      	ldr	r0, [pc, #404]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3400700c:	f7fa fb82 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007010:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007012:	3b01      	subs	r3, #1
34007014:	2bff      	cmp	r3, #255	@ 0xff
34007016:	d904      	bls.n	34007022 <HAL_RCCEx_PeriphCLKConfig+0x19ca>
34007018:	f240 71d4 	movw	r1, #2004	@ 0x7d4
3400701c:	4860      	ldr	r0, [pc, #384]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3400701e:	f7fa fb79 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007022:	4a61      	ldr	r2, [pc, #388]	@ (340071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34007024:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007026:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400702a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3400702c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007030:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007034:	3901      	subs	r1, #1
34007036:	4303      	orrs	r3, r0
34007038:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400703c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007040:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007044:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34007048:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
3400704c:	f7fe fa20 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34007050:	6863      	ldr	r3, [r4, #4]
34007052:	049e      	lsls	r6, r3, #18
34007054:	d544      	bpl.n	340070e0 <HAL_RCCEx_PeriphCLKConfig+0x1a88>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
34007056:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
3400705a:	4a58      	ldr	r2, [pc, #352]	@ (340071bc <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
3400705c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34007060:	4291      	cmp	r1, r2
34007062:	d00e      	beq.n	34007082 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34007064:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34007068:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400706c:	4291      	cmp	r1, r2
3400706e:	d008      	beq.n	34007082 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34007070:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34007074:	4293      	cmp	r3, r2
34007076:	d004      	beq.n	34007082 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34007078:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3400707c:	4848      	ldr	r0, [pc, #288]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3400707e:	f7fa fb49 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34007082:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34007086:	4a4e      	ldr	r2, [pc, #312]	@ (340071c0 <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
34007088:	4293      	cmp	r3, r2
3400708a:	f041 8199 	bne.w	340083c0 <HAL_RCCEx_PeriphCLKConfig+0x2d68>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400708e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007090:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007094:	d004      	beq.n	340070a0 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
34007096:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400709a:	4841      	ldr	r0, [pc, #260]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3400709c:	f7fa fb3a 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340070a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340070a2:	3b01      	subs	r3, #1
340070a4:	2bff      	cmp	r3, #255	@ 0xff
340070a6:	d904      	bls.n	340070b2 <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
340070a8:	f640 0101 	movw	r1, #2049	@ 0x801
340070ac:	483c      	ldr	r0, [pc, #240]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340070ae:	f7fa fb31 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340070b2:	4a3d      	ldr	r2, [pc, #244]	@ (340071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
340070b4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340070b6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340070ba:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340070bc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340070c0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340070c4:	3901      	subs	r1, #1
340070c6:	4303      	orrs	r3, r0
340070c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340070cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340070d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340070d4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340070d8:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
340070dc:	f7fe f9d8 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
340070e0:	6863      	ldr	r3, [r4, #4]
340070e2:	0458      	lsls	r0, r3, #17
340070e4:	d544      	bpl.n	34007170 <HAL_RCCEx_PeriphCLKConfig+0x1b18>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
340070e6:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
340070ea:	4a36      	ldr	r2, [pc, #216]	@ (340071c4 <HAL_RCCEx_PeriphCLKConfig+0x1b6c>)
340070ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340070f0:	4291      	cmp	r1, r2
340070f2:	d00e      	beq.n	34007112 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
340070f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340070f8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340070fc:	4291      	cmp	r1, r2
340070fe:	d008      	beq.n	34007112 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34007100:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34007104:	4293      	cmp	r3, r2
34007106:	d004      	beq.n	34007112 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34007108:	f640 0128 	movw	r1, #2088	@ 0x828
3400710c:	4824      	ldr	r0, [pc, #144]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3400710e:	f7fa fb01 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34007112:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34007116:	4a2c      	ldr	r2, [pc, #176]	@ (340071c8 <HAL_RCCEx_PeriphCLKConfig+0x1b70>)
34007118:	4293      	cmp	r3, r2
3400711a:	f041 8182 	bne.w	34008422 <HAL_RCCEx_PeriphCLKConfig+0x2dca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400711e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007120:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007124:	d004      	beq.n	34007130 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
34007126:	f640 012d 	movw	r1, #2093	@ 0x82d
3400712a:	481d      	ldr	r0, [pc, #116]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3400712c:	f7fa faf2 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007130:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007132:	3b01      	subs	r3, #1
34007134:	2bff      	cmp	r3, #255	@ 0xff
34007136:	d904      	bls.n	34007142 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
34007138:	f640 012e 	movw	r1, #2094	@ 0x82e
3400713c:	4818      	ldr	r0, [pc, #96]	@ (340071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3400713e:	f7fa fae9 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007142:	4a19      	ldr	r2, [pc, #100]	@ (340071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34007144:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007146:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400714a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3400714c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007150:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007154:	3901      	subs	r1, #1
34007156:	4303      	orrs	r3, r0
34007158:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400715c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007160:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007164:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34007168:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
3400716c:	f7fe f990 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34007170:	6863      	ldr	r3, [r4, #4]
34007172:	0419      	lsls	r1, r3, #16
34007174:	d560      	bpl.n	34007238 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34007176:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
3400717a:	4a14      	ldr	r2, [pc, #80]	@ (340071cc <HAL_RCCEx_PeriphCLKConfig+0x1b74>)
3400717c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34007180:	4291      	cmp	r1, r2
34007182:	d02a      	beq.n	340071da <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34007184:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34007188:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400718c:	4291      	cmp	r1, r2
3400718e:	d024      	beq.n	340071da <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34007190:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34007194:	4293      	cmp	r3, r2
34007196:	d020      	beq.n	340071da <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34007198:	e01a      	b.n	340071d0 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
3400719a:	bf00      	nop
3400719c:	07000830 	.word	0x07000830
340071a0:	34010edd 	.word	0x34010edd
340071a4:	07020830 	.word	0x07020830
340071a8:	56028000 	.word	0x56028000
340071ac:	07000c30 	.word	0x07000c30
340071b0:	07020c30 	.word	0x07020c30
340071b4:	07001030 	.word	0x07001030
340071b8:	07021030 	.word	0x07021030
340071bc:	07001430 	.word	0x07001430
340071c0:	07021430 	.word	0x07021430
340071c4:	07001830 	.word	0x07001830
340071c8:	07021830 	.word	0x07021830
340071cc:	07001c30 	.word	0x07001c30
340071d0:	f640 0155 	movw	r1, #2133	@ 0x855
340071d4:	48bb      	ldr	r0, [pc, #748]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340071d6:	f7fa fa9d 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
340071da:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
340071de:	4aba      	ldr	r2, [pc, #744]	@ (340074c8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>)
340071e0:	4293      	cmp	r3, r2
340071e2:	f041 814f 	bne.w	34008484 <HAL_RCCEx_PeriphCLKConfig+0x2e2c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340071e6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340071e8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340071ec:	d004      	beq.n	340071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ba0>
340071ee:	f640 015a 	movw	r1, #2138	@ 0x85a
340071f2:	48b4      	ldr	r0, [pc, #720]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340071f4:	f7fa fa8e 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340071f8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340071fa:	3b01      	subs	r3, #1
340071fc:	2bff      	cmp	r3, #255	@ 0xff
340071fe:	d904      	bls.n	3400720a <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
34007200:	f640 015b 	movw	r1, #2139	@ 0x85b
34007204:	48af      	ldr	r0, [pc, #700]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007206:	f7fa fa85 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400720a:	4ab0      	ldr	r2, [pc, #704]	@ (340074cc <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
3400720c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400720e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007212:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007214:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007218:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400721c:	3901      	subs	r1, #1
3400721e:	4303      	orrs	r3, r0
34007220:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007224:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007228:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400722c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34007230:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34007234:	f7fe f92c 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34007238:	6863      	ldr	r3, [r4, #4]
3400723a:	03da      	lsls	r2, r3, #15
3400723c:	d544      	bpl.n	340072c8 <HAL_RCCEx_PeriphCLKConfig+0x1c70>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
3400723e:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34007242:	4aa3      	ldr	r2, [pc, #652]	@ (340074d0 <HAL_RCCEx_PeriphCLKConfig+0x1e78>)
34007244:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34007248:	4291      	cmp	r1, r2
3400724a:	d00e      	beq.n	3400726a <HAL_RCCEx_PeriphCLKConfig+0x1c12>
3400724c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34007250:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34007254:	4291      	cmp	r1, r2
34007256:	d008      	beq.n	3400726a <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34007258:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400725c:	4293      	cmp	r3, r2
3400725e:	d004      	beq.n	3400726a <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34007260:	f640 0182 	movw	r1, #2178	@ 0x882
34007264:	4897      	ldr	r0, [pc, #604]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007266:	f7fa fa55 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
3400726a:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
3400726e:	4a99      	ldr	r2, [pc, #612]	@ (340074d4 <HAL_RCCEx_PeriphCLKConfig+0x1e7c>)
34007270:	4293      	cmp	r3, r2
34007272:	f041 8138 	bne.w	340084e6 <HAL_RCCEx_PeriphCLKConfig+0x2e8e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007276:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007278:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400727c:	d004      	beq.n	34007288 <HAL_RCCEx_PeriphCLKConfig+0x1c30>
3400727e:	f640 0187 	movw	r1, #2183	@ 0x887
34007282:	4890      	ldr	r0, [pc, #576]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007284:	f7fa fa46 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007288:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400728a:	3b01      	subs	r3, #1
3400728c:	2bff      	cmp	r3, #255	@ 0xff
3400728e:	d904      	bls.n	3400729a <HAL_RCCEx_PeriphCLKConfig+0x1c42>
34007290:	f640 0188 	movw	r1, #2184	@ 0x888
34007294:	488b      	ldr	r0, [pc, #556]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007296:	f7fa fa3d 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400729a:	4a8c      	ldr	r2, [pc, #560]	@ (340074cc <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
3400729c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400729e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340072a2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340072a4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340072a8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340072ac:	3901      	subs	r1, #1
340072ae:	4303      	orrs	r3, r0
340072b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340072b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340072b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340072bc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340072c0:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
340072c4:	f7fe f8e4 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
340072c8:	6863      	ldr	r3, [r4, #4]
340072ca:	039b      	lsls	r3, r3, #14
340072cc:	d544      	bpl.n	34007358 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
340072ce:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
340072d2:	4a81      	ldr	r2, [pc, #516]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x1e80>)
340072d4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340072d8:	4291      	cmp	r1, r2
340072da:	d00e      	beq.n	340072fa <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
340072dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340072e0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340072e4:	4291      	cmp	r1, r2
340072e6:	d008      	beq.n	340072fa <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
340072e8:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340072ec:	4293      	cmp	r3, r2
340072ee:	d004      	beq.n	340072fa <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
340072f0:	f640 01af 	movw	r1, #2223	@ 0x8af
340072f4:	4873      	ldr	r0, [pc, #460]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340072f6:	f7fa fa0d 	bl	34001714 <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
340072fa:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
340072fe:	4a77      	ldr	r2, [pc, #476]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x1e84>)
34007300:	4293      	cmp	r3, r2
34007302:	f041 8121 	bne.w	34008548 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007306:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007308:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400730c:	d004      	beq.n	34007318 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
3400730e:	f640 01b4 	movw	r1, #2228	@ 0x8b4
34007312:	486c      	ldr	r0, [pc, #432]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007314:	f7fa f9fe 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007318:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400731a:	3b01      	subs	r3, #1
3400731c:	2bff      	cmp	r3, #255	@ 0xff
3400731e:	d904      	bls.n	3400732a <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
34007320:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34007324:	4867      	ldr	r0, [pc, #412]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007326:	f7fa f9f5 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400732a:	4a68      	ldr	r2, [pc, #416]	@ (340074cc <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
3400732c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400732e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007332:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007334:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007338:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400733c:	3901      	subs	r1, #1
3400733e:	4303      	orrs	r3, r0
34007340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007344:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007348:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400734c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34007350:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
34007354:	f7fe f89c 	bl	34005490 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34007358:	6863      	ldr	r3, [r4, #4]
3400735a:	035e      	lsls	r6, r3, #13
3400735c:	d51e      	bpl.n	3400739c <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
3400735e:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34007362:	4a5f      	ldr	r2, [pc, #380]	@ (340074e0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
34007364:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34007368:	4291      	cmp	r1, r2
3400736a:	d00a      	beq.n	34007382 <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
3400736c:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34007370:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34007374:	4293      	cmp	r3, r2
34007376:	d004      	beq.n	34007382 <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34007378:	f640 01dc 	movw	r1, #2268	@ 0x8dc
3400737c:	4851      	ldr	r0, [pc, #324]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3400737e:	f7fa f9c9 	bl	34001714 <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34007382:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
34007386:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
3400738a:	f7fe f881 	bl	34005490 <LL_RCC_SetClockSource>
3400738e:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34007392:	2b00      	cmp	r3, #0
34007394:	f281 8109 	bge.w	340085aa <HAL_RCCEx_PeriphCLKConfig+0x2f52>
34007398:	f7fe f84a 	bl	34005430 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3400739c:	6863      	ldr	r3, [r4, #4]
3400739e:	02d8      	lsls	r0, r3, #11
340073a0:	d51e      	bpl.n	340073e0 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
340073a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
340073a6:	4a4f      	ldr	r2, [pc, #316]	@ (340074e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8c>)
340073a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340073ac:	4291      	cmp	r1, r2
340073ae:	d00a      	beq.n	340073c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
340073b0:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
340073b4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
340073b8:	4293      	cmp	r3, r2
340073ba:	d004      	beq.n	340073c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
340073bc:	f640 01e6 	movw	r1, #2278	@ 0x8e6
340073c0:	4840      	ldr	r0, [pc, #256]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340073c2:	f7fa f9a7 	bl	34001714 <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
340073c6:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
340073ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
340073ce:	f7fe f85f 	bl	34005490 <LL_RCC_SetClockSource>
340073d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
340073d6:	2b00      	cmp	r3, #0
340073d8:	f281 80eb 	bge.w	340085b2 <HAL_RCCEx_PeriphCLKConfig+0x2f5a>
340073dc:	f7fe f828 	bl	34005430 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
340073e0:	6863      	ldr	r3, [r4, #4]
340073e2:	0319      	lsls	r1, r3, #12
340073e4:	d549      	bpl.n	3400747a <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
340073e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
340073ea:	4a3f      	ldr	r2, [pc, #252]	@ (340074e8 <HAL_RCCEx_PeriphCLKConfig+0x1e90>)
340073ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340073f0:	4291      	cmp	r1, r2
340073f2:	d00a      	beq.n	3400740a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
340073f4:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
340073f8:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
340073fc:	4293      	cmp	r3, r2
340073fe:	d004      	beq.n	3400740a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
34007400:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
34007404:	482f      	ldr	r0, [pc, #188]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007406:	f7fa f985 	bl	34001714 <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
3400740a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
3400740e:	4a37      	ldr	r2, [pc, #220]	@ (340074ec <HAL_RCCEx_PeriphCLKConfig+0x1e94>)
34007410:	4293      	cmp	r3, r2
34007412:	f041 80d2 	bne.w	340085ba <HAL_RCCEx_PeriphCLKConfig+0x2f62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007416:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007418:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400741c:	d004      	beq.n	34007428 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
3400741e:	f640 01f5 	movw	r1, #2293	@ 0x8f5
34007422:	4828      	ldr	r0, [pc, #160]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007424:	f7fa f976 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007428:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400742a:	3b01      	subs	r3, #1
3400742c:	2bff      	cmp	r3, #255	@ 0xff
3400742e:	d904      	bls.n	3400743a <HAL_RCCEx_PeriphCLKConfig+0x1de2>
34007430:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34007434:	4823      	ldr	r0, [pc, #140]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007436:	f7fa f96d 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400743a:	4a24      	ldr	r2, [pc, #144]	@ (340074cc <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
3400743c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400743e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007442:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007444:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007448:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400744c:	3901      	subs	r1, #1
3400744e:	4303      	orrs	r3, r0
34007450:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007454:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007458:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400745c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34007460:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
34007464:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007468:	f7fe f812 	bl	34005490 <LL_RCC_SetClockSource>
3400746c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34007470:	2b00      	cmp	r3, #0
34007472:	f281 80ab 	bge.w	340085cc <HAL_RCCEx_PeriphCLKConfig+0x2f74>
34007476:	f7fd ffdb 	bl	34005430 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
3400747a:	6863      	ldr	r3, [r4, #4]
3400747c:	029a      	lsls	r2, r3, #10
3400747e:	d564      	bpl.n	3400754a <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
34007480:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34007484:	4a1a      	ldr	r2, [pc, #104]	@ (340074f0 <HAL_RCCEx_PeriphCLKConfig+0x1e98>)
34007486:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400748a:	4291      	cmp	r1, r2
3400748c:	d00a      	beq.n	340074a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
3400748e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34007492:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34007496:	4293      	cmp	r3, r2
34007498:	d004      	beq.n	340074a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
3400749a:	f44f 6111 	mov.w	r1, #2320	@ 0x910
3400749e:	4809      	ldr	r0, [pc, #36]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340074a0:	f7fa f938 	bl	34001714 <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
340074a4:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
340074a8:	4a12      	ldr	r2, [pc, #72]	@ (340074f4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>)
340074aa:	4293      	cmp	r3, r2
340074ac:	f041 8092 	bne.w	340085d4 <HAL_RCCEx_PeriphCLKConfig+0x2f7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340074b0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340074b2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340074b6:	d01f      	beq.n	340074f8 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
340074b8:	f640 1115 	movw	r1, #2325	@ 0x915
340074bc:	4801      	ldr	r0, [pc, #4]	@ (340074c4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340074be:	f7fa f929 	bl	34001714 <assert_failed>
340074c2:	e019      	b.n	340074f8 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
340074c4:	34010edd 	.word	0x34010edd
340074c8:	07021c30 	.word	0x07021c30
340074cc:	56028000 	.word	0x56028000
340074d0:	07000034 	.word	0x07000034
340074d4:	07020034 	.word	0x07020034
340074d8:	07000434 	.word	0x07000434
340074dc:	07020434 	.word	0x07020434
340074e0:	01001014 	.word	0x01001014
340074e4:	01001814 	.word	0x01001814
340074e8:	03000c14 	.word	0x03000c14
340074ec:	03020c14 	.word	0x03020c14
340074f0:	03001414 	.word	0x03001414
340074f4:	03021414 	.word	0x03021414
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340074f8:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340074fa:	3b01      	subs	r3, #1
340074fc:	2bff      	cmp	r3, #255	@ 0xff
340074fe:	d904      	bls.n	3400750a <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
34007500:	f640 1116 	movw	r1, #2326	@ 0x916
34007504:	48b1      	ldr	r0, [pc, #708]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007506:	f7fa f905 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400750a:	4ab1      	ldr	r2, [pc, #708]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400750c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400750e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007512:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007514:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007518:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400751c:	3901      	subs	r1, #1
3400751e:	4303      	orrs	r3, r0
34007520:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007524:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007528:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400752c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34007530:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
34007534:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007538:	f7fd ffaa 	bl	34005490 <LL_RCC_SetClockSource>
3400753c:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34007540:	2b00      	cmp	r3, #0
34007542:	f281 8050 	bge.w	340085e6 <HAL_RCCEx_PeriphCLKConfig+0x2f8e>
34007546:	f7fd ff73 	bl	34005430 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
3400754a:	6863      	ldr	r3, [r4, #4]
3400754c:	061b      	lsls	r3, r3, #24
3400754e:	d511      	bpl.n	34007574 <HAL_RCCEx_PeriphCLKConfig+0x1f1c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
34007550:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
34007554:	2b03      	cmp	r3, #3
34007556:	d904      	bls.n	34007562 <HAL_RCCEx_PeriphCLKConfig+0x1f0a>
34007558:	f44f 6113 	mov.w	r1, #2352	@ 0x930
3400755c:	489b      	ldr	r0, [pc, #620]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400755e:	f7fa f8d9 	bl	34001714 <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34007562:	4a9b      	ldr	r2, [pc, #620]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007564:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
34007568:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3400756a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
3400756e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
34007572:	6253      	str	r3, [r2, #36]	@ 0x24
}
34007574:	1e28      	subs	r0, r5, #0
34007576:	bf18      	it	ne
34007578:	2001      	movne	r0, #1
3400757a:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400757c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3400757e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007582:	d003      	beq.n	3400758c <HAL_RCCEx_PeriphCLKConfig+0x1f34>
34007584:	21e6      	movs	r1, #230	@ 0xe6
34007586:	4891      	ldr	r0, [pc, #580]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007588:	f7fa f8c4 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400758c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
3400758e:	3b01      	subs	r3, #1
34007590:	2bff      	cmp	r3, #255	@ 0xff
34007592:	d903      	bls.n	3400759c <HAL_RCCEx_PeriphCLKConfig+0x1f44>
34007594:	21e7      	movs	r1, #231	@ 0xe7
34007596:	488d      	ldr	r0, [pc, #564]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007598:	f7fa f8bc 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400759c:	4a8c      	ldr	r2, [pc, #560]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400759e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340075a0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340075a4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340075a6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340075aa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340075ae:	3901      	subs	r1, #1
340075b0:	4303      	orrs	r3, r0
340075b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340075b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340075ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
340075be:	f7fe b941 	b.w	34005844 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340075c2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340075c4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340075c8:	d003      	beq.n	340075d2 <HAL_RCCEx_PeriphCLKConfig+0x1f7a>
340075ca:	21f3      	movs	r1, #243	@ 0xf3
340075cc:	487f      	ldr	r0, [pc, #508]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340075ce:	f7fa f8a1 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340075d2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340075d4:	3b01      	subs	r3, #1
340075d6:	2bff      	cmp	r3, #255	@ 0xff
340075d8:	d903      	bls.n	340075e2 <HAL_RCCEx_PeriphCLKConfig+0x1f8a>
340075da:	21f4      	movs	r1, #244	@ 0xf4
340075dc:	487b      	ldr	r0, [pc, #492]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340075de:	f7fa f899 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340075e2:	4a7b      	ldr	r2, [pc, #492]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340075e4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340075e6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340075ea:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340075ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340075f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340075f4:	3901      	subs	r1, #1
340075f6:	4303      	orrs	r3, r0
340075f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340075fc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007600:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007604:	f7fe b91e 	b.w	34005844 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34007608:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3400760c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007610:	d004      	beq.n	3400761c <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
34007612:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007616:	486d      	ldr	r0, [pc, #436]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007618:	f7fa f87c 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400761c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34007620:	3b01      	subs	r3, #1
34007622:	2bff      	cmp	r3, #255	@ 0xff
34007624:	d904      	bls.n	34007630 <HAL_RCCEx_PeriphCLKConfig+0x1fd8>
34007626:	f240 1101 	movw	r1, #257	@ 0x101
3400762a:	4868      	ldr	r0, [pc, #416]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400762c:	f7fa f872 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34007630:	4a67      	ldr	r2, [pc, #412]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007632:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34007636:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
3400763a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
3400763e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007642:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007646:	3901      	subs	r1, #1
34007648:	4303      	orrs	r3, r0
3400764a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400764e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34007652:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34007656:	f7fe b8f5 	b.w	34005844 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400765a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
3400765e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007662:	d004      	beq.n	3400766e <HAL_RCCEx_PeriphCLKConfig+0x2016>
34007664:	f240 110d 	movw	r1, #269	@ 0x10d
34007668:	4858      	ldr	r0, [pc, #352]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400766a:	f7fa f853 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400766e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34007672:	3b01      	subs	r3, #1
34007674:	2bff      	cmp	r3, #255	@ 0xff
34007676:	d904      	bls.n	34007682 <HAL_RCCEx_PeriphCLKConfig+0x202a>
34007678:	f44f 7187 	mov.w	r1, #270	@ 0x10e
3400767c:	4853      	ldr	r0, [pc, #332]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400767e:	f7fa f849 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34007682:	4a53      	ldr	r2, [pc, #332]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007684:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34007688:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
3400768c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34007690:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007694:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007698:	3901      	subs	r1, #1
3400769a:	4303      	orrs	r3, r0
3400769c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340076a0:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340076a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
340076a8:	f7fe b8cc 	b.w	34005844 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
340076ac:	4a49      	ldr	r2, [pc, #292]	@ (340077d4 <HAL_RCCEx_PeriphCLKConfig+0x217c>)
340076ae:	4293      	cmp	r3, r2
340076b0:	d123      	bne.n	340076fa <HAL_RCCEx_PeriphCLKConfig+0x20a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340076b2:	6a23      	ldr	r3, [r4, #32]
340076b4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340076b8:	d004      	beq.n	340076c4 <HAL_RCCEx_PeriphCLKConfig+0x206c>
340076ba:	f44f 719b 	mov.w	r1, #310	@ 0x136
340076be:	4843      	ldr	r0, [pc, #268]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340076c0:	f7fa f828 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340076c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340076c6:	3b01      	subs	r3, #1
340076c8:	2bff      	cmp	r3, #255	@ 0xff
340076ca:	d904      	bls.n	340076d6 <HAL_RCCEx_PeriphCLKConfig+0x207e>
340076cc:	f240 1137 	movw	r1, #311	@ 0x137
340076d0:	483e      	ldr	r0, [pc, #248]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340076d2:	f7fa f81f 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340076d6:	4a3e      	ldr	r2, [pc, #248]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340076d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340076da:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340076de:	6a20      	ldr	r0, [r4, #32]
340076e0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340076e4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340076e8:	3901      	subs	r1, #1
340076ea:	4303      	orrs	r3, r0
340076ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340076f0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340076f4:	2308      	movs	r3, #8
340076f6:	f7fe b8e8 	b.w	340058ca <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
340076fa:	4a37      	ldr	r2, [pc, #220]	@ (340077d8 <HAL_RCCEx_PeriphCLKConfig+0x2180>)
340076fc:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340076fe:	bf02      	ittt	eq
34007700:	2240      	moveq	r2, #64	@ 0x40
34007702:	4b33      	ldreq	r3, [pc, #204]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007704:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007708:	f7fe b8e1 	b.w	340058ce <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
3400770c:	4a33      	ldr	r2, [pc, #204]	@ (340077dc <HAL_RCCEx_PeriphCLKConfig+0x2184>)
3400770e:	4293      	cmp	r3, r2
34007710:	d123      	bne.n	3400775a <HAL_RCCEx_PeriphCLKConfig+0x2102>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34007712:	6a23      	ldr	r3, [r4, #32]
34007714:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007718:	d004      	beq.n	34007724 <HAL_RCCEx_PeriphCLKConfig+0x20cc>
3400771a:	f240 1163 	movw	r1, #355	@ 0x163
3400771e:	482b      	ldr	r0, [pc, #172]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007720:	f7f9 fff8 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007724:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007726:	3b01      	subs	r3, #1
34007728:	2bff      	cmp	r3, #255	@ 0xff
3400772a:	d904      	bls.n	34007736 <HAL_RCCEx_PeriphCLKConfig+0x20de>
3400772c:	f44f 71b2 	mov.w	r1, #356	@ 0x164
34007730:	4826      	ldr	r0, [pc, #152]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007732:	f7f9 ffef 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007736:	4a26      	ldr	r2, [pc, #152]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007738:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400773a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400773e:	6a20      	ldr	r0, [r4, #32]
34007740:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007744:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007748:	3901      	subs	r1, #1
3400774a:	4303      	orrs	r3, r0
3400774c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007750:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34007754:	2308      	movs	r3, #8
34007756:	f7fe b8f5 	b.w	34005944 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3400775a:	4a21      	ldr	r2, [pc, #132]	@ (340077e0 <HAL_RCCEx_PeriphCLKConfig+0x2188>)
3400775c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400775e:	bf02      	ittt	eq
34007760:	2240      	moveq	r2, #64	@ 0x40
34007762:	4b1b      	ldreq	r3, [pc, #108]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007764:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007768:	f7fe b8ee 	b.w	34005948 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3400776c:	4a1d      	ldr	r2, [pc, #116]	@ (340077e4 <HAL_RCCEx_PeriphCLKConfig+0x218c>)
3400776e:	4293      	cmp	r3, r2
34007770:	d123      	bne.n	340077ba <HAL_RCCEx_PeriphCLKConfig+0x2162>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34007772:	6a23      	ldr	r3, [r4, #32]
34007774:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007778:	d004      	beq.n	34007784 <HAL_RCCEx_PeriphCLKConfig+0x212c>
3400777a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
3400777e:	4813      	ldr	r0, [pc, #76]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007780:	f7f9 ffc8 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007784:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007786:	3b01      	subs	r3, #1
34007788:	2bff      	cmp	r3, #255	@ 0xff
3400778a:	d904      	bls.n	34007796 <HAL_RCCEx_PeriphCLKConfig+0x213e>
3400778c:	f240 1191 	movw	r1, #401	@ 0x191
34007790:	480e      	ldr	r0, [pc, #56]	@ (340077cc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007792:	f7f9 ffbf 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007796:	4a0e      	ldr	r2, [pc, #56]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007798:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400779a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400779e:	6a20      	ldr	r0, [r4, #32]
340077a0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340077a4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340077a8:	3901      	subs	r1, #1
340077aa:	4303      	orrs	r3, r0
340077ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340077b0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340077b4:	2308      	movs	r3, #8
340077b6:	f7fe b902 	b.w	340059be <HAL_RCCEx_PeriphCLKConfig+0x366>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
340077ba:	4a0b      	ldr	r2, [pc, #44]	@ (340077e8 <HAL_RCCEx_PeriphCLKConfig+0x2190>)
340077bc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077be:	bf02      	ittt	eq
340077c0:	2240      	moveq	r2, #64	@ 0x40
340077c2:	4b03      	ldreq	r3, [pc, #12]	@ (340077d0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340077c4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077c8:	f7fe b8fb 	b.w	340059c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
340077cc:	34010edd 	.word	0x34010edd
340077d0:	56028000 	.word	0x56028000
340077d4:	03030014 	.word	0x03030014
340077d8:	03010014 	.word	0x03010014
340077dc:	03030414 	.word	0x03030414
340077e0:	03010414 	.word	0x03010414
340077e4:	03030814 	.word	0x03030814
340077e8:	03010814 	.word	0x03010814
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
340077ec:	2b30      	cmp	r3, #48	@ 0x30
340077ee:	d123      	bne.n	34007838 <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340077f0:	6a23      	ldr	r3, [r4, #32]
340077f2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340077f6:	d004      	beq.n	34007802 <HAL_RCCEx_PeriphCLKConfig+0x21aa>
340077f8:	f240 11bd 	movw	r1, #445	@ 0x1bd
340077fc:	48b2      	ldr	r0, [pc, #712]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340077fe:	f7f9 ff89 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007802:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007804:	3b01      	subs	r3, #1
34007806:	2bff      	cmp	r3, #255	@ 0xff
34007808:	d904      	bls.n	34007814 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
3400780a:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3400780e:	48ae      	ldr	r0, [pc, #696]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007810:	f7f9 ff80 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007814:	4aad      	ldr	r2, [pc, #692]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007816:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34007818:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400781c:	6a20      	ldr	r0, [r4, #32]
3400781e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007822:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007826:	3901      	subs	r1, #1
34007828:	4303      	orrs	r3, r0
3400782a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400782e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34007832:	2308      	movs	r3, #8
34007834:	f7fe b8fd 	b.w	34005a32 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34007838:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400783a:	bf02      	ittt	eq
3400783c:	2240      	moveq	r2, #64	@ 0x40
3400783e:	4ba3      	ldreq	r3, [pc, #652]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007840:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007844:	f7fe b8f7 	b.w	34005a36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34007848:	4aa1      	ldr	r2, [pc, #644]	@ (34007ad0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3400784a:	4293      	cmp	r3, r2
3400784c:	d123      	bne.n	34007896 <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400784e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34007850:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007854:	d004      	beq.n	34007860 <HAL_RCCEx_PeriphCLKConfig+0x2208>
34007856:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
3400785a:	489b      	ldr	r0, [pc, #620]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400785c:	f7f9 ff5a 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34007860:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34007862:	3b01      	subs	r3, #1
34007864:	2bff      	cmp	r3, #255	@ 0xff
34007866:	d904      	bls.n	34007872 <HAL_RCCEx_PeriphCLKConfig+0x221a>
34007868:	f240 11eb 	movw	r1, #491	@ 0x1eb
3400786c:	4896      	ldr	r0, [pc, #600]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400786e:	f7f9 ff51 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34007872:	4a96      	ldr	r2, [pc, #600]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007874:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34007876:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
3400787a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
3400787c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007880:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007884:	3901      	subs	r1, #1
34007886:	4303      	orrs	r3, r0
34007888:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400788c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34007890:	2310      	movs	r3, #16
34007892:	f7fe b911 	b.w	34005ab8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
34007896:	4a8f      	ldr	r2, [pc, #572]	@ (34007ad4 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34007898:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400789a:	bf02      	ittt	eq
3400789c:	2240      	moveq	r2, #64	@ 0x40
3400789e:	4b8b      	ldreq	r3, [pc, #556]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340078a0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078a4:	f7fe b90a 	b.w	34005abc <HAL_RCCEx_PeriphCLKConfig+0x464>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
340078a8:	4a8b      	ldr	r2, [pc, #556]	@ (34007ad8 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
340078aa:	4293      	cmp	r3, r2
340078ac:	d123      	bne.n	340078f6 <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340078ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340078b0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340078b4:	d004      	beq.n	340078c0 <HAL_RCCEx_PeriphCLKConfig+0x2268>
340078b6:	f240 2117 	movw	r1, #535	@ 0x217
340078ba:	4883      	ldr	r0, [pc, #524]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340078bc:	f7f9 ff2a 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
340078c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340078c2:	3b01      	subs	r3, #1
340078c4:	2bff      	cmp	r3, #255	@ 0xff
340078c6:	d904      	bls.n	340078d2 <HAL_RCCEx_PeriphCLKConfig+0x227a>
340078c8:	f44f 7106 	mov.w	r1, #536	@ 0x218
340078cc:	487e      	ldr	r0, [pc, #504]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340078ce:	f7f9 ff21 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340078d2:	4a7e      	ldr	r2, [pc, #504]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340078d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340078d6:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340078da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340078dc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340078e0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340078e4:	3901      	subs	r1, #1
340078e6:	4303      	orrs	r3, r0
340078e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340078ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340078f0:	2310      	movs	r3, #16
340078f2:	f7fe b938 	b.w	34005b66 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
340078f6:	4a79      	ldr	r2, [pc, #484]	@ (34007adc <HAL_RCCEx_PeriphCLKConfig+0x2484>)
340078f8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078fa:	bf02      	ittt	eq
340078fc:	2240      	moveq	r2, #64	@ 0x40
340078fe:	4b73      	ldreq	r3, [pc, #460]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007900:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007904:	f7fe b931 	b.w	34005b6a <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34007908:	2b30      	cmp	r3, #48	@ 0x30
3400790a:	d123      	bne.n	34007954 <HAL_RCCEx_PeriphCLKConfig+0x22fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400790c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400790e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007912:	d004      	beq.n	3400791e <HAL_RCCEx_PeriphCLKConfig+0x22c6>
34007914:	f240 2145 	movw	r1, #581	@ 0x245
34007918:	486b      	ldr	r0, [pc, #428]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400791a:	f7f9 fefb 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400791e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007920:	3b01      	subs	r3, #1
34007922:	2bff      	cmp	r3, #255	@ 0xff
34007924:	d904      	bls.n	34007930 <HAL_RCCEx_PeriphCLKConfig+0x22d8>
34007926:	f240 2146 	movw	r1, #582	@ 0x246
3400792a:	4867      	ldr	r0, [pc, #412]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400792c:	f7f9 fef2 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007930:	4a66      	ldr	r2, [pc, #408]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007932:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007934:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007938:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400793a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400793e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007942:	3901      	subs	r1, #1
34007944:	4303      	orrs	r3, r0
34007946:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400794a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400794e:	2380      	movs	r3, #128	@ 0x80
34007950:	f7fe b94f 	b.w	34005bf2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34007954:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007956:	bf02      	ittt	eq
34007958:	2240      	moveq	r2, #64	@ 0x40
3400795a:	4b5c      	ldreq	r3, [pc, #368]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400795c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007960:	f7fe b949 	b.w	34005bf6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34007964:	2b03      	cmp	r3, #3
34007966:	d123      	bne.n	340079b0 <HAL_RCCEx_PeriphCLKConfig+0x2358>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007968:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400796a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400796e:	d004      	beq.n	3400797a <HAL_RCCEx_PeriphCLKConfig+0x2322>
34007970:	f240 2173 	movw	r1, #627	@ 0x273
34007974:	4854      	ldr	r0, [pc, #336]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007976:	f7f9 fecd 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400797a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400797c:	3b01      	subs	r3, #1
3400797e:	2bff      	cmp	r3, #255	@ 0xff
34007980:	d904      	bls.n	3400798c <HAL_RCCEx_PeriphCLKConfig+0x2334>
34007982:	f44f 711d 	mov.w	r1, #628	@ 0x274
34007986:	4850      	ldr	r0, [pc, #320]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007988:	f7f9 fec4 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400798c:	4a4f      	ldr	r2, [pc, #316]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400798e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007990:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007994:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007996:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400799a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400799e:	3901      	subs	r1, #1
340079a0:	4303      	orrs	r3, r0
340079a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340079a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340079aa:	2380      	movs	r3, #128	@ 0x80
340079ac:	f7fe b967 	b.w	34005c7e <HAL_RCCEx_PeriphCLKConfig+0x626>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
340079b0:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079b2:	bf02      	ittt	eq
340079b4:	2240      	moveq	r2, #64	@ 0x40
340079b6:	4b45      	ldreq	r3, [pc, #276]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340079b8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079bc:	f7fe b961 	b.w	34005c82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
340079c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079c4:	bf02      	ittt	eq
340079c6:	2240      	moveq	r2, #64	@ 0x40
340079c8:	4b40      	ldreq	r3, [pc, #256]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340079ca:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079ce:	f7fe b9ca 	b.w	34005d66 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
340079d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079d6:	bf02      	ittt	eq
340079d8:	2240      	moveq	r2, #64	@ 0x40
340079da:	4b3c      	ldreq	r3, [pc, #240]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340079dc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079e0:	f7fe ba03 	b.w	34005dea <HAL_RCCEx_PeriphCLKConfig+0x792>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
340079e4:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079e6:	bf02      	ittt	eq
340079e8:	2240      	moveq	r2, #64	@ 0x40
340079ea:	4b38      	ldreq	r3, [pc, #224]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340079ec:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079f0:	f7fe ba92 	b.w	34005f18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
340079f4:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079f6:	bf02      	ittt	eq
340079f8:	2240      	moveq	r2, #64	@ 0x40
340079fa:	4b34      	ldreq	r3, [pc, #208]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340079fc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a00:	f7fe bad3 	b.w	34005faa <HAL_RCCEx_PeriphCLKConfig+0x952>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34007a04:	4a36      	ldr	r2, [pc, #216]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34007a06:	4293      	cmp	r3, r2
34007a08:	d124      	bne.n	34007a54 <HAL_RCCEx_PeriphCLKConfig+0x23fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007a0a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007a0c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007a10:	d004      	beq.n	34007a1c <HAL_RCCEx_PeriphCLKConfig+0x23c4>
34007a12:	f240 314f 	movw	r1, #847	@ 0x34f
34007a16:	482c      	ldr	r0, [pc, #176]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007a18:	f7f9 fe7c 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007a1c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007a1e:	3b01      	subs	r3, #1
34007a20:	2bff      	cmp	r3, #255	@ 0xff
34007a22:	d904      	bls.n	34007a2e <HAL_RCCEx_PeriphCLKConfig+0x23d6>
34007a24:	f44f 7154 	mov.w	r1, #848	@ 0x350
34007a28:	4827      	ldr	r0, [pc, #156]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007a2a:	f7f9 fe73 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007a2e:	4a27      	ldr	r2, [pc, #156]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007a30:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007a32:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007a36:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007a38:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007a3c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007a40:	3901      	subs	r1, #1
34007a42:	4303      	orrs	r3, r0
34007a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007a48:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007a4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007a50:	f7fe baf3 	b.w	3400603a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34007a54:	4a23      	ldr	r2, [pc, #140]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34007a56:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a58:	bf02      	ittt	eq
34007a5a:	2240      	moveq	r2, #64	@ 0x40
34007a5c:	4b1b      	ldreq	r3, [pc, #108]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007a5e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a62:	f7fe baec 	b.w	3400603e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34007a66:	4a20      	ldr	r2, [pc, #128]	@ (34007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34007a68:	4293      	cmp	r3, r2
34007a6a:	d124      	bne.n	34007ab6 <HAL_RCCEx_PeriphCLKConfig+0x245e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007a6c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007a6e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007a72:	d004      	beq.n	34007a7e <HAL_RCCEx_PeriphCLKConfig+0x2426>
34007a74:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34007a78:	4813      	ldr	r0, [pc, #76]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007a7a:	f7f9 fe4b 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007a7e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007a80:	3b01      	subs	r3, #1
34007a82:	2bff      	cmp	r3, #255	@ 0xff
34007a84:	d904      	bls.n	34007a90 <HAL_RCCEx_PeriphCLKConfig+0x2438>
34007a86:	f240 317d 	movw	r1, #893	@ 0x37d
34007a8a:	480f      	ldr	r0, [pc, #60]	@ (34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007a8c:	f7f9 fe42 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007a90:	4a0e      	ldr	r2, [pc, #56]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007a92:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007a94:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007a98:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007a9a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007a9e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007aa2:	3901      	subs	r1, #1
34007aa4:	4303      	orrs	r3, r0
34007aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007aaa:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007aae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007ab2:	f7fe bb06 	b.w	340060c2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34007ab6:	4a0d      	ldr	r2, [pc, #52]	@ (34007aec <HAL_RCCEx_PeriphCLKConfig+0x2494>)
34007ab8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007aba:	bf02      	ittt	eq
34007abc:	2240      	moveq	r2, #64	@ 0x40
34007abe:	4b03      	ldreq	r3, [pc, #12]	@ (34007acc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007ac0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007ac4:	f7fe baff 	b.w	340060c6 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
34007ac8:	34010edd 	.word	0x34010edd
34007acc:	56028000 	.word	0x56028000
34007ad0:	0303001c 	.word	0x0303001c
34007ad4:	0301001c 	.word	0x0301001c
34007ad8:	0303041c 	.word	0x0303041c
34007adc:	0301041c 	.word	0x0301041c
34007ae0:	0703000c 	.word	0x0703000c
34007ae4:	0701000c 	.word	0x0701000c
34007ae8:	0703040c 	.word	0x0703040c
34007aec:	0701040c 	.word	0x0701040c
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34007af0:	4ab1      	ldr	r2, [pc, #708]	@ (34007db8 <HAL_RCCEx_PeriphCLKConfig+0x2760>)
34007af2:	4293      	cmp	r3, r2
34007af4:	d124      	bne.n	34007b40 <HAL_RCCEx_PeriphCLKConfig+0x24e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007af6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007af8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007afc:	d004      	beq.n	34007b08 <HAL_RCCEx_PeriphCLKConfig+0x24b0>
34007afe:	f240 31a9 	movw	r1, #937	@ 0x3a9
34007b02:	48ae      	ldr	r0, [pc, #696]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007b04:	f7f9 fe06 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007b08:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007b0a:	3b01      	subs	r3, #1
34007b0c:	2bff      	cmp	r3, #255	@ 0xff
34007b0e:	d904      	bls.n	34007b1a <HAL_RCCEx_PeriphCLKConfig+0x24c2>
34007b10:	f240 31aa 	movw	r1, #938	@ 0x3aa
34007b14:	48a9      	ldr	r0, [pc, #676]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007b16:	f7f9 fdfd 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007b1a:	4aa9      	ldr	r2, [pc, #676]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007b1c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007b1e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007b22:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007b24:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b28:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b2c:	3901      	subs	r1, #1
34007b2e:	4303      	orrs	r3, r0
34007b30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b34:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007b38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007b3c:	f7fe bb05 	b.w	3400614a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34007b40:	4aa0      	ldr	r2, [pc, #640]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x276c>)
34007b42:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b44:	bf02      	ittt	eq
34007b46:	2240      	moveq	r2, #64	@ 0x40
34007b48:	4b9d      	ldreq	r3, [pc, #628]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007b4a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b4e:	f7fe bafe 	b.w	3400614e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34007b52:	4a9d      	ldr	r2, [pc, #628]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2770>)
34007b54:	4293      	cmp	r3, r2
34007b56:	d124      	bne.n	34007ba2 <HAL_RCCEx_PeriphCLKConfig+0x254a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007b58:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007b5a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007b5e:	d004      	beq.n	34007b6a <HAL_RCCEx_PeriphCLKConfig+0x2512>
34007b60:	f240 31d6 	movw	r1, #982	@ 0x3d6
34007b64:	4895      	ldr	r0, [pc, #596]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007b66:	f7f9 fdd5 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007b6a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007b6c:	3b01      	subs	r3, #1
34007b6e:	2bff      	cmp	r3, #255	@ 0xff
34007b70:	d904      	bls.n	34007b7c <HAL_RCCEx_PeriphCLKConfig+0x2524>
34007b72:	f240 31d7 	movw	r1, #983	@ 0x3d7
34007b76:	4891      	ldr	r0, [pc, #580]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007b78:	f7f9 fdcc 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007b7c:	4a90      	ldr	r2, [pc, #576]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007b7e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007b80:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007b84:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007b86:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b8a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b8e:	3901      	subs	r1, #1
34007b90:	4303      	orrs	r3, r0
34007b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b96:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007b9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007b9e:	f7fe bb2c 	b.w	340061fa <HAL_RCCEx_PeriphCLKConfig+0xba2>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34007ba2:	4a8a      	ldr	r2, [pc, #552]	@ (34007dcc <HAL_RCCEx_PeriphCLKConfig+0x2774>)
34007ba4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ba6:	bf02      	ittt	eq
34007ba8:	2240      	moveq	r2, #64	@ 0x40
34007baa:	4b85      	ldreq	r3, [pc, #532]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007bac:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007bb0:	f7fe bb25 	b.w	340061fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34007bb4:	4a86      	ldr	r2, [pc, #536]	@ (34007dd0 <HAL_RCCEx_PeriphCLKConfig+0x2778>)
34007bb6:	4293      	cmp	r3, r2
34007bb8:	d124      	bne.n	34007c04 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007bba:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007bbc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007bc0:	d004      	beq.n	34007bcc <HAL_RCCEx_PeriphCLKConfig+0x2574>
34007bc2:	f240 4103 	movw	r1, #1027	@ 0x403
34007bc6:	487d      	ldr	r0, [pc, #500]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007bc8:	f7f9 fda4 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007bcc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007bce:	3b01      	subs	r3, #1
34007bd0:	2bff      	cmp	r3, #255	@ 0xff
34007bd2:	d904      	bls.n	34007bde <HAL_RCCEx_PeriphCLKConfig+0x2586>
34007bd4:	f240 4104 	movw	r1, #1028	@ 0x404
34007bd8:	4878      	ldr	r0, [pc, #480]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007bda:	f7f9 fd9b 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007bde:	4a78      	ldr	r2, [pc, #480]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007be0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007be2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007be6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007be8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007bec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007bf0:	3901      	subs	r1, #1
34007bf2:	4303      	orrs	r3, r0
34007bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007bf8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007bfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007c00:	f7fe bb3f 	b.w	34006282 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34007c04:	4a73      	ldr	r2, [pc, #460]	@ (34007dd4 <HAL_RCCEx_PeriphCLKConfig+0x277c>)
34007c06:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c08:	bf02      	ittt	eq
34007c0a:	2240      	moveq	r2, #64	@ 0x40
34007c0c:	4b6c      	ldreq	r3, [pc, #432]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007c0e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c12:	f7fe bb38 	b.w	34006286 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34007c16:	4a70      	ldr	r2, [pc, #448]	@ (34007dd8 <HAL_RCCEx_PeriphCLKConfig+0x2780>)
34007c18:	4293      	cmp	r3, r2
34007c1a:	d124      	bne.n	34007c66 <HAL_RCCEx_PeriphCLKConfig+0x260e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007c1c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007c1e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007c22:	d004      	beq.n	34007c2e <HAL_RCCEx_PeriphCLKConfig+0x25d6>
34007c24:	f44f 6186 	mov.w	r1, #1072	@ 0x430
34007c28:	4864      	ldr	r0, [pc, #400]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007c2a:	f7f9 fd73 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007c2e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007c30:	3b01      	subs	r3, #1
34007c32:	2bff      	cmp	r3, #255	@ 0xff
34007c34:	d904      	bls.n	34007c40 <HAL_RCCEx_PeriphCLKConfig+0x25e8>
34007c36:	f240 4131 	movw	r1, #1073	@ 0x431
34007c3a:	4860      	ldr	r0, [pc, #384]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007c3c:	f7f9 fd6a 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007c40:	4a5f      	ldr	r2, [pc, #380]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007c42:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007c44:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007c48:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007c4a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c4e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c52:	3901      	subs	r1, #1
34007c54:	4303      	orrs	r3, r0
34007c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007c5a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007c5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007c62:	f7fe bb52 	b.w	3400630a <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34007c66:	4a5d      	ldr	r2, [pc, #372]	@ (34007ddc <HAL_RCCEx_PeriphCLKConfig+0x2784>)
34007c68:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c6a:	bf02      	ittt	eq
34007c6c:	2240      	moveq	r2, #64	@ 0x40
34007c6e:	4b54      	ldreq	r3, [pc, #336]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007c70:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c74:	f7fe bb4b 	b.w	3400630e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34007c78:	4a59      	ldr	r2, [pc, #356]	@ (34007de0 <HAL_RCCEx_PeriphCLKConfig+0x2788>)
34007c7a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c7c:	bf02      	ittt	eq
34007c7e:	2240      	moveq	r2, #64	@ 0x40
34007c80:	4b4f      	ldreq	r3, [pc, #316]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007c82:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c86:	f7fe bb86 	b.w	34006396 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34007c8a:	4a56      	ldr	r2, [pc, #344]	@ (34007de4 <HAL_RCCEx_PeriphCLKConfig+0x278c>)
34007c8c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c8e:	bf02      	ittt	eq
34007c90:	2240      	moveq	r2, #64	@ 0x40
34007c92:	4b4b      	ldreq	r3, [pc, #300]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007c94:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c98:	f7fe bbc1 	b.w	3400641e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34007c9c:	4a52      	ldr	r2, [pc, #328]	@ (34007de8 <HAL_RCCEx_PeriphCLKConfig+0x2790>)
34007c9e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ca0:	bf02      	ittt	eq
34007ca2:	2240      	moveq	r2, #64	@ 0x40
34007ca4:	4b46      	ldreq	r3, [pc, #280]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007ca6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007caa:	f7fe bc17 	b.w	340064dc <HAL_RCCEx_PeriphCLKConfig+0xe84>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34007cae:	4a4f      	ldr	r2, [pc, #316]	@ (34007dec <HAL_RCCEx_PeriphCLKConfig+0x2794>)
34007cb0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007cb2:	bf02      	ittt	eq
34007cb4:	2240      	moveq	r2, #64	@ 0x40
34007cb6:	4b42      	ldreq	r3, [pc, #264]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007cb8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007cbc:	f7fe bc52 	b.w	34006564 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34007cc0:	4a4b      	ldr	r2, [pc, #300]	@ (34007df0 <HAL_RCCEx_PeriphCLKConfig+0x2798>)
34007cc2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007cc4:	bf02      	ittt	eq
34007cc6:	2240      	moveq	r2, #64	@ 0x40
34007cc8:	4b3d      	ldreq	r3, [pc, #244]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007cca:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007cce:	f7fe bc8d 	b.w	340065ec <HAL_RCCEx_PeriphCLKConfig+0xf94>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34007cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34007cd6:	d124      	bne.n	34007d22 <HAL_RCCEx_PeriphCLKConfig+0x26ca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007cd8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007cda:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007cde:	d004      	beq.n	34007cea <HAL_RCCEx_PeriphCLKConfig+0x2692>
34007ce0:	f240 41fd 	movw	r1, #1277	@ 0x4fd
34007ce4:	4835      	ldr	r0, [pc, #212]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007ce6:	f7f9 fd15 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007cea:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007cec:	3b01      	subs	r3, #1
34007cee:	2bff      	cmp	r3, #255	@ 0xff
34007cf0:	d904      	bls.n	34007cfc <HAL_RCCEx_PeriphCLKConfig+0x26a4>
34007cf2:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34007cf6:	4831      	ldr	r0, [pc, #196]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007cf8:	f7f9 fd0c 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007cfc:	4a30      	ldr	r2, [pc, #192]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007cfe:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007d00:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007d04:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007d06:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007d0a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007d0e:	3901      	subs	r1, #1
34007d10:	4303      	orrs	r3, r0
34007d12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007d16:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007d1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007d1e:	f7fe bca7 	b.w	34006670 <HAL_RCCEx_PeriphCLKConfig+0x1018>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34007d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007d26:	bf02      	ittt	eq
34007d28:	2240      	moveq	r2, #64	@ 0x40
34007d2a:	4b25      	ldreq	r3, [pc, #148]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007d2c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007d30:	f7fe bca0 	b.w	34006674 <HAL_RCCEx_PeriphCLKConfig+0x101c>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34007d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007d38:	bf02      	ittt	eq
34007d3a:	2240      	moveq	r2, #64	@ 0x40
34007d3c:	4b20      	ldreq	r3, [pc, #128]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007d3e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007d42:	f7fe bcdd 	b.w	34006700 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34007d46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34007d4a:	d123      	bne.n	34007d94 <HAL_RCCEx_PeriphCLKConfig+0x273c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007d4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007d4e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007d52:	d004      	beq.n	34007d5e <HAL_RCCEx_PeriphCLKConfig+0x2706>
34007d54:	f240 514a 	movw	r1, #1354	@ 0x54a
34007d58:	4818      	ldr	r0, [pc, #96]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007d5a:	f7f9 fcdb 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007d5e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007d60:	3b01      	subs	r3, #1
34007d62:	2bff      	cmp	r3, #255	@ 0xff
34007d64:	d904      	bls.n	34007d70 <HAL_RCCEx_PeriphCLKConfig+0x2718>
34007d66:	f240 514b 	movw	r1, #1355	@ 0x54b
34007d6a:	4814      	ldr	r0, [pc, #80]	@ (34007dbc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007d6c:	f7f9 fcd2 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007d70:	4a13      	ldr	r2, [pc, #76]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007d72:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007d74:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007d78:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007d7a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007d7e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007d82:	3901      	subs	r1, #1
34007d84:	4303      	orrs	r3, r0
34007d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007d8e:	2380      	movs	r3, #128	@ 0x80
34007d90:	f7fe bcf8 	b.w	34006784 <HAL_RCCEx_PeriphCLKConfig+0x112c>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34007d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007d98:	bf02      	ittt	eq
34007d9a:	2240      	moveq	r2, #64	@ 0x40
34007d9c:	4b08      	ldreq	r3, [pc, #32]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007d9e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007da2:	f7fe bcf1 	b.w	34006788 <HAL_RCCEx_PeriphCLKConfig+0x1130>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34007da6:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007da8:	bf02      	ittt	eq
34007daa:	2240      	moveq	r2, #64	@ 0x40
34007dac:	4b04      	ldreq	r3, [pc, #16]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007dae:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007db2:	f7fe bd3b 	b.w	3400682c <HAL_RCCEx_PeriphCLKConfig+0x11d4>
34007db6:	bf00      	nop
34007db8:	0703080c 	.word	0x0703080c
34007dbc:	34010edd 	.word	0x34010edd
34007dc0:	56028000 	.word	0x56028000
34007dc4:	0701080c 	.word	0x0701080c
34007dc8:	07030c0c 	.word	0x07030c0c
34007dcc:	07010c0c 	.word	0x07010c0c
34007dd0:	0703100c 	.word	0x0703100c
34007dd4:	0701100c 	.word	0x0701100c
34007dd8:	0703140c 	.word	0x0703140c
34007ddc:	0701140c 	.word	0x0701140c
34007de0:	0701082c 	.word	0x0701082c
34007de4:	07010c2c 	.word	0x07010c2c
34007de8:	0701102c 	.word	0x0701102c
34007dec:	0701142c 	.word	0x0701142c
34007df0:	0701182c 	.word	0x0701182c
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34007df4:	4aa8      	ldr	r2, [pc, #672]	@ (34008098 <HAL_RCCEx_PeriphCLKConfig+0x2a40>)
34007df6:	4293      	cmp	r3, r2
34007df8:	d123      	bne.n	34007e42 <HAL_RCCEx_PeriphCLKConfig+0x27ea>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007dfa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007dfc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e00:	d004      	beq.n	34007e0c <HAL_RCCEx_PeriphCLKConfig+0x27b4>
34007e02:	f240 5197 	movw	r1, #1431	@ 0x597
34007e06:	48a5      	ldr	r0, [pc, #660]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007e08:	f7f9 fc84 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007e0c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007e0e:	3b01      	subs	r3, #1
34007e10:	2bff      	cmp	r3, #255	@ 0xff
34007e12:	d904      	bls.n	34007e1e <HAL_RCCEx_PeriphCLKConfig+0x27c6>
34007e14:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
34007e18:	48a0      	ldr	r0, [pc, #640]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007e1a:	f7f9 fc7b 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007e1e:	4aa0      	ldr	r2, [pc, #640]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007e20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007e22:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007e26:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007e28:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e2c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e30:	3901      	subs	r1, #1
34007e32:	4303      	orrs	r3, r0
34007e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007e3c:	2380      	movs	r3, #128	@ 0x80
34007e3e:	f7fe bd3a 	b.w	340068b6 <HAL_RCCEx_PeriphCLKConfig+0x125e>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34007e42:	4a98      	ldr	r2, [pc, #608]	@ (340080a4 <HAL_RCCEx_PeriphCLKConfig+0x2a4c>)
34007e44:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007e46:	bf02      	ittt	eq
34007e48:	2240      	moveq	r2, #64	@ 0x40
34007e4a:	4b95      	ldreq	r3, [pc, #596]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007e4c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007e50:	f7fe bd33 	b.w	340068ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34007e54:	4a94      	ldr	r2, [pc, #592]	@ (340080a8 <HAL_RCCEx_PeriphCLKConfig+0x2a50>)
34007e56:	4293      	cmp	r3, r2
34007e58:	d123      	bne.n	34007ea2 <HAL_RCCEx_PeriphCLKConfig+0x284a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007e5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007e5c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e60:	d004      	beq.n	34007e6c <HAL_RCCEx_PeriphCLKConfig+0x2814>
34007e62:	f240 51c4 	movw	r1, #1476	@ 0x5c4
34007e66:	488d      	ldr	r0, [pc, #564]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007e68:	f7f9 fc54 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007e6c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007e6e:	3b01      	subs	r3, #1
34007e70:	2bff      	cmp	r3, #255	@ 0xff
34007e72:	d904      	bls.n	34007e7e <HAL_RCCEx_PeriphCLKConfig+0x2826>
34007e74:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34007e78:	4888      	ldr	r0, [pc, #544]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007e7a:	f7f9 fc4b 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007e7e:	4a88      	ldr	r2, [pc, #544]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007e80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007e82:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007e86:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007e88:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e8c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e90:	3901      	subs	r1, #1
34007e92:	4303      	orrs	r3, r0
34007e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007e9c:	2380      	movs	r3, #128	@ 0x80
34007e9e:	f7fe bd4b 	b.w	34006938 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34007ea2:	4a82      	ldr	r2, [pc, #520]	@ (340080ac <HAL_RCCEx_PeriphCLKConfig+0x2a54>)
34007ea4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ea6:	bf02      	ittt	eq
34007ea8:	2240      	moveq	r2, #64	@ 0x40
34007eaa:	4b7d      	ldreq	r3, [pc, #500]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007eac:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007eb0:	f7fe bd44 	b.w	3400693c <HAL_RCCEx_PeriphCLKConfig+0x12e4>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34007eb4:	2b03      	cmp	r3, #3
34007eb6:	d123      	bne.n	34007f00 <HAL_RCCEx_PeriphCLKConfig+0x28a8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007eb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007eba:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ebe:	d004      	beq.n	34007eca <HAL_RCCEx_PeriphCLKConfig+0x2872>
34007ec0:	f240 51f1 	movw	r1, #1521	@ 0x5f1
34007ec4:	4875      	ldr	r0, [pc, #468]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007ec6:	f7f9 fc25 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007eca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007ecc:	3b01      	subs	r3, #1
34007ece:	2bff      	cmp	r3, #255	@ 0xff
34007ed0:	d904      	bls.n	34007edc <HAL_RCCEx_PeriphCLKConfig+0x2884>
34007ed2:	f240 51f2 	movw	r1, #1522	@ 0x5f2
34007ed6:	4871      	ldr	r0, [pc, #452]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007ed8:	f7f9 fc1c 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007edc:	4a70      	ldr	r2, [pc, #448]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007ede:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007ee0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007ee4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007ee6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007eea:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007eee:	3901      	subs	r1, #1
34007ef0:	4303      	orrs	r3, r0
34007ef2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007efa:	2380      	movs	r3, #128	@ 0x80
34007efc:	f7fe bd55 	b.w	340069aa <HAL_RCCEx_PeriphCLKConfig+0x1352>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34007f00:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f02:	bf02      	ittt	eq
34007f04:	2240      	moveq	r2, #64	@ 0x40
34007f06:	4b66      	ldreq	r3, [pc, #408]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007f08:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f0c:	f7fe bd4f 	b.w	340069ae <HAL_RCCEx_PeriphCLKConfig+0x1356>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34007f10:	4a67      	ldr	r2, [pc, #412]	@ (340080b0 <HAL_RCCEx_PeriphCLKConfig+0x2a58>)
34007f12:	4293      	cmp	r3, r2
34007f14:	d124      	bne.n	34007f60 <HAL_RCCEx_PeriphCLKConfig+0x2908>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007f16:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007f18:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007f1c:	d004      	beq.n	34007f28 <HAL_RCCEx_PeriphCLKConfig+0x28d0>
34007f1e:	f240 611e 	movw	r1, #1566	@ 0x61e
34007f22:	485e      	ldr	r0, [pc, #376]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007f24:	f7f9 fbf6 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007f28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007f2a:	3b01      	subs	r3, #1
34007f2c:	2bff      	cmp	r3, #255	@ 0xff
34007f2e:	d904      	bls.n	34007f3a <HAL_RCCEx_PeriphCLKConfig+0x28e2>
34007f30:	f240 611f 	movw	r1, #1567	@ 0x61f
34007f34:	4859      	ldr	r0, [pc, #356]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007f36:	f7f9 fbed 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007f3a:	4a59      	ldr	r2, [pc, #356]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007f3c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007f3e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007f42:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007f44:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007f48:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007f4c:	3901      	subs	r1, #1
34007f4e:	4303      	orrs	r3, r0
34007f50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007f54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007f5c:	f7fe bd72 	b.w	34006a44 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34007f60:	4a54      	ldr	r2, [pc, #336]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2a5c>)
34007f62:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f64:	bf02      	ittt	eq
34007f66:	2240      	moveq	r2, #64	@ 0x40
34007f68:	4b4d      	ldreq	r3, [pc, #308]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007f6a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f6e:	f7fe bd6b 	b.w	34006a48 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34007f72:	4a51      	ldr	r2, [pc, #324]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2a60>)
34007f74:	4293      	cmp	r3, r2
34007f76:	d124      	bne.n	34007fc2 <HAL_RCCEx_PeriphCLKConfig+0x296a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007f78:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007f7a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007f7e:	d004      	beq.n	34007f8a <HAL_RCCEx_PeriphCLKConfig+0x2932>
34007f80:	f240 614b 	movw	r1, #1611	@ 0x64b
34007f84:	4845      	ldr	r0, [pc, #276]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007f86:	f7f9 fbc5 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007f8a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007f8c:	3b01      	subs	r3, #1
34007f8e:	2bff      	cmp	r3, #255	@ 0xff
34007f90:	d904      	bls.n	34007f9c <HAL_RCCEx_PeriphCLKConfig+0x2944>
34007f92:	f240 614c 	movw	r1, #1612	@ 0x64c
34007f96:	4841      	ldr	r0, [pc, #260]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007f98:	f7f9 fbbc 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007f9c:	4a40      	ldr	r2, [pc, #256]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007f9e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007fa0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007fa4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007fa6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007faa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007fae:	3901      	subs	r1, #1
34007fb0:	4303      	orrs	r3, r0
34007fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007fb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007fba:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007fbe:	f7fe bd88 	b.w	34006ad2 <HAL_RCCEx_PeriphCLKConfig+0x147a>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34007fc2:	4a3e      	ldr	r2, [pc, #248]	@ (340080bc <HAL_RCCEx_PeriphCLKConfig+0x2a64>)
34007fc4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007fc6:	bf02      	ittt	eq
34007fc8:	2240      	moveq	r2, #64	@ 0x40
34007fca:	4b35      	ldreq	r3, [pc, #212]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007fcc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007fd0:	f7fe bd81 	b.w	34006ad6 <HAL_RCCEx_PeriphCLKConfig+0x147e>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34007fd4:	4a3a      	ldr	r2, [pc, #232]	@ (340080c0 <HAL_RCCEx_PeriphCLKConfig+0x2a68>)
34007fd6:	4293      	cmp	r3, r2
34007fd8:	d124      	bne.n	34008024 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007fda:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007fdc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007fe0:	d004      	beq.n	34007fec <HAL_RCCEx_PeriphCLKConfig+0x2994>
34007fe2:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
34007fe6:	482d      	ldr	r0, [pc, #180]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007fe8:	f7f9 fb94 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007fec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007fee:	3b01      	subs	r3, #1
34007ff0:	2bff      	cmp	r3, #255	@ 0xff
34007ff2:	d904      	bls.n	34007ffe <HAL_RCCEx_PeriphCLKConfig+0x29a6>
34007ff4:	f240 6179 	movw	r1, #1657	@ 0x679
34007ff8:	4828      	ldr	r0, [pc, #160]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007ffa:	f7f9 fb8b 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007ffe:	4a28      	ldr	r2, [pc, #160]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34008000:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34008002:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34008006:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34008008:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400800c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008010:	3901      	subs	r1, #1
34008012:	4303      	orrs	r3, r0
34008014:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008018:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400801c:	f44f 7380 	mov.w	r3, #256	@ 0x100
34008020:	f7fe bdb8 	b.w	34006b94 <HAL_RCCEx_PeriphCLKConfig+0x153c>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34008024:	4a27      	ldr	r2, [pc, #156]	@ (340080c4 <HAL_RCCEx_PeriphCLKConfig+0x2a6c>)
34008026:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008028:	bf02      	ittt	eq
3400802a:	2240      	moveq	r2, #64	@ 0x40
3400802c:	4b1c      	ldreq	r3, [pc, #112]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
3400802e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008032:	f7fe bdb1 	b.w	34006b98 <HAL_RCCEx_PeriphCLKConfig+0x1540>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34008036:	4a24      	ldr	r2, [pc, #144]	@ (340080c8 <HAL_RCCEx_PeriphCLKConfig+0x2a70>)
34008038:	4293      	cmp	r3, r2
3400803a:	d124      	bne.n	34008086 <HAL_RCCEx_PeriphCLKConfig+0x2a2e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400803c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3400803e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008042:	d004      	beq.n	3400804e <HAL_RCCEx_PeriphCLKConfig+0x29f6>
34008044:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34008048:	4814      	ldr	r0, [pc, #80]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400804a:	f7f9 fb63 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400804e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008050:	3b01      	subs	r3, #1
34008052:	2bff      	cmp	r3, #255	@ 0xff
34008054:	d904      	bls.n	34008060 <HAL_RCCEx_PeriphCLKConfig+0x2a08>
34008056:	f240 61a6 	movw	r1, #1702	@ 0x6a6
3400805a:	4810      	ldr	r0, [pc, #64]	@ (3400809c <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3400805c:	f7f9 fb5a 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008060:	4a0f      	ldr	r2, [pc, #60]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34008062:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008064:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008068:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3400806a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400806e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008072:	3901      	subs	r1, #1
34008074:	4303      	orrs	r3, r0
34008076:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400807a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400807e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008082:	f7fe bdcf 	b.w	34006c24 <HAL_RCCEx_PeriphCLKConfig+0x15cc>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34008086:	4a11      	ldr	r2, [pc, #68]	@ (340080cc <HAL_RCCEx_PeriphCLKConfig+0x2a74>)
34008088:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400808a:	bf02      	ittt	eq
3400808c:	2240      	moveq	r2, #64	@ 0x40
3400808e:	4b04      	ldreq	r3, [pc, #16]	@ (340080a0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34008090:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008094:	f7fe bdc8 	b.w	34006c28 <HAL_RCCEx_PeriphCLKConfig+0x15d0>
34008098:	07031418 	.word	0x07031418
3400809c:	34010edd 	.word	0x34010edd
340080a0:	56028000 	.word	0x56028000
340080a4:	07011418 	.word	0x07011418
340080a8:	07031818 	.word	0x07031818
340080ac:	07011818 	.word	0x07011818
340080b0:	07030420 	.word	0x07030420
340080b4:	07010420 	.word	0x07010420
340080b8:	07030820 	.word	0x07030820
340080bc:	07010820 	.word	0x07010820
340080c0:	07030c20 	.word	0x07030c20
340080c4:	07010c20 	.word	0x07010c20
340080c8:	07031020 	.word	0x07031020
340080cc:	07011020 	.word	0x07011020
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
340080d0:	4aab      	ldr	r2, [pc, #684]	@ (34008380 <HAL_RCCEx_PeriphCLKConfig+0x2d28>)
340080d2:	4293      	cmp	r3, r2
340080d4:	d124      	bne.n	34008120 <HAL_RCCEx_PeriphCLKConfig+0x2ac8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340080d6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340080d8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340080dc:	d004      	beq.n	340080e8 <HAL_RCCEx_PeriphCLKConfig+0x2a90>
340080de:	f240 61d2 	movw	r1, #1746	@ 0x6d2
340080e2:	48a8      	ldr	r0, [pc, #672]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340080e4:	f7f9 fb16 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340080e8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340080ea:	3b01      	subs	r3, #1
340080ec:	2bff      	cmp	r3, #255	@ 0xff
340080ee:	d904      	bls.n	340080fa <HAL_RCCEx_PeriphCLKConfig+0x2aa2>
340080f0:	f240 61d3 	movw	r1, #1747	@ 0x6d3
340080f4:	48a3      	ldr	r0, [pc, #652]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340080f6:	f7f9 fb0d 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340080fa:	4aa3      	ldr	r2, [pc, #652]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340080fc:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340080fe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008102:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008104:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008108:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400810c:	3901      	subs	r1, #1
3400810e:	4303      	orrs	r3, r0
34008110:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008114:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400811c:	f7fe bdca 	b.w	34006cb4 <HAL_RCCEx_PeriphCLKConfig+0x165c>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34008120:	4a9a      	ldr	r2, [pc, #616]	@ (3400838c <HAL_RCCEx_PeriphCLKConfig+0x2d34>)
34008122:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008124:	bf02      	ittt	eq
34008126:	2240      	moveq	r2, #64	@ 0x40
34008128:	4b97      	ldreq	r3, [pc, #604]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3400812a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400812e:	f7fe bdc3 	b.w	34006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1660>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34008132:	4a97      	ldr	r2, [pc, #604]	@ (34008390 <HAL_RCCEx_PeriphCLKConfig+0x2d38>)
34008134:	4293      	cmp	r3, r2
34008136:	d124      	bne.n	34008182 <HAL_RCCEx_PeriphCLKConfig+0x2b2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34008138:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400813a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400813e:	d004      	beq.n	3400814a <HAL_RCCEx_PeriphCLKConfig+0x2af2>
34008140:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34008144:	488f      	ldr	r0, [pc, #572]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34008146:	f7f9 fae5 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400814a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400814c:	3b01      	subs	r3, #1
3400814e:	2bff      	cmp	r3, #255	@ 0xff
34008150:	d904      	bls.n	3400815c <HAL_RCCEx_PeriphCLKConfig+0x2b04>
34008152:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34008156:	488b      	ldr	r0, [pc, #556]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34008158:	f7f9 fadc 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400815c:	4a8a      	ldr	r2, [pc, #552]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3400815e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34008160:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34008164:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34008166:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400816a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400816e:	3901      	subs	r1, #1
34008170:	4303      	orrs	r3, r0
34008172:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008176:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400817a:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400817e:	f7fe bde0 	b.w	34006d42 <HAL_RCCEx_PeriphCLKConfig+0x16ea>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34008182:	4a84      	ldr	r2, [pc, #528]	@ (34008394 <HAL_RCCEx_PeriphCLKConfig+0x2d3c>)
34008184:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008186:	bf02      	ittt	eq
34008188:	2240      	moveq	r2, #64	@ 0x40
3400818a:	4b7f      	ldreq	r3, [pc, #508]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3400818c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008190:	f7fe bdd9 	b.w	34006d46 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34008194:	4a80      	ldr	r2, [pc, #512]	@ (34008398 <HAL_RCCEx_PeriphCLKConfig+0x2d40>)
34008196:	4293      	cmp	r3, r2
34008198:	d124      	bne.n	340081e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400819a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3400819c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340081a0:	d004      	beq.n	340081ac <HAL_RCCEx_PeriphCLKConfig+0x2b54>
340081a2:	f240 712c 	movw	r1, #1836	@ 0x72c
340081a6:	4877      	ldr	r0, [pc, #476]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340081a8:	f7f9 fab4 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340081ac:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340081ae:	3b01      	subs	r3, #1
340081b0:	2bff      	cmp	r3, #255	@ 0xff
340081b2:	d904      	bls.n	340081be <HAL_RCCEx_PeriphCLKConfig+0x2b66>
340081b4:	f240 712d 	movw	r1, #1837	@ 0x72d
340081b8:	4872      	ldr	r0, [pc, #456]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340081ba:	f7f9 faab 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340081be:	4a72      	ldr	r2, [pc, #456]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340081c0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340081c2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340081c6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340081c8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340081cc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340081d0:	3901      	subs	r1, #1
340081d2:	4303      	orrs	r3, r0
340081d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340081d8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340081dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340081e0:	f7fe bdf7 	b.w	34006dd2 <HAL_RCCEx_PeriphCLKConfig+0x177a>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
340081e4:	4a6d      	ldr	r2, [pc, #436]	@ (3400839c <HAL_RCCEx_PeriphCLKConfig+0x2d44>)
340081e6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340081e8:	bf02      	ittt	eq
340081ea:	2240      	moveq	r2, #64	@ 0x40
340081ec:	4b66      	ldreq	r3, [pc, #408]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340081ee:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340081f2:	f7fe bdf0 	b.w	34006dd6 <HAL_RCCEx_PeriphCLKConfig+0x177e>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
340081f6:	4a6a      	ldr	r2, [pc, #424]	@ (340083a0 <HAL_RCCEx_PeriphCLKConfig+0x2d48>)
340081f8:	4293      	cmp	r3, r2
340081fa:	d124      	bne.n	34008246 <HAL_RCCEx_PeriphCLKConfig+0x2bee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340081fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340081fe:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008202:	d004      	beq.n	3400820e <HAL_RCCEx_PeriphCLKConfig+0x2bb6>
34008204:	f240 7159 	movw	r1, #1881	@ 0x759
34008208:	485e      	ldr	r0, [pc, #376]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3400820a:	f7f9 fa83 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400820e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008210:	3b01      	subs	r3, #1
34008212:	2bff      	cmp	r3, #255	@ 0xff
34008214:	d904      	bls.n	34008220 <HAL_RCCEx_PeriphCLKConfig+0x2bc8>
34008216:	f240 715a 	movw	r1, #1882	@ 0x75a
3400821a:	485a      	ldr	r0, [pc, #360]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3400821c:	f7f9 fa7a 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008220:	4a59      	ldr	r2, [pc, #356]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008222:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008224:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008228:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3400822a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400822e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008232:	3901      	subs	r1, #1
34008234:	4303      	orrs	r3, r0
34008236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400823a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400823e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008242:	f7fe be27 	b.w	34006e94 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34008246:	4a57      	ldr	r2, [pc, #348]	@ (340083a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4c>)
34008248:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400824a:	bf02      	ittt	eq
3400824c:	2240      	moveq	r2, #64	@ 0x40
3400824e:	4b4e      	ldreq	r3, [pc, #312]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008250:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008254:	f7fe be20 	b.w	34006e98 <HAL_RCCEx_PeriphCLKConfig+0x1840>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34008258:	4a53      	ldr	r2, [pc, #332]	@ (340083a8 <HAL_RCCEx_PeriphCLKConfig+0x2d50>)
3400825a:	4293      	cmp	r3, r2
3400825c:	d124      	bne.n	340082a8 <HAL_RCCEx_PeriphCLKConfig+0x2c50>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400825e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008260:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008264:	d004      	beq.n	34008270 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
34008266:	f240 7186 	movw	r1, #1926	@ 0x786
3400826a:	4846      	ldr	r0, [pc, #280]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3400826c:	f7f9 fa52 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008270:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008272:	3b01      	subs	r3, #1
34008274:	2bff      	cmp	r3, #255	@ 0xff
34008276:	d904      	bls.n	34008282 <HAL_RCCEx_PeriphCLKConfig+0x2c2a>
34008278:	f240 7187 	movw	r1, #1927	@ 0x787
3400827c:	4841      	ldr	r0, [pc, #260]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3400827e:	f7f9 fa49 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008282:	4a41      	ldr	r2, [pc, #260]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008284:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008286:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400828a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3400828c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008290:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008294:	3901      	subs	r1, #1
34008296:	4303      	orrs	r3, r0
34008298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400829c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340082a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340082a4:	f7fe be3e 	b.w	34006f24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
340082a8:	4a40      	ldr	r2, [pc, #256]	@ (340083ac <HAL_RCCEx_PeriphCLKConfig+0x2d54>)
340082aa:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340082ac:	bf02      	ittt	eq
340082ae:	2240      	moveq	r2, #64	@ 0x40
340082b0:	4b35      	ldreq	r3, [pc, #212]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340082b2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340082b6:	f7fe be37 	b.w	34006f28 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
340082ba:	4a3d      	ldr	r2, [pc, #244]	@ (340083b0 <HAL_RCCEx_PeriphCLKConfig+0x2d58>)
340082bc:	4293      	cmp	r3, r2
340082be:	d124      	bne.n	3400830a <HAL_RCCEx_PeriphCLKConfig+0x2cb2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340082c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340082c2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340082c6:	d004      	beq.n	340082d2 <HAL_RCCEx_PeriphCLKConfig+0x2c7a>
340082c8:	f240 71b3 	movw	r1, #1971	@ 0x7b3
340082cc:	482d      	ldr	r0, [pc, #180]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340082ce:	f7f9 fa21 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340082d2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340082d4:	3b01      	subs	r3, #1
340082d6:	2bff      	cmp	r3, #255	@ 0xff
340082d8:	d904      	bls.n	340082e4 <HAL_RCCEx_PeriphCLKConfig+0x2c8c>
340082da:	f240 71b4 	movw	r1, #1972	@ 0x7b4
340082de:	4829      	ldr	r0, [pc, #164]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340082e0:	f7f9 fa18 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340082e4:	4a28      	ldr	r2, [pc, #160]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340082e6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340082e8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340082ec:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340082ee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340082f2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340082f6:	3901      	subs	r1, #1
340082f8:	4303      	orrs	r3, r0
340082fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340082fe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008302:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008306:	f7fe be55 	b.w	34006fb4 <HAL_RCCEx_PeriphCLKConfig+0x195c>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
3400830a:	4a2a      	ldr	r2, [pc, #168]	@ (340083b4 <HAL_RCCEx_PeriphCLKConfig+0x2d5c>)
3400830c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400830e:	bf02      	ittt	eq
34008310:	2240      	moveq	r2, #64	@ 0x40
34008312:	4b1d      	ldreq	r3, [pc, #116]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008314:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008318:	f7fe be4e 	b.w	34006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1960>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
3400831c:	4a26      	ldr	r2, [pc, #152]	@ (340083b8 <HAL_RCCEx_PeriphCLKConfig+0x2d60>)
3400831e:	4293      	cmp	r3, r2
34008320:	d124      	bne.n	3400836c <HAL_RCCEx_PeriphCLKConfig+0x2d14>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008322:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008324:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008328:	d004      	beq.n	34008334 <HAL_RCCEx_PeriphCLKConfig+0x2cdc>
3400832a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
3400832e:	4815      	ldr	r0, [pc, #84]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34008330:	f7f9 f9f0 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008334:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008336:	3b01      	subs	r3, #1
34008338:	2bff      	cmp	r3, #255	@ 0xff
3400833a:	d904      	bls.n	34008346 <HAL_RCCEx_PeriphCLKConfig+0x2cee>
3400833c:	f240 71e1 	movw	r1, #2017	@ 0x7e1
34008340:	4810      	ldr	r0, [pc, #64]	@ (34008384 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34008342:	f7f9 f9e7 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008346:	4a10      	ldr	r2, [pc, #64]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008348:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400834a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400834e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008350:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008354:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008358:	3901      	subs	r1, #1
3400835a:	4303      	orrs	r3, r0
3400835c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008360:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008364:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008368:	f7fe be6c 	b.w	34007044 <HAL_RCCEx_PeriphCLKConfig+0x19ec>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
3400836c:	4a13      	ldr	r2, [pc, #76]	@ (340083bc <HAL_RCCEx_PeriphCLKConfig+0x2d64>)
3400836e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008370:	bf02      	ittt	eq
34008372:	2240      	moveq	r2, #64	@ 0x40
34008374:	4b04      	ldreq	r3, [pc, #16]	@ (34008388 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34008376:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400837a:	f7fe be65 	b.w	34007048 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
3400837e:	bf00      	nop
34008380:	07031420 	.word	0x07031420
34008384:	34010edd 	.word	0x34010edd
34008388:	56028000 	.word	0x56028000
3400838c:	07011420 	.word	0x07011420
34008390:	07031820 	.word	0x07031820
34008394:	07011820 	.word	0x07011820
34008398:	07030030 	.word	0x07030030
3400839c:	07010030 	.word	0x07010030
340083a0:	07030430 	.word	0x07030430
340083a4:	07010430 	.word	0x07010430
340083a8:	07030830 	.word	0x07030830
340083ac:	07010830 	.word	0x07010830
340083b0:	07030c30 	.word	0x07030c30
340083b4:	07010c30 	.word	0x07010c30
340083b8:	07031030 	.word	0x07031030
340083bc:	07011030 	.word	0x07011030
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
340083c0:	4a8b      	ldr	r2, [pc, #556]	@ (340085f0 <HAL_RCCEx_PeriphCLKConfig+0x2f98>)
340083c2:	4293      	cmp	r3, r2
340083c4:	d124      	bne.n	34008410 <HAL_RCCEx_PeriphCLKConfig+0x2db8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340083c6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340083c8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340083cc:	d004      	beq.n	340083d8 <HAL_RCCEx_PeriphCLKConfig+0x2d80>
340083ce:	f640 010d 	movw	r1, #2061	@ 0x80d
340083d2:	4888      	ldr	r0, [pc, #544]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340083d4:	f7f9 f99e 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340083d8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340083da:	3b01      	subs	r3, #1
340083dc:	2bff      	cmp	r3, #255	@ 0xff
340083de:	d904      	bls.n	340083ea <HAL_RCCEx_PeriphCLKConfig+0x2d92>
340083e0:	f640 010e 	movw	r1, #2062	@ 0x80e
340083e4:	4883      	ldr	r0, [pc, #524]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340083e6:	f7f9 f995 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340083ea:	4a83      	ldr	r2, [pc, #524]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340083ec:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340083ee:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340083f2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340083f4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340083f8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340083fc:	3901      	subs	r1, #1
340083fe:	4303      	orrs	r3, r0
34008400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008404:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008408:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400840c:	f7fe be62 	b.w	340070d4 <HAL_RCCEx_PeriphCLKConfig+0x1a7c>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34008410:	4a7a      	ldr	r2, [pc, #488]	@ (340085fc <HAL_RCCEx_PeriphCLKConfig+0x2fa4>)
34008412:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008414:	bf02      	ittt	eq
34008416:	2240      	moveq	r2, #64	@ 0x40
34008418:	4b77      	ldreq	r3, [pc, #476]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400841a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400841e:	f7fe be5b 	b.w	340070d8 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34008422:	4a77      	ldr	r2, [pc, #476]	@ (34008600 <HAL_RCCEx_PeriphCLKConfig+0x2fa8>)
34008424:	4293      	cmp	r3, r2
34008426:	d124      	bne.n	34008472 <HAL_RCCEx_PeriphCLKConfig+0x2e1a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008428:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3400842a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400842e:	d004      	beq.n	3400843a <HAL_RCCEx_PeriphCLKConfig+0x2de2>
34008430:	f640 013a 	movw	r1, #2106	@ 0x83a
34008434:	486f      	ldr	r0, [pc, #444]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008436:	f7f9 f96d 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400843a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3400843c:	3b01      	subs	r3, #1
3400843e:	2bff      	cmp	r3, #255	@ 0xff
34008440:	d904      	bls.n	3400844c <HAL_RCCEx_PeriphCLKConfig+0x2df4>
34008442:	f640 013b 	movw	r1, #2107	@ 0x83b
34008446:	486b      	ldr	r0, [pc, #428]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008448:	f7f9 f964 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400844c:	4a6a      	ldr	r2, [pc, #424]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400844e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008450:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008454:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008456:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400845a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400845e:	3901      	subs	r1, #1
34008460:	4303      	orrs	r3, r0
34008462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008466:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400846a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400846e:	f7fe be79 	b.w	34007164 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34008472:	4a64      	ldr	r2, [pc, #400]	@ (34008604 <HAL_RCCEx_PeriphCLKConfig+0x2fac>)
34008474:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008476:	bf02      	ittt	eq
34008478:	2240      	moveq	r2, #64	@ 0x40
3400847a:	4b5f      	ldreq	r3, [pc, #380]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400847c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008480:	f7fe be72 	b.w	34007168 <HAL_RCCEx_PeriphCLKConfig+0x1b10>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34008484:	4a60      	ldr	r2, [pc, #384]	@ (34008608 <HAL_RCCEx_PeriphCLKConfig+0x2fb0>)
34008486:	4293      	cmp	r3, r2
34008488:	d124      	bne.n	340084d4 <HAL_RCCEx_PeriphCLKConfig+0x2e7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400848a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3400848c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008490:	d004      	beq.n	3400849c <HAL_RCCEx_PeriphCLKConfig+0x2e44>
34008492:	f640 0167 	movw	r1, #2151	@ 0x867
34008496:	4857      	ldr	r0, [pc, #348]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008498:	f7f9 f93c 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400849c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3400849e:	3b01      	subs	r3, #1
340084a0:	2bff      	cmp	r3, #255	@ 0xff
340084a2:	d904      	bls.n	340084ae <HAL_RCCEx_PeriphCLKConfig+0x2e56>
340084a4:	f640 0168 	movw	r1, #2152	@ 0x868
340084a8:	4852      	ldr	r0, [pc, #328]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340084aa:	f7f9 f933 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340084ae:	4a52      	ldr	r2, [pc, #328]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340084b0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340084b2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340084b6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340084b8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340084bc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340084c0:	3901      	subs	r1, #1
340084c2:	4303      	orrs	r3, r0
340084c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340084c8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340084cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340084d0:	f7fe beac 	b.w	3400722c <HAL_RCCEx_PeriphCLKConfig+0x1bd4>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
340084d4:	4a4d      	ldr	r2, [pc, #308]	@ (3400860c <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
340084d6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340084d8:	bf02      	ittt	eq
340084da:	2240      	moveq	r2, #64	@ 0x40
340084dc:	4b46      	ldreq	r3, [pc, #280]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340084de:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340084e2:	f7fe bea5 	b.w	34007230 <HAL_RCCEx_PeriphCLKConfig+0x1bd8>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
340084e6:	4a4a      	ldr	r2, [pc, #296]	@ (34008610 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
340084e8:	4293      	cmp	r3, r2
340084ea:	d124      	bne.n	34008536 <HAL_RCCEx_PeriphCLKConfig+0x2ede>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340084ec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340084ee:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340084f2:	d004      	beq.n	340084fe <HAL_RCCEx_PeriphCLKConfig+0x2ea6>
340084f4:	f640 0194 	movw	r1, #2196	@ 0x894
340084f8:	483e      	ldr	r0, [pc, #248]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340084fa:	f7f9 f90b 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340084fe:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008500:	3b01      	subs	r3, #1
34008502:	2bff      	cmp	r3, #255	@ 0xff
34008504:	d904      	bls.n	34008510 <HAL_RCCEx_PeriphCLKConfig+0x2eb8>
34008506:	f640 0195 	movw	r1, #2197	@ 0x895
3400850a:	483a      	ldr	r0, [pc, #232]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3400850c:	f7f9 f902 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008510:	4a39      	ldr	r2, [pc, #228]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008512:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008514:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008518:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3400851a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400851e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008522:	3901      	subs	r1, #1
34008524:	4303      	orrs	r3, r0
34008526:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400852a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400852e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008532:	f7fe bec3 	b.w	340072bc <HAL_RCCEx_PeriphCLKConfig+0x1c64>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34008536:	4a37      	ldr	r2, [pc, #220]	@ (34008614 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
34008538:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400853a:	bf02      	ittt	eq
3400853c:	2240      	moveq	r2, #64	@ 0x40
3400853e:	4b2e      	ldreq	r3, [pc, #184]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008540:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008544:	f7fe bebc 	b.w	340072c0 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34008548:	4a33      	ldr	r2, [pc, #204]	@ (34008618 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400854a:	4293      	cmp	r3, r2
3400854c:	d124      	bne.n	34008598 <HAL_RCCEx_PeriphCLKConfig+0x2f40>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400854e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008550:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008554:	d004      	beq.n	34008560 <HAL_RCCEx_PeriphCLKConfig+0x2f08>
34008556:	f640 01c1 	movw	r1, #2241	@ 0x8c1
3400855a:	4826      	ldr	r0, [pc, #152]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3400855c:	f7f9 f8da 	bl	34001714 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008560:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008562:	3b01      	subs	r3, #1
34008564:	2bff      	cmp	r3, #255	@ 0xff
34008566:	d904      	bls.n	34008572 <HAL_RCCEx_PeriphCLKConfig+0x2f1a>
34008568:	f640 01c2 	movw	r1, #2242	@ 0x8c2
3400856c:	4821      	ldr	r0, [pc, #132]	@ (340085f4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3400856e:	f7f9 f8d1 	bl	34001714 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008572:	4a21      	ldr	r2, [pc, #132]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008574:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008576:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400857a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3400857c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008580:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008584:	3901      	subs	r1, #1
34008586:	4303      	orrs	r3, r0
34008588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400858c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008594:	f7fe beda 	b.w	3400734c <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34008598:	4a20      	ldr	r2, [pc, #128]	@ (3400861c <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400859a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400859c:	bf02      	ittt	eq
3400859e:	2240      	moveq	r2, #64	@ 0x40
340085a0:	4b15      	ldreq	r3, [pc, #84]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340085a2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340085a6:	f7fe bed3 	b.w	34007350 <HAL_RCCEx_PeriphCLKConfig+0x1cf8>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
340085aa:	f7fc ff39 	bl	34005420 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340085ae:	f7fe bef5 	b.w	3400739c <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
340085b2:	f7fc ff35 	bl	34005420 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340085b6:	f7fe bf13 	b.w	340073e0 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
340085ba:	4a19      	ldr	r2, [pc, #100]	@ (34008620 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
340085bc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340085be:	bf02      	ittt	eq
340085c0:	2240      	moveq	r2, #64	@ 0x40
340085c2:	4b0d      	ldreq	r3, [pc, #52]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340085c4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340085c8:	f7fe bf4a 	b.w	34007460 <HAL_RCCEx_PeriphCLKConfig+0x1e08>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
340085cc:	f7fc ff28 	bl	34005420 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340085d0:	f7fe bf53 	b.w	3400747a <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
340085d4:	4a13      	ldr	r2, [pc, #76]	@ (34008624 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
340085d6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340085d8:	bf02      	ittt	eq
340085da:	2240      	moveq	r2, #64	@ 0x40
340085dc:	4b06      	ldreq	r3, [pc, #24]	@ (340085f8 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340085de:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340085e2:	f7fe bfa5 	b.w	34007530 <HAL_RCCEx_PeriphCLKConfig+0x1ed8>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340085e6:	f7fc ff1b 	bl	34005420 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340085ea:	f7fe bfae 	b.w	3400754a <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
340085ee:	bf00      	nop
340085f0:	07031430 	.word	0x07031430
340085f4:	34010edd 	.word	0x34010edd
340085f8:	56028000 	.word	0x56028000
340085fc:	07011430 	.word	0x07011430
34008600:	07031830 	.word	0x07031830
34008604:	07011830 	.word	0x07011830
34008608:	07031c30 	.word	0x07031c30
3400860c:	07011c30 	.word	0x07011c30
34008610:	07030034 	.word	0x07030034
34008614:	07010034 	.word	0x07010034
34008618:	07030434 	.word	0x07030434
3400861c:	07010434 	.word	0x07010434
34008620:	03010c14 	.word	0x03010c14
34008624:	03011414 	.word	0x03011414

34008628 <HAL_RCCEx_GetPLL1CLKFreq>:
{
34008628:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3400862a:	4c1e      	ldr	r4, [pc, #120]	@ (340086a4 <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
3400862c:	6863      	ldr	r3, [r4, #4]
3400862e:	05d9      	lsls	r1, r3, #23
34008630:	d506      	bpl.n	34008640 <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34008632:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34008636:	005a      	lsls	r2, r3, #1
34008638:	d40f      	bmi.n	3400865a <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3400863a:	2000      	movs	r0, #0
}
3400863c:	b003      	add	sp, #12
3400863e:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34008640:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34008644:	011b      	lsls	r3, r3, #4
34008646:	d5f8      	bpl.n	3400863a <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34008648:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3400864c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34008650:	b003      	add	sp, #12
34008652:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34008656:	f7fc bf9d 	b.w	34005594 <RCCEx_GetPLLSourceFreq>
3400865a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3400865e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34008662:	f7fc ff97 	bl	34005594 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34008666:	2800      	cmp	r0, #0
34008668:	d0e7      	beq.n	3400863a <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3400866a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
3400866e:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34008672:	f3c3 5105 	ubfx	r1, r3, #20, #6
34008676:	d0e0      	beq.n	3400863a <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34008678:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
3400867c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008680:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008684:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008688:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3400868c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34008690:	9401      	str	r4, [sp, #4]
34008692:	9500      	str	r5, [sp, #0]
34008694:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008698:	f3c2 220b 	ubfx	r2, r2, #8, #12
3400869c:	f7fc ffb0 	bl	34005600 <RCCEx_CalcPLLFreq>
340086a0:	e7cc      	b.n	3400863c <HAL_RCCEx_GetPLL1CLKFreq+0x14>
340086a2:	bf00      	nop
340086a4:	56028000 	.word	0x56028000

340086a8 <HAL_RCCEx_GetPLL2CLKFreq>:
{
340086a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340086aa:	4c1e      	ldr	r4, [pc, #120]	@ (34008724 <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
340086ac:	6863      	ldr	r3, [r4, #4]
340086ae:	0599      	lsls	r1, r3, #22
340086b0:	d506      	bpl.n	340086c0 <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
340086b2:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
340086b6:	005a      	lsls	r2, r3, #1
340086b8:	d40f      	bmi.n	340086da <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340086ba:	2000      	movs	r0, #0
}
340086bc:	b003      	add	sp, #12
340086be:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340086c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
340086c4:	011b      	lsls	r3, r3, #4
340086c6:	d5f8      	bpl.n	340086ba <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340086c8:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340086cc:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340086d0:	b003      	add	sp, #12
340086d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340086d6:	f7fc bf5d 	b.w	34005594 <RCCEx_GetPLLSourceFreq>
340086da:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340086de:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340086e2:	f7fc ff57 	bl	34005594 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340086e6:	2800      	cmp	r0, #0
340086e8:	d0e7      	beq.n	340086ba <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
340086ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
340086ee:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340086f2:	f3c3 5105 	ubfx	r1, r3, #20, #6
340086f6:	d0e0      	beq.n	340086ba <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
340086f8:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
340086fc:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34008700:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34008704:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34008708:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
3400870c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34008710:	9401      	str	r4, [sp, #4]
34008712:	9500      	str	r5, [sp, #0]
34008714:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008718:	f3c2 220b 	ubfx	r2, r2, #8, #12
3400871c:	f7fc ff70 	bl	34005600 <RCCEx_CalcPLLFreq>
34008720:	e7cc      	b.n	340086bc <HAL_RCCEx_GetPLL2CLKFreq+0x14>
34008722:	bf00      	nop
34008724:	56028000 	.word	0x56028000

34008728 <HAL_RCCEx_GetPLL3CLKFreq>:
{
34008728:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3400872a:	4c1e      	ldr	r4, [pc, #120]	@ (340087a4 <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
3400872c:	6863      	ldr	r3, [r4, #4]
3400872e:	0559      	lsls	r1, r3, #21
34008730:	d506      	bpl.n	34008740 <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34008732:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34008736:	005a      	lsls	r2, r3, #1
34008738:	d40f      	bmi.n	3400875a <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3400873a:	2000      	movs	r0, #0
}
3400873c:	b003      	add	sp, #12
3400873e:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34008740:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34008744:	011b      	lsls	r3, r3, #4
34008746:	d5f8      	bpl.n	3400873a <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34008748:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3400874c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34008750:	b003      	add	sp, #12
34008752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34008756:	f7fc bf1d 	b.w	34005594 <RCCEx_GetPLLSourceFreq>
3400875a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3400875e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34008762:	f7fc ff17 	bl	34005594 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34008766:	2800      	cmp	r0, #0
34008768:	d0e7      	beq.n	3400873a <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3400876a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
3400876e:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34008772:	f3c3 5105 	ubfx	r1, r3, #20, #6
34008776:	d0e0      	beq.n	3400873a <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34008778:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3400877c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008780:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34008784:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008788:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3400878c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34008790:	9401      	str	r4, [sp, #4]
34008792:	9500      	str	r5, [sp, #0]
34008794:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008798:	f3c2 220b 	ubfx	r2, r2, #8, #12
3400879c:	f7fc ff30 	bl	34005600 <RCCEx_CalcPLLFreq>
340087a0:	e7cc      	b.n	3400873c <HAL_RCCEx_GetPLL3CLKFreq+0x14>
340087a2:	bf00      	nop
340087a4:	56028000 	.word	0x56028000

340087a8 <HAL_RCCEx_GetPLL4CLKFreq>:
{
340087a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340087aa:	4c1e      	ldr	r4, [pc, #120]	@ (34008824 <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
340087ac:	6863      	ldr	r3, [r4, #4]
340087ae:	0519      	lsls	r1, r3, #20
340087b0:	d506      	bpl.n	340087c0 <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
340087b2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
340087b6:	005a      	lsls	r2, r3, #1
340087b8:	d40f      	bmi.n	340087da <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340087ba:	2000      	movs	r0, #0
}
340087bc:	b003      	add	sp, #12
340087be:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340087c0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340087c4:	011b      	lsls	r3, r3, #4
340087c6:	d5f8      	bpl.n	340087ba <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
340087c8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340087cc:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340087d0:	b003      	add	sp, #12
340087d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340087d6:	f7fc bedd 	b.w	34005594 <RCCEx_GetPLLSourceFreq>
340087da:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340087de:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340087e2:	f7fc fed7 	bl	34005594 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340087e6:	2800      	cmp	r0, #0
340087e8:	d0e7      	beq.n	340087ba <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
340087ea:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
340087ee:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340087f2:	f3c3 5105 	ubfx	r1, r3, #20, #6
340087f6:	d0e0      	beq.n	340087ba <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
340087f8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
340087fc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34008800:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34008804:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34008808:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
3400880c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34008810:	9401      	str	r4, [sp, #4]
34008812:	9500      	str	r5, [sp, #0]
34008814:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008818:	f3c2 220b 	ubfx	r2, r2, #8, #12
3400881c:	f7fc fef0 	bl	34005600 <RCCEx_CalcPLLFreq>
34008820:	e7cc      	b.n	340087bc <HAL_RCCEx_GetPLL4CLKFreq+0x14>
34008822:	bf00      	nop
34008824:	56028000 	.word	0x56028000

34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34008828:	4b3e      	ldr	r3, [pc, #248]	@ (34008924 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
3400882a:	b510      	push	{r4, lr}
3400882c:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
34008830:	0652      	lsls	r2, r2, #25
34008832:	d56b      	bpl.n	3400890c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34008834:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34008838:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
3400883c:	3a01      	subs	r2, #1
3400883e:	2a06      	cmp	r2, #6
34008840:	d805      	bhi.n	3400884e <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
34008842:	e8df f002 	tbb	[pc, r2]
34008846:	150f      	.short	0x150f
34008848:	3e321b48 	.word	0x3e321b48
3400884c:	54          	.byte	0x54
3400884d:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
3400884e:	f7fc fe07 	bl	34005460 <LL_RCC_HSI_IsReady>
34008852:	2800      	cmp	r0, #0
34008854:	d05a      	beq.n	3400890c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008856:	4b33      	ldr	r3, [pc, #204]	@ (34008924 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008858:	4833      	ldr	r0, [pc, #204]	@ (34008928 <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
3400885a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400885c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008860:	40d8      	lsrs	r0, r3
34008862:	e054      	b.n	3400890e <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34008864:	f7fc fe04 	bl	34005470 <LL_RCC_MSI_IsReady>
34008868:	2800      	cmp	r0, #0
3400886a:	d04f      	beq.n	3400890c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = MSI_VALUE;
3400886c:	482f      	ldr	r0, [pc, #188]	@ (3400892c <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
3400886e:	e04e      	b.n	3400890e <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34008870:	f7fc fdee 	bl	34005450 <LL_RCC_HSE_IsReady>
34008874:	2800      	cmp	r0, #0
34008876:	d049      	beq.n	3400890c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = HSE_VALUE;
34008878:	482d      	ldr	r0, [pc, #180]	@ (34008930 <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
3400887a:	e048      	b.n	3400890e <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3400887c:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008880:	06d4      	lsls	r4, r2, #27
34008882:	d543      	bpl.n	3400890c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008884:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34008888:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3400888c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008890:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008892:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          switch (LL_RCC_IC20_GetSource())
34008896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400889a:	d03c      	beq.n	34008916 <RCCEx_GetCLKPCLKFreq.constprop.0+0xee>
3400889c:	d833      	bhi.n	34008906 <RCCEx_GetCLKPCLKFreq.constprop.0+0xde>
3400889e:	bbbb      	cbnz	r3, 34008910 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe8>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340088a0:	f7ff fec2 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
340088a4:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
340088a8:	e031      	b.n	3400890e <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340088aa:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340088ae:	0590      	lsls	r0, r2, #22
340088b0:	d52c      	bpl.n	3400890c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340088b2:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340088b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340088ba:	f3c0 4007 	ubfx	r0, r0, #16, #8
340088be:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340088c0:	e7e7      	b.n	34008892 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
        if (LL_RCC_IC15_IsEnabled() != 0U)
340088c2:	f7fc fe4d 	bl	34005560 <LL_RCC_IC15_IsEnabled>
340088c6:	b308      	cbz	r0, 3400890c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
          ic_divider = LL_RCC_IC15_GetDivider();
340088c8:	f7fc fe52 	bl	34005570 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340088cc:	4b15      	ldr	r3, [pc, #84]	@ (34008924 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
340088ce:	4604      	mov	r4, r0
340088d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340088d4:	e7dd      	b.n	34008892 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
340088d6:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340088da:	0351      	lsls	r1, r2, #13
340088dc:	d516      	bpl.n	3400890c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340088de:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340088e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340088e6:	f3c0 4007 	ubfx	r0, r0, #16, #8
340088ea:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340088ec:	e7d1      	b.n	34008892 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
340088ee:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340088f2:	0312      	lsls	r2, r2, #12
340088f4:	d50a      	bpl.n	3400890c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340088f6:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340088fa:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340088fe:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008902:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008904:	e7c5      	b.n	34008892 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
          switch (LL_RCC_IC20_GetSource())
34008906:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400890a:	d007      	beq.n	3400891c <RCCEx_GetCLKPCLKFreq.constprop.0+0xf4>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3400890c:	2000      	movs	r0, #0
}
3400890e:	bd10      	pop	{r4, pc}
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008910:	f7ff feca 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
34008914:	e7c6      	b.n	340088a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008916:	f7ff ff07 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
3400891a:	e7c3      	b.n	340088a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400891c:	f7ff ff44 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34008920:	e7c0      	b.n	340088a4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
34008922:	bf00      	nop
34008924:	56028000 	.word	0x56028000
34008928:	03d09000 	.word	0x03d09000
3400892c:	003d0900 	.word	0x003d0900
34008930:	02dc6c00 	.word	0x02dc6c00

34008934 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
34008934:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34008936:	4d2b      	ldr	r5, [pc, #172]	@ (340089e4 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb0>)
34008938:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
3400893c:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34008940:	2b06      	cmp	r3, #6
34008942:	d835      	bhi.n	340089b0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
34008944:	e8df f003 	tbb	[pc, r3]
34008948:	28110d04 	.word	0x28110d04
3400894c:	3c45      	.short	0x3c45
3400894e:	4b          	.byte	0x4b
3400894f:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008950:	f7fc fd10 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34008954:	f7fc fe16 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008958:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3400895a:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400895e:	40d8      	lsrs	r0, r3
34008960:	e027      	b.n	340089b2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
34008962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008966:	f7ff bf5f 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3400896a:	f7fc fdb1 	bl	340054d0 <LL_RCC_IC7_IsEnabled>
3400896e:	b1f8      	cbz	r0, 340089b0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC7_GetDivider();
34008970:	f7fc fdb6 	bl	340054e0 <LL_RCC_IC7_GetDivider>
34008974:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008976:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3400897a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
3400897e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008982:	d017      	beq.n	340089b4 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x80>
34008984:	d811      	bhi.n	340089aa <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x76>
34008986:	b913      	cbnz	r3, 3400898e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008988:	f7ff fe4e 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
3400898c:	e001      	b.n	34008992 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400898e:	f7ff fe8b 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008992:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008996:	e00c      	b.n	340089b2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008998:	f7fc fdac 	bl	340054f4 <LL_RCC_IC8_IsEnabled>
3400899c:	b140      	cbz	r0, 340089b0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC8_GetDivider();
3400899e:	f7fc fdb1 	bl	34005504 <LL_RCC_IC8_GetDivider>
340089a2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
340089a6:	4604      	mov	r4, r0
340089a8:	e7e7      	b.n	3400897a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
        switch (LL_RCC_IC8_GetSource())
340089aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340089ae:	d004      	beq.n	340089ba <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x86>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
340089b0:	2000      	movs	r0, #0
}
340089b2:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340089b4:	f7ff feb8 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
340089b8:	e7eb      	b.n	34008992 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340089ba:	f7ff fef5 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
340089be:	e7e8      	b.n	34008992 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
      if (LL_RCC_HSI_IsReady() != 0U)
340089c0:	f7fc fd4e 	bl	34005460 <LL_RCC_HSI_IsReady>
340089c4:	2800      	cmp	r0, #0
340089c6:	d0f3      	beq.n	340089b0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340089c8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340089ca:	4807      	ldr	r0, [pc, #28]	@ (340089e8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb4>)
340089cc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340089d0:	e7c5      	b.n	3400895e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
340089d2:	f7fc fd4d 	bl	34005470 <LL_RCC_MSI_IsReady>
340089d6:	2800      	cmp	r0, #0
340089d8:	d0ea      	beq.n	340089b0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        spdifrx_frequency = MSI_VALUE;
340089da:	4804      	ldr	r0, [pc, #16]	@ (340089ec <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
340089dc:	e7e9      	b.n	340089b2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
340089de:	4804      	ldr	r0, [pc, #16]	@ (340089f0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
  return spdifrx_frequency;
340089e0:	e7e7      	b.n	340089b2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
340089e2:	bf00      	nop
340089e4:	56028000 	.word	0x56028000
340089e8:	03d09000 	.word	0x03d09000
340089ec:	003d0900 	.word	0x003d0900
340089f0:	00bb8000 	.word	0x00bb8000

340089f4 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
340089f4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340089f6:	f7fc fd5d 	bl	340054b4 <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340089fa:	4b36      	ldr	r3, [pc, #216]	@ (34008ad4 <RCCEx_GetXSPICLKFreq+0xe0>)
340089fc:	4298      	cmp	r0, r3
340089fe:	d028      	beq.n	34008a52 <RCCEx_GetXSPICLKFreq+0x5e>
34008a00:	d81b      	bhi.n	34008a3a <RCCEx_GetXSPICLKFreq+0x46>
34008a02:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008a06:	4298      	cmp	r0, r3
34008a08:	d013      	beq.n	34008a32 <RCCEx_GetXSPICLKFreq+0x3e>
34008a0a:	d80b      	bhi.n	34008a24 <RCCEx_GetXSPICLKFreq+0x30>
34008a0c:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34008a10:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008a14:	429a      	cmp	r2, r3
34008a16:	d04a      	beq.n	34008aae <RCCEx_GetXSPICLKFreq+0xba>
34008a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008a1c:	4298      	cmp	r0, r3
34008a1e:	d046      	beq.n	34008aae <RCCEx_GetXSPICLKFreq+0xba>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34008a20:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
34008a22:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008a24:	4b2c      	ldr	r3, [pc, #176]	@ (34008ad8 <RCCEx_GetXSPICLKFreq+0xe4>)
34008a26:	4298      	cmp	r0, r3
34008a28:	d003      	beq.n	34008a32 <RCCEx_GetXSPICLKFreq+0x3e>
34008a2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008a2e:	4298      	cmp	r0, r3
34008a30:	d1f6      	bne.n	34008a20 <RCCEx_GetXSPICLKFreq+0x2c>
}
34008a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008a36:	f7ff bef7 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008a3a:	4b28      	ldr	r3, [pc, #160]	@ (34008adc <RCCEx_GetXSPICLKFreq+0xe8>)
34008a3c:	4298      	cmp	r0, r3
34008a3e:	d028      	beq.n	34008a92 <RCCEx_GetXSPICLKFreq+0x9e>
34008a40:	d820      	bhi.n	34008a84 <RCCEx_GetXSPICLKFreq+0x90>
34008a42:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34008a46:	4298      	cmp	r0, r3
34008a48:	d003      	beq.n	34008a52 <RCCEx_GetXSPICLKFreq+0x5e>
34008a4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008a4e:	4298      	cmp	r0, r3
34008a50:	d1e6      	bne.n	34008a20 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34008a52:	4b23      	ldr	r3, [pc, #140]	@ (34008ae0 <RCCEx_GetXSPICLKFreq+0xec>)
34008a54:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34008a58:	f010 0004 	ands.w	r0, r0, #4
34008a5c:	d0e1      	beq.n	34008a22 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34008a5e:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34008a62:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34008a66:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008a6a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008a6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC4_GetSource())
34008a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008a74:	d02a      	beq.n	34008acc <RCCEx_GetXSPICLKFreq+0xd8>
34008a76:	d820      	bhi.n	34008aba <RCCEx_GetXSPICLKFreq+0xc6>
34008a78:	bb2b      	cbnz	r3, 34008ac6 <RCCEx_GetXSPICLKFreq+0xd2>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008a7a:	f7ff fdd5 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
34008a7e:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
34008a82:	e7ce      	b.n	34008a22 <RCCEx_GetXSPICLKFreq+0x2e>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008a84:	4b17      	ldr	r3, [pc, #92]	@ (34008ae4 <RCCEx_GetXSPICLKFreq+0xf0>)
34008a86:	4298      	cmp	r0, r3
34008a88:	d003      	beq.n	34008a92 <RCCEx_GetXSPICLKFreq+0x9e>
34008a8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008a8e:	4298      	cmp	r0, r3
34008a90:	d1c6      	bne.n	34008a20 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34008a92:	4b13      	ldr	r3, [pc, #76]	@ (34008ae0 <RCCEx_GetXSPICLKFreq+0xec>)
34008a94:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34008a98:	f010 0008 	ands.w	r0, r0, #8
34008a9c:	d0c1      	beq.n	34008a22 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34008a9e:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008aa2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34008aa6:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008aaa:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008aac:	e7de      	b.n	34008a6c <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008aae:	f7fc fc61 	bl	34005374 <HAL_RCC_GetSysClockFreq>
}
34008ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008ab6:	f7fc bd65 	b.w	34005584 <RCCEx_GetHCLKFreq>
        switch (LL_RCC_IC4_GetSource())
34008aba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008abe:	d1af      	bne.n	34008a20 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008ac0:	f7ff fe72 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34008ac4:	e7db      	b.n	34008a7e <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008ac6:	f7ff fdef 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
34008aca:	e7d8      	b.n	34008a7e <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008acc:	f7ff fe2c 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
34008ad0:	e7d5      	b.n	34008a7e <RCCEx_GetXSPICLKFreq+0x8a>
34008ad2:	bf00      	nop
34008ad4:	03020014 	.word	0x03020014
34008ad8:	03010414 	.word	0x03010414
34008adc:	03030014 	.word	0x03030014
34008ae0:	56028000 	.word	0x56028000
34008ae4:	03030414 	.word	0x03030414

34008ae8 <RCCEx_GetOTGPHYCLKFreq>:
{
34008ae8:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008aea:	f7fc fce3 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34008aee:	4b2b      	ldr	r3, [pc, #172]	@ (34008b9c <RCCEx_GetOTGPHYCLKFreq+0xb4>)
34008af0:	4298      	cmp	r0, r3
34008af2:	d021      	beq.n	34008b38 <RCCEx_GetOTGPHYCLKFreq+0x50>
34008af4:	d815      	bhi.n	34008b22 <RCCEx_GetOTGPHYCLKFreq+0x3a>
34008af6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008afa:	4298      	cmp	r0, r3
34008afc:	d00d      	beq.n	34008b1a <RCCEx_GetOTGPHYCLKFreq+0x32>
34008afe:	d809      	bhi.n	34008b14 <RCCEx_GetOTGPHYCLKFreq+0x2c>
34008b00:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008b04:	4298      	cmp	r0, r3
34008b06:	d02d      	beq.n	34008b64 <RCCEx_GetOTGPHYCLKFreq+0x7c>
34008b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008b0c:	4298      	cmp	r0, r3
34008b0e:	d029      	beq.n	34008b64 <RCCEx_GetOTGPHYCLKFreq+0x7c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34008b10:	2000      	movs	r0, #0
}
34008b12:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34008b14:	4b22      	ldr	r3, [pc, #136]	@ (34008ba0 <RCCEx_GetOTGPHYCLKFreq+0xb8>)
34008b16:	4298      	cmp	r0, r3
34008b18:	d1fa      	bne.n	34008b10 <RCCEx_GetOTGPHYCLKFreq+0x28>
}
34008b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008b1e:	f7ff be83 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34008b22:	4b20      	ldr	r3, [pc, #128]	@ (34008ba4 <RCCEx_GetOTGPHYCLKFreq+0xbc>)
34008b24:	4298      	cmp	r0, r3
34008b26:	d023      	beq.n	34008b70 <RCCEx_GetOTGPHYCLKFreq+0x88>
34008b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008b2c:	4298      	cmp	r0, r3
34008b2e:	d01f      	beq.n	34008b70 <RCCEx_GetOTGPHYCLKFreq+0x88>
34008b30:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008b34:	4298      	cmp	r0, r3
34008b36:	d1eb      	bne.n	34008b10 <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34008b38:	f7fc fd12 	bl	34005560 <LL_RCC_IC15_IsEnabled>
34008b3c:	2800      	cmp	r0, #0
34008b3e:	d0e7      	beq.n	34008b10 <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34008b40:	f7fc fd16 	bl	34005570 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008b44:	4b18      	ldr	r3, [pc, #96]	@ (34008ba8 <RCCEx_GetOTGPHYCLKFreq+0xc0>)
34008b46:	4604      	mov	r4, r0
34008b48:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34008b4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34008b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008b54:	d01f      	beq.n	34008b96 <RCCEx_GetOTGPHYCLKFreq+0xae>
34008b56:	d815      	bhi.n	34008b84 <RCCEx_GetOTGPHYCLKFreq+0x9c>
34008b58:	b9d3      	cbnz	r3, 34008b90 <RCCEx_GetOTGPHYCLKFreq+0xa8>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008b5a:	f7ff fd65 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
34008b5e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008b62:	e7d6      	b.n	34008b12 <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34008b64:	f7fc fc74 	bl	34005450 <LL_RCC_HSE_IsReady>
34008b68:	2800      	cmp	r0, #0
34008b6a:	d0d1      	beq.n	34008b10 <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
34008b6c:	480f      	ldr	r0, [pc, #60]	@ (34008bac <RCCEx_GetOTGPHYCLKFreq+0xc4>)
34008b6e:	e7d0      	b.n	34008b12 <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34008b70:	f7fc fc6e 	bl	34005450 <LL_RCC_HSE_IsReady>
34008b74:	2800      	cmp	r0, #0
34008b76:	d0cb      	beq.n	34008b10 <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34008b78:	f7fc fc62 	bl	34005440 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34008b7c:	2800      	cmp	r0, #0
34008b7e:	d1f5      	bne.n	34008b6c <RCCEx_GetOTGPHYCLKFreq+0x84>
          usb_frequency = HSE_VALUE;
34008b80:	480b      	ldr	r0, [pc, #44]	@ (34008bb0 <RCCEx_GetOTGPHYCLKFreq+0xc8>)
  return usb_frequency;
34008b82:	e7c6      	b.n	34008b12 <RCCEx_GetOTGPHYCLKFreq+0x2a>
        switch (LL_RCC_IC15_GetSource())
34008b84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008b88:	d1c2      	bne.n	34008b10 <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008b8a:	f7ff fe0d 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34008b8e:	e7e6      	b.n	34008b5e <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008b90:	f7ff fd8a 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
34008b94:	e7e3      	b.n	34008b5e <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008b96:	f7ff fdc7 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
34008b9a:	e7e0      	b.n	34008b5e <RCCEx_GetOTGPHYCLKFreq+0x76>
34008b9c:	03020c14 	.word	0x03020c14
34008ba0:	03011414 	.word	0x03011414
34008ba4:	03030c14 	.word	0x03030c14
34008ba8:	56028000 	.word	0x56028000
34008bac:	016e3600 	.word	0x016e3600
34008bb0:	02dc6c00 	.word	0x02dc6c00

34008bb4 <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
34008bb4:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
34008bb6:	f7fc fc7d 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34008bba:	4b11      	ldr	r3, [pc, #68]	@ (34008c00 <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
34008bbc:	4298      	cmp	r0, r3
34008bbe:	d01c      	beq.n	34008bfa <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
34008bc0:	d805      	bhi.n	34008bce <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
34008bc2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008bc6:	4298      	cmp	r0, r3
34008bc8:	d012      	beq.n	34008bf0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34008bca:	2000      	movs	r0, #0
}
34008bcc:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34008bce:	4b0d      	ldr	r3, [pc, #52]	@ (34008c04 <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
34008bd0:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34008bd4:	4298      	cmp	r0, r3
34008bd6:	d1f8      	bne.n	34008bca <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
34008bd8:	f7fc fc3a 	bl	34005450 <LL_RCC_HSE_IsReady>
34008bdc:	2800      	cmp	r0, #0
34008bde:	d0f4      	beq.n	34008bca <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34008be0:	f7fc fc2e 	bl	34005440 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
34008be4:	4b08      	ldr	r3, [pc, #32]	@ (34008c08 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
34008be6:	2800      	cmp	r0, #0
34008be8:	4808      	ldr	r0, [pc, #32]	@ (34008c0c <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
34008bea:	bf08      	it	eq
34008bec:	4618      	moveq	r0, r3
34008bee:	e7ed      	b.n	34008bcc <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34008bf0:	4807      	ldr	r0, [pc, #28]	@ (34008c10 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
34008bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34008bf6:	f7ff bf77 	b.w	34008ae8 <RCCEx_GetOTGPHYCLKFreq>
34008bfa:	4806      	ldr	r0, [pc, #24]	@ (34008c14 <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
34008bfc:	e7f9      	b.n	34008bf2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
34008bfe:	bf00      	nop
34008c00:	01001814 	.word	0x01001814
34008c04:	01011014 	.word	0x01011014
34008c08:	02dc6c00 	.word	0x02dc6c00
34008c0c:	016e3600 	.word	0x016e3600
34008c10:	03000c14 	.word	0x03000c14
34008c14:	03001414 	.word	0x03001414

34008c18 <RCCEx_GetUSARTCLKFreq>:
{
34008c18:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008c1a:	f7fc fc4b 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008c1e:	4b6f      	ldr	r3, [pc, #444]	@ (34008ddc <RCCEx_GetUSARTCLKFreq+0x1c4>)
34008c20:	4298      	cmp	r0, r3
34008c22:	d039      	beq.n	34008c98 <RCCEx_GetUSARTCLKFreq+0x80>
34008c24:	d852      	bhi.n	34008ccc <RCCEx_GetUSARTCLKFreq+0xb4>
34008c26:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008c2a:	4298      	cmp	r0, r3
34008c2c:	f000 80b5 	beq.w	34008d9a <RCCEx_GetUSARTCLKFreq+0x182>
34008c30:	d813      	bhi.n	34008c5a <RCCEx_GetUSARTCLKFreq+0x42>
34008c32:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008c36:	4298      	cmp	r0, r3
34008c38:	f000 80af 	beq.w	34008d9a <RCCEx_GetUSARTCLKFreq+0x182>
34008c3c:	d80b      	bhi.n	34008c56 <RCCEx_GetUSARTCLKFreq+0x3e>
34008c3e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34008c42:	4298      	cmp	r0, r3
34008c44:	f000 80a9 	beq.w	34008d9a <RCCEx_GetUSARTCLKFreq+0x182>
34008c48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008c4c:	4298      	cmp	r0, r3
34008c4e:	f000 80ae 	beq.w	34008dae <RCCEx_GetUSARTCLKFreq+0x196>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34008c52:	2000      	movs	r0, #0
}
34008c54:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008c56:	4b62      	ldr	r3, [pc, #392]	@ (34008de0 <RCCEx_GetUSARTCLKFreq+0x1c8>)
34008c58:	e7f8      	b.n	34008c4c <RCCEx_GetUSARTCLKFreq+0x34>
34008c5a:	4b62      	ldr	r3, [pc, #392]	@ (34008de4 <RCCEx_GetUSARTCLKFreq+0x1cc>)
34008c5c:	4298      	cmp	r0, r3
34008c5e:	d00c      	beq.n	34008c7a <RCCEx_GetUSARTCLKFreq+0x62>
34008c60:	d80f      	bhi.n	34008c82 <RCCEx_GetUSARTCLKFreq+0x6a>
34008c62:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008c66:	4298      	cmp	r0, r3
34008c68:	d007      	beq.n	34008c7a <RCCEx_GetUSARTCLKFreq+0x62>
34008c6a:	bf8e      	itee	hi
34008c6c:	4b5e      	ldrhi	r3, [pc, #376]	@ (34008de8 <RCCEx_GetUSARTCLKFreq+0x1d0>)
34008c6e:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34008c72:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34008c76:	4298      	cmp	r0, r3
34008c78:	d1eb      	bne.n	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
}
34008c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008c7e:	f7ff bdd3 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008c82:	4b5a      	ldr	r3, [pc, #360]	@ (34008dec <RCCEx_GetUSARTCLKFreq+0x1d4>)
34008c84:	4298      	cmp	r0, r3
34008c86:	d007      	beq.n	34008c98 <RCCEx_GetUSARTCLKFreq+0x80>
34008c88:	bf8e      	itee	hi
34008c8a:	4b59      	ldrhi	r3, [pc, #356]	@ (34008df0 <RCCEx_GetUSARTCLKFreq+0x1d8>)
34008c8c:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34008c90:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34008c94:	4298      	cmp	r0, r3
34008c96:	d1dc      	bne.n	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008c98:	f7fc fc3e 	bl	34005518 <LL_RCC_IC9_IsEnabled>
34008c9c:	2800      	cmp	r0, #0
34008c9e:	d0d8      	beq.n	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
34008ca0:	f7fc fc42 	bl	34005528 <LL_RCC_IC9_GetDivider>
34008ca4:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008ca6:	4b53      	ldr	r3, [pc, #332]	@ (34008df4 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008ca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008cac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008cb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008cb4:	f000 808e 	beq.w	34008dd4 <RCCEx_GetUSARTCLKFreq+0x1bc>
34008cb8:	f200 8082 	bhi.w	34008dc0 <RCCEx_GetUSARTCLKFreq+0x1a8>
34008cbc:	2b00      	cmp	r3, #0
34008cbe:	f040 8086 	bne.w	34008dce <RCCEx_GetUSARTCLKFreq+0x1b6>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008cc2:	f7ff fcb1 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
34008cc6:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008cca:	e7c3      	b.n	34008c54 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008ccc:	4b4a      	ldr	r3, [pc, #296]	@ (34008df8 <RCCEx_GetUSARTCLKFreq+0x1e0>)
34008cce:	4298      	cmp	r0, r3
34008cd0:	d045      	beq.n	34008d5e <RCCEx_GetUSARTCLKFreq+0x146>
34008cd2:	d833      	bhi.n	34008d3c <RCCEx_GetUSARTCLKFreq+0x124>
34008cd4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008cd8:	4298      	cmp	r0, r3
34008cda:	d028      	beq.n	34008d2e <RCCEx_GetUSARTCLKFreq+0x116>
34008cdc:	d81c      	bhi.n	34008d18 <RCCEx_GetUSARTCLKFreq+0x100>
34008cde:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
34008ce2:	3bfc      	subs	r3, #252	@ 0xfc
34008ce4:	4298      	cmp	r0, r3
34008ce6:	d006      	beq.n	34008cf6 <RCCEx_GetUSARTCLKFreq+0xde>
34008ce8:	d810      	bhi.n	34008d0c <RCCEx_GetUSARTCLKFreq+0xf4>
34008cea:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008cee:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34008cf2:	4298      	cmp	r0, r3
34008cf4:	d1ad      	bne.n	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008cf6:	f7fc fc21 	bl	3400553c <LL_RCC_IC14_IsEnabled>
34008cfa:	2800      	cmp	r0, #0
34008cfc:	d0a9      	beq.n	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
34008cfe:	f7fc fc25 	bl	3400554c <LL_RCC_IC14_GetDivider>
34008d02:	4b3c      	ldr	r3, [pc, #240]	@ (34008df4 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008d04:	4604      	mov	r4, r0
34008d06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008d0a:	e7cf      	b.n	34008cac <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008d0c:	4b3b      	ldr	r3, [pc, #236]	@ (34008dfc <RCCEx_GetUSARTCLKFreq+0x1e4>)
34008d0e:	4298      	cmp	r0, r3
34008d10:	d0f1      	beq.n	34008cf6 <RCCEx_GetUSARTCLKFreq+0xde>
34008d12:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
34008d16:	e7ec      	b.n	34008cf2 <RCCEx_GetUSARTCLKFreq+0xda>
34008d18:	4b39      	ldr	r3, [pc, #228]	@ (34008e00 <RCCEx_GetUSARTCLKFreq+0x1e8>)
34008d1a:	4298      	cmp	r0, r3
34008d1c:	d007      	beq.n	34008d2e <RCCEx_GetUSARTCLKFreq+0x116>
34008d1e:	bf8e      	itee	hi
34008d20:	4b38      	ldrhi	r3, [pc, #224]	@ (34008e04 <RCCEx_GetUSARTCLKFreq+0x1ec>)
34008d22:	f020 0004 	bicls.w	r0, r0, #4
34008d26:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008d2a:	4298      	cmp	r0, r3
34008d2c:	d191      	bne.n	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
34008d2e:	f7fc fba7 	bl	34005480 <LL_RCC_LSE_IsReady>
34008d32:	3800      	subs	r0, #0
34008d34:	bf18      	it	ne
34008d36:	2001      	movne	r0, #1
34008d38:	03c0      	lsls	r0, r0, #15
34008d3a:	e78b      	b.n	34008c54 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008d3c:	4b32      	ldr	r3, [pc, #200]	@ (34008e08 <RCCEx_GetUSARTCLKFreq+0x1f0>)
34008d3e:	4298      	cmp	r0, r3
34008d40:	d020      	beq.n	34008d84 <RCCEx_GetUSARTCLKFreq+0x16c>
34008d42:	d813      	bhi.n	34008d6c <RCCEx_GetUSARTCLKFreq+0x154>
34008d44:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34008d48:	4298      	cmp	r0, r3
34008d4a:	d008      	beq.n	34008d5e <RCCEx_GetUSARTCLKFreq+0x146>
34008d4c:	bf8e      	itee	hi
34008d4e:	4b2f      	ldrhi	r3, [pc, #188]	@ (34008e0c <RCCEx_GetUSARTCLKFreq+0x1f4>)
34008d50:	f020 0004 	bicls.w	r0, r0, #4
34008d54:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008d58:	4298      	cmp	r0, r3
34008d5a:	f47f af7a 	bne.w	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
34008d5e:	f7fc fb87 	bl	34005470 <LL_RCC_MSI_IsReady>
34008d62:	2800      	cmp	r0, #0
34008d64:	f43f af75 	beq.w	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
34008d68:	4829      	ldr	r0, [pc, #164]	@ (34008e10 <RCCEx_GetUSARTCLKFreq+0x1f8>)
  return usart_frequency;
34008d6a:	e773      	b.n	34008c54 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008d6c:	4b29      	ldr	r3, [pc, #164]	@ (34008e14 <RCCEx_GetUSARTCLKFreq+0x1fc>)
34008d6e:	4298      	cmp	r0, r3
34008d70:	d008      	beq.n	34008d84 <RCCEx_GetUSARTCLKFreq+0x16c>
34008d72:	bf8e      	itee	hi
34008d74:	4b28      	ldrhi	r3, [pc, #160]	@ (34008e18 <RCCEx_GetUSARTCLKFreq+0x200>)
34008d76:	f020 0004 	bicls.w	r0, r0, #4
34008d7a:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008d7e:	4298      	cmp	r0, r3
34008d80:	f47f af67 	bne.w	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
34008d84:	f7fc fb6c 	bl	34005460 <LL_RCC_HSI_IsReady>
34008d88:	2800      	cmp	r0, #0
34008d8a:	f43f af62 	beq.w	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008d8e:	4b19      	ldr	r3, [pc, #100]	@ (34008df4 <RCCEx_GetUSARTCLKFreq+0x1dc>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008d90:	4822      	ldr	r0, [pc, #136]	@ (34008e1c <RCCEx_GetUSARTCLKFreq+0x204>)
34008d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008d94:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008d98:	e007      	b.n	34008daa <RCCEx_GetUSARTCLKFreq+0x192>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008d9a:	f7fc faeb 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34008d9e:	f7fc fbf1 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008da2:	4b14      	ldr	r3, [pc, #80]	@ (34008df4 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008da6:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008daa:	40d8      	lsrs	r0, r3
34008dac:	e752      	b.n	34008c54 <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008dae:	f7fc fae1 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34008db2:	f7fc fbe7 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008db6:	4b0f      	ldr	r3, [pc, #60]	@ (34008df4 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008dba:	f003 0307 	and.w	r3, r3, #7
34008dbe:	e7f4      	b.n	34008daa <RCCEx_GetUSARTCLKFreq+0x192>
        switch (LL_RCC_IC14_GetSource())
34008dc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008dc4:	f47f af45 	bne.w	34008c52 <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008dc8:	f7ff fcee 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34008dcc:	e77b      	b.n	34008cc6 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008dce:	f7ff fc6b 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
34008dd2:	e778      	b.n	34008cc6 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008dd4:	f7ff fca8 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
34008dd8:	e775      	b.n	34008cc6 <RCCEx_GetUSARTCLKFreq+0xae>
34008dda:	bf00      	nop
34008ddc:	07021430 	.word	0x07021430
34008de0:	07000830 	.word	0x07000830
34008de4:	07011430 	.word	0x07011430
34008de8:	07010830 	.word	0x07010830
34008dec:	07020434 	.word	0x07020434
34008df0:	07020830 	.word	0x07020830
34008df4:	56028000 	.word	0x56028000
34008df8:	07050030 	.word	0x07050030
34008dfc:	07030830 	.word	0x07030830
34008e00:	07040830 	.word	0x07040830
34008e04:	07041430 	.word	0x07041430
34008e08:	07060030 	.word	0x07060030
34008e0c:	07051430 	.word	0x07051430
34008e10:	003d0900 	.word	0x003d0900
34008e14:	07060830 	.word	0x07060830
34008e18:	07061430 	.word	0x07061430
34008e1c:	03d09000 	.word	0x03d09000

34008e20 <RCCEx_GetUARTCLKFreq>:
{
34008e20:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008e22:	f7fc fb47 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008e26:	4b77      	ldr	r3, [pc, #476]	@ (34009004 <RCCEx_GetUARTCLKFreq+0x1e4>)
34008e28:	4298      	cmp	r0, r3
34008e2a:	d03e      	beq.n	34008eaa <RCCEx_GetUARTCLKFreq+0x8a>
34008e2c:	d859      	bhi.n	34008ee2 <RCCEx_GetUARTCLKFreq+0xc2>
34008e2e:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008e32:	4298      	cmp	r0, r3
34008e34:	f000 80c6 	beq.w	34008fc4 <RCCEx_GetUARTCLKFreq+0x1a4>
34008e38:	d814      	bhi.n	34008e64 <RCCEx_GetUARTCLKFreq+0x44>
34008e3a:	4b73      	ldr	r3, [pc, #460]	@ (34009008 <RCCEx_GetUARTCLKFreq+0x1e8>)
34008e3c:	4298      	cmp	r0, r3
34008e3e:	f000 80cb 	beq.w	34008fd8 <RCCEx_GetUARTCLKFreq+0x1b8>
34008e42:	3b01      	subs	r3, #1
34008e44:	4298      	cmp	r0, r3
34008e46:	d90b      	bls.n	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
34008e48:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
34008e4c:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34008e50:	429a      	cmp	r2, r3
34008e52:	f000 80b7 	beq.w	34008fc4 <RCCEx_GetUARTCLKFreq+0x1a4>
34008e56:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008e5a:	4298      	cmp	r0, r3
34008e5c:	f000 80b2 	beq.w	34008fc4 <RCCEx_GetUARTCLKFreq+0x1a4>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34008e60:	2000      	movs	r0, #0
}
34008e62:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008e64:	4b69      	ldr	r3, [pc, #420]	@ (3400900c <RCCEx_GetUARTCLKFreq+0x1ec>)
34008e66:	4298      	cmp	r0, r3
34008e68:	d00d      	beq.n	34008e86 <RCCEx_GetUARTCLKFreq+0x66>
34008e6a:	d812      	bhi.n	34008e92 <RCCEx_GetUARTCLKFreq+0x72>
34008e6c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008e70:	4298      	cmp	r0, r3
34008e72:	d008      	beq.n	34008e86 <RCCEx_GetUARTCLKFreq+0x66>
34008e74:	d80b      	bhi.n	34008e8e <RCCEx_GetUARTCLKFreq+0x6e>
34008e76:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008e7a:	4298      	cmp	r0, r3
34008e7c:	d003      	beq.n	34008e86 <RCCEx_GetUARTCLKFreq+0x66>
34008e7e:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008e82:	4298      	cmp	r0, r3
34008e84:	d1ec      	bne.n	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
}
34008e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008e8a:	f7ff bccd 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008e8e:	4b60      	ldr	r3, [pc, #384]	@ (34009010 <RCCEx_GetUARTCLKFreq+0x1f0>)
34008e90:	e7f7      	b.n	34008e82 <RCCEx_GetUARTCLKFreq+0x62>
34008e92:	4b60      	ldr	r3, [pc, #384]	@ (34009014 <RCCEx_GetUARTCLKFreq+0x1f4>)
34008e94:	4298      	cmp	r0, r3
34008e96:	d008      	beq.n	34008eaa <RCCEx_GetUARTCLKFreq+0x8a>
34008e98:	d821      	bhi.n	34008ede <RCCEx_GetUARTCLKFreq+0xbe>
34008e9a:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008e9e:	4298      	cmp	r0, r3
34008ea0:	d003      	beq.n	34008eaa <RCCEx_GetUARTCLKFreq+0x8a>
34008ea2:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008ea6:	4298      	cmp	r0, r3
34008ea8:	d1da      	bne.n	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008eaa:	f7fc fb35 	bl	34005518 <LL_RCC_IC9_IsEnabled>
34008eae:	2800      	cmp	r0, #0
34008eb0:	d0d6      	beq.n	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
34008eb2:	f7fc fb39 	bl	34005528 <LL_RCC_IC9_GetDivider>
34008eb6:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008eb8:	4b57      	ldr	r3, [pc, #348]	@ (34009018 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008eba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008ebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008ec2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008ec6:	f000 809a 	beq.w	34008ffe <RCCEx_GetUARTCLKFreq+0x1de>
34008eca:	f200 808e 	bhi.w	34008fea <RCCEx_GetUARTCLKFreq+0x1ca>
34008ece:	2b00      	cmp	r3, #0
34008ed0:	f040 8092 	bne.w	34008ff8 <RCCEx_GetUARTCLKFreq+0x1d8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008ed4:	f7ff fba8 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
34008ed8:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008edc:	e7c1      	b.n	34008e62 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008ede:	4b4f      	ldr	r3, [pc, #316]	@ (3400901c <RCCEx_GetUARTCLKFreq+0x1fc>)
34008ee0:	e7e1      	b.n	34008ea6 <RCCEx_GetUARTCLKFreq+0x86>
34008ee2:	4b4f      	ldr	r3, [pc, #316]	@ (34009020 <RCCEx_GetUARTCLKFreq+0x200>)
34008ee4:	4298      	cmp	r0, r3
34008ee6:	d04a      	beq.n	34008f7e <RCCEx_GetUARTCLKFreq+0x15e>
34008ee8:	d836      	bhi.n	34008f58 <RCCEx_GetUARTCLKFreq+0x138>
34008eea:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008eee:	4298      	cmp	r0, r3
34008ef0:	d029      	beq.n	34008f46 <RCCEx_GetUARTCLKFreq+0x126>
34008ef2:	d81c      	bhi.n	34008f2e <RCCEx_GetUARTCLKFreq+0x10e>
34008ef4:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008ef8:	3b04      	subs	r3, #4
34008efa:	4298      	cmp	r0, r3
34008efc:	d008      	beq.n	34008f10 <RCCEx_GetUARTCLKFreq+0xf0>
34008efe:	d812      	bhi.n	34008f26 <RCCEx_GetUARTCLKFreq+0x106>
34008f00:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008f04:	4298      	cmp	r0, r3
34008f06:	d003      	beq.n	34008f10 <RCCEx_GetUARTCLKFreq+0xf0>
34008f08:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008f0c:	4298      	cmp	r0, r3
34008f0e:	d1a7      	bne.n	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008f10:	f7fc fb14 	bl	3400553c <LL_RCC_IC14_IsEnabled>
34008f14:	2800      	cmp	r0, #0
34008f16:	d0a3      	beq.n	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
34008f18:	f7fc fb18 	bl	3400554c <LL_RCC_IC14_GetDivider>
34008f1c:	4b3e      	ldr	r3, [pc, #248]	@ (34009018 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008f1e:	4604      	mov	r4, r0
34008f20:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008f24:	e7cb      	b.n	34008ebe <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008f26:	4b3f      	ldr	r3, [pc, #252]	@ (34009024 <RCCEx_GetUARTCLKFreq+0x204>)
34008f28:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008f2c:	e7ee      	b.n	34008f0c <RCCEx_GetUARTCLKFreq+0xec>
34008f2e:	4b3e      	ldr	r3, [pc, #248]	@ (34009028 <RCCEx_GetUARTCLKFreq+0x208>)
34008f30:	4298      	cmp	r0, r3
34008f32:	d008      	beq.n	34008f46 <RCCEx_GetUARTCLKFreq+0x126>
34008f34:	d80e      	bhi.n	34008f54 <RCCEx_GetUARTCLKFreq+0x134>
34008f36:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008f3a:	4298      	cmp	r0, r3
34008f3c:	d003      	beq.n	34008f46 <RCCEx_GetUARTCLKFreq+0x126>
34008f3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f42:	4298      	cmp	r0, r3
34008f44:	d18c      	bne.n	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
34008f46:	f7fc fa9b 	bl	34005480 <LL_RCC_LSE_IsReady>
34008f4a:	3800      	subs	r0, #0
34008f4c:	bf18      	it	ne
34008f4e:	2001      	movne	r0, #1
34008f50:	03c0      	lsls	r0, r0, #15
34008f52:	e786      	b.n	34008e62 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008f54:	4b35      	ldr	r3, [pc, #212]	@ (3400902c <RCCEx_GetUARTCLKFreq+0x20c>)
34008f56:	e7f4      	b.n	34008f42 <RCCEx_GetUARTCLKFreq+0x122>
34008f58:	4b35      	ldr	r3, [pc, #212]	@ (34009030 <RCCEx_GetUARTCLKFreq+0x210>)
34008f5a:	4298      	cmp	r0, r3
34008f5c:	d025      	beq.n	34008faa <RCCEx_GetUARTCLKFreq+0x18a>
34008f5e:	d817      	bhi.n	34008f90 <RCCEx_GetUARTCLKFreq+0x170>
34008f60:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
34008f64:	3b04      	subs	r3, #4
34008f66:	4298      	cmp	r0, r3
34008f68:	d009      	beq.n	34008f7e <RCCEx_GetUARTCLKFreq+0x15e>
34008f6a:	d80f      	bhi.n	34008f8c <RCCEx_GetUARTCLKFreq+0x16c>
34008f6c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008f70:	4298      	cmp	r0, r3
34008f72:	d004      	beq.n	34008f7e <RCCEx_GetUARTCLKFreq+0x15e>
34008f74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f78:	4298      	cmp	r0, r3
34008f7a:	f47f af71 	bne.w	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
34008f7e:	f7fc fa77 	bl	34005470 <LL_RCC_MSI_IsReady>
34008f82:	2800      	cmp	r0, #0
34008f84:	f43f af6c 	beq.w	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
34008f88:	482a      	ldr	r0, [pc, #168]	@ (34009034 <RCCEx_GetUARTCLKFreq+0x214>)
  return uart_frequency;
34008f8a:	e76a      	b.n	34008e62 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008f8c:	4b2a      	ldr	r3, [pc, #168]	@ (34009038 <RCCEx_GetUARTCLKFreq+0x218>)
34008f8e:	e7f3      	b.n	34008f78 <RCCEx_GetUARTCLKFreq+0x158>
34008f90:	4b2a      	ldr	r3, [pc, #168]	@ (3400903c <RCCEx_GetUARTCLKFreq+0x21c>)
34008f92:	4298      	cmp	r0, r3
34008f94:	d009      	beq.n	34008faa <RCCEx_GetUARTCLKFreq+0x18a>
34008f96:	d813      	bhi.n	34008fc0 <RCCEx_GetUARTCLKFreq+0x1a0>
34008f98:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008f9c:	4298      	cmp	r0, r3
34008f9e:	d004      	beq.n	34008faa <RCCEx_GetUARTCLKFreq+0x18a>
34008fa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008fa4:	4298      	cmp	r0, r3
34008fa6:	f47f af5b 	bne.w	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
34008faa:	f7fc fa59 	bl	34005460 <LL_RCC_HSI_IsReady>
34008fae:	2800      	cmp	r0, #0
34008fb0:	f43f af56 	beq.w	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008fb4:	4b18      	ldr	r3, [pc, #96]	@ (34009018 <RCCEx_GetUARTCLKFreq+0x1f8>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008fb6:	4822      	ldr	r0, [pc, #136]	@ (34009040 <RCCEx_GetUARTCLKFreq+0x220>)
34008fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008fba:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008fbe:	e009      	b.n	34008fd4 <RCCEx_GetUARTCLKFreq+0x1b4>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008fc0:	4b20      	ldr	r3, [pc, #128]	@ (34009044 <RCCEx_GetUARTCLKFreq+0x224>)
34008fc2:	e7ef      	b.n	34008fa4 <RCCEx_GetUARTCLKFreq+0x184>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008fc4:	f7fc f9d6 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34008fc8:	f7fc fadc 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008fcc:	4b12      	ldr	r3, [pc, #72]	@ (34009018 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008fd0:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008fd4:	40d8      	lsrs	r0, r3
34008fd6:	e744      	b.n	34008e62 <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008fd8:	f7fc f9cc 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34008fdc:	f7fc fad2 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008fe0:	4b0d      	ldr	r3, [pc, #52]	@ (34009018 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008fe4:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008fe8:	e7f4      	b.n	34008fd4 <RCCEx_GetUARTCLKFreq+0x1b4>
        switch (LL_RCC_IC14_GetSource())
34008fea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008fee:	f47f af37 	bne.w	34008e60 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008ff2:	f7ff fbd9 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34008ff6:	e76f      	b.n	34008ed8 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008ff8:	f7ff fb56 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
34008ffc:	e76c      	b.n	34008ed8 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008ffe:	f7ff fb93 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
34009002:	e769      	b.n	34008ed8 <RCCEx_GetUARTCLKFreq+0xb8>
34009004:	07021c30 	.word	0x07021c30
34009008:	07000034 	.word	0x07000034
3400900c:	07011c30 	.word	0x07011c30
34009010:	07011830 	.word	0x07011830
34009014:	07021030 	.word	0x07021030
34009018:	56028000 	.word	0x56028000
3400901c:	07021830 	.word	0x07021830
34009020:	07050034 	.word	0x07050034
34009024:	07031830 	.word	0x07031830
34009028:	07041830 	.word	0x07041830
3400902c:	07041c30 	.word	0x07041c30
34009030:	07060034 	.word	0x07060034
34009034:	003d0900 	.word	0x003d0900
34009038:	07051c30 	.word	0x07051c30
3400903c:	07061830 	.word	0x07061830
34009040:	03d09000 	.word	0x03d09000
34009044:	07061c30 	.word	0x07061c30

34009048 <RCCEx_GetSPICLKFreq>:
{
34009048:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400904a:	f7fc fa33 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3400904e:	4b89      	ldr	r3, [pc, #548]	@ (34009274 <RCCEx_GetSPICLKFreq+0x22c>)
34009050:	4298      	cmp	r0, r3
34009052:	d055      	beq.n	34009100 <RCCEx_GetSPICLKFreq+0xb8>
34009054:	d865      	bhi.n	34009122 <RCCEx_GetSPICLKFreq+0xda>
34009056:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
3400905a:	4298      	cmp	r0, r3
3400905c:	f000 80ca 	beq.w	340091f4 <RCCEx_GetSPICLKFreq+0x1ac>
34009060:	d81e      	bhi.n	340090a0 <RCCEx_GetSPICLKFreq+0x58>
34009062:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34009066:	4298      	cmp	r0, r3
34009068:	f000 80ba 	beq.w	340091e0 <RCCEx_GetSPICLKFreq+0x198>
3400906c:	d80a      	bhi.n	34009084 <RCCEx_GetSPICLKFreq+0x3c>
3400906e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34009072:	4298      	cmp	r0, r3
34009074:	d00b      	beq.n	3400908e <RCCEx_GetSPICLKFreq+0x46>
34009076:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400907a:	4298      	cmp	r0, r3
3400907c:	f000 80b0 	beq.w	340091e0 <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34009080:	2000      	movs	r0, #0
}
34009082:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34009084:	4b7c      	ldr	r3, [pc, #496]	@ (34009278 <RCCEx_GetSPICLKFreq+0x230>)
34009086:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400908a:	4298      	cmp	r0, r3
3400908c:	d1f8      	bne.n	34009080 <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400908e:	f7fc f971 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34009092:	f7fc fa77 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34009096:	4b79      	ldr	r3, [pc, #484]	@ (3400927c <RCCEx_GetSPICLKFreq+0x234>)
34009098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3400909a:	f3c3 1302 	ubfx	r3, r3, #4, #3
3400909e:	e0a7      	b.n	340091f0 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
340090a0:	4b77      	ldr	r3, [pc, #476]	@ (34009280 <RCCEx_GetSPICLKFreq+0x238>)
340090a2:	4298      	cmp	r0, r3
340090a4:	f000 80af 	beq.w	34009206 <RCCEx_GetSPICLKFreq+0x1be>
340090a8:	d81d      	bhi.n	340090e6 <RCCEx_GetSPICLKFreq+0x9e>
340090aa:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
340090ae:	4298      	cmp	r0, r3
340090b0:	d00a      	beq.n	340090c8 <RCCEx_GetSPICLKFreq+0x80>
340090b2:	d80d      	bhi.n	340090d0 <RCCEx_GetSPICLKFreq+0x88>
340090b4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340090b8:	4298      	cmp	r0, r3
340090ba:	d005      	beq.n	340090c8 <RCCEx_GetSPICLKFreq+0x80>
340090bc:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
340090c0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
340090c4:	4298      	cmp	r0, r3
340090c6:	d1db      	bne.n	34009080 <RCCEx_GetSPICLKFreq+0x38>
}
340090c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340090cc:	f7ff bbac 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
340090d0:	4b6c      	ldr	r3, [pc, #432]	@ (34009284 <RCCEx_GetSPICLKFreq+0x23c>)
340090d2:	4298      	cmp	r0, r3
340090d4:	d0f8      	beq.n	340090c8 <RCCEx_GetSPICLKFreq+0x80>
340090d6:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
340090da:	4298      	cmp	r0, r3
340090dc:	f000 8093 	beq.w	34009206 <RCCEx_GetSPICLKFreq+0x1be>
340090e0:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
340090e4:	e7ee      	b.n	340090c4 <RCCEx_GetSPICLKFreq+0x7c>
340090e6:	4b68      	ldr	r3, [pc, #416]	@ (34009288 <RCCEx_GetSPICLKFreq+0x240>)
340090e8:	4298      	cmp	r0, r3
340090ea:	d009      	beq.n	34009100 <RCCEx_GetSPICLKFreq+0xb8>
340090ec:	d813      	bhi.n	34009116 <RCCEx_GetSPICLKFreq+0xce>
340090ee:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340090f2:	4298      	cmp	r0, r3
340090f4:	f000 8087 	beq.w	34009206 <RCCEx_GetSPICLKFreq+0x1be>
340090f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340090fc:	4298      	cmp	r0, r3
340090fe:	d1bf      	bne.n	34009080 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34009100:	f7fc fa0a 	bl	34005518 <LL_RCC_IC9_IsEnabled>
34009104:	2800      	cmp	r0, #0
34009106:	d0bb      	beq.n	34009080 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
34009108:	f7fc fa0e 	bl	34005528 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3400910c:	4b5b      	ldr	r3, [pc, #364]	@ (3400927c <RCCEx_GetSPICLKFreq+0x234>)
3400910e:	4604      	mov	r4, r0
34009110:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34009114:	e082      	b.n	3400921c <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34009116:	4b5d      	ldr	r3, [pc, #372]	@ (3400928c <RCCEx_GetSPICLKFreq+0x244>)
34009118:	4298      	cmp	r0, r3
3400911a:	d074      	beq.n	34009206 <RCCEx_GetSPICLKFreq+0x1be>
3400911c:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34009120:	e7ec      	b.n	340090fc <RCCEx_GetSPICLKFreq+0xb4>
34009122:	4b5b      	ldr	r3, [pc, #364]	@ (34009290 <RCCEx_GetSPICLKFreq+0x248>)
34009124:	4298      	cmp	r0, r3
34009126:	d043      	beq.n	340091b0 <RCCEx_GetSPICLKFreq+0x168>
34009128:	d830      	bhi.n	3400918c <RCCEx_GetSPICLKFreq+0x144>
3400912a:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
3400912e:	4298      	cmp	r0, r3
34009130:	d0e6      	beq.n	34009100 <RCCEx_GetSPICLKFreq+0xb8>
34009132:	d808      	bhi.n	34009146 <RCCEx_GetSPICLKFreq+0xfe>
34009134:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34009138:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400913c:	429a      	cmp	r2, r3
3400913e:	d079      	beq.n	34009234 <RCCEx_GetSPICLKFreq+0x1ec>
34009140:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34009144:	e7da      	b.n	340090fc <RCCEx_GetSPICLKFreq+0xb4>
34009146:	4b53      	ldr	r3, [pc, #332]	@ (34009294 <RCCEx_GetSPICLKFreq+0x24c>)
34009148:	4298      	cmp	r0, r3
3400914a:	d00d      	beq.n	34009168 <RCCEx_GetSPICLKFreq+0x120>
3400914c:	d814      	bhi.n	34009178 <RCCEx_GetSPICLKFreq+0x130>
3400914e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34009152:	4298      	cmp	r0, r3
34009154:	d008      	beq.n	34009168 <RCCEx_GetSPICLKFreq+0x120>
34009156:	d80d      	bhi.n	34009174 <RCCEx_GetSPICLKFreq+0x12c>
34009158:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400915c:	4298      	cmp	r0, r3
3400915e:	d003      	beq.n	34009168 <RCCEx_GetSPICLKFreq+0x120>
34009160:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009164:	4298      	cmp	r0, r3
34009166:	d18b      	bne.n	34009080 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34009168:	f7fc f982 	bl	34005470 <LL_RCC_MSI_IsReady>
3400916c:	2800      	cmp	r0, #0
3400916e:	d087      	beq.n	34009080 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34009170:	4849      	ldr	r0, [pc, #292]	@ (34009298 <RCCEx_GetSPICLKFreq+0x250>)
  return spi_frequency;
34009172:	e786      	b.n	34009082 <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34009174:	4b49      	ldr	r3, [pc, #292]	@ (3400929c <RCCEx_GetSPICLKFreq+0x254>)
34009176:	e7f5      	b.n	34009164 <RCCEx_GetSPICLKFreq+0x11c>
34009178:	4b49      	ldr	r3, [pc, #292]	@ (340092a0 <RCCEx_GetSPICLKFreq+0x258>)
3400917a:	4298      	cmp	r0, r3
3400917c:	d018      	beq.n	340091b0 <RCCEx_GetSPICLKFreq+0x168>
3400917e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009182:	4298      	cmp	r0, r3
34009184:	d014      	beq.n	340091b0 <RCCEx_GetSPICLKFreq+0x168>
34009186:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
3400918a:	e7eb      	b.n	34009164 <RCCEx_GetSPICLKFreq+0x11c>
3400918c:	4b45      	ldr	r3, [pc, #276]	@ (340092a4 <RCCEx_GetSPICLKFreq+0x25c>)
3400918e:	4298      	cmp	r0, r3
34009190:	d069      	beq.n	34009266 <RCCEx_GetSPICLKFreq+0x21e>
34009192:	d81e      	bhi.n	340091d2 <RCCEx_GetSPICLKFreq+0x18a>
34009194:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34009198:	4298      	cmp	r0, r3
3400919a:	d018      	beq.n	340091ce <RCCEx_GetSPICLKFreq+0x186>
3400919c:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
340091a0:	d811      	bhi.n	340091c6 <RCCEx_GetSPICLKFreq+0x17e>
340091a2:	4a41      	ldr	r2, [pc, #260]	@ (340092a8 <RCCEx_GetSPICLKFreq+0x260>)
340091a4:	4293      	cmp	r3, r2
340091a6:	d003      	beq.n	340091b0 <RCCEx_GetSPICLKFreq+0x168>
340091a8:	4b40      	ldr	r3, [pc, #256]	@ (340092ac <RCCEx_GetSPICLKFreq+0x264>)
340091aa:	4298      	cmp	r0, r3
340091ac:	f47f af68 	bne.w	34009080 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
340091b0:	f7fc f956 	bl	34005460 <LL_RCC_HSI_IsReady>
340091b4:	2800      	cmp	r0, #0
340091b6:	f43f af63 	beq.w	34009080 <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340091ba:	4b30      	ldr	r3, [pc, #192]	@ (3400927c <RCCEx_GetSPICLKFreq+0x234>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340091bc:	483c      	ldr	r0, [pc, #240]	@ (340092b0 <RCCEx_GetSPICLKFreq+0x268>)
340091be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340091c0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340091c4:	e014      	b.n	340091f0 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
340091c6:	4a3b      	ldr	r2, [pc, #236]	@ (340092b4 <RCCEx_GetSPICLKFreq+0x26c>)
340091c8:	4293      	cmp	r3, r2
340091ca:	f47f af59 	bne.w	34009080 <RCCEx_GetSPICLKFreq+0x38>
340091ce:	483a      	ldr	r0, [pc, #232]	@ (340092b8 <RCCEx_GetSPICLKFreq+0x270>)
340091d0:	e757      	b.n	34009082 <RCCEx_GetSPICLKFreq+0x3a>
340091d2:	4b3a      	ldr	r3, [pc, #232]	@ (340092bc <RCCEx_GetSPICLKFreq+0x274>)
340091d4:	4298      	cmp	r0, r3
340091d6:	d046      	beq.n	34009266 <RCCEx_GetSPICLKFreq+0x21e>
340091d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340091dc:	4298      	cmp	r0, r3
340091de:	e7f4      	b.n	340091ca <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340091e0:	f7fc f8c8 	bl	34005374 <HAL_RCC_GetSysClockFreq>
340091e4:	f7fc f9ce 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340091e8:	4b24      	ldr	r3, [pc, #144]	@ (3400927c <RCCEx_GetSPICLKFreq+0x234>)
340091ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340091ec:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
340091f0:	40d8      	lsrs	r0, r3
      break;
340091f2:	e746      	b.n	34009082 <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340091f4:	f7fc f8be 	bl	34005374 <HAL_RCC_GetSysClockFreq>
340091f8:	f7fc f9c4 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
340091fc:	4b1f      	ldr	r3, [pc, #124]	@ (3400927c <RCCEx_GetSPICLKFreq+0x234>)
340091fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009200:	f3c3 3302 	ubfx	r3, r3, #12, #3
34009204:	e7f4      	b.n	340091f0 <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009206:	f7fc f975 	bl	340054f4 <LL_RCC_IC8_IsEnabled>
3400920a:	2800      	cmp	r0, #0
3400920c:	f43f af38 	beq.w	34009080 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
34009210:	f7fc f978 	bl	34005504 <LL_RCC_IC8_GetDivider>
34009214:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009216:	4b19      	ldr	r3, [pc, #100]	@ (3400927c <RCCEx_GetSPICLKFreq+0x234>)
34009218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
3400921c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34009220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009224:	d01c      	beq.n	34009260 <RCCEx_GetSPICLKFreq+0x218>
34009226:	d811      	bhi.n	3400924c <RCCEx_GetSPICLKFreq+0x204>
34009228:	b9bb      	cbnz	r3, 3400925a <RCCEx_GetSPICLKFreq+0x212>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400922a:	f7ff f9fd 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
3400922e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009232:	e726      	b.n	34009082 <RCCEx_GetSPICLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34009234:	f7fc f982 	bl	3400553c <LL_RCC_IC14_IsEnabled>
34009238:	2800      	cmp	r0, #0
3400923a:	f43f af21 	beq.w	34009080 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
3400923e:	f7fc f985 	bl	3400554c <LL_RCC_IC14_GetDivider>
34009242:	4b0e      	ldr	r3, [pc, #56]	@ (3400927c <RCCEx_GetSPICLKFreq+0x234>)
34009244:	4604      	mov	r4, r0
34009246:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400924a:	e7e7      	b.n	3400921c <RCCEx_GetSPICLKFreq+0x1d4>
        switch (LL_RCC_IC14_GetSource())
3400924c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009250:	f47f af16 	bne.w	34009080 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009254:	f7ff faa8 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34009258:	e7e9      	b.n	3400922e <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400925a:	f7ff fa25 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
3400925e:	e7e6      	b.n	3400922e <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009260:	f7ff fa62 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
34009264:	e7e3      	b.n	3400922e <RCCEx_GetSPICLKFreq+0x1e6>
      if (LL_RCC_HSE_IsReady() != 0U)
34009266:	f7fc f8f3 	bl	34005450 <LL_RCC_HSE_IsReady>
3400926a:	2800      	cmp	r0, #0
3400926c:	f43f af08 	beq.w	34009080 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
34009270:	4813      	ldr	r0, [pc, #76]	@ (340092c0 <RCCEx_GetSPICLKFreq+0x278>)
34009272:	e706      	b.n	34009082 <RCCEx_GetSPICLKFreq+0x3a>
34009274:	07030820 	.word	0x07030820
34009278:	07001020 	.word	0x07001020
3400927c:	56028000 	.word	0x56028000
34009280:	07020820 	.word	0x07020820
34009284:	07011820 	.word	0x07011820
34009288:	07021420 	.word	0x07021420
3400928c:	07021820 	.word	0x07021820
34009290:	07050c20 	.word	0x07050c20
34009294:	07041420 	.word	0x07041420
34009298:	003d0900 	.word	0x003d0900
3400929c:	07041020 	.word	0x07041020
340092a0:	07050420 	.word	0x07050420
340092a4:	07061020 	.word	0x07061020
340092a8:	07051020 	.word	0x07051020
340092ac:	07051820 	.word	0x07051820
340092b0:	03d09000 	.word	0x03d09000
340092b4:	07060820 	.word	0x07060820
340092b8:	00bb8000 	.word	0x00bb8000
340092bc:	07061420 	.word	0x07061420
340092c0:	02dc6c00 	.word	0x02dc6c00

340092c4 <RCCEx_GetSAICLKFreq>:
{
340092c4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340092c6:	f7fc f8f5 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
340092ca:	4b49      	ldr	r3, [pc, #292]	@ (340093f0 <RCCEx_GetSAICLKFreq+0x12c>)
340092cc:	4298      	cmp	r0, r3
340092ce:	d04a      	beq.n	34009366 <RCCEx_GetSAICLKFreq+0xa2>
340092d0:	d839      	bhi.n	34009346 <RCCEx_GetSAICLKFreq+0x82>
340092d2:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
340092d6:	4298      	cmp	r0, r3
340092d8:	d021      	beq.n	3400931e <RCCEx_GetSAICLKFreq+0x5a>
340092da:	d815      	bhi.n	34009308 <RCCEx_GetSAICLKFreq+0x44>
340092dc:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340092e0:	4298      	cmp	r0, r3
340092e2:	d00d      	beq.n	34009300 <RCCEx_GetSAICLKFreq+0x3c>
340092e4:	d809      	bhi.n	340092fa <RCCEx_GetSAICLKFreq+0x36>
340092e6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340092ea:	4298      	cmp	r0, r3
340092ec:	d04e      	beq.n	3400938c <RCCEx_GetSAICLKFreq+0xc8>
340092ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340092f2:	4298      	cmp	r0, r3
340092f4:	d04a      	beq.n	3400938c <RCCEx_GetSAICLKFreq+0xc8>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
340092f6:	2000      	movs	r0, #0
}
340092f8:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
340092fa:	4b3e      	ldr	r3, [pc, #248]	@ (340093f4 <RCCEx_GetSAICLKFreq+0x130>)
340092fc:	4298      	cmp	r0, r3
340092fe:	d1fa      	bne.n	340092f6 <RCCEx_GetSAICLKFreq+0x32>
}
34009300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009304:	f7ff ba90 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34009308:	4b3b      	ldr	r3, [pc, #236]	@ (340093f8 <RCCEx_GetSAICLKFreq+0x134>)
3400930a:	4298      	cmp	r0, r3
3400930c:	d04d      	beq.n	340093aa <RCCEx_GetSAICLKFreq+0xe6>
3400930e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009312:	4298      	cmp	r0, r3
34009314:	d049      	beq.n	340093aa <RCCEx_GetSAICLKFreq+0xe6>
34009316:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400931a:	4298      	cmp	r0, r3
3400931c:	d1eb      	bne.n	340092f6 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3400931e:	f7fc f8d7 	bl	340054d0 <LL_RCC_IC7_IsEnabled>
34009322:	2800      	cmp	r0, #0
34009324:	d0e7      	beq.n	340092f6 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
34009326:	f7fc f8db 	bl	340054e0 <LL_RCC_IC7_GetDivider>
3400932a:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3400932c:	4b33      	ldr	r3, [pc, #204]	@ (340093fc <RCCEx_GetSAICLKFreq+0x138>)
3400932e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009332:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34009336:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400933a:	d047      	beq.n	340093cc <RCCEx_GetSAICLKFreq+0x108>
3400933c:	d840      	bhi.n	340093c0 <RCCEx_GetSAICLKFreq+0xfc>
3400933e:	bb7b      	cbnz	r3, 340093a0 <RCCEx_GetSAICLKFreq+0xdc>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009340:	f7ff f972 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
34009344:	e02e      	b.n	340093a4 <RCCEx_GetSAICLKFreq+0xe0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34009346:	4b2e      	ldr	r3, [pc, #184]	@ (34009400 <RCCEx_GetSAICLKFreq+0x13c>)
34009348:	4298      	cmp	r0, r3
3400934a:	d01d      	beq.n	34009388 <RCCEx_GetSAICLKFreq+0xc4>
3400934c:	d811      	bhi.n	34009372 <RCCEx_GetSAICLKFreq+0xae>
3400934e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009352:	4298      	cmp	r0, r3
34009354:	d03d      	beq.n	340093d2 <RCCEx_GetSAICLKFreq+0x10e>
34009356:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400935a:	4298      	cmp	r0, r3
3400935c:	d039      	beq.n	340093d2 <RCCEx_GetSAICLKFreq+0x10e>
3400935e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009362:	4298      	cmp	r0, r3
34009364:	d1c7      	bne.n	340092f6 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
34009366:	f7fc f883 	bl	34005470 <LL_RCC_MSI_IsReady>
3400936a:	2800      	cmp	r0, #0
3400936c:	d0c3      	beq.n	340092f6 <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
3400936e:	4825      	ldr	r0, [pc, #148]	@ (34009404 <RCCEx_GetSAICLKFreq+0x140>)
  return sai_frequency;
34009370:	e7c2      	b.n	340092f8 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34009372:	4b25      	ldr	r3, [pc, #148]	@ (34009408 <RCCEx_GetSAICLKFreq+0x144>)
34009374:	4298      	cmp	r0, r3
34009376:	d036      	beq.n	340093e6 <RCCEx_GetSAICLKFreq+0x122>
34009378:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400937c:	4298      	cmp	r0, r3
3400937e:	d032      	beq.n	340093e6 <RCCEx_GetSAICLKFreq+0x122>
34009380:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009384:	4298      	cmp	r0, r3
34009386:	d1b6      	bne.n	340092f6 <RCCEx_GetSAICLKFreq+0x32>
34009388:	4820      	ldr	r0, [pc, #128]	@ (3400940c <RCCEx_GetSAICLKFreq+0x148>)
3400938a:	e7b5      	b.n	340092f8 <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400938c:	f7fb fff2 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34009390:	f7fc f8f8 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34009394:	4b19      	ldr	r3, [pc, #100]	@ (340093fc <RCCEx_GetSAICLKFreq+0x138>)
34009396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34009398:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400939c:	40d8      	lsrs	r0, r3
3400939e:	e7ab      	b.n	340092f8 <RCCEx_GetSAICLKFreq+0x34>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340093a0:	f7ff f982 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
340093a4:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340093a8:	e7a6      	b.n	340092f8 <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340093aa:	f7fc f8a3 	bl	340054f4 <LL_RCC_IC8_IsEnabled>
340093ae:	2800      	cmp	r0, #0
340093b0:	d0a1      	beq.n	340092f6 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
340093b2:	f7fc f8a7 	bl	34005504 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340093b6:	4b11      	ldr	r3, [pc, #68]	@ (340093fc <RCCEx_GetSAICLKFreq+0x138>)
340093b8:	4604      	mov	r4, r0
340093ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
340093be:	e7b8      	b.n	34009332 <RCCEx_GetSAICLKFreq+0x6e>
        switch (LL_RCC_IC8_GetSource())
340093c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340093c4:	d197      	bne.n	340092f6 <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340093c6:	f7ff f9ef 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
340093ca:	e7eb      	b.n	340093a4 <RCCEx_GetSAICLKFreq+0xe0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340093cc:	f7ff f9ac 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
340093d0:	e7e8      	b.n	340093a4 <RCCEx_GetSAICLKFreq+0xe0>
      if (LL_RCC_HSI_IsReady() != 0U)
340093d2:	f7fc f845 	bl	34005460 <LL_RCC_HSI_IsReady>
340093d6:	2800      	cmp	r0, #0
340093d8:	d08d      	beq.n	340092f6 <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340093da:	4b08      	ldr	r3, [pc, #32]	@ (340093fc <RCCEx_GetSAICLKFreq+0x138>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340093dc:	480c      	ldr	r0, [pc, #48]	@ (34009410 <RCCEx_GetSAICLKFreq+0x14c>)
340093de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340093e0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340093e4:	e7da      	b.n	3400939c <RCCEx_GetSAICLKFreq+0xd8>
}
340093e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
340093ea:	f7ff baa3 	b.w	34008934 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
340093ee:	bf00      	nop
340093f0:	07041418 	.word	0x07041418
340093f4:	07011818 	.word	0x07011818
340093f8:	07031418 	.word	0x07031418
340093fc:	56028000 	.word	0x56028000
34009400:	07061418 	.word	0x07061418
34009404:	003d0900 	.word	0x003d0900
34009408:	07071418 	.word	0x07071418
3400940c:	00bb8000 	.word	0x00bb8000
34009410:	03d09000 	.word	0x03d09000

34009414 <RCCEx_GetI3CCLKFreq>:
{
34009414:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009416:	f7fc f84d 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3400941a:	4b3d      	ldr	r3, [pc, #244]	@ (34009510 <RCCEx_GetI3CCLKFreq+0xfc>)
3400941c:	4298      	cmp	r0, r3
3400941e:	d060      	beq.n	340094e2 <RCCEx_GetI3CCLKFreq+0xce>
34009420:	d830      	bhi.n	34009484 <RCCEx_GetI3CCLKFreq+0x70>
34009422:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34009426:	4298      	cmp	r0, r3
34009428:	d057      	beq.n	340094da <RCCEx_GetI3CCLKFreq+0xc6>
3400942a:	d80d      	bhi.n	34009448 <RCCEx_GetI3CCLKFreq+0x34>
3400942c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009430:	4298      	cmp	r0, r3
34009432:	d048      	beq.n	340094c6 <RCCEx_GetI3CCLKFreq+0xb2>
34009434:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34009438:	4298      	cmp	r0, r3
3400943a:	d04e      	beq.n	340094da <RCCEx_GetI3CCLKFreq+0xc6>
3400943c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009440:	4298      	cmp	r0, r3
34009442:	d040      	beq.n	340094c6 <RCCEx_GetI3CCLKFreq+0xb2>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34009444:	2000      	movs	r0, #0
}
34009446:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34009448:	4b32      	ldr	r3, [pc, #200]	@ (34009514 <RCCEx_GetI3CCLKFreq+0x100>)
3400944a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400944e:	4298      	cmp	r0, r3
34009450:	d1f8      	bne.n	34009444 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34009452:	4b31      	ldr	r3, [pc, #196]	@ (34009518 <RCCEx_GetI3CCLKFreq+0x104>)
34009454:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009458:	0592      	lsls	r2, r2, #22
3400945a:	d5f3      	bpl.n	34009444 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400945c:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34009460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009464:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009468:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400946a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3400946e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009472:	d04a      	beq.n	3400950a <RCCEx_GetI3CCLKFreq+0xf6>
34009474:	d840      	bhi.n	340094f8 <RCCEx_GetI3CCLKFreq+0xe4>
34009476:	2b00      	cmp	r3, #0
34009478:	d144      	bne.n	34009504 <RCCEx_GetI3CCLKFreq+0xf0>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400947a:	f7ff f8d5 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
3400947e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009482:	e7e0      	b.n	34009446 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34009484:	4b25      	ldr	r3, [pc, #148]	@ (3400951c <RCCEx_GetI3CCLKFreq+0x108>)
34009486:	4298      	cmp	r0, r3
34009488:	d008      	beq.n	3400949c <RCCEx_GetI3CCLKFreq+0x88>
3400948a:	d80d      	bhi.n	340094a8 <RCCEx_GetI3CCLKFreq+0x94>
3400948c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009490:	4298      	cmp	r0, r3
34009492:	d026      	beq.n	340094e2 <RCCEx_GetI3CCLKFreq+0xce>
34009494:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34009498:	4298      	cmp	r0, r3
3400949a:	d1d3      	bne.n	34009444 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
3400949c:	f7fb ffe8 	bl	34005470 <LL_RCC_MSI_IsReady>
340094a0:	2800      	cmp	r0, #0
340094a2:	d0cf      	beq.n	34009444 <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
340094a4:	481e      	ldr	r0, [pc, #120]	@ (34009520 <RCCEx_GetI3CCLKFreq+0x10c>)
  return i3c_frequency;
340094a6:	e7ce      	b.n	34009446 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340094a8:	4b1e      	ldr	r3, [pc, #120]	@ (34009524 <RCCEx_GetI3CCLKFreq+0x110>)
340094aa:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340094ae:	4298      	cmp	r0, r3
340094b0:	d1c8      	bne.n	34009444 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
340094b2:	f7fb ffd5 	bl	34005460 <LL_RCC_HSI_IsReady>
340094b6:	2800      	cmp	r0, #0
340094b8:	d0c4      	beq.n	34009444 <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340094ba:	4b17      	ldr	r3, [pc, #92]	@ (34009518 <RCCEx_GetI3CCLKFreq+0x104>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340094bc:	481a      	ldr	r0, [pc, #104]	@ (34009528 <RCCEx_GetI3CCLKFreq+0x114>)
340094be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340094c0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340094c4:	e007      	b.n	340094d6 <RCCEx_GetI3CCLKFreq+0xc2>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340094c6:	f7fb ff55 	bl	34005374 <HAL_RCC_GetSysClockFreq>
340094ca:	f7fc f85b 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340094ce:	4b12      	ldr	r3, [pc, #72]	@ (34009518 <RCCEx_GetI3CCLKFreq+0x104>)
340094d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340094d2:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340094d6:	40d8      	lsrs	r0, r3
340094d8:	e7b5      	b.n	34009446 <RCCEx_GetI3CCLKFreq+0x32>
}
340094da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340094de:	f7ff b9a3 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340094e2:	f7fc f83d 	bl	34005560 <LL_RCC_IC15_IsEnabled>
340094e6:	2800      	cmp	r0, #0
340094e8:	d0ac      	beq.n	34009444 <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
340094ea:	f7fc f841 	bl	34005570 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340094ee:	4b0a      	ldr	r3, [pc, #40]	@ (34009518 <RCCEx_GetI3CCLKFreq+0x104>)
340094f0:	4604      	mov	r4, r0
340094f2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340094f6:	e7b8      	b.n	3400946a <RCCEx_GetI3CCLKFreq+0x56>
        switch (LL_RCC_IC15_GetSource())
340094f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340094fc:	d1a2      	bne.n	34009444 <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340094fe:	f7ff f953 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34009502:	e7bc      	b.n	3400947e <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009504:	f7ff f8d0 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
34009508:	e7b9      	b.n	3400947e <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400950a:	f7ff f90d 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
3400950e:	e7b6      	b.n	3400947e <RCCEx_GetI3CCLKFreq+0x6a>
34009510:	0703100c 	.word	0x0703100c
34009514:	0702100c 	.word	0x0702100c
34009518:	56028000 	.word	0x56028000
3400951c:	0704140c 	.word	0x0704140c
34009520:	003d0900 	.word	0x003d0900
34009524:	0705100c 	.word	0x0705100c
34009528:	03d09000 	.word	0x03d09000

3400952c <RCCEx_GetSDMMCCLKFreq>:
{
3400952c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400952e:	f7fb ffc1 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34009532:	4b2d      	ldr	r3, [pc, #180]	@ (340095e8 <RCCEx_GetSDMMCCLKFreq+0xbc>)
34009534:	4298      	cmp	r0, r3
34009536:	d01d      	beq.n	34009574 <RCCEx_GetSDMMCCLKFreq+0x48>
34009538:	d813      	bhi.n	34009562 <RCCEx_GetSDMMCCLKFreq+0x36>
3400953a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400953e:	4298      	cmp	r0, r3
34009540:	d00b      	beq.n	3400955a <RCCEx_GetSDMMCCLKFreq+0x2e>
34009542:	d807      	bhi.n	34009554 <RCCEx_GetSDMMCCLKFreq+0x28>
34009544:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009548:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400954c:	4298      	cmp	r0, r3
3400954e:	d02a      	beq.n	340095a6 <RCCEx_GetSDMMCCLKFreq+0x7a>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34009550:	2000      	movs	r0, #0
}
34009552:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34009554:	4b25      	ldr	r3, [pc, #148]	@ (340095ec <RCCEx_GetSDMMCCLKFreq+0xc0>)
34009556:	4298      	cmp	r0, r3
34009558:	d1fa      	bne.n	34009550 <RCCEx_GetSDMMCCLKFreq+0x24>
}
3400955a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400955e:	f7ff b963 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34009562:	4b23      	ldr	r3, [pc, #140]	@ (340095f0 <RCCEx_GetSDMMCCLKFreq+0xc4>)
34009564:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34009568:	429a      	cmp	r2, r3
3400956a:	d022      	beq.n	340095b2 <RCCEx_GetSDMMCCLKFreq+0x86>
3400956c:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009570:	4298      	cmp	r0, r3
34009572:	d1ed      	bne.n	34009550 <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009574:	4b1f      	ldr	r3, [pc, #124]	@ (340095f4 <RCCEx_GetSDMMCCLKFreq+0xc8>)
34009576:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
3400957a:	f010 0008 	ands.w	r0, r0, #8
3400957e:	d0e8      	beq.n	34009552 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009580:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009584:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009588:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400958c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3400958e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC5_GetSource())
34009592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009596:	d023      	beq.n	340095e0 <RCCEx_GetSDMMCCLKFreq+0xb4>
34009598:	d819      	bhi.n	340095ce <RCCEx_GetSDMMCCLKFreq+0xa2>
3400959a:	b9f3      	cbnz	r3, 340095da <RCCEx_GetSDMMCCLKFreq+0xae>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400959c:	f7ff f844 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340095a0:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
340095a4:	e7d5      	b.n	34009552 <RCCEx_GetSDMMCCLKFreq+0x26>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340095a6:	f7fb fee5 	bl	34005374 <HAL_RCC_GetSysClockFreq>
}
340095aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340095ae:	f7fb bfe9 	b.w	34005584 <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
340095b2:	4b10      	ldr	r3, [pc, #64]	@ (340095f4 <RCCEx_GetSDMMCCLKFreq+0xc8>)
340095b4:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
340095b8:	f010 0010 	ands.w	r0, r0, #16
340095bc:	d0c9      	beq.n	34009552 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340095be:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340095c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340095c6:	f3c0 4007 	ubfx	r0, r0, #16, #8
340095ca:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340095cc:	e7df      	b.n	3400958e <RCCEx_GetSDMMCCLKFreq+0x62>
        switch (LL_RCC_IC5_GetSource())
340095ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340095d2:	d1bd      	bne.n	34009550 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340095d4:	f7ff f8e8 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
340095d8:	e7e2      	b.n	340095a0 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340095da:	f7ff f865 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
340095de:	e7df      	b.n	340095a0 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340095e0:	f7ff f8a2 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
340095e4:	e7dc      	b.n	340095a0 <RCCEx_GetSDMMCCLKFreq+0x74>
340095e6:	bf00      	nop
340095e8:	0302001c 	.word	0x0302001c
340095ec:	0301041c 	.word	0x0301041c
340095f0:	0303001c 	.word	0x0303001c
340095f4:	56028000 	.word	0x56028000

340095f8 <RCCEx_GetI2CCLKFreq>:
{
340095f8:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340095fa:	f7fb ff5b 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340095fe:	4b50      	ldr	r3, [pc, #320]	@ (34009740 <RCCEx_GetI2CCLKFreq+0x148>)
34009600:	4298      	cmp	r0, r3
34009602:	f000 8085 	beq.w	34009710 <RCCEx_GetI2CCLKFreq+0x118>
34009606:	d84b      	bhi.n	340096a0 <RCCEx_GetI2CCLKFreq+0xa8>
34009608:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
3400960c:	4298      	cmp	r0, r3
3400960e:	d01a      	beq.n	34009646 <RCCEx_GetI2CCLKFreq+0x4e>
34009610:	d81d      	bhi.n	3400964e <RCCEx_GetI2CCLKFreq+0x56>
34009612:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009616:	4298      	cmp	r0, r3
34009618:	d008      	beq.n	3400962c <RCCEx_GetI2CCLKFreq+0x34>
3400961a:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
3400961e:	d80f      	bhi.n	34009640 <RCCEx_GetI2CCLKFreq+0x48>
34009620:	4a48      	ldr	r2, [pc, #288]	@ (34009744 <RCCEx_GetI2CCLKFreq+0x14c>)
34009622:	4293      	cmp	r3, r2
34009624:	d002      	beq.n	3400962c <RCCEx_GetI2CCLKFreq+0x34>
34009626:	4b48      	ldr	r3, [pc, #288]	@ (34009748 <RCCEx_GetI2CCLKFreq+0x150>)
34009628:	4298      	cmp	r0, r3
3400962a:	d14a      	bne.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400962c:	f7fb fea2 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34009630:	f7fb ffa8 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009634:	4b45      	ldr	r3, [pc, #276]	@ (3400974c <RCCEx_GetI2CCLKFreq+0x154>)
34009636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009638:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400963c:	40d8      	lsrs	r0, r3
3400963e:	e041      	b.n	340096c4 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009640:	4a43      	ldr	r2, [pc, #268]	@ (34009750 <RCCEx_GetI2CCLKFreq+0x158>)
34009642:	4293      	cmp	r3, r2
34009644:	d13d      	bne.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
}
34009646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400964a:	f7ff b8ed 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400964e:	4b41      	ldr	r3, [pc, #260]	@ (34009754 <RCCEx_GetI2CCLKFreq+0x15c>)
34009650:	4298      	cmp	r0, r3
34009652:	d008      	beq.n	34009666 <RCCEx_GetI2CCLKFreq+0x6e>
34009654:	d820      	bhi.n	34009698 <RCCEx_GetI2CCLKFreq+0xa0>
34009656:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3400965a:	4298      	cmp	r0, r3
3400965c:	d0f3      	beq.n	34009646 <RCCEx_GetI2CCLKFreq+0x4e>
3400965e:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34009662:	4298      	cmp	r0, r3
34009664:	d12d      	bne.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34009666:	4b39      	ldr	r3, [pc, #228]	@ (3400974c <RCCEx_GetI2CCLKFreq+0x154>)
34009668:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400966c:	0592      	lsls	r2, r2, #22
3400966e:	d528      	bpl.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009670:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34009674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009678:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400967c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400967e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34009682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009686:	d057      	beq.n	34009738 <RCCEx_GetI2CCLKFreq+0x140>
34009688:	d84d      	bhi.n	34009726 <RCCEx_GetI2CCLKFreq+0x12e>
3400968a:	2b00      	cmp	r3, #0
3400968c:	d151      	bne.n	34009732 <RCCEx_GetI2CCLKFreq+0x13a>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400968e:	f7fe ffcb 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
34009692:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009696:	e015      	b.n	340096c4 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009698:	4b2f      	ldr	r3, [pc, #188]	@ (34009758 <RCCEx_GetI2CCLKFreq+0x160>)
3400969a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400969e:	e7e0      	b.n	34009662 <RCCEx_GetI2CCLKFreq+0x6a>
340096a0:	4b2e      	ldr	r3, [pc, #184]	@ (3400975c <RCCEx_GetI2CCLKFreq+0x164>)
340096a2:	4298      	cmp	r0, r3
340096a4:	d014      	beq.n	340096d0 <RCCEx_GetI2CCLKFreq+0xd8>
340096a6:	d819      	bhi.n	340096dc <RCCEx_GetI2CCLKFreq+0xe4>
340096a8:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340096ac:	4298      	cmp	r0, r3
340096ae:	d02f      	beq.n	34009710 <RCCEx_GetI2CCLKFreq+0x118>
340096b0:	d809      	bhi.n	340096c6 <RCCEx_GetI2CCLKFreq+0xce>
340096b2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340096b6:	4298      	cmp	r0, r3
340096b8:	d02a      	beq.n	34009710 <RCCEx_GetI2CCLKFreq+0x118>
340096ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340096be:	4298      	cmp	r0, r3
340096c0:	d026      	beq.n	34009710 <RCCEx_GetI2CCLKFreq+0x118>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
340096c2:	2000      	movs	r0, #0
}
340096c4:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340096c6:	4b26      	ldr	r3, [pc, #152]	@ (34009760 <RCCEx_GetI2CCLKFreq+0x168>)
340096c8:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340096cc:	4298      	cmp	r0, r3
340096ce:	d1f8      	bne.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_MSI_IsReady() != 0U)
340096d0:	f7fb fece 	bl	34005470 <LL_RCC_MSI_IsReady>
340096d4:	2800      	cmp	r0, #0
340096d6:	d0f4      	beq.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
        i2c_frequency = MSI_VALUE;
340096d8:	4822      	ldr	r0, [pc, #136]	@ (34009764 <RCCEx_GetI2CCLKFreq+0x16c>)
  return i2c_frequency;
340096da:	e7f3      	b.n	340096c4 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340096dc:	4b22      	ldr	r3, [pc, #136]	@ (34009768 <RCCEx_GetI2CCLKFreq+0x170>)
340096de:	4298      	cmp	r0, r3
340096e0:	d008      	beq.n	340096f4 <RCCEx_GetI2CCLKFreq+0xfc>
340096e2:	d811      	bhi.n	34009708 <RCCEx_GetI2CCLKFreq+0x110>
340096e4:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
340096e8:	4298      	cmp	r0, r3
340096ea:	d0f1      	beq.n	340096d0 <RCCEx_GetI2CCLKFreq+0xd8>
340096ec:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
340096f0:	4298      	cmp	r0, r3
340096f2:	d1e6      	bne.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_HSI_IsReady() != 0U)
340096f4:	f7fb feb4 	bl	34005460 <LL_RCC_HSI_IsReady>
340096f8:	2800      	cmp	r0, #0
340096fa:	d0e2      	beq.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340096fc:	4b13      	ldr	r3, [pc, #76]	@ (3400974c <RCCEx_GetI2CCLKFreq+0x154>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340096fe:	481b      	ldr	r0, [pc, #108]	@ (3400976c <RCCEx_GetI2CCLKFreq+0x174>)
34009700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34009702:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009706:	e799      	b.n	3400963c <RCCEx_GetI2CCLKFreq+0x44>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009708:	4b19      	ldr	r3, [pc, #100]	@ (34009770 <RCCEx_GetI2CCLKFreq+0x178>)
3400970a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400970e:	e7ef      	b.n	340096f0 <RCCEx_GetI2CCLKFreq+0xf8>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34009710:	f7fb ff26 	bl	34005560 <LL_RCC_IC15_IsEnabled>
34009714:	2800      	cmp	r0, #0
34009716:	d0d4      	beq.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
        ic_divider = LL_RCC_IC15_GetDivider();
34009718:	f7fb ff2a 	bl	34005570 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400971c:	4b0b      	ldr	r3, [pc, #44]	@ (3400974c <RCCEx_GetI2CCLKFreq+0x154>)
3400971e:	4604      	mov	r4, r0
34009720:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34009724:	e7ab      	b.n	3400967e <RCCEx_GetI2CCLKFreq+0x86>
        switch (LL_RCC_IC15_GetSource())
34009726:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400972a:	d1ca      	bne.n	340096c2 <RCCEx_GetI2CCLKFreq+0xca>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400972c:	f7ff f83c 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34009730:	e7af      	b.n	34009692 <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009732:	f7fe ffb9 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
34009736:	e7ac      	b.n	34009692 <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009738:	f7fe fff6 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
3400973c:	e7a9      	b.n	34009692 <RCCEx_GetI2CCLKFreq+0x9a>
3400973e:	bf00      	nop
34009740:	0703000c 	.word	0x0703000c
34009744:	0700000c 	.word	0x0700000c
34009748:	0700080c 	.word	0x0700080c
3400974c:	56028000 	.word	0x56028000
34009750:	0701000c 	.word	0x0701000c
34009754:	0702040c 	.word	0x0702040c
34009758:	0702080c 	.word	0x0702080c
3400975c:	0704080c 	.word	0x0704080c
34009760:	0704000c 	.word	0x0704000c
34009764:	003d0900 	.word	0x003d0900
34009768:	0705040c 	.word	0x0705040c
3400976c:	03d09000 	.word	0x03d09000
34009770:	0705080c 	.word	0x0705080c

34009774 <RCCEx_GetLPTIMCLKFreq>:
{
34009774:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009776:	f7fb fe9d 	bl	340054b4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400977a:	4b63      	ldr	r3, [pc, #396]	@ (34009908 <RCCEx_GetLPTIMCLKFreq+0x194>)
3400977c:	4298      	cmp	r0, r3
3400977e:	d03a      	beq.n	340097f6 <RCCEx_GetLPTIMCLKFreq+0x82>
34009780:	d850      	bhi.n	34009824 <RCCEx_GetLPTIMCLKFreq+0xb0>
34009782:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34009786:	4298      	cmp	r0, r3
34009788:	f000 80a7 	beq.w	340098da <RCCEx_GetLPTIMCLKFreq+0x166>
3400978c:	d813      	bhi.n	340097b6 <RCCEx_GetLPTIMCLKFreq+0x42>
3400978e:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34009792:	4298      	cmp	r0, r3
34009794:	f000 8097 	beq.w	340098c6 <RCCEx_GetLPTIMCLKFreq+0x152>
34009798:	3b01      	subs	r3, #1
3400979a:	4298      	cmp	r0, r3
3400979c:	d909      	bls.n	340097b2 <RCCEx_GetLPTIMCLKFreq+0x3e>
3400979e:	f203 4301 	addw	r3, r3, #1025	@ 0x401
340097a2:	4298      	cmp	r0, r3
340097a4:	f000 8099 	beq.w	340098da <RCCEx_GetLPTIMCLKFreq+0x166>
340097a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340097ac:	4298      	cmp	r0, r3
340097ae:	f000 8094 	beq.w	340098da <RCCEx_GetLPTIMCLKFreq+0x166>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
340097b2:	2000      	movs	r0, #0
}
340097b4:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340097b6:	4b55      	ldr	r3, [pc, #340]	@ (3400990c <RCCEx_GetLPTIMCLKFreq+0x198>)
340097b8:	4298      	cmp	r0, r3
340097ba:	d015      	beq.n	340097e8 <RCCEx_GetLPTIMCLKFreq+0x74>
340097bc:	d808      	bhi.n	340097d0 <RCCEx_GetLPTIMCLKFreq+0x5c>
340097be:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340097c2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340097c6:	429a      	cmp	r2, r3
340097c8:	d00e      	beq.n	340097e8 <RCCEx_GetLPTIMCLKFreq+0x74>
340097ca:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
340097ce:	e7ed      	b.n	340097ac <RCCEx_GetLPTIMCLKFreq+0x38>
340097d0:	4b4f      	ldr	r3, [pc, #316]	@ (34009910 <RCCEx_GetLPTIMCLKFreq+0x19c>)
340097d2:	4298      	cmp	r0, r3
340097d4:	d00f      	beq.n	340097f6 <RCCEx_GetLPTIMCLKFreq+0x82>
340097d6:	d80b      	bhi.n	340097f0 <RCCEx_GetLPTIMCLKFreq+0x7c>
340097d8:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340097dc:	4298      	cmp	r0, r3
340097de:	d003      	beq.n	340097e8 <RCCEx_GetLPTIMCLKFreq+0x74>
340097e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340097e4:	4298      	cmp	r0, r3
340097e6:	d1e4      	bne.n	340097b2 <RCCEx_GetLPTIMCLKFreq+0x3e>
}
340097e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340097ec:	f7ff b81c 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340097f0:	4b48      	ldr	r3, [pc, #288]	@ (34009914 <RCCEx_GetLPTIMCLKFreq+0x1a0>)
340097f2:	4298      	cmp	r0, r3
340097f4:	d1dd      	bne.n	340097b2 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340097f6:	f7fb feb3 	bl	34005560 <LL_RCC_IC15_IsEnabled>
340097fa:	2800      	cmp	r0, #0
340097fc:	d0d9      	beq.n	340097b2 <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
340097fe:	f7fb feb7 	bl	34005570 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009802:	4b45      	ldr	r3, [pc, #276]	@ (34009918 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009804:	4604      	mov	r4, r0
34009806:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400980a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3400980e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009812:	d075      	beq.n	34009900 <RCCEx_GetLPTIMCLKFreq+0x18c>
34009814:	d86a      	bhi.n	340098ec <RCCEx_GetLPTIMCLKFreq+0x178>
34009816:	2b00      	cmp	r3, #0
34009818:	d16f      	bne.n	340098fa <RCCEx_GetLPTIMCLKFreq+0x186>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400981a:	f7fe ff05 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
3400981e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009822:	e7c7      	b.n	340097b4 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009824:	4b3d      	ldr	r3, [pc, #244]	@ (3400991c <RCCEx_GetLPTIMCLKFreq+0x1a8>)
34009826:	4298      	cmp	r0, r3
34009828:	d034      	beq.n	34009894 <RCCEx_GetLPTIMCLKFreq+0x120>
3400982a:	d824      	bhi.n	34009876 <RCCEx_GetLPTIMCLKFreq+0x102>
3400982c:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009830:	4298      	cmp	r0, r3
34009832:	d00f      	beq.n	34009854 <RCCEx_GetLPTIMCLKFreq+0xe0>
34009834:	d815      	bhi.n	34009862 <RCCEx_GetLPTIMCLKFreq+0xee>
34009836:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400983a:	4298      	cmp	r0, r3
3400983c:	d00a      	beq.n	34009854 <RCCEx_GetLPTIMCLKFreq+0xe0>
3400983e:	d806      	bhi.n	3400984e <RCCEx_GetLPTIMCLKFreq+0xda>
34009840:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009844:	4298      	cmp	r0, r3
34009846:	d0d6      	beq.n	340097f6 <RCCEx_GetLPTIMCLKFreq+0x82>
34009848:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400984c:	e7d1      	b.n	340097f2 <RCCEx_GetLPTIMCLKFreq+0x7e>
3400984e:	4b34      	ldr	r3, [pc, #208]	@ (34009920 <RCCEx_GetLPTIMCLKFreq+0x1ac>)
34009850:	4298      	cmp	r0, r3
34009852:	d1ae      	bne.n	340097b2 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
34009854:	f7fb fe14 	bl	34005480 <LL_RCC_LSE_IsReady>
34009858:	3800      	subs	r0, #0
3400985a:	bf18      	it	ne
3400985c:	2001      	movne	r0, #1
3400985e:	03c0      	lsls	r0, r0, #15
34009860:	e7a8      	b.n	340097b4 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009862:	4b30      	ldr	r3, [pc, #192]	@ (34009924 <RCCEx_GetLPTIMCLKFreq+0x1b0>)
34009864:	4298      	cmp	r0, r3
34009866:	d0f5      	beq.n	34009854 <RCCEx_GetLPTIMCLKFreq+0xe0>
34009868:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
3400986c:	4298      	cmp	r0, r3
3400986e:	d011      	beq.n	34009894 <RCCEx_GetLPTIMCLKFreq+0x120>
34009870:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009874:	e7ec      	b.n	34009850 <RCCEx_GetLPTIMCLKFreq+0xdc>
34009876:	4b2c      	ldr	r3, [pc, #176]	@ (34009928 <RCCEx_GetLPTIMCLKFreq+0x1b4>)
34009878:	4298      	cmp	r0, r3
3400987a:	d015      	beq.n	340098a8 <RCCEx_GetLPTIMCLKFreq+0x134>
3400987c:	d81b      	bhi.n	340098b6 <RCCEx_GetLPTIMCLKFreq+0x142>
3400987e:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009882:	4298      	cmp	r0, r3
34009884:	d006      	beq.n	34009894 <RCCEx_GetLPTIMCLKFreq+0x120>
34009886:	d80c      	bhi.n	340098a2 <RCCEx_GetLPTIMCLKFreq+0x12e>
34009888:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400988c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34009890:	4298      	cmp	r0, r3
34009892:	d18e      	bne.n	340097b2 <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34009894:	4b20      	ldr	r3, [pc, #128]	@ (34009918 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009896:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34009898:	07db      	lsls	r3, r3, #31
3400989a:	d58a      	bpl.n	340097b2 <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
3400989c:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
340098a0:	e788      	b.n	340097b4 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340098a2:	4b22      	ldr	r3, [pc, #136]	@ (3400992c <RCCEx_GetLPTIMCLKFreq+0x1b8>)
340098a4:	4298      	cmp	r0, r3
340098a6:	d184      	bne.n	340097b2 <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340098a8:	f7fb fd64 	bl	34005374 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
340098ac:	4b1a      	ldr	r3, [pc, #104]	@ (34009918 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340098b0:	f3c3 6301 	ubfx	r3, r3, #24, #2
340098b4:	e00f      	b.n	340098d6 <RCCEx_GetLPTIMCLKFreq+0x162>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340098b6:	4b1e      	ldr	r3, [pc, #120]	@ (34009930 <RCCEx_GetLPTIMCLKFreq+0x1bc>)
340098b8:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340098bc:	429a      	cmp	r2, r3
340098be:	d0f3      	beq.n	340098a8 <RCCEx_GetLPTIMCLKFreq+0x134>
340098c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340098c4:	e7ee      	b.n	340098a4 <RCCEx_GetLPTIMCLKFreq+0x130>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340098c6:	f7fb fd55 	bl	34005374 <HAL_RCC_GetSysClockFreq>
340098ca:	f7fb fe5b 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340098ce:	4b12      	ldr	r3, [pc, #72]	@ (34009918 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340098d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340098d2:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
340098d6:	40d8      	lsrs	r0, r3
      break;
340098d8:	e76c      	b.n	340097b4 <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340098da:	f7fb fd4b 	bl	34005374 <HAL_RCC_GetSysClockFreq>
340098de:	f7fb fe51 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
340098e2:	4b0d      	ldr	r3, [pc, #52]	@ (34009918 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340098e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
340098e6:	f3c3 3302 	ubfx	r3, r3, #12, #3
340098ea:	e7f4      	b.n	340098d6 <RCCEx_GetLPTIMCLKFreq+0x162>
        switch (LL_RCC_IC15_GetSource())
340098ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340098f0:	f47f af5f 	bne.w	340097b2 <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340098f4:	f7fe ff58 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
340098f8:	e791      	b.n	3400981e <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340098fa:	f7fe fed5 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
340098fe:	e78e      	b.n	3400981e <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009900:	f7fe ff12 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
34009904:	e78b      	b.n	3400981e <RCCEx_GetLPTIMCLKFreq+0xaa>
34009906:	bf00      	nop
34009908:	0702102c 	.word	0x0702102c
3400990c:	0701102c 	.word	0x0701102c
34009910:	0702082c 	.word	0x0702082c
34009914:	07020c2c 	.word	0x07020c2c
34009918:	56028000 	.word	0x56028000
3400991c:	07040c2c 	.word	0x07040c2c
34009920:	07030c2c 	.word	0x07030c2c
34009924:	0703182c 	.word	0x0703182c
34009928:	07050c2c 	.word	0x07050c2c
3400992c:	0705082c 	.word	0x0705082c
34009930:	0705102c 	.word	0x0705102c

34009934 <HAL_RCCEx_GetPeriphCLKFreq>:
{
34009934:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
34009936:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
3400993a:	430b      	orrs	r3, r1
3400993c:	f000 8447 	beq.w	3400a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
34009940:	4bbf      	ldr	r3, [pc, #764]	@ (34009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
34009942:	4298      	cmp	r0, r3
34009944:	f171 0300 	sbcs.w	r3, r1, #0
34009948:	f080 80e6 	bcs.w	34009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
3400994c:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
34009950:	430b      	orrs	r3, r1
34009952:	f000 835b 	beq.w	3400a00c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34009956:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
3400995a:	f171 0300 	sbcs.w	r3, r1, #0
3400995e:	d26a      	bcs.n	34009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
34009960:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
34009964:	430b      	orrs	r3, r1
34009966:	f000 82b9 	beq.w	34009edc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
3400996a:	f240 2301 	movw	r3, #513	@ 0x201
3400996e:	4298      	cmp	r0, r3
34009970:	f171 0300 	sbcs.w	r3, r1, #0
34009974:	d224      	bcs.n	340099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
34009976:	2809      	cmp	r0, #9
34009978:	f171 0300 	sbcs.w	r3, r1, #0
3400997c:	d215      	bcs.n	340099aa <HAL_RCCEx_GetPeriphCLKFreq+0x76>
3400997e:	ea50 0301 	orrs.w	r3, r0, r1
34009982:	d01b      	beq.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34009984:	3801      	subs	r0, #1
34009986:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
3400998a:	2808      	cmp	r0, #8
3400998c:	f171 0100 	sbcs.w	r1, r1, #0
34009990:	d214      	bcs.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34009992:	2807      	cmp	r0, #7
34009994:	d812      	bhi.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34009996:	e8df f010 	tbh	[pc, r0, lsl #1]
3400999a:	01a6      	.short	0x01a6
3400999c:	0011020f 	.word	0x0011020f
340099a0:	00110285 	.word	0x00110285
340099a4:	00110011 	.word	0x00110011
340099a8:	0235      	.short	0x0235
340099aa:	f1a0 0310 	sub.w	r3, r0, #16
340099ae:	430b      	orrs	r3, r1
340099b0:	f000 8242 	beq.w	34009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
340099b4:	3820      	subs	r0, #32
340099b6:	4308      	orrs	r0, r1
340099b8:	f000 8268 	beq.w	34009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
340099bc:	2000      	movs	r0, #0
340099be:	e219      	b.n	34009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
340099c0:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
340099c4:	430b      	orrs	r3, r1
340099c6:	f000 831d 	beq.w	3400a004 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
340099ca:	f242 0301 	movw	r3, #8193	@ 0x2001
340099ce:	4298      	cmp	r0, r3
340099d0:	f171 0300 	sbcs.w	r3, r1, #0
340099d4:	d224      	bcs.n	34009a20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
340099d6:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
340099da:	430b      	orrs	r3, r1
340099dc:	f000 82df 	beq.w	34009f9e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
340099e0:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
340099e4:	430b      	orrs	r3, r1
340099e6:	f000 8308 	beq.w	34009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
340099ea:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
340099ee:	4308      	orrs	r0, r1
340099f0:	d1e4      	bne.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
340099f2:	4d94      	ldr	r5, [pc, #592]	@ (34009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
340099f4:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
340099f8:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
340099fc:	2b02      	cmp	r3, #2
340099fe:	f000 82c1 	beq.w	34009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
34009a02:	2b03      	cmp	r3, #3
34009a04:	f000 8256 	beq.w	34009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
34009a08:	2b01      	cmp	r3, #1
34009a0a:	f000 824b 	beq.w	34009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009a0e:	f7fb fcb1 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34009a12:	f7fb fdb7 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009a16:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009a18:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009a1c:	40d8      	lsrs	r0, r3
34009a1e:	e1e9      	b.n	34009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
34009a20:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
34009a24:	430b      	orrs	r3, r1
34009a26:	f000 82ef 	beq.w	3400a008 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
34009a2a:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
34009a2e:	4308      	orrs	r0, r1
34009a30:	d1c4      	bne.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34009a32:	4885      	ldr	r0, [pc, #532]	@ (34009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
34009a34:	e2e2      	b.n	34009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
  switch (PeriphClk)
34009a36:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
34009a3a:	430b      	orrs	r3, r1
34009a3c:	f000 82f6 	beq.w	3400a02c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
34009a40:	4b82      	ldr	r3, [pc, #520]	@ (34009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
34009a42:	4298      	cmp	r0, r3
34009a44:	f171 0300 	sbcs.w	r3, r1, #0
34009a48:	d224      	bcs.n	34009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
34009a4a:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
34009a4e:	430b      	orrs	r3, r1
34009a50:	f000 82e8 	beq.w	3400a024 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
34009a54:	4b7e      	ldr	r3, [pc, #504]	@ (34009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
34009a56:	4298      	cmp	r0, r3
34009a58:	f171 0300 	sbcs.w	r3, r1, #0
34009a5c:	d20f      	bcs.n	34009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
34009a5e:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
34009a62:	430b      	orrs	r3, r1
34009a64:	f000 82d7 	beq.w	3400a016 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34009a68:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
34009a6c:	430b      	orrs	r3, r1
34009a6e:	f000 82d7 	beq.w	3400a020 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34009a72:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
34009a76:	4308      	orrs	r0, r1
34009a78:	d1a0      	bne.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34009a7a:	4876      	ldr	r0, [pc, #472]	@ (34009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
34009a7c:	e2c7      	b.n	3400a00e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
  switch (PeriphClk)
34009a7e:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
34009a82:	430b      	orrs	r3, r1
34009a84:	f000 82d0 	beq.w	3400a028 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
34009a88:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
34009a8c:	4308      	orrs	r0, r1
34009a8e:	d195      	bne.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34009a90:	4871      	ldr	r0, [pc, #452]	@ (34009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
34009a92:	e2c1      	b.n	3400a018 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  switch (PeriphClk)
34009a94:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
34009a98:	430b      	orrs	r3, r1
34009a9a:	f000 834d 	beq.w	3400a138 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
34009a9e:	4b6f      	ldr	r3, [pc, #444]	@ (34009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
34009aa0:	4298      	cmp	r0, r3
34009aa2:	f171 0300 	sbcs.w	r3, r1, #0
34009aa6:	d228      	bcs.n	34009afa <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
34009aa8:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
34009aac:	430b      	orrs	r3, r1
34009aae:	f000 8302 	beq.w	3400a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
34009ab2:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
34009ab6:	4308      	orrs	r0, r1
34009ab8:	d180      	bne.n	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34009aba:	4d62      	ldr	r5, [pc, #392]	@ (34009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34009abc:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
34009ac0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009ac4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34009ac8:	f000 8195 	beq.w	34009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34009acc:	f200 8319 	bhi.w	3400a102 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
34009ad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009ad4:	f000 831f 	beq.w	3400a116 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
34009ad8:	f240 81e1 	bls.w	34009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34009adc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34009ae0:	f47f af6c 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009ae4:	f7fb fd06 	bl	340054f4 <LL_RCC_IC8_IsEnabled>
34009ae8:	2800      	cmp	r0, #0
34009aea:	f43f af67 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
34009aee:	f7fb fd09 	bl	34005504 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009af2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34009af6:	4604      	mov	r4, r0
34009af8:	e191      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (PeriphClk)
34009afa:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
34009afe:	430b      	orrs	r3, r1
34009b00:	f000 8344 	beq.w	3400a18c <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34009b04:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
34009b08:	4308      	orrs	r0, r1
34009b0a:	f47f af57 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34009b0e:	4854      	ldr	r0, [pc, #336]	@ (34009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
}
34009b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34009b14:	f7ff bbd6 	b.w	340092c4 <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
34009b18:	2300      	movs	r3, #0
34009b1a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34009b1e:	4291      	cmp	r1, r2
34009b20:	bf08      	it	eq
34009b22:	4298      	cmpeq	r0, r3
34009b24:	f000 836f 	beq.w	3400a206 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
34009b28:	4283      	cmp	r3, r0
34009b2a:	418a      	sbcs	r2, r1
34009b2c:	d35f      	bcc.n	34009bee <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
34009b2e:	2210      	movs	r2, #16
34009b30:	4291      	cmp	r1, r2
34009b32:	bf08      	it	eq
34009b34:	4298      	cmpeq	r0, r3
34009b36:	f000 8359 	beq.w	3400a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
34009b3a:	4283      	cmp	r3, r0
34009b3c:	418a      	sbcs	r2, r1
34009b3e:	d329      	bcc.n	34009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
34009b40:	2202      	movs	r2, #2
34009b42:	4291      	cmp	r1, r2
34009b44:	bf08      	it	eq
34009b46:	4298      	cmpeq	r0, r3
34009b48:	f000 8349 	beq.w	3400a1de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
34009b4c:	4283      	cmp	r3, r0
34009b4e:	418a      	sbcs	r2, r1
34009b50:	d314      	bcc.n	34009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
34009b52:	4299      	cmp	r1, r3
34009b54:	bf08      	it	eq
34009b56:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
34009b5a:	f000 833a 	beq.w	3400a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
34009b5e:	2901      	cmp	r1, #1
34009b60:	bf08      	it	eq
34009b62:	4298      	cmpeq	r0, r3
34009b64:	f000 8337 	beq.w	3400a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
34009b68:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
34009b6c:	4308      	orrs	r0, r1
34009b6e:	f47f af25 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34009b72:	483c      	ldr	r0, [pc, #240]	@ (34009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
}
34009b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34009b78:	f7ff bcd8 	b.w	3400952c <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
34009b7c:	2904      	cmp	r1, #4
34009b7e:	bf08      	it	eq
34009b80:	4298      	cmpeq	r0, r3
34009b82:	f000 8331 	beq.w	3400a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
34009b86:	2908      	cmp	r1, #8
34009b88:	bf08      	it	eq
34009b8a:	4298      	cmpeq	r0, r3
34009b8c:	f47f af16 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34009b90:	4835      	ldr	r0, [pc, #212]	@ (34009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
34009b92:	e325      	b.n	3400a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34009b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
34009b98:	4291      	cmp	r1, r2
34009b9a:	bf08      	it	eq
34009b9c:	4298      	cmpeq	r0, r3
34009b9e:	f000 832e 	beq.w	3400a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
34009ba2:	4283      	cmp	r3, r0
34009ba4:	418a      	sbcs	r2, r1
34009ba6:	d311      	bcc.n	34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x298>
34009ba8:	2940      	cmp	r1, #64	@ 0x40
34009baa:	bf08      	it	eq
34009bac:	4298      	cmpeq	r0, r3
34009bae:	f000 831f 	beq.w	3400a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
34009bb2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
34009bb6:	bf08      	it	eq
34009bb8:	4298      	cmpeq	r0, r3
34009bba:	f000 831b 	beq.w	3400a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
34009bbe:	2920      	cmp	r1, #32
34009bc0:	bf08      	it	eq
34009bc2:	2800      	cmpeq	r0, #0
34009bc4:	f47f aefa 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34009bc8:	4828      	ldr	r0, [pc, #160]	@ (34009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
34009bca:	e309      	b.n	3400a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34009bcc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
34009bd0:	bf08      	it	eq
34009bd2:	4298      	cmpeq	r0, r3
34009bd4:	f000 8315 	beq.w	3400a202 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
34009bd8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
34009bdc:	bf08      	it	eq
34009bde:	4298      	cmpeq	r0, r3
34009be0:	f47f aeec 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34009be4:	4822      	ldr	r0, [pc, #136]	@ (34009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
}
34009be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34009bea:	f7ff b919 	b.w	34008e20 <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
34009bee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34009bf2:	4291      	cmp	r1, r2
34009bf4:	bf08      	it	eq
34009bf6:	4298      	cmpeq	r0, r3
34009bf8:	f000 830f 	beq.w	3400a21a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
34009bfc:	4283      	cmp	r3, r0
34009bfe:	418a      	sbcs	r2, r1
34009c00:	d34b      	bcc.n	34009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
34009c02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34009c06:	4291      	cmp	r1, r2
34009c08:	bf08      	it	eq
34009c0a:	4298      	cmpeq	r0, r3
34009c0c:	f000 8301 	beq.w	3400a212 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
34009c10:	4283      	cmp	r3, r0
34009c12:	418a      	sbcs	r2, r1
34009c14:	d330      	bcc.n	34009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
34009c16:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
34009c1a:	bf08      	it	eq
34009c1c:	4298      	cmpeq	r0, r3
34009c1e:	f000 82f4 	beq.w	3400a20a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
34009c22:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
34009c26:	bf08      	it	eq
34009c28:	4298      	cmpeq	r0, r3
34009c2a:	f000 82f0 	beq.w	3400a20e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
34009c2e:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
34009c32:	bf08      	it	eq
34009c34:	2800      	cmpeq	r0, #0
34009c36:	f47f aec1 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34009c3a:	480e      	ldr	r0, [pc, #56]	@ (34009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
34009c3c:	e2db      	b.n	3400a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
34009c3e:	bf00      	nop
34009c40:	20000001 	.word	0x20000001
34009c44:	56028000 	.word	0x56028000
34009c48:	07000c0c 	.word	0x07000c0c
34009c4c:	00800001 	.word	0x00800001
34009c50:	00100001 	.word	0x00100001
34009c54:	0700140c 	.word	0x0700140c
34009c58:	0700182c 	.word	0x0700182c
34009c5c:	04000001 	.word	0x04000001
34009c60:	07001418 	.word	0x07001418
34009c64:	0300001c 	.word	0x0300001c
34009c68:	07000c20 	.word	0x07000c20
34009c6c:	07001420 	.word	0x07001420
34009c70:	07000c30 	.word	0x07000c30
34009c74:	07001430 	.word	0x07001430
  switch (PeriphClk)
34009c78:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
34009c7c:	bf08      	it	eq
34009c7e:	4298      	cmpeq	r0, r3
34009c80:	f000 82c9 	beq.w	3400a216 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
34009c84:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
34009c88:	bf08      	it	eq
34009c8a:	4298      	cmpeq	r0, r3
34009c8c:	f47f ae96 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34009c90:	48b4      	ldr	r0, [pc, #720]	@ (34009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
}
34009c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34009c96:	f7fe bf8d 	b.w	34008bb4 <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
34009c9a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
34009c9e:	4291      	cmp	r1, r2
34009ca0:	bf08      	it	eq
34009ca2:	4298      	cmpeq	r0, r3
34009ca4:	f000 82c0 	beq.w	3400a228 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
34009ca8:	4283      	cmp	r3, r0
34009caa:	418a      	sbcs	r2, r1
34009cac:	d30d      	bcc.n	34009cca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
34009cae:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
34009cb2:	bf08      	it	eq
34009cb4:	4298      	cmpeq	r0, r3
34009cb6:	f000 82b5 	beq.w	3400a224 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
34009cba:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
34009cbe:	bf08      	it	eq
34009cc0:	4298      	cmpeq	r0, r3
34009cc2:	f47f ae7b 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34009cc6:	48a8      	ldr	r0, [pc, #672]	@ (34009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
34009cc8:	e2a8      	b.n	3400a21c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  switch (PeriphClk)
34009cca:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34009cce:	bf08      	it	eq
34009cd0:	4298      	cmpeq	r0, r3
34009cd2:	f000 82ae 	beq.w	3400a232 <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
34009cd6:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
34009cda:	bf08      	it	eq
34009cdc:	4298      	cmpeq	r0, r3
34009cde:	f47f ae6d 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34009ce2:	48a2      	ldr	r0, [pc, #648]	@ (34009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
34009ce4:	e2a1      	b.n	3400a22a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34009ce6:	4da2      	ldr	r5, [pc, #648]	@ (34009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009ce8:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009cec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009cf0:	2b40      	cmp	r3, #64	@ 0x40
34009cf2:	d053      	beq.n	34009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
34009cf4:	d814      	bhi.n	34009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
34009cf6:	2b20      	cmp	r3, #32
34009cf8:	d025      	beq.n	34009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
34009cfa:	d805      	bhi.n	34009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
34009cfc:	bb03      	cbnz	r3, 34009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009cfe:	f7fb fb39 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34009d02:	f7fb fc3f 	bl	34005584 <RCCEx_GetHCLKFreq>
      break;
34009d06:	e002      	b.n	34009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009d08:	2b30      	cmp	r3, #48	@ 0x30
34009d0a:	d034      	beq.n	34009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34009d0c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34009d0e:	4b98      	ldr	r3, [pc, #608]	@ (34009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009d10:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34009d14:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34009d18:	3301      	adds	r3, #1
34009d1a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
34009d1e:	e069      	b.n	34009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009d20:	2b60      	cmp	r3, #96	@ 0x60
34009d22:	d047      	beq.n	34009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
34009d24:	2b70      	cmp	r3, #112	@ 0x70
34009d26:	d03f      	beq.n	34009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
34009d28:	2b50      	cmp	r3, #80	@ 0x50
34009d2a:	d1ef      	bne.n	34009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34009d2c:	f7fb fb98 	bl	34005460 <LL_RCC_HSI_IsReady>
34009d30:	2800      	cmp	r0, #0
34009d32:	d0eb      	beq.n	34009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009d34:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009d36:	488f      	ldr	r0, [pc, #572]	@ (34009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
34009d38:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009d3c:	40d8      	lsrs	r0, r3
      break;
34009d3e:	e7e6      	b.n	34009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009d40:	f7fe fd72 	bl	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34009d44:	e7e3      	b.n	34009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34009d46:	f7fb fbc3 	bl	340054d0 <LL_RCC_IC7_IsEnabled>
34009d4a:	2800      	cmp	r0, #0
34009d4c:	d0de      	beq.n	34009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC7_GetDivider();
34009d4e:	f7fb fbc7 	bl	340054e0 <LL_RCC_IC7_GetDivider>
34009d52:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009d54:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009d58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34009d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009d60:	d019      	beq.n	34009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
34009d62:	d812      	bhi.n	34009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
34009d64:	b913      	cbnz	r3, 34009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009d66:	f7fe fc5f 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
34009d6a:	e001      	b.n	34009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009d6c:	f7fe fc9c 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
34009d70:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009d74:	e7cb      	b.n	34009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009d76:	f7fb fbbd 	bl	340054f4 <LL_RCC_IC8_IsEnabled>
34009d7a:	2800      	cmp	r0, #0
34009d7c:	d0c6      	beq.n	34009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34009d7e:	f7fb fbc1 	bl	34005504 <LL_RCC_IC8_GetDivider>
34009d82:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34009d86:	4604      	mov	r4, r0
34009d88:	e7e6      	b.n	34009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
        switch (LL_RCC_IC8_GetSource())
34009d8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009d8e:	d1bd      	bne.n	34009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009d90:	f7fe fd0a 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34009d94:	e7ec      	b.n	34009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009d96:	f7fe fcc7 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
34009d9a:	e7e9      	b.n	34009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
      if (LL_RCC_MSI_IsReady() != 0U)
34009d9c:	f7fb fb68 	bl	34005470 <LL_RCC_MSI_IsReady>
34009da0:	2800      	cmp	r0, #0
34009da2:	d0b3      	beq.n	34009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        adc_frequency = MSI_VALUE;
34009da4:	4874      	ldr	r0, [pc, #464]	@ (34009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34009da6:	e7b2      	b.n	34009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009da8:	f7fb fae4 	bl	34005374 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009dac:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009dae:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009db2:	e7c3      	b.n	34009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x408>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009db4:	4871      	ldr	r0, [pc, #452]	@ (34009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x648>)
34009db6:	e7aa      	b.n	34009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34009db8:	4d6d      	ldr	r5, [pc, #436]	@ (34009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009dba:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009dbe:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
34009dc2:	3b01      	subs	r3, #1
34009dc4:	2b06      	cmp	r3, #6
34009dc6:	f200 80f5 	bhi.w	34009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
34009dca:	a201      	add	r2, pc, #4	@ (adr r2, 34009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>)
34009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34009dd0:	34009ea5 	.word	0x34009ea5
34009dd4:	3400a117 	.word	0x3400a117
34009dd8:	34009ae5 	.word	0x34009ae5
34009ddc:	34009df7 	.word	0x34009df7
34009de0:	34009e65 	.word	0x34009e65
34009de4:	3400a237 	.word	0x3400a237
34009de8:	3400a12d 	.word	0x3400a12d
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009dec:	f7fe fc5c 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34009df0:	fbb0 f0f4 	udiv	r0, r0, r4
}
34009df4:	bd38      	pop	{r3, r4, r5, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34009df6:	f7fb fb3b 	bl	34005470 <LL_RCC_MSI_IsReady>
34009dfa:	2800      	cmp	r0, #0
34009dfc:	f43f adde 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
34009e00:	485d      	ldr	r0, [pc, #372]	@ (34009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34009e02:	e7f7      	b.n	34009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34009e04:	4b5a      	ldr	r3, [pc, #360]	@ (34009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009e06:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009e0a:	0395      	lsls	r5, r2, #14
34009e0c:	f57f add6 	bpl.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009e10:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34009e14:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009e18:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009e1c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009e1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC20_GetSource())
34009e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009e26:	f000 81ae 	beq.w	3400a186 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
34009e2a:	f200 81a5 	bhi.w	3400a178 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34009e2e:	2b00      	cmp	r3, #0
34009e30:	d1dc      	bne.n	34009dec <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009e32:	f7fe fbf9 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
34009e36:	e7db      	b.n	34009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34009e38:	4d4d      	ldr	r5, [pc, #308]	@ (34009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009e3a:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009e3e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009e42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34009e46:	d014      	beq.n	34009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
34009e48:	d808      	bhi.n	34009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34009e4a:	bb5b      	cbnz	r3, 34009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009e4c:	f7fb fa92 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34009e50:	f7fb fb98 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34009e54:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34009e56:	f3c3 4302 	ubfx	r3, r3, #16, #3
34009e5a:	e5df      	b.n	34009a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009e5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009e60:	f47f adac 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009e64:	f7fb fafc 	bl	34005460 <LL_RCC_HSI_IsReady>
34009e68:	2800      	cmp	r0, #0
34009e6a:	f43f ada7 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009e6e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
34009e70:	e136      	b.n	3400a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34009e72:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009e76:	03dc      	lsls	r4, r3, #15
34009e78:	f57f ada0 	bpl.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009e7c:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009e80:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009e84:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009e88:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009e8a:	e7c8      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34009e8c:	4a38      	ldr	r2, [pc, #224]	@ (34009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009e8e:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009e92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34009e9a:	d012      	beq.n	34009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
34009e9c:	d806      	bhi.n	34009eac <HAL_RCCEx_GetPeriphCLKFreq+0x578>
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009e9e:	2b00      	cmp	r3, #0
34009ea0:	f000 8088 	beq.w	34009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
}
34009ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009ea8:	f7fe bcbe 	b.w	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009eac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34009eb0:	f47f ad84 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
34009eb4:	f7fb facc 	bl	34005450 <LL_RCC_HSE_IsReady>
34009eb8:	2800      	cmp	r0, #0
34009eba:	f43f ad7f 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
34009ebe:	4830      	ldr	r0, [pc, #192]	@ (34009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009ec0:	e798      	b.n	34009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34009ec2:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009ec6:	0518      	lsls	r0, r3, #20
34009ec8:	f57f ad78 	bpl.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009ecc:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009ed0:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009ed4:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009ed8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009eda:	e7a0      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34009edc:	4a24      	ldr	r2, [pc, #144]	@ (34009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009ede:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009ee2:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34009ee6:	2b02      	cmp	r3, #2
34009ee8:	d010      	beq.n	34009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
34009eea:	2b03      	cmp	r3, #3
34009eec:	d034      	beq.n	34009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
34009eee:	2b01      	cmp	r3, #1
34009ef0:	d009      	beq.n	34009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009ef2:	f7fb fa3f 	bl	34005374 <HAL_RCC_GetSysClockFreq>
34009ef6:	f7fb fb45 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34009efa:	4b1d      	ldr	r3, [pc, #116]	@ (34009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009efc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34009f00:	f3c3 1303 	ubfx	r3, r3, #4, #4
34009f04:	e708      	b.n	34009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009f06:	f7fe fc8f 	bl	34008828 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34009f0a:	e7f6      	b.n	34009efa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34009f0c:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009f10:	04d9      	lsls	r1, r3, #19
34009f12:	d516      	bpl.n	34009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009f14:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009f18:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009f1c:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009f20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC13_GetSource())
34009f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009f28:	f100 0401 	add.w	r4, r0, #1
34009f2c:	d00e      	beq.n	34009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
34009f2e:	d805      	bhi.n	34009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x608>
34009f30:	b94b      	cbnz	r3, 34009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009f32:	f7fe fb79 	bl	34008628 <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34009f36:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009f3a:	e7de      	b.n	34009efa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        switch (LL_RCC_IC13_GetSource())
34009f3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009f40:	d007      	beq.n	34009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
        eth1ptp_frequency = HSE_VALUE;
34009f42:	2000      	movs	r0, #0
34009f44:	e7d9      	b.n	34009efa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009f46:	f7fe fbaf 	bl	340086a8 <HAL_RCCEx_GetPLL2CLKFreq>
34009f4a:	e7f4      	b.n	34009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009f4c:	f7fe fbec 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
34009f50:	e7f1      	b.n	34009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009f52:	f7fe fc29 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
34009f56:	e7ee      	b.n	34009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
      if (LL_RCC_HSE_IsReady() != 0U)
34009f58:	f7fb fa7a 	bl	34005450 <LL_RCC_HSE_IsReady>
34009f5c:	2800      	cmp	r0, #0
34009f5e:	d0f0      	beq.n	34009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        eth1ptp_frequency = HSE_VALUE;
34009f60:	4807      	ldr	r0, [pc, #28]	@ (34009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009f62:	e7ca      	b.n	34009efa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
34009f64:	01001014 	.word	0x01001014
34009f68:	03001414 	.word	0x03001414
34009f6c:	03000814 	.word	0x03000814
34009f70:	56028000 	.word	0x56028000
34009f74:	03d09000 	.word	0x03d09000
34009f78:	003d0900 	.word	0x003d0900
34009f7c:	00bb8000 	.word	0x00bb8000
34009f80:	02dc6c00 	.word	0x02dc6c00
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34009f84:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009f88:	035b      	lsls	r3, r3, #13
34009f8a:	f57f ad17 	bpl.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009f8e:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009f92:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009f96:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009f9a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009f9c:	e73f      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34009f9e:	4ba7      	ldr	r3, [pc, #668]	@ (3400a23c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009fa0:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
34009fa4:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009fa8:	2a20      	cmp	r2, #32
34009faa:	d019      	beq.n	34009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
34009fac:	d808      	bhi.n	34009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
34009fae:	2a00      	cmp	r2, #0
34009fb0:	f47f af78 	bne.w	34009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009fb4:	f7fb f9de 	bl	34005374 <HAL_RCC_GetSysClockFreq>
}
34009fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009fbc:	f7fb bae2 	b.w	34005584 <RCCEx_GetHCLKFreq>
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009fc0:	2a30      	cmp	r2, #48	@ 0x30
34009fc2:	f47f acfb 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009fc6:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009fca:	0714      	lsls	r4, r2, #28
34009fcc:	f57f acf6 	bpl.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009fd0:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009fd4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009fd8:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009fdc:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009fde:	e71e      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34009fe0:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009fe4:	0755      	lsls	r5, r2, #29
34009fe6:	f57f ace9 	bpl.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009fea:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009fee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009ff2:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009ff6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009ff8:	e711      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34009ffa:	4891      	ldr	r0, [pc, #580]	@ (3400a240 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
}
34009ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
3400a000:	f7ff bafa 	b.w	340095f8 <RCCEx_GetI2CCLKFreq>
3400a004:	488f      	ldr	r0, [pc, #572]	@ (3400a244 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
3400a006:	e7f9      	b.n	34009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
3400a008:	488f      	ldr	r0, [pc, #572]	@ (3400a248 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
3400a00a:	e7f7      	b.n	34009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
3400a00c:	488f      	ldr	r0, [pc, #572]	@ (3400a24c <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
}
3400a00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3400a012:	f7ff b9ff 	b.w	34009414 <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
3400a016:	488e      	ldr	r0, [pc, #568]	@ (3400a250 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
}
3400a018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
3400a01c:	f7ff bbaa 	b.w	34009774 <RCCEx_GetLPTIMCLKFreq>
3400a020:	488c      	ldr	r0, [pc, #560]	@ (3400a254 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
3400a022:	e7f9      	b.n	3400a018 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
3400a024:	488c      	ldr	r0, [pc, #560]	@ (3400a258 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
3400a026:	e7f7      	b.n	3400a018 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
3400a028:	488c      	ldr	r0, [pc, #560]	@ (3400a25c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
3400a02a:	e7f5      	b.n	3400a018 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
3400a02c:	4a83      	ldr	r2, [pc, #524]	@ (3400a23c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3400a02e:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
3400a032:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3400a036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a03a:	d031      	beq.n	3400a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
3400a03c:	d812      	bhi.n	3400a064 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
3400a03e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a042:	f43f af2f 	beq.w	34009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
3400a046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400a04a:	d01d      	beq.n	3400a088 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
3400a04c:	2b00      	cmp	r3, #0
3400a04e:	f47f acb5 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400a052:	f7fb f98f 	bl	34005374 <HAL_RCC_GetSysClockFreq>
3400a056:	f7fb fa95 	bl	34005584 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3400a05a:	4b78      	ldr	r3, [pc, #480]	@ (3400a23c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3400a05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3400a05e:	f3c3 3302 	ubfx	r3, r3, #12, #3
3400a062:	e4db      	b.n	34009a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3400a064:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3400a068:	f43f aec5 	beq.w	34009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
3400a06c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400a070:	d02f      	beq.n	3400a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
3400a072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
3400a076:	f47f aca1 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
3400a07a:	f7fb fa01 	bl	34005480 <LL_RCC_LSE_IsReady>
3400a07e:	3800      	subs	r0, #0
3400a080:	bf18      	it	ne
3400a082:	2001      	movne	r0, #1
3400a084:	03c0      	lsls	r0, r0, #15
3400a086:	e6b5      	b.n	34009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3400a088:	f7fb fa46 	bl	34005518 <LL_RCC_IC9_IsEnabled>
3400a08c:	2800      	cmp	r0, #0
3400a08e:	f43f ac95 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
3400a092:	f7fb fa49 	bl	34005528 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3400a096:	4b69      	ldr	r3, [pc, #420]	@ (3400a23c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3400a098:	4604      	mov	r4, r0
3400a09a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400a09e:	e6be      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3400a0a0:	f7fb fa4c 	bl	3400553c <LL_RCC_IC14_IsEnabled>
3400a0a4:	2800      	cmp	r0, #0
3400a0a6:	f43f ac89 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
3400a0aa:	f7fb fa4f 	bl	3400554c <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
3400a0ae:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400a0b2:	4604      	mov	r4, r0
3400a0b4:	e6b3      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
3400a0b6:	4d61      	ldr	r5, [pc, #388]	@ (3400a23c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3400a0b8:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
3400a0bc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3400a0c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400a0c4:	d010      	beq.n	3400a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
3400a0c6:	f67f aec0 	bls.w	34009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
3400a0ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3400a0ce:	f47f ac75 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
3400a0d2:	f7fb f9c5 	bl	34005460 <LL_RCC_HSI_IsReady>
3400a0d6:	2800      	cmp	r0, #0
3400a0d8:	f43f ac70 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400a0dc:	4b57      	ldr	r3, [pc, #348]	@ (3400a23c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3400a0de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400a0e0:	485f      	ldr	r0, [pc, #380]	@ (3400a260 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
3400a0e2:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400a0e6:	e499      	b.n	34009a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
3400a0e8:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3400a0ec:	0418      	lsls	r0, r3, #16
3400a0ee:	f57f ac65 	bpl.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3400a0f2:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3400a0f6:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3400a0fa:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400a0fe:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3400a100:	e68d      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3400a102:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3400a106:	f000 8096 	beq.w	3400a236 <HAL_RCCEx_GetPeriphCLKFreq+0x902>
3400a10a:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3400a10e:	d00d      	beq.n	3400a12c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
3400a110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3400a114:	e6a4      	b.n	34009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3400a116:	f7fb f9db 	bl	340054d0 <LL_RCC_IC7_IsEnabled>
3400a11a:	2800      	cmp	r0, #0
3400a11c:	f43f ac4e 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
3400a120:	f7fb f9de 	bl	340054e0 <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3400a124:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
3400a128:	4604      	mov	r4, r0
3400a12a:	e678      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3400a12c:	f7fb f922 	bl	34005374 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
3400a130:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3400a132:	f3c3 6301 	ubfx	r3, r3, #24, #2
3400a136:	e471      	b.n	34009a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
3400a138:	4a40      	ldr	r2, [pc, #256]	@ (3400a23c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3400a13a:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3400a13e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
3400a142:	2b20      	cmp	r3, #32
3400a144:	d00b      	beq.n	3400a15e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
3400a146:	f67f aeaa 	bls.w	34009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
3400a14a:	2b30      	cmp	r3, #48	@ 0x30
3400a14c:	f47f ac36 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
3400a150:	f7fb f986 	bl	34005460 <LL_RCC_HSI_IsReady>
3400a154:	2800      	cmp	r0, #0
3400a156:	f43f ac31 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400a15a:	6c93      	ldr	r3, [r2, #72]	@ 0x48
3400a15c:	e7c0      	b.n	3400a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
3400a15e:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
3400a162:	0319      	lsls	r1, r3, #12
3400a164:	f57f ac2a 	bpl.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3400a168:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3400a16c:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3400a170:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400a174:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3400a176:	e652      	b.n	34009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        switch (LL_RCC_IC20_GetSource())
3400a178:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a17c:	f47f ac1e 	bne.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400a180:	f7fe fb12 	bl	340087a8 <HAL_RCCEx_GetPLL4CLKFreq>
3400a184:	e634      	b.n	34009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400a186:	f7fe facf 	bl	34008728 <HAL_RCCEx_GetPLL3CLKFreq>
3400a18a:	e631      	b.n	34009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3400a18c:	4a2b      	ldr	r2, [pc, #172]	@ (3400a23c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3400a18e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3400a192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
3400a196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400a19a:	d005      	beq.n	3400a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
3400a19c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a1a0:	d009      	beq.n	3400a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
3400a1a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a1a6:	e766      	b.n	3400a076 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3400a1a8:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
3400a1aa:	07db      	lsls	r3, r3, #31
3400a1ac:	f57f ac06 	bpl.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
3400a1b0:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
3400a1b4:	e61e      	b.n	34009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_HSE_IsReady() != 0U)
3400a1b6:	f7fb f94b 	bl	34005450 <LL_RCC_HSE_IsReady>
3400a1ba:	2800      	cmp	r0, #0
3400a1bc:	f43f abfe 	beq.w	340099bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3400a1c0:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
3400a1c4:	4827      	ldr	r0, [pc, #156]	@ (3400a264 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3400a1c6:	f3c3 3305 	ubfx	r3, r3, #12, #6
3400a1ca:	3301      	adds	r3, #1
3400a1cc:	e5a5      	b.n	34009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
3400a1ce:	4826      	ldr	r0, [pc, #152]	@ (3400a268 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
3400a1d0:	e49e      	b.n	34009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3400a1d2:	4826      	ldr	r0, [pc, #152]	@ (3400a26c <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
3400a1d4:	e4ce      	b.n	34009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
3400a1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3400a1da:	f7fe bbab 	b.w	34008934 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
3400a1de:	4824      	ldr	r0, [pc, #144]	@ (3400a270 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
}
3400a1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
3400a1e4:	f7fe bf30 	b.w	34009048 <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
3400a1e8:	4822      	ldr	r0, [pc, #136]	@ (3400a274 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
3400a1ea:	e7f9      	b.n	3400a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
3400a1ec:	4822      	ldr	r0, [pc, #136]	@ (3400a278 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
3400a1ee:	e7f7      	b.n	3400a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
3400a1f0:	4822      	ldr	r0, [pc, #136]	@ (3400a27c <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
3400a1f2:	e7f5      	b.n	3400a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
3400a1f4:	4822      	ldr	r0, [pc, #136]	@ (3400a280 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
}
3400a1f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
3400a1fa:	f7fe bd0d 	b.w	34008c18 <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
3400a1fe:	4821      	ldr	r0, [pc, #132]	@ (3400a284 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
3400a200:	e7f9      	b.n	3400a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
3400a202:	4821      	ldr	r0, [pc, #132]	@ (3400a288 <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
3400a204:	e7f7      	b.n	3400a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
3400a206:	4821      	ldr	r0, [pc, #132]	@ (3400a28c <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
3400a208:	e4ed      	b.n	34009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
3400a20a:	4821      	ldr	r0, [pc, #132]	@ (3400a290 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
3400a20c:	e4eb      	b.n	34009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
3400a20e:	4821      	ldr	r0, [pc, #132]	@ (3400a294 <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
3400a210:	e4e9      	b.n	34009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3400a212:	4821      	ldr	r0, [pc, #132]	@ (3400a298 <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
3400a214:	e4e7      	b.n	34009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
3400a216:	4821      	ldr	r0, [pc, #132]	@ (3400a29c <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
3400a218:	e7ed      	b.n	3400a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3400a21a:	4821      	ldr	r0, [pc, #132]	@ (3400a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
}
3400a21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3400a220:	f7fe bc62 	b.w	34008ae8 <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3400a224:	481f      	ldr	r0, [pc, #124]	@ (3400a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
3400a226:	e534      	b.n	34009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
3400a228:	481f      	ldr	r0, [pc, #124]	@ (3400a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
}
3400a22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3400a22e:	f7fe bbe1 	b.w	340089f4 <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
3400a232:	481e      	ldr	r0, [pc, #120]	@ (3400a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
3400a234:	e7f9      	b.n	3400a22a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3400a236:	481e      	ldr	r0, [pc, #120]	@ (3400a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
3400a238:	e5dc      	b.n	34009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
3400a23a:	bf00      	nop
3400a23c:	56028000 	.word	0x56028000
3400a240:	0700000c 	.word	0x0700000c
3400a244:	0700040c 	.word	0x0700040c
3400a248:	0700080c 	.word	0x0700080c
3400a24c:	0700100c 	.word	0x0700100c
3400a250:	0700082c 	.word	0x0700082c
3400a254:	07000c2c 	.word	0x07000c2c
3400a258:	0700102c 	.word	0x0700102c
3400a25c:	0700142c 	.word	0x0700142c
3400a260:	03d09000 	.word	0x03d09000
3400a264:	02dc6c00 	.word	0x02dc6c00
3400a268:	07001818 	.word	0x07001818
3400a26c:	0300041c 	.word	0x0300041c
3400a270:	07000420 	.word	0x07000420
3400a274:	07000820 	.word	0x07000820
3400a278:	07001020 	.word	0x07001020
3400a27c:	07001820 	.word	0x07001820
3400a280:	07000030 	.word	0x07000030
3400a284:	07000430 	.word	0x07000430
3400a288:	07000830 	.word	0x07000830
3400a28c:	07001030 	.word	0x07001030
3400a290:	07001830 	.word	0x07001830
3400a294:	07001c30 	.word	0x07001c30
3400a298:	07000034 	.word	0x07000034
3400a29c:	07000434 	.word	0x07000434
3400a2a0:	03000c14 	.word	0x03000c14
3400a2a4:	01001814 	.word	0x01001814
3400a2a8:	03000014 	.word	0x03000014
3400a2ac:	03000414 	.word	0x03000414
3400a2b0:	00bb8000 	.word	0x00bb8000

3400a2b4 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
3400a2b4:	b538      	push	{r3, r4, r5, lr}
3400a2b6:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
3400a2b8:	460d      	mov	r5, r1
3400a2ba:	b921      	cbnz	r1, 3400a2c6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
3400a2bc:	f240 1111 	movw	r1, #273	@ 0x111
3400a2c0:	4825      	ldr	r0, [pc, #148]	@ (3400a358 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a2c2:	f7f7 fa27 	bl	34001714 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
3400a2c6:	2c0c      	cmp	r4, #12
3400a2c8:	d904      	bls.n	3400a2d4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
3400a2ca:	f44f 7189 	mov.w	r1, #274	@ 0x112
3400a2ce:	4822      	ldr	r0, [pc, #136]	@ (3400a358 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a2d0:	f7f7 fa20 	bl	34001714 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3400a2d4:	682b      	ldr	r3, [r5, #0]
3400a2d6:	2b20      	cmp	r3, #32
3400a2d8:	d838      	bhi.n	3400a34c <HAL_RIF_RIMC_ConfigMasterAttributes+0x98>
3400a2da:	2b03      	cmp	r3, #3
3400a2dc:	d82a      	bhi.n	3400a334 <HAL_RIF_RIMC_ConfigMasterAttributes+0x80>
3400a2de:	3b01      	subs	r3, #1
3400a2e0:	2b01      	cmp	r3, #1
3400a2e2:	d82d      	bhi.n	3400a340 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
3400a2e4:	682b      	ldr	r3, [r5, #0]
3400a2e6:	2b80      	cmp	r3, #128	@ 0x80
3400a2e8:	d001      	beq.n	3400a2ee <HAL_RIF_RIMC_ConfigMasterAttributes+0x3a>
3400a2ea:	2bff      	cmp	r3, #255	@ 0xff
3400a2ec:	d904      	bls.n	3400a2f8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x44>
3400a2ee:	f44f 718a 	mov.w	r1, #276	@ 0x114
3400a2f2:	4819      	ldr	r0, [pc, #100]	@ (3400a358 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a2f4:	f7f7 fa0e 	bl	34001714 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
3400a2f8:	686b      	ldr	r3, [r5, #4]
3400a2fa:	2b03      	cmp	r3, #3
3400a2fc:	d904      	bls.n	3400a308 <HAL_RIF_RIMC_ConfigMasterAttributes+0x54>
3400a2fe:	f240 1115 	movw	r1, #277	@ 0x115
3400a302:	4815      	ldr	r0, [pc, #84]	@ (3400a358 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a304:	f7f7 fa06 	bl	34001714 <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3400a308:	682b      	ldr	r3, [r5, #0]
3400a30a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
3400a30e:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3400a312:	00a0      	lsls	r0, r4, #2
3400a314:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3400a318:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3400a31c:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3400a320:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3400a322:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3400a326:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3400a32a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3400a32e:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
3400a332:	bd38      	pop	{r3, r4, r5, pc}
3400a334:	4a09      	ldr	r2, [pc, #36]	@ (3400a35c <HAL_RIF_RIMC_ConfigMasterAttributes+0xa8>)
3400a336:	3b04      	subs	r3, #4
3400a338:	fa22 f303 	lsr.w	r3, r2, r3
3400a33c:	07db      	lsls	r3, r3, #31
3400a33e:	d4d1      	bmi.n	3400a2e4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3400a340:	f240 1113 	movw	r1, #275	@ 0x113
3400a344:	4804      	ldr	r0, [pc, #16]	@ (3400a358 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3400a346:	f7f7 f9e5 	bl	34001714 <assert_failed>
3400a34a:	e7cb      	b.n	3400a2e4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3400a34c:	2b40      	cmp	r3, #64	@ 0x40
3400a34e:	d0c9      	beq.n	3400a2e4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3400a350:	2b80      	cmp	r3, #128	@ 0x80
3400a352:	d1f5      	bne.n	3400a340 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
3400a354:	e7c6      	b.n	3400a2e4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3400a356:	bf00      	nop
3400a358:	34010f88 	.word	0x34010f88
3400a35c:	10001011 	.word	0x10001011

3400a360 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3400a360:	4b38      	ldr	r3, [pc, #224]	@ (3400a444 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
3400a362:	b537      	push	{r0, r1, r2, r4, r5, lr}
3400a364:	4298      	cmp	r0, r3
3400a366:	4604      	mov	r4, r0
3400a368:	460d      	mov	r5, r1
3400a36a:	d85c      	bhi.n	3400a426 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
3400a36c:	3b1e      	subs	r3, #30
3400a36e:	4298      	cmp	r0, r3
3400a370:	d83b      	bhi.n	3400a3ea <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
3400a372:	4b35      	ldr	r3, [pc, #212]	@ (3400a448 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
3400a374:	4298      	cmp	r0, r3
3400a376:	d84b      	bhi.n	3400a410 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
3400a378:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
3400a37c:	d23a      	bcs.n	3400a3f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
3400a37e:	4b33      	ldr	r3, [pc, #204]	@ (3400a44c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
3400a380:	4298      	cmp	r0, r3
3400a382:	d840      	bhi.n	3400a406 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
3400a384:	1fc2      	subs	r2, r0, #7
3400a386:	3b22      	subs	r3, #34	@ 0x22
3400a388:	429a      	cmp	r2, r3
3400a38a:	d937      	bls.n	3400a3fc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
3400a38c:	2d03      	cmp	r5, #3
3400a38e:	d904      	bls.n	3400a39a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
3400a390:	f44f 71ba 	mov.w	r1, #372	@ 0x174
3400a394:	482e      	ldr	r0, [pc, #184]	@ (3400a450 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3400a396:	f7f7 f9bd 	bl	34001714 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a39a:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a39c:	0f20      	lsrs	r0, r4, #28
3400a39e:	0080      	lsls	r0, r0, #2
3400a3a0:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3400a3a4:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3400a3a8:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a3aa:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a3ae:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a3b0:	9b01      	ldr	r3, [sp, #4]
3400a3b2:	40a2      	lsls	r2, r4
3400a3b4:	ea23 0302 	bic.w	r3, r3, r2
3400a3b8:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a3ba:	9901      	ldr	r1, [sp, #4]
3400a3bc:	f005 0301 	and.w	r3, r5, #1
3400a3c0:	40a3      	lsls	r3, r4
3400a3c2:	430b      	orrs	r3, r1
3400a3c4:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a3c6:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a3c8:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a3cc:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a3ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a3d0:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a3d2:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a3d4:	9b01      	ldr	r3, [sp, #4]
3400a3d6:	ea23 0302 	bic.w	r3, r3, r2
3400a3da:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a3dc:	9b01      	ldr	r3, [sp, #4]
3400a3de:	4319      	orrs	r1, r3
3400a3e0:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a3e2:	9b01      	ldr	r3, [sp, #4]
3400a3e4:	6303      	str	r3, [r0, #48]	@ 0x30
}
3400a3e6:	b003      	add	sp, #12
3400a3e8:	bd30      	pop	{r4, r5, pc}
3400a3ea:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
3400a3ee:	4b19      	ldr	r3, [pc, #100]	@ (3400a454 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
3400a3f0:	3a02      	subs	r2, #2
3400a3f2:	e01d      	b.n	3400a430 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a3f4:	4b18      	ldr	r3, [pc, #96]	@ (3400a458 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
3400a3f6:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
3400a3fa:	e019      	b.n	3400a430 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a3fc:	f1a0 0308 	sub.w	r3, r0, #8
3400a400:	2b17      	cmp	r3, #23
3400a402:	d9c3      	bls.n	3400a38c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a404:	e017      	b.n	3400a436 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a406:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
3400a40a:	3b1c      	subs	r3, #28
3400a40c:	2b02      	cmp	r3, #2
3400a40e:	e7f8      	b.n	3400a402 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
3400a410:	4b12      	ldr	r3, [pc, #72]	@ (3400a45c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
3400a412:	4298      	cmp	r0, r3
3400a414:	d803      	bhi.n	3400a41e <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
3400a416:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3400a41a:	d2b7      	bcs.n	3400a38c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a41c:	e00b      	b.n	3400a436 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a41e:	4b10      	ldr	r3, [pc, #64]	@ (3400a460 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
3400a420:	4298      	cmp	r0, r3
3400a422:	d0b3      	beq.n	3400a38c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a424:	e007      	b.n	3400a436 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a426:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
3400a42a:	2a1e      	cmp	r2, #30
3400a42c:	d803      	bhi.n	3400a436 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a42e:	4b0d      	ldr	r3, [pc, #52]	@ (3400a464 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
3400a430:	40d3      	lsrs	r3, r2
3400a432:	07db      	lsls	r3, r3, #31
3400a434:	d4aa      	bmi.n	3400a38c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3400a436:	f240 1173 	movw	r1, #371	@ 0x173
3400a43a:	4805      	ldr	r0, [pc, #20]	@ (3400a450 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3400a43c:	f7f7 f96a 	bl	34001714 <assert_failed>
3400a440:	e7a4      	b.n	3400a38c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a442:	bf00      	nop
3400a444:	4000001f 	.word	0x4000001f
3400a448:	2000001e 	.word	0x2000001e
3400a44c:	1000001a 	.word	0x1000001a
3400a450:	34010f88 	.word	0x34010f88
3400a454:	2e838c0b 	.word	0x2e838c0b
3400a458:	77dff03b 	.word	0x77dff03b
3400a45c:	30000008 	.word	0x30000008
3400a460:	3000000a 	.word	0x3000000a
3400a464:	49deef7f 	.word	0x49deef7f

3400a468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3400a468:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a46a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a46c:	e852 3f00 	ldrex	r3, [r2]
3400a470:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a474:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a478:	6802      	ldr	r2, [r0, #0]
3400a47a:	2900      	cmp	r1, #0
3400a47c:	d1f5      	bne.n	3400a46a <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3400a47e:	4c0f      	ldr	r4, [pc, #60]	@ (3400a4bc <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a480:	f102 0308 	add.w	r3, r2, #8
3400a484:	e853 3f00 	ldrex	r3, [r3]
3400a488:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a48a:	f102 0c08 	add.w	ip, r2, #8
3400a48e:	e84c 3100 	strex	r1, r3, [ip]
3400a492:	2900      	cmp	r1, #0
3400a494:	d1f4      	bne.n	3400a480 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3400a496:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
3400a498:	2b01      	cmp	r3, #1
3400a49a:	d107      	bne.n	3400a4ac <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a49c:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3400a4a0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a4a4:	e842 3100 	strex	r1, r3, [r2]
3400a4a8:	2900      	cmp	r1, #0
3400a4aa:	d1f7      	bne.n	3400a49c <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3400a4ac:	2320      	movs	r3, #32
3400a4ae:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a4b2:	2300      	movs	r3, #0
3400a4b4:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3400a4b6:	6743      	str	r3, [r0, #116]	@ 0x74
}
3400a4b8:	bd10      	pop	{r4, pc}
3400a4ba:	bf00      	nop
3400a4bc:	effffffe 	.word	0xeffffffe

3400a4c0 <HAL_UART_MspInit>:
}
3400a4c0:	4770      	bx	lr
	...

3400a4c4 <UART_SetConfig>:
{
3400a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a4c6:	6842      	ldr	r2, [r0, #4]
3400a4c8:	4bb0      	ldr	r3, [pc, #704]	@ (3400a78c <UART_SetConfig+0x2c8>)
{
3400a4ca:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a4cc:	429a      	cmp	r2, r3
3400a4ce:	d904      	bls.n	3400a4da <UART_SetConfig+0x16>
3400a4d0:	f640 414f 	movw	r1, #3151	@ 0xc4f
3400a4d4:	48ae      	ldr	r0, [pc, #696]	@ (3400a790 <UART_SetConfig+0x2cc>)
3400a4d6:	f7f7 f91d 	bl	34001714 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
3400a4da:	68a3      	ldr	r3, [r4, #8]
3400a4dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a4e0:	d007      	beq.n	3400a4f2 <UART_SetConfig+0x2e>
3400a4e2:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a4e6:	d004      	beq.n	3400a4f2 <UART_SetConfig+0x2e>
3400a4e8:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
3400a4ec:	48a8      	ldr	r0, [pc, #672]	@ (3400a790 <UART_SetConfig+0x2cc>)
3400a4ee:	f7f7 f911 	bl	34001714 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a4f2:	6822      	ldr	r2, [r4, #0]
3400a4f4:	49a7      	ldr	r1, [pc, #668]	@ (3400a794 <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a4f6:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
3400a4f8:	428a      	cmp	r2, r1
3400a4fa:	d004      	beq.n	3400a506 <UART_SetConfig+0x42>
3400a4fc:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3400a500:	428a      	cmp	r2, r1
3400a502:	f040 80af 	bne.w	3400a664 <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3400a506:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a50a:	d004      	beq.n	3400a516 <UART_SetConfig+0x52>
3400a50c:	f640 4153 	movw	r1, #3155	@ 0xc53
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a510:	489f      	ldr	r0, [pc, #636]	@ (3400a790 <UART_SetConfig+0x2cc>)
3400a512:	f7f7 f8ff 	bl	34001714 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
3400a516:	6923      	ldr	r3, [r4, #16]
3400a518:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
3400a51c:	d007      	beq.n	3400a52e <UART_SetConfig+0x6a>
3400a51e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400a522:	d004      	beq.n	3400a52e <UART_SetConfig+0x6a>
3400a524:	f640 415b 	movw	r1, #3163	@ 0xc5b
3400a528:	4899      	ldr	r0, [pc, #612]	@ (3400a790 <UART_SetConfig+0x2cc>)
3400a52a:	f7f7 f8f3 	bl	34001714 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3400a52e:	6963      	ldr	r3, [r4, #20]
3400a530:	f033 020c 	bics.w	r2, r3, #12
3400a534:	d100      	bne.n	3400a538 <UART_SetConfig+0x74>
3400a536:	b923      	cbnz	r3, 3400a542 <UART_SetConfig+0x7e>
3400a538:	f640 415c 	movw	r1, #3164	@ 0xc5c
3400a53c:	4894      	ldr	r0, [pc, #592]	@ (3400a790 <UART_SetConfig+0x2cc>)
3400a53e:	f7f7 f8e9 	bl	34001714 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
3400a542:	69a3      	ldr	r3, [r4, #24]
3400a544:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
3400a548:	d004      	beq.n	3400a554 <UART_SetConfig+0x90>
3400a54a:	f640 415d 	movw	r1, #3165	@ 0xc5d
3400a54e:	4890      	ldr	r0, [pc, #576]	@ (3400a790 <UART_SetConfig+0x2cc>)
3400a550:	f7f7 f8e0 	bl	34001714 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
3400a554:	69e3      	ldr	r3, [r4, #28]
3400a556:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a55a:	d004      	beq.n	3400a566 <UART_SetConfig+0xa2>
3400a55c:	f640 415e 	movw	r1, #3166	@ 0xc5e
3400a560:	488b      	ldr	r0, [pc, #556]	@ (3400a790 <UART_SetConfig+0x2cc>)
3400a562:	f7f7 f8d7 	bl	34001714 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
3400a566:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a568:	2b0b      	cmp	r3, #11
3400a56a:	d904      	bls.n	3400a576 <UART_SetConfig+0xb2>
3400a56c:	f640 415f 	movw	r1, #3167	@ 0xc5f
3400a570:	4887      	ldr	r0, [pc, #540]	@ (3400a790 <UART_SetConfig+0x2cc>)
3400a572:	f7f7 f8cf 	bl	34001714 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a576:	6921      	ldr	r1, [r4, #16]
3400a578:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a57a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a57c:	430a      	orrs	r2, r1
3400a57e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a580:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a582:	69e5      	ldr	r5, [r4, #28]
3400a584:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a586:	4984      	ldr	r1, [pc, #528]	@ (3400a798 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a588:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a58a:	4001      	ands	r1, r0
3400a58c:	430a      	orrs	r2, r1
3400a58e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3400a590:	685a      	ldr	r2, [r3, #4]
3400a592:	68e1      	ldr	r1, [r4, #12]
3400a594:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
3400a598:	430a      	orrs	r2, r1
3400a59a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a59c:	4a7d      	ldr	r2, [pc, #500]	@ (3400a794 <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3400a59e:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a5a0:	4293      	cmp	r3, r2
3400a5a2:	d005      	beq.n	3400a5b0 <UART_SetConfig+0xec>
3400a5a4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5a8:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
3400a5aa:	bf1c      	itt	ne
3400a5ac:	6a22      	ldrne	r2, [r4, #32]
3400a5ae:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3400a5b0:	689a      	ldr	r2, [r3, #8]
3400a5b2:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
3400a5b6:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
3400a5ba:	430a      	orrs	r2, r1
3400a5bc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3400a5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400a5c0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a5c2:	f022 020f 	bic.w	r2, r2, #15
3400a5c6:	430a      	orrs	r2, r1
3400a5c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a5ca:	4a74      	ldr	r2, [pc, #464]	@ (3400a79c <UART_SetConfig+0x2d8>)
3400a5cc:	4293      	cmp	r3, r2
3400a5ce:	d07a      	beq.n	3400a6c6 <UART_SetConfig+0x202>
3400a5d0:	4a73      	ldr	r2, [pc, #460]	@ (3400a7a0 <UART_SetConfig+0x2dc>)
3400a5d2:	4293      	cmp	r3, r2
3400a5d4:	f000 809c 	beq.w	3400a710 <UART_SetConfig+0x24c>
3400a5d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a5dc:	4293      	cmp	r3, r2
3400a5de:	f000 809b 	beq.w	3400a718 <UART_SetConfig+0x254>
3400a5e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a5e6:	4293      	cmp	r3, r2
3400a5e8:	f000 809a 	beq.w	3400a720 <UART_SetConfig+0x25c>
3400a5ec:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a5f0:	f000 809a 	beq.w	3400a728 <UART_SetConfig+0x264>
3400a5f4:	4a6b      	ldr	r2, [pc, #428]	@ (3400a7a4 <UART_SetConfig+0x2e0>)
3400a5f6:	4293      	cmp	r3, r2
3400a5f8:	f000 809a 	beq.w	3400a730 <UART_SetConfig+0x26c>
3400a5fc:	4a6a      	ldr	r2, [pc, #424]	@ (3400a7a8 <UART_SetConfig+0x2e4>)
3400a5fe:	4293      	cmp	r3, r2
3400a600:	f000 809a 	beq.w	3400a738 <UART_SetConfig+0x274>
3400a604:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a608:	4293      	cmp	r3, r2
3400a60a:	f000 8099 	beq.w	3400a740 <UART_SetConfig+0x27c>
3400a60e:	4a67      	ldr	r2, [pc, #412]	@ (3400a7ac <UART_SetConfig+0x2e8>)
3400a610:	4293      	cmp	r3, r2
3400a612:	f000 8099 	beq.w	3400a748 <UART_SetConfig+0x284>
3400a616:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a61a:	4293      	cmp	r3, r2
3400a61c:	f000 8098 	beq.w	3400a750 <UART_SetConfig+0x28c>
3400a620:	4a5c      	ldr	r2, [pc, #368]	@ (3400a794 <UART_SetConfig+0x2d0>)
3400a622:	4293      	cmp	r3, r2
3400a624:	d02e      	beq.n	3400a684 <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a626:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a62a:	4293      	cmp	r3, r2
3400a62c:	f04f 0000 	mov.w	r0, #0
3400a630:	f04f 0100 	mov.w	r1, #0
3400a634:	d14a      	bne.n	3400a6cc <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a636:	f7ff f97d 	bl	34009934 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a63a:	2800      	cmp	r0, #0
3400a63c:	d041      	beq.n	3400a6c2 <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a63e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a640:	4a5b      	ldr	r2, [pc, #364]	@ (3400a7b0 <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a642:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a644:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a648:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a64c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a650:	4299      	cmp	r1, r3
3400a652:	d91b      	bls.n	3400a68c <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
3400a654:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
3400a656:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
3400a65a:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
3400a65c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
3400a65e:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
3400a662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a664:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400a668:	d004      	beq.n	3400a674 <UART_SetConfig+0x1b0>
3400a66a:	f640 4157 	movw	r1, #3159	@ 0xc57
3400a66e:	4848      	ldr	r0, [pc, #288]	@ (3400a790 <UART_SetConfig+0x2cc>)
3400a670:	f7f7 f850 	bl	34001714 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a674:	6a23      	ldr	r3, [r4, #32]
3400a676:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400a67a:	f43f af4c 	beq.w	3400a516 <UART_SetConfig+0x52>
3400a67e:	f640 4158 	movw	r1, #3160	@ 0xc58
3400a682:	e745      	b.n	3400a510 <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a684:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
3400a688:	2100      	movs	r1, #0
3400a68a:	e7d4      	b.n	3400a636 <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a68c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
3400a690:	d8e0      	bhi.n	3400a654 <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a692:	2300      	movs	r3, #0
3400a694:	4619      	mov	r1, r3
3400a696:	f7f6 f883 	bl	340007a0 <__aeabi_uldivmod>
3400a69a:	4606      	mov	r6, r0
3400a69c:	460f      	mov	r7, r1
3400a69e:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
3400a6a2:	0868      	lsrs	r0, r5, #1
3400a6a4:	1830      	adds	r0, r6, r0
3400a6a6:	462a      	mov	r2, r5
3400a6a8:	f04f 0300 	mov.w	r3, #0
3400a6ac:	f147 0100 	adc.w	r1, r7, #0
3400a6b0:	f7f6 f876 	bl	340007a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3400a6b4:	4b3f      	ldr	r3, [pc, #252]	@ (3400a7b4 <UART_SetConfig+0x2f0>)
3400a6b6:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
3400a6ba:	429a      	cmp	r2, r3
3400a6bc:	d8ca      	bhi.n	3400a654 <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
3400a6be:	6823      	ldr	r3, [r4, #0]
3400a6c0:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
3400a6c2:	2000      	movs	r0, #0
3400a6c4:	e7c7      	b.n	3400a656 <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a6c6:	2000      	movs	r0, #0
3400a6c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3400a6cc:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
3400a6d0:	d142      	bne.n	3400a758 <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a6d2:	f7ff f92f 	bl	34009934 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a6d6:	2800      	cmp	r0, #0
3400a6d8:	d0f3      	beq.n	3400a6c2 <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a6da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a6dc:	4b34      	ldr	r3, [pc, #208]	@ (3400a7b0 <UART_SetConfig+0x2ec>)
3400a6de:	6862      	ldr	r2, [r4, #4]
3400a6e0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a6e4:	fbb0 f0f3 	udiv	r0, r0, r3
3400a6e8:	0853      	lsrs	r3, r2, #1
3400a6ea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
3400a6ee:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a6f2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a6f6:	f1a3 0110 	sub.w	r1, r3, #16
3400a6fa:	4291      	cmp	r1, r2
3400a6fc:	d8aa      	bhi.n	3400a654 <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a6fe:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
3400a702:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a704:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3400a706:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
3400a70a:	4313      	orrs	r3, r2
3400a70c:	60cb      	str	r3, [r1, #12]
3400a70e:	e7d8      	b.n	3400a6c2 <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a710:	2000      	movs	r0, #0
3400a712:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400a716:	e7d9      	b.n	3400a6cc <UART_SetConfig+0x208>
3400a718:	2000      	movs	r0, #0
3400a71a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3400a71e:	e7d5      	b.n	3400a6cc <UART_SetConfig+0x208>
3400a720:	2000      	movs	r0, #0
3400a722:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400a726:	e7d1      	b.n	3400a6cc <UART_SetConfig+0x208>
3400a728:	2000      	movs	r0, #0
3400a72a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3400a72e:	e7cd      	b.n	3400a6cc <UART_SetConfig+0x208>
3400a730:	2000      	movs	r0, #0
3400a732:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3400a736:	e7c9      	b.n	3400a6cc <UART_SetConfig+0x208>
3400a738:	2000      	movs	r0, #0
3400a73a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
3400a73e:	e7c5      	b.n	3400a6cc <UART_SetConfig+0x208>
3400a740:	2000      	movs	r0, #0
3400a742:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3400a746:	e7c1      	b.n	3400a6cc <UART_SetConfig+0x208>
3400a748:	2000      	movs	r0, #0
3400a74a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
3400a74e:	e7bd      	b.n	3400a6cc <UART_SetConfig+0x208>
3400a750:	2000      	movs	r0, #0
3400a752:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3400a756:	e7b9      	b.n	3400a6cc <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a758:	f7ff f8ec 	bl	34009934 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a75c:	2800      	cmp	r0, #0
3400a75e:	d0b0      	beq.n	3400a6c2 <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a760:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a762:	4b13      	ldr	r3, [pc, #76]	@ (3400a7b0 <UART_SetConfig+0x2ec>)
3400a764:	6862      	ldr	r2, [r4, #4]
3400a766:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a76a:	fbb0 f3f3 	udiv	r3, r0, r3
3400a76e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
3400a772:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a776:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a77a:	f1a3 0110 	sub.w	r1, r3, #16
3400a77e:	4291      	cmp	r1, r2
3400a780:	f63f af68 	bhi.w	3400a654 <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
3400a784:	6822      	ldr	r2, [r4, #0]
3400a786:	60d3      	str	r3, [r2, #12]
3400a788:	e79b      	b.n	3400a6c2 <UART_SetConfig+0x1fe>
3400a78a:	bf00      	nop
3400a78c:	00bebc1f 	.word	0x00bebc1f
3400a790:	34011030 	.word	0x34011030
3400a794:	56000c00 	.word	0x56000c00
3400a798:	cfff69f3 	.word	0xcfff69f3
3400a79c:	52001000 	.word	0x52001000
3400a7a0:	50004400 	.word	0x50004400
3400a7a4:	52001400 	.word	0x52001400
3400a7a8:	50007800 	.word	0x50007800
3400a7ac:	52001800 	.word	0x52001800
3400a7b0:	3401241c 	.word	0x3401241c
3400a7b4:	000ffcff 	.word	0x000ffcff

3400a7b8 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a7b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
3400a7ba:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a7bc:	2bff      	cmp	r3, #255	@ 0xff
{
3400a7be:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a7c0:	d904      	bls.n	3400a7cc <UART_AdvFeatureConfig+0x14>
3400a7c2:	f640 41e4 	movw	r1, #3300	@ 0xce4
3400a7c6:	487e      	ldr	r0, [pc, #504]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a7c8:	f7f6 ffa4 	bl	34001714 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3400a7cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a7ce:	0718      	lsls	r0, r3, #28
3400a7d0:	d50f      	bpl.n	3400a7f2 <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3400a7d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400a7d4:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a7d8:	d004      	beq.n	3400a7e4 <UART_AdvFeatureConfig+0x2c>
3400a7da:	f640 41e9 	movw	r1, #3305	@ 0xce9
3400a7de:	4878      	ldr	r0, [pc, #480]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a7e0:	f7f6 ff98 	bl	34001714 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3400a7e4:	6822      	ldr	r2, [r4, #0]
3400a7e6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400a7e8:	6853      	ldr	r3, [r2, #4]
3400a7ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3400a7ee:	430b      	orrs	r3, r1
3400a7f0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3400a7f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a7f4:	07d9      	lsls	r1, r3, #31
3400a7f6:	d50f      	bpl.n	3400a818 <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3400a7f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a7fa:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
3400a7fe:	d004      	beq.n	3400a80a <UART_AdvFeatureConfig+0x52>
3400a800:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
3400a804:	486e      	ldr	r0, [pc, #440]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a806:	f7f6 ff85 	bl	34001714 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3400a80a:	6822      	ldr	r2, [r4, #0]
3400a80c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400a80e:	6853      	ldr	r3, [r2, #4]
3400a810:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3400a814:	430b      	orrs	r3, r1
3400a816:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3400a818:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a81a:	079a      	lsls	r2, r3, #30
3400a81c:	d50f      	bpl.n	3400a83e <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3400a81e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a820:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3400a824:	d004      	beq.n	3400a830 <UART_AdvFeatureConfig+0x78>
3400a826:	f640 41f7 	movw	r1, #3319	@ 0xcf7
3400a82a:	4865      	ldr	r0, [pc, #404]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a82c:	f7f6 ff72 	bl	34001714 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3400a830:	6822      	ldr	r2, [r4, #0]
3400a832:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3400a834:	6853      	ldr	r3, [r2, #4]
3400a836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400a83a:	430b      	orrs	r3, r1
3400a83c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3400a83e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a840:	075b      	lsls	r3, r3, #29
3400a842:	d50f      	bpl.n	3400a864 <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3400a844:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400a846:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
3400a84a:	d004      	beq.n	3400a856 <UART_AdvFeatureConfig+0x9e>
3400a84c:	f640 41fe 	movw	r1, #3326	@ 0xcfe
3400a850:	485b      	ldr	r0, [pc, #364]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a852:	f7f6 ff5f 	bl	34001714 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3400a856:	6822      	ldr	r2, [r4, #0]
3400a858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400a85a:	6853      	ldr	r3, [r2, #4]
3400a85c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
3400a860:	430b      	orrs	r3, r1
3400a862:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3400a864:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a866:	06d8      	lsls	r0, r3, #27
3400a868:	d50f      	bpl.n	3400a88a <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3400a86a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a86c:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a870:	d004      	beq.n	3400a87c <UART_AdvFeatureConfig+0xc4>
3400a872:	f640 5105 	movw	r1, #3333	@ 0xd05
3400a876:	4852      	ldr	r0, [pc, #328]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a878:	f7f6 ff4c 	bl	34001714 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3400a87c:	6822      	ldr	r2, [r4, #0]
3400a87e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400a880:	6893      	ldr	r3, [r2, #8]
3400a882:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400a886:	430b      	orrs	r3, r1
3400a888:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3400a88a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a88c:	0699      	lsls	r1, r3, #26
3400a88e:	d50f      	bpl.n	3400a8b0 <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3400a890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400a892:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a896:	d004      	beq.n	3400a8a2 <UART_AdvFeatureConfig+0xea>
3400a898:	f640 510d 	movw	r1, #3341	@ 0xd0d
3400a89c:	4848      	ldr	r0, [pc, #288]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a89e:	f7f6 ff39 	bl	34001714 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3400a8a2:	6822      	ldr	r2, [r4, #0]
3400a8a4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
3400a8a6:	6893      	ldr	r3, [r2, #8]
3400a8a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
3400a8ac:	430b      	orrs	r3, r1
3400a8ae:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3400a8b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a8b2:	065a      	lsls	r2, r3, #25
3400a8b4:	d56f      	bpl.n	3400a996 <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3400a8b6:	6823      	ldr	r3, [r4, #0]
3400a8b8:	4a42      	ldr	r2, [pc, #264]	@ (3400a9c4 <UART_AdvFeatureConfig+0x20c>)
3400a8ba:	4293      	cmp	r3, r2
3400a8bc:	d047      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8be:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8c2:	4293      	cmp	r3, r2
3400a8c4:	d043      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8c6:	4a40      	ldr	r2, [pc, #256]	@ (3400a9c8 <UART_AdvFeatureConfig+0x210>)
3400a8c8:	4293      	cmp	r3, r2
3400a8ca:	d040      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8cc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8d0:	4293      	cmp	r3, r2
3400a8d2:	d03c      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8d4:	4a3d      	ldr	r2, [pc, #244]	@ (3400a9cc <UART_AdvFeatureConfig+0x214>)
3400a8d6:	4293      	cmp	r3, r2
3400a8d8:	d039      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8da:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8de:	4293      	cmp	r3, r2
3400a8e0:	d035      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8e2:	4a3b      	ldr	r2, [pc, #236]	@ (3400a9d0 <UART_AdvFeatureConfig+0x218>)
3400a8e4:	4293      	cmp	r3, r2
3400a8e6:	d032      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8e8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8ec:	4293      	cmp	r3, r2
3400a8ee:	d02e      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8f0:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a8f4:	d02b      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a8fa:	4293      	cmp	r3, r2
3400a8fc:	d027      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a8fe:	4a35      	ldr	r2, [pc, #212]	@ (3400a9d4 <UART_AdvFeatureConfig+0x21c>)
3400a900:	4293      	cmp	r3, r2
3400a902:	d024      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a904:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a908:	4293      	cmp	r3, r2
3400a90a:	d020      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a90c:	4a32      	ldr	r2, [pc, #200]	@ (3400a9d8 <UART_AdvFeatureConfig+0x220>)
3400a90e:	4293      	cmp	r3, r2
3400a910:	d01d      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a912:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a916:	4293      	cmp	r3, r2
3400a918:	d019      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a91a:	4a30      	ldr	r2, [pc, #192]	@ (3400a9dc <UART_AdvFeatureConfig+0x224>)
3400a91c:	4293      	cmp	r3, r2
3400a91e:	d016      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a920:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a924:	4293      	cmp	r3, r2
3400a926:	d012      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a928:	4a2d      	ldr	r2, [pc, #180]	@ (3400a9e0 <UART_AdvFeatureConfig+0x228>)
3400a92a:	4293      	cmp	r3, r2
3400a92c:	d00f      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a92e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a932:	4293      	cmp	r3, r2
3400a934:	d00b      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a936:	4a2b      	ldr	r2, [pc, #172]	@ (3400a9e4 <UART_AdvFeatureConfig+0x22c>)
3400a938:	4293      	cmp	r3, r2
3400a93a:	d008      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a93c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a940:	4293      	cmp	r3, r2
3400a942:	d004      	beq.n	3400a94e <UART_AdvFeatureConfig+0x196>
3400a944:	f640 5115 	movw	r1, #3349	@ 0xd15
3400a948:	481d      	ldr	r0, [pc, #116]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a94a:	f7f6 fee3 	bl	34001714 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3400a94e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400a950:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
3400a954:	d004      	beq.n	3400a960 <UART_AdvFeatureConfig+0x1a8>
3400a956:	f640 5116 	movw	r1, #3350	@ 0xd16
3400a95a:	4819      	ldr	r0, [pc, #100]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a95c:	f7f6 feda 	bl	34001714 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a960:	6821      	ldr	r1, [r4, #0]
3400a962:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3400a964:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a966:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a96a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3400a96e:	ea43 0302 	orr.w	r3, r3, r2
3400a972:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a974:	d10f      	bne.n	3400a996 <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3400a976:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400a978:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
3400a97c:	d004      	beq.n	3400a988 <UART_AdvFeatureConfig+0x1d0>
3400a97e:	f640 511b 	movw	r1, #3355	@ 0xd1b
3400a982:	480f      	ldr	r0, [pc, #60]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a984:	f7f6 fec6 	bl	34001714 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3400a988:	6822      	ldr	r2, [r4, #0]
3400a98a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3400a98c:	6853      	ldr	r3, [r2, #4]
3400a98e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
3400a992:	430b      	orrs	r3, r1
3400a994:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3400a996:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a998:	061b      	lsls	r3, r3, #24
3400a99a:	d50f      	bpl.n	3400a9bc <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3400a99c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400a99e:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400a9a2:	d004      	beq.n	3400a9ae <UART_AdvFeatureConfig+0x1f6>
3400a9a4:	f640 5123 	movw	r1, #3363	@ 0xd23
3400a9a8:	4805      	ldr	r0, [pc, #20]	@ (3400a9c0 <UART_AdvFeatureConfig+0x208>)
3400a9aa:	f7f6 feb3 	bl	34001714 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3400a9ae:	6822      	ldr	r2, [r4, #0]
3400a9b0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400a9b2:	6853      	ldr	r3, [r2, #4]
3400a9b4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
3400a9b8:	430b      	orrs	r3, r1
3400a9ba:	6053      	str	r3, [r2, #4]
}
3400a9bc:	bd10      	pop	{r4, pc}
3400a9be:	bf00      	nop
3400a9c0:	34011030 	.word	0x34011030
3400a9c4:	52001000 	.word	0x52001000
3400a9c8:	50004400 	.word	0x50004400
3400a9cc:	50004800 	.word	0x50004800
3400a9d0:	50004c00 	.word	0x50004c00
3400a9d4:	52001400 	.word	0x52001400
3400a9d8:	50007800 	.word	0x50007800
3400a9dc:	50007c00 	.word	0x50007c00
3400a9e0:	52001800 	.word	0x52001800
3400a9e4:	52001c00 	.word	0x52001c00

3400a9e8 <UART_WaitOnFlagUntilTimeout>:
{
3400a9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400a9ec:	4604      	mov	r4, r0
3400a9ee:	460d      	mov	r5, r1
3400a9f0:	4617      	mov	r7, r2
3400a9f2:	4698      	mov	r8, r3
3400a9f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3400a9f8:	6822      	ldr	r2, [r4, #0]
3400a9fa:	69d3      	ldr	r3, [r2, #28]
3400a9fc:	ea35 0303 	bics.w	r3, r5, r3
3400aa00:	bf0c      	ite	eq
3400aa02:	2301      	moveq	r3, #1
3400aa04:	2300      	movne	r3, #0
3400aa06:	42bb      	cmp	r3, r7
3400aa08:	d001      	beq.n	3400aa0e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
3400aa0a:	2000      	movs	r0, #0
3400aa0c:	e022      	b.n	3400aa54 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
3400aa0e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
3400aa12:	d0f2      	beq.n	3400a9fa <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400aa14:	f7f7 fea4 	bl	34002760 <HAL_GetTick>
3400aa18:	eba0 0008 	sub.w	r0, r0, r8
3400aa1c:	4548      	cmp	r0, r9
3400aa1e:	d829      	bhi.n	3400aa74 <UART_WaitOnFlagUntilTimeout+0x8c>
3400aa20:	f1b9 0f00 	cmp.w	r9, #0
3400aa24:	d026      	beq.n	3400aa74 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3400aa26:	6821      	ldr	r1, [r4, #0]
3400aa28:	680b      	ldr	r3, [r1, #0]
3400aa2a:	075a      	lsls	r2, r3, #29
3400aa2c:	d5e4      	bpl.n	3400a9f8 <UART_WaitOnFlagUntilTimeout+0x10>
3400aa2e:	2d80      	cmp	r5, #128	@ 0x80
3400aa30:	d0e2      	beq.n	3400a9f8 <UART_WaitOnFlagUntilTimeout+0x10>
3400aa32:	2d40      	cmp	r5, #64	@ 0x40
3400aa34:	d0e0      	beq.n	3400a9f8 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3400aa36:	69ce      	ldr	r6, [r1, #28]
3400aa38:	f016 0608 	ands.w	r6, r6, #8
3400aa3c:	d00c      	beq.n	3400aa58 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400aa3e:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
3400aa40:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400aa42:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3400aa44:	f7ff fd10 	bl	3400a468 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
3400aa48:	2300      	movs	r3, #0
          return HAL_ERROR;
3400aa4a:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
3400aa4c:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
3400aa50:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400aa54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3400aa58:	69cb      	ldr	r3, [r1, #28]
3400aa5a:	051b      	lsls	r3, r3, #20
3400aa5c:	d5cc      	bpl.n	3400a9f8 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400aa5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
3400aa62:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400aa64:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
3400aa66:	f7ff fcff 	bl	3400a468 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400aa6a:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
3400aa6c:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400aa70:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
3400aa74:	2003      	movs	r0, #3
3400aa76:	e7ed      	b.n	3400aa54 <UART_WaitOnFlagUntilTimeout+0x6c>

3400aa78 <HAL_UART_Transmit>:
{
3400aa78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400aa7c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
3400aa7e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
3400aa82:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
3400aa84:	2b20      	cmp	r3, #32
{
3400aa86:	460d      	mov	r5, r1
3400aa88:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
3400aa8a:	d148      	bne.n	3400ab1e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
3400aa8c:	2900      	cmp	r1, #0
3400aa8e:	d048      	beq.n	3400ab22 <HAL_UART_Transmit+0xaa>
3400aa90:	2a00      	cmp	r2, #0
3400aa92:	d046      	beq.n	3400ab22 <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400aa94:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
3400aa96:	f04f 0900 	mov.w	r9, #0
3400aa9a:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400aa9e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
3400aaa2:	f7f7 fe5d 	bl	34002760 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400aaa6:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
3400aaa8:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400aaac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
3400aab0:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
3400aab4:	4607      	mov	r7, r0
      pdata16bits = NULL;
3400aab6:	464e      	mov	r6, r9
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400aab8:	d103      	bne.n	3400aac2 <HAL_UART_Transmit+0x4a>
3400aaba:	6923      	ldr	r3, [r4, #16]
3400aabc:	b90b      	cbnz	r3, 3400aac2 <HAL_UART_Transmit+0x4a>
      pdata16bits = (const uint16_t *) pData;
3400aabe:	462e      	mov	r6, r5
      pdata8bits  = NULL;
3400aac0:	461d      	mov	r5, r3
    while (huart->TxXferCount > 0U)
3400aac2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400aac6:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
3400aac8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400aaca:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
3400aace:	b942      	cbnz	r2, 3400aae2 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3400aad0:	2140      	movs	r1, #64	@ 0x40
3400aad2:	4620      	mov	r0, r4
3400aad4:	f7ff ff88 	bl	3400a9e8 <UART_WaitOnFlagUntilTimeout>
3400aad8:	2320      	movs	r3, #32
3400aada:	b948      	cbnz	r0, 3400aaf0 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
3400aadc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
3400aae0:	e009      	b.n	3400aaf6 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400aae2:	2200      	movs	r2, #0
3400aae4:	2180      	movs	r1, #128	@ 0x80
3400aae6:	4620      	mov	r0, r4
3400aae8:	f7ff ff7e 	bl	3400a9e8 <UART_WaitOnFlagUntilTimeout>
3400aaec:	b130      	cbz	r0, 3400aafc <HAL_UART_Transmit+0x84>
        huart->gState = HAL_UART_STATE_READY;
3400aaee:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
3400aaf0:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
3400aaf2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
3400aaf6:	b003      	add	sp, #12
3400aaf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400aafc:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
3400aafe:	b95d      	cbnz	r5, 3400ab18 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400ab00:	f836 3b02 	ldrh.w	r3, [r6], #2
3400ab04:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400ab08:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
3400ab0a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
3400ab0e:	3a01      	subs	r2, #1
3400ab10:	b292      	uxth	r2, r2
3400ab12:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
3400ab16:	e7d4      	b.n	3400aac2 <HAL_UART_Transmit+0x4a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400ab18:	f815 3b01 	ldrb.w	r3, [r5], #1
3400ab1c:	e7f4      	b.n	3400ab08 <HAL_UART_Transmit+0x90>
    return HAL_BUSY;
3400ab1e:	2002      	movs	r0, #2
3400ab20:	e7e9      	b.n	3400aaf6 <HAL_UART_Transmit+0x7e>
      return  HAL_ERROR;
3400ab22:	2001      	movs	r0, #1
3400ab24:	e7e7      	b.n	3400aaf6 <HAL_UART_Transmit+0x7e>

3400ab26 <UART_CheckIdleState>:
{
3400ab26:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400ab28:	2600      	movs	r6, #0
{
3400ab2a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400ab2c:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
3400ab30:	f7f7 fe16 	bl	34002760 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400ab34:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
3400ab36:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400ab38:	681b      	ldr	r3, [r3, #0]
3400ab3a:	071a      	lsls	r2, r3, #28
3400ab3c:	d51c      	bpl.n	3400ab78 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400ab3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400ab42:	4632      	mov	r2, r6
3400ab44:	9300      	str	r3, [sp, #0]
3400ab46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400ab4a:	4603      	mov	r3, r0
3400ab4c:	4620      	mov	r0, r4
3400ab4e:	f7ff ff4b 	bl	3400a9e8 <UART_WaitOnFlagUntilTimeout>
3400ab52:	b188      	cbz	r0, 3400ab78 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3400ab54:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400ab56:	e852 3f00 	ldrex	r3, [r2]
3400ab5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400ab5e:	e842 3100 	strex	r1, r3, [r2]
3400ab62:	2900      	cmp	r1, #0
3400ab64:	d1f6      	bne.n	3400ab54 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
3400ab66:	2320      	movs	r3, #32
3400ab68:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
3400ab6c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
3400ab6e:	2300      	movs	r3, #0
3400ab70:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400ab74:	b002      	add	sp, #8
3400ab76:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3400ab78:	6823      	ldr	r3, [r4, #0]
3400ab7a:	681b      	ldr	r3, [r3, #0]
3400ab7c:	075b      	lsls	r3, r3, #29
3400ab7e:	d524      	bpl.n	3400abca <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400ab80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400ab84:	2200      	movs	r2, #0
3400ab86:	9300      	str	r3, [sp, #0]
3400ab88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400ab8c:	462b      	mov	r3, r5
3400ab8e:	4620      	mov	r0, r4
3400ab90:	f7ff ff2a 	bl	3400a9e8 <UART_WaitOnFlagUntilTimeout>
3400ab94:	b1c8      	cbz	r0, 3400abca <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400ab96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400ab98:	e852 3f00 	ldrex	r3, [r2]
3400ab9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400aba0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400aba4:	6822      	ldr	r2, [r4, #0]
3400aba6:	2900      	cmp	r1, #0
3400aba8:	d1f5      	bne.n	3400ab96 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400abaa:	f102 0308 	add.w	r3, r2, #8
3400abae:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3400abb2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400abb6:	f102 0008 	add.w	r0, r2, #8
3400abba:	e840 3100 	strex	r1, r3, [r0]
3400abbe:	2900      	cmp	r1, #0
3400abc0:	d1f3      	bne.n	3400abaa <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3400abc2:	2320      	movs	r3, #32
3400abc4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
3400abc8:	e7d0      	b.n	3400ab6c <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
3400abca:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400abcc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
3400abce:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3400abd2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400abd6:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3400abd8:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
3400abda:	e7c8      	b.n	3400ab6e <UART_CheckIdleState+0x48>

3400abdc <HAL_UART_Init>:
{
3400abdc:	b510      	push	{r4, lr}
  if (huart == NULL)
3400abde:	4604      	mov	r4, r0
3400abe0:	2800      	cmp	r0, #0
3400abe2:	f000 80d0 	beq.w	3400ad86 <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400abe6:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400abe8:	6803      	ldr	r3, [r0, #0]
3400abea:	4a68      	ldr	r2, [pc, #416]	@ (3400ad8c <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400abec:	2900      	cmp	r1, #0
3400abee:	d07c      	beq.n	3400acea <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400abf0:	4293      	cmp	r3, r2
3400abf2:	d04e      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400abf4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400abf8:	4293      	cmp	r3, r2
3400abfa:	d04a      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400abfc:	4a64      	ldr	r2, [pc, #400]	@ (3400ad90 <HAL_UART_Init+0x1b4>)
3400abfe:	4293      	cmp	r3, r2
3400ac00:	d047      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac02:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ac06:	4293      	cmp	r3, r2
3400ac08:	d043      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac0a:	4a62      	ldr	r2, [pc, #392]	@ (3400ad94 <HAL_UART_Init+0x1b8>)
3400ac0c:	4293      	cmp	r3, r2
3400ac0e:	d040      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac10:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ac14:	4293      	cmp	r3, r2
3400ac16:	d03c      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac18:	4a5f      	ldr	r2, [pc, #380]	@ (3400ad98 <HAL_UART_Init+0x1bc>)
3400ac1a:	4293      	cmp	r3, r2
3400ac1c:	d039      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac1e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ac22:	4293      	cmp	r3, r2
3400ac24:	d035      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac26:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400ac2a:	d032      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400ac30:	4293      	cmp	r3, r2
3400ac32:	d02e      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac34:	4a59      	ldr	r2, [pc, #356]	@ (3400ad9c <HAL_UART_Init+0x1c0>)
3400ac36:	4293      	cmp	r3, r2
3400ac38:	d02b      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac3a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ac3e:	4293      	cmp	r3, r2
3400ac40:	d027      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac42:	4a57      	ldr	r2, [pc, #348]	@ (3400ada0 <HAL_UART_Init+0x1c4>)
3400ac44:	4293      	cmp	r3, r2
3400ac46:	d024      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac48:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ac4c:	4293      	cmp	r3, r2
3400ac4e:	d020      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac50:	4a54      	ldr	r2, [pc, #336]	@ (3400ada4 <HAL_UART_Init+0x1c8>)
3400ac52:	4293      	cmp	r3, r2
3400ac54:	d01d      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac56:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ac5a:	4293      	cmp	r3, r2
3400ac5c:	d019      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac5e:	4a52      	ldr	r2, [pc, #328]	@ (3400ada8 <HAL_UART_Init+0x1cc>)
3400ac60:	4293      	cmp	r3, r2
3400ac62:	d016      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac64:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ac68:	4293      	cmp	r3, r2
3400ac6a:	d012      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac6c:	4a4f      	ldr	r2, [pc, #316]	@ (3400adac <HAL_UART_Init+0x1d0>)
3400ac6e:	4293      	cmp	r3, r2
3400ac70:	d00f      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac72:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ac76:	4293      	cmp	r3, r2
3400ac78:	d00b      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac7a:	4a4d      	ldr	r2, [pc, #308]	@ (3400adb0 <HAL_UART_Init+0x1d4>)
3400ac7c:	4293      	cmp	r3, r2
3400ac7e:	d008      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac80:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ac84:	4293      	cmp	r3, r2
3400ac86:	d004      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ac88:	f240 113f 	movw	r1, #319	@ 0x13f
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400ac8c:	4849      	ldr	r0, [pc, #292]	@ (3400adb4 <HAL_UART_Init+0x1d8>)
3400ac8e:	f7f6 fd41 	bl	34001714 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3400ac92:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3400ac96:	b923      	cbnz	r3, 3400aca2 <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
3400ac98:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
3400ac9a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3400ac9e:	f7ff fc0f 	bl	3400a4c0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3400aca2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
3400aca4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3400aca6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
3400acaa:	6813      	ldr	r3, [r2, #0]
3400acac:	f023 0301 	bic.w	r3, r3, #1
3400acb0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3400acb2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400acb4:	b113      	cbz	r3, 3400acbc <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
3400acb6:	4620      	mov	r0, r4
3400acb8:	f7ff fd7e 	bl	3400a7b8 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
3400acbc:	4620      	mov	r0, r4
3400acbe:	f7ff fc01 	bl	3400a4c4 <UART_SetConfig>
3400acc2:	2801      	cmp	r0, #1
3400acc4:	d05f      	beq.n	3400ad86 <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400acc6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
3400acc8:	4620      	mov	r0, r4
}
3400acca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400acce:	685a      	ldr	r2, [r3, #4]
3400acd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3400acd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3400acd6:	689a      	ldr	r2, [r3, #8]
3400acd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3400acdc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3400acde:	681a      	ldr	r2, [r3, #0]
3400ace0:	f042 0201 	orr.w	r2, r2, #1
3400ace4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
3400ace6:	f7ff bf1e 	b.w	3400ab26 <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400acea:	4293      	cmp	r3, r2
3400acec:	d0d1      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400acee:	4a32      	ldr	r2, [pc, #200]	@ (3400adb8 <HAL_UART_Init+0x1dc>)
3400acf0:	4293      	cmp	r3, r2
3400acf2:	d0ce      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400acf4:	4a26      	ldr	r2, [pc, #152]	@ (3400ad90 <HAL_UART_Init+0x1b4>)
3400acf6:	4293      	cmp	r3, r2
3400acf8:	d0cb      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400acfa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400acfe:	4293      	cmp	r3, r2
3400ad00:	d0c7      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad02:	4a24      	ldr	r2, [pc, #144]	@ (3400ad94 <HAL_UART_Init+0x1b8>)
3400ad04:	4293      	cmp	r3, r2
3400ad06:	d0c4      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad08:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ad0c:	4293      	cmp	r3, r2
3400ad0e:	d0c0      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad10:	4a21      	ldr	r2, [pc, #132]	@ (3400ad98 <HAL_UART_Init+0x1bc>)
3400ad12:	4293      	cmp	r3, r2
3400ad14:	d0bd      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad16:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ad1a:	4293      	cmp	r3, r2
3400ad1c:	d0b9      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad1e:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400ad22:	d0b6      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400ad28:	4293      	cmp	r3, r2
3400ad2a:	d0b2      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad2c:	4a1b      	ldr	r2, [pc, #108]	@ (3400ad9c <HAL_UART_Init+0x1c0>)
3400ad2e:	4293      	cmp	r3, r2
3400ad30:	d0af      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad32:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ad36:	4293      	cmp	r3, r2
3400ad38:	d0ab      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad3a:	4a19      	ldr	r2, [pc, #100]	@ (3400ada0 <HAL_UART_Init+0x1c4>)
3400ad3c:	4293      	cmp	r3, r2
3400ad3e:	d0a8      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad40:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ad44:	4293      	cmp	r3, r2
3400ad46:	d0a4      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad48:	4a16      	ldr	r2, [pc, #88]	@ (3400ada4 <HAL_UART_Init+0x1c8>)
3400ad4a:	4293      	cmp	r3, r2
3400ad4c:	d0a1      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad4e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ad52:	4293      	cmp	r3, r2
3400ad54:	d09d      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad56:	4a14      	ldr	r2, [pc, #80]	@ (3400ada8 <HAL_UART_Init+0x1cc>)
3400ad58:	4293      	cmp	r3, r2
3400ad5a:	d09a      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad5c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ad60:	4293      	cmp	r3, r2
3400ad62:	d096      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad64:	4a11      	ldr	r2, [pc, #68]	@ (3400adac <HAL_UART_Init+0x1d0>)
3400ad66:	4293      	cmp	r3, r2
3400ad68:	d093      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad6a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ad6e:	4293      	cmp	r3, r2
3400ad70:	d08f      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad72:	4a0f      	ldr	r2, [pc, #60]	@ (3400adb0 <HAL_UART_Init+0x1d4>)
3400ad74:	4293      	cmp	r3, r2
3400ad76:	d08c      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad78:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ad7c:	4293      	cmp	r3, r2
3400ad7e:	d088      	beq.n	3400ac92 <HAL_UART_Init+0xb6>
3400ad80:	f44f 71a2 	mov.w	r1, #324	@ 0x144
3400ad84:	e782      	b.n	3400ac8c <HAL_UART_Init+0xb0>
}
3400ad86:	2001      	movs	r0, #1
3400ad88:	bd10      	pop	{r4, pc}
3400ad8a:	bf00      	nop
3400ad8c:	52001000 	.word	0x52001000
3400ad90:	50004400 	.word	0x50004400
3400ad94:	50004800 	.word	0x50004800
3400ad98:	50004c00 	.word	0x50004c00
3400ad9c:	52001400 	.word	0x52001400
3400ada0:	50007800 	.word	0x50007800
3400ada4:	50007c00 	.word	0x50007c00
3400ada8:	52001800 	.word	0x52001800
3400adac:	52001c00 	.word	0x52001c00
3400adb0:	56000c00 	.word	0x56000c00
3400adb4:	34011030 	.word	0x34011030
3400adb8:	42001000 	.word	0x42001000

3400adbc <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400adbc:	6802      	ldr	r2, [r0, #0]
{
3400adbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400adc2:	6813      	ldr	r3, [r2, #0]
{
3400adc4:	4606      	mov	r6, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400adc6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400adca:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400adcc:	6883      	ldr	r3, [r0, #8]
{
3400adce:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400add0:	b97b      	cbnz	r3, 3400adf2 <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400add2:	684b      	ldr	r3, [r1, #4]
3400add4:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400add8:	d004      	beq.n	3400ade4 <XSPI_ConfigCmd+0x28>
3400adda:	f640 41a4 	movw	r1, #3236	@ 0xca4
3400adde:	4876      	ldr	r0, [pc, #472]	@ (3400afb8 <XSPI_ConfigCmd+0x1fc>)
3400ade0:	f7f6 fc98 	bl	34001714 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3400ade4:	6832      	ldr	r2, [r6, #0]
3400ade6:	6861      	ldr	r1, [r4, #4]
3400ade8:	6813      	ldr	r3, [r2, #0]
3400adea:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
3400adee:	430b      	orrs	r3, r1
3400adf0:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400adf2:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3400adf4:	6831      	ldr	r1, [r6, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400adf6:	2b02      	cmp	r3, #2
3400adf8:	d158      	bne.n	3400aeac <XSPI_ConfigCmd+0xf0>
    ccr_reg = &(hxspi->Instance->WCCR);
3400adfa:	f501 72c0 	add.w	r2, r1, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
3400adfe:	f501 70c4 	add.w	r0, r1, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
3400ae02:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
3400ae06:	f501 73d0 	add.w	r3, r1, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3400ae0a:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
3400ae0c:	6017      	str	r7, [r2, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400ae0e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
3400ae10:	b167      	cbz	r7, 3400ae2c <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3400ae12:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3400ae14:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3400ae16:	6b67      	ldr	r7, [r4, #52]	@ 0x34
3400ae18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ae1a:	f8d2 c000 	ldr.w	ip, [r2]
3400ae1e:	433b      	orrs	r3, r7
3400ae20:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3400ae22:	433b      	orrs	r3, r7
3400ae24:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
3400ae28:	433b      	orrs	r3, r7
3400ae2a:	6013      	str	r3, [r2, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3400ae2c:	6803      	ldr	r3, [r0, #0]
3400ae2e:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3400ae30:	f023 031f 	bic.w	r3, r3, #31
3400ae34:	433b      	orrs	r3, r7
3400ae36:	6003      	str	r3, [r0, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ae38:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
3400ae3c:	f1be 0f00 	cmp.w	lr, #0
3400ae40:	d00e      	beq.n	3400ae60 <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400ae42:	6823      	ldr	r3, [r4, #0]
3400ae44:	b913      	cbnz	r3, 3400ae4c <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3400ae46:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400ae48:	3b01      	subs	r3, #1
3400ae4a:	640b      	str	r3, [r1, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3400ae4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400ae4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400ae52:	d13f      	bne.n	3400aed4 <XSPI_ConfigCmd+0x118>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400ae54:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400ae58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400ae5c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400ae60:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400ae62:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400ae66:	2b00      	cmp	r3, #0
3400ae68:	f000 8083 	beq.w	3400af72 <XSPI_ConfigCmd+0x1b6>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ae6c:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400ae70:	f1b9 0f00 	cmp.w	r9, #0
3400ae74:	d053      	beq.n	3400af1e <XSPI_ConfigCmd+0x162>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ae76:	e9d4 0708 	ldrd	r0, r7, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ae7a:	f1be 0f00 	cmp.w	lr, #0
3400ae7e:	d032      	beq.n	3400aee6 <XSPI_ConfigCmd+0x12a>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ae80:	ea4e 0303 	orr.w	r3, lr, r3
3400ae84:	ea43 0309 	orr.w	r3, r3, r9
3400ae88:	ea43 0308 	orr.w	r3, r3, r8
3400ae8c:	ea43 030c 	orr.w	r3, r3, ip
3400ae90:	433b      	orrs	r3, r7
3400ae92:	4303      	orrs	r3, r0
3400ae94:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400ae96:	6816      	ldr	r6, [r2, #0]
3400ae98:	4303      	orrs	r3, r0
3400ae9a:	4848      	ldr	r0, [pc, #288]	@ (3400afbc <XSPI_ConfigCmd+0x200>)
3400ae9c:	4030      	ands	r0, r6
3400ae9e:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400aea0:	6013      	str	r3, [r2, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3400aea2:	68a3      	ldr	r3, [r4, #8]
3400aea4:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3400aea6:	69a3      	ldr	r3, [r4, #24]
3400aea8:	648b      	str	r3, [r1, #72]	@ 0x48
3400aeaa:	e04c      	b.n	3400af46 <XSPI_ConfigCmd+0x18a>
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3400aeac:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
3400aeae:	bf01      	itttt	eq
3400aeb0:	f501 72a0 	addeq.w	r2, r1, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
3400aeb4:	f501 70a4 	addeq.w	r0, r1, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
3400aeb8:	f501 75a8 	addeq.w	r5, r1, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
3400aebc:	f501 73b0 	addeq.w	r3, r1, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
3400aec0:	bf1f      	itttt	ne
3400aec2:	f501 7280 	addne.w	r2, r1, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
3400aec6:	f501 7084 	addne.w	r0, r1, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
3400aeca:	f501 7588 	addne.w	r5, r1, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
3400aece:	f501 7390 	addne.w	r3, r1, #288	@ 0x120
3400aed2:	e79a      	b.n	3400ae0a <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3400aed4:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3400aed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400aeda:	d1c1      	bne.n	3400ae60 <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400aedc:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400aee0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3400aee4:	e7ba      	b.n	3400ae5c <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400aee6:	ea43 0309 	orr.w	r3, r3, r9
3400aeea:	f8d2 e000 	ldr.w	lr, [r2]
3400aeee:	ea43 0308 	orr.w	r3, r3, r8
3400aef2:	ea43 030c 	orr.w	r3, r3, ip
3400aef6:	433b      	orrs	r3, r7
3400aef8:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
3400aefc:	4303      	orrs	r3, r0
3400aefe:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
3400af02:	ea43 030e 	orr.w	r3, r3, lr
3400af06:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400af08:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400af0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400af0e:	d1c8      	bne.n	3400aea2 <XSPI_ConfigCmd+0xe6>
3400af10:	6963      	ldr	r3, [r4, #20]
3400af12:	2b08      	cmp	r3, #8
3400af14:	d1c5      	bne.n	3400aea2 <XSPI_ConfigCmd+0xe6>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400af16:	6813      	ldr	r3, [r2, #0]
3400af18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400af1c:	e7c0      	b.n	3400aea0 <XSPI_ConfigCmd+0xe4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400af1e:	6811      	ldr	r1, [r2, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400af20:	f1be 0f00 	cmp.w	lr, #0
3400af24:	d012      	beq.n	3400af4c <XSPI_ConfigCmd+0x190>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400af26:	ea4e 0303 	orr.w	r3, lr, r3
3400af2a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400af2c:	ea43 0308 	orr.w	r3, r3, r8
3400af30:	ea43 030c 	orr.w	r3, r3, ip
3400af34:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
3400af38:	4303      	orrs	r3, r0
3400af3a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400af3e:	430b      	orrs	r3, r1
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400af40:	6013      	str	r3, [r2, #0]
      *ir_reg = pCmd->Instruction;
3400af42:	68a3      	ldr	r3, [r4, #8]
3400af44:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
3400af46:	2000      	movs	r0, #0
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  return status;
}
3400af48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3400af4c:	ea43 0308 	orr.w	r3, r3, r8
3400af50:	ea43 030c 	orr.w	r3, r3, ip
3400af54:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400af58:	430b      	orrs	r3, r1
3400af5a:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400af5c:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400af5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400af62:	d1ee      	bne.n	3400af42 <XSPI_ConfigCmd+0x186>
3400af64:	6963      	ldr	r3, [r4, #20]
3400af66:	2b08      	cmp	r3, #8
3400af68:	d1eb      	bne.n	3400af42 <XSPI_ConfigCmd+0x186>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400af6a:	6813      	ldr	r3, [r2, #0]
3400af6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400af70:	e7e6      	b.n	3400af40 <XSPI_ConfigCmd+0x184>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400af72:	f1b9 0f00 	cmp.w	r9, #0
3400af76:	d01b      	beq.n	3400afb0 <XSPI_ConfigCmd+0x1f4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400af78:	e9d4 6008 	ldrd	r6, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400af7c:	f1be 0f00 	cmp.w	lr, #0
3400af80:	d00d      	beq.n	3400af9e <XSPI_ConfigCmd+0x1e2>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3400af82:	ea4e 0309 	orr.w	r3, lr, r9
3400af86:	6815      	ldr	r5, [r2, #0]
3400af88:	4303      	orrs	r3, r0
3400af8a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400af8c:	4333      	orrs	r3, r6
3400af8e:	4303      	orrs	r3, r0
3400af90:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
3400af94:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
3400af98:	4303      	orrs	r3, r0
3400af9a:	6013      	str	r3, [r2, #0]
3400af9c:	e783      	b.n	3400aea6 <XSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3400af9e:	6813      	ldr	r3, [r2, #0]
3400afa0:	ea40 0009 	orr.w	r0, r0, r9
3400afa4:	4330      	orrs	r0, r6
3400afa6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400afaa:	4318      	orrs	r0, r3
3400afac:	6010      	str	r0, [r2, #0]
3400afae:	e77a      	b.n	3400aea6 <XSPI_ConfigCmd+0xea>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400afb0:	2308      	movs	r3, #8
      status = HAL_ERROR;
3400afb2:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400afb4:	65f3      	str	r3, [r6, #92]	@ 0x5c
3400afb6:	e7c7      	b.n	3400af48 <XSPI_ConfigCmd+0x18c>
3400afb8:	34011065 	.word	0x34011065
3400afbc:	f0ffc0c0 	.word	0xf0ffc0c0

3400afc0 <XSPI_WaitFlagStateUntilTimeout>:
{
3400afc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400afc4:	4604      	mov	r4, r0
3400afc6:	460e      	mov	r6, r1
3400afc8:	4615      	mov	r5, r2
3400afca:	461f      	mov	r7, r3
3400afcc:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3400afd0:	6822      	ldr	r2, [r4, #0]
3400afd2:	6a13      	ldr	r3, [r2, #32]
3400afd4:	4233      	tst	r3, r6
3400afd6:	bf14      	ite	ne
3400afd8:	2301      	movne	r3, #1
3400afda:	2300      	moveq	r3, #0
3400afdc:	42ab      	cmp	r3, r5
3400afde:	d101      	bne.n	3400afe4 <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
3400afe0:	2000      	movs	r0, #0
3400afe2:	e00e      	b.n	3400b002 <XSPI_WaitFlagStateUntilTimeout+0x42>
    if (Timeout != HAL_MAX_DELAY)
3400afe4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
3400afe8:	d0f3      	beq.n	3400afd2 <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400afea:	f7f7 fbb9 	bl	34002760 <HAL_GetTick>
3400afee:	1bc0      	subs	r0, r0, r7
3400aff0:	4540      	cmp	r0, r8
3400aff2:	d908      	bls.n	3400b006 <XSPI_WaitFlagStateUntilTimeout+0x46>
        hxspi->State     = HAL_XSPI_STATE_READY;
3400aff4:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400aff6:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
3400aff8:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400affa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3400affc:	f043 0301 	orr.w	r3, r3, #1
3400b000:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
3400b002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400b006:	f1b8 0f00 	cmp.w	r8, #0
3400b00a:	d1e1      	bne.n	3400afd0 <XSPI_WaitFlagStateUntilTimeout+0x10>
3400b00c:	e7f2      	b.n	3400aff4 <XSPI_WaitFlagStateUntilTimeout+0x34>

3400b00e <HAL_XSPI_MspInit>:
}
3400b00e:	4770      	bx	lr

3400b010 <HAL_XSPI_Init>:
{
3400b010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400b012:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3400b014:	f7f7 fba4 	bl	34002760 <HAL_GetTick>
3400b018:	4606      	mov	r6, r0
  if (hxspi == NULL)
3400b01a:	2c00      	cmp	r4, #0
3400b01c:	f000 812a 	beq.w	3400b274 <HAL_XSPI_Init+0x264>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3400b020:	68a3      	ldr	r3, [r4, #8]
3400b022:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3400b026:	d004      	beq.n	3400b032 <HAL_XSPI_Init+0x22>
3400b028:	f240 1161 	movw	r1, #353	@ 0x161
3400b02c:	4892      	ldr	r0, [pc, #584]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b02e:	f7f6 fb71 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3400b032:	68e3      	ldr	r3, [r4, #12]
3400b034:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
3400b038:	d009      	beq.n	3400b04e <HAL_XSPI_Init+0x3e>
3400b03a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3400b03e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400b042:	d004      	beq.n	3400b04e <HAL_XSPI_Init+0x3e>
3400b044:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400b048:	488b      	ldr	r0, [pc, #556]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b04a:	f7f6 fb63 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3400b04e:	6923      	ldr	r3, [r4, #16]
3400b050:	2b1f      	cmp	r3, #31
3400b052:	d904      	bls.n	3400b05e <HAL_XSPI_Init+0x4e>
3400b054:	f240 1163 	movw	r1, #355	@ 0x163
3400b058:	4887      	ldr	r0, [pc, #540]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b05a:	f7f6 fb5b 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3400b05e:	6963      	ldr	r3, [r4, #20]
3400b060:	3b01      	subs	r3, #1
3400b062:	2b3f      	cmp	r3, #63	@ 0x3f
3400b064:	d904      	bls.n	3400b070 <HAL_XSPI_Init+0x60>
3400b066:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400b06a:	4883      	ldr	r0, [pc, #524]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b06c:	f7f6 fb52 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
3400b070:	69a3      	ldr	r3, [r4, #24]
3400b072:	f033 0302 	bics.w	r3, r3, #2
3400b076:	d004      	beq.n	3400b082 <HAL_XSPI_Init+0x72>
3400b078:	f240 1165 	movw	r1, #357	@ 0x165
3400b07c:	487e      	ldr	r0, [pc, #504]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b07e:	f7f6 fb49 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3400b082:	69e3      	ldr	r3, [r4, #28]
3400b084:	2b01      	cmp	r3, #1
3400b086:	d904      	bls.n	3400b092 <HAL_XSPI_Init+0x82>
3400b088:	f44f 71b3 	mov.w	r1, #358	@ 0x166
3400b08c:	487a      	ldr	r0, [pc, #488]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b08e:	f7f6 fb41 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3400b092:	6a23      	ldr	r3, [r4, #32]
3400b094:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
3400b098:	d00c      	beq.n	3400b0b4 <HAL_XSPI_Init+0xa4>
3400b09a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400b09e:	d009      	beq.n	3400b0b4 <HAL_XSPI_Init+0xa4>
3400b0a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400b0a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400b0a8:	d004      	beq.n	3400b0b4 <HAL_XSPI_Init+0xa4>
3400b0aa:	f240 1167 	movw	r1, #359	@ 0x167
3400b0ae:	4872      	ldr	r0, [pc, #456]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b0b0:	f7f6 fb30 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
3400b0b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400b0b6:	2bff      	cmp	r3, #255	@ 0xff
3400b0b8:	d904      	bls.n	3400b0c4 <HAL_XSPI_Init+0xb4>
3400b0ba:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3400b0be:	486e      	ldr	r0, [pc, #440]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b0c0:	f7f6 fb28 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
3400b0c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400b0c6:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
3400b0ca:	d004      	beq.n	3400b0d6 <HAL_XSPI_Init+0xc6>
3400b0cc:	f240 1169 	movw	r1, #361	@ 0x169
3400b0d0:	4869      	ldr	r0, [pc, #420]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b0d2:	f7f6 fb1f 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
3400b0d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400b0d8:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
3400b0dc:	d004      	beq.n	3400b0e8 <HAL_XSPI_Init+0xd8>
3400b0de:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400b0e2:	4865      	ldr	r0, [pc, #404]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b0e4:	f7f6 fb16 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
3400b0e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400b0ea:	2b1f      	cmp	r3, #31
3400b0ec:	d904      	bls.n	3400b0f8 <HAL_XSPI_Init+0xe8>
3400b0ee:	f240 116b 	movw	r1, #363	@ 0x16b
3400b0f2:	4861      	ldr	r0, [pc, #388]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b0f4:	f7f6 fb0e 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
3400b0f8:	6863      	ldr	r3, [r4, #4]
3400b0fa:	3b01      	subs	r3, #1
3400b0fc:	2b3f      	cmp	r3, #63	@ 0x3f
3400b0fe:	d904      	bls.n	3400b10a <HAL_XSPI_Init+0xfa>
3400b100:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3400b104:	485c      	ldr	r0, [pc, #368]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b106:	f7f6 fb05 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3400b10a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400b10c:	2bff      	cmp	r3, #255	@ 0xff
3400b10e:	d904      	bls.n	3400b11a <HAL_XSPI_Init+0x10a>
3400b110:	f240 116d 	movw	r1, #365	@ 0x16d
3400b114:	4858      	ldr	r0, [pc, #352]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b116:	f7f6 fafd 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3400b11a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400b11c:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3400b120:	d004      	beq.n	3400b12c <HAL_XSPI_Init+0x11c>
3400b122:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3400b126:	4854      	ldr	r0, [pc, #336]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b128:	f7f6 faf4 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
3400b12c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400b12e:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3400b132:	d004      	beq.n	3400b13e <HAL_XSPI_Init+0x12e>
3400b134:	f240 116f 	movw	r1, #367	@ 0x16f
3400b138:	484f      	ldr	r0, [pc, #316]	@ (3400b278 <HAL_XSPI_Init+0x268>)
3400b13a:	f7f6 faeb 	bl	34001714 <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400b13e:	2300      	movs	r3, #0
3400b140:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3400b142:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3400b144:	2f00      	cmp	r7, #0
3400b146:	f040 8087 	bne.w	3400b258 <HAL_XSPI_Init+0x248>
      HAL_XSPI_MspInit(hxspi);
3400b14a:	4620      	mov	r0, r4
3400b14c:	f7ff ff5f 	bl	3400b00e <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
3400b150:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3400b154:	69e3      	ldr	r3, [r4, #28]
3400b156:	68e5      	ldr	r5, [r4, #12]
3400b158:	6821      	ldr	r1, [r4, #0]
3400b15a:	431d      	orrs	r5, r3
3400b15c:	6923      	ldr	r3, [r4, #16]
3400b15e:	6888      	ldr	r0, [r1, #8]
3400b160:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3400b164:	4b45      	ldr	r3, [pc, #276]	@ (3400b27c <HAL_XSPI_Init+0x26c>)
  hxspi->Timeout = Timeout;
3400b166:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
3400b168:	4003      	ands	r3, r0
3400b16a:	431d      	orrs	r5, r3
3400b16c:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400b16e:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
3400b170:	3b01      	subs	r3, #1
3400b172:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3400b176:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400b178:	68cb      	ldr	r3, [r1, #12]
3400b17a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3400b17e:	4303      	orrs	r3, r0
3400b180:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3400b182:	690b      	ldr	r3, [r1, #16]
3400b184:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3400b186:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3400b18a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400b18e:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3400b190:	690b      	ldr	r3, [r1, #16]
3400b192:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3400b194:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400b198:	4303      	orrs	r3, r0
3400b19a:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400b19c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400b19e:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400b1a0:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400b1a2:	680b      	ldr	r3, [r1, #0]
3400b1a4:	3801      	subs	r0, #1
3400b1a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400b1aa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
3400b1ae:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400b1b0:	4620      	mov	r0, r4
3400b1b2:	9200      	str	r2, [sp, #0]
3400b1b4:	4633      	mov	r3, r6
3400b1b6:	463a      	mov	r2, r7
3400b1b8:	2120      	movs	r1, #32
3400b1ba:	f7ff ff01 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400b1be:	2800      	cmp	r0, #0
3400b1c0:	d156      	bne.n	3400b270 <HAL_XSPI_Init+0x260>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b1c2:	6823      	ldr	r3, [r4, #0]
3400b1c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400b1c6:	68da      	ldr	r2, [r3, #12]
3400b1c8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
3400b1cc:	430a      	orrs	r2, r1
3400b1ce:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3400b1d0:	4a2b      	ldr	r2, [pc, #172]	@ (3400b280 <HAL_XSPI_Init+0x270>)
3400b1d2:	4293      	cmp	r3, r2
3400b1d4:	d042      	beq.n	3400b25c <HAL_XSPI_Init+0x24c>
3400b1d6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400b1da:	4293      	cmp	r3, r2
3400b1dc:	d03e      	beq.n	3400b25c <HAL_XSPI_Init+0x24c>
3400b1de:	4a29      	ldr	r2, [pc, #164]	@ (3400b284 <HAL_XSPI_Init+0x274>)
3400b1e0:	4293      	cmp	r3, r2
3400b1e2:	d03b      	beq.n	3400b25c <HAL_XSPI_Init+0x24c>
3400b1e4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400b1e8:	4293      	cmp	r3, r2
3400b1ea:	d037      	beq.n	3400b25c <HAL_XSPI_Init+0x24c>
3400b1ec:	4a26      	ldr	r2, [pc, #152]	@ (3400b288 <HAL_XSPI_Init+0x278>)
3400b1ee:	4293      	cmp	r3, r2
3400b1f0:	d034      	beq.n	3400b25c <HAL_XSPI_Init+0x24c>
3400b1f2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400b1f6:	4293      	cmp	r3, r2
3400b1f8:	d030      	beq.n	3400b25c <HAL_XSPI_Init+0x24c>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3400b1fa:	6823      	ldr	r3, [r4, #0]
3400b1fc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
3400b1fe:	6819      	ldr	r1, [r3, #0]
3400b200:	68a2      	ldr	r2, [r4, #8]
3400b202:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400b206:	4302      	orrs	r2, r0
3400b208:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3400b20c:	430a      	orrs	r2, r1
3400b20e:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3400b210:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
3400b214:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
3400b218:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
3400b21c:	4302      	orrs	r2, r0
3400b21e:	430a      	orrs	r2, r1
3400b220:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3400b224:	681a      	ldr	r2, [r3, #0]
3400b226:	f042 0201 	orr.w	r2, r2, #1
3400b22a:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3400b22c:	69a2      	ldr	r2, [r4, #24]
3400b22e:	2a02      	cmp	r2, #2
3400b230:	d103      	bne.n	3400b23a <HAL_XSPI_Init+0x22a>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3400b232:	689a      	ldr	r2, [r3, #8]
3400b234:	f042 0202 	orr.w	r2, r2, #2
3400b238:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3400b23a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400b23c:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3400b240:	bf02      	ittt	eq
3400b242:	689a      	ldreq	r2, [r3, #8]
3400b244:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
3400b248:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b24a:	68e3      	ldr	r3, [r4, #12]
3400b24c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3400b250:	bf0c      	ite	eq
3400b252:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3400b254:	2302      	movne	r3, #2
3400b256:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
3400b258:	2000      	movs	r0, #0
3400b25a:	e009      	b.n	3400b270 <HAL_XSPI_Init+0x260>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400b25c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3400b25e:	2200      	movs	r2, #0
3400b260:	9300      	str	r3, [sp, #0]
3400b262:	2120      	movs	r1, #32
3400b264:	4633      	mov	r3, r6
3400b266:	4620      	mov	r0, r4
3400b268:	f7ff feaa 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
3400b26c:	2800      	cmp	r0, #0
3400b26e:	d0c4      	beq.n	3400b1fa <HAL_XSPI_Init+0x1ea>
}
3400b270:	b003      	add	sp, #12
3400b272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3400b274:	2001      	movs	r0, #1
3400b276:	e7fb      	b.n	3400b270 <HAL_XSPI_Init+0x260>
3400b278:	34011065 	.word	0x34011065
3400b27c:	f8e0c0fc 	.word	0xf8e0c0fc
3400b280:	58025000 	.word	0x58025000
3400b284:	5802a000 	.word	0x5802a000
3400b288:	5802d000 	.word	0x5802d000

3400b28c <HAL_XSPI_Command>:
{
3400b28c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400b28e:	460c      	mov	r4, r1
3400b290:	4605      	mov	r5, r0
3400b292:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400b294:	f7f7 fa64 	bl	34002760 <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400b298:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b29a:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400b29c:	2b03      	cmp	r3, #3
3400b29e:	d904      	bls.n	3400b2aa <HAL_XSPI_Command+0x1e>
3400b2a0:	f240 313e 	movw	r1, #830	@ 0x33e
3400b2a4:	4884      	ldr	r0, [pc, #528]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b2a6:	f7f6 fa35 	bl	34001714 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400b2aa:	68ab      	ldr	r3, [r5, #8]
3400b2ac:	b943      	cbnz	r3, 3400b2c0 <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400b2ae:	6863      	ldr	r3, [r4, #4]
3400b2b0:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400b2b4:	d004      	beq.n	3400b2c0 <HAL_XSPI_Command+0x34>
3400b2b6:	f240 3141 	movw	r1, #833	@ 0x341
3400b2ba:	487f      	ldr	r0, [pc, #508]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b2bc:	f7f6 fa2a 	bl	34001714 <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3400b2c0:	68e3      	ldr	r3, [r4, #12]
3400b2c2:	2b04      	cmp	r3, #4
3400b2c4:	d904      	bls.n	3400b2d0 <HAL_XSPI_Command+0x44>
3400b2c6:	f44f 7151 	mov.w	r1, #836	@ 0x344
3400b2ca:	487b      	ldr	r0, [pc, #492]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b2cc:	f7f6 fa22 	bl	34001714 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400b2d0:	68e3      	ldr	r3, [r4, #12]
3400b2d2:	b18b      	cbz	r3, 3400b2f8 <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
3400b2d4:	6923      	ldr	r3, [r4, #16]
3400b2d6:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400b2da:	d004      	beq.n	3400b2e6 <HAL_XSPI_Command+0x5a>
3400b2dc:	f240 3147 	movw	r1, #839	@ 0x347
3400b2e0:	4875      	ldr	r0, [pc, #468]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b2e2:	f7f6 fa17 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3400b2e6:	6963      	ldr	r3, [r4, #20]
3400b2e8:	f033 0308 	bics.w	r3, r3, #8
3400b2ec:	d004      	beq.n	3400b2f8 <HAL_XSPI_Command+0x6c>
3400b2ee:	f44f 7152 	mov.w	r1, #840	@ 0x348
3400b2f2:	4871      	ldr	r0, [pc, #452]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b2f4:	f7f6 fa0e 	bl	34001714 <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400b2f8:	69e3      	ldr	r3, [r4, #28]
3400b2fa:	b303      	cbz	r3, 3400b33e <HAL_XSPI_Command+0xb2>
3400b2fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3400b300:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3400b304:	d10d      	bne.n	3400b322 <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400b306:	6a23      	ldr	r3, [r4, #32]
3400b308:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400b30c:	d12c      	bne.n	3400b368 <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3400b30e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400b310:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400b314:	d013      	beq.n	3400b33e <HAL_XSPI_Command+0xb2>
3400b316:	f240 314f 	movw	r1, #847	@ 0x34f
3400b31a:	4867      	ldr	r0, [pc, #412]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b31c:	f7f6 f9fa 	bl	34001714 <assert_failed>
3400b320:	e00d      	b.n	3400b33e <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400b322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400b326:	d0ee      	beq.n	3400b306 <HAL_XSPI_Command+0x7a>
3400b328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400b32c:	d0eb      	beq.n	3400b306 <HAL_XSPI_Command+0x7a>
3400b32e:	f240 314b 	movw	r1, #843	@ 0x34b
3400b332:	4861      	ldr	r0, [pc, #388]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b334:	f7f6 f9ee 	bl	34001714 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400b338:	69e3      	ldr	r3, [r4, #28]
3400b33a:	2b00      	cmp	r3, #0
3400b33c:	d1e3      	bne.n	3400b306 <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400b33e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400b340:	b333      	cbz	r3, 3400b390 <HAL_XSPI_Command+0x104>
3400b342:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3400b346:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3400b34a:	d113      	bne.n	3400b374 <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400b34c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400b34e:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3400b352:	d13d      	bne.n	3400b3d0 <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3400b354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400b356:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400b35a:	d019      	beq.n	3400b390 <HAL_XSPI_Command+0x104>
3400b35c:	f240 3156 	movw	r1, #854	@ 0x356
3400b360:	4855      	ldr	r0, [pc, #340]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b362:	f7f6 f9d7 	bl	34001714 <assert_failed>
3400b366:	e013      	b.n	3400b390 <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400b368:	f240 314e 	movw	r1, #846	@ 0x34e
3400b36c:	4852      	ldr	r0, [pc, #328]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b36e:	f7f6 f9d1 	bl	34001714 <assert_failed>
3400b372:	e7cc      	b.n	3400b30e <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400b374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400b378:	d0e8      	beq.n	3400b34c <HAL_XSPI_Command+0xc0>
3400b37a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400b37e:	d0e5      	beq.n	3400b34c <HAL_XSPI_Command+0xc0>
3400b380:	f240 3152 	movw	r1, #850	@ 0x352
3400b384:	484c      	ldr	r0, [pc, #304]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b386:	f7f6 f9c5 	bl	34001714 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400b38a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400b38c:	2b00      	cmp	r3, #0
3400b38e:	d1dd      	bne.n	3400b34c <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400b390:	68eb      	ldr	r3, [r5, #12]
3400b392:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400b394:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400b398:	d120      	bne.n	3400b3dc <HAL_XSPI_Command+0x150>
3400b39a:	b389      	cbz	r1, 3400b400 <HAL_XSPI_Command+0x174>
3400b39c:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400b3a0:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
3400b3a4:	d124      	bne.n	3400b3f0 <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b3a6:	6823      	ldr	r3, [r4, #0]
3400b3a8:	2b00      	cmp	r3, #0
3400b3aa:	d03d      	beq.n	3400b428 <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3400b3ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400b3ae:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
3400b3b2:	d004      	beq.n	3400b3be <HAL_XSPI_Command+0x132>
3400b3b4:	f240 3161 	movw	r1, #865	@ 0x361
3400b3b8:	483f      	ldr	r0, [pc, #252]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b3ba:	f7f6 f9ab 	bl	34001714 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3400b3be:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b3c0:	2b1f      	cmp	r3, #31
3400b3c2:	d91d      	bls.n	3400b400 <HAL_XSPI_Command+0x174>
3400b3c4:	f240 3162 	movw	r1, #866	@ 0x362
3400b3c8:	483b      	ldr	r0, [pc, #236]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b3ca:	f7f6 f9a3 	bl	34001714 <assert_failed>
3400b3ce:	e017      	b.n	3400b400 <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400b3d0:	f240 3155 	movw	r1, #853	@ 0x355
3400b3d4:	4838      	ldr	r0, [pc, #224]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b3d6:	f7f6 f99d 	bl	34001714 <assert_failed>
3400b3da:	e7bb      	b.n	3400b354 <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400b3dc:	b181      	cbz	r1, 3400b400 <HAL_XSPI_Command+0x174>
3400b3de:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
3400b3e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400b3e6:	d0de      	beq.n	3400b3a6 <HAL_XSPI_Command+0x11a>
3400b3e8:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
3400b3ec:	d1d6      	bne.n	3400b39c <HAL_XSPI_Command+0x110>
3400b3ee:	e7da      	b.n	3400b3a6 <HAL_XSPI_Command+0x11a>
3400b3f0:	f240 3159 	movw	r1, #857	@ 0x359
3400b3f4:	4830      	ldr	r0, [pc, #192]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b3f6:	f7f6 f98d 	bl	34001714 <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400b3fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b3fc:	2b00      	cmp	r3, #0
3400b3fe:	d1d2      	bne.n	3400b3a6 <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3400b400:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400b402:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3400b406:	d004      	beq.n	3400b412 <HAL_XSPI_Command+0x186>
3400b408:	f240 3165 	movw	r1, #869	@ 0x365
3400b40c:	482a      	ldr	r0, [pc, #168]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b40e:	f7f6 f981 	bl	34001714 <assert_failed>
  state = hxspi->State;
3400b412:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b414:	2b02      	cmp	r3, #2
3400b416:	d110      	bne.n	3400b43a <HAL_XSPI_Command+0x1ae>
3400b418:	68eb      	ldr	r3, [r5, #12]
3400b41a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400b41e:	d112      	bne.n	3400b446 <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b420:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b422:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b424:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b426:	e028      	b.n	3400b47a <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3400b428:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400b42a:	2b00      	cmp	r3, #0
3400b42c:	d1be      	bne.n	3400b3ac <HAL_XSPI_Command+0x120>
3400b42e:	f240 315f 	movw	r1, #863	@ 0x35f
3400b432:	4821      	ldr	r0, [pc, #132]	@ (3400b4b8 <HAL_XSPI_Command+0x22c>)
3400b434:	f7f6 f96e 	bl	34001714 <assert_failed>
3400b438:	e7b8      	b.n	3400b3ac <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b43a:	2b14      	cmp	r3, #20
3400b43c:	d11f      	bne.n	3400b47e <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3400b43e:	6823      	ldr	r3, [r4, #0]
3400b440:	3b02      	subs	r3, #2
3400b442:	2b01      	cmp	r3, #1
3400b444:	d8ec      	bhi.n	3400b420 <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b446:	4633      	mov	r3, r6
3400b448:	2200      	movs	r2, #0
3400b44a:	2120      	movs	r1, #32
3400b44c:	4628      	mov	r0, r5
3400b44e:	9700      	str	r7, [sp, #0]
3400b450:	f7ff fdb6 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b454:	bb70      	cbnz	r0, 3400b4b4 <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400b456:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
3400b458:	4621      	mov	r1, r4
3400b45a:	4628      	mov	r0, r5
3400b45c:	f7ff fcae 	bl	3400adbc <XSPI_ConfigCmd>
      if (status == HAL_OK)
3400b460:	b958      	cbnz	r0, 3400b47a <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3400b462:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b464:	b99b      	cbnz	r3, 3400b48e <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b466:	4602      	mov	r2, r0
3400b468:	4633      	mov	r3, r6
3400b46a:	2120      	movs	r1, #32
3400b46c:	4628      	mov	r0, r5
3400b46e:	9700      	str	r7, [sp, #0]
3400b470:	f7ff fda6 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b474:	2202      	movs	r2, #2
3400b476:	682b      	ldr	r3, [r5, #0]
3400b478:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400b47a:	b003      	add	sp, #12
3400b47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3400b47e:	2b24      	cmp	r3, #36	@ 0x24
3400b480:	d1ce      	bne.n	3400b420 <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3400b482:	6823      	ldr	r3, [r4, #0]
3400b484:	f023 0302 	bic.w	r3, r3, #2
3400b488:	2b01      	cmp	r3, #1
3400b48a:	d1c9      	bne.n	3400b420 <HAL_XSPI_Command+0x194>
3400b48c:	e7db      	b.n	3400b446 <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b48e:	6823      	ldr	r3, [r4, #0]
3400b490:	b90b      	cbnz	r3, 3400b496 <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3400b492:	2304      	movs	r3, #4
3400b494:	e005      	b.n	3400b4a2 <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3400b496:	2b01      	cmp	r3, #1
3400b498:	d105      	bne.n	3400b4a6 <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3400b49a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b49c:	2b24      	cmp	r3, #36	@ 0x24
3400b49e:	d0f8      	beq.n	3400b492 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3400b4a0:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b4a2:	65ab      	str	r3, [r5, #88]	@ 0x58
3400b4a4:	e7e9      	b.n	3400b47a <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400b4a6:	2b02      	cmp	r3, #2
3400b4a8:	d1e7      	bne.n	3400b47a <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3400b4aa:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b4ac:	2b14      	cmp	r3, #20
3400b4ae:	d0f0      	beq.n	3400b492 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b4b0:	2324      	movs	r3, #36	@ 0x24
3400b4b2:	e7f6      	b.n	3400b4a2 <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
3400b4b4:	2002      	movs	r0, #2
3400b4b6:	e7e0      	b.n	3400b47a <HAL_XSPI_Command+0x1ee>
3400b4b8:	34011065 	.word	0x34011065

3400b4bc <HAL_XSPI_Transmit>:
{
3400b4bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b4c0:	4604      	mov	r4, r0
3400b4c2:	4688      	mov	r8, r1
3400b4c4:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
3400b4c6:	f7f7 f94b 	bl	34002760 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b4ca:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b4cc:	4605      	mov	r5, r0
  if (pData == NULL)
3400b4ce:	f1b8 0f00 	cmp.w	r8, #0
3400b4d2:	d103      	bne.n	3400b4dc <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b4d4:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b4d6:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b4d8:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b4da:	e02e      	b.n	3400b53a <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b4dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b4de:	2b04      	cmp	r3, #4
3400b4e0:	d12e      	bne.n	3400b540 <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b4e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
3400b4e4:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b4e8:	3301      	adds	r3, #1
3400b4ea:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b4ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b4ee:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3400b4f0:	683b      	ldr	r3, [r7, #0]
3400b4f2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b4f6:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3400b4f8:	462b      	mov	r3, r5
3400b4fa:	2201      	movs	r2, #1
3400b4fc:	2104      	movs	r1, #4
3400b4fe:	4620      	mov	r0, r4
3400b500:	9600      	str	r6, [sp, #0]
3400b502:	f7ff fd5d 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b506:	b9c0      	cbnz	r0, 3400b53a <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3400b508:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b50a:	781b      	ldrb	r3, [r3, #0]
3400b50c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
3400b510:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b512:	3301      	adds	r3, #1
3400b514:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b516:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b518:	3b01      	subs	r3, #1
3400b51a:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b51c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b51e:	2b00      	cmp	r3, #0
3400b520:	d1ea      	bne.n	3400b4f8 <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b522:	462b      	mov	r3, r5
3400b524:	2201      	movs	r2, #1
3400b526:	2102      	movs	r1, #2
3400b528:	4620      	mov	r0, r4
3400b52a:	9600      	str	r6, [sp, #0]
3400b52c:	f7ff fd48 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b530:	b918      	cbnz	r0, 3400b53a <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b532:	2302      	movs	r3, #2
3400b534:	6822      	ldr	r2, [r4, #0]
3400b536:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b538:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b53a:	b002      	add	sp, #8
3400b53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b540:	2310      	movs	r3, #16
3400b542:	e7c8      	b.n	3400b4d6 <HAL_XSPI_Transmit+0x1a>

3400b544 <HAL_XSPI_Receive>:
{
3400b544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b548:	4604      	mov	r4, r0
3400b54a:	4616      	mov	r6, r2
3400b54c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
3400b54e:	f7f7 f907 	bl	34002760 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b552:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b554:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b556:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b558:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
3400b55c:	f1b8 0f00 	cmp.w	r8, #0
3400b560:	d103      	bne.n	3400b56a <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b562:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b564:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b566:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b568:	e035      	b.n	3400b5d6 <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b56a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b56c:	2b04      	cmp	r3, #4
3400b56e:	d13d      	bne.n	3400b5ec <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b570:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3400b572:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b576:	3301      	adds	r3, #1
3400b578:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b57a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b57c:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b57e:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b580:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b582:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3400b586:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b58a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b58e:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b590:	d124      	bne.n	3400b5dc <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b592:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3400b594:	463b      	mov	r3, r7
3400b596:	2201      	movs	r2, #1
3400b598:	2106      	movs	r1, #6
3400b59a:	4620      	mov	r0, r4
3400b59c:	9600      	str	r6, [sp, #0]
3400b59e:	f7ff fd0f 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b5a2:	b9c0      	cbnz	r0, 3400b5d6 <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3400b5a4:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
3400b5a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b5aa:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3400b5ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b5ae:	3301      	adds	r3, #1
3400b5b0:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b5b2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b5b4:	3b01      	subs	r3, #1
3400b5b6:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b5b8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b5ba:	2b00      	cmp	r3, #0
3400b5bc:	d1ea      	bne.n	3400b594 <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b5be:	463b      	mov	r3, r7
3400b5c0:	2201      	movs	r2, #1
3400b5c2:	2102      	movs	r1, #2
3400b5c4:	4620      	mov	r0, r4
3400b5c6:	9600      	str	r6, [sp, #0]
3400b5c8:	f7ff fcfa 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b5cc:	b918      	cbnz	r0, 3400b5d6 <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b5ce:	2302      	movs	r3, #2
3400b5d0:	6822      	ldr	r2, [r4, #0]
3400b5d2:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b5d4:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b5d6:	b002      	add	sp, #8
3400b5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b5dc:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
3400b5e0:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b5e4:	d1d5      	bne.n	3400b592 <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b5e6:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
3400b5ea:	e7d3      	b.n	3400b594 <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b5ec:	2310      	movs	r3, #16
3400b5ee:	e7b9      	b.n	3400b564 <HAL_XSPI_Receive+0x20>

3400b5f0 <HAL_XSPI_AutoPolling>:
{
3400b5f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3400b5f4:	4604      	mov	r4, r0
3400b5f6:	460d      	mov	r5, r1
3400b5f8:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400b5fa:	f7f7 f8b1 	bl	34002760 <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
3400b5fe:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b600:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b602:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b606:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
3400b60a:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
3400b60e:	68ab      	ldr	r3, [r5, #8]
3400b610:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3400b614:	d004      	beq.n	3400b620 <HAL_XSPI_AutoPolling+0x30>
3400b616:	f240 7134 	movw	r1, #1844	@ 0x734
3400b61a:	4832      	ldr	r0, [pc, #200]	@ (3400b6e4 <HAL_XSPI_AutoPolling+0xf4>)
3400b61c:	f7f6 f87a 	bl	34001714 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3400b620:	68eb      	ldr	r3, [r5, #12]
3400b622:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3400b626:	d004      	beq.n	3400b632 <HAL_XSPI_AutoPolling+0x42>
3400b628:	f240 7135 	movw	r1, #1845	@ 0x735
3400b62c:	482d      	ldr	r0, [pc, #180]	@ (3400b6e4 <HAL_XSPI_AutoPolling+0xf4>)
3400b62e:	f7f6 f871 	bl	34001714 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3400b632:	692b      	ldr	r3, [r5, #16]
3400b634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b638:	d304      	bcc.n	3400b644 <HAL_XSPI_AutoPolling+0x54>
3400b63a:	f240 7136 	movw	r1, #1846	@ 0x736
3400b63e:	4829      	ldr	r0, [pc, #164]	@ (3400b6e4 <HAL_XSPI_AutoPolling+0xf4>)
3400b640:	f7f6 f868 	bl	34001714 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3400b644:	f1ba 0f03 	cmp.w	sl, #3
3400b648:	d904      	bls.n	3400b654 <HAL_XSPI_AutoPolling+0x64>
3400b64a:	f240 7137 	movw	r1, #1847	@ 0x737
3400b64e:	4825      	ldr	r0, [pc, #148]	@ (3400b6e4 <HAL_XSPI_AutoPolling+0xf4>)
3400b650:	f7f6 f860 	bl	34001714 <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3400b654:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b656:	2b04      	cmp	r3, #4
3400b658:	d13e      	bne.n	3400b6d8 <HAL_XSPI_AutoPolling+0xe8>
3400b65a:	68eb      	ldr	r3, [r5, #12]
3400b65c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3400b660:	d13a      	bne.n	3400b6d8 <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b662:	4633      	mov	r3, r6
3400b664:	2200      	movs	r2, #0
3400b666:	2120      	movs	r1, #32
3400b668:	4620      	mov	r0, r4
3400b66a:	9700      	str	r7, [sp, #0]
3400b66c:	f7ff fca8 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b670:	2800      	cmp	r0, #0
3400b672:	d135      	bne.n	3400b6e0 <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3400b674:	682b      	ldr	r3, [r5, #0]
3400b676:	6821      	ldr	r1, [r4, #0]
3400b678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3400b67c:	686b      	ldr	r3, [r5, #4]
3400b67e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3400b682:	692b      	ldr	r3, [r5, #16]
3400b684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b688:	680a      	ldr	r2, [r1, #0]
3400b68a:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
3400b68e:	431d      	orrs	r5, r3
3400b690:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3400b694:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b696:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b698:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b69c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b6a0:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b6a2:	d111      	bne.n	3400b6c8 <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b6a4:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3400b6a8:	4633      	mov	r3, r6
3400b6aa:	2201      	movs	r2, #1
3400b6ac:	2108      	movs	r1, #8
3400b6ae:	4620      	mov	r0, r4
3400b6b0:	9700      	str	r7, [sp, #0]
3400b6b2:	f7ff fc85 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400b6b6:	b920      	cbnz	r0, 3400b6c2 <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3400b6b8:	2208      	movs	r2, #8
3400b6ba:	6823      	ldr	r3, [r4, #0]
3400b6bc:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
3400b6be:	2302      	movs	r3, #2
3400b6c0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b6c2:	b002      	add	sp, #8
3400b6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b6c8:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
3400b6cc:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b6d0:	d1e8      	bne.n	3400b6a4 <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b6d2:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
3400b6d6:	e7e7      	b.n	3400b6a8 <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b6d8:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b6da:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b6dc:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b6de:	e7f0      	b.n	3400b6c2 <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
3400b6e0:	2002      	movs	r0, #2
3400b6e2:	e7ee      	b.n	3400b6c2 <HAL_XSPI_AutoPolling+0xd2>
3400b6e4:	34011065 	.word	0x34011065

3400b6e8 <HAL_XSPI_MemoryMapped>:
{
3400b6e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400b6ea:	460c      	mov	r4, r1
3400b6ec:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
3400b6ee:	f7f7 f837 	bl	34002760 <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b6f2:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b6f4:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b6f6:	f033 0308 	bics.w	r3, r3, #8
3400b6fa:	d004      	beq.n	3400b706 <HAL_XSPI_MemoryMapped+0x1e>
3400b6fc:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
3400b700:	482f      	ldr	r0, [pc, #188]	@ (3400b7c0 <HAL_XSPI_MemoryMapped+0xd8>)
3400b702:	f7f6 f807 	bl	34001714 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3400b706:	68a3      	ldr	r3, [r4, #8]
3400b708:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
3400b70c:	d004      	beq.n	3400b718 <HAL_XSPI_MemoryMapped+0x30>
3400b70e:	f240 71c9 	movw	r1, #1993	@ 0x7c9
3400b712:	482b      	ldr	r0, [pc, #172]	@ (3400b7c0 <HAL_XSPI_MemoryMapped+0xd8>)
3400b714:	f7f5 fffe 	bl	34001714 <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b718:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b71a:	2b04      	cmp	r3, #4
3400b71c:	d14b      	bne.n	3400b7b6 <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400b71e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
3400b720:	2200      	movs	r2, #0
3400b722:	9300      	str	r3, [sp, #0]
3400b724:	2120      	movs	r1, #32
3400b726:	4633      	mov	r3, r6
3400b728:	4628      	mov	r0, r5
3400b72a:	f7ff fc49 	bl	3400afc0 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b72e:	4606      	mov	r6, r0
3400b730:	bb58      	cbnz	r0, 3400b78a <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3400b732:	2388      	movs	r3, #136	@ 0x88
3400b734:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3400b736:	68a3      	ldr	r3, [r4, #8]
3400b738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400b73c:	d128      	bne.n	3400b790 <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3400b73e:	682a      	ldr	r2, [r5, #0]
3400b740:	6813      	ldr	r3, [r2, #0]
3400b742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3400b746:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3400b748:	6823      	ldr	r3, [r4, #0]
3400b74a:	2b08      	cmp	r3, #8
3400b74c:	d112      	bne.n	3400b774 <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3400b74e:	6863      	ldr	r3, [r4, #4]
3400b750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b754:	d304      	bcc.n	3400b760 <HAL_XSPI_MemoryMapped+0x78>
3400b756:	f240 71e5 	movw	r1, #2021	@ 0x7e5
3400b75a:	4819      	ldr	r0, [pc, #100]	@ (3400b7c0 <HAL_XSPI_MemoryMapped+0xd8>)
3400b75c:	f7f5 ffda 	bl	34001714 <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3400b760:	682b      	ldr	r3, [r5, #0]
3400b762:	6862      	ldr	r2, [r4, #4]
3400b764:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3400b768:	2210      	movs	r2, #16
3400b76a:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3400b76c:	681a      	ldr	r2, [r3, #0]
3400b76e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3400b772:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3400b774:	682a      	ldr	r2, [r5, #0]
3400b776:	6821      	ldr	r1, [r4, #0]
3400b778:	6813      	ldr	r3, [r2, #0]
3400b77a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b77e:	f023 0308 	bic.w	r3, r3, #8
3400b782:	430b      	orrs	r3, r1
3400b784:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
3400b788:	6013      	str	r3, [r2, #0]
}
3400b78a:	4630      	mov	r0, r6
3400b78c:	b002      	add	sp, #8
3400b78e:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
3400b790:	68e3      	ldr	r3, [r4, #12]
3400b792:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3400b796:	d004      	beq.n	3400b7a2 <HAL_XSPI_MemoryMapped+0xba>
3400b798:	f240 71dd 	movw	r1, #2013	@ 0x7dd
3400b79c:	4808      	ldr	r0, [pc, #32]	@ (3400b7c0 <HAL_XSPI_MemoryMapped+0xd8>)
3400b79e:	f7f5 ffb9 	bl	34001714 <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3400b7a2:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
3400b7a6:	6829      	ldr	r1, [r5, #0]
3400b7a8:	4303      	orrs	r3, r0
3400b7aa:	680a      	ldr	r2, [r1, #0]
3400b7ac:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
3400b7b0:	4313      	orrs	r3, r2
3400b7b2:	600b      	str	r3, [r1, #0]
3400b7b4:	e7c8      	b.n	3400b748 <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b7b6:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b7b8:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b7ba:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b7bc:	e7e5      	b.n	3400b78a <HAL_XSPI_MemoryMapped+0xa2>
3400b7be:	bf00      	nop
3400b7c0:	34011065 	.word	0x34011065

3400b7c4 <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b7c4:	29ff      	cmp	r1, #255	@ 0xff
{
3400b7c6:	b538      	push	{r3, r4, r5, lr}
3400b7c8:	4604      	mov	r4, r0
3400b7ca:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b7cc:	d904      	bls.n	3400b7d8 <HAL_XSPI_SetClockPrescaler+0x14>
3400b7ce:	f640 2193 	movw	r1, #2707	@ 0xa93
3400b7d2:	4809      	ldr	r0, [pc, #36]	@ (3400b7f8 <HAL_XSPI_SetClockPrescaler+0x34>)
3400b7d4:	f7f5 ff9e 	bl	34001714 <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3400b7d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400b7da:	f010 0008 	ands.w	r0, r0, #8
3400b7de:	d107      	bne.n	3400b7f0 <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b7e0:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
3400b7e2:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b7e4:	68d3      	ldr	r3, [r2, #12]
3400b7e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400b7ea:	432b      	orrs	r3, r5
3400b7ec:	60d3      	str	r3, [r2, #12]
}
3400b7ee:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b7f0:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b7f2:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b7f4:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b7f6:	e7fa      	b.n	3400b7ee <HAL_XSPI_SetClockPrescaler+0x2a>
3400b7f8:	34011065 	.word	0x34011065

3400b7fc <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
3400b7fc:	2a02      	cmp	r2, #2
3400b7fe:	d14a      	bne.n	3400b896 <USB_SetTurnaroundTime+0x9a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
3400b800:	4b27      	ldr	r3, [pc, #156]	@ (3400b8a0 <USB_SetTurnaroundTime+0xa4>)
3400b802:	4a28      	ldr	r2, [pc, #160]	@ (3400b8a4 <USB_SetTurnaroundTime+0xa8>)
3400b804:	440b      	add	r3, r1
3400b806:	4293      	cmp	r3, r2
3400b808:	d939      	bls.n	3400b87e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
3400b80a:	4b27      	ldr	r3, [pc, #156]	@ (3400b8a8 <USB_SetTurnaroundTime+0xac>)
3400b80c:	4a27      	ldr	r2, [pc, #156]	@ (3400b8ac <USB_SetTurnaroundTime+0xb0>)
3400b80e:	440b      	add	r3, r1
3400b810:	4293      	cmp	r3, r2
3400b812:	d936      	bls.n	3400b882 <USB_SetTurnaroundTime+0x86>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
3400b814:	4a26      	ldr	r2, [pc, #152]	@ (3400b8b0 <USB_SetTurnaroundTime+0xb4>)
3400b816:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
3400b81a:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
3400b81e:	4293      	cmp	r3, r2
3400b820:	d931      	bls.n	3400b886 <USB_SetTurnaroundTime+0x8a>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
3400b822:	4a24      	ldr	r2, [pc, #144]	@ (3400b8b4 <USB_SetTurnaroundTime+0xb8>)
3400b824:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
3400b828:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
3400b82c:	4293      	cmp	r3, r2
3400b82e:	d32c      	bcc.n	3400b88a <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
3400b830:	4b21      	ldr	r3, [pc, #132]	@ (3400b8b8 <USB_SetTurnaroundTime+0xbc>)
3400b832:	4a22      	ldr	r2, [pc, #136]	@ (3400b8bc <USB_SetTurnaroundTime+0xc0>)
3400b834:	440b      	add	r3, r1
3400b836:	4293      	cmp	r3, r2
3400b838:	d929      	bls.n	3400b88e <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
3400b83a:	4b21      	ldr	r3, [pc, #132]	@ (3400b8c0 <USB_SetTurnaroundTime+0xc4>)
3400b83c:	4a21      	ldr	r2, [pc, #132]	@ (3400b8c4 <USB_SetTurnaroundTime+0xc8>)
3400b83e:	440b      	add	r3, r1
3400b840:	4293      	cmp	r3, r2
3400b842:	d326      	bcc.n	3400b892 <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
3400b844:	4b20      	ldr	r3, [pc, #128]	@ (3400b8c8 <USB_SetTurnaroundTime+0xcc>)
3400b846:	4a21      	ldr	r2, [pc, #132]	@ (3400b8cc <USB_SetTurnaroundTime+0xd0>)
3400b848:	440b      	add	r3, r1
3400b84a:	4293      	cmp	r3, r2
3400b84c:	d323      	bcc.n	3400b896 <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
3400b84e:	4a20      	ldr	r2, [pc, #128]	@ (3400b8d0 <USB_SetTurnaroundTime+0xd4>)
3400b850:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
3400b854:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
3400b858:	4293      	cmp	r3, r2
3400b85a:	d31e      	bcc.n	3400b89a <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
3400b85c:	4b1d      	ldr	r3, [pc, #116]	@ (3400b8d4 <USB_SetTurnaroundTime+0xd8>)
3400b85e:	4a1e      	ldr	r2, [pc, #120]	@ (3400b8d8 <USB_SetTurnaroundTime+0xdc>)
3400b860:	440b      	add	r3, r1
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
3400b862:	4293      	cmp	r3, r2
3400b864:	bf2c      	ite	cs
3400b866:	2306      	movcs	r3, #6
3400b868:	2307      	movcc	r3, #7
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
3400b86a:	68c2      	ldr	r2, [r0, #12]
3400b86c:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
3400b870:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
3400b872:	68c2      	ldr	r2, [r0, #12]
3400b874:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
3400b878:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
3400b87a:	2000      	movs	r0, #0
3400b87c:	4770      	bx	lr
      UsbTrd = 0xFU;
3400b87e:	230f      	movs	r3, #15
3400b880:	e7f3      	b.n	3400b86a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
3400b882:	230e      	movs	r3, #14
3400b884:	e7f1      	b.n	3400b86a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
3400b886:	230d      	movs	r3, #13
3400b888:	e7ef      	b.n	3400b86a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
3400b88a:	230c      	movs	r3, #12
3400b88c:	e7ed      	b.n	3400b86a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
3400b88e:	230b      	movs	r3, #11
3400b890:	e7eb      	b.n	3400b86a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
3400b892:	230a      	movs	r3, #10
3400b894:	e7e9      	b.n	3400b86a <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
3400b896:	2309      	movs	r3, #9
3400b898:	e7e7      	b.n	3400b86a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
3400b89a:	2308      	movs	r3, #8
3400b89c:	e7e5      	b.n	3400b86a <USB_SetTurnaroundTime+0x6e>
3400b89e:	bf00      	nop
3400b8a0:	ff275340 	.word	0xff275340
3400b8a4:	000c34ff 	.word	0x000c34ff
3400b8a8:	ff1b1e40 	.word	0xff1b1e40
3400b8ac:	000f423f 	.word	0x000f423f
3400b8b0:	00124f7f 	.word	0x00124f7f
3400b8b4:	0013d620 	.word	0x0013d620
3400b8b8:	fee5b660 	.word	0xfee5b660
3400b8bc:	0016e35f 	.word	0x0016e35f
3400b8c0:	feced300 	.word	0xfeced300
3400b8c4:	001b7740 	.word	0x001b7740
3400b8c8:	feb35bc0 	.word	0xfeb35bc0
3400b8cc:	002191c0 	.word	0x002191c0
3400b8d0:	00387520 	.word	0x00387520
3400b8d4:	fe5954e0 	.word	0xfe5954e0
3400b8d8:	00419ce0 	.word	0x00419ce0

3400b8dc <USB_FlushTxFifo>:
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  __IO uint32_t count = 0U;
3400b8dc:	2300      	movs	r3, #0
{
3400b8de:	4602      	mov	r2, r0
3400b8e0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b8e2:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b8e4:	9b01      	ldr	r3, [sp, #4]
3400b8e6:	3301      	adds	r3, #1
3400b8e8:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b8ea:	9b01      	ldr	r3, [sp, #4]
3400b8ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b8f0:	d815      	bhi.n	3400b91e <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b8f2:	6913      	ldr	r3, [r2, #16]
3400b8f4:	2b00      	cmp	r3, #0
3400b8f6:	daf5      	bge.n	3400b8e4 <USB_FlushTxFifo+0x8>

  /* Flush TX Fifo */
  count = 0U;
3400b8f8:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b8fa:	0189      	lsls	r1, r1, #6
3400b8fc:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
3400b900:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b902:	6111      	str	r1, [r2, #16]

  do
  {
    count++;
3400b904:	9b01      	ldr	r3, [sp, #4]
3400b906:	3301      	adds	r3, #1
3400b908:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b90a:	9b01      	ldr	r3, [sp, #4]
3400b90c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b910:	d805      	bhi.n	3400b91e <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
3400b912:	6910      	ldr	r0, [r2, #16]
3400b914:	f010 0020 	ands.w	r0, r0, #32
3400b918:	d1f4      	bne.n	3400b904 <USB_FlushTxFifo+0x28>

  return HAL_OK;
}
3400b91a:	b002      	add	sp, #8
3400b91c:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b91e:	2003      	movs	r0, #3
3400b920:	e7fb      	b.n	3400b91a <USB_FlushTxFifo+0x3e>

3400b922 <USB_FlushRxFifo>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
3400b922:	2300      	movs	r3, #0
{
3400b924:	4602      	mov	r2, r0
3400b926:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b928:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b92a:	9b01      	ldr	r3, [sp, #4]
3400b92c:	3301      	adds	r3, #1
3400b92e:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b930:	9b01      	ldr	r3, [sp, #4]
3400b932:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b936:	d813      	bhi.n	3400b960 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b938:	6913      	ldr	r3, [r2, #16]
3400b93a:	2b00      	cmp	r3, #0
3400b93c:	daf5      	bge.n	3400b92a <USB_FlushRxFifo+0x8>

  /* Flush RX Fifo */
  count = 0U;
3400b93e:	2300      	movs	r3, #0
3400b940:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
3400b942:	2310      	movs	r3, #16
3400b944:	6113      	str	r3, [r2, #16]

  do
  {
    count++;
3400b946:	9b01      	ldr	r3, [sp, #4]
3400b948:	3301      	adds	r3, #1
3400b94a:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b94c:	9b01      	ldr	r3, [sp, #4]
3400b94e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b952:	d805      	bhi.n	3400b960 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
3400b954:	6910      	ldr	r0, [r2, #16]
3400b956:	f010 0010 	ands.w	r0, r0, #16
3400b95a:	d1f4      	bne.n	3400b946 <USB_FlushRxFifo+0x24>

  return HAL_OK;
}
3400b95c:	b002      	add	sp, #8
3400b95e:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b960:	2003      	movs	r0, #3
3400b962:	e7fb      	b.n	3400b95c <USB_FlushRxFifo+0x3a>

3400b964 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
3400b964:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
3400b968:	f013 0006 	ands.w	r0, r3, #6
3400b96c:	d004      	beq.n	3400b978 <USB_GetDevSpeed+0x14>
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
3400b96e:	f013 0f02 	tst.w	r3, #2
3400b972:	bf14      	ite	ne
3400b974:	2002      	movne	r0, #2
3400b976:	200f      	moveq	r0, #15
  }

  return speed;
}
3400b978:	4770      	bx	lr

3400b97a <USB_ActivateEndpoint>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b97a:	2201      	movs	r2, #1
{
3400b97c:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
3400b97e:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b980:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
3400b984:	f004 050f 	and.w	r5, r4, #15
3400b988:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
3400b98a:	784d      	ldrb	r5, [r1, #1]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b98c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
3400b990:	2d01      	cmp	r5, #1
3400b992:	d119      	bne.n	3400b9c8 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b994:	69dd      	ldr	r5, [r3, #28]
3400b996:	432a      	orrs	r2, r5
3400b998:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b99a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b99e:	041a      	lsls	r2, r3, #16
3400b9a0:	d410      	bmi.n	3400b9c4 <USB_ActivateEndpoint+0x4a>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b9a2:	688a      	ldr	r2, [r1, #8]
3400b9a4:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
3400b9a8:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
3400b9ac:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b9ae:	432b      	orrs	r3, r5
3400b9b0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b9b4:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
3400b9b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b9bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b9c0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
3400b9c4:	2000      	movs	r0, #0
3400b9c6:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
3400b9c8:	69dc      	ldr	r4, [r3, #28]
3400b9ca:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
3400b9ce:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
3400b9d0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b9d4:	041b      	lsls	r3, r3, #16
3400b9d6:	d4f5      	bmi.n	3400b9c4 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b9d8:	688b      	ldr	r3, [r1, #8]
3400b9da:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b9de:	f3c3 030a 	ubfx	r3, r3, #0, #11
3400b9e2:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
3400b9e4:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b9e6:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b9ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b9ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b9f2:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b9f6:	e7e5      	b.n	3400b9c4 <USB_ActivateEndpoint+0x4a>

3400b9f8 <USB_EPStopXfer>:
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  __IO uint32_t count = 0U;
3400b9f8:	2300      	movs	r3, #0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* IN endpoint */
  if (ep->is_in == 1U)
3400b9fa:	784a      	ldrb	r2, [r1, #1]
{
3400b9fc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b9fe:	9301      	str	r3, [sp, #4]
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400ba00:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400ba02:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400ba04:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
3400ba08:	d11e      	bne.n	3400ba48 <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400ba0a:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
3400ba0e:	58c2      	ldr	r2, [r0, r3]
3400ba10:	18c1      	adds	r1, r0, r3
3400ba12:	2a00      	cmp	r2, #0
3400ba14:	db02      	blt.n	3400ba1c <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
3400ba16:	2000      	movs	r0, #0
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
    }
  }

  return ret;
}
3400ba18:	b002      	add	sp, #8
3400ba1a:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
3400ba1c:	58c2      	ldr	r2, [r0, r3]
3400ba1e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400ba22:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
3400ba24:	58c2      	ldr	r2, [r0, r3]
3400ba26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400ba2a:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400ba2c:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400ba30:	9b01      	ldr	r3, [sp, #4]
3400ba32:	3301      	adds	r3, #1
3400ba34:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400ba36:	9b01      	ldr	r3, [sp, #4]
3400ba38:	4293      	cmp	r3, r2
3400ba3a:	d901      	bls.n	3400ba40 <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
3400ba3c:	2001      	movs	r0, #1
3400ba3e:	e7eb      	b.n	3400ba18 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
3400ba40:	680b      	ldr	r3, [r1, #0]
3400ba42:	2b00      	cmp	r3, #0
3400ba44:	dbf4      	blt.n	3400ba30 <USB_EPStopXfer+0x38>
3400ba46:	e7e6      	b.n	3400ba16 <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400ba48:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
3400ba4c:	58c2      	ldr	r2, [r0, r3]
3400ba4e:	18c1      	adds	r1, r0, r3
3400ba50:	2a00      	cmp	r2, #0
3400ba52:	dae0      	bge.n	3400ba16 <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
3400ba54:	58c2      	ldr	r2, [r0, r3]
3400ba56:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400ba5a:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
3400ba5c:	58c2      	ldr	r2, [r0, r3]
3400ba5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400ba62:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400ba64:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400ba68:	9b01      	ldr	r3, [sp, #4]
3400ba6a:	3301      	adds	r3, #1
3400ba6c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400ba6e:	9b01      	ldr	r3, [sp, #4]
3400ba70:	4293      	cmp	r3, r2
3400ba72:	d8e3      	bhi.n	3400ba3c <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
3400ba74:	680b      	ldr	r3, [r1, #0]
3400ba76:	2b00      	cmp	r3, #0
3400ba78:	dbf6      	blt.n	3400ba68 <USB_EPStopXfer+0x70>
3400ba7a:	e7cc      	b.n	3400ba16 <USB_EPStopXfer+0x1e>

3400ba7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
3400ba7c:	b510      	push	{r4, lr}
3400ba7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t *pSrc = src;
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
3400ba82:	b93c      	cbnz	r4, 3400ba94 <USB_WritePacket+0x18>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
3400ba84:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400ba86:	3201      	adds	r2, #1
3400ba88:	089b      	lsrs	r3, r3, #2
3400ba8a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
3400ba8e:	3301      	adds	r3, #1
    for (i = 0U; i < count32b; i++)
3400ba90:	3b01      	subs	r3, #1
3400ba92:	d101      	bne.n	3400ba98 <USB_WritePacket+0x1c>
      pSrc++;
    }
  }

  return HAL_OK;
}
3400ba94:	2000      	movs	r0, #0
3400ba96:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400ba98:	f851 2b04 	ldr.w	r2, [r1], #4
3400ba9c:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
3400ba9e:	e7f7      	b.n	3400ba90 <USB_WritePacket+0x14>

3400baa0 <USB_EPStartXfer>:
{
3400baa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
3400baa4:	784b      	ldrb	r3, [r1, #1]
{
3400baa6:	4616      	mov	r6, r2
  uint32_t epnum = (uint32_t)ep->num;
3400baa8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
3400baaa:	2b01      	cmp	r3, #1
    if (ep->xfer_len == 0U)
3400baac:	690c      	ldr	r4, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
3400baae:	790f      	ldrb	r7, [r1, #4]
3400bab0:	f8df e1e8 	ldr.w	lr, [pc, #488]	@ 3400bc9c <USB_EPStartXfer+0x1fc>
3400bab4:	f8df 81e8 	ldr.w	r8, [pc, #488]	@ 3400bca0 <USB_EPStartXfer+0x200>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400bab8:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
3400babc:	f040 8097 	bne.w	3400bbee <USB_EPStartXfer+0x14e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400bac0:	f505 6c10 	add.w	ip, r5, #2304	@ 0x900
3400bac4:	f8dc 3010 	ldr.w	r3, [ip, #16]
    if (ep->xfer_len == 0U)
3400bac8:	bb74      	cbnz	r4, 3400bb28 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400baca:	ea03 030e 	and.w	r3, r3, lr
3400bace:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400bad2:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400bad6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
3400bada:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400bade:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400bae2:	ea03 0308 	and.w	r3, r3, r8
    if (dma == 1U)
3400bae6:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400bae8:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400baec:	d157      	bne.n	3400bb9e <USB_EPStartXfer+0xfe>
      if ((uint32_t)ep->dma_addr != 0U)
3400baee:	69cb      	ldr	r3, [r1, #28]
3400baf0:	b10b      	cbz	r3, 3400baf6 <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
3400baf2:	f8cc 3014 	str.w	r3, [ip, #20]
      if (ep->type == EP_TYPE_ISOC)
3400baf6:	2f01      	cmp	r7, #1
3400baf8:	d10c      	bne.n	3400bb14 <USB_EPStartXfer+0x74>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400bafa:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400bafe:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400bb02:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400bb06:	bf0c      	ite	eq
3400bb08:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400bb0c:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400bb10:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400bb14:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400bb18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400bb1c:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
}
3400bb20:	2000      	movs	r0, #0
3400bb22:	b002      	add	sp, #8
3400bb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400bb28:	ea03 0308 	and.w	r3, r3, r8
3400bb2c:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400bb30:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400bb34:	ea03 030e 	and.w	r3, r3, lr
3400bb38:	f8cc 3010 	str.w	r3, [ip, #16]
        if (ep->xfer_len > ep->maxpacket)
3400bb3c:	688b      	ldr	r3, [r1, #8]
      if (epnum == 0U)
3400bb3e:	b97a      	cbnz	r2, 3400bb60 <USB_EPStartXfer+0xc0>
        if (ep->xfer_len > ep->maxpacket)
3400bb40:	42a3      	cmp	r3, r4
          ep->xfer_len = ep->maxpacket;
3400bb42:	bf38      	it	cc
3400bb44:	610b      	strcc	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400bb46:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400bb4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400bb4e:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400bb52:	690b      	ldr	r3, [r1, #16]
3400bb54:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400bb58:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400bb5c:	4323      	orrs	r3, r4
3400bb5e:	e7c2      	b.n	3400bae6 <USB_EPStartXfer+0x46>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400bb60:	441c      	add	r4, r3
3400bb62:	3c01      	subs	r4, #1
3400bb64:	fbb4 f4f3 	udiv	r4, r4, r3
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400bb68:	4b4b      	ldr	r3, [pc, #300]	@ (3400bc98 <USB_EPStartXfer+0x1f8>)
3400bb6a:	f8dc e010 	ldr.w	lr, [ip, #16]
3400bb6e:	fa1f f884 	uxth.w	r8, r4
3400bb72:	ea03 44c4 	and.w	r4, r3, r4, lsl #19
3400bb76:	ea44 040e 	orr.w	r4, r4, lr
        if (ep->type == EP_TYPE_ISOC)
3400bb7a:	2f01      	cmp	r7, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400bb7c:	f8cc 4010 	str.w	r4, [ip, #16]
        if (ep->type == EP_TYPE_ISOC)
3400bb80:	d1e7      	bne.n	3400bb52 <USB_EPStartXfer+0xb2>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
3400bb82:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400bb86:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
3400bb8a:	f8cc 3010 	str.w	r3, [ip, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400bb8e:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400bb92:	ea4f 7348 	mov.w	r3, r8, lsl #29
3400bb96:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
3400bb9a:	4323      	orrs	r3, r4
3400bb9c:	e7d7      	b.n	3400bb4e <USB_EPStartXfer+0xae>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400bb9e:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
3400bba2:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400bba4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400bba8:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
3400bbac:	690b      	ldr	r3, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
3400bbae:	d00b      	beq.n	3400bbc8 <USB_EPStartXfer+0x128>
        if (ep->xfer_len > 0U)
3400bbb0:	2b00      	cmp	r3, #0
3400bbb2:	d0b5      	beq.n	3400bb20 <USB_EPStartXfer+0x80>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
3400bbb4:	2301      	movs	r3, #1
3400bbb6:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
3400bbba:	f002 020f 	and.w	r2, r2, #15
3400bbbe:	4093      	lsls	r3, r2
3400bbc0:	430b      	orrs	r3, r1
3400bbc2:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
3400bbc6:	e7ab      	b.n	3400bb20 <USB_EPStartXfer+0x80>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400bbc8:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400bbcc:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400bbce:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400bbd2:	f8d5 4900 	ldr.w	r4, [r5, #2304]	@ 0x900
3400bbd6:	bf0c      	ite	eq
3400bbd8:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400bbdc:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
3400bbe0:	f8c5 4900 	str.w	r4, [r5, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400bbe4:	9600      	str	r6, [sp, #0]
3400bbe6:	68c9      	ldr	r1, [r1, #12]
3400bbe8:	f7ff ff48 	bl	3400ba7c <USB_WritePacket>
3400bbec:	e798      	b.n	3400bb20 <USB_EPStartXfer+0x80>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
3400bbee:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
3400bbf2:	f505 6c30 	add.w	ip, r5, #2816	@ 0xb00
3400bbf6:	ea03 0308 	and.w	r3, r3, r8
3400bbfa:	f8cc 3010 	str.w	r3, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
3400bbfe:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400bc02:	ea03 030e 	and.w	r3, r3, lr
3400bc06:	f8cc 3010 	str.w	r3, [ip, #16]
        ep->xfer_len = ep->maxpacket;
3400bc0a:	688b      	ldr	r3, [r1, #8]
    if (epnum == 0U)
3400bc0c:	bb5a      	cbnz	r2, 3400bc66 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
3400bc0e:	b104      	cbz	r4, 3400bc12 <USB_EPStartXfer+0x172>
        ep->xfer_len = ep->maxpacket;
3400bc10:	610b      	str	r3, [r1, #16]
      ep->xfer_size = ep->maxpacket;
3400bc12:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
3400bc14:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400bc18:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400bc1c:	4313      	orrs	r3, r2
3400bc1e:	f8cc 3010 	str.w	r3, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400bc22:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400bc26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    if (dma == 1U)
3400bc2a:	2e01      	cmp	r6, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400bc2c:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400bc30:	d103      	bne.n	3400bc3a <USB_EPStartXfer+0x19a>
      if ((uint32_t)ep->xfer_buff != 0U)
3400bc32:	68cb      	ldr	r3, [r1, #12]
3400bc34:	b10b      	cbz	r3, 3400bc3a <USB_EPStartXfer+0x19a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
3400bc36:	f8cc 3014 	str.w	r3, [ip, #20]
    if (ep->type == EP_TYPE_ISOC)
3400bc3a:	2f01      	cmp	r7, #1
3400bc3c:	d10c      	bne.n	3400bc58 <USB_EPStartXfer+0x1b8>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400bc3e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400bc42:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
3400bc46:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400bc4a:	bf0c      	ite	eq
3400bc4c:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
3400bc50:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400bc54:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
3400bc58:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400bc5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400bc60:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
3400bc64:	e75c      	b.n	3400bb20 <USB_EPStartXfer+0x80>
      if (ep->xfer_len == 0U)
3400bc66:	2c00      	cmp	r4, #0
3400bc68:	d0d4      	beq.n	3400bc14 <USB_EPStartXfer+0x174>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400bc6a:	441c      	add	r4, r3
3400bc6c:	3c01      	subs	r4, #1
3400bc6e:	fbb4 f4f3 	udiv	r4, r4, r3
3400bc72:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
3400bc74:	4363      	muls	r3, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400bc76:	4a08      	ldr	r2, [pc, #32]	@ (3400bc98 <USB_EPStartXfer+0x1f8>)
3400bc78:	f8dc e010 	ldr.w	lr, [ip, #16]
3400bc7c:	ea02 42c4 	and.w	r2, r2, r4, lsl #19
3400bc80:	ea42 020e 	orr.w	r2, r2, lr
        ep->xfer_size = ep->maxpacket * pktcnt;
3400bc84:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400bc86:	f8cc 2010 	str.w	r2, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400bc8a:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400bc8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400bc92:	4313      	orrs	r3, r2
3400bc94:	e7c9      	b.n	3400bc2a <USB_EPStartXfer+0x18a>
3400bc96:	bf00      	nop
3400bc98:	1ff80000 	.word	0x1ff80000
3400bc9c:	e007ffff 	.word	0xe007ffff
3400bca0:	fff80000 	.word	0xfff80000

3400bca4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
3400bca4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
  uint16_t remaining_bytes = len % 4U;

  for (i = 0U; i < count32b; i++)
3400bca6:	2500      	movs	r5, #0
  uint32_t count32b = (uint32_t)len >> 2U;
3400bca8:	0894      	lsrs	r4, r2, #2
  uint16_t remaining_bytes = len % 4U;
3400bcaa:	42ac      	cmp	r4, r5
{
3400bcac:	4603      	mov	r3, r0
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400bcae:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
3400bcb2:	f104 0001 	add.w	r0, r4, #1
3400bcb6:	bf08      	it	eq
3400bcb8:	2001      	moveq	r0, #1
  uint16_t remaining_bytes = len % 4U;
3400bcba:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
3400bcbe:	3801      	subs	r0, #1
3400bcc0:	d110      	bne.n	3400bce4 <USB_ReadPacket+0x40>
3400bcc2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
    pDest++;
    pDest++;
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
3400bcc6:	b162      	cbz	r2, 3400bce2 <USB_ReadPacket+0x3e>
  {
    i = 0U;
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
3400bcc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400bccc:	681c      	ldr	r4, [r3, #0]
    i = 0U;
3400bcce:	2300      	movs	r3, #0

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
3400bcd0:	00d9      	lsls	r1, r3, #3
3400bcd2:	fa24 f101 	lsr.w	r1, r4, r1
3400bcd6:	54c1      	strb	r1, [r0, r3]
      i++;
3400bcd8:	3301      	adds	r3, #1
      pDest++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
3400bcda:	b299      	uxth	r1, r3
3400bcdc:	428a      	cmp	r2, r1
3400bcde:	d1f7      	bne.n	3400bcd0 <USB_ReadPacket+0x2c>
3400bce0:	4410      	add	r0, r2
  }

  return ((void *)pDest);
}
3400bce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400bce4:	6837      	ldr	r7, [r6, #0]
3400bce6:	f841 7025 	str.w	r7, [r1, r5, lsl #2]
  for (i = 0U; i < count32b; i++)
3400bcea:	3501      	adds	r5, #1
3400bcec:	e7e7      	b.n	3400bcbe <USB_ReadPacket+0x1a>

3400bcee <USB_EPSetStall>:
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
3400bcee:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
3400bcf0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400bcf2:	2a01      	cmp	r2, #1
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400bcf4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
3400bcf8:	d112      	bne.n	3400bd20 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400bcfa:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
3400bcfe:	2a00      	cmp	r2, #0
3400bd00:	db06      	blt.n	3400bd10 <USB_EPSetStall+0x22>
3400bd02:	b12b      	cbz	r3, 3400bd10 <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
3400bd04:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400bd08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400bd0c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
3400bd10:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400bd14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400bd18:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
  }

  return HAL_OK;
}
3400bd1c:	2000      	movs	r0, #0
3400bd1e:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
3400bd20:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400bd24:	2a00      	cmp	r2, #0
3400bd26:	db06      	blt.n	3400bd36 <USB_EPSetStall+0x48>
3400bd28:	b12b      	cbz	r3, 3400bd36 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
3400bd2a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400bd2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400bd32:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
3400bd36:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400bd3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400bd3e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400bd42:	e7eb      	b.n	3400bd1c <USB_EPSetStall+0x2e>

3400bd44 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
3400bd44:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
3400bd46:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
3400bd48:	4010      	ands	r0, r2
3400bd4a:	4770      	bx	lr

3400bd4c <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400bd4c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400bd50:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400bd54:	69c0      	ldr	r0, [r0, #28]
3400bd56:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
3400bd58:	0c00      	lsrs	r0, r0, #16
3400bd5a:	4770      	bx	lr

3400bd5c <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400bd5c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400bd60:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400bd64:	69c0      	ldr	r0, [r0, #28]
3400bd66:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
3400bd68:	b280      	uxth	r0, r0
3400bd6a:	4770      	bx	lr

3400bd6c <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400bd6c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400bd70:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400bd74:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400bd78:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
3400bd7a:	4010      	ands	r0, r2
3400bd7c:	4770      	bx	lr

3400bd7e <USB_ReadDevInEPInterrupt>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
3400bd7e:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
3400bd82:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400bd86:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400bd8a:	f001 010f 	and.w	r1, r1, #15
3400bd8e:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400bd90:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400bd94:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400bd96:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400bd98:	b2db      	uxtb	r3, r3
3400bd9a:	4313      	orrs	r3, r2

  return tmpreg;
}
3400bd9c:	4018      	ands	r0, r3
3400bd9e:	4770      	bx	lr

3400bda0 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
3400bda0:	6940      	ldr	r0, [r0, #20]
}
3400bda2:	f000 0001 	and.w	r0, r0, #1
3400bda6:	4770      	bx	lr

3400bda8 <USB_ActivateSetup>:
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
3400bda8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400bdac:	f36f 030a 	bfc	r3, #0, #11
3400bdb0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
3400bdb4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
3400bdb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3400bdbc:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804

  return HAL_OK;
}
3400bdc0:	2000      	movs	r0, #0
3400bdc2:	4770      	bx	lr

3400bdc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
3400bdc4:	b530      	push	{r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
3400bdc6:	6c05      	ldr	r5, [r0, #64]	@ 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400bdc8:	4c10      	ldr	r4, [pc, #64]	@ (3400be0c <USB_EP0_OutStart+0x48>)
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400bdca:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400bdce:	42a5      	cmp	r5, r4
3400bdd0:	d903      	bls.n	3400bdda <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400bdd2:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
3400bdd6:	2c00      	cmp	r4, #0
3400bdd8:	db16      	blt.n	3400be08 <USB_EP0_OutStart+0x44>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
3400bdda:	2400      	movs	r4, #0
3400bddc:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400bdde:	691c      	ldr	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;

  if (dma == 1U)
3400bde0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400bde2:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
3400bde6:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
3400bde8:	691c      	ldr	r4, [r3, #16]
3400bdea:	f044 0418 	orr.w	r4, r4, #24
3400bdee:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
3400bdf0:	691c      	ldr	r4, [r3, #16]
3400bdf2:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
3400bdf6:	611c      	str	r4, [r3, #16]
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
3400bdf8:	bf01      	itttt	eq
3400bdfa:	615a      	streq	r2, [r3, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
3400bdfc:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	@ 0xb00
3400be00:	f043 2380 	orreq.w	r3, r3, #2147516416	@ 0x80008000
3400be04:	f8c0 3b00 	streq.w	r3, [r0, #2816]	@ 0xb00
  }

  return HAL_OK;
}
3400be08:	2000      	movs	r0, #0
3400be0a:	bd30      	pop	{r4, r5, pc}
3400be0c:	4f54300a 	.word	0x4f54300a

3400be10 <CMW_CAMERA_GetDCMIPPHandle>:
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
    return &hcamera_dcmipp;
}
3400be10:	4800      	ldr	r0, [pc, #0]	@ (3400be14 <CMW_CAMERA_GetDCMIPPHandle+0x4>)
3400be12:	4770      	bx	lr
3400be14:	34012d98 	.word	0x34012d98

3400be18 <CMW_CAMERA_PIPE_VsyncEventCallback>:
/**
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
3400be18:	2000      	movs	r0, #0
3400be1a:	4770      	bx	lr

3400be1c <CMW_CAMERA_PIPE_FrameEventCallback>:
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
  UNUSED(pipe);

  return HAL_OK;
}
3400be1c:	2000      	movs	r0, #0
3400be1e:	4770      	bx	lr

3400be20 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
3400be20:	4b05      	ldr	r3, [pc, #20]	@ (3400be38 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x18>)
{
3400be22:	b510      	push	{r4, lr}
  if(Camera_Drv.VsyncEventCallback != NULL)
3400be24:	691b      	ldr	r3, [r3, #16]
{
3400be26:	460c      	mov	r4, r1
  if(Camera_Drv.VsyncEventCallback != NULL)
3400be28:	b10b      	cbz	r3, 3400be2e <HAL_DCMIPP_PIPE_VsyncEventCallback+0xe>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
3400be2a:	4804      	ldr	r0, [pc, #16]	@ (3400be3c <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>)
3400be2c:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
3400be2e:	4620      	mov	r0, r4
3400be30:	f7ff fff2 	bl	3400be18 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
3400be34:	bd10      	pop	{r4, pc}
3400be36:	bf00      	nop
3400be38:	34012d30 	.word	0x34012d30
3400be3c:	34012bec 	.word	0x34012bec

3400be40 <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
3400be40:	4b05      	ldr	r3, [pc, #20]	@ (3400be58 <HAL_DCMIPP_PIPE_FrameEventCallback+0x18>)
{
3400be42:	b510      	push	{r4, lr}
  if(Camera_Drv.FrameEventCallback != NULL)
3400be44:	695b      	ldr	r3, [r3, #20]
{
3400be46:	460c      	mov	r4, r1
  if(Camera_Drv.FrameEventCallback != NULL)
3400be48:	b10b      	cbz	r3, 3400be4e <HAL_DCMIPP_PIPE_FrameEventCallback+0xe>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
3400be4a:	4804      	ldr	r0, [pc, #16]	@ (3400be5c <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>)
3400be4c:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
3400be4e:	4620      	mov	r0, r4
3400be50:	f7ff ffe4 	bl	3400be1c <CMW_CAMERA_PIPE_FrameEventCallback>
}
3400be54:	bd10      	pop	{r4, pc}
3400be56:	bf00      	nop
3400be58:	34012d30 	.word	0x34012d30
3400be5c:	34012bec 	.word	0x34012bec

3400be60 <DMA2D_IRQHandler>:
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(dma2d_current);
3400be60:	4b01      	ldr	r3, [pc, #4]	@ (3400be68 <DMA2D_IRQHandler+0x8>)
3400be62:	6818      	ldr	r0, [r3, #0]
3400be64:	f7f7 bad8 	b.w	34003418 <HAL_DMA2D_IRQHandler>
3400be68:	34012da4 	.word	0x34012da4

3400be6c <USB1_OTG_HS_IRQHandler>:
  HAL_NVIC_EnableIRQ(USB1_OTG_HS_IRQn);
}

void USB1_OTG_HS_IRQHandler(void)
{
  UVCL_IRQHandler();
3400be6c:	f000 b800 	b.w	3400be70 <UVCL_IRQHandler>

3400be70 <UVCL_IRQHandler>:
void UVCL_IRQHandler()
{
#if defined(UVCL_USBD_USE_THREADX) || defined(UVCL_USBD_USE_FREERTOS)
  UVCL_stm32_usbd_IRQHandler();
#elif defined(UVC_LIB_USE_USBX)
  UVCL_stm32_usbx_IRQHandler();
3400be70:	f000 b800 	b.w	3400be74 <UVCL_stm32_usbx_IRQHandler>

3400be74 <UVCL_stm32_usbx_IRQHandler>:
    __enable_irq();
}
#endif

void UVCL_stm32_usbx_IRQHandler()
{
3400be74:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&uvcl_pcd_handle);
3400be76:	4804      	ldr	r0, [pc, #16]	@ (3400be88 <UVCL_stm32_usbx_IRQHandler+0x14>)
3400be78:	f7f7 fe4e 	bl	34003b18 <HAL_PCD_IRQHandler>
    assert(ret == pdTRUE);
    HAL_NVIC_DisableIRQ(irqn_type);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  }
#else
  ux_system_tasks_run();
3400be7c:	f000 fab6 	bl	3400c3ec <_ux_system_tasks_run>
  ux_system_tasks_run();
#endif
#endif
}
3400be80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ux_system_tasks_run();
3400be84:	f000 bab2 	b.w	3400c3ec <_ux_system_tasks_run>
3400be88:	34012da8 	.word	0x34012da8

3400be8c <simd_matrix_vector_mul_int8>:
    const int8_t* matrix,   // Pointer to MxN matrix
    const int8_t* vector,   // Pointer to vector of size N
    int32_t* result,        // Output vector of size M
    uint32_t M,             // Number of rows
    uint32_t N              // Number of columns (must be multiple of 4)
) {
3400be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400be90:	469c      	mov	ip, r3
    for (uint32_t i = 0; i < M; i++) {
3400be92:	2600      	movs	r6, #0
3400be94:	4566      	cmp	r6, ip
3400be96:	d101      	bne.n	3400be9c <simd_matrix_vector_mul_int8+0x10>
            acc = __SMLAD(mat_pack2, vec_pack2, acc);
        }

        result[i] = acc;
    }
}
3400be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int32_t acc = 0;
3400be9c:	f04f 0e00 	mov.w	lr, #0
3400bea0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
3400bea2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
3400bea4:	3503      	adds	r5, #3
3400bea6:	08ad      	lsrs	r5, r5, #2
3400bea8:	4577      	cmp	r7, lr
3400beaa:	f105 0501 	add.w	r5, r5, #1
3400beae:	460c      	mov	r4, r1
        for (uint32_t j = 0; j < N; j += 4) {
3400beb0:	4603      	mov	r3, r0
3400beb2:	bf14      	ite	ne
3400beb4:	462f      	movne	r7, r5
3400beb6:	2701      	moveq	r7, #1
3400beb8:	3f01      	subs	r7, #1
3400beba:	f103 0304 	add.w	r3, r3, #4
3400bebe:	f104 0404 	add.w	r4, r4, #4
3400bec2:	d105      	bne.n	3400bed0 <simd_matrix_vector_mul_int8+0x44>
        result[i] = acc;
3400bec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400bec6:	f842 e026 	str.w	lr, [r2, r6, lsl #2]
    for (uint32_t i = 0; i < M; i++) {
3400beca:	4418      	add	r0, r3
3400becc:	3601      	adds	r6, #1
3400bece:	e7e1      	b.n	3400be94 <simd_matrix_vector_mul_int8+0x8>
            int32_t mat_pack1 = __PKHBT(mat16_0, mat16_1, 16);
3400bed0:	f913 8c03 	ldrsb.w	r8, [r3, #-3]
            int32_t mat_pack2 = __PKHBT(mat16_2, mat16_3, 16);
3400bed4:	f913 9c01 	ldrsb.w	r9, [r3, #-1]
            int32_t mat_pack1 = __PKHBT(mat16_0, mat16_1, 16);
3400bed8:	f913 5c04 	ldrsb.w	r5, [r3, #-4]
            int32_t vec_pack1 = __PKHBT(vec16_0, vec16_1, 16);
3400bedc:	f914 ac04 	ldrsb.w	sl, [r4, #-4]
            int32_t vec_pack2 = __PKHBT(vec16_2, vec16_3, 16);
3400bee0:	f914 bc01 	ldrsb.w	fp, [r4, #-1]
            int32_t mat_pack1 = __PKHBT(mat16_0, mat16_1, 16);
3400bee4:	eac5 4508 	pkhbt	r5, r5, r8, lsl #16
            int32_t mat_pack2 = __PKHBT(mat16_2, mat16_3, 16);
3400bee8:	f913 8c02 	ldrsb.w	r8, [r3, #-2]
3400beec:	eac8 4809 	pkhbt	r8, r8, r9, lsl #16
            int32_t vec_pack1 = __PKHBT(vec16_0, vec16_1, 16);
3400bef0:	f914 9c03 	ldrsb.w	r9, [r4, #-3]
3400bef4:	eaca 4a09 	pkhbt	sl, sl, r9, lsl #16
            int32_t vec_pack2 = __PKHBT(vec16_2, vec16_3, 16);
3400bef8:	f914 9c02 	ldrsb.w	r9, [r4, #-2]
3400befc:	eac9 490b 	pkhbt	r9, r9, fp, lsl #16

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
3400bf00:	fb25 e50a 	smlad	r5, r5, sl, lr
3400bf04:	fb28 5e09 	smlad	lr, r8, r9, r5
        for (uint32_t j = 0; j < N; j += 4) {
3400bf08:	e7d6      	b.n	3400beb8 <simd_matrix_vector_mul_int8+0x2c>
	...

3400bf0c <HAL_PCD_SetupStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bf0c:	4b24      	ldr	r3, [pc, #144]	@ (3400bfa0 <HAL_PCD_SetupStageCallback+0x94>)
{
3400bf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bf12:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bf14:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bf18:	69dd      	ldr	r5, [r3, #28]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bf1a:	2208      	movs	r2, #8
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
3400bf1c:	686c      	ldr	r4, [r5, #4]
{
3400bf1e:	4606      	mov	r6, r0
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bf20:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
3400bf24:	f000 fa96 	bl	3400c454 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bf28:	2301      	movs	r3, #1
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bf2a:	2200      	movs	r2, #0
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bf2c:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bf2e:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bf30:	63a2      	str	r2, [r4, #56]	@ 0x38
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bf32:	f023 030e 	bic.w	r3, r3, #14
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bf36:	6462      	str	r2, [r4, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bf38:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
3400bf3a:	f994 105c 	ldrsb.w	r1, [r4, #92]	@ 0x5c
3400bf3e:	4291      	cmp	r1, r2
3400bf40:	da04      	bge.n	3400bf4c <HAL_PCD_SetupStageCallback+0x40>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
3400bf42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bf46:	60ab      	str	r3, [r5, #8]
                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
            }
        }
    }
}
3400bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
3400bf4c:	73aa      	strb	r2, [r5, #14]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
3400bf4e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
3400bf52:	b92a      	cbnz	r2, 3400bf60 <HAL_PCD_SetupStageCallback+0x54>
3400bf54:	f894 2063 	ldrb.w	r2, [r4, #99]	@ 0x63
3400bf58:	b912      	cbnz	r2, 3400bf60 <HAL_PCD_SetupStageCallback+0x54>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bf5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3400bf5e:	e7f2      	b.n	3400bf46 <HAL_PCD_SetupStageCallback+0x3a>
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bf60:	f104 0062 	add.w	r0, r4, #98	@ 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bf64:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bf66:	f000 fa7f 	bl	3400c468 <_ux_utility_short_get>
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bf6a:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bf6e:	4603      	mov	r3, r0
3400bf70:	f04f 0800 	mov.w	r8, #0
3400bf74:	6360      	str	r0, [r4, #52]	@ 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bf76:	d907      	bls.n	3400bf88 <HAL_PCD_SetupStageCallback+0x7c>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
3400bf78:	4639      	mov	r1, r7
3400bf7a:	4628      	mov	r0, r5
3400bf7c:	f000 f94e 	bl	3400c21c <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bf80:	68ab      	ldr	r3, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
3400bf82:	f885 800c 	strb.w	r8, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bf86:	e7e8      	b.n	3400bf5a <HAL_PCD_SetupStageCallback+0x4e>
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bf88:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bf8a:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bf8e:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Receive(hpcd,
3400bf90:	4630      	mov	r0, r6
3400bf92:	7bb9      	ldrb	r1, [r7, #14]
3400bf94:	f7f7 fd35 	bl	34003a02 <HAL_PCD_EP_Receive>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
3400bf98:	2302      	movs	r3, #2
3400bf9a:	732b      	strb	r3, [r5, #12]
3400bf9c:	e7d4      	b.n	3400bf48 <HAL_PCD_SetupStageCallback+0x3c>
3400bf9e:	bf00      	nop
3400bfa0:	3401328c 	.word	0x3401328c

3400bfa4 <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bfa4:	4b2e      	ldr	r3, [pc, #184]	@ (3400c060 <HAL_PCD_DataInStageCallback+0xbc>)
{
3400bfa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bfaa:	681b      	ldr	r3, [r3, #0]
3400bfac:	f001 020f 	and.w	r2, r1, #15
3400bfb0:	69df      	ldr	r7, [r3, #28]
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bfb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
3400bfb6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
{
3400bfba:	4606      	mov	r6, r0
3400bfbc:	460d      	mov	r5, r1
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bfbe:	6854      	ldr	r4, [r2, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400bfc0:	2900      	cmp	r1, #0
3400bfc2:	d13b      	bne.n	3400c03c <HAL_PCD_DataInStageCallback+0x98>

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
3400bfc4:	7b3b      	ldrb	r3, [r7, #12]
3400bfc6:	2b01      	cmp	r3, #1
3400bfc8:	d115      	bne.n	3400bff6 <HAL_PCD_DataInStageCallback+0x52>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bfca:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
3400bfce:	460b      	mov	r3, r1
3400bfd0:	460a      	mov	r2, r1
3400bfd2:	f7f7 fd16 	bl	34003a02 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
3400bfd6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400bfd8:	f8b8 0010 	ldrh.w	r0, [r8, #16]
3400bfdc:	4281      	cmp	r1, r0
3400bfde:	d81d      	bhi.n	3400c01c <HAL_PCD_DataInStageCallback+0x78>
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
3400bfe0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400bfe2:	2b01      	cmp	r3, #1
3400bfe4:	d109      	bne.n	3400bffa <HAL_PCD_DataInStageCallback+0x56>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
3400bfe6:	462b      	mov	r3, r5
3400bfe8:	462a      	mov	r2, r5
3400bfea:	4630      	mov	r0, r6
3400bfec:	f898 100e 	ldrb.w	r1, [r8, #14]
3400bff0:	f7f7 fd2d 	bl	34003a4e <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400bff4:	65a5      	str	r5, [r4, #88]	@ 0x58
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
3400bff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bffa:	2302      	movs	r3, #2
3400bffc:	6223      	str	r3, [r4, #32]
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400bffe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400c000:	6465      	str	r5, [r4, #68]	@ 0x44
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400c002:	63a3      	str	r3, [r4, #56]	@ 0x38
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400c004:	68bb      	ldr	r3, [r7, #8]
3400c006:	f043 0308 	orr.w	r3, r3, #8
3400c00a:	60bb      	str	r3, [r7, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
3400c00c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400c00e:	b113      	cbz	r3, 3400c016 <HAL_PCD_DataInStageCallback+0x72>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400c010:	f104 0020 	add.w	r0, r4, #32
3400c014:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
3400c016:	2304      	movs	r3, #4
3400c018:	733b      	strb	r3, [r7, #12]
3400c01a:	e7ec      	b.n	3400bff6 <HAL_PCD_DataInStageCallback+0x52>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400c01c:	1a0b      	subs	r3, r1, r0
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
3400c01e:	4283      	cmp	r3, r0
3400c020:	bf28      	it	cs
3400c022:	4603      	movcs	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400c024:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400c026:	1ac9      	subs	r1, r1, r3
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400c028:	4402      	add	r2, r0
                HAL_PCD_EP_Transmit(hpcd,
3400c02a:	4630      	mov	r0, r6
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400c02c:	6322      	str	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400c02e:	63e1      	str	r1, [r4, #60]	@ 0x3c
                HAL_PCD_EP_Transmit(hpcd,
3400c030:	f898 100e 	ldrb.w	r1, [r8, #14]
}
3400c034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400c038:	f7f7 bd09 	b.w	34003a4e <HAL_PCD_EP_Transmit>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400c03c:	6da6      	ldr	r6, [r4, #88]	@ 0x58
3400c03e:	2300      	movs	r3, #0
            transfer_request -> ux_slave_transfer_request_requested_length)
3400c040:	6b65      	ldr	r5, [r4, #52]	@ 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400c042:	b126      	cbz	r6, 3400c04e <HAL_PCD_DataInStageCallback+0xaa>
3400c044:	b11d      	cbz	r5, 3400c04e <HAL_PCD_DataInStageCallback+0xaa>
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400c046:	461a      	mov	r2, r3
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400c048:	65a3      	str	r3, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
3400c04a:	63e3      	str	r3, [r4, #60]	@ 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400c04c:	e7f2      	b.n	3400c034 <HAL_PCD_DataInStageCallback+0x90>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400c04e:	6463      	str	r3, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400c050:	2302      	movs	r3, #2
3400c052:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400c054:	6893      	ldr	r3, [r2, #8]
            transfer_request -> ux_slave_transfer_request_actual_length =
3400c056:	63a5      	str	r5, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400c058:	f043 0308 	orr.w	r3, r3, #8
3400c05c:	6093      	str	r3, [r2, #8]
}
3400c05e:	e7ca      	b.n	3400bff6 <HAL_PCD_DataInStageCallback+0x52>
3400c060:	3401328c 	.word	0x3401328c

3400c064 <HAL_PCD_DataOutStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400c064:	4a23      	ldr	r2, [pc, #140]	@ (3400c0f4 <HAL_PCD_DataOutStageCallback+0x90>)
{
3400c066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400c06a:	6812      	ldr	r2, [r2, #0]
3400c06c:	f001 050f 	and.w	r5, r1, #15
3400c070:	69d6      	ldr	r6, [r2, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400c072:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3400c076:	eb06 0585 	add.w	r5, r6, r5, lsl #2
{
3400c07a:	4607      	mov	r7, r0
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400c07c:	686c      	ldr	r4, [r5, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400c07e:	bb61      	cbnz	r1, 3400c0da <HAL_PCD_DataOutStageCallback+0x76>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
3400c080:	7b33      	ldrb	r3, [r6, #12]
3400c082:	2b02      	cmp	r3, #2
3400c084:	d110      	bne.n	3400c0a8 <HAL_PCD_DataOutStageCallback+0x44>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
3400c086:	6aa5      	ldr	r5, [r4, #40]	@ 0x28

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400c088:	f7f7 fcd9 	bl	34003a3e <HAL_PCD_EP_GetRxCount>

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400c08c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
                transfer_request -> ux_slave_transfer_request_requested_length)
3400c08e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400c090:	4403      	add	r3, r0
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400c092:	4293      	cmp	r3, r2
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400c094:	63a3      	str	r3, [r4, #56]	@ 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400c096:	d812      	bhi.n	3400c0be <HAL_PCD_DataOutStageCallback+0x5a>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
3400c098:	d002      	beq.n	3400c0a0 <HAL_PCD_DataOutStageCallback+0x3c>
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
3400c09a:	8a2b      	ldrh	r3, [r5, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
3400c09c:	4283      	cmp	r3, r0
3400c09e:	d005      	beq.n	3400c0ac <HAL_PCD_DataOutStageCallback+0x48>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
3400c0a0:	68b3      	ldr	r3, [r6, #8]
3400c0a2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
3400c0a6:	60b3      	str	r3, [r6, #8]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
3400c0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400c0ac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400c0ae:	4638      	mov	r0, r7
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400c0b0:	441a      	add	r2, r3
3400c0b2:	6322      	str	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400c0b4:	7ba9      	ldrb	r1, [r5, #14]
}
3400c0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    HAL_PCD_EP_Receive(hpcd,
3400c0ba:	f7f7 bca2 	b.w	34003a02 <HAL_PCD_EP_Receive>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
3400c0be:	2327      	movs	r3, #39	@ 0x27
3400c0c0:	6463      	str	r3, [r4, #68]	@ 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400c0c2:	68b3      	ldr	r3, [r6, #8]
3400c0c4:	f043 0308 	orr.w	r3, r3, #8
3400c0c8:	60b3      	str	r3, [r6, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
3400c0ca:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400c0cc:	2b00      	cmp	r3, #0
3400c0ce:	d0eb      	beq.n	3400c0a8 <HAL_PCD_DataOutStageCallback+0x44>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400c0d0:	f104 0020 	add.w	r0, r4, #32
}
3400c0d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400c0d8:	4718      	bx	r3
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400c0da:	f7f7 fcb0 	bl	34003a3e <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400c0de:	2300      	movs	r3, #0
3400c0e0:	6463      	str	r3, [r4, #68]	@ 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400c0e2:	2302      	movs	r3, #2
3400c0e4:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400c0e6:	68ab      	ldr	r3, [r5, #8]
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400c0e8:	63a0      	str	r0, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400c0ea:	f043 0308 	orr.w	r3, r3, #8
3400c0ee:	60ab      	str	r3, [r5, #8]
}
3400c0f0:	e7da      	b.n	3400c0a8 <HAL_PCD_DataOutStageCallback+0x44>
3400c0f2:	bf00      	nop
3400c0f4:	3401328c 	.word	0x3401328c

3400c0f8 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
3400c0f8:	b538      	push	{r3, r4, r5, lr}

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400c0fa:	4c0a      	ldr	r4, [pc, #40]	@ (3400c124 <HAL_PCD_ResetCallback+0x2c>)
{
3400c0fc:	4605      	mov	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400c0fe:	6823      	ldr	r3, [r4, #0]
3400c100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400c102:	b10b      	cbz	r3, 3400c108 <HAL_PCD_ResetCallback+0x10>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
3400c104:	f000 f902 	bl	3400c30c <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
3400c108:	79ea      	ldrb	r2, [r5, #7]
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400c10a:	6823      	ldr	r3, [r4, #0]
    switch(hpcd -> Init.speed)
3400c10c:	2a00      	cmp	r2, #0
3400c10e:	bf0c      	ite	eq
3400c110:	2202      	moveq	r2, #2
3400c112:	2201      	movne	r2, #1
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400c114:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
3400c118:	f000 f88e 	bl	3400c238 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400c11c:	2201      	movs	r2, #1
3400c11e:	6823      	ldr	r3, [r4, #0]
3400c120:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400c122:	bd38      	pop	{r3, r4, r5, pc}
3400c124:	3401328c 	.word	0x3401328c

3400c128 <HAL_PCD_ConnectCallback>:
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c128:	4b03      	ldr	r3, [pc, #12]	@ (3400c138 <HAL_PCD_ConnectCallback+0x10>)
3400c12a:	681b      	ldr	r3, [r3, #0]
3400c12c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400c130:	b10b      	cbz	r3, 3400c136 <HAL_PCD_ConnectCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
3400c132:	20f1      	movs	r0, #241	@ 0xf1
3400c134:	4718      	bx	r3
    }
}
3400c136:	4770      	bx	lr
3400c138:	3401328c 	.word	0x3401328c

3400c13c <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
3400c13c:	b510      	push	{r4, lr}

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c13e:	4c07      	ldr	r4, [pc, #28]	@ (3400c15c <HAL_PCD_DisconnectCallback+0x20>)
3400c140:	6823      	ldr	r3, [r4, #0]
3400c142:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400c146:	b10b      	cbz	r3, 3400c14c <HAL_PCD_DisconnectCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
3400c148:	20f2      	movs	r0, #242	@ 0xf2
3400c14a:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400c14c:	6823      	ldr	r3, [r4, #0]
3400c14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400c150:	b11b      	cbz	r3, 3400c15a <HAL_PCD_DisconnectCallback+0x1e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
    }
}
3400c152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _ux_device_stack_disconnect();
3400c156:	f000 b8d9 	b.w	3400c30c <_ux_device_stack_disconnect>
}
3400c15a:	bd10      	pop	{r4, pc}
3400c15c:	3401328c 	.word	0x3401328c

3400c160 <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c160:	4b03      	ldr	r3, [pc, #12]	@ (3400c170 <HAL_PCD_SuspendCallback+0x10>)
3400c162:	681b      	ldr	r3, [r3, #0]
3400c164:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400c168:	b10b      	cbz	r3, 3400c16e <HAL_PCD_SuspendCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
3400c16a:	20f4      	movs	r0, #244	@ 0xf4
3400c16c:	4718      	bx	r3
    }
}
3400c16e:	4770      	bx	lr
3400c170:	3401328c 	.word	0x3401328c

3400c174 <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c174:	4b03      	ldr	r3, [pc, #12]	@ (3400c184 <HAL_PCD_ResumeCallback+0x10>)
3400c176:	681b      	ldr	r3, [r3, #0]
3400c178:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400c17c:	b10b      	cbz	r3, 3400c182 <HAL_PCD_ResumeCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
3400c17e:	20f3      	movs	r0, #243	@ 0xf3
3400c180:	4718      	bx	r3
    }
}
3400c182:	4770      	bx	lr
3400c184:	3401328c 	.word	0x3401328c

3400c188 <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c188:	4b03      	ldr	r3, [pc, #12]	@ (3400c198 <HAL_PCD_SOFCallback+0x10>)
3400c18a:	681b      	ldr	r3, [r3, #0]
3400c18c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400c190:	b10b      	cbz	r3, 3400c196 <HAL_PCD_SOFCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
3400c192:	20f0      	movs	r0, #240	@ 0xf0
3400c194:	4718      	bx	r3
    }
}
3400c196:	4770      	bx	lr
3400c198:	3401328c 	.word	0x3401328c

3400c19c <HAL_PCD_ISOINIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400c19c:	4b0e      	ldr	r3, [pc, #56]	@ (3400c1d8 <HAL_PCD_ISOINIncompleteCallback+0x3c>)
3400c19e:	f001 010f 	and.w	r1, r1, #15
3400c1a2:	681b      	ldr	r3, [r3, #0]
3400c1a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400c1a8:	69d8      	ldr	r0, [r3, #28]
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
#else
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0U)
3400c1aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400c1ae:	688b      	ldr	r3, [r1, #8]
3400c1b0:	07db      	lsls	r3, r3, #31
3400c1b2:	d50f      	bpl.n	3400c1d4 <HAL_PCD_ISOINIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400c1b4:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400c1b6:	7bd3      	ldrb	r3, [r2, #15]
3400c1b8:	f003 0303 	and.w	r3, r3, #3
3400c1bc:	2b01      	cmp	r3, #1
3400c1be:	d109      	bne.n	3400c1d4 <HAL_PCD_ISOINIncompleteCallback+0x38>
3400c1c0:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != 0)
3400c1c4:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400c1c6:	2b00      	cmp	r3, #0
3400c1c8:	da04      	bge.n	3400c1d4 <HAL_PCD_ISOINIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
3400c1ca:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400c1cc:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400c1ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400c1d0:	f7f7 bc3d 	b.w	34003a4e <HAL_PCD_EP_Transmit>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400c1d4:	4770      	bx	lr
3400c1d6:	bf00      	nop
3400c1d8:	3401328c 	.word	0x3401328c

3400c1dc <HAL_PCD_ISOOUTIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400c1dc:	4b0e      	ldr	r3, [pc, #56]	@ (3400c218 <HAL_PCD_ISOOUTIncompleteCallback+0x3c>)
3400c1de:	f001 010f 	and.w	r1, r1, #15
3400c1e2:	681b      	ldr	r3, [r3, #0]
3400c1e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400c1e8:	69d8      	ldr	r0, [r3, #28]

    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
3400c1ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400c1ee:	688b      	ldr	r3, [r1, #8]
3400c1f0:	07db      	lsls	r3, r3, #31
3400c1f2:	d50f      	bpl.n	3400c214 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400c1f4:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400c1f6:	7bd3      	ldrb	r3, [r2, #15]
3400c1f8:	f003 0303 	and.w	r3, r3, #3
3400c1fc:	2b01      	cmp	r3, #1
3400c1fe:	d109      	bne.n	3400c214 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
3400c200:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == 0)
3400c204:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400c206:	2b00      	cmp	r3, #0
3400c208:	db04      	blt.n	3400c214 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
3400c20a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400c20c:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400c20e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400c210:	f7f7 bbf7 	b.w	34003a02 <HAL_PCD_EP_Receive>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400c214:	4770      	bx	lr
3400c216:	bf00      	nop
3400c218:	3401328c 	.word	0x3401328c

3400c21c <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
3400c21c:	b508      	push	{r3, lr}

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
3400c21e:	688b      	ldr	r3, [r1, #8]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400c220:	6f00      	ldr	r0, [r0, #112]	@ 0x70
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
3400c222:	685a      	ldr	r2, [r3, #4]
3400c224:	f042 0204 	orr.w	r2, r2, #4
3400c228:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400c22a:	7b89      	ldrb	r1, [r1, #14]
3400c22c:	7a9b      	ldrb	r3, [r3, #10]
3400c22e:	4319      	orrs	r1, r3
3400c230:	f7f7 fc27 	bl	34003a82 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
3400c234:	2000      	movs	r0, #0
3400c236:	bd08      	pop	{r3, pc}

3400c238 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
3400c238:	b570      	push	{r4, r5, r6, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400c23a:	4e32      	ldr	r6, [pc, #200]	@ (3400c304 <_ux_dcd_stm32_initialize_complete+0xcc>)
3400c23c:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400c23e:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400c242:	69e5      	ldr	r5, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400c244:	2b01      	cmp	r3, #1
3400c246:	d147      	bne.n	3400c2d8 <_ux_dcd_stm32_initialize_complete+0xa0>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
3400c248:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
3400c24c:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400c250:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
3400c254:	220e      	movs	r2, #14
3400c256:	492c      	ldr	r1, [pc, #176]	@ (3400c308 <_ux_dcd_stm32_initialize_complete+0xd0>)
3400c258:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400c25c:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
    _ux_utility_descriptor_parse(device_framework,
3400c260:	f104 0328 	add.w	r3, r4, #40	@ 0x28
3400c264:	f000 f8c7 	bl	3400c3f6 <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
3400c268:	f242 7310 	movw	r3, #10000	@ 0x2710
3400c26c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400c270:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
                            transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400c272:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400c276:	66e3      	str	r3, [r4, #108]	@ 0x6c

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400c278:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400c27c:	6662      	str	r2, [r4, #100]	@ 0x64

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400c27e:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400c280:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400c284:	6723      	str	r3, [r4, #112]	@ 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400c286:	4620      	mov	r0, r4
3400c288:	69a3      	ldr	r3, [r4, #24]
3400c28a:	4798      	blx	r3
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
3400c28c:	2100      	movs	r1, #0
3400c28e:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400c290:	f7f7 ffa8 	bl	340041e4 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400c294:	2300      	movs	r3, #0
3400c296:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400c29a:	4619      	mov	r1, r3
3400c29c:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400c29e:	f7f7 fb77 	bl	34003990 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
3400c2a2:	2180      	movs	r1, #128	@ 0x80
3400c2a4:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400c2a6:	f7f7 ff9d 	bl	340041e4 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400c2aa:	2300      	movs	r3, #0
3400c2ac:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400c2b0:	2180      	movs	r1, #128	@ 0x80
3400c2b2:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400c2b4:	f7f7 fb6c 	bl	34003990 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400c2b8:	2300      	movs	r3, #0

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400c2ba:	2208      	movs	r2, #8
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400c2bc:	2001      	movs	r0, #1
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400c2be:	e9c4 321d 	strd	r3, r2, [r4, #116]	@ 0x74
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400c2c2:	6423      	str	r3, [r4, #64]	@ 0x40

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c2c4:	6833      	ldr	r3, [r6, #0]
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
3400c2c6:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c2ca:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400c2ce:	6722      	str	r2, [r4, #112]	@ 0x70
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c2d0:	b103      	cbz	r3, 3400c2d4 <_ux_dcd_stm32_initialize_complete+0x9c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
3400c2d2:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
3400c2d4:	2000      	movs	r0, #0
3400c2d6:	bd70      	pop	{r4, r5, r6, pc}
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
3400c2d8:	2300      	movs	r3, #0
3400c2da:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
3400c2de:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400c2e2:	2b01      	cmp	r3, #1
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400c2e4:	bf0b      	itete	eq
3400c2e6:	f8d4 30d4 	ldreq.w	r3, [r4, #212]	@ 0xd4
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400c2ea:	f8d4 30dc 	ldrne.w	r3, [r4, #220]	@ 0xdc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400c2ee:	f8c4 30cc 	streq.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400c2f2:	f8c4 30cc 	strne.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
3400c2f6:	bf0c      	ite	eq
3400c2f8:	f8d4 30d8 	ldreq.w	r3, [r4, #216]	@ 0xd8
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
3400c2fc:	f8d4 30e0 	ldrne.w	r3, [r4, #224]	@ 0xe0
3400c300:	e7a8      	b.n	3400c254 <_ux_dcd_stm32_initialize_complete+0x1c>
3400c302:	bf00      	nop
3400c304:	3401328c 	.word	0x3401328c
3400c308:	34012828 	.word	0x34012828

3400c30c <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
3400c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400c310:	4f19      	ldr	r7, [pc, #100]	@ (3400c378 <_ux_device_stack_disconnect+0x6c>)
{
3400c312:	b08c      	sub	sp, #48	@ 0x30
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400c314:	683c      	ldr	r4, [r7, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
3400c316:	6a66      	ldr	r6, [r4, #36]	@ 0x24
3400c318:	2e03      	cmp	r6, #3
3400c31a:	d128      	bne.n	3400c36e <_ux_device_stack_disconnect+0x62>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
3400c31c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
3400c320:	b9b5      	cbnz	r5, 3400c350 <_ux_device_stack_disconnect+0x44>
            interface_ptr =  next_interface;
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400c322:	2301      	movs	r3, #1
3400c324:	6263      	str	r3, [r4, #36]	@ 0x24

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
3400c326:	210f      	movs	r1, #15
3400c328:	4620      	mov	r0, r4
3400c32a:	69a3      	ldr	r3, [r4, #24]
3400c32c:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
3400c330:	4798      	blx	r3
3400c332:	4605      	mov	r5, r0
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
3400c334:	2300      	movs	r3, #0
3400c336:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
3400c33a:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400c33c:	683b      	ldr	r3, [r7, #0]
3400c33e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400c342:	b10b      	cbz	r3, 3400c348 <_ux_device_stack_disconnect+0x3c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
3400c344:	200a      	movs	r0, #10
3400c346:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
3400c348:	4628      	mov	r0, r5
3400c34a:	b00c      	add	sp, #48	@ 0x30
3400c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            class_ptr =  interface_ptr -> ux_slave_interface_class;
3400c350:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
3400c352:	9601      	str	r6, [sp, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
3400c354:	9503      	str	r5, [sp, #12]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
3400c356:	9309      	str	r3, [sp, #36]	@ 0x24
            if (class_ptr != UX_NULL)
3400c358:	b113      	cbz	r3, 3400c360 <_ux_device_stack_disconnect+0x54>
                class_ptr -> ux_slave_class_entry_function(&class_command);
3400c35a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400c35c:	a801      	add	r0, sp, #4
3400c35e:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400c360:	f8d5 8018 	ldr.w	r8, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
3400c364:	4628      	mov	r0, r5
3400c366:	f000 f809 	bl	3400c37c <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
3400c36a:	4645      	mov	r5, r8
3400c36c:	e7d8      	b.n	3400c320 <_ux_device_stack_disconnect+0x14>
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
3400c36e:	2e01      	cmp	r6, #1
3400c370:	d0d9      	beq.n	3400c326 <_ux_device_stack_disconnect+0x1a>
UINT                        status = UX_ERROR;
3400c372:	25ff      	movs	r5, #255	@ 0xff
3400c374:	e7de      	b.n	3400c334 <_ux_device_stack_disconnect+0x28>
3400c376:	bf00      	nop
3400c378:	3401328c 	.word	0x3401328c

3400c37c <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
3400c37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400c380:	4605      	mov	r5, r0

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
3400c382:	2600      	movs	r6, #0
    device =  &_ux_system_slave -> ux_system_slave_device;
3400c384:	4f0e      	ldr	r7, [pc, #56]	@ (3400c3c0 <_ux_device_stack_interface_delete+0x44>)
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
3400c386:	69c4      	ldr	r4, [r0, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
3400c388:	f8d7 8000 	ldr.w	r8, [r7]
    while (next_endpoint != UX_NULL)
3400c38c:	b954      	cbnz	r4, 3400c3a4 <_ux_device_stack_interface_delete+0x28>
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400c38e:	69ab      	ldr	r3, [r5, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
3400c390:	4620      	mov	r0, r4
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400c392:	f8c8 30b4 	str.w	r3, [r8, #180]	@ 0xb4
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
3400c396:	e9c5 4401 	strd	r4, r4, [r5, #4]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
3400c39a:	e9c5 4406 	strd	r4, r4, [r5, #24]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
3400c39e:	602c      	str	r4, [r5, #0]
}
3400c3a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
3400c3a4:	6838      	ldr	r0, [r7, #0]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400c3a6:	f8d4 9014 	ldr.w	r9, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
3400c3aa:	4622      	mov	r2, r4
3400c3ac:	210f      	movs	r1, #15
3400c3ae:	6983      	ldr	r3, [r0, #24]
3400c3b0:	4798      	blx	r3
        endpoint -> ux_slave_endpoint_state =  0;
3400c3b2:	e9c4 6600 	strd	r6, r6, [r4]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
3400c3b6:	e9c4 6605 	strd	r6, r6, [r4, #20]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
3400c3ba:	61e6      	str	r6, [r4, #28]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400c3bc:	464c      	mov	r4, r9
3400c3be:	e7e5      	b.n	3400c38c <_ux_device_stack_interface_delete+0x10>
3400c3c0:	3401328c 	.word	0x3401328c

3400c3c4 <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
3400c3c4:	b510      	push	{r4, lr}


    status = UX_STATE_RESET;

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400c3c6:	4c08      	ldr	r4, [pc, #32]	@ (3400c3e8 <_ux_device_stack_tasks_run+0x24>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400c3c8:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400c3ca:	6820      	ldr	r0, [r4, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400c3cc:	2112      	movs	r1, #18
3400c3ce:	6983      	ldr	r3, [r0, #24]
3400c3d0:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400c3d2:	6823      	ldr	r3, [r4, #0]
    status = UX_STATE_RESET;
3400c3d4:	2000      	movs	r0, #0
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400c3d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
3400c3da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400c3dc:	b11a      	cbz	r2, 3400c3e6 <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
3400c3de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c3e0:	b10a      	cbz	r2, 3400c3e6 <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
3400c3e2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
3400c3e4:	4790      	blx	r2
        class_instance ++;
    }

    /* Return overall status.  */
    return(status);
}
3400c3e6:	bd10      	pop	{r4, pc}
3400c3e8:	3401328c 	.word	0x3401328c

3400c3ec <_ux_system_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_tasks_run(VOID)
{
3400c3ec:	b508      	push	{r3, lr}
#if defined(UX_DEVICE_STANDALONE) && !defined(UX_HOST_SIDE_ONLY)
    _ux_device_stack_tasks_run();
3400c3ee:	f7ff ffe9 	bl	3400c3c4 <_ux_device_stack_tasks_run>
    _ux_otg_tasks_run();
#endif

   /* Return code not used now.  */
   return(0);
}
3400c3f2:	2000      	movs	r0, #0
3400c3f4:	bd08      	pop	{r3, pc}

3400c3f6 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
3400c3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400c3fa:	4605      	mov	r5, r0
3400c3fc:	460e      	mov	r6, r1
3400c3fe:	461c      	mov	r4, r3
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
                *descriptor++ =  0;
3400c400:	f04f 0800 	mov.w	r8, #0
3400c404:	188f      	adds	r7, r1, r2
    while(descriptor_entries--)
3400c406:	42be      	cmp	r6, r7
3400c408:	d101      	bne.n	3400c40e <_ux_utility_descriptor_parse+0x18>
        }
    }

    /* Return to caller.  */
    return;
}
3400c40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(*descriptor_structure++)
3400c40e:	f816 3b01 	ldrb.w	r3, [r6], #1
3400c412:	2b02      	cmp	r3, #2
3400c414:	d013      	beq.n	3400c43e <_ux_utility_descriptor_parse+0x48>
3400c416:	2b04      	cmp	r3, #4
3400c418:	d006      	beq.n	3400c428 <_ux_utility_descriptor_parse+0x32>
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
3400c41a:	f815 3b01 	ldrb.w	r3, [r5], #1
3400c41e:	f804 3b01 	strb.w	r3, [r4], #1
            descriptor ++;
3400c422:	e7f0      	b.n	3400c406 <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c424:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 3u)
3400c428:	07a2      	lsls	r2, r4, #30
3400c42a:	d1fb      	bne.n	3400c424 <_ux_utility_descriptor_parse+0x2e>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c42c:	4628      	mov	r0, r5
3400c42e:	f000 f80f 	bl	3400c450 <_ux_utility_long_get>
            raw_descriptor +=  4;
3400c432:	3504      	adds	r5, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c434:	f844 0b04 	str.w	r0, [r4], #4
            break;
3400c438:	e7e5      	b.n	3400c406 <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c43a:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 1u)
3400c43e:	07e3      	lsls	r3, r4, #31
3400c440:	d4fb      	bmi.n	3400c43a <_ux_utility_descriptor_parse+0x44>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c442:	4628      	mov	r0, r5
3400c444:	f000 f810 	bl	3400c468 <_ux_utility_short_get>
            raw_descriptor += 2;
3400c448:	3502      	adds	r5, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c44a:	f824 0b02 	strh.w	r0, [r4], #2
            break;
3400c44e:	e7da      	b.n	3400c406 <_ux_utility_descriptor_parse+0x10>

3400c450 <_ux_utility_long_get>:
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;

    /* Return 32-bit value.  */
    return(value);
}
3400c450:	6800      	ldr	r0, [r0, #0]
3400c452:	4770      	bx	lr

3400c454 <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
3400c454:	3801      	subs	r0, #1
3400c456:	3201      	adds	r2, #1
3400c458:	3a01      	subs	r2, #1
3400c45a:	d100      	bne.n	3400c45e <_ux_utility_memory_copy+0xa>
        *destination++ =  *source++;
    }

    /* Return to caller.  */
    return; 
}
3400c45c:	4770      	bx	lr
        *destination++ =  *source++;
3400c45e:	f811 3b01 	ldrb.w	r3, [r1], #1
3400c462:	f800 3f01 	strb.w	r3, [r0, #1]!
3400c466:	e7f7      	b.n	3400c458 <_ux_utility_memory_copy+0x4>

3400c468 <_ux_utility_short_get>:
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);

    /* Return to caller.  */
    return((ULONG) value);
}
3400c468:	8800      	ldrh	r0, [r0, #0]
3400c46a:	4770      	bx	lr

3400c46c <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
3400c46c:	b510      	push	{r4, lr}
  if (done != 0)
3400c46e:	4ba3      	ldr	r3, [pc, #652]	@ (3400c6fc <LL_ATON_Init+0x290>)
{
3400c470:	b088      	sub	sp, #32
  if (done != 0)
3400c472:	781a      	ldrb	r2, [r3, #0]
3400c474:	b90a      	cbnz	r2, 3400c47a <LL_ATON_Init+0xe>
  done = 1;
3400c476:	2201      	movs	r2, #1
3400c478:	701a      	strb	r2, [r3, #0]
  int i;

  ll_aton_static_checks();

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
3400c47a:	4ba1      	ldr	r3, [pc, #644]	@ (3400c700 <LL_ATON_Init+0x294>)
3400c47c:	681a      	ldr	r2, [r3, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
3400c47e:	f042 0202 	orr.w	r2, r2, #2
  ATON_CLKCTRL_CTRL_SET(0, t);
3400c482:	601a      	str	r2, [r3, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
3400c484:	2201      	movs	r2, #1
3400c486:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
3400c488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400c48c:	609a      	str	r2, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
3400c48e:	60da      	str	r2, [r3, #12]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
3400c490:	2200      	movs	r2, #0
3400c492:	611a      	str	r2, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c494:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
3400c498:	685c      	ldr	r4, [r3, #4]
3400c49a:	2c00      	cmp	r4, #0
3400c49c:	d0fc      	beq.n	3400c498 <LL_ATON_Init+0x2c>
3400c49e:	f245 0301 	movw	r3, #20481	@ 0x5001
3400c4a2:	b2a2      	uxth	r2, r4
3400c4a4:	429a      	cmp	r2, r3
3400c4a6:	f040 8092 	bne.w	3400c5ce <LL_ATON_Init+0x162>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c4aa:	4b96      	ldr	r3, [pc, #600]	@ (3400c704 <LL_ATON_Init+0x298>)
3400c4ac:	685c      	ldr	r4, [r3, #4]
3400c4ae:	2c00      	cmp	r4, #0
3400c4b0:	d0fc      	beq.n	3400c4ac <LL_ATON_Init+0x40>
3400c4b2:	f245 1317 	movw	r3, #20759	@ 0x5117
3400c4b6:	b2a2      	uxth	r2, r4
3400c4b8:	429a      	cmp	r2, r3
3400c4ba:	f040 80b0 	bne.w	3400c61e <LL_ATON_Init+0x1b2>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c4be:	4b92      	ldr	r3, [pc, #584]	@ (3400c708 <LL_ATON_Init+0x29c>)
3400c4c0:	685c      	ldr	r4, [r3, #4]
3400c4c2:	2c00      	cmp	r4, #0
3400c4c4:	d0fc      	beq.n	3400c4c0 <LL_ATON_Init+0x54>
3400c4c6:	f241 131c 	movw	r3, #4380	@ 0x111c
3400c4ca:	b2a2      	uxth	r2, r4
3400c4cc:	429a      	cmp	r2, r3
3400c4ce:	f040 80cc 	bne.w	3400c66a <LL_ATON_Init+0x1fe>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c4d2:	4b8e      	ldr	r3, [pc, #568]	@ (3400c70c <LL_ATON_Init+0x2a0>)
3400c4d4:	685c      	ldr	r4, [r3, #4]
3400c4d6:	2c00      	cmp	r4, #0
3400c4d8:	d0fc      	beq.n	3400c4d4 <LL_ATON_Init+0x68>
3400c4da:	f241 031a 	movw	r3, #4122	@ 0x101a
3400c4de:	b2a2      	uxth	r2, r4
3400c4e0:	429a      	cmp	r2, r3
3400c4e2:	f040 80e6 	bne.w	3400c6b2 <LL_ATON_Init+0x246>
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c4e6:	4b8a      	ldr	r3, [pc, #552]	@ (3400c710 <LL_ATON_Init+0x2a4>)
3400c4e8:	685c      	ldr	r4, [r3, #4]
3400c4ea:	2c00      	cmp	r4, #0
3400c4ec:	d0fc      	beq.n	3400c4e8 <LL_ATON_Init+0x7c>
3400c4ee:	f241 131b 	movw	r3, #4379	@ 0x111b
3400c4f2:	b2a2      	uxth	r2, r4
3400c4f4:	429a      	cmp	r2, r3
3400c4f6:	f040 812d 	bne.w	3400c754 <LL_ATON_Init+0x2e8>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c4fa:	4b86      	ldr	r3, [pc, #536]	@ (3400c714 <LL_ATON_Init+0x2a8>)
3400c4fc:	685c      	ldr	r4, [r3, #4]
3400c4fe:	2c00      	cmp	r4, #0
3400c500:	d0fc      	beq.n	3400c4fc <LL_ATON_Init+0x90>
3400c502:	f641 2319 	movw	r3, #6681	@ 0x1a19
3400c506:	b2a2      	uxth	r2, r4
3400c508:	429a      	cmp	r2, r3
3400c50a:	f040 8147 	bne.w	3400c79c <LL_ATON_Init+0x330>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c50e:	4b82      	ldr	r3, [pc, #520]	@ (3400c718 <LL_ATON_Init+0x2ac>)
3400c510:	685c      	ldr	r4, [r3, #4]
3400c512:	2c00      	cmp	r4, #0
3400c514:	d0fc      	beq.n	3400c510 <LL_ATON_Init+0xa4>
3400c516:	f241 1321 	movw	r3, #4385	@ 0x1121
3400c51a:	b2a2      	uxth	r2, r4
3400c51c:	429a      	cmp	r2, r3
3400c51e:	f040 8162 	bne.w	3400c7e6 <LL_ATON_Init+0x37a>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c522:	4b7e      	ldr	r3, [pc, #504]	@ (3400c71c <LL_ATON_Init+0x2b0>)
3400c524:	685c      	ldr	r4, [r3, #4]
3400c526:	2c00      	cmp	r4, #0
3400c528:	d0fc      	beq.n	3400c524 <LL_ATON_Init+0xb8>
3400c52a:	f243 2320 	movw	r3, #12832	@ 0x3220
3400c52e:	b2a2      	uxth	r2, r4
3400c530:	429a      	cmp	r2, r3
3400c532:	f040 817c 	bne.w	3400c82e <LL_ATON_Init+0x3c2>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c536:	4b72      	ldr	r3, [pc, #456]	@ (3400c700 <LL_ATON_Init+0x294>)
3400c538:	685c      	ldr	r4, [r3, #4]
3400c53a:	2c00      	cmp	r4, #0
3400c53c:	d0fc      	beq.n	3400c538 <LL_ATON_Init+0xcc>
3400c53e:	f241 231f 	movw	r3, #4639	@ 0x121f
3400c542:	b2a2      	uxth	r2, r4
3400c544:	429a      	cmp	r2, r3
3400c546:	f040 8198 	bne.w	3400c87a <LL_ATON_Init+0x40e>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c54a:	4b75      	ldr	r3, [pc, #468]	@ (3400c720 <LL_ATON_Init+0x2b4>)
3400c54c:	685c      	ldr	r4, [r3, #4]
3400c54e:	2c00      	cmp	r4, #0
3400c550:	d0fc      	beq.n	3400c54c <LL_ATON_Init+0xe0>
3400c552:	f241 131e 	movw	r3, #4382	@ 0x111e
3400c556:	b2a2      	uxth	r2, r4
3400c558:	429a      	cmp	r2, r3
3400c55a:	f040 81b4 	bne.w	3400c8c6 <LL_ATON_Init+0x45a>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c55e:	4b71      	ldr	r3, [pc, #452]	@ (3400c724 <LL_ATON_Init+0x2b8>)
3400c560:	685c      	ldr	r4, [r3, #4]
3400c562:	2c00      	cmp	r4, #0
3400c564:	d0fc      	beq.n	3400c560 <LL_ATON_Init+0xf4>
3400c566:	b2a3      	uxth	r3, r4
3400c568:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
3400c56c:	f040 81cf 	bne.w	3400c90e <LL_ATON_Init+0x4a2>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c570:	4a6d      	ldr	r2, [pc, #436]	@ (3400c728 <LL_ATON_Init+0x2bc>)
3400c572:	6854      	ldr	r4, [r2, #4]
3400c574:	2c00      	cmp	r4, #0
3400c576:	d0fc      	beq.n	3400c572 <LL_ATON_Init+0x106>
3400c578:	f245 031d 	movw	r3, #20509	@ 0x501d
3400c57c:	b2a1      	uxth	r1, r4
3400c57e:	4299      	cmp	r1, r3
3400c580:	f000 81ec 	beq.w	3400c95c <LL_ATON_Init+0x4f0>
3400c584:	f002 fd22 	bl	3400efcc <__errno>
3400c588:	6803      	ldr	r3, [r0, #0]
3400c58a:	2b00      	cmp	r3, #0
3400c58c:	f000 81e4 	beq.w	3400c958 <LL_ATON_Init+0x4ec>
3400c590:	f002 fd1c 	bl	3400efcc <__errno>
3400c594:	6800      	ldr	r0, [r0, #0]
3400c596:	f002 fcb3 	bl	3400ef00 <strerror>
3400c59a:	4603      	mov	r3, r0
3400c59c:	2205      	movs	r2, #5
3400c59e:	2100      	movs	r1, #0
3400c5a0:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c5a4:	221d      	movs	r2, #29
3400c5a6:	9204      	str	r2, [sp, #16]
3400c5a8:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c5ac:	9203      	str	r2, [sp, #12]
3400c5ae:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c5b2:	9202      	str	r2, [sp, #8]
3400c5b4:	4a5d      	ldr	r2, [pc, #372]	@ (3400c72c <LL_ATON_Init+0x2c0>)
3400c5b6:	b2e4      	uxtb	r4, r4
3400c5b8:	495d      	ldr	r1, [pc, #372]	@ (3400c730 <LL_ATON_Init+0x2c4>)
3400c5ba:	9200      	str	r2, [sp, #0]
3400c5bc:	485d      	ldr	r0, [pc, #372]	@ (3400c734 <LL_ATON_Init+0x2c8>)
3400c5be:	22fb      	movs	r2, #251	@ 0xfb
3400c5c0:	9401      	str	r4, [sp, #4]
3400c5c2:	f002 f967 	bl	3400e894 <iprintf>
3400c5c6:	21fb      	movs	r1, #251	@ 0xfb
3400c5c8:	4b5b      	ldr	r3, [pc, #364]	@ (3400c738 <LL_ATON_Init+0x2cc>)
3400c5ca:	4a5c      	ldr	r2, [pc, #368]	@ (3400c73c <LL_ATON_Init+0x2d0>)
3400c5cc:	e022      	b.n	3400c614 <LL_ATON_Init+0x1a8>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c5ce:	f002 fcfd 	bl	3400efcc <__errno>
3400c5d2:	6803      	ldr	r3, [r0, #0]
3400c5d4:	b30b      	cbz	r3, 3400c61a <LL_ATON_Init+0x1ae>
3400c5d6:	f002 fcf9 	bl	3400efcc <__errno>
3400c5da:	6800      	ldr	r0, [r0, #0]
3400c5dc:	f002 fc90 	bl	3400ef00 <strerror>
3400c5e0:	4603      	mov	r3, r0
3400c5e2:	2205      	movs	r2, #5
3400c5e4:	f04f 0e00 	mov.w	lr, #0
3400c5e8:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c5ec:	2201      	movs	r2, #1
3400c5ee:	9204      	str	r2, [sp, #16]
3400c5f0:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c5f4:	9203      	str	r2, [sp, #12]
3400c5f6:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c5fa:	9202      	str	r2, [sp, #8]
3400c5fc:	4a50      	ldr	r2, [pc, #320]	@ (3400c740 <LL_ATON_Init+0x2d4>)
3400c5fe:	b2e4      	uxtb	r4, r4
3400c600:	494b      	ldr	r1, [pc, #300]	@ (3400c730 <LL_ATON_Init+0x2c4>)
3400c602:	9200      	str	r2, [sp, #0]
3400c604:	484b      	ldr	r0, [pc, #300]	@ (3400c734 <LL_ATON_Init+0x2c8>)
3400c606:	22c7      	movs	r2, #199	@ 0xc7
3400c608:	9401      	str	r4, [sp, #4]
3400c60a:	f002 f943 	bl	3400e894 <iprintf>
3400c60e:	21c7      	movs	r1, #199	@ 0xc7
3400c610:	4b49      	ldr	r3, [pc, #292]	@ (3400c738 <LL_ATON_Init+0x2cc>)
3400c612:	4a4a      	ldr	r2, [pc, #296]	@ (3400c73c <LL_ATON_Init+0x2d0>)
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c614:	4846      	ldr	r0, [pc, #280]	@ (3400c730 <LL_ATON_Init+0x2c4>)
3400c616:	f001 fa93 	bl	3400db40 <__assert_func>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c61a:	4b4a      	ldr	r3, [pc, #296]	@ (3400c744 <LL_ATON_Init+0x2d8>)
3400c61c:	e7e1      	b.n	3400c5e2 <LL_ATON_Init+0x176>
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c61e:	f002 fcd5 	bl	3400efcc <__errno>
3400c622:	6803      	ldr	r3, [r0, #0]
3400c624:	b1fb      	cbz	r3, 3400c666 <LL_ATON_Init+0x1fa>
3400c626:	f002 fcd1 	bl	3400efcc <__errno>
3400c62a:	6800      	ldr	r0, [r0, #0]
3400c62c:	f002 fc68 	bl	3400ef00 <strerror>
3400c630:	4603      	mov	r3, r0
3400c632:	2205      	movs	r2, #5
3400c634:	f04f 0c01 	mov.w	ip, #1
3400c638:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c63c:	2217      	movs	r2, #23
3400c63e:	9204      	str	r2, [sp, #16]
3400c640:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c644:	9203      	str	r2, [sp, #12]
3400c646:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c64a:	9202      	str	r2, [sp, #8]
3400c64c:	4a3e      	ldr	r2, [pc, #248]	@ (3400c748 <LL_ATON_Init+0x2dc>)
3400c64e:	b2e4      	uxtb	r4, r4
3400c650:	4937      	ldr	r1, [pc, #220]	@ (3400c730 <LL_ATON_Init+0x2c4>)
3400c652:	9200      	str	r2, [sp, #0]
3400c654:	4837      	ldr	r0, [pc, #220]	@ (3400c734 <LL_ATON_Init+0x2c8>)
3400c656:	22ca      	movs	r2, #202	@ 0xca
3400c658:	9401      	str	r4, [sp, #4]
3400c65a:	f002 f91b 	bl	3400e894 <iprintf>
3400c65e:	21ca      	movs	r1, #202	@ 0xca
3400c660:	4b35      	ldr	r3, [pc, #212]	@ (3400c738 <LL_ATON_Init+0x2cc>)
3400c662:	4a36      	ldr	r2, [pc, #216]	@ (3400c73c <LL_ATON_Init+0x2d0>)
3400c664:	e7d6      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c666:	4b37      	ldr	r3, [pc, #220]	@ (3400c744 <LL_ATON_Init+0x2d8>)
3400c668:	e7e3      	b.n	3400c632 <LL_ATON_Init+0x1c6>
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c66a:	f002 fcaf 	bl	3400efcc <__errno>
3400c66e:	6803      	ldr	r3, [r0, #0]
3400c670:	b1eb      	cbz	r3, 3400c6ae <LL_ATON_Init+0x242>
3400c672:	f002 fcab 	bl	3400efcc <__errno>
3400c676:	6800      	ldr	r0, [r0, #0]
3400c678:	f002 fc42 	bl	3400ef00 <strerror>
3400c67c:	4603      	mov	r3, r0
3400c67e:	2201      	movs	r2, #1
3400c680:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c684:	221c      	movs	r2, #28
3400c686:	9204      	str	r2, [sp, #16]
3400c688:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c68c:	9203      	str	r2, [sp, #12]
3400c68e:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c692:	9202      	str	r2, [sp, #8]
3400c694:	4a2d      	ldr	r2, [pc, #180]	@ (3400c74c <LL_ATON_Init+0x2e0>)
3400c696:	b2e4      	uxtb	r4, r4
3400c698:	4925      	ldr	r1, [pc, #148]	@ (3400c730 <LL_ATON_Init+0x2c4>)
3400c69a:	9200      	str	r2, [sp, #0]
3400c69c:	4825      	ldr	r0, [pc, #148]	@ (3400c734 <LL_ATON_Init+0x2c8>)
3400c69e:	22ce      	movs	r2, #206	@ 0xce
3400c6a0:	9401      	str	r4, [sp, #4]
3400c6a2:	f002 f8f7 	bl	3400e894 <iprintf>
3400c6a6:	21ce      	movs	r1, #206	@ 0xce
3400c6a8:	4b23      	ldr	r3, [pc, #140]	@ (3400c738 <LL_ATON_Init+0x2cc>)
3400c6aa:	4a24      	ldr	r2, [pc, #144]	@ (3400c73c <LL_ATON_Init+0x2d0>)
3400c6ac:	e7b2      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c6ae:	4b25      	ldr	r3, [pc, #148]	@ (3400c744 <LL_ATON_Init+0x2d8>)
3400c6b0:	e7e5      	b.n	3400c67e <LL_ATON_Init+0x212>
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c6b2:	f002 fc8b 	bl	3400efcc <__errno>
3400c6b6:	6803      	ldr	r3, [r0, #0]
3400c6b8:	b1f3      	cbz	r3, 3400c6f8 <LL_ATON_Init+0x28c>
3400c6ba:	f002 fc87 	bl	3400efcc <__errno>
3400c6be:	6800      	ldr	r0, [r0, #0]
3400c6c0:	f002 fc1e 	bl	3400ef00 <strerror>
3400c6c4:	4603      	mov	r3, r0
3400c6c6:	2201      	movs	r2, #1
3400c6c8:	2000      	movs	r0, #0
3400c6ca:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c6ce:	221a      	movs	r2, #26
3400c6d0:	9204      	str	r2, [sp, #16]
3400c6d2:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c6d6:	9203      	str	r2, [sp, #12]
3400c6d8:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c6dc:	9202      	str	r2, [sp, #8]
3400c6de:	4a1c      	ldr	r2, [pc, #112]	@ (3400c750 <LL_ATON_Init+0x2e4>)
3400c6e0:	b2e4      	uxtb	r4, r4
3400c6e2:	4913      	ldr	r1, [pc, #76]	@ (3400c730 <LL_ATON_Init+0x2c4>)
3400c6e4:	9200      	str	r2, [sp, #0]
3400c6e6:	4813      	ldr	r0, [pc, #76]	@ (3400c734 <LL_ATON_Init+0x2c8>)
3400c6e8:	22d2      	movs	r2, #210	@ 0xd2
3400c6ea:	9401      	str	r4, [sp, #4]
3400c6ec:	f002 f8d2 	bl	3400e894 <iprintf>
3400c6f0:	21d2      	movs	r1, #210	@ 0xd2
3400c6f2:	4b11      	ldr	r3, [pc, #68]	@ (3400c738 <LL_ATON_Init+0x2cc>)
3400c6f4:	4a11      	ldr	r2, [pc, #68]	@ (3400c73c <LL_ATON_Init+0x2d0>)
3400c6f6:	e78d      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c6f8:	4b12      	ldr	r3, [pc, #72]	@ (3400c744 <LL_ATON_Init+0x2d8>)
3400c6fa:	e7e4      	b.n	3400c6c6 <LL_ATON_Init+0x25a>
3400c6fc:	34013290 	.word	0x34013290
3400c700:	580e0000 	.word	0x580e0000
3400c704:	580ef000 	.word	0x580ef000
3400c708:	580fb000 	.word	0x580fb000
3400c70c:	580f7000 	.word	0x580f7000
3400c710:	580f5000 	.word	0x580f5000
3400c714:	580f3000 	.word	0x580f3000
3400c718:	580fe000 	.word	0x580fe000
3400c71c:	580fd000 	.word	0x580fd000
3400c720:	580e1000 	.word	0x580e1000
3400c724:	580e4000 	.word	0x580e4000
3400c728:	580e2000 	.word	0x580e2000
3400c72c:	34011258 	.word	0x34011258
3400c730:	34011113 	.word	0x34011113
3400c734:	340111a3 	.word	0x340111a3
3400c738:	3401141d 	.word	0x3401141d
3400c73c:	34012434 	.word	0x34012434
3400c740:	34011207 	.word	0x34011207
3400c744:	3401110e 	.word	0x3401110e
3400c748:	3401120e 	.word	0x3401120e
3400c74c:	34011216 	.word	0x34011216
3400c750:	3401121b 	.word	0x3401121b
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c754:	f002 fc3a 	bl	3400efcc <__errno>
3400c758:	6803      	ldr	r3, [r0, #0]
3400c75a:	b1eb      	cbz	r3, 3400c798 <LL_ATON_Init+0x32c>
3400c75c:	f002 fc36 	bl	3400efcc <__errno>
3400c760:	6800      	ldr	r0, [r0, #0]
3400c762:	f002 fbcd 	bl	3400ef00 <strerror>
3400c766:	4603      	mov	r3, r0
3400c768:	2201      	movs	r2, #1
3400c76a:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c76e:	221b      	movs	r2, #27
3400c770:	9204      	str	r2, [sp, #16]
3400c772:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c776:	9203      	str	r2, [sp, #12]
3400c778:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c77c:	9202      	str	r2, [sp, #8]
3400c77e:	4a7c      	ldr	r2, [pc, #496]	@ (3400c970 <LL_ATON_Init+0x504>)
3400c780:	b2e4      	uxtb	r4, r4
3400c782:	497c      	ldr	r1, [pc, #496]	@ (3400c974 <LL_ATON_Init+0x508>)
3400c784:	9200      	str	r2, [sp, #0]
3400c786:	487c      	ldr	r0, [pc, #496]	@ (3400c978 <LL_ATON_Init+0x50c>)
3400c788:	22d6      	movs	r2, #214	@ 0xd6
3400c78a:	9401      	str	r4, [sp, #4]
3400c78c:	f002 f882 	bl	3400e894 <iprintf>
3400c790:	21d6      	movs	r1, #214	@ 0xd6
3400c792:	4b7a      	ldr	r3, [pc, #488]	@ (3400c97c <LL_ATON_Init+0x510>)
3400c794:	4a7a      	ldr	r2, [pc, #488]	@ (3400c980 <LL_ATON_Init+0x514>)
3400c796:	e73d      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c798:	4b7a      	ldr	r3, [pc, #488]	@ (3400c984 <LL_ATON_Init+0x518>)
3400c79a:	e7e5      	b.n	3400c768 <LL_ATON_Init+0x2fc>
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c79c:	f002 fc16 	bl	3400efcc <__errno>
3400c7a0:	6803      	ldr	r3, [r0, #0]
3400c7a2:	b1f3      	cbz	r3, 3400c7e2 <LL_ATON_Init+0x376>
3400c7a4:	f002 fc12 	bl	3400efcc <__errno>
3400c7a8:	6800      	ldr	r0, [r0, #0]
3400c7aa:	f002 fba9 	bl	3400ef00 <strerror>
3400c7ae:	4603      	mov	r3, r0
3400c7b0:	2201      	movs	r2, #1
3400c7b2:	210a      	movs	r1, #10
3400c7b4:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c7b8:	2219      	movs	r2, #25
3400c7ba:	9204      	str	r2, [sp, #16]
3400c7bc:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c7c0:	9203      	str	r2, [sp, #12]
3400c7c2:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c7c6:	9202      	str	r2, [sp, #8]
3400c7c8:	4a6f      	ldr	r2, [pc, #444]	@ (3400c988 <LL_ATON_Init+0x51c>)
3400c7ca:	b2e4      	uxtb	r4, r4
3400c7cc:	4969      	ldr	r1, [pc, #420]	@ (3400c974 <LL_ATON_Init+0x508>)
3400c7ce:	9200      	str	r2, [sp, #0]
3400c7d0:	4869      	ldr	r0, [pc, #420]	@ (3400c978 <LL_ATON_Init+0x50c>)
3400c7d2:	22da      	movs	r2, #218	@ 0xda
3400c7d4:	9401      	str	r4, [sp, #4]
3400c7d6:	f002 f85d 	bl	3400e894 <iprintf>
3400c7da:	21da      	movs	r1, #218	@ 0xda
3400c7dc:	4b67      	ldr	r3, [pc, #412]	@ (3400c97c <LL_ATON_Init+0x510>)
3400c7de:	4a68      	ldr	r2, [pc, #416]	@ (3400c980 <LL_ATON_Init+0x514>)
3400c7e0:	e718      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c7e2:	4b68      	ldr	r3, [pc, #416]	@ (3400c984 <LL_ATON_Init+0x518>)
3400c7e4:	e7e4      	b.n	3400c7b0 <LL_ATON_Init+0x344>
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c7e6:	f002 fbf1 	bl	3400efcc <__errno>
3400c7ea:	6803      	ldr	r3, [r0, #0]
3400c7ec:	b1eb      	cbz	r3, 3400c82a <LL_ATON_Init+0x3be>
3400c7ee:	f002 fbed 	bl	3400efcc <__errno>
3400c7f2:	6800      	ldr	r0, [r0, #0]
3400c7f4:	f002 fb84 	bl	3400ef00 <strerror>
3400c7f8:	4603      	mov	r3, r0
3400c7fa:	2201      	movs	r2, #1
3400c7fc:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c800:	2221      	movs	r2, #33	@ 0x21
3400c802:	9204      	str	r2, [sp, #16]
3400c804:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c808:	9203      	str	r2, [sp, #12]
3400c80a:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c80e:	9202      	str	r2, [sp, #8]
3400c810:	4a5e      	ldr	r2, [pc, #376]	@ (3400c98c <LL_ATON_Init+0x520>)
3400c812:	b2e4      	uxtb	r4, r4
3400c814:	4957      	ldr	r1, [pc, #348]	@ (3400c974 <LL_ATON_Init+0x508>)
3400c816:	9200      	str	r2, [sp, #0]
3400c818:	4857      	ldr	r0, [pc, #348]	@ (3400c978 <LL_ATON_Init+0x50c>)
3400c81a:	22de      	movs	r2, #222	@ 0xde
3400c81c:	9401      	str	r4, [sp, #4]
3400c81e:	f002 f839 	bl	3400e894 <iprintf>
3400c822:	21de      	movs	r1, #222	@ 0xde
3400c824:	4b55      	ldr	r3, [pc, #340]	@ (3400c97c <LL_ATON_Init+0x510>)
3400c826:	4a56      	ldr	r2, [pc, #344]	@ (3400c980 <LL_ATON_Init+0x514>)
3400c828:	e6f4      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c82a:	4b56      	ldr	r3, [pc, #344]	@ (3400c984 <LL_ATON_Init+0x518>)
3400c82c:	e7e5      	b.n	3400c7fa <LL_ATON_Init+0x38e>
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c82e:	f002 fbcd 	bl	3400efcc <__errno>
3400c832:	6803      	ldr	r3, [r0, #0]
3400c834:	b1fb      	cbz	r3, 3400c876 <LL_ATON_Init+0x40a>
3400c836:	f002 fbc9 	bl	3400efcc <__errno>
3400c83a:	6800      	ldr	r0, [r0, #0]
3400c83c:	f002 fb60 	bl	3400ef00 <strerror>
3400c840:	4603      	mov	r3, r0
3400c842:	2203      	movs	r2, #3
3400c844:	f04f 0e02 	mov.w	lr, #2
3400c848:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c84c:	2220      	movs	r2, #32
3400c84e:	9204      	str	r2, [sp, #16]
3400c850:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c854:	9203      	str	r2, [sp, #12]
3400c856:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c85a:	9202      	str	r2, [sp, #8]
3400c85c:	4a4c      	ldr	r2, [pc, #304]	@ (3400c990 <LL_ATON_Init+0x524>)
3400c85e:	b2e4      	uxtb	r4, r4
3400c860:	4944      	ldr	r1, [pc, #272]	@ (3400c974 <LL_ATON_Init+0x508>)
3400c862:	9200      	str	r2, [sp, #0]
3400c864:	4844      	ldr	r0, [pc, #272]	@ (3400c978 <LL_ATON_Init+0x50c>)
3400c866:	22e2      	movs	r2, #226	@ 0xe2
3400c868:	9401      	str	r4, [sp, #4]
3400c86a:	f002 f813 	bl	3400e894 <iprintf>
3400c86e:	21e2      	movs	r1, #226	@ 0xe2
3400c870:	4b42      	ldr	r3, [pc, #264]	@ (3400c97c <LL_ATON_Init+0x510>)
3400c872:	4a43      	ldr	r2, [pc, #268]	@ (3400c980 <LL_ATON_Init+0x514>)
3400c874:	e6ce      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c876:	4b43      	ldr	r3, [pc, #268]	@ (3400c984 <LL_ATON_Init+0x518>)
3400c878:	e7e3      	b.n	3400c842 <LL_ATON_Init+0x3d6>
  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c87a:	f002 fba7 	bl	3400efcc <__errno>
3400c87e:	6803      	ldr	r3, [r0, #0]
3400c880:	b1fb      	cbz	r3, 3400c8c2 <LL_ATON_Init+0x456>
3400c882:	f002 fba3 	bl	3400efcc <__errno>
3400c886:	6800      	ldr	r0, [r0, #0]
3400c888:	f002 fb3a 	bl	3400ef00 <strerror>
3400c88c:	4603      	mov	r3, r0
3400c88e:	2201      	movs	r2, #1
3400c890:	f04f 0c02 	mov.w	ip, #2
3400c894:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c898:	221f      	movs	r2, #31
3400c89a:	9204      	str	r2, [sp, #16]
3400c89c:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c8a0:	9203      	str	r2, [sp, #12]
3400c8a2:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c8a6:	9202      	str	r2, [sp, #8]
3400c8a8:	4a3a      	ldr	r2, [pc, #232]	@ (3400c994 <LL_ATON_Init+0x528>)
3400c8aa:	b2e4      	uxtb	r4, r4
3400c8ac:	4931      	ldr	r1, [pc, #196]	@ (3400c974 <LL_ATON_Init+0x508>)
3400c8ae:	9200      	str	r2, [sp, #0]
3400c8b0:	4831      	ldr	r0, [pc, #196]	@ (3400c978 <LL_ATON_Init+0x50c>)
3400c8b2:	22f5      	movs	r2, #245	@ 0xf5
3400c8b4:	9401      	str	r4, [sp, #4]
3400c8b6:	f001 ffed 	bl	3400e894 <iprintf>
3400c8ba:	21f5      	movs	r1, #245	@ 0xf5
3400c8bc:	4b2f      	ldr	r3, [pc, #188]	@ (3400c97c <LL_ATON_Init+0x510>)
3400c8be:	4a30      	ldr	r2, [pc, #192]	@ (3400c980 <LL_ATON_Init+0x514>)
3400c8c0:	e6a8      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c8c2:	4b30      	ldr	r3, [pc, #192]	@ (3400c984 <LL_ATON_Init+0x518>)
3400c8c4:	e7e3      	b.n	3400c88e <LL_ATON_Init+0x422>
  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c8c6:	f002 fb81 	bl	3400efcc <__errno>
3400c8ca:	6803      	ldr	r3, [r0, #0]
3400c8cc:	b1eb      	cbz	r3, 3400c90a <LL_ATON_Init+0x49e>
3400c8ce:	f002 fb7d 	bl	3400efcc <__errno>
3400c8d2:	6800      	ldr	r0, [r0, #0]
3400c8d4:	f002 fb14 	bl	3400ef00 <strerror>
3400c8d8:	4603      	mov	r3, r0
3400c8da:	2201      	movs	r2, #1
3400c8dc:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c8e0:	221e      	movs	r2, #30
3400c8e2:	9204      	str	r2, [sp, #16]
3400c8e4:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c8e8:	9203      	str	r2, [sp, #12]
3400c8ea:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c8ee:	9202      	str	r2, [sp, #8]
3400c8f0:	4a29      	ldr	r2, [pc, #164]	@ (3400c998 <LL_ATON_Init+0x52c>)
3400c8f2:	b2e4      	uxtb	r4, r4
3400c8f4:	491f      	ldr	r1, [pc, #124]	@ (3400c974 <LL_ATON_Init+0x508>)
3400c8f6:	9200      	str	r2, [sp, #0]
3400c8f8:	481f      	ldr	r0, [pc, #124]	@ (3400c978 <LL_ATON_Init+0x50c>)
3400c8fa:	22f7      	movs	r2, #247	@ 0xf7
3400c8fc:	9401      	str	r4, [sp, #4]
3400c8fe:	f001 ffc9 	bl	3400e894 <iprintf>
3400c902:	21f7      	movs	r1, #247	@ 0xf7
3400c904:	4b1d      	ldr	r3, [pc, #116]	@ (3400c97c <LL_ATON_Init+0x510>)
3400c906:	4a1e      	ldr	r2, [pc, #120]	@ (3400c980 <LL_ATON_Init+0x514>)
3400c908:	e684      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c90a:	4b1e      	ldr	r3, [pc, #120]	@ (3400c984 <LL_ATON_Init+0x518>)
3400c90c:	e7e5      	b.n	3400c8da <LL_ATON_Init+0x46e>
  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c90e:	f002 fb5d 	bl	3400efcc <__errno>
3400c912:	6803      	ldr	r3, [r0, #0]
3400c914:	b1f3      	cbz	r3, 3400c954 <LL_ATON_Init+0x4e8>
3400c916:	f002 fb59 	bl	3400efcc <__errno>
3400c91a:	6800      	ldr	r0, [r0, #0]
3400c91c:	f002 faf0 	bl	3400ef00 <strerror>
3400c920:	4603      	mov	r3, r0
3400c922:	2201      	movs	r2, #1
3400c924:	2006      	movs	r0, #6
3400c926:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c92a:	2200      	movs	r2, #0
3400c92c:	9204      	str	r2, [sp, #16]
3400c92e:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c932:	9203      	str	r2, [sp, #12]
3400c934:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c938:	9202      	str	r2, [sp, #8]
3400c93a:	4a18      	ldr	r2, [pc, #96]	@ (3400c99c <LL_ATON_Init+0x530>)
3400c93c:	b2e4      	uxtb	r4, r4
3400c93e:	490d      	ldr	r1, [pc, #52]	@ (3400c974 <LL_ATON_Init+0x508>)
3400c940:	9200      	str	r2, [sp, #0]
3400c942:	480d      	ldr	r0, [pc, #52]	@ (3400c978 <LL_ATON_Init+0x50c>)
3400c944:	22f9      	movs	r2, #249	@ 0xf9
3400c946:	9401      	str	r4, [sp, #4]
3400c948:	f001 ffa4 	bl	3400e894 <iprintf>
3400c94c:	21f9      	movs	r1, #249	@ 0xf9
3400c94e:	4b0b      	ldr	r3, [pc, #44]	@ (3400c97c <LL_ATON_Init+0x510>)
3400c950:	4a0b      	ldr	r2, [pc, #44]	@ (3400c980 <LL_ATON_Init+0x514>)
3400c952:	e65f      	b.n	3400c614 <LL_ATON_Init+0x1a8>
3400c954:	4b0b      	ldr	r3, [pc, #44]	@ (3400c984 <LL_ATON_Init+0x518>)
3400c956:	e7e4      	b.n	3400c922 <LL_ATON_Init+0x4b6>
  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c958:	4b0a      	ldr	r3, [pc, #40]	@ (3400c984 <LL_ATON_Init+0x518>)
3400c95a:	e61f      	b.n	3400c59c <LL_ATON_Init+0x130>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 1);
3400c95c:	2301      	movs	r3, #1

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);

  return 0;
}
3400c95e:	2000      	movs	r0, #0
    ATON_BUSIF_CTRL_SET(i, 1);
3400c960:	6013      	str	r3, [r2, #0]
3400c962:	4a0f      	ldr	r2, [pc, #60]	@ (3400c9a0 <LL_ATON_Init+0x534>)
3400c964:	6013      	str	r3, [r2, #0]
  ATON_INTCTRL_CTRL_SET(0, 1);
3400c966:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
3400c96a:	6013      	str	r3, [r2, #0]
}
3400c96c:	b008      	add	sp, #32
3400c96e:	bd10      	pop	{r4, pc}
3400c970:	34011221 	.word	0x34011221
3400c974:	34011113 	.word	0x34011113
3400c978:	340111a3 	.word	0x340111a3
3400c97c:	3401141d 	.word	0x3401141d
3400c980:	34012434 	.word	0x34012434
3400c984:	3401110e 	.word	0x3401110e
3400c988:	34011227 	.word	0x34011227
3400c98c:	3401122d 	.word	0x3401122d
3400c990:	34011237 	.word	0x34011237
3400c994:	3401123e 	.word	0x3401123e
3400c998:	34011246 	.word	0x34011246
3400c99c:	3401124e 	.word	0x3401124e
3400c9a0:	580e3000 	.word	0x580e3000

3400c9a4 <LL_ATON_DeInit>:
int LL_ATON_DeInit(void)
{
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
3400c9a4:	2000      	movs	r0, #0
3400c9a6:	4b07      	ldr	r3, [pc, #28]	@ (3400c9c4 <LL_ATON_DeInit+0x20>)
3400c9a8:	6018      	str	r0, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 0);
3400c9aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c9ae:	6018      	str	r0, [r3, #0]
3400c9b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c9b4:	6018      	str	r0, [r3, #0]
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
3400c9b6:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
3400c9ba:	6098      	str	r0, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
3400c9bc:	60d8      	str	r0, [r3, #12]
  ATON_CLKCTRL_BGATES_SET(0, 0);
3400c9be:	6118      	str	r0, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
3400c9c0:	6018      	str	r0, [r3, #0]

  return 0;
}
3400c9c2:	4770      	bx	lr
3400c9c4:	580e1000 	.word	0x580e1000

3400c9c8 <LL_ATON_EnableUnits_Init>:
 * @param  n Lenght of the initialization array
 * @retval Error code
 * @todo   Add boundary checks
 */
int LL_ATON_EnableUnits_Init(const LL_ATON_EnableUnits_InitTypeDef *LL_ATON_EnableUnits_InitStruct, int n)
{
3400c9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;

  for (i = 0; i < n; i++)
3400c9ca:	2400      	movs	r4, #0
3400c9cc:	42a1      	cmp	r1, r4
3400c9ce:	f101 0201 	add.w	r2, r1, #1
3400c9d2:	bfb8      	it	lt
3400c9d4:	2201      	movlt	r2, #1
#endif // !POOL_RC14
      break;
#endif
#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_ENABLE(RECBUF, unitId);
3400c9d6:	4d1e      	ldr	r5, [pc, #120]	@ (3400ca50 <LL_ATON_EnableUnits_Init+0x88>)
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
3400c9d8:	4f1e      	ldr	r7, [pc, #120]	@ (3400ca54 <LL_ATON_EnableUnits_Init+0x8c>)
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
3400c9da:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
3400c9dc:	3a01      	subs	r2, #1
3400c9de:	d101      	bne.n	3400c9e4 <LL_ATON_EnableUnits_Init+0x1c>
      break;
    }
  }

  return 0;
}
3400c9e0:	2000      	movs	r0, #0
3400c9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (unitType)
3400c9e4:	f810 1024 	ldrb.w	r1, [r0, r4, lsl #2]
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
3400c9e8:	f836 3024 	ldrh.w	r3, [r6, r4, lsl #2]
    switch (unitType)
3400c9ec:	2908      	cmp	r1, #8
3400c9ee:	d818      	bhi.n	3400ca22 <LL_ATON_EnableUnits_Init+0x5a>
3400c9f0:	e8df f001 	tbb	[pc, r1]
3400c9f4:	190e1705 	.word	0x190e1705
3400c9f8:	1725211d 	.word	0x1725211d
3400c9fc:	29          	.byte	0x29
3400c9fd:	00          	.byte	0x00
      ATON_ENABLE(STRENG, unitId);
3400c9fe:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400ca02:	33e5      	adds	r3, #229	@ 0xe5
      ATON_ENABLE(DECUN, unitId);
3400ca04:	031b      	lsls	r3, r3, #12
3400ca06:	6819      	ldr	r1, [r3, #0]
3400ca08:	f041 0101 	orr.w	r1, r1, #1
3400ca0c:	6019      	str	r1, [r3, #0]
      break;
3400ca0e:	e008      	b.n	3400ca22 <LL_ATON_EnableUnits_Init+0x5a>
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
3400ca10:	f503 21b0 	add.w	r1, r3, #360448	@ 0x58000
3400ca14:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
3400ca18:	31ef      	adds	r1, #239	@ 0xef
3400ca1a:	0309      	lsls	r1, r1, #12
3400ca1c:	f043 0301 	orr.w	r3, r3, #1
3400ca20:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
3400ca22:	3401      	adds	r4, #1
3400ca24:	e7da      	b.n	3400c9dc <LL_ATON_EnableUnits_Init+0x14>
      ATON_ENABLE(DECUN, unitId);
3400ca26:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400ca2a:	33f3      	adds	r3, #243	@ 0xf3
3400ca2c:	e7ea      	b.n	3400ca04 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ACTIV, unitId);
3400ca2e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400ca32:	33f5      	adds	r3, #245	@ 0xf5
3400ca34:	e7e6      	b.n	3400ca04 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ARITH, unitId);
3400ca36:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400ca3a:	33f7      	adds	r3, #247	@ 0xf7
3400ca3c:	e7e2      	b.n	3400ca04 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(POOL, unitId);
3400ca3e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400ca42:	33fb      	adds	r3, #251	@ 0xfb
3400ca44:	e7de      	b.n	3400ca04 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(RECBUF, unitId);
3400ca46:	682b      	ldr	r3, [r5, #0]
3400ca48:	f043 0301 	orr.w	r3, r3, #1
3400ca4c:	602b      	str	r3, [r5, #0]
      break;
3400ca4e:	e7e8      	b.n	3400ca22 <LL_ATON_EnableUnits_Init+0x5a>
3400ca50:	580fd000 	.word	0x580fd000
3400ca54:	34013294 	.word	0x34013294

3400ca58 <LL_Switch_Init_NoReset>:
  unsigned int fnr_mask[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_MASK, ATON_STRSWITCH_DST_FNR1_MASK};

  /* Enable Switch */
  t = ATON_STRSWITCH_CTRL_DT;
  t = ATON_STRSWITCH_CTRL_SET_EN(t, 1);
  ATON_STRSWITCH_CTRL_SET(0, t);
3400ca58:	2301      	movs	r3, #1
3400ca5a:	4a13      	ldr	r2, [pc, #76]	@ (3400caa8 <LL_Switch_Init_NoReset+0x50>)
3400ca5c:	2900      	cmp	r1, #0
{
3400ca5e:	b530      	push	{r4, r5, lr}
  ATON_STRSWITCH_CTRL_SET(0, t);
3400ca60:	6013      	str	r3, [r2, #0]

  for (i = 0; i < n; i++)
3400ca62:	eb01 0203 	add.w	r2, r1, r3
3400ca66:	bfb8      	it	lt
3400ca68:	461a      	movlt	r2, r3
3400ca6a:	3a01      	subs	r2, #1
3400ca6c:	d101      	bne.n	3400ca72 <LL_Switch_Init_NoReset+0x1a>

    ATON_REG_WRITE(reg, t);
  }

  return 0;
}
3400ca6e:	2000      	movs	r0, #0
3400ca70:	bd30      	pop	{r4, r5, pc}
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
3400ca72:	7b84      	ldrb	r4, [r0, #14]
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source1) << link_shift[1]);
3400ca74:	e9d0 5300 	ldrd	r5, r3, [r0]
3400ca78:	045b      	lsls	r3, r3, #17
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400ca7a:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
3400ca7e:	f004 0501 	and.w	r5, r4, #1
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400ca82:	432b      	orrs	r3, r5
    t |= ((LL_Switch_InitStruct[i].frames0 << fnr_shift[0]) & fnr_mask[0]);
3400ca84:	7b05      	ldrb	r5, [r0, #12]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400ca86:	6881      	ldr	r1, [r0, #8]
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400ca88:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
3400ca8c:	7b45      	ldrb	r5, [r0, #13]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400ca8e:	f101 41b0 	add.w	r1, r1, #1476395008	@ 0x58000000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400ca92:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    t |= ((LL_Switch_InitStruct[i].context1 != 0) << en_shift[1]);
3400ca96:	f3c4 0440 	ubfx	r4, r4, #1, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400ca9a:	f501 2164 	add.w	r1, r1, #933888	@ 0xe4000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400ca9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    ATON_REG_WRITE(reg, t);
3400caa2:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
3400caa4:	3010      	adds	r0, #16
3400caa6:	e7e0      	b.n	3400ca6a <LL_Switch_Init_NoReset+0x12>
3400caa8:	580e4000 	.word	0x580e4000

3400caac <LL_Switch_Init>:
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ll_aton_static_checks();
#endif

  /* Clear Configuration */
  ATON_DISABLE_CLR_CONFCLR(STRSWITCH, 0);
3400caac:	2202      	movs	r2, #2
3400caae:	4b06      	ldr	r3, [pc, #24]	@ (3400cac8 <LL_Switch_Init+0x1c>)
3400cab0:	601a      	str	r2, [r3, #0]
3400cab2:	681a      	ldr	r2, [r3, #0]
3400cab4:	0792      	lsls	r2, r2, #30
3400cab6:	d4fc      	bmi.n	3400cab2 <LL_Switch_Init+0x6>
3400cab8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cabc:	601a      	str	r2, [r3, #0]
3400cabe:	681a      	ldr	r2, [r3, #0]
3400cac0:	0052      	lsls	r2, r2, #1
3400cac2:	d4fc      	bmi.n	3400cabe <LL_Switch_Init+0x12>

  return LL_Switch_Init_NoReset(LL_Switch_InitStruct, n);
3400cac4:	f7ff bfc8 	b.w	3400ca58 <LL_Switch_Init_NoReset>
3400cac8:	580e4000 	.word	0x580e4000

3400cacc <LL_Switch_Deinit>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be disconnected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Deinit(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
3400cacc:	b530      	push	{r4, r5, lr}
  int i;
  volatile uint32_t *reg;

  for (i = 0; i < n; i++)
3400cace:	2400      	movs	r4, #0
3400cad0:	42a1      	cmp	r1, r4
3400cad2:	f101 0301 	add.w	r3, r1, #1
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));

    /* Disable contexts */
    ATON_REG_WRITE(reg, 0);
3400cad6:	4625      	mov	r5, r4
3400cad8:	bfb8      	it	lt
3400cada:	2301      	movlt	r3, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400cadc:	3008      	adds	r0, #8
  for (i = 0; i < n; i++)
3400cade:	3b01      	subs	r3, #1
3400cae0:	d101      	bne.n	3400cae6 <LL_Switch_Deinit+0x1a>
  }

  return 0;
}
3400cae2:	2000      	movs	r0, #0
3400cae4:	bd30      	pop	{r4, r5, pc}
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400cae6:	0122      	lsls	r2, r4, #4
3400cae8:	5882      	ldr	r2, [r0, r2]
  for (i = 0; i < n; i++)
3400caea:	3401      	adds	r4, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400caec:	f102 42b0 	add.w	r2, r2, #1476395008	@ 0x58000000
3400caf0:	f502 2264 	add.w	r2, r2, #933888	@ 0xe4000
    ATON_REG_WRITE(reg, 0);
3400caf4:	6015      	str	r5, [r2, #0]
  for (i = 0; i < n; i++)
3400caf6:	e7f2      	b.n	3400cade <LL_Switch_Deinit+0x12>

3400caf8 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
3400caf8:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
3400cafa:	2401      	movs	r4, #1
3400cafc:	2500      	movs	r5, #0
3400cafe:	2301      	movs	r3, #1
3400cb00:	ea54 050d 	orrs.w	r5, r4, sp
3400cb04:	4a03      	ldr	r2, [pc, #12]	@ (3400cb14 <LL_ATON_EnableClock+0x1c>)
3400cb06:	4083      	lsls	r3, r0
3400cb08:	6911      	ldr	r1, [r2, #16]
3400cb0a:	404b      	eors	r3, r1
3400cb0c:	4023      	ands	r3, r4
3400cb0e:	404b      	eors	r3, r1
3400cb10:	6113      	str	r3, [r2, #16]
#endif
}
3400cb12:	bd30      	pop	{r4, r5, pc}
3400cb14:	580e0000 	.word	0x580e0000

3400cb18 <LL_Streng_TensorInit>:
  if (id >= ATON_STRENG_NUM)
3400cb18:	2809      	cmp	r0, #9
{
3400cb1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400cb1e:	4604      	mov	r4, r0
3400cb20:	460d      	mov	r5, r1
3400cb22:	4616      	mov	r6, r2
  if (id >= ATON_STRENG_NUM)
3400cb24:	dd04      	ble.n	3400cb30 <LL_Streng_TensorInit+0x18>
    return LL_ATON_INVALID_ID;
3400cb26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
3400cb2a:	b003      	add	sp, #12
3400cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LL_ATON_EnableClock(ATON_STRENG_CLKB_CLK(id));
3400cb30:	f7ff ffe2 	bl	3400caf8 <LL_ATON_EnableClock>
  if (n != 1)
3400cb34:	2e01      	cmp	r6, #1
3400cb36:	d1f6      	bne.n	3400cb26 <LL_Streng_TensorInit+0xe>
  if (conf->nbits_in > 24 || conf->nbits_out > 24)
3400cb38:	f895 603c 	ldrb.w	r6, [r5, #60]	@ 0x3c
3400cb3c:	2e18      	cmp	r6, #24
3400cb3e:	d8f2      	bhi.n	3400cb26 <LL_Streng_TensorInit+0xe>
3400cb40:	f895 c03d 	ldrb.w	ip, [r5, #61]	@ 0x3d
3400cb44:	f1bc 0f18 	cmp.w	ip, #24
3400cb48:	d8ed      	bhi.n	3400cb26 <LL_Streng_TensorInit+0xe>
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400cb4a:	7828      	ldrb	r0, [r5, #0]
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400cb4c:	f8d5 a038 	ldr.w	sl, [r5, #56]	@ 0x38
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400cb50:	01c2      	lsls	r2, r0, #7
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400cb52:	00c3      	lsls	r3, r0, #3
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400cb54:	f402 7180 	and.w	r1, r2, #256	@ 0x100
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400cb58:	f003 0308 	and.w	r3, r3, #8
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400cb5c:	430b      	orrs	r3, r1
  t = ATON_STRENG_CTRL_SET_RAW_OUT(t, conf->raw_out);
3400cb5e:	f3c0 0180 	ubfx	r1, r0, #2, #1
3400cb62:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  t = ATON_STRENG_CTRL_SET_NOBLK(t, (conf->noblk != 0));
3400cb66:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
3400cb6a:	431a      	orrs	r2, r3
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
3400cb6c:	0843      	lsrs	r3, r0, #1
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400cb6e:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
3400cb72:	f003 0310 	and.w	r3, r3, #16
3400cb76:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400cb78:	424a      	negs	r2, r1
3400cb7a:	414a      	adcs	r2, r1
3400cb7c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
3400cb80:	0102      	lsls	r2, r0, #4
3400cb82:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400cb86:	f8b5 8000 	ldrh.w	r8, [r5]
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
3400cb8a:	0207      	lsls	r7, r0, #8
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
3400cb8c:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
3400cb8e:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
3400cb92:	431f      	orrs	r7, r3
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400cb94:	f408 7310 	and.w	r3, r8, #576	@ 0x240
3400cb98:	f1a3 0e40 	sub.w	lr, r3, #64	@ 0x40
3400cb9c:	f1de 0300 	rsbs	r3, lr, #0
3400cba0:	eb43 030e 	adc.w	r3, r3, lr
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400cba4:	f010 0201 	ands.w	r2, r0, #1
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400cba8:	ea47 37c3 	orr.w	r7, r7, r3, lsl #15
  int nbits_in = conf->nbits_in;
3400cbac:	4631      	mov	r1, r6
  int nbits_out = conf->nbits_out;
3400cbae:	4663      	mov	r3, ip
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400cbb0:	9201      	str	r2, [sp, #4]
3400cbb2:	f000 0940 	and.w	r9, r0, #64	@ 0x40
3400cbb6:	f040 80a9 	bne.w	3400cd0c <LL_Streng_TensorInit+0x1f4>
3400cbba:	4566      	cmp	r6, ip
3400cbbc:	bf8c      	ite	hi
3400cbbe:	2200      	movhi	r2, #0
3400cbc0:	2201      	movls	r2, #1
  switch (io_case)
3400cbc2:	2a03      	cmp	r2, #3
3400cbc4:	f000 80b2 	beq.w	3400cd2c <LL_Streng_TensorInit+0x214>
3400cbc8:	2a01      	cmp	r2, #1
3400cbca:	f000 80aa 	beq.w	3400cd22 <LL_Streng_TensorInit+0x20a>
    nbits_in = nbits_out;
3400cbce:	4661      	mov	r1, ip
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400cbd0:	eba6 020c 	sub.w	r2, r6, ip
    if (conf->mem_lsb)
3400cbd4:	0603      	lsls	r3, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400cbd6:	bf4b      	itete	mi
3400cbd8:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
3400cbda:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400cbdc:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
3400cbe0:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    in_bits[0] = _LL_min(8, nbits_in);
3400cbe4:	2908      	cmp	r1, #8
3400cbe6:	468e      	mov	lr, r1
3400cbe8:	bfa8      	it	ge
3400cbea:	f04f 0e08 	movge.w	lr, #8
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400cbee:	2908      	cmp	r1, #8
3400cbf0:	f340 8099 	ble.w	3400cd26 <LL_Streng_TensorInit+0x20e>
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
3400cbf4:	2910      	cmp	r1, #16
3400cbf6:	bfcb      	itete	gt
3400cbf8:	f1a1 0310 	subgt.w	r3, r1, #16
3400cbfc:	2300      	movle	r3, #0
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400cbfe:	2108      	movgt	r1, #8
3400cc00:	3908      	suble	r1, #8
    if (conf->align_right)
3400cc02:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
3400cc06:	f1b9 0f00 	cmp.w	r9, #0
3400cc0a:	d10b      	bne.n	3400cc24 <LL_Streng_TensorInit+0x10c>
      if (nbits_out > 16)
3400cc0c:	f1bc 0f10 	cmp.w	ip, #16
3400cc10:	f300 80b2 	bgt.w	3400cd78 <LL_Streng_TensorInit+0x260>
      else if (nbits_out > 8)
3400cc14:	f1bc 0f08 	cmp.w	ip, #8
      else if (nbits_in > 8)
3400cc18:	f340 80b2 	ble.w	3400cd80 <LL_Streng_TensorInit+0x268>
3400cc1c:	4673      	mov	r3, lr
        ch_bits[0] = out_bits[1];
3400cc1e:	468e      	mov	lr, r1
        ch_bits[1] = out_bits[0];
3400cc20:	4619      	mov	r1, r3
  int ch_bits[3] = {0, 0, 0};
3400cc22:	465b      	mov	r3, fp
  t = ATON_STRENG_CTRL_SET_SIZE0(t, ch_bits[0]);
3400cc24:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
  ATON_STRENG_CTRL_SET(id, t);
3400cc28:	f504 24b0 	add.w	r4, r4, #360448	@ 0x58000
  t = ATON_STRENG_CTRL_SET_SIZE1(t, ch_bits[1]);
3400cc2c:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
  ATON_STRENG_CTRL_SET(id, t);
3400cc30:	34e5      	adds	r4, #229	@ 0xe5
  t = ATON_STRENG_CTRL_SET_SIZE2(t, ch_bits[2]);
3400cc32:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
  ATON_STRENG_CTRL_SET(id, t);
3400cc36:	0324      	lsls	r4, r4, #12
3400cc38:	6027      	str	r7, [r4, #0]
  ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_ADDR_ADDR(id)), conf->addr_base.i,
3400cc3a:	e9d5 7e01 	ldrd	r7, lr, [r5, #4]
3400cc3e:	eb07 030e 	add.w	r3, r7, lr
3400cc42:	60a3      	str	r3, [r4, #8]
  if (conf->raw)
3400cc44:	0783      	lsls	r3, r0, #30
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400cc46:	6a69      	ldr	r1, [r5, #36]	@ 0x24
  if (conf->raw)
3400cc48:	f140 809d 	bpl.w	3400cd86 <LL_Streng_TensorInit+0x26e>
    if (conf->frame_count)
3400cc4c:	696b      	ldr	r3, [r5, #20]
3400cc4e:	b94b      	cbnz	r3, 3400cc64 <LL_Streng_TensorInit+0x14c>
      t = (LL_Streng_len(conf) * 8) / (conf->dir == 0 ? conf->nbits_in : conf->nbits_out);
3400cc50:	f010 0f01 	tst.w	r0, #1
3400cc54:	bf18      	it	ne
3400cc56:	4666      	movne	r6, ip
    return conf->addr_base.p + conf->offset_limit;
  }

  static inline uint32_t LL_Streng_len(const LL_Streng_TensorInitTypeDef *conf)
  {
    return conf->offset_end - conf->offset_start;
3400cc58:	68eb      	ldr	r3, [r5, #12]
3400cc5a:	eba3 030e 	sub.w	r3, r3, lr
3400cc5e:	00db      	lsls	r3, r3, #3
3400cc60:	fbb3 f3f6 	udiv	r3, r3, r6
  uint32_t t_streng_cid_cache = ATON_STRENG_CID_CACHE_DT;
3400cc64:	2000      	movs	r0, #0
    ATON_STRENG_FSIZE_SET(id, t);
3400cc66:	60e3      	str	r3, [r4, #12]
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
3400cc68:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
3400cc6a:	f36f 010f 	bfc	r1, #0, #16
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
3400cc6e:	6223      	str	r3, [r4, #32]
  ATON_STRENG_FRAME_RPT_SET(id, conf->frame_loop_cnt);
3400cc70:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
3400cc72:	61e3      	str	r3, [r4, #28]
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
3400cc74:	6aab      	ldr	r3, [r5, #40]	@ 0x28
3400cc76:	61a3      	str	r3, [r4, #24]
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
3400cc78:	f041 0306 	orr.w	r3, r1, #6
  ATON_STRENG_LIMITEN_SET(id, t);
3400cc7c:	6323      	str	r3, [r4, #48]	@ 0x30
  if (/*(conf->dir == 0) && */ (conf->offset_limit != 0x0))
3400cc7e:	692b      	ldr	r3, [r5, #16]
3400cc80:	b12b      	cbz	r3, 3400cc8e <LL_Streng_TensorInit+0x176>
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400cc82:	441f      	add	r7, r3
    t = ATON_STRENG_LIMITEN_SET_STOPPREFTC(t, 1);
3400cc84:	f041 0107 	orr.w	r1, r1, #7
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400cc88:	3f01      	subs	r7, #1
    ATON_STRENG_LIMITEN_SET(id, t);
3400cc8a:	6321      	str	r1, [r4, #48]	@ 0x30
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400cc8c:	63a7      	str	r7, [r4, #56]	@ 0x38
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
3400cc8e:	7869      	ldrb	r1, [r5, #1]
  if ((conf->dir == 0) && conf->sync_with_other)
3400cc90:	f028 08fe 	bic.w	r8, r8, #254	@ 0xfe
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
3400cc94:	f3c1 1380 	ubfx	r3, r1, #6, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
3400cc98:	f3c1 1640 	ubfx	r6, r1, #5, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
3400cc9c:	011b      	lsls	r3, r3, #4
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400cc9e:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CID(t_streng_cid_cache, conf->bus_cid);
3400cca2:	f3c1 0682 	ubfx	r6, r1, #2, #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400cca6:	4333      	orrs	r3, r6
3400cca8:	78ae      	ldrb	r6, [r5, #2]
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_PFETCH(t_streng_cid_cache, conf->bus_pfetch);
3400ccaa:	09c9      	lsrs	r1, r1, #7
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400ccac:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  if ((conf->dir == 0) && conf->sync_with_other)
3400ccb0:	ea4f 58c8 	mov.w	r8, r8, lsl #23
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400ccb4:	f006 0103 	and.w	r1, r6, #3
3400ccb8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
  if ((conf->dir == 0) && conf->sync_with_other)
3400ccbc:	ea4f 58d8 	mov.w	r8, r8, lsr #23
  if (conf->dir == 1)
3400ccc0:	9901      	ldr	r1, [sp, #4]
  ATON_STRENG_LIMIT_SET(id, conf->frame_tot_cnt);
3400ccc2:	f8c4 a034 	str.w	sl, [r4, #52]	@ 0x34
  if ((conf->dir == 0) && conf->sync_with_other)
3400ccc6:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400ccca:	ea43 0300 	orr.w	r3, r3, r0
  if (conf->dir == 1)
3400ccce:	ea4f 40c1 	mov.w	r0, r1, lsl #19
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400ccd2:	bf09      	itett	eq
3400ccd4:	78e9      	ldrbeq	r1, [r5, #3]
  t = ATON_STRENG_EVENT_SET_EN_ILLCFG(t, 1); // Enable Illegal Configuration interrupt
3400ccd6:	f440 1180 	orrne.w	r1, r0, #1048576	@ 0x100000
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400ccda:	0609      	lsleq	r1, r1, #24
3400ccdc:	f001 51f8 	andeq.w	r1, r1, #520093696	@ 0x1f000000
3400cce0:	bf08      	it	eq
3400cce2:	4301      	orreq	r1, r0
  ATON_STRENG_POS_SET(id, t);
3400cce4:	f04f 0024 	mov.w	r0, #36	@ 0x24
3400cce8:	6260      	str	r0, [r4, #36]	@ 0x24
  ATON_STRENG_STRD_SET(id, t_streng_strd);
3400ccea:	6162      	str	r2, [r4, #20]
  ATON_STRENG_CID_CACHE_SET(id, t_streng_cid_cache);
3400ccec:	64a3      	str	r3, [r4, #72]	@ 0x48
  t = ATON_STRENG_ENCR_MSB_SET_EN(t, conf->cipher_en);
3400ccee:	f3c6 0380 	ubfx	r3, r6, #2, #1
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
3400ccf2:	f3c6 06c0 	ubfx	r6, r6, #3, #1
3400ccf6:	ea4f 3686 	mov.w	r6, r6, lsl #14
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400ccfa:	bf08      	it	eq
3400ccfc:	f441 0110 	orreq.w	r1, r1, #9437184	@ 0x900000
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
3400cd00:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  ATON_STRENG_EVENT_SET(id, t_streng_event);
3400cd04:	62a1      	str	r1, [r4, #40]	@ 0x28
  return 0;
3400cd06:	2000      	movs	r0, #0
  ATON_STRENG_ENCR_MSB_SET(id, t);
3400cd08:	6466      	str	r6, [r4, #68]	@ 0x44
  return 0;
3400cd0a:	e70e      	b.n	3400cb2a <LL_Streng_TensorInit+0x12>
  int io_case = ((conf->dir != 0) << 1);
3400cd0c:	0042      	lsls	r2, r0, #1
3400cd0e:	f002 0202 	and.w	r2, r2, #2
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400cd12:	4566      	cmp	r6, ip
3400cd14:	ea52 9222 			@ <UNDEFINED> instruction: 0xea529222
  switch (io_case)
3400cd18:	2a02      	cmp	r2, #2
3400cd1a:	f47f af52 	bne.w	3400cbc2 <LL_Streng_TensorInit+0xaa>
3400cd1e:	2200      	movs	r2, #0
3400cd20:	e00f      	b.n	3400cd42 <LL_Streng_TensorInit+0x22a>
3400cd22:	2200      	movs	r2, #0
3400cd24:	e75e      	b.n	3400cbe4 <LL_Streng_TensorInit+0xcc>
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400cd26:	2100      	movs	r1, #0
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
3400cd28:	460b      	mov	r3, r1
3400cd2a:	e76a      	b.n	3400cc02 <LL_Streng_TensorInit+0xea>
    nbits_out = nbits_in;
3400cd2c:	4633      	mov	r3, r6
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400cd2e:	ebac 0206 	sub.w	r2, ip, r6
    if (conf->mem_lsb)
3400cd32:	0601      	lsls	r1, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400cd34:	bf4b      	itete	mi
3400cd36:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
3400cd38:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400cd3a:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
3400cd3e:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    out_bits[0] = _LL_min(8, nbits_out);
3400cd42:	2b08      	cmp	r3, #8
3400cd44:	469e      	mov	lr, r3
3400cd46:	bfa8      	it	ge
3400cd48:	f04f 0e08 	movge.w	lr, #8
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400cd4c:	2b08      	cmp	r3, #8
3400cd4e:	dd10      	ble.n	3400cd72 <LL_Streng_TensorInit+0x25a>
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400cd50:	2b10      	cmp	r3, #16
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400cd52:	bfd5      	itete	le
3400cd54:	f1a3 0108 	suble.w	r1, r3, #8
3400cd58:	2108      	movgt	r1, #8
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400cd5a:	2300      	movle	r3, #0
3400cd5c:	3b10      	subgt	r3, #16
    if (conf->align_right)
3400cd5e:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
3400cd62:	f1b9 0f00 	cmp.w	r9, #0
3400cd66:	f47f af5d 	bne.w	3400cc24 <LL_Streng_TensorInit+0x10c>
      if (nbits_in > 16)
3400cd6a:	2e10      	cmp	r6, #16
3400cd6c:	dc04      	bgt.n	3400cd78 <LL_Streng_TensorInit+0x260>
      else if (nbits_in > 8)
3400cd6e:	2e08      	cmp	r6, #8
3400cd70:	e752      	b.n	3400cc18 <LL_Streng_TensorInit+0x100>
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400cd72:	2100      	movs	r1, #0
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400cd74:	460b      	mov	r3, r1
3400cd76:	e7f2      	b.n	3400cd5e <LL_Streng_TensorInit+0x246>
3400cd78:	46f1      	mov	r9, lr
        ch_bits[0] = out_bits[2];
3400cd7a:	469e      	mov	lr, r3
        ch_bits[2] = out_bits[0];
3400cd7c:	464b      	mov	r3, r9
3400cd7e:	e751      	b.n	3400cc24 <LL_Streng_TensorInit+0x10c>
  int ch_bits[3] = {0, 0, 0};
3400cd80:	465b      	mov	r3, fp
3400cd82:	4659      	mov	r1, fp
3400cd84:	e74e      	b.n	3400cc24 <LL_Streng_TensorInit+0x10c>
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
3400cd86:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
    t = ATON_STRENG_FSIZE_SET_WIDTH(t, conf->fwidth);
3400cd8a:	b2b0      	uxth	r0, r6
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400cd8c:	434e      	muls	r6, r1
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
3400cd8e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400cd92:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
    ATON_STRENG_FSIZE_SET(id, t);
3400cd94:	60e3      	str	r3, [r4, #12]
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400cd96:	2800      	cmp	r0, #0
3400cd98:	bf08      	it	eq
3400cd9a:	4630      	moveq	r0, r6
    t_streng_strd = ATON_STRENG_STRD_SET_LOFF(t_streng_strd, line_offset);
3400cd9c:	b283      	uxth	r3, r0
3400cd9e:	431a      	orrs	r2, r3
    t = ATON_STRENG_DEPTH_SET_SIZE(t, conf->batch_depth);
3400cda0:	8c2b      	ldrh	r3, [r5, #32]
    t = ATON_STRENG_CID_CACHE_SET_LOFF_MSB(t, (line_offset >> ATON_STRENG_STRD_LOFF_W));
3400cda2:	f36f 000f 	bfc	r0, #0, #16
    t = ATON_STRENG_DEPTH_SET_OFFSET(t, conf->batch_offset);
3400cda6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ATON_STRENG_DEPTH_SET(id, t);
3400cdaa:	6123      	str	r3, [r4, #16]
3400cdac:	e75c      	b.n	3400cc68 <LL_Streng_TensorInit+0x150>
	...

3400cdb0 <LL_Convacc_Init>:
  if (id >= ATON_CONVACC_NUM)
3400cdb0:	2803      	cmp	r0, #3
{
3400cdb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400cdb6:	4606      	mov	r6, r0
3400cdb8:	460c      	mov	r4, r1
  if (id >= ATON_CONVACC_NUM)
3400cdba:	f300 814e 	bgt.w	3400d05a <LL_Convacc_Init+0x2aa>
  LL_ATON_EnableClock(ATON_CONVACC_CLKB_CLK(id));
3400cdbe:	300a      	adds	r0, #10
3400cdc0:	f7ff fe9a 	bl	3400caf8 <LL_ATON_EnableClock>
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
3400cdc4:	78a5      	ldrb	r5, [r4, #2]
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
3400cdc6:	7862      	ldrb	r2, [r4, #1]
  t = ATON_CONVACC_CTRL_SET_KT1(t, (conf->kt1_mode != 0));
3400cdc8:	f005 0308 	and.w	r3, r5, #8
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
3400cdcc:	f3c2 1101 	ubfx	r1, r2, #4, #2
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cdd0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
3400cdd4:	78e1      	ldrb	r1, [r4, #3]
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
3400cdd6:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
3400cdda:	f001 0103 	and.w	r1, r1, #3
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cdde:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
  t = ATON_CONVACC_CTRL_SET_FUNSIGNED(t, conf->f_unsigned);
3400cde2:	f3c5 1180 	ubfx	r1, r5, #6, #1
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cde6:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
3400cdea:	09e9      	lsrs	r1, r5, #7
3400cdec:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  t = ATON_CONVACC_CTRL_SET_NOSUM(t, (conf->accumulate == 0));
3400cdf0:	f3c2 1180 	ubfx	r1, r2, #6, #1
3400cdf4:	f081 0101 	eor.w	r1, r1, #1
3400cdf8:	b2c9      	uxtb	r1, r1
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400cdfa:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  t = ATON_CONVACC_CTRL_SET_NO1SUM(t, (conf->accumulate_first == 0));
3400cdfe:	f082 0180 	eor.w	r1, r2, #128	@ 0x80
3400ce02:	09c9      	lsrs	r1, r1, #7
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400ce04:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
3400ce08:	02a9      	lsls	r1, r5, #10
3400ce0a:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400ce0e:	430b      	orrs	r3, r1
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
3400ce10:	0201      	lsls	r1, r0, #8
3400ce12:	f401 7140 	and.w	r1, r1, #768	@ 0x300
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400ce16:	430b      	orrs	r3, r1
  t = ATON_CONVACC_CTRL_SET_FSTAT(t, (conf->fstat != 0));
3400ce18:	05e9      	lsls	r1, r5, #23
3400ce1a:	f001 7180 	and.w	r1, r1, #16777216	@ 0x1000000
3400ce1e:	4319      	orrs	r1, r3
  t = ATON_CONVACC_CTRL_SET_DEEPMODE(t, (conf->deepmode != 0));
3400ce20:	062b      	lsls	r3, r5, #24
3400ce22:	f003 5780 	and.w	r7, r3, #268435456	@ 0x10000000
3400ce26:	4339      	orrs	r1, r7
  if ((conf->fstat != 0) && (conf->deepmode != 0))
3400ce28:	f005 0712 	and.w	r7, r5, #18
3400ce2c:	2f12      	cmp	r7, #18
3400ce2e:	f000 8117 	beq.w	3400d060 <LL_Convacc_Init+0x2b0>
  t = ATON_CONVACC_CTRL_SET_DSS2MODE(t, (conf->dss2mode != 0));
3400ce32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
3400ce36:	430b      	orrs	r3, r1
  if ((conf->fstat != 0) && (conf->dss2mode != 0))
3400ce38:	f005 0122 	and.w	r1, r5, #34	@ 0x22
3400ce3c:	2922      	cmp	r1, #34	@ 0x22
3400ce3e:	f000 810f 	beq.w	3400d060 <LL_Convacc_Init+0x2b0>
  if ((conf->dss2mode != 0) && (conf->deepmode != 0))
3400ce42:	f005 0130 	and.w	r1, r5, #48	@ 0x30
3400ce46:	2930      	cmp	r1, #48	@ 0x30
3400ce48:	f000 810a 	beq.w	3400d060 <LL_Convacc_Init+0x2b0>
  ATON_CONVACC_CTRL_SET(id, t);
3400ce4c:	f506 21b0 	add.w	r1, r6, #360448	@ 0x58000
  Conv_ctrl_bits[id] = t;
3400ce50:	4f85      	ldr	r7, [pc, #532]	@ (3400d068 <LL_Convacc_Init+0x2b8>)
  ATON_CONVACC_CTRL_SET(id, t);
3400ce52:	31ef      	adds	r1, #239	@ 0xef
3400ce54:	0309      	lsls	r1, r1, #12
3400ce56:	600b      	str	r3, [r1, #0]
  Conv_ctrl_bits[id] = t;
3400ce58:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
  if (conf->afilt_mode != AFILT_MODE_NONE)
3400ce5c:	b150      	cbz	r0, 3400ce74 <LL_Convacc_Init+0xc4>
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400ce5e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
    t = ATON_CONVACC_AFILT_SET_FIRST(t, conf->afilt_first);
3400ce62:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400ce66:	041b      	lsls	r3, r3, #16
3400ce68:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    t = ATON_CONVACC_AFILT_SET_TOT(t, conf->afilt_tot);
3400ce6c:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400ce70:	4303      	orrs	r3, r0
    ATON_CONVACC_AFILT_SET(id, t);
3400ce72:	624b      	str	r3, [r1, #36]	@ 0x24
  if (conf->kfilt_tot > 0)
3400ce74:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
3400ce78:	b140      	cbz	r0, 3400ce8c <LL_Convacc_Init+0xdc>
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
3400ce7a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
    t = ATON_CONVACC_KFILT_SET_FIRST(t, conf->kfilt_first);
3400ce7e:	f894 602f 	ldrb.w	r6, [r4, #47]	@ 0x2f
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
3400ce82:	041b      	lsls	r3, r3, #16
3400ce84:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
3400ce88:	4303      	orrs	r3, r0
    ATON_CONVACC_KFILT_SET(id, t);
3400ce8a:	620b      	str	r3, [r1, #32]
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ce8c:	7923      	ldrb	r3, [r4, #4]
  t = ATON_CONVACC_DFORMAT_SET_ROUND(t, conf->rounding_o);
3400ce8e:	7826      	ldrb	r6, [r4, #0]
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ce90:	3310      	adds	r3, #16
  t = ATON_CONVACC_DFORMAT_SET_SAT(t, conf->saturation_o);
3400ce92:	02b0      	lsls	r0, r6, #10
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ce94:	061b      	lsls	r3, r3, #24
3400ce96:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
3400ce9a:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
3400ce9e:	4318      	orrs	r0, r3
3400cea0:	f002 0303 	and.w	r3, r2, #3
3400cea4:	ea40 3083 	orr.w	r0, r0, r3, lsl #14
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
3400cea8:	f3c6 1301 	ubfx	r3, r6, #4, #2
  t = ATON_CONVACC_DFORMAT_SET_FROUND(t, conf->rounding_f);
3400ceac:	f006 0701 	and.w	r7, r6, #1
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
3400ceb0:	059b      	lsls	r3, r3, #22
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ceb2:	ea43 7387 	orr.w	r3, r3, r7, lsl #30
  t = ATON_CONVACC_DFORMAT_SET_FSAT(t, conf->saturation_f);
3400ceb6:	f3c6 0740 	ubfx	r7, r6, #1, #1
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ceba:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
  t = ATON_CONVACC_DFORMAT_SET_FRNDMODE(t, conf->round_mode_f);
3400cebe:	f3c6 0681 	ubfx	r6, r6, #2, #2
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400cec2:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
3400cec6:	4303      	orrs	r3, r0
  t = ATON_CONVACC_DFORMAT_SET_OBYTES(t, conf->outbytes_o);
3400cec8:	f3c2 0281 	ubfx	r2, r2, #2, #2
3400cecc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
3400ced0:	79a2      	ldrb	r2, [r4, #6]
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
3400ced2:	f3c5 0080 	ubfx	r0, r5, #2, #1
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
3400ced6:	0212      	lsls	r2, r2, #8
3400ced8:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
3400cedc:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
3400cee0:	4313      	orrs	r3, r2
3400cee2:	7962      	ldrb	r2, [r4, #5]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cee4:	8aa0      	ldrh	r0, [r4, #20]
  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
3400cee6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
3400ceea:	4313      	orrs	r3, r2
  ATON_CONVACC_DFORMAT_SET(id, t);
3400ceec:	610b      	str	r3, [r1, #16]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400ceee:	68a3      	ldr	r3, [r4, #8]
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
3400cef0:	68e2      	ldr	r2, [r4, #12]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cef2:	4343      	muls	r3, r0
3400cef4:	b29b      	uxth	r3, r3
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
3400cef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  ATON_CONVACC_FFORMAT_SET(id, t);
3400cefa:	614b      	str	r3, [r1, #20]
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cefc:	8a27      	ldrh	r7, [r4, #16]
  t = ATON_CONVACC_KFORMAT_SET_BTCDEPTH(t, conf->batchDepth);
3400cefe:	0403      	lsls	r3, r0, #16
3400cf00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  t = ATON_CONVACC_KFORMAT_SET_HEIGHT(t, conf->kernelHeight);
3400cf04:	7c62      	ldrb	r2, [r4, #17]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cf06:	f8b4 801c 	ldrh.w	r8, [r4, #28]
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cf0a:	433b      	orrs	r3, r7
3400cf0c:	7ca7      	ldrb	r7, [r4, #18]
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cf0e:	f8b4 a01e 	ldrh.w	sl, [r4, #30]
  t = ATON_CONVACC_KFORMAT_SET_WIDTH(t, conf->kernelWidth);
3400cf12:	7c26      	ldrb	r6, [r4, #16]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cf14:	4590      	cmp	r8, r2
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cf16:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
3400cf1a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cf1e:	f102 37ff 	add.w	r7, r2, #4294967295	@ 0xffffffff
3400cf22:	bf2c      	ite	cs
3400cf24:	46bc      	movcs	ip, r7
3400cf26:	46c4      	movcc	ip, r8
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cf28:	4552      	cmp	r2, sl
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
3400cf2a:	8b62      	ldrh	r2, [r4, #26]
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cf2c:	bf88      	it	hi
3400cf2e:	4657      	movhi	r7, sl
  ATON_CONVACC_KFORMAT_SET(id, t);
3400cf30:	608b      	str	r3, [r1, #8]
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
3400cf32:	45b1      	cmp	r9, r6
3400cf34:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
3400cf38:	bf2c      	ite	cs
3400cf3a:	469e      	movcs	lr, r3
3400cf3c:	46ce      	movcc	lr, r9
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
3400cf3e:	4296      	cmp	r6, r2
3400cf40:	bf88      	it	hi
3400cf42:	4613      	movhi	r3, r2
  if (conf->deepmode != 0)
3400cf44:	06ee      	lsls	r6, r5, #27
3400cf46:	f100 8083 	bmi.w	3400d050 <LL_Convacc_Init+0x2a0>
  p_top = (p_top <= 2 ? p_top : 2);
3400cf4a:	f1bc 0f02 	cmp.w	ip, #2
3400cf4e:	bfa8      	it	ge
3400cf50:	f04f 0c02 	movge.w	ip, #2
  p_bot = (p_bot <= 2 ? p_bot : 2);
3400cf54:	2f02      	cmp	r7, #2
3400cf56:	bfa8      	it	ge
3400cf58:	2702      	movge	r7, #2
  p_left = (p_left <= 2 ? p_left : 2);
3400cf5a:	f1be 0f02 	cmp.w	lr, #2
3400cf5e:	bfa8      	it	ge
3400cf60:	f04f 0e02 	movge.w	lr, #2
  p_right = (p_right <= 2 ? p_right : 2);
3400cf64:	2b02      	cmp	r3, #2
3400cf66:	bfa8      	it	ge
3400cf68:	2302      	movge	r3, #2
  if (conf->dss2mode != 0)
3400cf6a:	06ae      	lsls	r6, r5, #26
    p_top = p_bot = p_left = p_right = 0;
3400cf6c:	bf48      	it	mi
3400cf6e:	2300      	movmi	r3, #0
  if (conf->zfbias != 0)
3400cf70:	f9b4 6038 	ldrsh.w	r6, [r4, #56]	@ 0x38
    p_top = p_bot = p_left = p_right = 0;
3400cf74:	bf42      	ittt	mi
3400cf76:	469e      	movmi	lr, r3
3400cf78:	461f      	movmi	r7, r3
3400cf7a:	469c      	movmi	ip, r3
  if (conf->zfbias != 0)
3400cf7c:	b11e      	cbz	r6, 3400cf86 <LL_Convacc_Init+0x1d6>
    p_top = p_bot = p_left = p_right = 0;
3400cf7e:	2300      	movs	r3, #0
3400cf80:	469e      	mov	lr, r3
3400cf82:	461f      	mov	r7, r3
3400cf84:	469c      	mov	ip, r3
  int z_left = (conf->left_padding - p_left);
3400cf86:	eba9 090e 	sub.w	r9, r9, lr
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cf8a:	fb00 f909 	mul.w	r9, r0, r9
  int z_right = (conf->right_padding - p_right);
3400cf8e:	1ad2      	subs	r2, r2, r3
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cf90:	4342      	muls	r2, r0
  int z_top = (conf->top_padding - p_top);
3400cf92:	eba8 080c 	sub.w	r8, r8, ip
  t = ATON_CONVACC_ZFRAME_SET_TOP(t, z_top);
3400cf96:	ea4f 4808 	mov.w	r8, r8, lsl #16
3400cf9a:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cf9e:	fa5f f989 	uxtb.w	r9, r9
  int z_bot = (conf->bot_padding - p_bot);
3400cfa2:	ebaa 0a07 	sub.w	sl, sl, r7
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cfa6:	ea48 0809 	orr.w	r8, r8, r9
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cfaa:	0212      	lsls	r2, r2, #8
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cfac:	ea48 680a 	orr.w	r8, r8, sl, lsl #24
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cfb0:	b292      	uxth	r2, r2
3400cfb2:	ea42 0208 	orr.w	r2, r2, r8
  ATON_CONVACC_ZFRAME_SET(id, t);
3400cfb6:	628a      	str	r2, [r1, #40]	@ 0x28
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
3400cfb8:	7da2      	ldrb	r2, [r4, #22]
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
3400cfba:	009b      	lsls	r3, r3, #2
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
3400cfbc:	0212      	lsls	r2, r2, #8
3400cfbe:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
3400cfc2:	f003 030c 	and.w	r3, r3, #12
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cfc6:	4313      	orrs	r3, r2
  t = ATON_CONVACC_SAMPLE_SET_LPAD(t, p_left);
3400cfc8:	f00e 0e03 	and.w	lr, lr, #3
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cfcc:	7de2      	ldrb	r2, [r4, #23]
  t = ATON_CONVACC_SAMPLE_SET_TPAD(t, p_top);
3400cfce:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
3400cfd2:	f00c 0c30 	and.w	ip, ip, #48	@ 0x30
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cfd6:	ea43 030e 	orr.w	r3, r3, lr
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
3400cfda:	01bf      	lsls	r7, r7, #6
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cfdc:	ea43 030c 	orr.w	r3, r3, ip
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
3400cfe0:	b2ff      	uxtb	r7, r7
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cfe2:	0312      	lsls	r2, r2, #12
3400cfe4:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
3400cfe8:	433b      	orrs	r3, r7
3400cfea:	4313      	orrs	r3, r2
  if (conf->fstat != 0)
3400cfec:	07aa      	lsls	r2, r5, #30
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
3400cfee:	bf48      	it	mi
3400cff0:	8d22      	ldrhmi	r2, [r4, #40]	@ 0x28
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
3400cff2:	4f1e      	ldr	r7, [pc, #120]	@ (3400d06c <LL_Convacc_Init+0x2bc>)
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
3400cff4:	bf48      	it	mi
3400cff6:	ea43 4302 	orrmi.w	r3, r3, r2, lsl #16
  if (conf->left_crop > 0)
3400cffa:	8c22      	ldrh	r2, [r4, #32]
  ATON_CONVACC_SAMPLE_SET(id, t);
3400cffc:	60cb      	str	r3, [r1, #12]
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
3400cffe:	fb00 f302 	mul.w	r3, r0, r2
3400d002:	ea6f 4303 	mvn.w	r3, r3, lsl #16
3400d006:	2a00      	cmp	r2, #0
3400d008:	ea6f 4313 	mvn.w	r3, r3, lsr #16
3400d00c:	bf08      	it	eq
3400d00e:	463b      	moveq	r3, r7
  if (conf->right_crop > 0)
3400d010:	f8b4 c022 	ldrh.w	ip, [r4, #34]	@ 0x22
    t = ATON_CONVACC_FHCROP_SET_RIGHT(t, conf->right_crop * conf->batchDepth + (conf->batchDepth - 1));
3400d014:	1e45      	subs	r5, r0, #1
3400d016:	fb00 500c 	mla	r0, r0, ip, r5
3400d01a:	b29a      	uxth	r2, r3
3400d01c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
3400d020:	f1bc 0f00 	cmp.w	ip, #0
3400d024:	bf18      	it	ne
3400d026:	4613      	movne	r3, r2
  if (conf->bot_crop > 0)
3400d028:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
  if (conf->top_crop > 0)
3400d02a:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
3400d02c:	2800      	cmp	r0, #0
3400d02e:	ea42 0207 	orr.w	r2, r2, r7
  ATON_CONVACC_FHCROP_SET(id, t);
3400d032:	618b      	str	r3, [r1, #24]
    t = ATON_CONVACC_FVCROP_SET_BOTTOM(t, conf->bot_crop);
3400d034:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
3400d036:	bf08      	it	eq
3400d038:	4613      	moveq	r3, r2
  ATON_CONVACC_FVCROP_SET(id, t);
3400d03a:	61cb      	str	r3, [r1, #28]
  if (conf->fsub != 0)
3400d03c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400d03e:	b113      	cbz	r3, 3400d046 <LL_Convacc_Init+0x296>
    t = ATON_CONVACC_FSUB_SET_FSUB(t, conf->fsub);
3400d040:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    ATON_CONVACC_FSUB_SET(id, t);
3400d044:	630b      	str	r3, [r1, #48]	@ 0x30
  return 0;
3400d046:	2000      	movs	r0, #0
    t = ATON_CONVACC_ZFBIAS_SET_ZFBIAS(t, conf->zfbias);
3400d048:	b2b6      	uxth	r6, r6
  ATON_CONVACC_ZFBIAS_SET(id, t);
3400d04a:	634e      	str	r6, [r1, #52]	@ 0x34
}
3400d04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_top = p_bot = p_left = p_right = 0;
3400d050:	2300      	movs	r3, #0
3400d052:	469e      	mov	lr, r3
3400d054:	461f      	mov	r7, r3
3400d056:	469c      	mov	ip, r3
3400d058:	e787      	b.n	3400cf6a <LL_Convacc_Init+0x1ba>
    return LL_ATON_INVALID_ID;
3400d05a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400d05e:	e7f5      	b.n	3400d04c <LL_Convacc_Init+0x29c>
    return LL_ATON_INVALID_PARAM;
3400d060:	f06f 0001 	mvn.w	r0, #1
3400d064:	e7f2      	b.n	3400d04c <LL_Convacc_Init+0x29c>
3400d066:	bf00      	nop
3400d068:	34013294 	.word	0x34013294
3400d06c:	ffff0000 	.word	0xffff0000

3400d070 <LL_EpochCtrl_Init>:
  if (id >= ATON_EPOCHCTRL_NUM)
3400d070:	2800      	cmp	r0, #0
{
3400d072:	b510      	push	{r4, lr}
3400d074:	460c      	mov	r4, r1
  if (id >= ATON_EPOCHCTRL_NUM)
3400d076:	dc0e      	bgt.n	3400d096 <LL_EpochCtrl_Init+0x26>
  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
3400d078:	3019      	adds	r0, #25
3400d07a:	f7ff fd3d 	bl	3400caf8 <LL_ATON_EnableClock>
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400d07e:	7923      	ldrb	r3, [r4, #4]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400d080:	4a08      	ldr	r2, [pc, #32]	@ (3400d0a4 <LL_EpochCtrl_Init+0x34>)
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400d082:	f003 0301 	and.w	r3, r3, #1
3400d086:	00db      	lsls	r3, r3, #3
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400d088:	6013      	str	r3, [r2, #0]
  if (conf->blobaddr & 0x7)
3400d08a:	6823      	ldr	r3, [r4, #0]
3400d08c:	f013 0007 	ands.w	r0, r3, #7
3400d090:	d104      	bne.n	3400d09c <LL_EpochCtrl_Init+0x2c>
  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
3400d092:	6093      	str	r3, [r2, #8]
}
3400d094:	bd10      	pop	{r4, pc}
    return LL_ATON_INVALID_ID;
3400d096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400d09a:	e7fb      	b.n	3400d094 <LL_EpochCtrl_Init+0x24>
    return LL_ATON_INVALID_PARAM;
3400d09c:	f06f 0001 	mvn.w	r0, #1
3400d0a0:	e7f8      	b.n	3400d094 <LL_EpochCtrl_Init+0x24>
3400d0a2:	bf00      	nop
3400d0a4:	580fe000 	.word	0x580fe000

3400d0a8 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
3400d0a8:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
3400d0aa:	2401      	movs	r4, #1
3400d0ac:	2500      	movs	r5, #0
3400d0ae:	ea54 050d 	orrs.w	r5, r4, sp
3400d0b2:	4a03      	ldr	r2, [pc, #12]	@ (3400d0c0 <LL_ATON_DisableClock+0x18>)
3400d0b4:	6913      	ldr	r3, [r2, #16]
3400d0b6:	ea23 0304 	bic.w	r3, r3, r4
3400d0ba:	6113      	str	r3, [r2, #16]
#endif
}
3400d0bc:	bd30      	pop	{r4, r5, pc}
3400d0be:	bf00      	nop
3400d0c0:	580e0000 	.word	0x580e0000

3400d0c4 <LL_ATON_DisableUnits_Init>:
{
3400d0c4:	b570      	push	{r4, r5, r6, lr}
3400d0c6:	4605      	mov	r5, r0
  for (i = 0; i < n; i++)
3400d0c8:	2400      	movs	r4, #0
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
3400d0ca:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
3400d0cc:	428c      	cmp	r4, r1
3400d0ce:	db01      	blt.n	3400d0d4 <LL_ATON_DisableUnits_Init+0x10>
  return LL_ATON_OK;
3400d0d0:	2000      	movs	r0, #0
}
3400d0d2:	bd70      	pop	{r4, r5, r6, pc}
    switch (unitType)
3400d0d4:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
3400d0d8:	f836 0024 	ldrh.w	r0, [r6, r4, lsl #2]
    switch (unitType)
3400d0dc:	2b08      	cmp	r3, #8
3400d0de:	d87a      	bhi.n	3400d1d6 <LL_ATON_DisableUnits_Init+0x112>
3400d0e0:	e8df f003 	tbb	[pc, r3]
3400d0e4:	29187905 	.word	0x29187905
3400d0e8:	795b4a3a 	.word	0x795b4a3a
3400d0ec:	6b          	.byte	0x6b
3400d0ed:	00          	.byte	0x00
      ATON_DISABLE_CLR_CONFCLR(STRENG, unitId);
3400d0ee:	2202      	movs	r2, #2
3400d0f0:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400d0f4:	33e5      	adds	r3, #229	@ 0xe5
3400d0f6:	031b      	lsls	r3, r3, #12
3400d0f8:	601a      	str	r2, [r3, #0]
3400d0fa:	681a      	ldr	r2, [r3, #0]
3400d0fc:	0792      	lsls	r2, r2, #30
3400d0fe:	d4fc      	bmi.n	3400d0fa <LL_ATON_DisableUnits_Init+0x36>
3400d100:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d104:	601a      	str	r2, [r3, #0]
3400d106:	681a      	ldr	r2, [r3, #0]
3400d108:	0052      	lsls	r2, r2, #1
3400d10a:	d4fc      	bmi.n	3400d106 <LL_ATON_DisableUnits_Init+0x42>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
3400d10c:	f7ff ffcc 	bl	3400d0a8 <LL_ATON_DisableClock>
  for (i = 0; i < n; i++)
3400d110:	3401      	adds	r4, #1
3400d112:	e7db      	b.n	3400d0cc <LL_ATON_DisableUnits_Init+0x8>
      ATON_DISABLE_CLR_CONFCLR(CONVACC, unitId);
3400d114:	2202      	movs	r2, #2
3400d116:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400d11a:	33ef      	adds	r3, #239	@ 0xef
3400d11c:	031b      	lsls	r3, r3, #12
3400d11e:	601a      	str	r2, [r3, #0]
3400d120:	681a      	ldr	r2, [r3, #0]
3400d122:	0792      	lsls	r2, r2, #30
3400d124:	d4fc      	bmi.n	3400d120 <LL_ATON_DisableUnits_Init+0x5c>
3400d126:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d12a:	601a      	str	r2, [r3, #0]
3400d12c:	681a      	ldr	r2, [r3, #0]
3400d12e:	0052      	lsls	r2, r2, #1
3400d130:	d4fc      	bmi.n	3400d12c <LL_ATON_DisableUnits_Init+0x68>
      LL_ATON_DisableClock(ATON_CONVACC_CLKB_CLK(unitId));
3400d132:	300a      	adds	r0, #10
3400d134:	e7ea      	b.n	3400d10c <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(DECUN, unitId);
3400d136:	2202      	movs	r2, #2
3400d138:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400d13c:	33f3      	adds	r3, #243	@ 0xf3
3400d13e:	031b      	lsls	r3, r3, #12
3400d140:	601a      	str	r2, [r3, #0]
3400d142:	681a      	ldr	r2, [r3, #0]
3400d144:	0792      	lsls	r2, r2, #30
3400d146:	d4fc      	bmi.n	3400d142 <LL_ATON_DisableUnits_Init+0x7e>
3400d148:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d14c:	601a      	str	r2, [r3, #0]
3400d14e:	681a      	ldr	r2, [r3, #0]
3400d150:	0052      	lsls	r2, r2, #1
3400d152:	d4fc      	bmi.n	3400d14e <LL_ATON_DisableUnits_Init+0x8a>
      LL_ATON_DisableClock(ATON_DECUN_CLKB_CLK(unitId));
3400d154:	300e      	adds	r0, #14
3400d156:	e7d9      	b.n	3400d10c <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ACTIV, unitId);
3400d158:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400d15c:	4a1f      	ldr	r2, [pc, #124]	@ (3400d1dc <LL_ATON_DisableUnits_Init+0x118>)
3400d15e:	33f5      	adds	r3, #245	@ 0xf5
3400d160:	031b      	lsls	r3, r3, #12
3400d162:	601a      	str	r2, [r3, #0]
3400d164:	681a      	ldr	r2, [r3, #0]
3400d166:	0792      	lsls	r2, r2, #30
3400d168:	d4fc      	bmi.n	3400d164 <LL_ATON_DisableUnits_Init+0xa0>
3400d16a:	4a1d      	ldr	r2, [pc, #116]	@ (3400d1e0 <LL_ATON_DisableUnits_Init+0x11c>)
3400d16c:	601a      	str	r2, [r3, #0]
3400d16e:	681a      	ldr	r2, [r3, #0]
3400d170:	0052      	lsls	r2, r2, #1
3400d172:	d4fc      	bmi.n	3400d16e <LL_ATON_DisableUnits_Init+0xaa>
      LL_ATON_DisableClock(ATON_ACTIV_CLKB_CLK(unitId));
3400d174:	3010      	adds	r0, #16
3400d176:	e7c9      	b.n	3400d10c <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ARITH, unitId);
3400d178:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400d17c:	4a19      	ldr	r2, [pc, #100]	@ (3400d1e4 <LL_ATON_DisableUnits_Init+0x120>)
3400d17e:	33f7      	adds	r3, #247	@ 0xf7
3400d180:	031b      	lsls	r3, r3, #12
3400d182:	601a      	str	r2, [r3, #0]
3400d184:	681a      	ldr	r2, [r3, #0]
3400d186:	0792      	lsls	r2, r2, #30
3400d188:	d4fc      	bmi.n	3400d184 <LL_ATON_DisableUnits_Init+0xc0>
3400d18a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
3400d18e:	601a      	str	r2, [r3, #0]
3400d190:	681a      	ldr	r2, [r3, #0]
3400d192:	0052      	lsls	r2, r2, #1
3400d194:	d4fc      	bmi.n	3400d190 <LL_ATON_DisableUnits_Init+0xcc>
      LL_ATON_DisableClock(ATON_ARITH_CLKB_CLK(unitId));
3400d196:	3012      	adds	r0, #18
3400d198:	e7b8      	b.n	3400d10c <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(POOL, unitId);
3400d19a:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400d19e:	4a12      	ldr	r2, [pc, #72]	@ (3400d1e8 <LL_ATON_DisableUnits_Init+0x124>)
3400d1a0:	33fb      	adds	r3, #251	@ 0xfb
3400d1a2:	031b      	lsls	r3, r3, #12
3400d1a4:	601a      	str	r2, [r3, #0]
3400d1a6:	681a      	ldr	r2, [r3, #0]
3400d1a8:	0792      	lsls	r2, r2, #30
3400d1aa:	d4fc      	bmi.n	3400d1a6 <LL_ATON_DisableUnits_Init+0xe2>
3400d1ac:	4a0f      	ldr	r2, [pc, #60]	@ (3400d1ec <LL_ATON_DisableUnits_Init+0x128>)
3400d1ae:	601a      	str	r2, [r3, #0]
3400d1b0:	681a      	ldr	r2, [r3, #0]
3400d1b2:	0052      	lsls	r2, r2, #1
3400d1b4:	d4fc      	bmi.n	3400d1b0 <LL_ATON_DisableUnits_Init+0xec>
      LL_ATON_DisableClock(ATON_POOL_CLKB_CLK(unitId));
3400d1b6:	3016      	adds	r0, #22
3400d1b8:	e7a8      	b.n	3400d10c <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(RECBUF, unitId);
3400d1ba:	2202      	movs	r2, #2
3400d1bc:	4b0c      	ldr	r3, [pc, #48]	@ (3400d1f0 <LL_ATON_DisableUnits_Init+0x12c>)
3400d1be:	601a      	str	r2, [r3, #0]
3400d1c0:	681a      	ldr	r2, [r3, #0]
3400d1c2:	0792      	lsls	r2, r2, #30
3400d1c4:	d4fc      	bmi.n	3400d1c0 <LL_ATON_DisableUnits_Init+0xfc>
3400d1c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d1ca:	601a      	str	r2, [r3, #0]
3400d1cc:	681a      	ldr	r2, [r3, #0]
3400d1ce:	0052      	lsls	r2, r2, #1
3400d1d0:	d4fc      	bmi.n	3400d1cc <LL_ATON_DisableUnits_Init+0x108>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
3400d1d2:	3018      	adds	r0, #24
3400d1d4:	e79a      	b.n	3400d10c <LL_ATON_DisableUnits_Init+0x48>
    switch (unitType)
3400d1d6:	f06f 0001 	mvn.w	r0, #1
3400d1da:	e77a      	b.n	3400d0d2 <LL_ATON_DisableUnits_Init+0xe>
3400d1dc:	00881082 	.word	0x00881082
3400d1e0:	40881080 	.word	0x40881080
3400d1e4:	08000002 	.word	0x08000002
3400d1e8:	00420002 	.word	0x00420002
3400d1ec:	40420000 	.word	0x40420000
3400d1f0:	580fd000 	.word	0x580fd000

3400d1f4 <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
3400d1f4:	b510      	push	{r4, lr}

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
3400d1f6:	4604      	mov	r4, r0
3400d1f8:	b928      	cbnz	r0, 3400d206 <LL_ATON_RT_Main+0x12>
3400d1fa:	213c      	movs	r1, #60	@ 0x3c
3400d1fc:	4b0f      	ldr	r3, [pc, #60]	@ (3400d23c <LL_ATON_RT_Main+0x48>)
3400d1fe:	4a10      	ldr	r2, [pc, #64]	@ (3400d240 <LL_ATON_RT_Main+0x4c>)
  LL_ATON_ASSERT(network_instance->network != NULL);
3400d200:	4810      	ldr	r0, [pc, #64]	@ (3400d244 <LL_ATON_RT_Main+0x50>)
3400d202:	f000 fc9d 	bl	3400db40 <__assert_func>
3400d206:	6803      	ldr	r3, [r0, #0]
3400d208:	b91b      	cbnz	r3, 3400d212 <LL_ATON_RT_Main+0x1e>
3400d20a:	213d      	movs	r1, #61	@ 0x3d
3400d20c:	4b0e      	ldr	r3, [pc, #56]	@ (3400d248 <LL_ATON_RT_Main+0x54>)
3400d20e:	4a0c      	ldr	r2, [pc, #48]	@ (3400d240 <LL_ATON_RT_Main+0x4c>)
3400d210:	e7f6      	b.n	3400d200 <LL_ATON_RT_Main+0xc>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
3400d212:	f000 fa15 	bl	3400d640 <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
3400d216:	4620      	mov	r0, r4
3400d218:	f000 f9d0 	bl	3400d5bc <LL_ATON_RT_Init_Network>
  size_t epochCount = 0;
  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
3400d21c:	4620      	mov	r0, r4
3400d21e:	f000 fa89 	bl	3400d734 <LL_ATON_RT_RunEpochBlock>
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
3400d222:	2801      	cmp	r0, #1
3400d224:	d101      	bne.n	3400d22a <LL_ATON_RT_Main+0x36>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
3400d226:	bf20      	wfe
    }
//    printf("Epoch: %5d, Return: %d\n\r", epochCount, ll_aton_rt_ret);
//    epochCount++;
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3400d228:	e7f8      	b.n	3400d21c <LL_ATON_RT_Main+0x28>
3400d22a:	2802      	cmp	r0, #2
3400d22c:	d1f6      	bne.n	3400d21c <LL_ATON_RT_Main+0x28>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
3400d22e:	4620      	mov	r0, r4
3400d230:	f000 f9e8 	bl	3400d604 <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
3400d234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
3400d238:	f000 ba4c 	b.w	3400d6d4 <LL_ATON_RT_RuntimeDeInit>
3400d23c:	3401125e 	.word	0x3401125e
3400d240:	34012441 	.word	0x34012441
3400d244:	3401127e 	.word	0x3401127e
3400d248:	34011316 	.word	0x34011316

3400d24c <__LL_ATON_RT_Init_Network>:
                          // wait for
  }
}

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3400d24c:	b510      	push	{r4, lr}
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3400d24e:	4604      	mov	r4, r0
3400d250:	b310      	cbz	r0, 3400d298 <__LL_ATON_RT_Init_Network+0x4c>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3400d252:	6803      	ldr	r3, [r0, #0]
3400d254:	b303      	cbz	r3, 3400d298 <__LL_ATON_RT_Init_Network+0x4c>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
3400d256:	69db      	ldr	r3, [r3, #28]
3400d258:	4798      	blx	r3
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
  nn_instance->exec_state.first_epoch_block = eb_list;
  nn_instance->exec_state.next_epoch_block = NULL;
3400d25a:	2300      	movs	r3, #0
  nn_instance->exec_state.current_epoch_block = eb_list;
3400d25c:	6060      	str	r0, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400d25e:	60a0      	str	r0, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400d260:	60e3      	str	r3, [r4, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400d262:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400d264:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400d266:	6863      	ldr	r3, [r4, #4]
  if (list != NULL)
3400d268:	b9a3      	cbnz	r3, 3400d294 <__LL_ATON_RT_Init_Network+0x48>
  int i = 0;
3400d26a:	461a      	mov	r2, r3
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400d26c:	6262      	str	r2, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d26e:	2200      	movs	r2, #0
  nn_instance->exec_state.triggered_events = 0x0;
  nn_instance->exec_state.current_epoch_block_started = false;
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d270:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d272:	62a2      	str	r2, [r4, #40]	@ 0x28
  nn_instance->exec_state.inference_started = false;
3400d274:	7622      	strb	r2, [r4, #24]
  nn_instance->exec_state.triggered_events = 0x0;
3400d276:	61e2      	str	r2, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d278:	f884 2020 	strb.w	r2, [r4, #32]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d27c:	b163      	cbz	r3, 3400d298 <__LL_ATON_RT_Init_Network+0x4c>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400d27e:	4621      	mov	r1, r4
  }
}
3400d280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400d284:	2004      	movs	r0, #4
3400d286:	4718      	bx	r3
      list++;
3400d288:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400d28a:	3201      	adds	r2, #1
3400d28c:	8a19      	ldrh	r1, [r3, #16]
3400d28e:	0709      	lsls	r1, r1, #28
3400d290:	d5fa      	bpl.n	3400d288 <__LL_ATON_RT_Init_Network+0x3c>
3400d292:	e7eb      	b.n	3400d26c <__LL_ATON_RT_Init_Network+0x20>
3400d294:	2201      	movs	r2, #1
3400d296:	e7f9      	b.n	3400d28c <__LL_ATON_RT_Init_Network+0x40>
}
3400d298:	bd10      	pop	{r4, pc}
	...

3400d29c <__ll_clear_aton_owner>:

    __ll_current_aton_ip_owner = new_owner;
  }

  static inline void __ll_clear_aton_owner(NN_Instance_TypeDef *current_owner)
  {
3400d29c:	b508      	push	{r3, lr}
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
3400d29e:	4b09      	ldr	r3, [pc, #36]	@ (3400d2c4 <__ll_clear_aton_owner+0x28>)
3400d2a0:	681a      	ldr	r2, [r3, #0]
3400d2a2:	4282      	cmp	r2, r0
3400d2a4:	d005      	beq.n	3400d2b2 <__ll_clear_aton_owner+0x16>
3400d2a6:	2142      	movs	r1, #66	@ 0x42
3400d2a8:	4b07      	ldr	r3, [pc, #28]	@ (3400d2c8 <__ll_clear_aton_owner+0x2c>)
3400d2aa:	4a08      	ldr	r2, [pc, #32]	@ (3400d2cc <__ll_clear_aton_owner+0x30>)

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d2ac:	4808      	ldr	r0, [pc, #32]	@ (3400d2d0 <__ll_clear_aton_owner+0x34>)
3400d2ae:	f000 fc47 	bl	3400db40 <__assert_func>
3400d2b2:	4a08      	ldr	r2, [pc, #32]	@ (3400d2d4 <__ll_clear_aton_owner+0x38>)
3400d2b4:	6812      	ldr	r2, [r2, #0]
3400d2b6:	b11a      	cbz	r2, 3400d2c0 <__ll_clear_aton_owner+0x24>
3400d2b8:	2146      	movs	r1, #70	@ 0x46
3400d2ba:	4b07      	ldr	r3, [pc, #28]	@ (3400d2d8 <__ll_clear_aton_owner+0x3c>)
3400d2bc:	4a03      	ldr	r2, [pc, #12]	@ (3400d2cc <__ll_clear_aton_owner+0x30>)
3400d2be:	e7f5      	b.n	3400d2ac <__ll_clear_aton_owner+0x10>
#endif // NDEBUG

    __ll_current_aton_ip_owner = NULL;
3400d2c0:	601a      	str	r2, [r3, #0]
    LL_ATON_OSAL_UNLOCK_ATON();
  }
3400d2c2:	bd08      	pop	{r3, pc}
3400d2c4:	340132ac 	.word	0x340132ac
3400d2c8:	3401133f 	.word	0x3401133f
3400d2cc:	3401259f 	.word	0x3401259f
3400d2d0:	3401136b 	.word	0x3401136b
3400d2d4:	340132a8 	.word	0x340132a8
3400d2d8:	34011403 	.word	0x34011403

3400d2dc <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
3400d2dc:	b508      	push	{r3, lr}
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400d2de:	4b07      	ldr	r3, [pc, #28]	@ (3400d2fc <__LL_ATON_RT_SetWaitMask+0x20>)
3400d2e0:	681b      	ldr	r3, [r3, #0]
3400d2e2:	b92b      	cbnz	r3, 3400d2f0 <__LL_ATON_RT_SetWaitMask+0x14>
3400d2e4:	2175      	movs	r1, #117	@ 0x75
3400d2e6:	4b06      	ldr	r3, [pc, #24]	@ (3400d300 <__LL_ATON_RT_SetWaitMask+0x24>)
3400d2e8:	4a06      	ldr	r2, [pc, #24]	@ (3400d304 <__LL_ATON_RT_SetWaitMask+0x28>)
3400d2ea:	4807      	ldr	r0, [pc, #28]	@ (3400d308 <__LL_ATON_RT_SetWaitMask+0x2c>)
3400d2ec:	f000 fc28 	bl	3400db40 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
3400d2f0:	4b06      	ldr	r3, [pc, #24]	@ (3400d30c <__LL_ATON_RT_SetWaitMask+0x30>)
3400d2f2:	6018      	str	r0, [r3, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3400d2f4:	43c0      	mvns	r0, r0
3400d2f6:	4b06      	ldr	r3, [pc, #24]	@ (3400d310 <__LL_ATON_RT_SetWaitMask+0x34>)
3400d2f8:	6258      	str	r0, [r3, #36]	@ 0x24
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
3400d2fa:	bd08      	pop	{r3, pc}
3400d2fc:	340132ac 	.word	0x340132ac
3400d300:	3401141f 	.word	0x3401141f
3400d304:	340124f2 	.word	0x340124f2
3400d308:	3401136b 	.word	0x3401136b
3400d30c:	340132a8 	.word	0x340132a8
3400d310:	580e1000 	.word	0x580e1000

3400d314 <EpochBlock_EpochControllerUnit>:
  {
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
  }

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3400d314:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3400d316:	8a03      	ldrh	r3, [r0, #16]
3400d318:	075b      	lsls	r3, r3, #29
3400d31a:	d406      	bmi.n	3400d32a <EpochBlock_EpochControllerUnit+0x16>
3400d31c:	f240 212f 	movw	r1, #559	@ 0x22f
3400d320:	4b03      	ldr	r3, [pc, #12]	@ (3400d330 <EpochBlock_EpochControllerUnit+0x1c>)
3400d322:	4a04      	ldr	r2, [pc, #16]	@ (3400d334 <EpochBlock_EpochControllerUnit+0x20>)
3400d324:	4804      	ldr	r0, [pc, #16]	@ (3400d338 <EpochBlock_EpochControllerUnit+0x24>)
3400d326:	f000 fc0b 	bl	3400db40 <__assert_func>
    return eb->wait_mask;
  }
3400d32a:	68c0      	ldr	r0, [r0, #12]
3400d32c:	bd08      	pop	{r3, pc}
3400d32e:	bf00      	nop
3400d330:	34011449 	.word	0x34011449
3400d334:	340124d3 	.word	0x340124d3
3400d338:	34011464 	.word	0x34011464

3400d33c <__LL_ATON_RT_ExecEndEpochBlock>:
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d33c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
{
3400d33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400d342:	4605      	mov	r5, r0
3400d344:	460c      	mov	r4, r1
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d346:	b113      	cbz	r3, 3400d34e <__LL_ATON_RT_ExecEndEpochBlock+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
3400d348:	4602      	mov	r2, r0
3400d34a:	2002      	movs	r0, #2
3400d34c:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400d34e:	8a2b      	ldrh	r3, [r5, #16]
3400d350:	0758      	lsls	r0, r3, #29
3400d352:	d518      	bpl.n	3400d386 <__LL_ATON_RT_ExecEndEpochBlock+0x4a>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400d354:	4628      	mov	r0, r5
3400d356:	f7ff ffdd 	bl	3400d314 <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d35a:	b128      	cbz	r0, 3400d368 <__LL_ATON_RT_ExecEndEpochBlock+0x2c>
3400d35c:	21c2      	movs	r1, #194	@ 0xc2
3400d35e:	4b25      	ldr	r3, [pc, #148]	@ (3400d3f4 <__LL_ATON_RT_ExecEndEpochBlock+0xb8>)
3400d360:	4a25      	ldr	r2, [pc, #148]	@ (3400d3f8 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400d362:	4826      	ldr	r0, [pc, #152]	@ (3400d3fc <__LL_ATON_RT_ExecEndEpochBlock+0xc0>)
3400d364:	f000 fbec 	bl	3400db40 <__assert_func>
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
3400d368:	2202      	movs	r2, #2
3400d36a:	4b25      	ldr	r3, [pc, #148]	@ (3400d400 <__LL_ATON_RT_ExecEndEpochBlock+0xc4>)
3400d36c:	601a      	str	r2, [r3, #0]
3400d36e:	681a      	ldr	r2, [r3, #0]
3400d370:	0791      	lsls	r1, r2, #30
3400d372:	d4fc      	bmi.n	3400d36e <__LL_ATON_RT_ExecEndEpochBlock+0x32>
3400d374:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d378:	601a      	str	r2, [r3, #0]
3400d37a:	681a      	ldr	r2, [r3, #0]
3400d37c:	0052      	lsls	r2, r2, #1
3400d37e:	d4fc      	bmi.n	3400d37a <__LL_ATON_RT_ExecEndEpochBlock+0x3e>
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
3400d380:	2019      	movs	r0, #25
3400d382:	f7ff fe91 	bl	3400d0a8 <LL_ATON_DisableClock>
  if (eb->end_epoch_block != NULL)
3400d386:	686b      	ldr	r3, [r5, #4]
3400d388:	b10b      	cbz	r3, 3400d38e <__LL_ATON_RT_ExecEndEpochBlock+0x52>
    eb->end_epoch_block((const void *)eb);
3400d38a:	4628      	mov	r0, r5
3400d38c:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
3400d38e:	8a2e      	ldrh	r6, [r5, #16]
  if (EpochBlock_IsEpochPureHW(eb) ||
3400d390:	f016 0f90 	tst.w	r6, #144	@ 0x90
3400d394:	f006 07c0 	and.w	r7, r6, #192	@ 0xc0
3400d398:	d108      	bne.n	3400d3ac <__LL_ATON_RT_ExecEndEpochBlock+0x70>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400d39a:	bb0f      	cbnz	r7, 3400d3e0 <__LL_ATON_RT_ExecEndEpochBlock+0xa4>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400d39c:	4b19      	ldr	r3, [pc, #100]	@ (3400d404 <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400d39e:	681b      	ldr	r3, [r3, #0]
3400d3a0:	42a3      	cmp	r3, r4
3400d3a2:	d115      	bne.n	3400d3d0 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400d3a4:	21ed      	movs	r1, #237	@ 0xed
3400d3a6:	4b18      	ldr	r3, [pc, #96]	@ (3400d408 <__LL_ATON_RT_ExecEndEpochBlock+0xcc>)
3400d3a8:	4a13      	ldr	r2, [pc, #76]	@ (3400d3f8 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400d3aa:	e7da      	b.n	3400d362 <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400d3ac:	4b15      	ldr	r3, [pc, #84]	@ (3400d404 <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400d3ae:	681b      	ldr	r3, [r3, #0]
3400d3b0:	42a3      	cmp	r3, r4
3400d3b2:	d003      	beq.n	3400d3bc <__LL_ATON_RT_ExecEndEpochBlock+0x80>
3400d3b4:	21e1      	movs	r1, #225	@ 0xe1
3400d3b6:	4b15      	ldr	r3, [pc, #84]	@ (3400d40c <__LL_ATON_RT_ExecEndEpochBlock+0xd0>)
3400d3b8:	4a0f      	ldr	r2, [pc, #60]	@ (3400d3f8 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400d3ba:	e7d2      	b.n	3400d362 <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    __LL_ATON_RT_SetWaitMask(0);
3400d3bc:	2000      	movs	r0, #0
3400d3be:	f7ff ff8d 	bl	3400d2dc <__LL_ATON_RT_SetWaitMask>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400d3c2:	06f3      	lsls	r3, r6, #27
3400d3c4:	d5e9      	bpl.n	3400d39a <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
    __ll_clear_aton_owner(nn_instance);
3400d3c6:	4620      	mov	r0, r4
3400d3c8:	f7ff ff68 	bl	3400d29c <__ll_clear_aton_owner>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400d3cc:	2f00      	cmp	r7, #0
3400d3ce:	d0e5      	beq.n	3400d39c <__LL_ATON_RT_ExecEndEpochBlock+0x60>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d3d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d3d2:	b163      	cbz	r3, 3400d3ee <__LL_ATON_RT_ExecEndEpochBlock+0xb2>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400d3d4:	462a      	mov	r2, r5
3400d3d6:	4621      	mov	r1, r4
}
3400d3d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400d3dc:	2003      	movs	r0, #3
3400d3de:	4718      	bx	r3
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400d3e0:	6923      	ldr	r3, [r4, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400d3e2:	2b00      	cmp	r3, #0
3400d3e4:	d1f4      	bne.n	3400d3d0 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
                                       (nn_instance->exec_state.next_epoch_block ==
3400d3e6:	68e3      	ldr	r3, [r4, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400d3e8:	2b00      	cmp	r3, #0
3400d3ea:	d1f1      	bne.n	3400d3d0 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400d3ec:	e7eb      	b.n	3400d3c6 <__LL_ATON_RT_ExecEndEpochBlock+0x8a>
}
3400d3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400d3f2:	bf00      	nop
3400d3f4:	34011501 	.word	0x34011501
3400d3f8:	340124b4 	.word	0x340124b4
3400d3fc:	3401150a 	.word	0x3401150a
3400d400:	580fe000 	.word	0x580fe000
3400d404:	340132ac 	.word	0x340132ac
3400d408:	340115cc 	.word	0x340115cc
3400d40c:	340115a2 	.word	0x340115a2

3400d410 <__LL_ATON_RT_DetermineNextEpochBlock>:
{
3400d410:	b508      	push	{r3, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400d412:	b928      	cbnz	r0, 3400d420 <__LL_ATON_RT_DetermineNextEpochBlock+0x10>
3400d414:	21f8      	movs	r1, #248	@ 0xf8
3400d416:	4b1a      	ldr	r3, [pc, #104]	@ (3400d480 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
3400d418:	4a1a      	ldr	r2, [pc, #104]	@ (3400d484 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400d41a:	481b      	ldr	r0, [pc, #108]	@ (3400d488 <__LL_ATON_RT_DetermineNextEpochBlock+0x78>)
3400d41c:	f000 fb90 	bl	3400db40 <__assert_func>
3400d420:	69c3      	ldr	r3, [r0, #28]
3400d422:	b11b      	cbz	r3, 3400d42c <__LL_ATON_RT_DetermineNextEpochBlock+0x1c>
3400d424:	21fa      	movs	r1, #250	@ 0xfa
3400d426:	4b19      	ldr	r3, [pc, #100]	@ (3400d48c <__LL_ATON_RT_DetermineNextEpochBlock+0x7c>)
3400d428:	4a16      	ldr	r2, [pc, #88]	@ (3400d484 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400d42a:	e7f6      	b.n	3400d41a <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
  if ((nn_instance->exec_state.next_epoch_block != NULL))
3400d42c:	68c3      	ldr	r3, [r0, #12]
3400d42e:	b313      	cbz	r3, 3400d476 <__LL_ATON_RT_DetermineNextEpochBlock+0x66>
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
3400d430:	6903      	ldr	r3, [r0, #16]
3400d432:	b123      	cbz	r3, 3400d43e <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
3400d434:	f44f 7181 	mov.w	r1, #258	@ 0x102
3400d438:	4b15      	ldr	r3, [pc, #84]	@ (3400d490 <__LL_ATON_RT_DetermineNextEpochBlock+0x80>)
3400d43a:	4a12      	ldr	r2, [pc, #72]	@ (3400d484 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400d43c:	e7ed      	b.n	3400d41a <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
3400d43e:	6843      	ldr	r3, [r0, #4]
3400d440:	6103      	str	r3, [r0, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3400d442:	6883      	ldr	r3, [r0, #8]
3400d444:	6143      	str	r3, [r0, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
3400d446:	6a43      	ldr	r3, [r0, #36]	@ 0x24
3400d448:	6283      	str	r3, [r0, #40]	@ 0x28
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
3400d44a:	68c3      	ldr	r3, [r0, #12]
3400d44c:	6043      	str	r3, [r0, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
3400d44e:	68c3      	ldr	r3, [r0, #12]
3400d450:	6083      	str	r3, [r0, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400d452:	6883      	ldr	r3, [r0, #8]
  if (list != NULL)
3400d454:	b96b      	cbnz	r3, 3400d472 <__LL_ATON_RT_DetermineNextEpochBlock+0x62>
  int i = 0;
3400d456:	461a      	mov	r2, r3
    nn_instance->exec_state.next_epoch_block = NULL;
3400d458:	2300      	movs	r3, #0
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400d45a:	6242      	str	r2, [r0, #36]	@ 0x24
    nn_instance->exec_state.next_epoch_block = NULL;
3400d45c:	60c3      	str	r3, [r0, #12]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d45e:	2300      	movs	r3, #0
3400d460:	f880 3020 	strb.w	r3, [r0, #32]
}
3400d464:	bd08      	pop	{r3, pc}
      list++;
3400d466:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400d468:	3201      	adds	r2, #1
3400d46a:	8a19      	ldrh	r1, [r3, #16]
3400d46c:	0709      	lsls	r1, r1, #28
3400d46e:	d5fa      	bpl.n	3400d466 <__LL_ATON_RT_DetermineNextEpochBlock+0x56>
3400d470:	e7f2      	b.n	3400d458 <__LL_ATON_RT_DetermineNextEpochBlock+0x48>
3400d472:	2201      	movs	r2, #1
3400d474:	e7f9      	b.n	3400d46a <__LL_ATON_RT_DetermineNextEpochBlock+0x5a>
    nn_instance->exec_state.current_epoch_block++;
3400d476:	6843      	ldr	r3, [r0, #4]
3400d478:	3314      	adds	r3, #20
3400d47a:	6043      	str	r3, [r0, #4]
3400d47c:	e7ef      	b.n	3400d45e <__LL_ATON_RT_DetermineNextEpochBlock+0x4e>
3400d47e:	bf00      	nop
3400d480:	3401163a 	.word	0x3401163a
3400d484:	3401248f 	.word	0x3401248f
3400d488:	3401150a 	.word	0x3401150a
3400d48c:	34011655 	.word	0x34011655
3400d490:	34011685 	.word	0x34011685

3400d494 <dump_dma_state>:
LL_ATON_WEAK void dump_dma_state(void){};
3400d494:	4770      	bx	lr
	...

3400d498 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3400d498:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3400d49a:	4604      	mov	r4, r0
3400d49c:	2800      	cmp	r0, #0
3400d49e:	d060      	beq.n	3400d562 <__LL_ATON_RT_IrqErr+0xca>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3400d4a0:	4b30      	ldr	r3, [pc, #192]	@ (3400d564 <__LL_ATON_RT_IrqErr+0xcc>)
3400d4a2:	4003      	ands	r3, r0
3400d4a4:	d007      	beq.n	3400d4b6 <__LL_ATON_RT_IrqErr+0x1e>

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3400d4a6:	4259      	negs	r1, r3
3400d4a8:	4019      	ands	r1, r3
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3400d4aa:	4b2f      	ldr	r3, [pc, #188]	@ (3400d568 <__LL_ATON_RT_IrqErr+0xd0>)
3400d4ac:	030a      	lsls	r2, r1, #12
3400d4ae:	58d2      	ldr	r2, [r2, r3]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
3400d4b0:	482e      	ldr	r0, [pc, #184]	@ (3400d56c <__LL_ATON_RT_IrqErr+0xd4>)
3400d4b2:	f001 f9ef 	bl	3400e894 <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3400d4b6:	f3c4 0309 	ubfx	r3, r4, #0, #10
3400d4ba:	b113      	cbz	r3, 3400d4c2 <__LL_ATON_RT_IrqErr+0x2a>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3400d4bc:	482c      	ldr	r0, [pc, #176]	@ (3400d570 <__LL_ATON_RT_IrqErr+0xd8>)
3400d4be:	f001 fa51 	bl	3400e964 <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3400d4c2:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
3400d4c6:	d002      	beq.n	3400d4ce <__LL_ATON_RT_IrqErr+0x36>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3400d4c8:	482a      	ldr	r0, [pc, #168]	@ (3400d574 <__LL_ATON_RT_IrqErr+0xdc>)
3400d4ca:	f001 fa4b 	bl	3400e964 <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3400d4ce:	01e5      	lsls	r5, r4, #7
3400d4d0:	d502      	bpl.n	3400d4d8 <__LL_ATON_RT_IrqErr+0x40>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3400d4d2:	4829      	ldr	r0, [pc, #164]	@ (3400d578 <__LL_ATON_RT_IrqErr+0xe0>)
3400d4d4:	f001 fa46 	bl	3400e964 <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3400d4d8:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
3400d4dc:	d00e      	beq.n	3400d4fc <__LL_ATON_RT_IrqErr+0x64>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3400d4de:	4827      	ldr	r0, [pc, #156]	@ (3400d57c <__LL_ATON_RT_IrqErr+0xe4>)
3400d4e0:	f001 fa40 	bl	3400e964 <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3400d4e4:	4b26      	ldr	r3, [pc, #152]	@ (3400d580 <__LL_ATON_RT_IrqErr+0xe8>)
3400d4e6:	2100      	movs	r1, #0
3400d4e8:	691a      	ldr	r2, [r3, #16]
3400d4ea:	4826      	ldr	r0, [pc, #152]	@ (3400d584 <__LL_ATON_RT_IrqErr+0xec>)
3400d4ec:	f001 f9d2 	bl	3400e894 <iprintf>
3400d4f0:	4b25      	ldr	r3, [pc, #148]	@ (3400d588 <__LL_ATON_RT_IrqErr+0xf0>)
3400d4f2:	2101      	movs	r1, #1
3400d4f4:	691a      	ldr	r2, [r3, #16]
3400d4f6:	4823      	ldr	r0, [pc, #140]	@ (3400d584 <__LL_ATON_RT_IrqErr+0xec>)
3400d4f8:	f001 f9cc 	bl	3400e894 <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3400d4fc:	0120      	lsls	r0, r4, #4
3400d4fe:	d502      	bpl.n	3400d506 <__LL_ATON_RT_IrqErr+0x6e>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3400d500:	4822      	ldr	r0, [pc, #136]	@ (3400d58c <__LL_ATON_RT_IrqErr+0xf4>)
3400d502:	f001 fa2f 	bl	3400e964 <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d506:	0061      	lsls	r1, r4, #1
3400d508:	d50c      	bpl.n	3400d524 <__LL_ATON_RT_IrqErr+0x8c>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3400d50a:	4d21      	ldr	r5, [pc, #132]	@ (3400d590 <__LL_ATON_RT_IrqErr+0xf8>)
3400d50c:	4821      	ldr	r0, [pc, #132]	@ (3400d594 <__LL_ATON_RT_IrqErr+0xfc>)
3400d50e:	68e9      	ldr	r1, [r5, #12]
3400d510:	f001 f9c0 	bl	3400e894 <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3400d514:	6a29      	ldr	r1, [r5, #32]
3400d516:	4820      	ldr	r0, [pc, #128]	@ (3400d598 <__LL_ATON_RT_IrqErr+0x100>)
3400d518:	f001 f9bc 	bl	3400e894 <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3400d51c:	69e9      	ldr	r1, [r5, #28]
3400d51e:	481f      	ldr	r0, [pc, #124]	@ (3400d59c <__LL_ATON_RT_IrqErr+0x104>)
3400d520:	f001 f9b8 	bl	3400e894 <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d524:	00a2      	lsls	r2, r4, #2
3400d526:	d502      	bpl.n	3400d52e <__LL_ATON_RT_IrqErr+0x96>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3400d528:	481d      	ldr	r0, [pc, #116]	@ (3400d5a0 <__LL_ATON_RT_IrqErr+0x108>)
3400d52a:	f001 fa1b 	bl	3400e964 <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d52e:	00e3      	lsls	r3, r4, #3
3400d530:	d502      	bpl.n	3400d538 <__LL_ATON_RT_IrqErr+0xa0>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3400d532:	481c      	ldr	r0, [pc, #112]	@ (3400d5a4 <__LL_ATON_RT_IrqErr+0x10c>)
3400d534:	f001 fa16 	bl	3400e964 <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3400d538:	f7ff ffac 	bl	3400d494 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3400d53c:	4622      	mov	r2, r4
3400d53e:	f240 314a 	movw	r1, #842	@ 0x34a
3400d542:	2300      	movs	r3, #0
3400d544:	4818      	ldr	r0, [pc, #96]	@ (3400d5a8 <__LL_ATON_RT_IrqErr+0x110>)
3400d546:	f001 f9a5 	bl	3400e894 <iprintf>
//#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
3400d54a:	4b18      	ldr	r3, [pc, #96]	@ (3400d5ac <__LL_ATON_RT_IrqErr+0x114>)
3400d54c:	681b      	ldr	r3, [r3, #0]
3400d54e:	6898      	ldr	r0, [r3, #8]
3400d550:	f001 f8b8 	bl	3400e6c4 <fflush>
//#endif
  LL_ATON_ASSERT(false); // may never happen
3400d554:	f240 314e 	movw	r1, #846	@ 0x34e
3400d558:	4b15      	ldr	r3, [pc, #84]	@ (3400d5b0 <__LL_ATON_RT_IrqErr+0x118>)
3400d55a:	4a16      	ldr	r2, [pc, #88]	@ (3400d5b4 <__LL_ATON_RT_IrqErr+0x11c>)
3400d55c:	4816      	ldr	r0, [pc, #88]	@ (3400d5b8 <__LL_ATON_RT_IrqErr+0x120>)
3400d55e:	f000 faef 	bl	3400db40 <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3400d562:	bd38      	pop	{r3, r4, r5, pc}
3400d564:	000ffc00 	.word	0x000ffc00
3400d568:	580e503c 	.word	0x580e503c
3400d56c:	340116c6 	.word	0x340116c6
3400d570:	340116f3 	.word	0x340116f3
3400d574:	34011719 	.word	0x34011719
3400d578:	3401173d 	.word	0x3401173d
3400d57c:	3401175d 	.word	0x3401175d
3400d580:	580e2000 	.word	0x580e2000
3400d584:	34011775 	.word	0x34011775
3400d588:	580e3000 	.word	0x580e3000
3400d58c:	3401178a 	.word	0x3401178a
3400d590:	580fe000 	.word	0x580fe000
3400d594:	340117a2 	.word	0x340117a2
3400d598:	340117d6 	.word	0x340117d6
3400d59c:	34011800 	.word	0x34011800
3400d5a0:	34011821 	.word	0x34011821
3400d5a4:	34011842 	.word	0x34011842
3400d5a8:	3401185d 	.word	0x3401185d
3400d5ac:	34012844 	.word	0x34012844
3400d5b0:	3401141d 	.word	0x3401141d
3400d5b4:	3401246b 	.word	0x3401246b
3400d5b8:	3401150a 	.word	0x3401150a

3400d5bc <LL_ATON_RT_Init_Network>:
{
3400d5bc:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400d5be:	4604      	mov	r4, r0
3400d5c0:	b1b0      	cbz	r0, 3400d5f0 <LL_ATON_RT_Init_Network+0x34>
  if (nn_instance->network == NULL)
3400d5c2:	6803      	ldr	r3, [r0, #0]
3400d5c4:	b1a3      	cbz	r3, 3400d5f0 <LL_ATON_RT_Init_Network+0x34>
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
3400d5c6:	685b      	ldr	r3, [r3, #4]
3400d5c8:	b933      	cbnz	r3, 3400d5d8 <LL_ATON_RT_Init_Network+0x1c>
3400d5ca:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
3400d5ce:	4b09      	ldr	r3, [pc, #36]	@ (3400d5f4 <LL_ATON_RT_Init_Network+0x38>)
3400d5d0:	4a09      	ldr	r2, [pc, #36]	@ (3400d5f8 <LL_ATON_RT_Init_Network+0x3c>)
  LL_ATON_ASSERT(ret == true);
3400d5d2:	480a      	ldr	r0, [pc, #40]	@ (3400d5fc <LL_ATON_RT_Init_Network+0x40>)
3400d5d4:	f000 fab4 	bl	3400db40 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
3400d5d8:	4798      	blx	r3
  LL_ATON_ASSERT(ret == true);
3400d5da:	b920      	cbnz	r0, 3400d5e6 <LL_ATON_RT_Init_Network+0x2a>
3400d5dc:	f240 11a9 	movw	r1, #425	@ 0x1a9
3400d5e0:	4b07      	ldr	r3, [pc, #28]	@ (3400d600 <LL_ATON_RT_Init_Network+0x44>)
3400d5e2:	4a05      	ldr	r2, [pc, #20]	@ (3400d5f8 <LL_ATON_RT_Init_Network+0x3c>)
3400d5e4:	e7f5      	b.n	3400d5d2 <LL_ATON_RT_Init_Network+0x16>
  __LL_ATON_RT_Init_Network(nn_instance);
3400d5e6:	4620      	mov	r0, r4
}
3400d5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __LL_ATON_RT_Init_Network(nn_instance);
3400d5ec:	f7ff be2e 	b.w	3400d24c <__LL_ATON_RT_Init_Network>
}
3400d5f0:	bd10      	pop	{r4, pc}
3400d5f2:	bf00      	nop
3400d5f4:	34011884 	.word	0x34011884
3400d5f8:	340125b5 	.word	0x340125b5
3400d5fc:	3401150a 	.word	0x3401150a
3400d600:	340118b9 	.word	0x340118b9

3400d604 <LL_ATON_RT_DeInit_Network>:
{
3400d604:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400d606:	4604      	mov	r4, r0
3400d608:	b1b8      	cbz	r0, 3400d63a <LL_ATON_RT_DeInit_Network+0x36>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d60a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400d60c:	b11b      	cbz	r3, 3400d616 <LL_ATON_RT_DeInit_Network+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
3400d60e:	4601      	mov	r1, r0
3400d610:	2200      	movs	r2, #0
3400d612:	2005      	movs	r0, #5
3400d614:	4798      	blx	r3
  if (nn_instance == __ll_current_aton_ip_owner)
3400d616:	4b09      	ldr	r3, [pc, #36]	@ (3400d63c <LL_ATON_RT_DeInit_Network+0x38>)
3400d618:	681b      	ldr	r3, [r3, #0]
3400d61a:	42a3      	cmp	r3, r4
3400d61c:	d102      	bne.n	3400d624 <LL_ATON_RT_DeInit_Network+0x20>
    __ll_clear_aton_owner(nn_instance);
3400d61e:	4620      	mov	r0, r4
3400d620:	f7ff fe3c 	bl	3400d29c <__ll_clear_aton_owner>
  nn_instance->exec_state.current_epoch_block = eb_list;
3400d624:	2300      	movs	r3, #0
3400d626:	6063      	str	r3, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400d628:	60a3      	str	r3, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400d62a:	60e3      	str	r3, [r4, #12]
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400d62c:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400d62e:	6163      	str	r3, [r4, #20]
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
3400d630:	6263      	str	r3, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d632:	62a3      	str	r3, [r4, #40]	@ 0x28
  nn_instance->exec_state.triggered_events = 0x0;
3400d634:	61e3      	str	r3, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d636:	f884 3020 	strb.w	r3, [r4, #32]
}
3400d63a:	bd10      	pop	{r4, pc}
3400d63c:	340132ac 	.word	0x340132ac

3400d640 <LL_ATON_RT_RuntimeInit>:
{
3400d640:	b510      	push	{r4, lr}
  LL_ATON_Init();
3400d642:	f7fe ff13 	bl	3400c46c <LL_ATON_Init>
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
3400d646:	2202      	movs	r2, #2
3400d648:	4b1f      	ldr	r3, [pc, #124]	@ (3400d6c8 <LL_ATON_RT_RuntimeInit+0x88>)
3400d64a:	601a      	str	r2, [r3, #0]
3400d64c:	681a      	ldr	r2, [r3, #0]
3400d64e:	0791      	lsls	r1, r2, #30
3400d650:	d4fc      	bmi.n	3400d64c <LL_ATON_RT_RuntimeInit+0xc>
3400d652:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d656:	601a      	str	r2, [r3, #0]
3400d658:	681a      	ldr	r2, [r3, #0]
3400d65a:	0052      	lsls	r2, r2, #1
3400d65c:	d4fc      	bmi.n	3400d658 <LL_ATON_RT_RuntimeInit+0x18>
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3400d65e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3400d662:	615a      	str	r2, [r3, #20]
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
3400d664:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400d668:	625a      	str	r2, [r3, #36]	@ 0x24
    ATON_ENABLE(INTCTRL, 0);
3400d66a:	681a      	ldr	r2, [r3, #0]
3400d66c:	f042 0201 	orr.w	r2, r2, #1
3400d670:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d672:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400d676:	4b15      	ldr	r3, [pc, #84]	@ (3400d6cc <LL_ATON_RT_RuntimeInit+0x8c>)
3400d678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d67c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d680:	f3bf 8f6f 	isb	sy
3400d684:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400d688:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d68c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d690:	f3bf 8f6f 	isb	sy
3400d694:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
3400d698:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d69c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d6a0:	f3bf 8f6f 	isb	sy
3400d6a4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
3400d6a8:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d6ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d6b0:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d6b4:	605a      	str	r2, [r3, #4]
  if (ll_aton_init_deinit_trace)
3400d6b6:	4b06      	ldr	r3, [pc, #24]	@ (3400d6d0 <LL_ATON_RT_RuntimeInit+0x90>)
3400d6b8:	681b      	ldr	r3, [r3, #0]
3400d6ba:	b11b      	cbz	r3, 3400d6c4 <LL_ATON_RT_RuntimeInit+0x84>
}
3400d6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
3400d6c0:	2006      	movs	r0, #6
3400d6c2:	4718      	bx	r3
}
3400d6c4:	bd10      	pop	{r4, pc}
3400d6c6:	bf00      	nop
3400d6c8:	580e1000 	.word	0x580e1000
3400d6cc:	e000e100 	.word	0xe000e100
3400d6d0:	340132a4 	.word	0x340132a4

3400d6d4 <LL_ATON_RT_RuntimeDeInit>:
{
3400d6d4:	b508      	push	{r3, lr}
  if (ll_aton_init_deinit_trace)
3400d6d6:	4b15      	ldr	r3, [pc, #84]	@ (3400d72c <LL_ATON_RT_RuntimeDeInit+0x58>)
3400d6d8:	681b      	ldr	r3, [r3, #0]
3400d6da:	b10b      	cbz	r3, 3400d6e0 <LL_ATON_RT_RuntimeDeInit+0xc>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
3400d6dc:	2007      	movs	r0, #7
3400d6de:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d6e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400d6e4:	4b12      	ldr	r3, [pc, #72]	@ (3400d730 <LL_ATON_RT_RuntimeDeInit+0x5c>)
3400d6e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d6ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d6ee:	f3bf 8f6f 	isb	sy
3400d6f2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
3400d6f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d6fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d6fe:	f3bf 8f6f 	isb	sy
3400d702:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400d706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d70a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d70e:	f3bf 8f6f 	isb	sy
3400d712:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400d716:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d71a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d71e:	f3bf 8f6f 	isb	sy
}
3400d722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DeInit();
3400d726:	f7ff b93d 	b.w	3400c9a4 <LL_ATON_DeInit>
3400d72a:	bf00      	nop
3400d72c:	340132a4 	.word	0x340132a4
3400d730:	e000e100 	.word	0xe000e100

3400d734 <LL_ATON_RT_RunEpochBlock>:
{
3400d734:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400d736:	4604      	mov	r4, r0
3400d738:	b930      	cbnz	r0, 3400d748 <LL_ATON_RT_RunEpochBlock+0x14>
3400d73a:	f44f 7110 	mov.w	r1, #576	@ 0x240
3400d73e:	4b8c      	ldr	r3, [pc, #560]	@ (3400d970 <LL_ATON_RT_RunEpochBlock+0x23c>)
3400d740:	4a8c      	ldr	r2, [pc, #560]	@ (3400d974 <LL_ATON_RT_RunEpochBlock+0x240>)
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
3400d742:	488d      	ldr	r0, [pc, #564]	@ (3400d978 <LL_ATON_RT_RunEpochBlock+0x244>)
3400d744:	f000 f9fc 	bl	3400db40 <__assert_func>
3400d748:	6843      	ldr	r3, [r0, #4]
3400d74a:	b923      	cbnz	r3, 3400d756 <LL_ATON_RT_RunEpochBlock+0x22>
3400d74c:	f240 2143 	movw	r1, #579	@ 0x243
3400d750:	4b8a      	ldr	r3, [pc, #552]	@ (3400d97c <LL_ATON_RT_RunEpochBlock+0x248>)
3400d752:	4a88      	ldr	r2, [pc, #544]	@ (3400d974 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d754:	e7f5      	b.n	3400d742 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.inference_started == false)
3400d756:	7e03      	ldrb	r3, [r0, #24]
3400d758:	b98b      	cbnz	r3, 3400d77e <LL_ATON_RT_RunEpochBlock+0x4a>
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3400d75a:	6803      	ldr	r3, [r0, #0]
3400d75c:	b10b      	cbz	r3, 3400d762 <LL_ATON_RT_RunEpochBlock+0x2e>
3400d75e:	689b      	ldr	r3, [r3, #8]
3400d760:	b923      	cbnz	r3, 3400d76c <LL_ATON_RT_RunEpochBlock+0x38>
3400d762:	f240 2155 	movw	r1, #597	@ 0x255
3400d766:	4b86      	ldr	r3, [pc, #536]	@ (3400d980 <LL_ATON_RT_RunEpochBlock+0x24c>)
3400d768:	4a82      	ldr	r2, [pc, #520]	@ (3400d974 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d76a:	e7ea      	b.n	3400d742 <LL_ATON_RT_RunEpochBlock+0xe>
    bool ret = nn_instance->network->ec_inference_init();
3400d76c:	4798      	blx	r3
    LL_ATON_ASSERT(ret == true);
3400d76e:	b920      	cbnz	r0, 3400d77a <LL_ATON_RT_RunEpochBlock+0x46>
3400d770:	f240 2159 	movw	r1, #601	@ 0x259
3400d774:	4b83      	ldr	r3, [pc, #524]	@ (3400d984 <LL_ATON_RT_RunEpochBlock+0x250>)
3400d776:	4a7f      	ldr	r2, [pc, #508]	@ (3400d974 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d778:	e7e3      	b.n	3400d742 <LL_ATON_RT_RunEpochBlock+0xe>
    nn_instance->exec_state.inference_started = true;
3400d77a:	2301      	movs	r3, #1
3400d77c:	7623      	strb	r3, [r4, #24]
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
3400d77e:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400d780:	8a03      	ldrh	r3, [r0, #16]
3400d782:	075a      	lsls	r2, r3, #29
3400d784:	d512      	bpl.n	3400d7ac <LL_ATON_RT_RunEpochBlock+0x78>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400d786:	f7ff fdc5 	bl	3400d314 <EpochBlock_EpochControllerUnit>
3400d78a:	2301      	movs	r3, #1
3400d78c:	fa03 f000 	lsl.w	r0, r3, r0
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
3400d790:	f894 3020 	ldrb.w	r3, [r4, #32]
3400d794:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
3400d798:	b343      	cbz	r3, 3400d7ec <LL_ATON_RT_RunEpochBlock+0xb8>
3400d79a:	2800      	cmp	r0, #0
3400d79c:	d036      	beq.n	3400d80c <LL_ATON_RT_RunEpochBlock+0xd8>
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
3400d79e:	69e3      	ldr	r3, [r4, #28]
3400d7a0:	ea30 0303 	bics.w	r3, r0, r3
3400d7a4:	d004      	beq.n	3400d7b0 <LL_ATON_RT_RunEpochBlock+0x7c>
        return LL_ATON_RT_WFE;
3400d7a6:	2001      	movs	r0, #1
}
3400d7a8:	b002      	add	sp, #8
3400d7aa:	bd70      	pop	{r4, r5, r6, pc}
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400d7ac:	68c0      	ldr	r0, [r0, #12]
3400d7ae:	e7ef      	b.n	3400d790 <LL_ATON_RT_RunEpochBlock+0x5c>
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
3400d7b0:	4b75      	ldr	r3, [pc, #468]	@ (3400d988 <LL_ATON_RT_RunEpochBlock+0x254>)
3400d7b2:	681b      	ldr	r3, [r3, #0]
3400d7b4:	42a3      	cmp	r3, r4
3400d7b6:	d004      	beq.n	3400d7c2 <LL_ATON_RT_RunEpochBlock+0x8e>
3400d7b8:	f240 2171 	movw	r1, #625	@ 0x271
3400d7bc:	4b73      	ldr	r3, [pc, #460]	@ (3400d98c <LL_ATON_RT_RunEpochBlock+0x258>)
3400d7be:	4a6d      	ldr	r2, [pc, #436]	@ (3400d974 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d7c0:	e7bf      	b.n	3400d742 <LL_ATON_RT_RunEpochBlock+0xe>
3400d7c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400d7c6:	4a72      	ldr	r2, [pc, #456]	@ (3400d990 <LL_ATON_RT_RunEpochBlock+0x25c>)
3400d7c8:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d7cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d7d0:	f3bf 8f6f 	isb	sy
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
3400d7d4:	69e3      	ldr	r3, [r4, #28]
3400d7d6:	ea23 0300 	bic.w	r3, r3, r0
3400d7da:	61e3      	str	r3, [r4, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d7dc:	6051      	str	r1, [r2, #4]
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d7de:	6860      	ldr	r0, [r4, #4]
3400d7e0:	4621      	mov	r1, r4
3400d7e2:	f7ff fdab 	bl	3400d33c <__LL_ATON_RT_ExecEndEpochBlock>
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400d7e6:	4620      	mov	r0, r4
3400d7e8:	f7ff fe12 	bl	3400d410 <__LL_ATON_RT_DetermineNextEpochBlock>
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
3400d7ec:	6863      	ldr	r3, [r4, #4]
3400d7ee:	8a1b      	ldrh	r3, [r3, #16]
3400d7f0:	071b      	lsls	r3, r3, #28
3400d7f2:	d534      	bpl.n	3400d85e <LL_ATON_RT_RunEpochBlock+0x12a>
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
3400d7f4:	6923      	ldr	r3, [r4, #16]
3400d7f6:	2b00      	cmp	r3, #0
3400d7f8:	f000 80b7 	beq.w	3400d96a <LL_ATON_RT_RunEpochBlock+0x236>
      LL_ATON_ASSERT(nn_instance == NULL);

      nn_instance = __ll_current_aton_ip_owner;
    }

    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400d7fc:	4b62      	ldr	r3, [pc, #392]	@ (3400d988 <LL_ATON_RT_RunEpochBlock+0x254>)
3400d7fe:	681a      	ldr	r2, [r3, #0]
3400d800:	b932      	cbnz	r2, 3400d810 <LL_ATON_RT_RunEpochBlock+0xdc>
3400d802:	2197      	movs	r1, #151	@ 0x97
3400d804:	4b63      	ldr	r3, [pc, #396]	@ (3400d994 <LL_ATON_RT_RunEpochBlock+0x260>)
3400d806:	4a64      	ldr	r2, [pc, #400]	@ (3400d998 <LL_ATON_RT_RunEpochBlock+0x264>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d808:	4864      	ldr	r0, [pc, #400]	@ (3400d99c <LL_ATON_RT_RunEpochBlock+0x268>)
3400d80a:	e79b      	b.n	3400d744 <LL_ATON_RT_RunEpochBlock+0x10>
  bool this_run_executed_end_epoch = false;
3400d80c:	4606      	mov	r6, r0
3400d80e:	e7ed      	b.n	3400d7ec <LL_ATON_RT_RunEpochBlock+0xb8>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
3400d810:	6862      	ldr	r2, [r4, #4]
3400d812:	8a12      	ldrh	r2, [r2, #16]
3400d814:	0716      	lsls	r6, r2, #28
3400d816:	d403      	bmi.n	3400d820 <LL_ATON_RT_RunEpochBlock+0xec>
3400d818:	2198      	movs	r1, #152	@ 0x98
3400d81a:	4b61      	ldr	r3, [pc, #388]	@ (3400d9a0 <LL_ATON_RT_RunEpochBlock+0x26c>)
3400d81c:	4a5e      	ldr	r2, [pc, #376]	@ (3400d998 <LL_ATON_RT_RunEpochBlock+0x264>)
3400d81e:	e7f3      	b.n	3400d808 <LL_ATON_RT_RunEpochBlock+0xd4>
                          : EpochBlock_IsEpochInternal(nn_instance->exec_state.current_epoch_block));
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
3400d820:	6922      	ldr	r2, [r4, #16]
3400d822:	8a12      	ldrh	r2, [r2, #16]
3400d824:	0655      	lsls	r5, r2, #25
3400d826:	d403      	bmi.n	3400d830 <LL_ATON_RT_RunEpochBlock+0xfc>
3400d828:	219a      	movs	r1, #154	@ 0x9a
3400d82a:	4b5e      	ldr	r3, [pc, #376]	@ (3400d9a4 <LL_ATON_RT_RunEpochBlock+0x270>)
3400d82c:	4a5a      	ldr	r2, [pc, #360]	@ (3400d998 <LL_ATON_RT_RunEpochBlock+0x264>)
3400d82e:	e7eb      	b.n	3400d808 <LL_ATON_RT_RunEpochBlock+0xd4>

    /* Clear owner */
    if (unlock)
    {
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
3400d830:	6818      	ldr	r0, [r3, #0]
3400d832:	f7ff fd33 	bl	3400d29c <__ll_clear_aton_owner>
    }

    /* set old context */
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400d836:	68e3      	ldr	r3, [r4, #12]
3400d838:	b11b      	cbz	r3, 3400d842 <LL_ATON_RT_RunEpochBlock+0x10e>
3400d83a:	21a3      	movs	r1, #163	@ 0xa3
3400d83c:	4b5a      	ldr	r3, [pc, #360]	@ (3400d9a8 <LL_ATON_RT_RunEpochBlock+0x274>)
3400d83e:	4a56      	ldr	r2, [pc, #344]	@ (3400d998 <LL_ATON_RT_RunEpochBlock+0x264>)
3400d840:	e7e2      	b.n	3400d808 <LL_ATON_RT_RunEpochBlock+0xd4>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
3400d842:	6922      	ldr	r2, [r4, #16]
3400d844:	6062      	str	r2, [r4, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3400d846:	6962      	ldr	r2, [r4, #20]
3400d848:	60a2      	str	r2, [r4, #8]

#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
3400d84a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
3400d84c:	6262      	str	r2, [r4, #36]	@ 0x24
#endif

    /* reset saved context */
    nn_instance->exec_state.saved_current_epoch_block = NULL;
3400d84e:	6123      	str	r3, [r4, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
3400d850:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d852:	62a3      	str	r3, [r4, #40]	@ 0x28
        nn_instance->exec_state.current_epoch_block++;
3400d854:	6863      	ldr	r3, [r4, #4]
3400d856:	3314      	adds	r3, #20
3400d858:	6063      	str	r3, [r4, #4]
        return LL_ATON_RT_NO_WFE;
3400d85a:	2000      	movs	r0, #0
3400d85c:	e7a4      	b.n	3400d7a8 <LL_ATON_RT_RunEpochBlock+0x74>
    if (this_run_executed_end_epoch)
3400d85e:	2e00      	cmp	r6, #0
3400d860:	d1fb      	bne.n	3400d85a <LL_ATON_RT_RunEpochBlock+0x126>
    if (!nn_instance->exec_state.current_epoch_block_started)
3400d862:	f894 3020 	ldrb.w	r3, [r4, #32]
3400d866:	2b00      	cmp	r3, #0
3400d868:	d169      	bne.n	3400d93e <LL_ATON_RT_RunEpochBlock+0x20a>
      nn_instance->exec_state.current_epoch_block_started = true;
3400d86a:	2301      	movs	r3, #1
3400d86c:	f884 3020 	strb.w	r3, [r4, #32]
      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d870:	6865      	ldr	r5, [r4, #4]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400d872:	68e3      	ldr	r3, [r4, #12]
3400d874:	b11b      	cbz	r3, 3400d87e <LL_ATON_RT_RunEpochBlock+0x14a>
3400d876:	2161      	movs	r1, #97	@ 0x61
3400d878:	4b4b      	ldr	r3, [pc, #300]	@ (3400d9a8 <LL_ATON_RT_RunEpochBlock+0x274>)
3400d87a:	4a4c      	ldr	r2, [pc, #304]	@ (3400d9ac <LL_ATON_RT_RunEpochBlock+0x278>)
3400d87c:	e761      	b.n	3400d742 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d87e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d880:	b11b      	cbz	r3, 3400d88a <LL_ATON_RT_RunEpochBlock+0x156>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
3400d882:	462a      	mov	r2, r5
3400d884:	4621      	mov	r1, r4
3400d886:	4630      	mov	r0, r6
3400d888:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
3400d88a:	8a2b      	ldrh	r3, [r5, #16]
  if (EpochBlock_IsEpochStart(eb))
3400d88c:	07d8      	lsls	r0, r3, #31
3400d88e:	d505      	bpl.n	3400d89c <LL_ATON_RT_RunEpochBlock+0x168>
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400d890:	69e2      	ldr	r2, [r4, #28]
3400d892:	b11a      	cbz	r2, 3400d89c <LL_ATON_RT_RunEpochBlock+0x168>
3400d894:	2156      	movs	r1, #86	@ 0x56
3400d896:	4b46      	ldr	r3, [pc, #280]	@ (3400d9b0 <LL_ATON_RT_RunEpochBlock+0x27c>)
3400d898:	4a46      	ldr	r2, [pc, #280]	@ (3400d9b4 <LL_ATON_RT_RunEpochBlock+0x280>)
3400d89a:	e7b5      	b.n	3400d808 <LL_ATON_RT_RunEpochBlock+0xd4>
  if (EpochBlock_IsEpochPureHW(eb) ||
3400d89c:	f013 0f50 	tst.w	r3, #80	@ 0x50
3400d8a0:	d015      	beq.n	3400d8ce <LL_ATON_RT_RunEpochBlock+0x19a>
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
3400d8a2:	4a39      	ldr	r2, [pc, #228]	@ (3400d988 <LL_ATON_RT_RunEpochBlock+0x254>)
3400d8a4:	6811      	ldr	r1, [r2, #0]
3400d8a6:	428c      	cmp	r4, r1
3400d8a8:	d103      	bne.n	3400d8b2 <LL_ATON_RT_RunEpochBlock+0x17e>
3400d8aa:	2131      	movs	r1, #49	@ 0x31
3400d8ac:	4b42      	ldr	r3, [pc, #264]	@ (3400d9b8 <LL_ATON_RT_RunEpochBlock+0x284>)
3400d8ae:	4a43      	ldr	r2, [pc, #268]	@ (3400d9bc <LL_ATON_RT_RunEpochBlock+0x288>)
3400d8b0:	e7aa      	b.n	3400d808 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
3400d8b2:	6811      	ldr	r1, [r2, #0]
3400d8b4:	b119      	cbz	r1, 3400d8be <LL_ATON_RT_RunEpochBlock+0x18a>
3400d8b6:	2135      	movs	r1, #53	@ 0x35
3400d8b8:	4b41      	ldr	r3, [pc, #260]	@ (3400d9c0 <LL_ATON_RT_RunEpochBlock+0x28c>)
3400d8ba:	4a40      	ldr	r2, [pc, #256]	@ (3400d9bc <LL_ATON_RT_RunEpochBlock+0x288>)
3400d8bc:	e7a4      	b.n	3400d808 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d8be:	4941      	ldr	r1, [pc, #260]	@ (3400d9c4 <LL_ATON_RT_RunEpochBlock+0x290>)
3400d8c0:	6809      	ldr	r1, [r1, #0]
3400d8c2:	b119      	cbz	r1, 3400d8cc <LL_ATON_RT_RunEpochBlock+0x198>
3400d8c4:	2139      	movs	r1, #57	@ 0x39
3400d8c6:	4b40      	ldr	r3, [pc, #256]	@ (3400d9c8 <LL_ATON_RT_RunEpochBlock+0x294>)
3400d8c8:	4a3c      	ldr	r2, [pc, #240]	@ (3400d9bc <LL_ATON_RT_RunEpochBlock+0x288>)
3400d8ca:	e79d      	b.n	3400d808 <LL_ATON_RT_RunEpochBlock+0xd4>
    __ll_current_aton_ip_owner = new_owner;
3400d8cc:	6014      	str	r4, [r2, #0]
  if (!EpochBlock_IsEpochBlob(eb))
3400d8ce:	0759      	lsls	r1, r3, #29
3400d8d0:	d41c      	bmi.n	3400d90c <LL_ATON_RT_RunEpochBlock+0x1d8>
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
3400d8d2:	f013 0f90 	tst.w	r3, #144	@ 0x90
3400d8d6:	d00a      	beq.n	3400d8ee <LL_ATON_RT_RunEpochBlock+0x1ba>
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
3400d8d8:	4b2b      	ldr	r3, [pc, #172]	@ (3400d988 <LL_ATON_RT_RunEpochBlock+0x254>)
3400d8da:	681b      	ldr	r3, [r3, #0]
3400d8dc:	429c      	cmp	r4, r3
3400d8de:	d003      	beq.n	3400d8e8 <LL_ATON_RT_RunEpochBlock+0x1b4>
3400d8e0:	2178      	movs	r1, #120	@ 0x78
3400d8e2:	4b2a      	ldr	r3, [pc, #168]	@ (3400d98c <LL_ATON_RT_RunEpochBlock+0x258>)
3400d8e4:	4a31      	ldr	r2, [pc, #196]	@ (3400d9ac <LL_ATON_RT_RunEpochBlock+0x278>)
3400d8e6:	e72c      	b.n	3400d742 <LL_ATON_RT_RunEpochBlock+0xe>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3400d8e8:	68e8      	ldr	r0, [r5, #12]
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400d8ea:	f7ff fcf7 	bl	3400d2dc <__LL_ATON_RT_SetWaitMask>
  if (eb->start_epoch_block != NULL)
3400d8ee:	682b      	ldr	r3, [r5, #0]
3400d8f0:	b10b      	cbz	r3, 3400d8f6 <LL_ATON_RT_RunEpochBlock+0x1c2>
    eb->start_epoch_block((const void *)eb);
3400d8f2:	4628      	mov	r0, r5
3400d8f4:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400d8f6:	8a2b      	ldrh	r3, [r5, #16]
3400d8f8:	075a      	lsls	r2, r3, #29
3400d8fa:	d51a      	bpl.n	3400d932 <LL_ATON_RT_RunEpochBlock+0x1fe>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400d8fc:	4628      	mov	r0, r5
3400d8fe:	f7ff fd09 	bl	3400d314 <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d902:	b130      	cbz	r0, 3400d912 <LL_ATON_RT_RunEpochBlock+0x1de>
3400d904:	21a4      	movs	r1, #164	@ 0xa4
3400d906:	4b31      	ldr	r3, [pc, #196]	@ (3400d9cc <LL_ATON_RT_RunEpochBlock+0x298>)
3400d908:	4a28      	ldr	r2, [pc, #160]	@ (3400d9ac <LL_ATON_RT_RunEpochBlock+0x278>)
3400d90a:	e71a      	b.n	3400d742 <LL_ATON_RT_RunEpochBlock+0xe>
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400d90c:	f240 30ff 	movw	r0, #1023	@ 0x3ff
3400d910:	e7eb      	b.n	3400d8ea <LL_ATON_RT_RunEpochBlock+0x1b6>
    conf.stepmode = 0;
3400d912:	f89d 2004 	ldrb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400d916:	68ab      	ldr	r3, [r5, #8]
    conf.stepmode = 0;
3400d918:	f360 0200 	bfi	r2, r0, #0, #1
    LL_EpochCtrl_Init(ecId, &conf);
3400d91c:	4669      	mov	r1, sp
    conf.stepmode = 0;
3400d91e:	f88d 2004 	strb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400d922:	9300      	str	r3, [sp, #0]
    LL_EpochCtrl_Init(ecId, &conf);
3400d924:	f7ff fba4 	bl	3400d070 <LL_EpochCtrl_Init>
    ATON_ENABLE(EPOCHCTRL, ecId);
3400d928:	4a29      	ldr	r2, [pc, #164]	@ (3400d9d0 <LL_ATON_RT_RunEpochBlock+0x29c>)
3400d92a:	6813      	ldr	r3, [r2, #0]
3400d92c:	f043 0301 	orr.w	r3, r3, #1
3400d930:	6013      	str	r3, [r2, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d932:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d934:	b11b      	cbz	r3, 3400d93e <LL_ATON_RT_RunEpochBlock+0x20a>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3400d936:	462a      	mov	r2, r5
3400d938:	4621      	mov	r1, r4
3400d93a:	2001      	movs	r0, #1
3400d93c:	4798      	blx	r3
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400d93e:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400d940:	8a03      	ldrh	r3, [r0, #16]
3400d942:	075b      	lsls	r3, r3, #29
3400d944:	d50f      	bpl.n	3400d966 <LL_ATON_RT_RunEpochBlock+0x232>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400d946:	f7ff fce5 	bl	3400d314 <EpochBlock_EpochControllerUnit>
3400d94a:	2301      	movs	r3, #1
3400d94c:	fa03 f000 	lsl.w	r0, r3, r0
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400d950:	2800      	cmp	r0, #0
3400d952:	f47f af28 	bne.w	3400d7a6 <LL_ATON_RT_RunEpochBlock+0x72>
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d956:	6860      	ldr	r0, [r4, #4]
3400d958:	4621      	mov	r1, r4
3400d95a:	f7ff fcef 	bl	3400d33c <__LL_ATON_RT_ExecEndEpochBlock>
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400d95e:	4620      	mov	r0, r4
3400d960:	f7ff fd56 	bl	3400d410 <__LL_ATON_RT_DetermineNextEpochBlock>
      return LL_ATON_RT_NO_WFE;
3400d964:	e779      	b.n	3400d85a <LL_ATON_RT_RunEpochBlock+0x126>
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400d966:	68c0      	ldr	r0, [r0, #12]
3400d968:	e7f2      	b.n	3400d950 <LL_ATON_RT_RunEpochBlock+0x21c>
        return LL_ATON_RT_DONE;
3400d96a:	2002      	movs	r0, #2
3400d96c:	e71c      	b.n	3400d7a8 <LL_ATON_RT_RunEpochBlock+0x74>
3400d96e:	bf00      	nop
3400d970:	3401163a 	.word	0x3401163a
3400d974:	34012586 	.word	0x34012586
3400d978:	3401150a 	.word	0x3401150a
3400d97c:	340118c2 	.word	0x340118c2
3400d980:	340118fd 	.word	0x340118fd
3400d984:	340118b9 	.word	0x340118b9
3400d988:	340132ac 	.word	0x340132ac
3400d98c:	3401195f 	.word	0x3401195f
3400d990:	e000e100 	.word	0xe000e100
3400d994:	3401141f 	.word	0x3401141f
3400d998:	3401255f 	.word	0x3401255f
3400d99c:	3401136b 	.word	0x3401136b
3400d9a0:	34011989 	.word	0x34011989
3400d9a4:	34011a25 	.word	0x34011a25
3400d9a8:	34011a71 	.word	0x34011a71
3400d9ac:	3401253e 	.word	0x3401253e
3400d9b0:	34011655 	.word	0x34011655
3400d9b4:	3401251f 	.word	0x3401251f
3400d9b8:	34011aa9 	.word	0x34011aa9
3400d9bc:	3401250b 	.word	0x3401250b
3400d9c0:	34011ad1 	.word	0x34011ad1
3400d9c4:	340132a8 	.word	0x340132a8
3400d9c8:	34011403 	.word	0x34011403
3400d9cc:	34011501 	.word	0x34011501
3400d9d0:	580fe000 	.word	0x580fe000

3400d9d4 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3400d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400d9d6:	4b38      	ldr	r3, [pc, #224]	@ (3400dab8 <NPU0_IRQHandler+0xe4>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3400d9d8:	4c38      	ldr	r4, [pc, #224]	@ (3400dabc <NPU0_IRQHandler+0xe8>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400d9da:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
3400d9dc:	6823      	ldr	r3, [r4, #0]
3400d9de:	b343      	cbz	r3, 3400da32 <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3400d9e0:	6823      	ldr	r3, [r4, #0]
3400d9e2:	685b      	ldr	r3, [r3, #4]
3400d9e4:	b933      	cbnz	r3, 3400d9f4 <NPU0_IRQHandler+0x20>
3400d9e6:	f240 31b1 	movw	r1, #945	@ 0x3b1
3400d9ea:	4b35      	ldr	r3, [pc, #212]	@ (3400dac0 <NPU0_IRQHandler+0xec>)
3400d9ec:	4a35      	ldr	r2, [pc, #212]	@ (3400dac4 <NPU0_IRQHandler+0xf0>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d9ee:	4836      	ldr	r0, [pc, #216]	@ (3400dac8 <NPU0_IRQHandler+0xf4>)
3400d9f0:	f000 f8a6 	bl	3400db40 <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400d9f4:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3400d9f6:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400d9f8:	8a1b      	ldrh	r3, [r3, #16]
3400d9fa:	075b      	lsls	r3, r3, #29
3400d9fc:	d40c      	bmi.n	3400da18 <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
3400d9fe:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
3400da02:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400da06:	f7ff fd47 	bl	3400d498 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400da0a:	6823      	ldr	r3, [r4, #0]
3400da0c:	b99b      	cbnz	r3, 3400da36 <NPU0_IRQHandler+0x62>
3400da0e:	f240 31d2 	movw	r1, #978	@ 0x3d2
3400da12:	4b2e      	ldr	r3, [pc, #184]	@ (3400dacc <NPU0_IRQHandler+0xf8>)
3400da14:	4a2b      	ldr	r2, [pc, #172]	@ (3400dac4 <NPU0_IRQHandler+0xf0>)
3400da16:	e7ea      	b.n	3400d9ee <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400da18:	6823      	ldr	r3, [r4, #0]
3400da1a:	6858      	ldr	r0, [r3, #4]
3400da1c:	f7ff fc7a 	bl	3400d314 <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400da20:	b120      	cbz	r0, 3400da2c <NPU0_IRQHandler+0x58>
3400da22:	f240 31be 	movw	r1, #958	@ 0x3be
3400da26:	4b2a      	ldr	r3, [pc, #168]	@ (3400dad0 <NPU0_IRQHandler+0xfc>)
3400da28:	4a26      	ldr	r2, [pc, #152]	@ (3400dac4 <NPU0_IRQHandler+0xf0>)
3400da2a:	e7e0      	b.n	3400d9ee <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
3400da2c:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
3400da30:	e7e9      	b.n	3400da06 <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400da32:	4628      	mov	r0, r5
3400da34:	e7e7      	b.n	3400da06 <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3400da36:	6823      	ldr	r3, [r4, #0]
3400da38:	685b      	ldr	r3, [r3, #4]
3400da3a:	8a1b      	ldrh	r3, [r3, #16]
3400da3c:	f013 0304 	ands.w	r3, r3, #4
3400da40:	d123      	bne.n	3400da8a <NPU0_IRQHandler+0xb6>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3400da42:	6822      	ldr	r2, [r4, #0]
3400da44:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
3400da46:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
3400da48:	402a      	ands	r2, r5
3400da4a:	d017      	beq.n	3400da7c <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
3400da4c:	f04f 0c01 	mov.w	ip, #1
3400da50:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400da52:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400da54:	4e1f      	ldr	r6, [pc, #124]	@ (3400dad4 <NPU0_IRQHandler+0x100>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400da56:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
3400da58:	fa22 f703 	lsr.w	r7, r2, r3
3400da5c:	07ff      	lsls	r7, r7, #31
3400da5e:	d507      	bpl.n	3400da70 <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400da60:	031f      	lsls	r7, r3, #12
3400da62:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
3400da66:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
3400da6a:	fa0c f703 	lsl.w	r7, ip, r3
3400da6e:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
3400da70:	3801      	subs	r0, #1
3400da72:	f103 0301 	add.w	r3, r3, #1
3400da76:	d1ef      	bne.n	3400da58 <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400da78:	6823      	ldr	r3, [r4, #0]
3400da7a:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
3400da7c:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3400da80:	4b0d      	ldr	r3, [pc, #52]	@ (3400dab8 <NPU0_IRQHandler+0xe4>)
3400da82:	611d      	str	r5, [r3, #16]
3400da84:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
3400da88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400da8a:	6823      	ldr	r3, [r4, #0]
3400da8c:	6858      	ldr	r0, [r3, #4]
3400da8e:	f7ff fc41 	bl	3400d314 <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400da92:	b120      	cbz	r0, 3400da9e <NPU0_IRQHandler+0xca>
3400da94:	f240 3191 	movw	r1, #913	@ 0x391
3400da98:	4b0d      	ldr	r3, [pc, #52]	@ (3400dad0 <NPU0_IRQHandler+0xfc>)
3400da9a:	4a0f      	ldr	r2, [pc, #60]	@ (3400dad8 <NPU0_IRQHandler+0x104>)
3400da9c:	e7a7      	b.n	3400d9ee <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3400da9e:	00eb      	lsls	r3, r5, #3
3400daa0:	d5ec      	bpl.n	3400da7c <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3400daa2:	4b0e      	ldr	r3, [pc, #56]	@ (3400dadc <NPU0_IRQHandler+0x108>)
3400daa4:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3400daa6:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400daa8:	6823      	ldr	r3, [r4, #0]
3400daaa:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400daac:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
3400daae:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400dab2:	61d3      	str	r3, [r2, #28]
3400dab4:	e7e2      	b.n	3400da7c <NPU0_IRQHandler+0xa8>
3400dab6:	bf00      	nop
3400dab8:	580e1000 	.word	0x580e1000
3400dabc:	340132ac 	.word	0x340132ac
3400dac0:	34011afb 	.word	0x34011afb
3400dac4:	3401247f 	.word	0x3401247f
3400dac8:	3401150a 	.word	0x3401150a
3400dacc:	3401141f 	.word	0x3401141f
3400dad0:	34011501 	.word	0x34011501
3400dad4:	580e503c 	.word	0x580e503c
3400dad8:	34012451 	.word	0x34012451
3400dadc:	580fe000 	.word	0x580fe000

3400dae0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3400dae0:	480f      	ldr	r0, [pc, #60]	@ (3400db20 <LoopForever+0x4>)
  msr   MSPLIM, r0
3400dae2:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3400dae6:	480f      	ldr	r0, [pc, #60]	@ (3400db24 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3400dae8:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3400daea:	f7f4 fc5d 	bl	340023a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3400daee:	480e      	ldr	r0, [pc, #56]	@ (3400db28 <LoopForever+0xc>)
  ldr r1, =_edata
3400daf0:	490e      	ldr	r1, [pc, #56]	@ (3400db2c <LoopForever+0x10>)
  ldr r2, =_sidata
3400daf2:	4a0f      	ldr	r2, [pc, #60]	@ (3400db30 <LoopForever+0x14>)
  movs r3, #0
3400daf4:	2300      	movs	r3, #0
  b LoopCopyDataInit
3400daf6:	e002      	b.n	3400dafe <LoopCopyDataInit>

3400daf8 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3400daf8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3400dafa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3400dafc:	3304      	adds	r3, #4

3400dafe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3400dafe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3400db00:	428c      	cmp	r4, r1
  bcc CopyDataInit
3400db02:	d3f9      	bcc.n	3400daf8 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3400db04:	4a0b      	ldr	r2, [pc, #44]	@ (3400db34 <LoopForever+0x18>)
  ldr r4, =_ebss
3400db06:	4c0c      	ldr	r4, [pc, #48]	@ (3400db38 <LoopForever+0x1c>)
  movs r3, #0
3400db08:	2300      	movs	r3, #0
  b LoopFillZerobss
3400db0a:	e001      	b.n	3400db10 <LoopFillZerobss>

3400db0c <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3400db0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3400db0e:	3204      	adds	r2, #4

3400db10 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3400db10:	42a2      	cmp	r2, r4
  bcc FillZerobss
3400db12:	d3fb      	bcc.n	3400db0c <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3400db14:	f001 fa60 	bl	3400efd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3400db18:	f7f3 fdca 	bl	340016b0 <main>

3400db1c <LoopForever>:

LoopForever:
  b LoopForever
3400db1c:	e7fe      	b.n	3400db1c <LoopForever>
3400db1e:	0000      	.short	0x0000
  ldr   r0, =_sstack
3400db20:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3400db24:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3400db28:	340127e4 	.word	0x340127e4
  ldr r1, =_edata
3400db2c:	34012a00 	.word	0x34012a00
  ldr r2, =_sidata
3400db30:	340127e4 	.word	0x340127e4
  ldr r2, =_sbss
3400db34:	34012a00 	.word	0x34012a00
  ldr r4, =_ebss
3400db38:	34013400 	.word	0x34013400

3400db3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3400db3c:	e7fe      	b.n	3400db3c <ADC1_2_IRQHandler>
	...

3400db40 <__assert_func>:
3400db40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400db42:	4614      	mov	r4, r2
3400db44:	461a      	mov	r2, r3
3400db46:	4b09      	ldr	r3, [pc, #36]	@ (3400db6c <__assert_func+0x2c>)
3400db48:	4605      	mov	r5, r0
3400db4a:	681b      	ldr	r3, [r3, #0]
3400db4c:	68d8      	ldr	r0, [r3, #12]
3400db4e:	b14c      	cbz	r4, 3400db64 <__assert_func+0x24>
3400db50:	4b07      	ldr	r3, [pc, #28]	@ (3400db70 <__assert_func+0x30>)
3400db52:	9100      	str	r1, [sp, #0]
3400db54:	4907      	ldr	r1, [pc, #28]	@ (3400db74 <__assert_func+0x34>)
3400db56:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400db5a:	462b      	mov	r3, r5
3400db5c:	f000 fe6a 	bl	3400e834 <fiprintf>
3400db60:	f001 fa7c 	bl	3400f05c <abort>
3400db64:	4b04      	ldr	r3, [pc, #16]	@ (3400db78 <__assert_func+0x38>)
3400db66:	461c      	mov	r4, r3
3400db68:	e7f3      	b.n	3400db52 <__assert_func+0x12>
3400db6a:	bf00      	nop
3400db6c:	34012844 	.word	0x34012844
3400db70:	34011b45 	.word	0x34011b45
3400db74:	34011b52 	.word	0x34011b52
3400db78:	34011206 	.word	0x34011206

3400db7c <malloc>:
3400db7c:	4b02      	ldr	r3, [pc, #8]	@ (3400db88 <malloc+0xc>)
3400db7e:	4601      	mov	r1, r0
3400db80:	6818      	ldr	r0, [r3, #0]
3400db82:	f000 b82d 	b.w	3400dbe0 <_malloc_r>
3400db86:	bf00      	nop
3400db88:	34012844 	.word	0x34012844

3400db8c <free>:
3400db8c:	4b02      	ldr	r3, [pc, #8]	@ (3400db98 <free+0xc>)
3400db8e:	4601      	mov	r1, r0
3400db90:	6818      	ldr	r0, [r3, #0]
3400db92:	f002 b857 	b.w	3400fc44 <_free_r>
3400db96:	bf00      	nop
3400db98:	34012844 	.word	0x34012844

3400db9c <sbrk_aligned>:
3400db9c:	b570      	push	{r4, r5, r6, lr}
3400db9e:	4e0f      	ldr	r6, [pc, #60]	@ (3400dbdc <sbrk_aligned+0x40>)
3400dba0:	460c      	mov	r4, r1
3400dba2:	4605      	mov	r5, r0
3400dba4:	6831      	ldr	r1, [r6, #0]
3400dba6:	b911      	cbnz	r1, 3400dbae <sbrk_aligned+0x12>
3400dba8:	f001 f9ee 	bl	3400ef88 <_sbrk_r>
3400dbac:	6030      	str	r0, [r6, #0]
3400dbae:	4621      	mov	r1, r4
3400dbb0:	4628      	mov	r0, r5
3400dbb2:	f001 f9e9 	bl	3400ef88 <_sbrk_r>
3400dbb6:	1c43      	adds	r3, r0, #1
3400dbb8:	d103      	bne.n	3400dbc2 <sbrk_aligned+0x26>
3400dbba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3400dbbe:	4620      	mov	r0, r4
3400dbc0:	bd70      	pop	{r4, r5, r6, pc}
3400dbc2:	1cc4      	adds	r4, r0, #3
3400dbc4:	f024 0403 	bic.w	r4, r4, #3
3400dbc8:	42a0      	cmp	r0, r4
3400dbca:	d0f8      	beq.n	3400dbbe <sbrk_aligned+0x22>
3400dbcc:	1a21      	subs	r1, r4, r0
3400dbce:	4628      	mov	r0, r5
3400dbd0:	f001 f9da 	bl	3400ef88 <_sbrk_r>
3400dbd4:	3001      	adds	r0, #1
3400dbd6:	d1f2      	bne.n	3400dbbe <sbrk_aligned+0x22>
3400dbd8:	e7ef      	b.n	3400dbba <sbrk_aligned+0x1e>
3400dbda:	bf00      	nop
3400dbdc:	340132b0 	.word	0x340132b0

3400dbe0 <_malloc_r>:
3400dbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400dbe4:	1ccd      	adds	r5, r1, #3
3400dbe6:	4606      	mov	r6, r0
3400dbe8:	f025 0503 	bic.w	r5, r5, #3
3400dbec:	3508      	adds	r5, #8
3400dbee:	2d0c      	cmp	r5, #12
3400dbf0:	bf38      	it	cc
3400dbf2:	250c      	movcc	r5, #12
3400dbf4:	2d00      	cmp	r5, #0
3400dbf6:	db01      	blt.n	3400dbfc <_malloc_r+0x1c>
3400dbf8:	42a9      	cmp	r1, r5
3400dbfa:	d904      	bls.n	3400dc06 <_malloc_r+0x26>
3400dbfc:	230c      	movs	r3, #12
3400dbfe:	6033      	str	r3, [r6, #0]
3400dc00:	2000      	movs	r0, #0
3400dc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400dc06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3400dcdc <_malloc_r+0xfc>
3400dc0a:	f000 f869 	bl	3400dce0 <__malloc_lock>
3400dc0e:	f8d8 3000 	ldr.w	r3, [r8]
3400dc12:	461c      	mov	r4, r3
3400dc14:	bb44      	cbnz	r4, 3400dc68 <_malloc_r+0x88>
3400dc16:	4629      	mov	r1, r5
3400dc18:	4630      	mov	r0, r6
3400dc1a:	f7ff ffbf 	bl	3400db9c <sbrk_aligned>
3400dc1e:	1c43      	adds	r3, r0, #1
3400dc20:	4604      	mov	r4, r0
3400dc22:	d158      	bne.n	3400dcd6 <_malloc_r+0xf6>
3400dc24:	f8d8 4000 	ldr.w	r4, [r8]
3400dc28:	4627      	mov	r7, r4
3400dc2a:	2f00      	cmp	r7, #0
3400dc2c:	d143      	bne.n	3400dcb6 <_malloc_r+0xd6>
3400dc2e:	2c00      	cmp	r4, #0
3400dc30:	d04b      	beq.n	3400dcca <_malloc_r+0xea>
3400dc32:	6823      	ldr	r3, [r4, #0]
3400dc34:	4639      	mov	r1, r7
3400dc36:	4630      	mov	r0, r6
3400dc38:	eb04 0903 	add.w	r9, r4, r3
3400dc3c:	f001 f9a4 	bl	3400ef88 <_sbrk_r>
3400dc40:	4581      	cmp	r9, r0
3400dc42:	d142      	bne.n	3400dcca <_malloc_r+0xea>
3400dc44:	6821      	ldr	r1, [r4, #0]
3400dc46:	4630      	mov	r0, r6
3400dc48:	1a6d      	subs	r5, r5, r1
3400dc4a:	4629      	mov	r1, r5
3400dc4c:	f7ff ffa6 	bl	3400db9c <sbrk_aligned>
3400dc50:	3001      	adds	r0, #1
3400dc52:	d03a      	beq.n	3400dcca <_malloc_r+0xea>
3400dc54:	6823      	ldr	r3, [r4, #0]
3400dc56:	442b      	add	r3, r5
3400dc58:	6023      	str	r3, [r4, #0]
3400dc5a:	f8d8 3000 	ldr.w	r3, [r8]
3400dc5e:	685a      	ldr	r2, [r3, #4]
3400dc60:	bb62      	cbnz	r2, 3400dcbc <_malloc_r+0xdc>
3400dc62:	f8c8 7000 	str.w	r7, [r8]
3400dc66:	e00f      	b.n	3400dc88 <_malloc_r+0xa8>
3400dc68:	6822      	ldr	r2, [r4, #0]
3400dc6a:	1b52      	subs	r2, r2, r5
3400dc6c:	d420      	bmi.n	3400dcb0 <_malloc_r+0xd0>
3400dc6e:	2a0b      	cmp	r2, #11
3400dc70:	d917      	bls.n	3400dca2 <_malloc_r+0xc2>
3400dc72:	1961      	adds	r1, r4, r5
3400dc74:	42a3      	cmp	r3, r4
3400dc76:	6025      	str	r5, [r4, #0]
3400dc78:	bf18      	it	ne
3400dc7a:	6059      	strne	r1, [r3, #4]
3400dc7c:	6863      	ldr	r3, [r4, #4]
3400dc7e:	bf08      	it	eq
3400dc80:	f8c8 1000 	streq.w	r1, [r8]
3400dc84:	5162      	str	r2, [r4, r5]
3400dc86:	604b      	str	r3, [r1, #4]
3400dc88:	4630      	mov	r0, r6
3400dc8a:	f000 f82f 	bl	3400dcec <__malloc_unlock>
3400dc8e:	f104 000b 	add.w	r0, r4, #11
3400dc92:	1d23      	adds	r3, r4, #4
3400dc94:	f020 0007 	bic.w	r0, r0, #7
3400dc98:	1ac2      	subs	r2, r0, r3
3400dc9a:	bf1c      	itt	ne
3400dc9c:	1a1b      	subne	r3, r3, r0
3400dc9e:	50a3      	strne	r3, [r4, r2]
3400dca0:	e7af      	b.n	3400dc02 <_malloc_r+0x22>
3400dca2:	6862      	ldr	r2, [r4, #4]
3400dca4:	42a3      	cmp	r3, r4
3400dca6:	bf0c      	ite	eq
3400dca8:	f8c8 2000 	streq.w	r2, [r8]
3400dcac:	605a      	strne	r2, [r3, #4]
3400dcae:	e7eb      	b.n	3400dc88 <_malloc_r+0xa8>
3400dcb0:	4623      	mov	r3, r4
3400dcb2:	6864      	ldr	r4, [r4, #4]
3400dcb4:	e7ae      	b.n	3400dc14 <_malloc_r+0x34>
3400dcb6:	463c      	mov	r4, r7
3400dcb8:	687f      	ldr	r7, [r7, #4]
3400dcba:	e7b6      	b.n	3400dc2a <_malloc_r+0x4a>
3400dcbc:	461a      	mov	r2, r3
3400dcbe:	685b      	ldr	r3, [r3, #4]
3400dcc0:	42a3      	cmp	r3, r4
3400dcc2:	d1fb      	bne.n	3400dcbc <_malloc_r+0xdc>
3400dcc4:	2300      	movs	r3, #0
3400dcc6:	6053      	str	r3, [r2, #4]
3400dcc8:	e7de      	b.n	3400dc88 <_malloc_r+0xa8>
3400dcca:	230c      	movs	r3, #12
3400dccc:	4630      	mov	r0, r6
3400dcce:	6033      	str	r3, [r6, #0]
3400dcd0:	f000 f80c 	bl	3400dcec <__malloc_unlock>
3400dcd4:	e794      	b.n	3400dc00 <_malloc_r+0x20>
3400dcd6:	6005      	str	r5, [r0, #0]
3400dcd8:	e7d6      	b.n	3400dc88 <_malloc_r+0xa8>
3400dcda:	bf00      	nop
3400dcdc:	340132b4 	.word	0x340132b4

3400dce0 <__malloc_lock>:
3400dce0:	4801      	ldr	r0, [pc, #4]	@ (3400dce8 <__malloc_lock+0x8>)
3400dce2:	f001 b99e 	b.w	3400f022 <__retarget_lock_acquire_recursive>
3400dce6:	bf00      	nop
3400dce8:	340133f8 	.word	0x340133f8

3400dcec <__malloc_unlock>:
3400dcec:	4801      	ldr	r0, [pc, #4]	@ (3400dcf4 <__malloc_unlock+0x8>)
3400dcee:	f001 b999 	b.w	3400f024 <__retarget_lock_release_recursive>
3400dcf2:	bf00      	nop
3400dcf4:	340133f8 	.word	0x340133f8

3400dcf8 <__cvt>:
3400dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
3400dcfa:	ed2d 8b02 	vpush	{d8}
3400dcfe:	eeb0 8b40 	vmov.f64	d8, d0
3400dd02:	b085      	sub	sp, #20
3400dd04:	4617      	mov	r7, r2
3400dd06:	460c      	mov	r4, r1
3400dd08:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3400dd0a:	ee18 2a90 	vmov	r2, s17
3400dd0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400dd10:	f025 0520 	bic.w	r5, r5, #32
3400dd14:	2a00      	cmp	r2, #0
3400dd16:	bfb6      	itet	lt
3400dd18:	222d      	movlt	r2, #45	@ 0x2d
3400dd1a:	2200      	movge	r2, #0
3400dd1c:	eeb1 8b40 	vneglt.f64	d8, d0
3400dd20:	2d46      	cmp	r5, #70	@ 0x46
3400dd22:	701a      	strb	r2, [r3, #0]
3400dd24:	d004      	beq.n	3400dd30 <__cvt+0x38>
3400dd26:	2d45      	cmp	r5, #69	@ 0x45
3400dd28:	d100      	bne.n	3400dd2c <__cvt+0x34>
3400dd2a:	3401      	adds	r4, #1
3400dd2c:	2102      	movs	r1, #2
3400dd2e:	e000      	b.n	3400dd32 <__cvt+0x3a>
3400dd30:	2103      	movs	r1, #3
3400dd32:	ab03      	add	r3, sp, #12
3400dd34:	eeb0 0b48 	vmov.f64	d0, d8
3400dd38:	4622      	mov	r2, r4
3400dd3a:	9301      	str	r3, [sp, #4]
3400dd3c:	ab02      	add	r3, sp, #8
3400dd3e:	9300      	str	r3, [sp, #0]
3400dd40:	4633      	mov	r3, r6
3400dd42:	f001 fa21 	bl	3400f188 <_dtoa_r>
3400dd46:	2d47      	cmp	r5, #71	@ 0x47
3400dd48:	d114      	bne.n	3400dd74 <__cvt+0x7c>
3400dd4a:	07fb      	lsls	r3, r7, #31
3400dd4c:	d50a      	bpl.n	3400dd64 <__cvt+0x6c>
3400dd4e:	1902      	adds	r2, r0, r4
3400dd50:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400dd54:	2130      	movs	r1, #48	@ 0x30
3400dd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dd5a:	bf08      	it	eq
3400dd5c:	9203      	streq	r2, [sp, #12]
3400dd5e:	9b03      	ldr	r3, [sp, #12]
3400dd60:	4293      	cmp	r3, r2
3400dd62:	d319      	bcc.n	3400dd98 <__cvt+0xa0>
3400dd64:	9b03      	ldr	r3, [sp, #12]
3400dd66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400dd68:	1a1b      	subs	r3, r3, r0
3400dd6a:	6013      	str	r3, [r2, #0]
3400dd6c:	b005      	add	sp, #20
3400dd6e:	ecbd 8b02 	vpop	{d8}
3400dd72:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400dd74:	2d46      	cmp	r5, #70	@ 0x46
3400dd76:	eb00 0204 	add.w	r2, r0, r4
3400dd7a:	d1e9      	bne.n	3400dd50 <__cvt+0x58>
3400dd7c:	7803      	ldrb	r3, [r0, #0]
3400dd7e:	2b30      	cmp	r3, #48	@ 0x30
3400dd80:	d107      	bne.n	3400dd92 <__cvt+0x9a>
3400dd82:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400dd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dd8a:	bf1c      	itt	ne
3400dd8c:	f1c4 0401 	rsbne	r4, r4, #1
3400dd90:	6034      	strne	r4, [r6, #0]
3400dd92:	6833      	ldr	r3, [r6, #0]
3400dd94:	441a      	add	r2, r3
3400dd96:	e7db      	b.n	3400dd50 <__cvt+0x58>
3400dd98:	1c5c      	adds	r4, r3, #1
3400dd9a:	9403      	str	r4, [sp, #12]
3400dd9c:	7019      	strb	r1, [r3, #0]
3400dd9e:	e7de      	b.n	3400dd5e <__cvt+0x66>

3400dda0 <__exponent>:
3400dda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400dda2:	2900      	cmp	r1, #0
3400dda4:	7002      	strb	r2, [r0, #0]
3400dda6:	bfba      	itte	lt
3400dda8:	4249      	neglt	r1, r1
3400ddaa:	232d      	movlt	r3, #45	@ 0x2d
3400ddac:	232b      	movge	r3, #43	@ 0x2b
3400ddae:	2909      	cmp	r1, #9
3400ddb0:	7043      	strb	r3, [r0, #1]
3400ddb2:	dd28      	ble.n	3400de06 <__exponent+0x66>
3400ddb4:	f10d 0307 	add.w	r3, sp, #7
3400ddb8:	270a      	movs	r7, #10
3400ddba:	461d      	mov	r5, r3
3400ddbc:	461a      	mov	r2, r3
3400ddbe:	3b01      	subs	r3, #1
3400ddc0:	fbb1 f6f7 	udiv	r6, r1, r7
3400ddc4:	fb07 1416 	mls	r4, r7, r6, r1
3400ddc8:	3430      	adds	r4, #48	@ 0x30
3400ddca:	f802 4c01 	strb.w	r4, [r2, #-1]
3400ddce:	460c      	mov	r4, r1
3400ddd0:	4631      	mov	r1, r6
3400ddd2:	2c63      	cmp	r4, #99	@ 0x63
3400ddd4:	dcf2      	bgt.n	3400ddbc <__exponent+0x1c>
3400ddd6:	3130      	adds	r1, #48	@ 0x30
3400ddd8:	1e94      	subs	r4, r2, #2
3400ddda:	f803 1c01 	strb.w	r1, [r3, #-1]
3400ddde:	1c41      	adds	r1, r0, #1
3400dde0:	4623      	mov	r3, r4
3400dde2:	42ab      	cmp	r3, r5
3400dde4:	d30a      	bcc.n	3400ddfc <__exponent+0x5c>
3400dde6:	f10d 0309 	add.w	r3, sp, #9
3400ddea:	1a9b      	subs	r3, r3, r2
3400ddec:	42ac      	cmp	r4, r5
3400ddee:	bf88      	it	hi
3400ddf0:	2300      	movhi	r3, #0
3400ddf2:	3302      	adds	r3, #2
3400ddf4:	4403      	add	r3, r0
3400ddf6:	1a18      	subs	r0, r3, r0
3400ddf8:	b003      	add	sp, #12
3400ddfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400ddfc:	f813 6b01 	ldrb.w	r6, [r3], #1
3400de00:	f801 6f01 	strb.w	r6, [r1, #1]!
3400de04:	e7ed      	b.n	3400dde2 <__exponent+0x42>
3400de06:	2330      	movs	r3, #48	@ 0x30
3400de08:	3130      	adds	r1, #48	@ 0x30
3400de0a:	7083      	strb	r3, [r0, #2]
3400de0c:	1d03      	adds	r3, r0, #4
3400de0e:	70c1      	strb	r1, [r0, #3]
3400de10:	e7f1      	b.n	3400ddf6 <__exponent+0x56>
3400de12:	0000      	movs	r0, r0
3400de14:	0000      	movs	r0, r0
	...

3400de18 <_printf_float>:
3400de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400de1c:	b08d      	sub	sp, #52	@ 0x34
3400de1e:	460c      	mov	r4, r1
3400de20:	4616      	mov	r6, r2
3400de22:	461f      	mov	r7, r3
3400de24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3400de28:	4605      	mov	r5, r0
3400de2a:	f001 f875 	bl	3400ef18 <_localeconv_r>
3400de2e:	f8d0 b000 	ldr.w	fp, [r0]
3400de32:	4658      	mov	r0, fp
3400de34:	f7f2 fcac 	bl	34000790 <strlen>
3400de38:	2300      	movs	r3, #0
3400de3a:	f894 9018 	ldrb.w	r9, [r4, #24]
3400de3e:	930a      	str	r3, [sp, #40]	@ 0x28
3400de40:	f8d8 3000 	ldr.w	r3, [r8]
3400de44:	6822      	ldr	r2, [r4, #0]
3400de46:	3307      	adds	r3, #7
3400de48:	9005      	str	r0, [sp, #20]
3400de4a:	f023 0307 	bic.w	r3, r3, #7
3400de4e:	f103 0108 	add.w	r1, r3, #8
3400de52:	f8c8 1000 	str.w	r1, [r8]
3400de56:	ed93 0b00 	vldr	d0, [r3]
3400de5a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3400e0b8 <_printf_float+0x2a0>
3400de5e:	eeb0 7bc0 	vabs.f64	d7, d0
3400de62:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3400de66:	eeb4 7b46 	vcmp.f64	d7, d6
3400de6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400de6e:	dd24      	ble.n	3400deba <_printf_float+0xa2>
3400de70:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3400de74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400de78:	d502      	bpl.n	3400de80 <_printf_float+0x68>
3400de7a:	232d      	movs	r3, #45	@ 0x2d
3400de7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400de80:	498f      	ldr	r1, [pc, #572]	@ (3400e0c0 <_printf_float+0x2a8>)
3400de82:	4b90      	ldr	r3, [pc, #576]	@ (3400e0c4 <_printf_float+0x2ac>)
3400de84:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3400de88:	bf8c      	ite	hi
3400de8a:	4688      	movhi	r8, r1
3400de8c:	4698      	movls	r8, r3
3400de8e:	f022 0204 	bic.w	r2, r2, #4
3400de92:	2303      	movs	r3, #3
3400de94:	f04f 0a00 	mov.w	sl, #0
3400de98:	6022      	str	r2, [r4, #0]
3400de9a:	6123      	str	r3, [r4, #16]
3400de9c:	4633      	mov	r3, r6
3400de9e:	aa0b      	add	r2, sp, #44	@ 0x2c
3400dea0:	4621      	mov	r1, r4
3400dea2:	4628      	mov	r0, r5
3400dea4:	9700      	str	r7, [sp, #0]
3400dea6:	f000 f9d1 	bl	3400e24c <_printf_common>
3400deaa:	3001      	adds	r0, #1
3400deac:	f040 8089 	bne.w	3400dfc2 <_printf_float+0x1aa>
3400deb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400deb4:	b00d      	add	sp, #52	@ 0x34
3400deb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400deba:	eeb4 0b40 	vcmp.f64	d0, d0
3400debe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dec2:	d709      	bvc.n	3400ded8 <_printf_float+0xc0>
3400dec4:	ee10 3a90 	vmov	r3, s1
3400dec8:	497f      	ldr	r1, [pc, #508]	@ (3400e0c8 <_printf_float+0x2b0>)
3400deca:	2b00      	cmp	r3, #0
3400decc:	bfbc      	itt	lt
3400dece:	232d      	movlt	r3, #45	@ 0x2d
3400ded0:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3400ded4:	4b7d      	ldr	r3, [pc, #500]	@ (3400e0cc <_printf_float+0x2b4>)
3400ded6:	e7d5      	b.n	3400de84 <_printf_float+0x6c>
3400ded8:	6863      	ldr	r3, [r4, #4]
3400deda:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3400dede:	1c59      	adds	r1, r3, #1
3400dee0:	d139      	bne.n	3400df56 <_printf_float+0x13e>
3400dee2:	2306      	movs	r3, #6
3400dee4:	6063      	str	r3, [r4, #4]
3400dee6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3400deea:	2300      	movs	r3, #0
3400deec:	4628      	mov	r0, r5
3400deee:	6022      	str	r2, [r4, #0]
3400def0:	9303      	str	r3, [sp, #12]
3400def2:	ab0a      	add	r3, sp, #40	@ 0x28
3400def4:	e9cd 9301 	strd	r9, r3, [sp, #4]
3400def8:	ab09      	add	r3, sp, #36	@ 0x24
3400defa:	9300      	str	r3, [sp, #0]
3400defc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3400df00:	6861      	ldr	r1, [r4, #4]
3400df02:	f7ff fef9 	bl	3400dcf8 <__cvt>
3400df06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400df0a:	4680      	mov	r8, r0
3400df0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
3400df0e:	d129      	bne.n	3400df64 <_printf_float+0x14c>
3400df10:	1cc8      	adds	r0, r1, #3
3400df12:	db02      	blt.n	3400df1a <_printf_float+0x102>
3400df14:	6863      	ldr	r3, [r4, #4]
3400df16:	4299      	cmp	r1, r3
3400df18:	dd41      	ble.n	3400df9e <_printf_float+0x186>
3400df1a:	f1a9 0902 	sub.w	r9, r9, #2
3400df1e:	fa5f f989 	uxtb.w	r9, r9
3400df22:	3901      	subs	r1, #1
3400df24:	464a      	mov	r2, r9
3400df26:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3400df2a:	9109      	str	r1, [sp, #36]	@ 0x24
3400df2c:	f7ff ff38 	bl	3400dda0 <__exponent>
3400df30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400df32:	4682      	mov	sl, r0
3400df34:	1813      	adds	r3, r2, r0
3400df36:	2a01      	cmp	r2, #1
3400df38:	6123      	str	r3, [r4, #16]
3400df3a:	dc02      	bgt.n	3400df42 <_printf_float+0x12a>
3400df3c:	6822      	ldr	r2, [r4, #0]
3400df3e:	07d2      	lsls	r2, r2, #31
3400df40:	d501      	bpl.n	3400df46 <_printf_float+0x12e>
3400df42:	3301      	adds	r3, #1
3400df44:	6123      	str	r3, [r4, #16]
3400df46:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3400df4a:	2b00      	cmp	r3, #0
3400df4c:	d0a6      	beq.n	3400de9c <_printf_float+0x84>
3400df4e:	232d      	movs	r3, #45	@ 0x2d
3400df50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400df54:	e7a2      	b.n	3400de9c <_printf_float+0x84>
3400df56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400df5a:	d1c4      	bne.n	3400dee6 <_printf_float+0xce>
3400df5c:	2b00      	cmp	r3, #0
3400df5e:	d1c2      	bne.n	3400dee6 <_printf_float+0xce>
3400df60:	2301      	movs	r3, #1
3400df62:	e7bf      	b.n	3400dee4 <_printf_float+0xcc>
3400df64:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400df68:	d9db      	bls.n	3400df22 <_printf_float+0x10a>
3400df6a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3400df6e:	d118      	bne.n	3400dfa2 <_printf_float+0x18a>
3400df70:	2900      	cmp	r1, #0
3400df72:	6863      	ldr	r3, [r4, #4]
3400df74:	dd0b      	ble.n	3400df8e <_printf_float+0x176>
3400df76:	6121      	str	r1, [r4, #16]
3400df78:	b913      	cbnz	r3, 3400df80 <_printf_float+0x168>
3400df7a:	6822      	ldr	r2, [r4, #0]
3400df7c:	07d0      	lsls	r0, r2, #31
3400df7e:	d502      	bpl.n	3400df86 <_printf_float+0x16e>
3400df80:	3301      	adds	r3, #1
3400df82:	440b      	add	r3, r1
3400df84:	6123      	str	r3, [r4, #16]
3400df86:	f04f 0a00 	mov.w	sl, #0
3400df8a:	65a1      	str	r1, [r4, #88]	@ 0x58
3400df8c:	e7db      	b.n	3400df46 <_printf_float+0x12e>
3400df8e:	b913      	cbnz	r3, 3400df96 <_printf_float+0x17e>
3400df90:	6822      	ldr	r2, [r4, #0]
3400df92:	07d2      	lsls	r2, r2, #31
3400df94:	d501      	bpl.n	3400df9a <_printf_float+0x182>
3400df96:	3302      	adds	r3, #2
3400df98:	e7f4      	b.n	3400df84 <_printf_float+0x16c>
3400df9a:	2301      	movs	r3, #1
3400df9c:	e7f2      	b.n	3400df84 <_printf_float+0x16c>
3400df9e:	f04f 0967 	mov.w	r9, #103	@ 0x67
3400dfa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400dfa4:	4299      	cmp	r1, r3
3400dfa6:	db05      	blt.n	3400dfb4 <_printf_float+0x19c>
3400dfa8:	6823      	ldr	r3, [r4, #0]
3400dfaa:	6121      	str	r1, [r4, #16]
3400dfac:	07d8      	lsls	r0, r3, #31
3400dfae:	d5ea      	bpl.n	3400df86 <_printf_float+0x16e>
3400dfb0:	1c4b      	adds	r3, r1, #1
3400dfb2:	e7e7      	b.n	3400df84 <_printf_float+0x16c>
3400dfb4:	2900      	cmp	r1, #0
3400dfb6:	bfd4      	ite	le
3400dfb8:	f1c1 0202 	rsble	r2, r1, #2
3400dfbc:	2201      	movgt	r2, #1
3400dfbe:	4413      	add	r3, r2
3400dfc0:	e7e0      	b.n	3400df84 <_printf_float+0x16c>
3400dfc2:	6823      	ldr	r3, [r4, #0]
3400dfc4:	055a      	lsls	r2, r3, #21
3400dfc6:	d407      	bmi.n	3400dfd8 <_printf_float+0x1c0>
3400dfc8:	6923      	ldr	r3, [r4, #16]
3400dfca:	4642      	mov	r2, r8
3400dfcc:	4631      	mov	r1, r6
3400dfce:	4628      	mov	r0, r5
3400dfd0:	47b8      	blx	r7
3400dfd2:	3001      	adds	r0, #1
3400dfd4:	d12a      	bne.n	3400e02c <_printf_float+0x214>
3400dfd6:	e76b      	b.n	3400deb0 <_printf_float+0x98>
3400dfd8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400dfdc:	f240 80e0 	bls.w	3400e1a0 <_printf_float+0x388>
3400dfe0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400dfe4:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400dfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dfec:	d133      	bne.n	3400e056 <_printf_float+0x23e>
3400dfee:	2301      	movs	r3, #1
3400dff0:	4a37      	ldr	r2, [pc, #220]	@ (3400e0d0 <_printf_float+0x2b8>)
3400dff2:	4631      	mov	r1, r6
3400dff4:	4628      	mov	r0, r5
3400dff6:	47b8      	blx	r7
3400dff8:	3001      	adds	r0, #1
3400dffa:	f43f af59 	beq.w	3400deb0 <_printf_float+0x98>
3400dffe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3400e002:	4543      	cmp	r3, r8
3400e004:	db02      	blt.n	3400e00c <_printf_float+0x1f4>
3400e006:	6823      	ldr	r3, [r4, #0]
3400e008:	07d8      	lsls	r0, r3, #31
3400e00a:	d50f      	bpl.n	3400e02c <_printf_float+0x214>
3400e00c:	9b05      	ldr	r3, [sp, #20]
3400e00e:	465a      	mov	r2, fp
3400e010:	4631      	mov	r1, r6
3400e012:	4628      	mov	r0, r5
3400e014:	47b8      	blx	r7
3400e016:	3001      	adds	r0, #1
3400e018:	f43f af4a 	beq.w	3400deb0 <_printf_float+0x98>
3400e01c:	f04f 0900 	mov.w	r9, #0
3400e020:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400e024:	f104 0a1a 	add.w	sl, r4, #26
3400e028:	45c8      	cmp	r8, r9
3400e02a:	dc09      	bgt.n	3400e040 <_printf_float+0x228>
3400e02c:	6823      	ldr	r3, [r4, #0]
3400e02e:	079b      	lsls	r3, r3, #30
3400e030:	f100 8107 	bmi.w	3400e242 <_printf_float+0x42a>
3400e034:	68e0      	ldr	r0, [r4, #12]
3400e036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400e038:	4298      	cmp	r0, r3
3400e03a:	bfb8      	it	lt
3400e03c:	4618      	movlt	r0, r3
3400e03e:	e739      	b.n	3400deb4 <_printf_float+0x9c>
3400e040:	2301      	movs	r3, #1
3400e042:	4652      	mov	r2, sl
3400e044:	4631      	mov	r1, r6
3400e046:	4628      	mov	r0, r5
3400e048:	47b8      	blx	r7
3400e04a:	3001      	adds	r0, #1
3400e04c:	f43f af30 	beq.w	3400deb0 <_printf_float+0x98>
3400e050:	f109 0901 	add.w	r9, r9, #1
3400e054:	e7e8      	b.n	3400e028 <_printf_float+0x210>
3400e056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e058:	2b00      	cmp	r3, #0
3400e05a:	dc3b      	bgt.n	3400e0d4 <_printf_float+0x2bc>
3400e05c:	2301      	movs	r3, #1
3400e05e:	4a1c      	ldr	r2, [pc, #112]	@ (3400e0d0 <_printf_float+0x2b8>)
3400e060:	4631      	mov	r1, r6
3400e062:	4628      	mov	r0, r5
3400e064:	47b8      	blx	r7
3400e066:	3001      	adds	r0, #1
3400e068:	f43f af22 	beq.w	3400deb0 <_printf_float+0x98>
3400e06c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3400e070:	ea59 0303 	orrs.w	r3, r9, r3
3400e074:	d102      	bne.n	3400e07c <_printf_float+0x264>
3400e076:	6823      	ldr	r3, [r4, #0]
3400e078:	07d9      	lsls	r1, r3, #31
3400e07a:	d5d7      	bpl.n	3400e02c <_printf_float+0x214>
3400e07c:	9b05      	ldr	r3, [sp, #20]
3400e07e:	465a      	mov	r2, fp
3400e080:	4631      	mov	r1, r6
3400e082:	4628      	mov	r0, r5
3400e084:	47b8      	blx	r7
3400e086:	3001      	adds	r0, #1
3400e088:	f43f af12 	beq.w	3400deb0 <_printf_float+0x98>
3400e08c:	f04f 0a00 	mov.w	sl, #0
3400e090:	f104 0b1a 	add.w	fp, r4, #26
3400e094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e096:	425b      	negs	r3, r3
3400e098:	4553      	cmp	r3, sl
3400e09a:	dc01      	bgt.n	3400e0a0 <_printf_float+0x288>
3400e09c:	464b      	mov	r3, r9
3400e09e:	e794      	b.n	3400dfca <_printf_float+0x1b2>
3400e0a0:	2301      	movs	r3, #1
3400e0a2:	465a      	mov	r2, fp
3400e0a4:	4631      	mov	r1, r6
3400e0a6:	4628      	mov	r0, r5
3400e0a8:	47b8      	blx	r7
3400e0aa:	3001      	adds	r0, #1
3400e0ac:	f43f af00 	beq.w	3400deb0 <_printf_float+0x98>
3400e0b0:	f10a 0a01 	add.w	sl, sl, #1
3400e0b4:	e7ee      	b.n	3400e094 <_printf_float+0x27c>
3400e0b6:	bf00      	nop
3400e0b8:	ffffffff 	.word	0xffffffff
3400e0bc:	7fefffff 	.word	0x7fefffff
3400e0c0:	34011b85 	.word	0x34011b85
3400e0c4:	34011b81 	.word	0x34011b81
3400e0c8:	34011b8d 	.word	0x34011b8d
3400e0cc:	34011b89 	.word	0x34011b89
3400e0d0:	3401141d 	.word	0x3401141d
3400e0d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400e0d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3400e0da:	4553      	cmp	r3, sl
3400e0dc:	bfa8      	it	ge
3400e0de:	4653      	movge	r3, sl
3400e0e0:	2b00      	cmp	r3, #0
3400e0e2:	4699      	mov	r9, r3
3400e0e4:	dc37      	bgt.n	3400e156 <_printf_float+0x33e>
3400e0e6:	2300      	movs	r3, #0
3400e0e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400e0ec:	f104 021a 	add.w	r2, r4, #26
3400e0f0:	9307      	str	r3, [sp, #28]
3400e0f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400e0f4:	9907      	ldr	r1, [sp, #28]
3400e0f6:	9306      	str	r3, [sp, #24]
3400e0f8:	eba3 0309 	sub.w	r3, r3, r9
3400e0fc:	428b      	cmp	r3, r1
3400e0fe:	dc31      	bgt.n	3400e164 <_printf_float+0x34c>
3400e100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e102:	459a      	cmp	sl, r3
3400e104:	dc3b      	bgt.n	3400e17e <_printf_float+0x366>
3400e106:	6823      	ldr	r3, [r4, #0]
3400e108:	07da      	lsls	r2, r3, #31
3400e10a:	d438      	bmi.n	3400e17e <_printf_float+0x366>
3400e10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e10e:	ebaa 0903 	sub.w	r9, sl, r3
3400e112:	9b06      	ldr	r3, [sp, #24]
3400e114:	ebaa 0303 	sub.w	r3, sl, r3
3400e118:	4599      	cmp	r9, r3
3400e11a:	bfa8      	it	ge
3400e11c:	4699      	movge	r9, r3
3400e11e:	f1b9 0f00 	cmp.w	r9, #0
3400e122:	dc34      	bgt.n	3400e18e <_printf_float+0x376>
3400e124:	f04f 0800 	mov.w	r8, #0
3400e128:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400e12c:	f104 0b1a 	add.w	fp, r4, #26
3400e130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e132:	ebaa 0303 	sub.w	r3, sl, r3
3400e136:	eba3 0309 	sub.w	r3, r3, r9
3400e13a:	4543      	cmp	r3, r8
3400e13c:	f77f af76 	ble.w	3400e02c <_printf_float+0x214>
3400e140:	2301      	movs	r3, #1
3400e142:	465a      	mov	r2, fp
3400e144:	4631      	mov	r1, r6
3400e146:	4628      	mov	r0, r5
3400e148:	47b8      	blx	r7
3400e14a:	3001      	adds	r0, #1
3400e14c:	f43f aeb0 	beq.w	3400deb0 <_printf_float+0x98>
3400e150:	f108 0801 	add.w	r8, r8, #1
3400e154:	e7ec      	b.n	3400e130 <_printf_float+0x318>
3400e156:	4642      	mov	r2, r8
3400e158:	4631      	mov	r1, r6
3400e15a:	4628      	mov	r0, r5
3400e15c:	47b8      	blx	r7
3400e15e:	3001      	adds	r0, #1
3400e160:	d1c1      	bne.n	3400e0e6 <_printf_float+0x2ce>
3400e162:	e6a5      	b.n	3400deb0 <_printf_float+0x98>
3400e164:	2301      	movs	r3, #1
3400e166:	4631      	mov	r1, r6
3400e168:	4628      	mov	r0, r5
3400e16a:	9206      	str	r2, [sp, #24]
3400e16c:	47b8      	blx	r7
3400e16e:	3001      	adds	r0, #1
3400e170:	f43f ae9e 	beq.w	3400deb0 <_printf_float+0x98>
3400e174:	9b07      	ldr	r3, [sp, #28]
3400e176:	9a06      	ldr	r2, [sp, #24]
3400e178:	3301      	adds	r3, #1
3400e17a:	9307      	str	r3, [sp, #28]
3400e17c:	e7b9      	b.n	3400e0f2 <_printf_float+0x2da>
3400e17e:	9b05      	ldr	r3, [sp, #20]
3400e180:	465a      	mov	r2, fp
3400e182:	4631      	mov	r1, r6
3400e184:	4628      	mov	r0, r5
3400e186:	47b8      	blx	r7
3400e188:	3001      	adds	r0, #1
3400e18a:	d1bf      	bne.n	3400e10c <_printf_float+0x2f4>
3400e18c:	e690      	b.n	3400deb0 <_printf_float+0x98>
3400e18e:	9a06      	ldr	r2, [sp, #24]
3400e190:	464b      	mov	r3, r9
3400e192:	4631      	mov	r1, r6
3400e194:	4628      	mov	r0, r5
3400e196:	4442      	add	r2, r8
3400e198:	47b8      	blx	r7
3400e19a:	3001      	adds	r0, #1
3400e19c:	d1c2      	bne.n	3400e124 <_printf_float+0x30c>
3400e19e:	e687      	b.n	3400deb0 <_printf_float+0x98>
3400e1a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3400e1a4:	f1b9 0f01 	cmp.w	r9, #1
3400e1a8:	dc01      	bgt.n	3400e1ae <_printf_float+0x396>
3400e1aa:	07db      	lsls	r3, r3, #31
3400e1ac:	d536      	bpl.n	3400e21c <_printf_float+0x404>
3400e1ae:	2301      	movs	r3, #1
3400e1b0:	4642      	mov	r2, r8
3400e1b2:	4631      	mov	r1, r6
3400e1b4:	4628      	mov	r0, r5
3400e1b6:	47b8      	blx	r7
3400e1b8:	3001      	adds	r0, #1
3400e1ba:	f43f ae79 	beq.w	3400deb0 <_printf_float+0x98>
3400e1be:	9b05      	ldr	r3, [sp, #20]
3400e1c0:	465a      	mov	r2, fp
3400e1c2:	4631      	mov	r1, r6
3400e1c4:	4628      	mov	r0, r5
3400e1c6:	47b8      	blx	r7
3400e1c8:	3001      	adds	r0, #1
3400e1ca:	f43f ae71 	beq.w	3400deb0 <_printf_float+0x98>
3400e1ce:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3400e1d2:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400e1d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400e1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e1de:	d018      	beq.n	3400e212 <_printf_float+0x3fa>
3400e1e0:	464b      	mov	r3, r9
3400e1e2:	f108 0201 	add.w	r2, r8, #1
3400e1e6:	4631      	mov	r1, r6
3400e1e8:	4628      	mov	r0, r5
3400e1ea:	47b8      	blx	r7
3400e1ec:	3001      	adds	r0, #1
3400e1ee:	d10c      	bne.n	3400e20a <_printf_float+0x3f2>
3400e1f0:	e65e      	b.n	3400deb0 <_printf_float+0x98>
3400e1f2:	2301      	movs	r3, #1
3400e1f4:	465a      	mov	r2, fp
3400e1f6:	4631      	mov	r1, r6
3400e1f8:	4628      	mov	r0, r5
3400e1fa:	47b8      	blx	r7
3400e1fc:	3001      	adds	r0, #1
3400e1fe:	f43f ae57 	beq.w	3400deb0 <_printf_float+0x98>
3400e202:	f108 0801 	add.w	r8, r8, #1
3400e206:	45c8      	cmp	r8, r9
3400e208:	dbf3      	blt.n	3400e1f2 <_printf_float+0x3da>
3400e20a:	4653      	mov	r3, sl
3400e20c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3400e210:	e6dc      	b.n	3400dfcc <_printf_float+0x1b4>
3400e212:	f04f 0800 	mov.w	r8, #0
3400e216:	f104 0b1a 	add.w	fp, r4, #26
3400e21a:	e7f4      	b.n	3400e206 <_printf_float+0x3ee>
3400e21c:	2301      	movs	r3, #1
3400e21e:	4642      	mov	r2, r8
3400e220:	e7e1      	b.n	3400e1e6 <_printf_float+0x3ce>
3400e222:	2301      	movs	r3, #1
3400e224:	464a      	mov	r2, r9
3400e226:	4631      	mov	r1, r6
3400e228:	4628      	mov	r0, r5
3400e22a:	47b8      	blx	r7
3400e22c:	3001      	adds	r0, #1
3400e22e:	f43f ae3f 	beq.w	3400deb0 <_printf_float+0x98>
3400e232:	f108 0801 	add.w	r8, r8, #1
3400e236:	68e3      	ldr	r3, [r4, #12]
3400e238:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3400e23a:	1a5b      	subs	r3, r3, r1
3400e23c:	4543      	cmp	r3, r8
3400e23e:	dcf0      	bgt.n	3400e222 <_printf_float+0x40a>
3400e240:	e6f8      	b.n	3400e034 <_printf_float+0x21c>
3400e242:	f04f 0800 	mov.w	r8, #0
3400e246:	f104 0919 	add.w	r9, r4, #25
3400e24a:	e7f4      	b.n	3400e236 <_printf_float+0x41e>

3400e24c <_printf_common>:
3400e24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400e250:	4616      	mov	r6, r2
3400e252:	4698      	mov	r8, r3
3400e254:	688a      	ldr	r2, [r1, #8]
3400e256:	4607      	mov	r7, r0
3400e258:	690b      	ldr	r3, [r1, #16]
3400e25a:	460c      	mov	r4, r1
3400e25c:	f8dd 9020 	ldr.w	r9, [sp, #32]
3400e260:	4293      	cmp	r3, r2
3400e262:	bfb8      	it	lt
3400e264:	4613      	movlt	r3, r2
3400e266:	6033      	str	r3, [r6, #0]
3400e268:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3400e26c:	b10a      	cbz	r2, 3400e272 <_printf_common+0x26>
3400e26e:	3301      	adds	r3, #1
3400e270:	6033      	str	r3, [r6, #0]
3400e272:	6823      	ldr	r3, [r4, #0]
3400e274:	0699      	lsls	r1, r3, #26
3400e276:	bf42      	ittt	mi
3400e278:	6833      	ldrmi	r3, [r6, #0]
3400e27a:	3302      	addmi	r3, #2
3400e27c:	6033      	strmi	r3, [r6, #0]
3400e27e:	6825      	ldr	r5, [r4, #0]
3400e280:	f015 0506 	ands.w	r5, r5, #6
3400e284:	d106      	bne.n	3400e294 <_printf_common+0x48>
3400e286:	f104 0a19 	add.w	sl, r4, #25
3400e28a:	68e3      	ldr	r3, [r4, #12]
3400e28c:	6832      	ldr	r2, [r6, #0]
3400e28e:	1a9b      	subs	r3, r3, r2
3400e290:	42ab      	cmp	r3, r5
3400e292:	dc2b      	bgt.n	3400e2ec <_printf_common+0xa0>
3400e294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3400e298:	6822      	ldr	r2, [r4, #0]
3400e29a:	3b00      	subs	r3, #0
3400e29c:	bf18      	it	ne
3400e29e:	2301      	movne	r3, #1
3400e2a0:	0692      	lsls	r2, r2, #26
3400e2a2:	d430      	bmi.n	3400e306 <_printf_common+0xba>
3400e2a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3400e2a8:	4641      	mov	r1, r8
3400e2aa:	4638      	mov	r0, r7
3400e2ac:	47c8      	blx	r9
3400e2ae:	3001      	adds	r0, #1
3400e2b0:	d023      	beq.n	3400e2fa <_printf_common+0xae>
3400e2b2:	6823      	ldr	r3, [r4, #0]
3400e2b4:	341a      	adds	r4, #26
3400e2b6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3400e2ba:	f003 0306 	and.w	r3, r3, #6
3400e2be:	2b04      	cmp	r3, #4
3400e2c0:	bf0a      	itet	eq
3400e2c2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3400e2c6:	2500      	movne	r5, #0
3400e2c8:	6833      	ldreq	r3, [r6, #0]
3400e2ca:	f04f 0600 	mov.w	r6, #0
3400e2ce:	bf08      	it	eq
3400e2d0:	1aed      	subeq	r5, r5, r3
3400e2d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
3400e2d6:	bf08      	it	eq
3400e2d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3400e2dc:	4293      	cmp	r3, r2
3400e2de:	bfc4      	itt	gt
3400e2e0:	1a9b      	subgt	r3, r3, r2
3400e2e2:	18ed      	addgt	r5, r5, r3
3400e2e4:	42b5      	cmp	r5, r6
3400e2e6:	d11a      	bne.n	3400e31e <_printf_common+0xd2>
3400e2e8:	2000      	movs	r0, #0
3400e2ea:	e008      	b.n	3400e2fe <_printf_common+0xb2>
3400e2ec:	2301      	movs	r3, #1
3400e2ee:	4652      	mov	r2, sl
3400e2f0:	4641      	mov	r1, r8
3400e2f2:	4638      	mov	r0, r7
3400e2f4:	47c8      	blx	r9
3400e2f6:	3001      	adds	r0, #1
3400e2f8:	d103      	bne.n	3400e302 <_printf_common+0xb6>
3400e2fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400e302:	3501      	adds	r5, #1
3400e304:	e7c1      	b.n	3400e28a <_printf_common+0x3e>
3400e306:	18e1      	adds	r1, r4, r3
3400e308:	1c5a      	adds	r2, r3, #1
3400e30a:	2030      	movs	r0, #48	@ 0x30
3400e30c:	3302      	adds	r3, #2
3400e30e:	4422      	add	r2, r4
3400e310:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3400e314:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3400e318:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3400e31c:	e7c2      	b.n	3400e2a4 <_printf_common+0x58>
3400e31e:	2301      	movs	r3, #1
3400e320:	4622      	mov	r2, r4
3400e322:	4641      	mov	r1, r8
3400e324:	4638      	mov	r0, r7
3400e326:	47c8      	blx	r9
3400e328:	3001      	adds	r0, #1
3400e32a:	d0e6      	beq.n	3400e2fa <_printf_common+0xae>
3400e32c:	3601      	adds	r6, #1
3400e32e:	e7d9      	b.n	3400e2e4 <_printf_common+0x98>

3400e330 <_printf_i>:
3400e330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3400e334:	7e0f      	ldrb	r7, [r1, #24]
3400e336:	4691      	mov	r9, r2
3400e338:	4680      	mov	r8, r0
3400e33a:	460c      	mov	r4, r1
3400e33c:	2f78      	cmp	r7, #120	@ 0x78
3400e33e:	469a      	mov	sl, r3
3400e340:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400e342:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3400e346:	d807      	bhi.n	3400e358 <_printf_i+0x28>
3400e348:	2f62      	cmp	r7, #98	@ 0x62
3400e34a:	d80a      	bhi.n	3400e362 <_printf_i+0x32>
3400e34c:	2f00      	cmp	r7, #0
3400e34e:	f000 80d1 	beq.w	3400e4f4 <_printf_i+0x1c4>
3400e352:	2f58      	cmp	r7, #88	@ 0x58
3400e354:	f000 80b8 	beq.w	3400e4c8 <_printf_i+0x198>
3400e358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400e35c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3400e360:	e03a      	b.n	3400e3d8 <_printf_i+0xa8>
3400e362:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3400e366:	2b15      	cmp	r3, #21
3400e368:	d8f6      	bhi.n	3400e358 <_printf_i+0x28>
3400e36a:	a101      	add	r1, pc, #4	@ (adr r1, 3400e370 <_printf_i+0x40>)
3400e36c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3400e370:	3400e3c9 	.word	0x3400e3c9
3400e374:	3400e3dd 	.word	0x3400e3dd
3400e378:	3400e359 	.word	0x3400e359
3400e37c:	3400e359 	.word	0x3400e359
3400e380:	3400e359 	.word	0x3400e359
3400e384:	3400e359 	.word	0x3400e359
3400e388:	3400e3dd 	.word	0x3400e3dd
3400e38c:	3400e359 	.word	0x3400e359
3400e390:	3400e359 	.word	0x3400e359
3400e394:	3400e359 	.word	0x3400e359
3400e398:	3400e359 	.word	0x3400e359
3400e39c:	3400e4db 	.word	0x3400e4db
3400e3a0:	3400e407 	.word	0x3400e407
3400e3a4:	3400e495 	.word	0x3400e495
3400e3a8:	3400e359 	.word	0x3400e359
3400e3ac:	3400e359 	.word	0x3400e359
3400e3b0:	3400e4fd 	.word	0x3400e4fd
3400e3b4:	3400e359 	.word	0x3400e359
3400e3b8:	3400e407 	.word	0x3400e407
3400e3bc:	3400e359 	.word	0x3400e359
3400e3c0:	3400e359 	.word	0x3400e359
3400e3c4:	3400e49d 	.word	0x3400e49d
3400e3c8:	6833      	ldr	r3, [r6, #0]
3400e3ca:	1d1a      	adds	r2, r3, #4
3400e3cc:	681b      	ldr	r3, [r3, #0]
3400e3ce:	6032      	str	r2, [r6, #0]
3400e3d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400e3d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3400e3d8:	2301      	movs	r3, #1
3400e3da:	e09c      	b.n	3400e516 <_printf_i+0x1e6>
3400e3dc:	6833      	ldr	r3, [r6, #0]
3400e3de:	6820      	ldr	r0, [r4, #0]
3400e3e0:	1d19      	adds	r1, r3, #4
3400e3e2:	6031      	str	r1, [r6, #0]
3400e3e4:	0606      	lsls	r6, r0, #24
3400e3e6:	d501      	bpl.n	3400e3ec <_printf_i+0xbc>
3400e3e8:	681d      	ldr	r5, [r3, #0]
3400e3ea:	e003      	b.n	3400e3f4 <_printf_i+0xc4>
3400e3ec:	0645      	lsls	r5, r0, #25
3400e3ee:	d5fb      	bpl.n	3400e3e8 <_printf_i+0xb8>
3400e3f0:	f9b3 5000 	ldrsh.w	r5, [r3]
3400e3f4:	2d00      	cmp	r5, #0
3400e3f6:	da03      	bge.n	3400e400 <_printf_i+0xd0>
3400e3f8:	232d      	movs	r3, #45	@ 0x2d
3400e3fa:	426d      	negs	r5, r5
3400e3fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e400:	4858      	ldr	r0, [pc, #352]	@ (3400e564 <_printf_i+0x234>)
3400e402:	230a      	movs	r3, #10
3400e404:	e011      	b.n	3400e42a <_printf_i+0xfa>
3400e406:	6821      	ldr	r1, [r4, #0]
3400e408:	6833      	ldr	r3, [r6, #0]
3400e40a:	0608      	lsls	r0, r1, #24
3400e40c:	f853 5b04 	ldr.w	r5, [r3], #4
3400e410:	d402      	bmi.n	3400e418 <_printf_i+0xe8>
3400e412:	0649      	lsls	r1, r1, #25
3400e414:	bf48      	it	mi
3400e416:	b2ad      	uxthmi	r5, r5
3400e418:	2f6f      	cmp	r7, #111	@ 0x6f
3400e41a:	6033      	str	r3, [r6, #0]
3400e41c:	4851      	ldr	r0, [pc, #324]	@ (3400e564 <_printf_i+0x234>)
3400e41e:	bf14      	ite	ne
3400e420:	230a      	movne	r3, #10
3400e422:	2308      	moveq	r3, #8
3400e424:	2100      	movs	r1, #0
3400e426:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3400e42a:	6866      	ldr	r6, [r4, #4]
3400e42c:	2e00      	cmp	r6, #0
3400e42e:	60a6      	str	r6, [r4, #8]
3400e430:	db05      	blt.n	3400e43e <_printf_i+0x10e>
3400e432:	6821      	ldr	r1, [r4, #0]
3400e434:	432e      	orrs	r6, r5
3400e436:	f021 0104 	bic.w	r1, r1, #4
3400e43a:	6021      	str	r1, [r4, #0]
3400e43c:	d04b      	beq.n	3400e4d6 <_printf_i+0x1a6>
3400e43e:	4616      	mov	r6, r2
3400e440:	fbb5 f1f3 	udiv	r1, r5, r3
3400e444:	fb03 5711 	mls	r7, r3, r1, r5
3400e448:	5dc7      	ldrb	r7, [r0, r7]
3400e44a:	f806 7d01 	strb.w	r7, [r6, #-1]!
3400e44e:	462f      	mov	r7, r5
3400e450:	460d      	mov	r5, r1
3400e452:	42bb      	cmp	r3, r7
3400e454:	d9f4      	bls.n	3400e440 <_printf_i+0x110>
3400e456:	2b08      	cmp	r3, #8
3400e458:	d10b      	bne.n	3400e472 <_printf_i+0x142>
3400e45a:	6823      	ldr	r3, [r4, #0]
3400e45c:	07df      	lsls	r7, r3, #31
3400e45e:	d508      	bpl.n	3400e472 <_printf_i+0x142>
3400e460:	6923      	ldr	r3, [r4, #16]
3400e462:	6861      	ldr	r1, [r4, #4]
3400e464:	4299      	cmp	r1, r3
3400e466:	bfde      	ittt	le
3400e468:	2330      	movle	r3, #48	@ 0x30
3400e46a:	f806 3c01 	strble.w	r3, [r6, #-1]
3400e46e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3400e472:	1b92      	subs	r2, r2, r6
3400e474:	6122      	str	r2, [r4, #16]
3400e476:	464b      	mov	r3, r9
3400e478:	aa03      	add	r2, sp, #12
3400e47a:	4621      	mov	r1, r4
3400e47c:	4640      	mov	r0, r8
3400e47e:	f8cd a000 	str.w	sl, [sp]
3400e482:	f7ff fee3 	bl	3400e24c <_printf_common>
3400e486:	3001      	adds	r0, #1
3400e488:	d14a      	bne.n	3400e520 <_printf_i+0x1f0>
3400e48a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e48e:	b004      	add	sp, #16
3400e490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400e494:	6823      	ldr	r3, [r4, #0]
3400e496:	f043 0320 	orr.w	r3, r3, #32
3400e49a:	6023      	str	r3, [r4, #0]
3400e49c:	2778      	movs	r7, #120	@ 0x78
3400e49e:	4832      	ldr	r0, [pc, #200]	@ (3400e568 <_printf_i+0x238>)
3400e4a0:	6823      	ldr	r3, [r4, #0]
3400e4a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3400e4a6:	061f      	lsls	r7, r3, #24
3400e4a8:	6831      	ldr	r1, [r6, #0]
3400e4aa:	f851 5b04 	ldr.w	r5, [r1], #4
3400e4ae:	d402      	bmi.n	3400e4b6 <_printf_i+0x186>
3400e4b0:	065f      	lsls	r7, r3, #25
3400e4b2:	bf48      	it	mi
3400e4b4:	b2ad      	uxthmi	r5, r5
3400e4b6:	6031      	str	r1, [r6, #0]
3400e4b8:	07d9      	lsls	r1, r3, #31
3400e4ba:	bf44      	itt	mi
3400e4bc:	f043 0320 	orrmi.w	r3, r3, #32
3400e4c0:	6023      	strmi	r3, [r4, #0]
3400e4c2:	b11d      	cbz	r5, 3400e4cc <_printf_i+0x19c>
3400e4c4:	2310      	movs	r3, #16
3400e4c6:	e7ad      	b.n	3400e424 <_printf_i+0xf4>
3400e4c8:	4826      	ldr	r0, [pc, #152]	@ (3400e564 <_printf_i+0x234>)
3400e4ca:	e7e9      	b.n	3400e4a0 <_printf_i+0x170>
3400e4cc:	6823      	ldr	r3, [r4, #0]
3400e4ce:	f023 0320 	bic.w	r3, r3, #32
3400e4d2:	6023      	str	r3, [r4, #0]
3400e4d4:	e7f6      	b.n	3400e4c4 <_printf_i+0x194>
3400e4d6:	4616      	mov	r6, r2
3400e4d8:	e7bd      	b.n	3400e456 <_printf_i+0x126>
3400e4da:	6833      	ldr	r3, [r6, #0]
3400e4dc:	6825      	ldr	r5, [r4, #0]
3400e4de:	1d18      	adds	r0, r3, #4
3400e4e0:	6961      	ldr	r1, [r4, #20]
3400e4e2:	6030      	str	r0, [r6, #0]
3400e4e4:	062e      	lsls	r6, r5, #24
3400e4e6:	681b      	ldr	r3, [r3, #0]
3400e4e8:	d501      	bpl.n	3400e4ee <_printf_i+0x1be>
3400e4ea:	6019      	str	r1, [r3, #0]
3400e4ec:	e002      	b.n	3400e4f4 <_printf_i+0x1c4>
3400e4ee:	0668      	lsls	r0, r5, #25
3400e4f0:	d5fb      	bpl.n	3400e4ea <_printf_i+0x1ba>
3400e4f2:	8019      	strh	r1, [r3, #0]
3400e4f4:	2300      	movs	r3, #0
3400e4f6:	4616      	mov	r6, r2
3400e4f8:	6123      	str	r3, [r4, #16]
3400e4fa:	e7bc      	b.n	3400e476 <_printf_i+0x146>
3400e4fc:	6833      	ldr	r3, [r6, #0]
3400e4fe:	2100      	movs	r1, #0
3400e500:	1d1a      	adds	r2, r3, #4
3400e502:	6032      	str	r2, [r6, #0]
3400e504:	681e      	ldr	r6, [r3, #0]
3400e506:	6862      	ldr	r2, [r4, #4]
3400e508:	4630      	mov	r0, r6
3400e50a:	f000 fd8c 	bl	3400f026 <memchr>
3400e50e:	b108      	cbz	r0, 3400e514 <_printf_i+0x1e4>
3400e510:	1b80      	subs	r0, r0, r6
3400e512:	6060      	str	r0, [r4, #4]
3400e514:	6863      	ldr	r3, [r4, #4]
3400e516:	6123      	str	r3, [r4, #16]
3400e518:	2300      	movs	r3, #0
3400e51a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e51e:	e7aa      	b.n	3400e476 <_printf_i+0x146>
3400e520:	6923      	ldr	r3, [r4, #16]
3400e522:	4632      	mov	r2, r6
3400e524:	4649      	mov	r1, r9
3400e526:	4640      	mov	r0, r8
3400e528:	47d0      	blx	sl
3400e52a:	3001      	adds	r0, #1
3400e52c:	d0ad      	beq.n	3400e48a <_printf_i+0x15a>
3400e52e:	6823      	ldr	r3, [r4, #0]
3400e530:	079b      	lsls	r3, r3, #30
3400e532:	d413      	bmi.n	3400e55c <_printf_i+0x22c>
3400e534:	68e0      	ldr	r0, [r4, #12]
3400e536:	9b03      	ldr	r3, [sp, #12]
3400e538:	4298      	cmp	r0, r3
3400e53a:	bfb8      	it	lt
3400e53c:	4618      	movlt	r0, r3
3400e53e:	e7a6      	b.n	3400e48e <_printf_i+0x15e>
3400e540:	2301      	movs	r3, #1
3400e542:	4632      	mov	r2, r6
3400e544:	4649      	mov	r1, r9
3400e546:	4640      	mov	r0, r8
3400e548:	47d0      	blx	sl
3400e54a:	3001      	adds	r0, #1
3400e54c:	d09d      	beq.n	3400e48a <_printf_i+0x15a>
3400e54e:	3501      	adds	r5, #1
3400e550:	68e3      	ldr	r3, [r4, #12]
3400e552:	9903      	ldr	r1, [sp, #12]
3400e554:	1a5b      	subs	r3, r3, r1
3400e556:	42ab      	cmp	r3, r5
3400e558:	dcf2      	bgt.n	3400e540 <_printf_i+0x210>
3400e55a:	e7eb      	b.n	3400e534 <_printf_i+0x204>
3400e55c:	2500      	movs	r5, #0
3400e55e:	f104 0619 	add.w	r6, r4, #25
3400e562:	e7f5      	b.n	3400e550 <_printf_i+0x220>
3400e564:	34011b91 	.word	0x34011b91
3400e568:	34011ba2 	.word	0x34011ba2

3400e56c <__sflush_r>:
3400e56c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3400e570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400e574:	0716      	lsls	r6, r2, #28
3400e576:	4605      	mov	r5, r0
3400e578:	460c      	mov	r4, r1
3400e57a:	d454      	bmi.n	3400e626 <__sflush_r+0xba>
3400e57c:	684b      	ldr	r3, [r1, #4]
3400e57e:	2b00      	cmp	r3, #0
3400e580:	dc02      	bgt.n	3400e588 <__sflush_r+0x1c>
3400e582:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3400e584:	2b00      	cmp	r3, #0
3400e586:	dd48      	ble.n	3400e61a <__sflush_r+0xae>
3400e588:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400e58a:	2e00      	cmp	r6, #0
3400e58c:	d045      	beq.n	3400e61a <__sflush_r+0xae>
3400e58e:	2300      	movs	r3, #0
3400e590:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3400e594:	682f      	ldr	r7, [r5, #0]
3400e596:	6a21      	ldr	r1, [r4, #32]
3400e598:	602b      	str	r3, [r5, #0]
3400e59a:	d030      	beq.n	3400e5fe <__sflush_r+0x92>
3400e59c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3400e59e:	89a3      	ldrh	r3, [r4, #12]
3400e5a0:	0759      	lsls	r1, r3, #29
3400e5a2:	d505      	bpl.n	3400e5b0 <__sflush_r+0x44>
3400e5a4:	6863      	ldr	r3, [r4, #4]
3400e5a6:	1ad2      	subs	r2, r2, r3
3400e5a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400e5aa:	b10b      	cbz	r3, 3400e5b0 <__sflush_r+0x44>
3400e5ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400e5ae:	1ad2      	subs	r2, r2, r3
3400e5b0:	2300      	movs	r3, #0
3400e5b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400e5b4:	6a21      	ldr	r1, [r4, #32]
3400e5b6:	4628      	mov	r0, r5
3400e5b8:	47b0      	blx	r6
3400e5ba:	1c43      	adds	r3, r0, #1
3400e5bc:	89a3      	ldrh	r3, [r4, #12]
3400e5be:	d106      	bne.n	3400e5ce <__sflush_r+0x62>
3400e5c0:	6829      	ldr	r1, [r5, #0]
3400e5c2:	291d      	cmp	r1, #29
3400e5c4:	d82b      	bhi.n	3400e61e <__sflush_r+0xb2>
3400e5c6:	4a2a      	ldr	r2, [pc, #168]	@ (3400e670 <__sflush_r+0x104>)
3400e5c8:	40ca      	lsrs	r2, r1
3400e5ca:	07d6      	lsls	r6, r2, #31
3400e5cc:	d527      	bpl.n	3400e61e <__sflush_r+0xb2>
3400e5ce:	2200      	movs	r2, #0
3400e5d0:	04d9      	lsls	r1, r3, #19
3400e5d2:	6062      	str	r2, [r4, #4]
3400e5d4:	6922      	ldr	r2, [r4, #16]
3400e5d6:	6022      	str	r2, [r4, #0]
3400e5d8:	d504      	bpl.n	3400e5e4 <__sflush_r+0x78>
3400e5da:	1c42      	adds	r2, r0, #1
3400e5dc:	d101      	bne.n	3400e5e2 <__sflush_r+0x76>
3400e5de:	682b      	ldr	r3, [r5, #0]
3400e5e0:	b903      	cbnz	r3, 3400e5e4 <__sflush_r+0x78>
3400e5e2:	6560      	str	r0, [r4, #84]	@ 0x54
3400e5e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400e5e6:	602f      	str	r7, [r5, #0]
3400e5e8:	b1b9      	cbz	r1, 3400e61a <__sflush_r+0xae>
3400e5ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400e5ee:	4299      	cmp	r1, r3
3400e5f0:	d002      	beq.n	3400e5f8 <__sflush_r+0x8c>
3400e5f2:	4628      	mov	r0, r5
3400e5f4:	f001 fb26 	bl	3400fc44 <_free_r>
3400e5f8:	2300      	movs	r3, #0
3400e5fa:	6363      	str	r3, [r4, #52]	@ 0x34
3400e5fc:	e00d      	b.n	3400e61a <__sflush_r+0xae>
3400e5fe:	2301      	movs	r3, #1
3400e600:	4628      	mov	r0, r5
3400e602:	47b0      	blx	r6
3400e604:	4602      	mov	r2, r0
3400e606:	1c50      	adds	r0, r2, #1
3400e608:	d1c9      	bne.n	3400e59e <__sflush_r+0x32>
3400e60a:	682b      	ldr	r3, [r5, #0]
3400e60c:	2b00      	cmp	r3, #0
3400e60e:	d0c6      	beq.n	3400e59e <__sflush_r+0x32>
3400e610:	2b1d      	cmp	r3, #29
3400e612:	d001      	beq.n	3400e618 <__sflush_r+0xac>
3400e614:	2b16      	cmp	r3, #22
3400e616:	d11d      	bne.n	3400e654 <__sflush_r+0xe8>
3400e618:	602f      	str	r7, [r5, #0]
3400e61a:	2000      	movs	r0, #0
3400e61c:	e021      	b.n	3400e662 <__sflush_r+0xf6>
3400e61e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e622:	b21b      	sxth	r3, r3
3400e624:	e01a      	b.n	3400e65c <__sflush_r+0xf0>
3400e626:	690f      	ldr	r7, [r1, #16]
3400e628:	2f00      	cmp	r7, #0
3400e62a:	d0f6      	beq.n	3400e61a <__sflush_r+0xae>
3400e62c:	0793      	lsls	r3, r2, #30
3400e62e:	680e      	ldr	r6, [r1, #0]
3400e630:	600f      	str	r7, [r1, #0]
3400e632:	bf0c      	ite	eq
3400e634:	694b      	ldreq	r3, [r1, #20]
3400e636:	2300      	movne	r3, #0
3400e638:	eba6 0807 	sub.w	r8, r6, r7
3400e63c:	608b      	str	r3, [r1, #8]
3400e63e:	f1b8 0f00 	cmp.w	r8, #0
3400e642:	ddea      	ble.n	3400e61a <__sflush_r+0xae>
3400e644:	4643      	mov	r3, r8
3400e646:	463a      	mov	r2, r7
3400e648:	6a21      	ldr	r1, [r4, #32]
3400e64a:	4628      	mov	r0, r5
3400e64c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3400e64e:	47b0      	blx	r6
3400e650:	2800      	cmp	r0, #0
3400e652:	dc08      	bgt.n	3400e666 <__sflush_r+0xfa>
3400e654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e65c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e660:	81a3      	strh	r3, [r4, #12]
3400e662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400e666:	4407      	add	r7, r0
3400e668:	eba8 0800 	sub.w	r8, r8, r0
3400e66c:	e7e7      	b.n	3400e63e <__sflush_r+0xd2>
3400e66e:	bf00      	nop
3400e670:	20400001 	.word	0x20400001

3400e674 <_fflush_r>:
3400e674:	b538      	push	{r3, r4, r5, lr}
3400e676:	690b      	ldr	r3, [r1, #16]
3400e678:	4605      	mov	r5, r0
3400e67a:	460c      	mov	r4, r1
3400e67c:	b913      	cbnz	r3, 3400e684 <_fflush_r+0x10>
3400e67e:	2500      	movs	r5, #0
3400e680:	4628      	mov	r0, r5
3400e682:	bd38      	pop	{r3, r4, r5, pc}
3400e684:	b118      	cbz	r0, 3400e68e <_fflush_r+0x1a>
3400e686:	6a03      	ldr	r3, [r0, #32]
3400e688:	b90b      	cbnz	r3, 3400e68e <_fflush_r+0x1a>
3400e68a:	f000 f8bb 	bl	3400e804 <__sinit>
3400e68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e692:	2b00      	cmp	r3, #0
3400e694:	d0f3      	beq.n	3400e67e <_fflush_r+0xa>
3400e696:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3400e698:	07d0      	lsls	r0, r2, #31
3400e69a:	d404      	bmi.n	3400e6a6 <_fflush_r+0x32>
3400e69c:	0599      	lsls	r1, r3, #22
3400e69e:	d402      	bmi.n	3400e6a6 <_fflush_r+0x32>
3400e6a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e6a2:	f000 fcbe 	bl	3400f022 <__retarget_lock_acquire_recursive>
3400e6a6:	4628      	mov	r0, r5
3400e6a8:	4621      	mov	r1, r4
3400e6aa:	f7ff ff5f 	bl	3400e56c <__sflush_r>
3400e6ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e6b0:	4605      	mov	r5, r0
3400e6b2:	07da      	lsls	r2, r3, #31
3400e6b4:	d4e4      	bmi.n	3400e680 <_fflush_r+0xc>
3400e6b6:	89a3      	ldrh	r3, [r4, #12]
3400e6b8:	059b      	lsls	r3, r3, #22
3400e6ba:	d4e1      	bmi.n	3400e680 <_fflush_r+0xc>
3400e6bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e6be:	f000 fcb1 	bl	3400f024 <__retarget_lock_release_recursive>
3400e6c2:	e7dd      	b.n	3400e680 <_fflush_r+0xc>

3400e6c4 <fflush>:
3400e6c4:	4601      	mov	r1, r0
3400e6c6:	b920      	cbnz	r0, 3400e6d2 <fflush+0xe>
3400e6c8:	4a04      	ldr	r2, [pc, #16]	@ (3400e6dc <fflush+0x18>)
3400e6ca:	4905      	ldr	r1, [pc, #20]	@ (3400e6e0 <fflush+0x1c>)
3400e6cc:	4805      	ldr	r0, [pc, #20]	@ (3400e6e4 <fflush+0x20>)
3400e6ce:	f000 b8c3 	b.w	3400e858 <_fwalk_sglue>
3400e6d2:	4b05      	ldr	r3, [pc, #20]	@ (3400e6e8 <fflush+0x24>)
3400e6d4:	6818      	ldr	r0, [r3, #0]
3400e6d6:	f7ff bfcd 	b.w	3400e674 <_fflush_r>
3400e6da:	bf00      	nop
3400e6dc:	34012838 	.word	0x34012838
3400e6e0:	3400e675 	.word	0x3400e675
3400e6e4:	34012848 	.word	0x34012848
3400e6e8:	34012844 	.word	0x34012844

3400e6ec <std>:
3400e6ec:	2300      	movs	r3, #0
3400e6ee:	b510      	push	{r4, lr}
3400e6f0:	4604      	mov	r4, r0
3400e6f2:	6083      	str	r3, [r0, #8]
3400e6f4:	8181      	strh	r1, [r0, #12]
3400e6f6:	4619      	mov	r1, r3
3400e6f8:	6643      	str	r3, [r0, #100]	@ 0x64
3400e6fa:	81c2      	strh	r2, [r0, #14]
3400e6fc:	2208      	movs	r2, #8
3400e6fe:	6183      	str	r3, [r0, #24]
3400e700:	e9c0 3300 	strd	r3, r3, [r0]
3400e704:	e9c0 3304 	strd	r3, r3, [r0, #16]
3400e708:	305c      	adds	r0, #92	@ 0x5c
3400e70a:	f000 fa0b 	bl	3400eb24 <memset>
3400e70e:	4b0d      	ldr	r3, [pc, #52]	@ (3400e744 <std+0x58>)
3400e710:	6224      	str	r4, [r4, #32]
3400e712:	6263      	str	r3, [r4, #36]	@ 0x24
3400e714:	4b0c      	ldr	r3, [pc, #48]	@ (3400e748 <std+0x5c>)
3400e716:	62a3      	str	r3, [r4, #40]	@ 0x28
3400e718:	4b0c      	ldr	r3, [pc, #48]	@ (3400e74c <std+0x60>)
3400e71a:	62e3      	str	r3, [r4, #44]	@ 0x2c
3400e71c:	4b0c      	ldr	r3, [pc, #48]	@ (3400e750 <std+0x64>)
3400e71e:	6323      	str	r3, [r4, #48]	@ 0x30
3400e720:	4b0c      	ldr	r3, [pc, #48]	@ (3400e754 <std+0x68>)
3400e722:	429c      	cmp	r4, r3
3400e724:	d006      	beq.n	3400e734 <std+0x48>
3400e726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3400e72a:	4294      	cmp	r4, r2
3400e72c:	d002      	beq.n	3400e734 <std+0x48>
3400e72e:	33d0      	adds	r3, #208	@ 0xd0
3400e730:	429c      	cmp	r4, r3
3400e732:	d105      	bne.n	3400e740 <std+0x54>
3400e734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3400e738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e73c:	f000 bc70 	b.w	3400f020 <__retarget_lock_init_recursive>
3400e740:	bd10      	pop	{r4, pc}
3400e742:	bf00      	nop
3400e744:	3400e975 	.word	0x3400e975
3400e748:	3400e997 	.word	0x3400e997
3400e74c:	3400e9cf 	.word	0x3400e9cf
3400e750:	3400e9f3 	.word	0x3400e9f3
3400e754:	340132b8 	.word	0x340132b8

3400e758 <stdio_exit_handler>:
3400e758:	4a02      	ldr	r2, [pc, #8]	@ (3400e764 <stdio_exit_handler+0xc>)
3400e75a:	4903      	ldr	r1, [pc, #12]	@ (3400e768 <stdio_exit_handler+0x10>)
3400e75c:	4803      	ldr	r0, [pc, #12]	@ (3400e76c <stdio_exit_handler+0x14>)
3400e75e:	f000 b87b 	b.w	3400e858 <_fwalk_sglue>
3400e762:	bf00      	nop
3400e764:	34012838 	.word	0x34012838
3400e768:	3400e675 	.word	0x3400e675
3400e76c:	34012848 	.word	0x34012848

3400e770 <cleanup_stdio>:
3400e770:	6841      	ldr	r1, [r0, #4]
3400e772:	4b0c      	ldr	r3, [pc, #48]	@ (3400e7a4 <cleanup_stdio+0x34>)
3400e774:	4299      	cmp	r1, r3
3400e776:	b510      	push	{r4, lr}
3400e778:	4604      	mov	r4, r0
3400e77a:	d001      	beq.n	3400e780 <cleanup_stdio+0x10>
3400e77c:	f7ff ff7a 	bl	3400e674 <_fflush_r>
3400e780:	68a1      	ldr	r1, [r4, #8]
3400e782:	4b09      	ldr	r3, [pc, #36]	@ (3400e7a8 <cleanup_stdio+0x38>)
3400e784:	4299      	cmp	r1, r3
3400e786:	d002      	beq.n	3400e78e <cleanup_stdio+0x1e>
3400e788:	4620      	mov	r0, r4
3400e78a:	f7ff ff73 	bl	3400e674 <_fflush_r>
3400e78e:	68e1      	ldr	r1, [r4, #12]
3400e790:	4b06      	ldr	r3, [pc, #24]	@ (3400e7ac <cleanup_stdio+0x3c>)
3400e792:	4299      	cmp	r1, r3
3400e794:	d004      	beq.n	3400e7a0 <cleanup_stdio+0x30>
3400e796:	4620      	mov	r0, r4
3400e798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e79c:	f7ff bf6a 	b.w	3400e674 <_fflush_r>
3400e7a0:	bd10      	pop	{r4, pc}
3400e7a2:	bf00      	nop
3400e7a4:	340132b8 	.word	0x340132b8
3400e7a8:	34013320 	.word	0x34013320
3400e7ac:	34013388 	.word	0x34013388

3400e7b0 <global_stdio_init.part.0>:
3400e7b0:	b510      	push	{r4, lr}
3400e7b2:	4b0b      	ldr	r3, [pc, #44]	@ (3400e7e0 <global_stdio_init.part.0+0x30>)
3400e7b4:	2104      	movs	r1, #4
3400e7b6:	4c0b      	ldr	r4, [pc, #44]	@ (3400e7e4 <global_stdio_init.part.0+0x34>)
3400e7b8:	4a0b      	ldr	r2, [pc, #44]	@ (3400e7e8 <global_stdio_init.part.0+0x38>)
3400e7ba:	4620      	mov	r0, r4
3400e7bc:	601a      	str	r2, [r3, #0]
3400e7be:	2200      	movs	r2, #0
3400e7c0:	f7ff ff94 	bl	3400e6ec <std>
3400e7c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3400e7c8:	2201      	movs	r2, #1
3400e7ca:	2109      	movs	r1, #9
3400e7cc:	f7ff ff8e 	bl	3400e6ec <std>
3400e7d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3400e7d4:	2202      	movs	r2, #2
3400e7d6:	2112      	movs	r1, #18
3400e7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e7dc:	f7ff bf86 	b.w	3400e6ec <std>
3400e7e0:	340133f0 	.word	0x340133f0
3400e7e4:	340132b8 	.word	0x340132b8
3400e7e8:	3400e759 	.word	0x3400e759

3400e7ec <__sfp_lock_acquire>:
3400e7ec:	4801      	ldr	r0, [pc, #4]	@ (3400e7f4 <__sfp_lock_acquire+0x8>)
3400e7ee:	f000 bc18 	b.w	3400f022 <__retarget_lock_acquire_recursive>
3400e7f2:	bf00      	nop
3400e7f4:	340133f9 	.word	0x340133f9

3400e7f8 <__sfp_lock_release>:
3400e7f8:	4801      	ldr	r0, [pc, #4]	@ (3400e800 <__sfp_lock_release+0x8>)
3400e7fa:	f000 bc13 	b.w	3400f024 <__retarget_lock_release_recursive>
3400e7fe:	bf00      	nop
3400e800:	340133f9 	.word	0x340133f9

3400e804 <__sinit>:
3400e804:	b510      	push	{r4, lr}
3400e806:	4604      	mov	r4, r0
3400e808:	f7ff fff0 	bl	3400e7ec <__sfp_lock_acquire>
3400e80c:	6a23      	ldr	r3, [r4, #32]
3400e80e:	b11b      	cbz	r3, 3400e818 <__sinit+0x14>
3400e810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e814:	f7ff bff0 	b.w	3400e7f8 <__sfp_lock_release>
3400e818:	4b04      	ldr	r3, [pc, #16]	@ (3400e82c <__sinit+0x28>)
3400e81a:	6223      	str	r3, [r4, #32]
3400e81c:	4b04      	ldr	r3, [pc, #16]	@ (3400e830 <__sinit+0x2c>)
3400e81e:	681b      	ldr	r3, [r3, #0]
3400e820:	2b00      	cmp	r3, #0
3400e822:	d1f5      	bne.n	3400e810 <__sinit+0xc>
3400e824:	f7ff ffc4 	bl	3400e7b0 <global_stdio_init.part.0>
3400e828:	e7f2      	b.n	3400e810 <__sinit+0xc>
3400e82a:	bf00      	nop
3400e82c:	3400e771 	.word	0x3400e771
3400e830:	340133f0 	.word	0x340133f0

3400e834 <fiprintf>:
3400e834:	b40e      	push	{r1, r2, r3}
3400e836:	b503      	push	{r0, r1, lr}
3400e838:	ab03      	add	r3, sp, #12
3400e83a:	4601      	mov	r1, r0
3400e83c:	4805      	ldr	r0, [pc, #20]	@ (3400e854 <fiprintf+0x20>)
3400e83e:	f853 2b04 	ldr.w	r2, [r3], #4
3400e842:	6800      	ldr	r0, [r0, #0]
3400e844:	9301      	str	r3, [sp, #4]
3400e846:	f001 fdf3 	bl	34010430 <_vfiprintf_r>
3400e84a:	b002      	add	sp, #8
3400e84c:	f85d eb04 	ldr.w	lr, [sp], #4
3400e850:	b003      	add	sp, #12
3400e852:	4770      	bx	lr
3400e854:	34012844 	.word	0x34012844

3400e858 <_fwalk_sglue>:
3400e858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400e85c:	4607      	mov	r7, r0
3400e85e:	4688      	mov	r8, r1
3400e860:	4614      	mov	r4, r2
3400e862:	2600      	movs	r6, #0
3400e864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3400e868:	f1b9 0901 	subs.w	r9, r9, #1
3400e86c:	d505      	bpl.n	3400e87a <_fwalk_sglue+0x22>
3400e86e:	6824      	ldr	r4, [r4, #0]
3400e870:	2c00      	cmp	r4, #0
3400e872:	d1f7      	bne.n	3400e864 <_fwalk_sglue+0xc>
3400e874:	4630      	mov	r0, r6
3400e876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400e87a:	89ab      	ldrh	r3, [r5, #12]
3400e87c:	2b01      	cmp	r3, #1
3400e87e:	d907      	bls.n	3400e890 <_fwalk_sglue+0x38>
3400e880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3400e884:	3301      	adds	r3, #1
3400e886:	d003      	beq.n	3400e890 <_fwalk_sglue+0x38>
3400e888:	4629      	mov	r1, r5
3400e88a:	4638      	mov	r0, r7
3400e88c:	47c0      	blx	r8
3400e88e:	4306      	orrs	r6, r0
3400e890:	3568      	adds	r5, #104	@ 0x68
3400e892:	e7e9      	b.n	3400e868 <_fwalk_sglue+0x10>

3400e894 <iprintf>:
3400e894:	b40f      	push	{r0, r1, r2, r3}
3400e896:	b507      	push	{r0, r1, r2, lr}
3400e898:	4906      	ldr	r1, [pc, #24]	@ (3400e8b4 <iprintf+0x20>)
3400e89a:	ab04      	add	r3, sp, #16
3400e89c:	6808      	ldr	r0, [r1, #0]
3400e89e:	f853 2b04 	ldr.w	r2, [r3], #4
3400e8a2:	6881      	ldr	r1, [r0, #8]
3400e8a4:	9301      	str	r3, [sp, #4]
3400e8a6:	f001 fdc3 	bl	34010430 <_vfiprintf_r>
3400e8aa:	b003      	add	sp, #12
3400e8ac:	f85d eb04 	ldr.w	lr, [sp], #4
3400e8b0:	b004      	add	sp, #16
3400e8b2:	4770      	bx	lr
3400e8b4:	34012844 	.word	0x34012844

3400e8b8 <_puts_r>:
3400e8b8:	6a03      	ldr	r3, [r0, #32]
3400e8ba:	b570      	push	{r4, r5, r6, lr}
3400e8bc:	4605      	mov	r5, r0
3400e8be:	460e      	mov	r6, r1
3400e8c0:	6884      	ldr	r4, [r0, #8]
3400e8c2:	b90b      	cbnz	r3, 3400e8c8 <_puts_r+0x10>
3400e8c4:	f7ff ff9e 	bl	3400e804 <__sinit>
3400e8c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e8ca:	07db      	lsls	r3, r3, #31
3400e8cc:	d405      	bmi.n	3400e8da <_puts_r+0x22>
3400e8ce:	89a3      	ldrh	r3, [r4, #12]
3400e8d0:	0598      	lsls	r0, r3, #22
3400e8d2:	d402      	bmi.n	3400e8da <_puts_r+0x22>
3400e8d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e8d6:	f000 fba4 	bl	3400f022 <__retarget_lock_acquire_recursive>
3400e8da:	89a3      	ldrh	r3, [r4, #12]
3400e8dc:	0719      	lsls	r1, r3, #28
3400e8de:	d502      	bpl.n	3400e8e6 <_puts_r+0x2e>
3400e8e0:	6923      	ldr	r3, [r4, #16]
3400e8e2:	2b00      	cmp	r3, #0
3400e8e4:	d135      	bne.n	3400e952 <_puts_r+0x9a>
3400e8e6:	4621      	mov	r1, r4
3400e8e8:	4628      	mov	r0, r5
3400e8ea:	f000 f8c5 	bl	3400ea78 <__swsetup_r>
3400e8ee:	b380      	cbz	r0, 3400e952 <_puts_r+0x9a>
3400e8f0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3400e8f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e8f6:	07da      	lsls	r2, r3, #31
3400e8f8:	d405      	bmi.n	3400e906 <_puts_r+0x4e>
3400e8fa:	89a3      	ldrh	r3, [r4, #12]
3400e8fc:	059b      	lsls	r3, r3, #22
3400e8fe:	d402      	bmi.n	3400e906 <_puts_r+0x4e>
3400e900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e902:	f000 fb8f 	bl	3400f024 <__retarget_lock_release_recursive>
3400e906:	4628      	mov	r0, r5
3400e908:	bd70      	pop	{r4, r5, r6, pc}
3400e90a:	2b00      	cmp	r3, #0
3400e90c:	da04      	bge.n	3400e918 <_puts_r+0x60>
3400e90e:	69a2      	ldr	r2, [r4, #24]
3400e910:	429a      	cmp	r2, r3
3400e912:	dc17      	bgt.n	3400e944 <_puts_r+0x8c>
3400e914:	290a      	cmp	r1, #10
3400e916:	d015      	beq.n	3400e944 <_puts_r+0x8c>
3400e918:	6823      	ldr	r3, [r4, #0]
3400e91a:	1c5a      	adds	r2, r3, #1
3400e91c:	6022      	str	r2, [r4, #0]
3400e91e:	7019      	strb	r1, [r3, #0]
3400e920:	68a3      	ldr	r3, [r4, #8]
3400e922:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400e926:	3b01      	subs	r3, #1
3400e928:	60a3      	str	r3, [r4, #8]
3400e92a:	2900      	cmp	r1, #0
3400e92c:	d1ed      	bne.n	3400e90a <_puts_r+0x52>
3400e92e:	2b00      	cmp	r3, #0
3400e930:	da11      	bge.n	3400e956 <_puts_r+0x9e>
3400e932:	4622      	mov	r2, r4
3400e934:	210a      	movs	r1, #10
3400e936:	4628      	mov	r0, r5
3400e938:	f000 f85f 	bl	3400e9fa <__swbuf_r>
3400e93c:	3001      	adds	r0, #1
3400e93e:	d0d7      	beq.n	3400e8f0 <_puts_r+0x38>
3400e940:	250a      	movs	r5, #10
3400e942:	e7d7      	b.n	3400e8f4 <_puts_r+0x3c>
3400e944:	4622      	mov	r2, r4
3400e946:	4628      	mov	r0, r5
3400e948:	f000 f857 	bl	3400e9fa <__swbuf_r>
3400e94c:	3001      	adds	r0, #1
3400e94e:	d1e7      	bne.n	3400e920 <_puts_r+0x68>
3400e950:	e7ce      	b.n	3400e8f0 <_puts_r+0x38>
3400e952:	3e01      	subs	r6, #1
3400e954:	e7e4      	b.n	3400e920 <_puts_r+0x68>
3400e956:	6823      	ldr	r3, [r4, #0]
3400e958:	1c5a      	adds	r2, r3, #1
3400e95a:	6022      	str	r2, [r4, #0]
3400e95c:	220a      	movs	r2, #10
3400e95e:	701a      	strb	r2, [r3, #0]
3400e960:	e7ee      	b.n	3400e940 <_puts_r+0x88>
	...

3400e964 <puts>:
3400e964:	4b02      	ldr	r3, [pc, #8]	@ (3400e970 <puts+0xc>)
3400e966:	4601      	mov	r1, r0
3400e968:	6818      	ldr	r0, [r3, #0]
3400e96a:	f7ff bfa5 	b.w	3400e8b8 <_puts_r>
3400e96e:	bf00      	nop
3400e970:	34012844 	.word	0x34012844

3400e974 <__sread>:
3400e974:	b510      	push	{r4, lr}
3400e976:	460c      	mov	r4, r1
3400e978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e97c:	f000 faf2 	bl	3400ef64 <_read_r>
3400e980:	2800      	cmp	r0, #0
3400e982:	bfab      	itete	ge
3400e984:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3400e986:	89a3      	ldrhlt	r3, [r4, #12]
3400e988:	181b      	addge	r3, r3, r0
3400e98a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3400e98e:	bfac      	ite	ge
3400e990:	6563      	strge	r3, [r4, #84]	@ 0x54
3400e992:	81a3      	strhlt	r3, [r4, #12]
3400e994:	bd10      	pop	{r4, pc}

3400e996 <__swrite>:
3400e996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400e99a:	461f      	mov	r7, r3
3400e99c:	898b      	ldrh	r3, [r1, #12]
3400e99e:	4605      	mov	r5, r0
3400e9a0:	460c      	mov	r4, r1
3400e9a2:	05db      	lsls	r3, r3, #23
3400e9a4:	4616      	mov	r6, r2
3400e9a6:	d505      	bpl.n	3400e9b4 <__swrite+0x1e>
3400e9a8:	2302      	movs	r3, #2
3400e9aa:	2200      	movs	r2, #0
3400e9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e9b0:	f000 fac6 	bl	3400ef40 <_lseek_r>
3400e9b4:	89a3      	ldrh	r3, [r4, #12]
3400e9b6:	4632      	mov	r2, r6
3400e9b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400e9bc:	4628      	mov	r0, r5
3400e9be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400e9c2:	81a3      	strh	r3, [r4, #12]
3400e9c4:	463b      	mov	r3, r7
3400e9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3400e9ca:	f000 baed 	b.w	3400efa8 <_write_r>

3400e9ce <__sseek>:
3400e9ce:	b510      	push	{r4, lr}
3400e9d0:	460c      	mov	r4, r1
3400e9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e9d6:	f000 fab3 	bl	3400ef40 <_lseek_r>
3400e9da:	1c43      	adds	r3, r0, #1
3400e9dc:	89a3      	ldrh	r3, [r4, #12]
3400e9de:	bf15      	itete	ne
3400e9e0:	6560      	strne	r0, [r4, #84]	@ 0x54
3400e9e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3400e9e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3400e9ea:	81a3      	strheq	r3, [r4, #12]
3400e9ec:	bf18      	it	ne
3400e9ee:	81a3      	strhne	r3, [r4, #12]
3400e9f0:	bd10      	pop	{r4, pc}

3400e9f2 <__sclose>:
3400e9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e9f6:	f000 ba93 	b.w	3400ef20 <_close_r>

3400e9fa <__swbuf_r>:
3400e9fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400e9fc:	460e      	mov	r6, r1
3400e9fe:	4614      	mov	r4, r2
3400ea00:	4605      	mov	r5, r0
3400ea02:	b118      	cbz	r0, 3400ea0c <__swbuf_r+0x12>
3400ea04:	6a03      	ldr	r3, [r0, #32]
3400ea06:	b90b      	cbnz	r3, 3400ea0c <__swbuf_r+0x12>
3400ea08:	f7ff fefc 	bl	3400e804 <__sinit>
3400ea0c:	69a3      	ldr	r3, [r4, #24]
3400ea0e:	60a3      	str	r3, [r4, #8]
3400ea10:	89a3      	ldrh	r3, [r4, #12]
3400ea12:	071a      	lsls	r2, r3, #28
3400ea14:	d501      	bpl.n	3400ea1a <__swbuf_r+0x20>
3400ea16:	6923      	ldr	r3, [r4, #16]
3400ea18:	b943      	cbnz	r3, 3400ea2c <__swbuf_r+0x32>
3400ea1a:	4621      	mov	r1, r4
3400ea1c:	4628      	mov	r0, r5
3400ea1e:	f000 f82b 	bl	3400ea78 <__swsetup_r>
3400ea22:	b118      	cbz	r0, 3400ea2c <__swbuf_r+0x32>
3400ea24:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3400ea28:	4638      	mov	r0, r7
3400ea2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400ea2c:	6823      	ldr	r3, [r4, #0]
3400ea2e:	b2f6      	uxtb	r6, r6
3400ea30:	6922      	ldr	r2, [r4, #16]
3400ea32:	4637      	mov	r7, r6
3400ea34:	1a98      	subs	r0, r3, r2
3400ea36:	6963      	ldr	r3, [r4, #20]
3400ea38:	4283      	cmp	r3, r0
3400ea3a:	dc05      	bgt.n	3400ea48 <__swbuf_r+0x4e>
3400ea3c:	4621      	mov	r1, r4
3400ea3e:	4628      	mov	r0, r5
3400ea40:	f7ff fe18 	bl	3400e674 <_fflush_r>
3400ea44:	2800      	cmp	r0, #0
3400ea46:	d1ed      	bne.n	3400ea24 <__swbuf_r+0x2a>
3400ea48:	68a3      	ldr	r3, [r4, #8]
3400ea4a:	3b01      	subs	r3, #1
3400ea4c:	60a3      	str	r3, [r4, #8]
3400ea4e:	6823      	ldr	r3, [r4, #0]
3400ea50:	1c5a      	adds	r2, r3, #1
3400ea52:	6022      	str	r2, [r4, #0]
3400ea54:	701e      	strb	r6, [r3, #0]
3400ea56:	1c43      	adds	r3, r0, #1
3400ea58:	6962      	ldr	r2, [r4, #20]
3400ea5a:	429a      	cmp	r2, r3
3400ea5c:	d004      	beq.n	3400ea68 <__swbuf_r+0x6e>
3400ea5e:	89a3      	ldrh	r3, [r4, #12]
3400ea60:	07db      	lsls	r3, r3, #31
3400ea62:	d5e1      	bpl.n	3400ea28 <__swbuf_r+0x2e>
3400ea64:	2e0a      	cmp	r6, #10
3400ea66:	d1df      	bne.n	3400ea28 <__swbuf_r+0x2e>
3400ea68:	4621      	mov	r1, r4
3400ea6a:	4628      	mov	r0, r5
3400ea6c:	f7ff fe02 	bl	3400e674 <_fflush_r>
3400ea70:	2800      	cmp	r0, #0
3400ea72:	d0d9      	beq.n	3400ea28 <__swbuf_r+0x2e>
3400ea74:	e7d6      	b.n	3400ea24 <__swbuf_r+0x2a>
	...

3400ea78 <__swsetup_r>:
3400ea78:	b538      	push	{r3, r4, r5, lr}
3400ea7a:	4b29      	ldr	r3, [pc, #164]	@ (3400eb20 <__swsetup_r+0xa8>)
3400ea7c:	4605      	mov	r5, r0
3400ea7e:	460c      	mov	r4, r1
3400ea80:	6818      	ldr	r0, [r3, #0]
3400ea82:	b118      	cbz	r0, 3400ea8c <__swsetup_r+0x14>
3400ea84:	6a03      	ldr	r3, [r0, #32]
3400ea86:	b90b      	cbnz	r3, 3400ea8c <__swsetup_r+0x14>
3400ea88:	f7ff febc 	bl	3400e804 <__sinit>
3400ea8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400ea90:	0719      	lsls	r1, r3, #28
3400ea92:	d422      	bmi.n	3400eada <__swsetup_r+0x62>
3400ea94:	06da      	lsls	r2, r3, #27
3400ea96:	d407      	bmi.n	3400eaa8 <__swsetup_r+0x30>
3400ea98:	2209      	movs	r2, #9
3400ea9a:	602a      	str	r2, [r5, #0]
3400ea9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400eaa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400eaa4:	81a3      	strh	r3, [r4, #12]
3400eaa6:	e033      	b.n	3400eb10 <__swsetup_r+0x98>
3400eaa8:	0758      	lsls	r0, r3, #29
3400eaaa:	d512      	bpl.n	3400ead2 <__swsetup_r+0x5a>
3400eaac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400eaae:	b141      	cbz	r1, 3400eac2 <__swsetup_r+0x4a>
3400eab0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400eab4:	4299      	cmp	r1, r3
3400eab6:	d002      	beq.n	3400eabe <__swsetup_r+0x46>
3400eab8:	4628      	mov	r0, r5
3400eaba:	f001 f8c3 	bl	3400fc44 <_free_r>
3400eabe:	2300      	movs	r3, #0
3400eac0:	6363      	str	r3, [r4, #52]	@ 0x34
3400eac2:	89a3      	ldrh	r3, [r4, #12]
3400eac4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3400eac8:	81a3      	strh	r3, [r4, #12]
3400eaca:	2300      	movs	r3, #0
3400eacc:	6063      	str	r3, [r4, #4]
3400eace:	6923      	ldr	r3, [r4, #16]
3400ead0:	6023      	str	r3, [r4, #0]
3400ead2:	89a3      	ldrh	r3, [r4, #12]
3400ead4:	f043 0308 	orr.w	r3, r3, #8
3400ead8:	81a3      	strh	r3, [r4, #12]
3400eada:	6923      	ldr	r3, [r4, #16]
3400eadc:	b94b      	cbnz	r3, 3400eaf2 <__swsetup_r+0x7a>
3400eade:	89a3      	ldrh	r3, [r4, #12]
3400eae0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3400eae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400eae8:	d003      	beq.n	3400eaf2 <__swsetup_r+0x7a>
3400eaea:	4621      	mov	r1, r4
3400eaec:	4628      	mov	r0, r5
3400eaee:	f001 fddc 	bl	340106aa <__smakebuf_r>
3400eaf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400eaf6:	f013 0201 	ands.w	r2, r3, #1
3400eafa:	d00a      	beq.n	3400eb12 <__swsetup_r+0x9a>
3400eafc:	2200      	movs	r2, #0
3400eafe:	60a2      	str	r2, [r4, #8]
3400eb00:	6962      	ldr	r2, [r4, #20]
3400eb02:	4252      	negs	r2, r2
3400eb04:	61a2      	str	r2, [r4, #24]
3400eb06:	6922      	ldr	r2, [r4, #16]
3400eb08:	b942      	cbnz	r2, 3400eb1c <__swsetup_r+0xa4>
3400eb0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3400eb0e:	d1c5      	bne.n	3400ea9c <__swsetup_r+0x24>
3400eb10:	bd38      	pop	{r3, r4, r5, pc}
3400eb12:	0799      	lsls	r1, r3, #30
3400eb14:	bf58      	it	pl
3400eb16:	6962      	ldrpl	r2, [r4, #20]
3400eb18:	60a2      	str	r2, [r4, #8]
3400eb1a:	e7f4      	b.n	3400eb06 <__swsetup_r+0x8e>
3400eb1c:	2000      	movs	r0, #0
3400eb1e:	e7f7      	b.n	3400eb10 <__swsetup_r+0x98>
3400eb20:	34012844 	.word	0x34012844

3400eb24 <memset>:
3400eb24:	4402      	add	r2, r0
3400eb26:	4603      	mov	r3, r0
3400eb28:	4293      	cmp	r3, r2
3400eb2a:	d100      	bne.n	3400eb2e <memset+0xa>
3400eb2c:	4770      	bx	lr
3400eb2e:	f803 1b01 	strb.w	r1, [r3], #1
3400eb32:	e7f9      	b.n	3400eb28 <memset+0x4>

3400eb34 <_strerror_r>:
3400eb34:	b510      	push	{r4, lr}
3400eb36:	4604      	mov	r4, r0
3400eb38:	4608      	mov	r0, r1
3400eb3a:	4611      	mov	r1, r2
3400eb3c:	461a      	mov	r2, r3
3400eb3e:	288e      	cmp	r0, #142	@ 0x8e
3400eb40:	f200 8130 	bhi.w	3400eda4 <_strerror_r+0x270>
3400eb44:	e8df f010 	tbh	[pc, r0, lsl #1]
3400eb48:	0138008f 	.word	0x0138008f
3400eb4c:	00940092 	.word	0x00940092
3400eb50:	00980096 	.word	0x00980096
3400eb54:	009c009a 	.word	0x009c009a
3400eb58:	00a2009e 	.word	0x00a2009e
3400eb5c:	00a800a4 	.word	0x00a800a4
3400eb60:	00ac00aa 	.word	0x00ac00aa
3400eb64:	012e00ae 	.word	0x012e00ae
3400eb68:	00b200b0 	.word	0x00b200b0
3400eb6c:	00b600b4 	.word	0x00b600b4
3400eb70:	00be00b8 	.word	0x00be00b8
3400eb74:	00c600c0 	.word	0x00c600c0
3400eb78:	00ca00c8 	.word	0x00ca00c8
3400eb7c:	00ce00cc 	.word	0x00ce00cc
3400eb80:	00d600d2 	.word	0x00d600d2
3400eb84:	00da00d8 	.word	0x00da00d8
3400eb88:	00de00dc 	.word	0x00de00dc
3400eb8c:	00e200e0 	.word	0x00e200e0
3400eb90:	012e00e4 	.word	0x012e00e4
3400eb94:	012e012e 	.word	0x012e012e
3400eb98:	012e012e 	.word	0x012e012e
3400eb9c:	012e012e 	.word	0x012e012e
3400eba0:	00e8012e 	.word	0x00e8012e
3400eba4:	012e00ec 	.word	0x012e00ec
3400eba8:	012e012e 	.word	0x012e012e
3400ebac:	012e012e 	.word	0x012e012e
3400ebb0:	012e012e 	.word	0x012e012e
3400ebb4:	012e012e 	.word	0x012e012e
3400ebb8:	012e012e 	.word	0x012e012e
3400ebbc:	012e012e 	.word	0x012e012e
3400ebc0:	010800ee 	.word	0x010800ee
3400ebc4:	00f200f0 	.word	0x00f200f0
3400ebc8:	012e012e 	.word	0x012e012e
3400ebcc:	00f4012e 	.word	0x00f4012e
3400ebd0:	012e012e 	.word	0x012e012e
3400ebd4:	00f6012e 	.word	0x00f6012e
3400ebd8:	012e012e 	.word	0x012e012e
3400ebdc:	012e00fa 	.word	0x012e00fa
3400ebe0:	00fc012e 	.word	0x00fc012e
3400ebe4:	012e012e 	.word	0x012e012e
3400ebe8:	012e012e 	.word	0x012e012e
3400ebec:	012e012e 	.word	0x012e012e
3400ebf0:	012e012e 	.word	0x012e012e
3400ebf4:	012e012e 	.word	0x012e012e
3400ebf8:	012e00fe 	.word	0x012e00fe
3400ebfc:	01020100 	.word	0x01020100
3400ec00:	012e0104 	.word	0x012e0104
3400ec04:	0126012e 	.word	0x0126012e
3400ec08:	012e012e 	.word	0x012e012e
3400ec0c:	012e012e 	.word	0x012e012e
3400ec10:	012e012e 	.word	0x012e012e
3400ec14:	012e012e 	.word	0x012e012e
3400ec18:	01060114 	.word	0x01060114
3400ec1c:	010c010a 	.word	0x010c010a
3400ec20:	0110010e 	.word	0x0110010e
3400ec24:	0112012e 	.word	0x0112012e
3400ec28:	011a0116 	.word	0x011a0116
3400ec2c:	00c200ea 	.word	0x00c200ea
3400ec30:	00ba012c 	.word	0x00ba012c
3400ec34:	00bc00d0 	.word	0x00bc00d0
3400ec38:	00a600a0 	.word	0x00a600a0
3400ec3c:	00f8012a 	.word	0x00f8012a
3400ec40:	0118012e 	.word	0x0118012e
3400ec44:	011e00c4 	.word	0x011e00c4
3400ec48:	012e011c 	.word	0x012e011c
3400ec4c:	012e012e 	.word	0x012e012e
3400ec50:	012e012e 	.word	0x012e012e
3400ec54:	012e00d4 	.word	0x012e00d4
3400ec58:	012e012e 	.word	0x012e012e
3400ec5c:	012800e6 	.word	0x012800e6
3400ec60:	01220120 	.word	0x01220120
3400ec64:	0124      	.short	0x0124
3400ec66:	4b55      	ldr	r3, [pc, #340]	@ (3400edbc <_strerror_r+0x288>)
3400ec68:	4618      	mov	r0, r3
3400ec6a:	bd10      	pop	{r4, pc}
3400ec6c:	4b54      	ldr	r3, [pc, #336]	@ (3400edc0 <_strerror_r+0x28c>)
3400ec6e:	e7fb      	b.n	3400ec68 <_strerror_r+0x134>
3400ec70:	4b54      	ldr	r3, [pc, #336]	@ (3400edc4 <_strerror_r+0x290>)
3400ec72:	e7f9      	b.n	3400ec68 <_strerror_r+0x134>
3400ec74:	4b54      	ldr	r3, [pc, #336]	@ (3400edc8 <_strerror_r+0x294>)
3400ec76:	e7f7      	b.n	3400ec68 <_strerror_r+0x134>
3400ec78:	4b54      	ldr	r3, [pc, #336]	@ (3400edcc <_strerror_r+0x298>)
3400ec7a:	e7f5      	b.n	3400ec68 <_strerror_r+0x134>
3400ec7c:	4b54      	ldr	r3, [pc, #336]	@ (3400edd0 <_strerror_r+0x29c>)
3400ec7e:	e7f3      	b.n	3400ec68 <_strerror_r+0x134>
3400ec80:	4b54      	ldr	r3, [pc, #336]	@ (3400edd4 <_strerror_r+0x2a0>)
3400ec82:	e7f1      	b.n	3400ec68 <_strerror_r+0x134>
3400ec84:	4b54      	ldr	r3, [pc, #336]	@ (3400edd8 <_strerror_r+0x2a4>)
3400ec86:	e7ef      	b.n	3400ec68 <_strerror_r+0x134>
3400ec88:	4b54      	ldr	r3, [pc, #336]	@ (3400eddc <_strerror_r+0x2a8>)
3400ec8a:	e7ed      	b.n	3400ec68 <_strerror_r+0x134>
3400ec8c:	4b54      	ldr	r3, [pc, #336]	@ (3400ede0 <_strerror_r+0x2ac>)
3400ec8e:	e7eb      	b.n	3400ec68 <_strerror_r+0x134>
3400ec90:	4b54      	ldr	r3, [pc, #336]	@ (3400ede4 <_strerror_r+0x2b0>)
3400ec92:	e7e9      	b.n	3400ec68 <_strerror_r+0x134>
3400ec94:	4b54      	ldr	r3, [pc, #336]	@ (3400ede8 <_strerror_r+0x2b4>)
3400ec96:	e7e7      	b.n	3400ec68 <_strerror_r+0x134>
3400ec98:	4b54      	ldr	r3, [pc, #336]	@ (3400edec <_strerror_r+0x2b8>)
3400ec9a:	e7e5      	b.n	3400ec68 <_strerror_r+0x134>
3400ec9c:	4b54      	ldr	r3, [pc, #336]	@ (3400edf0 <_strerror_r+0x2bc>)
3400ec9e:	e7e3      	b.n	3400ec68 <_strerror_r+0x134>
3400eca0:	4b54      	ldr	r3, [pc, #336]	@ (3400edf4 <_strerror_r+0x2c0>)
3400eca2:	e7e1      	b.n	3400ec68 <_strerror_r+0x134>
3400eca4:	4b54      	ldr	r3, [pc, #336]	@ (3400edf8 <_strerror_r+0x2c4>)
3400eca6:	e7df      	b.n	3400ec68 <_strerror_r+0x134>
3400eca8:	4b54      	ldr	r3, [pc, #336]	@ (3400edfc <_strerror_r+0x2c8>)
3400ecaa:	e7dd      	b.n	3400ec68 <_strerror_r+0x134>
3400ecac:	4b54      	ldr	r3, [pc, #336]	@ (3400ee00 <_strerror_r+0x2cc>)
3400ecae:	e7db      	b.n	3400ec68 <_strerror_r+0x134>
3400ecb0:	4b54      	ldr	r3, [pc, #336]	@ (3400ee04 <_strerror_r+0x2d0>)
3400ecb2:	e7d9      	b.n	3400ec68 <_strerror_r+0x134>
3400ecb4:	4b54      	ldr	r3, [pc, #336]	@ (3400ee08 <_strerror_r+0x2d4>)
3400ecb6:	e7d7      	b.n	3400ec68 <_strerror_r+0x134>
3400ecb8:	4b54      	ldr	r3, [pc, #336]	@ (3400ee0c <_strerror_r+0x2d8>)
3400ecba:	e7d5      	b.n	3400ec68 <_strerror_r+0x134>
3400ecbc:	4b54      	ldr	r3, [pc, #336]	@ (3400ee10 <_strerror_r+0x2dc>)
3400ecbe:	e7d3      	b.n	3400ec68 <_strerror_r+0x134>
3400ecc0:	4b54      	ldr	r3, [pc, #336]	@ (3400ee14 <_strerror_r+0x2e0>)
3400ecc2:	e7d1      	b.n	3400ec68 <_strerror_r+0x134>
3400ecc4:	4b54      	ldr	r3, [pc, #336]	@ (3400ee18 <_strerror_r+0x2e4>)
3400ecc6:	e7cf      	b.n	3400ec68 <_strerror_r+0x134>
3400ecc8:	4b54      	ldr	r3, [pc, #336]	@ (3400ee1c <_strerror_r+0x2e8>)
3400ecca:	e7cd      	b.n	3400ec68 <_strerror_r+0x134>
3400eccc:	4b54      	ldr	r3, [pc, #336]	@ (3400ee20 <_strerror_r+0x2ec>)
3400ecce:	e7cb      	b.n	3400ec68 <_strerror_r+0x134>
3400ecd0:	4b54      	ldr	r3, [pc, #336]	@ (3400ee24 <_strerror_r+0x2f0>)
3400ecd2:	e7c9      	b.n	3400ec68 <_strerror_r+0x134>
3400ecd4:	4b54      	ldr	r3, [pc, #336]	@ (3400ee28 <_strerror_r+0x2f4>)
3400ecd6:	e7c7      	b.n	3400ec68 <_strerror_r+0x134>
3400ecd8:	4b54      	ldr	r3, [pc, #336]	@ (3400ee2c <_strerror_r+0x2f8>)
3400ecda:	e7c5      	b.n	3400ec68 <_strerror_r+0x134>
3400ecdc:	4b54      	ldr	r3, [pc, #336]	@ (3400ee30 <_strerror_r+0x2fc>)
3400ecde:	e7c3      	b.n	3400ec68 <_strerror_r+0x134>
3400ece0:	4b54      	ldr	r3, [pc, #336]	@ (3400ee34 <_strerror_r+0x300>)
3400ece2:	e7c1      	b.n	3400ec68 <_strerror_r+0x134>
3400ece4:	4b54      	ldr	r3, [pc, #336]	@ (3400ee38 <_strerror_r+0x304>)
3400ece6:	e7bf      	b.n	3400ec68 <_strerror_r+0x134>
3400ece8:	4b54      	ldr	r3, [pc, #336]	@ (3400ee3c <_strerror_r+0x308>)
3400ecea:	e7bd      	b.n	3400ec68 <_strerror_r+0x134>
3400ecec:	4b54      	ldr	r3, [pc, #336]	@ (3400ee40 <_strerror_r+0x30c>)
3400ecee:	e7bb      	b.n	3400ec68 <_strerror_r+0x134>
3400ecf0:	4b54      	ldr	r3, [pc, #336]	@ (3400ee44 <_strerror_r+0x310>)
3400ecf2:	e7b9      	b.n	3400ec68 <_strerror_r+0x134>
3400ecf4:	4b54      	ldr	r3, [pc, #336]	@ (3400ee48 <_strerror_r+0x314>)
3400ecf6:	e7b7      	b.n	3400ec68 <_strerror_r+0x134>
3400ecf8:	4b54      	ldr	r3, [pc, #336]	@ (3400ee4c <_strerror_r+0x318>)
3400ecfa:	e7b5      	b.n	3400ec68 <_strerror_r+0x134>
3400ecfc:	4b54      	ldr	r3, [pc, #336]	@ (3400ee50 <_strerror_r+0x31c>)
3400ecfe:	e7b3      	b.n	3400ec68 <_strerror_r+0x134>
3400ed00:	4b54      	ldr	r3, [pc, #336]	@ (3400ee54 <_strerror_r+0x320>)
3400ed02:	e7b1      	b.n	3400ec68 <_strerror_r+0x134>
3400ed04:	4b54      	ldr	r3, [pc, #336]	@ (3400ee58 <_strerror_r+0x324>)
3400ed06:	e7af      	b.n	3400ec68 <_strerror_r+0x134>
3400ed08:	4b54      	ldr	r3, [pc, #336]	@ (3400ee5c <_strerror_r+0x328>)
3400ed0a:	e7ad      	b.n	3400ec68 <_strerror_r+0x134>
3400ed0c:	4b54      	ldr	r3, [pc, #336]	@ (3400ee60 <_strerror_r+0x32c>)
3400ed0e:	e7ab      	b.n	3400ec68 <_strerror_r+0x134>
3400ed10:	4b54      	ldr	r3, [pc, #336]	@ (3400ee64 <_strerror_r+0x330>)
3400ed12:	e7a9      	b.n	3400ec68 <_strerror_r+0x134>
3400ed14:	4b54      	ldr	r3, [pc, #336]	@ (3400ee68 <_strerror_r+0x334>)
3400ed16:	e7a7      	b.n	3400ec68 <_strerror_r+0x134>
3400ed18:	4b54      	ldr	r3, [pc, #336]	@ (3400ee6c <_strerror_r+0x338>)
3400ed1a:	e7a5      	b.n	3400ec68 <_strerror_r+0x134>
3400ed1c:	4b54      	ldr	r3, [pc, #336]	@ (3400ee70 <_strerror_r+0x33c>)
3400ed1e:	e7a3      	b.n	3400ec68 <_strerror_r+0x134>
3400ed20:	4b54      	ldr	r3, [pc, #336]	@ (3400ee74 <_strerror_r+0x340>)
3400ed22:	e7a1      	b.n	3400ec68 <_strerror_r+0x134>
3400ed24:	4b54      	ldr	r3, [pc, #336]	@ (3400ee78 <_strerror_r+0x344>)
3400ed26:	e79f      	b.n	3400ec68 <_strerror_r+0x134>
3400ed28:	4b54      	ldr	r3, [pc, #336]	@ (3400ee7c <_strerror_r+0x348>)
3400ed2a:	e79d      	b.n	3400ec68 <_strerror_r+0x134>
3400ed2c:	4b54      	ldr	r3, [pc, #336]	@ (3400ee80 <_strerror_r+0x34c>)
3400ed2e:	e79b      	b.n	3400ec68 <_strerror_r+0x134>
3400ed30:	4b54      	ldr	r3, [pc, #336]	@ (3400ee84 <_strerror_r+0x350>)
3400ed32:	e799      	b.n	3400ec68 <_strerror_r+0x134>
3400ed34:	4b54      	ldr	r3, [pc, #336]	@ (3400ee88 <_strerror_r+0x354>)
3400ed36:	e797      	b.n	3400ec68 <_strerror_r+0x134>
3400ed38:	4b54      	ldr	r3, [pc, #336]	@ (3400ee8c <_strerror_r+0x358>)
3400ed3a:	e795      	b.n	3400ec68 <_strerror_r+0x134>
3400ed3c:	4b54      	ldr	r3, [pc, #336]	@ (3400ee90 <_strerror_r+0x35c>)
3400ed3e:	e793      	b.n	3400ec68 <_strerror_r+0x134>
3400ed40:	4b54      	ldr	r3, [pc, #336]	@ (3400ee94 <_strerror_r+0x360>)
3400ed42:	e791      	b.n	3400ec68 <_strerror_r+0x134>
3400ed44:	4b54      	ldr	r3, [pc, #336]	@ (3400ee98 <_strerror_r+0x364>)
3400ed46:	e78f      	b.n	3400ec68 <_strerror_r+0x134>
3400ed48:	4b54      	ldr	r3, [pc, #336]	@ (3400ee9c <_strerror_r+0x368>)
3400ed4a:	e78d      	b.n	3400ec68 <_strerror_r+0x134>
3400ed4c:	4b54      	ldr	r3, [pc, #336]	@ (3400eea0 <_strerror_r+0x36c>)
3400ed4e:	e78b      	b.n	3400ec68 <_strerror_r+0x134>
3400ed50:	4b54      	ldr	r3, [pc, #336]	@ (3400eea4 <_strerror_r+0x370>)
3400ed52:	e789      	b.n	3400ec68 <_strerror_r+0x134>
3400ed54:	4b54      	ldr	r3, [pc, #336]	@ (3400eea8 <_strerror_r+0x374>)
3400ed56:	e787      	b.n	3400ec68 <_strerror_r+0x134>
3400ed58:	4b54      	ldr	r3, [pc, #336]	@ (3400eeac <_strerror_r+0x378>)
3400ed5a:	e785      	b.n	3400ec68 <_strerror_r+0x134>
3400ed5c:	4b54      	ldr	r3, [pc, #336]	@ (3400eeb0 <_strerror_r+0x37c>)
3400ed5e:	e783      	b.n	3400ec68 <_strerror_r+0x134>
3400ed60:	4b54      	ldr	r3, [pc, #336]	@ (3400eeb4 <_strerror_r+0x380>)
3400ed62:	e781      	b.n	3400ec68 <_strerror_r+0x134>
3400ed64:	4b54      	ldr	r3, [pc, #336]	@ (3400eeb8 <_strerror_r+0x384>)
3400ed66:	e77f      	b.n	3400ec68 <_strerror_r+0x134>
3400ed68:	4b54      	ldr	r3, [pc, #336]	@ (3400eebc <_strerror_r+0x388>)
3400ed6a:	e77d      	b.n	3400ec68 <_strerror_r+0x134>
3400ed6c:	4b54      	ldr	r3, [pc, #336]	@ (3400eec0 <_strerror_r+0x38c>)
3400ed6e:	e77b      	b.n	3400ec68 <_strerror_r+0x134>
3400ed70:	4b54      	ldr	r3, [pc, #336]	@ (3400eec4 <_strerror_r+0x390>)
3400ed72:	e779      	b.n	3400ec68 <_strerror_r+0x134>
3400ed74:	4b54      	ldr	r3, [pc, #336]	@ (3400eec8 <_strerror_r+0x394>)
3400ed76:	e777      	b.n	3400ec68 <_strerror_r+0x134>
3400ed78:	4b54      	ldr	r3, [pc, #336]	@ (3400eecc <_strerror_r+0x398>)
3400ed7a:	e775      	b.n	3400ec68 <_strerror_r+0x134>
3400ed7c:	4b54      	ldr	r3, [pc, #336]	@ (3400eed0 <_strerror_r+0x39c>)
3400ed7e:	e773      	b.n	3400ec68 <_strerror_r+0x134>
3400ed80:	4b54      	ldr	r3, [pc, #336]	@ (3400eed4 <_strerror_r+0x3a0>)
3400ed82:	e771      	b.n	3400ec68 <_strerror_r+0x134>
3400ed84:	4b54      	ldr	r3, [pc, #336]	@ (3400eed8 <_strerror_r+0x3a4>)
3400ed86:	e76f      	b.n	3400ec68 <_strerror_r+0x134>
3400ed88:	4b54      	ldr	r3, [pc, #336]	@ (3400eedc <_strerror_r+0x3a8>)
3400ed8a:	e76d      	b.n	3400ec68 <_strerror_r+0x134>
3400ed8c:	4b54      	ldr	r3, [pc, #336]	@ (3400eee0 <_strerror_r+0x3ac>)
3400ed8e:	e76b      	b.n	3400ec68 <_strerror_r+0x134>
3400ed90:	4b54      	ldr	r3, [pc, #336]	@ (3400eee4 <_strerror_r+0x3b0>)
3400ed92:	e769      	b.n	3400ec68 <_strerror_r+0x134>
3400ed94:	4b54      	ldr	r3, [pc, #336]	@ (3400eee8 <_strerror_r+0x3b4>)
3400ed96:	e767      	b.n	3400ec68 <_strerror_r+0x134>
3400ed98:	4b54      	ldr	r3, [pc, #336]	@ (3400eeec <_strerror_r+0x3b8>)
3400ed9a:	e765      	b.n	3400ec68 <_strerror_r+0x134>
3400ed9c:	4b54      	ldr	r3, [pc, #336]	@ (3400eef0 <_strerror_r+0x3bc>)
3400ed9e:	e763      	b.n	3400ec68 <_strerror_r+0x134>
3400eda0:	4b54      	ldr	r3, [pc, #336]	@ (3400eef4 <_strerror_r+0x3c0>)
3400eda2:	e761      	b.n	3400ec68 <_strerror_r+0x134>
3400eda4:	2a00      	cmp	r2, #0
3400eda6:	bf08      	it	eq
3400eda8:	4622      	moveq	r2, r4
3400edaa:	f000 f8b3 	bl	3400ef14 <_user_strerror>
3400edae:	4b52      	ldr	r3, [pc, #328]	@ (3400eef8 <_strerror_r+0x3c4>)
3400edb0:	2800      	cmp	r0, #0
3400edb2:	bf18      	it	ne
3400edb4:	4603      	movne	r3, r0
3400edb6:	e757      	b.n	3400ec68 <_strerror_r+0x134>
3400edb8:	4b50      	ldr	r3, [pc, #320]	@ (3400eefc <_strerror_r+0x3c8>)
3400edba:	e755      	b.n	3400ec68 <_strerror_r+0x134>
3400edbc:	34011bb3 	.word	0x34011bb3
3400edc0:	34011bc5 	.word	0x34011bc5
3400edc4:	34011bdf 	.word	0x34011bdf
3400edc8:	34011bef 	.word	0x34011bef
3400edcc:	34011c07 	.word	0x34011c07
3400edd0:	34011c11 	.word	0x34011c11
3400edd4:	34011c2b 	.word	0x34011c2b
3400edd8:	34011c3d 	.word	0x34011c3d
3400eddc:	34011c4f 	.word	0x34011c4f
3400ede0:	34011c68 	.word	0x34011c68
3400ede4:	34011c78 	.word	0x34011c78
3400ede8:	34011c84 	.word	0x34011c84
3400edec:	34011ca1 	.word	0x34011ca1
3400edf0:	34011cb3 	.word	0x34011cb3
3400edf4:	34011cc4 	.word	0x34011cc4
3400edf8:	34011cd6 	.word	0x34011cd6
3400edfc:	34011ce2 	.word	0x34011ce2
3400ee00:	34011cfa 	.word	0x34011cfa
3400ee04:	34011d06 	.word	0x34011d06
3400ee08:	34011d18 	.word	0x34011d18
3400ee0c:	34011d27 	.word	0x34011d27
3400ee10:	34011d37 	.word	0x34011d37
3400ee14:	34011d44 	.word	0x34011d44
3400ee18:	34011d63 	.word	0x34011d63
3400ee1c:	34011d72 	.word	0x34011d72
3400ee20:	34011d83 	.word	0x34011d83
3400ee24:	34011da7 	.word	0x34011da7
3400ee28:	34011dc5 	.word	0x34011dc5
3400ee2c:	34011de3 	.word	0x34011de3
3400ee30:	34011e03 	.word	0x34011e03
3400ee34:	34011e1a 	.word	0x34011e1a
3400ee38:	34011e29 	.word	0x34011e29
3400ee3c:	34011e38 	.word	0x34011e38
3400ee40:	34011e4c 	.word	0x34011e4c
3400ee44:	34011e64 	.word	0x34011e64
3400ee48:	34011e72 	.word	0x34011e72
3400ee4c:	34011e7f 	.word	0x34011e7f
3400ee50:	34011e95 	.word	0x34011e95
3400ee54:	34011ea4 	.word	0x34011ea4
3400ee58:	34011eb0 	.word	0x34011eb0
3400ee5c:	34011edf 	.word	0x34011edf
3400ee60:	34011ef0 	.word	0x34011ef0
3400ee64:	34011f0b 	.word	0x34011f0b
3400ee68:	34011f1e 	.word	0x34011f1e
3400ee6c:	34011f34 	.word	0x34011f34
3400ee70:	34011f3d 	.word	0x34011f3d
3400ee74:	34011f54 	.word	0x34011f54
3400ee78:	34011f5c 	.word	0x34011f5c
3400ee7c:	34011f69 	.word	0x34011f69
3400ee80:	34011f7e 	.word	0x34011f7e
3400ee84:	34011f92 	.word	0x34011f92
3400ee88:	34011faa 	.word	0x34011faa
3400ee8c:	34011fb9 	.word	0x34011fb9
3400ee90:	34011fca 	.word	0x34011fca
3400ee94:	34011fdd 	.word	0x34011fdd
3400ee98:	34011fe9 	.word	0x34011fe9
3400ee9c:	34012002 	.word	0x34012002
3400eea0:	34012016 	.word	0x34012016
3400eea4:	34012031 	.word	0x34012031
3400eea8:	34012049 	.word	0x34012049
3400eeac:	34012063 	.word	0x34012063
3400eeb0:	3401206b 	.word	0x3401206b
3400eeb4:	3401209b 	.word	0x3401209b
3400eeb8:	340120ba 	.word	0x340120ba
3400eebc:	340120d9 	.word	0x340120d9
3400eec0:	340120f0 	.word	0x340120f0
3400eec4:	34012103 	.word	0x34012103
3400eec8:	3401211c 	.word	0x3401211c
3400eecc:	34012133 	.word	0x34012133
3400eed0:	34012149 	.word	0x34012149
3400eed4:	3401216a 	.word	0x3401216a
3400eed8:	34012182 	.word	0x34012182
3400eedc:	3401219e 	.word	0x3401219e
3400eee0:	340121b1 	.word	0x340121b1
3400eee4:	340121c7 	.word	0x340121c7
3400eee8:	340121db 	.word	0x340121db
3400eeec:	340121fd 	.word	0x340121fd
3400eef0:	34012223 	.word	0x34012223
3400eef4:	34012234 	.word	0x34012234
3400eef8:	34011206 	.word	0x34011206
3400eefc:	34011bbb 	.word	0x34011bbb

3400ef00 <strerror>:
3400ef00:	4601      	mov	r1, r0
3400ef02:	2300      	movs	r3, #0
3400ef04:	4802      	ldr	r0, [pc, #8]	@ (3400ef10 <strerror+0x10>)
3400ef06:	461a      	mov	r2, r3
3400ef08:	6800      	ldr	r0, [r0, #0]
3400ef0a:	f7ff be13 	b.w	3400eb34 <_strerror_r>
3400ef0e:	bf00      	nop
3400ef10:	34012844 	.word	0x34012844

3400ef14 <_user_strerror>:
3400ef14:	2000      	movs	r0, #0
3400ef16:	4770      	bx	lr

3400ef18 <_localeconv_r>:
3400ef18:	4800      	ldr	r0, [pc, #0]	@ (3400ef1c <_localeconv_r+0x4>)
3400ef1a:	4770      	bx	lr
3400ef1c:	34012984 	.word	0x34012984

3400ef20 <_close_r>:
3400ef20:	b538      	push	{r3, r4, r5, lr}
3400ef22:	2300      	movs	r3, #0
3400ef24:	4d05      	ldr	r5, [pc, #20]	@ (3400ef3c <_close_r+0x1c>)
3400ef26:	4604      	mov	r4, r0
3400ef28:	4608      	mov	r0, r1
3400ef2a:	602b      	str	r3, [r5, #0]
3400ef2c:	f7f2 fc69 	bl	34001802 <_close>
3400ef30:	1c43      	adds	r3, r0, #1
3400ef32:	d102      	bne.n	3400ef3a <_close_r+0x1a>
3400ef34:	682b      	ldr	r3, [r5, #0]
3400ef36:	b103      	cbz	r3, 3400ef3a <_close_r+0x1a>
3400ef38:	6023      	str	r3, [r4, #0]
3400ef3a:	bd38      	pop	{r3, r4, r5, pc}
3400ef3c:	340133f4 	.word	0x340133f4

3400ef40 <_lseek_r>:
3400ef40:	b538      	push	{r3, r4, r5, lr}
3400ef42:	4604      	mov	r4, r0
3400ef44:	4d06      	ldr	r5, [pc, #24]	@ (3400ef60 <_lseek_r+0x20>)
3400ef46:	4608      	mov	r0, r1
3400ef48:	4611      	mov	r1, r2
3400ef4a:	2200      	movs	r2, #0
3400ef4c:	602a      	str	r2, [r5, #0]
3400ef4e:	461a      	mov	r2, r3
3400ef50:	f7f2 fc61 	bl	34001816 <_lseek>
3400ef54:	1c43      	adds	r3, r0, #1
3400ef56:	d102      	bne.n	3400ef5e <_lseek_r+0x1e>
3400ef58:	682b      	ldr	r3, [r5, #0]
3400ef5a:	b103      	cbz	r3, 3400ef5e <_lseek_r+0x1e>
3400ef5c:	6023      	str	r3, [r4, #0]
3400ef5e:	bd38      	pop	{r3, r4, r5, pc}
3400ef60:	340133f4 	.word	0x340133f4

3400ef64 <_read_r>:
3400ef64:	b538      	push	{r3, r4, r5, lr}
3400ef66:	4604      	mov	r4, r0
3400ef68:	4d06      	ldr	r5, [pc, #24]	@ (3400ef84 <_read_r+0x20>)
3400ef6a:	4608      	mov	r0, r1
3400ef6c:	4611      	mov	r1, r2
3400ef6e:	2200      	movs	r2, #0
3400ef70:	602a      	str	r2, [r5, #0]
3400ef72:	461a      	mov	r2, r3
3400ef74:	f7f2 fc37 	bl	340017e6 <_read>
3400ef78:	1c43      	adds	r3, r0, #1
3400ef7a:	d102      	bne.n	3400ef82 <_read_r+0x1e>
3400ef7c:	682b      	ldr	r3, [r5, #0]
3400ef7e:	b103      	cbz	r3, 3400ef82 <_read_r+0x1e>
3400ef80:	6023      	str	r3, [r4, #0]
3400ef82:	bd38      	pop	{r3, r4, r5, pc}
3400ef84:	340133f4 	.word	0x340133f4

3400ef88 <_sbrk_r>:
3400ef88:	b538      	push	{r3, r4, r5, lr}
3400ef8a:	2300      	movs	r3, #0
3400ef8c:	4d05      	ldr	r5, [pc, #20]	@ (3400efa4 <_sbrk_r+0x1c>)
3400ef8e:	4604      	mov	r4, r0
3400ef90:	4608      	mov	r0, r1
3400ef92:	602b      	str	r3, [r5, #0]
3400ef94:	f001 fc60 	bl	34010858 <_sbrk>
3400ef98:	1c43      	adds	r3, r0, #1
3400ef9a:	d102      	bne.n	3400efa2 <_sbrk_r+0x1a>
3400ef9c:	682b      	ldr	r3, [r5, #0]
3400ef9e:	b103      	cbz	r3, 3400efa2 <_sbrk_r+0x1a>
3400efa0:	6023      	str	r3, [r4, #0]
3400efa2:	bd38      	pop	{r3, r4, r5, pc}
3400efa4:	340133f4 	.word	0x340133f4

3400efa8 <_write_r>:
3400efa8:	b538      	push	{r3, r4, r5, lr}
3400efaa:	4604      	mov	r4, r0
3400efac:	4d06      	ldr	r5, [pc, #24]	@ (3400efc8 <_write_r+0x20>)
3400efae:	4608      	mov	r0, r1
3400efb0:	4611      	mov	r1, r2
3400efb2:	2200      	movs	r2, #0
3400efb4:	602a      	str	r2, [r5, #0]
3400efb6:	461a      	mov	r2, r3
3400efb8:	f7f2 fb84 	bl	340016c4 <_write>
3400efbc:	1c43      	adds	r3, r0, #1
3400efbe:	d102      	bne.n	3400efc6 <_write_r+0x1e>
3400efc0:	682b      	ldr	r3, [r5, #0]
3400efc2:	b103      	cbz	r3, 3400efc6 <_write_r+0x1e>
3400efc4:	6023      	str	r3, [r4, #0]
3400efc6:	bd38      	pop	{r3, r4, r5, pc}
3400efc8:	340133f4 	.word	0x340133f4

3400efcc <__errno>:
3400efcc:	4b01      	ldr	r3, [pc, #4]	@ (3400efd4 <__errno+0x8>)
3400efce:	6818      	ldr	r0, [r3, #0]
3400efd0:	4770      	bx	lr
3400efd2:	bf00      	nop
3400efd4:	34012844 	.word	0x34012844

3400efd8 <__libc_init_array>:
3400efd8:	b570      	push	{r4, r5, r6, lr}
3400efda:	4d0d      	ldr	r5, [pc, #52]	@ (3400f010 <__libc_init_array+0x38>)
3400efdc:	2600      	movs	r6, #0
3400efde:	4c0d      	ldr	r4, [pc, #52]	@ (3400f014 <__libc_init_array+0x3c>)
3400efe0:	1b64      	subs	r4, r4, r5
3400efe2:	10a4      	asrs	r4, r4, #2
3400efe4:	42a6      	cmp	r6, r4
3400efe6:	d109      	bne.n	3400effc <__libc_init_array+0x24>
3400efe8:	4d0b      	ldr	r5, [pc, #44]	@ (3400f018 <__libc_init_array+0x40>)
3400efea:	2600      	movs	r6, #0
3400efec:	4c0b      	ldr	r4, [pc, #44]	@ (3400f01c <__libc_init_array+0x44>)
3400efee:	f001 fc41 	bl	34010874 <_init>
3400eff2:	1b64      	subs	r4, r4, r5
3400eff4:	10a4      	asrs	r4, r4, #2
3400eff6:	42a6      	cmp	r6, r4
3400eff8:	d105      	bne.n	3400f006 <__libc_init_array+0x2e>
3400effa:	bd70      	pop	{r4, r5, r6, pc}
3400effc:	f855 3b04 	ldr.w	r3, [r5], #4
3400f000:	3601      	adds	r6, #1
3400f002:	4798      	blx	r3
3400f004:	e7ee      	b.n	3400efe4 <__libc_init_array+0xc>
3400f006:	f855 3b04 	ldr.w	r3, [r5], #4
3400f00a:	3601      	adds	r6, #1
3400f00c:	4798      	blx	r3
3400f00e:	e7f2      	b.n	3400eff6 <__libc_init_array+0x1e>
3400f010:	340127dc 	.word	0x340127dc
3400f014:	340127dc 	.word	0x340127dc
3400f018:	340127dc 	.word	0x340127dc
3400f01c:	340127e0 	.word	0x340127e0

3400f020 <__retarget_lock_init_recursive>:
3400f020:	4770      	bx	lr

3400f022 <__retarget_lock_acquire_recursive>:
3400f022:	4770      	bx	lr

3400f024 <__retarget_lock_release_recursive>:
3400f024:	4770      	bx	lr

3400f026 <memchr>:
3400f026:	b2c9      	uxtb	r1, r1
3400f028:	4603      	mov	r3, r0
3400f02a:	4402      	add	r2, r0
3400f02c:	b510      	push	{r4, lr}
3400f02e:	4293      	cmp	r3, r2
3400f030:	4618      	mov	r0, r3
3400f032:	d101      	bne.n	3400f038 <memchr+0x12>
3400f034:	2000      	movs	r0, #0
3400f036:	e003      	b.n	3400f040 <memchr+0x1a>
3400f038:	7804      	ldrb	r4, [r0, #0]
3400f03a:	3301      	adds	r3, #1
3400f03c:	428c      	cmp	r4, r1
3400f03e:	d1f6      	bne.n	3400f02e <memchr+0x8>
3400f040:	bd10      	pop	{r4, pc}

3400f042 <memcpy>:
3400f042:	440a      	add	r2, r1
3400f044:	1e43      	subs	r3, r0, #1
3400f046:	4291      	cmp	r1, r2
3400f048:	d100      	bne.n	3400f04c <memcpy+0xa>
3400f04a:	4770      	bx	lr
3400f04c:	b510      	push	{r4, lr}
3400f04e:	f811 4b01 	ldrb.w	r4, [r1], #1
3400f052:	4291      	cmp	r1, r2
3400f054:	f803 4f01 	strb.w	r4, [r3, #1]!
3400f058:	d1f9      	bne.n	3400f04e <memcpy+0xc>
3400f05a:	bd10      	pop	{r4, pc}

3400f05c <abort>:
3400f05c:	2006      	movs	r0, #6
3400f05e:	b508      	push	{r3, lr}
3400f060:	f001 fb88 	bl	34010774 <raise>
3400f064:	2001      	movs	r0, #1
3400f066:	f7f2 fbb8 	bl	340017da <_exit>

3400f06a <quorem>:
3400f06a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400f06e:	6903      	ldr	r3, [r0, #16]
3400f070:	4607      	mov	r7, r0
3400f072:	690c      	ldr	r4, [r1, #16]
3400f074:	42a3      	cmp	r3, r4
3400f076:	f2c0 8083 	blt.w	3400f180 <quorem+0x116>
3400f07a:	3c01      	subs	r4, #1
3400f07c:	f100 0514 	add.w	r5, r0, #20
3400f080:	f101 0814 	add.w	r8, r1, #20
3400f084:	00a3      	lsls	r3, r4, #2
3400f086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400f08a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3400f08e:	9300      	str	r3, [sp, #0]
3400f090:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400f094:	9301      	str	r3, [sp, #4]
3400f096:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3400f09a:	3301      	adds	r3, #1
3400f09c:	429a      	cmp	r2, r3
3400f09e:	fbb2 f6f3 	udiv	r6, r2, r3
3400f0a2:	d331      	bcc.n	3400f108 <quorem+0x9e>
3400f0a4:	f04f 0a00 	mov.w	sl, #0
3400f0a8:	46c4      	mov	ip, r8
3400f0aa:	46ae      	mov	lr, r5
3400f0ac:	46d3      	mov	fp, sl
3400f0ae:	f85c 3b04 	ldr.w	r3, [ip], #4
3400f0b2:	b298      	uxth	r0, r3
3400f0b4:	45e1      	cmp	r9, ip
3400f0b6:	ea4f 4313 	mov.w	r3, r3, lsr #16
3400f0ba:	fb06 a000 	mla	r0, r6, r0, sl
3400f0be:	ea4f 4210 	mov.w	r2, r0, lsr #16
3400f0c2:	b280      	uxth	r0, r0
3400f0c4:	fb06 2303 	mla	r3, r6, r3, r2
3400f0c8:	f8de 2000 	ldr.w	r2, [lr]
3400f0cc:	b292      	uxth	r2, r2
3400f0ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400f0d2:	eba2 0200 	sub.w	r2, r2, r0
3400f0d6:	b29b      	uxth	r3, r3
3400f0d8:	f8de 0000 	ldr.w	r0, [lr]
3400f0dc:	445a      	add	r2, fp
3400f0de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3400f0e2:	b292      	uxth	r2, r2
3400f0e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3400f0e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3400f0ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
3400f0f0:	f84e 2b04 	str.w	r2, [lr], #4
3400f0f4:	d2db      	bcs.n	3400f0ae <quorem+0x44>
3400f0f6:	9b00      	ldr	r3, [sp, #0]
3400f0f8:	58eb      	ldr	r3, [r5, r3]
3400f0fa:	b92b      	cbnz	r3, 3400f108 <quorem+0x9e>
3400f0fc:	9b01      	ldr	r3, [sp, #4]
3400f0fe:	3b04      	subs	r3, #4
3400f100:	429d      	cmp	r5, r3
3400f102:	461a      	mov	r2, r3
3400f104:	d330      	bcc.n	3400f168 <quorem+0xfe>
3400f106:	613c      	str	r4, [r7, #16]
3400f108:	4638      	mov	r0, r7
3400f10a:	f001 f85b 	bl	340101c4 <__mcmp>
3400f10e:	2800      	cmp	r0, #0
3400f110:	db26      	blt.n	3400f160 <quorem+0xf6>
3400f112:	4629      	mov	r1, r5
3400f114:	2000      	movs	r0, #0
3400f116:	f858 2b04 	ldr.w	r2, [r8], #4
3400f11a:	f8d1 c000 	ldr.w	ip, [r1]
3400f11e:	fa1f fe82 	uxth.w	lr, r2
3400f122:	45c1      	cmp	r9, r8
3400f124:	fa1f f38c 	uxth.w	r3, ip
3400f128:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400f12c:	eba3 030e 	sub.w	r3, r3, lr
3400f130:	4403      	add	r3, r0
3400f132:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3400f136:	b29b      	uxth	r3, r3
3400f138:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3400f13c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400f140:	ea4f 4022 	mov.w	r0, r2, asr #16
3400f144:	f841 3b04 	str.w	r3, [r1], #4
3400f148:	d2e5      	bcs.n	3400f116 <quorem+0xac>
3400f14a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400f14e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400f152:	b922      	cbnz	r2, 3400f15e <quorem+0xf4>
3400f154:	3b04      	subs	r3, #4
3400f156:	429d      	cmp	r5, r3
3400f158:	461a      	mov	r2, r3
3400f15a:	d30b      	bcc.n	3400f174 <quorem+0x10a>
3400f15c:	613c      	str	r4, [r7, #16]
3400f15e:	3601      	adds	r6, #1
3400f160:	4630      	mov	r0, r6
3400f162:	b003      	add	sp, #12
3400f164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400f168:	6812      	ldr	r2, [r2, #0]
3400f16a:	3b04      	subs	r3, #4
3400f16c:	2a00      	cmp	r2, #0
3400f16e:	d1ca      	bne.n	3400f106 <quorem+0x9c>
3400f170:	3c01      	subs	r4, #1
3400f172:	e7c5      	b.n	3400f100 <quorem+0x96>
3400f174:	6812      	ldr	r2, [r2, #0]
3400f176:	3b04      	subs	r3, #4
3400f178:	2a00      	cmp	r2, #0
3400f17a:	d1ef      	bne.n	3400f15c <quorem+0xf2>
3400f17c:	3c01      	subs	r4, #1
3400f17e:	e7ea      	b.n	3400f156 <quorem+0xec>
3400f180:	2000      	movs	r0, #0
3400f182:	e7ee      	b.n	3400f162 <quorem+0xf8>
3400f184:	0000      	movs	r0, r0
	...

3400f188 <_dtoa_r>:
3400f188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400f18c:	69c7      	ldr	r7, [r0, #28]
3400f18e:	4681      	mov	r9, r0
3400f190:	ed2d 8b02 	vpush	{d8}
3400f194:	b091      	sub	sp, #68	@ 0x44
3400f196:	ec55 4b10 	vmov	r4, r5, d0
3400f19a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3400f19c:	9107      	str	r1, [sp, #28]
3400f19e:	9209      	str	r2, [sp, #36]	@ 0x24
3400f1a0:	930d      	str	r3, [sp, #52]	@ 0x34
3400f1a2:	ed8d 0b02 	vstr	d0, [sp, #8]
3400f1a6:	b97f      	cbnz	r7, 3400f1c8 <_dtoa_r+0x40>
3400f1a8:	2010      	movs	r0, #16
3400f1aa:	f7fe fce7 	bl	3400db7c <malloc>
3400f1ae:	4602      	mov	r2, r0
3400f1b0:	f8c9 001c 	str.w	r0, [r9, #28]
3400f1b4:	b920      	cbnz	r0, 3400f1c0 <_dtoa_r+0x38>
3400f1b6:	4ba0      	ldr	r3, [pc, #640]	@ (3400f438 <_dtoa_r+0x2b0>)
3400f1b8:	21ef      	movs	r1, #239	@ 0xef
3400f1ba:	48a0      	ldr	r0, [pc, #640]	@ (3400f43c <_dtoa_r+0x2b4>)
3400f1bc:	f7fe fcc0 	bl	3400db40 <__assert_func>
3400f1c0:	e9c0 7701 	strd	r7, r7, [r0, #4]
3400f1c4:	6007      	str	r7, [r0, #0]
3400f1c6:	60c7      	str	r7, [r0, #12]
3400f1c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400f1cc:	6819      	ldr	r1, [r3, #0]
3400f1ce:	b159      	cbz	r1, 3400f1e8 <_dtoa_r+0x60>
3400f1d0:	685a      	ldr	r2, [r3, #4]
3400f1d2:	2301      	movs	r3, #1
3400f1d4:	4648      	mov	r0, r9
3400f1d6:	4093      	lsls	r3, r2
3400f1d8:	604a      	str	r2, [r1, #4]
3400f1da:	608b      	str	r3, [r1, #8]
3400f1dc:	f000 fdbc 	bl	3400fd58 <_Bfree>
3400f1e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400f1e4:	2200      	movs	r2, #0
3400f1e6:	601a      	str	r2, [r3, #0]
3400f1e8:	1e2b      	subs	r3, r5, #0
3400f1ea:	bfb7      	itett	lt
3400f1ec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3400f1f0:	2300      	movge	r3, #0
3400f1f2:	2201      	movlt	r2, #1
3400f1f4:	9303      	strlt	r3, [sp, #12]
3400f1f6:	bfac      	ite	ge
3400f1f8:	6033      	strge	r3, [r6, #0]
3400f1fa:	6032      	strlt	r2, [r6, #0]
3400f1fc:	4b90      	ldr	r3, [pc, #576]	@ (3400f440 <_dtoa_r+0x2b8>)
3400f1fe:	9e03      	ldr	r6, [sp, #12]
3400f200:	43b3      	bics	r3, r6
3400f202:	d110      	bne.n	3400f226 <_dtoa_r+0x9e>
3400f204:	f242 730f 	movw	r3, #9999	@ 0x270f
3400f208:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400f20a:	6013      	str	r3, [r2, #0]
3400f20c:	f3c6 0313 	ubfx	r3, r6, #0, #20
3400f210:	4323      	orrs	r3, r4
3400f212:	f000 84e6 	beq.w	3400fbe2 <_dtoa_r+0xa5a>
3400f216:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f218:	4f8a      	ldr	r7, [pc, #552]	@ (3400f444 <_dtoa_r+0x2bc>)
3400f21a:	2b00      	cmp	r3, #0
3400f21c:	f000 84e8 	beq.w	3400fbf0 <_dtoa_r+0xa68>
3400f220:	1cfb      	adds	r3, r7, #3
3400f222:	f000 bce3 	b.w	3400fbec <_dtoa_r+0xa64>
3400f226:	ed9d 8b02 	vldr	d8, [sp, #8]
3400f22a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400f22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f232:	d10a      	bne.n	3400f24a <_dtoa_r+0xc2>
3400f234:	2301      	movs	r3, #1
3400f236:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400f238:	6013      	str	r3, [r2, #0]
3400f23a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f23c:	b113      	cbz	r3, 3400f244 <_dtoa_r+0xbc>
3400f23e:	4b82      	ldr	r3, [pc, #520]	@ (3400f448 <_dtoa_r+0x2c0>)
3400f240:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400f242:	6013      	str	r3, [r2, #0]
3400f244:	4f81      	ldr	r7, [pc, #516]	@ (3400f44c <_dtoa_r+0x2c4>)
3400f246:	f000 bcd3 	b.w	3400fbf0 <_dtoa_r+0xa68>
3400f24a:	aa0e      	add	r2, sp, #56	@ 0x38
3400f24c:	eeb0 0b48 	vmov.f64	d0, d8
3400f250:	a90f      	add	r1, sp, #60	@ 0x3c
3400f252:	4648      	mov	r0, r9
3400f254:	f001 f86a 	bl	3401032c <__d2b>
3400f258:	f3c6 530a 	ubfx	r3, r6, #20, #11
3400f25c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400f25e:	9001      	str	r0, [sp, #4]
3400f260:	2b00      	cmp	r3, #0
3400f262:	d045      	beq.n	3400f2f0 <_dtoa_r+0x168>
3400f264:	ee18 1a90 	vmov	r1, s17
3400f268:	eeb0 7b48 	vmov.f64	d7, d8
3400f26c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3400f270:	2500      	movs	r5, #0
3400f272:	f3c1 0113 	ubfx	r1, r1, #0, #20
3400f276:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3400f27a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3400f27e:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3400f282:	ee07 1a90 	vmov	s15, r1
3400f286:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3400f420 <_dtoa_r+0x298>
3400f28a:	ee37 7b46 	vsub.f64	d7, d7, d6
3400f28e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3400f428 <_dtoa_r+0x2a0>
3400f292:	eea7 6b05 	vfma.f64	d6, d7, d5
3400f296:	ee07 3a90 	vmov	s15, r3
3400f29a:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3400f29e:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3400f430 <_dtoa_r+0x2a8>
3400f2a2:	eeb0 7b46 	vmov.f64	d7, d6
3400f2a6:	eea4 7b05 	vfma.f64	d7, d4, d5
3400f2aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3400f2ae:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3400f2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f2b6:	ee16 8a90 	vmov	r8, s13
3400f2ba:	d508      	bpl.n	3400f2ce <_dtoa_r+0x146>
3400f2bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3400f2c0:	eeb4 6b47 	vcmp.f64	d6, d7
3400f2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f2c8:	bf18      	it	ne
3400f2ca:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3400f2ce:	f1b8 0f16 	cmp.w	r8, #22
3400f2d2:	d82d      	bhi.n	3400f330 <_dtoa_r+0x1a8>
3400f2d4:	495e      	ldr	r1, [pc, #376]	@ (3400f450 <_dtoa_r+0x2c8>)
3400f2d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3400f2da:	ed91 7b00 	vldr	d7, [r1]
3400f2de:	eeb4 8bc7 	vcmpe.f64	d8, d7
3400f2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f2e6:	d501      	bpl.n	3400f2ec <_dtoa_r+0x164>
3400f2e8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400f2ec:	2100      	movs	r1, #0
3400f2ee:	e020      	b.n	3400f332 <_dtoa_r+0x1aa>
3400f2f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3400f2f2:	2501      	movs	r5, #1
3400f2f4:	4413      	add	r3, r2
3400f2f6:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3400f2fa:	2920      	cmp	r1, #32
3400f2fc:	bfc9      	itett	gt
3400f2fe:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3400f302:	f1c1 0120 	rsble	r1, r1, #32
3400f306:	408e      	lslgt	r6, r1
3400f308:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3400f30c:	bfd8      	it	le
3400f30e:	fa04 f101 	lslle.w	r1, r4, r1
3400f312:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3400f316:	bfc4      	itt	gt
3400f318:	fa24 f101 	lsrgt.w	r1, r4, r1
3400f31c:	4331      	orrgt	r1, r6
3400f31e:	ee07 1a90 	vmov	s15, r1
3400f322:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3400f326:	ee17 1a90 	vmov	r1, s15
3400f32a:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3400f32e:	e7a6      	b.n	3400f27e <_dtoa_r+0xf6>
3400f330:	2101      	movs	r1, #1
3400f332:	1ad2      	subs	r2, r2, r3
3400f334:	910c      	str	r1, [sp, #48]	@ 0x30
3400f336:	1e53      	subs	r3, r2, #1
3400f338:	9306      	str	r3, [sp, #24]
3400f33a:	bf49      	itett	mi
3400f33c:	f1c2 0301 	rsbmi	r3, r2, #1
3400f340:	2300      	movpl	r3, #0
3400f342:	9304      	strmi	r3, [sp, #16]
3400f344:	2300      	movmi	r3, #0
3400f346:	bf54      	ite	pl
3400f348:	9304      	strpl	r3, [sp, #16]
3400f34a:	9306      	strmi	r3, [sp, #24]
3400f34c:	f1b8 0f00 	cmp.w	r8, #0
3400f350:	db16      	blt.n	3400f380 <_dtoa_r+0x1f8>
3400f352:	9b06      	ldr	r3, [sp, #24]
3400f354:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3400f358:	4443      	add	r3, r8
3400f35a:	9306      	str	r3, [sp, #24]
3400f35c:	2300      	movs	r3, #0
3400f35e:	9a07      	ldr	r2, [sp, #28]
3400f360:	2a09      	cmp	r2, #9
3400f362:	d843      	bhi.n	3400f3ec <_dtoa_r+0x264>
3400f364:	2a05      	cmp	r2, #5
3400f366:	bfc5      	ittet	gt
3400f368:	3a04      	subgt	r2, #4
3400f36a:	2400      	movgt	r4, #0
3400f36c:	2401      	movle	r4, #1
3400f36e:	9207      	strgt	r2, [sp, #28]
3400f370:	9a07      	ldr	r2, [sp, #28]
3400f372:	3a02      	subs	r2, #2
3400f374:	2a03      	cmp	r2, #3
3400f376:	d844      	bhi.n	3400f402 <_dtoa_r+0x27a>
3400f378:	e8df f002 	tbb	[pc, r2]
3400f37c:	0b173634 	.word	0x0b173634
3400f380:	9b04      	ldr	r3, [sp, #16]
3400f382:	2200      	movs	r2, #0
3400f384:	eba3 0308 	sub.w	r3, r3, r8
3400f388:	920a      	str	r2, [sp, #40]	@ 0x28
3400f38a:	9304      	str	r3, [sp, #16]
3400f38c:	f1c8 0300 	rsb	r3, r8, #0
3400f390:	e7e5      	b.n	3400f35e <_dtoa_r+0x1d6>
3400f392:	2201      	movs	r2, #1
3400f394:	9208      	str	r2, [sp, #32]
3400f396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f398:	eb08 0b02 	add.w	fp, r8, r2
3400f39c:	f10b 0a01 	add.w	sl, fp, #1
3400f3a0:	4652      	mov	r2, sl
3400f3a2:	2a01      	cmp	r2, #1
3400f3a4:	bfb8      	it	lt
3400f3a6:	2201      	movlt	r2, #1
3400f3a8:	e006      	b.n	3400f3b8 <_dtoa_r+0x230>
3400f3aa:	2201      	movs	r2, #1
3400f3ac:	9208      	str	r2, [sp, #32]
3400f3ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f3b0:	2a00      	cmp	r2, #0
3400f3b2:	dd29      	ble.n	3400f408 <_dtoa_r+0x280>
3400f3b4:	4693      	mov	fp, r2
3400f3b6:	4692      	mov	sl, r2
3400f3b8:	f8d9 701c 	ldr.w	r7, [r9, #28]
3400f3bc:	2100      	movs	r1, #0
3400f3be:	2004      	movs	r0, #4
3400f3c0:	f100 0614 	add.w	r6, r0, #20
3400f3c4:	4296      	cmp	r6, r2
3400f3c6:	d926      	bls.n	3400f416 <_dtoa_r+0x28e>
3400f3c8:	6079      	str	r1, [r7, #4]
3400f3ca:	4648      	mov	r0, r9
3400f3cc:	9305      	str	r3, [sp, #20]
3400f3ce:	f000 fc83 	bl	3400fcd8 <_Balloc>
3400f3d2:	9b05      	ldr	r3, [sp, #20]
3400f3d4:	4607      	mov	r7, r0
3400f3d6:	2800      	cmp	r0, #0
3400f3d8:	d13e      	bne.n	3400f458 <_dtoa_r+0x2d0>
3400f3da:	4b1e      	ldr	r3, [pc, #120]	@ (3400f454 <_dtoa_r+0x2cc>)
3400f3dc:	4602      	mov	r2, r0
3400f3de:	f240 11af 	movw	r1, #431	@ 0x1af
3400f3e2:	e6ea      	b.n	3400f1ba <_dtoa_r+0x32>
3400f3e4:	2200      	movs	r2, #0
3400f3e6:	e7e1      	b.n	3400f3ac <_dtoa_r+0x224>
3400f3e8:	2200      	movs	r2, #0
3400f3ea:	e7d3      	b.n	3400f394 <_dtoa_r+0x20c>
3400f3ec:	2401      	movs	r4, #1
3400f3ee:	2200      	movs	r2, #0
3400f3f0:	e9cd 2407 	strd	r2, r4, [sp, #28]
3400f3f4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3400f3f8:	2100      	movs	r1, #0
3400f3fa:	2212      	movs	r2, #18
3400f3fc:	46da      	mov	sl, fp
3400f3fe:	9109      	str	r1, [sp, #36]	@ 0x24
3400f400:	e7da      	b.n	3400f3b8 <_dtoa_r+0x230>
3400f402:	2201      	movs	r2, #1
3400f404:	9208      	str	r2, [sp, #32]
3400f406:	e7f5      	b.n	3400f3f4 <_dtoa_r+0x26c>
3400f408:	f04f 0b01 	mov.w	fp, #1
3400f40c:	46da      	mov	sl, fp
3400f40e:	465a      	mov	r2, fp
3400f410:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3400f414:	e7d0      	b.n	3400f3b8 <_dtoa_r+0x230>
3400f416:	3101      	adds	r1, #1
3400f418:	0040      	lsls	r0, r0, #1
3400f41a:	e7d1      	b.n	3400f3c0 <_dtoa_r+0x238>
3400f41c:	f3af 8000 	nop.w
3400f420:	636f4361 	.word	0x636f4361
3400f424:	3fd287a7 	.word	0x3fd287a7
3400f428:	8b60c8b3 	.word	0x8b60c8b3
3400f42c:	3fc68a28 	.word	0x3fc68a28
3400f430:	509f79fb 	.word	0x509f79fb
3400f434:	3fd34413 	.word	0x3fd34413
3400f438:	34012256 	.word	0x34012256
3400f43c:	3401226d 	.word	0x3401226d
3400f440:	7ff00000 	.word	0x7ff00000
3400f444:	34012252 	.word	0x34012252
3400f448:	3401141e 	.word	0x3401141e
3400f44c:	3401141d 	.word	0x3401141d
3400f450:	34012608 	.word	0x34012608
3400f454:	340122c5 	.word	0x340122c5
3400f458:	f8d9 201c 	ldr.w	r2, [r9, #28]
3400f45c:	f1ba 0f0e 	cmp.w	sl, #14
3400f460:	6010      	str	r0, [r2, #0]
3400f462:	d86e      	bhi.n	3400f542 <_dtoa_r+0x3ba>
3400f464:	2c00      	cmp	r4, #0
3400f466:	d06c      	beq.n	3400f542 <_dtoa_r+0x3ba>
3400f468:	f1b8 0f00 	cmp.w	r8, #0
3400f46c:	f340 80b4 	ble.w	3400f5d8 <_dtoa_r+0x450>
3400f470:	f008 010f 	and.w	r1, r8, #15
3400f474:	4ac7      	ldr	r2, [pc, #796]	@ (3400f794 <_dtoa_r+0x60c>)
3400f476:	f418 7f80 	tst.w	r8, #256	@ 0x100
3400f47a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3400f47e:	ea4f 1128 	mov.w	r1, r8, asr #4
3400f482:	ed92 7b00 	vldr	d7, [r2]
3400f486:	f000 809b 	beq.w	3400f5c0 <_dtoa_r+0x438>
3400f48a:	4ac3      	ldr	r2, [pc, #780]	@ (3400f798 <_dtoa_r+0x610>)
3400f48c:	f001 010f 	and.w	r1, r1, #15
3400f490:	ed92 6b08 	vldr	d6, [r2, #32]
3400f494:	2203      	movs	r2, #3
3400f496:	ee88 6b06 	vdiv.f64	d6, d8, d6
3400f49a:	ed8d 6b02 	vstr	d6, [sp, #8]
3400f49e:	48be      	ldr	r0, [pc, #760]	@ (3400f798 <_dtoa_r+0x610>)
3400f4a0:	2900      	cmp	r1, #0
3400f4a2:	f040 808f 	bne.w	3400f5c4 <_dtoa_r+0x43c>
3400f4a6:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f4aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
3400f4ae:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f4b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
3400f4b4:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f4b8:	2900      	cmp	r1, #0
3400f4ba:	f000 80b3 	beq.w	3400f624 <_dtoa_r+0x49c>
3400f4be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3400f4c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f4ca:	f140 80ab 	bpl.w	3400f624 <_dtoa_r+0x49c>
3400f4ce:	f1ba 0f00 	cmp.w	sl, #0
3400f4d2:	f000 80a7 	beq.w	3400f624 <_dtoa_r+0x49c>
3400f4d6:	f1bb 0f00 	cmp.w	fp, #0
3400f4da:	dd30      	ble.n	3400f53e <_dtoa_r+0x3b6>
3400f4dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3400f4e0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3400f4e4:	3201      	adds	r2, #1
3400f4e6:	465c      	mov	r4, fp
3400f4e8:	9105      	str	r1, [sp, #20]
3400f4ea:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f4ee:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f4f2:	ee07 2a90 	vmov	s15, r2
3400f4f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3400f4fa:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f4fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3400f502:	eea7 5b06 	vfma.f64	d5, d7, d6
3400f506:	ee15 2a90 	vmov	r2, s11
3400f50a:	ec51 0b15 	vmov	r0, r1, d5
3400f50e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3400f512:	2c00      	cmp	r4, #0
3400f514:	f040 808a 	bne.w	3400f62c <_dtoa_r+0x4a4>
3400f518:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f51c:	ee36 6b47 	vsub.f64	d6, d6, d7
3400f520:	ec41 0b17 	vmov	d7, r0, r1
3400f524:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f52c:	f300 826a 	bgt.w	3400fa04 <_dtoa_r+0x87c>
3400f530:	eeb1 7b47 	vneg.f64	d7, d7
3400f534:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f53c:	d423      	bmi.n	3400f586 <_dtoa_r+0x3fe>
3400f53e:	ed8d 8b02 	vstr	d8, [sp, #8]
3400f542:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3400f544:	2a00      	cmp	r2, #0
3400f546:	f2c0 8129 	blt.w	3400f79c <_dtoa_r+0x614>
3400f54a:	f1b8 0f0e 	cmp.w	r8, #14
3400f54e:	f300 8125 	bgt.w	3400f79c <_dtoa_r+0x614>
3400f552:	4b90      	ldr	r3, [pc, #576]	@ (3400f794 <_dtoa_r+0x60c>)
3400f554:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3400f558:	ed93 6b00 	vldr	d6, [r3]
3400f55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f55e:	2b00      	cmp	r3, #0
3400f560:	f280 80c8 	bge.w	3400f6f4 <_dtoa_r+0x56c>
3400f564:	f1ba 0f00 	cmp.w	sl, #0
3400f568:	f300 80c4 	bgt.w	3400f6f4 <_dtoa_r+0x56c>
3400f56c:	d10b      	bne.n	3400f586 <_dtoa_r+0x3fe>
3400f56e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f572:	ee26 6b07 	vmul.f64	d6, d6, d7
3400f576:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f57a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f582:	f2c0 823c 	blt.w	3400f9fe <_dtoa_r+0x876>
3400f586:	2400      	movs	r4, #0
3400f588:	4625      	mov	r5, r4
3400f58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f58c:	463e      	mov	r6, r7
3400f58e:	43db      	mvns	r3, r3
3400f590:	9305      	str	r3, [sp, #20]
3400f592:	f04f 0800 	mov.w	r8, #0
3400f596:	4621      	mov	r1, r4
3400f598:	4648      	mov	r0, r9
3400f59a:	f000 fbdd 	bl	3400fd58 <_Bfree>
3400f59e:	2d00      	cmp	r5, #0
3400f5a0:	f000 80a2 	beq.w	3400f6e8 <_dtoa_r+0x560>
3400f5a4:	f1b8 0f00 	cmp.w	r8, #0
3400f5a8:	d005      	beq.n	3400f5b6 <_dtoa_r+0x42e>
3400f5aa:	45a8      	cmp	r8, r5
3400f5ac:	d003      	beq.n	3400f5b6 <_dtoa_r+0x42e>
3400f5ae:	4641      	mov	r1, r8
3400f5b0:	4648      	mov	r0, r9
3400f5b2:	f000 fbd1 	bl	3400fd58 <_Bfree>
3400f5b6:	4629      	mov	r1, r5
3400f5b8:	4648      	mov	r0, r9
3400f5ba:	f000 fbcd 	bl	3400fd58 <_Bfree>
3400f5be:	e093      	b.n	3400f6e8 <_dtoa_r+0x560>
3400f5c0:	2202      	movs	r2, #2
3400f5c2:	e76c      	b.n	3400f49e <_dtoa_r+0x316>
3400f5c4:	07cc      	lsls	r4, r1, #31
3400f5c6:	d504      	bpl.n	3400f5d2 <_dtoa_r+0x44a>
3400f5c8:	3201      	adds	r2, #1
3400f5ca:	ed90 6b00 	vldr	d6, [r0]
3400f5ce:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f5d2:	1049      	asrs	r1, r1, #1
3400f5d4:	3008      	adds	r0, #8
3400f5d6:	e763      	b.n	3400f4a0 <_dtoa_r+0x318>
3400f5d8:	d022      	beq.n	3400f620 <_dtoa_r+0x498>
3400f5da:	f1c8 0100 	rsb	r1, r8, #0
3400f5de:	4a6d      	ldr	r2, [pc, #436]	@ (3400f794 <_dtoa_r+0x60c>)
3400f5e0:	2400      	movs	r4, #0
3400f5e2:	f001 000f 	and.w	r0, r1, #15
3400f5e6:	1109      	asrs	r1, r1, #4
3400f5e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3400f5ec:	486a      	ldr	r0, [pc, #424]	@ (3400f798 <_dtoa_r+0x610>)
3400f5ee:	ed92 7b00 	vldr	d7, [r2]
3400f5f2:	2202      	movs	r2, #2
3400f5f4:	ee28 7b07 	vmul.f64	d7, d8, d7
3400f5f8:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f5fc:	b929      	cbnz	r1, 3400f60a <_dtoa_r+0x482>
3400f5fe:	2c00      	cmp	r4, #0
3400f600:	f43f af57 	beq.w	3400f4b2 <_dtoa_r+0x32a>
3400f604:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f608:	e753      	b.n	3400f4b2 <_dtoa_r+0x32a>
3400f60a:	07ce      	lsls	r6, r1, #31
3400f60c:	d505      	bpl.n	3400f61a <_dtoa_r+0x492>
3400f60e:	3201      	adds	r2, #1
3400f610:	2401      	movs	r4, #1
3400f612:	ed90 6b00 	vldr	d6, [r0]
3400f616:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f61a:	1049      	asrs	r1, r1, #1
3400f61c:	3008      	adds	r0, #8
3400f61e:	e7ed      	b.n	3400f5fc <_dtoa_r+0x474>
3400f620:	2202      	movs	r2, #2
3400f622:	e746      	b.n	3400f4b2 <_dtoa_r+0x32a>
3400f624:	4654      	mov	r4, sl
3400f626:	f8cd 8014 	str.w	r8, [sp, #20]
3400f62a:	e762      	b.n	3400f4f2 <_dtoa_r+0x36a>
3400f62c:	4a59      	ldr	r2, [pc, #356]	@ (3400f794 <_dtoa_r+0x60c>)
3400f62e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3400f632:	443c      	add	r4, r7
3400f634:	ed12 4b02 	vldr	d4, [r2, #-8]
3400f638:	9a08      	ldr	r2, [sp, #32]
3400f63a:	ec41 0b17 	vmov	d7, r0, r1
3400f63e:	b34a      	cbz	r2, 3400f694 <_dtoa_r+0x50c>
3400f640:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3400f644:	463e      	mov	r6, r7
3400f646:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3400f64a:	ee83 5b04 	vdiv.f64	d5, d3, d4
3400f64e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f652:	ee35 7b47 	vsub.f64	d7, d5, d7
3400f656:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f65a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f65e:	ee14 2a90 	vmov	r2, s9
3400f662:	3230      	adds	r2, #48	@ 0x30
3400f664:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f668:	f806 2b01 	strb.w	r2, [r6], #1
3400f66c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f674:	d438      	bmi.n	3400f6e8 <_dtoa_r+0x560>
3400f676:	ee32 5b46 	vsub.f64	d5, d2, d6
3400f67a:	eeb4 5bc7 	vcmpe.f64	d5, d7
3400f67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f682:	d46e      	bmi.n	3400f762 <_dtoa_r+0x5da>
3400f684:	42a6      	cmp	r6, r4
3400f686:	f43f af5a 	beq.w	3400f53e <_dtoa_r+0x3b6>
3400f68a:	ee27 7b03 	vmul.f64	d7, d7, d3
3400f68e:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f692:	e7e0      	b.n	3400f656 <_dtoa_r+0x4ce>
3400f694:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f698:	4621      	mov	r1, r4
3400f69a:	463e      	mov	r6, r7
3400f69c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f6a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f6a4:	ee14 2a90 	vmov	r2, s9
3400f6a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f6ac:	3230      	adds	r2, #48	@ 0x30
3400f6ae:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f6b2:	f806 2b01 	strb.w	r2, [r6], #1
3400f6b6:	42a6      	cmp	r6, r4
3400f6b8:	d119      	bne.n	3400f6ee <_dtoa_r+0x566>
3400f6ba:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3400f6be:	ee37 4b05 	vadd.f64	d4, d7, d5
3400f6c2:	eeb4 6bc4 	vcmpe.f64	d6, d4
3400f6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f6ca:	dc4a      	bgt.n	3400f762 <_dtoa_r+0x5da>
3400f6cc:	ee35 5b47 	vsub.f64	d5, d5, d7
3400f6d0:	eeb4 6bc5 	vcmpe.f64	d6, d5
3400f6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f6d8:	f57f af31 	bpl.w	3400f53e <_dtoa_r+0x3b6>
3400f6dc:	460e      	mov	r6, r1
3400f6de:	3901      	subs	r1, #1
3400f6e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3400f6e4:	2b30      	cmp	r3, #48	@ 0x30
3400f6e6:	d0f9      	beq.n	3400f6dc <_dtoa_r+0x554>
3400f6e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
3400f6ec:	e027      	b.n	3400f73e <_dtoa_r+0x5b6>
3400f6ee:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f6f2:	e7d5      	b.n	3400f6a0 <_dtoa_r+0x518>
3400f6f4:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f6f8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3400f6fc:	463e      	mov	r6, r7
3400f6fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
3400f702:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3400f706:	ee15 3a10 	vmov	r3, s10
3400f70a:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3400f70e:	3330      	adds	r3, #48	@ 0x30
3400f710:	eea3 7b46 	vfms.f64	d7, d3, d6
3400f714:	f806 3b01 	strb.w	r3, [r6], #1
3400f718:	1bf3      	subs	r3, r6, r7
3400f71a:	459a      	cmp	sl, r3
3400f71c:	d132      	bne.n	3400f784 <_dtoa_r+0x5fc>
3400f71e:	ee37 7b07 	vadd.f64	d7, d7, d7
3400f722:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f72a:	dc18      	bgt.n	3400f75e <_dtoa_r+0x5d6>
3400f72c:	eeb4 7b46 	vcmp.f64	d7, d6
3400f730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f734:	d103      	bne.n	3400f73e <_dtoa_r+0x5b6>
3400f736:	ee15 3a10 	vmov	r3, s10
3400f73a:	07db      	lsls	r3, r3, #31
3400f73c:	d40f      	bmi.n	3400f75e <_dtoa_r+0x5d6>
3400f73e:	9901      	ldr	r1, [sp, #4]
3400f740:	4648      	mov	r0, r9
3400f742:	f000 fb09 	bl	3400fd58 <_Bfree>
3400f746:	2300      	movs	r3, #0
3400f748:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400f74a:	7033      	strb	r3, [r6, #0]
3400f74c:	f108 0301 	add.w	r3, r8, #1
3400f750:	6013      	str	r3, [r2, #0]
3400f752:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f754:	2b00      	cmp	r3, #0
3400f756:	f000 824b 	beq.w	3400fbf0 <_dtoa_r+0xa68>
3400f75a:	601e      	str	r6, [r3, #0]
3400f75c:	e248      	b.n	3400fbf0 <_dtoa_r+0xa68>
3400f75e:	f8cd 8014 	str.w	r8, [sp, #20]
3400f762:	4633      	mov	r3, r6
3400f764:	461e      	mov	r6, r3
3400f766:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400f76a:	2a39      	cmp	r2, #57	@ 0x39
3400f76c:	d106      	bne.n	3400f77c <_dtoa_r+0x5f4>
3400f76e:	429f      	cmp	r7, r3
3400f770:	d1f8      	bne.n	3400f764 <_dtoa_r+0x5dc>
3400f772:	9a05      	ldr	r2, [sp, #20]
3400f774:	3201      	adds	r2, #1
3400f776:	9205      	str	r2, [sp, #20]
3400f778:	2230      	movs	r2, #48	@ 0x30
3400f77a:	703a      	strb	r2, [r7, #0]
3400f77c:	781a      	ldrb	r2, [r3, #0]
3400f77e:	3201      	adds	r2, #1
3400f780:	701a      	strb	r2, [r3, #0]
3400f782:	e7b1      	b.n	3400f6e8 <_dtoa_r+0x560>
3400f784:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f788:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400f78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f790:	d1b5      	bne.n	3400f6fe <_dtoa_r+0x576>
3400f792:	e7d4      	b.n	3400f73e <_dtoa_r+0x5b6>
3400f794:	34012608 	.word	0x34012608
3400f798:	340125e0 	.word	0x340125e0
3400f79c:	9908      	ldr	r1, [sp, #32]
3400f79e:	2900      	cmp	r1, #0
3400f7a0:	f000 80e9 	beq.w	3400f976 <_dtoa_r+0x7ee>
3400f7a4:	9907      	ldr	r1, [sp, #28]
3400f7a6:	2901      	cmp	r1, #1
3400f7a8:	f300 80cb 	bgt.w	3400f942 <_dtoa_r+0x7ba>
3400f7ac:	2d00      	cmp	r5, #0
3400f7ae:	f000 80c4 	beq.w	3400f93a <_dtoa_r+0x7b2>
3400f7b2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3400f7b6:	461c      	mov	r4, r3
3400f7b8:	9e04      	ldr	r6, [sp, #16]
3400f7ba:	9305      	str	r3, [sp, #20]
3400f7bc:	2101      	movs	r1, #1
3400f7be:	9b04      	ldr	r3, [sp, #16]
3400f7c0:	4648      	mov	r0, r9
3400f7c2:	4413      	add	r3, r2
3400f7c4:	9304      	str	r3, [sp, #16]
3400f7c6:	9b06      	ldr	r3, [sp, #24]
3400f7c8:	4413      	add	r3, r2
3400f7ca:	9306      	str	r3, [sp, #24]
3400f7cc:	f000 fb7a 	bl	3400fec4 <__i2b>
3400f7d0:	9b05      	ldr	r3, [sp, #20]
3400f7d2:	4605      	mov	r5, r0
3400f7d4:	b166      	cbz	r6, 3400f7f0 <_dtoa_r+0x668>
3400f7d6:	9a06      	ldr	r2, [sp, #24]
3400f7d8:	2a00      	cmp	r2, #0
3400f7da:	dd09      	ble.n	3400f7f0 <_dtoa_r+0x668>
3400f7dc:	42b2      	cmp	r2, r6
3400f7de:	9904      	ldr	r1, [sp, #16]
3400f7e0:	bfa8      	it	ge
3400f7e2:	4632      	movge	r2, r6
3400f7e4:	1a89      	subs	r1, r1, r2
3400f7e6:	1ab6      	subs	r6, r6, r2
3400f7e8:	9104      	str	r1, [sp, #16]
3400f7ea:	9906      	ldr	r1, [sp, #24]
3400f7ec:	1a8a      	subs	r2, r1, r2
3400f7ee:	9206      	str	r2, [sp, #24]
3400f7f0:	b30b      	cbz	r3, 3400f836 <_dtoa_r+0x6ae>
3400f7f2:	9a08      	ldr	r2, [sp, #32]
3400f7f4:	2a00      	cmp	r2, #0
3400f7f6:	f000 80c5 	beq.w	3400f984 <_dtoa_r+0x7fc>
3400f7fa:	2c00      	cmp	r4, #0
3400f7fc:	f000 80bf 	beq.w	3400f97e <_dtoa_r+0x7f6>
3400f800:	4629      	mov	r1, r5
3400f802:	4622      	mov	r2, r4
3400f804:	4648      	mov	r0, r9
3400f806:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f808:	f000 fc16 	bl	34010038 <__pow5mult>
3400f80c:	9a01      	ldr	r2, [sp, #4]
3400f80e:	4601      	mov	r1, r0
3400f810:	4605      	mov	r5, r0
3400f812:	4648      	mov	r0, r9
3400f814:	f000 fb6c 	bl	3400fef0 <__multiply>
3400f818:	9901      	ldr	r1, [sp, #4]
3400f81a:	9005      	str	r0, [sp, #20]
3400f81c:	4648      	mov	r0, r9
3400f81e:	f000 fa9b 	bl	3400fd58 <_Bfree>
3400f822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400f824:	1b1b      	subs	r3, r3, r4
3400f826:	f000 80b0 	beq.w	3400f98a <_dtoa_r+0x802>
3400f82a:	461a      	mov	r2, r3
3400f82c:	9905      	ldr	r1, [sp, #20]
3400f82e:	4648      	mov	r0, r9
3400f830:	f000 fc02 	bl	34010038 <__pow5mult>
3400f834:	9001      	str	r0, [sp, #4]
3400f836:	2101      	movs	r1, #1
3400f838:	4648      	mov	r0, r9
3400f83a:	f000 fb43 	bl	3400fec4 <__i2b>
3400f83e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f840:	4604      	mov	r4, r0
3400f842:	2b00      	cmp	r3, #0
3400f844:	f000 81da 	beq.w	3400fbfc <_dtoa_r+0xa74>
3400f848:	461a      	mov	r2, r3
3400f84a:	4601      	mov	r1, r0
3400f84c:	4648      	mov	r0, r9
3400f84e:	f000 fbf3 	bl	34010038 <__pow5mult>
3400f852:	9b07      	ldr	r3, [sp, #28]
3400f854:	4604      	mov	r4, r0
3400f856:	2b01      	cmp	r3, #1
3400f858:	f300 80a0 	bgt.w	3400f99c <_dtoa_r+0x814>
3400f85c:	9b02      	ldr	r3, [sp, #8]
3400f85e:	2b00      	cmp	r3, #0
3400f860:	f040 8096 	bne.w	3400f990 <_dtoa_r+0x808>
3400f864:	9b03      	ldr	r3, [sp, #12]
3400f866:	f3c3 0213 	ubfx	r2, r3, #0, #20
3400f86a:	2a00      	cmp	r2, #0
3400f86c:	f040 8092 	bne.w	3400f994 <_dtoa_r+0x80c>
3400f870:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3400f874:	0d12      	lsrs	r2, r2, #20
3400f876:	0512      	lsls	r2, r2, #20
3400f878:	2a00      	cmp	r2, #0
3400f87a:	f000 808d 	beq.w	3400f998 <_dtoa_r+0x810>
3400f87e:	9b04      	ldr	r3, [sp, #16]
3400f880:	3301      	adds	r3, #1
3400f882:	9304      	str	r3, [sp, #16]
3400f884:	9b06      	ldr	r3, [sp, #24]
3400f886:	3301      	adds	r3, #1
3400f888:	9306      	str	r3, [sp, #24]
3400f88a:	2301      	movs	r3, #1
3400f88c:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f88e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f890:	2b00      	cmp	r3, #0
3400f892:	f000 81b9 	beq.w	3400fc08 <_dtoa_r+0xa80>
3400f896:	6922      	ldr	r2, [r4, #16]
3400f898:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3400f89c:	6910      	ldr	r0, [r2, #16]
3400f89e:	f000 fac5 	bl	3400fe2c <__hi0bits>
3400f8a2:	f1c0 0020 	rsb	r0, r0, #32
3400f8a6:	9b06      	ldr	r3, [sp, #24]
3400f8a8:	4418      	add	r0, r3
3400f8aa:	f010 001f 	ands.w	r0, r0, #31
3400f8ae:	f000 8081 	beq.w	3400f9b4 <_dtoa_r+0x82c>
3400f8b2:	f1c0 0220 	rsb	r2, r0, #32
3400f8b6:	2a04      	cmp	r2, #4
3400f8b8:	dd73      	ble.n	3400f9a2 <_dtoa_r+0x81a>
3400f8ba:	f1c0 001c 	rsb	r0, r0, #28
3400f8be:	9b04      	ldr	r3, [sp, #16]
3400f8c0:	4403      	add	r3, r0
3400f8c2:	4406      	add	r6, r0
3400f8c4:	9304      	str	r3, [sp, #16]
3400f8c6:	9b06      	ldr	r3, [sp, #24]
3400f8c8:	4403      	add	r3, r0
3400f8ca:	9306      	str	r3, [sp, #24]
3400f8cc:	9b04      	ldr	r3, [sp, #16]
3400f8ce:	2b00      	cmp	r3, #0
3400f8d0:	dd05      	ble.n	3400f8de <_dtoa_r+0x756>
3400f8d2:	461a      	mov	r2, r3
3400f8d4:	9901      	ldr	r1, [sp, #4]
3400f8d6:	4648      	mov	r0, r9
3400f8d8:	f000 fc08 	bl	340100ec <__lshift>
3400f8dc:	9001      	str	r0, [sp, #4]
3400f8de:	9b06      	ldr	r3, [sp, #24]
3400f8e0:	2b00      	cmp	r3, #0
3400f8e2:	dd05      	ble.n	3400f8f0 <_dtoa_r+0x768>
3400f8e4:	4621      	mov	r1, r4
3400f8e6:	461a      	mov	r2, r3
3400f8e8:	4648      	mov	r0, r9
3400f8ea:	f000 fbff 	bl	340100ec <__lshift>
3400f8ee:	4604      	mov	r4, r0
3400f8f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400f8f2:	2b00      	cmp	r3, #0
3400f8f4:	d060      	beq.n	3400f9b8 <_dtoa_r+0x830>
3400f8f6:	4621      	mov	r1, r4
3400f8f8:	9801      	ldr	r0, [sp, #4]
3400f8fa:	f000 fc63 	bl	340101c4 <__mcmp>
3400f8fe:	2800      	cmp	r0, #0
3400f900:	da5a      	bge.n	3400f9b8 <_dtoa_r+0x830>
3400f902:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3400f906:	220a      	movs	r2, #10
3400f908:	9901      	ldr	r1, [sp, #4]
3400f90a:	4648      	mov	r0, r9
3400f90c:	9305      	str	r3, [sp, #20]
3400f90e:	2300      	movs	r3, #0
3400f910:	f000 fa44 	bl	3400fd9c <__multadd>
3400f914:	9b08      	ldr	r3, [sp, #32]
3400f916:	9001      	str	r0, [sp, #4]
3400f918:	2b00      	cmp	r3, #0
3400f91a:	f000 8177 	beq.w	3400fc0c <_dtoa_r+0xa84>
3400f91e:	4629      	mov	r1, r5
3400f920:	2300      	movs	r3, #0
3400f922:	220a      	movs	r2, #10
3400f924:	4648      	mov	r0, r9
3400f926:	f000 fa39 	bl	3400fd9c <__multadd>
3400f92a:	f1bb 0f00 	cmp.w	fp, #0
3400f92e:	4605      	mov	r5, r0
3400f930:	dc6e      	bgt.n	3400fa10 <_dtoa_r+0x888>
3400f932:	9b07      	ldr	r3, [sp, #28]
3400f934:	2b02      	cmp	r3, #2
3400f936:	dc48      	bgt.n	3400f9ca <_dtoa_r+0x842>
3400f938:	e06a      	b.n	3400fa10 <_dtoa_r+0x888>
3400f93a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400f93c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3400f940:	e739      	b.n	3400f7b6 <_dtoa_r+0x62e>
3400f942:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3400f946:	42a3      	cmp	r3, r4
3400f948:	db07      	blt.n	3400f95a <_dtoa_r+0x7d2>
3400f94a:	f1ba 0f00 	cmp.w	sl, #0
3400f94e:	eba3 0404 	sub.w	r4, r3, r4
3400f952:	db0b      	blt.n	3400f96c <_dtoa_r+0x7e4>
3400f954:	9e04      	ldr	r6, [sp, #16]
3400f956:	4652      	mov	r2, sl
3400f958:	e72f      	b.n	3400f7ba <_dtoa_r+0x632>
3400f95a:	1ae2      	subs	r2, r4, r3
3400f95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f95e:	9e04      	ldr	r6, [sp, #16]
3400f960:	4413      	add	r3, r2
3400f962:	4652      	mov	r2, sl
3400f964:	930a      	str	r3, [sp, #40]	@ 0x28
3400f966:	4623      	mov	r3, r4
3400f968:	2400      	movs	r4, #0
3400f96a:	e726      	b.n	3400f7ba <_dtoa_r+0x632>
3400f96c:	9a04      	ldr	r2, [sp, #16]
3400f96e:	eba2 060a 	sub.w	r6, r2, sl
3400f972:	2200      	movs	r2, #0
3400f974:	e721      	b.n	3400f7ba <_dtoa_r+0x632>
3400f976:	461c      	mov	r4, r3
3400f978:	9e04      	ldr	r6, [sp, #16]
3400f97a:	9d08      	ldr	r5, [sp, #32]
3400f97c:	e72a      	b.n	3400f7d4 <_dtoa_r+0x64c>
3400f97e:	9a01      	ldr	r2, [sp, #4]
3400f980:	9205      	str	r2, [sp, #20]
3400f982:	e752      	b.n	3400f82a <_dtoa_r+0x6a2>
3400f984:	461a      	mov	r2, r3
3400f986:	9901      	ldr	r1, [sp, #4]
3400f988:	e751      	b.n	3400f82e <_dtoa_r+0x6a6>
3400f98a:	9b05      	ldr	r3, [sp, #20]
3400f98c:	9301      	str	r3, [sp, #4]
3400f98e:	e752      	b.n	3400f836 <_dtoa_r+0x6ae>
3400f990:	2300      	movs	r3, #0
3400f992:	e77b      	b.n	3400f88c <_dtoa_r+0x704>
3400f994:	9b02      	ldr	r3, [sp, #8]
3400f996:	e779      	b.n	3400f88c <_dtoa_r+0x704>
3400f998:	920b      	str	r2, [sp, #44]	@ 0x2c
3400f99a:	e778      	b.n	3400f88e <_dtoa_r+0x706>
3400f99c:	2300      	movs	r3, #0
3400f99e:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f9a0:	e779      	b.n	3400f896 <_dtoa_r+0x70e>
3400f9a2:	d093      	beq.n	3400f8cc <_dtoa_r+0x744>
3400f9a4:	321c      	adds	r2, #28
3400f9a6:	9b04      	ldr	r3, [sp, #16]
3400f9a8:	4413      	add	r3, r2
3400f9aa:	4416      	add	r6, r2
3400f9ac:	9304      	str	r3, [sp, #16]
3400f9ae:	9b06      	ldr	r3, [sp, #24]
3400f9b0:	4413      	add	r3, r2
3400f9b2:	e78a      	b.n	3400f8ca <_dtoa_r+0x742>
3400f9b4:	4602      	mov	r2, r0
3400f9b6:	e7f5      	b.n	3400f9a4 <_dtoa_r+0x81c>
3400f9b8:	f1ba 0f00 	cmp.w	sl, #0
3400f9bc:	46d3      	mov	fp, sl
3400f9be:	f8cd 8014 	str.w	r8, [sp, #20]
3400f9c2:	dc21      	bgt.n	3400fa08 <_dtoa_r+0x880>
3400f9c4:	9b07      	ldr	r3, [sp, #28]
3400f9c6:	2b02      	cmp	r3, #2
3400f9c8:	dd1e      	ble.n	3400fa08 <_dtoa_r+0x880>
3400f9ca:	f1bb 0f00 	cmp.w	fp, #0
3400f9ce:	f47f addc 	bne.w	3400f58a <_dtoa_r+0x402>
3400f9d2:	4621      	mov	r1, r4
3400f9d4:	465b      	mov	r3, fp
3400f9d6:	2205      	movs	r2, #5
3400f9d8:	4648      	mov	r0, r9
3400f9da:	f000 f9df 	bl	3400fd9c <__multadd>
3400f9de:	4601      	mov	r1, r0
3400f9e0:	4604      	mov	r4, r0
3400f9e2:	9801      	ldr	r0, [sp, #4]
3400f9e4:	f000 fbee 	bl	340101c4 <__mcmp>
3400f9e8:	2800      	cmp	r0, #0
3400f9ea:	f77f adce 	ble.w	3400f58a <_dtoa_r+0x402>
3400f9ee:	2331      	movs	r3, #49	@ 0x31
3400f9f0:	463e      	mov	r6, r7
3400f9f2:	f806 3b01 	strb.w	r3, [r6], #1
3400f9f6:	9b05      	ldr	r3, [sp, #20]
3400f9f8:	3301      	adds	r3, #1
3400f9fa:	9305      	str	r3, [sp, #20]
3400f9fc:	e5c9      	b.n	3400f592 <_dtoa_r+0x40a>
3400f9fe:	4654      	mov	r4, sl
3400fa00:	f8cd 8014 	str.w	r8, [sp, #20]
3400fa04:	4625      	mov	r5, r4
3400fa06:	e7f2      	b.n	3400f9ee <_dtoa_r+0x866>
3400fa08:	9b08      	ldr	r3, [sp, #32]
3400fa0a:	2b00      	cmp	r3, #0
3400fa0c:	f000 8102 	beq.w	3400fc14 <_dtoa_r+0xa8c>
3400fa10:	2e00      	cmp	r6, #0
3400fa12:	dd05      	ble.n	3400fa20 <_dtoa_r+0x898>
3400fa14:	4629      	mov	r1, r5
3400fa16:	4632      	mov	r2, r6
3400fa18:	4648      	mov	r0, r9
3400fa1a:	f000 fb67 	bl	340100ec <__lshift>
3400fa1e:	4605      	mov	r5, r0
3400fa20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400fa22:	2b00      	cmp	r3, #0
3400fa24:	d058      	beq.n	3400fad8 <_dtoa_r+0x950>
3400fa26:	6869      	ldr	r1, [r5, #4]
3400fa28:	4648      	mov	r0, r9
3400fa2a:	f000 f955 	bl	3400fcd8 <_Balloc>
3400fa2e:	4606      	mov	r6, r0
3400fa30:	b928      	cbnz	r0, 3400fa3e <_dtoa_r+0x8b6>
3400fa32:	4b82      	ldr	r3, [pc, #520]	@ (3400fc3c <_dtoa_r+0xab4>)
3400fa34:	4602      	mov	r2, r0
3400fa36:	f240 21ef 	movw	r1, #751	@ 0x2ef
3400fa3a:	f7ff bbbe 	b.w	3400f1ba <_dtoa_r+0x32>
3400fa3e:	692a      	ldr	r2, [r5, #16]
3400fa40:	f105 010c 	add.w	r1, r5, #12
3400fa44:	300c      	adds	r0, #12
3400fa46:	3202      	adds	r2, #2
3400fa48:	0092      	lsls	r2, r2, #2
3400fa4a:	f7ff fafa 	bl	3400f042 <memcpy>
3400fa4e:	2201      	movs	r2, #1
3400fa50:	4631      	mov	r1, r6
3400fa52:	4648      	mov	r0, r9
3400fa54:	f000 fb4a 	bl	340100ec <__lshift>
3400fa58:	1c7b      	adds	r3, r7, #1
3400fa5a:	46a8      	mov	r8, r5
3400fa5c:	4605      	mov	r5, r0
3400fa5e:	9304      	str	r3, [sp, #16]
3400fa60:	eb07 030b 	add.w	r3, r7, fp
3400fa64:	9309      	str	r3, [sp, #36]	@ 0x24
3400fa66:	9b02      	ldr	r3, [sp, #8]
3400fa68:	f003 0301 	and.w	r3, r3, #1
3400fa6c:	9308      	str	r3, [sp, #32]
3400fa6e:	9b04      	ldr	r3, [sp, #16]
3400fa70:	4621      	mov	r1, r4
3400fa72:	9801      	ldr	r0, [sp, #4]
3400fa74:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3400fa78:	f7ff faf7 	bl	3400f06a <quorem>
3400fa7c:	4641      	mov	r1, r8
3400fa7e:	9002      	str	r0, [sp, #8]
3400fa80:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400fa84:	9801      	ldr	r0, [sp, #4]
3400fa86:	f000 fb9d 	bl	340101c4 <__mcmp>
3400fa8a:	462a      	mov	r2, r5
3400fa8c:	9006      	str	r0, [sp, #24]
3400fa8e:	4621      	mov	r1, r4
3400fa90:	4648      	mov	r0, r9
3400fa92:	f000 fbb3 	bl	340101fc <__mdiff>
3400fa96:	68c2      	ldr	r2, [r0, #12]
3400fa98:	4606      	mov	r6, r0
3400fa9a:	b9fa      	cbnz	r2, 3400fadc <_dtoa_r+0x954>
3400fa9c:	4601      	mov	r1, r0
3400fa9e:	9801      	ldr	r0, [sp, #4]
3400faa0:	f000 fb90 	bl	340101c4 <__mcmp>
3400faa4:	4602      	mov	r2, r0
3400faa6:	4631      	mov	r1, r6
3400faa8:	4648      	mov	r0, r9
3400faaa:	920a      	str	r2, [sp, #40]	@ 0x28
3400faac:	f000 f954 	bl	3400fd58 <_Bfree>
3400fab0:	9b07      	ldr	r3, [sp, #28]
3400fab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400fab4:	9e04      	ldr	r6, [sp, #16]
3400fab6:	ea42 0103 	orr.w	r1, r2, r3
3400faba:	9b08      	ldr	r3, [sp, #32]
3400fabc:	4319      	orrs	r1, r3
3400fabe:	d10f      	bne.n	3400fae0 <_dtoa_r+0x958>
3400fac0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400fac4:	d028      	beq.n	3400fb18 <_dtoa_r+0x990>
3400fac6:	9b06      	ldr	r3, [sp, #24]
3400fac8:	2b00      	cmp	r3, #0
3400faca:	dd02      	ble.n	3400fad2 <_dtoa_r+0x94a>
3400facc:	9b02      	ldr	r3, [sp, #8]
3400face:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3400fad2:	f88b a000 	strb.w	sl, [fp]
3400fad6:	e55e      	b.n	3400f596 <_dtoa_r+0x40e>
3400fad8:	4628      	mov	r0, r5
3400fada:	e7bd      	b.n	3400fa58 <_dtoa_r+0x8d0>
3400fadc:	2201      	movs	r2, #1
3400fade:	e7e2      	b.n	3400faa6 <_dtoa_r+0x91e>
3400fae0:	9b06      	ldr	r3, [sp, #24]
3400fae2:	2b00      	cmp	r3, #0
3400fae4:	db04      	blt.n	3400faf0 <_dtoa_r+0x968>
3400fae6:	9907      	ldr	r1, [sp, #28]
3400fae8:	430b      	orrs	r3, r1
3400faea:	9908      	ldr	r1, [sp, #32]
3400faec:	430b      	orrs	r3, r1
3400faee:	d120      	bne.n	3400fb32 <_dtoa_r+0x9aa>
3400faf0:	2a00      	cmp	r2, #0
3400faf2:	ddee      	ble.n	3400fad2 <_dtoa_r+0x94a>
3400faf4:	2201      	movs	r2, #1
3400faf6:	9901      	ldr	r1, [sp, #4]
3400faf8:	4648      	mov	r0, r9
3400fafa:	f000 faf7 	bl	340100ec <__lshift>
3400fafe:	4621      	mov	r1, r4
3400fb00:	9001      	str	r0, [sp, #4]
3400fb02:	f000 fb5f 	bl	340101c4 <__mcmp>
3400fb06:	2800      	cmp	r0, #0
3400fb08:	dc03      	bgt.n	3400fb12 <_dtoa_r+0x98a>
3400fb0a:	d1e2      	bne.n	3400fad2 <_dtoa_r+0x94a>
3400fb0c:	f01a 0f01 	tst.w	sl, #1
3400fb10:	d0df      	beq.n	3400fad2 <_dtoa_r+0x94a>
3400fb12:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400fb16:	d1d9      	bne.n	3400facc <_dtoa_r+0x944>
3400fb18:	2339      	movs	r3, #57	@ 0x39
3400fb1a:	f88b 3000 	strb.w	r3, [fp]
3400fb1e:	4633      	mov	r3, r6
3400fb20:	461e      	mov	r6, r3
3400fb22:	3b01      	subs	r3, #1
3400fb24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3400fb28:	2a39      	cmp	r2, #57	@ 0x39
3400fb2a:	d052      	beq.n	3400fbd2 <_dtoa_r+0xa4a>
3400fb2c:	3201      	adds	r2, #1
3400fb2e:	701a      	strb	r2, [r3, #0]
3400fb30:	e531      	b.n	3400f596 <_dtoa_r+0x40e>
3400fb32:	2a00      	cmp	r2, #0
3400fb34:	dd07      	ble.n	3400fb46 <_dtoa_r+0x9be>
3400fb36:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400fb3a:	d0ed      	beq.n	3400fb18 <_dtoa_r+0x990>
3400fb3c:	f10a 0301 	add.w	r3, sl, #1
3400fb40:	f88b 3000 	strb.w	r3, [fp]
3400fb44:	e527      	b.n	3400f596 <_dtoa_r+0x40e>
3400fb46:	9b04      	ldr	r3, [sp, #16]
3400fb48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400fb4a:	f803 ac01 	strb.w	sl, [r3, #-1]
3400fb4e:	4293      	cmp	r3, r2
3400fb50:	d029      	beq.n	3400fba6 <_dtoa_r+0xa1e>
3400fb52:	2300      	movs	r3, #0
3400fb54:	220a      	movs	r2, #10
3400fb56:	9901      	ldr	r1, [sp, #4]
3400fb58:	4648      	mov	r0, r9
3400fb5a:	f000 f91f 	bl	3400fd9c <__multadd>
3400fb5e:	45a8      	cmp	r8, r5
3400fb60:	9001      	str	r0, [sp, #4]
3400fb62:	f04f 0300 	mov.w	r3, #0
3400fb66:	f04f 020a 	mov.w	r2, #10
3400fb6a:	4641      	mov	r1, r8
3400fb6c:	4648      	mov	r0, r9
3400fb6e:	d107      	bne.n	3400fb80 <_dtoa_r+0x9f8>
3400fb70:	f000 f914 	bl	3400fd9c <__multadd>
3400fb74:	4680      	mov	r8, r0
3400fb76:	4605      	mov	r5, r0
3400fb78:	9b04      	ldr	r3, [sp, #16]
3400fb7a:	3301      	adds	r3, #1
3400fb7c:	9304      	str	r3, [sp, #16]
3400fb7e:	e776      	b.n	3400fa6e <_dtoa_r+0x8e6>
3400fb80:	f000 f90c 	bl	3400fd9c <__multadd>
3400fb84:	4629      	mov	r1, r5
3400fb86:	4680      	mov	r8, r0
3400fb88:	2300      	movs	r3, #0
3400fb8a:	220a      	movs	r2, #10
3400fb8c:	4648      	mov	r0, r9
3400fb8e:	f000 f905 	bl	3400fd9c <__multadd>
3400fb92:	4605      	mov	r5, r0
3400fb94:	e7f0      	b.n	3400fb78 <_dtoa_r+0x9f0>
3400fb96:	f1bb 0f00 	cmp.w	fp, #0
3400fb9a:	f04f 0800 	mov.w	r8, #0
3400fb9e:	bfcc      	ite	gt
3400fba0:	465e      	movgt	r6, fp
3400fba2:	2601      	movle	r6, #1
3400fba4:	443e      	add	r6, r7
3400fba6:	2201      	movs	r2, #1
3400fba8:	9901      	ldr	r1, [sp, #4]
3400fbaa:	4648      	mov	r0, r9
3400fbac:	f000 fa9e 	bl	340100ec <__lshift>
3400fbb0:	4621      	mov	r1, r4
3400fbb2:	9001      	str	r0, [sp, #4]
3400fbb4:	f000 fb06 	bl	340101c4 <__mcmp>
3400fbb8:	2800      	cmp	r0, #0
3400fbba:	dcb0      	bgt.n	3400fb1e <_dtoa_r+0x996>
3400fbbc:	d102      	bne.n	3400fbc4 <_dtoa_r+0xa3c>
3400fbbe:	f01a 0f01 	tst.w	sl, #1
3400fbc2:	d1ac      	bne.n	3400fb1e <_dtoa_r+0x996>
3400fbc4:	4633      	mov	r3, r6
3400fbc6:	461e      	mov	r6, r3
3400fbc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400fbcc:	2a30      	cmp	r2, #48	@ 0x30
3400fbce:	d0fa      	beq.n	3400fbc6 <_dtoa_r+0xa3e>
3400fbd0:	e4e1      	b.n	3400f596 <_dtoa_r+0x40e>
3400fbd2:	429f      	cmp	r7, r3
3400fbd4:	d1a4      	bne.n	3400fb20 <_dtoa_r+0x998>
3400fbd6:	9b05      	ldr	r3, [sp, #20]
3400fbd8:	3301      	adds	r3, #1
3400fbda:	9305      	str	r3, [sp, #20]
3400fbdc:	2331      	movs	r3, #49	@ 0x31
3400fbde:	703b      	strb	r3, [r7, #0]
3400fbe0:	e4d9      	b.n	3400f596 <_dtoa_r+0x40e>
3400fbe2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400fbe4:	4f16      	ldr	r7, [pc, #88]	@ (3400fc40 <_dtoa_r+0xab8>)
3400fbe6:	b11b      	cbz	r3, 3400fbf0 <_dtoa_r+0xa68>
3400fbe8:	f107 0308 	add.w	r3, r7, #8
3400fbec:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400fbee:	6013      	str	r3, [r2, #0]
3400fbf0:	4638      	mov	r0, r7
3400fbf2:	b011      	add	sp, #68	@ 0x44
3400fbf4:	ecbd 8b02 	vpop	{d8}
3400fbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400fbfc:	9b07      	ldr	r3, [sp, #28]
3400fbfe:	2b01      	cmp	r3, #1
3400fc00:	f77f ae2c 	ble.w	3400f85c <_dtoa_r+0x6d4>
3400fc04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400fc06:	930b      	str	r3, [sp, #44]	@ 0x2c
3400fc08:	2001      	movs	r0, #1
3400fc0a:	e64c      	b.n	3400f8a6 <_dtoa_r+0x71e>
3400fc0c:	f1bb 0f00 	cmp.w	fp, #0
3400fc10:	f77f aed8 	ble.w	3400f9c4 <_dtoa_r+0x83c>
3400fc14:	463e      	mov	r6, r7
3400fc16:	4621      	mov	r1, r4
3400fc18:	9801      	ldr	r0, [sp, #4]
3400fc1a:	f7ff fa26 	bl	3400f06a <quorem>
3400fc1e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400fc22:	f806 ab01 	strb.w	sl, [r6], #1
3400fc26:	1bf2      	subs	r2, r6, r7
3400fc28:	4593      	cmp	fp, r2
3400fc2a:	ddb4      	ble.n	3400fb96 <_dtoa_r+0xa0e>
3400fc2c:	2300      	movs	r3, #0
3400fc2e:	220a      	movs	r2, #10
3400fc30:	9901      	ldr	r1, [sp, #4]
3400fc32:	4648      	mov	r0, r9
3400fc34:	f000 f8b2 	bl	3400fd9c <__multadd>
3400fc38:	9001      	str	r0, [sp, #4]
3400fc3a:	e7ec      	b.n	3400fc16 <_dtoa_r+0xa8e>
3400fc3c:	340122c5 	.word	0x340122c5
3400fc40:	34012249 	.word	0x34012249

3400fc44 <_free_r>:
3400fc44:	b538      	push	{r3, r4, r5, lr}
3400fc46:	4605      	mov	r5, r0
3400fc48:	2900      	cmp	r1, #0
3400fc4a:	d041      	beq.n	3400fcd0 <_free_r+0x8c>
3400fc4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
3400fc50:	1f0c      	subs	r4, r1, #4
3400fc52:	2b00      	cmp	r3, #0
3400fc54:	bfb8      	it	lt
3400fc56:	18e4      	addlt	r4, r4, r3
3400fc58:	f7fe f842 	bl	3400dce0 <__malloc_lock>
3400fc5c:	4a1d      	ldr	r2, [pc, #116]	@ (3400fcd4 <_free_r+0x90>)
3400fc5e:	6813      	ldr	r3, [r2, #0]
3400fc60:	b933      	cbnz	r3, 3400fc70 <_free_r+0x2c>
3400fc62:	6063      	str	r3, [r4, #4]
3400fc64:	6014      	str	r4, [r2, #0]
3400fc66:	4628      	mov	r0, r5
3400fc68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400fc6c:	f7fe b83e 	b.w	3400dcec <__malloc_unlock>
3400fc70:	42a3      	cmp	r3, r4
3400fc72:	d908      	bls.n	3400fc86 <_free_r+0x42>
3400fc74:	6820      	ldr	r0, [r4, #0]
3400fc76:	1821      	adds	r1, r4, r0
3400fc78:	428b      	cmp	r3, r1
3400fc7a:	bf01      	itttt	eq
3400fc7c:	6819      	ldreq	r1, [r3, #0]
3400fc7e:	685b      	ldreq	r3, [r3, #4]
3400fc80:	1809      	addeq	r1, r1, r0
3400fc82:	6021      	streq	r1, [r4, #0]
3400fc84:	e7ed      	b.n	3400fc62 <_free_r+0x1e>
3400fc86:	461a      	mov	r2, r3
3400fc88:	685b      	ldr	r3, [r3, #4]
3400fc8a:	b10b      	cbz	r3, 3400fc90 <_free_r+0x4c>
3400fc8c:	42a3      	cmp	r3, r4
3400fc8e:	d9fa      	bls.n	3400fc86 <_free_r+0x42>
3400fc90:	6811      	ldr	r1, [r2, #0]
3400fc92:	1850      	adds	r0, r2, r1
3400fc94:	42a0      	cmp	r0, r4
3400fc96:	d10b      	bne.n	3400fcb0 <_free_r+0x6c>
3400fc98:	6820      	ldr	r0, [r4, #0]
3400fc9a:	4401      	add	r1, r0
3400fc9c:	1850      	adds	r0, r2, r1
3400fc9e:	6011      	str	r1, [r2, #0]
3400fca0:	4283      	cmp	r3, r0
3400fca2:	d1e0      	bne.n	3400fc66 <_free_r+0x22>
3400fca4:	6818      	ldr	r0, [r3, #0]
3400fca6:	685b      	ldr	r3, [r3, #4]
3400fca8:	4408      	add	r0, r1
3400fcaa:	6053      	str	r3, [r2, #4]
3400fcac:	6010      	str	r0, [r2, #0]
3400fcae:	e7da      	b.n	3400fc66 <_free_r+0x22>
3400fcb0:	d902      	bls.n	3400fcb8 <_free_r+0x74>
3400fcb2:	230c      	movs	r3, #12
3400fcb4:	602b      	str	r3, [r5, #0]
3400fcb6:	e7d6      	b.n	3400fc66 <_free_r+0x22>
3400fcb8:	6820      	ldr	r0, [r4, #0]
3400fcba:	1821      	adds	r1, r4, r0
3400fcbc:	428b      	cmp	r3, r1
3400fcbe:	bf02      	ittt	eq
3400fcc0:	6819      	ldreq	r1, [r3, #0]
3400fcc2:	685b      	ldreq	r3, [r3, #4]
3400fcc4:	1809      	addeq	r1, r1, r0
3400fcc6:	6063      	str	r3, [r4, #4]
3400fcc8:	bf08      	it	eq
3400fcca:	6021      	streq	r1, [r4, #0]
3400fccc:	6054      	str	r4, [r2, #4]
3400fcce:	e7ca      	b.n	3400fc66 <_free_r+0x22>
3400fcd0:	bd38      	pop	{r3, r4, r5, pc}
3400fcd2:	bf00      	nop
3400fcd4:	340132b4 	.word	0x340132b4

3400fcd8 <_Balloc>:
3400fcd8:	b570      	push	{r4, r5, r6, lr}
3400fcda:	69c6      	ldr	r6, [r0, #28]
3400fcdc:	4604      	mov	r4, r0
3400fcde:	460d      	mov	r5, r1
3400fce0:	b976      	cbnz	r6, 3400fd00 <_Balloc+0x28>
3400fce2:	2010      	movs	r0, #16
3400fce4:	f7fd ff4a 	bl	3400db7c <malloc>
3400fce8:	4602      	mov	r2, r0
3400fcea:	61e0      	str	r0, [r4, #28]
3400fcec:	b920      	cbnz	r0, 3400fcf8 <_Balloc+0x20>
3400fcee:	4b18      	ldr	r3, [pc, #96]	@ (3400fd50 <_Balloc+0x78>)
3400fcf0:	216b      	movs	r1, #107	@ 0x6b
3400fcf2:	4818      	ldr	r0, [pc, #96]	@ (3400fd54 <_Balloc+0x7c>)
3400fcf4:	f7fd ff24 	bl	3400db40 <__assert_func>
3400fcf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400fcfc:	6006      	str	r6, [r0, #0]
3400fcfe:	60c6      	str	r6, [r0, #12]
3400fd00:	69e6      	ldr	r6, [r4, #28]
3400fd02:	68f3      	ldr	r3, [r6, #12]
3400fd04:	b183      	cbz	r3, 3400fd28 <_Balloc+0x50>
3400fd06:	69e3      	ldr	r3, [r4, #28]
3400fd08:	68db      	ldr	r3, [r3, #12]
3400fd0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3400fd0e:	b9b8      	cbnz	r0, 3400fd40 <_Balloc+0x68>
3400fd10:	2101      	movs	r1, #1
3400fd12:	4620      	mov	r0, r4
3400fd14:	fa01 f605 	lsl.w	r6, r1, r5
3400fd18:	1d72      	adds	r2, r6, #5
3400fd1a:	0092      	lsls	r2, r2, #2
3400fd1c:	f000 fd68 	bl	340107f0 <_calloc_r>
3400fd20:	b160      	cbz	r0, 3400fd3c <_Balloc+0x64>
3400fd22:	e9c0 5601 	strd	r5, r6, [r0, #4]
3400fd26:	e00e      	b.n	3400fd46 <_Balloc+0x6e>
3400fd28:	2221      	movs	r2, #33	@ 0x21
3400fd2a:	2104      	movs	r1, #4
3400fd2c:	4620      	mov	r0, r4
3400fd2e:	f000 fd5f 	bl	340107f0 <_calloc_r>
3400fd32:	69e3      	ldr	r3, [r4, #28]
3400fd34:	60f0      	str	r0, [r6, #12]
3400fd36:	68db      	ldr	r3, [r3, #12]
3400fd38:	2b00      	cmp	r3, #0
3400fd3a:	d1e4      	bne.n	3400fd06 <_Balloc+0x2e>
3400fd3c:	2000      	movs	r0, #0
3400fd3e:	bd70      	pop	{r4, r5, r6, pc}
3400fd40:	6802      	ldr	r2, [r0, #0]
3400fd42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3400fd46:	2300      	movs	r3, #0
3400fd48:	e9c0 3303 	strd	r3, r3, [r0, #12]
3400fd4c:	e7f7      	b.n	3400fd3e <_Balloc+0x66>
3400fd4e:	bf00      	nop
3400fd50:	34012256 	.word	0x34012256
3400fd54:	340122d6 	.word	0x340122d6

3400fd58 <_Bfree>:
3400fd58:	b570      	push	{r4, r5, r6, lr}
3400fd5a:	69c6      	ldr	r6, [r0, #28]
3400fd5c:	4605      	mov	r5, r0
3400fd5e:	460c      	mov	r4, r1
3400fd60:	b976      	cbnz	r6, 3400fd80 <_Bfree+0x28>
3400fd62:	2010      	movs	r0, #16
3400fd64:	f7fd ff0a 	bl	3400db7c <malloc>
3400fd68:	4602      	mov	r2, r0
3400fd6a:	61e8      	str	r0, [r5, #28]
3400fd6c:	b920      	cbnz	r0, 3400fd78 <_Bfree+0x20>
3400fd6e:	4b09      	ldr	r3, [pc, #36]	@ (3400fd94 <_Bfree+0x3c>)
3400fd70:	218f      	movs	r1, #143	@ 0x8f
3400fd72:	4809      	ldr	r0, [pc, #36]	@ (3400fd98 <_Bfree+0x40>)
3400fd74:	f7fd fee4 	bl	3400db40 <__assert_func>
3400fd78:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400fd7c:	6006      	str	r6, [r0, #0]
3400fd7e:	60c6      	str	r6, [r0, #12]
3400fd80:	b13c      	cbz	r4, 3400fd92 <_Bfree+0x3a>
3400fd82:	69eb      	ldr	r3, [r5, #28]
3400fd84:	6862      	ldr	r2, [r4, #4]
3400fd86:	68db      	ldr	r3, [r3, #12]
3400fd88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3400fd8c:	6021      	str	r1, [r4, #0]
3400fd8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3400fd92:	bd70      	pop	{r4, r5, r6, pc}
3400fd94:	34012256 	.word	0x34012256
3400fd98:	340122d6 	.word	0x340122d6

3400fd9c <__multadd>:
3400fd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400fda0:	f101 0c14 	add.w	ip, r1, #20
3400fda4:	4607      	mov	r7, r0
3400fda6:	460c      	mov	r4, r1
3400fda8:	461e      	mov	r6, r3
3400fdaa:	690d      	ldr	r5, [r1, #16]
3400fdac:	2000      	movs	r0, #0
3400fdae:	f8dc 3000 	ldr.w	r3, [ip]
3400fdb2:	3001      	adds	r0, #1
3400fdb4:	b299      	uxth	r1, r3
3400fdb6:	4285      	cmp	r5, r0
3400fdb8:	fb02 6101 	mla	r1, r2, r1, r6
3400fdbc:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400fdc0:	ea4f 4311 	mov.w	r3, r1, lsr #16
3400fdc4:	b289      	uxth	r1, r1
3400fdc6:	fb02 3306 	mla	r3, r2, r6, r3
3400fdca:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3400fdce:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400fdd2:	f84c 1b04 	str.w	r1, [ip], #4
3400fdd6:	dcea      	bgt.n	3400fdae <__multadd+0x12>
3400fdd8:	b30e      	cbz	r6, 3400fe1e <__multadd+0x82>
3400fdda:	68a3      	ldr	r3, [r4, #8]
3400fddc:	42ab      	cmp	r3, r5
3400fdde:	dc19      	bgt.n	3400fe14 <__multadd+0x78>
3400fde0:	6861      	ldr	r1, [r4, #4]
3400fde2:	4638      	mov	r0, r7
3400fde4:	3101      	adds	r1, #1
3400fde6:	f7ff ff77 	bl	3400fcd8 <_Balloc>
3400fdea:	4680      	mov	r8, r0
3400fdec:	b928      	cbnz	r0, 3400fdfa <__multadd+0x5e>
3400fdee:	4602      	mov	r2, r0
3400fdf0:	4b0c      	ldr	r3, [pc, #48]	@ (3400fe24 <__multadd+0x88>)
3400fdf2:	21ba      	movs	r1, #186	@ 0xba
3400fdf4:	480c      	ldr	r0, [pc, #48]	@ (3400fe28 <__multadd+0x8c>)
3400fdf6:	f7fd fea3 	bl	3400db40 <__assert_func>
3400fdfa:	6922      	ldr	r2, [r4, #16]
3400fdfc:	f104 010c 	add.w	r1, r4, #12
3400fe00:	300c      	adds	r0, #12
3400fe02:	3202      	adds	r2, #2
3400fe04:	0092      	lsls	r2, r2, #2
3400fe06:	f7ff f91c 	bl	3400f042 <memcpy>
3400fe0a:	4621      	mov	r1, r4
3400fe0c:	4644      	mov	r4, r8
3400fe0e:	4638      	mov	r0, r7
3400fe10:	f7ff ffa2 	bl	3400fd58 <_Bfree>
3400fe14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3400fe18:	3501      	adds	r5, #1
3400fe1a:	615e      	str	r6, [r3, #20]
3400fe1c:	6125      	str	r5, [r4, #16]
3400fe1e:	4620      	mov	r0, r4
3400fe20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400fe24:	340122c5 	.word	0x340122c5
3400fe28:	340122d6 	.word	0x340122d6

3400fe2c <__hi0bits>:
3400fe2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3400fe30:	4603      	mov	r3, r0
3400fe32:	bf36      	itet	cc
3400fe34:	0403      	lslcc	r3, r0, #16
3400fe36:	2000      	movcs	r0, #0
3400fe38:	2010      	movcc	r0, #16
3400fe3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400fe3e:	bf3c      	itt	cc
3400fe40:	021b      	lslcc	r3, r3, #8
3400fe42:	3008      	addcc	r0, #8
3400fe44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fe48:	bf3c      	itt	cc
3400fe4a:	011b      	lslcc	r3, r3, #4
3400fe4c:	3004      	addcc	r0, #4
3400fe4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400fe52:	bf3c      	itt	cc
3400fe54:	009b      	lslcc	r3, r3, #2
3400fe56:	3002      	addcc	r0, #2
3400fe58:	2b00      	cmp	r3, #0
3400fe5a:	db05      	blt.n	3400fe68 <__hi0bits+0x3c>
3400fe5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3400fe60:	f100 0001 	add.w	r0, r0, #1
3400fe64:	bf08      	it	eq
3400fe66:	2020      	moveq	r0, #32
3400fe68:	4770      	bx	lr

3400fe6a <__lo0bits>:
3400fe6a:	6803      	ldr	r3, [r0, #0]
3400fe6c:	4602      	mov	r2, r0
3400fe6e:	f013 0007 	ands.w	r0, r3, #7
3400fe72:	d00b      	beq.n	3400fe8c <__lo0bits+0x22>
3400fe74:	07d9      	lsls	r1, r3, #31
3400fe76:	d421      	bmi.n	3400febc <__lo0bits+0x52>
3400fe78:	0798      	lsls	r0, r3, #30
3400fe7a:	bf47      	ittee	mi
3400fe7c:	085b      	lsrmi	r3, r3, #1
3400fe7e:	2001      	movmi	r0, #1
3400fe80:	089b      	lsrpl	r3, r3, #2
3400fe82:	2002      	movpl	r0, #2
3400fe84:	bf4c      	ite	mi
3400fe86:	6013      	strmi	r3, [r2, #0]
3400fe88:	6013      	strpl	r3, [r2, #0]
3400fe8a:	4770      	bx	lr
3400fe8c:	b299      	uxth	r1, r3
3400fe8e:	b909      	cbnz	r1, 3400fe94 <__lo0bits+0x2a>
3400fe90:	0c1b      	lsrs	r3, r3, #16
3400fe92:	2010      	movs	r0, #16
3400fe94:	b2d9      	uxtb	r1, r3
3400fe96:	b909      	cbnz	r1, 3400fe9c <__lo0bits+0x32>
3400fe98:	3008      	adds	r0, #8
3400fe9a:	0a1b      	lsrs	r3, r3, #8
3400fe9c:	0719      	lsls	r1, r3, #28
3400fe9e:	bf04      	itt	eq
3400fea0:	091b      	lsreq	r3, r3, #4
3400fea2:	3004      	addeq	r0, #4
3400fea4:	0799      	lsls	r1, r3, #30
3400fea6:	bf04      	itt	eq
3400fea8:	089b      	lsreq	r3, r3, #2
3400feaa:	3002      	addeq	r0, #2
3400feac:	07d9      	lsls	r1, r3, #31
3400feae:	d403      	bmi.n	3400feb8 <__lo0bits+0x4e>
3400feb0:	085b      	lsrs	r3, r3, #1
3400feb2:	f100 0001 	add.w	r0, r0, #1
3400feb6:	d003      	beq.n	3400fec0 <__lo0bits+0x56>
3400feb8:	6013      	str	r3, [r2, #0]
3400feba:	4770      	bx	lr
3400febc:	2000      	movs	r0, #0
3400febe:	4770      	bx	lr
3400fec0:	2020      	movs	r0, #32
3400fec2:	4770      	bx	lr

3400fec4 <__i2b>:
3400fec4:	b510      	push	{r4, lr}
3400fec6:	460c      	mov	r4, r1
3400fec8:	2101      	movs	r1, #1
3400feca:	f7ff ff05 	bl	3400fcd8 <_Balloc>
3400fece:	4602      	mov	r2, r0
3400fed0:	b928      	cbnz	r0, 3400fede <__i2b+0x1a>
3400fed2:	4b05      	ldr	r3, [pc, #20]	@ (3400fee8 <__i2b+0x24>)
3400fed4:	f240 1145 	movw	r1, #325	@ 0x145
3400fed8:	4804      	ldr	r0, [pc, #16]	@ (3400feec <__i2b+0x28>)
3400feda:	f7fd fe31 	bl	3400db40 <__assert_func>
3400fede:	2301      	movs	r3, #1
3400fee0:	6144      	str	r4, [r0, #20]
3400fee2:	6103      	str	r3, [r0, #16]
3400fee4:	bd10      	pop	{r4, pc}
3400fee6:	bf00      	nop
3400fee8:	340122c5 	.word	0x340122c5
3400feec:	340122d6 	.word	0x340122d6

3400fef0 <__multiply>:
3400fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400fef4:	4617      	mov	r7, r2
3400fef6:	690a      	ldr	r2, [r1, #16]
3400fef8:	4689      	mov	r9, r1
3400fefa:	b085      	sub	sp, #20
3400fefc:	693b      	ldr	r3, [r7, #16]
3400fefe:	429a      	cmp	r2, r3
3400ff00:	bfa2      	ittt	ge
3400ff02:	463b      	movge	r3, r7
3400ff04:	460f      	movge	r7, r1
3400ff06:	4699      	movge	r9, r3
3400ff08:	693d      	ldr	r5, [r7, #16]
3400ff0a:	68bb      	ldr	r3, [r7, #8]
3400ff0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
3400ff10:	6879      	ldr	r1, [r7, #4]
3400ff12:	eb05 060a 	add.w	r6, r5, sl
3400ff16:	42b3      	cmp	r3, r6
3400ff18:	bfb8      	it	lt
3400ff1a:	3101      	addlt	r1, #1
3400ff1c:	f7ff fedc 	bl	3400fcd8 <_Balloc>
3400ff20:	b930      	cbnz	r0, 3400ff30 <__multiply+0x40>
3400ff22:	4602      	mov	r2, r0
3400ff24:	4b42      	ldr	r3, [pc, #264]	@ (34010030 <__multiply+0x140>)
3400ff26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400ff2a:	4842      	ldr	r0, [pc, #264]	@ (34010034 <__multiply+0x144>)
3400ff2c:	f7fd fe08 	bl	3400db40 <__assert_func>
3400ff30:	f100 0414 	add.w	r4, r0, #20
3400ff34:	2200      	movs	r2, #0
3400ff36:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3400ff3a:	4623      	mov	r3, r4
3400ff3c:	4573      	cmp	r3, lr
3400ff3e:	d320      	bcc.n	3400ff82 <__multiply+0x92>
3400ff40:	f107 0814 	add.w	r8, r7, #20
3400ff44:	f109 0114 	add.w	r1, r9, #20
3400ff48:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3400ff4c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3400ff50:	9302      	str	r3, [sp, #8]
3400ff52:	1beb      	subs	r3, r5, r7
3400ff54:	3715      	adds	r7, #21
3400ff56:	3b15      	subs	r3, #21
3400ff58:	f023 0303 	bic.w	r3, r3, #3
3400ff5c:	3304      	adds	r3, #4
3400ff5e:	42bd      	cmp	r5, r7
3400ff60:	bf38      	it	cc
3400ff62:	2304      	movcc	r3, #4
3400ff64:	9301      	str	r3, [sp, #4]
3400ff66:	9b02      	ldr	r3, [sp, #8]
3400ff68:	9103      	str	r1, [sp, #12]
3400ff6a:	428b      	cmp	r3, r1
3400ff6c:	d80c      	bhi.n	3400ff88 <__multiply+0x98>
3400ff6e:	2e00      	cmp	r6, #0
3400ff70:	dd03      	ble.n	3400ff7a <__multiply+0x8a>
3400ff72:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3400ff76:	2b00      	cmp	r3, #0
3400ff78:	d057      	beq.n	3401002a <__multiply+0x13a>
3400ff7a:	6106      	str	r6, [r0, #16]
3400ff7c:	b005      	add	sp, #20
3400ff7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400ff82:	f843 2b04 	str.w	r2, [r3], #4
3400ff86:	e7d9      	b.n	3400ff3c <__multiply+0x4c>
3400ff88:	f8b1 a000 	ldrh.w	sl, [r1]
3400ff8c:	f1ba 0f00 	cmp.w	sl, #0
3400ff90:	d021      	beq.n	3400ffd6 <__multiply+0xe6>
3400ff92:	46c4      	mov	ip, r8
3400ff94:	46a1      	mov	r9, r4
3400ff96:	2700      	movs	r7, #0
3400ff98:	f85c 2b04 	ldr.w	r2, [ip], #4
3400ff9c:	f8d9 3000 	ldr.w	r3, [r9]
3400ffa0:	fa1f fb82 	uxth.w	fp, r2
3400ffa4:	4565      	cmp	r5, ip
3400ffa6:	b29b      	uxth	r3, r3
3400ffa8:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400ffac:	fb0a 330b 	mla	r3, sl, fp, r3
3400ffb0:	443b      	add	r3, r7
3400ffb2:	f8d9 7000 	ldr.w	r7, [r9]
3400ffb6:	ea4f 4717 	mov.w	r7, r7, lsr #16
3400ffba:	fb0a 7202 	mla	r2, sl, r2, r7
3400ffbe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3400ffc2:	b29b      	uxth	r3, r3
3400ffc4:	ea4f 4712 	mov.w	r7, r2, lsr #16
3400ffc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400ffcc:	f849 3b04 	str.w	r3, [r9], #4
3400ffd0:	d8e2      	bhi.n	3400ff98 <__multiply+0xa8>
3400ffd2:	9b01      	ldr	r3, [sp, #4]
3400ffd4:	50e7      	str	r7, [r4, r3]
3400ffd6:	9b03      	ldr	r3, [sp, #12]
3400ffd8:	3104      	adds	r1, #4
3400ffda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3400ffde:	f1b9 0f00 	cmp.w	r9, #0
3400ffe2:	d020      	beq.n	34010026 <__multiply+0x136>
3400ffe4:	6823      	ldr	r3, [r4, #0]
3400ffe6:	4647      	mov	r7, r8
3400ffe8:	46a4      	mov	ip, r4
3400ffea:	f04f 0a00 	mov.w	sl, #0
3400ffee:	f8b7 b000 	ldrh.w	fp, [r7]
3400fff2:	b29b      	uxth	r3, r3
3400fff4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3400fff8:	fb09 220b 	mla	r2, r9, fp, r2
3400fffc:	4452      	add	r2, sl
3400fffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34010002:	f84c 3b04 	str.w	r3, [ip], #4
34010006:	f857 3b04 	ldr.w	r3, [r7], #4
3401000a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401000e:	f8bc 3000 	ldrh.w	r3, [ip]
34010012:	42bd      	cmp	r5, r7
34010014:	fb09 330a 	mla	r3, r9, sl, r3
34010018:	eb03 4312 	add.w	r3, r3, r2, lsr #16
3401001c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
34010020:	d8e5      	bhi.n	3400ffee <__multiply+0xfe>
34010022:	9a01      	ldr	r2, [sp, #4]
34010024:	50a3      	str	r3, [r4, r2]
34010026:	3404      	adds	r4, #4
34010028:	e79d      	b.n	3400ff66 <__multiply+0x76>
3401002a:	3e01      	subs	r6, #1
3401002c:	e79f      	b.n	3400ff6e <__multiply+0x7e>
3401002e:	bf00      	nop
34010030:	340122c5 	.word	0x340122c5
34010034:	340122d6 	.word	0x340122d6

34010038 <__pow5mult>:
34010038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401003c:	4615      	mov	r5, r2
3401003e:	f012 0203 	ands.w	r2, r2, #3
34010042:	4607      	mov	r7, r0
34010044:	460e      	mov	r6, r1
34010046:	d007      	beq.n	34010058 <__pow5mult+0x20>
34010048:	3a01      	subs	r2, #1
3401004a:	4c25      	ldr	r4, [pc, #148]	@ (340100e0 <__pow5mult+0xa8>)
3401004c:	2300      	movs	r3, #0
3401004e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
34010052:	f7ff fea3 	bl	3400fd9c <__multadd>
34010056:	4606      	mov	r6, r0
34010058:	10ad      	asrs	r5, r5, #2
3401005a:	d03d      	beq.n	340100d8 <__pow5mult+0xa0>
3401005c:	69fc      	ldr	r4, [r7, #28]
3401005e:	b97c      	cbnz	r4, 34010080 <__pow5mult+0x48>
34010060:	2010      	movs	r0, #16
34010062:	f7fd fd8b 	bl	3400db7c <malloc>
34010066:	4602      	mov	r2, r0
34010068:	61f8      	str	r0, [r7, #28]
3401006a:	b928      	cbnz	r0, 34010078 <__pow5mult+0x40>
3401006c:	4b1d      	ldr	r3, [pc, #116]	@ (340100e4 <__pow5mult+0xac>)
3401006e:	f240 11b3 	movw	r1, #435	@ 0x1b3
34010072:	481d      	ldr	r0, [pc, #116]	@ (340100e8 <__pow5mult+0xb0>)
34010074:	f7fd fd64 	bl	3400db40 <__assert_func>
34010078:	e9c0 4401 	strd	r4, r4, [r0, #4]
3401007c:	6004      	str	r4, [r0, #0]
3401007e:	60c4      	str	r4, [r0, #12]
34010080:	f8d7 801c 	ldr.w	r8, [r7, #28]
34010084:	f8d8 4008 	ldr.w	r4, [r8, #8]
34010088:	b94c      	cbnz	r4, 3401009e <__pow5mult+0x66>
3401008a:	f240 2171 	movw	r1, #625	@ 0x271
3401008e:	4638      	mov	r0, r7
34010090:	f7ff ff18 	bl	3400fec4 <__i2b>
34010094:	2300      	movs	r3, #0
34010096:	4604      	mov	r4, r0
34010098:	f8c8 0008 	str.w	r0, [r8, #8]
3401009c:	6003      	str	r3, [r0, #0]
3401009e:	f04f 0900 	mov.w	r9, #0
340100a2:	07eb      	lsls	r3, r5, #31
340100a4:	d50a      	bpl.n	340100bc <__pow5mult+0x84>
340100a6:	4631      	mov	r1, r6
340100a8:	4622      	mov	r2, r4
340100aa:	4638      	mov	r0, r7
340100ac:	f7ff ff20 	bl	3400fef0 <__multiply>
340100b0:	4680      	mov	r8, r0
340100b2:	4631      	mov	r1, r6
340100b4:	4638      	mov	r0, r7
340100b6:	4646      	mov	r6, r8
340100b8:	f7ff fe4e 	bl	3400fd58 <_Bfree>
340100bc:	106d      	asrs	r5, r5, #1
340100be:	d00b      	beq.n	340100d8 <__pow5mult+0xa0>
340100c0:	6820      	ldr	r0, [r4, #0]
340100c2:	b938      	cbnz	r0, 340100d4 <__pow5mult+0x9c>
340100c4:	4622      	mov	r2, r4
340100c6:	4621      	mov	r1, r4
340100c8:	4638      	mov	r0, r7
340100ca:	f7ff ff11 	bl	3400fef0 <__multiply>
340100ce:	6020      	str	r0, [r4, #0]
340100d0:	f8c0 9000 	str.w	r9, [r0]
340100d4:	4604      	mov	r4, r0
340100d6:	e7e4      	b.n	340100a2 <__pow5mult+0x6a>
340100d8:	4630      	mov	r0, r6
340100da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
340100de:	bf00      	nop
340100e0:	340125d0 	.word	0x340125d0
340100e4:	34012256 	.word	0x34012256
340100e8:	340122d6 	.word	0x340122d6

340100ec <__lshift>:
340100ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
340100f0:	460c      	mov	r4, r1
340100f2:	4607      	mov	r7, r0
340100f4:	4691      	mov	r9, r2
340100f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
340100fa:	6923      	ldr	r3, [r4, #16]
340100fc:	6849      	ldr	r1, [r1, #4]
340100fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
34010102:	68a3      	ldr	r3, [r4, #8]
34010104:	f108 0601 	add.w	r6, r8, #1
34010108:	42b3      	cmp	r3, r6
3401010a:	db0b      	blt.n	34010124 <__lshift+0x38>
3401010c:	4638      	mov	r0, r7
3401010e:	f7ff fde3 	bl	3400fcd8 <_Balloc>
34010112:	4605      	mov	r5, r0
34010114:	b948      	cbnz	r0, 3401012a <__lshift+0x3e>
34010116:	4602      	mov	r2, r0
34010118:	4b28      	ldr	r3, [pc, #160]	@ (340101bc <__lshift+0xd0>)
3401011a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3401011e:	4828      	ldr	r0, [pc, #160]	@ (340101c0 <__lshift+0xd4>)
34010120:	f7fd fd0e 	bl	3400db40 <__assert_func>
34010124:	3101      	adds	r1, #1
34010126:	005b      	lsls	r3, r3, #1
34010128:	e7ee      	b.n	34010108 <__lshift+0x1c>
3401012a:	2300      	movs	r3, #0
3401012c:	f100 0114 	add.w	r1, r0, #20
34010130:	f100 0210 	add.w	r2, r0, #16
34010134:	4618      	mov	r0, r3
34010136:	4553      	cmp	r3, sl
34010138:	db33      	blt.n	340101a2 <__lshift+0xb6>
3401013a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3401013e:	f104 0314 	add.w	r3, r4, #20
34010142:	6920      	ldr	r0, [r4, #16]
34010144:	f019 091f 	ands.w	r9, r9, #31
34010148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3401014c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
34010150:	d02b      	beq.n	340101aa <__lshift+0xbe>
34010152:	f1c9 0e20 	rsb	lr, r9, #32
34010156:	468a      	mov	sl, r1
34010158:	2200      	movs	r2, #0
3401015a:	6818      	ldr	r0, [r3, #0]
3401015c:	fa00 f009 	lsl.w	r0, r0, r9
34010160:	4310      	orrs	r0, r2
34010162:	f84a 0b04 	str.w	r0, [sl], #4
34010166:	f853 2b04 	ldr.w	r2, [r3], #4
3401016a:	459c      	cmp	ip, r3
3401016c:	fa22 f20e 	lsr.w	r2, r2, lr
34010170:	d8f3      	bhi.n	3401015a <__lshift+0x6e>
34010172:	ebac 0304 	sub.w	r3, ip, r4
34010176:	f104 0015 	add.w	r0, r4, #21
3401017a:	3b15      	subs	r3, #21
3401017c:	f023 0303 	bic.w	r3, r3, #3
34010180:	3304      	adds	r3, #4
34010182:	4560      	cmp	r0, ip
34010184:	bf88      	it	hi
34010186:	2304      	movhi	r3, #4
34010188:	50ca      	str	r2, [r1, r3]
3401018a:	b10a      	cbz	r2, 34010190 <__lshift+0xa4>
3401018c:	f108 0602 	add.w	r6, r8, #2
34010190:	3e01      	subs	r6, #1
34010192:	4638      	mov	r0, r7
34010194:	4621      	mov	r1, r4
34010196:	612e      	str	r6, [r5, #16]
34010198:	f7ff fdde 	bl	3400fd58 <_Bfree>
3401019c:	4628      	mov	r0, r5
3401019e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
340101a2:	3301      	adds	r3, #1
340101a4:	f842 0f04 	str.w	r0, [r2, #4]!
340101a8:	e7c5      	b.n	34010136 <__lshift+0x4a>
340101aa:	3904      	subs	r1, #4
340101ac:	f853 2b04 	ldr.w	r2, [r3], #4
340101b0:	459c      	cmp	ip, r3
340101b2:	f841 2f04 	str.w	r2, [r1, #4]!
340101b6:	d8f9      	bhi.n	340101ac <__lshift+0xc0>
340101b8:	e7ea      	b.n	34010190 <__lshift+0xa4>
340101ba:	bf00      	nop
340101bc:	340122c5 	.word	0x340122c5
340101c0:	340122d6 	.word	0x340122d6

340101c4 <__mcmp>:
340101c4:	4603      	mov	r3, r0
340101c6:	690a      	ldr	r2, [r1, #16]
340101c8:	6900      	ldr	r0, [r0, #16]
340101ca:	1a80      	subs	r0, r0, r2
340101cc:	b530      	push	{r4, r5, lr}
340101ce:	d10e      	bne.n	340101ee <__mcmp+0x2a>
340101d0:	3314      	adds	r3, #20
340101d2:	3114      	adds	r1, #20
340101d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
340101d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
340101dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
340101e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
340101e4:	4295      	cmp	r5, r2
340101e6:	d003      	beq.n	340101f0 <__mcmp+0x2c>
340101e8:	d205      	bcs.n	340101f6 <__mcmp+0x32>
340101ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340101ee:	bd30      	pop	{r4, r5, pc}
340101f0:	42a3      	cmp	r3, r4
340101f2:	d3f3      	bcc.n	340101dc <__mcmp+0x18>
340101f4:	e7fb      	b.n	340101ee <__mcmp+0x2a>
340101f6:	2001      	movs	r0, #1
340101f8:	e7f9      	b.n	340101ee <__mcmp+0x2a>
	...

340101fc <__mdiff>:
340101fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34010200:	4689      	mov	r9, r1
34010202:	4606      	mov	r6, r0
34010204:	4611      	mov	r1, r2
34010206:	4614      	mov	r4, r2
34010208:	4648      	mov	r0, r9
3401020a:	f7ff ffdb 	bl	340101c4 <__mcmp>
3401020e:	1e05      	subs	r5, r0, #0
34010210:	d112      	bne.n	34010238 <__mdiff+0x3c>
34010212:	4629      	mov	r1, r5
34010214:	4630      	mov	r0, r6
34010216:	f7ff fd5f 	bl	3400fcd8 <_Balloc>
3401021a:	4602      	mov	r2, r0
3401021c:	b928      	cbnz	r0, 3401022a <__mdiff+0x2e>
3401021e:	4b41      	ldr	r3, [pc, #260]	@ (34010324 <__mdiff+0x128>)
34010220:	f240 2137 	movw	r1, #567	@ 0x237
34010224:	4840      	ldr	r0, [pc, #256]	@ (34010328 <__mdiff+0x12c>)
34010226:	f7fd fc8b 	bl	3400db40 <__assert_func>
3401022a:	2301      	movs	r3, #1
3401022c:	e9c0 3504 	strd	r3, r5, [r0, #16]
34010230:	4610      	mov	r0, r2
34010232:	b003      	add	sp, #12
34010234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34010238:	bfbc      	itt	lt
3401023a:	464b      	movlt	r3, r9
3401023c:	46a1      	movlt	r9, r4
3401023e:	4630      	mov	r0, r6
34010240:	bfb8      	it	lt
34010242:	2501      	movlt	r5, #1
34010244:	f8d9 1004 	ldr.w	r1, [r9, #4]
34010248:	bfb4      	ite	lt
3401024a:	461c      	movlt	r4, r3
3401024c:	2500      	movge	r5, #0
3401024e:	f7ff fd43 	bl	3400fcd8 <_Balloc>
34010252:	4602      	mov	r2, r0
34010254:	b918      	cbnz	r0, 3401025e <__mdiff+0x62>
34010256:	4b33      	ldr	r3, [pc, #204]	@ (34010324 <__mdiff+0x128>)
34010258:	f240 2145 	movw	r1, #581	@ 0x245
3401025c:	e7e2      	b.n	34010224 <__mdiff+0x28>
3401025e:	f8d9 7010 	ldr.w	r7, [r9, #16]
34010262:	f104 0e14 	add.w	lr, r4, #20
34010266:	6926      	ldr	r6, [r4, #16]
34010268:	f100 0b14 	add.w	fp, r0, #20
3401026c:	60c5      	str	r5, [r0, #12]
3401026e:	f109 0514 	add.w	r5, r9, #20
34010272:	f109 0310 	add.w	r3, r9, #16
34010276:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3401027a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3401027e:	46d9      	mov	r9, fp
34010280:	f04f 0c00 	mov.w	ip, #0
34010284:	9301      	str	r3, [sp, #4]
34010286:	9b01      	ldr	r3, [sp, #4]
34010288:	f85e 0b04 	ldr.w	r0, [lr], #4
3401028c:	f853 af04 	ldr.w	sl, [r3, #4]!
34010290:	4576      	cmp	r6, lr
34010292:	9301      	str	r3, [sp, #4]
34010294:	fa1f f38a 	uxth.w	r3, sl
34010298:	4619      	mov	r1, r3
3401029a:	b283      	uxth	r3, r0
3401029c:	ea4f 4010 	mov.w	r0, r0, lsr #16
340102a0:	eba1 0303 	sub.w	r3, r1, r3
340102a4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
340102a8:	4463      	add	r3, ip
340102aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
340102ae:	b29b      	uxth	r3, r3
340102b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
340102b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
340102b8:	f849 3b04 	str.w	r3, [r9], #4
340102bc:	d8e3      	bhi.n	34010286 <__mdiff+0x8a>
340102be:	1b33      	subs	r3, r6, r4
340102c0:	3415      	adds	r4, #21
340102c2:	3b15      	subs	r3, #21
340102c4:	f023 0303 	bic.w	r3, r3, #3
340102c8:	3304      	adds	r3, #4
340102ca:	42a6      	cmp	r6, r4
340102cc:	bf38      	it	cc
340102ce:	2304      	movcc	r3, #4
340102d0:	441d      	add	r5, r3
340102d2:	445b      	add	r3, fp
340102d4:	462c      	mov	r4, r5
340102d6:	461e      	mov	r6, r3
340102d8:	4544      	cmp	r4, r8
340102da:	d30e      	bcc.n	340102fa <__mdiff+0xfe>
340102dc:	f108 0103 	add.w	r1, r8, #3
340102e0:	1b49      	subs	r1, r1, r5
340102e2:	3d03      	subs	r5, #3
340102e4:	f021 0103 	bic.w	r1, r1, #3
340102e8:	45a8      	cmp	r8, r5
340102ea:	bf38      	it	cc
340102ec:	2100      	movcc	r1, #0
340102ee:	440b      	add	r3, r1
340102f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
340102f4:	b199      	cbz	r1, 3401031e <__mdiff+0x122>
340102f6:	6117      	str	r7, [r2, #16]
340102f8:	e79a      	b.n	34010230 <__mdiff+0x34>
340102fa:	f854 1b04 	ldr.w	r1, [r4], #4
340102fe:	46e6      	mov	lr, ip
34010300:	fa1f fc81 	uxth.w	ip, r1
34010304:	0c08      	lsrs	r0, r1, #16
34010306:	4471      	add	r1, lr
34010308:	44f4      	add	ip, lr
3401030a:	b289      	uxth	r1, r1
3401030c:	eb00 402c 	add.w	r0, r0, ip, asr #16
34010310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
34010314:	ea4f 4c20 	mov.w	ip, r0, asr #16
34010318:	f846 1b04 	str.w	r1, [r6], #4
3401031c:	e7dc      	b.n	340102d8 <__mdiff+0xdc>
3401031e:	3f01      	subs	r7, #1
34010320:	e7e6      	b.n	340102f0 <__mdiff+0xf4>
34010322:	bf00      	nop
34010324:	340122c5 	.word	0x340122c5
34010328:	340122d6 	.word	0x340122d6

3401032c <__d2b>:
3401032c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
34010330:	460f      	mov	r7, r1
34010332:	2101      	movs	r1, #1
34010334:	4616      	mov	r6, r2
34010336:	ec59 8b10 	vmov	r8, r9, d0
3401033a:	f7ff fccd 	bl	3400fcd8 <_Balloc>
3401033e:	4604      	mov	r4, r0
34010340:	b930      	cbnz	r0, 34010350 <__d2b+0x24>
34010342:	4602      	mov	r2, r0
34010344:	4b23      	ldr	r3, [pc, #140]	@ (340103d4 <__d2b+0xa8>)
34010346:	f240 310f 	movw	r1, #783	@ 0x30f
3401034a:	4823      	ldr	r0, [pc, #140]	@ (340103d8 <__d2b+0xac>)
3401034c:	f7fd fbf8 	bl	3400db40 <__assert_func>
34010350:	f3c9 550a 	ubfx	r5, r9, #20, #11
34010354:	f3c9 0313 	ubfx	r3, r9, #0, #20
34010358:	b10d      	cbz	r5, 3401035e <__d2b+0x32>
3401035a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3401035e:	9301      	str	r3, [sp, #4]
34010360:	f1b8 0300 	subs.w	r3, r8, #0
34010364:	d023      	beq.n	340103ae <__d2b+0x82>
34010366:	4668      	mov	r0, sp
34010368:	9300      	str	r3, [sp, #0]
3401036a:	f7ff fd7e 	bl	3400fe6a <__lo0bits>
3401036e:	e9dd 1200 	ldrd	r1, r2, [sp]
34010372:	b1d0      	cbz	r0, 340103aa <__d2b+0x7e>
34010374:	f1c0 0320 	rsb	r3, r0, #32
34010378:	fa02 f303 	lsl.w	r3, r2, r3
3401037c:	40c2      	lsrs	r2, r0
3401037e:	430b      	orrs	r3, r1
34010380:	9201      	str	r2, [sp, #4]
34010382:	6163      	str	r3, [r4, #20]
34010384:	9b01      	ldr	r3, [sp, #4]
34010386:	2b00      	cmp	r3, #0
34010388:	61a3      	str	r3, [r4, #24]
3401038a:	bf0c      	ite	eq
3401038c:	2201      	moveq	r2, #1
3401038e:	2202      	movne	r2, #2
34010390:	6122      	str	r2, [r4, #16]
34010392:	b1a5      	cbz	r5, 340103be <__d2b+0x92>
34010394:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
34010398:	4405      	add	r5, r0
3401039a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3401039e:	603d      	str	r5, [r7, #0]
340103a0:	6030      	str	r0, [r6, #0]
340103a2:	4620      	mov	r0, r4
340103a4:	b003      	add	sp, #12
340103a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
340103aa:	6161      	str	r1, [r4, #20]
340103ac:	e7ea      	b.n	34010384 <__d2b+0x58>
340103ae:	a801      	add	r0, sp, #4
340103b0:	f7ff fd5b 	bl	3400fe6a <__lo0bits>
340103b4:	9b01      	ldr	r3, [sp, #4]
340103b6:	3020      	adds	r0, #32
340103b8:	2201      	movs	r2, #1
340103ba:	6163      	str	r3, [r4, #20]
340103bc:	e7e8      	b.n	34010390 <__d2b+0x64>
340103be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
340103c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
340103c6:	6038      	str	r0, [r7, #0]
340103c8:	6918      	ldr	r0, [r3, #16]
340103ca:	f7ff fd2f 	bl	3400fe2c <__hi0bits>
340103ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
340103d2:	e7e5      	b.n	340103a0 <__d2b+0x74>
340103d4:	340122c5 	.word	0x340122c5
340103d8:	340122d6 	.word	0x340122d6

340103dc <__sfputc_r>:
340103dc:	6893      	ldr	r3, [r2, #8]
340103de:	3b01      	subs	r3, #1
340103e0:	2b00      	cmp	r3, #0
340103e2:	b410      	push	{r4}
340103e4:	6093      	str	r3, [r2, #8]
340103e6:	da08      	bge.n	340103fa <__sfputc_r+0x1e>
340103e8:	6994      	ldr	r4, [r2, #24]
340103ea:	42a3      	cmp	r3, r4
340103ec:	db01      	blt.n	340103f2 <__sfputc_r+0x16>
340103ee:	290a      	cmp	r1, #10
340103f0:	d103      	bne.n	340103fa <__sfputc_r+0x1e>
340103f2:	f85d 4b04 	ldr.w	r4, [sp], #4
340103f6:	f7fe bb00 	b.w	3400e9fa <__swbuf_r>
340103fa:	6813      	ldr	r3, [r2, #0]
340103fc:	1c58      	adds	r0, r3, #1
340103fe:	6010      	str	r0, [r2, #0]
34010400:	4608      	mov	r0, r1
34010402:	7019      	strb	r1, [r3, #0]
34010404:	f85d 4b04 	ldr.w	r4, [sp], #4
34010408:	4770      	bx	lr

3401040a <__sfputs_r>:
3401040a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401040c:	4606      	mov	r6, r0
3401040e:	460f      	mov	r7, r1
34010410:	4614      	mov	r4, r2
34010412:	18d5      	adds	r5, r2, r3
34010414:	42ac      	cmp	r4, r5
34010416:	d101      	bne.n	3401041c <__sfputs_r+0x12>
34010418:	2000      	movs	r0, #0
3401041a:	e007      	b.n	3401042c <__sfputs_r+0x22>
3401041c:	463a      	mov	r2, r7
3401041e:	f814 1b01 	ldrb.w	r1, [r4], #1
34010422:	4630      	mov	r0, r6
34010424:	f7ff ffda 	bl	340103dc <__sfputc_r>
34010428:	1c43      	adds	r3, r0, #1
3401042a:	d1f3      	bne.n	34010414 <__sfputs_r+0xa>
3401042c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

34010430 <_vfiprintf_r>:
34010430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34010434:	460d      	mov	r5, r1
34010436:	b09d      	sub	sp, #116	@ 0x74
34010438:	4614      	mov	r4, r2
3401043a:	4698      	mov	r8, r3
3401043c:	4606      	mov	r6, r0
3401043e:	b118      	cbz	r0, 34010448 <_vfiprintf_r+0x18>
34010440:	6a03      	ldr	r3, [r0, #32]
34010442:	b90b      	cbnz	r3, 34010448 <_vfiprintf_r+0x18>
34010444:	f7fe f9de 	bl	3400e804 <__sinit>
34010448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401044a:	07d9      	lsls	r1, r3, #31
3401044c:	d405      	bmi.n	3401045a <_vfiprintf_r+0x2a>
3401044e:	89ab      	ldrh	r3, [r5, #12]
34010450:	059a      	lsls	r2, r3, #22
34010452:	d402      	bmi.n	3401045a <_vfiprintf_r+0x2a>
34010454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34010456:	f7fe fde4 	bl	3400f022 <__retarget_lock_acquire_recursive>
3401045a:	89ab      	ldrh	r3, [r5, #12]
3401045c:	071b      	lsls	r3, r3, #28
3401045e:	d501      	bpl.n	34010464 <_vfiprintf_r+0x34>
34010460:	692b      	ldr	r3, [r5, #16]
34010462:	b99b      	cbnz	r3, 3401048c <_vfiprintf_r+0x5c>
34010464:	4629      	mov	r1, r5
34010466:	4630      	mov	r0, r6
34010468:	f7fe fb06 	bl	3400ea78 <__swsetup_r>
3401046c:	b170      	cbz	r0, 3401048c <_vfiprintf_r+0x5c>
3401046e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34010470:	07dc      	lsls	r4, r3, #31
34010472:	d504      	bpl.n	3401047e <_vfiprintf_r+0x4e>
34010474:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34010478:	b01d      	add	sp, #116	@ 0x74
3401047a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401047e:	89ab      	ldrh	r3, [r5, #12]
34010480:	0598      	lsls	r0, r3, #22
34010482:	d4f7      	bmi.n	34010474 <_vfiprintf_r+0x44>
34010484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34010486:	f7fe fdcd 	bl	3400f024 <__retarget_lock_release_recursive>
3401048a:	e7f3      	b.n	34010474 <_vfiprintf_r+0x44>
3401048c:	2300      	movs	r3, #0
3401048e:	f8cd 800c 	str.w	r8, [sp, #12]
34010492:	f04f 0901 	mov.w	r9, #1
34010496:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3401064c <_vfiprintf_r+0x21c>
3401049a:	9309      	str	r3, [sp, #36]	@ 0x24
3401049c:	2320      	movs	r3, #32
3401049e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
340104a2:	2330      	movs	r3, #48	@ 0x30
340104a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
340104a8:	4623      	mov	r3, r4
340104aa:	469a      	mov	sl, r3
340104ac:	f813 2b01 	ldrb.w	r2, [r3], #1
340104b0:	b10a      	cbz	r2, 340104b6 <_vfiprintf_r+0x86>
340104b2:	2a25      	cmp	r2, #37	@ 0x25
340104b4:	d1f9      	bne.n	340104aa <_vfiprintf_r+0x7a>
340104b6:	ebba 0b04 	subs.w	fp, sl, r4
340104ba:	d00b      	beq.n	340104d4 <_vfiprintf_r+0xa4>
340104bc:	465b      	mov	r3, fp
340104be:	4622      	mov	r2, r4
340104c0:	4629      	mov	r1, r5
340104c2:	4630      	mov	r0, r6
340104c4:	f7ff ffa1 	bl	3401040a <__sfputs_r>
340104c8:	3001      	adds	r0, #1
340104ca:	f000 80a7 	beq.w	3401061c <_vfiprintf_r+0x1ec>
340104ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
340104d0:	445a      	add	r2, fp
340104d2:	9209      	str	r2, [sp, #36]	@ 0x24
340104d4:	f89a 3000 	ldrb.w	r3, [sl]
340104d8:	2b00      	cmp	r3, #0
340104da:	f000 809f 	beq.w	3401061c <_vfiprintf_r+0x1ec>
340104de:	2300      	movs	r3, #0
340104e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
340104e4:	f10a 0a01 	add.w	sl, sl, #1
340104e8:	9304      	str	r3, [sp, #16]
340104ea:	9307      	str	r3, [sp, #28]
340104ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
340104f0:	931a      	str	r3, [sp, #104]	@ 0x68
340104f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
340104f6:	4654      	mov	r4, sl
340104f8:	2205      	movs	r2, #5
340104fa:	4854      	ldr	r0, [pc, #336]	@ (3401064c <_vfiprintf_r+0x21c>)
340104fc:	f814 1b01 	ldrb.w	r1, [r4], #1
34010500:	f7fe fd91 	bl	3400f026 <memchr>
34010504:	9a04      	ldr	r2, [sp, #16]
34010506:	b9d8      	cbnz	r0, 34010540 <_vfiprintf_r+0x110>
34010508:	06d1      	lsls	r1, r2, #27
3401050a:	bf44      	itt	mi
3401050c:	2320      	movmi	r3, #32
3401050e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34010512:	0713      	lsls	r3, r2, #28
34010514:	bf44      	itt	mi
34010516:	232b      	movmi	r3, #43	@ 0x2b
34010518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401051c:	f89a 3000 	ldrb.w	r3, [sl]
34010520:	2b2a      	cmp	r3, #42	@ 0x2a
34010522:	d015      	beq.n	34010550 <_vfiprintf_r+0x120>
34010524:	9a07      	ldr	r2, [sp, #28]
34010526:	4654      	mov	r4, sl
34010528:	2000      	movs	r0, #0
3401052a:	f04f 0c0a 	mov.w	ip, #10
3401052e:	4621      	mov	r1, r4
34010530:	f811 3b01 	ldrb.w	r3, [r1], #1
34010534:	3b30      	subs	r3, #48	@ 0x30
34010536:	2b09      	cmp	r3, #9
34010538:	d94b      	bls.n	340105d2 <_vfiprintf_r+0x1a2>
3401053a:	b1b0      	cbz	r0, 3401056a <_vfiprintf_r+0x13a>
3401053c:	9207      	str	r2, [sp, #28]
3401053e:	e014      	b.n	3401056a <_vfiprintf_r+0x13a>
34010540:	eba0 0308 	sub.w	r3, r0, r8
34010544:	46a2      	mov	sl, r4
34010546:	fa09 f303 	lsl.w	r3, r9, r3
3401054a:	4313      	orrs	r3, r2
3401054c:	9304      	str	r3, [sp, #16]
3401054e:	e7d2      	b.n	340104f6 <_vfiprintf_r+0xc6>
34010550:	9b03      	ldr	r3, [sp, #12]
34010552:	1d19      	adds	r1, r3, #4
34010554:	681b      	ldr	r3, [r3, #0]
34010556:	2b00      	cmp	r3, #0
34010558:	9103      	str	r1, [sp, #12]
3401055a:	bfbb      	ittet	lt
3401055c:	425b      	neglt	r3, r3
3401055e:	f042 0202 	orrlt.w	r2, r2, #2
34010562:	9307      	strge	r3, [sp, #28]
34010564:	9307      	strlt	r3, [sp, #28]
34010566:	bfb8      	it	lt
34010568:	9204      	strlt	r2, [sp, #16]
3401056a:	7823      	ldrb	r3, [r4, #0]
3401056c:	2b2e      	cmp	r3, #46	@ 0x2e
3401056e:	d10a      	bne.n	34010586 <_vfiprintf_r+0x156>
34010570:	7863      	ldrb	r3, [r4, #1]
34010572:	2b2a      	cmp	r3, #42	@ 0x2a
34010574:	d132      	bne.n	340105dc <_vfiprintf_r+0x1ac>
34010576:	9b03      	ldr	r3, [sp, #12]
34010578:	3402      	adds	r4, #2
3401057a:	1d1a      	adds	r2, r3, #4
3401057c:	681b      	ldr	r3, [r3, #0]
3401057e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
34010582:	9203      	str	r2, [sp, #12]
34010584:	9305      	str	r3, [sp, #20]
34010586:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3401065c <_vfiprintf_r+0x22c>
3401058a:	2203      	movs	r2, #3
3401058c:	7821      	ldrb	r1, [r4, #0]
3401058e:	4650      	mov	r0, sl
34010590:	f7fe fd49 	bl	3400f026 <memchr>
34010594:	b138      	cbz	r0, 340105a6 <_vfiprintf_r+0x176>
34010596:	eba0 000a 	sub.w	r0, r0, sl
3401059a:	2240      	movs	r2, #64	@ 0x40
3401059c:	9b04      	ldr	r3, [sp, #16]
3401059e:	3401      	adds	r4, #1
340105a0:	4082      	lsls	r2, r0
340105a2:	4313      	orrs	r3, r2
340105a4:	9304      	str	r3, [sp, #16]
340105a6:	f814 1b01 	ldrb.w	r1, [r4], #1
340105aa:	2206      	movs	r2, #6
340105ac:	4828      	ldr	r0, [pc, #160]	@ (34010650 <_vfiprintf_r+0x220>)
340105ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
340105b2:	f7fe fd38 	bl	3400f026 <memchr>
340105b6:	2800      	cmp	r0, #0
340105b8:	d03f      	beq.n	3401063a <_vfiprintf_r+0x20a>
340105ba:	4b26      	ldr	r3, [pc, #152]	@ (34010654 <_vfiprintf_r+0x224>)
340105bc:	bb1b      	cbnz	r3, 34010606 <_vfiprintf_r+0x1d6>
340105be:	9b03      	ldr	r3, [sp, #12]
340105c0:	3307      	adds	r3, #7
340105c2:	f023 0307 	bic.w	r3, r3, #7
340105c6:	3308      	adds	r3, #8
340105c8:	9303      	str	r3, [sp, #12]
340105ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340105cc:	443b      	add	r3, r7
340105ce:	9309      	str	r3, [sp, #36]	@ 0x24
340105d0:	e76a      	b.n	340104a8 <_vfiprintf_r+0x78>
340105d2:	fb0c 3202 	mla	r2, ip, r2, r3
340105d6:	460c      	mov	r4, r1
340105d8:	2001      	movs	r0, #1
340105da:	e7a8      	b.n	3401052e <_vfiprintf_r+0xfe>
340105dc:	2300      	movs	r3, #0
340105de:	3401      	adds	r4, #1
340105e0:	f04f 0c0a 	mov.w	ip, #10
340105e4:	4619      	mov	r1, r3
340105e6:	9305      	str	r3, [sp, #20]
340105e8:	4620      	mov	r0, r4
340105ea:	f810 2b01 	ldrb.w	r2, [r0], #1
340105ee:	3a30      	subs	r2, #48	@ 0x30
340105f0:	2a09      	cmp	r2, #9
340105f2:	d903      	bls.n	340105fc <_vfiprintf_r+0x1cc>
340105f4:	2b00      	cmp	r3, #0
340105f6:	d0c6      	beq.n	34010586 <_vfiprintf_r+0x156>
340105f8:	9105      	str	r1, [sp, #20]
340105fa:	e7c4      	b.n	34010586 <_vfiprintf_r+0x156>
340105fc:	fb0c 2101 	mla	r1, ip, r1, r2
34010600:	4604      	mov	r4, r0
34010602:	2301      	movs	r3, #1
34010604:	e7f0      	b.n	340105e8 <_vfiprintf_r+0x1b8>
34010606:	ab03      	add	r3, sp, #12
34010608:	462a      	mov	r2, r5
3401060a:	a904      	add	r1, sp, #16
3401060c:	4630      	mov	r0, r6
3401060e:	9300      	str	r3, [sp, #0]
34010610:	4b11      	ldr	r3, [pc, #68]	@ (34010658 <_vfiprintf_r+0x228>)
34010612:	f7fd fc01 	bl	3400de18 <_printf_float>
34010616:	4607      	mov	r7, r0
34010618:	1c78      	adds	r0, r7, #1
3401061a:	d1d6      	bne.n	340105ca <_vfiprintf_r+0x19a>
3401061c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401061e:	07d9      	lsls	r1, r3, #31
34010620:	d405      	bmi.n	3401062e <_vfiprintf_r+0x1fe>
34010622:	89ab      	ldrh	r3, [r5, #12]
34010624:	059a      	lsls	r2, r3, #22
34010626:	d402      	bmi.n	3401062e <_vfiprintf_r+0x1fe>
34010628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401062a:	f7fe fcfb 	bl	3400f024 <__retarget_lock_release_recursive>
3401062e:	89ab      	ldrh	r3, [r5, #12]
34010630:	065b      	lsls	r3, r3, #25
34010632:	f53f af1f 	bmi.w	34010474 <_vfiprintf_r+0x44>
34010636:	9809      	ldr	r0, [sp, #36]	@ 0x24
34010638:	e71e      	b.n	34010478 <_vfiprintf_r+0x48>
3401063a:	ab03      	add	r3, sp, #12
3401063c:	462a      	mov	r2, r5
3401063e:	a904      	add	r1, sp, #16
34010640:	4630      	mov	r0, r6
34010642:	9300      	str	r3, [sp, #0]
34010644:	4b04      	ldr	r3, [pc, #16]	@ (34010658 <_vfiprintf_r+0x228>)
34010646:	f7fd fe73 	bl	3400e330 <_printf_i>
3401064a:	e7e4      	b.n	34010616 <_vfiprintf_r+0x1e6>
3401064c:	3401232f 	.word	0x3401232f
34010650:	34012339 	.word	0x34012339
34010654:	3400de19 	.word	0x3400de19
34010658:	3401040b 	.word	0x3401040b
3401065c:	34012335 	.word	0x34012335

34010660 <__swhatbuf_r>:
34010660:	b570      	push	{r4, r5, r6, lr}
34010662:	460c      	mov	r4, r1
34010664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34010668:	b096      	sub	sp, #88	@ 0x58
3401066a:	4615      	mov	r5, r2
3401066c:	2900      	cmp	r1, #0
3401066e:	461e      	mov	r6, r3
34010670:	da0c      	bge.n	3401068c <__swhatbuf_r+0x2c>
34010672:	89a3      	ldrh	r3, [r4, #12]
34010674:	2100      	movs	r1, #0
34010676:	f013 0f80 	tst.w	r3, #128	@ 0x80
3401067a:	bf14      	ite	ne
3401067c:	2340      	movne	r3, #64	@ 0x40
3401067e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
34010682:	2000      	movs	r0, #0
34010684:	6031      	str	r1, [r6, #0]
34010686:	602b      	str	r3, [r5, #0]
34010688:	b016      	add	sp, #88	@ 0x58
3401068a:	bd70      	pop	{r4, r5, r6, pc}
3401068c:	466a      	mov	r2, sp
3401068e:	f000 f879 	bl	34010784 <_fstat_r>
34010692:	2800      	cmp	r0, #0
34010694:	dbed      	blt.n	34010672 <__swhatbuf_r+0x12>
34010696:	9901      	ldr	r1, [sp, #4]
34010698:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3401069c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
340106a0:	4259      	negs	r1, r3
340106a2:	4159      	adcs	r1, r3
340106a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340106a8:	e7eb      	b.n	34010682 <__swhatbuf_r+0x22>

340106aa <__smakebuf_r>:
340106aa:	898b      	ldrh	r3, [r1, #12]
340106ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
340106ae:	079d      	lsls	r5, r3, #30
340106b0:	4606      	mov	r6, r0
340106b2:	460c      	mov	r4, r1
340106b4:	d507      	bpl.n	340106c6 <__smakebuf_r+0x1c>
340106b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
340106ba:	6023      	str	r3, [r4, #0]
340106bc:	6123      	str	r3, [r4, #16]
340106be:	2301      	movs	r3, #1
340106c0:	6163      	str	r3, [r4, #20]
340106c2:	b003      	add	sp, #12
340106c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
340106c6:	ab01      	add	r3, sp, #4
340106c8:	466a      	mov	r2, sp
340106ca:	f7ff ffc9 	bl	34010660 <__swhatbuf_r>
340106ce:	9f00      	ldr	r7, [sp, #0]
340106d0:	4605      	mov	r5, r0
340106d2:	4630      	mov	r0, r6
340106d4:	4639      	mov	r1, r7
340106d6:	f7fd fa83 	bl	3400dbe0 <_malloc_r>
340106da:	b948      	cbnz	r0, 340106f0 <__smakebuf_r+0x46>
340106dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340106e0:	059a      	lsls	r2, r3, #22
340106e2:	d4ee      	bmi.n	340106c2 <__smakebuf_r+0x18>
340106e4:	f023 0303 	bic.w	r3, r3, #3
340106e8:	f043 0302 	orr.w	r3, r3, #2
340106ec:	81a3      	strh	r3, [r4, #12]
340106ee:	e7e2      	b.n	340106b6 <__smakebuf_r+0xc>
340106f0:	89a3      	ldrh	r3, [r4, #12]
340106f2:	6020      	str	r0, [r4, #0]
340106f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
340106f8:	81a3      	strh	r3, [r4, #12]
340106fa:	9b01      	ldr	r3, [sp, #4]
340106fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
34010700:	b15b      	cbz	r3, 3401071a <__smakebuf_r+0x70>
34010702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34010706:	4630      	mov	r0, r6
34010708:	f000 f84e 	bl	340107a8 <_isatty_r>
3401070c:	b128      	cbz	r0, 3401071a <__smakebuf_r+0x70>
3401070e:	89a3      	ldrh	r3, [r4, #12]
34010710:	f023 0303 	bic.w	r3, r3, #3
34010714:	f043 0301 	orr.w	r3, r3, #1
34010718:	81a3      	strh	r3, [r4, #12]
3401071a:	89a3      	ldrh	r3, [r4, #12]
3401071c:	431d      	orrs	r5, r3
3401071e:	81a5      	strh	r5, [r4, #12]
34010720:	e7cf      	b.n	340106c2 <__smakebuf_r+0x18>

34010722 <_raise_r>:
34010722:	291f      	cmp	r1, #31
34010724:	b538      	push	{r3, r4, r5, lr}
34010726:	4605      	mov	r5, r0
34010728:	460c      	mov	r4, r1
3401072a:	d904      	bls.n	34010736 <_raise_r+0x14>
3401072c:	2316      	movs	r3, #22
3401072e:	6003      	str	r3, [r0, #0]
34010730:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34010734:	bd38      	pop	{r3, r4, r5, pc}
34010736:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
34010738:	b112      	cbz	r2, 34010740 <_raise_r+0x1e>
3401073a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3401073e:	b94b      	cbnz	r3, 34010754 <_raise_r+0x32>
34010740:	4628      	mov	r0, r5
34010742:	f000 f853 	bl	340107ec <_getpid_r>
34010746:	4622      	mov	r2, r4
34010748:	4601      	mov	r1, r0
3401074a:	4628      	mov	r0, r5
3401074c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34010750:	f000 b83a 	b.w	340107c8 <_kill_r>
34010754:	2b01      	cmp	r3, #1
34010756:	d00a      	beq.n	3401076e <_raise_r+0x4c>
34010758:	1c59      	adds	r1, r3, #1
3401075a:	d103      	bne.n	34010764 <_raise_r+0x42>
3401075c:	2316      	movs	r3, #22
3401075e:	6003      	str	r3, [r0, #0]
34010760:	2001      	movs	r0, #1
34010762:	e7e7      	b.n	34010734 <_raise_r+0x12>
34010764:	2100      	movs	r1, #0
34010766:	4620      	mov	r0, r4
34010768:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3401076c:	4798      	blx	r3
3401076e:	2000      	movs	r0, #0
34010770:	e7e0      	b.n	34010734 <_raise_r+0x12>
	...

34010774 <raise>:
34010774:	4b02      	ldr	r3, [pc, #8]	@ (34010780 <raise+0xc>)
34010776:	4601      	mov	r1, r0
34010778:	6818      	ldr	r0, [r3, #0]
3401077a:	f7ff bfd2 	b.w	34010722 <_raise_r>
3401077e:	bf00      	nop
34010780:	34012844 	.word	0x34012844

34010784 <_fstat_r>:
34010784:	b538      	push	{r3, r4, r5, lr}
34010786:	2300      	movs	r3, #0
34010788:	4d06      	ldr	r5, [pc, #24]	@ (340107a4 <_fstat_r+0x20>)
3401078a:	4604      	mov	r4, r0
3401078c:	4608      	mov	r0, r1
3401078e:	4611      	mov	r1, r2
34010790:	602b      	str	r3, [r5, #0]
34010792:	f7f1 f839 	bl	34001808 <_fstat>
34010796:	1c43      	adds	r3, r0, #1
34010798:	d102      	bne.n	340107a0 <_fstat_r+0x1c>
3401079a:	682b      	ldr	r3, [r5, #0]
3401079c:	b103      	cbz	r3, 340107a0 <_fstat_r+0x1c>
3401079e:	6023      	str	r3, [r4, #0]
340107a0:	bd38      	pop	{r3, r4, r5, pc}
340107a2:	bf00      	nop
340107a4:	340133f4 	.word	0x340133f4

340107a8 <_isatty_r>:
340107a8:	b538      	push	{r3, r4, r5, lr}
340107aa:	2300      	movs	r3, #0
340107ac:	4d05      	ldr	r5, [pc, #20]	@ (340107c4 <_isatty_r+0x1c>)
340107ae:	4604      	mov	r4, r0
340107b0:	4608      	mov	r0, r1
340107b2:	602b      	str	r3, [r5, #0]
340107b4:	f7f1 f82d 	bl	34001812 <_isatty>
340107b8:	1c43      	adds	r3, r0, #1
340107ba:	d102      	bne.n	340107c2 <_isatty_r+0x1a>
340107bc:	682b      	ldr	r3, [r5, #0]
340107be:	b103      	cbz	r3, 340107c2 <_isatty_r+0x1a>
340107c0:	6023      	str	r3, [r4, #0]
340107c2:	bd38      	pop	{r3, r4, r5, pc}
340107c4:	340133f4 	.word	0x340133f4

340107c8 <_kill_r>:
340107c8:	b538      	push	{r3, r4, r5, lr}
340107ca:	2300      	movs	r3, #0
340107cc:	4d06      	ldr	r5, [pc, #24]	@ (340107e8 <_kill_r+0x20>)
340107ce:	4604      	mov	r4, r0
340107d0:	4608      	mov	r0, r1
340107d2:	4611      	mov	r1, r2
340107d4:	602b      	str	r3, [r5, #0]
340107d6:	f7f0 fff8 	bl	340017ca <_kill>
340107da:	1c43      	adds	r3, r0, #1
340107dc:	d102      	bne.n	340107e4 <_kill_r+0x1c>
340107de:	682b      	ldr	r3, [r5, #0]
340107e0:	b103      	cbz	r3, 340107e4 <_kill_r+0x1c>
340107e2:	6023      	str	r3, [r4, #0]
340107e4:	bd38      	pop	{r3, r4, r5, pc}
340107e6:	bf00      	nop
340107e8:	340133f4 	.word	0x340133f4

340107ec <_getpid_r>:
340107ec:	f7f0 bfeb 	b.w	340017c6 <_getpid>

340107f0 <_calloc_r>:
340107f0:	b570      	push	{r4, r5, r6, lr}
340107f2:	fba1 5402 	umull	r5, r4, r1, r2
340107f6:	b934      	cbnz	r4, 34010806 <_calloc_r+0x16>
340107f8:	4629      	mov	r1, r5
340107fa:	f7fd f9f1 	bl	3400dbe0 <_malloc_r>
340107fe:	4606      	mov	r6, r0
34010800:	b928      	cbnz	r0, 3401080e <_calloc_r+0x1e>
34010802:	4630      	mov	r0, r6
34010804:	bd70      	pop	{r4, r5, r6, pc}
34010806:	220c      	movs	r2, #12
34010808:	2600      	movs	r6, #0
3401080a:	6002      	str	r2, [r0, #0]
3401080c:	e7f9      	b.n	34010802 <_calloc_r+0x12>
3401080e:	462a      	mov	r2, r5
34010810:	4621      	mov	r1, r4
34010812:	f7fe f987 	bl	3400eb24 <memset>
34010816:	e7f4      	b.n	34010802 <_calloc_r+0x12>

34010818 <__ascii_mbtowc>:
34010818:	b082      	sub	sp, #8
3401081a:	b901      	cbnz	r1, 3401081e <__ascii_mbtowc+0x6>
3401081c:	a901      	add	r1, sp, #4
3401081e:	b142      	cbz	r2, 34010832 <__ascii_mbtowc+0x1a>
34010820:	b14b      	cbz	r3, 34010836 <__ascii_mbtowc+0x1e>
34010822:	7813      	ldrb	r3, [r2, #0]
34010824:	600b      	str	r3, [r1, #0]
34010826:	7812      	ldrb	r2, [r2, #0]
34010828:	1e10      	subs	r0, r2, #0
3401082a:	bf18      	it	ne
3401082c:	2001      	movne	r0, #1
3401082e:	b002      	add	sp, #8
34010830:	4770      	bx	lr
34010832:	4610      	mov	r0, r2
34010834:	e7fb      	b.n	3401082e <__ascii_mbtowc+0x16>
34010836:	f06f 0001 	mvn.w	r0, #1
3401083a:	e7f8      	b.n	3401082e <__ascii_mbtowc+0x16>

3401083c <__ascii_wctomb>:
3401083c:	4603      	mov	r3, r0
3401083e:	4608      	mov	r0, r1
34010840:	b141      	cbz	r1, 34010854 <__ascii_wctomb+0x18>
34010842:	2aff      	cmp	r2, #255	@ 0xff
34010844:	d904      	bls.n	34010850 <__ascii_wctomb+0x14>
34010846:	228a      	movs	r2, #138	@ 0x8a
34010848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401084c:	601a      	str	r2, [r3, #0]
3401084e:	4770      	bx	lr
34010850:	2001      	movs	r0, #1
34010852:	700a      	strb	r2, [r1, #0]
34010854:	4770      	bx	lr
	...

34010858 <_sbrk>:
34010858:	4a04      	ldr	r2, [pc, #16]	@ (3401086c <_sbrk+0x14>)
3401085a:	4603      	mov	r3, r0
3401085c:	6811      	ldr	r1, [r2, #0]
3401085e:	b909      	cbnz	r1, 34010864 <_sbrk+0xc>
34010860:	4903      	ldr	r1, [pc, #12]	@ (34010870 <_sbrk+0x18>)
34010862:	6011      	str	r1, [r2, #0]
34010864:	6810      	ldr	r0, [r2, #0]
34010866:	4403      	add	r3, r0
34010868:	6013      	str	r3, [r2, #0]
3401086a:	4770      	bx	lr
3401086c:	340133fc 	.word	0x340133fc
34010870:	34013400 	.word	0x34013400

34010874 <_init>:
34010874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010876:	bf00      	nop
34010878:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401087a:	bc08      	pop	{r3}
3401087c:	469e      	mov	lr, r3
3401087e:	4770      	bx	lr

34010880 <_fini>:
34010880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010882:	bf00      	nop
34010884:	bcf8      	pop	{r3, r4, r5, r6, r7}
34010886:	bc08      	pop	{r3}
34010888:	469e      	mov	lr, r3
3401088a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

340108a0 <SECURE_SystemCoreClockUpdate>:
340108a0:	e97f e97f 	sg
340108a4:	f7f1 bf04 	b.w	340026b0 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
