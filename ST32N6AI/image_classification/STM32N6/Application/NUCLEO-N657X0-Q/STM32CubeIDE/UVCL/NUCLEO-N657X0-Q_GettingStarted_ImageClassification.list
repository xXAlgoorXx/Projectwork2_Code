
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd1c  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  34010480  34010480  00010480  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001eb4  340104a0  340104a0  000104a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  34012354  34012354  00012580  2**0
                  CONTENTS
  5 .ARM          00000008  34012354  34012354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  3401235c  34012580  00012580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  3401235c  3401235c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  34012360  34012360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000021c  34012364  34012364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000a00  34012580  34012580  00012580  2**2
                  ALLOC
 11 ._user_heap_stack 00004200  34012f80  34012f80  00012580  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  00012580  2**0
                  CONTENTS, READONLY
 13 .debug_info   00067027  00000000  00000000  000125ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009dc4  00000000  00000000  000795e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00021730  00000000  00000000  000833a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002980  00000000  00000000  000a4ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003405  00000000  00000000  000a7458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0007f678  00000000  00000000  000aa85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c11d  00000000  00000000  00129ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    003b1cbc  00000000  00000000  00175ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00527cae  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000082f4  00000000  00000000  00527cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000156  00000000  00000000  0052ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	34012580 	.word	0x34012580
3400076c:	00000000 	.word	0x00000000
34000770:	34010454 	.word	0x34010454

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	34012584 	.word	0x34012584
3400078c:	34010454 	.word	0x34010454

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b9b0 	b.w	34000b18 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	4688      	mov	r8, r1
340007d8:	4604      	mov	r4, r0
340007da:	468e      	mov	lr, r1
340007dc:	2b00      	cmp	r3, #0
340007de:	d14a      	bne.n	34000876 <__udivmoddi4+0xa6>
340007e0:	428a      	cmp	r2, r1
340007e2:	4617      	mov	r7, r2
340007e4:	d95f      	bls.n	340008a6 <__udivmoddi4+0xd6>
340007e6:	fab2 f682 	clz	r6, r2
340007ea:	b14e      	cbz	r6, 34000800 <__udivmoddi4+0x30>
340007ec:	f1c6 0320 	rsb	r3, r6, #32
340007f0:	fa01 fe06 	lsl.w	lr, r1, r6
340007f4:	40b7      	lsls	r7, r6
340007f6:	40b4      	lsls	r4, r6
340007f8:	fa20 f303 	lsr.w	r3, r0, r3
340007fc:	ea43 0e0e 	orr.w	lr, r3, lr
34000800:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000804:	fa1f fc87 	uxth.w	ip, r7
34000808:	0c23      	lsrs	r3, r4, #16
3400080a:	fbbe f1f8 	udiv	r1, lr, r8
3400080e:	fb08 ee11 	mls	lr, r8, r1, lr
34000812:	fb01 f20c 	mul.w	r2, r1, ip
34000816:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
3400081a:	429a      	cmp	r2, r3
3400081c:	d907      	bls.n	3400082e <__udivmoddi4+0x5e>
3400081e:	18fb      	adds	r3, r7, r3
34000820:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34000824:	d202      	bcs.n	3400082c <__udivmoddi4+0x5c>
34000826:	429a      	cmp	r2, r3
34000828:	f200 8154 	bhi.w	34000ad4 <__udivmoddi4+0x304>
3400082c:	4601      	mov	r1, r0
3400082e:	1a9b      	subs	r3, r3, r2
34000830:	b2a2      	uxth	r2, r4
34000832:	fbb3 f0f8 	udiv	r0, r3, r8
34000836:	fb08 3310 	mls	r3, r8, r0, r3
3400083a:	fb00 fc0c 	mul.w	ip, r0, ip
3400083e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34000842:	4594      	cmp	ip, r2
34000844:	d90b      	bls.n	3400085e <__udivmoddi4+0x8e>
34000846:	18ba      	adds	r2, r7, r2
34000848:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
3400084c:	bf2c      	ite	cs
3400084e:	2401      	movcs	r4, #1
34000850:	2400      	movcc	r4, #0
34000852:	4594      	cmp	ip, r2
34000854:	d902      	bls.n	3400085c <__udivmoddi4+0x8c>
34000856:	2c00      	cmp	r4, #0
34000858:	f000 813f 	beq.w	34000ada <__udivmoddi4+0x30a>
3400085c:	4618      	mov	r0, r3
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	eba2 020c 	sub.w	r2, r2, ip
34000866:	2100      	movs	r1, #0
34000868:	b11d      	cbz	r5, 34000872 <__udivmoddi4+0xa2>
3400086a:	40f2      	lsrs	r2, r6
3400086c:	2300      	movs	r3, #0
3400086e:	e9c5 2300 	strd	r2, r3, [r5]
34000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000876:	428b      	cmp	r3, r1
34000878:	d905      	bls.n	34000886 <__udivmoddi4+0xb6>
3400087a:	b10d      	cbz	r5, 34000880 <__udivmoddi4+0xb0>
3400087c:	e9c5 0100 	strd	r0, r1, [r5]
34000880:	2100      	movs	r1, #0
34000882:	4608      	mov	r0, r1
34000884:	e7f5      	b.n	34000872 <__udivmoddi4+0xa2>
34000886:	fab3 f183 	clz	r1, r3
3400088a:	2900      	cmp	r1, #0
3400088c:	d14e      	bne.n	3400092c <__udivmoddi4+0x15c>
3400088e:	4543      	cmp	r3, r8
34000890:	f0c0 8112 	bcc.w	34000ab8 <__udivmoddi4+0x2e8>
34000894:	4282      	cmp	r2, r0
34000896:	f240 810f 	bls.w	34000ab8 <__udivmoddi4+0x2e8>
3400089a:	4608      	mov	r0, r1
3400089c:	2d00      	cmp	r5, #0
3400089e:	d0e8      	beq.n	34000872 <__udivmoddi4+0xa2>
340008a0:	e9c5 4e00 	strd	r4, lr, [r5]
340008a4:	e7e5      	b.n	34000872 <__udivmoddi4+0xa2>
340008a6:	2a00      	cmp	r2, #0
340008a8:	f000 80ac 	beq.w	34000a04 <__udivmoddi4+0x234>
340008ac:	fab2 f682 	clz	r6, r2
340008b0:	2e00      	cmp	r6, #0
340008b2:	f040 80bb 	bne.w	34000a2c <__udivmoddi4+0x25c>
340008b6:	1a8b      	subs	r3, r1, r2
340008b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
340008bc:	b2bc      	uxth	r4, r7
340008be:	2101      	movs	r1, #1
340008c0:	0c02      	lsrs	r2, r0, #16
340008c2:	b280      	uxth	r0, r0
340008c4:	fbb3 fcfe 	udiv	ip, r3, lr
340008c8:	fb0e 331c 	mls	r3, lr, ip, r3
340008cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
340008d0:	fb04 f20c 	mul.w	r2, r4, ip
340008d4:	429a      	cmp	r2, r3
340008d6:	d90e      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d8:	18fb      	adds	r3, r7, r3
340008da:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	429a      	cmp	r2, r3
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80ec 	beq.w	34000acc <__udivmoddi4+0x2fc>
340008f4:	46c4      	mov	ip, r8
340008f6:	1a9b      	subs	r3, r3, r2
340008f8:	fbb3 f8fe 	udiv	r8, r3, lr
340008fc:	fb0e 3318 	mls	r3, lr, r8, r3
34000900:	fb04 f408 	mul.w	r4, r4, r8
34000904:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34000908:	4294      	cmp	r4, r2
3400090a:	d90b      	bls.n	34000924 <__udivmoddi4+0x154>
3400090c:	18ba      	adds	r2, r7, r2
3400090e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34000912:	bf2c      	ite	cs
34000914:	2001      	movcs	r0, #1
34000916:	2000      	movcc	r0, #0
34000918:	4294      	cmp	r4, r2
3400091a:	d902      	bls.n	34000922 <__udivmoddi4+0x152>
3400091c:	2800      	cmp	r0, #0
3400091e:	f000 80d1 	beq.w	34000ac4 <__udivmoddi4+0x2f4>
34000922:	4698      	mov	r8, r3
34000924:	1b12      	subs	r2, r2, r4
34000926:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa08 f401 	lsl.w	r4, r8, r1
34000936:	fa00 f901 	lsl.w	r9, r0, r1
3400093a:	fa22 f706 	lsr.w	r7, r2, r6
3400093e:	fa28 f806 	lsr.w	r8, r8, r6
34000942:	408a      	lsls	r2, r1
34000944:	431f      	orrs	r7, r3
34000946:	fa20 f306 	lsr.w	r3, r0, r6
3400094a:	0c38      	lsrs	r0, r7, #16
3400094c:	4323      	orrs	r3, r4
3400094e:	fa1f fc87 	uxth.w	ip, r7
34000952:	0c1c      	lsrs	r4, r3, #16
34000954:	fbb8 fef0 	udiv	lr, r8, r0
34000958:	fb00 881e 	mls	r8, r0, lr, r8
3400095c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34000960:	fb0e f80c 	mul.w	r8, lr, ip
34000964:	45a0      	cmp	r8, r4
34000966:	d90e      	bls.n	34000986 <__udivmoddi4+0x1b6>
34000968:	193c      	adds	r4, r7, r4
3400096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3400096e:	bf2c      	ite	cs
34000970:	f04f 0b01 	movcs.w	fp, #1
34000974:	f04f 0b00 	movcc.w	fp, #0
34000978:	45a0      	cmp	r8, r4
3400097a:	d903      	bls.n	34000984 <__udivmoddi4+0x1b4>
3400097c:	f1bb 0f00 	cmp.w	fp, #0
34000980:	f000 80b8 	beq.w	34000af4 <__udivmoddi4+0x324>
34000984:	46d6      	mov	lr, sl
34000986:	eba4 0408 	sub.w	r4, r4, r8
3400098a:	fa1f f883 	uxth.w	r8, r3
3400098e:	fbb4 f3f0 	udiv	r3, r4, r0
34000992:	fb00 4413 	mls	r4, r0, r3, r4
34000996:	fb03 fc0c 	mul.w	ip, r3, ip
3400099a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3400099e:	45a4      	cmp	ip, r4
340009a0:	d90e      	bls.n	340009c0 <__udivmoddi4+0x1f0>
340009a2:	193c      	adds	r4, r7, r4
340009a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
340009a8:	bf2c      	ite	cs
340009aa:	f04f 0801 	movcs.w	r8, #1
340009ae:	f04f 0800 	movcc.w	r8, #0
340009b2:	45a4      	cmp	ip, r4
340009b4:	d903      	bls.n	340009be <__udivmoddi4+0x1ee>
340009b6:	f1b8 0f00 	cmp.w	r8, #0
340009ba:	f000 809f 	beq.w	34000afc <__udivmoddi4+0x32c>
340009be:	4603      	mov	r3, r0
340009c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
340009c4:	eba4 040c 	sub.w	r4, r4, ip
340009c8:	fba0 ec02 	umull	lr, ip, r0, r2
340009cc:	4564      	cmp	r4, ip
340009ce:	4673      	mov	r3, lr
340009d0:	46e0      	mov	r8, ip
340009d2:	d302      	bcc.n	340009da <__udivmoddi4+0x20a>
340009d4:	d107      	bne.n	340009e6 <__udivmoddi4+0x216>
340009d6:	45f1      	cmp	r9, lr
340009d8:	d205      	bcs.n	340009e6 <__udivmoddi4+0x216>
340009da:	ebbe 0302 	subs.w	r3, lr, r2
340009de:	eb6c 0c07 	sbc.w	ip, ip, r7
340009e2:	3801      	subs	r0, #1
340009e4:	46e0      	mov	r8, ip
340009e6:	b15d      	cbz	r5, 34000a00 <__udivmoddi4+0x230>
340009e8:	ebb9 0203 	subs.w	r2, r9, r3
340009ec:	eb64 0408 	sbc.w	r4, r4, r8
340009f0:	fa04 f606 	lsl.w	r6, r4, r6
340009f4:	fa22 f301 	lsr.w	r3, r2, r1
340009f8:	40cc      	lsrs	r4, r1
340009fa:	431e      	orrs	r6, r3
340009fc:	e9c5 6400 	strd	r6, r4, [r5]
34000a00:	2100      	movs	r1, #0
34000a02:	e736      	b.n	34000872 <__udivmoddi4+0xa2>
34000a04:	fbb1 fcf2 	udiv	ip, r1, r2
34000a08:	0c01      	lsrs	r1, r0, #16
34000a0a:	4614      	mov	r4, r2
34000a0c:	b280      	uxth	r0, r0
34000a0e:	4696      	mov	lr, r2
34000a10:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a14:	2620      	movs	r6, #32
34000a16:	4690      	mov	r8, r2
34000a18:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34000a1c:	4610      	mov	r0, r2
34000a1e:	fbb1 f1f2 	udiv	r1, r1, r2
34000a22:	eba3 0308 	sub.w	r3, r3, r8
34000a26:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34000a2a:	e74b      	b.n	340008c4 <__udivmoddi4+0xf4>
34000a2c:	40b7      	lsls	r7, r6
34000a2e:	f1c6 0320 	rsb	r3, r6, #32
34000a32:	fa01 f206 	lsl.w	r2, r1, r6
34000a36:	fa21 f803 	lsr.w	r8, r1, r3
34000a3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34000a3e:	fa20 f303 	lsr.w	r3, r0, r3
34000a42:	b2bc      	uxth	r4, r7
34000a44:	40b0      	lsls	r0, r6
34000a46:	4313      	orrs	r3, r2
34000a48:	0c02      	lsrs	r2, r0, #16
34000a4a:	0c19      	lsrs	r1, r3, #16
34000a4c:	b280      	uxth	r0, r0
34000a4e:	fbb8 f9fe 	udiv	r9, r8, lr
34000a52:	fb0e 8819 	mls	r8, lr, r9, r8
34000a56:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a5a:	fb09 f804 	mul.w	r8, r9, r4
34000a5e:	4588      	cmp	r8, r1
34000a60:	d951      	bls.n	34000b06 <__udivmoddi4+0x336>
34000a62:	1879      	adds	r1, r7, r1
34000a64:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34000a68:	bf2c      	ite	cs
34000a6a:	f04f 0a01 	movcs.w	sl, #1
34000a6e:	f04f 0a00 	movcc.w	sl, #0
34000a72:	4588      	cmp	r8, r1
34000a74:	d902      	bls.n	34000a7c <__udivmoddi4+0x2ac>
34000a76:	f1ba 0f00 	cmp.w	sl, #0
34000a7a:	d031      	beq.n	34000ae0 <__udivmoddi4+0x310>
34000a7c:	eba1 0108 	sub.w	r1, r1, r8
34000a80:	fbb1 f9fe 	udiv	r9, r1, lr
34000a84:	fb09 f804 	mul.w	r8, r9, r4
34000a88:	fb0e 1119 	mls	r1, lr, r9, r1
34000a8c:	b29b      	uxth	r3, r3
34000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34000a92:	4543      	cmp	r3, r8
34000a94:	d235      	bcs.n	34000b02 <__udivmoddi4+0x332>
34000a96:	18fb      	adds	r3, r7, r3
34000a98:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34000a9c:	bf2c      	ite	cs
34000a9e:	f04f 0a01 	movcs.w	sl, #1
34000aa2:	f04f 0a00 	movcc.w	sl, #0
34000aa6:	4543      	cmp	r3, r8
34000aa8:	d2bb      	bcs.n	34000a22 <__udivmoddi4+0x252>
34000aaa:	f1ba 0f00 	cmp.w	sl, #0
34000aae:	d1b8      	bne.n	34000a22 <__udivmoddi4+0x252>
34000ab0:	f1a9 0102 	sub.w	r1, r9, #2
34000ab4:	443b      	add	r3, r7
34000ab6:	e7b4      	b.n	34000a22 <__udivmoddi4+0x252>
34000ab8:	1a84      	subs	r4, r0, r2
34000aba:	eb68 0203 	sbc.w	r2, r8, r3
34000abe:	2001      	movs	r0, #1
34000ac0:	4696      	mov	lr, r2
34000ac2:	e6eb      	b.n	3400089c <__udivmoddi4+0xcc>
34000ac4:	443a      	add	r2, r7
34000ac6:	f1a8 0802 	sub.w	r8, r8, #2
34000aca:	e72b      	b.n	34000924 <__udivmoddi4+0x154>
34000acc:	f1ac 0c02 	sub.w	ip, ip, #2
34000ad0:	443b      	add	r3, r7
34000ad2:	e710      	b.n	340008f6 <__udivmoddi4+0x126>
34000ad4:	3902      	subs	r1, #2
34000ad6:	443b      	add	r3, r7
34000ad8:	e6a9      	b.n	3400082e <__udivmoddi4+0x5e>
34000ada:	443a      	add	r2, r7
34000adc:	3802      	subs	r0, #2
34000ade:	e6be      	b.n	3400085e <__udivmoddi4+0x8e>
34000ae0:	eba7 0808 	sub.w	r8, r7, r8
34000ae4:	f1a9 0c02 	sub.w	ip, r9, #2
34000ae8:	4441      	add	r1, r8
34000aea:	fbb1 f9fe 	udiv	r9, r1, lr
34000aee:	fb09 f804 	mul.w	r8, r9, r4
34000af2:	e7c9      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000af4:	f1ae 0e02 	sub.w	lr, lr, #2
34000af8:	443c      	add	r4, r7
34000afa:	e744      	b.n	34000986 <__udivmoddi4+0x1b6>
34000afc:	3b02      	subs	r3, #2
34000afe:	443c      	add	r4, r7
34000b00:	e75e      	b.n	340009c0 <__udivmoddi4+0x1f0>
34000b02:	4649      	mov	r1, r9
34000b04:	e78d      	b.n	34000a22 <__udivmoddi4+0x252>
34000b06:	eba1 0108 	sub.w	r1, r1, r8
34000b0a:	46cc      	mov	ip, r9
34000b0c:	fbb1 f9fe 	udiv	r9, r1, lr
34000b10:	fb09 f804 	mul.w	r8, r9, r4
34000b14:	e7b8      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000b16:	bf00      	nop

34000b18 <__aeabi_idiv0>:
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop

34000b1c <update_weights_int8>:
    memcpy(NNweights, new_weights, Num_weights * sizeof(float));
    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
    SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(float));
}

void update_weights_int8(int8_t* NNweights, const int8_t *new_weights,size_t Num_weights) {
34000b1c:	b538      	push	{r3, r4, r5, lr}
34000b1e:	4615      	mov	r5, r2
34000b20:	4604      	mov	r4, r0
    memcpy(NNweights, new_weights, Num_weights * sizeof(int8_t));
34000b22:	f00e f87e 	bl	3400ec22 <memcpy>
    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
34000b26:	462a      	mov	r2, r5
34000b28:	4621      	mov	r1, r4
34000b2a:	4811      	ldr	r0, [pc, #68]	@ (34000b70 <update_weights_int8+0x54>)
34000b2c:	f00d fca2 	bl	3400e474 <iprintf>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34000b30:	2d00      	cmp	r5, #0
34000b32:	dd1c      	ble.n	34000b6e <update_weights_int8+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000b34:	f004 031f 	and.w	r3, r4, #31
34000b38:	195a      	adds	r2, r3, r5
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000b3a:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34000b3e:	4620      	mov	r0, r4

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34000b40:	43c3      	mvns	r3, r0
34000b42:	4414      	add	r4, r2
34000b44:	4423      	add	r3, r4
34000b46:	3a20      	subs	r2, #32
34000b48:	095b      	lsrs	r3, r3, #5
34000b4a:	3220      	adds	r2, #32
34000b4c:	f103 0e01 	add.w	lr, r3, #1
34000b50:	bfd8      	it	le
34000b52:	f04f 0e01 	movle.w	lr, #1
34000b56:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000b5a:	4906      	ldr	r1, [pc, #24]	@ (34000b74 <update_weights_int8+0x58>)
34000b5c:	f8c1 0268 	str.w	r0, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000b60:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34000b62:	f00f c805 	le	lr, 34000b5c <update_weights_int8+0x40>
34000b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000b6a:	f3bf 8f6f 	isb	sy
	SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(int8_t));
}
34000b6e:	bd38      	pop	{r3, r4, r5, pc}
34000b70:	340104a0 	.word	0x340104a0
34000b74:	e000ed00 	.word	0xe000ed00

34000b78 <calcAdresses>:

void calcAdresses(size_t insize, size_t outsize,size_t bytesOfType,volatile Matmul_info* infoStruct){
	infoStruct->bytes = bytesOfType;
34000b78:	601a      	str	r2, [r3, #0]
	infoStruct->insize = insize;
34000b7a:	6058      	str	r0, [r3, #4]
	infoStruct->outsize = outsize;
34000b7c:	6099      	str	r1, [r3, #8]

	int inBytes = bytesOfType * insize;
34000b7e:	4350      	muls	r0, r2
	int outBytes = bytesOfType * outsize;
34000b80:	434a      	muls	r2, r1

	infoStruct->weight_start = 0;
34000b82:	2100      	movs	r1, #0
34000b84:	60d9      	str	r1, [r3, #12]
	infoStruct->weight_end   = infoStruct->weight_start + inBytes * outBytes;
34000b86:	68d9      	ldr	r1, [r3, #12]
34000b88:	fb02 1100 	mla	r1, r2, r0, r1
34000b8c:	6119      	str	r1, [r3, #16]
	infoStruct->weight_limit = infoStruct->weight_end + inBytes;
34000b8e:	6919      	ldr	r1, [r3, #16]
34000b90:	4401      	add	r1, r0
34000b92:	6159      	str	r1, [r3, #20]

	infoStruct->input_start = infoStruct->weight_limit ;
34000b94:	6959      	ldr	r1, [r3, #20]
34000b96:	6199      	str	r1, [r3, #24]
	infoStruct->input_end   = infoStruct->input_start + inBytes;
34000b98:	6999      	ldr	r1, [r3, #24]
34000b9a:	4401      	add	r1, r0
34000b9c:	61d9      	str	r1, [r3, #28]
	infoStruct->input_limit = infoStruct->input_end + inBytes;
34000b9e:	69d9      	ldr	r1, [r3, #28]
34000ba0:	4401      	add	r1, r0
34000ba2:	6219      	str	r1, [r3, #32]

	infoStruct->output_start = infoStruct->input_limit;
34000ba4:	6a19      	ldr	r1, [r3, #32]
34000ba6:	6259      	str	r1, [r3, #36]	@ 0x24
	infoStruct->output_end   = infoStruct->output_start + outBytes;
34000ba8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
34000baa:	4411      	add	r1, r2
34000bac:	6299      	str	r1, [r3, #40]	@ 0x28
	infoStruct->output_limit = infoStruct->output_end + outBytes;
34000bae:	6a99      	ldr	r1, [r3, #40]	@ 0x28
34000bb0:	440a      	add	r2, r1
34000bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
34000bb4:	4770      	bx	lr
	...

34000bb8 <npu_matvec_int8_init>:
	extern volatile Matmul_info matmulInfo_int;
	size_t insizeNPU = 0;
	size_t outsizeNPU = 0;

	// Calculate valid insize and outsize. At the moment only 8,16,24 are valid
	if((insize > 24) || (outsize > 24)){
34000bb8:	2818      	cmp	r0, #24
int npu_matvec_int8_init(size_t insize,size_t outsize){
34000bba:	b510      	push	{r4, lr}
	if((insize > 24) || (outsize > 24)){
34000bbc:	d801      	bhi.n	34000bc2 <npu_matvec_int8_init+0xa>
34000bbe:	2918      	cmp	r1, #24
34000bc0:	d905      	bls.n	34000bce <npu_matvec_int8_init+0x16>
		printf("Insize or Outsize too big. Has to be lower or equal to 24");
34000bc2:	4810      	ldr	r0, [pc, #64]	@ (34000c04 <npu_matvec_int8_init+0x4c>)
		return -1;
	}

	if((insize < 1) || (outsize < 1)){
		printf("Insize or Outsize too small. Has to be higher or equal to 1");
34000bc4:	f00d fc56 	bl	3400e474 <iprintf>
		return -1;
34000bc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}

	// Calculate Adresses
	calcAdresses(insizeNPU,outsizeNPU,1,&matmulInfo_int);
	return 0;
}
34000bcc:	bd10      	pop	{r4, pc}
	if((insize < 1) || (outsize < 1)){
34000bce:	b100      	cbz	r0, 34000bd2 <npu_matvec_int8_init+0x1a>
34000bd0:	b909      	cbnz	r1, 34000bd6 <npu_matvec_int8_init+0x1e>
		printf("Insize or Outsize too small. Has to be higher or equal to 1");
34000bd2:	480d      	ldr	r0, [pc, #52]	@ (34000c08 <npu_matvec_int8_init+0x50>)
34000bd4:	e7f6      	b.n	34000bc4 <npu_matvec_int8_init+0xc>
		insizeNPU = ((insize/8) + 1) * 8;
34000bd6:	f020 0307 	bic.w	r3, r0, #7
34000bda:	f010 0f07 	tst.w	r0, #7
		outsizeNPU = ((outsize/8) + 1) * 8;
34000bde:	f021 0407 	bic.w	r4, r1, #7
		insizeNPU = ((insize/8) + 1) * 8;
34000be2:	f103 0308 	add.w	r3, r3, #8
34000be6:	bf18      	it	ne
34000be8:	4618      	movne	r0, r3
		outsizeNPU = ((outsize/8) + 1) * 8;
34000bea:	3408      	adds	r4, #8
34000bec:	f011 0f07 	tst.w	r1, #7
	calcAdresses(insizeNPU,outsizeNPU,1,&matmulInfo_int);
34000bf0:	f04f 0201 	mov.w	r2, #1
34000bf4:	bf18      	it	ne
34000bf6:	4621      	movne	r1, r4
34000bf8:	4b04      	ldr	r3, [pc, #16]	@ (34000c0c <npu_matvec_int8_init+0x54>)
34000bfa:	f7ff ffbd 	bl	34000b78 <calcAdresses>
	return 0;
34000bfe:	2000      	movs	r0, #0
34000c00:	e7e4      	b.n	34000bcc <npu_matvec_int8_init+0x14>
34000c02:	bf00      	nop
34000c04:	340104c2 	.word	0x340104c2
34000c08:	340104fc 	.word	0x340104fc
34000c0c:	3401259c 	.word	0x3401259c

34000c10 <npu_matvec_int8_run>:

int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34000c12:	460c      	mov	r4, r1
	//LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(int8);
	extern volatile Matmul_info matmulInfo_int;

	// Prepare input buffer: 0x34200000UL is the base address
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000c14:	4f1d      	ldr	r7, [pc, #116]	@ (34000c8c <npu_matvec_int8_run+0x7c>)
int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000c16:	461d      	mov	r5, r3
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000c18:	69bb      	ldr	r3, [r7, #24]
34000c1a:	4601      	mov	r1, r0
34000c1c:	f103 5050 	add.w	r0, r3, #872415232	@ 0x34000000
int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000c20:	4616      	mov	r6, r2
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000c22:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
34000c26:	687a      	ldr	r2, [r7, #4]
34000c28:	f00d fffb 	bl	3400ec22 <memcpy>
    if ( dsize > 0 ) {
34000c2c:	2c00      	cmp	r4, #0
	SCB_CleanDCache_by_Addr((void*)(0x34200000UL + matmulInfo_int.input_start), insizeVec);
34000c2e:	69bb      	ldr	r3, [r7, #24]
34000c30:	dd20      	ble.n	34000c74 <npu_matvec_int8_run+0x64>
34000c32:	f103 5250 	add.w	r2, r3, #872415232	@ 0x34000000
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000c36:	f003 001f 	and.w	r0, r3, #31
34000c3a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
34000c3e:	4420      	add	r0, r4
  __ASM volatile ("dsb 0xF":::"memory");
34000c40:	f3bf 8f4f 	dsb	sy
34000c44:	f003 031f 	and.w	r3, r3, #31
34000c48:	4423      	add	r3, r4
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000c4a:	3801      	subs	r0, #1
34000c4c:	3b20      	subs	r3, #32
34000c4e:	0940      	lsrs	r0, r0, #5
34000c50:	3320      	adds	r3, #32
34000c52:	f100 0e01 	add.w	lr, r0, #1
34000c56:	bfd8      	it	le
34000c58:	f04f 0e01 	movle.w	lr, #1
34000c5c:	f04e e001 	dls	lr, lr
34000c60:	490b      	ldr	r1, [pc, #44]	@ (34000c90 <npu_matvec_int8_run+0x80>)
34000c62:	f8c1 2268 	str.w	r2, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000c66:	3220      	adds	r2, #32
      } while ( op_size > 0 );
34000c68:	f00f c805 	le	lr, 34000c62 <npu_matvec_int8_run+0x52>
34000c6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000c70:	f3bf 8f6f 	isb	sy

	// Prepare Matrix
	update_weights_int8((int8_t*)(0x34200000UL), inMat, insizeVec * outSize);
34000c74:	4629      	mov	r1, r5
34000c76:	fb06 f204 	mul.w	r2, r6, r4
34000c7a:	4806      	ldr	r0, [pc, #24]	@ (34000c94 <npu_matvec_int8_run+0x84>)
34000c7c:	f7ff ff4e 	bl	34000b1c <update_weights_int8>

	LL_ATON_RT_Main(&NN_Instance_int8);
34000c80:	4805      	ldr	r0, [pc, #20]	@ (34000c98 <npu_matvec_int8_run+0x88>)
34000c82:	f00c f8a5 	bl	3400cdd0 <LL_ATON_RT_Main>

	return (int8_t*)(matmulInfo_int.output_start);
34000c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
}
34000c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34000c8a:	bf00      	nop
34000c8c:	3401259c 	.word	0x3401259c
34000c90:	e000ed00 	.word	0xe000ed00
34000c94:	34200000 	.word	0x34200000
34000c98:	34012364 	.word	0x34012364

34000c9c <getIdentityWeights_int8>:
	LL_ATON_RT_Main(&NN_Instance_int8);

	return (float*)(matmulInfo_Float.output_start);
}

int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000c9e:	fb01 f700 	mul.w	r7, r1, r0
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000ca2:	4606      	mov	r6, r0
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000ca4:	4638      	mov	r0, r7
int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000ca6:	460d      	mov	r5, r1
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000ca8:	f00c fd62 	bl	3400d770 <malloc>
    if (identity == NULL) {
34000cac:	4604      	mov	r4, r0
34000cae:	b1c8      	cbz	r0, 34000ce4 <getIdentityWeights_int8+0x48>
        return NULL;
    }

    // Initialize the entire matrix to 0
    memset(identity, 0, insize * outsize * sizeof(int8_t));
34000cb0:	463a      	mov	r2, r7
34000cb2:	2100      	movs	r1, #0
34000cb4:	f00d fd26 	bl	3400e704 <memset>

    // Set 1 on the diagonal
    for (size_t i = 0; i < insize; i++) {
34000cb8:	2300      	movs	r3, #0
34000cba:	461a      	mov	r2, r3
34000cbc:	42b2      	cmp	r2, r6
34000cbe:	d011      	beq.n	34000ce4 <getIdentityWeights_int8+0x48>
        for (size_t j = 0; j < outsize; j++) {
34000cc0:	2000      	movs	r0, #0
34000cc2:	18e7      	adds	r7, r4, r3
34000cc4:	1c69      	adds	r1, r5, #1
34000cc6:	e008      	b.n	34000cda <getIdentityWeights_int8+0x3e>
            if (i == j) {
34000cc8:	4282      	cmp	r2, r0
34000cca:	bf14      	ite	ne
34000ccc:	f04f 0c00 	movne.w	ip, #0
34000cd0:	f04f 0c01 	moveq.w	ip, #1
        for (size_t j = 0; j < outsize; j++) {
34000cd4:	3001      	adds	r0, #1
            if (i == j) {
34000cd6:	f807 cb01 	strb.w	ip, [r7], #1
        for (size_t j = 0; j < outsize; j++) {
34000cda:	3901      	subs	r1, #1
34000cdc:	d1f4      	bne.n	34000cc8 <getIdentityWeights_int8+0x2c>
    for (size_t i = 0; i < insize; i++) {
34000cde:	3201      	adds	r2, #1
34000ce0:	442b      	add	r3, r5
34000ce2:	e7eb      	b.n	34000cbc <getIdentityWeights_int8+0x20>
//	    printf("\n\r");
//	}
//

    return identity;
}
34000ce4:	4620      	mov	r0, r4
34000ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

34000ce8 <LL_ATON_End_EpochBlock_int8>:
  };
  LL_ATON_EnableUnits_Init(enable_units, 4);
}

static void LL_ATON_End_EpochBlock_int8(const void *epoch_block)
{
34000ce8:	b508      	push	{r3, lr}

    { LL_Switch_Init_Dest() = ATONN_DSTPORT(STRSWITCH, 0, STRENG, 3, 0),
      LL_Switch_Init_Source(0) = ATONN_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0),
      LL_Switch_Init_Context(0) = 1, LL_Switch_Init_Frames(0) = 0 },
  };
  LL_Switch_Deinit(switch_deinit, 3);
34000cea:	2103      	movs	r1, #3
34000cec:	4804      	ldr	r0, [pc, #16]	@ (34000d00 <LL_ATON_End_EpochBlock_int8+0x18>)
34000cee:	f00b fcdb 	bl	3400c6a8 <LL_Switch_Deinit>
    { {CONVACC, 0} },
    { {STRENG, 1} },
    { {STRENG, 9} },
  };
  LL_ATON_DisableUnits_Init(disable_units, 4);
}
34000cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DisableUnits_Init(disable_units, 4);
34000cf6:	2104      	movs	r1, #4
34000cf8:	4802      	ldr	r0, [pc, #8]	@ (34000d04 <LL_ATON_End_EpochBlock_int8+0x1c>)
34000cfa:	f00b bfd1 	b.w	3400cca0 <LL_ATON_DisableUnits_Init>
34000cfe:	bf00      	nop
34000d00:	34011f48 	.word	0x34011f48
34000d04:	34011f38 	.word	0x34011f38

34000d08 <LL_ATON_Start_EpochBlock_int8>:
{
34000d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d0c:	2640      	movs	r6, #64	@ 0x40
{
34000d0e:	b0b1      	sub	sp, #196	@ 0xc4
  LL_Convacc_Init(0, &conv_init);
34000d10:	4937      	ldr	r1, [pc, #220]	@ (34000df0 <LL_ATON_Start_EpochBlock_int8+0xe8>)
34000d12:	2000      	movs	r0, #0
34000d14:	f00b fe3a 	bl	3400c98c <LL_Convacc_Init>
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d18:	4632      	mov	r2, r6
34000d1a:	2100      	movs	r1, #0
34000d1c:	4668      	mov	r0, sp
34000d1e:	f00d fcf1 	bl	3400e704 <memset>
34000d22:	2302      	movs	r3, #2
34000d24:	2501      	movs	r5, #1
34000d26:	f640 0708 	movw	r7, #2056	@ 0x808
34000d2a:	f04f 0910 	mov.w	r9, #16
    .offset_start = matmulInfo_int.input_start,
34000d2e:	4c31      	ldr	r4, [pc, #196]	@ (34000df4 <LL_ATON_Start_EpochBlock_int8+0xec>)
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d30:	f88d 3000 	strb.w	r3, [sp]
    .offset_start = matmulInfo_int.input_start,
34000d34:	69a3      	ldr	r3, [r4, #24]
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d36:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 34000e00 <LL_ATON_Start_EpochBlock_int8+0xf8>
34000d3a:	9302      	str	r3, [sp, #8]
    .offset_end = matmulInfo_int.input_end,
34000d3c:	69e3      	ldr	r3, [r4, #28]
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000d3e:	462a      	mov	r2, r5
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d40:	9303      	str	r3, [sp, #12]
    .offset_limit = matmulInfo_int.input_limit,
34000d42:	6a23      	ldr	r3, [r4, #32]
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000d44:	4669      	mov	r1, sp
34000d46:	4628      	mov	r0, r5
  LL_Streng_TensorInitTypeDef input_tensor = {
34000d48:	9304      	str	r3, [sp, #16]
34000d4a:	f8cd 8004 	str.w	r8, [sp, #4]
34000d4e:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
34000d52:	950e      	str	r5, [sp, #56]	@ 0x38
34000d54:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000d58:	f00b fccc 	bl	3400c6f4 <LL_Streng_TensorInit>
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000d5c:	4632      	mov	r2, r6
34000d5e:	eb0d 0006 	add.w	r0, sp, r6
34000d62:	2100      	movs	r1, #0
34000d64:	f00d fcce 	bl	3400e704 <memset>
34000d68:	230a      	movs	r3, #10
34000d6a:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
    .offset_start = matmulInfo_int.weight_start,
34000d6e:	68e3      	ldr	r3, [r4, #12]
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000d70:	eb0d 0106 	add.w	r1, sp, r6
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000d74:	9312      	str	r3, [sp, #72]	@ 0x48
    .offset_end = matmulInfo_int.weight_end,
34000d76:	6923      	ldr	r3, [r4, #16]
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000d78:	462a      	mov	r2, r5
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000d7a:	9313      	str	r3, [sp, #76]	@ 0x4c
    .offset_limit = matmulInfo_int.weight_limit,
34000d7c:	6963      	ldr	r3, [r4, #20]
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000d7e:	2009      	movs	r0, #9
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000d80:	9314      	str	r3, [sp, #80]	@ 0x50
34000d82:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
34000d86:	951e      	str	r5, [sp, #120]	@ 0x78
34000d88:	f8ad 707c 	strh.w	r7, [sp, #124]	@ 0x7c
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34000d8c:	f00b fcb2 	bl	3400c6f4 <LL_Streng_TensorInit>
  LL_Streng_TensorInitTypeDef output_tensor = {
34000d90:	4632      	mov	r2, r6
34000d92:	2603      	movs	r6, #3
34000d94:	2100      	movs	r1, #0
34000d96:	a820      	add	r0, sp, #128	@ 0x80
34000d98:	f00d fcb4 	bl	3400e704 <memset>
    .offset_start = matmulInfo_int.output_start,
34000d9c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000d9e:	462a      	mov	r2, r5
  LL_Streng_TensorInitTypeDef output_tensor = {
34000da0:	9322      	str	r3, [sp, #136]	@ 0x88
    .offset_end = matmulInfo_int.output_end,
34000da2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000da4:	a920      	add	r1, sp, #128	@ 0x80
  LL_Streng_TensorInitTypeDef output_tensor = {
34000da6:	9323      	str	r3, [sp, #140]	@ 0x8c
    .offset_limit = matmulInfo_int.output_limit,
34000da8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000daa:	4630      	mov	r0, r6
  LL_Streng_TensorInitTypeDef output_tensor = {
34000dac:	9324      	str	r3, [sp, #144]	@ 0x90
34000dae:	f88d 6080 	strb.w	r6, [sp, #128]	@ 0x80
34000db2:	f8cd 8084 	str.w	r8, [sp, #132]	@ 0x84
34000db6:	f8cd 90a8 	str.w	r9, [sp, #168]	@ 0xa8
34000dba:	952e      	str	r5, [sp, #184]	@ 0xb8
34000dbc:	f8ad 70bc 	strh.w	r7, [sp, #188]	@ 0xbc
  LL_Streng_TensorInit(3, &output_tensor, 1);
34000dc0:	f00b fc98 	bl	3400c6f4 <LL_Streng_TensorInit>
  LL_Switch_Init(switch_init, 3);
34000dc4:	4631      	mov	r1, r6
34000dc6:	480c      	ldr	r0, [pc, #48]	@ (34000df8 <LL_ATON_Start_EpochBlock_int8+0xf0>)
34000dc8:	f00b fc5e 	bl	3400c688 <LL_Switch_Init>
  LL_ATON_Cache_MCU_Invalidate_Range((uintptr_t)(0x34200000UL + matmulInfo_int.input_start), matmulInfo_int.output_end - matmulInfo_int.input_start); /// Very Important!!
34000dcc:	69a0      	ldr	r0, [r4, #24]
34000dce:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
34000dd0:	69a3      	ldr	r3, [r4, #24]
34000dd2:	f100 5050 	add.w	r0, r0, #872415232	@ 0x34000000
34000dd6:	1ac9      	subs	r1, r1, r3
34000dd8:	f500 1000 	add.w	r0, r0, #2097152	@ 0x200000
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
34000ddc:	4401      	add	r1, r0
34000dde:	f000 fac9 	bl	34001374 <mcu_cache_invalidate_range>
  LL_ATON_EnableUnits_Init(enable_units, 4);
34000de2:	2104      	movs	r1, #4
34000de4:	4805      	ldr	r0, [pc, #20]	@ (34000dfc <LL_ATON_Start_EpochBlock_int8+0xf4>)
34000de6:	f00b fbdd 	bl	3400c5a4 <LL_ATON_EnableUnits_Init>
}
34000dea:	b031      	add	sp, #196	@ 0xc4
34000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
34000df0:	34011efc 	.word	0x34011efc
34000df4:	3401259c 	.word	0x3401259c
34000df8:	34011ecc 	.word	0x34011ecc
34000dfc:	34011ebc 	.word	0x34011ebc
34000e00:	34200000 	.word	0x34200000

34000e04 <LL_ATON_Set_User_Input_Buffer_int8>:
}
34000e04:	2003      	movs	r0, #3
34000e06:	4770      	bx	lr

34000e08 <LL_ATON_Get_User_Input_Buffer_int8>:
}
34000e08:	2000      	movs	r0, #0
34000e0a:	4770      	bx	lr

34000e0c <LL_ATON_Set_User_Output_Buffer_int8>:
LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_int8(uint32_t num, void* buffer, uint32_t size)
34000e0c:	2003      	movs	r0, #3
34000e0e:	4770      	bx	lr

34000e10 <LL_ATON_Get_User_Output_Buffer_int8>:
void *LL_ATON_Get_User_Output_Buffer_int8(uint32_t num)
34000e10:	2000      	movs	r0, #0
34000e12:	4770      	bx	lr

34000e14 <LL_ATON_EC_Network_Init_int8>:
}
34000e14:	2001      	movs	r0, #1
34000e16:	4770      	bx	lr

34000e18 <LL_ATON_EC_Inference_Init_int8>:
bool LL_ATON_EC_Inference_Init_int8(void)
34000e18:	2001      	movs	r0, #1
34000e1a:	4770      	bx	lr

34000e1c <LL_ATON_EpochBlockItems_int8>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
34000e1c:	4800      	ldr	r0, [pc, #0]	@ (34000e20 <LL_ATON_EpochBlockItems_int8+0x4>)
34000e1e:	4770      	bx	lr
34000e20:	34011f78 	.word	0x34011f78

34000e24 <LL_ATON_Input_Buffers_Info_int8>:
#endif // LL_ATON_DBG_BUFFER_INFO_EXCLUDED == 0
  LL_Buffer_InfoTypeDef buff_info[] = {
    {
      .name = "Input_0_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
34000e24:	4b02      	ldr	r3, [pc, #8]	@ (34000e30 <LL_ATON_Input_Buffers_Info_int8+0xc>)
      .name = NULL,
    }
  };

  return buff_info;
}
34000e26:	2000      	movs	r0, #0
      .offset_start = matmulInfo_int.input_start,
34000e28:	699a      	ldr	r2, [r3, #24]
      .offset_end = matmulInfo_int.input_end,
34000e2a:	69da      	ldr	r2, [r3, #28]
      .offset_limit = matmulInfo_int.input_limit,
34000e2c:	6a1b      	ldr	r3, [r3, #32]
}
34000e2e:	4770      	bx	lr
34000e30:	3401259c 	.word	0x3401259c

34000e34 <LL_ATON_Output_Buffers_Info_int8>:
  static const int16_t buff_info_Quantize_3_out_0_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
    {
      .name = "Quantize_3_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.output_start,
34000e34:	4b02      	ldr	r3, [pc, #8]	@ (34000e40 <LL_ATON_Output_Buffers_Info_int8+0xc>)
      .name = NULL,
    }
  };

  return buff_info;
}
34000e36:	2000      	movs	r0, #0
      .offset_start = matmulInfo_int.output_start,
34000e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      .offset_end = matmulInfo_int.output_end,
34000e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      .offset_limit = matmulInfo_int.output_limit,
34000e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
34000e3e:	4770      	bx	lr
34000e40:	3401259c 	.word	0x3401259c

34000e44 <LL_ATON_Internal_Buffers_Info_int8>:
  static const int16_t buff_info_Gemm_2_conv_4_off_bias_out_13_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
    {
      .name = "Gemm_2_reshape_x_2",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
34000e44:	4b04      	ldr	r3, [pc, #16]	@ (34000e58 <LL_ATON_Internal_Buffers_Info_int8+0x14>)
      .name = NULL,
    }
  };

  return buff_info;
}
34000e46:	2000      	movs	r0, #0
      .offset_start = matmulInfo_int.input_start,
34000e48:	699a      	ldr	r2, [r3, #24]
      .offset_end = matmulInfo_int.input_end,
34000e4a:	69da      	ldr	r2, [r3, #28]
      .offset_limit = matmulInfo_int.input_limit,
34000e4c:	6a1a      	ldr	r2, [r3, #32]
      .offset_start = matmulInfo_int.output_start,
34000e4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      .offset_end = matmulInfo_int.output_end,
34000e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      .offset_limit = matmulInfo_int.output_limit,
34000e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
34000e54:	4770      	bx	lr
34000e56:	bf00      	nop
34000e58:	3401259c 	.word	0x3401259c

34000e5c <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34000e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
34000e5e:	4b15      	ldr	r3, [pc, #84]	@ (34000eb4 <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000e60:	217c      	movs	r1, #124	@ 0x7c
34000e62:	aa01      	add	r2, sp, #4
34000e64:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
34000e66:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000e68:	f001 fb02 	bl	34002470 <HAL_BSEC_OTP_Read>
34000e6c:	4603      	mov	r3, r0
34000e6e:	b9e0      	cbnz	r0, 34000eaa <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
34000e70:	9a01      	ldr	r2, [sp, #4]
34000e72:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
34000e76:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
34000e7a:	d017      	beq.n	34000eac <Fuse_Programming+0x50>
    {
      data |= bit_mask;
34000e7c:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000e80:	217c      	movs	r1, #124	@ 0x7c
34000e82:	a802      	add	r0, sp, #8
      data |= bit_mask;
34000e84:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000e86:	f001 fb0f 	bl	340024a8 <HAL_BSEC_OTP_Program>
34000e8a:	b968      	cbnz	r0, 34000ea8 <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000e8c:	217c      	movs	r1, #124	@ 0x7c
34000e8e:	aa01      	add	r2, sp, #4
34000e90:	a802      	add	r0, sp, #8
34000e92:	f001 faed 	bl	34002470 <HAL_BSEC_OTP_Read>
34000e96:	b930      	cbnz	r0, 34000ea6 <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
34000e98:	9b01      	ldr	r3, [sp, #4]
34000e9a:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
34000e9e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
34000ea2:	d003      	beq.n	34000eac <Fuse_Programming+0x50>
34000ea4:	e7fe      	b.n	34000ea4 <Fuse_Programming+0x48>
34000ea6:	e7fe      	b.n	34000ea6 <Fuse_Programming+0x4a>
34000ea8:	e7fe      	b.n	34000ea8 <Fuse_Programming+0x4c>
34000eaa:	e7fe      	b.n	34000eaa <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
34000eac:	b005      	add	sp, #20
34000eae:	f85d fb04 	ldr.w	pc, [sp], #4
34000eb2:	bf00      	nop
34000eb4:	56009000 	.word	0x56009000

34000eb8 <LL_MEM_EnableClock>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34000eb8:	4b04      	ldr	r3, [pc, #16]	@ (34000ecc <LL_MEM_EnableClock+0x14>)
{
34000eba:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
34000ebc:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34000ec0:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34000ec4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000ec6:	9b01      	ldr	r3, [sp, #4]
}
34000ec8:	b002      	add	sp, #8
34000eca:	4770      	bx	lr
34000ecc:	56028000 	.word	0x56028000

34000ed0 <LL_MEM_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000ed0:	4b04      	ldr	r3, [pc, #16]	@ (34000ee4 <LL_MEM_EnableClockLowPower+0x14>)
{
34000ed2:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000ed4:	f8c3 0a8c 	str.w	r0, [r3, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
34000ed8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34000edc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000ede:	9b01      	ldr	r3, [sp, #4]
}
34000ee0:	b002      	add	sp, #8
34000ee2:	4770      	bx	lr
34000ee4:	56028000 	.word	0x56028000

34000ee8 <LL_AHB5_GRP1_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000ee8:	4b04      	ldr	r3, [pc, #16]	@ (34000efc <LL_AHB5_GRP1_EnableClockLowPower+0x14>)
{
34000eea:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000eec:	f8c3 0aa0 	str.w	r0, [r3, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34000ef0:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34000ef4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000ef6:	9b01      	ldr	r3, [sp, #4]
}
34000ef8:	b002      	add	sp, #8
34000efa:	4770      	bx	lr
34000efc:	56028000 	.word	0x56028000

34000f00 <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
34000f00:	b530      	push	{r4, r5, lr}
34000f02:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34000f06:	2240      	movs	r2, #64	@ 0x40
34000f08:	2100      	movs	r1, #0
34000f0a:	4668      	mov	r0, sp
34000f0c:	f00d fbfa 	bl	3400e704 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34000f10:	2298      	movs	r2, #152	@ 0x98
34000f12:	2100      	movs	r1, #0
34000f14:	a810      	add	r0, sp, #64	@ 0x40
34000f16:	f00d fbf5 	bl	3400e704 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34000f1a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
34000f1e:	2100      	movs	r1, #0
34000f20:	a836      	add	r0, sp, #216	@ 0xd8
34000f22:	f00d fbef 	bl	3400e704 <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
34000f26:	2001      	movs	r0, #1
34000f28:	f000 fd7a 	bl	34001a20 <BSP_SMPS_Init>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34000f2c:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000f2e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34000f30:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
34000f32:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34000f34:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34000f36:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34000f3a:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
34000f3e:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
34000f40:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34000f42:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34000f46:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34000f4a:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
34000f4e:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34000f52:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
34000f56:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
34000f5a:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000f5e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
34000f60:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000f62:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34000f64:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34000f68:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
34000f6c:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
34000f70:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
34000f74:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
34000f76:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000f78:	f003 f9ee 	bl	34004358 <HAL_RCC_OscConfig>
34000f7c:	b100      	cbz	r0, 34000f80 <SystemClock_Config+0x80>
  {
    while(1);
34000f7e:	e7fe      	b.n	34000f7e <SystemClock_Config+0x7e>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34000f80:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34000f84:	227f      	movs	r2, #127	@ 0x7f
34000f86:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34000f8a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34000f8e:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
34000f90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
34000f94:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
34000f98:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
34000f9c:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34000fa0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
34000fa4:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
34000fa8:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34000fac:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34000fb0:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34000fb4:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34000fb6:	4668      	mov	r0, sp
34000fb8:	f003 fdca 	bl	34004b50 <HAL_RCC_ClockConfig>
34000fbc:	b100      	cbz	r0, 34000fc0 <SystemClock_Config+0xc0>
  {
    while(1);
34000fbe:	e7fe      	b.n	34000fbe <SystemClock_Config+0xbe>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000fc0:	4b08      	ldr	r3, [pc, #32]	@ (34000fe4 <SystemClock_Config+0xe4>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34000fc2:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000fc4:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34000fc6:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
34000fca:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000fce:	4b06      	ldr	r3, [pc, #24]	@ (34000fe8 <SystemClock_Config+0xe8>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000fd0:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000fd2:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000fd4:	f004 f96e 	bl	340052b4 <HAL_RCCEx_PeriphCLKConfig>
34000fd8:	b100      	cbz	r0, 34000fdc <SystemClock_Config+0xdc>
  {
    while (1);
34000fda:	e7fe      	b.n	34000fda <SystemClock_Config+0xda>
  }
}
34000fdc:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
34000fe0:	bd30      	pop	{r4, r5, pc}
34000fe2:	bf00      	nop
34000fe4:	03000014 	.word	0x03000014
34000fe8:	03000414 	.word	0x03000414

34000fec <Hardware_init>:
{
34000fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34000ff0:	4aa3      	ldr	r2, [pc, #652]	@ (34001280 <Hardware_init+0x294>)
{
34000ff2:	b08d      	sub	sp, #52	@ 0x34
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34000ff4:	6813      	ldr	r3, [r2, #0]
34000ff6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34000ffa:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
34000ffc:	4ba1      	ldr	r3, [pc, #644]	@ (34001284 <Hardware_init+0x298>)
34000ffe:	6a1a      	ldr	r2, [r3, #32]
34001000:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
34001004:	621a      	str	r2, [r3, #32]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
34001006:	6a1a      	ldr	r2, [r3, #32]
34001008:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
3400100c:	621a      	str	r2, [r3, #32]
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
3400100e:	2210      	movs	r2, #16
34001010:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34001014:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34001018:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400101a:	9b01      	ldr	r3, [sp, #4]
  HAL_Init();
3400101c:	f001 f9b0 	bl	34002380 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34001020:	4b99      	ldr	r3, [pc, #612]	@ (34001288 <Hardware_init+0x29c>)
34001022:	695a      	ldr	r2, [r3, #20]
34001024:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
34001028:	d111      	bne.n	3400104e <Hardware_init+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
3400102a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400102e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34001032:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34001036:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400103a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
3400103e:	695a      	ldr	r2, [r3, #20]
34001040:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34001044:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34001046:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400104a:	f3bf 8f6f 	isb	sy
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
3400104e:	4a8c      	ldr	r2, [pc, #560]	@ (34001280 <Hardware_init+0x294>)
34001050:	6813      	ldr	r3, [r2, #0]
34001052:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34001056:	6013      	str	r3, [r2, #0]
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
34001058:	f5a2 4273 	sub.w	r2, r2, #62208	@ 0xf300
3400105c:	6953      	ldr	r3, [r2, #20]
3400105e:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
34001062:	d128      	bne.n	340010b6 <Hardware_init+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
34001064:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
34001068:	f3bf 8f4f 	dsb	sy
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3400106c:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    ccsidr = SCB->CCSIDR;
34001070:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34001074:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
34001078:	f3c3 334e 	ubfx	r3, r3, #13, #15
3400107c:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3400107e:	f100 0e01 	add.w	lr, r0, #1
34001082:	4601      	mov	r1, r0
34001084:	f04e e001 	dls	lr, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34001088:	ea03 0604 	and.w	r6, r3, r4
3400108c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
34001090:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
34001094:	3901      	subs	r1, #1
34001096:	f00f c807 	le	lr, 3400108c <Hardware_init+0xa0>
    } while(sets-- != 0U);
3400109a:	3b20      	subs	r3, #32
3400109c:	f113 0f20 	cmn.w	r3, #32
340010a0:	d1ed      	bne.n	3400107e <Hardware_init+0x92>
340010a2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
340010a6:	6953      	ldr	r3, [r2, #20]
340010a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
340010ac:	6153      	str	r3, [r2, #20]
340010ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340010b2:	f3bf 8f6f 	isb	sy
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340010b6:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
  WRITE_REG(RCC->AHB2ENSR, Periphs);
340010ba:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
  RAMCFG_HandleTypeDef hramcfg = {0};
340010be:	2600      	movs	r6, #0
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340010c0:	4c70      	ldr	r4, [pc, #448]	@ (34001284 <Hardware_init+0x298>)
  SystemClock_Config();
340010c2:	f7ff ff1d 	bl	34000f00 <SystemClock_Config>
340010c6:	f8c4 7a60 	str.w	r7, [r4, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
340010ca:	f8d4 3260 	ldr.w	r3, [r4, #608]	@ 0x260
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340010ce:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 340012bc <Hardware_init+0x2d0>
  tmpreg = READ_REG(RCC->AHB5ENR);
340010d2:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
340010d4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
340010d6:	2001      	movs	r0, #1
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340010d8:	f8c4 7a20 	str.w	r7, [r4, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340010dc:	f8cb 7220 	str.w	r7, [fp, #544]	@ 0x220
340010e0:	f7ff feea 	bl	34000eb8 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
340010e4:	2002      	movs	r0, #2
340010e6:	f7ff fee7 	bl	34000eb8 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
340010ea:	2004      	movs	r0, #4
340010ec:	f7ff fee4 	bl	34000eb8 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
340010f0:	2008      	movs	r0, #8
340010f2:	f7ff fee1 	bl	34000eb8 <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
340010f6:	f8c4 aa54 	str.w	sl, [r4, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
340010fa:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340010fe:	a808      	add	r0, sp, #32
34001100:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
34001102:	9b02      	ldr	r3, [sp, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34001104:	4b61      	ldr	r3, [pc, #388]	@ (3400128c <Hardware_init+0x2a0>)
  RAMCFG_HandleTypeDef hramcfg = {0};
34001106:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
3400110a:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3400110c:	f002 ff00 	bl	34003f10 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34001110:	4b5f      	ldr	r3, [pc, #380]	@ (34001290 <Hardware_init+0x2a4>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001112:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34001114:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001116:	f002 fefb 	bl	34003f10 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3400111a:	4b5e      	ldr	r3, [pc, #376]	@ (34001294 <Hardware_init+0x2a8>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3400111c:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3400111e:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001120:	f002 fef6 	bl	34003f10 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34001124:	4b5c      	ldr	r3, [pc, #368]	@ (34001298 <Hardware_init+0x2ac>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001126:	a808      	add	r0, sp, #32
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34001128:	9308      	str	r3, [sp, #32]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3400112a:	f002 fef1 	bl	34003f10 <HAL_RAMCFG_EnableAXISRAM>
  Fuse_Programming();
3400112e:	f7ff fe95 	bl	34000e5c <Fuse_Programming>
  npu_cache_init();
34001132:	f000 f949 	bl	340013c8 <npu_cache_init>
  npu_cache_enable();
34001136:	f000 f951 	bl	340013dc <npu_cache_enable>
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3400113a:	f240 1301 	movw	r3, #257	@ 0x101
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3400113e:	f44f 7900 	mov.w	r9, #512	@ 0x200
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34001142:	2503      	movs	r5, #3
34001144:	f04f 0802 	mov.w	r8, #2
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001148:	4669      	mov	r1, sp
3400114a:	4630      	mov	r0, r6
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3400114c:	f8ad 3000 	strh.w	r3, [sp]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001150:	f000 fe3c 	bl	34001dcc <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
34001154:	4630      	mov	r0, r6
34001156:	f000 fdad 	bl	34001cb4 <BSP_XSPI_NOR_EnableMemoryMappedMode>
3400115a:	f8c4 9a58 	str.w	r9, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
3400115e:	f8d4 3258 	ldr.w	r3, [r4, #600]	@ 0x258
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34001162:	a908      	add	r1, sp, #32
34001164:	9304      	str	r3, [sp, #16]
34001166:	2001      	movs	r0, #1
  (void)tmpreg;
34001168:	9b04      	ldr	r3, [sp, #16]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3400116a:	e9cd 8508 	strd	r8, r5, [sp, #32]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3400116e:	f008 fecf 	bl	34009f10 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
34001172:	a908      	add	r1, sp, #32
34001174:	2008      	movs	r0, #8
34001176:	f008 fecb 	bl	34009f10 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
3400117a:	a908      	add	r1, sp, #32
3400117c:	2009      	movs	r0, #9
3400117e:	f008 fec7 	bl	34009f10 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
34001182:	a908      	add	r1, sp, #32
34001184:	200a      	movs	r0, #10
34001186:	f008 fec3 	bl	34009f10 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
3400118a:	a908      	add	r1, sp, #32
3400118c:	200b      	movs	r0, #11
3400118e:	f008 febf 	bl	34009f10 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
34001192:	a908      	add	r1, sp, #32
34001194:	2004      	movs	r0, #4
34001196:	f008 febb 	bl	34009f10 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400119a:	4629      	mov	r1, r5
3400119c:	483f      	ldr	r0, [pc, #252]	@ (3400129c <Hardware_init+0x2b0>)
3400119e:	f008 ff0d 	bl	34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011a2:	4629      	mov	r1, r5
340011a4:	483e      	ldr	r0, [pc, #248]	@ (340012a0 <Hardware_init+0x2b4>)
340011a6:	f008 ff09 	bl	34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011aa:	4629      	mov	r1, r5
340011ac:	483d      	ldr	r0, [pc, #244]	@ (340012a4 <Hardware_init+0x2b8>)
340011ae:	f008 ff05 	bl	34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011b2:	4629      	mov	r1, r5
340011b4:	483c      	ldr	r0, [pc, #240]	@ (340012a8 <Hardware_init+0x2bc>)
340011b6:	f008 ff01 	bl	34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011ba:	4629      	mov	r1, r5
340011bc:	483b      	ldr	r0, [pc, #236]	@ (340012ac <Hardware_init+0x2c0>)
340011be:	f008 fefd 	bl	34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011c2:	4629      	mov	r1, r5
340011c4:	483a      	ldr	r0, [pc, #232]	@ (340012b0 <Hardware_init+0x2c4>)
340011c6:	f008 fef9 	bl	34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011ca:	4629      	mov	r1, r5
340011cc:	4839      	ldr	r0, [pc, #228]	@ (340012b4 <Hardware_init+0x2c8>)
340011ce:	f008 fef5 	bl	34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011d2:	4629      	mov	r1, r5
340011d4:	4838      	ldr	r0, [pc, #224]	@ (340012b8 <Hardware_init+0x2cc>)
340011d6:	f008 fef1 	bl	34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340011da:	4629      	mov	r1, r5
340011dc:	2004      	movs	r0, #4
340011de:	f008 feed 	bl	34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
340011e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340011e6:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
340011ea:	f8d4 2258 	ldr.w	r2, [r4, #600]	@ 0x258
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
340011ee:	2020      	movs	r0, #32
340011f0:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
340011f2:	9a05      	ldr	r2, [sp, #20]
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
340011f4:	2204      	movs	r2, #4
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
340011f6:	f8c4 3a18 	str.w	r3, [r4, #2584]	@ 0xa18
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
340011fa:	f8cb 3218 	str.w	r3, [fp, #536]	@ 0x218
340011fe:	f7ff fe73 	bl	34000ee8 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
34001202:	4650      	mov	r0, sl
34001204:	f7ff fe70 	bl	34000ee8 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
34001208:	4638      	mov	r0, r7
3400120a:	f7ff fe6d 	bl	34000ee8 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
3400120e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001212:	f7ff fe69 	bl	34000ee8 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
34001216:	4640      	mov	r0, r8
34001218:	f7ff fe66 	bl	34000ee8 <LL_AHB5_GRP1_EnableClockLowPower>
  WRITE_REG(RCC->APB5LPENSR, Periphs);
3400121c:	f8c4 2abc 	str.w	r2, [r4, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34001220:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34001224:	4648      	mov	r0, r9
34001226:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
34001228:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
3400122a:	2340      	movs	r3, #64	@ 0x40
3400122c:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34001230:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  BSP_COM_Init(COM1, &com_config);
34001234:	a908      	add	r1, sp, #32
34001236:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
34001238:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
3400123a:	f7ff fe49 	bl	34000ed0 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
3400123e:	2080      	movs	r0, #128	@ 0x80
34001240:	f7ff fe46 	bl	34000ed0 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
34001244:	f44f 7080 	mov.w	r0, #256	@ 0x100
34001248:	f7ff fe42 	bl	34000ed0 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
3400124c:	2001      	movs	r0, #1
3400124e:	f7ff fe3f 	bl	34000ed0 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
34001252:	4640      	mov	r0, r8
34001254:	f7ff fe3c 	bl	34000ed0 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
34001258:	4610      	mov	r0, r2
3400125a:	f7ff fe39 	bl	34000ed0 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
3400125e:	2008      	movs	r0, #8
34001260:	f7ff fe36 	bl	34000ed0 <LL_MEM_EnableClockLowPower>
  COM_InitTypeDef com_config = {
34001264:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  BSP_COM_Init(COM1, &com_config);
34001268:	4630      	mov	r0, r6
  COM_InitTypeDef com_config = {
3400126a:	e9cd 3608 	strd	r3, r6, [sp, #32]
3400126e:	960a      	str	r6, [sp, #40]	@ 0x28
34001270:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
  BSP_COM_Init(COM1, &com_config);
34001274:	f000 fc0a 	bl	34001a8c <BSP_COM_Init>
}
34001278:	b00d      	add	sp, #52	@ 0x34
3400127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400127e:	bf00      	nop
34001280:	e001e000 	.word	0xe001e000
34001284:	56028000 	.word	0x56028000
34001288:	e000ed00 	.word	0xe000ed00
3400128c:	52023100 	.word	0x52023100
34001290:	52023180 	.word	0x52023180
34001294:	52023200 	.word	0x52023200
34001298:	52023280 	.word	0x52023280
3400129c:	3000000a 	.word	0x3000000a
340012a0:	30000005 	.word	0x30000005
340012a4:	2000001c 	.word	0x2000001c
340012a8:	2000001d 	.word	0x2000001d
340012ac:	30000006 	.word	0x30000006
340012b0:	30000007 	.word	0x30000007
340012b4:	30000008 	.word	0x30000008
340012b8:	10000018 	.word	0x10000018
340012bc:	56029000 	.word	0x56029000

340012c0 <main_MatMul>:
int main_MatMul(void){
340012c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Hardware_init();
340012c2:	f7ff fe93 	bl	34000fec <Hardware_init>
	printf("=== MatMul Main ===");
340012c6:	4811      	ldr	r0, [pc, #68]	@ (3400130c <main_MatMul+0x4c>)
340012c8:	f00d f8d4 	bl	3400e474 <iprintf>
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
340012cc:	2108      	movs	r1, #8
    	inVec[i] = (int8_t)((i) % 256);  // Example input: cycles through -128 to 127
340012ce:	4b10      	ldr	r3, [pc, #64]	@ (34001310 <main_MatMul+0x50>)
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
340012d0:	4608      	mov	r0, r1
    	inVec[i] = (int8_t)((i) % 256);  // Example input: cycles through -128 to 127
340012d2:	9300      	str	r3, [sp, #0]
340012d4:	f103 3304 	add.w	r3, r3, #67372036	@ 0x4040404
340012d8:	9301      	str	r3, [sp, #4]
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
340012da:	f7ff fcdf 	bl	34000c9c <getIdentityWeights_int8>
	npu_matvec_int8_init(insize,outsize);
340012de:	2108      	movs	r1, #8
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
340012e0:	4605      	mov	r5, r0
	npu_matvec_int8_init(insize,outsize);
340012e2:	4608      	mov	r0, r1
340012e4:	f7ff fc68 	bl	34000bb8 <npu_matvec_int8_init>
			printf("Outpus %2d: %4d",i,output);
340012e8:	4f0a      	ldr	r7, [pc, #40]	@ (34001314 <main_MatMul+0x54>)
		outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
340012ea:	2208      	movs	r2, #8
340012ec:	462b      	mov	r3, r5
340012ee:	4611      	mov	r1, r2
340012f0:	4668      	mov	r0, sp
340012f2:	f7ff fc8d 	bl	34000c10 <npu_matvec_int8_run>
		for(size_t i = 0;i < outsize;i++){
340012f6:	2400      	movs	r4, #0
		outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
340012f8:	4606      	mov	r6, r0
			printf("Outpus %2d: %4d",i,output);
340012fa:	4621      	mov	r1, r4
340012fc:	5732      	ldrsb	r2, [r6, r4]
340012fe:	4638      	mov	r0, r7
		for(size_t i = 0;i < outsize;i++){
34001300:	3401      	adds	r4, #1
			printf("Outpus %2d: %4d",i,output);
34001302:	f00d f8b7 	bl	3400e474 <iprintf>
		for(size_t i = 0;i < outsize;i++){
34001306:	2c08      	cmp	r4, #8
34001308:	d1f7      	bne.n	340012fa <main_MatMul+0x3a>
3400130a:	e7ee      	b.n	340012ea <main_MatMul+0x2a>
3400130c:	3401053d 	.word	0x3401053d
34001310:	03020100 	.word	0x03020100
34001314:	34010551 	.word	0x34010551

34001318 <main>:
{
34001318:	b508      	push	{r3, lr}
	main_MatMul();
3400131a:	f7ff ffd1 	bl	340012c0 <main_MatMul>
	...

34001320 <_write>:
{
34001320:	b510      	push	{r4, lr}
34001322:	4614      	mov	r4, r2
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
34001324:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001328:	b292      	uxth	r2, r2
3400132a:	4802      	ldr	r0, [pc, #8]	@ (34001334 <_write+0x14>)
3400132c:	f009 f9d2 	bl	3400a6d4 <HAL_UART_Transmit>
}
34001330:	4620      	mov	r0, r4
34001332:	bd10      	pop	{r4, pc}
34001334:	340125d8 	.word	0x340125d8

34001338 <IAC_IRQHandler>:
  while (1)
34001338:	e7fe      	b.n	34001338 <IAC_IRQHandler>
	...

3400133c <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
3400133c:	b507      	push	{r0, r1, r2, lr}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400133e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
34001342:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001346:	f7ff fdb7 	bl	34000eb8 <LL_MEM_EnableClock>
3400134a:	4b08      	ldr	r3, [pc, #32]	@ (3400136c <HAL_CACHEAXI_MspInit+0x30>)
3400134c:	f8c3 2a60 	str.w	r2, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001350:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
34001354:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
34001356:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001358:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400135c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34001360:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
34001364:	b003      	add	sp, #12
34001366:	f85d fb04 	ldr.w	pc, [sp], #4
3400136a:	bf00      	nop
3400136c:	56028000 	.word	0x56028000

34001370 <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
34001370:	be00      	bkpt	0x0000
  while (1)
34001372:	e7fe      	b.n	34001372 <assert_failed+0x2>

34001374 <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
34001374:	b530      	push	{r4, r5, lr}

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
34001376:	4d13      	ldr	r5, [pc, #76]	@ (340013c4 <mcu_cache_invalidate_range+0x50>)
34001378:	696b      	ldr	r3, [r5, #20]
3400137a:	03db      	lsls	r3, r3, #15
3400137c:	d51f      	bpl.n	340013be <mcu_cache_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
3400137e:	1a0a      	subs	r2, r1, r0
    if ( dsize > 0 ) {
34001380:	2a00      	cmp	r2, #0
34001382:	dd1c      	ble.n	340013be <mcu_cache_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34001384:	f000 031f 	and.w	r3, r0, #31
34001388:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3400138a:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3400138e:	1884      	adds	r4, r0, r2
34001390:	43c2      	mvns	r2, r0
34001392:	1a1b      	subs	r3, r3, r0
34001394:	440b      	add	r3, r1
34001396:	4422      	add	r2, r4
34001398:	3b20      	subs	r3, #32
3400139a:	0952      	lsrs	r2, r2, #5
3400139c:	3320      	adds	r3, #32
3400139e:	f102 0e01 	add.w	lr, r2, #1
340013a2:	bfd8      	it	le
340013a4:	f04f 0e01 	movle.w	lr, #1
340013a8:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
340013ac:	f8c5 025c 	str.w	r0, [r5, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
340013b0:	3020      	adds	r0, #32
      } while ( op_size > 0 );
340013b2:	f00f c805 	le	lr, 340013ac <mcu_cache_invalidate_range+0x38>
340013b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340013ba:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
340013be:	2000      	movs	r0, #0
340013c0:	bd30      	pop	{r4, r5, pc}
340013c2:	bf00      	nop
340013c4:	e000ed00 	.word	0xe000ed00

340013c8 <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
340013c8:	4802      	ldr	r0, [pc, #8]	@ (340013d4 <npu_cache_init+0xc>)
340013ca:	4b03      	ldr	r3, [pc, #12]	@ (340013d8 <npu_cache_init+0x10>)
340013cc:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
340013ce:	f001 b8ff 	b.w	340025d0 <HAL_CACHEAXI_Init>
340013d2:	bf00      	nop
340013d4:	340125cc 	.word	0x340125cc
340013d8:	580dfc00 	.word	0x580dfc00

340013dc <npu_cache_enable>:
}

void npu_cache_enable(void)
{
340013dc:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
340013de:	4c03      	ldr	r4, [pc, #12]	@ (340013ec <npu_cache_enable+0x10>)
340013e0:	4620      	mov	r0, r4
340013e2:	f001 f8c1 	bl	34002568 <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
340013e6:	2802      	cmp	r0, #2
340013e8:	d0fa      	beq.n	340013e0 <npu_cache_enable+0x4>
}
340013ea:	bd10      	pop	{r4, pc}
340013ec:	340125cc 	.word	0x340125cc

340013f0 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
340013f0:	4770      	bx	lr

340013f2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
340013f2:	e7fe      	b.n	340013f2 <HardFault_Handler>

340013f4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
340013f4:	e7fe      	b.n	340013f4 <MemManage_Handler>

340013f6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
340013f6:	e7fe      	b.n	340013f6 <BusFault_Handler>

340013f8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
340013f8:	e7fe      	b.n	340013f8 <UsageFault_Handler>

340013fa <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
340013fa:	e7fe      	b.n	340013fa <SecureFault_Handler>

340013fc <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
340013fc:	4770      	bx	lr

340013fe <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
340013fe:	e7fe      	b.n	340013fe <DebugMon_Handler>

34001400 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
  while (1)
34001400:	e7fe      	b.n	34001400 <PendSV_Handler>

34001402 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
34001402:	f000 bfcf 	b.w	340023a4 <HAL_IncTick>

34001406 <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
34001406:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001408:	f00a fb30 	bl	3400ba6c <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
}
3400140c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
34001410:	f001 bae0 	b.w	340029d4 <HAL_DCMIPP_CSI_IRQHandler>

34001414 <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
34001414:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001416:	f00a fb29 	bl	3400ba6c <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
3400141a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
3400141e:	f001 b9a3 	b.w	34002768 <HAL_DCMIPP_IRQHandler>

34001422 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
34001422:	2001      	movs	r0, #1
34001424:	4770      	bx	lr

34001426 <_kill>:

int _kill(int pid, int sig)
{
34001426:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
34001428:	f00d fbc0 	bl	3400ebac <__errno>
3400142c:	2316      	movs	r3, #22
3400142e:	6003      	str	r3, [r0, #0]
  return -1;
}
34001430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001434:	bd08      	pop	{r3, pc}

34001436 <_exit>:

void _exit (int status)
{
34001436:	b508      	push	{r3, lr}
  errno = EINVAL;
34001438:	f00d fbb8 	bl	3400ebac <__errno>
3400143c:	2316      	movs	r3, #22
3400143e:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
34001440:	e7fe      	b.n	34001440 <_exit+0xa>

34001442 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34001442:	b570      	push	{r4, r5, r6, lr}
34001444:	460d      	mov	r5, r1
34001446:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001448:	460e      	mov	r6, r1
3400144a:	1b73      	subs	r3, r6, r5
3400144c:	429c      	cmp	r4, r3
3400144e:	dc01      	bgt.n	34001454 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
34001450:	4620      	mov	r0, r4
34001452:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
34001454:	f3af 8000 	nop.w
34001458:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
3400145c:	e7f5      	b.n	3400144a <_read+0x8>

3400145e <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
3400145e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001462:	4770      	bx	lr

34001464 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
34001464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
34001468:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
3400146a:	604b      	str	r3, [r1, #4]
}
3400146c:	4770      	bx	lr

3400146e <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
3400146e:	2001      	movs	r0, #1
34001470:	4770      	bx	lr

34001472 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
34001472:	2000      	movs	r0, #0
34001474:	4770      	bx	lr

34001476 <MX25UM51245G_GetFlashInfo>:
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
34001476:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
3400147a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3400147e:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
34001482:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34001486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400148a:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
3400148e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
34001492:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
34001496:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
3400149a:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
3400149c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
340014a0:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25UM51245G_OK;
};
340014a4:	2000      	movs	r0, #0
340014a6:	4770      	bx	lr

340014a8 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
340014a8:	b570      	push	{r4, r5, r6, lr}
340014aa:	460d      	mov	r5, r1
340014ac:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef  s_command = {0};
340014ae:	2100      	movs	r1, #0
{
340014b0:	4606      	mov	r6, r0
340014b2:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef  s_command = {0};
340014b4:	a805      	add	r0, sp, #20
340014b6:	224c      	movs	r2, #76	@ 0x4c
340014b8:	f00d f924 	bl	3400e704 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
340014bc:	2214      	movs	r2, #20
340014be:	2100      	movs	r1, #0
340014c0:	4668      	mov	r0, sp
340014c2:	f00d f91f 	bl	3400e704 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340014c6:	b935      	cbnz	r5, 340014d6 <MX25UM51245G_AutoPollingMemReady+0x2e>
  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340014c8:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340014ca:	429c      	cmp	r4, r3
340014cc:	d104      	bne.n	340014d8 <MX25UM51245G_AutoPollingMemReady+0x30>
    return MX25UM51245G_ERROR;
340014ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340014d2:	b018      	add	sp, #96	@ 0x60
340014d4:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340014d6:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340014d8:	1e60      	subs	r0, r4, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340014da:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340014dc:	4243      	negs	r3, r0
340014de:	4143      	adcs	r3, r0
340014e0:	00da      	lsls	r2, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340014e2:	920a      	str	r2, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340014e4:	2d00      	cmp	r5, #0
340014e6:	d03a      	beq.n	3400155e <MX25UM51245G_AutoPollingMemReady+0xb6>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340014e8:	2210      	movs	r2, #16
340014ea:	f240 51fa 	movw	r1, #1530	@ 0x5fa
340014ee:	9209      	str	r2, [sp, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
340014f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340014f4:	920c      	str	r2, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
340014f6:	02da      	lsls	r2, r3, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
340014f8:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340014fa:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340014fe:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001500:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001502:	bf14      	ite	ne
34001504:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
34001508:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
3400150c:	ea4f 63c3 	mov.w	r3, r3, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001510:	9107      	str	r1, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001512:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001514:	9315      	str	r3, [sp, #84]	@ 0x54
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001516:	d02a      	beq.n	3400156e <MX25UM51245G_AutoPollingMemReady+0xc6>
34001518:	2c01      	cmp	r4, #1
3400151a:	d123      	bne.n	34001564 <MX25UM51245G_AutoPollingMemReady+0xbc>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
3400151c:	2305      	movs	r3, #5
3400151e:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001520:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001522:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001526:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001528:	2301      	movs	r3, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400152a:	2110      	movs	r1, #16
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
3400152c:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400152e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34001532:	9214      	str	r2, [sp, #80]	@ 0x50
34001534:	e9cd 3103 	strd	r3, r1, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001538:	f241 3288 	movw	r2, #5000	@ 0x1388
3400153c:	4630      	mov	r0, r6
3400153e:	a905      	add	r1, sp, #20
34001540:	f009 fcd2 	bl	3400aee8 <HAL_XSPI_Command>
34001544:	2800      	cmp	r0, #0
34001546:	d1c2      	bne.n	340014ce <MX25UM51245G_AutoPollingMemReady+0x26>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001548:	f241 3288 	movw	r2, #5000	@ 0x1388
3400154c:	4669      	mov	r1, sp
3400154e:	4630      	mov	r0, r6
34001550:	f009 fe7c 	bl	3400b24c <HAL_XSPI_AutoPolling>
34001554:	3800      	subs	r0, #0
34001556:	bf18      	it	ne
34001558:	2001      	movne	r0, #1
3400155a:	4240      	negs	r0, r0
3400155c:	e7b9      	b.n	340014d2 <MX25UM51245G_AutoPollingMemReady+0x2a>
3400155e:	2105      	movs	r1, #5
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001560:	462a      	mov	r2, r5
34001562:	e7c7      	b.n	340014f4 <MX25UM51245G_AutoPollingMemReady+0x4c>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001564:	2304      	movs	r3, #4
34001566:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001568:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400156a:	2300      	movs	r3, #0
3400156c:	e7db      	b.n	34001526 <MX25UM51245G_AutoPollingMemReady+0x7e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400156e:	2c01      	cmp	r4, #1
34001570:	d1fa      	bne.n	34001568 <MX25UM51245G_AutoPollingMemReady+0xc0>
34001572:	e7d5      	b.n	34001520 <MX25UM51245G_AutoPollingMemReady+0x78>

34001574 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
34001574:	b570      	push	{r4, r5, r6, lr}
34001576:	460c      	mov	r4, r1
34001578:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef      s_command = {0};
3400157a:	2100      	movs	r1, #0
{
3400157c:	4606      	mov	r6, r0
3400157e:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef      s_command = {0};
34001580:	a805      	add	r0, sp, #20
34001582:	224c      	movs	r2, #76	@ 0x4c
34001584:	f00d f8be 	bl	3400e704 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001588:	2210      	movs	r2, #16
3400158a:	2100      	movs	r1, #0
3400158c:	a801      	add	r0, sp, #4
3400158e:	f00d f8b9 	bl	3400e704 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
34001592:	2c01      	cmp	r4, #1
34001594:	d144      	bne.n	34001620 <MX25UM51245G_EnableSTRMemoryMappedMode+0xac>
34001596:	b91d      	cbnz	r5, 340015a0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x2c>
  {
    return MX25UM51245G_ERROR;
34001598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
3400159c:	b018      	add	sp, #96	@ 0x60
3400159e:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340015a0:	9405      	str	r4, [sp, #20]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340015a2:	2204      	movs	r2, #4
340015a4:	2310      	movs	r3, #16
340015a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
340015aa:	f64e 4213 	movw	r2, #60435	@ 0xec13
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340015ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                                 : HAL_XSPI_ADDRESS_32_BITS;
340015b2:	2d00      	cmp	r5, #0
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340015b4:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_32_BITS;
340015b6:	bf14      	ite	ne
340015b8:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
340015bc:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340015c0:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340015c2:	9207      	str	r2, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340015c4:	bf0c      	ite	eq
340015c6:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
340015ca:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
340015ce:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340015d0:	bf0c      	ite	eq
340015d2:	2308      	moveq	r3, #8
340015d4:	2306      	movne	r3, #6
340015d6:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340015d8:	4630      	mov	r0, r6
340015da:	f241 3288 	movw	r2, #5000	@ 0x1388
340015de:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
340015e0:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340015e2:	f009 fc81 	bl	3400aee8 <HAL_XSPI_Command>
340015e6:	2800      	cmp	r0, #0
340015e8:	d1d6      	bne.n	34001598 <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
340015ea:	2302      	movs	r3, #2
340015ec:	9305      	str	r3, [sp, #20]
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
340015ee:	bb1c      	cbnz	r4, 34001638 <MX25UM51245G_EnableSTRMemoryMappedMode+0xc4>
340015f0:	2d00      	cmp	r5, #0
340015f2:	bf18      	it	ne
340015f4:	2312      	movne	r3, #18
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340015f6:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles        = 0U;
340015f8:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
340015fe:	4630      	mov	r0, r6
34001600:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = 0U;
34001602:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001604:	f009 fc70 	bl	3400aee8 <HAL_XSPI_Command>
34001608:	2800      	cmp	r0, #0
3400160a:	d1c5      	bne.n	34001598 <MX25UM51245G_EnableSTRMemoryMappedMode+0x24>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400160c:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
3400160e:	a901      	add	r1, sp, #4
34001610:	4630      	mov	r0, r6
34001612:	f009 fe97 	bl	3400b344 <HAL_XSPI_MemoryMapped>
34001616:	3800      	subs	r0, #0
34001618:	bf18      	it	ne
3400161a:	2001      	movne	r0, #1
3400161c:	4240      	negs	r0, r0
3400161e:	e7bd      	b.n	3400159c <MX25UM51245G_EnableSTRMemoryMappedMode+0x28>
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001620:	2301      	movs	r3, #1
34001622:	9305      	str	r3, [sp, #20]
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001624:	2c00      	cmp	r4, #0
34001626:	d1bc      	bne.n	340015a2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x2e>
                                 : MX25UM51245G_OCTA_READ_CMD;
34001628:	2d00      	cmp	r5, #0
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400162a:	9308      	str	r3, [sp, #32]
                                 : MX25UM51245G_OCTA_READ_CMD;
3400162c:	bf14      	ite	ne
3400162e:	220c      	movne	r2, #12
34001630:	220b      	moveq	r2, #11
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001632:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001636:	e7bc      	b.n	340015b2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001638:	f241 23ed 	movw	r3, #4845	@ 0x12ed
3400163c:	e7db      	b.n	340015f6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x82>

3400163e <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
3400163e:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001640:	2510      	movs	r5, #16
{
34001642:	b099      	sub	sp, #100	@ 0x64
34001644:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef      s_command = {0};
34001646:	223c      	movs	r2, #60	@ 0x3c
34001648:	2100      	movs	r1, #0
3400164a:	a806      	add	r0, sp, #24
3400164c:	f00d f85a 	bl	3400e704 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001650:	462a      	mov	r2, r5
34001652:	2100      	movs	r1, #0
34001654:	a801      	add	r0, sp, #4
34001656:	f00d f855 	bl	3400e704 <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
3400165a:	2301      	movs	r3, #1
3400165c:	9305      	str	r3, [sp, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3400165e:	2304      	movs	r3, #4
34001660:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
34001662:	2308      	movs	r3, #8
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
34001664:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
34001668:	f64e 6311 	movw	r3, #60945	@ 0xee11
3400166c:	9307      	str	r3, [sp, #28]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3400166e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001672:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34001676:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001678:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400167c:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34001680:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
34001684:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34001688:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
3400168a:	2306      	movs	r3, #6
3400168c:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
34001690:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001694:	f241 3288 	movw	r2, #5000	@ 0x1388
34001698:	4620      	mov	r0, r4
3400169a:	a905      	add	r1, sp, #20
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
3400169c:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400169e:	f009 fc23 	bl	3400aee8 <HAL_XSPI_Command>
340016a2:	b118      	cbz	r0, 340016ac <MX25UM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25UM51245G_ERROR;
340016a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340016a8:	b019      	add	sp, #100	@ 0x64
340016aa:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
340016ac:	2302      	movs	r3, #2
340016ae:	9305      	str	r3, [sp, #20]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
340016b0:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
340016b4:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016b8:	f241 3288 	movw	r2, #5000	@ 0x1388
340016bc:	4620      	mov	r0, r4
340016be:	a905      	add	r1, sp, #20
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
340016c0:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016c2:	f009 fc11 	bl	3400aee8 <HAL_XSPI_Command>
340016c6:	2800      	cmp	r0, #0
340016c8:	d1ec      	bne.n	340016a4 <MX25UM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340016ca:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
340016cc:	a901      	add	r1, sp, #4
340016ce:	4620      	mov	r0, r4
340016d0:	f009 fe38 	bl	3400b344 <HAL_XSPI_MemoryMapped>
340016d4:	3800      	subs	r0, #0
340016d6:	bf18      	it	ne
340016d8:	2001      	movne	r0, #1
340016da:	4240      	negs	r0, r0
340016dc:	e7e4      	b.n	340016a8 <MX25UM51245G_EnableDTRMemoryMappedMode+0x6a>

340016de <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340016de:	b5f0      	push	{r4, r5, r6, r7, lr}
340016e0:	460c      	mov	r4, r1
340016e2:	b099      	sub	sp, #100	@ 0x64
  XSPI_RegularCmdTypeDef     s_command = {0};
340016e4:	2100      	movs	r1, #0
{
340016e6:	4606      	mov	r6, r0
340016e8:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef     s_command = {0};
340016ea:	a805      	add	r0, sp, #20
340016ec:	224c      	movs	r2, #76	@ 0x4c
340016ee:	f00d f809 	bl	3400e704 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
340016f2:	2214      	movs	r2, #20
340016f4:	2100      	movs	r1, #0
340016f6:	4668      	mov	r0, sp
340016f8:	f00d f804 	bl	3400e704 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340016fc:	b934      	cbnz	r4, 3400170c <MX25UM51245G_WriteEnable+0x2e>
  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340016fe:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001700:	429d      	cmp	r5, r3
34001702:	d104      	bne.n	3400170e <MX25UM51245G_WriteEnable+0x30>
    return MX25UM51245G_ERROR;
34001704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001708:	b019      	add	sp, #100	@ 0x64
3400170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400170c:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400170e:	f105 3cff 	add.w	ip, r5, #4294967295	@ 0xffffffff
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001712:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001714:	f1dc 0300 	rsbs	r3, ip, #0
34001718:	eb43 030c 	adc.w	r3, r3, ip
3400171c:	00db      	lsls	r3, r3, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400171e:	930a      	str	r3, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001720:	2c00      	cmp	r4, #0
34001722:	d045      	beq.n	340017b0 <MX25UM51245G_WriteEnable+0xd2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001724:	2310      	movs	r3, #16
34001726:	9309      	str	r3, [sp, #36]	@ 0x24
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001728:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400172c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001730:	4630      	mov	r0, r6
34001732:	a905      	add	r1, sp, #20
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001734:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001736:	f009 fbd7 	bl	3400aee8 <HAL_XSPI_Command>
3400173a:	4603      	mov	r3, r0
3400173c:	2800      	cmp	r0, #0
3400173e:	d1e1      	bne.n	34001704 <MX25UM51245G_WriteEnable+0x26>
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001740:	2c00      	cmp	r4, #0
34001742:	d037      	beq.n	340017b4 <MX25UM51245G_WriteEnable+0xd6>
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001744:	2d01      	cmp	r5, #1
34001746:	f240 5cfa 	movw	ip, #1530	@ 0x5fa
3400174a:	d03d      	beq.n	340017c8 <MX25UM51245G_WriteEnable+0xea>
3400174c:	4607      	mov	r7, r0
3400174e:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
34001752:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001756:	2004      	movs	r0, #4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001758:	2101      	movs	r1, #1
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400175a:	461a      	mov	r2, r3
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400175c:	940c      	str	r4, [sp, #48]	@ 0x30
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
3400175e:	f44f 5440 	mov.w	r4, #12288	@ 0x3000
34001762:	940d      	str	r4, [sp, #52]	@ 0x34
  s_command.Address        = 0U;
34001764:	2400      	movs	r4, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
34001766:	e9cd 3015 	strd	r3, r0, [sp, #84]	@ 0x54
3400176a:	9114      	str	r1, [sp, #80]	@ 0x50
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400176c:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400176e:	4630      	mov	r0, r6
34001770:	f241 3288 	movw	r2, #5000	@ 0x1388
34001774:	a905      	add	r1, sp, #20
34001776:	f8cd c01c 	str.w	ip, [sp, #28]
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400177a:	970e      	str	r7, [sp, #56]	@ 0x38
  s_command.Address        = 0U;
3400177c:	940b      	str	r4, [sp, #44]	@ 0x2c
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400177e:	9513      	str	r5, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001780:	f009 fbb2 	bl	3400aee8 <HAL_XSPI_Command>
34001784:	2800      	cmp	r0, #0
34001786:	d1bd      	bne.n	34001704 <MX25UM51245G_WriteEnable+0x26>
  s_config.MatchValue      = 2U;
34001788:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400178a:	2210      	movs	r2, #16
  s_config.MatchMask       = 2U;
3400178c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001790:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
34001794:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001796:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400179a:	4669      	mov	r1, sp
3400179c:	f241 3288 	movw	r2, #5000	@ 0x1388
340017a0:	4630      	mov	r0, r6
340017a2:	f009 fd53 	bl	3400b24c <HAL_XSPI_AutoPolling>
340017a6:	1b00      	subs	r0, r0, r4
340017a8:	bf18      	it	ne
340017aa:	2001      	movne	r0, #1
340017ac:	4240      	negs	r0, r0
340017ae:	e7ab      	b.n	34001708 <MX25UM51245G_WriteEnable+0x2a>
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
340017b0:	2306      	movs	r3, #6
340017b2:	e7bb      	b.n	3400172c <MX25UM51245G_WriteEnable+0x4e>
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340017b4:	2d01      	cmp	r5, #1
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
340017b6:	f04f 0c05 	mov.w	ip, #5
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340017ba:	d012      	beq.n	340017e2 <MX25UM51245G_WriteEnable+0x104>
340017bc:	4623      	mov	r3, r4
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
340017be:	4627      	mov	r7, r4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340017c0:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
340017c4:	4620      	mov	r0, r4
340017c6:	e7c7      	b.n	34001758 <MX25UM51245G_WriteEnable+0x7a>
340017c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
340017cc:	f44f 6700 	mov.w	r7, #2048	@ 0x800
340017d0:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
340017d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
340017d8:	2005      	movs	r0, #5
340017da:	2102      	movs	r1, #2
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340017dc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
340017e0:	e7bc      	b.n	3400175c <MX25UM51245G_WriteEnable+0x7e>
340017e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
340017e6:	f44f 6700 	mov.w	r7, #2048	@ 0x800
340017ea:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
340017ee:	4620      	mov	r0, r4
340017f0:	e7f3      	b.n	340017da <MX25UM51245G_WriteEnable+0xfc>

340017f2 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
340017f2:	b5f0      	push	{r4, r5, r6, r7, lr}
340017f4:	460d      	mov	r5, r1
340017f6:	b095      	sub	sp, #84	@ 0x54
340017f8:	4606      	mov	r6, r0
340017fa:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340017fc:	2100      	movs	r1, #0
340017fe:	224c      	movs	r2, #76	@ 0x4c
34001800:	a801      	add	r0, sp, #4
{
34001802:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
34001804:	f00c ff7e 	bl	3400e704 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001808:	b935      	cbnz	r5, 34001818 <MX25UM51245G_WriteCfg2Register+0x26>
  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400180a:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400180c:	429c      	cmp	r4, r3
3400180e:	d104      	bne.n	3400181a <MX25UM51245G_WriteCfg2Register+0x28>
    return MX25UM51245G_ERROR;
34001810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001814:	b015      	add	sp, #84	@ 0x54
34001816:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001818:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400181a:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400181c:	1e63      	subs	r3, r4, #1
3400181e:	425a      	negs	r2, r3
34001820:	415a      	adcs	r2, r3
34001822:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001824:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001826:	2d00      	cmp	r5, #0
34001828:	d030      	beq.n	3400188c <MX25UM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400182a:	2310      	movs	r3, #16
3400182c:	f247 218d 	movw	r1, #29325	@ 0x728d
34001830:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001836:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001838:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
3400183a:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400183c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001840:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001842:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001844:	bf14      	ite	ne
34001846:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
3400184a:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
3400184e:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001852:	9103      	str	r1, [sp, #12]
  s_command.Address            = WriteAddr;
34001854:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001856:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001858:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
3400185a:	d01b      	beq.n	34001894 <MX25UM51245G_WriteCfg2Register+0xa2>
3400185c:	2c01      	cmp	r4, #1
3400185e:	bf0c      	ite	eq
34001860:	2302      	moveq	r3, #2
34001862:	2301      	movne	r3, #1
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001864:	f241 3288 	movw	r2, #5000	@ 0x1388
34001868:	4630      	mov	r0, r6
3400186a:	a901      	add	r1, sp, #4
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
3400186c:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400186e:	f009 fb3b 	bl	3400aee8 <HAL_XSPI_Command>
34001872:	2800      	cmp	r0, #0
34001874:	d1cc      	bne.n	34001810 <MX25UM51245G_WriteCfg2Register+0x1e>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001876:	f241 3288 	movw	r2, #5000	@ 0x1388
3400187a:	4630      	mov	r0, r6
3400187c:	a91a      	add	r1, sp, #104	@ 0x68
3400187e:	f009 fc4b 	bl	3400b118 <HAL_XSPI_Transmit>
34001882:	3800      	subs	r0, #0
34001884:	bf18      	it	ne
34001886:	2001      	movne	r0, #1
34001888:	4240      	negs	r0, r0
3400188a:	e7c3      	b.n	34001814 <MX25UM51245G_WriteCfg2Register+0x22>
3400188c:	2172      	movs	r1, #114	@ 0x72
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400188e:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001892:	e7d0      	b.n	34001836 <MX25UM51245G_WriteCfg2Register+0x44>
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34001894:	2301      	movs	r3, #1
34001896:	e7e5      	b.n	34001864 <MX25UM51245G_WriteCfg2Register+0x72>

34001898 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
34001898:	b5f0      	push	{r4, r5, r6, r7, lr}
3400189a:	460d      	mov	r5, r1
3400189c:	b095      	sub	sp, #84	@ 0x54
3400189e:	4606      	mov	r6, r0
340018a0:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340018a2:	2100      	movs	r1, #0
340018a4:	224c      	movs	r2, #76	@ 0x4c
340018a6:	a801      	add	r0, sp, #4
{
340018a8:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
340018aa:	f00c ff2b 	bl	3400e704 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340018ae:	b935      	cbnz	r5, 340018be <MX25UM51245G_ReadCfg2Register+0x26>
  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340018b0:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340018b2:	429c      	cmp	r4, r3
340018b4:	d104      	bne.n	340018c0 <MX25UM51245G_ReadCfg2Register+0x28>
    return MX25UM51245G_ERROR;
340018b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340018ba:	b015      	add	sp, #84	@ 0x54
340018bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340018be:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340018c0:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340018c2:	1e63      	subs	r3, r4, #1
340018c4:	425a      	negs	r2, r3
340018c6:	415a      	adcs	r2, r3
340018c8:	00d3      	lsls	r3, r2, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340018ca:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340018cc:	2d00      	cmp	r5, #0
340018ce:	d034      	beq.n	3400193a <MX25UM51245G_ReadCfg2Register+0xa2>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340018d0:	2310      	movs	r3, #16
340018d2:	f247 118e 	movw	r1, #29070	@ 0x718e
340018d6:	9305      	str	r3, [sp, #20]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340018d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340018dc:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
340018de:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
340018e0:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340018e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340018e6:	2d00      	cmp	r5, #0
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340018e8:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340018ea:	bf14      	ite	ne
340018ec:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
340018f0:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
340018f4:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340018f8:	9103      	str	r1, [sp, #12]
  s_command.Address            = ReadAddr;
340018fa:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340018fc:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
340018fe:	9211      	str	r2, [sp, #68]	@ 0x44
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001900:	d024      	beq.n	3400194c <MX25UM51245G_ReadCfg2Register+0xb4>
34001902:	2c01      	cmp	r4, #1
34001904:	d11d      	bne.n	34001942 <MX25UM51245G_ReadCfg2Register+0xaa>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001906:	2305      	movs	r3, #5
34001908:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400190a:	2202      	movs	r2, #2
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400190c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001910:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001912:	4630      	mov	r0, r6
34001914:	f241 3288 	movw	r2, #5000	@ 0x1388
34001918:	a901      	add	r1, sp, #4
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400191a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400191c:	f009 fae4 	bl	3400aee8 <HAL_XSPI_Command>
34001920:	2800      	cmp	r0, #0
34001922:	d1c8      	bne.n	340018b6 <MX25UM51245G_ReadCfg2Register+0x1e>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001924:	f241 3288 	movw	r2, #5000	@ 0x1388
34001928:	4630      	mov	r0, r6
3400192a:	991a      	ldr	r1, [sp, #104]	@ 0x68
3400192c:	f009 fc38 	bl	3400b1a0 <HAL_XSPI_Receive>
34001930:	3800      	subs	r0, #0
34001932:	bf18      	it	ne
34001934:	2001      	movne	r0, #1
34001936:	4240      	negs	r0, r0
34001938:	e7bf      	b.n	340018ba <MX25UM51245G_ReadCfg2Register+0x22>
3400193a:	2171      	movs	r1, #113	@ 0x71
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400193c:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001940:	e7cc      	b.n	340018dc <MX25UM51245G_ReadCfg2Register+0x44>
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001942:	2304      	movs	r3, #4
34001944:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001946:	2201      	movs	r2, #1
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001948:	2300      	movs	r3, #0
3400194a:	e7e1      	b.n	34001910 <MX25UM51245G_ReadCfg2Register+0x78>
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400194c:	2c01      	cmp	r4, #1
3400194e:	d1fa      	bne.n	34001946 <MX25UM51245G_ReadCfg2Register+0xae>
34001950:	e7db      	b.n	3400190a <MX25UM51245G_ReadCfg2Register+0x72>

34001952 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001952:	b570      	push	{r4, r5, r6, lr}
34001954:	460d      	mov	r5, r1
34001956:	b094      	sub	sp, #80	@ 0x50
34001958:	4606      	mov	r6, r0
3400195a:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400195c:	2100      	movs	r1, #0
3400195e:	224c      	movs	r2, #76	@ 0x4c
34001960:	a801      	add	r0, sp, #4
34001962:	f00c fecf 	bl	3400e704 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001966:	b9d5      	cbnz	r5, 3400199e <MX25UM51245G_ResetEnable+0x4c>
34001968:	2c01      	cmp	r4, #1
3400196a:	d01c      	beq.n	340019a6 <MX25UM51245G_ResetEnable+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400196c:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400196e:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001970:	1e63      	subs	r3, r4, #1
34001972:	425c      	negs	r4, r3
34001974:	415c      	adcs	r4, r3
34001976:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001978:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400197a:	b195      	cbz	r5, 340019a2 <MX25UM51245G_ResetEnable+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400197c:	2310      	movs	r3, #16
3400197e:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
34001980:	f246 6399 	movw	r3, #26265	@ 0x6699
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001984:	f241 3288 	movw	r2, #5000	@ 0x1388
34001988:	4630      	mov	r0, r6
3400198a:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400198c:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400198e:	f009 faab 	bl	3400aee8 <HAL_XSPI_Command>
34001992:	3800      	subs	r0, #0
34001994:	bf18      	it	ne
34001996:	2001      	movne	r0, #1
34001998:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
3400199a:	b014      	add	sp, #80	@ 0x50
3400199c:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400199e:	2304      	movs	r3, #4
340019a0:	e7e5      	b.n	3400196e <MX25UM51245G_ResetEnable+0x1c>
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
340019a2:	2366      	movs	r3, #102	@ 0x66
340019a4:	e7ee      	b.n	34001984 <MX25UM51245G_ResetEnable+0x32>
    return MX25UM51245G_ERROR;
340019a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340019aa:	e7f6      	b.n	3400199a <MX25UM51245G_ResetEnable+0x48>

340019ac <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340019ac:	b570      	push	{r4, r5, r6, lr}
340019ae:	460d      	mov	r5, r1
340019b0:	b094      	sub	sp, #80	@ 0x50
340019b2:	4606      	mov	r6, r0
340019b4:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340019b6:	2100      	movs	r1, #0
340019b8:	224c      	movs	r2, #76	@ 0x4c
340019ba:	a801      	add	r0, sp, #4
340019bc:	f00c fea2 	bl	3400e704 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340019c0:	b9d5      	cbnz	r5, 340019f8 <MX25UM51245G_ResetMemory+0x4c>
340019c2:	2c01      	cmp	r4, #1
340019c4:	d01c      	beq.n	34001a00 <MX25UM51245G_ResetMemory+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340019c6:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340019c8:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340019ca:	1e63      	subs	r3, r4, #1
340019cc:	425c      	negs	r4, r3
340019ce:	415c      	adcs	r4, r3
340019d0:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340019d2:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340019d4:	b195      	cbz	r5, 340019fc <MX25UM51245G_ResetMemory+0x50>
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340019d6:	2310      	movs	r3, #16
340019d8:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
340019da:	f649 1366 	movw	r3, #39270	@ 0x9966
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340019de:	f241 3288 	movw	r2, #5000	@ 0x1388
340019e2:	4630      	mov	r0, r6
340019e4:	a901      	add	r1, sp, #4
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340019e6:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340019e8:	f009 fa7e 	bl	3400aee8 <HAL_XSPI_Command>
340019ec:	3800      	subs	r0, #0
340019ee:	bf18      	it	ne
340019f0:	2001      	movne	r0, #1
340019f2:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340019f4:	b014      	add	sp, #80	@ 0x50
340019f6:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340019f8:	2304      	movs	r3, #4
340019fa:	e7e5      	b.n	340019c8 <MX25UM51245G_ResetMemory+0x1c>
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
340019fc:	2399      	movs	r3, #153	@ 0x99
340019fe:	e7ee      	b.n	340019de <MX25UM51245G_ResetMemory+0x32>
    return MX25UM51245G_ERROR;
34001a00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001a04:	e7f6      	b.n	340019f4 <MX25UM51245G_ResetMemory+0x48>
	...

34001a08 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001a08:	4b04      	ldr	r3, [pc, #16]	@ (34001a1c <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001a0a:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001a0c:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001a10:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001a14:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001a16:	9b01      	ldr	r3, [sp, #4]
}
34001a18:	b002      	add	sp, #8
34001a1a:	4770      	bx	lr
34001a1c:	56028000 	.word	0x56028000

34001a20 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34001a20:	b570      	push	{r4, r5, r6, lr}
34001a22:	4604      	mov	r4, r0
34001a24:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
34001a26:	2002      	movs	r0, #2
34001a28:	f7ff ffee 	bl	34001a08 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001a2c:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001a2e:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001a32:	9303      	str	r3, [sp, #12]
34001a34:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001a36:	2301      	movs	r3, #1
34001a38:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001a3c:	2303      	movs	r3, #3
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001a3e:	4d06      	ldr	r5, [pc, #24]	@ (34001a58 <BSP_SMPS_Init+0x38>)
34001a40:	a901      	add	r1, sp, #4
34001a42:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001a44:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001a46:	f001 fb9f 	bl	34003188 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
34001a4a:	4622      	mov	r2, r4
34001a4c:	4631      	mov	r1, r6
34001a4e:	4628      	mov	r0, r5
34001a50:	f001 fdb2 	bl	340035b8 <HAL_GPIO_WritePin>
}
34001a54:	b006      	add	sp, #24
34001a56:	bd70      	pop	{r4, r5, r6, pc}
34001a58:	56020400 	.word	0x56020400

34001a5c <MX_USART1_Init>:
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
34001a5c:	4a0a      	ldr	r2, [pc, #40]	@ (34001a88 <MX_USART1_Init+0x2c>)
34001a5e:	6812      	ldr	r2, [r2, #0]
34001a60:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
34001a62:	680a      	ldr	r2, [r1, #0]
34001a64:	6042      	str	r2, [r0, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
34001a66:	220c      	movs	r2, #12
34001a68:	6142      	str	r2, [r0, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
34001a6a:	894a      	ldrh	r2, [r1, #10]
34001a6c:	6102      	str	r2, [r0, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
34001a6e:	684a      	ldr	r2, [r1, #4]
34001a70:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
34001a72:	890a      	ldrh	r2, [r1, #8]
34001a74:	60c2      	str	r2, [r0, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
34001a76:	898a      	ldrh	r2, [r1, #12]
34001a78:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
34001a7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34001a7e:	61c2      	str	r2, [r0, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
34001a80:	2200      	movs	r2, #0
34001a82:	6242      	str	r2, [r0, #36]	@ 0x24
  return HAL_UART_Init(huart);
34001a84:	f008 bed8 	b.w	3400a838 <HAL_UART_Init>
34001a88:	34012394 	.word	0x34012394

34001a8c <BSP_COM_Init>:
{
34001a8c:	b570      	push	{r4, r5, r6, lr}
34001a8e:	4604      	mov	r4, r0
  if (COM_Init == NULL)
34001a90:	460d      	mov	r5, r1
{
34001a92:	b086      	sub	sp, #24
  if (COM_Init == NULL)
34001a94:	2900      	cmp	r1, #0
34001a96:	d034      	beq.n	34001b02 <BSP_COM_Init+0x76>
    hcom_uart[COM].Instance = COM_UART[COM];
34001a98:	4b1d      	ldr	r3, [pc, #116]	@ (34001b10 <BSP_COM_Init+0x84>)
34001a9a:	491e      	ldr	r1, [pc, #120]	@ (34001b14 <BSP_COM_Init+0x88>)
34001a9c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
34001aa0:	2394      	movs	r3, #148	@ 0x94
34001aa2:	4343      	muls	r3, r0
34001aa4:	50ca      	str	r2, [r1, r3]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
34001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (34001b18 <BSP_COM_Init+0x8c>)
34001aa8:	429a      	cmp	r2, r3
34001aaa:	d121      	bne.n	34001af0 <BSP_COM_Init+0x64>
  WRITE_REG(RCC->APB2ENSR, Periphs);
34001aac:	2210      	movs	r2, #16
  {
    COM = COM1;
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
34001aae:	2010      	movs	r0, #16
34001ab0:	f7ff ffaa 	bl	34001a08 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
34001ab4:	2008      	movs	r0, #8
34001ab6:	f7ff ffa7 	bl	34001a08 <LL_AHB4_GRP1_EnableClock>
34001aba:	4b18      	ldr	r3, [pc, #96]	@ (34001b1c <BSP_COM_Init+0x90>)
  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001abc:	2607      	movs	r6, #7
34001abe:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
34001ac2:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
34001ac6:	2220      	movs	r2, #32
34001ac8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001aca:	9b00      	ldr	r3, [sp, #0]
34001acc:	2302      	movs	r3, #2
34001ace:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
34001ad2:	9304      	str	r3, [sp, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;
34001ad4:	2301      	movs	r3, #1
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34001ad6:	4812      	ldr	r0, [pc, #72]	@ (34001b20 <BSP_COM_Init+0x94>)
34001ad8:	a901      	add	r1, sp, #4
  GPIO_Init.Pull      = GPIO_PULLUP;
34001ada:	9303      	str	r3, [sp, #12]
  GPIO_Init.Alternate = COM_TX_AF[COM];
34001adc:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34001ade:	f001 fb53 	bl	34003188 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34001ae2:	2340      	movs	r3, #64	@ 0x40
  GPIO_Init.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34001ae4:	480f      	ldr	r0, [pc, #60]	@ (34001b24 <BSP_COM_Init+0x98>)
34001ae6:	a901      	add	r1, sp, #4
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34001ae8:	9301      	str	r3, [sp, #4]
  GPIO_Init.Alternate = COM_RX_AF[COM];
34001aea:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34001aec:	f001 fb4c 	bl	34003188 <HAL_GPIO_Init>
      if (COM == COM1)
34001af0:	b924      	cbnz	r4, 34001afc <BSP_COM_Init+0x70>
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
34001af2:	4629      	mov	r1, r5
34001af4:	4807      	ldr	r0, [pc, #28]	@ (34001b14 <BSP_COM_Init+0x88>)
34001af6:	f7ff ffb1 	bl	34001a5c <MX_USART1_Init>
34001afa:	b928      	cbnz	r0, 34001b08 <BSP_COM_Init+0x7c>
  int32_t status = BSP_ERROR_NONE;
34001afc:	2000      	movs	r0, #0
}
34001afe:	b006      	add	sp, #24
34001b00:	bd70      	pop	{r4, r5, r6, pc}
    status = BSP_ERROR_WRONG_PARAM;
34001b02:	f06f 0001 	mvn.w	r0, #1
34001b06:	e7fa      	b.n	34001afe <BSP_COM_Init+0x72>
          status = BSP_ERROR_PERIPH_FAILURE;
34001b08:	f06f 0003 	mvn.w	r0, #3
  return status;
34001b0c:	e7f7      	b.n	34001afe <BSP_COM_Init+0x72>
34001b0e:	bf00      	nop
34001b10:	34012394 	.word	0x34012394
34001b14:	340125d8 	.word	0x340125d8
34001b18:	52001000 	.word	0x52001000
34001b1c:	56028000 	.word	0x56028000
34001b20:	56021000 	.word	0x56021000
34001b24:	56020c00 	.word	0x56020c00

34001b28 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001b28:	4b04      	ldr	r3, [pc, #16]	@ (34001b3c <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001b2a:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001b2c:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001b30:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001b34:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001b36:	9b01      	ldr	r3, [sp, #4]
}
34001b38:	b002      	add	sp, #8
34001b3a:	4770      	bx	lr
34001b3c:	56028000 	.word	0x56028000

34001b40 <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001b40:	b530      	push	{r4, r5, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001b42:	4c20      	ldr	r4, [pc, #128]	@ (34001bc4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001b44:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001b46:	78a2      	ldrb	r2, [r4, #2]
34001b48:	7861      	ldrb	r1, [r4, #1]
34001b4a:	481f      	ldr	r0, [pc, #124]	@ (34001bc8 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001b4c:	f7ff fdc7 	bl	340016de <MX25UM51245G_WriteEnable>
34001b50:	b118      	cbz	r0, 34001b5a <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001b52:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
34001b56:	b005      	add	sp, #20
34001b58:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001b5a:	9000      	str	r0, [sp, #0]
34001b5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001b60:	78a2      	ldrb	r2, [r4, #2]
34001b62:	7861      	ldrb	r1, [r4, #1]
34001b64:	4818      	ldr	r0, [pc, #96]	@ (34001bc8 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001b66:	f7ff fe44 	bl	340017f2 <MX25UM51245G_WriteCfg2Register>
34001b6a:	2800      	cmp	r0, #0
34001b6c:	d1f1      	bne.n	34001b52 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001b6e:	78a2      	ldrb	r2, [r4, #2]
34001b70:	7861      	ldrb	r1, [r4, #1]
34001b72:	4815      	ldr	r0, [pc, #84]	@ (34001bc8 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001b74:	f7ff fdb3 	bl	340016de <MX25UM51245G_WriteEnable>
34001b78:	4603      	mov	r3, r0
34001b7a:	2800      	cmp	r0, #0
34001b7c:	d1e9      	bne.n	34001b52 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001b7e:	2501      	movs	r5, #1
34001b80:	9500      	str	r5, [sp, #0]
34001b82:	78a2      	ldrb	r2, [r4, #2]
34001b84:	7861      	ldrb	r1, [r4, #1]
34001b86:	4810      	ldr	r0, [pc, #64]	@ (34001bc8 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001b88:	f7ff fe33 	bl	340017f2 <MX25UM51245G_WriteCfg2Register>
34001b8c:	4604      	mov	r4, r0
34001b8e:	2800      	cmp	r0, #0
34001b90:	d1df      	bne.n	34001b52 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001b92:	2028      	movs	r0, #40	@ 0x28
34001b94:	f000 fc18 	bl	340023c8 <HAL_Delay>
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001b98:	4622      	mov	r2, r4
34001b9a:	4629      	mov	r1, r5
34001b9c:	480a      	ldr	r0, [pc, #40]	@ (34001bc8 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001b9e:	f7ff fc83 	bl	340014a8 <MX25UM51245G_AutoPollingMemReady>
34001ba2:	4603      	mov	r3, r0
34001ba4:	2800      	cmp	r0, #0
34001ba6:	d1d4      	bne.n	34001b52 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001ba8:	aa03      	add	r2, sp, #12
34001baa:	9200      	str	r2, [sp, #0]
34001bac:	4629      	mov	r1, r5
34001bae:	4602      	mov	r2, r0
34001bb0:	4805      	ldr	r0, [pc, #20]	@ (34001bc8 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001bb2:	f7ff fe71 	bl	34001898 <MX25UM51245G_ReadCfg2Register>
34001bb6:	2800      	cmp	r0, #0
34001bb8:	d1cb      	bne.n	34001b52 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
34001bba:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001bbe:	42ab      	cmp	r3, r5
34001bc0:	d0c9      	beq.n	34001b56 <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
34001bc2:	e7c6      	b.n	34001b52 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
34001bc4:	34012700 	.word	0x34012700
34001bc8:	34012704 	.word	0x34012704

34001bcc <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001bcc:	b530      	push	{r4, r5, lr}
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001bce:	4d27      	ldr	r5, [pc, #156]	@ (34001c6c <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
34001bd0:	4c27      	ldr	r4, [pc, #156]	@ (34001c70 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001bd2:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001bd4:	4620      	mov	r0, r4
34001bd6:	78aa      	ldrb	r2, [r5, #2]
34001bd8:	7869      	ldrb	r1, [r5, #1]
34001bda:	f7ff fd80 	bl	340016de <MX25UM51245G_WriteEnable>
34001bde:	b118      	cbz	r0, 34001be8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001be0:	f06f 0004 	mvn.w	r0, #4
}
34001be4:	b005      	add	sp, #20
34001be6:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001be8:	9000      	str	r0, [sp, #0]
34001bea:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001bee:	4620      	mov	r0, r4
34001bf0:	78aa      	ldrb	r2, [r5, #2]
34001bf2:	7869      	ldrb	r1, [r5, #1]
34001bf4:	f7ff fdfd 	bl	340017f2 <MX25UM51245G_WriteCfg2Register>
34001bf8:	2800      	cmp	r0, #0
34001bfa:	d1f1      	bne.n	34001be0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001bfc:	4620      	mov	r0, r4
34001bfe:	78aa      	ldrb	r2, [r5, #2]
34001c00:	7869      	ldrb	r1, [r5, #1]
34001c02:	f7ff fd6c 	bl	340016de <MX25UM51245G_WriteEnable>
34001c06:	4603      	mov	r3, r0
34001c08:	2800      	cmp	r0, #0
34001c0a:	d1e9      	bne.n	34001be0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001c0c:	2202      	movs	r2, #2
34001c0e:	9200      	str	r2, [sp, #0]
34001c10:	4620      	mov	r0, r4
34001c12:	78aa      	ldrb	r2, [r5, #2]
34001c14:	7869      	ldrb	r1, [r5, #1]
34001c16:	f7ff fdec 	bl	340017f2 <MX25UM51245G_WriteCfg2Register>
34001c1a:	2800      	cmp	r0, #0
34001c1c:	d1e0      	bne.n	34001be0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001c1e:	2028      	movs	r0, #40	@ 0x28
34001c20:	f000 fbd2 	bl	340023c8 <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34001c24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001c28:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001c2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001c2e:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001c30:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001c32:	f009 f81b 	bl	3400ac6c <HAL_XSPI_Init>
34001c36:	b9a8      	cbnz	r0, 34001c64 <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001c38:	2201      	movs	r2, #1
34001c3a:	4620      	mov	r0, r4
34001c3c:	4611      	mov	r1, r2
34001c3e:	f7ff fc33 	bl	340014a8 <MX25UM51245G_AutoPollingMemReady>
34001c42:	4603      	mov	r3, r0
34001c44:	2800      	cmp	r0, #0
34001c46:	d1cb      	bne.n	34001be0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34001c48:	aa03      	add	r2, sp, #12
34001c4a:	9200      	str	r2, [sp, #0]
34001c4c:	2201      	movs	r2, #1
34001c4e:	4620      	mov	r0, r4
34001c50:	4611      	mov	r1, r2
34001c52:	f7ff fe21 	bl	34001898 <MX25UM51245G_ReadCfg2Register>
34001c56:	2800      	cmp	r0, #0
34001c58:	d1c2      	bne.n	34001be0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
34001c5a:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001c5e:	2b02      	cmp	r3, #2
34001c60:	d0c0      	beq.n	34001be4 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34001c62:	e7bd      	b.n	34001be0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
34001c64:	f06f 0003 	mvn.w	r0, #3
  return ret;
34001c68:	e7bc      	b.n	34001be4 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34001c6a:	bf00      	nop
34001c6c:	34012700 	.word	0x34012700
34001c70:	34012704 	.word	0x34012704

34001c74 <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 4;
34001c74:	2304      	movs	r3, #4
34001c76:	4a0e      	ldr	r2, [pc, #56]	@ (34001cb0 <MX_XSPI_NOR_Init+0x3c>)
34001c78:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34001c7c:	680a      	ldr	r2, [r1, #0]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34001c7e:	2300      	movs	r3, #0
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34001c80:	6102      	str	r2, [r0, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
34001c82:	2202      	movs	r2, #2
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34001c84:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34001c88:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
34001c8a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34001c8e:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34001c90:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34001c92:	6083      	str	r3, [r0, #8]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34001c94:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34001c96:	68ca      	ldr	r2, [r1, #12]
  hxspi->Init.ChipSelectBoundary      = 0;
34001c98:	6303      	str	r3, [r0, #48]	@ 0x30
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34001c9a:	2a01      	cmp	r2, #1
34001c9c:	bf12      	itee	ne
34001c9e:	461a      	movne	r2, r3
34001ca0:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
34001ca4:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34001ca8:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001caa:	62c2      	str	r2, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
34001cac:	f008 bfde 	b.w	3400ac6c <HAL_XSPI_Init>
34001cb0:	5802a000 	.word	0x5802a000

34001cb4 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
{
34001cb4:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001cb6:	b998      	cbnz	r0, 34001ce0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cb8:	4c0b      	ldr	r4, [pc, #44]	@ (34001ce8 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>)
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001cba:	78a3      	ldrb	r3, [r4, #2]
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cbc:	7861      	ldrb	r1, [r4, #1]
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001cbe:	b95b      	cbnz	r3, 34001cd8 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001cc0:	2201      	movs	r2, #1
34001cc2:	480a      	ldr	r0, [pc, #40]	@ (34001cec <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001cc4:	f7ff fc56 	bl	34001574 <MX25UM51245G_EnableSTRMemoryMappedMode>
34001cc8:	b110      	cbz	r0, 34001cd0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001cca:	f06f 0004 	mvn.w	r0, #4
}
34001cce:	bd10      	pop	{r4, pc}
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001cd0:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
34001cd2:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001cd4:	7023      	strb	r3, [r4, #0]
34001cd6:	e7fa      	b.n	34001cce <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
34001cd8:	4804      	ldr	r0, [pc, #16]	@ (34001cec <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001cda:	f7ff fcb0 	bl	3400163e <MX25UM51245G_EnableDTRMemoryMappedMode>
34001cde:	e7f3      	b.n	34001cc8 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
34001ce0:	f06f 0001 	mvn.w	r0, #1
  return ret;
34001ce4:	e7f3      	b.n	34001cce <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
34001ce6:	bf00      	nop
34001ce8:	34012700 	.word	0x34012700
34001cec:	34012704 	.word	0x34012704

34001cf0 <BSP_XSPI_NOR_ConfigFlash>:
{
34001cf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34001cf4:	460d      	mov	r5, r1
34001cf6:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001cf8:	2800      	cmp	r0, #0
34001cfa:	d15d      	bne.n	34001db8 <BSP_XSPI_NOR_ConfigFlash+0xc8>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
34001cfc:	4c31      	ldr	r4, [pc, #196]	@ (34001dc4 <BSP_XSPI_NOR_ConfigFlash+0xd4>)
34001cfe:	7823      	ldrb	r3, [r4, #0]
34001d00:	2b02      	cmp	r3, #2
34001d02:	d05c      	beq.n	34001dbe <BSP_XSPI_NOR_ConfigFlash+0xce>
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
34001d04:	7863      	ldrb	r3, [r4, #1]
34001d06:	2b01      	cmp	r3, #1
34001d08:	d14d      	bne.n	34001da6 <BSP_XSPI_NOR_ConfigFlash+0xb6>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
34001d0a:	2901      	cmp	r1, #1
34001d0c:	78a2      	ldrb	r2, [r4, #2]
34001d0e:	d109      	bne.n	34001d24 <BSP_XSPI_NOR_ConfigFlash+0x34>
34001d10:	4296      	cmp	r6, r2
34001d12:	d107      	bne.n	34001d24 <BSP_XSPI_NOR_ConfigFlash+0x34>
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001d14:	2301      	movs	r3, #1
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001d16:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001d18:	7023      	strb	r3, [r4, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
34001d1a:	7065      	strb	r5, [r4, #1]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001d1c:	70a6      	strb	r6, [r4, #2]
}
34001d1e:	b004      	add	sp, #16
34001d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d24:	4f28      	ldr	r7, [pc, #160]	@ (34001dc8 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001d26:	2101      	movs	r1, #1
34001d28:	4638      	mov	r0, r7
34001d2a:	f7ff fcd8 	bl	340016de <MX25UM51245G_WriteEnable>
34001d2e:	4603      	mov	r3, r0
34001d30:	b9b0      	cbnz	r0, 34001d60 <BSP_XSPI_NOR_ConfigFlash+0x70>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d32:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
34001d34:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001d38:	78a2      	ldrb	r2, [r4, #2]
34001d3a:	4638      	mov	r0, r7
34001d3c:	7861      	ldrb	r1, [r4, #1]
34001d3e:	f7ff fd58 	bl	340017f2 <MX25UM51245G_WriteCfg2Register>
34001d42:	4680      	mov	r8, r0
34001d44:	b960      	cbnz	r0, 34001d60 <BSP_XSPI_NOR_ConfigFlash+0x70>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001d46:	2028      	movs	r0, #40	@ 0x28
34001d48:	f000 fb3e 	bl	340023c8 <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
34001d4c:	78a3      	ldrb	r3, [r4, #2]
34001d4e:	2b01      	cmp	r3, #1
34001d50:	d009      	beq.n	34001d66 <BSP_XSPI_NOR_ConfigFlash+0x76>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001d52:	2200      	movs	r2, #0
34001d54:	481c      	ldr	r0, [pc, #112]	@ (34001dc8 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001d56:	4611      	mov	r1, r2
34001d58:	f7ff fba6 	bl	340014a8 <MX25UM51245G_AutoPollingMemReady>
34001d5c:	4603      	mov	r3, r0
34001d5e:	b170      	cbz	r0, 34001d7e <BSP_XSPI_NOR_ConfigFlash+0x8e>
            ret = XSPI_NOR_ExitOPIMode(Instance);
34001d60:	f06f 0004 	mvn.w	r0, #4
34001d64:	e7db      	b.n	34001d1e <BSP_XSPI_NOR_ConfigFlash+0x2e>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001d66:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34001d68:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34001d6c:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001d70:	f008 ff7c 	bl	3400ac6c <HAL_XSPI_Init>
34001d74:	2800      	cmp	r0, #0
34001d76:	d0ec      	beq.n	34001d52 <BSP_XSPI_NOR_ConfigFlash+0x62>
            ret = XSPI_NOR_ExitOPIMode(Instance);
34001d78:	f06f 0003 	mvn.w	r0, #3
34001d7c:	e7cf      	b.n	34001d1e <BSP_XSPI_NOR_ConfigFlash+0x2e>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001d7e:	aa03      	add	r2, sp, #12
34001d80:	4601      	mov	r1, r0
34001d82:	9200      	str	r2, [sp, #0]
34001d84:	4602      	mov	r2, r0
34001d86:	4810      	ldr	r0, [pc, #64]	@ (34001dc8 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001d88:	f7ff fd86 	bl	34001898 <MX25UM51245G_ReadCfg2Register>
34001d8c:	2800      	cmp	r0, #0
34001d8e:	d1e7      	bne.n	34001d60 <BSP_XSPI_NOR_ConfigFlash+0x70>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
34001d90:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001d94:	2b00      	cmp	r3, #0
34001d96:	d1e3      	bne.n	34001d60 <BSP_XSPI_NOR_ConfigFlash+0x70>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34001d98:	2d01      	cmp	r5, #1
34001d9a:	d1bb      	bne.n	34001d14 <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001d9c:	78a3      	ldrb	r3, [r4, #2]
34001d9e:	b933      	cbnz	r3, 34001dae <BSP_XSPI_NOR_ConfigFlash+0xbe>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34001da0:	f7ff ff14 	bl	34001bcc <XSPI_NOR_EnterDOPIMode.constprop.0>
34001da4:	e005      	b.n	34001db2 <BSP_XSPI_NOR_ConfigFlash+0xc2>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34001da6:	2901      	cmp	r1, #1
34001da8:	d1b4      	bne.n	34001d14 <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
34001daa:	2a00      	cmp	r2, #0
34001dac:	d1f8      	bne.n	34001da0 <BSP_XSPI_NOR_ConfigFlash+0xb0>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34001dae:	f7ff fec7 	bl	34001b40 <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
34001db2:	2800      	cmp	r0, #0
34001db4:	d1b3      	bne.n	34001d1e <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001db6:	e7ad      	b.n	34001d14 <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
34001db8:	f06f 0001 	mvn.w	r0, #1
34001dbc:	e7af      	b.n	34001d1e <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34001dbe:	f06f 0019 	mvn.w	r0, #25
  return ret;
34001dc2:	e7ac      	b.n	34001d1e <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001dc4:	34012700 	.word	0x34012700
34001dc8:	34012704 	.word	0x34012704

34001dcc <BSP_XSPI_NOR_Init>:
{
34001dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34001dd0:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001dd2:	4604      	mov	r4, r0
34001dd4:	4e86      	ldr	r6, [pc, #536]	@ (34001ff0 <BSP_XSPI_NOR_Init+0x224>)
{
34001dd6:	b08f      	sub	sp, #60	@ 0x3c
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001dd8:	2800      	cmp	r0, #0
34001dda:	f040 8102 	bne.w	34001fe2 <BSP_XSPI_NOR_Init+0x216>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34001dde:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 34002000 <BSP_XSPI_NOR_Init+0x234>
34001de2:	f898 3000 	ldrb.w	r3, [r8]
34001de6:	b153      	cbz	r3, 34001dfe <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
34001de8:	2500      	movs	r5, #0
  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34001dea:	2064      	movs	r0, #100	@ 0x64
34001dec:	2100      	movs	r1, #0
34001dee:	fb00 6004 	mla	r0, r0, r4, r6
34001df2:	f009 fb15 	bl	3400b420 <HAL_XSPI_SetClockPrescaler>
}
34001df6:	4628      	mov	r0, r5
34001df8:	b00f      	add	sp, #60	@ 0x3c
34001dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001dfe:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
34001e02:	4f7c      	ldr	r7, [pc, #496]	@ (34001ff4 <BSP_XSPI_NOR_Init+0x228>)
  __HAL_RCC_PWR_CLK_ENABLE();
34001e04:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34001e08:	f8c7 5a60 	str.w	r5, [r7, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001e0c:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001e10:	f04f 0b03 	mov.w	fp, #3
34001e14:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001e16:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
34001e18:	f7ff fe86 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34001e1c:	f002 f870 	bl	34003f00 <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34001e20:	2101      	movs	r1, #1
34001e22:	2002      	movs	r0, #2
34001e24:	f002 f826 	bl	34003e74 <HAL_PWREx_ConfigVddIORange>
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001e28:	4b73      	ldr	r3, [pc, #460]	@ (34001ff8 <BSP_XSPI_NOR_Init+0x22c>)
  XSPI_CLK_GPIO_CLK_ENABLE();
34001e2a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001e2e:	f8c7 5a20 	str.w	r5, [r7, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001e32:	f8c3 5220 	str.w	r5, [r3, #544]	@ 0x220
34001e36:	f7ff fe77 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001e3a:	2509      	movs	r5, #9
  XSPI_DQS_GPIO_CLK_ENABLE();
34001e3c:	f7ff fe74 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001e40:	2701      	movs	r7, #1
  XSPI_CS_GPIO_CLK_ENABLE();
34001e42:	f7ff fe71 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
34001e46:	f7ff fe6f 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34001e4a:	f7ff fe6d 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
34001e4e:	f7ff fe6b 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34001e52:	f7ff fe69 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
34001e56:	f7ff fe67 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34001e5a:	f7ff fe65 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34001e5e:	f7ff fe63 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34001e62:	f7ff fe61 	bl	34001b28 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
34001e66:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001e68:	4864      	ldr	r0, [pc, #400]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001e6a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34001e6c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001e70:	e9cd 7b07 	strd	r7, fp, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001e74:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001e76:	f001 f987 	bl	34003188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001e7a:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001e7c:	485f      	ldr	r0, [pc, #380]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001e7e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001e80:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34001e82:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34001e84:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001e86:	f001 f97f 	bl	34003188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34001e8a:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34001e8c:	485b      	ldr	r0, [pc, #364]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001e8e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34001e90:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
34001e92:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34001e94:	f001 f978 	bl	34003188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34001e98:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34001e9a:	4858      	ldr	r0, [pc, #352]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001e9c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34001e9e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34001ea0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34001ea2:	f001 f971 	bl	34003188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34001ea6:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34001ea8:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34001eac:	4853      	ldr	r0, [pc, #332]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001eae:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34001eb0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
34001eb2:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34001eb4:	f001 f968 	bl	34003188 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34001eb8:	4850      	ldr	r0, [pc, #320]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001eba:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34001ebc:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34001ec0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34001ec2:	f001 f961 	bl	34003188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34001ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34001eca:	484c      	ldr	r0, [pc, #304]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001ecc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34001ece:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
34001ed0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34001ed2:	f001 f959 	bl	34003188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34001ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34001eda:	4848      	ldr	r0, [pc, #288]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001edc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34001ede:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
34001ee0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34001ee2:	f001 f951 	bl	34003188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34001ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34001eea:	4844      	ldr	r0, [pc, #272]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001eec:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34001eee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
34001ef0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34001ef2:	f001 f949 	bl	34003188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34001ef6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34001efa:	4840      	ldr	r0, [pc, #256]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001efc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34001efe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
34001f00:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34001f02:	f001 f941 	bl	34003188 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34001f06:	483d      	ldr	r0, [pc, #244]	@ (34001ffc <BSP_XSPI_NOR_Init+0x230>)
34001f08:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
34001f0a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
34001f0c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34001f0e:	f001 f93b 	bl	34003188 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
34001f12:	4622      	mov	r2, r4
34001f14:	210f      	movs	r1, #15
34001f16:	20aa      	movs	r0, #170	@ 0xaa
34001f18:	f000 fb9c 	bl	34002654 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
34001f1c:	20aa      	movs	r0, #170	@ 0xaa
34001f1e:	f000 fbf7 	bl	34002710 <HAL_NVIC_EnableIRQ>
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
34001f22:	a805      	add	r0, sp, #20
34001f24:	f7ff faa7 	bl	34001476 <MX25UM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34001f28:	9b05      	ldr	r3, [sp, #20]
34001f2a:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
34001f2e:	2b00      	cmp	r3, #0
34001f30:	fab3 f283 	clz	r2, r3
34001f34:	bf08      	it	eq
34001f36:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34001f38:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001f3c:	4630      	mov	r0, r6
34001f3e:	a901      	add	r1, sp, #4
      xspi_init.ClockPrescaler = 3;
34001f40:	f8cd b008 	str.w	fp, [sp, #8]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
34001f44:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34001f46:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34001f48:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001f4a:	f7ff fe93 	bl	34001c74 <MX_XSPI_NOR_Init>
34001f4e:	2800      	cmp	r0, #0
34001f50:	d14a      	bne.n	34001fe8 <BSP_XSPI_NOR_Init+0x21c>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001f52:	4622      	mov	r2, r4
34001f54:	4621      	mov	r1, r4
34001f56:	4630      	mov	r0, r6
34001f58:	f7ff fcfb 	bl	34001952 <MX25UM51245G_ResetEnable>
34001f5c:	b110      	cbz	r0, 34001f64 <BSP_XSPI_NOR_Init+0x198>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001f5e:	f06f 0504 	mvn.w	r5, #4
34001f62:	e742      	b.n	34001dea <BSP_XSPI_NOR_Init+0x1e>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001f64:	4622      	mov	r2, r4
34001f66:	4621      	mov	r1, r4
34001f68:	4630      	mov	r0, r6
34001f6a:	f7ff fd1f 	bl	340019ac <MX25UM51245G_ResetMemory>
34001f6e:	2800      	cmp	r0, #0
34001f70:	d1f5      	bne.n	34001f5e <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001f72:	4622      	mov	r2, r4
34001f74:	4639      	mov	r1, r7
34001f76:	4630      	mov	r0, r6
34001f78:	f7ff fceb 	bl	34001952 <MX25UM51245G_ResetEnable>
34001f7c:	2800      	cmp	r0, #0
34001f7e:	d1ee      	bne.n	34001f5e <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001f80:	4622      	mov	r2, r4
34001f82:	4639      	mov	r1, r7
34001f84:	4630      	mov	r0, r6
34001f86:	f7ff fd11 	bl	340019ac <MX25UM51245G_ResetMemory>
34001f8a:	2800      	cmp	r0, #0
34001f8c:	d1e7      	bne.n	34001f5e <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001f8e:	463a      	mov	r2, r7
34001f90:	4639      	mov	r1, r7
34001f92:	4630      	mov	r0, r6
34001f94:	f7ff fcdd 	bl	34001952 <MX25UM51245G_ResetEnable>
34001f98:	2800      	cmp	r0, #0
34001f9a:	d1e0      	bne.n	34001f5e <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001f9c:	463a      	mov	r2, r7
34001f9e:	4639      	mov	r1, r7
34001fa0:	4630      	mov	r0, r6
34001fa2:	f7ff fd03 	bl	340019ac <MX25UM51245G_ResetMemory>
34001fa6:	2800      	cmp	r0, #0
34001fa8:	d1d9      	bne.n	34001f5e <BSP_XSPI_NOR_Init+0x192>
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34001faa:	2064      	movs	r0, #100	@ 0x64
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34001fac:	f888 7000 	strb.w	r7, [r8]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
34001fb0:	f888 4001 	strb.w	r4, [r8, #1]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
34001fb4:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34001fb8:	f000 fa06 	bl	340023c8 <HAL_Delay>
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001fbc:	4630      	mov	r0, r6
34001fbe:	f898 2002 	ldrb.w	r2, [r8, #2]
34001fc2:	f898 1001 	ldrb.w	r1, [r8, #1]
34001fc6:	f7ff fa6f 	bl	340014a8 <MX25UM51245G_AutoPollingMemReady>
34001fca:	2800      	cmp	r0, #0
34001fcc:	d1c7      	bne.n	34001f5e <BSP_XSPI_NOR_Init+0x192>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
34001fce:	f899 2001 	ldrb.w	r2, [r9, #1]
34001fd2:	f899 1000 	ldrb.w	r1, [r9]
34001fd6:	f7ff fe8b 	bl	34001cf0 <BSP_XSPI_NOR_ConfigFlash>
34001fda:	2800      	cmp	r0, #0
34001fdc:	f43f af04 	beq.w	34001de8 <BSP_XSPI_NOR_Init+0x1c>
34001fe0:	e7bd      	b.n	34001f5e <BSP_XSPI_NOR_Init+0x192>
    ret = BSP_ERROR_WRONG_PARAM;
34001fe2:	f06f 0501 	mvn.w	r5, #1
34001fe6:	e700      	b.n	34001dea <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
34001fe8:	f06f 0503 	mvn.w	r5, #3
34001fec:	e6fd      	b.n	34001dea <BSP_XSPI_NOR_Init+0x1e>
34001fee:	bf00      	nop
34001ff0:	34012704 	.word	0x34012704
34001ff4:	56028000 	.word	0x56028000
34001ff8:	56029000 	.word	0x56029000
34001ffc:	56023400 	.word	0x56023400
34002000:	34012700 	.word	0x34012700

34002004 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34002004:	4b44      	ldr	r3, [pc, #272]	@ (34002118 <SystemInit+0x114>)
34002006:	4a45      	ldr	r2, [pc, #276]	@ (3400211c <SystemInit+0x118>)
{
34002008:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400200a:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
3400200c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
3400200e:	2502      	movs	r5, #2
  SAU->RNR = 0;
34002010:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34002012:	4943      	ldr	r1, [pc, #268]	@ (34002120 <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34002014:	4e43      	ldr	r6, [pc, #268]	@ (34002124 <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34002016:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400201a:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3400201e:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34002022:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
34002026:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
3400202a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400202e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
34002032:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34002036:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400203a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
3400203e:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
34002042:	2503      	movs	r5, #3
  SAU->RBAR = 0;
34002044:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002048:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
3400204c:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
34002050:	2504      	movs	r5, #4
  SAU->RBAR = 0;
34002052:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002056:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
3400205a:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
3400205e:	2505      	movs	r5, #5
  SAU->RBAR = 0;
34002060:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002064:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
34002068:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
3400206c:	2506      	movs	r5, #6
  SAU->RBAR = 0;
3400206e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002072:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
34002076:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
3400207a:	2507      	movs	r5, #7
  SAU->RBAR = 0;
3400207c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002080:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
34002084:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34002088:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400208c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34002090:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
34002094:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
34002098:	689a      	ldr	r2, [r3, #8]
3400209a:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
3400209c:	4a22      	ldr	r2, [pc, #136]	@ (34002128 <SystemInit+0x124>)
3400209e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
340020a0:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
340020a4:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
340020a6:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
340020a8:	f045 0510 	orr.w	r5, r5, #16
340020ac:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
340020ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
340020b0:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
340020b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340020b8:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
340020bc:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
340020c0:	f042 0210 	orr.w	r2, r2, #16
340020c4:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
340020c8:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
340020cc:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
340020d0:	f022 0210 	bic.w	r2, r2, #16
340020d4:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
340020d8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
340020dc:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
340020e0:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
340020e4:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
340020e6:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
340020ea:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
340020ee:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
340020f2:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
340020f6:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
340020f8:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
340020fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
34002100:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
34002104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34002108:	4a08      	ldr	r2, [pc, #32]	@ (3400212c <SystemInit+0x128>)
3400210a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
3400210e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34002112:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34002116:	bd70      	pop	{r4, r5, r6, pc}
34002118:	e000ed00 	.word	0xe000ed00
3400211c:	34000400 	.word	0x34000400
34002120:	56028000 	.word	0x56028000
34002124:	56008000 	.word	0x56008000
34002128:	56024800 	.word	0x56024800
3400212c:	e002ed00 	.word	0xe002ed00

34002130 <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34002130:	4b6e      	ldr	r3, [pc, #440]	@ (340022ec <SystemCoreClockUpdate+0x1bc>)
{
34002132:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34002134:	6a1a      	ldr	r2, [r3, #32]
34002136:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
3400213a:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
3400213e:	f000 80b8 	beq.w	340022b2 <SystemCoreClockUpdate+0x182>
34002142:	d806      	bhi.n	34002152 <SystemCoreClockUpdate+0x22>
34002144:	b962      	cbnz	r2, 34002160 <SystemCoreClockUpdate+0x30>
  {
  case 0:  /* HSI used as system clock source (default after reset) */
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34002146:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34002148:	4b69      	ldr	r3, [pc, #420]	@ (340022f0 <SystemCoreClockUpdate+0x1c0>)
3400214a:	f3c2 12c1 	ubfx	r2, r2, #7, #2
3400214e:	40d3      	lsrs	r3, r2
    break;
34002150:	e003      	b.n	3400215a <SystemCoreClockUpdate+0x2a>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34002152:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34002156:	d00b      	beq.n	34002170 <SystemCoreClockUpdate+0x40>
  uint32_t sysclk = 0;
34002158:	2300      	movs	r3, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
3400215a:	4a66      	ldr	r2, [pc, #408]	@ (340022f4 <SystemCoreClockUpdate+0x1c4>)
3400215c:	6013      	str	r3, [r2, #0]
}
3400215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
34002162:	4a65      	ldr	r2, [pc, #404]	@ (340022f8 <SystemCoreClockUpdate+0x1c8>)
34002164:	f413 7f00 	tst.w	r3, #512	@ 0x200
34002168:	4b64      	ldr	r3, [pc, #400]	@ (340022fc <SystemCoreClockUpdate+0x1cc>)
3400216a:	bf08      	it	eq
3400216c:	4613      	moveq	r3, r2
3400216e:	e7f4      	b.n	3400215a <SystemCoreClockUpdate+0x2a>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34002170:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
34002174:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34002178:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
3400217c:	d02a      	beq.n	340021d4 <SystemCoreClockUpdate+0xa4>
3400217e:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34002182:	d036      	beq.n	340021f2 <SystemCoreClockUpdate+0xc2>
34002184:	2a00      	cmp	r2, #0
34002186:	d143      	bne.n	34002210 <SystemCoreClockUpdate+0xe0>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34002188:	f8d3 7080 	ldr.w	r7, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
3400218c:	013d      	lsls	r5, r7, #4
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
3400218e:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002192:	f100 8096 	bmi.w	340022c2 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34002196:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
3400219a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3400219e:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
340021a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
340021a6:	460e      	mov	r6, r1
    switch (pllsource)
340021a8:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
340021ac:	f3c2 65c2 	ubfx	r5, r2, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
340021b0:	f3c7 5105 	ubfx	r1, r7, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
340021b4:	f3c2 6202 	ubfx	r2, r2, #24, #3
    switch (pllsource)
340021b8:	d04f      	beq.n	3400225a <SystemCoreClockUpdate+0x12a>
340021ba:	d87c      	bhi.n	340022b6 <SystemCoreClockUpdate+0x186>
340021bc:	2e00      	cmp	r6, #0
340021be:	d03c      	beq.n	3400223a <SystemCoreClockUpdate+0x10a>
340021c0:	2600      	movs	r6, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340021c2:	4b4a      	ldr	r3, [pc, #296]	@ (340022ec <SystemCoreClockUpdate+0x1bc>)
        sysclk = MSI_VALUE;
340021c4:	4f4c      	ldr	r7, [pc, #304]	@ (340022f8 <SystemCoreClockUpdate+0x1c8>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        sysclk = MSI_VALUE;
340021c8:	f413 7f00 	tst.w	r3, #512	@ 0x200
340021cc:	4b4b      	ldr	r3, [pc, #300]	@ (340022fc <SystemCoreClockUpdate+0x1cc>)
340021ce:	bf08      	it	eq
340021d0:	463b      	moveq	r3, r7
340021d2:	e038      	b.n	34002246 <SystemCoreClockUpdate+0x116>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
340021d4:	f8d3 7090 	ldr.w	r7, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
340021d8:	013c      	lsls	r4, r7, #4
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
340021da:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340021de:	d470      	bmi.n	340022c2 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340021e0:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
340021e4:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
340021e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340021ec:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
340021f0:	e7d9      	b.n	340021a6 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
340021f2:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
340021f6:	0138      	lsls	r0, r7, #4
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
340021f8:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340021fc:	d461      	bmi.n	340022c2 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
340021fe:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
34002202:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34002206:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
3400220a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
3400220e:	e7ca      	b.n	340021a6 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34002210:	f8d3 70b0 	ldr.w	r7, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
34002214:	013a      	lsls	r2, r7, #4
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34002216:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400221a:	d452      	bmi.n	340022c2 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
3400221c:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34002220:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34002224:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34002228:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
3400222c:	e7bb      	b.n	340021a6 <SystemCoreClockUpdate+0x76>
    switch (pllsource)
3400222e:	460a      	mov	r2, r1
34002230:	460d      	mov	r5, r1
34002232:	4608      	mov	r0, r1
34002234:	460c      	mov	r4, r1
34002236:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3400223a:	4b2c      	ldr	r3, [pc, #176]	@ (340022ec <SystemCoreClockUpdate+0x1bc>)
3400223c:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
3400223e:	4b2c      	ldr	r3, [pc, #176]	@ (340022f0 <SystemCoreClockUpdate+0x1c0>)
34002240:	f3c7 17c1 	ubfx	r7, r7, #7, #2
34002244:	40fb      	lsrs	r3, r7
    if (pllbypass == 0U)
34002246:	b14e      	cbz	r6, 3400225c <SystemCoreClockUpdate+0x12c>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34002248:	4a28      	ldr	r2, [pc, #160]	@ (340022ec <SystemCoreClockUpdate+0x1bc>)
3400224a:	f8d2 20c4 	ldr.w	r2, [r2, #196]	@ 0xc4
3400224e:	f3c2 4207 	ubfx	r2, r2, #16, #8
34002252:	3201      	adds	r2, #1
    sysclk = sysclk / ic_divider;
34002254:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
34002258:	e77f      	b.n	3400215a <SystemCoreClockUpdate+0x2a>
      sysclk = HSE_VALUE;
3400225a:	4b29      	ldr	r3, [pc, #164]	@ (34002300 <SystemCoreClockUpdate+0x1d0>)
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
3400225c:	ee07 0a10 	vmov	s14, r0
34002260:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
34002264:	ee07 4a10 	vmov	s14, r4
34002268:	ee07 3a90 	vmov	s15, r3
3400226c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 34002304 <SystemCoreClockUpdate+0x1d4>
34002270:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34002274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34002278:	eea6 7a26 	vfma.f32	s14, s12, s13
3400227c:	ee67 7a87 	vmul.f32	s15, s15, s14
34002280:	ee07 1a10 	vmov	s14, r1
34002284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34002288:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
3400228c:	ee07 5a90 	vmov	s15, r5
34002290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
34002294:	ee07 2a90 	vmov	s15, r2
34002298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400229c:	ee27 7a27 	vmul.f32	s14, s14, s15
340022a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
340022a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340022a8:	ee17 3a90 	vmov	r3, s15
340022ac:	e7cc      	b.n	34002248 <SystemCoreClockUpdate+0x118>
      sysclk = HSE_VALUE;
340022ae:	4b14      	ldr	r3, [pc, #80]	@ (34002300 <SystemCoreClockUpdate+0x1d0>)
340022b0:	e7ca      	b.n	34002248 <SystemCoreClockUpdate+0x118>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340022b2:	4b13      	ldr	r3, [pc, #76]	@ (34002300 <SystemCoreClockUpdate+0x1d0>)
340022b4:	e751      	b.n	3400215a <SystemCoreClockUpdate+0x2a>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
340022b6:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
340022ba:	4b13      	ldr	r3, [pc, #76]	@ (34002308 <SystemCoreClockUpdate+0x1d8>)
340022bc:	bf18      	it	ne
340022be:	2300      	movne	r3, #0
340022c0:	e7cc      	b.n	3400225c <SystemCoreClockUpdate+0x12c>
    switch (pllsource)
340022c2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
340022c6:	d0f2      	beq.n	340022ae <SystemCoreClockUpdate+0x17e>
340022c8:	d809      	bhi.n	340022de <SystemCoreClockUpdate+0x1ae>
340022ca:	2900      	cmp	r1, #0
340022cc:	d0af      	beq.n	3400222e <SystemCoreClockUpdate+0xfe>
340022ce:	2200      	movs	r2, #0
340022d0:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
340022d4:	4615      	mov	r5, r2
340022d6:	4610      	mov	r0, r2
340022d8:	4614      	mov	r4, r2
340022da:	4611      	mov	r1, r2
340022dc:	e771      	b.n	340021c2 <SystemCoreClockUpdate+0x92>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
340022de:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
340022e2:	4b09      	ldr	r3, [pc, #36]	@ (34002308 <SystemCoreClockUpdate+0x1d8>)
340022e4:	bf18      	it	ne
340022e6:	2300      	movne	r3, #0
340022e8:	e7ae      	b.n	34002248 <SystemCoreClockUpdate+0x118>
340022ea:	bf00      	nop
340022ec:	56028000 	.word	0x56028000
340022f0:	03d09000 	.word	0x03d09000
340022f4:	3401239c 	.word	0x3401239c
340022f8:	003d0900 	.word	0x003d0900
340022fc:	00f42400 	.word	0x00f42400
34002300:	02dc6c00 	.word	0x02dc6c00
34002304:	33800000 	.word	0x33800000
34002308:	00bb8000 	.word	0x00bb8000

3400230c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
3400230c:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34002310:	b500      	push	{lr}
  SystemCoreClockUpdate();
34002312:	f7ff ff0d 	bl	34002130 <SystemCoreClockUpdate>

  return SystemCoreClock;
}
34002316:	4b05      	ldr	r3, [pc, #20]	@ (3400232c <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
34002318:	f85d eb04 	ldr.w	lr, [sp], #4
3400231c:	6818      	ldr	r0, [r3, #0]
3400231e:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34002322:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34002326:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
3400232a:	4774      	bxns	lr
3400232c:	3401239c 	.word	0x3401239c

34002330 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
34002330:	4770      	bx	lr
	...

34002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34002334:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34002336:	4b0f      	ldr	r3, [pc, #60]	@ (34002374 <HAL_InitTick+0x40>)
{
34002338:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq == 0UL)
3400233a:	781a      	ldrb	r2, [r3, #0]
3400233c:	b90a      	cbnz	r2, 34002342 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
3400233e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
34002340:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34002342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34002346:	fbb3 f3f2 	udiv	r3, r3, r2
3400234a:	4a0b      	ldr	r2, [pc, #44]	@ (34002378 <HAL_InitTick+0x44>)
3400234c:	6810      	ldr	r0, [r2, #0]
3400234e:	fbb0 f0f3 	udiv	r0, r0, r3
34002352:	f000 f9f1 	bl	34002738 <HAL_SYSTICK_Config>
34002356:	4604      	mov	r4, r0
34002358:	2800      	cmp	r0, #0
3400235a:	d1f0      	bne.n	3400233e <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
3400235c:	2d0f      	cmp	r5, #15
3400235e:	d8ee      	bhi.n	3400233e <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34002360:	4602      	mov	r2, r0
34002362:	4629      	mov	r1, r5
34002364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34002368:	f000 f974 	bl	34002654 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
3400236c:	4b03      	ldr	r3, [pc, #12]	@ (3400237c <HAL_InitTick+0x48>)
3400236e:	4620      	mov	r0, r4
34002370:	601d      	str	r5, [r3, #0]
  return HAL_OK;
34002372:	e7e5      	b.n	34002340 <HAL_InitTick+0xc>
34002374:	340123a0 	.word	0x340123a0
34002378:	3401239c 	.word	0x3401239c
3400237c:	340123a4 	.word	0x340123a4

34002380 <HAL_Init>:
{
34002380:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34002382:	2003      	movs	r0, #3
34002384:	f000 f948 	bl	34002618 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
34002388:	f7ff fed2 	bl	34002130 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
3400238c:	200f      	movs	r0, #15
3400238e:	f7ff ffd1 	bl	34002334 <HAL_InitTick>
34002392:	4604      	mov	r4, r0
34002394:	b918      	cbnz	r0, 3400239e <HAL_Init+0x1e>
  HAL_MspInit();
34002396:	f7ff ffcb 	bl	34002330 <HAL_MspInit>
}
3400239a:	4620      	mov	r0, r4
3400239c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3400239e:	2401      	movs	r4, #1
340023a0:	e7fb      	b.n	3400239a <HAL_Init+0x1a>
	...

340023a4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
340023a4:	4a03      	ldr	r2, [pc, #12]	@ (340023b4 <HAL_IncTick+0x10>)
340023a6:	4b04      	ldr	r3, [pc, #16]	@ (340023b8 <HAL_IncTick+0x14>)
340023a8:	6811      	ldr	r1, [r2, #0]
340023aa:	781b      	ldrb	r3, [r3, #0]
340023ac:	440b      	add	r3, r1
340023ae:	6013      	str	r3, [r2, #0]
}
340023b0:	4770      	bx	lr
340023b2:	bf00      	nop
340023b4:	34012768 	.word	0x34012768
340023b8:	340123a0 	.word	0x340123a0

340023bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
340023bc:	4b01      	ldr	r3, [pc, #4]	@ (340023c4 <HAL_GetTick+0x8>)
340023be:	6818      	ldr	r0, [r3, #0]
}
340023c0:	4770      	bx	lr
340023c2:	bf00      	nop
340023c4:	34012768 	.word	0x34012768

340023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
340023c8:	b538      	push	{r3, r4, r5, lr}
340023ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
340023cc:	f7ff fff6 	bl	340023bc <HAL_GetTick>
340023d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
340023d2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
340023d4:	bf1e      	ittt	ne
340023d6:	4b04      	ldrne	r3, [pc, #16]	@ (340023e8 <HAL_Delay+0x20>)
340023d8:	781b      	ldrbne	r3, [r3, #0]
340023da:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
340023dc:	f7ff ffee 	bl	340023bc <HAL_GetTick>
340023e0:	1b43      	subs	r3, r0, r5
340023e2:	42a3      	cmp	r3, r4
340023e4:	d3fa      	bcc.n	340023dc <HAL_Delay+0x14>
  {
  }
}
340023e6:	bd38      	pop	{r3, r4, r5, pc}
340023e8:	340123a0 	.word	0x340123a0

340023ec <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
340023ec:	b570      	push	{r4, r5, r6, lr}
340023ee:	4604      	mov	r4, r0
340023f0:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
340023f2:	f7ff ffe3 	bl	340023bc <HAL_GetTick>
340023f6:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
340023f8:	b12c      	cbz	r4, 34002406 <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
340023fa:	6822      	ldr	r2, [r4, #0]
340023fc:	4b1b      	ldr	r3, [pc, #108]	@ (3400246c <HAL_BSEC_OTP_Reload+0x80>)
340023fe:	429a      	cmp	r2, r3
34002400:	d003      	beq.n	3400240a <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34002402:	2301      	movs	r3, #1
34002404:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
34002406:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
34002408:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
3400240a:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
3400240e:	d2f8      	bcs.n	34002402 <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
34002410:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34002412:	f503 7308 	add.w	r3, r3, #544	@ 0x220
34002416:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400241a:	2301      	movs	r3, #1
3400241c:	f005 001f 	and.w	r0, r5, #31
34002420:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34002422:	420b      	tst	r3, r1
34002424:	d11f      	bne.n	34002466 <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34002426:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
3400242a:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
3400242e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34002432:	432b      	orrs	r3, r5
34002434:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34002438:	6823      	ldr	r3, [r4, #0]
3400243a:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400243e:	07d2      	lsls	r2, r2, #31
34002440:	d409      	bmi.n	34002456 <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
34002442:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
34002446:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
3400244a:	d0dd      	beq.n	34002408 <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
3400244c:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34002450:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
34002454:	e7d6      	b.n	34002404 <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34002456:	f7ff ffb1 	bl	340023bc <HAL_GetTick>
3400245a:	1b80      	subs	r0, r0, r6
3400245c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34002460:	d9ea      	bls.n	34002438 <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34002462:	230a      	movs	r3, #10
34002464:	e7ce      	b.n	34002404 <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34002466:	2304      	movs	r3, #4
34002468:	e7cc      	b.n	34002404 <HAL_BSEC_OTP_Reload+0x18>
3400246a:	bf00      	nop
3400246c:	56009000 	.word	0x56009000

34002470 <HAL_BSEC_OTP_Read>:
{
34002470:	b570      	push	{r4, r5, r6, lr}
34002472:	460e      	mov	r6, r1
34002474:	4615      	mov	r5, r2
  if (hbsec == NULL)
34002476:	4604      	mov	r4, r0
34002478:	b130      	cbz	r0, 34002488 <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
3400247a:	b11a      	cbz	r2, 34002484 <HAL_BSEC_OTP_Read+0x14>
3400247c:	6802      	ldr	r2, [r0, #0]
3400247e:	4b09      	ldr	r3, [pc, #36]	@ (340024a4 <HAL_BSEC_OTP_Read+0x34>)
34002480:	429a      	cmp	r2, r3
34002482:	d003      	beq.n	3400248c <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34002484:	2301      	movs	r3, #1
34002486:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
34002488:	2001      	movs	r0, #1
}
3400248a:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
3400248c:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
34002490:	d2f8      	bcs.n	34002484 <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
34002492:	f7ff ffab 	bl	340023ec <HAL_BSEC_OTP_Reload>
34002496:	2800      	cmp	r0, #0
34002498:	d1f6      	bne.n	34002488 <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
3400249a:	6823      	ldr	r3, [r4, #0]
3400249c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
340024a0:	602b      	str	r3, [r5, #0]
  return HAL_OK;
340024a2:	e7f2      	b.n	3400248a <HAL_BSEC_OTP_Read+0x1a>
340024a4:	56009000 	.word	0x56009000

340024a8 <HAL_BSEC_OTP_Program>:
{
340024a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
340024ac:	4604      	mov	r4, r0
340024ae:	460e      	mov	r6, r1
340024b0:	4617      	mov	r7, r2
340024b2:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
340024b4:	f7ff ff82 	bl	340023bc <HAL_GetTick>
340024b8:	4680      	mov	r8, r0
  if (hbsec == NULL)
340024ba:	b12c      	cbz	r4, 340024c8 <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
340024bc:	6822      	ldr	r2, [r4, #0]
340024be:	4b28      	ldr	r3, [pc, #160]	@ (34002560 <HAL_BSEC_OTP_Program+0xb8>)
340024c0:	429a      	cmp	r2, r3
340024c2:	d005      	beq.n	340024d0 <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340024c4:	2301      	movs	r3, #1
340024c6:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340024c8:	2001      	movs	r0, #1
}
340024ca:	b003      	add	sp, #12
340024cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
340024d0:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
340024d4:	d004      	beq.n	340024e0 <HAL_BSEC_OTP_Program+0x38>
340024d6:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
340024da:	4822      	ldr	r0, [pc, #136]	@ (34002564 <HAL_BSEC_OTP_Program+0xbc>)
340024dc:	f7fe ff48 	bl	34001370 <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
340024e0:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
340024e4:	d2ee      	bcs.n	340024c4 <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
340024e6:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
340024e8:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
340024ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
340024ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
340024f2:	2301      	movs	r3, #1
340024f4:	f006 001f 	and.w	r0, r6, #31
340024f8:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
340024fa:	420b      	tst	r3, r1
340024fc:	d12e      	bne.n	3400255c <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
340024fe:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
34002502:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
34002506:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
3400250a:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
3400250e:	4335      	orrs	r5, r6
34002510:	ea45 0509 	orr.w	r5, r5, r9
34002514:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
34002518:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
3400251c:	6823      	ldr	r3, [r4, #0]
3400251e:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
34002522:	07d2      	lsls	r2, r2, #31
34002524:	d406      	bmi.n	34002534 <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
34002526:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400252a:	03db      	lsls	r3, r3, #15
3400252c:	d50b      	bpl.n	34002546 <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
3400252e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34002532:	e7c8      	b.n	340024c6 <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34002534:	f7ff ff42 	bl	340023bc <HAL_GetTick>
34002538:	eba0 0008 	sub.w	r0, r0, r8
3400253c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34002540:	d9ec      	bls.n	3400251c <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34002542:	230a      	movs	r3, #10
34002544:	e7bf      	b.n	340024c6 <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
34002546:	4631      	mov	r1, r6
34002548:	4620      	mov	r0, r4
3400254a:	aa01      	add	r2, sp, #4
3400254c:	f7ff ff90 	bl	34002470 <HAL_BSEC_OTP_Read>
34002550:	2800      	cmp	r0, #0
34002552:	d1b9      	bne.n	340024c8 <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
34002554:	9b01      	ldr	r3, [sp, #4]
34002556:	42bb      	cmp	r3, r7
34002558:	d1e9      	bne.n	3400252e <HAL_BSEC_OTP_Program+0x86>
3400255a:	e7b6      	b.n	340024ca <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400255c:	2304      	movs	r3, #4
3400255e:	e7b2      	b.n	340024c6 <HAL_BSEC_OTP_Program+0x1e>
34002560:	56009000 	.word	0x56009000
34002564:	34010561 	.word	0x34010561

34002568 <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34002568:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
3400256a:	4604      	mov	r4, r0
3400256c:	b350      	cbz	r0, 340025c4 <HAL_CACHEAXI_Enable+0x5c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400256e:	6803      	ldr	r3, [r0, #0]
34002570:	4a15      	ldr	r2, [pc, #84]	@ (340025c8 <HAL_CACHEAXI_Enable+0x60>)
34002572:	4293      	cmp	r3, r2
34002574:	d008      	beq.n	34002588 <HAL_CACHEAXI_Enable+0x20>
34002576:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400257a:	4293      	cmp	r3, r2
3400257c:	d004      	beq.n	34002588 <HAL_CACHEAXI_Enable+0x20>
3400257e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
34002582:	4812      	ldr	r0, [pc, #72]	@ (340025cc <HAL_CACHEAXI_Enable+0x64>)
34002584:	f7fe fef4 	bl	34001370 <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34002588:	6823      	ldr	r3, [r4, #0]
3400258a:	685b      	ldr	r3, [r3, #4]
3400258c:	07d9      	lsls	r1, r3, #31
3400258e:	d407      	bmi.n	340025a0 <HAL_CACHEAXI_Enable+0x38>
  }

  if (status == HAL_OK)
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002590:	2000      	movs	r0, #0
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
34002592:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002594:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
34002596:	6813      	ldr	r3, [r2, #0]
34002598:	f043 0301 	orr.w	r3, r3, #1
3400259c:	6013      	str	r3, [r2, #0]
  }

  return status;
}
3400259e:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
340025a0:	f7ff ff0c 	bl	340023bc <HAL_GetTick>
340025a4:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340025a6:	6823      	ldr	r3, [r4, #0]
340025a8:	685b      	ldr	r3, [r3, #4]
340025aa:	07db      	lsls	r3, r3, #31
340025ac:	d5f0      	bpl.n	34002590 <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
340025ae:	f7ff ff05 	bl	340023bc <HAL_GetTick>
340025b2:	1b40      	subs	r0, r0, r5
340025b4:	2801      	cmp	r0, #1
340025b6:	d9f6      	bls.n	340025a6 <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
340025b8:	6823      	ldr	r3, [r4, #0]
340025ba:	685b      	ldr	r3, [r3, #4]
340025bc:	07da      	lsls	r2, r3, #31
340025be:	d4f2      	bmi.n	340025a6 <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
340025c0:	2310      	movs	r3, #16
340025c2:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
340025c4:	2001      	movs	r0, #1
340025c6:	e7ea      	b.n	3400259e <HAL_CACHEAXI_Enable+0x36>
340025c8:	580dfc00 	.word	0x580dfc00
340025cc:	3401060a 	.word	0x3401060a

340025d0 <HAL_CACHEAXI_Init>:
{
340025d0:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
340025d2:	4604      	mov	r4, r0
340025d4:	b1c8      	cbz	r0, 3400260a <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
340025d6:	6803      	ldr	r3, [r0, #0]
340025d8:	4a0d      	ldr	r2, [pc, #52]	@ (34002610 <HAL_CACHEAXI_Init+0x40>)
340025da:	4293      	cmp	r3, r2
340025dc:	d007      	beq.n	340025ee <HAL_CACHEAXI_Init+0x1e>
340025de:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340025e2:	4293      	cmp	r3, r2
340025e4:	d003      	beq.n	340025ee <HAL_CACHEAXI_Init+0x1e>
340025e6:	21bc      	movs	r1, #188	@ 0xbc
340025e8:	480a      	ldr	r0, [pc, #40]	@ (34002614 <HAL_CACHEAXI_Init+0x44>)
340025ea:	f7fe fec1 	bl	34001370 <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
340025ee:	7923      	ldrb	r3, [r4, #4]
340025f0:	b913      	cbnz	r3, 340025f8 <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
340025f2:	4620      	mov	r0, r4
340025f4:	f7fe fea2 	bl	3400133c <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340025f8:	2300      	movs	r3, #0
340025fa:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
340025fc:	2301      	movs	r3, #1
340025fe:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34002600:	4620      	mov	r0, r4
}
34002602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34002606:	f7ff bfaf 	b.w	34002568 <HAL_CACHEAXI_Enable>
}
3400260a:	2001      	movs	r0, #1
3400260c:	bd10      	pop	{r4, pc}
3400260e:	bf00      	nop
34002610:	580dfc00 	.word	0x580dfc00
34002614:	3401060a 	.word	0x3401060a

34002618 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002618:	1ec3      	subs	r3, r0, #3
3400261a:	2b04      	cmp	r3, #4
{
3400261c:	b510      	push	{r4, lr}
3400261e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002620:	d903      	bls.n	3400262a <HAL_NVIC_SetPriorityGrouping+0x12>
34002622:	21e6      	movs	r1, #230	@ 0xe6
34002624:	4809      	ldr	r0, [pc, #36]	@ (3400264c <HAL_NVIC_SetPriorityGrouping+0x34>)
34002626:	f7fe fea3 	bl	34001370 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400262a:	4909      	ldr	r1, [pc, #36]	@ (34002650 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3400262c:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400262e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34002630:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34002634:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
34002638:	0412      	lsls	r2, r2, #16
3400263a:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
3400263c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
3400263e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34002642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
34002646:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
34002648:	bd10      	pop	{r4, pc}
3400264a:	bf00      	nop
3400264c:	340106b7 	.word	0x340106b7
34002650:	e000ed00 	.word	0xe000ed00

34002654 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34002654:	f110 0f0c 	cmn.w	r0, #12
{
34002658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400265c:	4605      	mov	r5, r0
3400265e:	460c      	mov	r4, r1
34002660:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34002662:	db01      	blt.n	34002668 <HAL_NVIC_SetPriority+0x14>
34002664:	1d03      	adds	r3, r0, #4
34002666:	d103      	bne.n	34002670 <HAL_NVIC_SetPriority+0x1c>
34002668:	21ff      	movs	r1, #255	@ 0xff
3400266a:	4826      	ldr	r0, [pc, #152]	@ (34002704 <HAL_NVIC_SetPriority+0xb0>)
3400266c:	f7fe fe80 	bl	34001370 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34002670:	4b25      	ldr	r3, [pc, #148]	@ (34002708 <HAL_NVIC_SetPriority+0xb4>)
34002672:	68de      	ldr	r6, [r3, #12]
34002674:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
34002678:	2e02      	cmp	r6, #2
3400267a:	d806      	bhi.n	3400268a <HAL_NVIC_SetPriority+0x36>
3400267c:	b157      	cbz	r7, 34002694 <HAL_NVIC_SetPriority+0x40>
3400267e:	f44f 7181 	mov.w	r1, #258	@ 0x102
34002682:	4820      	ldr	r0, [pc, #128]	@ (34002704 <HAL_NVIC_SetPriority+0xb0>)
34002684:	f7fe fe74 	bl	34001370 <assert_failed>
34002688:	e004      	b.n	34002694 <HAL_NVIC_SetPriority+0x40>
3400268a:	2301      	movs	r3, #1
3400268c:	1ef2      	subs	r2, r6, #3
3400268e:	4093      	lsls	r3, r2
34002690:	42bb      	cmp	r3, r7
34002692:	d9f4      	bls.n	3400267e <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
34002694:	2c0f      	cmp	r4, #15
34002696:	f1c6 0807 	rsb	r8, r6, #7
3400269a:	d804      	bhi.n	340026a6 <HAL_NVIC_SetPriority+0x52>
3400269c:	2301      	movs	r3, #1
3400269e:	fa03 f308 	lsl.w	r3, r3, r8
340026a2:	42a3      	cmp	r3, r4
340026a4:	d804      	bhi.n	340026b0 <HAL_NVIC_SetPriority+0x5c>
340026a6:	f240 1103 	movw	r1, #259	@ 0x103
340026aa:	4816      	ldr	r0, [pc, #88]	@ (34002704 <HAL_NVIC_SetPriority+0xb0>)
340026ac:	f7fe fe60 	bl	34001370 <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
340026b0:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
340026b4:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
340026b8:	bf28      	it	cs
340026ba:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340026be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
340026c2:	2b06      	cmp	r3, #6
340026c4:	f1a6 0603 	sub.w	r6, r6, #3
340026c8:	bf98      	it	ls
340026ca:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340026cc:	fa02 f808 	lsl.w	r8, r2, r8
340026d0:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
340026d4:	40b2      	lsls	r2, r6
340026d6:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340026da:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
340026dc:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340026de:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340026e2:	bfac      	ite	ge
340026e4:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340026e8:	4a08      	ldrlt	r2, [pc, #32]	@ (3400270c <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340026ea:	ea4f 1303 	mov.w	r3, r3, lsl #4
340026ee:	b2db      	uxtb	r3, r3
340026f0:	bfab      	itete	ge
340026f2:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340026f6:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340026fa:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340026fe:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
34002700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34002704:	340106b7 	.word	0x340106b7
34002708:	e000ed00 	.word	0xe000ed00
3400270c:	e000ed14 	.word	0xe000ed14

34002710 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34002710:	2800      	cmp	r0, #0
34002712:	db08      	blt.n	34002726 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34002714:	2301      	movs	r3, #1
34002716:	0941      	lsrs	r1, r0, #5
34002718:	4a05      	ldr	r2, [pc, #20]	@ (34002730 <HAL_NVIC_EnableIRQ+0x20>)
3400271a:	f000 001f 	and.w	r0, r0, #31
3400271e:	4083      	lsls	r3, r0
34002720:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
34002724:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34002726:	f240 1115 	movw	r1, #277	@ 0x115
3400272a:	4802      	ldr	r0, [pc, #8]	@ (34002734 <HAL_NVIC_EnableIRQ+0x24>)
3400272c:	f7fe be20 	b.w	34001370 <assert_failed>
34002730:	e000e100 	.word	0xe000e100
34002734:	340106b7 	.word	0x340106b7

34002738 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34002738:	3801      	subs	r0, #1
3400273a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
3400273e:	d20b      	bcs.n	34002758 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002740:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002744:	21f0      	movs	r1, #240	@ 0xf0
34002746:	4a05      	ldr	r2, [pc, #20]	@ (3400275c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002748:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400274a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3400274e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34002750:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34002752:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34002754:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34002756:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
34002758:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
3400275a:	4770      	bx	lr
3400275c:	e000ed00 	.word	0xe000ed00

34002760 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @brief  Line Event callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34002760:	4770      	bx	lr

34002762 <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @brief  Limit callback on the Pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34002762:	4770      	bx	lr

34002764 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @brief  Error callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34002764:	4770      	bx	lr

34002766 <HAL_DCMIPP_ErrorCallback>:
/**
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002766:	4770      	bx	lr

34002768 <HAL_DCMIPP_IRQHandler>:
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34002768:	6803      	ldr	r3, [r0, #0]
{
3400276a:	b570      	push	{r4, r5, r6, lr}
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
3400276c:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	@ 0x3f8
{
34002770:	4604      	mov	r4, r0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34002772:	0472      	lsls	r2, r6, #17
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
34002774:	f8d3 53f0 	ldr.w	r5, [r3, #1008]	@ 0x3f0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34002778:	d512      	bpl.n	340027a0 <HAL_DCMIPP_IRQHandler+0x38>
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
3400277a:	0469      	lsls	r1, r5, #17
3400277c:	d510      	bpl.n	340027a0 <HAL_DCMIPP_IRQHandler+0x38>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
3400277e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34002782:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
34002784:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34002788:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
3400278c:	6882      	ldr	r2, [r0, #8]
3400278e:	f042 0204 	orr.w	r2, r2, #4
34002792:	6082      	str	r2, [r0, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
34002794:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34002798:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
3400279c:	f7ff ffe1 	bl	34002762 <HAL_DCMIPP_PIPE_LimitEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
340027a0:	0572      	lsls	r2, r6, #21
340027a2:	d50a      	bpl.n	340027ba <HAL_DCMIPP_IRQHandler+0x52>
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
340027a4:	056b      	lsls	r3, r5, #21
340027a6:	d508      	bpl.n	340027ba <HAL_DCMIPP_IRQHandler+0x52>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
340027a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340027ac:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
340027ae:	2100      	movs	r1, #0
340027b0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
340027b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
340027b6:	f009 f961 	bl	3400ba7c <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
340027ba:	05b0      	lsls	r0, r6, #22
340027bc:	d516      	bpl.n	340027ec <HAL_DCMIPP_IRQHandler+0x84>
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
340027be:	05a9      	lsls	r1, r5, #22
340027c0:	d514      	bpl.n	340027ec <HAL_DCMIPP_IRQHandler+0x84>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340027c2:	6823      	ldr	r3, [r4, #0]
340027c4:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
340027c8:	0752      	lsls	r2, r2, #29
340027ca:	d507      	bpl.n	340027dc <HAL_DCMIPP_IRQHandler+0x74>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
340027cc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340027d0:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
340027d4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
340027d8:	2201      	movs	r2, #1
340027da:	7162      	strb	r2, [r4, #5]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
340027dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
340027e0:	2100      	movs	r1, #0
340027e2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
340027e4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
340027e8:	f009 f958 	bl	3400ba9c <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
340027ec:	05f3      	lsls	r3, r6, #23
340027ee:	d50a      	bpl.n	34002806 <HAL_DCMIPP_IRQHandler+0x9e>
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
340027f0:	05e8      	lsls	r0, r5, #23
340027f2:	d508      	bpl.n	34002806 <HAL_DCMIPP_IRQHandler+0x9e>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
340027f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
340027f8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
340027fa:	2100      	movs	r1, #0
340027fc:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
340027fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34002802:	f7ff ffad 	bl	34002760 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
34002806:	0431      	lsls	r1, r6, #16
34002808:	d516      	bpl.n	34002838 <HAL_DCMIPP_IRQHandler+0xd0>
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
3400280a:	042a      	lsls	r2, r5, #16
3400280c:	d514      	bpl.n	34002838 <HAL_DCMIPP_IRQHandler+0xd0>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400280e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002810:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002812:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002816:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002818:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3400281c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34002820:	68a2      	ldr	r2, [r4, #8]
34002822:	f042 0208 	orr.w	r2, r2, #8
34002826:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34002828:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400282c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002830:	2304      	movs	r3, #4
34002832:	7163      	strb	r3, [r4, #5]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002834:	f7ff ff96 	bl	34002764 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34002838:	03f3      	lsls	r3, r6, #15
3400283a:	d50a      	bpl.n	34002852 <HAL_DCMIPP_IRQHandler+0xea>
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
3400283c:	03e8      	lsls	r0, r5, #15
3400283e:	d508      	bpl.n	34002852 <HAL_DCMIPP_IRQHandler+0xea>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34002840:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34002844:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34002846:	2101      	movs	r1, #1
34002848:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
3400284a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
3400284e:	f7ff ff87 	bl	34002760 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34002852:	0371      	lsls	r1, r6, #13
34002854:	d50a      	bpl.n	3400286c <HAL_DCMIPP_IRQHandler+0x104>
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
34002856:	036a      	lsls	r2, r5, #13
34002858:	d508      	bpl.n	3400286c <HAL_DCMIPP_IRQHandler+0x104>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
3400285a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3400285e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34002860:	2101      	movs	r1, #1
34002862:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34002864:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34002868:	f009 f908 	bl	3400ba7c <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
3400286c:	03b3      	lsls	r3, r6, #14
3400286e:	d516      	bpl.n	3400289e <HAL_DCMIPP_IRQHandler+0x136>
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
34002870:	03a8      	lsls	r0, r5, #14
34002872:	d514      	bpl.n	3400289e <HAL_DCMIPP_IRQHandler+0x136>
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002874:	6823      	ldr	r3, [r4, #0]
34002876:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
3400287a:	0751      	lsls	r1, r2, #29
3400287c:	d507      	bpl.n	3400288e <HAL_DCMIPP_IRQHandler+0x126>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
3400287e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002882:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34002886:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
3400288a:	2201      	movs	r2, #1
3400288c:	71a2      	strb	r2, [r4, #6]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
3400288e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34002892:	2101      	movs	r1, #1
34002894:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34002896:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
3400289a:	f009 f8ff 	bl	3400ba9c <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
3400289e:	0232      	lsls	r2, r6, #8
340028a0:	d516      	bpl.n	340028d0 <HAL_DCMIPP_IRQHandler+0x168>
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
340028a2:	022b      	lsls	r3, r5, #8
340028a4:	d514      	bpl.n	340028d0 <HAL_DCMIPP_IRQHandler+0x168>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340028a6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340028a8:	2101      	movs	r1, #1
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340028aa:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340028ae:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340028b0:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
340028b4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
340028b8:	68a2      	ldr	r2, [r4, #8]
340028ba:	f042 0210 	orr.w	r2, r2, #16
340028be:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
340028c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
340028c4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
340028c8:	2304      	movs	r3, #4
340028ca:	71a3      	strb	r3, [r4, #6]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340028cc:	f7ff ff4a 	bl	34002764 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
340028d0:	01f0      	lsls	r0, r6, #7
340028d2:	d50a      	bpl.n	340028ea <HAL_DCMIPP_IRQHandler+0x182>
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
340028d4:	01e9      	lsls	r1, r5, #7
340028d6:	d508      	bpl.n	340028ea <HAL_DCMIPP_IRQHandler+0x182>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
340028d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340028dc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
340028de:	2102      	movs	r1, #2
340028e0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
340028e2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
340028e6:	f7ff ff3b 	bl	34002760 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
340028ea:	0172      	lsls	r2, r6, #5
340028ec:	d50a      	bpl.n	34002904 <HAL_DCMIPP_IRQHandler+0x19c>
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
340028ee:	016b      	lsls	r3, r5, #5
340028f0:	d508      	bpl.n	34002904 <HAL_DCMIPP_IRQHandler+0x19c>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
340028f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
340028f6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
340028f8:	2102      	movs	r1, #2
340028fa:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
340028fc:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002900:	f009 f8bc 	bl	3400ba7c <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34002904:	01b0      	lsls	r0, r6, #6
34002906:	d516      	bpl.n	34002936 <HAL_DCMIPP_IRQHandler+0x1ce>
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34002908:	01a9      	lsls	r1, r5, #6
3400290a:	d514      	bpl.n	34002936 <HAL_DCMIPP_IRQHandler+0x1ce>
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400290c:	6823      	ldr	r3, [r4, #0]
3400290e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
34002912:	0752      	lsls	r2, r2, #29
34002914:	d507      	bpl.n	34002926 <HAL_DCMIPP_IRQHandler+0x1be>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34002916:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400291a:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
3400291e:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
34002922:	2201      	movs	r2, #1
34002924:	71e2      	strb	r2, [r4, #7]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34002926:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
3400292a:	2102      	movs	r1, #2
3400292c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
3400292e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34002932:	f009 f8b3 	bl	3400ba9c <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34002936:	2e00      	cmp	r6, #0
34002938:	da16      	bge.n	34002968 <HAL_DCMIPP_IRQHandler+0x200>
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
3400293a:	2d00      	cmp	r5, #0
3400293c:	da14      	bge.n	34002968 <HAL_DCMIPP_IRQHandler+0x200>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3400293e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002940:	2102      	movs	r1, #2
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002942:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002946:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002948:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
3400294c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34002950:	68a2      	ldr	r2, [r4, #8]
34002952:	f042 0220 	orr.w	r2, r2, #32
34002956:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
34002958:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3400295c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002960:	2304      	movs	r3, #4
34002962:	71e3      	strb	r3, [r4, #7]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002964:	f7ff fefe 	bl	34002764 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
34002968:	0670      	lsls	r0, r6, #25
3400296a:	d514      	bpl.n	34002996 <HAL_DCMIPP_IRQHandler+0x22e>
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
3400296c:	0669      	lsls	r1, r5, #25
3400296e:	d512      	bpl.n	34002996 <HAL_DCMIPP_IRQHandler+0x22e>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34002970:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002972:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34002974:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
3400297c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34002980:	68a2      	ldr	r2, [r4, #8]
34002982:	f042 0202 	orr.w	r2, r2, #2
34002986:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
34002988:	2240      	movs	r2, #64	@ 0x40
3400298a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3400298e:	2304      	movs	r3, #4
34002990:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002992:	f7ff fee8 	bl	34002766 <HAL_DCMIPP_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
34002996:	06b2      	lsls	r2, r6, #26
34002998:	d514      	bpl.n	340029c4 <HAL_DCMIPP_IRQHandler+0x25c>
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
3400299a:	06ab      	lsls	r3, r5, #26
3400299c:	d512      	bpl.n	340029c4 <HAL_DCMIPP_IRQHandler+0x25c>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
3400299e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340029a0:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
340029a2:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340029a6:	f022 0220 	bic.w	r2, r2, #32
340029aa:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
340029ae:	68a2      	ldr	r2, [r4, #8]
340029b0:	f042 0201 	orr.w	r2, r2, #1
340029b4:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
340029b6:	2220      	movs	r2, #32
340029b8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340029bc:	2304      	movs	r3, #4
340029be:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340029c0:	f7ff fed1 	bl	34002766 <HAL_DCMIPP_ErrorCallback>
}
340029c4:	bd70      	pop	{r4, r5, r6, pc}

340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @brief  Line Error callback on the Data Lane
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
340029c6:	4770      	bx	lr

340029c8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
/**
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
340029c8:	4770      	bx	lr

340029ca <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
/**
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
340029ca:	4770      	bx	lr

340029cc <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @brief  End Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
340029cc:	4770      	bx	lr

340029ce <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @brief  Start Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
340029ce:	4770      	bx	lr

340029d0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @brief  Timer Counter Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
340029d0:	4770      	bx	lr

340029d2 <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @brief  Line Byte Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
340029d2:	4770      	bx	lr

340029d4 <HAL_DCMIPP_CSI_IRQHandler>:
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
340029d4:	4bb5      	ldr	r3, [pc, #724]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
{
340029d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
340029da:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
{
340029de:	4604      	mov	r4, r0
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
340029e0:	02b2      	lsls	r2, r6, #10
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
340029e2:	f8d3 8094 	ldr.w	r8, [r3, #148]	@ 0x94
  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
340029e6:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
340029ea:	f8d3 7084 	ldr.w	r7, [r3, #132]	@ 0x84
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
340029ee:	d50d      	bpl.n	34002a0c <HAL_DCMIPP_CSI_IRQHandler+0x38>
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
340029f0:	02a9      	lsls	r1, r5, #10
340029f2:	d50b      	bpl.n	34002a0c <HAL_DCMIPP_CSI_IRQHandler+0x38>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
340029f4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340029f8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
340029fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34002a00:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34002a04:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34002a08:	f7ff ffde 	bl	340029c8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34002a0c:	0732      	lsls	r2, r6, #28
34002a0e:	d515      	bpl.n	34002a3c <HAL_DCMIPP_CSI_IRQHandler+0x68>
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34002a10:	072b      	lsls	r3, r5, #28
34002a12:	d513      	bpl.n	34002a3c <HAL_DCMIPP_CSI_IRQHandler+0x68>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a14:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002a16:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a18:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002a1c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a1e:	f013 0f04 	tst.w	r3, #4
34002a22:	4ba2      	ldr	r3, [pc, #648]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34002a24:	bf1e      	ittt	ne
34002a26:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a2a:	f022 0208 	bicne.w	r2, r2, #8
34002a2e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34002a32:	2208      	movs	r2, #8
34002a34:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002a38:	f7ff ffcb 	bl	340029d2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34002a3c:	0770      	lsls	r0, r6, #29
34002a3e:	d515      	bpl.n	34002a6c <HAL_DCMIPP_CSI_IRQHandler+0x98>
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34002a40:	0769      	lsls	r1, r5, #29
34002a42:	d513      	bpl.n	34002a6c <HAL_DCMIPP_CSI_IRQHandler+0x98>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a44:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002a46:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a48:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002a4c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a4e:	f013 0f04 	tst.w	r3, #4
34002a52:	4b96      	ldr	r3, [pc, #600]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34002a54:	bf1e      	ittt	ne
34002a56:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a5a:	f022 0204 	bicne.w	r2, r2, #4
34002a5e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34002a62:	2204      	movs	r2, #4
34002a64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002a68:	f7ff ffb3 	bl	340029d2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
34002a6c:	07b2      	lsls	r2, r6, #30
34002a6e:	d515      	bpl.n	34002a9c <HAL_DCMIPP_CSI_IRQHandler+0xc8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
34002a70:	07ab      	lsls	r3, r5, #30
34002a72:	d513      	bpl.n	34002a9c <HAL_DCMIPP_CSI_IRQHandler+0xc8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a74:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002a76:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a78:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002a7c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a7e:	f013 0f04 	tst.w	r3, #4
34002a82:	4b8a      	ldr	r3, [pc, #552]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
34002a84:	bf1e      	ittt	ne
34002a86:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a8a:	f022 0202 	bicne.w	r2, r2, #2
34002a8e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
34002a92:	2202      	movs	r2, #2
34002a94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002a98:	f7ff ff9b 	bl	340029d2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
34002a9c:	07f0      	lsls	r0, r6, #31
34002a9e:	d515      	bpl.n	34002acc <HAL_DCMIPP_CSI_IRQHandler+0xf8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
34002aa0:	07e9      	lsls	r1, r5, #31
34002aa2:	d513      	bpl.n	34002acc <HAL_DCMIPP_CSI_IRQHandler+0xf8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002aa4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002aa6:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002aa8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002aac:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002aae:	f013 0f04 	tst.w	r3, #4
34002ab2:	4b7e      	ldr	r3, [pc, #504]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34002ab4:	bf1e      	ittt	ne
34002ab6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002aba:	f022 0201 	bicne.w	r2, r2, #1
34002abe:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34002ac2:	2201      	movs	r2, #1
34002ac4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34002ac8:	f7ff ff83 	bl	340029d2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34002acc:	0432      	lsls	r2, r6, #16
34002ace:	d516      	bpl.n	34002afe <HAL_DCMIPP_CSI_IRQHandler+0x12a>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34002ad0:	042b      	lsls	r3, r5, #16
34002ad2:	d514      	bpl.n	34002afe <HAL_DCMIPP_CSI_IRQHandler+0x12a>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ad4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002ad6:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ad8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002adc:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ade:	f013 0f04 	tst.w	r3, #4
34002ae2:	4b72      	ldr	r3, [pc, #456]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34002ae4:	bf1e      	ittt	ne
34002ae6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002aea:	f422 4200 	bicne.w	r2, r2, #32768	@ 0x8000
34002aee:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34002af2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002af6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002afa:	f7ff ff67 	bl	340029cc <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34002afe:	0470      	lsls	r0, r6, #17
34002b00:	d516      	bpl.n	34002b30 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34002b02:	0469      	lsls	r1, r5, #17
34002b04:	d514      	bpl.n	34002b30 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b06:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002b08:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b0a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002b0e:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b10:	f013 0f04 	tst.w	r3, #4
34002b14:	4b65      	ldr	r3, [pc, #404]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
34002b16:	bf1e      	ittt	ne
34002b18:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b1c:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
34002b20:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
34002b24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34002b28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002b2c:	f7ff ff4e 	bl	340029cc <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34002b30:	04b2      	lsls	r2, r6, #18
34002b32:	d516      	bpl.n	34002b62 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
34002b34:	04ab      	lsls	r3, r5, #18
34002b36:	d514      	bpl.n	34002b62 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b38:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002b3a:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b3c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002b40:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b42:	f013 0f04 	tst.w	r3, #4
34002b46:	4b59      	ldr	r3, [pc, #356]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34002b48:	bf1e      	ittt	ne
34002b4a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b4e:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
34002b52:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34002b56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34002b5a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002b5e:	f7ff ff35 	bl	340029cc <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
34002b62:	04f0      	lsls	r0, r6, #19
34002b64:	d516      	bpl.n	34002b94 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34002b66:	04e9      	lsls	r1, r5, #19
34002b68:	d514      	bpl.n	34002b94 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b6a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002b6c:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b6e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002b72:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b74:	f013 0f04 	tst.w	r3, #4
34002b78:	4b4c      	ldr	r3, [pc, #304]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
34002b7a:	bf1e      	ittt	ne
34002b7c:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b80:	f422 5280 	bicne.w	r2, r2, #4096	@ 0x1000
34002b84:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34002b88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34002b8c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002b90:	f7ff ff1c 	bl	340029cc <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34002b94:	0532      	lsls	r2, r6, #20
34002b96:	d516      	bpl.n	34002bc6 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34002b98:	052b      	lsls	r3, r5, #20
34002b9a:	d514      	bpl.n	34002bc6 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b9c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002b9e:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ba0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002ba4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ba6:	f013 0f04 	tst.w	r3, #4
34002baa:	4b40      	ldr	r3, [pc, #256]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34002bac:	bf1e      	ittt	ne
34002bae:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002bb2:	f422 6200 	bicne.w	r2, r2, #2048	@ 0x800
34002bb6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34002bba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34002bbe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002bc2:	f7ff ff04 	bl	340029ce <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34002bc6:	0570      	lsls	r0, r6, #21
34002bc8:	d516      	bpl.n	34002bf8 <HAL_DCMIPP_CSI_IRQHandler+0x224>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34002bca:	0569      	lsls	r1, r5, #21
34002bcc:	d514      	bpl.n	34002bf8 <HAL_DCMIPP_CSI_IRQHandler+0x224>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bce:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002bd0:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bd2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002bd6:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bd8:	f013 0f04 	tst.w	r3, #4
34002bdc:	4b33      	ldr	r3, [pc, #204]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34002bde:	bf1e      	ittt	ne
34002be0:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002be4:	f422 6280 	bicne.w	r2, r2, #1024	@ 0x400
34002be8:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34002bec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002bf0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002bf4:	f7ff feeb 	bl	340029ce <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34002bf8:	05b2      	lsls	r2, r6, #22
34002bfa:	d516      	bpl.n	34002c2a <HAL_DCMIPP_CSI_IRQHandler+0x256>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34002bfc:	05ab      	lsls	r3, r5, #22
34002bfe:	d514      	bpl.n	34002c2a <HAL_DCMIPP_CSI_IRQHandler+0x256>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c00:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002c02:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c04:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002c08:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c0a:	f013 0f04 	tst.w	r3, #4
34002c0e:	4b27      	ldr	r3, [pc, #156]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34002c10:	bf1e      	ittt	ne
34002c12:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c16:	f422 7200 	bicne.w	r2, r2, #512	@ 0x200
34002c1a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34002c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
34002c22:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002c26:	f7ff fed2 	bl	340029ce <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34002c2a:	05f0      	lsls	r0, r6, #23
34002c2c:	d516      	bpl.n	34002c5c <HAL_DCMIPP_CSI_IRQHandler+0x288>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34002c2e:	05e9      	lsls	r1, r5, #23
34002c30:	d514      	bpl.n	34002c5c <HAL_DCMIPP_CSI_IRQHandler+0x288>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c32:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002c34:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c36:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002c3a:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c3c:	f013 0f04 	tst.w	r3, #4
34002c40:	4b1a      	ldr	r3, [pc, #104]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34002c42:	bf1e      	ittt	ne
34002c44:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c48:	f422 7280 	bicne.w	r2, r2, #256	@ 0x100
34002c4c:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34002c50:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002c54:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002c58:	f7ff feb9 	bl	340029ce <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34002c5c:	0632      	lsls	r2, r6, #24
34002c5e:	d515      	bpl.n	34002c8c <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34002c60:	062b      	lsls	r3, r5, #24
34002c62:	d513      	bpl.n	34002c8c <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c64:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002c66:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c68:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002c6c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c6e:	f013 0f04 	tst.w	r3, #4
34002c72:	4b0e      	ldr	r3, [pc, #56]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34002c74:	bf1e      	ittt	ne
34002c76:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c7a:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
34002c7e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34002c82:	2280      	movs	r2, #128	@ 0x80
34002c84:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002c88:	f7ff fea2 	bl	340029d0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34002c8c:	0670      	lsls	r0, r6, #25
34002c8e:	d519      	bpl.n	34002cc4 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34002c90:	0669      	lsls	r1, r5, #25
34002c92:	d517      	bpl.n	34002cc4 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c94:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002c96:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c98:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002c9c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c9e:	f013 0f04 	tst.w	r3, #4
34002ca2:	4b02      	ldr	r3, [pc, #8]	@ (34002cac <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34002ca4:	bf18      	it	ne
34002ca6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002caa:	e001      	b.n	34002cb0 <HAL_DCMIPP_CSI_IRQHandler+0x2dc>
34002cac:	58006000 	.word	0x58006000
34002cb0:	bf1c      	itt	ne
34002cb2:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
34002cb6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34002cba:	2240      	movs	r2, #64	@ 0x40
34002cbc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002cc0:	f7ff fe86 	bl	340029d0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34002cc4:	06b2      	lsls	r2, r6, #26
34002cc6:	d515      	bpl.n	34002cf4 <HAL_DCMIPP_CSI_IRQHandler+0x320>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34002cc8:	06ab      	lsls	r3, r5, #26
34002cca:	d513      	bpl.n	34002cf4 <HAL_DCMIPP_CSI_IRQHandler+0x320>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ccc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002cce:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cd0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002cd4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cd6:	f013 0f04 	tst.w	r3, #4
34002cda:	4bb9      	ldr	r3, [pc, #740]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34002cdc:	bf1e      	ittt	ne
34002cde:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002ce2:	f022 0220 	bicne.w	r2, r2, #32
34002ce6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34002cea:	2220      	movs	r2, #32
34002cec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002cf0:	f7ff fe6e 	bl	340029d0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34002cf4:	06f0      	lsls	r0, r6, #27
34002cf6:	d515      	bpl.n	34002d24 <HAL_DCMIPP_CSI_IRQHandler+0x350>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34002cf8:	06e9      	lsls	r1, r5, #27
34002cfa:	d513      	bpl.n	34002d24 <HAL_DCMIPP_CSI_IRQHandler+0x350>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002cfc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002cfe:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d00:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002d04:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002d06:	f013 0f04 	tst.w	r3, #4
34002d0a:	4bad      	ldr	r3, [pc, #692]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34002d0c:	bf1e      	ittt	ne
34002d0e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002d12:	f022 0210 	bicne.w	r2, r2, #16
34002d16:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34002d1a:	2210      	movs	r2, #16
34002d1c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002d20:	f7ff fe56 	bl	340029d0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34002d24:	0072      	lsls	r2, r6, #1
34002d26:	d513      	bpl.n	34002d50 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34002d28:	006b      	lsls	r3, r5, #1
34002d2a:	d511      	bpl.n	34002d50 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002d2c:	4ba4      	ldr	r3, [pc, #656]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d2e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002d30:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d34:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34002d38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34002d3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002d40:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34002d44:	68a3      	ldr	r3, [r4, #8]
34002d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34002d4a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d4c:	f7ff fd0b 	bl	34002766 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34002d50:	00b0      	lsls	r0, r6, #2
34002d52:	d513      	bpl.n	34002d7c <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34002d54:	00a9      	lsls	r1, r5, #2
34002d56:	d511      	bpl.n	34002d7c <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002d58:	4b99      	ldr	r3, [pc, #612]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d5a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002d5c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d60:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
34002d64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34002d68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34002d6c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34002d70:	68a3      	ldr	r3, [r4, #8]
34002d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34002d76:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d78:	f7ff fcf5 	bl	34002766 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34002d7c:	00f2      	lsls	r2, r6, #3
34002d7e:	d513      	bpl.n	34002da8 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34002d80:	00eb      	lsls	r3, r5, #3
34002d82:	d511      	bpl.n	34002da8 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002d84:	4b8e      	ldr	r3, [pc, #568]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d86:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002d88:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d8c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
34002d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34002d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002d98:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34002d9c:	68a3      	ldr	r3, [r4, #8]
34002d9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
34002da2:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002da4:	f7ff fcdf 	bl	34002766 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34002da8:	0130      	lsls	r0, r6, #4
34002daa:	d513      	bpl.n	34002dd4 <HAL_DCMIPP_CSI_IRQHandler+0x400>
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34002dac:	0129      	lsls	r1, r5, #4
34002dae:	d511      	bpl.n	34002dd4 <HAL_DCMIPP_CSI_IRQHandler+0x400>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002db0:	4b83      	ldr	r3, [pc, #524]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002db2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002db4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002db8:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
34002dbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34002dc0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34002dc4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34002dc8:	68a3      	ldr	r3, [r4, #8]
34002dca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
34002dce:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002dd0:	f7ff fcc9 	bl	34002766 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34002dd4:	0172      	lsls	r2, r6, #5
34002dd6:	d513      	bpl.n	34002e00 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34002dd8:	016b      	lsls	r3, r5, #5
34002dda:	d511      	bpl.n	34002e00 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002ddc:	4b78      	ldr	r3, [pc, #480]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002dde:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002de0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002de4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
34002de8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34002dec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34002df0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34002df4:	68a3      	ldr	r3, [r4, #8]
34002df6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34002dfa:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002dfc:	f7ff fcb3 	bl	34002766 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34002e00:	01b0      	lsls	r0, r6, #6
34002e02:	d513      	bpl.n	34002e2c <HAL_DCMIPP_CSI_IRQHandler+0x458>
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34002e04:	01a9      	lsls	r1, r5, #6
34002e06:	d511      	bpl.n	34002e2c <HAL_DCMIPP_CSI_IRQHandler+0x458>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002e08:	4b6d      	ldr	r3, [pc, #436]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e0a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002e0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002e10:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
34002e14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34002e18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34002e1c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34002e20:	68a3      	ldr	r3, [r4, #8]
34002e22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34002e26:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e28:	f7ff fc9d 	bl	34002766 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34002e2c:	01f2      	lsls	r2, r6, #7
34002e2e:	d513      	bpl.n	34002e58 <HAL_DCMIPP_CSI_IRQHandler+0x484>
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34002e30:	01eb      	lsls	r3, r5, #7
34002e32:	d511      	bpl.n	34002e58 <HAL_DCMIPP_CSI_IRQHandler+0x484>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002e34:	4b62      	ldr	r3, [pc, #392]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e36:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002e38:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002e3c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
34002e40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34002e44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002e48:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34002e4c:	68a3      	ldr	r3, [r4, #8]
34002e4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
34002e52:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002e54:	f7ff fc87 	bl	34002766 <HAL_DCMIPP_ErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34002e58:	f018 0f01 	tst.w	r8, #1
34002e5c:	d014      	beq.n	34002e88 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34002e5e:	07f8      	lsls	r0, r7, #31
34002e60:	d512      	bpl.n	34002e88 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002e62:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002e64:	4b56      	ldr	r3, [pc, #344]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e66:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002e68:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002e6c:	f022 0201 	bic.w	r2, r2, #1
34002e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002e74:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34002e78:	68a3      	ldr	r3, [r4, #8]
34002e7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34002e7e:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002e80:	2304      	movs	r3, #4
34002e82:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e84:	f7ff fd9f 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34002e88:	f018 0f02 	tst.w	r8, #2
34002e8c:	d015      	beq.n	34002eba <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34002e8e:	07b9      	lsls	r1, r7, #30
34002e90:	d513      	bpl.n	34002eba <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002e92:	4b4b      	ldr	r3, [pc, #300]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e94:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002e96:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e9a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002e9c:	f022 0202 	bic.w	r2, r2, #2
34002ea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34002ea4:	2202      	movs	r2, #2
34002ea6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34002eaa:	68a3      	ldr	r3, [r4, #8]
34002eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34002eb0:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002eb2:	2304      	movs	r3, #4
34002eb4:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002eb6:	f7ff fd86 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34002eba:	f018 0f04 	tst.w	r8, #4
34002ebe:	d013      	beq.n	34002ee8 <HAL_DCMIPP_CSI_IRQHandler+0x514>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34002ec0:	077a      	lsls	r2, r7, #29
34002ec2:	d511      	bpl.n	34002ee8 <HAL_DCMIPP_CSI_IRQHandler+0x514>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002ec4:	4b3e      	ldr	r3, [pc, #248]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ec6:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002ec8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ecc:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002ece:	f022 0204 	bic.w	r2, r2, #4
34002ed2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34002ed6:	2204      	movs	r2, #4
34002ed8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34002edc:	68a3      	ldr	r3, [r4, #8]
34002ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34002ee2:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ee4:	f7ff fd6f 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34002ee8:	f018 0f08 	tst.w	r8, #8
34002eec:	d013      	beq.n	34002f16 <HAL_DCMIPP_CSI_IRQHandler+0x542>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34002eee:	073b      	lsls	r3, r7, #28
34002ef0:	d511      	bpl.n	34002f16 <HAL_DCMIPP_CSI_IRQHandler+0x542>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002ef2:	4b33      	ldr	r3, [pc, #204]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002ef4:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002ef6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002efa:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002efc:	f022 0208 	bic.w	r2, r2, #8
34002f00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34002f04:	2208      	movs	r2, #8
34002f06:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34002f0a:	68a3      	ldr	r3, [r4, #8]
34002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34002f10:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f12:	f7ff fd58 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34002f16:	f018 0f10 	tst.w	r8, #16
34002f1a:	d013      	beq.n	34002f44 <HAL_DCMIPP_CSI_IRQHandler+0x570>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34002f1c:	06f8      	lsls	r0, r7, #27
34002f1e:	d511      	bpl.n	34002f44 <HAL_DCMIPP_CSI_IRQHandler+0x570>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002f20:	4b27      	ldr	r3, [pc, #156]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f22:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002f24:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f28:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002f2a:	f022 0210 	bic.w	r2, r2, #16
34002f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34002f32:	2210      	movs	r2, #16
34002f34:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34002f38:	68a3      	ldr	r3, [r4, #8]
34002f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34002f3e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002f40:	f7ff fd41 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34002f44:	f418 7f80 	tst.w	r8, #256	@ 0x100
34002f48:	d016      	beq.n	34002f78 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34002f4a:	05f9      	lsls	r1, r7, #23
34002f4c:	d514      	bpl.n	34002f78 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002f4e:	4b1c      	ldr	r3, [pc, #112]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f50:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002f52:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f56:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34002f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34002f60:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002f64:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34002f68:	68a3      	ldr	r3, [r4, #8]
34002f6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34002f6e:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002f70:	2304      	movs	r3, #4
34002f72:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f74:	f7ff fd27 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34002f78:	f418 7f00 	tst.w	r8, #512	@ 0x200
34002f7c:	d016      	beq.n	34002fac <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34002f7e:	05ba      	lsls	r2, r7, #22
34002f80:	d514      	bpl.n	34002fac <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002f82:	4b0f      	ldr	r3, [pc, #60]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f84:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002f86:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f8a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002f8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34002f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34002f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
34002f98:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34002f9c:	68a3      	ldr	r3, [r4, #8]
34002f9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34002fa2:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002fa4:	2304      	movs	r3, #4
34002fa6:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002fa8:	f7ff fd0d 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34002fac:	f418 6f80 	tst.w	r8, #1024	@ 0x400
34002fb0:	d017      	beq.n	34002fe2 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34002fb2:	057b      	lsls	r3, r7, #21
34002fb4:	d515      	bpl.n	34002fe2 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002fb6:	4b02      	ldr	r3, [pc, #8]	@ (34002fc0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002fb8:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002fba:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002fbe:	e001      	b.n	34002fc4 <HAL_DCMIPP_CSI_IRQHandler+0x5f0>
34002fc0:	58006000 	.word	0x58006000
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002fc4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34002fca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34002fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002fd2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34002fd6:	68a3      	ldr	r3, [r4, #8]
34002fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34002fdc:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002fde:	f7ff fcf2 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34002fe2:	f418 6f00 	tst.w	r8, #2048	@ 0x800
34002fe6:	d014      	beq.n	34003012 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34002fe8:	0538      	lsls	r0, r7, #20
34002fea:	d512      	bpl.n	34003012 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34002fec:	4b1f      	ldr	r3, [pc, #124]	@ (3400306c <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002fee:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34002ff0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002ff4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34002ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34002ffa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34002ffe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34003002:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34003006:	68a3      	ldr	r3, [r4, #8]
34003008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3400300c:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400300e:	f7ff fcda 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34003012:	f418 5f80 	tst.w	r8, #4096	@ 0x1000
34003016:	d014      	beq.n	34003042 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34003018:	04f9      	lsls	r1, r7, #19
3400301a:	d512      	bpl.n	34003042 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
3400301c:	4b13      	ldr	r3, [pc, #76]	@ (3400306c <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400301e:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34003020:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34003024:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34003026:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
3400302a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
3400302e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34003032:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34003036:	68a3      	ldr	r3, [r4, #8]
34003038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400303c:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400303e:	f7ff fcc2 	bl	340029c6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
34003042:	03f2      	lsls	r2, r6, #15
34003044:	d50f      	bpl.n	34003066 <HAL_DCMIPP_CSI_IRQHandler+0x692>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
34003046:	03eb      	lsls	r3, r5, #15
34003048:	d50d      	bpl.n	34003066 <HAL_DCMIPP_CSI_IRQHandler+0x692>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
3400304a:	4b08      	ldr	r3, [pc, #32]	@ (3400306c <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
3400304c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
3400304e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34003052:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34003056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
3400305a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400305e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34003062:	f7ff fcb2 	bl	340029ca <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
}
34003066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400306a:	bf00      	nop
3400306c:	58006000 	.word	0x58006000

34003070 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
34003070:	4770      	bx	lr

34003072 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
34003072:	4770      	bx	lr

34003074 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
34003074:	6803      	ldr	r3, [r0, #0]
{
34003076:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
34003078:	685e      	ldr	r6, [r3, #4]
{
3400307a:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
3400307c:	07f2      	lsls	r2, r6, #31
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
3400307e:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
34003080:	d514      	bpl.n	340030ac <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
34003082:	05e9      	lsls	r1, r5, #23
34003084:	d512      	bpl.n	340030ac <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
34003086:	681a      	ldr	r2, [r3, #0]
34003088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
3400308c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
3400308e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
34003090:	f042 0201 	orr.w	r2, r2, #1
34003094:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
34003096:	2201      	movs	r2, #1
34003098:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
3400309a:	2304      	movs	r3, #4
3400309c:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
340030a0:	2300      	movs	r3, #0
340030a2:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
340030a6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
340030a8:	b103      	cbz	r3, 340030ac <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
340030aa:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
340030ac:	06b2      	lsls	r2, r6, #26
340030ae:	d516      	bpl.n	340030de <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
340030b0:	04ab      	lsls	r3, r5, #18
340030b2:	d514      	bpl.n	340030de <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
340030b4:	6823      	ldr	r3, [r4, #0]
340030b6:	681a      	ldr	r2, [r3, #0]
340030b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
340030bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
340030be:	2220      	movs	r2, #32
340030c0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
340030c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340030c4:	f043 0302 	orr.w	r3, r3, #2
340030c8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
340030ca:	2304      	movs	r3, #4
340030cc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
340030d0:	2300      	movs	r3, #0
340030d2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
340030d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340030d8:	b10b      	cbz	r3, 340030de <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
340030da:	4620      	mov	r0, r4
340030dc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
340030de:	0730      	lsls	r0, r6, #28
340030e0:	d516      	bpl.n	34003110 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
340030e2:	0529      	lsls	r1, r5, #20
340030e4:	d514      	bpl.n	34003110 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
340030e6:	6823      	ldr	r3, [r4, #0]
340030e8:	681a      	ldr	r2, [r3, #0]
340030ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
340030ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
340030f0:	2208      	movs	r2, #8
340030f2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
340030f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340030f6:	f043 0304 	orr.w	r3, r3, #4
340030fa:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
340030fc:	2304      	movs	r3, #4
340030fe:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34003102:	2300      	movs	r3, #0
34003104:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34003108:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400310a:	b10b      	cbz	r3, 34003110 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
3400310c:	4620      	mov	r0, r4
3400310e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
34003110:	0772      	lsls	r2, r6, #29
34003112:	d50b      	bpl.n	3400312c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
34003114:	056b      	lsls	r3, r5, #21
34003116:	d509      	bpl.n	3400312c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34003118:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
3400311a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
3400311c:	681a      	ldr	r2, [r3, #0]
3400311e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34003122:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
34003124:	2204      	movs	r2, #4
34003126:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
34003128:	f7ff ffa2 	bl	34003070 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
3400312c:	07b0      	lsls	r0, r6, #30
3400312e:	d514      	bpl.n	3400315a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
34003130:	05a9      	lsls	r1, r5, #22
34003132:	d512      	bpl.n	3400315a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
34003134:	6823      	ldr	r3, [r4, #0]
34003136:	681a      	ldr	r2, [r3, #0]
34003138:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
3400313c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
3400313e:	2202      	movs	r2, #2
34003140:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34003142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003144:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
34003146:	2301      	movs	r3, #1
34003148:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
3400314c:	2300      	movs	r3, #0
3400314e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
34003152:	6a23      	ldr	r3, [r4, #32]
34003154:	b10b      	cbz	r3, 3400315a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
34003156:	4620      	mov	r0, r4
34003158:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
3400315a:	06f2      	lsls	r2, r6, #27
3400315c:	d513      	bpl.n	34003186 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
3400315e:	04eb      	lsls	r3, r5, #19
34003160:	d511      	bpl.n	34003186 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34003162:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34003164:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34003166:	681a      	ldr	r2, [r3, #0]
34003168:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
3400316c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
3400316e:	2210      	movs	r2, #16
34003170:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34003172:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003174:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
34003176:	2301      	movs	r3, #1
34003178:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
3400317c:	2300      	movs	r3, #0
3400317e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34003182:	f7ff ff76 	bl	34003072 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
34003186:	bd70      	pop	{r4, r5, r6, pc}

34003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34003188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
3400318c:	4b47      	ldr	r3, [pc, #284]	@ (340032ac <HAL_GPIO_Init+0x124>)
{
3400318e:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34003190:	4298      	cmp	r0, r3
{
34003192:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34003194:	d054      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
34003196:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400319a:	4298      	cmp	r0, r3
3400319c:	d050      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
3400319e:	4b44      	ldr	r3, [pc, #272]	@ (340032b0 <HAL_GPIO_Init+0x128>)
340031a0:	4298      	cmp	r0, r3
340031a2:	d04d      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031a4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031a8:	4298      	cmp	r0, r3
340031aa:	d049      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031ac:	4b41      	ldr	r3, [pc, #260]	@ (340032b4 <HAL_GPIO_Init+0x12c>)
340031ae:	4298      	cmp	r0, r3
340031b0:	d046      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031b2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031b6:	4298      	cmp	r0, r3
340031b8:	d042      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031ba:	4b3f      	ldr	r3, [pc, #252]	@ (340032b8 <HAL_GPIO_Init+0x130>)
340031bc:	4298      	cmp	r0, r3
340031be:	d03f      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031c0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031c4:	4298      	cmp	r0, r3
340031c6:	d03b      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031c8:	4b3c      	ldr	r3, [pc, #240]	@ (340032bc <HAL_GPIO_Init+0x134>)
340031ca:	4298      	cmp	r0, r3
340031cc:	d038      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031ce:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031d2:	4298      	cmp	r0, r3
340031d4:	d034      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031d6:	4b3a      	ldr	r3, [pc, #232]	@ (340032c0 <HAL_GPIO_Init+0x138>)
340031d8:	4298      	cmp	r0, r3
340031da:	d031      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031dc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031e0:	4298      	cmp	r0, r3
340031e2:	d02d      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031e4:	4b37      	ldr	r3, [pc, #220]	@ (340032c4 <HAL_GPIO_Init+0x13c>)
340031e6:	4298      	cmp	r0, r3
340031e8:	d02a      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031ea:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031ee:	4298      	cmp	r0, r3
340031f0:	d026      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031f2:	4b35      	ldr	r3, [pc, #212]	@ (340032c8 <HAL_GPIO_Init+0x140>)
340031f4:	4298      	cmp	r0, r3
340031f6:	d023      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
340031f8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340031fc:	4298      	cmp	r0, r3
340031fe:	d01f      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
34003200:	4b32      	ldr	r3, [pc, #200]	@ (340032cc <HAL_GPIO_Init+0x144>)
34003202:	4298      	cmp	r0, r3
34003204:	d01c      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
34003206:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400320a:	4298      	cmp	r0, r3
3400320c:	d018      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
3400320e:	4b30      	ldr	r3, [pc, #192]	@ (340032d0 <HAL_GPIO_Init+0x148>)
34003210:	4298      	cmp	r0, r3
34003212:	d015      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
34003214:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003218:	4298      	cmp	r0, r3
3400321a:	d011      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
3400321c:	4b2d      	ldr	r3, [pc, #180]	@ (340032d4 <HAL_GPIO_Init+0x14c>)
3400321e:	4298      	cmp	r0, r3
34003220:	d00e      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
34003222:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003226:	4298      	cmp	r0, r3
34003228:	d00a      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
3400322a:	4b2b      	ldr	r3, [pc, #172]	@ (340032d8 <HAL_GPIO_Init+0x150>)
3400322c:	4298      	cmp	r0, r3
3400322e:	d007      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
34003230:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003234:	4298      	cmp	r0, r3
34003236:	d003      	beq.n	34003240 <HAL_GPIO_Init+0xb8>
34003238:	21ad      	movs	r1, #173	@ 0xad
3400323a:	4828      	ldr	r0, [pc, #160]	@ (340032dc <HAL_GPIO_Init+0x154>)
3400323c:	f7fe f898 	bl	34001370 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34003240:	6833      	ldr	r3, [r6, #0]
34003242:	b29a      	uxth	r2, r3
34003244:	b112      	cbz	r2, 3400324c <HAL_GPIO_Init+0xc4>
34003246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400324a:	d303      	bcc.n	34003254 <HAL_GPIO_Init+0xcc>
3400324c:	21ae      	movs	r1, #174	@ 0xae
3400324e:	4823      	ldr	r0, [pc, #140]	@ (340032dc <HAL_GPIO_Init+0x154>)
34003250:	f7fe f88e 	bl	34001370 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
34003254:	6873      	ldr	r3, [r6, #4]
34003256:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
3400325a:	d011      	beq.n	34003280 <HAL_GPIO_Init+0xf8>
3400325c:	d81d      	bhi.n	3400329a <HAL_GPIO_Init+0x112>
3400325e:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34003262:	d00d      	beq.n	34003280 <HAL_GPIO_Init+0xf8>
34003264:	d809      	bhi.n	3400327a <HAL_GPIO_Init+0xf2>
34003266:	2b03      	cmp	r3, #3
34003268:	d90a      	bls.n	34003280 <HAL_GPIO_Init+0xf8>
3400326a:	3b11      	subs	r3, #17
3400326c:	2b01      	cmp	r3, #1
3400326e:	d907      	bls.n	34003280 <HAL_GPIO_Init+0xf8>
34003270:	21af      	movs	r1, #175	@ 0xaf
34003272:	481a      	ldr	r0, [pc, #104]	@ (340032dc <HAL_GPIO_Init+0x154>)
34003274:	f7fe f87c 	bl	34001370 <assert_failed>
34003278:	e002      	b.n	34003280 <HAL_GPIO_Init+0xf8>
3400327a:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
3400327e:	d1f7      	bne.n	34003270 <HAL_GPIO_Init+0xe8>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003280:	f04f 0900 	mov.w	r9, #0
34003284:	464f      	mov	r7, r9
34003286:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 340032ac <HAL_GPIO_Init+0x124>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
3400328a:	f8df a054 	ldr.w	sl, [pc, #84]	@ 340032e0 <HAL_GPIO_Init+0x158>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
3400328e:	6835      	ldr	r5, [r6, #0]
34003290:	fa35 f307 	lsrs.w	r3, r5, r7
34003294:	d126      	bne.n	340032e4 <HAL_GPIO_Init+0x15c>
      }
    }

    position++;
  }
}
34003296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400329a:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
3400329e:	d0ef      	beq.n	34003280 <HAL_GPIO_Init+0xf8>
340032a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
340032a4:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
340032a8:	e7e9      	b.n	3400327e <HAL_GPIO_Init+0xf6>
340032aa:	bf00      	nop
340032ac:	56020000 	.word	0x56020000
340032b0:	56020400 	.word	0x56020400
340032b4:	56020800 	.word	0x56020800
340032b8:	56020c00 	.word	0x56020c00
340032bc:	56021000 	.word	0x56021000
340032c0:	56021400 	.word	0x56021400
340032c4:	56021800 	.word	0x56021800
340032c8:	56021c00 	.word	0x56021c00
340032cc:	56023400 	.word	0x56023400
340032d0:	56023800 	.word	0x56023800
340032d4:	56023c00 	.word	0x56023c00
340032d8:	56024000 	.word	0x56024000
340032dc:	34010762 	.word	0x34010762
340032e0:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
340032e4:	f04f 0b01 	mov.w	fp, #1
340032e8:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
340032ec:	ea1b 0505 	ands.w	r5, fp, r5
340032f0:	f000 8130 	beq.w	34003554 <HAL_GPIO_Init+0x3cc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
340032f4:	6873      	ldr	r3, [r6, #4]
340032f6:	f003 0303 	and.w	r3, r3, #3
340032fa:	3b01      	subs	r3, #1
340032fc:	2b01      	cmp	r3, #1
340032fe:	d81a      	bhi.n	34003336 <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34003300:	68f3      	ldr	r3, [r6, #12]
34003302:	2b03      	cmp	r3, #3
34003304:	d903      	bls.n	3400330e <HAL_GPIO_Init+0x186>
34003306:	21be      	movs	r1, #190	@ 0xbe
34003308:	489e      	ldr	r0, [pc, #632]	@ (34003584 <HAL_GPIO_Init+0x3fc>)
3400330a:	f7fe f831 	bl	34001370 <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3400330e:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
34003310:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34003312:	fa03 f309 	lsl.w	r3, r3, r9
34003316:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3400331a:	68f3      	ldr	r3, [r6, #12]
3400331c:	fa03 f309 	lsl.w	r3, r3, r9
34003320:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
34003322:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34003324:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
34003326:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34003328:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
3400332c:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34003330:	40bb      	lsls	r3, r7
34003332:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
34003334:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34003336:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
3400333a:	f003 0303 	and.w	r3, r3, #3
3400333e:	2b03      	cmp	r3, #3
34003340:	d102      	bne.n	34003348 <HAL_GPIO_Init+0x1c0>
34003342:	2a01      	cmp	r2, #1
34003344:	f000 8082 	beq.w	3400344c <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34003348:	2a02      	cmp	r2, #2
3400334a:	d903      	bls.n	34003354 <HAL_GPIO_Init+0x1cc>
3400334c:	21d1      	movs	r1, #209	@ 0xd1
3400334e:	488d      	ldr	r0, [pc, #564]	@ (34003584 <HAL_GPIO_Init+0x3fc>)
34003350:	f7fe f80e 	bl	34001370 <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34003354:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
34003356:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34003358:	fa03 f309 	lsl.w	r3, r3, r9
3400335c:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34003360:	68b3      	ldr	r3, [r6, #8]
34003362:	fa03 f309 	lsl.w	r3, r3, r9
34003366:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
34003368:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
3400336a:	6873      	ldr	r3, [r6, #4]
3400336c:	f003 0303 	and.w	r3, r3, #3
34003370:	2b02      	cmp	r3, #2
34003372:	d16b      	bne.n	3400344c <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34003374:	4544      	cmp	r4, r8
34003376:	d053      	beq.n	34003420 <HAL_GPIO_Init+0x298>
34003378:	4b83      	ldr	r3, [pc, #524]	@ (34003588 <HAL_GPIO_Init+0x400>)
3400337a:	429c      	cmp	r4, r3
3400337c:	d050      	beq.n	34003420 <HAL_GPIO_Init+0x298>
3400337e:	4b83      	ldr	r3, [pc, #524]	@ (3400358c <HAL_GPIO_Init+0x404>)
34003380:	429c      	cmp	r4, r3
34003382:	d04d      	beq.n	34003420 <HAL_GPIO_Init+0x298>
34003384:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003388:	429c      	cmp	r4, r3
3400338a:	d049      	beq.n	34003420 <HAL_GPIO_Init+0x298>
3400338c:	4b80      	ldr	r3, [pc, #512]	@ (34003590 <HAL_GPIO_Init+0x408>)
3400338e:	429c      	cmp	r4, r3
34003390:	d046      	beq.n	34003420 <HAL_GPIO_Init+0x298>
34003392:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003396:	429c      	cmp	r4, r3
34003398:	d042      	beq.n	34003420 <HAL_GPIO_Init+0x298>
3400339a:	4b7e      	ldr	r3, [pc, #504]	@ (34003594 <HAL_GPIO_Init+0x40c>)
3400339c:	429c      	cmp	r4, r3
3400339e:	d03f      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033a0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033a4:	429c      	cmp	r4, r3
340033a6:	d03b      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033a8:	4b7b      	ldr	r3, [pc, #492]	@ (34003598 <HAL_GPIO_Init+0x410>)
340033aa:	429c      	cmp	r4, r3
340033ac:	d038      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033ae:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033b2:	429c      	cmp	r4, r3
340033b4:	d034      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033b6:	4b79      	ldr	r3, [pc, #484]	@ (3400359c <HAL_GPIO_Init+0x414>)
340033b8:	429c      	cmp	r4, r3
340033ba:	d031      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033bc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033c0:	429c      	cmp	r4, r3
340033c2:	d02d      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033c4:	4b76      	ldr	r3, [pc, #472]	@ (340035a0 <HAL_GPIO_Init+0x418>)
340033c6:	429c      	cmp	r4, r3
340033c8:	d02a      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033ca:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033ce:	429c      	cmp	r4, r3
340033d0:	d026      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033d2:	4b74      	ldr	r3, [pc, #464]	@ (340035a4 <HAL_GPIO_Init+0x41c>)
340033d4:	429c      	cmp	r4, r3
340033d6:	d023      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033d8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033dc:	429c      	cmp	r4, r3
340033de:	d01f      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033e0:	4b71      	ldr	r3, [pc, #452]	@ (340035a8 <HAL_GPIO_Init+0x420>)
340033e2:	429c      	cmp	r4, r3
340033e4:	d01c      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033e6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033ea:	429c      	cmp	r4, r3
340033ec:	d018      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033ee:	4b6f      	ldr	r3, [pc, #444]	@ (340035ac <HAL_GPIO_Init+0x424>)
340033f0:	429c      	cmp	r4, r3
340033f2:	d015      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033f4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340033f8:	429c      	cmp	r4, r3
340033fa:	d011      	beq.n	34003420 <HAL_GPIO_Init+0x298>
340033fc:	4b6c      	ldr	r3, [pc, #432]	@ (340035b0 <HAL_GPIO_Init+0x428>)
340033fe:	429c      	cmp	r4, r3
34003400:	d00e      	beq.n	34003420 <HAL_GPIO_Init+0x298>
34003402:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003406:	429c      	cmp	r4, r3
34003408:	d00a      	beq.n	34003420 <HAL_GPIO_Init+0x298>
3400340a:	4b6a      	ldr	r3, [pc, #424]	@ (340035b4 <HAL_GPIO_Init+0x42c>)
3400340c:	429c      	cmp	r4, r3
3400340e:	d007      	beq.n	34003420 <HAL_GPIO_Init+0x298>
34003410:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003414:	429c      	cmp	r4, r3
34003416:	d003      	beq.n	34003420 <HAL_GPIO_Init+0x298>
34003418:	21de      	movs	r1, #222	@ 0xde
3400341a:	485a      	ldr	r0, [pc, #360]	@ (34003584 <HAL_GPIO_Init+0x3fc>)
3400341c:	f7fd ffa8 	bl	34001370 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34003420:	6933      	ldr	r3, [r6, #16]
34003422:	2b0f      	cmp	r3, #15
34003424:	d903      	bls.n	3400342e <HAL_GPIO_Init+0x2a6>
34003426:	21df      	movs	r1, #223	@ 0xdf
34003428:	4856      	ldr	r0, [pc, #344]	@ (34003584 <HAL_GPIO_Init+0x3fc>)
3400342a:	f7fd ffa1 	bl	34001370 <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3400342e:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
34003430:	08fa      	lsrs	r2, r7, #3
34003432:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003436:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
3400343a:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3400343c:	0089      	lsls	r1, r1, #2
3400343e:	408b      	lsls	r3, r1
34003440:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003444:	6933      	ldr	r3, [r6, #16]
34003446:	408b      	lsls	r3, r1
34003448:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
3400344a:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
3400344c:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
3400344e:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34003450:	fa03 f209 	lsl.w	r2, r3, r9
34003454:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34003458:	6872      	ldr	r2, [r6, #4]
3400345a:	ea02 0103 	and.w	r1, r2, r3
3400345e:	fa01 f109 	lsl.w	r1, r1, r9
34003462:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34003464:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
34003468:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
3400346a:	d073      	beq.n	34003554 <HAL_GPIO_Init+0x3cc>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
3400346c:	f04f 0e0f 	mov.w	lr, #15
34003470:	f027 0103 	bic.w	r1, r7, #3
34003474:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
34003478:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
3400347c:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
34003480:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003484:	4098      	lsls	r0, r3
34003486:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
3400348a:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
3400348c:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003490:	d064      	beq.n	3400355c <HAL_GPIO_Init+0x3d4>
34003492:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 3400358c <HAL_GPIO_Init+0x404>
34003496:	4574      	cmp	r4, lr
34003498:	d062      	beq.n	34003560 <HAL_GPIO_Init+0x3d8>
3400349a:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
3400349e:	4574      	cmp	r4, lr
340034a0:	d060      	beq.n	34003564 <HAL_GPIO_Init+0x3dc>
340034a2:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340034a6:	4574      	cmp	r4, lr
340034a8:	d020      	beq.n	340034ec <HAL_GPIO_Init+0x364>
340034aa:	4b3b      	ldr	r3, [pc, #236]	@ (34003598 <HAL_GPIO_Init+0x410>)
340034ac:	429c      	cmp	r4, r3
340034ae:	d05b      	beq.n	34003568 <HAL_GPIO_Init+0x3e0>
340034b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340034b4:	429c      	cmp	r4, r3
340034b6:	d059      	beq.n	3400356c <HAL_GPIO_Init+0x3e4>
340034b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340034bc:	429c      	cmp	r4, r3
340034be:	d057      	beq.n	34003570 <HAL_GPIO_Init+0x3e8>
340034c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340034c4:	429c      	cmp	r4, r3
340034c6:	d055      	beq.n	34003574 <HAL_GPIO_Init+0x3ec>
340034c8:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
340034cc:	429c      	cmp	r4, r3
340034ce:	d053      	beq.n	34003578 <HAL_GPIO_Init+0x3f0>
340034d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340034d4:	429c      	cmp	r4, r3
340034d6:	d051      	beq.n	3400357c <HAL_GPIO_Init+0x3f4>
340034d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340034dc:	429c      	cmp	r4, r3
340034de:	d04f      	beq.n	34003580 <HAL_GPIO_Init+0x3f8>
340034e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340034e4:	429c      	cmp	r4, r3
340034e6:	bf14      	ite	ne
340034e8:	2310      	movne	r3, #16
340034ea:	230b      	moveq	r3, #11
340034ec:	4083      	lsls	r3, r0
340034ee:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
340034f2:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
340034f4:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
340034f8:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
340034fc:	ea23 0105 	bic.w	r1, r3, r5
34003500:	ea43 0305 	orr.w	r3, r3, r5
34003504:	bf08      	it	eq
34003506:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
34003508:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
3400350c:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
34003510:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
34003514:	ea23 0105 	bic.w	r1, r3, r5
34003518:	ea43 0305 	orr.w	r3, r3, r5
3400351c:	bf08      	it	eq
3400351e:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
34003520:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
34003524:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
34003528:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
3400352c:	ea23 0105 	bic.w	r1, r3, r5
34003530:	ea43 0305 	orr.w	r3, r3, r5
34003534:	bf08      	it	eq
34003536:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
34003538:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
3400353c:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
34003540:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
34003544:	ea23 0105 	bic.w	r1, r3, r5
34003548:	ea45 0503 	orr.w	r5, r5, r3
3400354c:	bf08      	it	eq
3400354e:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
34003550:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
34003554:	3701      	adds	r7, #1
34003556:	f109 0902 	add.w	r9, r9, #2
3400355a:	e698      	b.n	3400328e <HAL_GPIO_Init+0x106>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
3400355c:	2300      	movs	r3, #0
3400355e:	e7c5      	b.n	340034ec <HAL_GPIO_Init+0x364>
34003560:	2301      	movs	r3, #1
34003562:	e7c3      	b.n	340034ec <HAL_GPIO_Init+0x364>
34003564:	2302      	movs	r3, #2
34003566:	e7c1      	b.n	340034ec <HAL_GPIO_Init+0x364>
34003568:	2304      	movs	r3, #4
3400356a:	e7bf      	b.n	340034ec <HAL_GPIO_Init+0x364>
3400356c:	2305      	movs	r3, #5
3400356e:	e7bd      	b.n	340034ec <HAL_GPIO_Init+0x364>
34003570:	2306      	movs	r3, #6
34003572:	e7bb      	b.n	340034ec <HAL_GPIO_Init+0x364>
34003574:	2307      	movs	r3, #7
34003576:	e7b9      	b.n	340034ec <HAL_GPIO_Init+0x364>
34003578:	2308      	movs	r3, #8
3400357a:	e7b7      	b.n	340034ec <HAL_GPIO_Init+0x364>
3400357c:	2309      	movs	r3, #9
3400357e:	e7b5      	b.n	340034ec <HAL_GPIO_Init+0x364>
34003580:	230a      	movs	r3, #10
34003582:	e7b3      	b.n	340034ec <HAL_GPIO_Init+0x364>
34003584:	34010762 	.word	0x34010762
34003588:	46020000 	.word	0x46020000
3400358c:	56020400 	.word	0x56020400
34003590:	56020800 	.word	0x56020800
34003594:	56020c00 	.word	0x56020c00
34003598:	56021000 	.word	0x56021000
3400359c:	56021400 	.word	0x56021400
340035a0:	56021800 	.word	0x56021800
340035a4:	56021c00 	.word	0x56021c00
340035a8:	56023400 	.word	0x56023400
340035ac:	56023800 	.word	0x56023800
340035b0:	56023c00 	.word	0x56023c00
340035b4:	56024000 	.word	0x56024000

340035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
340035b8:	b570      	push	{r4, r5, r6, lr}
340035ba:	4605      	mov	r5, r0
340035bc:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
340035be:	460c      	mov	r4, r1
340035c0:	b921      	cbnz	r1, 340035cc <HAL_GPIO_WritePin+0x14>
340035c2:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
340035c6:	4808      	ldr	r0, [pc, #32]	@ (340035e8 <HAL_GPIO_WritePin+0x30>)
340035c8:	f7fd fed2 	bl	34001370 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
340035cc:	2e01      	cmp	r6, #1
340035ce:	d906      	bls.n	340035de <HAL_GPIO_WritePin+0x26>
340035d0:	f240 11a1 	movw	r1, #417	@ 0x1a1
340035d4:	4804      	ldr	r0, [pc, #16]	@ (340035e8 <HAL_GPIO_WritePin+0x30>)
340035d6:	f7fd fecb 	bl	34001370 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
340035da:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
340035dc:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
340035de:	2e00      	cmp	r6, #0
340035e0:	d1fb      	bne.n	340035da <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
340035e2:	62ac      	str	r4, [r5, #40]	@ 0x28
}
340035e4:	e7fa      	b.n	340035dc <HAL_GPIO_WritePin+0x24>
340035e6:	bf00      	nop
340035e8:	34010762 	.word	0x34010762

340035ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
340035ec:	b570      	push	{r4, r5, r6, lr}
340035ee:	f001 060f 	and.w	r6, r1, #15
340035f2:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
340035f6:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
340035fa:	4605      	mov	r5, r0
340035fc:	ea4f 0484 	mov.w	r4, r4, lsl #2
34003600:	f04f 0024 	mov.w	r0, #36	@ 0x24
  if ((ep_addr & 0x80U) == 0x80U)
34003604:	d020      	beq.n	34003648 <HAL_PCD_EP_Open+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003606:	f104 0114 	add.w	r1, r4, #20
    ep->is_in = 1U;
3400360a:	2401      	movs	r4, #1
3400360c:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003610:	4429      	add	r1, r5
    ep->is_in = 1U;
34003612:	7544      	strb	r4, [r0, #21]
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
34003614:	f3c2 020a 	ubfx	r2, r2, #0, #11
34003618:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

  if (ep->is_in != 0U)
3400361a:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
3400361c:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
3400361e:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
34003620:	b102      	cbz	r2, 34003624 <HAL_PCD_EP_Open+0x38>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
34003622:	834e      	strh	r6, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
34003624:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
34003626:	bf04      	itt	eq
34003628:	2300      	moveq	r3, #0
3400362a:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
3400362c:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
34003630:	2b01      	cmp	r3, #1
34003632:	d012      	beq.n	3400365a <HAL_PCD_EP_Open+0x6e>
34003634:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
34003636:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
34003638:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
3400363c:	f007 ffcb 	bl	3400b5d6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
34003640:	2000      	movs	r0, #0
34003642:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494

  return ret;
}
34003646:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003648:	f504 7115 	add.w	r1, r4, #596	@ 0x254
    ep->is_in = 0U;
3400364c:	2400      	movs	r4, #0
3400364e:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003652:	4429      	add	r1, r5
    ep->is_in = 0U;
34003654:	f880 4255 	strb.w	r4, [r0, #597]	@ 0x255
34003658:	e7dc      	b.n	34003614 <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
3400365a:	2002      	movs	r0, #2
3400365c:	e7f3      	b.n	34003646 <HAL_PCD_EP_Open+0x5a>

3400365e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
3400365e:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003660:	2424      	movs	r4, #36	@ 0x24
34003662:	f001 050f 	and.w	r5, r1, #15
34003666:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
3400366a:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
3400366e:	e9c4 2398 	strd	r2, r3, [r4, #608]	@ 0x260
  ep->xfer_count = 0U;
34003672:	2300      	movs	r3, #0
{
34003674:	4616      	mov	r6, r2
  ep->xfer_count = 0U;
34003676:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
  ep->is_in = 0U;
3400367a:	f884 3255 	strb.w	r3, [r4, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
3400367e:	f884 5254 	strb.w	r5, [r4, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
34003682:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003684:	f501 7115 	add.w	r1, r1, #596	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
34003688:	2a01      	cmp	r2, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
3400368a:	bf08      	it	eq
3400368c:	f8c4 6270 	streq.w	r6, [r4, #624]	@ 0x270
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
34003690:	6800      	ldr	r0, [r0, #0]
34003692:	f008 f833 	bl	3400b6fc <USB_EPStartXfer>

  return HAL_OK;
}
34003696:	2000      	movs	r0, #0
34003698:	bd70      	pop	{r4, r5, r6, pc}

3400369a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
3400369a:	2324      	movs	r3, #36	@ 0x24
3400369c:	f001 010f 	and.w	r1, r1, #15
340036a0:	fb03 0001 	mla	r0, r3, r1, r0
}
340036a4:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
340036a8:	4770      	bx	lr

340036aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
340036aa:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340036ac:	2424      	movs	r4, #36	@ 0x24
340036ae:	f001 050f 	and.w	r5, r1, #15
340036b2:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
340036b6:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
340036ba:	e9c4 2308 	strd	r2, r3, [r4, #32]
  ep->xfer_count = 0U;
340036be:	2300      	movs	r3, #0
340036c0:	62a3      	str	r3, [r4, #40]	@ 0x28
  ep->is_in = 1U;
340036c2:	2301      	movs	r3, #1
{
340036c4:	4616      	mov	r6, r2
  ep->is_in = 1U;
340036c6:	7563      	strb	r3, [r4, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
340036c8:	7525      	strb	r5, [r4, #20]

  if (hpcd->Init.dma_enable == 1U)
340036ca:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340036cc:	3114      	adds	r1, #20
  if (hpcd->Init.dma_enable == 1U)
340036ce:	429a      	cmp	r2, r3
  {
    ep->dma_addr = (uint32_t)pBuf;
340036d0:	bf08      	it	eq
340036d2:	6326      	streq	r6, [r4, #48]	@ 0x30
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
340036d4:	6800      	ldr	r0, [r0, #0]
340036d6:	f008 f811 	bl	3400b6fc <USB_EPStartXfer>

  return HAL_OK;
}
340036da:	2000      	movs	r0, #0
340036dc:	bd70      	pop	{r4, r5, r6, pc}

340036de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
340036de:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
340036e0:	7903      	ldrb	r3, [r0, #4]
340036e2:	f001 050f 	and.w	r5, r1, #15
340036e6:	42ab      	cmp	r3, r5
{
340036e8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
340036ea:	d32b      	bcc.n	34003744 <HAL_PCD_EP_SetStall+0x66>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
340036ec:	f011 0f80 	tst.w	r1, #128	@ 0x80
340036f0:	f04f 0024 	mov.w	r0, #36	@ 0x24
340036f4:	d01d      	beq.n	34003732 <HAL_PCD_EP_SetStall+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
340036f6:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340036f8:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
340036fc:	fb00 4005 	mla	r0, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003700:	3114      	adds	r1, #20
    ep->is_in = 1U;
34003702:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
34003704:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
34003706:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
34003708:	708b      	strb	r3, [r1, #2]

  __HAL_LOCK(hpcd);
3400370a:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
3400370e:	429a      	cmp	r2, r3
34003710:	d01a      	beq.n	34003748 <HAL_PCD_EP_SetStall+0x6a>

  (void)USB_EPSetStall(hpcd->Instance, ep);
34003712:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
34003714:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
34003718:	f008 f917 	bl	3400b94a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
3400371c:	b92d      	cbnz	r5, 3400372a <HAL_PCD_EP_SetStall+0x4c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
3400371e:	79a1      	ldrb	r1, [r4, #6]
34003720:	6820      	ldr	r0, [r4, #0]
34003722:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003726:	f008 f97b 	bl	3400ba20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
3400372a:	2000      	movs	r0, #0
3400372c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
34003730:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
34003732:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
34003736:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
34003738:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
3400373c:	2300      	movs	r3, #0
3400373e:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
34003742:	e7df      	b.n	34003704 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
34003744:	2001      	movs	r0, #1
34003746:	e7f3      	b.n	34003730 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
34003748:	2002      	movs	r0, #2
3400374a:	e7f1      	b.n	34003730 <HAL_PCD_EP_SetStall+0x52>

3400374c <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
3400374c:	f001 030f 	and.w	r3, r1, #15
34003750:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
34003754:	009b      	lsls	r3, r3, #2
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003756:	f103 0214 	add.w	r2, r3, #20
3400375a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
3400375e:	4402      	add	r2, r0
34003760:	4403      	add	r3, r0
34003762:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
34003766:	bf0c      	ite	eq
34003768:	4619      	moveq	r1, r3
3400376a:	4611      	movne	r1, r2
3400376c:	6800      	ldr	r0, [r0, #0]
3400376e:	f007 bf71 	b.w	3400b654 <USB_EPStopXfer>
	...

34003774 <HAL_PCD_IRQHandler>:
{
34003774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003778:	6806      	ldr	r6, [r0, #0]
{
3400377a:	4604      	mov	r4, r0
3400377c:	b087      	sub	sp, #28
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
3400377e:	4630      	mov	r0, r6
34003780:	f008 f93c 	bl	3400b9fc <USB_GetMode>
34003784:	2800      	cmp	r0, #0
34003786:	f040 8176 	bne.w	34003a76 <HAL_PCD_IRQHandler+0x302>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
3400378a:	6820      	ldr	r0, [r4, #0]
3400378c:	f008 f908 	bl	3400b9a0 <USB_ReadInterrupts>
34003790:	2800      	cmp	r0, #0
34003792:	f000 8170 	beq.w	34003a76 <HAL_PCD_IRQHandler+0x302>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
34003796:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
3400379a:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
3400379c:	f3c3 230d 	ubfx	r3, r3, #8, #14
340037a0:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
340037a4:	f008 f8fc 	bl	3400b9a0 <USB_ReadInterrupts>
340037a8:	0787      	lsls	r7, r0, #30
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340037aa:	bf48      	it	mi
340037ac:	6822      	ldrmi	r2, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
340037ae:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340037b0:	bf48      	it	mi
340037b2:	6953      	ldrmi	r3, [r2, #20]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
340037b4:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340037b8:	bf44      	itt	mi
340037ba:	f003 0302 	andmi.w	r3, r3, #2
340037be:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
340037c0:	f008 f8ee 	bl	3400b9a0 <USB_ReadInterrupts>
340037c4:	06c0      	lsls	r0, r0, #27
340037c6:	d52d      	bpl.n	34003824 <HAL_PCD_IRQHandler+0xb0>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
340037c8:	6822      	ldr	r2, [r4, #0]
340037ca:	6993      	ldr	r3, [r2, #24]
340037cc:	f023 0310 	bic.w	r3, r3, #16
340037d0:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
340037d2:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
340037d6:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
340037da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
340037de:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
340037e2:	f040 814b 	bne.w	34003a7c <HAL_PCD_IRQHandler+0x308>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
340037e6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
340037ea:	ea18 0f03 	tst.w	r8, r3
340037ee:	d014      	beq.n	3400381a <HAL_PCD_IRQHandler+0xa6>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
340037f0:	2324      	movs	r3, #36	@ 0x24
340037f2:	fb03 4707 	mla	r7, r3, r7, r4
340037f6:	f3c8 190a 	ubfx	r9, r8, #4, #11
340037fa:	464a      	mov	r2, r9
340037fc:	4630      	mov	r0, r6
340037fe:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
34003802:	f008 f87d 	bl	3400b900 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003806:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
3400380a:	444b      	add	r3, r9
3400380c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003810:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
34003814:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003816:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
3400381a:	6822      	ldr	r2, [r4, #0]
3400381c:	6993      	ldr	r3, [r2, #24]
3400381e:	f043 0310 	orr.w	r3, r3, #16
34003822:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
34003824:	6820      	ldr	r0, [r4, #0]
34003826:	f008 f8bb 	bl	3400b9a0 <USB_ReadInterrupts>
3400382a:	0301      	lsls	r1, r0, #12
3400382c:	f100 8139 	bmi.w	34003aa2 <HAL_PCD_IRQHandler+0x32e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
34003830:	6820      	ldr	r0, [r4, #0]
34003832:	f008 f8b5 	bl	3400b9a0 <USB_ReadInterrupts>
34003836:	0342      	lsls	r2, r0, #13
34003838:	d50d      	bpl.n	34003856 <HAL_PCD_IRQHandler+0xe2>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
3400383a:	6820      	ldr	r0, [r4, #0]
3400383c:	f008 f8bc 	bl	3400b9b8 <USB_ReadDevAllInEpInterrupt>
34003840:	4627      	mov	r7, r4
34003842:	4683      	mov	fp, r0
      epnum = 0U;
34003844:	f04f 0900 	mov.w	r9, #0
34003848:	f506 6a10 	add.w	sl, r6, #2304	@ 0x900
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
3400384c:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
3400384e:	f1bb 0f00 	cmp.w	fp, #0
34003852:	f040 81f0 	bne.w	34003c36 <HAL_PCD_IRQHandler+0x4c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
34003856:	6820      	ldr	r0, [r4, #0]
34003858:	f008 f8a2 	bl	3400b9a0 <USB_ReadInterrupts>
3400385c:	2800      	cmp	r0, #0
3400385e:	da13      	bge.n	34003888 <HAL_PCD_IRQHandler+0x114>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003860:	686b      	ldr	r3, [r5, #4]
34003862:	f023 0301 	bic.w	r3, r3, #1
34003866:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
34003868:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
3400386c:	2b01      	cmp	r3, #1
3400386e:	f040 8286 	bne.w	34003d7e <HAL_PCD_IRQHandler+0x60a>
        hpcd->LPM_State = LPM_L0;
34003872:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
34003874:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
34003876:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
3400387a:	f000 fafa 	bl	34003e72 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
3400387e:	6822      	ldr	r2, [r4, #0]
34003880:	6953      	ldr	r3, [r2, #20]
34003882:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
34003886:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
34003888:	6820      	ldr	r0, [r4, #0]
3400388a:	f008 f889 	bl	3400b9a0 <USB_ReadInterrupts>
3400388e:	0502      	lsls	r2, r0, #20
34003890:	d50a      	bpl.n	340038a8 <HAL_PCD_IRQHandler+0x134>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
34003892:	68ab      	ldr	r3, [r5, #8]
34003894:	07db      	lsls	r3, r3, #31
34003896:	d502      	bpl.n	3400389e <HAL_PCD_IRQHandler+0x12a>
        HAL_PCD_SuspendCallback(hpcd);
34003898:	4620      	mov	r0, r4
3400389a:	f008 fa4f 	bl	3400bd3c <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
3400389e:	6822      	ldr	r2, [r4, #0]
340038a0:	6953      	ldr	r3, [r2, #20]
340038a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340038a6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
340038a8:	6820      	ldr	r0, [r4, #0]
340038aa:	f008 f879 	bl	3400b9a0 <USB_ReadInterrupts>
340038ae:	0107      	lsls	r7, r0, #4
340038b0:	d514      	bpl.n	340038dc <HAL_PCD_IRQHandler+0x168>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
340038b2:	6823      	ldr	r3, [r4, #0]
340038b4:	695a      	ldr	r2, [r3, #20]
340038b6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
340038ba:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
340038bc:	f894 24cc 	ldrb.w	r2, [r4, #1228]	@ 0x4cc
340038c0:	2a00      	cmp	r2, #0
340038c2:	f040 8260 	bne.w	34003d86 <HAL_PCD_IRQHandler+0x612>
        hpcd->LPM_State = LPM_L1;
340038c6:	2101      	movs	r1, #1
340038c8:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
340038cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
340038ce:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
340038d0:	f3c3 0383 	ubfx	r3, r3, #2, #4
340038d4:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
340038d8:	f000 facb 	bl	34003e72 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
340038dc:	6820      	ldr	r0, [r4, #0]
340038de:	f008 f85f 	bl	3400b9a0 <USB_ReadInterrupts>
340038e2:	04c0      	lsls	r0, r0, #19
340038e4:	d537      	bpl.n	34003956 <HAL_PCD_IRQHandler+0x1e2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
340038e6:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
340038e8:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
340038ea:	f023 0301 	bic.w	r3, r3, #1
340038ee:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
340038f0:	6820      	ldr	r0, [r4, #0]
340038f2:	f007 fe21 	bl	3400b538 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
340038f6:	7921      	ldrb	r1, [r4, #4]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
340038f8:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
340038fc:	2900      	cmp	r1, #0
340038fe:	f101 0201 	add.w	r2, r1, #1
34003902:	bf08      	it	eq
34003904:	2201      	moveq	r2, #1
34003906:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
3400390a:	3a01      	subs	r2, #1
3400390c:	f040 823f 	bne.w	34003d8e <HAL_PCD_IRQHandler+0x61a>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
34003910:	69eb      	ldr	r3, [r5, #28]
34003912:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
34003916:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
34003918:	7be3      	ldrb	r3, [r4, #15]
3400391a:	2b00      	cmp	r3, #0
3400391c:	f000 8252 	beq.w	34003dc4 <HAL_PCD_IRQHandler+0x650>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
34003920:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
34003924:	f043 030b 	orr.w	r3, r3, #11
34003928:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
3400392c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
3400392e:	f043 030b 	orr.w	r3, r3, #11
34003932:	646b      	str	r3, [r5, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
34003934:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003938:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
3400393c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
34003940:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003944:	79a1      	ldrb	r1, [r4, #6]
34003946:	6820      	ldr	r0, [r4, #0]
34003948:	f008 f86a 	bl	3400ba20 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
3400394c:	6822      	ldr	r2, [r4, #0]
3400394e:	6953      	ldr	r3, [r2, #20]
34003950:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34003954:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
34003956:	6820      	ldr	r0, [r4, #0]
34003958:	f008 f822 	bl	3400b9a0 <USB_ReadInterrupts>
3400395c:	0481      	lsls	r1, r0, #18
3400395e:	d516      	bpl.n	3400398e <HAL_PCD_IRQHandler+0x21a>
      (void)USB_ActivateSetup(hpcd->Instance);
34003960:	6820      	ldr	r0, [r4, #0]
34003962:	f008 f84f 	bl	3400ba04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
34003966:	6820      	ldr	r0, [r4, #0]
34003968:	f007 fe2a 	bl	3400b5c0 <USB_GetDevSpeed>
3400396c:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
3400396e:	6827      	ldr	r7, [r4, #0]
34003970:	f001 fb78 	bl	34005064 <HAL_RCC_GetHCLKFreq>
34003974:	79e2      	ldrb	r2, [r4, #7]
34003976:	4601      	mov	r1, r0
34003978:	4638      	mov	r0, r7
3400397a:	f007 fd6d 	bl	3400b458 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
3400397e:	4620      	mov	r0, r4
34003980:	f008 f9a8 	bl	3400bcd4 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
34003984:	6822      	ldr	r2, [r4, #0]
34003986:	6953      	ldr	r3, [r2, #20]
34003988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400398c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
3400398e:	6820      	ldr	r0, [r4, #0]
34003990:	f008 f806 	bl	3400b9a0 <USB_ReadInterrupts>
34003994:	0702      	lsls	r2, r0, #28
34003996:	d507      	bpl.n	340039a8 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_SOFCallback(hpcd);
34003998:	4620      	mov	r0, r4
3400399a:	f008 f9e3 	bl	3400bd64 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
3400399e:	6822      	ldr	r2, [r4, #0]
340039a0:	6953      	ldr	r3, [r2, #20]
340039a2:	f003 0308 	and.w	r3, r3, #8
340039a6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
340039a8:	6820      	ldr	r0, [r4, #0]
340039aa:	f007 fff9 	bl	3400b9a0 <USB_ReadInterrupts>
340039ae:	0603      	lsls	r3, r0, #24
340039b0:	f100 8213 	bmi.w	34003dda <HAL_PCD_IRQHandler+0x666>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
340039b4:	6820      	ldr	r0, [r4, #0]
340039b6:	f007 fff3 	bl	3400b9a0 <USB_ReadInterrupts>
340039ba:	02c7      	lsls	r7, r0, #11
340039bc:	d50c      	bpl.n	340039d8 <HAL_PCD_IRQHandler+0x264>
340039be:	46a0      	mov	r8, r4
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
340039c0:	2701      	movs	r7, #1
340039c2:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
340039c6:	7923      	ldrb	r3, [r4, #4]
340039c8:	42bb      	cmp	r3, r7
340039ca:	f200 821f 	bhi.w	34003e0c <HAL_PCD_IRQHandler+0x698>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
340039ce:	6822      	ldr	r2, [r4, #0]
340039d0:	6953      	ldr	r3, [r2, #20]
340039d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
340039d6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
340039d8:	6820      	ldr	r0, [r4, #0]
340039da:	f007 ffe1 	bl	3400b9a0 <USB_ReadInterrupts>
340039de:	0280      	lsls	r0, r0, #10
340039e0:	d52c      	bpl.n	34003a3c <HAL_PCD_IRQHandler+0x2c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
340039e2:	7923      	ldrb	r3, [r4, #4]
340039e4:	4622      	mov	r2, r4
340039e6:	2b00      	cmp	r3, #0
340039e8:	bf08      	it	eq
340039ea:	2301      	moveq	r3, #1
340039ec:	f506 6c32 	add.w	ip, r6, #2848	@ 0xb20
340039f0:	3b01      	subs	r3, #1
340039f2:	d01e      	beq.n	34003a32 <HAL_PCD_IRQHandler+0x2be>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
340039f4:	f892 727c 	ldrb.w	r7, [r2, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
340039f8:	f8dc 0000 	ldr.w	r0, [ip]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
340039fc:	2f01      	cmp	r7, #1
340039fe:	f040 821b 	bne.w	34003e38 <HAL_PCD_IRQHandler+0x6c4>
34003a02:	2800      	cmp	r0, #0
34003a04:	f280 8218 	bge.w	34003e38 <HAL_PCD_IRQHandler+0x6c4>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
34003a08:	f8d4 14d4 	ldr.w	r1, [r4, #1236]	@ 0x4d4
34003a0c:	ea81 4010 	eor.w	r0, r1, r0, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
34003a10:	07c1      	lsls	r1, r0, #31
34003a12:	f100 8211 	bmi.w	34003e38 <HAL_PCD_IRQHandler+0x6c4>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
34003a16:	f882 727b 	strb.w	r7, [r2, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
34003a1a:	69b0      	ldr	r0, [r6, #24]
34003a1c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
34003a20:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
34003a22:	6970      	ldr	r0, [r6, #20]
34003a24:	0600      	lsls	r0, r0, #24
34003a26:	f100 8207 	bmi.w	34003e38 <HAL_PCD_IRQHandler+0x6c4>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
34003a2a:	686b      	ldr	r3, [r5, #4]
34003a2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34003a30:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
34003a32:	6822      	ldr	r2, [r4, #0]
34003a34:	6953      	ldr	r3, [r2, #20]
34003a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34003a3a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
34003a3c:	6820      	ldr	r0, [r4, #0]
34003a3e:	f007 ffaf 	bl	3400b9a0 <USB_ReadInterrupts>
34003a42:	0041      	lsls	r1, r0, #1
34003a44:	d507      	bpl.n	34003a56 <HAL_PCD_IRQHandler+0x2e2>
      HAL_PCD_ConnectCallback(hpcd);
34003a46:	4620      	mov	r0, r4
34003a48:	f008 f95c 	bl	3400bd04 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
34003a4c:	6822      	ldr	r2, [r4, #0]
34003a4e:	6953      	ldr	r3, [r2, #20]
34003a50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34003a54:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
34003a56:	6820      	ldr	r0, [r4, #0]
34003a58:	f007 ffa2 	bl	3400b9a0 <USB_ReadInterrupts>
34003a5c:	0742      	lsls	r2, r0, #29
34003a5e:	d50a      	bpl.n	34003a76 <HAL_PCD_IRQHandler+0x302>
      RegVal = hpcd->Instance->GOTGINT;
34003a60:	6823      	ldr	r3, [r4, #0]
34003a62:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
34003a64:	076b      	lsls	r3, r5, #29
34003a66:	d502      	bpl.n	34003a6e <HAL_PCD_IRQHandler+0x2fa>
        HAL_PCD_DisconnectCallback(hpcd);
34003a68:	4620      	mov	r0, r4
34003a6a:	f008 f955 	bl	3400bd18 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
34003a6e:	6822      	ldr	r2, [r4, #0]
34003a70:	6853      	ldr	r3, [r2, #4]
34003a72:	432b      	orrs	r3, r5
34003a74:	6053      	str	r3, [r2, #4]
}
34003a76:	b007      	add	sp, #28
34003a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
34003a7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
34003a80:	f47f aecb 	bne.w	3400381a <HAL_PCD_IRQHandler+0xa6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
34003a84:	2208      	movs	r2, #8
34003a86:	4630      	mov	r0, r6
34003a88:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
34003a8c:	f007 ff38 	bl	3400b900 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003a90:	2324      	movs	r3, #36	@ 0x24
34003a92:	fb03 4707 	mla	r7, r3, r7, r4
34003a96:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
34003a9a:	f3c8 180a 	ubfx	r8, r8, #4, #11
34003a9e:	4443      	add	r3, r8
34003aa0:	e6b9      	b.n	34003816 <HAL_PCD_IRQHandler+0xa2>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
34003aa2:	6820      	ldr	r0, [r4, #0]
34003aa4:	f007 ff80 	bl	3400b9a8 <USB_ReadDevAllOutEpInterrupt>
34003aa8:	46a2      	mov	sl, r4
      epnum = 0U;
34003aaa:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
34003aac:	9002      	str	r0, [sp, #8]
      while (ep_intr != 0U)
34003aae:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
34003ab2:	9b02      	ldr	r3, [sp, #8]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003ab4:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
34003ab6:	2b00      	cmp	r3, #0
34003ab8:	f43f aeba 	beq.w	34003830 <HAL_PCD_IRQHandler+0xbc>
        if ((ep_intr & 0x1U) != 0U)
34003abc:	9b02      	ldr	r3, [sp, #8]
34003abe:	07db      	lsls	r3, r3, #31
34003ac0:	d578      	bpl.n	34003bb4 <HAL_PCD_IRQHandler+0x440>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003ac2:	fa5f fb87 	uxtb.w	fp, r7
34003ac6:	4659      	mov	r1, fp
34003ac8:	f007 ff7e 	bl	3400b9c8 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003acc:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003ad0:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003ad2:	d01f      	beq.n	34003b14 <HAL_PCD_IRQHandler+0x3a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003ad4:	2301      	movs	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003ad6:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003ad8:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
34003adc:	f894 c006 	ldrb.w	ip, [r4, #6]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003ae0:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
34003ae4:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
34003ae8:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003aec:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003aee:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
34003af0:	f040 808b 	bne.w	34003c0a <HAL_PCD_IRQHandler+0x496>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
34003af4:	f012 0f08 	tst.w	r2, #8
34003af8:	d007      	beq.n	34003b0a <HAL_PCD_IRQHandler+0x396>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003afa:	48b0      	ldr	r0, [pc, #704]	@ (34003dbc <HAL_PCD_IRQHandler+0x648>)
34003afc:	4281      	cmp	r1, r0
34003afe:	d909      	bls.n	34003b14 <HAL_PCD_IRQHandler+0x3a0>
34003b00:	0412      	lsls	r2, r2, #16
34003b02:	d507      	bpl.n	34003b14 <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003b04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34003b08:	e003      	b.n	34003b12 <HAL_PCD_IRQHandler+0x39e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
34003b0a:	f012 0f20 	tst.w	r2, #32
34003b0e:	d05a      	beq.n	34003bc6 <HAL_PCD_IRQHandler+0x452>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003b10:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003b12:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
34003b14:	f019 0f08 	tst.w	r9, #8
34003b18:	d021      	beq.n	34003b5e <HAL_PCD_IRQHandler+0x3ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
34003b1a:	2308      	movs	r3, #8
34003b1c:	f8c8 3008 	str.w	r3, [r8, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003b20:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003b22:	49a6      	ldr	r1, [pc, #664]	@ (34003dbc <HAL_PCD_IRQHandler+0x648>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
34003b2a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003b2e:	428a      	cmp	r2, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003b30:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003b32:	d904      	bls.n	34003b3e <HAL_PCD_IRQHandler+0x3ca>
34003b34:	0400      	lsls	r0, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003b36:	bf44      	itt	mi
34003b38:	f44f 4000 	movmi.w	r0, #32768	@ 0x8000
34003b3c:	6098      	strmi	r0, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
34003b3e:	4620      	mov	r0, r4
34003b40:	9203      	str	r2, [sp, #12]
34003b42:	f007 ffd1 	bl	3400bae8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
34003b46:	9a03      	ldr	r2, [sp, #12]
34003b48:	499c      	ldr	r1, [pc, #624]	@ (34003dbc <HAL_PCD_IRQHandler+0x648>)
34003b4a:	428a      	cmp	r2, r1
34003b4c:	d907      	bls.n	34003b5e <HAL_PCD_IRQHandler+0x3ea>
34003b4e:	79a1      	ldrb	r1, [r4, #6]
34003b50:	2901      	cmp	r1, #1
34003b52:	d104      	bne.n	34003b5e <HAL_PCD_IRQHandler+0x3ea>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003b54:	6820      	ldr	r0, [r4, #0]
34003b56:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003b5a:	f007 ff61 	bl	3400ba20 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
34003b5e:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
34003b62:	bf1c      	itt	ne
34003b64:	2310      	movne	r3, #16
34003b66:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
34003b6a:	f019 0f02 	tst.w	r9, #2
34003b6e:	d014      	beq.n	34003b9a <HAL_PCD_IRQHandler+0x426>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
34003b70:	6973      	ldr	r3, [r6, #20]
34003b72:	0619      	lsls	r1, r3, #24
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
34003b74:	bf42      	ittt	mi
34003b76:	686b      	ldrmi	r3, [r5, #4]
34003b78:	f443 6380 	orrmi.w	r3, r3, #1024	@ 0x400
34003b7c:	606b      	strmi	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
34003b7e:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
34003b82:	2b01      	cmp	r3, #1
34003b84:	d106      	bne.n	34003b94 <HAL_PCD_IRQHandler+0x420>
              ep->is_iso_incomplete = 0U;
34003b86:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003b88:	4659      	mov	r1, fp
34003b8a:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
34003b8c:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003b90:	f008 f912 	bl	3400bdb8 <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
34003b94:	2302      	movs	r3, #2
34003b96:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003b9a:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003b9e:	bf1c      	itt	ne
34003ba0:	2320      	movne	r3, #32
34003ba2:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
34003ba6:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
34003baa:	bf1c      	itt	ne
34003bac:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
34003bb0:	f8c8 3008 	strne.w	r3, [r8, #8]
        ep_intr >>= 1U;
34003bb4:	9b02      	ldr	r3, [sp, #8]
        epnum++;
34003bb6:	3701      	adds	r7, #1
        ep_intr >>= 1U;
34003bb8:	085b      	lsrs	r3, r3, #1
34003bba:	9302      	str	r3, [sp, #8]
34003bbc:	f108 0820 	add.w	r8, r8, #32
34003bc0:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
34003bc4:	e775      	b.n	34003ab2 <HAL_PCD_IRQHandler+0x33e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003bc6:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 34003dbc <HAL_PCD_IRQHandler+0x648>
34003bca:	4561      	cmp	r1, ip
34003bcc:	d901      	bls.n	34003bd2 <HAL_PCD_IRQHandler+0x45e>
34003bce:	0412      	lsls	r2, r2, #16
34003bd0:	d498      	bmi.n	34003b04 <HAL_PCD_IRQHandler+0x390>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
34003bd2:	691a      	ldr	r2, [r3, #16]
34003bd4:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
34003bd8:	f3c2 0212 	ubfx	r2, r2, #0, #19
34003bdc:	1a9b      	subs	r3, r3, r2
34003bde:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
34003be2:	b96f      	cbnz	r7, 34003c00 <HAL_PCD_IRQHandler+0x48c>
          if (ep->xfer_len == 0U)
34003be4:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
34003be8:	b92a      	cbnz	r2, 34003bf6 <HAL_PCD_IRQHandler+0x482>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003bea:	2101      	movs	r1, #1
34003bec:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003bf0:	f007 ff16 	bl	3400ba20 <USB_EP0_OutStart>
34003bf4:	e004      	b.n	34003c00 <HAL_PCD_IRQHandler+0x48c>
            ep->xfer_buff += ep->xfer_count;
34003bf6:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
34003bfa:	441a      	add	r2, r3
34003bfc:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003c00:	4659      	mov	r1, fp
34003c02:	4620      	mov	r0, r4
34003c04:	f008 f81c 	bl	3400bc40 <HAL_PCD_DataOutStageCallback>
34003c08:	e784      	b.n	34003b14 <HAL_PCD_IRQHandler+0x3a0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
34003c0a:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 34003dc0 <HAL_PCD_IRQHandler+0x64c>
34003c0e:	4561      	cmp	r1, ip
34003c10:	d107      	bne.n	34003c22 <HAL_PCD_IRQHandler+0x4ae>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
34003c12:	0411      	lsls	r1, r2, #16
34003c14:	f53f af76 	bmi.w	34003b04 <HAL_PCD_IRQHandler+0x390>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003c18:	0692      	lsls	r2, r2, #26
34003c1a:	d5f1      	bpl.n	34003c00 <HAL_PCD_IRQHandler+0x48c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003c1c:	2220      	movs	r2, #32
34003c1e:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003c20:	e7ee      	b.n	34003c00 <HAL_PCD_IRQHandler+0x48c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
34003c22:	2f00      	cmp	r7, #0
34003c24:	d1ec      	bne.n	34003c00 <HAL_PCD_IRQHandler+0x48c>
34003c26:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
34003c2a:	2b00      	cmp	r3, #0
34003c2c:	d1e8      	bne.n	34003c00 <HAL_PCD_IRQHandler+0x48c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003c2e:	4639      	mov	r1, r7
34003c30:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003c34:	e7dc      	b.n	34003bf0 <HAL_PCD_IRQHandler+0x47c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
34003c36:	f01b 0f01 	tst.w	fp, #1
34003c3a:	f000 8098 	beq.w	34003d6e <HAL_PCD_IRQHandler+0x5fa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003c3e:	fa5f f389 	uxtb.w	r3, r9
34003c42:	4619      	mov	r1, r3
34003c44:	9302      	str	r3, [sp, #8]
34003c46:	f007 fec8 	bl	3400b9da <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003c4a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003c4e:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003c50:	d01f      	beq.n	34003c92 <HAL_PCD_IRQHandler+0x51e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003c52:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003c54:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003c56:	f009 020f 	and.w	r2, r9, #15
34003c5a:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003c5e:	ea23 0302 	bic.w	r3, r3, r2
34003c62:	636b      	str	r3, [r5, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
34003c64:	f8ca 1008 	str.w	r1, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
34003c68:	79a1      	ldrb	r1, [r4, #6]
34003c6a:	2901      	cmp	r1, #1
34003c6c:	d10d      	bne.n	34003c8a <HAL_PCD_IRQHandler+0x516>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
34003c6e:	e9d7 2307 	ldrd	r2, r3, [r7, #28]
34003c72:	4413      	add	r3, r2
34003c74:	623b      	str	r3, [r7, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
34003c76:	f1b9 0f00 	cmp.w	r9, #0
34003c7a:	d106      	bne.n	34003c8a <HAL_PCD_IRQHandler+0x516>
34003c7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003c7e:	b923      	cbnz	r3, 34003c8a <HAL_PCD_IRQHandler+0x516>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003c80:	6820      	ldr	r0, [r4, #0]
34003c82:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003c86:	f007 fecb 	bl	3400ba20 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
34003c8a:	4620      	mov	r0, r4
34003c8c:	9902      	ldr	r1, [sp, #8]
34003c8e:	f007 ff77 	bl	3400bb80 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
34003c92:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
34003c96:	bf1c      	itt	ne
34003c98:	2308      	movne	r3, #8
34003c9a:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
34003c9e:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
34003ca2:	bf1c      	itt	ne
34003ca4:	2310      	movne	r3, #16
34003ca6:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
34003caa:	f018 0f40 	tst.w	r8, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
34003cae:	bf1c      	itt	ne
34003cb0:	2340      	movne	r3, #64	@ 0x40
34003cb2:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
34003cb6:	f018 0f02 	tst.w	r8, #2
34003cba:	d00f      	beq.n	34003cdc <HAL_PCD_IRQHandler+0x568>
            (void)USB_FlushTxFifo(USBx, epnum);
34003cbc:	4649      	mov	r1, r9
34003cbe:	4630      	mov	r0, r6
34003cc0:	f007 fc3a 	bl	3400b538 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
34003cc4:	7dfb      	ldrb	r3, [r7, #23]
34003cc6:	2b01      	cmp	r3, #1
34003cc8:	d105      	bne.n	34003cd6 <HAL_PCD_IRQHandler+0x562>
              ep->is_iso_incomplete = 0U;
34003cca:	2300      	movs	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003ccc:	4620      	mov	r0, r4
34003cce:	9902      	ldr	r1, [sp, #8]
              ep->is_iso_incomplete = 0U;
34003cd0:	75fb      	strb	r3, [r7, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003cd2:	f008 f851 	bl	3400bd78 <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
34003cd6:	2302      	movs	r3, #2
34003cd8:	f8ca 3008 	str.w	r3, [sl, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003cdc:	6823      	ldr	r3, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003cde:	f018 0f80 	tst.w	r8, #128	@ 0x80
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003ce2:	9303      	str	r3, [sp, #12]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003ce4:	d043      	beq.n	34003d6e <HAL_PCD_IRQHandler+0x5fa>
  if (ep->xfer_count > ep->xfer_len)
34003ce6:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
34003cea:	429a      	cmp	r2, r3
34003cec:	d83f      	bhi.n	34003d6e <HAL_PCD_IRQHandler+0x5fa>
  len = ep->xfer_len - ep->xfer_count;
34003cee:	1a9b      	subs	r3, r3, r2
  if (len > ep->maxpacket)
34003cf0:	69fa      	ldr	r2, [r7, #28]
34003cf2:	4293      	cmp	r3, r2
34003cf4:	bf28      	it	cs
34003cf6:	4613      	movcs	r3, r2
  len32b = (len + 3U) / 4U;
34003cf8:	3303      	adds	r3, #3
34003cfa:	089b      	lsrs	r3, r3, #2
34003cfc:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003cfe:	9b03      	ldr	r3, [sp, #12]
34003d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
34003d04:	eb03 1349 	add.w	r3, r3, r9, lsl #5
34003d08:	9305      	str	r3, [sp, #20]
34003d0a:	9b05      	ldr	r3, [sp, #20]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003d0c:	9804      	ldr	r0, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003d0e:	6999      	ldr	r1, [r3, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003d10:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003d14:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003d16:	4281      	cmp	r1, r0
34003d18:	d327      	bcc.n	34003d6a <HAL_PCD_IRQHandler+0x5f6>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003d1a:	4293      	cmp	r3, r2
34003d1c:	d80b      	bhi.n	34003d36 <HAL_PCD_IRQHandler+0x5c2>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003d1e:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003d20:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003d22:	f009 000f 	and.w	r0, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003d26:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003d2a:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003d2c:	ea22 0201 	bic.w	r2, r2, r1
34003d30:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
34003d34:	e01b      	b.n	34003d6e <HAL_PCD_IRQHandler+0x5fa>
    len = ep->xfer_len - ep->xfer_count;
34003d36:	eba3 0802 	sub.w	r8, r3, r2
    if (len > ep->maxpacket)
34003d3a:	69fb      	ldr	r3, [r7, #28]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003d3c:	9a02      	ldr	r2, [sp, #8]
    if (len > ep->maxpacket)
34003d3e:	4598      	cmp	r8, r3
34003d40:	bf28      	it	cs
34003d42:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
34003d44:	f108 0303 	add.w	r3, r8, #3
34003d48:	089b      	lsrs	r3, r3, #2
34003d4a:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003d4c:	79a3      	ldrb	r3, [r4, #6]
34003d4e:	9803      	ldr	r0, [sp, #12]
34003d50:	9300      	str	r3, [sp, #0]
34003d52:	6a39      	ldr	r1, [r7, #32]
34003d54:	fa1f f388 	uxth.w	r3, r8
34003d58:	f007 fcbe 	bl	3400b6d8 <USB_WritePacket>
    ep->xfer_buff  += len;
34003d5c:	6a3b      	ldr	r3, [r7, #32]
34003d5e:	4443      	add	r3, r8
34003d60:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
34003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34003d64:	4443      	add	r3, r8
34003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
34003d68:	e7cf      	b.n	34003d0a <HAL_PCD_IRQHandler+0x596>
  if (ep->xfer_len <= ep->xfer_count)
34003d6a:	4293      	cmp	r3, r2
34003d6c:	d9d7      	bls.n	34003d1e <HAL_PCD_IRQHandler+0x5aa>
        epnum++;
34003d6e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
34003d72:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
34003d76:	3724      	adds	r7, #36	@ 0x24
34003d78:	f10a 0a20 	add.w	sl, sl, #32
34003d7c:	e566      	b.n	3400384c <HAL_PCD_IRQHandler+0xd8>
        HAL_PCD_ResumeCallback(hpcd);
34003d7e:	4620      	mov	r0, r4
34003d80:	f007 ffe6 	bl	3400bd50 <HAL_PCD_ResumeCallback>
34003d84:	e57b      	b.n	3400387e <HAL_PCD_IRQHandler+0x10a>
        HAL_PCD_SuspendCallback(hpcd);
34003d86:	4620      	mov	r0, r4
34003d88:	f007 ffd8 	bl	3400bd3c <HAL_PCD_SuspendCallback>
34003d8c:	e5a6      	b.n	340038dc <HAL_PCD_IRQHandler+0x168>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003d8e:	6098      	str	r0, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
34003d90:	6819      	ldr	r1, [r3, #0]
34003d92:	3320      	adds	r3, #32
34003d94:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003d98:	f843 1c20 	str.w	r1, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
34003d9c:	f8c3 01e8 	str.w	r0, [r3, #488]	@ 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
34003da0:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003da4:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003da8:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
34003dac:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003db0:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
34003db4:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003db8:	e5a7      	b.n	3400390a <HAL_PCD_IRQHandler+0x196>
34003dba:	bf00      	nop
34003dbc:	4f54300a 	.word	0x4f54300a
34003dc0:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
34003dc4:	696b      	ldr	r3, [r5, #20]
34003dc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34003dca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
34003dce:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
34003dd0:	692b      	ldr	r3, [r5, #16]
34003dd2:	f043 030b 	orr.w	r3, r3, #11
34003dd6:	612b      	str	r3, [r5, #16]
34003dd8:	e5ac      	b.n	34003934 <HAL_PCD_IRQHandler+0x1c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003dda:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003ddc:	f04f 0924 	mov.w	r9, #36	@ 0x24
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003de0:	69b3      	ldr	r3, [r6, #24]
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003de2:	f204 2857 	addw	r8, r4, #599	@ 0x257
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
34003dea:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003dec:	7923      	ldrb	r3, [r4, #4]
34003dee:	42bb      	cmp	r3, r7
34003df0:	f67f ade0 	bls.w	340039b4 <HAL_PCD_IRQHandler+0x240>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003df4:	fb09 f307 	mul.w	r3, r9, r7
34003df8:	f818 3003 	ldrb.w	r3, [r8, r3]
34003dfc:	2b01      	cmp	r3, #1
34003dfe:	d103      	bne.n	34003e08 <HAL_PCD_IRQHandler+0x694>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
34003e00:	4620      	mov	r0, r4
34003e02:	b2f9      	uxtb	r1, r7
34003e04:	f7ff fca2 	bl	3400374c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003e08:	3701      	adds	r7, #1
34003e0a:	e7ef      	b.n	34003dec <HAL_PCD_IRQHandler+0x678>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003e0c:	f898 303c 	ldrb.w	r3, [r8, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
34003e10:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003e14:	2b01      	cmp	r3, #1
34003e16:	d109      	bne.n	34003e2c <HAL_PCD_IRQHandler+0x6b8>
34003e18:	2a00      	cmp	r2, #0
34003e1a:	da07      	bge.n	34003e2c <HAL_PCD_IRQHandler+0x6b8>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003e1c:	f067 017f 	orn	r1, r7, #127	@ 0x7f
34003e20:	4620      	mov	r0, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
34003e22:	f888 303b 	strb.w	r3, [r8, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003e26:	b2c9      	uxtb	r1, r1
34003e28:	f7ff fc90 	bl	3400374c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003e2c:	3701      	adds	r7, #1
34003e2e:	f108 0824 	add.w	r8, r8, #36	@ 0x24
34003e32:	f109 0920 	add.w	r9, r9, #32
34003e36:	e5c6      	b.n	340039c6 <HAL_PCD_IRQHandler+0x252>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003e38:	3224      	adds	r2, #36	@ 0x24
34003e3a:	f10c 0c20 	add.w	ip, ip, #32
34003e3e:	e5d7      	b.n	340039f0 <HAL_PCD_IRQHandler+0x27c>

34003e40 <HAL_PCD_EP_Flush>:
{
34003e40:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
34003e42:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
{
34003e46:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
34003e48:	2b01      	cmp	r3, #1
34003e4a:	d010      	beq.n	34003e6e <HAL_PCD_EP_Flush+0x2e>
34003e4c:	2301      	movs	r3, #1
34003e4e:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
34003e52:	060b      	lsls	r3, r1, #24
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003e54:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
34003e56:	d507      	bpl.n	34003e68 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003e58:	f001 010f 	and.w	r1, r1, #15
34003e5c:	f007 fb6c 	bl	3400b538 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
34003e60:	2000      	movs	r0, #0
34003e62:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
34003e66:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
34003e68:	f007 fb89 	bl	3400b57e <USB_FlushRxFifo>
34003e6c:	e7f8      	b.n	34003e60 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
34003e6e:	2002      	movs	r0, #2
34003e70:	e7f9      	b.n	34003e66 <HAL_PCD_EP_Flush+0x26>

34003e72 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
34003e72:	4770      	bx	lr

34003e74 <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34003e74:	2804      	cmp	r0, #4
{
34003e76:	b538      	push	{r3, r4, r5, lr}
34003e78:	4605      	mov	r5, r0
34003e7a:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
34003e7c:	d912      	bls.n	34003ea4 <HAL_PWREx_ConfigVddIORange+0x30>
34003e7e:	f240 316a 	movw	r1, #874	@ 0x36a
34003e82:	481d      	ldr	r0, [pc, #116]	@ (34003ef8 <HAL_PWREx_ConfigVddIORange+0x84>)
34003e84:	f7fd fa74 	bl	34001370 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34003e88:	2c01      	cmp	r4, #1
34003e8a:	d915      	bls.n	34003eb8 <HAL_PWREx_ConfigVddIORange+0x44>
34003e8c:	f240 316b 	movw	r1, #875	@ 0x36b
34003e90:	4819      	ldr	r0, [pc, #100]	@ (34003ef8 <HAL_PWREx_ConfigVddIORange+0x84>)
34003e92:	f7fd fa6d 	bl	34001370 <assert_failed>

  switch (VddIOPort)
34003e96:	2d04      	cmp	r5, #4
34003e98:	d80e      	bhi.n	34003eb8 <HAL_PWREx_ConfigVddIORange+0x44>
34003e9a:	e8df f005 	tbb	[pc, r5]
34003e9e:	0e06      	.short	0x0e06
34003ea0:	1c15      	.short	0x1c15
34003ea2:	24          	.byte	0x24
34003ea3:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34003ea4:	2901      	cmp	r1, #1
34003ea6:	d9f6      	bls.n	34003e96 <HAL_PWREx_ConfigVddIORange+0x22>
34003ea8:	e7f0      	b.n	34003e8c <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34003eaa:	4a14      	ldr	r2, [pc, #80]	@ (34003efc <HAL_PWREx_ConfigVddIORange+0x88>)
34003eac:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003eb2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34003eb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
34003eb8:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34003eba:	4a10      	ldr	r2, [pc, #64]	@ (34003efc <HAL_PWREx_ConfigVddIORange+0x88>)
34003ebc:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003ebe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
34003ec2:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
34003ec6:	e7f6      	b.n	34003eb6 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34003ec8:	4a0c      	ldr	r2, [pc, #48]	@ (34003efc <HAL_PWREx_ConfigVddIORange+0x88>)
34003eca:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003ecc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
34003ed0:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
34003ed4:	e7ef      	b.n	34003eb6 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34003ed6:	4a09      	ldr	r2, [pc, #36]	@ (34003efc <HAL_PWREx_ConfigVddIORange+0x88>)
34003ed8:	6b53      	ldr	r3, [r2, #52]	@ 0x34
34003eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003ede:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34003ee2:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
34003ee4:	e7e8      	b.n	34003eb8 <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34003ee6:	4a05      	ldr	r2, [pc, #20]	@ (34003efc <HAL_PWREx_ConfigVddIORange+0x88>)
34003ee8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
34003eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003eee:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34003ef2:	6393      	str	r3, [r2, #56]	@ 0x38
}
34003ef4:	e7e0      	b.n	34003eb8 <HAL_PWREx_ConfigVddIORange+0x44>
34003ef6:	bf00      	nop
34003ef8:	3401080b 	.word	0x3401080b
34003efc:	56024800 	.word	0x56024800

34003f00 <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34003f00:	4a02      	ldr	r2, [pc, #8]	@ (34003f0c <HAL_PWREx_EnableVddIO3+0xc>)
34003f02:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003f04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34003f08:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34003f0a:	4770      	bx	lr
34003f0c:	56024800 	.word	0x56024800

34003f10 <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003f10:	6803      	ldr	r3, [r0, #0]
34003f12:	4a1c      	ldr	r2, [pc, #112]	@ (34003f84 <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
34003f14:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003f16:	4293      	cmp	r3, r2
{
34003f18:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003f1a:	d02c      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f1c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003f20:	4293      	cmp	r3, r2
34003f22:	d028      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f24:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003f28:	3280      	adds	r2, #128	@ 0x80
34003f2a:	4293      	cmp	r3, r2
34003f2c:	d023      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f2e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003f32:	4293      	cmp	r3, r2
34003f34:	d01f      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f36:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003f3a:	3280      	adds	r2, #128	@ 0x80
34003f3c:	4293      	cmp	r3, r2
34003f3e:	d01a      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f40:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003f44:	4293      	cmp	r3, r2
34003f46:	d016      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f48:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003f4c:	3280      	adds	r2, #128	@ 0x80
34003f4e:	4293      	cmp	r3, r2
34003f50:	d011      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f52:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003f56:	4293      	cmp	r3, r2
34003f58:	d00d      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f5a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003f5e:	3280      	adds	r2, #128	@ 0x80
34003f60:	4293      	cmp	r3, r2
34003f62:	d008      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f64:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003f68:	4293      	cmp	r3, r2
34003f6a:	d004      	beq.n	34003f76 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003f6c:	f240 4107 	movw	r1, #1031	@ 0x407
34003f70:	4805      	ldr	r0, [pc, #20]	@ (34003f88 <HAL_RAMCFG_EnableAXISRAM+0x78>)
34003f72:	f7fd f9fd 	bl	34001370 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34003f76:	6822      	ldr	r2, [r4, #0]
34003f78:	6813      	ldr	r3, [r2, #0]
34003f7a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34003f7e:	6013      	str	r3, [r2, #0]
}
34003f80:	bd10      	pop	{r4, pc}
34003f82:	bf00      	nop
34003f84:	52023080 	.word	0x52023080
34003f88:	340108b6 	.word	0x340108b6

34003f8c <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34003f8c:	4b02      	ldr	r3, [pc, #8]	@ (34003f98 <LL_RCC_HSI_IsReady+0xc>)
34003f8e:	6858      	ldr	r0, [r3, #4]
}
34003f90:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34003f94:	4770      	bx	lr
34003f96:	bf00      	nop
34003f98:	56028000 	.word	0x56028000

34003f9c <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34003f9c:	4b02      	ldr	r3, [pc, #8]	@ (34003fa8 <LL_RCC_MSI_IsReady+0xc>)
34003f9e:	6858      	ldr	r0, [r3, #4]
}
34003fa0:	f3c0 0080 	ubfx	r0, r0, #2, #1
34003fa4:	4770      	bx	lr
34003fa6:	bf00      	nop
34003fa8:	56028000 	.word	0x56028000

34003fac <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34003fac:	4b02      	ldr	r3, [pc, #8]	@ (34003fb8 <LL_RCC_PLL1_IsReady+0xc>)
34003fae:	6858      	ldr	r0, [r3, #4]
}
34003fb0:	f3c0 2000 	ubfx	r0, r0, #8, #1
34003fb4:	4770      	bx	lr
34003fb6:	bf00      	nop
34003fb8:	56028000 	.word	0x56028000

34003fbc <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34003fbc:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003fbe:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003fc0:	4d1b      	ldr	r5, [pc, #108]	@ (34004030 <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34003fc2:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003fc4:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34003fc6:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003fc8:	021b      	lsls	r3, r3, #8
34003fca:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
34003fce:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34003fd0:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34003fd4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003fd8:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34003fda:	429a      	cmp	r2, r3
34003fdc:	d126      	bne.n	3400402c <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34003fde:	4b15      	ldr	r3, [pc, #84]	@ (34004034 <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34003fe0:	68ca      	ldr	r2, [r1, #12]
34003fe2:	58e3      	ldr	r3, [r4, r3]
34003fe4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003fe8:	4293      	cmp	r3, r2
34003fea:	d11f      	bne.n	3400402c <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34003fec:	4b12      	ldr	r3, [pc, #72]	@ (34004038 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34003fee:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34003ff0:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34003ff4:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34003ff6:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34003ffa:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34003ffe:	429a      	cmp	r2, r3
34004000:	d114      	bne.n	3400402c <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34004002:	4b0e      	ldr	r3, [pc, #56]	@ (3400403c <RCC_PLL_IsNewConfig+0x80>)
34004004:	685a      	ldr	r2, [r3, #4]
34004006:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400400a:	fa03 f000 	lsl.w	r0, r3, r0
3400400e:	4390      	bics	r0, r2
34004010:	d00a      	beq.n	34004028 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34004012:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
34004014:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
34004018:	bf0c      	ite	eq
3400401a:	2301      	moveq	r3, #1
3400401c:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3400401e:	6808      	ldr	r0, [r1, #0]
34004020:	1ac0      	subs	r0, r0, r3
34004022:	bf18      	it	ne
34004024:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
34004026:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
34004028:	2302      	movs	r3, #2
3400402a:	e7f8      	b.n	3400401e <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
3400402c:	2001      	movs	r0, #1
  return ret;
3400402e:	e7fa      	b.n	34004026 <RCC_PLL_IsNewConfig+0x6a>
34004030:	56028080 	.word	0x56028080
34004034:	56028084 	.word	0x56028084
34004038:	56028088 	.word	0x56028088
3400403c:	56028000 	.word	0x56028000

34004040 <RCC_PLL_Enable>:
{
34004040:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34004042:	f44f 7480 	mov.w	r4, #256	@ 0x100
34004046:	4e09      	ldr	r6, [pc, #36]	@ (3400406c <RCC_PLL_Enable+0x2c>)
34004048:	4084      	lsls	r4, r0
3400404a:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
3400404e:	f7fe f9b5 	bl	340023bc <HAL_GetTick>
34004052:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34004054:	6873      	ldr	r3, [r6, #4]
34004056:	421c      	tst	r4, r3
34004058:	d001      	beq.n	3400405e <RCC_PLL_Enable+0x1e>
  return ret;
3400405a:	2000      	movs	r0, #0
}
3400405c:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400405e:	f7fe f9ad 	bl	340023bc <HAL_GetTick>
34004062:	1b40      	subs	r0, r0, r5
34004064:	2801      	cmp	r0, #1
34004066:	d9f5      	bls.n	34004054 <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
34004068:	2003      	movs	r0, #3
3400406a:	e7f7      	b.n	3400405c <RCC_PLL_Enable+0x1c>
3400406c:	56028000 	.word	0x56028000

34004070 <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
34004070:	680b      	ldr	r3, [r1, #0]
{
34004072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
34004076:	2b02      	cmp	r3, #2
{
34004078:	4681      	mov	r9, r0
3400407a:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3400407c:	4f83      	ldr	r7, [pc, #524]	@ (3400428c <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3400407e:	4e84      	ldr	r6, [pc, #528]	@ (34004290 <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34004080:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
34004084:	f040 8099 	bne.w	340041ba <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34004088:	684b      	ldr	r3, [r1, #4]
3400408a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400408e:	d004      	beq.n	3400409a <RCC_PLL_Config+0x2a>
34004090:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34004094:	487f      	ldr	r0, [pc, #508]	@ (34004294 <RCC_PLL_Config+0x224>)
34004096:	f7fd f96b 	bl	34001370 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
3400409a:	68eb      	ldr	r3, [r5, #12]
3400409c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340040a0:	d304      	bcc.n	340040ac <RCC_PLL_Config+0x3c>
340040a2:	f240 71fb 	movw	r1, #2043	@ 0x7fb
340040a6:	487b      	ldr	r0, [pc, #492]	@ (34004294 <RCC_PLL_Config+0x224>)
340040a8:	f7fd f962 	bl	34001370 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
340040ac:	68ab      	ldr	r3, [r5, #8]
340040ae:	3b01      	subs	r3, #1
340040b0:	2b3e      	cmp	r3, #62	@ 0x3e
340040b2:	d904      	bls.n	340040be <RCC_PLL_Config+0x4e>
340040b4:	f240 71fc 	movw	r1, #2044	@ 0x7fc
340040b8:	4876      	ldr	r0, [pc, #472]	@ (34004294 <RCC_PLL_Config+0x224>)
340040ba:	f7fd f959 	bl	34001370 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
340040be:	f640 12ba 	movw	r2, #2490	@ 0x9ba
340040c2:	692b      	ldr	r3, [r5, #16]
340040c4:	3b0a      	subs	r3, #10
340040c6:	4293      	cmp	r3, r2
340040c8:	d904      	bls.n	340040d4 <RCC_PLL_Config+0x64>
340040ca:	f240 71fd 	movw	r1, #2045	@ 0x7fd
340040ce:	4871      	ldr	r0, [pc, #452]	@ (34004294 <RCC_PLL_Config+0x224>)
340040d0:	f7fd f94e 	bl	34001370 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
340040d4:	696b      	ldr	r3, [r5, #20]
340040d6:	3b01      	subs	r3, #1
340040d8:	2b06      	cmp	r3, #6
340040da:	d904      	bls.n	340040e6 <RCC_PLL_Config+0x76>
340040dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
340040e0:	486c      	ldr	r0, [pc, #432]	@ (34004294 <RCC_PLL_Config+0x224>)
340040e2:	f7fd f945 	bl	34001370 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
340040e6:	69ab      	ldr	r3, [r5, #24]
340040e8:	3b01      	subs	r3, #1
340040ea:	2b06      	cmp	r3, #6
340040ec:	d904      	bls.n	340040f8 <RCC_PLL_Config+0x88>
340040ee:	f240 71ff 	movw	r1, #2047	@ 0x7ff
340040f2:	4868      	ldr	r0, [pc, #416]	@ (34004294 <RCC_PLL_Config+0x224>)
340040f4:	f7fd f93c 	bl	34001370 <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340040f8:	f44f 7880 	mov.w	r8, #256	@ 0x100
340040fc:	4b66      	ldr	r3, [pc, #408]	@ (34004298 <RCC_PLL_Config+0x228>)
340040fe:	fa08 f809 	lsl.w	r8, r8, r9
34004102:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
34004106:	f7fe f959 	bl	340023bc <HAL_GetTick>
3400410a:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400410c:	f8df a194 	ldr.w	sl, [pc, #404]	@ 340042a4 <RCC_PLL_Config+0x234>
34004110:	f8da 3004 	ldr.w	r3, [sl, #4]
34004114:	ea38 0303 	bics.w	r3, r8, r3
34004118:	d040      	beq.n	3400419c <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3400411a:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3400411c:	495f      	ldr	r1, [pc, #380]	@ (3400429c <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3400411e:	f043 0304 	orr.w	r3, r3, #4
34004122:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34004124:	59e3      	ldr	r3, [r4, r7]
34004126:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
3400412a:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
3400412c:	692b      	ldr	r3, [r5, #16]
3400412e:	68aa      	ldr	r2, [r5, #8]
34004130:	021b      	lsls	r3, r3, #8
34004132:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
34004136:	686a      	ldr	r2, [r5, #4]
34004138:	59e0      	ldr	r0, [r4, r7]
3400413a:	4313      	orrs	r3, r2
3400413c:	4a58      	ldr	r2, [pc, #352]	@ (340042a0 <RCC_PLL_Config+0x230>)
3400413e:	4002      	ands	r2, r0
34004140:	4313      	orrs	r3, r2
34004142:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34004144:	59a2      	ldr	r2, [r4, r6]
34004146:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
3400414a:	061b      	lsls	r3, r3, #24
3400414c:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
34004150:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
34004154:	4313      	orrs	r3, r2
34004156:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34004158:	5863      	ldr	r3, [r4, r1]
3400415a:	68ea      	ldr	r2, [r5, #12]
3400415c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
34004160:	4313      	orrs	r3, r2
34004162:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34004164:	59a3      	ldr	r3, [r4, r6]
34004166:	f023 0308 	bic.w	r3, r3, #8
3400416a:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
3400416c:	68eb      	ldr	r3, [r5, #12]
3400416e:	b11b      	cbz	r3, 34004178 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34004170:	59a3      	ldr	r3, [r4, r6]
34004172:	f043 030a 	orr.w	r3, r3, #10
34004176:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34004178:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3400417a:	4d4a      	ldr	r5, [pc, #296]	@ (340042a4 <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
3400417c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34004180:	f043 0301 	orr.w	r3, r3, #1
34004184:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34004186:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
3400418a:	f7fe f917 	bl	340023bc <HAL_GetTick>
3400418e:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34004190:	686b      	ldr	r3, [r5, #4]
34004192:	ea18 0f03 	tst.w	r8, r3
34004196:	d00a      	beq.n	340041ae <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
34004198:	2000      	movs	r0, #0
3400419a:	e006      	b.n	340041aa <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400419c:	f7fe f90e 	bl	340023bc <HAL_GetTick>
340041a0:	eba0 0009 	sub.w	r0, r0, r9
340041a4:	2801      	cmp	r0, #1
340041a6:	d9b3      	bls.n	34004110 <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
340041a8:	2003      	movs	r0, #3
}
340041aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340041ae:	f7fe f905 	bl	340023bc <HAL_GetTick>
340041b2:	1b00      	subs	r0, r0, r4
340041b4:	2801      	cmp	r0, #1
340041b6:	d9eb      	bls.n	34004190 <RCC_PLL_Config+0x120>
340041b8:	e7f6      	b.n	340041a8 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
340041ba:	2b03      	cmp	r3, #3
340041bc:	d146      	bne.n	3400424c <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
340041be:	684b      	ldr	r3, [r1, #4]
340041c0:	b37b      	cbz	r3, 34004222 <RCC_PLL_Config+0x1b2>
340041c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340041c6:	d032      	beq.n	3400422e <RCC_PLL_Config+0x1be>
340041c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340041cc:	d032      	beq.n	34004234 <RCC_PLL_Config+0x1c4>
340041ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340041d2:	d00d      	beq.n	340041f0 <RCC_PLL_Config+0x180>
340041d4:	f640 013f 	movw	r1, #2111	@ 0x83f
340041d8:	482e      	ldr	r0, [pc, #184]	@ (34004294 <RCC_PLL_Config+0x224>)
340041da:	f7fd f8c9 	bl	34001370 <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
340041de:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
340041e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340041e4:	d026      	beq.n	34004234 <RCC_PLL_Config+0x1c4>
340041e6:	d803      	bhi.n	340041f0 <RCC_PLL_Config+0x180>
340041e8:	b1db      	cbz	r3, 34004222 <RCC_PLL_Config+0x1b2>
340041ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340041ee:	d01e      	beq.n	3400422e <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340041f0:	f44f 7680 	mov.w	r6, #256	@ 0x100
340041f4:	4b28      	ldr	r3, [pc, #160]	@ (34004298 <RCC_PLL_Config+0x228>)
340041f6:	fa06 f609 	lsl.w	r6, r6, r9
340041fa:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
340041fc:	f7fe f8de 	bl	340023bc <HAL_GetTick>
34004200:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34004202:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 340042a4 <RCC_PLL_Config+0x234>
34004206:	f8d9 3004 	ldr.w	r3, [r9, #4]
3400420a:	ea36 0303 	bics.w	r3, r6, r3
3400420e:	d016      	beq.n	3400423e <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34004210:	59e3      	ldr	r3, [r4, r7]
34004212:	686a      	ldr	r2, [r5, #4]
34004214:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
34004218:	4313      	orrs	r3, r2
3400421a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400421e:	51e3      	str	r3, [r4, r7]
34004220:	e7ba      	b.n	34004198 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
34004222:	f7ff feb3 	bl	34003f8c <LL_RCC_HSI_IsReady>
34004226:	2800      	cmp	r0, #0
34004228:	d1e2      	bne.n	340041f0 <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
3400422a:	2001      	movs	r0, #1
3400422c:	e7bd      	b.n	340041aa <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
3400422e:	f7ff feb5 	bl	34003f9c <LL_RCC_MSI_IsReady>
34004232:	e7f8      	b.n	34004226 <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004234:	4b1b      	ldr	r3, [pc, #108]	@ (340042a4 <RCC_PLL_Config+0x234>)
34004236:	685b      	ldr	r3, [r3, #4]
34004238:	06db      	lsls	r3, r3, #27
3400423a:	d5f6      	bpl.n	3400422a <RCC_PLL_Config+0x1ba>
3400423c:	e7d8      	b.n	340041f0 <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400423e:	f7fe f8bd 	bl	340023bc <HAL_GetTick>
34004242:	eba0 0008 	sub.w	r0, r0, r8
34004246:	2801      	cmp	r0, #1
34004248:	d9dd      	bls.n	34004206 <RCC_PLL_Config+0x196>
3400424a:	e7ad      	b.n	340041a8 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
3400424c:	2b01      	cmp	r3, #1
3400424e:	d1a3      	bne.n	34004198 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004250:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34004254:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004256:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34004258:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400425c:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400425e:	4b0e      	ldr	r3, [pc, #56]	@ (34004298 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34004260:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 340042a4 <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004264:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
34004266:	f7fe f8a9 	bl	340023bc <HAL_GetTick>
3400426a:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400426c:	f8d8 3004 	ldr.w	r3, [r8, #4]
34004270:	ea35 0303 	bics.w	r3, r5, r3
34004274:	d003      	beq.n	3400427e <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34004276:	59e3      	ldr	r3, [r4, r7]
34004278:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
3400427c:	e7cf      	b.n	3400421e <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400427e:	f7fe f89d 	bl	340023bc <HAL_GetTick>
34004282:	1b80      	subs	r0, r0, r6
34004284:	2801      	cmp	r0, #1
34004286:	d9f1      	bls.n	3400426c <RCC_PLL_Config+0x1fc>
34004288:	e78e      	b.n	340041a8 <RCC_PLL_Config+0x138>
3400428a:	bf00      	nop
3400428c:	56028080 	.word	0x56028080
34004290:	56028088 	.word	0x56028088
34004294:	34010961 	.word	0x34010961
34004298:	56029000 	.word	0x56029000
3400429c:	56028084 	.word	0x56028084
340042a0:	8c0000ff 	.word	0x8c0000ff
340042a4:	56028000 	.word	0x56028000

340042a8 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
340042a8:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
340042ac:	b508      	push	{r3, lr}
  switch (PLLSource1)
340042ae:	d021      	beq.n	340042f4 <RCC_IC_CheckPLLSources+0x4c>
340042b0:	d805      	bhi.n	340042be <RCC_IC_CheckPLLSources+0x16>
340042b2:	b9c0      	cbnz	r0, 340042e6 <RCC_IC_CheckPLLSources+0x3e>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
340042b4:	f7ff fe7a 	bl	34003fac <LL_RCC_PLL1_IsReady>
340042b8:	b178      	cbz	r0, 340042da <RCC_IC_CheckPLLSources+0x32>
  uint32_t ret = 1U;
340042ba:	2201      	movs	r2, #1
340042bc:	e003      	b.n	340042c6 <RCC_IC_CheckPLLSources+0x1e>
  switch (PLLSource1)
340042be:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
340042c2:	d01e      	beq.n	34004302 <RCC_IC_CheckPLLSources+0x5a>
340042c4:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
340042c6:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
340042ca:	d03c      	beq.n	34004346 <RCC_IC_CheckPLLSources+0x9e>
340042cc:	d820      	bhi.n	34004310 <RCC_IC_CheckPLLSources+0x68>
340042ce:	b349      	cbz	r1, 34004324 <RCC_IC_CheckPLLSources+0x7c>
340042d0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
340042d4:	d030      	beq.n	34004338 <RCC_IC_CheckPLLSources+0x90>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
340042d6:	2200      	movs	r2, #0
340042d8:	e02c      	b.n	34004334 <RCC_IC_CheckPLLSources+0x8c>
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
340042da:	4b1e      	ldr	r3, [pc, #120]	@ (34004354 <RCC_IC_CheckPLLSources+0xac>)
340042dc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340042e0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
340042e4:	e7ef      	b.n	340042c6 <RCC_IC_CheckPLLSources+0x1e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340042e6:	4b1b      	ldr	r3, [pc, #108]	@ (34004354 <RCC_IC_CheckPLLSources+0xac>)
340042e8:	685a      	ldr	r2, [r3, #4]
340042ea:	0592      	lsls	r2, r2, #22
340042ec:	d4e5      	bmi.n	340042ba <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340042ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
340042f2:	e7f5      	b.n	340042e0 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340042f4:	4b17      	ldr	r3, [pc, #92]	@ (34004354 <RCC_IC_CheckPLLSources+0xac>)
340042f6:	685a      	ldr	r2, [r3, #4]
340042f8:	0550      	lsls	r0, r2, #21
340042fa:	d4de      	bmi.n	340042ba <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340042fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34004300:	e7ee      	b.n	340042e0 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004302:	4b14      	ldr	r3, [pc, #80]	@ (34004354 <RCC_IC_CheckPLLSources+0xac>)
34004304:	685a      	ldr	r2, [r3, #4]
34004306:	0512      	lsls	r2, r2, #20
34004308:	d4d7      	bmi.n	340042ba <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3400430a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400430e:	e7e7      	b.n	340042e0 <RCC_IC_CheckPLLSources+0x38>
  switch (PLLSource2)
34004310:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
34004314:	d1df      	bne.n	340042d6 <RCC_IC_CheckPLLSources+0x2e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004316:	4b0f      	ldr	r3, [pc, #60]	@ (34004354 <RCC_IC_CheckPLLSources+0xac>)
34004318:	6859      	ldr	r1, [r3, #4]
3400431a:	0509      	lsls	r1, r1, #20
3400431c:	d40a      	bmi.n	34004334 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3400431e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34004322:	e005      	b.n	34004330 <RCC_IC_CheckPLLSources+0x88>
      if (LL_RCC_PLL1_IsReady() == 0U)
34004324:	f7ff fe42 	bl	34003fac <LL_RCC_PLL1_IsReady>
34004328:	b920      	cbnz	r0, 34004334 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400432a:	4b0a      	ldr	r3, [pc, #40]	@ (34004354 <RCC_IC_CheckPLLSources+0xac>)
3400432c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004330:	0118      	lsls	r0, r3, #4
34004332:	d5d0      	bpl.n	340042d6 <RCC_IC_CheckPLLSources+0x2e>
      break;
  }

  return ret;
}
34004334:	4610      	mov	r0, r2
34004336:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004338:	4b06      	ldr	r3, [pc, #24]	@ (34004354 <RCC_IC_CheckPLLSources+0xac>)
3400433a:	6859      	ldr	r1, [r3, #4]
3400433c:	0589      	lsls	r1, r1, #22
3400433e:	d4f9      	bmi.n	34004334 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34004344:	e7f4      	b.n	34004330 <RCC_IC_CheckPLLSources+0x88>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34004346:	4b03      	ldr	r3, [pc, #12]	@ (34004354 <RCC_IC_CheckPLLSources+0xac>)
34004348:	6859      	ldr	r1, [r3, #4]
3400434a:	0548      	lsls	r0, r1, #21
3400434c:	d4f2      	bmi.n	34004334 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400434e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34004352:	e7ed      	b.n	34004330 <RCC_IC_CheckPLLSources+0x88>
34004354:	56028000 	.word	0x56028000

34004358 <HAL_RCC_OscConfig>:
{
34004358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
3400435c:	4604      	mov	r4, r0
3400435e:	b918      	cbnz	r0, 34004368 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
34004360:	2001      	movs	r0, #1
}
34004362:	b003      	add	sp, #12
34004364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
34004368:	6803      	ldr	r3, [r0, #0]
3400436a:	b133      	cbz	r3, 3400437a <HAL_RCC_OscConfig+0x22>
3400436c:	06dd      	lsls	r5, r3, #27
3400436e:	d104      	bne.n	3400437a <HAL_RCC_OscConfig+0x22>
34004370:	f44f 71b9 	mov.w	r1, #370	@ 0x172
34004374:	4893      	ldr	r0, [pc, #588]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
34004376:	f7fc fffb 	bl	34001370 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3400437a:	4b93      	ldr	r3, [pc, #588]	@ (340045c8 <HAL_RCC_OscConfig+0x270>)
3400437c:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3400437e:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34004380:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004384:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34004388:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3400438c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004390:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34004394:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34004398:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400439c:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
340043a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
340043a4:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
340043a6:	6823      	ldr	r3, [r4, #0]
340043a8:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
340043ac:	07d8      	lsls	r0, r3, #31
340043ae:	d463      	bmi.n	34004478 <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
340043b0:	6823      	ldr	r3, [r4, #0]
340043b2:	0799      	lsls	r1, r3, #30
340043b4:	f100 80d4 	bmi.w	34004560 <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
340043b8:	6823      	ldr	r3, [r4, #0]
340043ba:	06d8      	lsls	r0, r3, #27
340043bc:	d522      	bpl.n	34004404 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
340043be:	69e3      	ldr	r3, [r4, #28]
340043c0:	2b00      	cmp	r3, #0
340043c2:	f000 8347 	beq.w	34004a54 <HAL_RCC_OscConfig+0x6fc>
340043c6:	2b04      	cmp	r3, #4
340043c8:	f000 834d 	beq.w	34004a66 <HAL_RCC_OscConfig+0x70e>
340043cc:	f240 2105 	movw	r1, #517	@ 0x205
340043d0:	487c      	ldr	r0, [pc, #496]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
340043d2:	f7fc ffcd 	bl	34001370 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340043d6:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
340043da:	f040 8148 	bne.w	3400466e <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
340043de:	69e3      	ldr	r3, [r4, #28]
340043e0:	2b00      	cmp	r3, #0
340043e2:	d0bd      	beq.n	34004360 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
340043e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340043e6:	2b1f      	cmp	r3, #31
340043e8:	d904      	bls.n	340043f4 <HAL_RCC_OscConfig+0x9c>
340043ea:	f44f 7106 	mov.w	r1, #536	@ 0x218
340043ee:	4875      	ldr	r0, [pc, #468]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
340043f0:	f7fc ffbe 	bl	34001370 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
340043f4:	4a74      	ldr	r2, [pc, #464]	@ (340045c8 <HAL_RCC_OscConfig+0x270>)
340043f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340043f8:	6c53      	ldr	r3, [r2, #68]	@ 0x44
340043fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
340043fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004402:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34004404:	6823      	ldr	r3, [r4, #0]
34004406:	0718      	lsls	r0, r3, #28
34004408:	f100 8189 	bmi.w	3400471e <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
3400440c:	6823      	ldr	r3, [r4, #0]
3400440e:	0759      	lsls	r1, r3, #29
34004410:	f100 81b4 	bmi.w	3400477c <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
34004414:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34004416:	2b03      	cmp	r3, #3
34004418:	d904      	bls.n	34004424 <HAL_RCC_OscConfig+0xcc>
3400441a:	f240 21a5 	movw	r1, #677	@ 0x2a5
3400441e:	4869      	ldr	r0, [pc, #420]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
34004420:	f7fc ffa6 	bl	34001370 <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34004424:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
34004426:	2f00      	cmp	r7, #0
34004428:	f040 8210 	bne.w	3400484c <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
3400442c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400442e:	2b03      	cmp	r3, #3
34004430:	d904      	bls.n	3400443c <HAL_RCC_OscConfig+0xe4>
34004432:	f240 21d3 	movw	r1, #723	@ 0x2d3
34004436:	4863      	ldr	r0, [pc, #396]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
34004438:	f7fc ff9a 	bl	34001370 <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
3400443c:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3400443e:	2f00      	cmp	r7, #0
34004440:	f040 8246 	bne.w	340048d0 <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
34004444:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34004446:	2b03      	cmp	r3, #3
34004448:	d904      	bls.n	34004454 <HAL_RCC_OscConfig+0xfc>
3400444a:	f240 3101 	movw	r1, #769	@ 0x301
3400444e:	485d      	ldr	r0, [pc, #372]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
34004450:	f7fc ff8e 	bl	34001370 <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34004454:	6e27      	ldr	r7, [r4, #96]	@ 0x60
34004456:	2f00      	cmp	r7, #0
34004458:	f040 827a 	bne.w	34004950 <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
3400445c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400445e:	2b03      	cmp	r3, #3
34004460:	d904      	bls.n	3400446c <HAL_RCC_OscConfig+0x114>
34004462:	f240 312e 	movw	r1, #814	@ 0x32e
34004466:	4857      	ldr	r0, [pc, #348]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
34004468:	f7fc ff82 	bl	34001370 <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
3400446c:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
3400446e:	2f00      	cmp	r7, #0
34004470:	f040 82b0 	bne.w	340049d4 <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
34004474:	2000      	movs	r0, #0
34004476:	e774      	b.n	34004362 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
34004478:	6863      	ldr	r3, [r4, #4]
3400447a:	2b00      	cmp	r3, #0
3400447c:	f000 8313 	beq.w	34004aa6 <HAL_RCC_OscConfig+0x74e>
34004480:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34004484:	2a10      	cmp	r2, #16
34004486:	f000 8305 	beq.w	34004a94 <HAL_RCC_OscConfig+0x73c>
3400448a:	4a50      	ldr	r2, [pc, #320]	@ (340045cc <HAL_RCC_OscConfig+0x274>)
3400448c:	4293      	cmp	r3, r2
3400448e:	f000 8301 	beq.w	34004a94 <HAL_RCC_OscConfig+0x73c>
34004492:	f44f 71c0 	mov.w	r1, #384	@ 0x180
34004496:	484b      	ldr	r0, [pc, #300]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
34004498:	f7fc ff6a 	bl	34001370 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3400449c:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
340044a0:	d103      	bne.n	340044aa <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
340044a2:	6863      	ldr	r3, [r4, #4]
340044a4:	2b00      	cmp	r3, #0
340044a6:	d183      	bne.n	340043b0 <HAL_RCC_OscConfig+0x58>
340044a8:	e75a      	b.n	34004360 <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340044aa:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
340044ae:	d0f8      	beq.n	340044a2 <HAL_RCC_OscConfig+0x14a>
340044b0:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
340044b4:	d101      	bne.n	340044ba <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340044b6:	05fa      	lsls	r2, r7, #23
340044b8:	d4f3      	bmi.n	340044a2 <HAL_RCC_OscConfig+0x14a>
340044ba:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
340044be:	d101      	bne.n	340044c4 <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340044c0:	05bb      	lsls	r3, r7, #22
340044c2:	d4ee      	bmi.n	340044a2 <HAL_RCC_OscConfig+0x14a>
340044c4:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
340044c8:	d101      	bne.n	340044ce <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340044ca:	0578      	lsls	r0, r7, #21
340044cc:	d4e9      	bmi.n	340044a2 <HAL_RCC_OscConfig+0x14a>
340044ce:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
340044d2:	d101      	bne.n	340044d8 <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340044d4:	0539      	lsls	r1, r7, #20
340044d6:	d4e4      	bmi.n	340044a2 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
340044d8:	6862      	ldr	r2, [r4, #4]
340044da:	4b3b      	ldr	r3, [pc, #236]	@ (340045c8 <HAL_RCC_OscConfig+0x270>)
340044dc:	2a10      	cmp	r2, #16
340044de:	d114      	bne.n	3400450a <HAL_RCC_OscConfig+0x1b2>
340044e0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
340044e4:	f7fd ff6a 	bl	340023bc <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
340044e8:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
340044ea:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
340044ec:	b35b      	cbz	r3, 34004546 <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
340044ee:	4b36      	ldr	r3, [pc, #216]	@ (340045c8 <HAL_RCC_OscConfig+0x270>)
340044f0:	685a      	ldr	r2, [r3, #4]
340044f2:	06d2      	lsls	r2, r2, #27
340044f4:	f53f af5c 	bmi.w	340043b0 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340044f8:	f7fd ff60 	bl	340023bc <HAL_GetTick>
340044fc:	9b01      	ldr	r3, [sp, #4]
340044fe:	1ac0      	subs	r0, r0, r3
34004500:	2864      	cmp	r0, #100	@ 0x64
34004502:	4b31      	ldr	r3, [pc, #196]	@ (340045c8 <HAL_RCC_OscConfig+0x270>)
34004504:	d9f4      	bls.n	340044f0 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
34004506:	2003      	movs	r0, #3
34004508:	e72b      	b.n	34004362 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3400450a:	b93a      	cbnz	r2, 3400451c <HAL_RCC_OscConfig+0x1c4>
3400450c:	2110      	movs	r1, #16
3400450e:	4a30      	ldr	r2, [pc, #192]	@ (340045d0 <HAL_RCC_OscConfig+0x278>)
34004510:	6011      	str	r1, [r2, #0]
34004512:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004514:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
34004518:	655a      	str	r2, [r3, #84]	@ 0x54
3400451a:	e7e3      	b.n	340044e4 <HAL_RCC_OscConfig+0x18c>
3400451c:	f248 0110 	movw	r1, #32784	@ 0x8010
34004520:	428a      	cmp	r2, r1
34004522:	d109      	bne.n	34004538 <HAL_RCC_OscConfig+0x1e0>
34004524:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
3400452a:	655a      	str	r2, [r3, #84]	@ 0x54
3400452c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3400452e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34004532:	655a      	str	r2, [r3, #84]	@ 0x54
34004534:	2210      	movs	r2, #16
34004536:	e7d3      	b.n	340044e0 <HAL_RCC_OscConfig+0x188>
34004538:	4924      	ldr	r1, [pc, #144]	@ (340045cc <HAL_RCC_OscConfig+0x274>)
3400453a:	428a      	cmp	r2, r1
3400453c:	d1e6      	bne.n	3400450c <HAL_RCC_OscConfig+0x1b4>
3400453e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004540:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
34004544:	e7f5      	b.n	34004532 <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34004546:	4b20      	ldr	r3, [pc, #128]	@ (340045c8 <HAL_RCC_OscConfig+0x270>)
34004548:	685a      	ldr	r2, [r3, #4]
3400454a:	06d3      	lsls	r3, r2, #27
3400454c:	f57f af30 	bpl.w	340043b0 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34004550:	f7fd ff34 	bl	340023bc <HAL_GetTick>
34004554:	9b01      	ldr	r3, [sp, #4]
34004556:	1ac0      	subs	r0, r0, r3
34004558:	2864      	cmp	r0, #100	@ 0x64
3400455a:	4b1b      	ldr	r3, [pc, #108]	@ (340045c8 <HAL_RCC_OscConfig+0x270>)
3400455c:	d9f4      	bls.n	34004548 <HAL_RCC_OscConfig+0x1f0>
3400455e:	e7d2      	b.n	34004506 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
34004560:	68e3      	ldr	r3, [r4, #12]
34004562:	2b00      	cmp	r3, #0
34004564:	f000 8288 	beq.w	34004a78 <HAL_RCC_OscConfig+0x720>
34004568:	2b08      	cmp	r3, #8
3400456a:	f000 828c 	beq.w	34004a86 <HAL_RCC_OscConfig+0x72e>
3400456e:	f240 11b5 	movw	r1, #437	@ 0x1b5
34004572:	4814      	ldr	r0, [pc, #80]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
34004574:	f7fc fefc 	bl	34001370 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004578:	bb66      	cbnz	r6, 340045d4 <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
3400457a:	68e3      	ldr	r3, [r4, #12]
3400457c:	2b00      	cmp	r3, #0
3400457e:	f43f aeef 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34004582:	6923      	ldr	r3, [r4, #16]
34004584:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
34004588:	d004      	beq.n	34004594 <HAL_RCC_OscConfig+0x23c>
3400458a:	f240 11c7 	movw	r1, #455	@ 0x1c7
3400458e:	480d      	ldr	r0, [pc, #52]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
34004590:	f7fc feee 	bl	34001370 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34004594:	6963      	ldr	r3, [r4, #20]
34004596:	2b7f      	cmp	r3, #127	@ 0x7f
34004598:	d904      	bls.n	340045a4 <HAL_RCC_OscConfig+0x24c>
3400459a:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
3400459e:	4809      	ldr	r0, [pc, #36]	@ (340045c4 <HAL_RCC_OscConfig+0x26c>)
340045a0:	f7fc fee6 	bl	34001370 <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
340045a4:	4a08      	ldr	r2, [pc, #32]	@ (340045c8 <HAL_RCC_OscConfig+0x270>)
340045a6:	6921      	ldr	r1, [r4, #16]
340045a8:	6c93      	ldr	r3, [r2, #72]	@ 0x48
340045aa:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
340045ae:	430b      	orrs	r3, r1
340045b0:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
340045b2:	6c93      	ldr	r3, [r2, #72]	@ 0x48
340045b4:	6961      	ldr	r1, [r4, #20]
340045b6:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
340045ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340045be:	6493      	str	r3, [r2, #72]	@ 0x48
}
340045c0:	e6fa      	b.n	340043b8 <HAL_RCC_OscConfig+0x60>
340045c2:	bf00      	nop
340045c4:	34010961 	.word	0x34010961
340045c8:	56028000 	.word	0x56028000
340045cc:	00018010 	.word	0x00018010
340045d0:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340045d4:	2d00      	cmp	r5, #0
340045d6:	d0d0      	beq.n	3400457a <HAL_RCC_OscConfig+0x222>
340045d8:	f1bb 0f00 	cmp.w	fp, #0
340045dc:	d101      	bne.n	340045e2 <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340045de:	05f8      	lsls	r0, r7, #23
340045e0:	d4cb      	bmi.n	3400457a <HAL_RCC_OscConfig+0x222>
340045e2:	f1ba 0f00 	cmp.w	sl, #0
340045e6:	d101      	bne.n	340045ec <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340045e8:	05b9      	lsls	r1, r7, #22
340045ea:	d4c6      	bmi.n	3400457a <HAL_RCC_OscConfig+0x222>
340045ec:	f1b9 0f00 	cmp.w	r9, #0
340045f0:	d101      	bne.n	340045f6 <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340045f2:	057a      	lsls	r2, r7, #21
340045f4:	d4c1      	bmi.n	3400457a <HAL_RCC_OscConfig+0x222>
340045f6:	f1b8 0f00 	cmp.w	r8, #0
340045fa:	d101      	bne.n	34004600 <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340045fc:	053b      	lsls	r3, r7, #20
340045fe:	d4bc      	bmi.n	3400457a <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34004600:	68e3      	ldr	r3, [r4, #12]
34004602:	b313      	cbz	r3, 3400464a <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34004604:	6923      	ldr	r3, [r4, #16]
34004606:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
3400460a:	d004      	beq.n	34004616 <HAL_RCC_OscConfig+0x2be>
3400460c:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34004610:	48ab      	ldr	r0, [pc, #684]	@ (340048c0 <HAL_RCC_OscConfig+0x568>)
34004612:	f7fc fead 	bl	34001370 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34004616:	6963      	ldr	r3, [r4, #20]
34004618:	2b7f      	cmp	r3, #127	@ 0x7f
3400461a:	d904      	bls.n	34004626 <HAL_RCC_OscConfig+0x2ce>
3400461c:	f240 11d7 	movw	r1, #471	@ 0x1d7
34004620:	48a7      	ldr	r0, [pc, #668]	@ (340048c0 <HAL_RCC_OscConfig+0x568>)
34004622:	f7fc fea5 	bl	34001370 <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34004626:	2208      	movs	r2, #8
34004628:	4ba6      	ldr	r3, [pc, #664]	@ (340048c4 <HAL_RCC_OscConfig+0x56c>)
3400462a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
3400462e:	f7fd fec5 	bl	340023bc <HAL_GetTick>
34004632:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
34004634:	f7ff fcaa 	bl	34003f8c <LL_RCC_HSI_IsReady>
34004638:	2800      	cmp	r0, #0
3400463a:	d1b3      	bne.n	340045a4 <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3400463c:	f7fd febe 	bl	340023bc <HAL_GetTick>
34004640:	9b01      	ldr	r3, [sp, #4]
34004642:	1ac0      	subs	r0, r0, r3
34004644:	2801      	cmp	r0, #1
34004646:	d9f5      	bls.n	34004634 <HAL_RCC_OscConfig+0x2dc>
34004648:	e75d      	b.n	34004506 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
3400464a:	2208      	movs	r2, #8
3400464c:	4b9e      	ldr	r3, [pc, #632]	@ (340048c8 <HAL_RCC_OscConfig+0x570>)
3400464e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34004650:	f7fd feb4 	bl	340023bc <HAL_GetTick>
34004654:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
34004656:	f7ff fc99 	bl	34003f8c <LL_RCC_HSI_IsReady>
3400465a:	2800      	cmp	r0, #0
3400465c:	f43f aeac 	beq.w	340043b8 <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34004660:	f7fd feac 	bl	340023bc <HAL_GetTick>
34004664:	9b01      	ldr	r3, [sp, #4]
34004666:	1ac0      	subs	r0, r0, r3
34004668:	2801      	cmp	r0, #1
3400466a:	d9f4      	bls.n	34004656 <HAL_RCC_OscConfig+0x2fe>
3400466c:	e74b      	b.n	34004506 <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3400466e:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004672:	f43f aeb4 	beq.w	340043de <HAL_RCC_OscConfig+0x86>
34004676:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
3400467a:	d102      	bne.n	34004682 <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3400467c:	05f9      	lsls	r1, r7, #23
3400467e:	f53f aeae 	bmi.w	340043de <HAL_RCC_OscConfig+0x86>
34004682:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
34004686:	d102      	bne.n	3400468e <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004688:	05ba      	lsls	r2, r7, #22
3400468a:	f53f aea8 	bmi.w	340043de <HAL_RCC_OscConfig+0x86>
3400468e:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
34004692:	d102      	bne.n	3400469a <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34004694:	057b      	lsls	r3, r7, #21
34004696:	f53f aea2 	bmi.w	340043de <HAL_RCC_OscConfig+0x86>
3400469a:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
3400469e:	d102      	bne.n	340046a6 <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340046a0:	053f      	lsls	r7, r7, #20
340046a2:	f53f ae9c 	bmi.w	340043de <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
340046a6:	69e3      	ldr	r3, [r4, #28]
340046a8:	b343      	cbz	r3, 340046fc <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
340046aa:	6a23      	ldr	r3, [r4, #32]
340046ac:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
340046b0:	d004      	beq.n	340046bc <HAL_RCC_OscConfig+0x364>
340046b2:	f44f 7109 	mov.w	r1, #548	@ 0x224
340046b6:	4882      	ldr	r0, [pc, #520]	@ (340048c0 <HAL_RCC_OscConfig+0x568>)
340046b8:	f7fc fe5a 	bl	34001370 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
340046bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340046be:	2b1f      	cmp	r3, #31
340046c0:	d904      	bls.n	340046cc <HAL_RCC_OscConfig+0x374>
340046c2:	f240 2125 	movw	r1, #549	@ 0x225
340046c6:	487e      	ldr	r0, [pc, #504]	@ (340048c0 <HAL_RCC_OscConfig+0x568>)
340046c8:	f7fc fe52 	bl	34001370 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
340046cc:	4a7d      	ldr	r2, [pc, #500]	@ (340048c4 <HAL_RCC_OscConfig+0x56c>)
340046ce:	6a21      	ldr	r1, [r4, #32]
340046d0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
340046d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
340046d6:	430b      	orrs	r3, r1
340046d8:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
340046da:	2304      	movs	r3, #4
340046dc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
340046e0:	f7fd fe6c 	bl	340023bc <HAL_GetTick>
340046e4:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
340046e6:	f7ff fc59 	bl	34003f9c <LL_RCC_MSI_IsReady>
340046ea:	2800      	cmp	r0, #0
340046ec:	f47f ae82 	bne.w	340043f4 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
340046f0:	f7fd fe64 	bl	340023bc <HAL_GetTick>
340046f4:	1bc0      	subs	r0, r0, r7
340046f6:	2801      	cmp	r0, #1
340046f8:	d9f5      	bls.n	340046e6 <HAL_RCC_OscConfig+0x38e>
340046fa:	e704      	b.n	34004506 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
340046fc:	2204      	movs	r2, #4
340046fe:	4b72      	ldr	r3, [pc, #456]	@ (340048c8 <HAL_RCC_OscConfig+0x570>)
34004700:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34004702:	f7fd fe5b 	bl	340023bc <HAL_GetTick>
34004706:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
34004708:	f7ff fc48 	bl	34003f9c <LL_RCC_MSI_IsReady>
3400470c:	2800      	cmp	r0, #0
3400470e:	f43f ae79 	beq.w	34004404 <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34004712:	f7fd fe53 	bl	340023bc <HAL_GetTick>
34004716:	1bc0      	subs	r0, r0, r7
34004718:	2801      	cmp	r0, #1
3400471a:	d9f5      	bls.n	34004708 <HAL_RCC_OscConfig+0x3b0>
3400471c:	e6f3      	b.n	34004506 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
3400471e:	69a3      	ldr	r3, [r4, #24]
34004720:	2b01      	cmp	r3, #1
34004722:	d904      	bls.n	3400472e <HAL_RCC_OscConfig+0x3d6>
34004724:	f240 2155 	movw	r1, #597	@ 0x255
34004728:	4865      	ldr	r0, [pc, #404]	@ (340048c0 <HAL_RCC_OscConfig+0x568>)
3400472a:	f7fc fe21 	bl	34001370 <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
3400472e:	69a2      	ldr	r2, [r4, #24]
34004730:	2301      	movs	r3, #1
34004732:	b18a      	cbz	r2, 34004758 <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34004734:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 340048c4 <HAL_RCC_OscConfig+0x56c>
34004738:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
3400473c:	f7fd fe3e 	bl	340023bc <HAL_GetTick>
34004740:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34004742:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
34004746:	07da      	lsls	r2, r3, #31
34004748:	f53f ae60 	bmi.w	3400440c <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
3400474c:	f7fd fe36 	bl	340023bc <HAL_GetTick>
34004750:	1bc0      	subs	r0, r0, r7
34004752:	2801      	cmp	r0, #1
34004754:	d9f5      	bls.n	34004742 <HAL_RCC_OscConfig+0x3ea>
34004756:	e6d6      	b.n	34004506 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34004758:	4a5b      	ldr	r2, [pc, #364]	@ (340048c8 <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3400475a:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 340048c4 <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
3400475e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
34004760:	f7fd fe2c 	bl	340023bc <HAL_GetTick>
34004764:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34004766:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
3400476a:	07db      	lsls	r3, r3, #31
3400476c:	f57f ae4e 	bpl.w	3400440c <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34004770:	f7fd fe24 	bl	340023bc <HAL_GetTick>
34004774:	1bc0      	subs	r0, r0, r7
34004776:	2801      	cmp	r0, #1
34004778:	d9f5      	bls.n	34004766 <HAL_RCC_OscConfig+0x40e>
3400477a:	e6c4      	b.n	34004506 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
3400477c:	68a3      	ldr	r3, [r4, #8]
3400477e:	f033 0202 	bics.w	r2, r3, #2
34004782:	d00a      	beq.n	3400479a <HAL_RCC_OscConfig+0x442>
34004784:	f248 0202 	movw	r2, #32770	@ 0x8002
34004788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400478c:	4293      	cmp	r3, r2
3400478e:	d004      	beq.n	3400479a <HAL_RCC_OscConfig+0x442>
34004790:	f44f 7120 	mov.w	r1, #640	@ 0x280
34004794:	484a      	ldr	r0, [pc, #296]	@ (340048c0 <HAL_RCC_OscConfig+0x568>)
34004796:	f7fc fdeb 	bl	34001370 <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3400479a:	68a3      	ldr	r3, [r4, #8]
3400479c:	4f49      	ldr	r7, [pc, #292]	@ (340048c4 <HAL_RCC_OscConfig+0x56c>)
3400479e:	2b02      	cmp	r3, #2
340047a0:	d113      	bne.n	340047ca <HAL_RCC_OscConfig+0x472>
340047a2:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
340047a6:	f7fd fe09 	bl	340023bc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340047aa:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
340047ae:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
340047b0:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 340048c4 <HAL_RCC_OscConfig+0x56c>
340047b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
340047b8:	0798      	lsls	r0, r3, #30
340047ba:	f53f ae2b 	bmi.w	34004414 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340047be:	f7fd fdfd 	bl	340023bc <HAL_GetTick>
340047c2:	1bc3      	subs	r3, r0, r7
340047c4:	4543      	cmp	r3, r8
340047c6:	d9f5      	bls.n	340047b4 <HAL_RCC_OscConfig+0x45c>
340047c8:	e69d      	b.n	34004506 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
340047ca:	b9d3      	cbnz	r3, 34004802 <HAL_RCC_OscConfig+0x4aa>
340047cc:	2202      	movs	r2, #2
340047ce:	4b3e      	ldr	r3, [pc, #248]	@ (340048c8 <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340047d0:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
340047d4:	601a      	str	r2, [r3, #0]
340047d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340047d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340047dc:	643b      	str	r3, [r7, #64]	@ 0x40
340047de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340047e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
340047e4:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
340047e6:	f7fd fde9 	bl	340023bc <HAL_GetTick>
340047ea:	4680      	mov	r8, r0
340047ec:	687b      	ldr	r3, [r7, #4]
340047ee:	0799      	lsls	r1, r3, #30
340047f0:	f57f ae10 	bpl.w	34004414 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340047f4:	f7fd fde2 	bl	340023bc <HAL_GetTick>
340047f8:	eba0 0308 	sub.w	r3, r0, r8
340047fc:	454b      	cmp	r3, r9
340047fe:	d9f5      	bls.n	340047ec <HAL_RCC_OscConfig+0x494>
34004800:	e681      	b.n	34004506 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004802:	f248 0202 	movw	r2, #32770	@ 0x8002
34004806:	4293      	cmp	r3, r2
34004808:	d109      	bne.n	3400481e <HAL_RCC_OscConfig+0x4c6>
3400480a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400480c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34004810:	643b      	str	r3, [r7, #64]	@ 0x40
34004812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004818:	643b      	str	r3, [r7, #64]	@ 0x40
3400481a:	2302      	movs	r3, #2
3400481c:	e7c1      	b.n	340047a2 <HAL_RCC_OscConfig+0x44a>
3400481e:	4a2b      	ldr	r2, [pc, #172]	@ (340048cc <HAL_RCC_OscConfig+0x574>)
34004820:	4293      	cmp	r3, r2
34004822:	d107      	bne.n	34004834 <HAL_RCC_OscConfig+0x4dc>
34004824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400482a:	643b      	str	r3, [r7, #64]	@ 0x40
3400482c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400482e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34004832:	e7f1      	b.n	34004818 <HAL_RCC_OscConfig+0x4c0>
34004834:	2202      	movs	r2, #2
34004836:	4b24      	ldr	r3, [pc, #144]	@ (340048c8 <HAL_RCC_OscConfig+0x570>)
34004838:	601a      	str	r2, [r3, #0]
3400483a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400483c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34004840:	643b      	str	r3, [r7, #64]	@ 0x40
34004842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004848:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
3400484a:	e7ac      	b.n	340047a6 <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
3400484c:	2000      	movs	r0, #0
3400484e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
34004852:	f7ff fbb3 	bl	34003fbc <RCC_PLL_IsNewConfig>
34004856:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34004858:	f7ff fba8 	bl	34003fac <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
3400485c:	2a01      	cmp	r2, #1
3400485e:	d125      	bne.n	340048ac <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004860:	4b18      	ldr	r3, [pc, #96]	@ (340048c4 <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34004862:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34004866:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400486a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400486e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004872:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004876:	d103      	bne.n	34004880 <HAL_RCC_OscConfig+0x528>
34004878:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
3400487c:	f43f ad70 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34004880:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004884:	d10b      	bne.n	3400489e <HAL_RCC_OscConfig+0x546>
34004886:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
3400488a:	f43f ad69 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
3400488e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
34004892:	f43f ad65 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34004896:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
3400489a:	f43f ad61 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
3400489e:	2000      	movs	r0, #0
340048a0:	f7ff fbe6 	bl	34004070 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
340048a4:	2800      	cmp	r0, #0
340048a6:	f43f adc1 	beq.w	3400442c <HAL_RCC_OscConfig+0xd4>
340048aa:	e559      	b.n	34004360 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
340048ac:	2f02      	cmp	r7, #2
340048ae:	f47f adbd 	bne.w	3400442c <HAL_RCC_OscConfig+0xd4>
340048b2:	2800      	cmp	r0, #0
340048b4:	f47f adba 	bne.w	3400442c <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
340048b8:	f7ff fbc2 	bl	34004040 <RCC_PLL_Enable>
340048bc:	e7f2      	b.n	340048a4 <HAL_RCC_OscConfig+0x54c>
340048be:	bf00      	nop
340048c0:	34010961 	.word	0x34010961
340048c4:	56028000 	.word	0x56028000
340048c8:	56029000 	.word	0x56029000
340048cc:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
340048d0:	2001      	movs	r0, #1
340048d2:	f104 0144 	add.w	r1, r4, #68	@ 0x44
340048d6:	f7ff fb71 	bl	34003fbc <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340048da:	4b77      	ldr	r3, [pc, #476]	@ (34004ab8 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
340048dc:	2801      	cmp	r0, #1
340048de:	685a      	ldr	r2, [r3, #4]
340048e0:	d12c      	bne.n	3400493c <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
340048e2:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340048e6:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340048ea:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340048ee:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340048f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340048f6:	d105      	bne.n	34004904 <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340048f8:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
340048fc:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34004900:	f43f ad2e 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34004904:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004908:	d111      	bne.n	3400492e <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400490a:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
3400490e:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34004912:	f43f ad25 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004916:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
3400491a:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
3400491e:	f43f ad1f 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004922:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34004926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400492a:	f43f ad19 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
3400492e:	2001      	movs	r0, #1
34004930:	f7ff fb9e 	bl	34004070 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004934:	2800      	cmp	r0, #0
34004936:	f43f ad85 	beq.w	34004444 <HAL_RCC_OscConfig+0xec>
3400493a:	e511      	b.n	34004360 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
3400493c:	2f02      	cmp	r7, #2
3400493e:	f47f ad81 	bne.w	34004444 <HAL_RCC_OscConfig+0xec>
34004942:	0592      	lsls	r2, r2, #22
34004944:	f53f ad7e 	bmi.w	34004444 <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004948:	2001      	movs	r0, #1
3400494a:	f7ff fb79 	bl	34004040 <RCC_PLL_Enable>
3400494e:	e7f1      	b.n	34004934 <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34004950:	2002      	movs	r0, #2
34004952:	f104 0160 	add.w	r1, r4, #96	@ 0x60
34004956:	f7ff fb31 	bl	34003fbc <RCC_PLL_IsNewConfig>
3400495a:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
3400495c:	f7ff fb26 	bl	34003fac <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34004960:	2a01      	cmp	r2, #1
34004962:	d12d      	bne.n	340049c0 <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004964:	4b54      	ldr	r3, [pc, #336]	@ (34004ab8 <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34004966:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
3400496a:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400496e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004972:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004976:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400497a:	d105      	bne.n	34004988 <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400497c:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34004980:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
34004984:	f43f acec 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34004988:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
3400498c:	d111      	bne.n	340049b2 <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400498e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004992:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34004996:	f43f ace3 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400499a:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
3400499e:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
340049a2:	f43f acdd 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340049a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
340049aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340049ae:	f43f acd7 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
340049b2:	2002      	movs	r0, #2
340049b4:	f7ff fb5c 	bl	34004070 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
340049b8:	2800      	cmp	r0, #0
340049ba:	f43f ad4f 	beq.w	3400445c <HAL_RCC_OscConfig+0x104>
340049be:	e4cf      	b.n	34004360 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
340049c0:	2f02      	cmp	r7, #2
340049c2:	f47f ad4b 	bne.w	3400445c <HAL_RCC_OscConfig+0x104>
340049c6:	2800      	cmp	r0, #0
340049c8:	f47f ad48 	bne.w	3400445c <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
340049cc:	4638      	mov	r0, r7
340049ce:	f7ff fb37 	bl	34004040 <RCC_PLL_Enable>
340049d2:	e7f1      	b.n	340049b8 <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
340049d4:	2003      	movs	r0, #3
340049d6:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
340049da:	f7ff faef 	bl	34003fbc <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340049de:	4b36      	ldr	r3, [pc, #216]	@ (34004ab8 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
340049e0:	2801      	cmp	r0, #1
340049e2:	685a      	ldr	r2, [r3, #4]
340049e4:	d12c      	bne.n	34004a40 <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
340049e6:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340049ea:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340049ee:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340049f2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340049f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340049fa:	d105      	bne.n	34004a08 <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340049fc:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34004a00:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34004a04:	f43f acac 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004a08:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004a0c:	d111      	bne.n	34004a32 <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004a0e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004a12:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34004a16:	f43f aca3 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004a1a:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004a1e:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34004a22:	f43f ac9d 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004a26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34004a2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004a2e:	f43f ac97 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34004a32:	2003      	movs	r0, #3
34004a34:	f7ff fb1c 	bl	34004070 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004a38:	3800      	subs	r0, #0
34004a3a:	bf18      	it	ne
34004a3c:	2001      	movne	r0, #1
34004a3e:	e490      	b.n	34004362 <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34004a40:	2f02      	cmp	r7, #2
34004a42:	f47f ad17 	bne.w	34004474 <HAL_RCC_OscConfig+0x11c>
34004a46:	0513      	lsls	r3, r2, #20
34004a48:	f53f ad14 	bmi.w	34004474 <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34004a4c:	2003      	movs	r0, #3
34004a4e:	f7ff faf7 	bl	34004040 <RCC_PLL_Enable>
34004a52:	e7f1      	b.n	34004a38 <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34004a54:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004a58:	f43f ac82 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
34004a5c:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004a60:	f47f ae09 	bne.w	34004676 <HAL_RCC_OscConfig+0x31e>
34004a64:	e47c      	b.n	34004360 <HAL_RCC_OscConfig+0x8>
34004a66:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34004a6a:	f43f acbb 	beq.w	340043e4 <HAL_RCC_OscConfig+0x8c>
34004a6e:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34004a72:	f47f ae00 	bne.w	34004676 <HAL_RCC_OscConfig+0x31e>
34004a76:	e4b5      	b.n	340043e4 <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004a78:	2e00      	cmp	r6, #0
34004a7a:	f43f ac71 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
34004a7e:	2d00      	cmp	r5, #0
34004a80:	f47f adaa 	bne.w	340045d8 <HAL_RCC_OscConfig+0x280>
34004a84:	e46c      	b.n	34004360 <HAL_RCC_OscConfig+0x8>
34004a86:	2e00      	cmp	r6, #0
34004a88:	f43f ad7b 	beq.w	34004582 <HAL_RCC_OscConfig+0x22a>
34004a8c:	2d00      	cmp	r5, #0
34004a8e:	f43f ad78 	beq.w	34004582 <HAL_RCC_OscConfig+0x22a>
34004a92:	e5a1      	b.n	340045d8 <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34004a94:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004a98:	f43f ac8a 	beq.w	340043b0 <HAL_RCC_OscConfig+0x58>
34004a9c:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004aa0:	f47f ad06 	bne.w	340044b0 <HAL_RCC_OscConfig+0x158>
34004aa4:	e484      	b.n	340043b0 <HAL_RCC_OscConfig+0x58>
34004aa6:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34004aaa:	f43f ac59 	beq.w	34004360 <HAL_RCC_OscConfig+0x8>
34004aae:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004ab2:	f47f acfd 	bne.w	340044b0 <HAL_RCC_OscConfig+0x158>
34004ab6:	e453      	b.n	34004360 <HAL_RCC_OscConfig+0x8>
34004ab8:	56028000 	.word	0x56028000

34004abc <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004abc:	4b1f      	ldr	r3, [pc, #124]	@ (34004b3c <HAL_RCC_GetCpuClockFreq+0x80>)
{
34004abe:	b510      	push	{r4, lr}
34004ac0:	6a1a      	ldr	r2, [r3, #32]
34004ac2:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
34004ac6:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34004aca:	d034      	beq.n	34004b36 <HAL_RCC_GetCpuClockFreq+0x7a>
34004acc:	d806      	bhi.n	34004adc <HAL_RCC_GetCpuClockFreq+0x20>
34004ace:	b952      	cbnz	r2, 34004ae6 <HAL_RCC_GetCpuClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34004ad2:	481b      	ldr	r0, [pc, #108]	@ (34004b40 <HAL_RCC_GetCpuClockFreq+0x84>)
34004ad4:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004ad8:	40d8      	lsrs	r0, r3
}
34004ada:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetCpuClkSource())
34004adc:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34004ae0:	d009      	beq.n	34004af6 <HAL_RCC_GetCpuClockFreq+0x3a>
      switch (LL_RCC_IC1_GetSource())
34004ae2:	2000      	movs	r0, #0
34004ae4:	e7f9      	b.n	34004ada <HAL_RCC_GetCpuClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34004ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34004ae8:	4816      	ldr	r0, [pc, #88]	@ (34004b44 <HAL_RCC_GetCpuClockFreq+0x88>)
34004aea:	f413 7f00 	tst.w	r3, #512	@ 0x200
34004aee:	4b16      	ldr	r3, [pc, #88]	@ (34004b48 <HAL_RCC_GetCpuClockFreq+0x8c>)
34004af0:	bf08      	it	eq
34004af2:	4618      	moveq	r0, r3
34004af4:	e7f1      	b.n	34004ada <HAL_RCC_GetCpuClockFreq+0x1e>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004af6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004afa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004afe:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004b02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC1_GetSource())
34004b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004b0a:	f100 0401 	add.w	r4, r0, #1
34004b0e:	d00f      	beq.n	34004b30 <HAL_RCC_GetCpuClockFreq+0x74>
34004b10:	d805      	bhi.n	34004b1e <HAL_RCC_GetCpuClockFreq+0x62>
34004b12:	b953      	cbnz	r3, 34004b2a <HAL_RCC_GetCpuClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34004b14:	f003 fbb6 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34004b18:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34004b1c:	e7dd      	b.n	34004ada <HAL_RCC_GetCpuClockFreq+0x1e>
      switch (LL_RCC_IC1_GetSource())
34004b1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004b22:	d1de      	bne.n	34004ae2 <HAL_RCC_GetCpuClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34004b24:	f003 fc6e 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34004b28:	e7f6      	b.n	34004b18 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34004b2a:	f003 fbeb 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34004b2e:	e7f3      	b.n	34004b18 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34004b30:	f003 fc28 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34004b34:	e7f0      	b.n	34004b18 <HAL_RCC_GetCpuClockFreq+0x5c>
  switch (LL_RCC_GetCpuClkSource())
34004b36:	4805      	ldr	r0, [pc, #20]	@ (34004b4c <HAL_RCC_GetCpuClockFreq+0x90>)
34004b38:	e7cf      	b.n	34004ada <HAL_RCC_GetCpuClockFreq+0x1e>
34004b3a:	bf00      	nop
34004b3c:	56028000 	.word	0x56028000
34004b40:	03d09000 	.word	0x03d09000
34004b44:	00f42400 	.word	0x00f42400
34004b48:	003d0900 	.word	0x003d0900
34004b4c:	02dc6c00 	.word	0x02dc6c00

34004b50 <HAL_RCC_ClockConfig>:
{
34004b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
34004b54:	4604      	mov	r4, r0
34004b56:	b910      	cbnz	r0, 34004b5e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
34004b58:	2001      	movs	r0, #1
}
34004b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34004b5e:	6803      	ldr	r3, [r0, #0]
34004b60:	2b7f      	cmp	r3, #127	@ 0x7f
34004b62:	d904      	bls.n	34004b6e <HAL_RCC_ClockConfig+0x1e>
34004b64:	f240 317e 	movw	r1, #894	@ 0x37e
34004b68:	4893      	ldr	r0, [pc, #588]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004b6a:	f7fc fc01 	bl	34001370 <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004b6e:	6823      	ldr	r3, [r4, #0]
34004b70:	071f      	lsls	r7, r3, #28
34004b72:	d513      	bpl.n	34004b9c <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004b74:	6923      	ldr	r3, [r4, #16]
34004b76:	2b07      	cmp	r3, #7
34004b78:	d904      	bls.n	34004b84 <HAL_RCC_ClockConfig+0x34>
34004b7a:	f240 3185 	movw	r1, #901	@ 0x385
34004b7e:	488e      	ldr	r0, [pc, #568]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004b80:	f7fc fbf6 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004b84:	4a8d      	ldr	r2, [pc, #564]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004b86:	6921      	ldr	r1, [r4, #16]
34004b88:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004b8a:	f003 0307 	and.w	r3, r3, #7
34004b8e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004b90:	bf81      	itttt	hi
34004b92:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004b94:	f023 0307 	bichi.w	r3, r3, #7
34004b98:	430b      	orrhi	r3, r1
34004b9a:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004b9c:	6823      	ldr	r3, [r4, #0]
34004b9e:	06de      	lsls	r6, r3, #27
34004ba0:	d516      	bpl.n	34004bd0 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004ba2:	6963      	ldr	r3, [r4, #20]
34004ba4:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004ba8:	d006      	beq.n	34004bb8 <HAL_RCC_ClockConfig+0x68>
34004baa:	2b40      	cmp	r3, #64	@ 0x40
34004bac:	d004      	beq.n	34004bb8 <HAL_RCC_ClockConfig+0x68>
34004bae:	f240 318f 	movw	r1, #911	@ 0x38f
34004bb2:	4881      	ldr	r0, [pc, #516]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004bb4:	f7fc fbdc 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004bb8:	4a80      	ldr	r2, [pc, #512]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004bba:	6961      	ldr	r1, [r4, #20]
34004bbc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004bbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004bc2:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004bc4:	bf81      	itttt	hi
34004bc6:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004bc8:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
34004bcc:	430b      	orrhi	r3, r1
34004bce:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004bd0:	6823      	ldr	r3, [r4, #0]
34004bd2:	069d      	lsls	r5, r3, #26
34004bd4:	d517      	bpl.n	34004c06 <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004bd6:	69a3      	ldr	r3, [r4, #24]
34004bd8:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004bdc:	d007      	beq.n	34004bee <HAL_RCC_ClockConfig+0x9e>
34004bde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004be2:	d004      	beq.n	34004bee <HAL_RCC_ClockConfig+0x9e>
34004be4:	f240 3199 	movw	r1, #921	@ 0x399
34004be8:	4873      	ldr	r0, [pc, #460]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004bea:	f7fc fbc1 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004bee:	4a73      	ldr	r2, [pc, #460]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004bf0:	69a1      	ldr	r1, [r4, #24]
34004bf2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004bf4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004bf8:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004bfa:	bf81      	itttt	hi
34004bfc:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004bfe:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
34004c02:	430b      	orrhi	r3, r1
34004c04:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004c06:	6823      	ldr	r3, [r4, #0]
34004c08:	0658      	lsls	r0, r3, #25
34004c0a:	d517      	bpl.n	34004c3c <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004c0c:	69e3      	ldr	r3, [r4, #28]
34004c0e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004c12:	d007      	beq.n	34004c24 <HAL_RCC_ClockConfig+0xd4>
34004c14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004c18:	d004      	beq.n	34004c24 <HAL_RCC_ClockConfig+0xd4>
34004c1a:	f240 31a3 	movw	r1, #931	@ 0x3a3
34004c1e:	4866      	ldr	r0, [pc, #408]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004c20:	f7fc fba6 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004c24:	4a65      	ldr	r2, [pc, #404]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004c26:	69e1      	ldr	r1, [r4, #28]
34004c28:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004c2a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004c2e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004c30:	bf81      	itttt	hi
34004c32:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004c34:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
34004c38:	430b      	orrhi	r3, r1
34004c3a:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004c3c:	6823      	ldr	r3, [r4, #0]
34004c3e:	0759      	lsls	r1, r3, #29
34004c40:	d517      	bpl.n	34004c72 <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34004c42:	68e3      	ldr	r3, [r4, #12]
34004c44:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004c48:	d007      	beq.n	34004c5a <HAL_RCC_ClockConfig+0x10a>
34004c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004c4e:	d004      	beq.n	34004c5a <HAL_RCC_ClockConfig+0x10a>
34004c50:	f240 31ad 	movw	r1, #941	@ 0x3ad
34004c54:	4858      	ldr	r0, [pc, #352]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004c56:	f7fc fb8b 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34004c5a:	4a58      	ldr	r2, [pc, #352]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004c5c:	68e1      	ldr	r1, [r4, #12]
34004c5e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004c60:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34004c64:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34004c66:	bf81      	itttt	hi
34004c68:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004c6a:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
34004c6e:	430b      	orrhi	r3, r1
34004c70:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34004c72:	6823      	ldr	r3, [r4, #0]
34004c74:	07da      	lsls	r2, r3, #31
34004c76:	d52a      	bpl.n	34004cce <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
34004c78:	6863      	ldr	r3, [r4, #4]
34004c7a:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004c7e:	d004      	beq.n	34004c8a <HAL_RCC_ClockConfig+0x13a>
34004c80:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
34004c84:	484c      	ldr	r0, [pc, #304]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004c86:	f7fc fb73 	bl	34001370 <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34004c8a:	6863      	ldr	r3, [r4, #4]
34004c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34004c90:	f040 809a 	bne.w	34004dc8 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004c94:	4b49      	ldr	r3, [pc, #292]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004c96:	685b      	ldr	r3, [r3, #4]
34004c98:	06db      	lsls	r3, r3, #27
34004c9a:	f57f af5d 	bpl.w	34004b58 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34004c9e:	4d47      	ldr	r5, [pc, #284]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004ca0:	6862      	ldr	r2, [r4, #4]
34004ca2:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004ca4:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34004ca8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34004cac:	4313      	orrs	r3, r2
34004cae:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34004cb0:	f7fd fb84 	bl	340023bc <HAL_GetTick>
34004cb4:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004cb6:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34004cb8:	6862      	ldr	r2, [r4, #4]
34004cba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34004cbe:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34004cc2:	f040 80b7 	bne.w	34004e34 <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34004cc6:	f7ff fef9 	bl	34004abc <HAL_RCC_GetCpuClockFreq>
34004cca:	4b3d      	ldr	r3, [pc, #244]	@ (34004dc0 <HAL_RCC_ClockConfig+0x270>)
34004ccc:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34004cce:	6823      	ldr	r3, [r4, #0]
34004cd0:	079f      	lsls	r7, r3, #30
34004cd2:	f100 80b7 	bmi.w	34004e44 <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004cd6:	6823      	ldr	r3, [r4, #0]
34004cd8:	075e      	lsls	r6, r3, #29
34004cda:	f100 815c 	bmi.w	34004f96 <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004cde:	6823      	ldr	r3, [r4, #0]
34004ce0:	0718      	lsls	r0, r3, #28
34004ce2:	d513      	bpl.n	34004d0c <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004ce4:	6923      	ldr	r3, [r4, #16]
34004ce6:	2b07      	cmp	r3, #7
34004ce8:	d904      	bls.n	34004cf4 <HAL_RCC_ClockConfig+0x1a4>
34004cea:	f240 4163 	movw	r1, #1123	@ 0x463
34004cee:	4832      	ldr	r0, [pc, #200]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004cf0:	f7fc fb3e 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004cf4:	4a31      	ldr	r2, [pc, #196]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004cf6:	6921      	ldr	r1, [r4, #16]
34004cf8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004cfa:	f003 0307 	and.w	r3, r3, #7
34004cfe:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004d00:	bf3f      	itttt	cc
34004d02:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004d04:	f023 0307 	biccc.w	r3, r3, #7
34004d08:	430b      	orrcc	r3, r1
34004d0a:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004d0c:	6823      	ldr	r3, [r4, #0]
34004d0e:	06d9      	lsls	r1, r3, #27
34004d10:	d516      	bpl.n	34004d40 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004d12:	6963      	ldr	r3, [r4, #20]
34004d14:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004d18:	d006      	beq.n	34004d28 <HAL_RCC_ClockConfig+0x1d8>
34004d1a:	2b40      	cmp	r3, #64	@ 0x40
34004d1c:	d004      	beq.n	34004d28 <HAL_RCC_ClockConfig+0x1d8>
34004d1e:	f240 416d 	movw	r1, #1133	@ 0x46d
34004d22:	4825      	ldr	r0, [pc, #148]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004d24:	f7fc fb24 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004d28:	4a24      	ldr	r2, [pc, #144]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004d2a:	6961      	ldr	r1, [r4, #20]
34004d2c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004d2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004d32:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004d34:	bf3f      	itttt	cc
34004d36:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004d38:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
34004d3c:	430b      	orrcc	r3, r1
34004d3e:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004d40:	6823      	ldr	r3, [r4, #0]
34004d42:	069a      	lsls	r2, r3, #26
34004d44:	d517      	bpl.n	34004d76 <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004d46:	69a3      	ldr	r3, [r4, #24]
34004d48:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004d4c:	d007      	beq.n	34004d5e <HAL_RCC_ClockConfig+0x20e>
34004d4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004d52:	d004      	beq.n	34004d5e <HAL_RCC_ClockConfig+0x20e>
34004d54:	f240 4177 	movw	r1, #1143	@ 0x477
34004d58:	4817      	ldr	r0, [pc, #92]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004d5a:	f7fc fb09 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004d5e:	4a17      	ldr	r2, [pc, #92]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004d60:	69a1      	ldr	r1, [r4, #24]
34004d62:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004d64:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004d68:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004d6a:	bf3f      	itttt	cc
34004d6c:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004d6e:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
34004d72:	430b      	orrcc	r3, r1
34004d74:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004d76:	6823      	ldr	r3, [r4, #0]
34004d78:	065b      	lsls	r3, r3, #25
34004d7a:	d517      	bpl.n	34004dac <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004d7c:	69e3      	ldr	r3, [r4, #28]
34004d7e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004d82:	d007      	beq.n	34004d94 <HAL_RCC_ClockConfig+0x244>
34004d84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004d88:	d004      	beq.n	34004d94 <HAL_RCC_ClockConfig+0x244>
34004d8a:	f240 4181 	movw	r1, #1153	@ 0x481
34004d8e:	480a      	ldr	r0, [pc, #40]	@ (34004db8 <HAL_RCC_ClockConfig+0x268>)
34004d90:	f7fc faee 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004d94:	4a09      	ldr	r2, [pc, #36]	@ (34004dbc <HAL_RCC_ClockConfig+0x26c>)
34004d96:	69e1      	ldr	r1, [r4, #28]
34004d98:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004d9a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004d9e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004da0:	bf3f      	itttt	cc
34004da2:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004da4:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34004da8:	430b      	orrcc	r3, r1
34004daa:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34004dac:	4b05      	ldr	r3, [pc, #20]	@ (34004dc4 <HAL_RCC_ClockConfig+0x274>)
}
34004dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
34004db2:	6818      	ldr	r0, [r3, #0]
34004db4:	f7fd babe 	b.w	34002334 <HAL_InitTick>
34004db8:	34010961 	.word	0x34010961
34004dbc:	56028000 	.word	0x56028000
34004dc0:	3401239c 	.word	0x3401239c
34004dc4:	340123a4 	.word	0x340123a4
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34004dc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34004dcc:	d126      	bne.n	34004e1c <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34004dce:	6a23      	ldr	r3, [r4, #32]
34004dd0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004dd4:	d004      	beq.n	34004de0 <HAL_RCC_ClockConfig+0x290>
34004dd6:	f240 31c7 	movw	r1, #967	@ 0x3c7
34004dda:	487b      	ldr	r0, [pc, #492]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004ddc:	f7fc fac8 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34004de0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004de2:	3b01      	subs	r3, #1
34004de4:	2bff      	cmp	r3, #255	@ 0xff
34004de6:	d904      	bls.n	34004df2 <HAL_RCC_ClockConfig+0x2a2>
34004de8:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34004dec:	4876      	ldr	r0, [pc, #472]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004dee:	f7fc fabf 	bl	34001370 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004df2:	4e76      	ldr	r6, [pc, #472]	@ (34004fcc <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34004df4:	6a25      	ldr	r5, [r4, #32]
34004df6:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
34004dfa:	4629      	mov	r1, r5
34004dfc:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004e00:	f7ff fa52 	bl	340042a8 <RCC_IC_CheckPLLSources>
34004e04:	2801      	cmp	r0, #1
34004e06:	f47f aea7 	bne.w	34004b58 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34004e0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004e0c:	3b01      	subs	r3, #1
34004e0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
34004e12:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34004e16:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
34004e1a:	e740      	b.n	34004c9e <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34004e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34004e20:	d105      	bne.n	34004e2e <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
34004e22:	f7ff f8bb 	bl	34003f9c <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
34004e26:	2800      	cmp	r0, #0
34004e28:	f47f af39 	bne.w	34004c9e <HAL_RCC_ClockConfig+0x14e>
34004e2c:	e694      	b.n	34004b58 <HAL_RCC_ClockConfig+0x8>
34004e2e:	f7ff f8ad 	bl	34003f8c <LL_RCC_HSI_IsReady>
34004e32:	e7f8      	b.n	34004e26 <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004e34:	f7fd fac2 	bl	340023bc <HAL_GetTick>
34004e38:	1b80      	subs	r0, r0, r6
34004e3a:	42b8      	cmp	r0, r7
34004e3c:	f67f af3b 	bls.w	34004cb6 <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
34004e40:	2003      	movs	r0, #3
34004e42:	e68a      	b.n	34004b5a <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34004e44:	68a3      	ldr	r3, [r4, #8]
34004e46:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34004e4a:	d004      	beq.n	34004e56 <HAL_RCC_ClockConfig+0x306>
34004e4c:	f240 4101 	movw	r1, #1025	@ 0x401
34004e50:	485d      	ldr	r0, [pc, #372]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004e52:	f7fc fa8d 	bl	34001370 <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34004e56:	68a3      	ldr	r3, [r4, #8]
34004e58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34004e5c:	d11e      	bne.n	34004e9c <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004e5e:	4b5b      	ldr	r3, [pc, #364]	@ (34004fcc <HAL_RCC_ClockConfig+0x47c>)
34004e60:	685b      	ldr	r3, [r3, #4]
34004e62:	06dd      	lsls	r5, r3, #27
34004e64:	f57f ae78 	bpl.w	34004b58 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34004e68:	4d58      	ldr	r5, [pc, #352]	@ (34004fcc <HAL_RCC_ClockConfig+0x47c>)
34004e6a:	68a2      	ldr	r2, [r4, #8]
34004e6c:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004e6e:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34004e72:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34004e76:	4313      	orrs	r3, r2
34004e78:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34004e7a:	f7fd fa9f 	bl	340023bc <HAL_GetTick>
34004e7e:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004e80:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34004e82:	68a2      	ldr	r2, [r4, #8]
34004e84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34004e88:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34004e8c:	f43f af23 	beq.w	34004cd6 <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004e90:	f7fd fa94 	bl	340023bc <HAL_GetTick>
34004e94:	1b80      	subs	r0, r0, r6
34004e96:	42b8      	cmp	r0, r7
34004e98:	d9f2      	bls.n	34004e80 <HAL_RCC_ClockConfig+0x330>
34004e9a:	e7d1      	b.n	34004e40 <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34004e9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34004ea0:	d16f      	bne.n	34004f82 <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34004ea2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34004ea4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004ea8:	d004      	beq.n	34004eb4 <HAL_RCC_ClockConfig+0x364>
34004eaa:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34004eae:	4846      	ldr	r0, [pc, #280]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004eb0:	f7fc fa5e 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34004eb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004eb6:	3b01      	subs	r3, #1
34004eb8:	2bff      	cmp	r3, #255	@ 0xff
34004eba:	d904      	bls.n	34004ec6 <HAL_RCC_ClockConfig+0x376>
34004ebc:	f240 4111 	movw	r1, #1041	@ 0x411
34004ec0:	4841      	ldr	r0, [pc, #260]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004ec2:	f7fc fa55 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34004ec6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34004ec8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004ecc:	d004      	beq.n	34004ed8 <HAL_RCC_ClockConfig+0x388>
34004ece:	f240 4112 	movw	r1, #1042	@ 0x412
34004ed2:	483d      	ldr	r0, [pc, #244]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004ed4:	f7fc fa4c 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34004ed8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34004eda:	3b01      	subs	r3, #1
34004edc:	2bff      	cmp	r3, #255	@ 0xff
34004ede:	d904      	bls.n	34004eea <HAL_RCC_ClockConfig+0x39a>
34004ee0:	f240 4113 	movw	r1, #1043	@ 0x413
34004ee4:	4838      	ldr	r0, [pc, #224]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004ee6:	f7fc fa43 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
34004eea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34004eec:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004ef0:	d004      	beq.n	34004efc <HAL_RCC_ClockConfig+0x3ac>
34004ef2:	f240 4114 	movw	r1, #1044	@ 0x414
34004ef6:	4834      	ldr	r0, [pc, #208]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004ef8:	f7fc fa3a 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34004efc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34004efe:	3b01      	subs	r3, #1
34004f00:	2bff      	cmp	r3, #255	@ 0xff
34004f02:	d904      	bls.n	34004f0e <HAL_RCC_ClockConfig+0x3be>
34004f04:	f240 4115 	movw	r1, #1045	@ 0x415
34004f08:	482f      	ldr	r0, [pc, #188]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004f0a:	f7fc fa31 	bl	34001370 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004f0e:	4d2f      	ldr	r5, [pc, #188]	@ (34004fcc <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34004f10:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
34004f14:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
34004f18:	4641      	mov	r1, r8
34004f1a:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004f1e:	f7ff f9c3 	bl	340042a8 <RCC_IC_CheckPLLSources>
34004f22:	2801      	cmp	r0, #1
34004f24:	f47f ae18 	bne.w	34004b58 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004f28:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34004f2c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
34004f2e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004f32:	4639      	mov	r1, r7
34004f34:	f7ff f9b8 	bl	340042a8 <RCC_IC_CheckPLLSources>
34004f38:	2801      	cmp	r0, #1
34004f3a:	f47f ae0d 	bne.w	34004b58 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004f3e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34004f42:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
34004f44:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004f48:	4631      	mov	r1, r6
34004f4a:	f7ff f9ad 	bl	340042a8 <RCC_IC_CheckPLLSources>
34004f4e:	2801      	cmp	r0, #1
34004f50:	f47f ae02 	bne.w	34004b58 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34004f54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004f56:	3b01      	subs	r3, #1
34004f58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
34004f5c:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34004f60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34004f62:	3b01      	subs	r3, #1
34004f64:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
34004f68:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34004f6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34004f6e:	3b01      	subs	r3, #1
34004f70:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34004f74:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34004f78:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34004f7c:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
34004f80:	e772      	b.n	34004e68 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34004f82:	b92b      	cbnz	r3, 34004f90 <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
34004f84:	f7ff f802 	bl	34003f8c <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
34004f88:	2800      	cmp	r0, #0
34004f8a:	f47f af6d 	bne.w	34004e68 <HAL_RCC_ClockConfig+0x318>
34004f8e:	e5e3      	b.n	34004b58 <HAL_RCC_ClockConfig+0x8>
34004f90:	f7ff f804 	bl	34003f9c <LL_RCC_MSI_IsReady>
34004f94:	e7f8      	b.n	34004f88 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34004f96:	68e3      	ldr	r3, [r4, #12]
34004f98:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004f9c:	d007      	beq.n	34004fae <HAL_RCC_ClockConfig+0x45e>
34004f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004fa2:	d004      	beq.n	34004fae <HAL_RCC_ClockConfig+0x45e>
34004fa4:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34004fa8:	4807      	ldr	r0, [pc, #28]	@ (34004fc8 <HAL_RCC_ClockConfig+0x478>)
34004faa:	f7fc f9e1 	bl	34001370 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34004fae:	4a07      	ldr	r2, [pc, #28]	@ (34004fcc <HAL_RCC_ClockConfig+0x47c>)
34004fb0:	68e1      	ldr	r1, [r4, #12]
34004fb2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004fb4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34004fb8:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34004fba:	bf3f      	itttt	cc
34004fbc:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004fbe:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
34004fc2:	430b      	orrcc	r3, r1
34004fc4:	6253      	strcc	r3, [r2, #36]	@ 0x24
34004fc6:	e68a      	b.n	34004cde <HAL_RCC_ClockConfig+0x18e>
34004fc8:	34010961 	.word	0x34010961
34004fcc:	56028000 	.word	0x56028000

34004fd0 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004fd0:	4b1f      	ldr	r3, [pc, #124]	@ (34005050 <HAL_RCC_GetSysClockFreq+0x80>)
{
34004fd2:	b510      	push	{r4, lr}
34004fd4:	6a1a      	ldr	r2, [r3, #32]
34004fd6:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
34004fda:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34004fde:	d034      	beq.n	3400504a <HAL_RCC_GetSysClockFreq+0x7a>
34004fe0:	d806      	bhi.n	34004ff0 <HAL_RCC_GetSysClockFreq+0x20>
34004fe2:	b952      	cbnz	r2, 34004ffa <HAL_RCC_GetSysClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34004fe6:	481b      	ldr	r0, [pc, #108]	@ (34005054 <HAL_RCC_GetSysClockFreq+0x84>)
34004fe8:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004fec:	40d8      	lsrs	r0, r3
}
34004fee:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSysClkSource())
34004ff0:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34004ff4:	d009      	beq.n	3400500a <HAL_RCC_GetSysClockFreq+0x3a>
      switch (LL_RCC_IC2_GetSource())
34004ff6:	2000      	movs	r0, #0
34004ff8:	e7f9      	b.n	34004fee <HAL_RCC_GetSysClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34004ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34004ffc:	4816      	ldr	r0, [pc, #88]	@ (34005058 <HAL_RCC_GetSysClockFreq+0x88>)
34004ffe:	f413 7f00 	tst.w	r3, #512	@ 0x200
34005002:	4b16      	ldr	r3, [pc, #88]	@ (3400505c <HAL_RCC_GetSysClockFreq+0x8c>)
34005004:	bf08      	it	eq
34005006:	4618      	moveq	r0, r3
34005008:	e7f1      	b.n	34004fee <HAL_RCC_GetSysClockFreq+0x1e>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3400500a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400500e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34005012:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34005016:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC2_GetSource())
3400501a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3400501e:	f100 0401 	add.w	r4, r0, #1
34005022:	d00f      	beq.n	34005044 <HAL_RCC_GetSysClockFreq+0x74>
34005024:	d805      	bhi.n	34005032 <HAL_RCC_GetSysClockFreq+0x62>
34005026:	b953      	cbnz	r3, 3400503e <HAL_RCC_GetSysClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34005028:	f003 f92c 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
3400502c:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34005030:	e7dd      	b.n	34004fee <HAL_RCC_GetSysClockFreq+0x1e>
      switch (LL_RCC_IC2_GetSource())
34005032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34005036:	d1de      	bne.n	34004ff6 <HAL_RCC_GetSysClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34005038:	f003 f9e4 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
3400503c:	e7f6      	b.n	3400502c <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400503e:	f003 f961 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34005042:	e7f3      	b.n	3400502c <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34005044:	f003 f99e 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34005048:	e7f0      	b.n	3400502c <HAL_RCC_GetSysClockFreq+0x5c>
  switch (LL_RCC_GetSysClkSource())
3400504a:	4805      	ldr	r0, [pc, #20]	@ (34005060 <HAL_RCC_GetSysClockFreq+0x90>)
3400504c:	e7cf      	b.n	34004fee <HAL_RCC_GetSysClockFreq+0x1e>
3400504e:	bf00      	nop
34005050:	56028000 	.word	0x56028000
34005054:	03d09000 	.word	0x03d09000
34005058:	00f42400 	.word	0x00f42400
3400505c:	003d0900 	.word	0x003d0900
34005060:	02dc6c00 	.word	0x02dc6c00

34005064 <HAL_RCC_GetHCLKFreq>:
{
34005064:	b508      	push	{r3, lr}
  return LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler());
34005066:	f7ff ffb3 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3400506a:	4b03      	ldr	r3, [pc, #12]	@ (34005078 <HAL_RCC_GetHCLKFreq+0x14>)
3400506c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400506e:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34005072:	40d8      	lsrs	r0, r3
34005074:	bd08      	pop	{r3, pc}
34005076:	bf00      	nop
34005078:	56028000 	.word	0x56028000

3400507c <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3400507c:	4a02      	ldr	r2, [pc, #8]	@ (34005088 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
3400507e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34005080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34005084:	6553      	str	r3, [r2, #84]	@ 0x54
}
34005086:	4770      	bx	lr
34005088:	56028000 	.word	0x56028000

3400508c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3400508c:	4a02      	ldr	r2, [pc, #8]	@ (34005098 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
3400508e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34005090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34005094:	6553      	str	r3, [r2, #84]	@ 0x54
}
34005096:	4770      	bx	lr
34005098:	56028000 	.word	0x56028000

3400509c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
3400509c:	4b02      	ldr	r3, [pc, #8]	@ (340050a8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
3400509e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
340050a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
340050a4:	4770      	bx	lr
340050a6:	bf00      	nop
340050a8:	56028000 	.word	0x56028000

340050ac <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340050ac:	4b02      	ldr	r3, [pc, #8]	@ (340050b8 <LL_RCC_HSE_IsReady+0xc>)
340050ae:	6858      	ldr	r0, [r3, #4]
}
340050b0:	f3c0 1000 	ubfx	r0, r0, #4, #1
340050b4:	4770      	bx	lr
340050b6:	bf00      	nop
340050b8:	56028000 	.word	0x56028000

340050bc <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
340050bc:	4b02      	ldr	r3, [pc, #8]	@ (340050c8 <LL_RCC_HSI_IsReady+0xc>)
340050be:	6858      	ldr	r0, [r3, #4]
}
340050c0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
340050c4:	4770      	bx	lr
340050c6:	bf00      	nop
340050c8:	56028000 	.word	0x56028000

340050cc <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
340050cc:	4b02      	ldr	r3, [pc, #8]	@ (340050d8 <LL_RCC_MSI_IsReady+0xc>)
340050ce:	6858      	ldr	r0, [r3, #4]
}
340050d0:	f3c0 0080 	ubfx	r0, r0, #2, #1
340050d4:	4770      	bx	lr
340050d6:	bf00      	nop
340050d8:	56028000 	.word	0x56028000

340050dc <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
340050dc:	4b02      	ldr	r3, [pc, #8]	@ (340050e8 <LL_RCC_LSE_IsReady+0xc>)
340050de:	6858      	ldr	r0, [r3, #4]
}
340050e0:	f3c0 0040 	ubfx	r0, r0, #1, #1
340050e4:	4770      	bx	lr
340050e6:	bf00      	nop
340050e8:	56028000 	.word	0x56028000

340050ec <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
340050ec:	4907      	ldr	r1, [pc, #28]	@ (3400510c <LL_RCC_SetClockSource+0x20>)
{
340050ee:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
340050f0:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
340050f2:	f3c0 2504 	ubfx	r5, r0, #8, #5
340050f6:	5863      	ldr	r3, [r4, r1]
340050f8:	0e02      	lsrs	r2, r0, #24
340050fa:	40aa      	lsls	r2, r5
340050fc:	f3c0 4007 	ubfx	r0, r0, #16, #8
34005100:	ea23 0302 	bic.w	r3, r3, r2
34005104:	40a8      	lsls	r0, r5
34005106:	4303      	orrs	r3, r0
34005108:	5063      	str	r3, [r4, r1]
}
3400510a:	bd30      	pop	{r4, r5, pc}
3400510c:	56028144 	.word	0x56028144

34005110 <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34005110:	4b05      	ldr	r3, [pc, #20]	@ (34005128 <LL_RCC_GetClockSource+0x18>)
34005112:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34005114:	58d1      	ldr	r1, [r2, r3]
34005116:	f3c0 2204 	ubfx	r2, r0, #8, #5
3400511a:	0e03      	lsrs	r3, r0, #24
3400511c:	4093      	lsls	r3, r2
3400511e:	400b      	ands	r3, r1
34005120:	40d3      	lsrs	r3, r2
}
34005122:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
34005126:	4770      	bx	lr
34005128:	56028144 	.word	0x56028144

3400512c <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
3400512c:	4b02      	ldr	r3, [pc, #8]	@ (34005138 <LL_RCC_IC7_IsEnabled+0xc>)
3400512e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34005132:	f3c0 1080 	ubfx	r0, r0, #6, #1
34005136:	4770      	bx	lr
34005138:	56028000 	.word	0x56028000

3400513c <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
3400513c:	4b03      	ldr	r3, [pc, #12]	@ (3400514c <LL_RCC_IC7_GetDivider+0x10>)
3400513e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
34005142:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34005146:	3001      	adds	r0, #1
34005148:	4770      	bx	lr
3400514a:	bf00      	nop
3400514c:	56028000 	.word	0x56028000

34005150 <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34005150:	4b02      	ldr	r3, [pc, #8]	@ (3400515c <LL_RCC_IC8_IsEnabled+0xc>)
34005152:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34005156:	f3c0 10c0 	ubfx	r0, r0, #7, #1
3400515a:	4770      	bx	lr
3400515c:	56028000 	.word	0x56028000

34005160 <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34005160:	4b03      	ldr	r3, [pc, #12]	@ (34005170 <LL_RCC_IC8_GetDivider+0x10>)
34005162:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
34005166:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3400516a:	3001      	adds	r0, #1
3400516c:	4770      	bx	lr
3400516e:	bf00      	nop
34005170:	56028000 	.word	0x56028000

34005174 <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34005174:	4b02      	ldr	r3, [pc, #8]	@ (34005180 <LL_RCC_IC9_IsEnabled+0xc>)
34005176:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3400517a:	f3c0 2000 	ubfx	r0, r0, #8, #1
3400517e:	4770      	bx	lr
34005180:	56028000 	.word	0x56028000

34005184 <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34005184:	4b03      	ldr	r3, [pc, #12]	@ (34005194 <LL_RCC_IC9_GetDivider+0x10>)
34005186:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
3400518a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3400518e:	3001      	adds	r0, #1
34005190:	4770      	bx	lr
34005192:	bf00      	nop
34005194:	56028000 	.word	0x56028000

34005198 <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34005198:	4b02      	ldr	r3, [pc, #8]	@ (340051a4 <LL_RCC_IC14_IsEnabled+0xc>)
3400519a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3400519e:	f3c0 3040 	ubfx	r0, r0, #13, #1
340051a2:	4770      	bx	lr
340051a4:	56028000 	.word	0x56028000

340051a8 <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
340051a8:	4b03      	ldr	r3, [pc, #12]	@ (340051b8 <LL_RCC_IC14_GetDivider+0x10>)
340051aa:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
340051ae:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340051b2:	3001      	adds	r0, #1
340051b4:	4770      	bx	lr
340051b6:	bf00      	nop
340051b8:	56028000 	.word	0x56028000

340051bc <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
340051bc:	4b02      	ldr	r3, [pc, #8]	@ (340051c8 <LL_RCC_IC15_IsEnabled+0xc>)
340051be:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340051c2:	f3c0 3080 	ubfx	r0, r0, #14, #1
340051c6:	4770      	bx	lr
340051c8:	56028000 	.word	0x56028000

340051cc <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
340051cc:	4b03      	ldr	r3, [pc, #12]	@ (340051dc <LL_RCC_IC15_GetDivider+0x10>)
340051ce:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
340051d2:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340051d6:	3001      	adds	r0, #1
340051d8:	4770      	bx	lr
340051da:	bf00      	nop
340051dc:	56028000 	.word	0x56028000

340051e0 <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
340051e0:	4b02      	ldr	r3, [pc, #8]	@ (340051ec <RCCEx_GetHCLKFreq+0xc>)
340051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
340051e4:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
340051e8:	40d8      	lsrs	r0, r3
340051ea:	4770      	bx	lr
340051ec:	56028000 	.word	0x56028000

340051f0 <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
340051f0:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
340051f4:	b508      	push	{r3, lr}
  switch (PLLsource)
340051f6:	d01d      	beq.n	34005234 <RCCEx_GetPLLSourceFreq+0x44>
340051f8:	d80a      	bhi.n	34005210 <RCCEx_GetPLLSourceFreq+0x20>
340051fa:	b970      	cbnz	r0, 3400521a <RCCEx_GetPLLSourceFreq+0x2a>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340051fc:	f7ff ff5e 	bl	340050bc <LL_RCC_HSI_IsReady>
34005200:	b148      	cbz	r0, 34005216 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34005202:	4b10      	ldr	r3, [pc, #64]	@ (34005244 <RCCEx_GetPLLSourceFreq+0x54>)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34005204:	4810      	ldr	r0, [pc, #64]	@ (34005248 <RCCEx_GetPLLSourceFreq+0x58>)
34005206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005208:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400520c:	40d8      	lsrs	r0, r3
3400520e:	e003      	b.n	34005218 <RCCEx_GetPLLSourceFreq+0x28>
  switch (PLLsource)
34005210:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34005214:	d014      	beq.n	34005240 <RCCEx_GetPLLSourceFreq+0x50>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34005216:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
34005218:	bd08      	pop	{r3, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
3400521a:	f7ff ff57 	bl	340050cc <LL_RCC_MSI_IsReady>
3400521e:	2800      	cmp	r0, #0
34005220:	d0f9      	beq.n	34005216 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34005222:	4b08      	ldr	r3, [pc, #32]	@ (34005244 <RCCEx_GetPLLSourceFreq+0x54>)
          pllinputfreq = MSI_VALUE;
34005224:	4809      	ldr	r0, [pc, #36]	@ (3400524c <RCCEx_GetPLLSourceFreq+0x5c>)
34005226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34005228:	f413 7f00 	tst.w	r3, #512	@ 0x200
3400522c:	4b08      	ldr	r3, [pc, #32]	@ (34005250 <RCCEx_GetPLLSourceFreq+0x60>)
3400522e:	bf08      	it	eq
34005230:	4618      	moveq	r0, r3
34005232:	e7f1      	b.n	34005218 <RCCEx_GetPLLSourceFreq+0x28>
      if (LL_RCC_HSE_IsReady() != 0U)
34005234:	f7ff ff3a 	bl	340050ac <LL_RCC_HSE_IsReady>
34005238:	2800      	cmp	r0, #0
3400523a:	d0ec      	beq.n	34005216 <RCCEx_GetPLLSourceFreq+0x26>
        pllinputfreq = HSE_VALUE;
3400523c:	4805      	ldr	r0, [pc, #20]	@ (34005254 <RCCEx_GetPLLSourceFreq+0x64>)
3400523e:	e7eb      	b.n	34005218 <RCCEx_GetPLLSourceFreq+0x28>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34005240:	4805      	ldr	r0, [pc, #20]	@ (34005258 <RCCEx_GetPLLSourceFreq+0x68>)
34005242:	e7e9      	b.n	34005218 <RCCEx_GetPLLSourceFreq+0x28>
34005244:	56028000 	.word	0x56028000
34005248:	03d09000 	.word	0x03d09000
3400524c:	00f42400 	.word	0x00f42400
34005250:	003d0900 	.word	0x003d0900
34005254:	02dc6c00 	.word	0x02dc6c00
34005258:	00bb8000 	.word	0x00bb8000

3400525c <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
3400525c:	ee07 2a10 	vmov	s14, r2
34005260:	ee06 3a10 	vmov	s12, r3
34005264:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34005268:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
3400526c:	eddf 5a10 	vldr	s11, [pc, #64]	@ 340052b0 <RCCEx_CalcPLLFreq+0x54>
34005270:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
34005274:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34005278:	eea6 7a25 	vfma.f32	s14, s12, s11
3400527c:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005280:	ee67 7a87 	vmul.f32	s15, s15, s14
34005284:	eeb8 7a66 	vcvt.f32.u32	s14, s13
34005288:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
3400528c:	eddd 7a00 	vldr	s15, [sp]
34005290:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005294:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
34005298:	eddd 7a01 	vldr	s15, [sp, #4]
3400529c:	eef8 7a67 	vcvt.f32.u32	s15, s15
340052a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
340052a4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
340052a8:	ee17 0a90 	vmov	r0, s15
340052ac:	4770      	bx	lr
340052ae:	bf00      	nop
340052b0:	33800000 	.word	0x33800000

340052b4 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
340052b4:	e9d0 2300 	ldrd	r2, r3, [r0]
340052b8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
340052bc:	431a      	orrs	r2, r3
{
340052be:	b570      	push	{r4, r5, r6, lr}
340052c0:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
340052c2:	d103      	bne.n	340052cc <HAL_RCCEx_PeriphCLKConfig+0x18>
340052c4:	2188      	movs	r1, #136	@ 0x88
340052c6:	4861      	ldr	r0, [pc, #388]	@ (3400544c <HAL_RCCEx_PeriphCLKConfig+0x198>)
340052c8:	f7fc f852 	bl	34001370 <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
340052cc:	6823      	ldr	r3, [r4, #0]
340052ce:	011a      	lsls	r2, r3, #4
340052d0:	f140 808e 	bpl.w	340053f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
340052d4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
340052d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
340052dc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
340052e0:	d05a      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340052e6:	d057      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
340052ec:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
340052f0:	d052      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
340052f6:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
340052fa:	d04d      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052fc:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
34005300:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
34005304:	d048      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005306:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
3400530a:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
3400530e:	d043      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005310:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34005314:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
34005318:	d03e      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400531a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400531e:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
34005322:	d039      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005324:	494a      	ldr	r1, [pc, #296]	@ (34005450 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
34005326:	428a      	cmp	r2, r1
34005328:	d036      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400532a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400532e:	428a      	cmp	r2, r1
34005330:	d032      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005332:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005336:	428a      	cmp	r2, r1
34005338:	d02e      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400533a:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
3400533e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005342:	4288      	cmp	r0, r1
34005344:	d028      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005346:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
3400534a:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
3400534e:	4288      	cmp	r0, r1
34005350:	d022      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005352:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
34005356:	428a      	cmp	r2, r1
34005358:	d01e      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400535a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400535e:	428a      	cmp	r2, r1
34005360:	d01a      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005362:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005366:	428a      	cmp	r2, r1
34005368:	d016      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400536a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400536e:	428a      	cmp	r2, r1
34005370:	d012      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005372:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005376:	428a      	cmp	r2, r1
34005378:	d00e      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400537a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400537e:	428a      	cmp	r2, r1
34005380:	d00a      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005382:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34005386:	428a      	cmp	r2, r1
34005388:	d006      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400538a:	4a32      	ldr	r2, [pc, #200]	@ (34005454 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
3400538c:	4293      	cmp	r3, r2
3400538e:	d003      	beq.n	34005398 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005390:	218e      	movs	r1, #142	@ 0x8e
34005392:	482e      	ldr	r0, [pc, #184]	@ (3400544c <HAL_RCCEx_PeriphCLKConfig+0x198>)
34005394:	f7fb ffec 	bl	34001370 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34005398:	4b2f      	ldr	r3, [pc, #188]	@ (34005458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3400539a:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
3400539e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340053a2:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
340053a6:	d13b      	bne.n	34005420 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
340053a8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
340053ac:	d108      	bne.n	340053c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
340053ae:	f7fd f805 	bl	340023bc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340053b2:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
340053b6:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
340053b8:	f7ff fe90 	bl	340050dc <LL_RCC_LSE_IsReady>
340053bc:	2800      	cmp	r0, #0
340053be:	d03d      	beq.n	3400543c <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
340053c0:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
340053c4:	4a24      	ldr	r2, [pc, #144]	@ (34005458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
340053c6:	f403 7040 	and.w	r0, r3, #768	@ 0x300
340053ca:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
340053ce:	d108      	bne.n	340053e2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
340053d0:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
340053d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
340053d8:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
340053dc:	430b      	orrs	r3, r1
340053de:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
340053e2:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340053e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
340053ea:	4303      	orrs	r3, r0
340053ec:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
340053f0:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
340053f2:	6823      	ldr	r3, [r4, #0]
340053f4:	075e      	lsls	r6, r3, #29
340053f6:	d55f      	bpl.n	340054b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
340053f8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
340053fc:	2b07      	cmp	r3, #7
340053fe:	d903      	bls.n	34005408 <HAL_RCCEx_PeriphCLKConfig+0x154>
34005400:	21d4      	movs	r1, #212	@ 0xd4
34005402:	4812      	ldr	r0, [pc, #72]	@ (3400544c <HAL_RCCEx_PeriphCLKConfig+0x198>)
34005404:	f7fb ffb4 	bl	34001370 <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34005408:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3400540c:	3b03      	subs	r3, #3
3400540e:	2b04      	cmp	r3, #4
34005410:	d848      	bhi.n	340054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
34005412:	e8df f013 	tbh	[pc, r3, lsl #1]
34005416:	0f27      	.short	0x0f27
34005418:	0ee10025 	.word	0x0ee10025
3400541c:	0f500f04 	.word	0x0f500f04
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34005420:	f401 7240 	and.w	r2, r1, #768	@ 0x300
34005424:	429a      	cmp	r2, r3
34005426:	d0bf      	beq.n	340053a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34005428:	4b0c      	ldr	r3, [pc, #48]	@ (3400545c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
3400542a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400542c:	f042 0201 	orr.w	r2, r2, #1
34005430:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34005434:	07db      	lsls	r3, r3, #31
34005436:	d4b7      	bmi.n	340053a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
34005438:	2501      	movs	r5, #1
3400543a:	e7da      	b.n	340053f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400543c:	f7fc ffbe 	bl	340023bc <HAL_GetTick>
34005440:	1b40      	subs	r0, r0, r5
34005442:	42b0      	cmp	r0, r6
34005444:	d9b8      	bls.n	340053b8 <HAL_RCCEx_PeriphCLKConfig+0x104>
        status = ret;
34005446:	2503      	movs	r5, #3
34005448:	e7d3      	b.n	340053f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
3400544a:	bf00      	nop
3400544c:	34010a09 	.word	0x34010a09
34005450:	00010300 	.word	0x00010300
34005454:	0003e300 	.word	0x0003e300
34005458:	56028000 	.word	0x56028000
3400545c:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34005460:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34005462:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005466:	d003      	beq.n	34005470 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
34005468:	21d9      	movs	r1, #217	@ 0xd9
3400546a:	48bd      	ldr	r0, [pc, #756]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400546c:	f7fb ff80 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34005470:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34005472:	3b01      	subs	r3, #1
34005474:	2bff      	cmp	r3, #255	@ 0xff
34005476:	d903      	bls.n	34005480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
34005478:	21da      	movs	r1, #218	@ 0xda
3400547a:	48b9      	ldr	r0, [pc, #740]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400547c:	f7fb ff78 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34005480:	4ab8      	ldr	r2, [pc, #736]	@ (34005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005482:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34005484:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34005488:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
3400548a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400548e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005492:	3901      	subs	r1, #1
34005494:	4303      	orrs	r3, r0
34005496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400549a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3400549e:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340054a0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340054a4:	4aaf      	ldr	r2, [pc, #700]	@ (34005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340054a6:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
340054aa:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340054ae:	f023 0307 	bic.w	r3, r3, #7
340054b2:	430b      	orrs	r3, r1
340054b4:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
340054b8:	6863      	ldr	r3, [r4, #4]
340054ba:	0258      	lsls	r0, r3, #9
340054bc:	d539      	bpl.n	34005532 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
340054be:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
340054c2:	4aa9      	ldr	r2, [pc, #676]	@ (34005768 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
340054c4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340054c8:	4293      	cmp	r3, r2
340054ca:	d004      	beq.n	340054d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
340054cc:	f44f 7192 	mov.w	r1, #292	@ 0x124
340054d0:	48a3      	ldr	r0, [pc, #652]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340054d2:	f7fb ff4d 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
340054d6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
340054da:	4aa4      	ldr	r2, [pc, #656]	@ (3400576c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
340054dc:	4293      	cmp	r3, r2
340054de:	f041 8713 	bne.w	34007308 <HAL_RCCEx_PeriphCLKConfig+0x2054>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340054e2:	69a3      	ldr	r3, [r4, #24]
340054e4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340054e8:	d004      	beq.n	340054f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
340054ea:	f240 1129 	movw	r1, #297	@ 0x129
340054ee:	489c      	ldr	r0, [pc, #624]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340054f0:	f7fb ff3e 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340054f4:	69e3      	ldr	r3, [r4, #28]
340054f6:	3b01      	subs	r3, #1
340054f8:	2bff      	cmp	r3, #255	@ 0xff
340054fa:	d904      	bls.n	34005506 <HAL_RCCEx_PeriphCLKConfig+0x252>
340054fc:	f44f 7195 	mov.w	r1, #298	@ 0x12a
34005500:	4897      	ldr	r0, [pc, #604]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005502:	f7fb ff35 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34005506:	4a97      	ldr	r2, [pc, #604]	@ (34005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005508:	69e1      	ldr	r1, [r4, #28]
3400550a:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
3400550e:	69a0      	ldr	r0, [r4, #24]
34005510:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005514:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005518:	3901      	subs	r1, #1
3400551a:	4303      	orrs	r3, r0
3400551c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005520:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34005524:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005526:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400552a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
3400552e:	f7ff fddd 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
34005532:	6863      	ldr	r3, [r4, #4]
34005534:	0219      	lsls	r1, r3, #8
34005536:	d539      	bpl.n	340055ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
34005538:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
3400553c:	4a8c      	ldr	r2, [pc, #560]	@ (34005770 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
3400553e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005542:	4293      	cmp	r3, r2
34005544:	d004      	beq.n	34005550 <HAL_RCCEx_PeriphCLKConfig+0x29c>
34005546:	f240 1151 	movw	r1, #337	@ 0x151
3400554a:	4885      	ldr	r0, [pc, #532]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400554c:	f7fb ff10 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34005550:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34005554:	4a87      	ldr	r2, [pc, #540]	@ (34005774 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
34005556:	4293      	cmp	r3, r2
34005558:	f041 8706 	bne.w	34007368 <HAL_RCCEx_PeriphCLKConfig+0x20b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400555c:	69a3      	ldr	r3, [r4, #24]
3400555e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005562:	d004      	beq.n	3400556e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
34005564:	f44f 71ab 	mov.w	r1, #342	@ 0x156
34005568:	487d      	ldr	r0, [pc, #500]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400556a:	f7fb ff01 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400556e:	69e3      	ldr	r3, [r4, #28]
34005570:	3b01      	subs	r3, #1
34005572:	2bff      	cmp	r3, #255	@ 0xff
34005574:	d904      	bls.n	34005580 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
34005576:	f240 1157 	movw	r1, #343	@ 0x157
3400557a:	4879      	ldr	r0, [pc, #484]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400557c:	f7fb fef8 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34005580:	4a78      	ldr	r2, [pc, #480]	@ (34005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005582:	69e1      	ldr	r1, [r4, #28]
34005584:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34005588:	69a0      	ldr	r0, [r4, #24]
3400558a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400558e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005592:	3901      	subs	r1, #1
34005594:	4303      	orrs	r3, r0
34005596:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400559a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3400559e:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340055a0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340055a4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
340055a8:	f7ff fda0 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
340055ac:	6863      	ldr	r3, [r4, #4]
340055ae:	01da      	lsls	r2, r3, #7
340055b0:	d539      	bpl.n	34005626 <HAL_RCCEx_PeriphCLKConfig+0x372>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
340055b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
340055b6:	4a70      	ldr	r2, [pc, #448]	@ (34005778 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
340055b8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340055bc:	4293      	cmp	r3, r2
340055be:	d004      	beq.n	340055ca <HAL_RCCEx_PeriphCLKConfig+0x316>
340055c0:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
340055c4:	4866      	ldr	r0, [pc, #408]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340055c6:	f7fb fed3 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
340055ca:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
340055ce:	4a6b      	ldr	r2, [pc, #428]	@ (3400577c <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
340055d0:	4293      	cmp	r3, r2
340055d2:	f041 86f9 	bne.w	340073c8 <HAL_RCCEx_PeriphCLKConfig+0x2114>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340055d6:	69a3      	ldr	r3, [r4, #24]
340055d8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340055dc:	d004      	beq.n	340055e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
340055de:	f240 1183 	movw	r1, #387	@ 0x183
340055e2:	485f      	ldr	r0, [pc, #380]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340055e4:	f7fb fec4 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340055e8:	69e3      	ldr	r3, [r4, #28]
340055ea:	3b01      	subs	r3, #1
340055ec:	2bff      	cmp	r3, #255	@ 0xff
340055ee:	d904      	bls.n	340055fa <HAL_RCCEx_PeriphCLKConfig+0x346>
340055f0:	f44f 71c2 	mov.w	r1, #388	@ 0x184
340055f4:	485a      	ldr	r0, [pc, #360]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340055f6:	f7fb febb 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340055fa:	4a5a      	ldr	r2, [pc, #360]	@ (34005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340055fc:	69e1      	ldr	r1, [r4, #28]
340055fe:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34005602:	69a0      	ldr	r0, [r4, #24]
34005604:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005608:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400560c:	3901      	subs	r1, #1
3400560e:	4303      	orrs	r3, r0
34005610:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005614:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34005618:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400561a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400561e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
34005622:	f7ff fd63 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34005626:	6823      	ldr	r3, [r4, #0]
34005628:	051b      	lsls	r3, r3, #20
3400562a:	d53c      	bpl.n	340056a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
3400562c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34005630:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34005634:	d004      	beq.n	34005640 <HAL_RCCEx_PeriphCLKConfig+0x38c>
34005636:	f240 11ab 	movw	r1, #427	@ 0x1ab
3400563a:	4849      	ldr	r0, [pc, #292]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400563c:	f7fb fe98 	bl	34001370 <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34005640:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34005644:	2b20      	cmp	r3, #32
34005646:	f041 86ff 	bne.w	34007448 <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400564a:	69a3      	ldr	r3, [r4, #24]
3400564c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005650:	d004      	beq.n	3400565c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
34005652:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
34005656:	4842      	ldr	r0, [pc, #264]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005658:	f7fb fe8a 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400565c:	69e3      	ldr	r3, [r4, #28]
3400565e:	3b01      	subs	r3, #1
34005660:	2bff      	cmp	r3, #255	@ 0xff
34005662:	d904      	bls.n	3400566e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
34005664:	f240 11b1 	movw	r1, #433	@ 0x1b1
34005668:	483d      	ldr	r0, [pc, #244]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400566a:	f7fb fe81 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400566e:	4a3d      	ldr	r2, [pc, #244]	@ (34005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005670:	69e1      	ldr	r1, [r4, #28]
34005672:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34005676:	69a0      	ldr	r0, [r4, #24]
34005678:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400567c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005680:	3901      	subs	r1, #1
34005682:	4303      	orrs	r3, r0
34005684:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005688:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3400568c:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400568e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34005692:	4a34      	ldr	r2, [pc, #208]	@ (34005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34005694:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
34005698:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
3400569c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340056a0:	430b      	orrs	r3, r1
340056a2:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
340056a6:	6823      	ldr	r3, [r4, #0]
340056a8:	005e      	lsls	r6, r3, #1
340056aa:	d539      	bpl.n	34005720 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
340056ac:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
340056b0:	4a33      	ldr	r2, [pc, #204]	@ (34005780 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
340056b2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340056b6:	4293      	cmp	r3, r2
340056b8:	d004      	beq.n	340056c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
340056ba:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
340056be:	4828      	ldr	r0, [pc, #160]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340056c0:	f7fb fe56 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
340056c4:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
340056c8:	4a2e      	ldr	r2, [pc, #184]	@ (34005784 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
340056ca:	4293      	cmp	r3, r2
340056cc:	f041 86ea 	bne.w	340074a4 <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340056d0:	6a23      	ldr	r3, [r4, #32]
340056d2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340056d6:	d004      	beq.n	340056e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
340056d8:	f240 11dd 	movw	r1, #477	@ 0x1dd
340056dc:	4820      	ldr	r0, [pc, #128]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340056de:	f7fb fe47 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340056e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340056e4:	3b01      	subs	r3, #1
340056e6:	2bff      	cmp	r3, #255	@ 0xff
340056e8:	d904      	bls.n	340056f4 <HAL_RCCEx_PeriphCLKConfig+0x440>
340056ea:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
340056ee:	481c      	ldr	r0, [pc, #112]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340056f0:	f7fb fe3e 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340056f4:	4a1b      	ldr	r2, [pc, #108]	@ (34005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340056f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340056f8:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340056fc:	6a20      	ldr	r0, [r4, #32]
340056fe:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005702:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005706:	3901      	subs	r1, #1
34005708:	4303      	orrs	r3, r0
3400570a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400570e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005712:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34005714:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005718:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
3400571c:	f7ff fce6 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34005720:	6823      	ldr	r3, [r4, #0]
34005722:	2b00      	cmp	r3, #0
34005724:	da53      	bge.n	340057ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
34005726:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
3400572a:	4a17      	ldr	r2, [pc, #92]	@ (34005788 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
3400572c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005730:	4293      	cmp	r3, r2
34005732:	d004      	beq.n	3400573e <HAL_RCCEx_PeriphCLKConfig+0x48a>
34005734:	f240 2105 	movw	r1, #517	@ 0x205
34005738:	4809      	ldr	r0, [pc, #36]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3400573a:	f7fb fe19 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3400573e:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34005742:	4a12      	ldr	r2, [pc, #72]	@ (3400578c <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
34005744:	4293      	cmp	r3, r2
34005746:	f041 86dd 	bne.w	34007504 <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400574a:	6a23      	ldr	r3, [r4, #32]
3400574c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005750:	d01e      	beq.n	34005790 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
34005752:	f240 210a 	movw	r1, #522	@ 0x20a
34005756:	4802      	ldr	r0, [pc, #8]	@ (34005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34005758:	f7fb fe0a 	bl	34001370 <assert_failed>
3400575c:	e018      	b.n	34005790 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
3400575e:	bf00      	nop
34005760:	34010a09 	.word	0x34010a09
34005764:	56028000 	.word	0x56028000
34005768:	03000014 	.word	0x03000014
3400576c:	03020014 	.word	0x03020014
34005770:	03000414 	.word	0x03000414
34005774:	03020414 	.word	0x03020414
34005778:	03000814 	.word	0x03000814
3400577c:	03020814 	.word	0x03020814
34005780:	0300001c 	.word	0x0300001c
34005784:	0302001c 	.word	0x0302001c
34005788:	0300041c 	.word	0x0300041c
3400578c:	0302041c 	.word	0x0302041c
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34005790:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34005792:	3b01      	subs	r3, #1
34005794:	2bff      	cmp	r3, #255	@ 0xff
34005796:	d904      	bls.n	340057a2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
34005798:	f240 210b 	movw	r1, #523	@ 0x20b
3400579c:	48c4      	ldr	r0, [pc, #784]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3400579e:	f7fb fde7 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340057a2:	4ac4      	ldr	r2, [pc, #784]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
340057a4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340057a6:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340057aa:	6a20      	ldr	r0, [r4, #32]
340057ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340057b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340057b4:	3901      	subs	r1, #1
340057b6:	4303      	orrs	r3, r0
340057b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340057bc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340057c0:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340057c2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340057c6:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
340057ca:	f7ff fc8f 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
340057ce:	6823      	ldr	r3, [r4, #0]
340057d0:	07d8      	lsls	r0, r3, #31
340057d2:	d54f      	bpl.n	34005874 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
340057d4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
340057d8:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340057dc:	d006      	beq.n	340057ec <HAL_RCCEx_PeriphCLKConfig+0x538>
340057de:	2b40      	cmp	r3, #64	@ 0x40
340057e0:	d004      	beq.n	340057ec <HAL_RCCEx_PeriphCLKConfig+0x538>
340057e2:	f240 2132 	movw	r1, #562	@ 0x232
340057e6:	48b2      	ldr	r0, [pc, #712]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340057e8:	f7fb fdc2 	bl	34001370 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
340057ec:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
340057f0:	3b01      	subs	r3, #1
340057f2:	2bff      	cmp	r3, #255	@ 0xff
340057f4:	d904      	bls.n	34005800 <HAL_RCCEx_PeriphCLKConfig+0x54c>
340057f6:	f240 2133 	movw	r1, #563	@ 0x233
340057fa:	48ad      	ldr	r0, [pc, #692]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340057fc:	f7fb fdb8 	bl	34001370 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34005800:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34005804:	2b20      	cmp	r3, #32
34005806:	f041 86ad 	bne.w	34007564 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400580a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400580c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005810:	d004      	beq.n	3400581c <HAL_RCCEx_PeriphCLKConfig+0x568>
34005812:	f44f 710e 	mov.w	r1, #568	@ 0x238
34005816:	48a6      	ldr	r0, [pc, #664]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005818:	f7fb fdaa 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400581c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400581e:	3b01      	subs	r3, #1
34005820:	2bff      	cmp	r3, #255	@ 0xff
34005822:	d904      	bls.n	3400582e <HAL_RCCEx_PeriphCLKConfig+0x57a>
34005824:	f240 2139 	movw	r1, #569	@ 0x239
34005828:	48a1      	ldr	r0, [pc, #644]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3400582a:	f7fb fda1 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400582e:	4aa1      	ldr	r2, [pc, #644]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005830:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34005832:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34005836:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34005838:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400583c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005840:	3901      	subs	r1, #1
34005842:	4303      	orrs	r3, r0
34005844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005848:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400584c:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400584e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
34005852:	4998      	ldr	r1, [pc, #608]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005854:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
34005858:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
3400585c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
34005860:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
34005864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
34005868:	3a01      	subs	r2, #1
3400586a:	4303      	orrs	r3, r0
3400586c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34005870:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34005874:	6823      	ldr	r3, [r4, #0]
34005876:	0799      	lsls	r1, r3, #30
34005878:	d53b      	bpl.n	340058f2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
3400587a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
3400587e:	2b07      	cmp	r3, #7
34005880:	d904      	bls.n	3400588c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
34005882:	f240 2161 	movw	r1, #609	@ 0x261
34005886:	488a      	ldr	r0, [pc, #552]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005888:	f7fb fd72 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
3400588c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34005890:	2b02      	cmp	r3, #2
34005892:	f041 8695 	bne.w	340075c0 <HAL_RCCEx_PeriphCLKConfig+0x230c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34005896:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34005898:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400589c:	d004      	beq.n	340058a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
3400589e:	f240 2166 	movw	r1, #614	@ 0x266
340058a2:	4883      	ldr	r0, [pc, #524]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340058a4:	f7fb fd64 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340058a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340058aa:	3b01      	subs	r3, #1
340058ac:	2bff      	cmp	r3, #255	@ 0xff
340058ae:	d904      	bls.n	340058ba <HAL_RCCEx_PeriphCLKConfig+0x606>
340058b0:	f240 2167 	movw	r1, #615	@ 0x267
340058b4:	487e      	ldr	r0, [pc, #504]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340058b6:	f7fb fd5b 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340058ba:	4a7e      	ldr	r2, [pc, #504]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
340058bc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340058be:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340058c2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340058c4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340058c8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340058cc:	3901      	subs	r1, #1
340058ce:	4303      	orrs	r3, r0
340058d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340058d4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340058d8:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340058da:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
340058de:	4a75      	ldr	r2, [pc, #468]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
340058e0:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
340058e4:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
340058e8:	f023 0307 	bic.w	r3, r3, #7
340058ec:	430b      	orrs	r3, r1
340058ee:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
340058f2:	6823      	ldr	r3, [r4, #0]
340058f4:	071a      	lsls	r2, r3, #28
340058f6:	d528      	bpl.n	3400594a <HAL_RCCEx_PeriphCLKConfig+0x696>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
340058f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
340058fc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005900:	d004      	beq.n	3400590c <HAL_RCCEx_PeriphCLKConfig+0x658>
34005902:	f240 218e 	movw	r1, #654	@ 0x28e
34005906:	486a      	ldr	r0, [pc, #424]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005908:	f7fb fd32 	bl	34001370 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
3400590c:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
34005910:	3b01      	subs	r3, #1
34005912:	2bff      	cmp	r3, #255	@ 0xff
34005914:	d904      	bls.n	34005920 <HAL_RCCEx_PeriphCLKConfig+0x66c>
34005916:	f240 218f 	movw	r1, #655	@ 0x28f
3400591a:	4865      	ldr	r0, [pc, #404]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3400591c:	f7fb fd28 	bl	34001370 <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34005920:	4a64      	ldr	r2, [pc, #400]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005922:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
34005926:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
3400592a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
3400592e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005932:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005936:	3901      	subs	r1, #1
34005938:	4303      	orrs	r3, r0
3400593a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400593e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34005942:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34005946:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3400594a:	6823      	ldr	r3, [r4, #0]
3400594c:	06db      	lsls	r3, r3, #27
3400594e:	d542      	bpl.n	340059d6 <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
34005950:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34005954:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34005958:	d004      	beq.n	34005964 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
3400595a:	f240 219d 	movw	r1, #669	@ 0x29d
3400595e:	4854      	ldr	r0, [pc, #336]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005960:	f7fb fd06 	bl	34001370 <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34005964:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34005968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400596c:	f041 8656 	bne.w	3400761c <HAL_RCCEx_PeriphCLKConfig+0x2368>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
34005970:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34005974:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005978:	d004      	beq.n	34005984 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
3400597a:	f240 21a2 	movw	r1, #674	@ 0x2a2
3400597e:	484c      	ldr	r0, [pc, #304]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005980:	f7fb fcf6 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
34005984:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
34005988:	3b01      	subs	r3, #1
3400598a:	2bff      	cmp	r3, #255	@ 0xff
3400598c:	d904      	bls.n	34005998 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
3400598e:	f240 21a3 	movw	r1, #675	@ 0x2a3
34005992:	4847      	ldr	r0, [pc, #284]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005994:	f7fb fcec 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34005998:	4a46      	ldr	r2, [pc, #280]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
3400599a:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
3400599e:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
340059a2:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
340059a6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340059aa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340059ae:	3901      	subs	r1, #1
340059b0:	4303      	orrs	r3, r0
340059b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340059b6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
340059ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340059be:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
340059c2:	4a3c      	ldr	r2, [pc, #240]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
340059c4:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
340059c8:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
340059cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
340059d0:	430b      	orrs	r3, r1
340059d2:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
340059d6:	6823      	ldr	r3, [r4, #0]
340059d8:	069e      	lsls	r6, r3, #26
340059da:	d53e      	bpl.n	34005a5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
340059dc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
340059e0:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
340059e4:	d004      	beq.n	340059f0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
340059e6:	f240 21bd 	movw	r1, #701	@ 0x2bd
340059ea:	4831      	ldr	r0, [pc, #196]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340059ec:	f7fb fcc0 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
340059f0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
340059f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340059f8:	f041 8619 	bne.w	3400762e <HAL_RCCEx_PeriphCLKConfig+0x237a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
340059fc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
340059fe:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005a02:	d004      	beq.n	34005a0e <HAL_RCCEx_PeriphCLKConfig+0x75a>
34005a04:	f240 21c2 	movw	r1, #706	@ 0x2c2
34005a08:	4829      	ldr	r0, [pc, #164]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005a0a:	f7fb fcb1 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34005a0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34005a10:	3b01      	subs	r3, #1
34005a12:	2bff      	cmp	r3, #255	@ 0xff
34005a14:	d904      	bls.n	34005a20 <HAL_RCCEx_PeriphCLKConfig+0x76c>
34005a16:	f240 21c3 	movw	r1, #707	@ 0x2c3
34005a1a:	4825      	ldr	r0, [pc, #148]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005a1c:	f7fb fca8 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34005a20:	4a24      	ldr	r2, [pc, #144]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005a22:	6e61      	ldr	r1, [r4, #100]	@ 0x64
34005a24:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
34005a28:	6e20      	ldr	r0, [r4, #96]	@ 0x60
34005a2a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005a2e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005a32:	3901      	subs	r1, #1
34005a34:	4303      	orrs	r3, r0
34005a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34005a3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34005a42:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34005a46:	4a1b      	ldr	r2, [pc, #108]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005a48:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34005a4c:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005a50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
34005a54:	430b      	orrs	r3, r1
34005a56:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34005a5a:	6823      	ldr	r3, [r4, #0]
34005a5c:	0658      	lsls	r0, r3, #25
34005a5e:	d516      	bpl.n	34005a8e <HAL_RCCEx_PeriphCLKConfig+0x7da>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
34005a60:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
34005a64:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
34005a68:	d007      	beq.n	34005a7a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34005a6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34005a6e:	d004      	beq.n	34005a7a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34005a70:	f240 21dd 	movw	r1, #733	@ 0x2dd
34005a74:	480e      	ldr	r0, [pc, #56]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005a76:	f7fb fc7b 	bl	34001370 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34005a7a:	4a0e      	ldr	r2, [pc, #56]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005a7c:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
34005a80:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005a84:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34005a88:	430b      	orrs	r3, r1
34005a8a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34005a8e:	6823      	ldr	r3, [r4, #0]
34005a90:	0619      	lsls	r1, r3, #24
34005a92:	d518      	bpl.n	34005ac6 <HAL_RCCEx_PeriphCLKConfig+0x812>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
34005a94:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
34005a98:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
34005a9c:	d004      	beq.n	34005aa8 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
34005a9e:	f240 21e7 	movw	r1, #743	@ 0x2e7
34005aa2:	4803      	ldr	r0, [pc, #12]	@ (34005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34005aa4:	f7fb fc64 	bl	34001370 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34005aa8:	4a02      	ldr	r2, [pc, #8]	@ (34005ab4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34005aaa:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
34005aae:	e003      	b.n	34005ab8 <HAL_RCCEx_PeriphCLKConfig+0x804>
34005ab0:	34010a09 	.word	0x34010a09
34005ab4:	56028000 	.word	0x56028000
34005ab8:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005abc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34005ac0:	430b      	orrs	r3, r1
34005ac2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34005ac6:	6823      	ldr	r3, [r4, #0]
34005ac8:	05da      	lsls	r2, r3, #23
34005aca:	d513      	bpl.n	34005af4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
34005acc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
34005ad0:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34005ad4:	d004      	beq.n	34005ae0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
34005ad6:	f240 21f1 	movw	r1, #753	@ 0x2f1
34005ada:	48c1      	ldr	r0, [pc, #772]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005adc:	f7fb fc48 	bl	34001370 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34005ae0:	4ac0      	ldr	r2, [pc, #768]	@ (34005de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005ae2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
34005ae6:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34005aee:	430b      	orrs	r3, r1
34005af0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34005af4:	6823      	ldr	r3, [r4, #0]
34005af6:	059b      	lsls	r3, r3, #22
34005af8:	d54b      	bpl.n	34005b92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34005afa:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005afe:	2b03      	cmp	r3, #3
34005b00:	d904      	bls.n	34005b0c <HAL_RCCEx_PeriphCLKConfig+0x858>
34005b02:	f240 21fb 	movw	r1, #763	@ 0x2fb
34005b06:	48b6      	ldr	r0, [pc, #728]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b08:	f7fb fc32 	bl	34001370 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34005b0c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
34005b10:	3b01      	subs	r3, #1
34005b12:	2b0f      	cmp	r3, #15
34005b14:	d904      	bls.n	34005b20 <HAL_RCCEx_PeriphCLKConfig+0x86c>
34005b16:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
34005b1a:	48b1      	ldr	r0, [pc, #708]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b1c:	f7fb fc28 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34005b20:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005b24:	2b02      	cmp	r3, #2
34005b26:	f041 858b 	bne.w	34007640 <HAL_RCCEx_PeriphCLKConfig+0x238c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
34005b2a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
34005b2c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005b30:	d004      	beq.n	34005b3c <HAL_RCCEx_PeriphCLKConfig+0x888>
34005b32:	f240 3101 	movw	r1, #769	@ 0x301
34005b36:	48aa      	ldr	r0, [pc, #680]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b38:	f7fb fc1a 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
34005b3c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
34005b3e:	3b01      	subs	r3, #1
34005b40:	2bff      	cmp	r3, #255	@ 0xff
34005b42:	d904      	bls.n	34005b4e <HAL_RCCEx_PeriphCLKConfig+0x89a>
34005b44:	f240 3102 	movw	r1, #770	@ 0x302
34005b48:	48a5      	ldr	r0, [pc, #660]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005b4a:	f7fb fc11 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34005b4e:	4aa5      	ldr	r2, [pc, #660]	@ (34005de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005b50:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
34005b52:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
34005b56:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
34005b58:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005b5c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005b60:	3901      	subs	r1, #1
34005b62:	4303      	orrs	r3, r0
34005b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005b68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34005b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34005b70:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34005b74:	499b      	ldr	r1, [pc, #620]	@ (34005de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005b76:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
34005b7a:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
34005b7e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
34005b82:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
34005b86:	3a01      	subs	r2, #1
34005b88:	4303      	orrs	r3, r0
34005b8a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
34005b8e:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34005b92:	6823      	ldr	r3, [r4, #0]
34005b94:	055e      	lsls	r6, r3, #21
34005b96:	d540      	bpl.n	34005c1a <HAL_RCCEx_PeriphCLKConfig+0x966>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
34005b98:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005b9c:	2b03      	cmp	r3, #3
34005b9e:	d904      	bls.n	34005baa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
34005ba0:	f240 311d 	movw	r1, #797	@ 0x31d
34005ba4:	488e      	ldr	r0, [pc, #568]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005ba6:	f7fb fbe3 	bl	34001370 <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
34005baa:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005bae:	2b02      	cmp	r3, #2
34005bb0:	f041 854e 	bne.w	34007650 <HAL_RCCEx_PeriphCLKConfig+0x239c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34005bb4:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34005bb8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005bbc:	d004      	beq.n	34005bc8 <HAL_RCCEx_PeriphCLKConfig+0x914>
34005bbe:	f240 3122 	movw	r1, #802	@ 0x322
34005bc2:	4887      	ldr	r0, [pc, #540]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005bc4:	f7fb fbd4 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34005bc8:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34005bcc:	3b01      	subs	r3, #1
34005bce:	2bff      	cmp	r3, #255	@ 0xff
34005bd0:	d904      	bls.n	34005bdc <HAL_RCCEx_PeriphCLKConfig+0x928>
34005bd2:	f240 3123 	movw	r1, #803	@ 0x323
34005bd6:	4882      	ldr	r0, [pc, #520]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005bd8:	f7fb fbca 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34005bdc:	4a81      	ldr	r2, [pc, #516]	@ (34005de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005bde:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34005be2:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34005be6:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34005bea:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005bee:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005bf2:	3901      	subs	r1, #1
34005bf4:	4303      	orrs	r3, r0
34005bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005bfa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34005bfe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34005c02:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34005c06:	4a77      	ldr	r2, [pc, #476]	@ (34005de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005c08:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
34005c0c:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34005c10:	f023 0303 	bic.w	r3, r3, #3
34005c14:	430b      	orrs	r3, r1
34005c16:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34005c1a:	6823      	ldr	r3, [r4, #0]
34005c1c:	04d8      	lsls	r0, r3, #19
34005c1e:	d540      	bpl.n	34005ca2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34005c20:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005c24:	4a70      	ldr	r2, [pc, #448]	@ (34005de8 <HAL_RCCEx_PeriphCLKConfig+0xb34>)
34005c26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005c2a:	4291      	cmp	r1, r2
34005c2c:	d00a      	beq.n	34005c44 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005c32:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005c36:	4293      	cmp	r3, r2
34005c38:	d004      	beq.n	34005c44 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005c3a:	f240 313d 	movw	r1, #829	@ 0x33d
34005c3e:	4868      	ldr	r0, [pc, #416]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005c40:	f7fb fb96 	bl	34001370 <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34005c44:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005c48:	4a68      	ldr	r2, [pc, #416]	@ (34005dec <HAL_RCCEx_PeriphCLKConfig+0xb38>)
34005c4a:	4293      	cmp	r3, r2
34005c4c:	f041 8508 	bne.w	34007660 <HAL_RCCEx_PeriphCLKConfig+0x23ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005c50:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005c52:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005c56:	d004      	beq.n	34005c62 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
34005c58:	f240 3142 	movw	r1, #834	@ 0x342
34005c5c:	4860      	ldr	r0, [pc, #384]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005c5e:	f7fb fb87 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005c62:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005c64:	3b01      	subs	r3, #1
34005c66:	2bff      	cmp	r3, #255	@ 0xff
34005c68:	d904      	bls.n	34005c74 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
34005c6a:	f240 3143 	movw	r1, #835	@ 0x343
34005c6e:	485c      	ldr	r0, [pc, #368]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005c70:	f7fb fb7e 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005c74:	4a5b      	ldr	r2, [pc, #364]	@ (34005de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005c76:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005c78:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005c7c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005c7e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005c82:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005c86:	3901      	subs	r1, #1
34005c88:	4303      	orrs	r3, r0
34005c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005c8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005c92:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005c96:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005c9a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
34005c9e:	f7ff fa25 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34005ca2:	6823      	ldr	r3, [r4, #0]
34005ca4:	0499      	lsls	r1, r3, #18
34005ca6:	d540      	bpl.n	34005d2a <HAL_RCCEx_PeriphCLKConfig+0xa76>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
34005ca8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34005cac:	4a50      	ldr	r2, [pc, #320]	@ (34005df0 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
34005cae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005cb2:	4291      	cmp	r1, r2
34005cb4:	d00a      	beq.n	34005ccc <HAL_RCCEx_PeriphCLKConfig+0xa18>
34005cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005cba:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005cbe:	4293      	cmp	r3, r2
34005cc0:	d004      	beq.n	34005ccc <HAL_RCCEx_PeriphCLKConfig+0xa18>
34005cc2:	f240 316a 	movw	r1, #874	@ 0x36a
34005cc6:	4846      	ldr	r0, [pc, #280]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005cc8:	f7fb fb52 	bl	34001370 <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34005ccc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34005cd0:	4a48      	ldr	r2, [pc, #288]	@ (34005df4 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
34005cd2:	4293      	cmp	r3, r2
34005cd4:	f041 84f5 	bne.w	340076c2 <HAL_RCCEx_PeriphCLKConfig+0x240e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005cd8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005cda:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005cde:	d004      	beq.n	34005cea <HAL_RCCEx_PeriphCLKConfig+0xa36>
34005ce0:	f240 316f 	movw	r1, #879	@ 0x36f
34005ce4:	483e      	ldr	r0, [pc, #248]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005ce6:	f7fb fb43 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005cea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005cec:	3b01      	subs	r3, #1
34005cee:	2bff      	cmp	r3, #255	@ 0xff
34005cf0:	d904      	bls.n	34005cfc <HAL_RCCEx_PeriphCLKConfig+0xa48>
34005cf2:	f44f 715c 	mov.w	r1, #880	@ 0x370
34005cf6:	483a      	ldr	r0, [pc, #232]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005cf8:	f7fb fb3a 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005cfc:	4a39      	ldr	r2, [pc, #228]	@ (34005de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005cfe:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005d00:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005d04:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005d06:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005d0a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005d0e:	3901      	subs	r1, #1
34005d10:	4303      	orrs	r3, r0
34005d12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005d16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005d1e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005d22:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34005d26:	f7ff f9e1 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34005d2a:	6823      	ldr	r3, [r4, #0]
34005d2c:	045a      	lsls	r2, r3, #17
34005d2e:	d540      	bpl.n	34005db2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34005d30:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005d34:	4a30      	ldr	r2, [pc, #192]	@ (34005df8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
34005d36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005d3a:	4291      	cmp	r1, r2
34005d3c:	d00a      	beq.n	34005d54 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34005d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005d42:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005d46:	4293      	cmp	r3, r2
34005d48:	d004      	beq.n	34005d54 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34005d4a:	f240 3197 	movw	r1, #919	@ 0x397
34005d4e:	4824      	ldr	r0, [pc, #144]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d50:	f7fb fb0e 	bl	34001370 <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34005d54:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005d58:	4a28      	ldr	r2, [pc, #160]	@ (34005dfc <HAL_RCCEx_PeriphCLKConfig+0xb48>)
34005d5a:	4293      	cmp	r3, r2
34005d5c:	f041 84f6 	bne.w	3400774c <HAL_RCCEx_PeriphCLKConfig+0x2498>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005d60:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005d62:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005d66:	d004      	beq.n	34005d72 <HAL_RCCEx_PeriphCLKConfig+0xabe>
34005d68:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34005d6c:	481c      	ldr	r0, [pc, #112]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d6e:	f7fb faff 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005d72:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005d74:	3b01      	subs	r3, #1
34005d76:	2bff      	cmp	r3, #255	@ 0xff
34005d78:	d904      	bls.n	34005d84 <HAL_RCCEx_PeriphCLKConfig+0xad0>
34005d7a:	f240 319d 	movw	r1, #925	@ 0x39d
34005d7e:	4818      	ldr	r0, [pc, #96]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005d80:	f7fb faf6 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005d84:	4a17      	ldr	r2, [pc, #92]	@ (34005de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34005d86:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005d88:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005d8c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005d8e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005d92:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005d96:	3901      	subs	r1, #1
34005d98:	4303      	orrs	r3, r0
34005d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005d9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005da2:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005da6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005daa:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
34005dae:	f7ff f99d 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34005db2:	6823      	ldr	r3, [r4, #0]
34005db4:	041b      	lsls	r3, r3, #16
34005db6:	d554      	bpl.n	34005e62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34005db8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005dbc:	4a10      	ldr	r2, [pc, #64]	@ (34005e00 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
34005dbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005dc2:	4291      	cmp	r1, r2
34005dc4:	d01e      	beq.n	34005e04 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005dca:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005dce:	4293      	cmp	r3, r2
34005dd0:	d018      	beq.n	34005e04 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005dd2:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34005dd6:	4802      	ldr	r0, [pc, #8]	@ (34005de0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34005dd8:	f7fb faca 	bl	34001370 <assert_failed>
34005ddc:	e012      	b.n	34005e04 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34005dde:	bf00      	nop
34005de0:	34010a09 	.word	0x34010a09
34005de4:	56028000 	.word	0x56028000
34005de8:	0700000c 	.word	0x0700000c
34005dec:	0702000c 	.word	0x0702000c
34005df0:	0700040c 	.word	0x0700040c
34005df4:	0702040c 	.word	0x0702040c
34005df8:	0700080c 	.word	0x0700080c
34005dfc:	0702080c 	.word	0x0702080c
34005e00:	07000c0c 	.word	0x07000c0c
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34005e04:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005e08:	4abd      	ldr	r2, [pc, #756]	@ (34006100 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
34005e0a:	4293      	cmp	r3, r2
34005e0c:	f041 84cf 	bne.w	340077ae <HAL_RCCEx_PeriphCLKConfig+0x24fa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005e10:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005e12:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005e16:	d004      	beq.n	34005e22 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
34005e18:	f240 31c9 	movw	r1, #969	@ 0x3c9
34005e1c:	48b9      	ldr	r0, [pc, #740]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005e1e:	f7fb faa7 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005e22:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005e24:	3b01      	subs	r3, #1
34005e26:	2bff      	cmp	r3, #255	@ 0xff
34005e28:	d904      	bls.n	34005e34 <HAL_RCCEx_PeriphCLKConfig+0xb80>
34005e2a:	f240 31ca 	movw	r1, #970	@ 0x3ca
34005e2e:	48b5      	ldr	r0, [pc, #724]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005e30:	f7fb fa9e 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005e34:	4ab4      	ldr	r2, [pc, #720]	@ (34006108 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005e36:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005e38:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005e3c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005e3e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005e42:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005e46:	3901      	subs	r1, #1
34005e48:	4303      	orrs	r3, r0
34005e4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005e56:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005e5a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
34005e5e:	f7ff f945 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34005e62:	6823      	ldr	r3, [r4, #0]
34005e64:	03de      	lsls	r6, r3, #15
34005e66:	d540      	bpl.n	34005eea <HAL_RCCEx_PeriphCLKConfig+0xc36>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34005e68:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34005e6c:	4aa7      	ldr	r2, [pc, #668]	@ (3400610c <HAL_RCCEx_PeriphCLKConfig+0xe58>)
34005e6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005e72:	4291      	cmp	r1, r2
34005e74:	d00a      	beq.n	34005e8c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34005e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005e7a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005e7e:	4293      	cmp	r3, r2
34005e80:	d004      	beq.n	34005e8c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34005e82:	f240 31f1 	movw	r1, #1009	@ 0x3f1
34005e86:	489f      	ldr	r0, [pc, #636]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005e88:	f7fb fa72 	bl	34001370 <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34005e8c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34005e90:	4a9f      	ldr	r2, [pc, #636]	@ (34006110 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
34005e92:	4293      	cmp	r3, r2
34005e94:	f041 84bc 	bne.w	34007810 <HAL_RCCEx_PeriphCLKConfig+0x255c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005e98:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005e9a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005e9e:	d004      	beq.n	34005eaa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
34005ea0:	f240 31f6 	movw	r1, #1014	@ 0x3f6
34005ea4:	4897      	ldr	r0, [pc, #604]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005ea6:	f7fb fa63 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005eaa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005eac:	3b01      	subs	r3, #1
34005eae:	2bff      	cmp	r3, #255	@ 0xff
34005eb0:	d904      	bls.n	34005ebc <HAL_RCCEx_PeriphCLKConfig+0xc08>
34005eb2:	f240 31f7 	movw	r1, #1015	@ 0x3f7
34005eb6:	4893      	ldr	r0, [pc, #588]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005eb8:	f7fb fa5a 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005ebc:	4a92      	ldr	r2, [pc, #584]	@ (34006108 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005ebe:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005ec0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005ec4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005ec6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005eca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005ece:	3901      	subs	r1, #1
34005ed0:	4303      	orrs	r3, r0
34005ed2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005ede:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005ee2:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34005ee6:	f7ff f901 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34005eea:	6823      	ldr	r3, [r4, #0]
34005eec:	0398      	lsls	r0, r3, #14
34005eee:	d540      	bpl.n	34005f72 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34005ef0:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34005ef4:	4a87      	ldr	r2, [pc, #540]	@ (34006114 <HAL_RCCEx_PeriphCLKConfig+0xe60>)
34005ef6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005efa:	4291      	cmp	r1, r2
34005efc:	d00a      	beq.n	34005f14 <HAL_RCCEx_PeriphCLKConfig+0xc60>
34005efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005f02:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005f06:	4293      	cmp	r3, r2
34005f08:	d004      	beq.n	34005f14 <HAL_RCCEx_PeriphCLKConfig+0xc60>
34005f0a:	f240 411e 	movw	r1, #1054	@ 0x41e
34005f0e:	487d      	ldr	r0, [pc, #500]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005f10:	f7fb fa2e 	bl	34001370 <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34005f14:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34005f18:	4a7f      	ldr	r2, [pc, #508]	@ (34006118 <HAL_RCCEx_PeriphCLKConfig+0xe64>)
34005f1a:	4293      	cmp	r3, r2
34005f1c:	f041 84a9 	bne.w	34007872 <HAL_RCCEx_PeriphCLKConfig+0x25be>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005f20:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005f22:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005f26:	d004      	beq.n	34005f32 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
34005f28:	f240 4123 	movw	r1, #1059	@ 0x423
34005f2c:	4875      	ldr	r0, [pc, #468]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005f2e:	f7fb fa1f 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005f32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005f34:	3b01      	subs	r3, #1
34005f36:	2bff      	cmp	r3, #255	@ 0xff
34005f38:	d904      	bls.n	34005f44 <HAL_RCCEx_PeriphCLKConfig+0xc90>
34005f3a:	f240 4124 	movw	r1, #1060	@ 0x424
34005f3e:	4871      	ldr	r0, [pc, #452]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005f40:	f7fb fa16 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005f44:	4a70      	ldr	r2, [pc, #448]	@ (34006108 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005f46:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005f48:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005f4c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005f4e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005f52:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005f56:	3901      	subs	r1, #1
34005f58:	4303      	orrs	r3, r0
34005f5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005f5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005f62:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005f66:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005f6a:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
34005f6e:	f7ff f8bd 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34005f72:	6823      	ldr	r3, [r4, #0]
34005f74:	0359      	lsls	r1, r3, #13
34005f76:	d540      	bpl.n	34005ffa <HAL_RCCEx_PeriphCLKConfig+0xd46>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
34005f78:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34005f7c:	4a67      	ldr	r2, [pc, #412]	@ (3400611c <HAL_RCCEx_PeriphCLKConfig+0xe68>)
34005f7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005f82:	4291      	cmp	r1, r2
34005f84:	d00a      	beq.n	34005f9c <HAL_RCCEx_PeriphCLKConfig+0xce8>
34005f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005f8a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005f8e:	4293      	cmp	r3, r2
34005f90:	d004      	beq.n	34005f9c <HAL_RCCEx_PeriphCLKConfig+0xce8>
34005f92:	f240 414b 	movw	r1, #1099	@ 0x44b
34005f96:	485b      	ldr	r0, [pc, #364]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005f98:	f7fb f9ea 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34005f9c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34005fa0:	4a5f      	ldr	r2, [pc, #380]	@ (34006120 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
34005fa2:	4293      	cmp	r3, r2
34005fa4:	f041 8496 	bne.w	340078d4 <HAL_RCCEx_PeriphCLKConfig+0x2620>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005fa8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005faa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005fae:	d004      	beq.n	34005fba <HAL_RCCEx_PeriphCLKConfig+0xd06>
34005fb0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34005fb4:	4853      	ldr	r0, [pc, #332]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005fb6:	f7fb f9db 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005fba:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005fbc:	3b01      	subs	r3, #1
34005fbe:	2bff      	cmp	r3, #255	@ 0xff
34005fc0:	d904      	bls.n	34005fcc <HAL_RCCEx_PeriphCLKConfig+0xd18>
34005fc2:	f240 4151 	movw	r1, #1105	@ 0x451
34005fc6:	484f      	ldr	r0, [pc, #316]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34005fc8:	f7fb f9d2 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005fcc:	4a4e      	ldr	r2, [pc, #312]	@ (34006108 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34005fce:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005fd0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005fd4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005fd6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005fda:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005fde:	3901      	subs	r1, #1
34005fe0:	4303      	orrs	r3, r0
34005fe2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005fe6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005fea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005fee:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005ff2:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
34005ff6:	f7ff f879 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34005ffa:	6823      	ldr	r3, [r4, #0]
34005ffc:	031a      	lsls	r2, r3, #12
34005ffe:	d540      	bpl.n	34006082 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
34006000:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34006004:	4a47      	ldr	r2, [pc, #284]	@ (34006124 <HAL_RCCEx_PeriphCLKConfig+0xe70>)
34006006:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400600a:	4291      	cmp	r1, r2
3400600c:	d00a      	beq.n	34006024 <HAL_RCCEx_PeriphCLKConfig+0xd70>
3400600e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006012:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006016:	4293      	cmp	r3, r2
34006018:	d004      	beq.n	34006024 <HAL_RCCEx_PeriphCLKConfig+0xd70>
3400601a:	f240 416b 	movw	r1, #1131	@ 0x46b
3400601e:	4839      	ldr	r0, [pc, #228]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006020:	f7fb f9a6 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34006024:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34006028:	4a3f      	ldr	r2, [pc, #252]	@ (34006128 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
3400602a:	4293      	cmp	r3, r2
3400602c:	f041 845b 	bne.w	340078e6 <HAL_RCCEx_PeriphCLKConfig+0x2632>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006030:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006032:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006036:	d004      	beq.n	34006042 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
34006038:	f44f 618e 	mov.w	r1, #1136	@ 0x470
3400603c:	4831      	ldr	r0, [pc, #196]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3400603e:	f7fb f997 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006042:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006044:	3b01      	subs	r3, #1
34006046:	2bff      	cmp	r3, #255	@ 0xff
34006048:	d904      	bls.n	34006054 <HAL_RCCEx_PeriphCLKConfig+0xda0>
3400604a:	f240 4171 	movw	r1, #1137	@ 0x471
3400604e:	482d      	ldr	r0, [pc, #180]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34006050:	f7fb f98e 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006054:	4a2c      	ldr	r2, [pc, #176]	@ (34006108 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34006056:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006058:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400605c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400605e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006062:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006066:	3901      	subs	r1, #1
34006068:	4303      	orrs	r3, r0
3400606a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400606e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006072:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006076:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400607a:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
3400607e:	f7ff f835 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34006082:	6823      	ldr	r3, [r4, #0]
34006084:	02db      	lsls	r3, r3, #11
34006086:	d55b      	bpl.n	34006140 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
34006088:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
3400608c:	4a27      	ldr	r2, [pc, #156]	@ (3400612c <HAL_RCCEx_PeriphCLKConfig+0xe78>)
3400608e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006092:	4291      	cmp	r1, r2
34006094:	d00a      	beq.n	340060ac <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34006096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400609a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400609e:	4293      	cmp	r3, r2
340060a0:	d004      	beq.n	340060ac <HAL_RCCEx_PeriphCLKConfig+0xdf8>
340060a2:	f240 418b 	movw	r1, #1163	@ 0x48b
340060a6:	4817      	ldr	r0, [pc, #92]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340060a8:	f7fb f962 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
340060ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
340060b0:	4a1f      	ldr	r2, [pc, #124]	@ (34006130 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
340060b2:	4293      	cmp	r3, r2
340060b4:	f041 8420 	bne.w	340078f8 <HAL_RCCEx_PeriphCLKConfig+0x2644>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340060b8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340060ba:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340060be:	d004      	beq.n	340060ca <HAL_RCCEx_PeriphCLKConfig+0xe16>
340060c0:	f44f 6192 	mov.w	r1, #1168	@ 0x490
340060c4:	480f      	ldr	r0, [pc, #60]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340060c6:	f7fb f953 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340060ca:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340060cc:	3b01      	subs	r3, #1
340060ce:	2bff      	cmp	r3, #255	@ 0xff
340060d0:	d904      	bls.n	340060dc <HAL_RCCEx_PeriphCLKConfig+0xe28>
340060d2:	f240 4191 	movw	r1, #1169	@ 0x491
340060d6:	480b      	ldr	r0, [pc, #44]	@ (34006104 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340060d8:	f7fb f94a 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340060dc:	4a0a      	ldr	r2, [pc, #40]	@ (34006108 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340060de:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340060e0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340060e4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340060e6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340060ea:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340060ee:	3901      	subs	r1, #1
340060f0:	4303      	orrs	r3, r0
340060f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340060f6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340060fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340060fe:	e019      	b.n	34006134 <HAL_RCCEx_PeriphCLKConfig+0xe80>
34006100:	07020c0c 	.word	0x07020c0c
34006104:	34010a09 	.word	0x34010a09
34006108:	56028000 	.word	0x56028000
3400610c:	0700100c 	.word	0x0700100c
34006110:	0702100c 	.word	0x0702100c
34006114:	0700140c 	.word	0x0700140c
34006118:	0702140c 	.word	0x0702140c
3400611c:	0700082c 	.word	0x0700082c
34006120:	0702082c 	.word	0x0702082c
34006124:	07000c2c 	.word	0x07000c2c
34006128:	07020c2c 	.word	0x07020c2c
3400612c:	0700102c 	.word	0x0700102c
34006130:	0702102c 	.word	0x0702102c
34006134:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006138:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
3400613c:	f7fe ffd6 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34006140:	6823      	ldr	r3, [r4, #0]
34006142:	029e      	lsls	r6, r3, #10
34006144:	d540      	bpl.n	340061c8 <HAL_RCCEx_PeriphCLKConfig+0xf14>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
34006146:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
3400614a:	4ac2      	ldr	r2, [pc, #776]	@ (34006454 <HAL_RCCEx_PeriphCLKConfig+0x11a0>)
3400614c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006150:	4291      	cmp	r1, r2
34006152:	d00a      	beq.n	3400616a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34006154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006158:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400615c:	4293      	cmp	r3, r2
3400615e:	d004      	beq.n	3400616a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34006160:	f240 41ab 	movw	r1, #1195	@ 0x4ab
34006164:	48bc      	ldr	r0, [pc, #752]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006166:	f7fb f903 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3400616a:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
3400616e:	4abb      	ldr	r2, [pc, #748]	@ (3400645c <HAL_RCCEx_PeriphCLKConfig+0x11a8>)
34006170:	4293      	cmp	r3, r2
34006172:	f041 83ca 	bne.w	3400790a <HAL_RCCEx_PeriphCLKConfig+0x2656>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006176:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006178:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400617c:	d004      	beq.n	34006188 <HAL_RCCEx_PeriphCLKConfig+0xed4>
3400617e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
34006182:	48b5      	ldr	r0, [pc, #724]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006184:	f7fb f8f4 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006188:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400618a:	3b01      	subs	r3, #1
3400618c:	2bff      	cmp	r3, #255	@ 0xff
3400618e:	d904      	bls.n	3400619a <HAL_RCCEx_PeriphCLKConfig+0xee6>
34006190:	f240 41b1 	movw	r1, #1201	@ 0x4b1
34006194:	48b0      	ldr	r0, [pc, #704]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006196:	f7fb f8eb 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400619a:	4ab1      	ldr	r2, [pc, #708]	@ (34006460 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400619c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400619e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340061a2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340061a4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340061a8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340061ac:	3901      	subs	r1, #1
340061ae:	4303      	orrs	r3, r0
340061b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340061b4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340061b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340061bc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340061c0:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
340061c4:	f7fe ff92 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
340061c8:	6823      	ldr	r3, [r4, #0]
340061ca:	0258      	lsls	r0, r3, #9
340061cc:	d540      	bpl.n	34006250 <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
340061ce:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
340061d2:	4aa4      	ldr	r2, [pc, #656]	@ (34006464 <HAL_RCCEx_PeriphCLKConfig+0x11b0>)
340061d4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340061d8:	4291      	cmp	r1, r2
340061da:	d00a      	beq.n	340061f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
340061dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340061e0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340061e4:	4293      	cmp	r3, r2
340061e6:	d004      	beq.n	340061f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
340061e8:	f240 41cb 	movw	r1, #1227	@ 0x4cb
340061ec:	489a      	ldr	r0, [pc, #616]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340061ee:	f7fb f8bf 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
340061f2:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
340061f6:	4a9c      	ldr	r2, [pc, #624]	@ (34006468 <HAL_RCCEx_PeriphCLKConfig+0x11b4>)
340061f8:	4293      	cmp	r3, r2
340061fa:	f041 838f 	bne.w	3400791c <HAL_RCCEx_PeriphCLKConfig+0x2668>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340061fe:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006200:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006204:	d004      	beq.n	34006210 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
34006206:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
3400620a:	4893      	ldr	r0, [pc, #588]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400620c:	f7fb f8b0 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006210:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006212:	3b01      	subs	r3, #1
34006214:	2bff      	cmp	r3, #255	@ 0xff
34006216:	d904      	bls.n	34006222 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34006218:	f240 41d1 	movw	r1, #1233	@ 0x4d1
3400621c:	488e      	ldr	r0, [pc, #568]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400621e:	f7fb f8a7 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006222:	4a8f      	ldr	r2, [pc, #572]	@ (34006460 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006224:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006226:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400622a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400622c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006230:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006234:	3901      	subs	r1, #1
34006236:	4303      	orrs	r3, r0
34006238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400623c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006240:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006244:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006248:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
3400624c:	f7fe ff4e 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34006250:	6823      	ldr	r3, [r4, #0]
34006252:	0219      	lsls	r1, r3, #8
34006254:	d546      	bpl.n	340062e4 <HAL_RCCEx_PeriphCLKConfig+0x1030>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
34006256:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
3400625a:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
3400625e:	d00c      	beq.n	3400627a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34006260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34006264:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
34006268:	d007      	beq.n	3400627a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
3400626a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400626e:	d004      	beq.n	3400627a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34006270:	f240 41eb 	movw	r1, #1259	@ 0x4eb
34006274:	4878      	ldr	r0, [pc, #480]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006276:	f7fb f87b 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3400627a:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
3400627e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34006282:	f041 8354 	bne.w	3400792e <HAL_RCCEx_PeriphCLKConfig+0x267a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006286:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006288:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400628c:	d004      	beq.n	34006298 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
3400628e:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
34006292:	4871      	ldr	r0, [pc, #452]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006294:	f7fb f86c 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006298:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400629a:	3b01      	subs	r3, #1
3400629c:	2bff      	cmp	r3, #255	@ 0xff
3400629e:	d904      	bls.n	340062aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
340062a0:	f240 41f1 	movw	r1, #1265	@ 0x4f1
340062a4:	486c      	ldr	r0, [pc, #432]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340062a6:	f7fb f863 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340062aa:	4a6d      	ldr	r2, [pc, #436]	@ (34006460 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340062ac:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340062ae:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340062b2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340062b4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340062b8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340062bc:	3901      	subs	r1, #1
340062be:	4303      	orrs	r3, r0
340062c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340062c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340062c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340062cc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
340062d0:	4a63      	ldr	r2, [pc, #396]	@ (34006460 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340062d2:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
340062d6:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
340062da:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
340062de:	430b      	orrs	r3, r1
340062e0:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
340062e4:	6823      	ldr	r3, [r4, #0]
340062e6:	01da      	lsls	r2, r3, #7
340062e8:	d542      	bpl.n	34006370 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
340062ea:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
340062ee:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
340062f2:	d004      	beq.n	340062fe <HAL_RCCEx_PeriphCLKConfig+0x104a>
340062f4:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
340062f8:	4857      	ldr	r0, [pc, #348]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340062fa:	f7fb f839 	bl	34001370 <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
340062fe:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
34006302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34006306:	f041 8343 	bne.w	34007990 <HAL_RCCEx_PeriphCLKConfig+0x26dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
3400630a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
3400630e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006312:	d004      	beq.n	3400631e <HAL_RCCEx_PeriphCLKConfig+0x106a>
34006314:	f240 511d 	movw	r1, #1309	@ 0x51d
34006318:	484f      	ldr	r0, [pc, #316]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400631a:	f7fb f829 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3400631e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
34006322:	3b01      	subs	r3, #1
34006324:	2bff      	cmp	r3, #255	@ 0xff
34006326:	d904      	bls.n	34006332 <HAL_RCCEx_PeriphCLKConfig+0x107e>
34006328:	f240 511e 	movw	r1, #1310	@ 0x51e
3400632c:	484a      	ldr	r0, [pc, #296]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400632e:	f7fb f81f 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34006332:	4a4b      	ldr	r2, [pc, #300]	@ (34006460 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006334:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
34006338:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
3400633c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
34006340:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006344:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006348:	3901      	subs	r1, #1
3400634a:	4303      	orrs	r3, r0
3400634c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006350:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34006354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34006358:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
3400635c:	4a40      	ldr	r2, [pc, #256]	@ (34006460 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3400635e:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
34006362:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
34006366:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
3400636a:	430b      	orrs	r3, r1
3400636c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34006370:	6823      	ldr	r3, [r4, #0]
34006372:	019b      	lsls	r3, r3, #6
34006374:	d540      	bpl.n	340063f8 <HAL_RCCEx_PeriphCLKConfig+0x1144>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
34006376:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
3400637a:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3400637e:	d007      	beq.n	34006390 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
34006380:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34006384:	d004      	beq.n	34006390 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
34006386:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3400638a:	4833      	ldr	r0, [pc, #204]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400638c:	f7fa fff0 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34006390:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
34006394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34006398:	f041 8303 	bne.w	340079a2 <HAL_RCCEx_PeriphCLKConfig+0x26ee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400639c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400639e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340063a2:	d004      	beq.n	340063ae <HAL_RCCEx_PeriphCLKConfig+0x10fa>
340063a4:	f240 513d 	movw	r1, #1341	@ 0x53d
340063a8:	482b      	ldr	r0, [pc, #172]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340063aa:	f7fa ffe1 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340063ae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340063b0:	3b01      	subs	r3, #1
340063b2:	2bff      	cmp	r3, #255	@ 0xff
340063b4:	d904      	bls.n	340063c0 <HAL_RCCEx_PeriphCLKConfig+0x110c>
340063b6:	f240 513e 	movw	r1, #1342	@ 0x53e
340063ba:	4827      	ldr	r0, [pc, #156]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340063bc:	f7fa ffd8 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340063c0:	4a27      	ldr	r2, [pc, #156]	@ (34006460 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340063c2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340063c4:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340063c8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340063ca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340063ce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340063d2:	3901      	subs	r1, #1
340063d4:	4303      	orrs	r3, r0
340063d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340063da:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340063de:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340063e0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
340063e4:	4a1e      	ldr	r2, [pc, #120]	@ (34006460 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340063e6:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
340063ea:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
340063ee:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
340063f2:	430b      	orrs	r3, r1
340063f4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
340063f8:	6823      	ldr	r3, [r4, #0]
340063fa:	015e      	lsls	r6, r3, #5
340063fc:	d54e      	bpl.n	3400649c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
340063fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
34006402:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34006406:	d004      	beq.n	34006412 <HAL_RCCEx_PeriphCLKConfig+0x115e>
34006408:	f240 5165 	movw	r1, #1381	@ 0x565
3400640c:	4812      	ldr	r0, [pc, #72]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400640e:	f7fa ffaf 	bl	34001370 <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
34006412:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
34006416:	2b20      	cmp	r3, #32
34006418:	f041 82f3 	bne.w	34007a02 <HAL_RCCEx_PeriphCLKConfig+0x274e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400641c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34006420:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006424:	d004      	beq.n	34006430 <HAL_RCCEx_PeriphCLKConfig+0x117c>
34006426:	f240 516a 	movw	r1, #1386	@ 0x56a
3400642a:	480b      	ldr	r0, [pc, #44]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3400642c:	f7fa ffa0 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34006430:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34006434:	3b01      	subs	r3, #1
34006436:	2bff      	cmp	r3, #255	@ 0xff
34006438:	d904      	bls.n	34006444 <HAL_RCCEx_PeriphCLKConfig+0x1190>
3400643a:	f240 516b 	movw	r1, #1387	@ 0x56b
3400643e:	4806      	ldr	r0, [pc, #24]	@ (34006458 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34006440:	f7fa ff96 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34006444:	4a06      	ldr	r2, [pc, #24]	@ (34006460 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34006446:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
3400644a:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
3400644e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34006452:	e00b      	b.n	3400646c <HAL_RCCEx_PeriphCLKConfig+0x11b8>
34006454:	0700142c 	.word	0x0700142c
34006458:	34010a09 	.word	0x34010a09
3400645c:	0702142c 	.word	0x0702142c
34006460:	56028000 	.word	0x56028000
34006464:	0700182c 	.word	0x0700182c
34006468:	0702182c 	.word	0x0702182c
3400646c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006470:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006474:	3901      	subs	r1, #1
34006476:	4303      	orrs	r3, r0
34006478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400647c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34006480:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34006484:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34006488:	4abc      	ldr	r2, [pc, #752]	@ (3400677c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3400648a:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
3400648e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34006492:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
34006496:	430b      	orrs	r3, r1
34006498:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3400649c:	6823      	ldr	r3, [r4, #0]
3400649e:	00d8      	lsls	r0, r3, #3
340064a0:	d53d      	bpl.n	3400651e <HAL_RCCEx_PeriphCLKConfig+0x126a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
340064a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340064a6:	4ab6      	ldr	r2, [pc, #728]	@ (34006780 <HAL_RCCEx_PeriphCLKConfig+0x14cc>)
340064a8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340064ac:	4293      	cmp	r3, r2
340064ae:	d008      	beq.n	340064c2 <HAL_RCCEx_PeriphCLKConfig+0x120e>
340064b0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340064b4:	4293      	cmp	r3, r2
340064b6:	d004      	beq.n	340064c2 <HAL_RCCEx_PeriphCLKConfig+0x120e>
340064b8:	f240 5185 	movw	r1, #1413	@ 0x585
340064bc:	48b1      	ldr	r0, [pc, #708]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340064be:	f7fa ff57 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
340064c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340064c6:	4ab0      	ldr	r2, [pc, #704]	@ (34006788 <HAL_RCCEx_PeriphCLKConfig+0x14d4>)
340064c8:	4293      	cmp	r3, r2
340064ca:	f041 82c1 	bne.w	34007a50 <HAL_RCCEx_PeriphCLKConfig+0x279c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340064ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340064d0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340064d4:	d004      	beq.n	340064e0 <HAL_RCCEx_PeriphCLKConfig+0x122c>
340064d6:	f240 518a 	movw	r1, #1418	@ 0x58a
340064da:	48aa      	ldr	r0, [pc, #680]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340064dc:	f7fa ff48 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340064e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340064e2:	3b01      	subs	r3, #1
340064e4:	2bff      	cmp	r3, #255	@ 0xff
340064e6:	d904      	bls.n	340064f2 <HAL_RCCEx_PeriphCLKConfig+0x123e>
340064e8:	f240 518b 	movw	r1, #1419	@ 0x58b
340064ec:	48a5      	ldr	r0, [pc, #660]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340064ee:	f7fa ff3f 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340064f2:	4aa2      	ldr	r2, [pc, #648]	@ (3400677c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340064f4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340064f6:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340064fa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340064fc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006500:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006504:	3901      	subs	r1, #1
34006506:	4303      	orrs	r3, r0
34006508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400650c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006510:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006512:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006516:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
3400651a:	f7fe fde7 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3400651e:	6823      	ldr	r3, [r4, #0]
34006520:	0099      	lsls	r1, r3, #2
34006522:	d53d      	bpl.n	340065a0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
34006524:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34006528:	4a98      	ldr	r2, [pc, #608]	@ (3400678c <HAL_RCCEx_PeriphCLKConfig+0x14d8>)
3400652a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400652e:	4293      	cmp	r3, r2
34006530:	d008      	beq.n	34006544 <HAL_RCCEx_PeriphCLKConfig+0x1290>
34006532:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006536:	4293      	cmp	r3, r2
34006538:	d004      	beq.n	34006544 <HAL_RCCEx_PeriphCLKConfig+0x1290>
3400653a:	f240 51b2 	movw	r1, #1458	@ 0x5b2
3400653e:	4891      	ldr	r0, [pc, #580]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006540:	f7fa ff16 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
34006544:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34006548:	4a91      	ldr	r2, [pc, #580]	@ (34006790 <HAL_RCCEx_PeriphCLKConfig+0x14dc>)
3400654a:	4293      	cmp	r3, r2
3400654c:	f041 82b0 	bne.w	34007ab0 <HAL_RCCEx_PeriphCLKConfig+0x27fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34006550:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006552:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006556:	d004      	beq.n	34006562 <HAL_RCCEx_PeriphCLKConfig+0x12ae>
34006558:	f240 51b7 	movw	r1, #1463	@ 0x5b7
3400655c:	4889      	ldr	r0, [pc, #548]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400655e:	f7fa ff07 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006562:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006564:	3b01      	subs	r3, #1
34006566:	2bff      	cmp	r3, #255	@ 0xff
34006568:	d904      	bls.n	34006574 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
3400656a:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
3400656e:	4885      	ldr	r0, [pc, #532]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006570:	f7fa fefe 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006574:	4a81      	ldr	r2, [pc, #516]	@ (3400677c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006576:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006578:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400657c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400657e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006582:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006586:	3901      	subs	r1, #1
34006588:	4303      	orrs	r3, r0
3400658a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400658e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006592:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006594:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006598:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
3400659c:	f7fe fda6 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
340065a0:	6863      	ldr	r3, [r4, #4]
340065a2:	07da      	lsls	r2, r3, #31
340065a4:	d53b      	bpl.n	3400661e <HAL_RCCEx_PeriphCLKConfig+0x136a>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
340065a6:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
340065aa:	2b06      	cmp	r3, #6
340065ac:	d904      	bls.n	340065b8 <HAL_RCCEx_PeriphCLKConfig+0x1304>
340065ae:	f240 51df 	movw	r1, #1503	@ 0x5df
340065b2:	4874      	ldr	r0, [pc, #464]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340065b4:	f7fa fedc 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
340065b8:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
340065bc:	2b02      	cmp	r3, #2
340065be:	f041 82a7 	bne.w	34007b10 <HAL_RCCEx_PeriphCLKConfig+0x285c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340065c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340065c4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340065c8:	d004      	beq.n	340065d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
340065ca:	f240 51e4 	movw	r1, #1508	@ 0x5e4
340065ce:	486d      	ldr	r0, [pc, #436]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340065d0:	f7fa fece 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340065d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340065d6:	3b01      	subs	r3, #1
340065d8:	2bff      	cmp	r3, #255	@ 0xff
340065da:	d904      	bls.n	340065e6 <HAL_RCCEx_PeriphCLKConfig+0x1332>
340065dc:	f240 51e5 	movw	r1, #1509	@ 0x5e5
340065e0:	4868      	ldr	r0, [pc, #416]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340065e2:	f7fa fec5 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340065e6:	4a65      	ldr	r2, [pc, #404]	@ (3400677c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340065e8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340065ea:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340065ee:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340065f0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340065f4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340065f8:	3901      	subs	r1, #1
340065fa:	4303      	orrs	r3, r0
340065fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006600:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006604:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006606:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
3400660a:	4a5c      	ldr	r2, [pc, #368]	@ (3400677c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3400660c:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
34006610:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
34006614:	f023 0307 	bic.w	r3, r3, #7
34006618:	430b      	orrs	r3, r1
3400661a:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3400661e:	6863      	ldr	r3, [r4, #4]
34006620:	079b      	lsls	r3, r3, #30
34006622:	d543      	bpl.n	340066ac <HAL_RCCEx_PeriphCLKConfig+0x13f8>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
34006624:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34006628:	4a5a      	ldr	r2, [pc, #360]	@ (34006794 <HAL_RCCEx_PeriphCLKConfig+0x14e0>)
3400662a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400662e:	4291      	cmp	r1, r2
34006630:	d00e      	beq.n	34006650 <HAL_RCCEx_PeriphCLKConfig+0x139c>
34006632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006636:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400663a:	4291      	cmp	r1, r2
3400663c:	d008      	beq.n	34006650 <HAL_RCCEx_PeriphCLKConfig+0x139c>
3400663e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006642:	4293      	cmp	r3, r2
34006644:	d004      	beq.n	34006650 <HAL_RCCEx_PeriphCLKConfig+0x139c>
34006646:	f240 610c 	movw	r1, #1548	@ 0x60c
3400664a:	484e      	ldr	r0, [pc, #312]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400664c:	f7fa fe90 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34006650:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34006654:	4a50      	ldr	r2, [pc, #320]	@ (34006798 <HAL_RCCEx_PeriphCLKConfig+0x14e4>)
34006656:	4293      	cmp	r3, r2
34006658:	f041 8288 	bne.w	34007b6c <HAL_RCCEx_PeriphCLKConfig+0x28b8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400665c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400665e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006662:	d004      	beq.n	3400666e <HAL_RCCEx_PeriphCLKConfig+0x13ba>
34006664:	f240 6111 	movw	r1, #1553	@ 0x611
34006668:	4846      	ldr	r0, [pc, #280]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400666a:	f7fa fe81 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400666e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006670:	3b01      	subs	r3, #1
34006672:	2bff      	cmp	r3, #255	@ 0xff
34006674:	d904      	bls.n	34006680 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
34006676:	f240 6112 	movw	r1, #1554	@ 0x612
3400667a:	4842      	ldr	r0, [pc, #264]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400667c:	f7fa fe78 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006680:	4a3e      	ldr	r2, [pc, #248]	@ (3400677c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006682:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006684:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006688:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400668a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400668e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006692:	3901      	subs	r1, #1
34006694:	4303      	orrs	r3, r0
34006696:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400669a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400669e:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340066a0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340066a4:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
340066a8:	f7fe fd20 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
340066ac:	6863      	ldr	r3, [r4, #4]
340066ae:	075e      	lsls	r6, r3, #29
340066b0:	d543      	bpl.n	3400673a <HAL_RCCEx_PeriphCLKConfig+0x1486>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
340066b2:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
340066b6:	4a39      	ldr	r2, [pc, #228]	@ (3400679c <HAL_RCCEx_PeriphCLKConfig+0x14e8>)
340066b8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340066bc:	4291      	cmp	r1, r2
340066be:	d00e      	beq.n	340066de <HAL_RCCEx_PeriphCLKConfig+0x142a>
340066c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340066c4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340066c8:	4291      	cmp	r1, r2
340066ca:	d008      	beq.n	340066de <HAL_RCCEx_PeriphCLKConfig+0x142a>
340066cc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340066d0:	4293      	cmp	r3, r2
340066d2:	d004      	beq.n	340066de <HAL_RCCEx_PeriphCLKConfig+0x142a>
340066d4:	f240 6139 	movw	r1, #1593	@ 0x639
340066d8:	482a      	ldr	r0, [pc, #168]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340066da:	f7fa fe49 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
340066de:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
340066e2:	4a2f      	ldr	r2, [pc, #188]	@ (340067a0 <HAL_RCCEx_PeriphCLKConfig+0x14ec>)
340066e4:	4293      	cmp	r3, r2
340066e6:	f041 8272 	bne.w	34007bce <HAL_RCCEx_PeriphCLKConfig+0x291a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340066ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340066ec:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340066f0:	d004      	beq.n	340066fc <HAL_RCCEx_PeriphCLKConfig+0x1448>
340066f2:	f240 613e 	movw	r1, #1598	@ 0x63e
340066f6:	4823      	ldr	r0, [pc, #140]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340066f8:	f7fa fe3a 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340066fc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340066fe:	3b01      	subs	r3, #1
34006700:	2bff      	cmp	r3, #255	@ 0xff
34006702:	d904      	bls.n	3400670e <HAL_RCCEx_PeriphCLKConfig+0x145a>
34006704:	f240 613f 	movw	r1, #1599	@ 0x63f
34006708:	481e      	ldr	r0, [pc, #120]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3400670a:	f7fa fe31 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400670e:	4a1b      	ldr	r2, [pc, #108]	@ (3400677c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34006710:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006712:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006716:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006718:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400671c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006720:	3901      	subs	r1, #1
34006722:	4303      	orrs	r3, r0
34006724:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400672c:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400672e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006732:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
34006736:	f7fe fcd9 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3400673a:	6863      	ldr	r3, [r4, #4]
3400673c:	0718      	lsls	r0, r3, #28
3400673e:	d55d      	bpl.n	340067fc <HAL_RCCEx_PeriphCLKConfig+0x1548>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
34006740:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34006744:	4a17      	ldr	r2, [pc, #92]	@ (340067a4 <HAL_RCCEx_PeriphCLKConfig+0x14f0>)
34006746:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400674a:	4291      	cmp	r1, r2
3400674c:	d00e      	beq.n	3400676c <HAL_RCCEx_PeriphCLKConfig+0x14b8>
3400674e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006752:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006756:	4291      	cmp	r1, r2
34006758:	d008      	beq.n	3400676c <HAL_RCCEx_PeriphCLKConfig+0x14b8>
3400675a:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400675e:	4293      	cmp	r3, r2
34006760:	d004      	beq.n	3400676c <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34006762:	f240 6166 	movw	r1, #1638	@ 0x666
34006766:	4807      	ldr	r0, [pc, #28]	@ (34006784 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34006768:	f7fa fe02 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3400676c:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34006770:	4a0d      	ldr	r2, [pc, #52]	@ (340067a8 <HAL_RCCEx_PeriphCLKConfig+0x14f4>)
34006772:	4293      	cmp	r3, r2
34006774:	f041 825c 	bne.w	34007c30 <HAL_RCCEx_PeriphCLKConfig+0x297c>
34006778:	e018      	b.n	340067ac <HAL_RCCEx_PeriphCLKConfig+0x14f8>
3400677a:	bf00      	nop
3400677c:	56028000 	.word	0x56028000
34006780:	07001418 	.word	0x07001418
34006784:	34010a09 	.word	0x34010a09
34006788:	07021418 	.word	0x07021418
3400678c:	07001818 	.word	0x07001818
34006790:	07021818 	.word	0x07021818
34006794:	07000420 	.word	0x07000420
34006798:	07020420 	.word	0x07020420
3400679c:	07000820 	.word	0x07000820
340067a0:	07020820 	.word	0x07020820
340067a4:	07000c20 	.word	0x07000c20
340067a8:	07020c20 	.word	0x07020c20
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340067ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340067ae:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340067b2:	d004      	beq.n	340067be <HAL_RCCEx_PeriphCLKConfig+0x150a>
340067b4:	f240 616b 	movw	r1, #1643	@ 0x66b
340067b8:	48bb      	ldr	r0, [pc, #748]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340067ba:	f7fa fdd9 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340067be:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340067c0:	3b01      	subs	r3, #1
340067c2:	2bff      	cmp	r3, #255	@ 0xff
340067c4:	d904      	bls.n	340067d0 <HAL_RCCEx_PeriphCLKConfig+0x151c>
340067c6:	f240 616c 	movw	r1, #1644	@ 0x66c
340067ca:	48b7      	ldr	r0, [pc, #732]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340067cc:	f7fa fdd0 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340067d0:	4ab6      	ldr	r2, [pc, #728]	@ (34006aac <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
340067d2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340067d4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340067d8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340067da:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340067de:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340067e2:	3901      	subs	r1, #1
340067e4:	4303      	orrs	r3, r0
340067e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340067ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340067ee:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340067f0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340067f4:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
340067f8:	f7fe fc78 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
340067fc:	6863      	ldr	r3, [r4, #4]
340067fe:	06d9      	lsls	r1, r3, #27
34006800:	d544      	bpl.n	3400688c <HAL_RCCEx_PeriphCLKConfig+0x15d8>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
34006802:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34006806:	4aaa      	ldr	r2, [pc, #680]	@ (34006ab0 <HAL_RCCEx_PeriphCLKConfig+0x17fc>)
34006808:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400680c:	4291      	cmp	r1, r2
3400680e:	d00e      	beq.n	3400682e <HAL_RCCEx_PeriphCLKConfig+0x157a>
34006810:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006814:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006818:	4291      	cmp	r1, r2
3400681a:	d008      	beq.n	3400682e <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400681c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006820:	4293      	cmp	r3, r2
34006822:	d004      	beq.n	3400682e <HAL_RCCEx_PeriphCLKConfig+0x157a>
34006824:	f240 6193 	movw	r1, #1683	@ 0x693
34006828:	489f      	ldr	r0, [pc, #636]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3400682a:	f7fa fda1 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3400682e:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34006832:	4aa0      	ldr	r2, [pc, #640]	@ (34006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1800>)
34006834:	4293      	cmp	r3, r2
34006836:	f041 822c 	bne.w	34007c92 <HAL_RCCEx_PeriphCLKConfig+0x29de>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400683a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400683c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006840:	d004      	beq.n	3400684c <HAL_RCCEx_PeriphCLKConfig+0x1598>
34006842:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
34006846:	4898      	ldr	r0, [pc, #608]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006848:	f7fa fd92 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400684c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400684e:	3b01      	subs	r3, #1
34006850:	2bff      	cmp	r3, #255	@ 0xff
34006852:	d904      	bls.n	3400685e <HAL_RCCEx_PeriphCLKConfig+0x15aa>
34006854:	f240 6199 	movw	r1, #1689	@ 0x699
34006858:	4893      	ldr	r0, [pc, #588]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3400685a:	f7fa fd89 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400685e:	4a93      	ldr	r2, [pc, #588]	@ (34006aac <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006860:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006862:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006866:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006868:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400686c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006870:	3901      	subs	r1, #1
34006872:	4303      	orrs	r3, r0
34006874:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006878:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400687c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006880:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006884:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
34006888:	f7fe fc30 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3400688c:	6863      	ldr	r3, [r4, #4]
3400688e:	069a      	lsls	r2, r3, #26
34006890:	d544      	bpl.n	3400691c <HAL_RCCEx_PeriphCLKConfig+0x1668>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
34006892:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34006896:	4a88      	ldr	r2, [pc, #544]	@ (34006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1804>)
34006898:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400689c:	4291      	cmp	r1, r2
3400689e:	d00e      	beq.n	340068be <HAL_RCCEx_PeriphCLKConfig+0x160a>
340068a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340068a4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340068a8:	4291      	cmp	r1, r2
340068aa:	d008      	beq.n	340068be <HAL_RCCEx_PeriphCLKConfig+0x160a>
340068ac:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340068b0:	4293      	cmp	r3, r2
340068b2:	d004      	beq.n	340068be <HAL_RCCEx_PeriphCLKConfig+0x160a>
340068b4:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
340068b8:	487b      	ldr	r0, [pc, #492]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340068ba:	f7fa fd59 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
340068be:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
340068c2:	4a7e      	ldr	r2, [pc, #504]	@ (34006abc <HAL_RCCEx_PeriphCLKConfig+0x1808>)
340068c4:	4293      	cmp	r3, r2
340068c6:	f041 8231 	bne.w	34007d2c <HAL_RCCEx_PeriphCLKConfig+0x2a78>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340068ca:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340068cc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340068d0:	d004      	beq.n	340068dc <HAL_RCCEx_PeriphCLKConfig+0x1628>
340068d2:	f240 61c5 	movw	r1, #1733	@ 0x6c5
340068d6:	4874      	ldr	r0, [pc, #464]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340068d8:	f7fa fd4a 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340068dc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340068de:	3b01      	subs	r3, #1
340068e0:	2bff      	cmp	r3, #255	@ 0xff
340068e2:	d904      	bls.n	340068ee <HAL_RCCEx_PeriphCLKConfig+0x163a>
340068e4:	f240 61c6 	movw	r1, #1734	@ 0x6c6
340068e8:	486f      	ldr	r0, [pc, #444]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340068ea:	f7fa fd41 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340068ee:	4a6f      	ldr	r2, [pc, #444]	@ (34006aac <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
340068f0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340068f2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340068f6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340068f8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340068fc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006900:	3901      	subs	r1, #1
34006902:	4303      	orrs	r3, r0
34006904:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006908:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400690c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006910:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006914:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34006918:	f7fe fbe8 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
3400691c:	6863      	ldr	r3, [r4, #4]
3400691e:	065b      	lsls	r3, r3, #25
34006920:	d543      	bpl.n	340069aa <HAL_RCCEx_PeriphCLKConfig+0x16f6>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
34006922:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34006926:	4a66      	ldr	r2, [pc, #408]	@ (34006ac0 <HAL_RCCEx_PeriphCLKConfig+0x180c>)
34006928:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400692c:	4291      	cmp	r1, r2
3400692e:	d00e      	beq.n	3400694e <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006930:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006934:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006938:	4291      	cmp	r1, r2
3400693a:	d008      	beq.n	3400694e <HAL_RCCEx_PeriphCLKConfig+0x169a>
3400693c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006940:	4293      	cmp	r3, r2
34006942:	d004      	beq.n	3400694e <HAL_RCCEx_PeriphCLKConfig+0x169a>
34006944:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34006948:	4857      	ldr	r0, [pc, #348]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3400694a:	f7fa fd11 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3400694e:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34006952:	4a5c      	ldr	r2, [pc, #368]	@ (34006ac4 <HAL_RCCEx_PeriphCLKConfig+0x1810>)
34006954:	4293      	cmp	r3, r2
34006956:	f041 821a 	bne.w	34007d8e <HAL_RCCEx_PeriphCLKConfig+0x2ada>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400695a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400695c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006960:	d004      	beq.n	3400696c <HAL_RCCEx_PeriphCLKConfig+0x16b8>
34006962:	f240 61f2 	movw	r1, #1778	@ 0x6f2
34006966:	4850      	ldr	r0, [pc, #320]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006968:	f7fa fd02 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400696c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400696e:	3b01      	subs	r3, #1
34006970:	2bff      	cmp	r3, #255	@ 0xff
34006972:	d904      	bls.n	3400697e <HAL_RCCEx_PeriphCLKConfig+0x16ca>
34006974:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34006978:	484b      	ldr	r0, [pc, #300]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3400697a:	f7fa fcf9 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400697e:	4a4b      	ldr	r2, [pc, #300]	@ (34006aac <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006980:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006982:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006986:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006988:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400698c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006990:	3901      	subs	r1, #1
34006992:	4303      	orrs	r3, r0
34006994:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400699c:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400699e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340069a2:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
340069a6:	f7fe fba1 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
340069aa:	6863      	ldr	r3, [r4, #4]
340069ac:	05de      	lsls	r6, r3, #23
340069ae:	d544      	bpl.n	34006a3a <HAL_RCCEx_PeriphCLKConfig+0x1786>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
340069b0:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
340069b4:	4a44      	ldr	r2, [pc, #272]	@ (34006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1814>)
340069b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340069ba:	4291      	cmp	r1, r2
340069bc:	d00e      	beq.n	340069dc <HAL_RCCEx_PeriphCLKConfig+0x1728>
340069be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340069c2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340069c6:	4291      	cmp	r1, r2
340069c8:	d008      	beq.n	340069dc <HAL_RCCEx_PeriphCLKConfig+0x1728>
340069ca:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340069ce:	4293      	cmp	r3, r2
340069d0:	d004      	beq.n	340069dc <HAL_RCCEx_PeriphCLKConfig+0x1728>
340069d2:	f240 711a 	movw	r1, #1818	@ 0x71a
340069d6:	4834      	ldr	r0, [pc, #208]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340069d8:	f7fa fcca 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
340069dc:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
340069e0:	4a3a      	ldr	r2, [pc, #232]	@ (34006acc <HAL_RCCEx_PeriphCLKConfig+0x1818>)
340069e2:	4293      	cmp	r3, r2
340069e4:	f041 8204 	bne.w	34007df0 <HAL_RCCEx_PeriphCLKConfig+0x2b3c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340069e8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340069ea:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340069ee:	d004      	beq.n	340069fa <HAL_RCCEx_PeriphCLKConfig+0x1746>
340069f0:	f240 711f 	movw	r1, #1823	@ 0x71f
340069f4:	482c      	ldr	r0, [pc, #176]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340069f6:	f7fa fcbb 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340069fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340069fc:	3b01      	subs	r3, #1
340069fe:	2bff      	cmp	r3, #255	@ 0xff
34006a00:	d904      	bls.n	34006a0c <HAL_RCCEx_PeriphCLKConfig+0x1758>
34006a02:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
34006a06:	4828      	ldr	r0, [pc, #160]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a08:	f7fa fcb2 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006a0c:	4a27      	ldr	r2, [pc, #156]	@ (34006aac <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006a0e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006a10:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006a14:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006a16:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006a1a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006a1e:	3901      	subs	r1, #1
34006a20:	4303      	orrs	r3, r0
34006a22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006a26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006a2e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006a32:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
34006a36:	f7fe fb59 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34006a3a:	6863      	ldr	r3, [r4, #4]
34006a3c:	0598      	lsls	r0, r3, #22
34006a3e:	d55d      	bpl.n	34006afc <HAL_RCCEx_PeriphCLKConfig+0x1848>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34006a40:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34006a44:	4a22      	ldr	r2, [pc, #136]	@ (34006ad0 <HAL_RCCEx_PeriphCLKConfig+0x181c>)
34006a46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006a4a:	4291      	cmp	r1, r2
34006a4c:	d00e      	beq.n	34006a6c <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006a4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006a52:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006a56:	4291      	cmp	r1, r2
34006a58:	d008      	beq.n	34006a6c <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006a5a:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006a5e:	4293      	cmp	r3, r2
34006a60:	d004      	beq.n	34006a6c <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34006a62:	f240 7147 	movw	r1, #1863	@ 0x747
34006a66:	4810      	ldr	r0, [pc, #64]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a68:	f7fa fc82 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34006a6c:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34006a70:	4a18      	ldr	r2, [pc, #96]	@ (34006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1820>)
34006a72:	4293      	cmp	r3, r2
34006a74:	f041 81ed 	bne.w	34007e52 <HAL_RCCEx_PeriphCLKConfig+0x2b9e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006a78:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006a7a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006a7e:	d004      	beq.n	34006a8a <HAL_RCCEx_PeriphCLKConfig+0x17d6>
34006a80:	f240 714c 	movw	r1, #1868	@ 0x74c
34006a84:	4808      	ldr	r0, [pc, #32]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a86:	f7fa fc73 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006a8a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006a8c:	3b01      	subs	r3, #1
34006a8e:	2bff      	cmp	r3, #255	@ 0xff
34006a90:	d904      	bls.n	34006a9c <HAL_RCCEx_PeriphCLKConfig+0x17e8>
34006a92:	f240 714d 	movw	r1, #1869	@ 0x74d
34006a96:	4804      	ldr	r0, [pc, #16]	@ (34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34006a98:	f7fa fc6a 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006a9c:	4a03      	ldr	r2, [pc, #12]	@ (34006aac <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34006a9e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006aa0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006aa4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006aa6:	e017      	b.n	34006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1824>
34006aa8:	34010a09 	.word	0x34010a09
34006aac:	56028000 	.word	0x56028000
34006ab0:	07001020 	.word	0x07001020
34006ab4:	07021020 	.word	0x07021020
34006ab8:	07001420 	.word	0x07001420
34006abc:	07021420 	.word	0x07021420
34006ac0:	07001820 	.word	0x07001820
34006ac4:	07021820 	.word	0x07021820
34006ac8:	07000030 	.word	0x07000030
34006acc:	07020030 	.word	0x07020030
34006ad0:	07000430 	.word	0x07000430
34006ad4:	07020430 	.word	0x07020430
34006ad8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006adc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006ae0:	3901      	subs	r1, #1
34006ae2:	4303      	orrs	r3, r0
34006ae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006ae8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006af0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006af4:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
34006af8:	f7fe faf8 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34006afc:	6863      	ldr	r3, [r4, #4]
34006afe:	0559      	lsls	r1, r3, #21
34006b00:	d544      	bpl.n	34006b8c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
34006b02:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006b06:	4abc      	ldr	r2, [pc, #752]	@ (34006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>)
34006b08:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006b0c:	4291      	cmp	r1, r2
34006b0e:	d00e      	beq.n	34006b2e <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006b10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006b14:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006b18:	4291      	cmp	r1, r2
34006b1a:	d008      	beq.n	34006b2e <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006b1c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006b20:	4293      	cmp	r3, r2
34006b22:	d004      	beq.n	34006b2e <HAL_RCCEx_PeriphCLKConfig+0x187a>
34006b24:	f240 7174 	movw	r1, #1908	@ 0x774
34006b28:	48b4      	ldr	r0, [pc, #720]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006b2a:	f7fa fc21 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34006b2e:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006b32:	4ab3      	ldr	r2, [pc, #716]	@ (34006e00 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>)
34006b34:	4293      	cmp	r3, r2
34006b36:	f041 81bd 	bne.w	34007eb4 <HAL_RCCEx_PeriphCLKConfig+0x2c00>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006b3a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006b3c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006b40:	d004      	beq.n	34006b4c <HAL_RCCEx_PeriphCLKConfig+0x1898>
34006b42:	f240 7179 	movw	r1, #1913	@ 0x779
34006b46:	48ad      	ldr	r0, [pc, #692]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006b48:	f7fa fc12 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006b4c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006b4e:	3b01      	subs	r3, #1
34006b50:	2bff      	cmp	r3, #255	@ 0xff
34006b52:	d904      	bls.n	34006b5e <HAL_RCCEx_PeriphCLKConfig+0x18aa>
34006b54:	f240 717a 	movw	r1, #1914	@ 0x77a
34006b58:	48a8      	ldr	r0, [pc, #672]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006b5a:	f7fa fc09 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006b5e:	4aa9      	ldr	r2, [pc, #676]	@ (34006e04 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006b60:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006b62:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006b66:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006b68:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006b6c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006b70:	3901      	subs	r1, #1
34006b72:	4303      	orrs	r3, r0
34006b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006b78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006b80:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006b84:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
34006b88:	f7fe fab0 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34006b8c:	6863      	ldr	r3, [r4, #4]
34006b8e:	051a      	lsls	r2, r3, #20
34006b90:	d544      	bpl.n	34006c1c <HAL_RCCEx_PeriphCLKConfig+0x1968>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
34006b92:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006b96:	4a9c      	ldr	r2, [pc, #624]	@ (34006e08 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
34006b98:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006b9c:	4291      	cmp	r1, r2
34006b9e:	d00e      	beq.n	34006bbe <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006ba0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006ba4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006ba8:	4291      	cmp	r1, r2
34006baa:	d008      	beq.n	34006bbe <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006bac:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006bb0:	4293      	cmp	r3, r2
34006bb2:	d004      	beq.n	34006bbe <HAL_RCCEx_PeriphCLKConfig+0x190a>
34006bb4:	f240 71a1 	movw	r1, #1953	@ 0x7a1
34006bb8:	4890      	ldr	r0, [pc, #576]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006bba:	f7fa fbd9 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34006bbe:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006bc2:	4a92      	ldr	r2, [pc, #584]	@ (34006e0c <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
34006bc4:	4293      	cmp	r3, r2
34006bc6:	f041 81a6 	bne.w	34007f16 <HAL_RCCEx_PeriphCLKConfig+0x2c62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006bca:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006bcc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006bd0:	d004      	beq.n	34006bdc <HAL_RCCEx_PeriphCLKConfig+0x1928>
34006bd2:	f240 71a6 	movw	r1, #1958	@ 0x7a6
34006bd6:	4889      	ldr	r0, [pc, #548]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006bd8:	f7fa fbca 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006bdc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006bde:	3b01      	subs	r3, #1
34006be0:	2bff      	cmp	r3, #255	@ 0xff
34006be2:	d904      	bls.n	34006bee <HAL_RCCEx_PeriphCLKConfig+0x193a>
34006be4:	f240 71a7 	movw	r1, #1959	@ 0x7a7
34006be8:	4884      	ldr	r0, [pc, #528]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006bea:	f7fa fbc1 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006bee:	4a85      	ldr	r2, [pc, #532]	@ (34006e04 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006bf0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006bf2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006bf6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006bf8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006bfc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006c00:	3901      	subs	r1, #1
34006c02:	4303      	orrs	r3, r0
34006c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006c08:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006c0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006c10:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006c14:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
34006c18:	f7fe fa68 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34006c1c:	6863      	ldr	r3, [r4, #4]
34006c1e:	04db      	lsls	r3, r3, #19
34006c20:	d544      	bpl.n	34006cac <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
34006c22:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006c26:	4a7a      	ldr	r2, [pc, #488]	@ (34006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b5c>)
34006c28:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006c2c:	4291      	cmp	r1, r2
34006c2e:	d00e      	beq.n	34006c4e <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006c30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006c34:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006c38:	4291      	cmp	r1, r2
34006c3a:	d008      	beq.n	34006c4e <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006c3c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006c40:	4293      	cmp	r3, r2
34006c42:	d004      	beq.n	34006c4e <HAL_RCCEx_PeriphCLKConfig+0x199a>
34006c44:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34006c48:	486c      	ldr	r0, [pc, #432]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006c4a:	f7fa fb91 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34006c4e:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006c52:	4a70      	ldr	r2, [pc, #448]	@ (34006e14 <HAL_RCCEx_PeriphCLKConfig+0x1b60>)
34006c54:	4293      	cmp	r3, r2
34006c56:	f041 818f 	bne.w	34007f78 <HAL_RCCEx_PeriphCLKConfig+0x2cc4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006c5a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006c5c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006c60:	d004      	beq.n	34006c6c <HAL_RCCEx_PeriphCLKConfig+0x19b8>
34006c62:	f240 71d3 	movw	r1, #2003	@ 0x7d3
34006c66:	4865      	ldr	r0, [pc, #404]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006c68:	f7fa fb82 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006c6c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006c6e:	3b01      	subs	r3, #1
34006c70:	2bff      	cmp	r3, #255	@ 0xff
34006c72:	d904      	bls.n	34006c7e <HAL_RCCEx_PeriphCLKConfig+0x19ca>
34006c74:	f240 71d4 	movw	r1, #2004	@ 0x7d4
34006c78:	4860      	ldr	r0, [pc, #384]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006c7a:	f7fa fb79 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006c7e:	4a61      	ldr	r2, [pc, #388]	@ (34006e04 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006c80:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006c82:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006c86:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006c88:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006c8c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006c90:	3901      	subs	r1, #1
34006c92:	4303      	orrs	r3, r0
34006c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006c98:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006ca0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006ca4:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
34006ca8:	f7fe fa20 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34006cac:	6863      	ldr	r3, [r4, #4]
34006cae:	049e      	lsls	r6, r3, #18
34006cb0:	d544      	bpl.n	34006d3c <HAL_RCCEx_PeriphCLKConfig+0x1a88>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
34006cb2:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34006cb6:	4a58      	ldr	r2, [pc, #352]	@ (34006e18 <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
34006cb8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006cbc:	4291      	cmp	r1, r2
34006cbe:	d00e      	beq.n	34006cde <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006cc0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006cc4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006cc8:	4291      	cmp	r1, r2
34006cca:	d008      	beq.n	34006cde <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006ccc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006cd0:	4293      	cmp	r3, r2
34006cd2:	d004      	beq.n	34006cde <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34006cd4:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34006cd8:	4848      	ldr	r0, [pc, #288]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006cda:	f7fa fb49 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34006cde:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34006ce2:	4a4e      	ldr	r2, [pc, #312]	@ (34006e1c <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
34006ce4:	4293      	cmp	r3, r2
34006ce6:	f041 8199 	bne.w	3400801c <HAL_RCCEx_PeriphCLKConfig+0x2d68>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006cea:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006cec:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006cf0:	d004      	beq.n	34006cfc <HAL_RCCEx_PeriphCLKConfig+0x1a48>
34006cf2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34006cf6:	4841      	ldr	r0, [pc, #260]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006cf8:	f7fa fb3a 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006cfc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006cfe:	3b01      	subs	r3, #1
34006d00:	2bff      	cmp	r3, #255	@ 0xff
34006d02:	d904      	bls.n	34006d0e <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
34006d04:	f640 0101 	movw	r1, #2049	@ 0x801
34006d08:	483c      	ldr	r0, [pc, #240]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d0a:	f7fa fb31 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006d0e:	4a3d      	ldr	r2, [pc, #244]	@ (34006e04 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006d10:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006d12:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006d16:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006d18:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006d1c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006d20:	3901      	subs	r1, #1
34006d22:	4303      	orrs	r3, r0
34006d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006d28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006d30:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006d34:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34006d38:	f7fe f9d8 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34006d3c:	6863      	ldr	r3, [r4, #4]
34006d3e:	0458      	lsls	r0, r3, #17
34006d40:	d544      	bpl.n	34006dcc <HAL_RCCEx_PeriphCLKConfig+0x1b18>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34006d42:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006d46:	4a36      	ldr	r2, [pc, #216]	@ (34006e20 <HAL_RCCEx_PeriphCLKConfig+0x1b6c>)
34006d48:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006d4c:	4291      	cmp	r1, r2
34006d4e:	d00e      	beq.n	34006d6e <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006d50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006d54:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006d58:	4291      	cmp	r1, r2
34006d5a:	d008      	beq.n	34006d6e <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006d5c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006d60:	4293      	cmp	r3, r2
34006d62:	d004      	beq.n	34006d6e <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34006d64:	f640 0128 	movw	r1, #2088	@ 0x828
34006d68:	4824      	ldr	r0, [pc, #144]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d6a:	f7fa fb01 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34006d6e:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006d72:	4a2c      	ldr	r2, [pc, #176]	@ (34006e24 <HAL_RCCEx_PeriphCLKConfig+0x1b70>)
34006d74:	4293      	cmp	r3, r2
34006d76:	f041 8182 	bne.w	3400807e <HAL_RCCEx_PeriphCLKConfig+0x2dca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006d7a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006d7c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006d80:	d004      	beq.n	34006d8c <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
34006d82:	f640 012d 	movw	r1, #2093	@ 0x82d
34006d86:	481d      	ldr	r0, [pc, #116]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d88:	f7fa faf2 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006d8c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006d8e:	3b01      	subs	r3, #1
34006d90:	2bff      	cmp	r3, #255	@ 0xff
34006d92:	d904      	bls.n	34006d9e <HAL_RCCEx_PeriphCLKConfig+0x1aea>
34006d94:	f640 012e 	movw	r1, #2094	@ 0x82e
34006d98:	4818      	ldr	r0, [pc, #96]	@ (34006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34006d9a:	f7fa fae9 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006d9e:	4a19      	ldr	r2, [pc, #100]	@ (34006e04 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34006da0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006da2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006da6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006da8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006dac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006db0:	3901      	subs	r1, #1
34006db2:	4303      	orrs	r3, r0
34006db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006db8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006dc0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006dc4:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
34006dc8:	f7fe f990 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34006dcc:	6863      	ldr	r3, [r4, #4]
34006dce:	0419      	lsls	r1, r3, #16
34006dd0:	d560      	bpl.n	34006e94 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34006dd2:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006dd6:	4a14      	ldr	r2, [pc, #80]	@ (34006e28 <HAL_RCCEx_PeriphCLKConfig+0x1b74>)
34006dd8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006ddc:	4291      	cmp	r1, r2
34006dde:	d02a      	beq.n	34006e36 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006de0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006de4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006de8:	4291      	cmp	r1, r2
34006dea:	d024      	beq.n	34006e36 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006dec:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006df0:	4293      	cmp	r3, r2
34006df2:	d020      	beq.n	34006e36 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34006df4:	e01a      	b.n	34006e2c <HAL_RCCEx_PeriphCLKConfig+0x1b78>
34006df6:	bf00      	nop
34006df8:	07000830 	.word	0x07000830
34006dfc:	34010a09 	.word	0x34010a09
34006e00:	07020830 	.word	0x07020830
34006e04:	56028000 	.word	0x56028000
34006e08:	07000c30 	.word	0x07000c30
34006e0c:	07020c30 	.word	0x07020c30
34006e10:	07001030 	.word	0x07001030
34006e14:	07021030 	.word	0x07021030
34006e18:	07001430 	.word	0x07001430
34006e1c:	07021430 	.word	0x07021430
34006e20:	07001830 	.word	0x07001830
34006e24:	07021830 	.word	0x07021830
34006e28:	07001c30 	.word	0x07001c30
34006e2c:	f640 0155 	movw	r1, #2133	@ 0x855
34006e30:	48bb      	ldr	r0, [pc, #748]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006e32:	f7fa fa9d 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34006e36:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006e3a:	4aba      	ldr	r2, [pc, #744]	@ (34007124 <HAL_RCCEx_PeriphCLKConfig+0x1e70>)
34006e3c:	4293      	cmp	r3, r2
34006e3e:	f041 814f 	bne.w	340080e0 <HAL_RCCEx_PeriphCLKConfig+0x2e2c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006e42:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006e44:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006e48:	d004      	beq.n	34006e54 <HAL_RCCEx_PeriphCLKConfig+0x1ba0>
34006e4a:	f640 015a 	movw	r1, #2138	@ 0x85a
34006e4e:	48b4      	ldr	r0, [pc, #720]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006e50:	f7fa fa8e 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006e54:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006e56:	3b01      	subs	r3, #1
34006e58:	2bff      	cmp	r3, #255	@ 0xff
34006e5a:	d904      	bls.n	34006e66 <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
34006e5c:	f640 015b 	movw	r1, #2139	@ 0x85b
34006e60:	48af      	ldr	r0, [pc, #700]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006e62:	f7fa fa85 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006e66:	4ab0      	ldr	r2, [pc, #704]	@ (34007128 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006e68:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006e6a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006e6e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006e70:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006e74:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006e78:	3901      	subs	r1, #1
34006e7a:	4303      	orrs	r3, r0
34006e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006e80:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006e84:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006e88:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006e8c:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34006e90:	f7fe f92c 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34006e94:	6863      	ldr	r3, [r4, #4]
34006e96:	03da      	lsls	r2, r3, #15
34006e98:	d544      	bpl.n	34006f24 <HAL_RCCEx_PeriphCLKConfig+0x1c70>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
34006e9a:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34006e9e:	4aa3      	ldr	r2, [pc, #652]	@ (3400712c <HAL_RCCEx_PeriphCLKConfig+0x1e78>)
34006ea0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006ea4:	4291      	cmp	r1, r2
34006ea6:	d00e      	beq.n	34006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34006ea8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006eac:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006eb0:	4291      	cmp	r1, r2
34006eb2:	d008      	beq.n	34006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34006eb4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006eb8:	4293      	cmp	r3, r2
34006eba:	d004      	beq.n	34006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34006ebc:	f640 0182 	movw	r1, #2178	@ 0x882
34006ec0:	4897      	ldr	r0, [pc, #604]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006ec2:	f7fa fa55 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34006ec6:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34006eca:	4a99      	ldr	r2, [pc, #612]	@ (34007130 <HAL_RCCEx_PeriphCLKConfig+0x1e7c>)
34006ecc:	4293      	cmp	r3, r2
34006ece:	f041 8138 	bne.w	34008142 <HAL_RCCEx_PeriphCLKConfig+0x2e8e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006ed2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006ed4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006ed8:	d004      	beq.n	34006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1c30>
34006eda:	f640 0187 	movw	r1, #2183	@ 0x887
34006ede:	4890      	ldr	r0, [pc, #576]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006ee0:	f7fa fa46 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006ee4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006ee6:	3b01      	subs	r3, #1
34006ee8:	2bff      	cmp	r3, #255	@ 0xff
34006eea:	d904      	bls.n	34006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1c42>
34006eec:	f640 0188 	movw	r1, #2184	@ 0x888
34006ef0:	488b      	ldr	r0, [pc, #556]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006ef2:	f7fa fa3d 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006ef6:	4a8c      	ldr	r2, [pc, #560]	@ (34007128 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006ef8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006efa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006efe:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006f00:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006f04:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006f08:	3901      	subs	r1, #1
34006f0a:	4303      	orrs	r3, r0
34006f0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006f10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006f18:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006f1c:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
34006f20:	f7fe f8e4 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34006f24:	6863      	ldr	r3, [r4, #4]
34006f26:	039b      	lsls	r3, r3, #14
34006f28:	d544      	bpl.n	34006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
34006f2a:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34006f2e:	4a81      	ldr	r2, [pc, #516]	@ (34007134 <HAL_RCCEx_PeriphCLKConfig+0x1e80>)
34006f30:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006f34:	4291      	cmp	r1, r2
34006f36:	d00e      	beq.n	34006f56 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34006f38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006f3c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006f40:	4291      	cmp	r1, r2
34006f42:	d008      	beq.n	34006f56 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34006f44:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006f48:	4293      	cmp	r3, r2
34006f4a:	d004      	beq.n	34006f56 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34006f4c:	f640 01af 	movw	r1, #2223	@ 0x8af
34006f50:	4873      	ldr	r0, [pc, #460]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006f52:	f7fa fa0d 	bl	34001370 <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34006f56:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34006f5a:	4a77      	ldr	r2, [pc, #476]	@ (34007138 <HAL_RCCEx_PeriphCLKConfig+0x1e84>)
34006f5c:	4293      	cmp	r3, r2
34006f5e:	f041 8121 	bne.w	340081a4 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006f62:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006f64:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006f68:	d004      	beq.n	34006f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
34006f6a:	f640 01b4 	movw	r1, #2228	@ 0x8b4
34006f6e:	486c      	ldr	r0, [pc, #432]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006f70:	f7fa f9fe 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006f74:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006f76:	3b01      	subs	r3, #1
34006f78:	2bff      	cmp	r3, #255	@ 0xff
34006f7a:	d904      	bls.n	34006f86 <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
34006f7c:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34006f80:	4867      	ldr	r0, [pc, #412]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006f82:	f7fa f9f5 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006f86:	4a68      	ldr	r2, [pc, #416]	@ (34007128 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34006f88:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006f8a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006f8e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006f90:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006f94:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006f98:	3901      	subs	r1, #1
34006f9a:	4303      	orrs	r3, r0
34006f9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006fa0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006fa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006fa8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006fac:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
34006fb0:	f7fe f89c 	bl	340050ec <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34006fb4:	6863      	ldr	r3, [r4, #4]
34006fb6:	035e      	lsls	r6, r3, #13
34006fb8:	d51e      	bpl.n	34006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
34006fba:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34006fbe:	4a5f      	ldr	r2, [pc, #380]	@ (3400713c <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
34006fc0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006fc4:	4291      	cmp	r1, r2
34006fc6:	d00a      	beq.n	34006fde <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34006fc8:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34006fcc:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34006fd0:	4293      	cmp	r3, r2
34006fd2:	d004      	beq.n	34006fde <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34006fd4:	f640 01dc 	movw	r1, #2268	@ 0x8dc
34006fd8:	4851      	ldr	r0, [pc, #324]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34006fda:	f7fa f9c9 	bl	34001370 <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34006fde:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
34006fe2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34006fe6:	f7fe f881 	bl	340050ec <LL_RCC_SetClockSource>
34006fea:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34006fee:	2b00      	cmp	r3, #0
34006ff0:	f281 8109 	bge.w	34008206 <HAL_RCCEx_PeriphCLKConfig+0x2f52>
34006ff4:	f7fe f84a 	bl	3400508c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34006ff8:	6863      	ldr	r3, [r4, #4]
34006ffa:	02d8      	lsls	r0, r3, #11
34006ffc:	d51e      	bpl.n	3400703c <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
34006ffe:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34007002:	4a4f      	ldr	r2, [pc, #316]	@ (34007140 <HAL_RCCEx_PeriphCLKConfig+0x1e8c>)
34007004:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34007008:	4291      	cmp	r1, r2
3400700a:	d00a      	beq.n	34007022 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
3400700c:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34007010:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34007014:	4293      	cmp	r3, r2
34007016:	d004      	beq.n	34007022 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34007018:	f640 01e6 	movw	r1, #2278	@ 0x8e6
3400701c:	4840      	ldr	r0, [pc, #256]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3400701e:	f7fa f9a7 	bl	34001370 <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34007022:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
34007026:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
3400702a:	f7fe f85f 	bl	340050ec <LL_RCC_SetClockSource>
3400702e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34007032:	2b00      	cmp	r3, #0
34007034:	f281 80eb 	bge.w	3400820e <HAL_RCCEx_PeriphCLKConfig+0x2f5a>
34007038:	f7fe f828 	bl	3400508c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
3400703c:	6863      	ldr	r3, [r4, #4]
3400703e:	0319      	lsls	r1, r3, #12
34007040:	d549      	bpl.n	340070d6 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
34007042:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34007046:	4a3f      	ldr	r2, [pc, #252]	@ (34007144 <HAL_RCCEx_PeriphCLKConfig+0x1e90>)
34007048:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400704c:	4291      	cmp	r1, r2
3400704e:	d00a      	beq.n	34007066 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
34007050:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34007054:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34007058:	4293      	cmp	r3, r2
3400705a:	d004      	beq.n	34007066 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
3400705c:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
34007060:	482f      	ldr	r0, [pc, #188]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007062:	f7fa f985 	bl	34001370 <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34007066:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
3400706a:	4a37      	ldr	r2, [pc, #220]	@ (34007148 <HAL_RCCEx_PeriphCLKConfig+0x1e94>)
3400706c:	4293      	cmp	r3, r2
3400706e:	f041 80d2 	bne.w	34008216 <HAL_RCCEx_PeriphCLKConfig+0x2f62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007072:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007074:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007078:	d004      	beq.n	34007084 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
3400707a:	f640 01f5 	movw	r1, #2293	@ 0x8f5
3400707e:	4828      	ldr	r0, [pc, #160]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007080:	f7fa f976 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007084:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007086:	3b01      	subs	r3, #1
34007088:	2bff      	cmp	r3, #255	@ 0xff
3400708a:	d904      	bls.n	34007096 <HAL_RCCEx_PeriphCLKConfig+0x1de2>
3400708c:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34007090:	4823      	ldr	r0, [pc, #140]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34007092:	f7fa f96d 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007096:	4a24      	ldr	r2, [pc, #144]	@ (34007128 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34007098:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400709a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400709e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340070a0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340070a4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340070a8:	3901      	subs	r1, #1
340070aa:	4303      	orrs	r3, r0
340070ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340070b0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340070b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340070b8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
340070bc:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
340070c0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
340070c4:	f7fe f812 	bl	340050ec <LL_RCC_SetClockSource>
340070c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
340070cc:	2b00      	cmp	r3, #0
340070ce:	f281 80ab 	bge.w	34008228 <HAL_RCCEx_PeriphCLKConfig+0x2f74>
340070d2:	f7fd ffdb 	bl	3400508c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
340070d6:	6863      	ldr	r3, [r4, #4]
340070d8:	029a      	lsls	r2, r3, #10
340070da:	d564      	bpl.n	340071a6 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
340070dc:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
340070e0:	4a1a      	ldr	r2, [pc, #104]	@ (3400714c <HAL_RCCEx_PeriphCLKConfig+0x1e98>)
340070e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340070e6:	4291      	cmp	r1, r2
340070e8:	d00a      	beq.n	34007100 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
340070ea:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
340070ee:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
340070f2:	4293      	cmp	r3, r2
340070f4:	d004      	beq.n	34007100 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
340070f6:	f44f 6111 	mov.w	r1, #2320	@ 0x910
340070fa:	4809      	ldr	r0, [pc, #36]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340070fc:	f7fa f938 	bl	34001370 <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34007100:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34007104:	4a12      	ldr	r2, [pc, #72]	@ (34007150 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>)
34007106:	4293      	cmp	r3, r2
34007108:	f041 8092 	bne.w	34008230 <HAL_RCCEx_PeriphCLKConfig+0x2f7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400710c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400710e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007112:	d01f      	beq.n	34007154 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34007114:	f640 1115 	movw	r1, #2325	@ 0x915
34007118:	4801      	ldr	r0, [pc, #4]	@ (34007120 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3400711a:	f7fa f929 	bl	34001370 <assert_failed>
3400711e:	e019      	b.n	34007154 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34007120:	34010a09 	.word	0x34010a09
34007124:	07021c30 	.word	0x07021c30
34007128:	56028000 	.word	0x56028000
3400712c:	07000034 	.word	0x07000034
34007130:	07020034 	.word	0x07020034
34007134:	07000434 	.word	0x07000434
34007138:	07020434 	.word	0x07020434
3400713c:	01001014 	.word	0x01001014
34007140:	01001814 	.word	0x01001814
34007144:	03000c14 	.word	0x03000c14
34007148:	03020c14 	.word	0x03020c14
3400714c:	03001414 	.word	0x03001414
34007150:	03021414 	.word	0x03021414
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007154:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007156:	3b01      	subs	r3, #1
34007158:	2bff      	cmp	r3, #255	@ 0xff
3400715a:	d904      	bls.n	34007166 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
3400715c:	f640 1116 	movw	r1, #2326	@ 0x916
34007160:	48b1      	ldr	r0, [pc, #708]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007162:	f7fa f905 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007166:	4ab1      	ldr	r2, [pc, #708]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007168:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400716a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400716e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007170:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007174:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007178:	3901      	subs	r1, #1
3400717a:	4303      	orrs	r3, r0
3400717c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007180:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007184:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007188:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3400718c:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
34007190:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007194:	f7fd ffaa 	bl	340050ec <LL_RCC_SetClockSource>
34007198:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
3400719c:	2b00      	cmp	r3, #0
3400719e:	f281 8050 	bge.w	34008242 <HAL_RCCEx_PeriphCLKConfig+0x2f8e>
340071a2:	f7fd ff73 	bl	3400508c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
340071a6:	6863      	ldr	r3, [r4, #4]
340071a8:	061b      	lsls	r3, r3, #24
340071aa:	d511      	bpl.n	340071d0 <HAL_RCCEx_PeriphCLKConfig+0x1f1c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
340071ac:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
340071b0:	2b03      	cmp	r3, #3
340071b2:	d904      	bls.n	340071be <HAL_RCCEx_PeriphCLKConfig+0x1f0a>
340071b4:	f44f 6113 	mov.w	r1, #2352	@ 0x930
340071b8:	489b      	ldr	r0, [pc, #620]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340071ba:	f7fa f8d9 	bl	34001370 <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
340071be:	4a9b      	ldr	r2, [pc, #620]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340071c0:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
340071c4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340071c6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
340071ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
340071ce:	6253      	str	r3, [r2, #36]	@ 0x24
}
340071d0:	1e28      	subs	r0, r5, #0
340071d2:	bf18      	it	ne
340071d4:	2001      	movne	r0, #1
340071d6:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
340071d8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
340071da:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340071de:	d003      	beq.n	340071e8 <HAL_RCCEx_PeriphCLKConfig+0x1f34>
340071e0:	21e6      	movs	r1, #230	@ 0xe6
340071e2:	4891      	ldr	r0, [pc, #580]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340071e4:	f7fa f8c4 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340071e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340071ea:	3b01      	subs	r3, #1
340071ec:	2bff      	cmp	r3, #255	@ 0xff
340071ee:	d903      	bls.n	340071f8 <HAL_RCCEx_PeriphCLKConfig+0x1f44>
340071f0:	21e7      	movs	r1, #231	@ 0xe7
340071f2:	488d      	ldr	r0, [pc, #564]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340071f4:	f7fa f8bc 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340071f8:	4a8c      	ldr	r2, [pc, #560]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340071fa:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340071fc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34007200:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34007202:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007206:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400720a:	3901      	subs	r1, #1
3400720c:	4303      	orrs	r3, r0
3400720e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007212:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34007216:	f44f 7300 	mov.w	r3, #512	@ 0x200
3400721a:	f7fe b941 	b.w	340054a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400721e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007220:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007224:	d003      	beq.n	3400722e <HAL_RCCEx_PeriphCLKConfig+0x1f7a>
34007226:	21f3      	movs	r1, #243	@ 0xf3
34007228:	487f      	ldr	r0, [pc, #508]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400722a:	f7fa f8a1 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400722e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007230:	3b01      	subs	r3, #1
34007232:	2bff      	cmp	r3, #255	@ 0xff
34007234:	d903      	bls.n	3400723e <HAL_RCCEx_PeriphCLKConfig+0x1f8a>
34007236:	21f4      	movs	r1, #244	@ 0xf4
34007238:	487b      	ldr	r0, [pc, #492]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400723a:	f7fa f899 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400723e:	4a7b      	ldr	r2, [pc, #492]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007240:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007242:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007246:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007248:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400724c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007250:	3901      	subs	r1, #1
34007252:	4303      	orrs	r3, r0
34007254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007258:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400725c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007260:	f7fe b91e 	b.w	340054a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34007264:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34007268:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400726c:	d004      	beq.n	34007278 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
3400726e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007272:	486d      	ldr	r0, [pc, #436]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007274:	f7fa f87c 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34007278:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
3400727c:	3b01      	subs	r3, #1
3400727e:	2bff      	cmp	r3, #255	@ 0xff
34007280:	d904      	bls.n	3400728c <HAL_RCCEx_PeriphCLKConfig+0x1fd8>
34007282:	f240 1101 	movw	r1, #257	@ 0x101
34007286:	4868      	ldr	r0, [pc, #416]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34007288:	f7fa f872 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400728c:	4a67      	ldr	r2, [pc, #412]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3400728e:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34007292:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34007296:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
3400729a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400729e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340072a2:	3901      	subs	r1, #1
340072a4:	4303      	orrs	r3, r0
340072a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340072aa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
340072ae:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
340072b2:	f7fe b8f5 	b.w	340054a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
340072b6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340072ba:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340072be:	d004      	beq.n	340072ca <HAL_RCCEx_PeriphCLKConfig+0x2016>
340072c0:	f240 110d 	movw	r1, #269	@ 0x10d
340072c4:	4858      	ldr	r0, [pc, #352]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340072c6:	f7fa f853 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
340072ca:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
340072ce:	3b01      	subs	r3, #1
340072d0:	2bff      	cmp	r3, #255	@ 0xff
340072d2:	d904      	bls.n	340072de <HAL_RCCEx_PeriphCLKConfig+0x202a>
340072d4:	f44f 7187 	mov.w	r1, #270	@ 0x10e
340072d8:	4853      	ldr	r0, [pc, #332]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340072da:	f7fa f849 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
340072de:	4a53      	ldr	r2, [pc, #332]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340072e0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
340072e4:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
340072e8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
340072ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340072f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340072f4:	3901      	subs	r1, #1
340072f6:	4303      	orrs	r3, r0
340072f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340072fc:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34007300:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34007304:	f7fe b8cc 	b.w	340054a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34007308:	4a49      	ldr	r2, [pc, #292]	@ (34007430 <HAL_RCCEx_PeriphCLKConfig+0x217c>)
3400730a:	4293      	cmp	r3, r2
3400730c:	d123      	bne.n	34007356 <HAL_RCCEx_PeriphCLKConfig+0x20a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400730e:	6a23      	ldr	r3, [r4, #32]
34007310:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007314:	d004      	beq.n	34007320 <HAL_RCCEx_PeriphCLKConfig+0x206c>
34007316:	f44f 719b 	mov.w	r1, #310	@ 0x136
3400731a:	4843      	ldr	r0, [pc, #268]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400731c:	f7fa f828 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007320:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007322:	3b01      	subs	r3, #1
34007324:	2bff      	cmp	r3, #255	@ 0xff
34007326:	d904      	bls.n	34007332 <HAL_RCCEx_PeriphCLKConfig+0x207e>
34007328:	f240 1137 	movw	r1, #311	@ 0x137
3400732c:	483e      	ldr	r0, [pc, #248]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400732e:	f7fa f81f 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007332:	4a3e      	ldr	r2, [pc, #248]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007334:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34007336:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400733a:	6a20      	ldr	r0, [r4, #32]
3400733c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007340:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007344:	3901      	subs	r1, #1
34007346:	4303      	orrs	r3, r0
34007348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400734c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34007350:	2308      	movs	r3, #8
34007352:	f7fe b8e8 	b.w	34005526 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
34007356:	4a37      	ldr	r2, [pc, #220]	@ (34007434 <HAL_RCCEx_PeriphCLKConfig+0x2180>)
34007358:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400735a:	bf02      	ittt	eq
3400735c:	2240      	moveq	r2, #64	@ 0x40
3400735e:	4b33      	ldreq	r3, [pc, #204]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007360:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007364:	f7fe b8e1 	b.w	3400552a <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34007368:	4a33      	ldr	r2, [pc, #204]	@ (34007438 <HAL_RCCEx_PeriphCLKConfig+0x2184>)
3400736a:	4293      	cmp	r3, r2
3400736c:	d123      	bne.n	340073b6 <HAL_RCCEx_PeriphCLKConfig+0x2102>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400736e:	6a23      	ldr	r3, [r4, #32]
34007370:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007374:	d004      	beq.n	34007380 <HAL_RCCEx_PeriphCLKConfig+0x20cc>
34007376:	f240 1163 	movw	r1, #355	@ 0x163
3400737a:	482b      	ldr	r0, [pc, #172]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400737c:	f7f9 fff8 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007380:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007382:	3b01      	subs	r3, #1
34007384:	2bff      	cmp	r3, #255	@ 0xff
34007386:	d904      	bls.n	34007392 <HAL_RCCEx_PeriphCLKConfig+0x20de>
34007388:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400738c:	4826      	ldr	r0, [pc, #152]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3400738e:	f7f9 ffef 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007392:	4a26      	ldr	r2, [pc, #152]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007394:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34007396:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400739a:	6a20      	ldr	r0, [r4, #32]
3400739c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340073a0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340073a4:	3901      	subs	r1, #1
340073a6:	4303      	orrs	r3, r0
340073a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340073ac:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340073b0:	2308      	movs	r3, #8
340073b2:	f7fe b8f5 	b.w	340055a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
340073b6:	4a21      	ldr	r2, [pc, #132]	@ (3400743c <HAL_RCCEx_PeriphCLKConfig+0x2188>)
340073b8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340073ba:	bf02      	ittt	eq
340073bc:	2240      	moveq	r2, #64	@ 0x40
340073be:	4b1b      	ldreq	r3, [pc, #108]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340073c0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340073c4:	f7fe b8ee 	b.w	340055a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
340073c8:	4a1d      	ldr	r2, [pc, #116]	@ (34007440 <HAL_RCCEx_PeriphCLKConfig+0x218c>)
340073ca:	4293      	cmp	r3, r2
340073cc:	d123      	bne.n	34007416 <HAL_RCCEx_PeriphCLKConfig+0x2162>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340073ce:	6a23      	ldr	r3, [r4, #32]
340073d0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340073d4:	d004      	beq.n	340073e0 <HAL_RCCEx_PeriphCLKConfig+0x212c>
340073d6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
340073da:	4813      	ldr	r0, [pc, #76]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340073dc:	f7f9 ffc8 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340073e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340073e2:	3b01      	subs	r3, #1
340073e4:	2bff      	cmp	r3, #255	@ 0xff
340073e6:	d904      	bls.n	340073f2 <HAL_RCCEx_PeriphCLKConfig+0x213e>
340073e8:	f240 1191 	movw	r1, #401	@ 0x191
340073ec:	480e      	ldr	r0, [pc, #56]	@ (34007428 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340073ee:	f7f9 ffbf 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340073f2:	4a0e      	ldr	r2, [pc, #56]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340073f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340073f6:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340073fa:	6a20      	ldr	r0, [r4, #32]
340073fc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007400:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007404:	3901      	subs	r1, #1
34007406:	4303      	orrs	r3, r0
34007408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400740c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34007410:	2308      	movs	r3, #8
34007412:	f7fe b902 	b.w	3400561a <HAL_RCCEx_PeriphCLKConfig+0x366>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34007416:	4a0b      	ldr	r2, [pc, #44]	@ (34007444 <HAL_RCCEx_PeriphCLKConfig+0x2190>)
34007418:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400741a:	bf02      	ittt	eq
3400741c:	2240      	moveq	r2, #64	@ 0x40
3400741e:	4b03      	ldreq	r3, [pc, #12]	@ (3400742c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34007420:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007424:	f7fe b8fb 	b.w	3400561e <HAL_RCCEx_PeriphCLKConfig+0x36a>
34007428:	34010a09 	.word	0x34010a09
3400742c:	56028000 	.word	0x56028000
34007430:	03030014 	.word	0x03030014
34007434:	03010014 	.word	0x03010014
34007438:	03030414 	.word	0x03030414
3400743c:	03010414 	.word	0x03010414
34007440:	03030814 	.word	0x03030814
34007444:	03010814 	.word	0x03010814
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34007448:	2b30      	cmp	r3, #48	@ 0x30
3400744a:	d123      	bne.n	34007494 <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400744c:	6a23      	ldr	r3, [r4, #32]
3400744e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007452:	d004      	beq.n	3400745e <HAL_RCCEx_PeriphCLKConfig+0x21aa>
34007454:	f240 11bd 	movw	r1, #445	@ 0x1bd
34007458:	48b2      	ldr	r0, [pc, #712]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400745a:	f7f9 ff89 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400745e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007460:	3b01      	subs	r3, #1
34007462:	2bff      	cmp	r3, #255	@ 0xff
34007464:	d904      	bls.n	34007470 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
34007466:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3400746a:	48ae      	ldr	r0, [pc, #696]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400746c:	f7f9 ff80 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007470:	4aad      	ldr	r2, [pc, #692]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007472:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34007474:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34007478:	6a20      	ldr	r0, [r4, #32]
3400747a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400747e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007482:	3901      	subs	r1, #1
34007484:	4303      	orrs	r3, r0
34007486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400748a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400748e:	2308      	movs	r3, #8
34007490:	f7fe b8fd 	b.w	3400568e <HAL_RCCEx_PeriphCLKConfig+0x3da>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34007494:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007496:	bf02      	ittt	eq
34007498:	2240      	moveq	r2, #64	@ 0x40
3400749a:	4ba3      	ldreq	r3, [pc, #652]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400749c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340074a0:	f7fe b8f7 	b.w	34005692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
340074a4:	4aa1      	ldr	r2, [pc, #644]	@ (3400772c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
340074a6:	4293      	cmp	r3, r2
340074a8:	d123      	bne.n	340074f2 <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340074aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340074ac:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340074b0:	d004      	beq.n	340074bc <HAL_RCCEx_PeriphCLKConfig+0x2208>
340074b2:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
340074b6:	489b      	ldr	r0, [pc, #620]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340074b8:	f7f9 ff5a 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
340074bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340074be:	3b01      	subs	r3, #1
340074c0:	2bff      	cmp	r3, #255	@ 0xff
340074c2:	d904      	bls.n	340074ce <HAL_RCCEx_PeriphCLKConfig+0x221a>
340074c4:	f240 11eb 	movw	r1, #491	@ 0x1eb
340074c8:	4896      	ldr	r0, [pc, #600]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340074ca:	f7f9 ff51 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340074ce:	4a96      	ldr	r2, [pc, #600]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340074d0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340074d2:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340074d6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340074d8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340074dc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340074e0:	3901      	subs	r1, #1
340074e2:	4303      	orrs	r3, r0
340074e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340074e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340074ec:	2310      	movs	r3, #16
340074ee:	f7fe b911 	b.w	34005714 <HAL_RCCEx_PeriphCLKConfig+0x460>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
340074f2:	4a8f      	ldr	r2, [pc, #572]	@ (34007730 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
340074f4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340074f6:	bf02      	ittt	eq
340074f8:	2240      	moveq	r2, #64	@ 0x40
340074fa:	4b8b      	ldreq	r3, [pc, #556]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340074fc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007500:	f7fe b90a 	b.w	34005718 <HAL_RCCEx_PeriphCLKConfig+0x464>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34007504:	4a8b      	ldr	r2, [pc, #556]	@ (34007734 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
34007506:	4293      	cmp	r3, r2
34007508:	d123      	bne.n	34007552 <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400750a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400750c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007510:	d004      	beq.n	3400751c <HAL_RCCEx_PeriphCLKConfig+0x2268>
34007512:	f240 2117 	movw	r1, #535	@ 0x217
34007516:	4883      	ldr	r0, [pc, #524]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007518:	f7f9 ff2a 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400751c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400751e:	3b01      	subs	r3, #1
34007520:	2bff      	cmp	r3, #255	@ 0xff
34007522:	d904      	bls.n	3400752e <HAL_RCCEx_PeriphCLKConfig+0x227a>
34007524:	f44f 7106 	mov.w	r1, #536	@ 0x218
34007528:	487e      	ldr	r0, [pc, #504]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3400752a:	f7f9 ff21 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400752e:	4a7e      	ldr	r2, [pc, #504]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007530:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34007532:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34007536:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34007538:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400753c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007540:	3901      	subs	r1, #1
34007542:	4303      	orrs	r3, r0
34007544:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007548:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3400754c:	2310      	movs	r3, #16
3400754e:	f7fe b938 	b.w	340057c2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34007552:	4a79      	ldr	r2, [pc, #484]	@ (34007738 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34007554:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007556:	bf02      	ittt	eq
34007558:	2240      	moveq	r2, #64	@ 0x40
3400755a:	4b73      	ldreq	r3, [pc, #460]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400755c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007560:	f7fe b931 	b.w	340057c6 <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34007564:	2b30      	cmp	r3, #48	@ 0x30
34007566:	d123      	bne.n	340075b0 <HAL_RCCEx_PeriphCLKConfig+0x22fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400756a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400756e:	d004      	beq.n	3400757a <HAL_RCCEx_PeriphCLKConfig+0x22c6>
34007570:	f240 2145 	movw	r1, #581	@ 0x245
34007574:	486b      	ldr	r0, [pc, #428]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007576:	f7f9 fefb 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400757a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400757c:	3b01      	subs	r3, #1
3400757e:	2bff      	cmp	r3, #255	@ 0xff
34007580:	d904      	bls.n	3400758c <HAL_RCCEx_PeriphCLKConfig+0x22d8>
34007582:	f240 2146 	movw	r1, #582	@ 0x246
34007586:	4867      	ldr	r0, [pc, #412]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007588:	f7f9 fef2 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400758c:	4a66      	ldr	r2, [pc, #408]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400758e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007590:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007594:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007596:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400759a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400759e:	3901      	subs	r1, #1
340075a0:	4303      	orrs	r3, r0
340075a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340075a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340075aa:	2380      	movs	r3, #128	@ 0x80
340075ac:	f7fe b94f 	b.w	3400584e <HAL_RCCEx_PeriphCLKConfig+0x59a>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
340075b0:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340075b2:	bf02      	ittt	eq
340075b4:	2240      	moveq	r2, #64	@ 0x40
340075b6:	4b5c      	ldreq	r3, [pc, #368]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340075b8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340075bc:	f7fe b949 	b.w	34005852 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
340075c0:	2b03      	cmp	r3, #3
340075c2:	d123      	bne.n	3400760c <HAL_RCCEx_PeriphCLKConfig+0x2358>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340075c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340075c6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340075ca:	d004      	beq.n	340075d6 <HAL_RCCEx_PeriphCLKConfig+0x2322>
340075cc:	f240 2173 	movw	r1, #627	@ 0x273
340075d0:	4854      	ldr	r0, [pc, #336]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340075d2:	f7f9 fecd 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340075d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340075d8:	3b01      	subs	r3, #1
340075da:	2bff      	cmp	r3, #255	@ 0xff
340075dc:	d904      	bls.n	340075e8 <HAL_RCCEx_PeriphCLKConfig+0x2334>
340075de:	f44f 711d 	mov.w	r1, #628	@ 0x274
340075e2:	4850      	ldr	r0, [pc, #320]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340075e4:	f7f9 fec4 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340075e8:	4a4f      	ldr	r2, [pc, #316]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340075ea:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340075ec:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340075f0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340075f2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340075f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340075fa:	3901      	subs	r1, #1
340075fc:	4303      	orrs	r3, r0
340075fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007606:	2380      	movs	r3, #128	@ 0x80
34007608:	f7fe b967 	b.w	340058da <HAL_RCCEx_PeriphCLKConfig+0x626>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
3400760c:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400760e:	bf02      	ittt	eq
34007610:	2240      	moveq	r2, #64	@ 0x40
34007612:	4b45      	ldreq	r3, [pc, #276]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007614:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007618:	f7fe b961 	b.w	340058de <HAL_RCCEx_PeriphCLKConfig+0x62a>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
3400761c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007620:	bf02      	ittt	eq
34007622:	2240      	moveq	r2, #64	@ 0x40
34007624:	4b40      	ldreq	r3, [pc, #256]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007626:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400762a:	f7fe b9ca 	b.w	340059c2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3400762e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007632:	bf02      	ittt	eq
34007634:	2240      	moveq	r2, #64	@ 0x40
34007636:	4b3c      	ldreq	r3, [pc, #240]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007638:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400763c:	f7fe ba03 	b.w	34005a46 <HAL_RCCEx_PeriphCLKConfig+0x792>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
34007640:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007642:	bf02      	ittt	eq
34007644:	2240      	moveq	r2, #64	@ 0x40
34007646:	4b38      	ldreq	r3, [pc, #224]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007648:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400764c:	f7fe ba92 	b.w	34005b74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34007650:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007652:	bf02      	ittt	eq
34007654:	2240      	moveq	r2, #64	@ 0x40
34007656:	4b34      	ldreq	r3, [pc, #208]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34007658:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400765c:	f7fe bad3 	b.w	34005c06 <HAL_RCCEx_PeriphCLKConfig+0x952>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34007660:	4a36      	ldr	r2, [pc, #216]	@ (3400773c <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34007662:	4293      	cmp	r3, r2
34007664:	d124      	bne.n	340076b0 <HAL_RCCEx_PeriphCLKConfig+0x23fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007666:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007668:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400766c:	d004      	beq.n	34007678 <HAL_RCCEx_PeriphCLKConfig+0x23c4>
3400766e:	f240 314f 	movw	r1, #847	@ 0x34f
34007672:	482c      	ldr	r0, [pc, #176]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007674:	f7f9 fe7c 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007678:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400767a:	3b01      	subs	r3, #1
3400767c:	2bff      	cmp	r3, #255	@ 0xff
3400767e:	d904      	bls.n	3400768a <HAL_RCCEx_PeriphCLKConfig+0x23d6>
34007680:	f44f 7154 	mov.w	r1, #848	@ 0x350
34007684:	4827      	ldr	r0, [pc, #156]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34007686:	f7f9 fe73 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400768a:	4a27      	ldr	r2, [pc, #156]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400768c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400768e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007692:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007694:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007698:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400769c:	3901      	subs	r1, #1
3400769e:	4303      	orrs	r3, r0
340076a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340076a4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340076a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340076ac:	f7fe baf3 	b.w	34005c96 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
340076b0:	4a23      	ldr	r2, [pc, #140]	@ (34007740 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
340076b2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340076b4:	bf02      	ittt	eq
340076b6:	2240      	moveq	r2, #64	@ 0x40
340076b8:	4b1b      	ldreq	r3, [pc, #108]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340076ba:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340076be:	f7fe baec 	b.w	34005c9a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
340076c2:	4a20      	ldr	r2, [pc, #128]	@ (34007744 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
340076c4:	4293      	cmp	r3, r2
340076c6:	d124      	bne.n	34007712 <HAL_RCCEx_PeriphCLKConfig+0x245e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340076c8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340076ca:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340076ce:	d004      	beq.n	340076da <HAL_RCCEx_PeriphCLKConfig+0x2426>
340076d0:	f44f 715f 	mov.w	r1, #892	@ 0x37c
340076d4:	4813      	ldr	r0, [pc, #76]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340076d6:	f7f9 fe4b 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340076da:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340076dc:	3b01      	subs	r3, #1
340076de:	2bff      	cmp	r3, #255	@ 0xff
340076e0:	d904      	bls.n	340076ec <HAL_RCCEx_PeriphCLKConfig+0x2438>
340076e2:	f240 317d 	movw	r1, #893	@ 0x37d
340076e6:	480f      	ldr	r0, [pc, #60]	@ (34007724 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340076e8:	f7f9 fe42 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340076ec:	4a0e      	ldr	r2, [pc, #56]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340076ee:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340076f0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340076f4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340076f6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340076fa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340076fe:	3901      	subs	r1, #1
34007700:	4303      	orrs	r3, r0
34007702:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007706:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400770a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400770e:	f7fe bb06 	b.w	34005d1e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34007712:	4a0d      	ldr	r2, [pc, #52]	@ (34007748 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
34007714:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007716:	bf02      	ittt	eq
34007718:	2240      	moveq	r2, #64	@ 0x40
3400771a:	4b03      	ldreq	r3, [pc, #12]	@ (34007728 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3400771c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007720:	f7fe baff 	b.w	34005d22 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
34007724:	34010a09 	.word	0x34010a09
34007728:	56028000 	.word	0x56028000
3400772c:	0303001c 	.word	0x0303001c
34007730:	0301001c 	.word	0x0301001c
34007734:	0303041c 	.word	0x0303041c
34007738:	0301041c 	.word	0x0301041c
3400773c:	0703000c 	.word	0x0703000c
34007740:	0701000c 	.word	0x0701000c
34007744:	0703040c 	.word	0x0703040c
34007748:	0701040c 	.word	0x0701040c
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
3400774c:	4ab1      	ldr	r2, [pc, #708]	@ (34007a14 <HAL_RCCEx_PeriphCLKConfig+0x2760>)
3400774e:	4293      	cmp	r3, r2
34007750:	d124      	bne.n	3400779c <HAL_RCCEx_PeriphCLKConfig+0x24e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007752:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007754:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007758:	d004      	beq.n	34007764 <HAL_RCCEx_PeriphCLKConfig+0x24b0>
3400775a:	f240 31a9 	movw	r1, #937	@ 0x3a9
3400775e:	48ae      	ldr	r0, [pc, #696]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007760:	f7f9 fe06 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007764:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007766:	3b01      	subs	r3, #1
34007768:	2bff      	cmp	r3, #255	@ 0xff
3400776a:	d904      	bls.n	34007776 <HAL_RCCEx_PeriphCLKConfig+0x24c2>
3400776c:	f240 31aa 	movw	r1, #938	@ 0x3aa
34007770:	48a9      	ldr	r0, [pc, #676]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007772:	f7f9 fdfd 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007776:	4aa9      	ldr	r2, [pc, #676]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007778:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400777a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400777e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007780:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007784:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007788:	3901      	subs	r1, #1
3400778a:	4303      	orrs	r3, r0
3400778c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007790:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007794:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007798:	f7fe bb05 	b.w	34005da6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
3400779c:	4aa0      	ldr	r2, [pc, #640]	@ (34007a20 <HAL_RCCEx_PeriphCLKConfig+0x276c>)
3400779e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077a0:	bf02      	ittt	eq
340077a2:	2240      	moveq	r2, #64	@ 0x40
340077a4:	4b9d      	ldreq	r3, [pc, #628]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340077a6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077aa:	f7fe bafe 	b.w	34005daa <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
340077ae:	4a9d      	ldr	r2, [pc, #628]	@ (34007a24 <HAL_RCCEx_PeriphCLKConfig+0x2770>)
340077b0:	4293      	cmp	r3, r2
340077b2:	d124      	bne.n	340077fe <HAL_RCCEx_PeriphCLKConfig+0x254a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340077b4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340077b6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340077ba:	d004      	beq.n	340077c6 <HAL_RCCEx_PeriphCLKConfig+0x2512>
340077bc:	f240 31d6 	movw	r1, #982	@ 0x3d6
340077c0:	4895      	ldr	r0, [pc, #596]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340077c2:	f7f9 fdd5 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340077c6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340077c8:	3b01      	subs	r3, #1
340077ca:	2bff      	cmp	r3, #255	@ 0xff
340077cc:	d904      	bls.n	340077d8 <HAL_RCCEx_PeriphCLKConfig+0x2524>
340077ce:	f240 31d7 	movw	r1, #983	@ 0x3d7
340077d2:	4891      	ldr	r0, [pc, #580]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340077d4:	f7f9 fdcc 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340077d8:	4a90      	ldr	r2, [pc, #576]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340077da:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340077dc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340077e0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340077e2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340077e6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340077ea:	3901      	subs	r1, #1
340077ec:	4303      	orrs	r3, r0
340077ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340077f2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340077f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340077fa:	f7fe bb2c 	b.w	34005e56 <HAL_RCCEx_PeriphCLKConfig+0xba2>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
340077fe:	4a8a      	ldr	r2, [pc, #552]	@ (34007a28 <HAL_RCCEx_PeriphCLKConfig+0x2774>)
34007800:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007802:	bf02      	ittt	eq
34007804:	2240      	moveq	r2, #64	@ 0x40
34007806:	4b85      	ldreq	r3, [pc, #532]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007808:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400780c:	f7fe bb25 	b.w	34005e5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34007810:	4a86      	ldr	r2, [pc, #536]	@ (34007a2c <HAL_RCCEx_PeriphCLKConfig+0x2778>)
34007812:	4293      	cmp	r3, r2
34007814:	d124      	bne.n	34007860 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007816:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007818:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400781c:	d004      	beq.n	34007828 <HAL_RCCEx_PeriphCLKConfig+0x2574>
3400781e:	f240 4103 	movw	r1, #1027	@ 0x403
34007822:	487d      	ldr	r0, [pc, #500]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007824:	f7f9 fda4 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007828:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400782a:	3b01      	subs	r3, #1
3400782c:	2bff      	cmp	r3, #255	@ 0xff
3400782e:	d904      	bls.n	3400783a <HAL_RCCEx_PeriphCLKConfig+0x2586>
34007830:	f240 4104 	movw	r1, #1028	@ 0x404
34007834:	4878      	ldr	r0, [pc, #480]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007836:	f7f9 fd9b 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400783a:	4a78      	ldr	r2, [pc, #480]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400783c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400783e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007842:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007844:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007848:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400784c:	3901      	subs	r1, #1
3400784e:	4303      	orrs	r3, r0
34007850:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007854:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007858:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400785c:	f7fe bb3f 	b.w	34005ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34007860:	4a73      	ldr	r2, [pc, #460]	@ (34007a30 <HAL_RCCEx_PeriphCLKConfig+0x277c>)
34007862:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007864:	bf02      	ittt	eq
34007866:	2240      	moveq	r2, #64	@ 0x40
34007868:	4b6c      	ldreq	r3, [pc, #432]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400786a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400786e:	f7fe bb38 	b.w	34005ee2 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34007872:	4a70      	ldr	r2, [pc, #448]	@ (34007a34 <HAL_RCCEx_PeriphCLKConfig+0x2780>)
34007874:	4293      	cmp	r3, r2
34007876:	d124      	bne.n	340078c2 <HAL_RCCEx_PeriphCLKConfig+0x260e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007878:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400787a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400787e:	d004      	beq.n	3400788a <HAL_RCCEx_PeriphCLKConfig+0x25d6>
34007880:	f44f 6186 	mov.w	r1, #1072	@ 0x430
34007884:	4864      	ldr	r0, [pc, #400]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007886:	f7f9 fd73 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400788a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400788c:	3b01      	subs	r3, #1
3400788e:	2bff      	cmp	r3, #255	@ 0xff
34007890:	d904      	bls.n	3400789c <HAL_RCCEx_PeriphCLKConfig+0x25e8>
34007892:	f240 4131 	movw	r1, #1073	@ 0x431
34007896:	4860      	ldr	r0, [pc, #384]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007898:	f7f9 fd6a 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400789c:	4a5f      	ldr	r2, [pc, #380]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400789e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340078a0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340078a4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340078a6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340078aa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340078ae:	3901      	subs	r1, #1
340078b0:	4303      	orrs	r3, r0
340078b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340078b6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340078ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340078be:	f7fe bb52 	b.w	34005f66 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
340078c2:	4a5d      	ldr	r2, [pc, #372]	@ (34007a38 <HAL_RCCEx_PeriphCLKConfig+0x2784>)
340078c4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078c6:	bf02      	ittt	eq
340078c8:	2240      	moveq	r2, #64	@ 0x40
340078ca:	4b54      	ldreq	r3, [pc, #336]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340078cc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078d0:	f7fe bb4b 	b.w	34005f6a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
340078d4:	4a59      	ldr	r2, [pc, #356]	@ (34007a3c <HAL_RCCEx_PeriphCLKConfig+0x2788>)
340078d6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078d8:	bf02      	ittt	eq
340078da:	2240      	moveq	r2, #64	@ 0x40
340078dc:	4b4f      	ldreq	r3, [pc, #316]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340078de:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078e2:	f7fe bb86 	b.w	34005ff2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
340078e6:	4a56      	ldr	r2, [pc, #344]	@ (34007a40 <HAL_RCCEx_PeriphCLKConfig+0x278c>)
340078e8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078ea:	bf02      	ittt	eq
340078ec:	2240      	moveq	r2, #64	@ 0x40
340078ee:	4b4b      	ldreq	r3, [pc, #300]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340078f0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078f4:	f7fe bbc1 	b.w	3400607a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
340078f8:	4a52      	ldr	r2, [pc, #328]	@ (34007a44 <HAL_RCCEx_PeriphCLKConfig+0x2790>)
340078fa:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078fc:	bf02      	ittt	eq
340078fe:	2240      	moveq	r2, #64	@ 0x40
34007900:	4b46      	ldreq	r3, [pc, #280]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007902:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007906:	f7fe bc17 	b.w	34006138 <HAL_RCCEx_PeriphCLKConfig+0xe84>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
3400790a:	4a4f      	ldr	r2, [pc, #316]	@ (34007a48 <HAL_RCCEx_PeriphCLKConfig+0x2794>)
3400790c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400790e:	bf02      	ittt	eq
34007910:	2240      	moveq	r2, #64	@ 0x40
34007912:	4b42      	ldreq	r3, [pc, #264]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007914:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007918:	f7fe bc52 	b.w	340061c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
3400791c:	4a4b      	ldr	r2, [pc, #300]	@ (34007a4c <HAL_RCCEx_PeriphCLKConfig+0x2798>)
3400791e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007920:	bf02      	ittt	eq
34007922:	2240      	moveq	r2, #64	@ 0x40
34007924:	4b3d      	ldreq	r3, [pc, #244]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007926:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400792a:	f7fe bc8d 	b.w	34006248 <HAL_RCCEx_PeriphCLKConfig+0xf94>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3400792e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34007932:	d124      	bne.n	3400797e <HAL_RCCEx_PeriphCLKConfig+0x26ca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007934:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007936:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400793a:	d004      	beq.n	34007946 <HAL_RCCEx_PeriphCLKConfig+0x2692>
3400793c:	f240 41fd 	movw	r1, #1277	@ 0x4fd
34007940:	4835      	ldr	r0, [pc, #212]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007942:	f7f9 fd15 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007946:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007948:	3b01      	subs	r3, #1
3400794a:	2bff      	cmp	r3, #255	@ 0xff
3400794c:	d904      	bls.n	34007958 <HAL_RCCEx_PeriphCLKConfig+0x26a4>
3400794e:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34007952:	4831      	ldr	r0, [pc, #196]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34007954:	f7f9 fd0c 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007958:	4a30      	ldr	r2, [pc, #192]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400795a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400795c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007960:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007962:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007966:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400796a:	3901      	subs	r1, #1
3400796c:	4303      	orrs	r3, r0
3400796e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007972:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007976:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400797a:	f7fe bca7 	b.w	340062cc <HAL_RCCEx_PeriphCLKConfig+0x1018>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
3400797e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007982:	bf02      	ittt	eq
34007984:	2240      	moveq	r2, #64	@ 0x40
34007986:	4b25      	ldreq	r3, [pc, #148]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007988:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400798c:	f7fe bca0 	b.w	340062d0 <HAL_RCCEx_PeriphCLKConfig+0x101c>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34007990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007994:	bf02      	ittt	eq
34007996:	2240      	moveq	r2, #64	@ 0x40
34007998:	4b20      	ldreq	r3, [pc, #128]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3400799a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400799e:	f7fe bcdd 	b.w	3400635c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
340079a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340079a6:	d123      	bne.n	340079f0 <HAL_RCCEx_PeriphCLKConfig+0x273c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340079a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340079aa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340079ae:	d004      	beq.n	340079ba <HAL_RCCEx_PeriphCLKConfig+0x2706>
340079b0:	f240 514a 	movw	r1, #1354	@ 0x54a
340079b4:	4818      	ldr	r0, [pc, #96]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340079b6:	f7f9 fcdb 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340079ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340079bc:	3b01      	subs	r3, #1
340079be:	2bff      	cmp	r3, #255	@ 0xff
340079c0:	d904      	bls.n	340079cc <HAL_RCCEx_PeriphCLKConfig+0x2718>
340079c2:	f240 514b 	movw	r1, #1355	@ 0x54b
340079c6:	4814      	ldr	r0, [pc, #80]	@ (34007a18 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340079c8:	f7f9 fcd2 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340079cc:	4a13      	ldr	r2, [pc, #76]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340079ce:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340079d0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340079d4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340079d6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340079da:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340079de:	3901      	subs	r1, #1
340079e0:	4303      	orrs	r3, r0
340079e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340079e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340079ea:	2380      	movs	r3, #128	@ 0x80
340079ec:	f7fe bcf8 	b.w	340063e0 <HAL_RCCEx_PeriphCLKConfig+0x112c>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
340079f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079f4:	bf02      	ittt	eq
340079f6:	2240      	moveq	r2, #64	@ 0x40
340079f8:	4b08      	ldreq	r3, [pc, #32]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340079fa:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079fe:	f7fe bcf1 	b.w	340063e4 <HAL_RCCEx_PeriphCLKConfig+0x1130>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34007a02:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a04:	bf02      	ittt	eq
34007a06:	2240      	moveq	r2, #64	@ 0x40
34007a08:	4b04      	ldreq	r3, [pc, #16]	@ (34007a1c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34007a0a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a0e:	f7fe bd3b 	b.w	34006488 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
34007a12:	bf00      	nop
34007a14:	0703080c 	.word	0x0703080c
34007a18:	34010a09 	.word	0x34010a09
34007a1c:	56028000 	.word	0x56028000
34007a20:	0701080c 	.word	0x0701080c
34007a24:	07030c0c 	.word	0x07030c0c
34007a28:	07010c0c 	.word	0x07010c0c
34007a2c:	0703100c 	.word	0x0703100c
34007a30:	0701100c 	.word	0x0701100c
34007a34:	0703140c 	.word	0x0703140c
34007a38:	0701140c 	.word	0x0701140c
34007a3c:	0701082c 	.word	0x0701082c
34007a40:	07010c2c 	.word	0x07010c2c
34007a44:	0701102c 	.word	0x0701102c
34007a48:	0701142c 	.word	0x0701142c
34007a4c:	0701182c 	.word	0x0701182c
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34007a50:	4aa8      	ldr	r2, [pc, #672]	@ (34007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2a40>)
34007a52:	4293      	cmp	r3, r2
34007a54:	d123      	bne.n	34007a9e <HAL_RCCEx_PeriphCLKConfig+0x27ea>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007a56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007a58:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007a5c:	d004      	beq.n	34007a68 <HAL_RCCEx_PeriphCLKConfig+0x27b4>
34007a5e:	f240 5197 	movw	r1, #1431	@ 0x597
34007a62:	48a5      	ldr	r0, [pc, #660]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007a64:	f7f9 fc84 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007a68:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007a6a:	3b01      	subs	r3, #1
34007a6c:	2bff      	cmp	r3, #255	@ 0xff
34007a6e:	d904      	bls.n	34007a7a <HAL_RCCEx_PeriphCLKConfig+0x27c6>
34007a70:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
34007a74:	48a0      	ldr	r0, [pc, #640]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007a76:	f7f9 fc7b 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007a7a:	4aa0      	ldr	r2, [pc, #640]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007a7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007a7e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007a82:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007a84:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007a88:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007a8c:	3901      	subs	r1, #1
34007a8e:	4303      	orrs	r3, r0
34007a90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007a94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007a98:	2380      	movs	r3, #128	@ 0x80
34007a9a:	f7fe bd3a 	b.w	34006512 <HAL_RCCEx_PeriphCLKConfig+0x125e>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34007a9e:	4a98      	ldr	r2, [pc, #608]	@ (34007d00 <HAL_RCCEx_PeriphCLKConfig+0x2a4c>)
34007aa0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007aa2:	bf02      	ittt	eq
34007aa4:	2240      	moveq	r2, #64	@ 0x40
34007aa6:	4b95      	ldreq	r3, [pc, #596]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007aa8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007aac:	f7fe bd33 	b.w	34006516 <HAL_RCCEx_PeriphCLKConfig+0x1262>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34007ab0:	4a94      	ldr	r2, [pc, #592]	@ (34007d04 <HAL_RCCEx_PeriphCLKConfig+0x2a50>)
34007ab2:	4293      	cmp	r3, r2
34007ab4:	d123      	bne.n	34007afe <HAL_RCCEx_PeriphCLKConfig+0x284a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007ab6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007ab8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007abc:	d004      	beq.n	34007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2814>
34007abe:	f240 51c4 	movw	r1, #1476	@ 0x5c4
34007ac2:	488d      	ldr	r0, [pc, #564]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007ac4:	f7f9 fc54 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007ac8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007aca:	3b01      	subs	r3, #1
34007acc:	2bff      	cmp	r3, #255	@ 0xff
34007ace:	d904      	bls.n	34007ada <HAL_RCCEx_PeriphCLKConfig+0x2826>
34007ad0:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34007ad4:	4888      	ldr	r0, [pc, #544]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007ad6:	f7f9 fc4b 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007ada:	4a88      	ldr	r2, [pc, #544]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007adc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007ade:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007ae2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007ae4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007ae8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007aec:	3901      	subs	r1, #1
34007aee:	4303      	orrs	r3, r0
34007af0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007af4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007af8:	2380      	movs	r3, #128	@ 0x80
34007afa:	f7fe bd4b 	b.w	34006594 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34007afe:	4a82      	ldr	r2, [pc, #520]	@ (34007d08 <HAL_RCCEx_PeriphCLKConfig+0x2a54>)
34007b00:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b02:	bf02      	ittt	eq
34007b04:	2240      	moveq	r2, #64	@ 0x40
34007b06:	4b7d      	ldreq	r3, [pc, #500]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007b08:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b0c:	f7fe bd44 	b.w	34006598 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34007b10:	2b03      	cmp	r3, #3
34007b12:	d123      	bne.n	34007b5c <HAL_RCCEx_PeriphCLKConfig+0x28a8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007b14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007b16:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007b1a:	d004      	beq.n	34007b26 <HAL_RCCEx_PeriphCLKConfig+0x2872>
34007b1c:	f240 51f1 	movw	r1, #1521	@ 0x5f1
34007b20:	4875      	ldr	r0, [pc, #468]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007b22:	f7f9 fc25 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007b26:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007b28:	3b01      	subs	r3, #1
34007b2a:	2bff      	cmp	r3, #255	@ 0xff
34007b2c:	d904      	bls.n	34007b38 <HAL_RCCEx_PeriphCLKConfig+0x2884>
34007b2e:	f240 51f2 	movw	r1, #1522	@ 0x5f2
34007b32:	4871      	ldr	r0, [pc, #452]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007b34:	f7f9 fc1c 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007b38:	4a70      	ldr	r2, [pc, #448]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007b3a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007b3c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007b40:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007b42:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b46:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b4a:	3901      	subs	r1, #1
34007b4c:	4303      	orrs	r3, r0
34007b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007b56:	2380      	movs	r3, #128	@ 0x80
34007b58:	f7fe bd55 	b.w	34006606 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34007b5c:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b5e:	bf02      	ittt	eq
34007b60:	2240      	moveq	r2, #64	@ 0x40
34007b62:	4b66      	ldreq	r3, [pc, #408]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007b64:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b68:	f7fe bd4f 	b.w	3400660a <HAL_RCCEx_PeriphCLKConfig+0x1356>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34007b6c:	4a67      	ldr	r2, [pc, #412]	@ (34007d0c <HAL_RCCEx_PeriphCLKConfig+0x2a58>)
34007b6e:	4293      	cmp	r3, r2
34007b70:	d124      	bne.n	34007bbc <HAL_RCCEx_PeriphCLKConfig+0x2908>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007b72:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007b74:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007b78:	d004      	beq.n	34007b84 <HAL_RCCEx_PeriphCLKConfig+0x28d0>
34007b7a:	f240 611e 	movw	r1, #1566	@ 0x61e
34007b7e:	485e      	ldr	r0, [pc, #376]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007b80:	f7f9 fbf6 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007b84:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007b86:	3b01      	subs	r3, #1
34007b88:	2bff      	cmp	r3, #255	@ 0xff
34007b8a:	d904      	bls.n	34007b96 <HAL_RCCEx_PeriphCLKConfig+0x28e2>
34007b8c:	f240 611f 	movw	r1, #1567	@ 0x61f
34007b90:	4859      	ldr	r0, [pc, #356]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007b92:	f7f9 fbed 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007b96:	4a59      	ldr	r2, [pc, #356]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007b98:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007b9a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007b9e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007ba0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007ba4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007ba8:	3901      	subs	r1, #1
34007baa:	4303      	orrs	r3, r0
34007bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007bb0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007bb8:	f7fe bd72 	b.w	340066a0 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34007bbc:	4a54      	ldr	r2, [pc, #336]	@ (34007d10 <HAL_RCCEx_PeriphCLKConfig+0x2a5c>)
34007bbe:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007bc0:	bf02      	ittt	eq
34007bc2:	2240      	moveq	r2, #64	@ 0x40
34007bc4:	4b4d      	ldreq	r3, [pc, #308]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007bc6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007bca:	f7fe bd6b 	b.w	340066a4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34007bce:	4a51      	ldr	r2, [pc, #324]	@ (34007d14 <HAL_RCCEx_PeriphCLKConfig+0x2a60>)
34007bd0:	4293      	cmp	r3, r2
34007bd2:	d124      	bne.n	34007c1e <HAL_RCCEx_PeriphCLKConfig+0x296a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007bd4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007bd6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007bda:	d004      	beq.n	34007be6 <HAL_RCCEx_PeriphCLKConfig+0x2932>
34007bdc:	f240 614b 	movw	r1, #1611	@ 0x64b
34007be0:	4845      	ldr	r0, [pc, #276]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007be2:	f7f9 fbc5 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007be6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007be8:	3b01      	subs	r3, #1
34007bea:	2bff      	cmp	r3, #255	@ 0xff
34007bec:	d904      	bls.n	34007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2944>
34007bee:	f240 614c 	movw	r1, #1612	@ 0x64c
34007bf2:	4841      	ldr	r0, [pc, #260]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007bf4:	f7f9 fbbc 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007bf8:	4a40      	ldr	r2, [pc, #256]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007bfa:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007bfc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007c00:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007c02:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c06:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c0a:	3901      	subs	r1, #1
34007c0c:	4303      	orrs	r3, r0
34007c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007c12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007c16:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007c1a:	f7fe bd88 	b.w	3400672e <HAL_RCCEx_PeriphCLKConfig+0x147a>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34007c1e:	4a3e      	ldr	r2, [pc, #248]	@ (34007d18 <HAL_RCCEx_PeriphCLKConfig+0x2a64>)
34007c20:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c22:	bf02      	ittt	eq
34007c24:	2240      	moveq	r2, #64	@ 0x40
34007c26:	4b35      	ldreq	r3, [pc, #212]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c28:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c2c:	f7fe bd81 	b.w	34006732 <HAL_RCCEx_PeriphCLKConfig+0x147e>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34007c30:	4a3a      	ldr	r2, [pc, #232]	@ (34007d1c <HAL_RCCEx_PeriphCLKConfig+0x2a68>)
34007c32:	4293      	cmp	r3, r2
34007c34:	d124      	bne.n	34007c80 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007c36:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007c38:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007c3c:	d004      	beq.n	34007c48 <HAL_RCCEx_PeriphCLKConfig+0x2994>
34007c3e:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
34007c42:	482d      	ldr	r0, [pc, #180]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c44:	f7f9 fb94 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007c48:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007c4a:	3b01      	subs	r3, #1
34007c4c:	2bff      	cmp	r3, #255	@ 0xff
34007c4e:	d904      	bls.n	34007c5a <HAL_RCCEx_PeriphCLKConfig+0x29a6>
34007c50:	f240 6179 	movw	r1, #1657	@ 0x679
34007c54:	4828      	ldr	r0, [pc, #160]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007c56:	f7f9 fb8b 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007c5a:	4a28      	ldr	r2, [pc, #160]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c5c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007c5e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007c62:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007c64:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c68:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c6c:	3901      	subs	r1, #1
34007c6e:	4303      	orrs	r3, r0
34007c70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007c74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007c7c:	f7fe bdb8 	b.w	340067f0 <HAL_RCCEx_PeriphCLKConfig+0x153c>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34007c80:	4a27      	ldr	r2, [pc, #156]	@ (34007d20 <HAL_RCCEx_PeriphCLKConfig+0x2a6c>)
34007c82:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c84:	bf02      	ittt	eq
34007c86:	2240      	moveq	r2, #64	@ 0x40
34007c88:	4b1c      	ldreq	r3, [pc, #112]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007c8a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c8e:	f7fe bdb1 	b.w	340067f4 <HAL_RCCEx_PeriphCLKConfig+0x1540>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34007c92:	4a24      	ldr	r2, [pc, #144]	@ (34007d24 <HAL_RCCEx_PeriphCLKConfig+0x2a70>)
34007c94:	4293      	cmp	r3, r2
34007c96:	d124      	bne.n	34007ce2 <HAL_RCCEx_PeriphCLKConfig+0x2a2e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007c98:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007c9a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007c9e:	d004      	beq.n	34007caa <HAL_RCCEx_PeriphCLKConfig+0x29f6>
34007ca0:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34007ca4:	4814      	ldr	r0, [pc, #80]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007ca6:	f7f9 fb63 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007caa:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007cac:	3b01      	subs	r3, #1
34007cae:	2bff      	cmp	r3, #255	@ 0xff
34007cb0:	d904      	bls.n	34007cbc <HAL_RCCEx_PeriphCLKConfig+0x2a08>
34007cb2:	f240 61a6 	movw	r1, #1702	@ 0x6a6
34007cb6:	4810      	ldr	r0, [pc, #64]	@ (34007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34007cb8:	f7f9 fb5a 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007cbc:	4a0f      	ldr	r2, [pc, #60]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007cbe:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007cc0:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007cc4:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007cc6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007cca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007cce:	3901      	subs	r1, #1
34007cd0:	4303      	orrs	r3, r0
34007cd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007cd6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007cda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007cde:	f7fe bdcf 	b.w	34006880 <HAL_RCCEx_PeriphCLKConfig+0x15cc>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34007ce2:	4a11      	ldr	r2, [pc, #68]	@ (34007d28 <HAL_RCCEx_PeriphCLKConfig+0x2a74>)
34007ce4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ce6:	bf02      	ittt	eq
34007ce8:	2240      	moveq	r2, #64	@ 0x40
34007cea:	4b04      	ldreq	r3, [pc, #16]	@ (34007cfc <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34007cec:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007cf0:	f7fe bdc8 	b.w	34006884 <HAL_RCCEx_PeriphCLKConfig+0x15d0>
34007cf4:	07031418 	.word	0x07031418
34007cf8:	34010a09 	.word	0x34010a09
34007cfc:	56028000 	.word	0x56028000
34007d00:	07011418 	.word	0x07011418
34007d04:	07031818 	.word	0x07031818
34007d08:	07011818 	.word	0x07011818
34007d0c:	07030420 	.word	0x07030420
34007d10:	07010420 	.word	0x07010420
34007d14:	07030820 	.word	0x07030820
34007d18:	07010820 	.word	0x07010820
34007d1c:	07030c20 	.word	0x07030c20
34007d20:	07010c20 	.word	0x07010c20
34007d24:	07031020 	.word	0x07031020
34007d28:	07011020 	.word	0x07011020
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34007d2c:	4aab      	ldr	r2, [pc, #684]	@ (34007fdc <HAL_RCCEx_PeriphCLKConfig+0x2d28>)
34007d2e:	4293      	cmp	r3, r2
34007d30:	d124      	bne.n	34007d7c <HAL_RCCEx_PeriphCLKConfig+0x2ac8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007d32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007d34:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007d38:	d004      	beq.n	34007d44 <HAL_RCCEx_PeriphCLKConfig+0x2a90>
34007d3a:	f240 61d2 	movw	r1, #1746	@ 0x6d2
34007d3e:	48a8      	ldr	r0, [pc, #672]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007d40:	f7f9 fb16 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007d44:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007d46:	3b01      	subs	r3, #1
34007d48:	2bff      	cmp	r3, #255	@ 0xff
34007d4a:	d904      	bls.n	34007d56 <HAL_RCCEx_PeriphCLKConfig+0x2aa2>
34007d4c:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34007d50:	48a3      	ldr	r0, [pc, #652]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007d52:	f7f9 fb0d 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007d56:	4aa3      	ldr	r2, [pc, #652]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007d58:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007d5a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007d5e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007d60:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007d64:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007d68:	3901      	subs	r1, #1
34007d6a:	4303      	orrs	r3, r0
34007d6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007d70:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007d78:	f7fe bdca 	b.w	34006910 <HAL_RCCEx_PeriphCLKConfig+0x165c>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34007d7c:	4a9a      	ldr	r2, [pc, #616]	@ (34007fe8 <HAL_RCCEx_PeriphCLKConfig+0x2d34>)
34007d7e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007d80:	bf02      	ittt	eq
34007d82:	2240      	moveq	r2, #64	@ 0x40
34007d84:	4b97      	ldreq	r3, [pc, #604]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007d86:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007d8a:	f7fe bdc3 	b.w	34006914 <HAL_RCCEx_PeriphCLKConfig+0x1660>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34007d8e:	4a97      	ldr	r2, [pc, #604]	@ (34007fec <HAL_RCCEx_PeriphCLKConfig+0x2d38>)
34007d90:	4293      	cmp	r3, r2
34007d92:	d124      	bne.n	34007dde <HAL_RCCEx_PeriphCLKConfig+0x2b2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007d94:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007d96:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007d9a:	d004      	beq.n	34007da6 <HAL_RCCEx_PeriphCLKConfig+0x2af2>
34007d9c:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34007da0:	488f      	ldr	r0, [pc, #572]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007da2:	f7f9 fae5 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007da6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007da8:	3b01      	subs	r3, #1
34007daa:	2bff      	cmp	r3, #255	@ 0xff
34007dac:	d904      	bls.n	34007db8 <HAL_RCCEx_PeriphCLKConfig+0x2b04>
34007dae:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34007db2:	488b      	ldr	r0, [pc, #556]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007db4:	f7f9 fadc 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007db8:	4a8a      	ldr	r2, [pc, #552]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007dba:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007dbc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007dc0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007dc2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007dc6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007dca:	3901      	subs	r1, #1
34007dcc:	4303      	orrs	r3, r0
34007dce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007dd2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007dd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007dda:	f7fe bde0 	b.w	3400699e <HAL_RCCEx_PeriphCLKConfig+0x16ea>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34007dde:	4a84      	ldr	r2, [pc, #528]	@ (34007ff0 <HAL_RCCEx_PeriphCLKConfig+0x2d3c>)
34007de0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007de2:	bf02      	ittt	eq
34007de4:	2240      	moveq	r2, #64	@ 0x40
34007de6:	4b7f      	ldreq	r3, [pc, #508]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007de8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007dec:	f7fe bdd9 	b.w	340069a2 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34007df0:	4a80      	ldr	r2, [pc, #512]	@ (34007ff4 <HAL_RCCEx_PeriphCLKConfig+0x2d40>)
34007df2:	4293      	cmp	r3, r2
34007df4:	d124      	bne.n	34007e40 <HAL_RCCEx_PeriphCLKConfig+0x2b8c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007df6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007df8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007dfc:	d004      	beq.n	34007e08 <HAL_RCCEx_PeriphCLKConfig+0x2b54>
34007dfe:	f240 712c 	movw	r1, #1836	@ 0x72c
34007e02:	4877      	ldr	r0, [pc, #476]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007e04:	f7f9 fab4 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007e08:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007e0a:	3b01      	subs	r3, #1
34007e0c:	2bff      	cmp	r3, #255	@ 0xff
34007e0e:	d904      	bls.n	34007e1a <HAL_RCCEx_PeriphCLKConfig+0x2b66>
34007e10:	f240 712d 	movw	r1, #1837	@ 0x72d
34007e14:	4872      	ldr	r0, [pc, #456]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007e16:	f7f9 faab 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007e1a:	4a72      	ldr	r2, [pc, #456]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007e1c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007e1e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007e22:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007e24:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e28:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e2c:	3901      	subs	r1, #1
34007e2e:	4303      	orrs	r3, r0
34007e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e34:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007e38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007e3c:	f7fe bdf7 	b.w	34006a2e <HAL_RCCEx_PeriphCLKConfig+0x177a>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34007e40:	4a6d      	ldr	r2, [pc, #436]	@ (34007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d44>)
34007e42:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007e44:	bf02      	ittt	eq
34007e46:	2240      	moveq	r2, #64	@ 0x40
34007e48:	4b66      	ldreq	r3, [pc, #408]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007e4a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007e4e:	f7fe bdf0 	b.w	34006a32 <HAL_RCCEx_PeriphCLKConfig+0x177e>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34007e52:	4a6a      	ldr	r2, [pc, #424]	@ (34007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d48>)
34007e54:	4293      	cmp	r3, r2
34007e56:	d124      	bne.n	34007ea2 <HAL_RCCEx_PeriphCLKConfig+0x2bee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007e58:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007e5a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e5e:	d004      	beq.n	34007e6a <HAL_RCCEx_PeriphCLKConfig+0x2bb6>
34007e60:	f240 7159 	movw	r1, #1881	@ 0x759
34007e64:	485e      	ldr	r0, [pc, #376]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007e66:	f7f9 fa83 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007e6a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007e6c:	3b01      	subs	r3, #1
34007e6e:	2bff      	cmp	r3, #255	@ 0xff
34007e70:	d904      	bls.n	34007e7c <HAL_RCCEx_PeriphCLKConfig+0x2bc8>
34007e72:	f240 715a 	movw	r1, #1882	@ 0x75a
34007e76:	485a      	ldr	r0, [pc, #360]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007e78:	f7f9 fa7a 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007e7c:	4a59      	ldr	r2, [pc, #356]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007e7e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007e80:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007e84:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007e86:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e8a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e8e:	3901      	subs	r1, #1
34007e90:	4303      	orrs	r3, r0
34007e92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e96:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007e9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007e9e:	f7fe be27 	b.w	34006af0 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34007ea2:	4a57      	ldr	r2, [pc, #348]	@ (34008000 <HAL_RCCEx_PeriphCLKConfig+0x2d4c>)
34007ea4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ea6:	bf02      	ittt	eq
34007ea8:	2240      	moveq	r2, #64	@ 0x40
34007eaa:	4b4e      	ldreq	r3, [pc, #312]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007eac:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007eb0:	f7fe be20 	b.w	34006af4 <HAL_RCCEx_PeriphCLKConfig+0x1840>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34007eb4:	4a53      	ldr	r2, [pc, #332]	@ (34008004 <HAL_RCCEx_PeriphCLKConfig+0x2d50>)
34007eb6:	4293      	cmp	r3, r2
34007eb8:	d124      	bne.n	34007f04 <HAL_RCCEx_PeriphCLKConfig+0x2c50>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007eba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ebc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ec0:	d004      	beq.n	34007ecc <HAL_RCCEx_PeriphCLKConfig+0x2c18>
34007ec2:	f240 7186 	movw	r1, #1926	@ 0x786
34007ec6:	4846      	ldr	r0, [pc, #280]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007ec8:	f7f9 fa52 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007ecc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007ece:	3b01      	subs	r3, #1
34007ed0:	2bff      	cmp	r3, #255	@ 0xff
34007ed2:	d904      	bls.n	34007ede <HAL_RCCEx_PeriphCLKConfig+0x2c2a>
34007ed4:	f240 7187 	movw	r1, #1927	@ 0x787
34007ed8:	4841      	ldr	r0, [pc, #260]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007eda:	f7f9 fa49 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007ede:	4a41      	ldr	r2, [pc, #260]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007ee0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007ee2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007ee6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007ee8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007eec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007ef0:	3901      	subs	r1, #1
34007ef2:	4303      	orrs	r3, r0
34007ef4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ef8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007efc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007f00:	f7fe be3e 	b.w	34006b80 <HAL_RCCEx_PeriphCLKConfig+0x18cc>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34007f04:	4a40      	ldr	r2, [pc, #256]	@ (34008008 <HAL_RCCEx_PeriphCLKConfig+0x2d54>)
34007f06:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f08:	bf02      	ittt	eq
34007f0a:	2240      	moveq	r2, #64	@ 0x40
34007f0c:	4b35      	ldreq	r3, [pc, #212]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007f0e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f12:	f7fe be37 	b.w	34006b84 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34007f16:	4a3d      	ldr	r2, [pc, #244]	@ (3400800c <HAL_RCCEx_PeriphCLKConfig+0x2d58>)
34007f18:	4293      	cmp	r3, r2
34007f1a:	d124      	bne.n	34007f66 <HAL_RCCEx_PeriphCLKConfig+0x2cb2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007f1c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007f1e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007f22:	d004      	beq.n	34007f2e <HAL_RCCEx_PeriphCLKConfig+0x2c7a>
34007f24:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34007f28:	482d      	ldr	r0, [pc, #180]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f2a:	f7f9 fa21 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007f2e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007f30:	3b01      	subs	r3, #1
34007f32:	2bff      	cmp	r3, #255	@ 0xff
34007f34:	d904      	bls.n	34007f40 <HAL_RCCEx_PeriphCLKConfig+0x2c8c>
34007f36:	f240 71b4 	movw	r1, #1972	@ 0x7b4
34007f3a:	4829      	ldr	r0, [pc, #164]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f3c:	f7f9 fa18 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007f40:	4a28      	ldr	r2, [pc, #160]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007f42:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007f44:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007f48:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007f4a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007f4e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007f52:	3901      	subs	r1, #1
34007f54:	4303      	orrs	r3, r0
34007f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007f5a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007f5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007f62:	f7fe be55 	b.w	34006c10 <HAL_RCCEx_PeriphCLKConfig+0x195c>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34007f66:	4a2a      	ldr	r2, [pc, #168]	@ (34008010 <HAL_RCCEx_PeriphCLKConfig+0x2d5c>)
34007f68:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f6a:	bf02      	ittt	eq
34007f6c:	2240      	moveq	r2, #64	@ 0x40
34007f6e:	4b1d      	ldreq	r3, [pc, #116]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007f70:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f74:	f7fe be4e 	b.w	34006c14 <HAL_RCCEx_PeriphCLKConfig+0x1960>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34007f78:	4a26      	ldr	r2, [pc, #152]	@ (34008014 <HAL_RCCEx_PeriphCLKConfig+0x2d60>)
34007f7a:	4293      	cmp	r3, r2
34007f7c:	d124      	bne.n	34007fc8 <HAL_RCCEx_PeriphCLKConfig+0x2d14>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007f7e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007f80:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007f84:	d004      	beq.n	34007f90 <HAL_RCCEx_PeriphCLKConfig+0x2cdc>
34007f86:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
34007f8a:	4815      	ldr	r0, [pc, #84]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f8c:	f7f9 f9f0 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007f90:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007f92:	3b01      	subs	r3, #1
34007f94:	2bff      	cmp	r3, #255	@ 0xff
34007f96:	d904      	bls.n	34007fa2 <HAL_RCCEx_PeriphCLKConfig+0x2cee>
34007f98:	f240 71e1 	movw	r1, #2017	@ 0x7e1
34007f9c:	4810      	ldr	r0, [pc, #64]	@ (34007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34007f9e:	f7f9 f9e7 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007fa2:	4a10      	ldr	r2, [pc, #64]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007fa4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007fa6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007faa:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007fac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007fb0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007fb4:	3901      	subs	r1, #1
34007fb6:	4303      	orrs	r3, r0
34007fb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007fbc:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007fc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007fc4:	f7fe be6c 	b.w	34006ca0 <HAL_RCCEx_PeriphCLKConfig+0x19ec>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34007fc8:	4a13      	ldr	r2, [pc, #76]	@ (34008018 <HAL_RCCEx_PeriphCLKConfig+0x2d64>)
34007fca:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007fcc:	bf02      	ittt	eq
34007fce:	2240      	moveq	r2, #64	@ 0x40
34007fd0:	4b04      	ldreq	r3, [pc, #16]	@ (34007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34007fd2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007fd6:	f7fe be65 	b.w	34006ca4 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
34007fda:	bf00      	nop
34007fdc:	07031420 	.word	0x07031420
34007fe0:	34010a09 	.word	0x34010a09
34007fe4:	56028000 	.word	0x56028000
34007fe8:	07011420 	.word	0x07011420
34007fec:	07031820 	.word	0x07031820
34007ff0:	07011820 	.word	0x07011820
34007ff4:	07030030 	.word	0x07030030
34007ff8:	07010030 	.word	0x07010030
34007ffc:	07030430 	.word	0x07030430
34008000:	07010430 	.word	0x07010430
34008004:	07030830 	.word	0x07030830
34008008:	07010830 	.word	0x07010830
3400800c:	07030c30 	.word	0x07030c30
34008010:	07010c30 	.word	0x07010c30
34008014:	07031030 	.word	0x07031030
34008018:	07011030 	.word	0x07011030
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
3400801c:	4a8b      	ldr	r2, [pc, #556]	@ (3400824c <HAL_RCCEx_PeriphCLKConfig+0x2f98>)
3400801e:	4293      	cmp	r3, r2
34008020:	d124      	bne.n	3400806c <HAL_RCCEx_PeriphCLKConfig+0x2db8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008022:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008024:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008028:	d004      	beq.n	34008034 <HAL_RCCEx_PeriphCLKConfig+0x2d80>
3400802a:	f640 010d 	movw	r1, #2061	@ 0x80d
3400802e:	4888      	ldr	r0, [pc, #544]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008030:	f7f9 f99e 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008034:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008036:	3b01      	subs	r3, #1
34008038:	2bff      	cmp	r3, #255	@ 0xff
3400803a:	d904      	bls.n	34008046 <HAL_RCCEx_PeriphCLKConfig+0x2d92>
3400803c:	f640 010e 	movw	r1, #2062	@ 0x80e
34008040:	4883      	ldr	r0, [pc, #524]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008042:	f7f9 f995 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008046:	4a83      	ldr	r2, [pc, #524]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008048:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400804a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400804e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008050:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008054:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008058:	3901      	subs	r1, #1
3400805a:	4303      	orrs	r3, r0
3400805c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008060:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008064:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008068:	f7fe be62 	b.w	34006d30 <HAL_RCCEx_PeriphCLKConfig+0x1a7c>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3400806c:	4a7a      	ldr	r2, [pc, #488]	@ (34008258 <HAL_RCCEx_PeriphCLKConfig+0x2fa4>)
3400806e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008070:	bf02      	ittt	eq
34008072:	2240      	moveq	r2, #64	@ 0x40
34008074:	4b77      	ldreq	r3, [pc, #476]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008076:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400807a:	f7fe be5b 	b.w	34006d34 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
3400807e:	4a77      	ldr	r2, [pc, #476]	@ (3400825c <HAL_RCCEx_PeriphCLKConfig+0x2fa8>)
34008080:	4293      	cmp	r3, r2
34008082:	d124      	bne.n	340080ce <HAL_RCCEx_PeriphCLKConfig+0x2e1a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008084:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008086:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400808a:	d004      	beq.n	34008096 <HAL_RCCEx_PeriphCLKConfig+0x2de2>
3400808c:	f640 013a 	movw	r1, #2106	@ 0x83a
34008090:	486f      	ldr	r0, [pc, #444]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008092:	f7f9 f96d 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008096:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008098:	3b01      	subs	r3, #1
3400809a:	2bff      	cmp	r3, #255	@ 0xff
3400809c:	d904      	bls.n	340080a8 <HAL_RCCEx_PeriphCLKConfig+0x2df4>
3400809e:	f640 013b 	movw	r1, #2107	@ 0x83b
340080a2:	486b      	ldr	r0, [pc, #428]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340080a4:	f7f9 f964 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340080a8:	4a6a      	ldr	r2, [pc, #424]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340080aa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340080ac:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340080b0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340080b2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340080b6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340080ba:	3901      	subs	r1, #1
340080bc:	4303      	orrs	r3, r0
340080be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340080c2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340080c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340080ca:	f7fe be79 	b.w	34006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
340080ce:	4a64      	ldr	r2, [pc, #400]	@ (34008260 <HAL_RCCEx_PeriphCLKConfig+0x2fac>)
340080d0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340080d2:	bf02      	ittt	eq
340080d4:	2240      	moveq	r2, #64	@ 0x40
340080d6:	4b5f      	ldreq	r3, [pc, #380]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340080d8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340080dc:	f7fe be72 	b.w	34006dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b10>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
340080e0:	4a60      	ldr	r2, [pc, #384]	@ (34008264 <HAL_RCCEx_PeriphCLKConfig+0x2fb0>)
340080e2:	4293      	cmp	r3, r2
340080e4:	d124      	bne.n	34008130 <HAL_RCCEx_PeriphCLKConfig+0x2e7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340080e6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340080e8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340080ec:	d004      	beq.n	340080f8 <HAL_RCCEx_PeriphCLKConfig+0x2e44>
340080ee:	f640 0167 	movw	r1, #2151	@ 0x867
340080f2:	4857      	ldr	r0, [pc, #348]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340080f4:	f7f9 f93c 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340080f8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340080fa:	3b01      	subs	r3, #1
340080fc:	2bff      	cmp	r3, #255	@ 0xff
340080fe:	d904      	bls.n	3400810a <HAL_RCCEx_PeriphCLKConfig+0x2e56>
34008100:	f640 0168 	movw	r1, #2152	@ 0x868
34008104:	4852      	ldr	r0, [pc, #328]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008106:	f7f9 f933 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400810a:	4a52      	ldr	r2, [pc, #328]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400810c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400810e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008112:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008114:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008118:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400811c:	3901      	subs	r1, #1
3400811e:	4303      	orrs	r3, r0
34008120:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008124:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008128:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400812c:	f7fe beac 	b.w	34006e88 <HAL_RCCEx_PeriphCLKConfig+0x1bd4>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34008130:	4a4d      	ldr	r2, [pc, #308]	@ (34008268 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
34008132:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008134:	bf02      	ittt	eq
34008136:	2240      	moveq	r2, #64	@ 0x40
34008138:	4b46      	ldreq	r3, [pc, #280]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400813a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400813e:	f7fe bea5 	b.w	34006e8c <HAL_RCCEx_PeriphCLKConfig+0x1bd8>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34008142:	4a4a      	ldr	r2, [pc, #296]	@ (3400826c <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
34008144:	4293      	cmp	r3, r2
34008146:	d124      	bne.n	34008192 <HAL_RCCEx_PeriphCLKConfig+0x2ede>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008148:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3400814a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400814e:	d004      	beq.n	3400815a <HAL_RCCEx_PeriphCLKConfig+0x2ea6>
34008150:	f640 0194 	movw	r1, #2196	@ 0x894
34008154:	483e      	ldr	r0, [pc, #248]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008156:	f7f9 f90b 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400815a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3400815c:	3b01      	subs	r3, #1
3400815e:	2bff      	cmp	r3, #255	@ 0xff
34008160:	d904      	bls.n	3400816c <HAL_RCCEx_PeriphCLKConfig+0x2eb8>
34008162:	f640 0195 	movw	r1, #2197	@ 0x895
34008166:	483a      	ldr	r0, [pc, #232]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34008168:	f7f9 f902 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400816c:	4a39      	ldr	r2, [pc, #228]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400816e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008170:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008174:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008176:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400817a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400817e:	3901      	subs	r1, #1
34008180:	4303      	orrs	r3, r0
34008182:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008186:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400818a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400818e:	f7fe bec3 	b.w	34006f18 <HAL_RCCEx_PeriphCLKConfig+0x1c64>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34008192:	4a37      	ldr	r2, [pc, #220]	@ (34008270 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
34008194:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008196:	bf02      	ittt	eq
34008198:	2240      	moveq	r2, #64	@ 0x40
3400819a:	4b2e      	ldreq	r3, [pc, #184]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400819c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340081a0:	f7fe bebc 	b.w	34006f1c <HAL_RCCEx_PeriphCLKConfig+0x1c68>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
340081a4:	4a33      	ldr	r2, [pc, #204]	@ (34008274 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
340081a6:	4293      	cmp	r3, r2
340081a8:	d124      	bne.n	340081f4 <HAL_RCCEx_PeriphCLKConfig+0x2f40>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340081aa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340081ac:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340081b0:	d004      	beq.n	340081bc <HAL_RCCEx_PeriphCLKConfig+0x2f08>
340081b2:	f640 01c1 	movw	r1, #2241	@ 0x8c1
340081b6:	4826      	ldr	r0, [pc, #152]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340081b8:	f7f9 f8da 	bl	34001370 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340081bc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340081be:	3b01      	subs	r3, #1
340081c0:	2bff      	cmp	r3, #255	@ 0xff
340081c2:	d904      	bls.n	340081ce <HAL_RCCEx_PeriphCLKConfig+0x2f1a>
340081c4:	f640 01c2 	movw	r1, #2242	@ 0x8c2
340081c8:	4821      	ldr	r0, [pc, #132]	@ (34008250 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340081ca:	f7f9 f8d1 	bl	34001370 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340081ce:	4a21      	ldr	r2, [pc, #132]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340081d0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340081d2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340081d6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340081d8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340081dc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340081e0:	3901      	subs	r1, #1
340081e2:	4303      	orrs	r3, r0
340081e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340081e8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340081ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340081f0:	f7fe beda 	b.w	34006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
340081f4:	4a20      	ldr	r2, [pc, #128]	@ (34008278 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
340081f6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340081f8:	bf02      	ittt	eq
340081fa:	2240      	moveq	r2, #64	@ 0x40
340081fc:	4b15      	ldreq	r3, [pc, #84]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340081fe:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008202:	f7fe bed3 	b.w	34006fac <HAL_RCCEx_PeriphCLKConfig+0x1cf8>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34008206:	f7fc ff39 	bl	3400507c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
3400820a:	f7fe bef5 	b.w	34006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3400820e:	f7fc ff35 	bl	3400507c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34008212:	f7fe bf13 	b.w	3400703c <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34008216:	4a19      	ldr	r2, [pc, #100]	@ (3400827c <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
34008218:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400821a:	bf02      	ittt	eq
3400821c:	2240      	moveq	r2, #64	@ 0x40
3400821e:	4b0d      	ldreq	r3, [pc, #52]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34008220:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008224:	f7fe bf4a 	b.w	340070bc <HAL_RCCEx_PeriphCLKConfig+0x1e08>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34008228:	f7fc ff28 	bl	3400507c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
3400822c:	f7fe bf53 	b.w	340070d6 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34008230:	4a13      	ldr	r2, [pc, #76]	@ (34008280 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
34008232:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008234:	bf02      	ittt	eq
34008236:	2240      	moveq	r2, #64	@ 0x40
34008238:	4b06      	ldreq	r3, [pc, #24]	@ (34008254 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3400823a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400823e:	f7fe bfa5 	b.w	3400718c <HAL_RCCEx_PeriphCLKConfig+0x1ed8>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34008242:	f7fc ff1b 	bl	3400507c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34008246:	f7fe bfae 	b.w	340071a6 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
3400824a:	bf00      	nop
3400824c:	07031430 	.word	0x07031430
34008250:	34010a09 	.word	0x34010a09
34008254:	56028000 	.word	0x56028000
34008258:	07011430 	.word	0x07011430
3400825c:	07031830 	.word	0x07031830
34008260:	07011830 	.word	0x07011830
34008264:	07031c30 	.word	0x07031c30
34008268:	07011c30 	.word	0x07011c30
3400826c:	07030034 	.word	0x07030034
34008270:	07010034 	.word	0x07010034
34008274:	07030434 	.word	0x07030434
34008278:	07010434 	.word	0x07010434
3400827c:	03010c14 	.word	0x03010c14
34008280:	03011414 	.word	0x03011414

34008284 <HAL_RCCEx_GetPLL1CLKFreq>:
{
34008284:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34008286:	4c1e      	ldr	r4, [pc, #120]	@ (34008300 <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
34008288:	6863      	ldr	r3, [r4, #4]
3400828a:	05d9      	lsls	r1, r3, #23
3400828c:	d506      	bpl.n	3400829c <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
3400828e:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34008292:	005a      	lsls	r2, r3, #1
34008294:	d40f      	bmi.n	340082b6 <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34008296:	2000      	movs	r0, #0
}
34008298:	b003      	add	sp, #12
3400829a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400829c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
340082a0:	011b      	lsls	r3, r3, #4
340082a2:	d5f8      	bpl.n	34008296 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340082a4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340082a8:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340082ac:	b003      	add	sp, #12
340082ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340082b2:	f7fc bf9d 	b.w	340051f0 <RCCEx_GetPLLSourceFreq>
340082b6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340082ba:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340082be:	f7fc ff97 	bl	340051f0 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340082c2:	2800      	cmp	r0, #0
340082c4:	d0e7      	beq.n	34008296 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
340082c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
340082ca:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340082ce:	f3c3 5105 	ubfx	r1, r3, #20, #6
340082d2:	d0e0      	beq.n	34008296 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
340082d4:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
340082d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
340082dc:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
340082e0:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
340082e4:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
340082e8:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
340082ec:	9401      	str	r4, [sp, #4]
340082ee:	9500      	str	r5, [sp, #0]
340082f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340082f4:	f3c2 220b 	ubfx	r2, r2, #8, #12
340082f8:	f7fc ffb0 	bl	3400525c <RCCEx_CalcPLLFreq>
340082fc:	e7cc      	b.n	34008298 <HAL_RCCEx_GetPLL1CLKFreq+0x14>
340082fe:	bf00      	nop
34008300:	56028000 	.word	0x56028000

34008304 <HAL_RCCEx_GetPLL2CLKFreq>:
{
34008304:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34008306:	4c1e      	ldr	r4, [pc, #120]	@ (34008380 <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
34008308:	6863      	ldr	r3, [r4, #4]
3400830a:	0599      	lsls	r1, r3, #22
3400830c:	d506      	bpl.n	3400831c <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
3400830e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34008312:	005a      	lsls	r2, r3, #1
34008314:	d40f      	bmi.n	34008336 <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34008316:	2000      	movs	r0, #0
}
34008318:	b003      	add	sp, #12
3400831a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3400831c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34008320:	011b      	lsls	r3, r3, #4
34008322:	d5f8      	bpl.n	34008316 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34008324:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34008328:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
3400832c:	b003      	add	sp, #12
3400832e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34008332:	f7fc bf5d 	b.w	340051f0 <RCCEx_GetPLLSourceFreq>
34008336:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3400833a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3400833e:	f7fc ff57 	bl	340051f0 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34008342:	2800      	cmp	r0, #0
34008344:	d0e7      	beq.n	34008316 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34008346:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
3400834a:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400834e:	f3c3 5105 	ubfx	r1, r3, #20, #6
34008352:	d0e0      	beq.n	34008316 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34008354:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34008358:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
3400835c:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34008360:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34008364:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34008368:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
3400836c:	9401      	str	r4, [sp, #4]
3400836e:	9500      	str	r5, [sp, #0]
34008370:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008374:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008378:	f7fc ff70 	bl	3400525c <RCCEx_CalcPLLFreq>
3400837c:	e7cc      	b.n	34008318 <HAL_RCCEx_GetPLL2CLKFreq+0x14>
3400837e:	bf00      	nop
34008380:	56028000 	.word	0x56028000

34008384 <HAL_RCCEx_GetPLL3CLKFreq>:
{
34008384:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34008386:	4c1e      	ldr	r4, [pc, #120]	@ (34008400 <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
34008388:	6863      	ldr	r3, [r4, #4]
3400838a:	0559      	lsls	r1, r3, #21
3400838c:	d506      	bpl.n	3400839c <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
3400838e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34008392:	005a      	lsls	r2, r3, #1
34008394:	d40f      	bmi.n	340083b6 <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34008396:	2000      	movs	r0, #0
}
34008398:	b003      	add	sp, #12
3400839a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400839c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340083a0:	011b      	lsls	r3, r3, #4
340083a2:	d5f8      	bpl.n	34008396 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
340083a4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340083a8:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340083ac:	b003      	add	sp, #12
340083ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340083b2:	f7fc bf1d 	b.w	340051f0 <RCCEx_GetPLLSourceFreq>
340083b6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340083ba:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340083be:	f7fc ff17 	bl	340051f0 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340083c2:	2800      	cmp	r0, #0
340083c4:	d0e7      	beq.n	34008396 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
340083c6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
340083ca:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340083ce:	f3c3 5105 	ubfx	r1, r3, #20, #6
340083d2:	d0e0      	beq.n	34008396 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
340083d4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
340083d8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
340083dc:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
340083e0:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
340083e4:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
340083e8:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
340083ec:	9401      	str	r4, [sp, #4]
340083ee:	9500      	str	r5, [sp, #0]
340083f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340083f4:	f3c2 220b 	ubfx	r2, r2, #8, #12
340083f8:	f7fc ff30 	bl	3400525c <RCCEx_CalcPLLFreq>
340083fc:	e7cc      	b.n	34008398 <HAL_RCCEx_GetPLL3CLKFreq+0x14>
340083fe:	bf00      	nop
34008400:	56028000 	.word	0x56028000

34008404 <HAL_RCCEx_GetPLL4CLKFreq>:
{
34008404:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34008406:	4c1e      	ldr	r4, [pc, #120]	@ (34008480 <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
34008408:	6863      	ldr	r3, [r4, #4]
3400840a:	0519      	lsls	r1, r3, #20
3400840c:	d506      	bpl.n	3400841c <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3400840e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34008412:	005a      	lsls	r2, r3, #1
34008414:	d40f      	bmi.n	34008436 <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34008416:	2000      	movs	r0, #0
}
34008418:	b003      	add	sp, #12
3400841a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3400841c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34008420:	011b      	lsls	r3, r3, #4
34008422:	d5f8      	bpl.n	34008416 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34008424:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34008428:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
3400842c:	b003      	add	sp, #12
3400842e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34008432:	f7fc bedd 	b.w	340051f0 <RCCEx_GetPLLSourceFreq>
34008436:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3400843a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3400843e:	f7fc fed7 	bl	340051f0 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34008442:	2800      	cmp	r0, #0
34008444:	d0e7      	beq.n	34008416 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34008446:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
3400844a:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400844e:	f3c3 5105 	ubfx	r1, r3, #20, #6
34008452:	d0e0      	beq.n	34008416 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
34008454:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34008458:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
3400845c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34008460:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34008464:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34008468:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
3400846c:	9401      	str	r4, [sp, #4]
3400846e:	9500      	str	r5, [sp, #0]
34008470:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008474:	f3c2 220b 	ubfx	r2, r2, #8, #12
34008478:	f7fc fef0 	bl	3400525c <RCCEx_CalcPLLFreq>
3400847c:	e7cc      	b.n	34008418 <HAL_RCCEx_GetPLL4CLKFreq+0x14>
3400847e:	bf00      	nop
34008480:	56028000 	.word	0x56028000

34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34008484:	4b3e      	ldr	r3, [pc, #248]	@ (34008580 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
34008486:	b510      	push	{r4, lr}
34008488:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
3400848c:	0652      	lsls	r2, r2, #25
3400848e:	d56b      	bpl.n	34008568 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34008490:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34008494:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34008498:	3a01      	subs	r2, #1
3400849a:	2a06      	cmp	r2, #6
3400849c:	d805      	bhi.n	340084aa <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
3400849e:	e8df f002 	tbb	[pc, r2]
340084a2:	150f      	.short	0x150f
340084a4:	3e321b48 	.word	0x3e321b48
340084a8:	54          	.byte	0x54
340084a9:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
340084aa:	f7fc fe07 	bl	340050bc <LL_RCC_HSI_IsReady>
340084ae:	2800      	cmp	r0, #0
340084b0:	d05a      	beq.n	34008568 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340084b2:	4b33      	ldr	r3, [pc, #204]	@ (34008580 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340084b4:	4833      	ldr	r0, [pc, #204]	@ (34008584 <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
340084b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340084b8:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340084bc:	40d8      	lsrs	r0, r3
340084be:	e054      	b.n	3400856a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
340084c0:	f7fc fe04 	bl	340050cc <LL_RCC_MSI_IsReady>
340084c4:	2800      	cmp	r0, #0
340084c6:	d04f      	beq.n	34008568 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = MSI_VALUE;
340084c8:	482f      	ldr	r0, [pc, #188]	@ (34008588 <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
340084ca:	e04e      	b.n	3400856a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
340084cc:	f7fc fdee 	bl	340050ac <LL_RCC_HSE_IsReady>
340084d0:	2800      	cmp	r0, #0
340084d2:	d049      	beq.n	34008568 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = HSE_VALUE;
340084d4:	482d      	ldr	r0, [pc, #180]	@ (3400858c <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
340084d6:	e048      	b.n	3400856a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
340084d8:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340084dc:	06d4      	lsls	r4, r2, #27
340084de:	d543      	bpl.n	34008568 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340084e0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340084e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340084e8:	f3c0 4007 	ubfx	r0, r0, #16, #8
340084ec:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340084ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          switch (LL_RCC_IC20_GetSource())
340084f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340084f6:	d03c      	beq.n	34008572 <RCCEx_GetCLKPCLKFreq.constprop.0+0xee>
340084f8:	d833      	bhi.n	34008562 <RCCEx_GetCLKPCLKFreq.constprop.0+0xde>
340084fa:	bbbb      	cbnz	r3, 3400856c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe8>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340084fc:	f7ff fec2 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
34008500:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
34008504:	e031      	b.n	3400856a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34008506:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400850a:	0590      	lsls	r0, r2, #22
3400850c:	d52c      	bpl.n	34008568 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400850e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34008512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34008516:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400851a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3400851c:	e7e7      	b.n	340084ee <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
        if (LL_RCC_IC15_IsEnabled() != 0U)
3400851e:	f7fc fe4d 	bl	340051bc <LL_RCC_IC15_IsEnabled>
34008522:	b308      	cbz	r0, 34008568 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
          ic_divider = LL_RCC_IC15_GetDivider();
34008524:	f7fc fe52 	bl	340051cc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008528:	4b15      	ldr	r3, [pc, #84]	@ (34008580 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
3400852a:	4604      	mov	r4, r0
3400852c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34008530:	e7dd      	b.n	340084ee <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34008532:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008536:	0351      	lsls	r1, r2, #13
34008538:	d516      	bpl.n	34008568 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3400853a:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
3400853e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34008542:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008546:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34008548:	e7d1      	b.n	340084ee <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
3400854a:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400854e:	0312      	lsls	r2, r2, #12
34008550:	d50a      	bpl.n	34008568 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34008552:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008556:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3400855a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400855e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008560:	e7c5      	b.n	340084ee <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
          switch (LL_RCC_IC20_GetSource())
34008562:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008566:	d007      	beq.n	34008578 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf4>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34008568:	2000      	movs	r0, #0
}
3400856a:	bd10      	pop	{r4, pc}
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400856c:	f7ff feca 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34008570:	e7c6      	b.n	34008500 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008572:	f7ff ff07 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34008576:	e7c3      	b.n	34008500 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008578:	f7ff ff44 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
3400857c:	e7c0      	b.n	34008500 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
3400857e:	bf00      	nop
34008580:	56028000 	.word	0x56028000
34008584:	03d09000 	.word	0x03d09000
34008588:	003d0900 	.word	0x003d0900
3400858c:	02dc6c00 	.word	0x02dc6c00

34008590 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
34008590:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34008592:	4d2b      	ldr	r5, [pc, #172]	@ (34008640 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb0>)
34008594:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
34008598:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
3400859c:	2b06      	cmp	r3, #6
3400859e:	d835      	bhi.n	3400860c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
340085a0:	e8df f003 	tbb	[pc, r3]
340085a4:	28110d04 	.word	0x28110d04
340085a8:	3c45      	.short	0x3c45
340085aa:	4b          	.byte	0x4b
340085ab:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340085ac:	f7fc fd10 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
340085b0:	f7fc fe16 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340085b4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
340085b6:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340085ba:	40d8      	lsrs	r0, r3
340085bc:	e027      	b.n	3400860e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
340085be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340085c2:	f7ff bf5f 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
340085c6:	f7fc fdb1 	bl	3400512c <LL_RCC_IC7_IsEnabled>
340085ca:	b1f8      	cbz	r0, 3400860c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC7_GetDivider();
340085cc:	f7fc fdb6 	bl	3400513c <LL_RCC_IC7_GetDivider>
340085d0:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
340085d2:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340085d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
340085da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340085de:	d017      	beq.n	34008610 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x80>
340085e0:	d811      	bhi.n	34008606 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x76>
340085e2:	b913      	cbnz	r3, 340085ea <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340085e4:	f7ff fe4e 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
340085e8:	e001      	b.n	340085ee <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340085ea:	f7ff fe8b 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340085ee:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340085f2:	e00c      	b.n	3400860e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340085f4:	f7fc fdac 	bl	34005150 <LL_RCC_IC8_IsEnabled>
340085f8:	b140      	cbz	r0, 3400860c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC8_GetDivider();
340085fa:	f7fc fdb1 	bl	34005160 <LL_RCC_IC8_GetDivider>
340085fe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34008602:	4604      	mov	r4, r0
34008604:	e7e7      	b.n	340085d6 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
        switch (LL_RCC_IC8_GetSource())
34008606:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400860a:	d004      	beq.n	34008616 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x86>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
3400860c:	2000      	movs	r0, #0
}
3400860e:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008610:	f7ff feb8 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34008614:	e7eb      	b.n	340085ee <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008616:	f7ff fef5 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
3400861a:	e7e8      	b.n	340085ee <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
      if (LL_RCC_HSI_IsReady() != 0U)
3400861c:	f7fc fd4e 	bl	340050bc <LL_RCC_HSI_IsReady>
34008620:	2800      	cmp	r0, #0
34008622:	d0f3      	beq.n	3400860c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008624:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008626:	4807      	ldr	r0, [pc, #28]	@ (34008644 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb4>)
34008628:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400862c:	e7c5      	b.n	340085ba <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
3400862e:	f7fc fd4d 	bl	340050cc <LL_RCC_MSI_IsReady>
34008632:	2800      	cmp	r0, #0
34008634:	d0ea      	beq.n	3400860c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        spdifrx_frequency = MSI_VALUE;
34008636:	4804      	ldr	r0, [pc, #16]	@ (34008648 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
34008638:	e7e9      	b.n	3400860e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
3400863a:	4804      	ldr	r0, [pc, #16]	@ (3400864c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
  return spdifrx_frequency;
3400863c:	e7e7      	b.n	3400860e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
3400863e:	bf00      	nop
34008640:	56028000 	.word	0x56028000
34008644:	03d09000 	.word	0x03d09000
34008648:	003d0900 	.word	0x003d0900
3400864c:	00bb8000 	.word	0x00bb8000

34008650 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34008650:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008652:	f7fc fd5d 	bl	34005110 <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008656:	4b36      	ldr	r3, [pc, #216]	@ (34008730 <RCCEx_GetXSPICLKFreq+0xe0>)
34008658:	4298      	cmp	r0, r3
3400865a:	d028      	beq.n	340086ae <RCCEx_GetXSPICLKFreq+0x5e>
3400865c:	d81b      	bhi.n	34008696 <RCCEx_GetXSPICLKFreq+0x46>
3400865e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008662:	4298      	cmp	r0, r3
34008664:	d013      	beq.n	3400868e <RCCEx_GetXSPICLKFreq+0x3e>
34008666:	d80b      	bhi.n	34008680 <RCCEx_GetXSPICLKFreq+0x30>
34008668:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3400866c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008670:	429a      	cmp	r2, r3
34008672:	d04a      	beq.n	3400870a <RCCEx_GetXSPICLKFreq+0xba>
34008674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008678:	4298      	cmp	r0, r3
3400867a:	d046      	beq.n	3400870a <RCCEx_GetXSPICLKFreq+0xba>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3400867c:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
3400867e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008680:	4b2c      	ldr	r3, [pc, #176]	@ (34008734 <RCCEx_GetXSPICLKFreq+0xe4>)
34008682:	4298      	cmp	r0, r3
34008684:	d003      	beq.n	3400868e <RCCEx_GetXSPICLKFreq+0x3e>
34008686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400868a:	4298      	cmp	r0, r3
3400868c:	d1f6      	bne.n	3400867c <RCCEx_GetXSPICLKFreq+0x2c>
}
3400868e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008692:	f7ff bef7 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008696:	4b28      	ldr	r3, [pc, #160]	@ (34008738 <RCCEx_GetXSPICLKFreq+0xe8>)
34008698:	4298      	cmp	r0, r3
3400869a:	d028      	beq.n	340086ee <RCCEx_GetXSPICLKFreq+0x9e>
3400869c:	d820      	bhi.n	340086e0 <RCCEx_GetXSPICLKFreq+0x90>
3400869e:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340086a2:	4298      	cmp	r0, r3
340086a4:	d003      	beq.n	340086ae <RCCEx_GetXSPICLKFreq+0x5e>
340086a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340086aa:	4298      	cmp	r0, r3
340086ac:	d1e6      	bne.n	3400867c <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
340086ae:	4b23      	ldr	r3, [pc, #140]	@ (3400873c <RCCEx_GetXSPICLKFreq+0xec>)
340086b0:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
340086b4:	f010 0004 	ands.w	r0, r0, #4
340086b8:	d0e1      	beq.n	3400867e <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
340086ba:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
340086be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
340086c2:	f3c0 4007 	ubfx	r0, r0, #16, #8
340086c6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
340086c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC4_GetSource())
340086cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340086d0:	d02a      	beq.n	34008728 <RCCEx_GetXSPICLKFreq+0xd8>
340086d2:	d820      	bhi.n	34008716 <RCCEx_GetXSPICLKFreq+0xc6>
340086d4:	bb2b      	cbnz	r3, 34008722 <RCCEx_GetXSPICLKFreq+0xd2>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340086d6:	f7ff fdd5 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
340086da:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
340086de:	e7ce      	b.n	3400867e <RCCEx_GetXSPICLKFreq+0x2e>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340086e0:	4b17      	ldr	r3, [pc, #92]	@ (34008740 <RCCEx_GetXSPICLKFreq+0xf0>)
340086e2:	4298      	cmp	r0, r3
340086e4:	d003      	beq.n	340086ee <RCCEx_GetXSPICLKFreq+0x9e>
340086e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340086ea:	4298      	cmp	r0, r3
340086ec:	d1c6      	bne.n	3400867c <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
340086ee:	4b13      	ldr	r3, [pc, #76]	@ (3400873c <RCCEx_GetXSPICLKFreq+0xec>)
340086f0:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
340086f4:	f010 0008 	ands.w	r0, r0, #8
340086f8:	d0c1      	beq.n	3400867e <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
340086fa:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
340086fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34008702:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008706:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008708:	e7de      	b.n	340086c8 <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3400870a:	f7fc fc61 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
}
3400870e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008712:	f7fc bd65 	b.w	340051e0 <RCCEx_GetHCLKFreq>
        switch (LL_RCC_IC4_GetSource())
34008716:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400871a:	d1af      	bne.n	3400867c <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400871c:	f7ff fe72 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34008720:	e7db      	b.n	340086da <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008722:	f7ff fdef 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34008726:	e7d8      	b.n	340086da <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008728:	f7ff fe2c 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
3400872c:	e7d5      	b.n	340086da <RCCEx_GetXSPICLKFreq+0x8a>
3400872e:	bf00      	nop
34008730:	03020014 	.word	0x03020014
34008734:	03010414 	.word	0x03010414
34008738:	03030014 	.word	0x03030014
3400873c:	56028000 	.word	0x56028000
34008740:	03030414 	.word	0x03030414

34008744 <RCCEx_GetOTGPHYCLKFreq>:
{
34008744:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008746:	f7fc fce3 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3400874a:	4b2b      	ldr	r3, [pc, #172]	@ (340087f8 <RCCEx_GetOTGPHYCLKFreq+0xb4>)
3400874c:	4298      	cmp	r0, r3
3400874e:	d021      	beq.n	34008794 <RCCEx_GetOTGPHYCLKFreq+0x50>
34008750:	d815      	bhi.n	3400877e <RCCEx_GetOTGPHYCLKFreq+0x3a>
34008752:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008756:	4298      	cmp	r0, r3
34008758:	d00d      	beq.n	34008776 <RCCEx_GetOTGPHYCLKFreq+0x32>
3400875a:	d809      	bhi.n	34008770 <RCCEx_GetOTGPHYCLKFreq+0x2c>
3400875c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008760:	4298      	cmp	r0, r3
34008762:	d02d      	beq.n	340087c0 <RCCEx_GetOTGPHYCLKFreq+0x7c>
34008764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008768:	4298      	cmp	r0, r3
3400876a:	d029      	beq.n	340087c0 <RCCEx_GetOTGPHYCLKFreq+0x7c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3400876c:	2000      	movs	r0, #0
}
3400876e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34008770:	4b22      	ldr	r3, [pc, #136]	@ (340087fc <RCCEx_GetOTGPHYCLKFreq+0xb8>)
34008772:	4298      	cmp	r0, r3
34008774:	d1fa      	bne.n	3400876c <RCCEx_GetOTGPHYCLKFreq+0x28>
}
34008776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400877a:	f7ff be83 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3400877e:	4b20      	ldr	r3, [pc, #128]	@ (34008800 <RCCEx_GetOTGPHYCLKFreq+0xbc>)
34008780:	4298      	cmp	r0, r3
34008782:	d023      	beq.n	340087cc <RCCEx_GetOTGPHYCLKFreq+0x88>
34008784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008788:	4298      	cmp	r0, r3
3400878a:	d01f      	beq.n	340087cc <RCCEx_GetOTGPHYCLKFreq+0x88>
3400878c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008790:	4298      	cmp	r0, r3
34008792:	d1eb      	bne.n	3400876c <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34008794:	f7fc fd12 	bl	340051bc <LL_RCC_IC15_IsEnabled>
34008798:	2800      	cmp	r0, #0
3400879a:	d0e7      	beq.n	3400876c <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3400879c:	f7fc fd16 	bl	340051cc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340087a0:	4b18      	ldr	r3, [pc, #96]	@ (34008804 <RCCEx_GetOTGPHYCLKFreq+0xc0>)
340087a2:	4604      	mov	r4, r0
340087a4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340087a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
340087ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340087b0:	d01f      	beq.n	340087f2 <RCCEx_GetOTGPHYCLKFreq+0xae>
340087b2:	d815      	bhi.n	340087e0 <RCCEx_GetOTGPHYCLKFreq+0x9c>
340087b4:	b9d3      	cbnz	r3, 340087ec <RCCEx_GetOTGPHYCLKFreq+0xa8>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340087b6:	f7ff fd65 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
340087ba:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340087be:	e7d6      	b.n	3400876e <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
340087c0:	f7fc fc74 	bl	340050ac <LL_RCC_HSE_IsReady>
340087c4:	2800      	cmp	r0, #0
340087c6:	d0d1      	beq.n	3400876c <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
340087c8:	480f      	ldr	r0, [pc, #60]	@ (34008808 <RCCEx_GetOTGPHYCLKFreq+0xc4>)
340087ca:	e7d0      	b.n	3400876e <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
340087cc:	f7fc fc6e 	bl	340050ac <LL_RCC_HSE_IsReady>
340087d0:	2800      	cmp	r0, #0
340087d2:	d0cb      	beq.n	3400876c <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
340087d4:	f7fc fc62 	bl	3400509c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
340087d8:	2800      	cmp	r0, #0
340087da:	d1f5      	bne.n	340087c8 <RCCEx_GetOTGPHYCLKFreq+0x84>
          usb_frequency = HSE_VALUE;
340087dc:	480b      	ldr	r0, [pc, #44]	@ (3400880c <RCCEx_GetOTGPHYCLKFreq+0xc8>)
  return usb_frequency;
340087de:	e7c6      	b.n	3400876e <RCCEx_GetOTGPHYCLKFreq+0x2a>
        switch (LL_RCC_IC15_GetSource())
340087e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340087e4:	d1c2      	bne.n	3400876c <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340087e6:	f7ff fe0d 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
340087ea:	e7e6      	b.n	340087ba <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340087ec:	f7ff fd8a 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
340087f0:	e7e3      	b.n	340087ba <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340087f2:	f7ff fdc7 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
340087f6:	e7e0      	b.n	340087ba <RCCEx_GetOTGPHYCLKFreq+0x76>
340087f8:	03020c14 	.word	0x03020c14
340087fc:	03011414 	.word	0x03011414
34008800:	03030c14 	.word	0x03030c14
34008804:	56028000 	.word	0x56028000
34008808:	016e3600 	.word	0x016e3600
3400880c:	02dc6c00 	.word	0x02dc6c00

34008810 <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
34008810:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
34008812:	f7fc fc7d 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34008816:	4b11      	ldr	r3, [pc, #68]	@ (3400885c <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
34008818:	4298      	cmp	r0, r3
3400881a:	d01c      	beq.n	34008856 <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
3400881c:	d805      	bhi.n	3400882a <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
3400881e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008822:	4298      	cmp	r0, r3
34008824:	d012      	beq.n	3400884c <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34008826:	2000      	movs	r0, #0
}
34008828:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3400882a:	4b0d      	ldr	r3, [pc, #52]	@ (34008860 <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
3400882c:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34008830:	4298      	cmp	r0, r3
34008832:	d1f8      	bne.n	34008826 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
34008834:	f7fc fc3a 	bl	340050ac <LL_RCC_HSE_IsReady>
34008838:	2800      	cmp	r0, #0
3400883a:	d0f4      	beq.n	34008826 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3400883c:	f7fc fc2e 	bl	3400509c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
34008840:	4b08      	ldr	r3, [pc, #32]	@ (34008864 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
34008842:	2800      	cmp	r0, #0
34008844:	4808      	ldr	r0, [pc, #32]	@ (34008868 <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
34008846:	bf08      	it	eq
34008848:	4618      	moveq	r0, r3
3400884a:	e7ed      	b.n	34008828 <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3400884c:	4807      	ldr	r0, [pc, #28]	@ (3400886c <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
3400884e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34008852:	f7ff bf77 	b.w	34008744 <RCCEx_GetOTGPHYCLKFreq>
34008856:	4806      	ldr	r0, [pc, #24]	@ (34008870 <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
34008858:	e7f9      	b.n	3400884e <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
3400885a:	bf00      	nop
3400885c:	01001814 	.word	0x01001814
34008860:	01011014 	.word	0x01011014
34008864:	02dc6c00 	.word	0x02dc6c00
34008868:	016e3600 	.word	0x016e3600
3400886c:	03000c14 	.word	0x03000c14
34008870:	03001414 	.word	0x03001414

34008874 <RCCEx_GetUSARTCLKFreq>:
{
34008874:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008876:	f7fc fc4b 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3400887a:	4b6f      	ldr	r3, [pc, #444]	@ (34008a38 <RCCEx_GetUSARTCLKFreq+0x1c4>)
3400887c:	4298      	cmp	r0, r3
3400887e:	d039      	beq.n	340088f4 <RCCEx_GetUSARTCLKFreq+0x80>
34008880:	d852      	bhi.n	34008928 <RCCEx_GetUSARTCLKFreq+0xb4>
34008882:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008886:	4298      	cmp	r0, r3
34008888:	f000 80b5 	beq.w	340089f6 <RCCEx_GetUSARTCLKFreq+0x182>
3400888c:	d813      	bhi.n	340088b6 <RCCEx_GetUSARTCLKFreq+0x42>
3400888e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008892:	4298      	cmp	r0, r3
34008894:	f000 80af 	beq.w	340089f6 <RCCEx_GetUSARTCLKFreq+0x182>
34008898:	d80b      	bhi.n	340088b2 <RCCEx_GetUSARTCLKFreq+0x3e>
3400889a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
3400889e:	4298      	cmp	r0, r3
340088a0:	f000 80a9 	beq.w	340089f6 <RCCEx_GetUSARTCLKFreq+0x182>
340088a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340088a8:	4298      	cmp	r0, r3
340088aa:	f000 80ae 	beq.w	34008a0a <RCCEx_GetUSARTCLKFreq+0x196>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
340088ae:	2000      	movs	r0, #0
}
340088b0:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340088b2:	4b62      	ldr	r3, [pc, #392]	@ (34008a3c <RCCEx_GetUSARTCLKFreq+0x1c8>)
340088b4:	e7f8      	b.n	340088a8 <RCCEx_GetUSARTCLKFreq+0x34>
340088b6:	4b62      	ldr	r3, [pc, #392]	@ (34008a40 <RCCEx_GetUSARTCLKFreq+0x1cc>)
340088b8:	4298      	cmp	r0, r3
340088ba:	d00c      	beq.n	340088d6 <RCCEx_GetUSARTCLKFreq+0x62>
340088bc:	d80f      	bhi.n	340088de <RCCEx_GetUSARTCLKFreq+0x6a>
340088be:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
340088c2:	4298      	cmp	r0, r3
340088c4:	d007      	beq.n	340088d6 <RCCEx_GetUSARTCLKFreq+0x62>
340088c6:	bf8e      	itee	hi
340088c8:	4b5e      	ldrhi	r3, [pc, #376]	@ (34008a44 <RCCEx_GetUSARTCLKFreq+0x1d0>)
340088ca:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
340088ce:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
340088d2:	4298      	cmp	r0, r3
340088d4:	d1eb      	bne.n	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
}
340088d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340088da:	f7ff bdd3 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340088de:	4b5a      	ldr	r3, [pc, #360]	@ (34008a48 <RCCEx_GetUSARTCLKFreq+0x1d4>)
340088e0:	4298      	cmp	r0, r3
340088e2:	d007      	beq.n	340088f4 <RCCEx_GetUSARTCLKFreq+0x80>
340088e4:	bf8e      	itee	hi
340088e6:	4b59      	ldrhi	r3, [pc, #356]	@ (34008a4c <RCCEx_GetUSARTCLKFreq+0x1d8>)
340088e8:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
340088ec:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
340088f0:	4298      	cmp	r0, r3
340088f2:	d1dc      	bne.n	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
340088f4:	f7fc fc3e 	bl	34005174 <LL_RCC_IC9_IsEnabled>
340088f8:	2800      	cmp	r0, #0
340088fa:	d0d8      	beq.n	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
340088fc:	f7fc fc42 	bl	34005184 <LL_RCC_IC9_GetDivider>
34008900:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008902:	4b53      	ldr	r3, [pc, #332]	@ (34008a50 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008904:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008908:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
3400890c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008910:	f000 808e 	beq.w	34008a30 <RCCEx_GetUSARTCLKFreq+0x1bc>
34008914:	f200 8082 	bhi.w	34008a1c <RCCEx_GetUSARTCLKFreq+0x1a8>
34008918:	2b00      	cmp	r3, #0
3400891a:	f040 8086 	bne.w	34008a2a <RCCEx_GetUSARTCLKFreq+0x1b6>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400891e:	f7ff fcb1 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
34008922:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008926:	e7c3      	b.n	340088b0 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008928:	4b4a      	ldr	r3, [pc, #296]	@ (34008a54 <RCCEx_GetUSARTCLKFreq+0x1e0>)
3400892a:	4298      	cmp	r0, r3
3400892c:	d045      	beq.n	340089ba <RCCEx_GetUSARTCLKFreq+0x146>
3400892e:	d833      	bhi.n	34008998 <RCCEx_GetUSARTCLKFreq+0x124>
34008930:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008934:	4298      	cmp	r0, r3
34008936:	d028      	beq.n	3400898a <RCCEx_GetUSARTCLKFreq+0x116>
34008938:	d81c      	bhi.n	34008974 <RCCEx_GetUSARTCLKFreq+0x100>
3400893a:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
3400893e:	3bfc      	subs	r3, #252	@ 0xfc
34008940:	4298      	cmp	r0, r3
34008942:	d006      	beq.n	34008952 <RCCEx_GetUSARTCLKFreq+0xde>
34008944:	d810      	bhi.n	34008968 <RCCEx_GetUSARTCLKFreq+0xf4>
34008946:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400894a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
3400894e:	4298      	cmp	r0, r3
34008950:	d1ad      	bne.n	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008952:	f7fc fc21 	bl	34005198 <LL_RCC_IC14_IsEnabled>
34008956:	2800      	cmp	r0, #0
34008958:	d0a9      	beq.n	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
3400895a:	f7fc fc25 	bl	340051a8 <LL_RCC_IC14_GetDivider>
3400895e:	4b3c      	ldr	r3, [pc, #240]	@ (34008a50 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008960:	4604      	mov	r4, r0
34008962:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008966:	e7cf      	b.n	34008908 <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008968:	4b3b      	ldr	r3, [pc, #236]	@ (34008a58 <RCCEx_GetUSARTCLKFreq+0x1e4>)
3400896a:	4298      	cmp	r0, r3
3400896c:	d0f1      	beq.n	34008952 <RCCEx_GetUSARTCLKFreq+0xde>
3400896e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
34008972:	e7ec      	b.n	3400894e <RCCEx_GetUSARTCLKFreq+0xda>
34008974:	4b39      	ldr	r3, [pc, #228]	@ (34008a5c <RCCEx_GetUSARTCLKFreq+0x1e8>)
34008976:	4298      	cmp	r0, r3
34008978:	d007      	beq.n	3400898a <RCCEx_GetUSARTCLKFreq+0x116>
3400897a:	bf8e      	itee	hi
3400897c:	4b38      	ldrhi	r3, [pc, #224]	@ (34008a60 <RCCEx_GetUSARTCLKFreq+0x1ec>)
3400897e:	f020 0004 	bicls.w	r0, r0, #4
34008982:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008986:	4298      	cmp	r0, r3
34008988:	d191      	bne.n	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
3400898a:	f7fc fba7 	bl	340050dc <LL_RCC_LSE_IsReady>
3400898e:	3800      	subs	r0, #0
34008990:	bf18      	it	ne
34008992:	2001      	movne	r0, #1
34008994:	03c0      	lsls	r0, r0, #15
34008996:	e78b      	b.n	340088b0 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008998:	4b32      	ldr	r3, [pc, #200]	@ (34008a64 <RCCEx_GetUSARTCLKFreq+0x1f0>)
3400899a:	4298      	cmp	r0, r3
3400899c:	d020      	beq.n	340089e0 <RCCEx_GetUSARTCLKFreq+0x16c>
3400899e:	d813      	bhi.n	340089c8 <RCCEx_GetUSARTCLKFreq+0x154>
340089a0:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
340089a4:	4298      	cmp	r0, r3
340089a6:	d008      	beq.n	340089ba <RCCEx_GetUSARTCLKFreq+0x146>
340089a8:	bf8e      	itee	hi
340089aa:	4b2f      	ldrhi	r3, [pc, #188]	@ (34008a68 <RCCEx_GetUSARTCLKFreq+0x1f4>)
340089ac:	f020 0004 	bicls.w	r0, r0, #4
340089b0:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
340089b4:	4298      	cmp	r0, r3
340089b6:	f47f af7a 	bne.w	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
340089ba:	f7fc fb87 	bl	340050cc <LL_RCC_MSI_IsReady>
340089be:	2800      	cmp	r0, #0
340089c0:	f43f af75 	beq.w	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
340089c4:	4829      	ldr	r0, [pc, #164]	@ (34008a6c <RCCEx_GetUSARTCLKFreq+0x1f8>)
  return usart_frequency;
340089c6:	e773      	b.n	340088b0 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340089c8:	4b29      	ldr	r3, [pc, #164]	@ (34008a70 <RCCEx_GetUSARTCLKFreq+0x1fc>)
340089ca:	4298      	cmp	r0, r3
340089cc:	d008      	beq.n	340089e0 <RCCEx_GetUSARTCLKFreq+0x16c>
340089ce:	bf8e      	itee	hi
340089d0:	4b28      	ldrhi	r3, [pc, #160]	@ (34008a74 <RCCEx_GetUSARTCLKFreq+0x200>)
340089d2:	f020 0004 	bicls.w	r0, r0, #4
340089d6:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
340089da:	4298      	cmp	r0, r3
340089dc:	f47f af67 	bne.w	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
340089e0:	f7fc fb6c 	bl	340050bc <LL_RCC_HSI_IsReady>
340089e4:	2800      	cmp	r0, #0
340089e6:	f43f af62 	beq.w	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340089ea:	4b19      	ldr	r3, [pc, #100]	@ (34008a50 <RCCEx_GetUSARTCLKFreq+0x1dc>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340089ec:	4822      	ldr	r0, [pc, #136]	@ (34008a78 <RCCEx_GetUSARTCLKFreq+0x204>)
340089ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340089f0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340089f4:	e007      	b.n	34008a06 <RCCEx_GetUSARTCLKFreq+0x192>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340089f6:	f7fc faeb 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
340089fa:	f7fc fbf1 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
340089fe:	4b14      	ldr	r3, [pc, #80]	@ (34008a50 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008a02:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008a06:	40d8      	lsrs	r0, r3
34008a08:	e752      	b.n	340088b0 <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008a0a:	f7fc fae1 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34008a0e:	f7fc fbe7 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008a12:	4b0f      	ldr	r3, [pc, #60]	@ (34008a50 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008a16:	f003 0307 	and.w	r3, r3, #7
34008a1a:	e7f4      	b.n	34008a06 <RCCEx_GetUSARTCLKFreq+0x192>
        switch (LL_RCC_IC14_GetSource())
34008a1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008a20:	f47f af45 	bne.w	340088ae <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008a24:	f7ff fcee 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34008a28:	e77b      	b.n	34008922 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008a2a:	f7ff fc6b 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34008a2e:	e778      	b.n	34008922 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008a30:	f7ff fca8 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34008a34:	e775      	b.n	34008922 <RCCEx_GetUSARTCLKFreq+0xae>
34008a36:	bf00      	nop
34008a38:	07021430 	.word	0x07021430
34008a3c:	07000830 	.word	0x07000830
34008a40:	07011430 	.word	0x07011430
34008a44:	07010830 	.word	0x07010830
34008a48:	07020434 	.word	0x07020434
34008a4c:	07020830 	.word	0x07020830
34008a50:	56028000 	.word	0x56028000
34008a54:	07050030 	.word	0x07050030
34008a58:	07030830 	.word	0x07030830
34008a5c:	07040830 	.word	0x07040830
34008a60:	07041430 	.word	0x07041430
34008a64:	07060030 	.word	0x07060030
34008a68:	07051430 	.word	0x07051430
34008a6c:	003d0900 	.word	0x003d0900
34008a70:	07060830 	.word	0x07060830
34008a74:	07061430 	.word	0x07061430
34008a78:	03d09000 	.word	0x03d09000

34008a7c <RCCEx_GetUARTCLKFreq>:
{
34008a7c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008a7e:	f7fc fb47 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008a82:	4b77      	ldr	r3, [pc, #476]	@ (34008c60 <RCCEx_GetUARTCLKFreq+0x1e4>)
34008a84:	4298      	cmp	r0, r3
34008a86:	d03e      	beq.n	34008b06 <RCCEx_GetUARTCLKFreq+0x8a>
34008a88:	d859      	bhi.n	34008b3e <RCCEx_GetUARTCLKFreq+0xc2>
34008a8a:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008a8e:	4298      	cmp	r0, r3
34008a90:	f000 80c6 	beq.w	34008c20 <RCCEx_GetUARTCLKFreq+0x1a4>
34008a94:	d814      	bhi.n	34008ac0 <RCCEx_GetUARTCLKFreq+0x44>
34008a96:	4b73      	ldr	r3, [pc, #460]	@ (34008c64 <RCCEx_GetUARTCLKFreq+0x1e8>)
34008a98:	4298      	cmp	r0, r3
34008a9a:	f000 80cb 	beq.w	34008c34 <RCCEx_GetUARTCLKFreq+0x1b8>
34008a9e:	3b01      	subs	r3, #1
34008aa0:	4298      	cmp	r0, r3
34008aa2:	d90b      	bls.n	34008abc <RCCEx_GetUARTCLKFreq+0x40>
34008aa4:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
34008aa8:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34008aac:	429a      	cmp	r2, r3
34008aae:	f000 80b7 	beq.w	34008c20 <RCCEx_GetUARTCLKFreq+0x1a4>
34008ab2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008ab6:	4298      	cmp	r0, r3
34008ab8:	f000 80b2 	beq.w	34008c20 <RCCEx_GetUARTCLKFreq+0x1a4>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34008abc:	2000      	movs	r0, #0
}
34008abe:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008ac0:	4b69      	ldr	r3, [pc, #420]	@ (34008c68 <RCCEx_GetUARTCLKFreq+0x1ec>)
34008ac2:	4298      	cmp	r0, r3
34008ac4:	d00d      	beq.n	34008ae2 <RCCEx_GetUARTCLKFreq+0x66>
34008ac6:	d812      	bhi.n	34008aee <RCCEx_GetUARTCLKFreq+0x72>
34008ac8:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008acc:	4298      	cmp	r0, r3
34008ace:	d008      	beq.n	34008ae2 <RCCEx_GetUARTCLKFreq+0x66>
34008ad0:	d80b      	bhi.n	34008aea <RCCEx_GetUARTCLKFreq+0x6e>
34008ad2:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008ad6:	4298      	cmp	r0, r3
34008ad8:	d003      	beq.n	34008ae2 <RCCEx_GetUARTCLKFreq+0x66>
34008ada:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008ade:	4298      	cmp	r0, r3
34008ae0:	d1ec      	bne.n	34008abc <RCCEx_GetUARTCLKFreq+0x40>
}
34008ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008ae6:	f7ff bccd 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008aea:	4b60      	ldr	r3, [pc, #384]	@ (34008c6c <RCCEx_GetUARTCLKFreq+0x1f0>)
34008aec:	e7f7      	b.n	34008ade <RCCEx_GetUARTCLKFreq+0x62>
34008aee:	4b60      	ldr	r3, [pc, #384]	@ (34008c70 <RCCEx_GetUARTCLKFreq+0x1f4>)
34008af0:	4298      	cmp	r0, r3
34008af2:	d008      	beq.n	34008b06 <RCCEx_GetUARTCLKFreq+0x8a>
34008af4:	d821      	bhi.n	34008b3a <RCCEx_GetUARTCLKFreq+0xbe>
34008af6:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008afa:	4298      	cmp	r0, r3
34008afc:	d003      	beq.n	34008b06 <RCCEx_GetUARTCLKFreq+0x8a>
34008afe:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008b02:	4298      	cmp	r0, r3
34008b04:	d1da      	bne.n	34008abc <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008b06:	f7fc fb35 	bl	34005174 <LL_RCC_IC9_IsEnabled>
34008b0a:	2800      	cmp	r0, #0
34008b0c:	d0d6      	beq.n	34008abc <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
34008b0e:	f7fc fb39 	bl	34005184 <LL_RCC_IC9_GetDivider>
34008b12:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008b14:	4b57      	ldr	r3, [pc, #348]	@ (34008c74 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008b16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008b1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008b22:	f000 809a 	beq.w	34008c5a <RCCEx_GetUARTCLKFreq+0x1de>
34008b26:	f200 808e 	bhi.w	34008c46 <RCCEx_GetUARTCLKFreq+0x1ca>
34008b2a:	2b00      	cmp	r3, #0
34008b2c:	f040 8092 	bne.w	34008c54 <RCCEx_GetUARTCLKFreq+0x1d8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008b30:	f7ff fba8 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
34008b34:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008b38:	e7c1      	b.n	34008abe <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008b3a:	4b4f      	ldr	r3, [pc, #316]	@ (34008c78 <RCCEx_GetUARTCLKFreq+0x1fc>)
34008b3c:	e7e1      	b.n	34008b02 <RCCEx_GetUARTCLKFreq+0x86>
34008b3e:	4b4f      	ldr	r3, [pc, #316]	@ (34008c7c <RCCEx_GetUARTCLKFreq+0x200>)
34008b40:	4298      	cmp	r0, r3
34008b42:	d04a      	beq.n	34008bda <RCCEx_GetUARTCLKFreq+0x15e>
34008b44:	d836      	bhi.n	34008bb4 <RCCEx_GetUARTCLKFreq+0x138>
34008b46:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008b4a:	4298      	cmp	r0, r3
34008b4c:	d029      	beq.n	34008ba2 <RCCEx_GetUARTCLKFreq+0x126>
34008b4e:	d81c      	bhi.n	34008b8a <RCCEx_GetUARTCLKFreq+0x10e>
34008b50:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008b54:	3b04      	subs	r3, #4
34008b56:	4298      	cmp	r0, r3
34008b58:	d008      	beq.n	34008b6c <RCCEx_GetUARTCLKFreq+0xf0>
34008b5a:	d812      	bhi.n	34008b82 <RCCEx_GetUARTCLKFreq+0x106>
34008b5c:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008b60:	4298      	cmp	r0, r3
34008b62:	d003      	beq.n	34008b6c <RCCEx_GetUARTCLKFreq+0xf0>
34008b64:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008b68:	4298      	cmp	r0, r3
34008b6a:	d1a7      	bne.n	34008abc <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008b6c:	f7fc fb14 	bl	34005198 <LL_RCC_IC14_IsEnabled>
34008b70:	2800      	cmp	r0, #0
34008b72:	d0a3      	beq.n	34008abc <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
34008b74:	f7fc fb18 	bl	340051a8 <LL_RCC_IC14_GetDivider>
34008b78:	4b3e      	ldr	r3, [pc, #248]	@ (34008c74 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008b7a:	4604      	mov	r4, r0
34008b7c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008b80:	e7cb      	b.n	34008b1a <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008b82:	4b3f      	ldr	r3, [pc, #252]	@ (34008c80 <RCCEx_GetUARTCLKFreq+0x204>)
34008b84:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008b88:	e7ee      	b.n	34008b68 <RCCEx_GetUARTCLKFreq+0xec>
34008b8a:	4b3e      	ldr	r3, [pc, #248]	@ (34008c84 <RCCEx_GetUARTCLKFreq+0x208>)
34008b8c:	4298      	cmp	r0, r3
34008b8e:	d008      	beq.n	34008ba2 <RCCEx_GetUARTCLKFreq+0x126>
34008b90:	d80e      	bhi.n	34008bb0 <RCCEx_GetUARTCLKFreq+0x134>
34008b92:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008b96:	4298      	cmp	r0, r3
34008b98:	d003      	beq.n	34008ba2 <RCCEx_GetUARTCLKFreq+0x126>
34008b9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008b9e:	4298      	cmp	r0, r3
34008ba0:	d18c      	bne.n	34008abc <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
34008ba2:	f7fc fa9b 	bl	340050dc <LL_RCC_LSE_IsReady>
34008ba6:	3800      	subs	r0, #0
34008ba8:	bf18      	it	ne
34008baa:	2001      	movne	r0, #1
34008bac:	03c0      	lsls	r0, r0, #15
34008bae:	e786      	b.n	34008abe <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008bb0:	4b35      	ldr	r3, [pc, #212]	@ (34008c88 <RCCEx_GetUARTCLKFreq+0x20c>)
34008bb2:	e7f4      	b.n	34008b9e <RCCEx_GetUARTCLKFreq+0x122>
34008bb4:	4b35      	ldr	r3, [pc, #212]	@ (34008c8c <RCCEx_GetUARTCLKFreq+0x210>)
34008bb6:	4298      	cmp	r0, r3
34008bb8:	d025      	beq.n	34008c06 <RCCEx_GetUARTCLKFreq+0x18a>
34008bba:	d817      	bhi.n	34008bec <RCCEx_GetUARTCLKFreq+0x170>
34008bbc:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
34008bc0:	3b04      	subs	r3, #4
34008bc2:	4298      	cmp	r0, r3
34008bc4:	d009      	beq.n	34008bda <RCCEx_GetUARTCLKFreq+0x15e>
34008bc6:	d80f      	bhi.n	34008be8 <RCCEx_GetUARTCLKFreq+0x16c>
34008bc8:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008bcc:	4298      	cmp	r0, r3
34008bce:	d004      	beq.n	34008bda <RCCEx_GetUARTCLKFreq+0x15e>
34008bd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008bd4:	4298      	cmp	r0, r3
34008bd6:	f47f af71 	bne.w	34008abc <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
34008bda:	f7fc fa77 	bl	340050cc <LL_RCC_MSI_IsReady>
34008bde:	2800      	cmp	r0, #0
34008be0:	f43f af6c 	beq.w	34008abc <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
34008be4:	482a      	ldr	r0, [pc, #168]	@ (34008c90 <RCCEx_GetUARTCLKFreq+0x214>)
  return uart_frequency;
34008be6:	e76a      	b.n	34008abe <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008be8:	4b2a      	ldr	r3, [pc, #168]	@ (34008c94 <RCCEx_GetUARTCLKFreq+0x218>)
34008bea:	e7f3      	b.n	34008bd4 <RCCEx_GetUARTCLKFreq+0x158>
34008bec:	4b2a      	ldr	r3, [pc, #168]	@ (34008c98 <RCCEx_GetUARTCLKFreq+0x21c>)
34008bee:	4298      	cmp	r0, r3
34008bf0:	d009      	beq.n	34008c06 <RCCEx_GetUARTCLKFreq+0x18a>
34008bf2:	d813      	bhi.n	34008c1c <RCCEx_GetUARTCLKFreq+0x1a0>
34008bf4:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008bf8:	4298      	cmp	r0, r3
34008bfa:	d004      	beq.n	34008c06 <RCCEx_GetUARTCLKFreq+0x18a>
34008bfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008c00:	4298      	cmp	r0, r3
34008c02:	f47f af5b 	bne.w	34008abc <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
34008c06:	f7fc fa59 	bl	340050bc <LL_RCC_HSI_IsReady>
34008c0a:	2800      	cmp	r0, #0
34008c0c:	f43f af56 	beq.w	34008abc <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008c10:	4b18      	ldr	r3, [pc, #96]	@ (34008c74 <RCCEx_GetUARTCLKFreq+0x1f8>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008c12:	4822      	ldr	r0, [pc, #136]	@ (34008c9c <RCCEx_GetUARTCLKFreq+0x220>)
34008c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008c16:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008c1a:	e009      	b.n	34008c30 <RCCEx_GetUARTCLKFreq+0x1b4>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008c1c:	4b20      	ldr	r3, [pc, #128]	@ (34008ca0 <RCCEx_GetUARTCLKFreq+0x224>)
34008c1e:	e7ef      	b.n	34008c00 <RCCEx_GetUARTCLKFreq+0x184>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008c20:	f7fc f9d6 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34008c24:	f7fc fadc 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008c28:	4b12      	ldr	r3, [pc, #72]	@ (34008c74 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008c2c:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008c30:	40d8      	lsrs	r0, r3
34008c32:	e744      	b.n	34008abe <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008c34:	f7fc f9cc 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34008c38:	f7fc fad2 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008c3c:	4b0d      	ldr	r3, [pc, #52]	@ (34008c74 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008c40:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008c44:	e7f4      	b.n	34008c30 <RCCEx_GetUARTCLKFreq+0x1b4>
        switch (LL_RCC_IC14_GetSource())
34008c46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008c4a:	f47f af37 	bne.w	34008abc <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008c4e:	f7ff fbd9 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34008c52:	e76f      	b.n	34008b34 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008c54:	f7ff fb56 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34008c58:	e76c      	b.n	34008b34 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008c5a:	f7ff fb93 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34008c5e:	e769      	b.n	34008b34 <RCCEx_GetUARTCLKFreq+0xb8>
34008c60:	07021c30 	.word	0x07021c30
34008c64:	07000034 	.word	0x07000034
34008c68:	07011c30 	.word	0x07011c30
34008c6c:	07011830 	.word	0x07011830
34008c70:	07021030 	.word	0x07021030
34008c74:	56028000 	.word	0x56028000
34008c78:	07021830 	.word	0x07021830
34008c7c:	07050034 	.word	0x07050034
34008c80:	07031830 	.word	0x07031830
34008c84:	07041830 	.word	0x07041830
34008c88:	07041c30 	.word	0x07041c30
34008c8c:	07060034 	.word	0x07060034
34008c90:	003d0900 	.word	0x003d0900
34008c94:	07051c30 	.word	0x07051c30
34008c98:	07061830 	.word	0x07061830
34008c9c:	03d09000 	.word	0x03d09000
34008ca0:	07061c30 	.word	0x07061c30

34008ca4 <RCCEx_GetSPICLKFreq>:
{
34008ca4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008ca6:	f7fc fa33 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008caa:	4b89      	ldr	r3, [pc, #548]	@ (34008ed0 <RCCEx_GetSPICLKFreq+0x22c>)
34008cac:	4298      	cmp	r0, r3
34008cae:	d055      	beq.n	34008d5c <RCCEx_GetSPICLKFreq+0xb8>
34008cb0:	d865      	bhi.n	34008d7e <RCCEx_GetSPICLKFreq+0xda>
34008cb2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
34008cb6:	4298      	cmp	r0, r3
34008cb8:	f000 80ca 	beq.w	34008e50 <RCCEx_GetSPICLKFreq+0x1ac>
34008cbc:	d81e      	bhi.n	34008cfc <RCCEx_GetSPICLKFreq+0x58>
34008cbe:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008cc2:	4298      	cmp	r0, r3
34008cc4:	f000 80ba 	beq.w	34008e3c <RCCEx_GetSPICLKFreq+0x198>
34008cc8:	d80a      	bhi.n	34008ce0 <RCCEx_GetSPICLKFreq+0x3c>
34008cca:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008cce:	4298      	cmp	r0, r3
34008cd0:	d00b      	beq.n	34008cea <RCCEx_GetSPICLKFreq+0x46>
34008cd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008cd6:	4298      	cmp	r0, r3
34008cd8:	f000 80b0 	beq.w	34008e3c <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34008cdc:	2000      	movs	r0, #0
}
34008cde:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008ce0:	4b7c      	ldr	r3, [pc, #496]	@ (34008ed4 <RCCEx_GetSPICLKFreq+0x230>)
34008ce2:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008ce6:	4298      	cmp	r0, r3
34008ce8:	d1f8      	bne.n	34008cdc <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008cea:	f7fc f971 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34008cee:	f7fc fa77 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008cf2:	4b79      	ldr	r3, [pc, #484]	@ (34008ed8 <RCCEx_GetSPICLKFreq+0x234>)
34008cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008cf6:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008cfa:	e0a7      	b.n	34008e4c <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008cfc:	4b77      	ldr	r3, [pc, #476]	@ (34008edc <RCCEx_GetSPICLKFreq+0x238>)
34008cfe:	4298      	cmp	r0, r3
34008d00:	f000 80af 	beq.w	34008e62 <RCCEx_GetSPICLKFreq+0x1be>
34008d04:	d81d      	bhi.n	34008d42 <RCCEx_GetSPICLKFreq+0x9e>
34008d06:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34008d0a:	4298      	cmp	r0, r3
34008d0c:	d00a      	beq.n	34008d24 <RCCEx_GetSPICLKFreq+0x80>
34008d0e:	d80d      	bhi.n	34008d2c <RCCEx_GetSPICLKFreq+0x88>
34008d10:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d14:	4298      	cmp	r0, r3
34008d16:	d005      	beq.n	34008d24 <RCCEx_GetSPICLKFreq+0x80>
34008d18:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34008d1c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008d20:	4298      	cmp	r0, r3
34008d22:	d1db      	bne.n	34008cdc <RCCEx_GetSPICLKFreq+0x38>
}
34008d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008d28:	f7ff bbac 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008d2c:	4b6c      	ldr	r3, [pc, #432]	@ (34008ee0 <RCCEx_GetSPICLKFreq+0x23c>)
34008d2e:	4298      	cmp	r0, r3
34008d30:	d0f8      	beq.n	34008d24 <RCCEx_GetSPICLKFreq+0x80>
34008d32:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008d36:	4298      	cmp	r0, r3
34008d38:	f000 8093 	beq.w	34008e62 <RCCEx_GetSPICLKFreq+0x1be>
34008d3c:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008d40:	e7ee      	b.n	34008d20 <RCCEx_GetSPICLKFreq+0x7c>
34008d42:	4b68      	ldr	r3, [pc, #416]	@ (34008ee4 <RCCEx_GetSPICLKFreq+0x240>)
34008d44:	4298      	cmp	r0, r3
34008d46:	d009      	beq.n	34008d5c <RCCEx_GetSPICLKFreq+0xb8>
34008d48:	d813      	bhi.n	34008d72 <RCCEx_GetSPICLKFreq+0xce>
34008d4a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d4e:	4298      	cmp	r0, r3
34008d50:	f000 8087 	beq.w	34008e62 <RCCEx_GetSPICLKFreq+0x1be>
34008d54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008d58:	4298      	cmp	r0, r3
34008d5a:	d1bf      	bne.n	34008cdc <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008d5c:	f7fc fa0a 	bl	34005174 <LL_RCC_IC9_IsEnabled>
34008d60:	2800      	cmp	r0, #0
34008d62:	d0bb      	beq.n	34008cdc <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
34008d64:	f7fc fa0e 	bl	34005184 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008d68:	4b5b      	ldr	r3, [pc, #364]	@ (34008ed8 <RCCEx_GetSPICLKFreq+0x234>)
34008d6a:	4604      	mov	r4, r0
34008d6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34008d70:	e082      	b.n	34008e78 <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008d72:	4b5d      	ldr	r3, [pc, #372]	@ (34008ee8 <RCCEx_GetSPICLKFreq+0x244>)
34008d74:	4298      	cmp	r0, r3
34008d76:	d074      	beq.n	34008e62 <RCCEx_GetSPICLKFreq+0x1be>
34008d78:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008d7c:	e7ec      	b.n	34008d58 <RCCEx_GetSPICLKFreq+0xb4>
34008d7e:	4b5b      	ldr	r3, [pc, #364]	@ (34008eec <RCCEx_GetSPICLKFreq+0x248>)
34008d80:	4298      	cmp	r0, r3
34008d82:	d043      	beq.n	34008e0c <RCCEx_GetSPICLKFreq+0x168>
34008d84:	d830      	bhi.n	34008de8 <RCCEx_GetSPICLKFreq+0x144>
34008d86:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
34008d8a:	4298      	cmp	r0, r3
34008d8c:	d0e6      	beq.n	34008d5c <RCCEx_GetSPICLKFreq+0xb8>
34008d8e:	d808      	bhi.n	34008da2 <RCCEx_GetSPICLKFreq+0xfe>
34008d90:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34008d94:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d98:	429a      	cmp	r2, r3
34008d9a:	d079      	beq.n	34008e90 <RCCEx_GetSPICLKFreq+0x1ec>
34008d9c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008da0:	e7da      	b.n	34008d58 <RCCEx_GetSPICLKFreq+0xb4>
34008da2:	4b53      	ldr	r3, [pc, #332]	@ (34008ef0 <RCCEx_GetSPICLKFreq+0x24c>)
34008da4:	4298      	cmp	r0, r3
34008da6:	d00d      	beq.n	34008dc4 <RCCEx_GetSPICLKFreq+0x120>
34008da8:	d814      	bhi.n	34008dd4 <RCCEx_GetSPICLKFreq+0x130>
34008daa:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008dae:	4298      	cmp	r0, r3
34008db0:	d008      	beq.n	34008dc4 <RCCEx_GetSPICLKFreq+0x120>
34008db2:	d80d      	bhi.n	34008dd0 <RCCEx_GetSPICLKFreq+0x12c>
34008db4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008db8:	4298      	cmp	r0, r3
34008dba:	d003      	beq.n	34008dc4 <RCCEx_GetSPICLKFreq+0x120>
34008dbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008dc0:	4298      	cmp	r0, r3
34008dc2:	d18b      	bne.n	34008cdc <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34008dc4:	f7fc f982 	bl	340050cc <LL_RCC_MSI_IsReady>
34008dc8:	2800      	cmp	r0, #0
34008dca:	d087      	beq.n	34008cdc <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34008dcc:	4849      	ldr	r0, [pc, #292]	@ (34008ef4 <RCCEx_GetSPICLKFreq+0x250>)
  return spi_frequency;
34008dce:	e786      	b.n	34008cde <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008dd0:	4b49      	ldr	r3, [pc, #292]	@ (34008ef8 <RCCEx_GetSPICLKFreq+0x254>)
34008dd2:	e7f5      	b.n	34008dc0 <RCCEx_GetSPICLKFreq+0x11c>
34008dd4:	4b49      	ldr	r3, [pc, #292]	@ (34008efc <RCCEx_GetSPICLKFreq+0x258>)
34008dd6:	4298      	cmp	r0, r3
34008dd8:	d018      	beq.n	34008e0c <RCCEx_GetSPICLKFreq+0x168>
34008dda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008dde:	4298      	cmp	r0, r3
34008de0:	d014      	beq.n	34008e0c <RCCEx_GetSPICLKFreq+0x168>
34008de2:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008de6:	e7eb      	b.n	34008dc0 <RCCEx_GetSPICLKFreq+0x11c>
34008de8:	4b45      	ldr	r3, [pc, #276]	@ (34008f00 <RCCEx_GetSPICLKFreq+0x25c>)
34008dea:	4298      	cmp	r0, r3
34008dec:	d069      	beq.n	34008ec2 <RCCEx_GetSPICLKFreq+0x21e>
34008dee:	d81e      	bhi.n	34008e2e <RCCEx_GetSPICLKFreq+0x18a>
34008df0:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008df4:	4298      	cmp	r0, r3
34008df6:	d018      	beq.n	34008e2a <RCCEx_GetSPICLKFreq+0x186>
34008df8:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34008dfc:	d811      	bhi.n	34008e22 <RCCEx_GetSPICLKFreq+0x17e>
34008dfe:	4a41      	ldr	r2, [pc, #260]	@ (34008f04 <RCCEx_GetSPICLKFreq+0x260>)
34008e00:	4293      	cmp	r3, r2
34008e02:	d003      	beq.n	34008e0c <RCCEx_GetSPICLKFreq+0x168>
34008e04:	4b40      	ldr	r3, [pc, #256]	@ (34008f08 <RCCEx_GetSPICLKFreq+0x264>)
34008e06:	4298      	cmp	r0, r3
34008e08:	f47f af68 	bne.w	34008cdc <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
34008e0c:	f7fc f956 	bl	340050bc <LL_RCC_HSI_IsReady>
34008e10:	2800      	cmp	r0, #0
34008e12:	f43f af63 	beq.w	34008cdc <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008e16:	4b30      	ldr	r3, [pc, #192]	@ (34008ed8 <RCCEx_GetSPICLKFreq+0x234>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008e18:	483c      	ldr	r0, [pc, #240]	@ (34008f0c <RCCEx_GetSPICLKFreq+0x268>)
34008e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008e1c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008e20:	e014      	b.n	34008e4c <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008e22:	4a3b      	ldr	r2, [pc, #236]	@ (34008f10 <RCCEx_GetSPICLKFreq+0x26c>)
34008e24:	4293      	cmp	r3, r2
34008e26:	f47f af59 	bne.w	34008cdc <RCCEx_GetSPICLKFreq+0x38>
34008e2a:	483a      	ldr	r0, [pc, #232]	@ (34008f14 <RCCEx_GetSPICLKFreq+0x270>)
34008e2c:	e757      	b.n	34008cde <RCCEx_GetSPICLKFreq+0x3a>
34008e2e:	4b3a      	ldr	r3, [pc, #232]	@ (34008f18 <RCCEx_GetSPICLKFreq+0x274>)
34008e30:	4298      	cmp	r0, r3
34008e32:	d046      	beq.n	34008ec2 <RCCEx_GetSPICLKFreq+0x21e>
34008e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008e38:	4298      	cmp	r0, r3
34008e3a:	e7f4      	b.n	34008e26 <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008e3c:	f7fc f8c8 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34008e40:	f7fc f9ce 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008e44:	4b24      	ldr	r3, [pc, #144]	@ (34008ed8 <RCCEx_GetSPICLKFreq+0x234>)
34008e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008e48:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008e4c:	40d8      	lsrs	r0, r3
      break;
34008e4e:	e746      	b.n	34008cde <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008e50:	f7fc f8be 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34008e54:	f7fc f9c4 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34008e58:	4b1f      	ldr	r3, [pc, #124]	@ (34008ed8 <RCCEx_GetSPICLKFreq+0x234>)
34008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34008e5c:	f3c3 3302 	ubfx	r3, r3, #12, #3
34008e60:	e7f4      	b.n	34008e4c <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008e62:	f7fc f975 	bl	34005150 <LL_RCC_IC8_IsEnabled>
34008e66:	2800      	cmp	r0, #0
34008e68:	f43f af38 	beq.w	34008cdc <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
34008e6c:	f7fc f978 	bl	34005160 <LL_RCC_IC8_GetDivider>
34008e70:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008e72:	4b19      	ldr	r3, [pc, #100]	@ (34008ed8 <RCCEx_GetSPICLKFreq+0x234>)
34008e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008e78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34008e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008e80:	d01c      	beq.n	34008ebc <RCCEx_GetSPICLKFreq+0x218>
34008e82:	d811      	bhi.n	34008ea8 <RCCEx_GetSPICLKFreq+0x204>
34008e84:	b9bb      	cbnz	r3, 34008eb6 <RCCEx_GetSPICLKFreq+0x212>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008e86:	f7ff f9fd 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
34008e8a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008e8e:	e726      	b.n	34008cde <RCCEx_GetSPICLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008e90:	f7fc f982 	bl	34005198 <LL_RCC_IC14_IsEnabled>
34008e94:	2800      	cmp	r0, #0
34008e96:	f43f af21 	beq.w	34008cdc <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
34008e9a:	f7fc f985 	bl	340051a8 <LL_RCC_IC14_GetDivider>
34008e9e:	4b0e      	ldr	r3, [pc, #56]	@ (34008ed8 <RCCEx_GetSPICLKFreq+0x234>)
34008ea0:	4604      	mov	r4, r0
34008ea2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008ea6:	e7e7      	b.n	34008e78 <RCCEx_GetSPICLKFreq+0x1d4>
        switch (LL_RCC_IC14_GetSource())
34008ea8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008eac:	f47f af16 	bne.w	34008cdc <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008eb0:	f7ff faa8 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34008eb4:	e7e9      	b.n	34008e8a <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008eb6:	f7ff fa25 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34008eba:	e7e6      	b.n	34008e8a <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008ebc:	f7ff fa62 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34008ec0:	e7e3      	b.n	34008e8a <RCCEx_GetSPICLKFreq+0x1e6>
      if (LL_RCC_HSE_IsReady() != 0U)
34008ec2:	f7fc f8f3 	bl	340050ac <LL_RCC_HSE_IsReady>
34008ec6:	2800      	cmp	r0, #0
34008ec8:	f43f af08 	beq.w	34008cdc <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
34008ecc:	4813      	ldr	r0, [pc, #76]	@ (34008f1c <RCCEx_GetSPICLKFreq+0x278>)
34008ece:	e706      	b.n	34008cde <RCCEx_GetSPICLKFreq+0x3a>
34008ed0:	07030820 	.word	0x07030820
34008ed4:	07001020 	.word	0x07001020
34008ed8:	56028000 	.word	0x56028000
34008edc:	07020820 	.word	0x07020820
34008ee0:	07011820 	.word	0x07011820
34008ee4:	07021420 	.word	0x07021420
34008ee8:	07021820 	.word	0x07021820
34008eec:	07050c20 	.word	0x07050c20
34008ef0:	07041420 	.word	0x07041420
34008ef4:	003d0900 	.word	0x003d0900
34008ef8:	07041020 	.word	0x07041020
34008efc:	07050420 	.word	0x07050420
34008f00:	07061020 	.word	0x07061020
34008f04:	07051020 	.word	0x07051020
34008f08:	07051820 	.word	0x07051820
34008f0c:	03d09000 	.word	0x03d09000
34008f10:	07060820 	.word	0x07060820
34008f14:	00bb8000 	.word	0x00bb8000
34008f18:	07061420 	.word	0x07061420
34008f1c:	02dc6c00 	.word	0x02dc6c00

34008f20 <RCCEx_GetSAICLKFreq>:
{
34008f20:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008f22:	f7fc f8f5 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008f26:	4b49      	ldr	r3, [pc, #292]	@ (3400904c <RCCEx_GetSAICLKFreq+0x12c>)
34008f28:	4298      	cmp	r0, r3
34008f2a:	d04a      	beq.n	34008fc2 <RCCEx_GetSAICLKFreq+0xa2>
34008f2c:	d839      	bhi.n	34008fa2 <RCCEx_GetSAICLKFreq+0x82>
34008f2e:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008f32:	4298      	cmp	r0, r3
34008f34:	d021      	beq.n	34008f7a <RCCEx_GetSAICLKFreq+0x5a>
34008f36:	d815      	bhi.n	34008f64 <RCCEx_GetSAICLKFreq+0x44>
34008f38:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008f3c:	4298      	cmp	r0, r3
34008f3e:	d00d      	beq.n	34008f5c <RCCEx_GetSAICLKFreq+0x3c>
34008f40:	d809      	bhi.n	34008f56 <RCCEx_GetSAICLKFreq+0x36>
34008f42:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008f46:	4298      	cmp	r0, r3
34008f48:	d04e      	beq.n	34008fe8 <RCCEx_GetSAICLKFreq+0xc8>
34008f4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f4e:	4298      	cmp	r0, r3
34008f50:	d04a      	beq.n	34008fe8 <RCCEx_GetSAICLKFreq+0xc8>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34008f52:	2000      	movs	r0, #0
}
34008f54:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008f56:	4b3e      	ldr	r3, [pc, #248]	@ (34009050 <RCCEx_GetSAICLKFreq+0x130>)
34008f58:	4298      	cmp	r0, r3
34008f5a:	d1fa      	bne.n	34008f52 <RCCEx_GetSAICLKFreq+0x32>
}
34008f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008f60:	f7ff ba90 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008f64:	4b3b      	ldr	r3, [pc, #236]	@ (34009054 <RCCEx_GetSAICLKFreq+0x134>)
34008f66:	4298      	cmp	r0, r3
34008f68:	d04d      	beq.n	34009006 <RCCEx_GetSAICLKFreq+0xe6>
34008f6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f6e:	4298      	cmp	r0, r3
34008f70:	d049      	beq.n	34009006 <RCCEx_GetSAICLKFreq+0xe6>
34008f72:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008f76:	4298      	cmp	r0, r3
34008f78:	d1eb      	bne.n	34008f52 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34008f7a:	f7fc f8d7 	bl	3400512c <LL_RCC_IC7_IsEnabled>
34008f7e:	2800      	cmp	r0, #0
34008f80:	d0e7      	beq.n	34008f52 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
34008f82:	f7fc f8db 	bl	3400513c <LL_RCC_IC7_GetDivider>
34008f86:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008f88:	4b33      	ldr	r3, [pc, #204]	@ (34009058 <RCCEx_GetSAICLKFreq+0x138>)
34008f8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008f8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34008f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008f96:	d047      	beq.n	34009028 <RCCEx_GetSAICLKFreq+0x108>
34008f98:	d840      	bhi.n	3400901c <RCCEx_GetSAICLKFreq+0xfc>
34008f9a:	bb7b      	cbnz	r3, 34008ffc <RCCEx_GetSAICLKFreq+0xdc>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008f9c:	f7ff f972 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
34008fa0:	e02e      	b.n	34009000 <RCCEx_GetSAICLKFreq+0xe0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008fa2:	4b2e      	ldr	r3, [pc, #184]	@ (3400905c <RCCEx_GetSAICLKFreq+0x13c>)
34008fa4:	4298      	cmp	r0, r3
34008fa6:	d01d      	beq.n	34008fe4 <RCCEx_GetSAICLKFreq+0xc4>
34008fa8:	d811      	bhi.n	34008fce <RCCEx_GetSAICLKFreq+0xae>
34008faa:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008fae:	4298      	cmp	r0, r3
34008fb0:	d03d      	beq.n	3400902e <RCCEx_GetSAICLKFreq+0x10e>
34008fb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008fb6:	4298      	cmp	r0, r3
34008fb8:	d039      	beq.n	3400902e <RCCEx_GetSAICLKFreq+0x10e>
34008fba:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008fbe:	4298      	cmp	r0, r3
34008fc0:	d1c7      	bne.n	34008f52 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
34008fc2:	f7fc f883 	bl	340050cc <LL_RCC_MSI_IsReady>
34008fc6:	2800      	cmp	r0, #0
34008fc8:	d0c3      	beq.n	34008f52 <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
34008fca:	4825      	ldr	r0, [pc, #148]	@ (34009060 <RCCEx_GetSAICLKFreq+0x140>)
  return sai_frequency;
34008fcc:	e7c2      	b.n	34008f54 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008fce:	4b25      	ldr	r3, [pc, #148]	@ (34009064 <RCCEx_GetSAICLKFreq+0x144>)
34008fd0:	4298      	cmp	r0, r3
34008fd2:	d036      	beq.n	34009042 <RCCEx_GetSAICLKFreq+0x122>
34008fd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008fd8:	4298      	cmp	r0, r3
34008fda:	d032      	beq.n	34009042 <RCCEx_GetSAICLKFreq+0x122>
34008fdc:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008fe0:	4298      	cmp	r0, r3
34008fe2:	d1b6      	bne.n	34008f52 <RCCEx_GetSAICLKFreq+0x32>
34008fe4:	4820      	ldr	r0, [pc, #128]	@ (34009068 <RCCEx_GetSAICLKFreq+0x148>)
34008fe6:	e7b5      	b.n	34008f54 <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008fe8:	f7fb fff2 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34008fec:	f7fc f8f8 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008ff0:	4b19      	ldr	r3, [pc, #100]	@ (34009058 <RCCEx_GetSAICLKFreq+0x138>)
34008ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008ff4:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008ff8:	40d8      	lsrs	r0, r3
34008ffa:	e7ab      	b.n	34008f54 <RCCEx_GetSAICLKFreq+0x34>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008ffc:	f7ff f982 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
34009000:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009004:	e7a6      	b.n	34008f54 <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009006:	f7fc f8a3 	bl	34005150 <LL_RCC_IC8_IsEnabled>
3400900a:	2800      	cmp	r0, #0
3400900c:	d0a1      	beq.n	34008f52 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
3400900e:	f7fc f8a7 	bl	34005160 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009012:	4b11      	ldr	r3, [pc, #68]	@ (34009058 <RCCEx_GetSAICLKFreq+0x138>)
34009014:	4604      	mov	r4, r0
34009016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400901a:	e7b8      	b.n	34008f8e <RCCEx_GetSAICLKFreq+0x6e>
        switch (LL_RCC_IC8_GetSource())
3400901c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009020:	d197      	bne.n	34008f52 <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009022:	f7ff f9ef 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34009026:	e7eb      	b.n	34009000 <RCCEx_GetSAICLKFreq+0xe0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009028:	f7ff f9ac 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
3400902c:	e7e8      	b.n	34009000 <RCCEx_GetSAICLKFreq+0xe0>
      if (LL_RCC_HSI_IsReady() != 0U)
3400902e:	f7fc f845 	bl	340050bc <LL_RCC_HSI_IsReady>
34009032:	2800      	cmp	r0, #0
34009034:	d08d      	beq.n	34008f52 <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009036:	4b08      	ldr	r3, [pc, #32]	@ (34009058 <RCCEx_GetSAICLKFreq+0x138>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009038:	480c      	ldr	r0, [pc, #48]	@ (3400906c <RCCEx_GetSAICLKFreq+0x14c>)
3400903a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400903c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009040:	e7da      	b.n	34008ff8 <RCCEx_GetSAICLKFreq+0xd8>
}
34009042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34009046:	f7ff baa3 	b.w	34008590 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
3400904a:	bf00      	nop
3400904c:	07041418 	.word	0x07041418
34009050:	07011818 	.word	0x07011818
34009054:	07031418 	.word	0x07031418
34009058:	56028000 	.word	0x56028000
3400905c:	07061418 	.word	0x07061418
34009060:	003d0900 	.word	0x003d0900
34009064:	07071418 	.word	0x07071418
34009068:	00bb8000 	.word	0x00bb8000
3400906c:	03d09000 	.word	0x03d09000

34009070 <RCCEx_GetI3CCLKFreq>:
{
34009070:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009072:	f7fc f84d 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34009076:	4b3d      	ldr	r3, [pc, #244]	@ (3400916c <RCCEx_GetI3CCLKFreq+0xfc>)
34009078:	4298      	cmp	r0, r3
3400907a:	d060      	beq.n	3400913e <RCCEx_GetI3CCLKFreq+0xce>
3400907c:	d830      	bhi.n	340090e0 <RCCEx_GetI3CCLKFreq+0x70>
3400907e:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34009082:	4298      	cmp	r0, r3
34009084:	d057      	beq.n	34009136 <RCCEx_GetI3CCLKFreq+0xc6>
34009086:	d80d      	bhi.n	340090a4 <RCCEx_GetI3CCLKFreq+0x34>
34009088:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400908c:	4298      	cmp	r0, r3
3400908e:	d048      	beq.n	34009122 <RCCEx_GetI3CCLKFreq+0xb2>
34009090:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34009094:	4298      	cmp	r0, r3
34009096:	d04e      	beq.n	34009136 <RCCEx_GetI3CCLKFreq+0xc6>
34009098:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400909c:	4298      	cmp	r0, r3
3400909e:	d040      	beq.n	34009122 <RCCEx_GetI3CCLKFreq+0xb2>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
340090a0:	2000      	movs	r0, #0
}
340090a2:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340090a4:	4b32      	ldr	r3, [pc, #200]	@ (34009170 <RCCEx_GetI3CCLKFreq+0x100>)
340090a6:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340090aa:	4298      	cmp	r0, r3
340090ac:	d1f8      	bne.n	340090a0 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340090ae:	4b31      	ldr	r3, [pc, #196]	@ (34009174 <RCCEx_GetI3CCLKFreq+0x104>)
340090b0:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340090b4:	0592      	lsls	r2, r2, #22
340090b6:	d5f3      	bpl.n	340090a0 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340090b8:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340090bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340090c0:	f3c0 4007 	ubfx	r0, r0, #16, #8
340090c4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340090c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
340090ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340090ce:	d04a      	beq.n	34009166 <RCCEx_GetI3CCLKFreq+0xf6>
340090d0:	d840      	bhi.n	34009154 <RCCEx_GetI3CCLKFreq+0xe4>
340090d2:	2b00      	cmp	r3, #0
340090d4:	d144      	bne.n	34009160 <RCCEx_GetI3CCLKFreq+0xf0>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340090d6:	f7ff f8d5 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
340090da:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340090de:	e7e0      	b.n	340090a2 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340090e0:	4b25      	ldr	r3, [pc, #148]	@ (34009178 <RCCEx_GetI3CCLKFreq+0x108>)
340090e2:	4298      	cmp	r0, r3
340090e4:	d008      	beq.n	340090f8 <RCCEx_GetI3CCLKFreq+0x88>
340090e6:	d80d      	bhi.n	34009104 <RCCEx_GetI3CCLKFreq+0x94>
340090e8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340090ec:	4298      	cmp	r0, r3
340090ee:	d026      	beq.n	3400913e <RCCEx_GetI3CCLKFreq+0xce>
340090f0:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
340090f4:	4298      	cmp	r0, r3
340090f6:	d1d3      	bne.n	340090a0 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
340090f8:	f7fb ffe8 	bl	340050cc <LL_RCC_MSI_IsReady>
340090fc:	2800      	cmp	r0, #0
340090fe:	d0cf      	beq.n	340090a0 <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
34009100:	481e      	ldr	r0, [pc, #120]	@ (3400917c <RCCEx_GetI3CCLKFreq+0x10c>)
  return i3c_frequency;
34009102:	e7ce      	b.n	340090a2 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34009104:	4b1e      	ldr	r3, [pc, #120]	@ (34009180 <RCCEx_GetI3CCLKFreq+0x110>)
34009106:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400910a:	4298      	cmp	r0, r3
3400910c:	d1c8      	bne.n	340090a0 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
3400910e:	f7fb ffd5 	bl	340050bc <LL_RCC_HSI_IsReady>
34009112:	2800      	cmp	r0, #0
34009114:	d0c4      	beq.n	340090a0 <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009116:	4b17      	ldr	r3, [pc, #92]	@ (34009174 <RCCEx_GetI3CCLKFreq+0x104>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009118:	481a      	ldr	r0, [pc, #104]	@ (34009184 <RCCEx_GetI3CCLKFreq+0x114>)
3400911a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400911c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009120:	e007      	b.n	34009132 <RCCEx_GetI3CCLKFreq+0xc2>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009122:	f7fb ff55 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34009126:	f7fc f85b 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3400912a:	4b12      	ldr	r3, [pc, #72]	@ (34009174 <RCCEx_GetI3CCLKFreq+0x104>)
3400912c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400912e:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009132:	40d8      	lsrs	r0, r3
34009134:	e7b5      	b.n	340090a2 <RCCEx_GetI3CCLKFreq+0x32>
}
34009136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400913a:	f7ff b9a3 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3400913e:	f7fc f83d 	bl	340051bc <LL_RCC_IC15_IsEnabled>
34009142:	2800      	cmp	r0, #0
34009144:	d0ac      	beq.n	340090a0 <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
34009146:	f7fc f841 	bl	340051cc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400914a:	4b0a      	ldr	r3, [pc, #40]	@ (34009174 <RCCEx_GetI3CCLKFreq+0x104>)
3400914c:	4604      	mov	r4, r0
3400914e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34009152:	e7b8      	b.n	340090c6 <RCCEx_GetI3CCLKFreq+0x56>
        switch (LL_RCC_IC15_GetSource())
34009154:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009158:	d1a2      	bne.n	340090a0 <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400915a:	f7ff f953 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
3400915e:	e7bc      	b.n	340090da <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009160:	f7ff f8d0 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34009164:	e7b9      	b.n	340090da <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009166:	f7ff f90d 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
3400916a:	e7b6      	b.n	340090da <RCCEx_GetI3CCLKFreq+0x6a>
3400916c:	0703100c 	.word	0x0703100c
34009170:	0702100c 	.word	0x0702100c
34009174:	56028000 	.word	0x56028000
34009178:	0704140c 	.word	0x0704140c
3400917c:	003d0900 	.word	0x003d0900
34009180:	0705100c 	.word	0x0705100c
34009184:	03d09000 	.word	0x03d09000

34009188 <RCCEx_GetSDMMCCLKFreq>:
{
34009188:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400918a:	f7fb ffc1 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3400918e:	4b2d      	ldr	r3, [pc, #180]	@ (34009244 <RCCEx_GetSDMMCCLKFreq+0xbc>)
34009190:	4298      	cmp	r0, r3
34009192:	d01d      	beq.n	340091d0 <RCCEx_GetSDMMCCLKFreq+0x48>
34009194:	d813      	bhi.n	340091be <RCCEx_GetSDMMCCLKFreq+0x36>
34009196:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400919a:	4298      	cmp	r0, r3
3400919c:	d00b      	beq.n	340091b6 <RCCEx_GetSDMMCCLKFreq+0x2e>
3400919e:	d807      	bhi.n	340091b0 <RCCEx_GetSDMMCCLKFreq+0x28>
340091a0:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340091a4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340091a8:	4298      	cmp	r0, r3
340091aa:	d02a      	beq.n	34009202 <RCCEx_GetSDMMCCLKFreq+0x7a>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
340091ac:	2000      	movs	r0, #0
}
340091ae:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
340091b0:	4b25      	ldr	r3, [pc, #148]	@ (34009248 <RCCEx_GetSDMMCCLKFreq+0xc0>)
340091b2:	4298      	cmp	r0, r3
340091b4:	d1fa      	bne.n	340091ac <RCCEx_GetSDMMCCLKFreq+0x24>
}
340091b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340091ba:	f7ff b963 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
340091be:	4b23      	ldr	r3, [pc, #140]	@ (3400924c <RCCEx_GetSDMMCCLKFreq+0xc4>)
340091c0:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340091c4:	429a      	cmp	r2, r3
340091c6:	d022      	beq.n	3400920e <RCCEx_GetSDMMCCLKFreq+0x86>
340091c8:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340091cc:	4298      	cmp	r0, r3
340091ce:	d1ed      	bne.n	340091ac <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
340091d0:	4b1f      	ldr	r3, [pc, #124]	@ (34009250 <RCCEx_GetSDMMCCLKFreq+0xc8>)
340091d2:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
340091d6:	f010 0008 	ands.w	r0, r0, #8
340091da:	d0e8      	beq.n	340091ae <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
340091dc:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
340091e0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
340091e4:	f3c0 4007 	ubfx	r0, r0, #16, #8
340091e8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340091ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC5_GetSource())
340091ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340091f2:	d023      	beq.n	3400923c <RCCEx_GetSDMMCCLKFreq+0xb4>
340091f4:	d819      	bhi.n	3400922a <RCCEx_GetSDMMCCLKFreq+0xa2>
340091f6:	b9f3      	cbnz	r3, 34009236 <RCCEx_GetSDMMCCLKFreq+0xae>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340091f8:	f7ff f844 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340091fc:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
34009200:	e7d5      	b.n	340091ae <RCCEx_GetSDMMCCLKFreq+0x26>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009202:	f7fb fee5 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
}
34009206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3400920a:	f7fb bfe9 	b.w	340051e0 <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3400920e:	4b10      	ldr	r3, [pc, #64]	@ (34009250 <RCCEx_GetSDMMCCLKFreq+0xc8>)
34009210:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34009214:	f010 0010 	ands.w	r0, r0, #16
34009218:	d0c9      	beq.n	340091ae <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3400921a:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3400921e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34009222:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009226:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34009228:	e7df      	b.n	340091ea <RCCEx_GetSDMMCCLKFreq+0x62>
        switch (LL_RCC_IC5_GetSource())
3400922a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400922e:	d1bd      	bne.n	340091ac <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009230:	f7ff f8e8 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34009234:	e7e2      	b.n	340091fc <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009236:	f7ff f865 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
3400923a:	e7df      	b.n	340091fc <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400923c:	f7ff f8a2 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34009240:	e7dc      	b.n	340091fc <RCCEx_GetSDMMCCLKFreq+0x74>
34009242:	bf00      	nop
34009244:	0302001c 	.word	0x0302001c
34009248:	0301041c 	.word	0x0301041c
3400924c:	0303001c 	.word	0x0303001c
34009250:	56028000 	.word	0x56028000

34009254 <RCCEx_GetI2CCLKFreq>:
{
34009254:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009256:	f7fb ff5b 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400925a:	4b50      	ldr	r3, [pc, #320]	@ (3400939c <RCCEx_GetI2CCLKFreq+0x148>)
3400925c:	4298      	cmp	r0, r3
3400925e:	f000 8085 	beq.w	3400936c <RCCEx_GetI2CCLKFreq+0x118>
34009262:	d84b      	bhi.n	340092fc <RCCEx_GetI2CCLKFreq+0xa8>
34009264:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
34009268:	4298      	cmp	r0, r3
3400926a:	d01a      	beq.n	340092a2 <RCCEx_GetI2CCLKFreq+0x4e>
3400926c:	d81d      	bhi.n	340092aa <RCCEx_GetI2CCLKFreq+0x56>
3400926e:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009272:	4298      	cmp	r0, r3
34009274:	d008      	beq.n	34009288 <RCCEx_GetI2CCLKFreq+0x34>
34009276:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
3400927a:	d80f      	bhi.n	3400929c <RCCEx_GetI2CCLKFreq+0x48>
3400927c:	4a48      	ldr	r2, [pc, #288]	@ (340093a0 <RCCEx_GetI2CCLKFreq+0x14c>)
3400927e:	4293      	cmp	r3, r2
34009280:	d002      	beq.n	34009288 <RCCEx_GetI2CCLKFreq+0x34>
34009282:	4b48      	ldr	r3, [pc, #288]	@ (340093a4 <RCCEx_GetI2CCLKFreq+0x150>)
34009284:	4298      	cmp	r0, r3
34009286:	d14a      	bne.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009288:	f7fb fea2 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
3400928c:	f7fb ffa8 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009290:	4b45      	ldr	r3, [pc, #276]	@ (340093a8 <RCCEx_GetI2CCLKFreq+0x154>)
34009292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009294:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009298:	40d8      	lsrs	r0, r3
3400929a:	e041      	b.n	34009320 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400929c:	4a43      	ldr	r2, [pc, #268]	@ (340093ac <RCCEx_GetI2CCLKFreq+0x158>)
3400929e:	4293      	cmp	r3, r2
340092a0:	d13d      	bne.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
}
340092a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340092a6:	f7ff b8ed 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340092aa:	4b41      	ldr	r3, [pc, #260]	@ (340093b0 <RCCEx_GetI2CCLKFreq+0x15c>)
340092ac:	4298      	cmp	r0, r3
340092ae:	d008      	beq.n	340092c2 <RCCEx_GetI2CCLKFreq+0x6e>
340092b0:	d820      	bhi.n	340092f4 <RCCEx_GetI2CCLKFreq+0xa0>
340092b2:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
340092b6:	4298      	cmp	r0, r3
340092b8:	d0f3      	beq.n	340092a2 <RCCEx_GetI2CCLKFreq+0x4e>
340092ba:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
340092be:	4298      	cmp	r0, r3
340092c0:	d12d      	bne.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340092c2:	4b39      	ldr	r3, [pc, #228]	@ (340093a8 <RCCEx_GetI2CCLKFreq+0x154>)
340092c4:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340092c8:	0592      	lsls	r2, r2, #22
340092ca:	d528      	bpl.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340092cc:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340092d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340092d4:	f3c0 4007 	ubfx	r0, r0, #16, #8
340092d8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340092da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
340092de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340092e2:	d057      	beq.n	34009394 <RCCEx_GetI2CCLKFreq+0x140>
340092e4:	d84d      	bhi.n	34009382 <RCCEx_GetI2CCLKFreq+0x12e>
340092e6:	2b00      	cmp	r3, #0
340092e8:	d151      	bne.n	3400938e <RCCEx_GetI2CCLKFreq+0x13a>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340092ea:	f7fe ffcb 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
340092ee:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340092f2:	e015      	b.n	34009320 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340092f4:	4b2f      	ldr	r3, [pc, #188]	@ (340093b4 <RCCEx_GetI2CCLKFreq+0x160>)
340092f6:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340092fa:	e7e0      	b.n	340092be <RCCEx_GetI2CCLKFreq+0x6a>
340092fc:	4b2e      	ldr	r3, [pc, #184]	@ (340093b8 <RCCEx_GetI2CCLKFreq+0x164>)
340092fe:	4298      	cmp	r0, r3
34009300:	d014      	beq.n	3400932c <RCCEx_GetI2CCLKFreq+0xd8>
34009302:	d819      	bhi.n	34009338 <RCCEx_GetI2CCLKFreq+0xe4>
34009304:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009308:	4298      	cmp	r0, r3
3400930a:	d02f      	beq.n	3400936c <RCCEx_GetI2CCLKFreq+0x118>
3400930c:	d809      	bhi.n	34009322 <RCCEx_GetI2CCLKFreq+0xce>
3400930e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34009312:	4298      	cmp	r0, r3
34009314:	d02a      	beq.n	3400936c <RCCEx_GetI2CCLKFreq+0x118>
34009316:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400931a:	4298      	cmp	r0, r3
3400931c:	d026      	beq.n	3400936c <RCCEx_GetI2CCLKFreq+0x118>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3400931e:	2000      	movs	r0, #0
}
34009320:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009322:	4b26      	ldr	r3, [pc, #152]	@ (340093bc <RCCEx_GetI2CCLKFreq+0x168>)
34009324:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009328:	4298      	cmp	r0, r3
3400932a:	d1f8      	bne.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_MSI_IsReady() != 0U)
3400932c:	f7fb fece 	bl	340050cc <LL_RCC_MSI_IsReady>
34009330:	2800      	cmp	r0, #0
34009332:	d0f4      	beq.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
        i2c_frequency = MSI_VALUE;
34009334:	4822      	ldr	r0, [pc, #136]	@ (340093c0 <RCCEx_GetI2CCLKFreq+0x16c>)
  return i2c_frequency;
34009336:	e7f3      	b.n	34009320 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009338:	4b22      	ldr	r3, [pc, #136]	@ (340093c4 <RCCEx_GetI2CCLKFreq+0x170>)
3400933a:	4298      	cmp	r0, r3
3400933c:	d008      	beq.n	34009350 <RCCEx_GetI2CCLKFreq+0xfc>
3400933e:	d811      	bhi.n	34009364 <RCCEx_GetI2CCLKFreq+0x110>
34009340:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34009344:	4298      	cmp	r0, r3
34009346:	d0f1      	beq.n	3400932c <RCCEx_GetI2CCLKFreq+0xd8>
34009348:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
3400934c:	4298      	cmp	r0, r3
3400934e:	d1e6      	bne.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_HSI_IsReady() != 0U)
34009350:	f7fb feb4 	bl	340050bc <LL_RCC_HSI_IsReady>
34009354:	2800      	cmp	r0, #0
34009356:	d0e2      	beq.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009358:	4b13      	ldr	r3, [pc, #76]	@ (340093a8 <RCCEx_GetI2CCLKFreq+0x154>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400935a:	481b      	ldr	r0, [pc, #108]	@ (340093c8 <RCCEx_GetI2CCLKFreq+0x174>)
3400935c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400935e:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009362:	e799      	b.n	34009298 <RCCEx_GetI2CCLKFreq+0x44>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009364:	4b19      	ldr	r3, [pc, #100]	@ (340093cc <RCCEx_GetI2CCLKFreq+0x178>)
34009366:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400936a:	e7ef      	b.n	3400934c <RCCEx_GetI2CCLKFreq+0xf8>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3400936c:	f7fb ff26 	bl	340051bc <LL_RCC_IC15_IsEnabled>
34009370:	2800      	cmp	r0, #0
34009372:	d0d4      	beq.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
        ic_divider = LL_RCC_IC15_GetDivider();
34009374:	f7fb ff2a 	bl	340051cc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009378:	4b0b      	ldr	r3, [pc, #44]	@ (340093a8 <RCCEx_GetI2CCLKFreq+0x154>)
3400937a:	4604      	mov	r4, r0
3400937c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34009380:	e7ab      	b.n	340092da <RCCEx_GetI2CCLKFreq+0x86>
        switch (LL_RCC_IC15_GetSource())
34009382:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009386:	d1ca      	bne.n	3400931e <RCCEx_GetI2CCLKFreq+0xca>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009388:	f7ff f83c 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
3400938c:	e7af      	b.n	340092ee <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400938e:	f7fe ffb9 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34009392:	e7ac      	b.n	340092ee <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009394:	f7fe fff6 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34009398:	e7a9      	b.n	340092ee <RCCEx_GetI2CCLKFreq+0x9a>
3400939a:	bf00      	nop
3400939c:	0703000c 	.word	0x0703000c
340093a0:	0700000c 	.word	0x0700000c
340093a4:	0700080c 	.word	0x0700080c
340093a8:	56028000 	.word	0x56028000
340093ac:	0701000c 	.word	0x0701000c
340093b0:	0702040c 	.word	0x0702040c
340093b4:	0702080c 	.word	0x0702080c
340093b8:	0704080c 	.word	0x0704080c
340093bc:	0704000c 	.word	0x0704000c
340093c0:	003d0900 	.word	0x003d0900
340093c4:	0705040c 	.word	0x0705040c
340093c8:	03d09000 	.word	0x03d09000
340093cc:	0705080c 	.word	0x0705080c

340093d0 <RCCEx_GetLPTIMCLKFreq>:
{
340093d0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340093d2:	f7fb fe9d 	bl	34005110 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340093d6:	4b63      	ldr	r3, [pc, #396]	@ (34009564 <RCCEx_GetLPTIMCLKFreq+0x194>)
340093d8:	4298      	cmp	r0, r3
340093da:	d03a      	beq.n	34009452 <RCCEx_GetLPTIMCLKFreq+0x82>
340093dc:	d850      	bhi.n	34009480 <RCCEx_GetLPTIMCLKFreq+0xb0>
340093de:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
340093e2:	4298      	cmp	r0, r3
340093e4:	f000 80a7 	beq.w	34009536 <RCCEx_GetLPTIMCLKFreq+0x166>
340093e8:	d813      	bhi.n	34009412 <RCCEx_GetLPTIMCLKFreq+0x42>
340093ea:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
340093ee:	4298      	cmp	r0, r3
340093f0:	f000 8097 	beq.w	34009522 <RCCEx_GetLPTIMCLKFreq+0x152>
340093f4:	3b01      	subs	r3, #1
340093f6:	4298      	cmp	r0, r3
340093f8:	d909      	bls.n	3400940e <RCCEx_GetLPTIMCLKFreq+0x3e>
340093fa:	f203 4301 	addw	r3, r3, #1025	@ 0x401
340093fe:	4298      	cmp	r0, r3
34009400:	f000 8099 	beq.w	34009536 <RCCEx_GetLPTIMCLKFreq+0x166>
34009404:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009408:	4298      	cmp	r0, r3
3400940a:	f000 8094 	beq.w	34009536 <RCCEx_GetLPTIMCLKFreq+0x166>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
3400940e:	2000      	movs	r0, #0
}
34009410:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009412:	4b55      	ldr	r3, [pc, #340]	@ (34009568 <RCCEx_GetLPTIMCLKFreq+0x198>)
34009414:	4298      	cmp	r0, r3
34009416:	d015      	beq.n	34009444 <RCCEx_GetLPTIMCLKFreq+0x74>
34009418:	d808      	bhi.n	3400942c <RCCEx_GetLPTIMCLKFreq+0x5c>
3400941a:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3400941e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34009422:	429a      	cmp	r2, r3
34009424:	d00e      	beq.n	34009444 <RCCEx_GetLPTIMCLKFreq+0x74>
34009426:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
3400942a:	e7ed      	b.n	34009408 <RCCEx_GetLPTIMCLKFreq+0x38>
3400942c:	4b4f      	ldr	r3, [pc, #316]	@ (3400956c <RCCEx_GetLPTIMCLKFreq+0x19c>)
3400942e:	4298      	cmp	r0, r3
34009430:	d00f      	beq.n	34009452 <RCCEx_GetLPTIMCLKFreq+0x82>
34009432:	d80b      	bhi.n	3400944c <RCCEx_GetLPTIMCLKFreq+0x7c>
34009434:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009438:	4298      	cmp	r0, r3
3400943a:	d003      	beq.n	34009444 <RCCEx_GetLPTIMCLKFreq+0x74>
3400943c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009440:	4298      	cmp	r0, r3
34009442:	d1e4      	bne.n	3400940e <RCCEx_GetLPTIMCLKFreq+0x3e>
}
34009444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009448:	f7ff b81c 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400944c:	4b48      	ldr	r3, [pc, #288]	@ (34009570 <RCCEx_GetLPTIMCLKFreq+0x1a0>)
3400944e:	4298      	cmp	r0, r3
34009450:	d1dd      	bne.n	3400940e <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34009452:	f7fb feb3 	bl	340051bc <LL_RCC_IC15_IsEnabled>
34009456:	2800      	cmp	r0, #0
34009458:	d0d9      	beq.n	3400940e <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
3400945a:	f7fb feb7 	bl	340051cc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400945e:	4b45      	ldr	r3, [pc, #276]	@ (34009574 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009460:	4604      	mov	r4, r0
34009462:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34009466:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3400946a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400946e:	d075      	beq.n	3400955c <RCCEx_GetLPTIMCLKFreq+0x18c>
34009470:	d86a      	bhi.n	34009548 <RCCEx_GetLPTIMCLKFreq+0x178>
34009472:	2b00      	cmp	r3, #0
34009474:	d16f      	bne.n	34009556 <RCCEx_GetLPTIMCLKFreq+0x186>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009476:	f7fe ff05 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
3400947a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400947e:	e7c7      	b.n	34009410 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009480:	4b3d      	ldr	r3, [pc, #244]	@ (34009578 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
34009482:	4298      	cmp	r0, r3
34009484:	d034      	beq.n	340094f0 <RCCEx_GetLPTIMCLKFreq+0x120>
34009486:	d824      	bhi.n	340094d2 <RCCEx_GetLPTIMCLKFreq+0x102>
34009488:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3400948c:	4298      	cmp	r0, r3
3400948e:	d00f      	beq.n	340094b0 <RCCEx_GetLPTIMCLKFreq+0xe0>
34009490:	d815      	bhi.n	340094be <RCCEx_GetLPTIMCLKFreq+0xee>
34009492:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34009496:	4298      	cmp	r0, r3
34009498:	d00a      	beq.n	340094b0 <RCCEx_GetLPTIMCLKFreq+0xe0>
3400949a:	d806      	bhi.n	340094aa <RCCEx_GetLPTIMCLKFreq+0xda>
3400949c:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340094a0:	4298      	cmp	r0, r3
340094a2:	d0d6      	beq.n	34009452 <RCCEx_GetLPTIMCLKFreq+0x82>
340094a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340094a8:	e7d1      	b.n	3400944e <RCCEx_GetLPTIMCLKFreq+0x7e>
340094aa:	4b34      	ldr	r3, [pc, #208]	@ (3400957c <RCCEx_GetLPTIMCLKFreq+0x1ac>)
340094ac:	4298      	cmp	r0, r3
340094ae:	d1ae      	bne.n	3400940e <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
340094b0:	f7fb fe14 	bl	340050dc <LL_RCC_LSE_IsReady>
340094b4:	3800      	subs	r0, #0
340094b6:	bf18      	it	ne
340094b8:	2001      	movne	r0, #1
340094ba:	03c0      	lsls	r0, r0, #15
340094bc:	e7a8      	b.n	34009410 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340094be:	4b30      	ldr	r3, [pc, #192]	@ (34009580 <RCCEx_GetLPTIMCLKFreq+0x1b0>)
340094c0:	4298      	cmp	r0, r3
340094c2:	d0f5      	beq.n	340094b0 <RCCEx_GetLPTIMCLKFreq+0xe0>
340094c4:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
340094c8:	4298      	cmp	r0, r3
340094ca:	d011      	beq.n	340094f0 <RCCEx_GetLPTIMCLKFreq+0x120>
340094cc:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340094d0:	e7ec      	b.n	340094ac <RCCEx_GetLPTIMCLKFreq+0xdc>
340094d2:	4b2c      	ldr	r3, [pc, #176]	@ (34009584 <RCCEx_GetLPTIMCLKFreq+0x1b4>)
340094d4:	4298      	cmp	r0, r3
340094d6:	d015      	beq.n	34009504 <RCCEx_GetLPTIMCLKFreq+0x134>
340094d8:	d81b      	bhi.n	34009512 <RCCEx_GetLPTIMCLKFreq+0x142>
340094da:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340094de:	4298      	cmp	r0, r3
340094e0:	d006      	beq.n	340094f0 <RCCEx_GetLPTIMCLKFreq+0x120>
340094e2:	d80c      	bhi.n	340094fe <RCCEx_GetLPTIMCLKFreq+0x12e>
340094e4:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340094e8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340094ec:	4298      	cmp	r0, r3
340094ee:	d18e      	bne.n	3400940e <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340094f0:	4b20      	ldr	r3, [pc, #128]	@ (34009574 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340094f2:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
340094f4:	07db      	lsls	r3, r3, #31
340094f6:	d58a      	bpl.n	3400940e <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
340094f8:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
340094fc:	e788      	b.n	34009410 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340094fe:	4b22      	ldr	r3, [pc, #136]	@ (34009588 <RCCEx_GetLPTIMCLKFreq+0x1b8>)
34009500:	4298      	cmp	r0, r3
34009502:	d184      	bne.n	3400940e <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009504:	f7fb fd64 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009508:	4b1a      	ldr	r3, [pc, #104]	@ (34009574 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3400950a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400950c:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009510:	e00f      	b.n	34009532 <RCCEx_GetLPTIMCLKFreq+0x162>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009512:	4b1e      	ldr	r3, [pc, #120]	@ (3400958c <RCCEx_GetLPTIMCLKFreq+0x1bc>)
34009514:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34009518:	429a      	cmp	r2, r3
3400951a:	d0f3      	beq.n	34009504 <RCCEx_GetLPTIMCLKFreq+0x134>
3400951c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34009520:	e7ee      	b.n	34009500 <RCCEx_GetLPTIMCLKFreq+0x130>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009522:	f7fb fd55 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34009526:	f7fb fe5b 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3400952a:	4b12      	ldr	r3, [pc, #72]	@ (34009574 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3400952c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400952e:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009532:	40d8      	lsrs	r0, r3
      break;
34009534:	e76c      	b.n	34009410 <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009536:	f7fb fd4b 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
3400953a:	f7fb fe51 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3400953e:	4b0d      	ldr	r3, [pc, #52]	@ (34009574 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009542:	f3c3 3302 	ubfx	r3, r3, #12, #3
34009546:	e7f4      	b.n	34009532 <RCCEx_GetLPTIMCLKFreq+0x162>
        switch (LL_RCC_IC15_GetSource())
34009548:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400954c:	f47f af5f 	bne.w	3400940e <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009550:	f7fe ff58 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34009554:	e791      	b.n	3400947a <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009556:	f7fe fed5 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
3400955a:	e78e      	b.n	3400947a <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400955c:	f7fe ff12 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34009560:	e78b      	b.n	3400947a <RCCEx_GetLPTIMCLKFreq+0xaa>
34009562:	bf00      	nop
34009564:	0702102c 	.word	0x0702102c
34009568:	0701102c 	.word	0x0701102c
3400956c:	0702082c 	.word	0x0702082c
34009570:	07020c2c 	.word	0x07020c2c
34009574:	56028000 	.word	0x56028000
34009578:	07040c2c 	.word	0x07040c2c
3400957c:	07030c2c 	.word	0x07030c2c
34009580:	0703182c 	.word	0x0703182c
34009584:	07050c2c 	.word	0x07050c2c
34009588:	0705082c 	.word	0x0705082c
3400958c:	0705102c 	.word	0x0705102c

34009590 <HAL_RCCEx_GetPeriphCLKFreq>:
{
34009590:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
34009592:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
34009596:	430b      	orrs	r3, r1
34009598:	f000 8447 	beq.w	34009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
3400959c:	4bbf      	ldr	r3, [pc, #764]	@ (3400989c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
3400959e:	4298      	cmp	r0, r3
340095a0:	f171 0300 	sbcs.w	r3, r1, #0
340095a4:	f080 80e6 	bcs.w	34009774 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
340095a8:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
340095ac:	430b      	orrs	r3, r1
340095ae:	f000 835b 	beq.w	34009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
340095b2:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
340095b6:	f171 0300 	sbcs.w	r3, r1, #0
340095ba:	d26a      	bcs.n	34009692 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
340095bc:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
340095c0:	430b      	orrs	r3, r1
340095c2:	f000 82b9 	beq.w	34009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
340095c6:	f240 2301 	movw	r3, #513	@ 0x201
340095ca:	4298      	cmp	r0, r3
340095cc:	f171 0300 	sbcs.w	r3, r1, #0
340095d0:	d224      	bcs.n	3400961c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
340095d2:	2809      	cmp	r0, #9
340095d4:	f171 0300 	sbcs.w	r3, r1, #0
340095d8:	d215      	bcs.n	34009606 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
340095da:	ea50 0301 	orrs.w	r3, r0, r1
340095de:	d01b      	beq.n	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
340095e0:	3801      	subs	r0, #1
340095e2:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
340095e6:	2808      	cmp	r0, #8
340095e8:	f171 0100 	sbcs.w	r1, r1, #0
340095ec:	d214      	bcs.n	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
340095ee:	2807      	cmp	r0, #7
340095f0:	d812      	bhi.n	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
340095f2:	e8df f010 	tbh	[pc, r0, lsl #1]
340095f6:	01a6      	.short	0x01a6
340095f8:	0011020f 	.word	0x0011020f
340095fc:	00110285 	.word	0x00110285
34009600:	00110011 	.word	0x00110011
34009604:	0235      	.short	0x0235
34009606:	f1a0 0310 	sub.w	r3, r0, #16
3400960a:	430b      	orrs	r3, r1
3400960c:	f000 8242 	beq.w	34009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
34009610:	3820      	subs	r0, #32
34009612:	4308      	orrs	r0, r1
34009614:	f000 8268 	beq.w	34009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34009618:	2000      	movs	r0, #0
3400961a:	e219      	b.n	34009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
3400961c:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
34009620:	430b      	orrs	r3, r1
34009622:	f000 831d 	beq.w	34009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
34009626:	f242 0301 	movw	r3, #8193	@ 0x2001
3400962a:	4298      	cmp	r0, r3
3400962c:	f171 0300 	sbcs.w	r3, r1, #0
34009630:	d224      	bcs.n	3400967c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
34009632:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
34009636:	430b      	orrs	r3, r1
34009638:	f000 82df 	beq.w	34009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
3400963c:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
34009640:	430b      	orrs	r3, r1
34009642:	f000 8308 	beq.w	34009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
34009646:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
3400964a:	4308      	orrs	r0, r1
3400964c:	d1e4      	bne.n	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
3400964e:	4d94      	ldr	r5, [pc, #592]	@ (340098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34009650:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
34009654:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34009658:	2b02      	cmp	r3, #2
3400965a:	f000 82c1 	beq.w	34009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
3400965e:	2b03      	cmp	r3, #3
34009660:	f000 8256 	beq.w	34009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
34009664:	2b01      	cmp	r3, #1
34009666:	f000 824b 	beq.w	34009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400966a:	f7fb fcb1 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
3400966e:	f7fb fdb7 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009672:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009674:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009678:	40d8      	lsrs	r0, r3
3400967a:	e1e9      	b.n	34009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
3400967c:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
34009680:	430b      	orrs	r3, r1
34009682:	f000 82ef 	beq.w	34009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
34009686:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
3400968a:	4308      	orrs	r0, r1
3400968c:	d1c4      	bne.n	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3400968e:	4885      	ldr	r0, [pc, #532]	@ (340098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
34009690:	e2e2      	b.n	34009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
  switch (PeriphClk)
34009692:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
34009696:	430b      	orrs	r3, r1
34009698:	f000 82f6 	beq.w	34009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
3400969c:	4b82      	ldr	r3, [pc, #520]	@ (340098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
3400969e:	4298      	cmp	r0, r3
340096a0:	f171 0300 	sbcs.w	r3, r1, #0
340096a4:	d224      	bcs.n	340096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
340096a6:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
340096aa:	430b      	orrs	r3, r1
340096ac:	f000 82e8 	beq.w	34009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
340096b0:	4b7e      	ldr	r3, [pc, #504]	@ (340098ac <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
340096b2:	4298      	cmp	r0, r3
340096b4:	f171 0300 	sbcs.w	r3, r1, #0
340096b8:	d20f      	bcs.n	340096da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
340096ba:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
340096be:	430b      	orrs	r3, r1
340096c0:	f000 82d7 	beq.w	34009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
340096c4:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
340096c8:	430b      	orrs	r3, r1
340096ca:	f000 82d7 	beq.w	34009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
340096ce:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
340096d2:	4308      	orrs	r0, r1
340096d4:	d1a0      	bne.n	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
340096d6:	4876      	ldr	r0, [pc, #472]	@ (340098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
340096d8:	e2c7      	b.n	34009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
  switch (PeriphClk)
340096da:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
340096de:	430b      	orrs	r3, r1
340096e0:	f000 82d0 	beq.w	34009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
340096e4:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
340096e8:	4308      	orrs	r0, r1
340096ea:	d195      	bne.n	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
340096ec:	4871      	ldr	r0, [pc, #452]	@ (340098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
340096ee:	e2c1      	b.n	34009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  switch (PeriphClk)
340096f0:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
340096f4:	430b      	orrs	r3, r1
340096f6:	f000 834d 	beq.w	34009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
340096fa:	4b6f      	ldr	r3, [pc, #444]	@ (340098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
340096fc:	4298      	cmp	r0, r3
340096fe:	f171 0300 	sbcs.w	r3, r1, #0
34009702:	d228      	bcs.n	34009756 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
34009704:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
34009708:	430b      	orrs	r3, r1
3400970a:	f000 8302 	beq.w	34009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
3400970e:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
34009712:	4308      	orrs	r0, r1
34009714:	d180      	bne.n	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34009716:	4d62      	ldr	r5, [pc, #392]	@ (340098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34009718:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
3400971c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009720:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34009724:	f000 8195 	beq.w	34009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34009728:	f200 8319 	bhi.w	34009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
3400972c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009730:	f000 831f 	beq.w	34009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
34009734:	f240 81e1 	bls.w	34009afa <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34009738:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400973c:	f47f af6c 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009740:	f7fb fd06 	bl	34005150 <LL_RCC_IC8_IsEnabled>
34009744:	2800      	cmp	r0, #0
34009746:	f43f af67 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
3400974a:	f7fb fd09 	bl	34005160 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3400974e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34009752:	4604      	mov	r4, r0
34009754:	e191      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (PeriphClk)
34009756:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
3400975a:	430b      	orrs	r3, r1
3400975c:	f000 8344 	beq.w	34009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34009760:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
34009764:	4308      	orrs	r0, r1
34009766:	f47f af57 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
3400976a:	4854      	ldr	r0, [pc, #336]	@ (340098bc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
}
3400976c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34009770:	f7ff bbd6 	b.w	34008f20 <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
34009774:	2300      	movs	r3, #0
34009776:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400977a:	4291      	cmp	r1, r2
3400977c:	bf08      	it	eq
3400977e:	4298      	cmpeq	r0, r3
34009780:	f000 836f 	beq.w	34009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
34009784:	4283      	cmp	r3, r0
34009786:	418a      	sbcs	r2, r1
34009788:	d35f      	bcc.n	3400984a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
3400978a:	2210      	movs	r2, #16
3400978c:	4291      	cmp	r1, r2
3400978e:	bf08      	it	eq
34009790:	4298      	cmpeq	r0, r3
34009792:	f000 8359 	beq.w	34009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
34009796:	4283      	cmp	r3, r0
34009798:	418a      	sbcs	r2, r1
3400979a:	d329      	bcc.n	340097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
3400979c:	2202      	movs	r2, #2
3400979e:	4291      	cmp	r1, r2
340097a0:	bf08      	it	eq
340097a2:	4298      	cmpeq	r0, r3
340097a4:	f000 8349 	beq.w	34009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
340097a8:	4283      	cmp	r3, r0
340097aa:	418a      	sbcs	r2, r1
340097ac:	d314      	bcc.n	340097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
340097ae:	4299      	cmp	r1, r3
340097b0:	bf08      	it	eq
340097b2:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
340097b6:	f000 833a 	beq.w	34009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
340097ba:	2901      	cmp	r1, #1
340097bc:	bf08      	it	eq
340097be:	4298      	cmpeq	r0, r3
340097c0:	f000 8337 	beq.w	34009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
340097c4:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
340097c8:	4308      	orrs	r0, r1
340097ca:	f47f af25 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
340097ce:	483c      	ldr	r0, [pc, #240]	@ (340098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
}
340097d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
340097d4:	f7ff bcd8 	b.w	34009188 <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
340097d8:	2904      	cmp	r1, #4
340097da:	bf08      	it	eq
340097dc:	4298      	cmpeq	r0, r3
340097de:	f000 8331 	beq.w	34009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
340097e2:	2908      	cmp	r1, #8
340097e4:	bf08      	it	eq
340097e6:	4298      	cmpeq	r0, r3
340097e8:	f47f af16 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
340097ec:	4835      	ldr	r0, [pc, #212]	@ (340098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
340097ee:	e325      	b.n	34009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
340097f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
340097f4:	4291      	cmp	r1, r2
340097f6:	bf08      	it	eq
340097f8:	4298      	cmpeq	r0, r3
340097fa:	f000 832e 	beq.w	34009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
340097fe:	4283      	cmp	r3, r0
34009800:	418a      	sbcs	r2, r1
34009802:	d311      	bcc.n	34009828 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
34009804:	2940      	cmp	r1, #64	@ 0x40
34009806:	bf08      	it	eq
34009808:	4298      	cmpeq	r0, r3
3400980a:	f000 831f 	beq.w	34009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
3400980e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
34009812:	bf08      	it	eq
34009814:	4298      	cmpeq	r0, r3
34009816:	f000 831b 	beq.w	34009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
3400981a:	2920      	cmp	r1, #32
3400981c:	bf08      	it	eq
3400981e:	2800      	cmpeq	r0, #0
34009820:	f47f aefa 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34009824:	4828      	ldr	r0, [pc, #160]	@ (340098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
34009826:	e309      	b.n	34009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34009828:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
3400982c:	bf08      	it	eq
3400982e:	4298      	cmpeq	r0, r3
34009830:	f000 8315 	beq.w	34009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
34009834:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
34009838:	bf08      	it	eq
3400983a:	4298      	cmpeq	r0, r3
3400983c:	f47f aeec 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34009840:	4822      	ldr	r0, [pc, #136]	@ (340098cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
}
34009842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34009846:	f7ff b919 	b.w	34008a7c <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
3400984a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3400984e:	4291      	cmp	r1, r2
34009850:	bf08      	it	eq
34009852:	4298      	cmpeq	r0, r3
34009854:	f000 830f 	beq.w	34009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
34009858:	4283      	cmp	r3, r0
3400985a:	418a      	sbcs	r2, r1
3400985c:	d34b      	bcc.n	340098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
3400985e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34009862:	4291      	cmp	r1, r2
34009864:	bf08      	it	eq
34009866:	4298      	cmpeq	r0, r3
34009868:	f000 8301 	beq.w	34009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
3400986c:	4283      	cmp	r3, r0
3400986e:	418a      	sbcs	r2, r1
34009870:	d330      	bcc.n	340098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
34009872:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
34009876:	bf08      	it	eq
34009878:	4298      	cmpeq	r0, r3
3400987a:	f000 82f4 	beq.w	34009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
3400987e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
34009882:	bf08      	it	eq
34009884:	4298      	cmpeq	r0, r3
34009886:	f000 82f0 	beq.w	34009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
3400988a:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
3400988e:	bf08      	it	eq
34009890:	2800      	cmpeq	r0, #0
34009892:	f47f aec1 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34009896:	480e      	ldr	r0, [pc, #56]	@ (340098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
34009898:	e2db      	b.n	34009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
3400989a:	bf00      	nop
3400989c:	20000001 	.word	0x20000001
340098a0:	56028000 	.word	0x56028000
340098a4:	07000c0c 	.word	0x07000c0c
340098a8:	00800001 	.word	0x00800001
340098ac:	00100001 	.word	0x00100001
340098b0:	0700140c 	.word	0x0700140c
340098b4:	0700182c 	.word	0x0700182c
340098b8:	04000001 	.word	0x04000001
340098bc:	07001418 	.word	0x07001418
340098c0:	0300001c 	.word	0x0300001c
340098c4:	07000c20 	.word	0x07000c20
340098c8:	07001420 	.word	0x07001420
340098cc:	07000c30 	.word	0x07000c30
340098d0:	07001430 	.word	0x07001430
  switch (PeriphClk)
340098d4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
340098d8:	bf08      	it	eq
340098da:	4298      	cmpeq	r0, r3
340098dc:	f000 82c9 	beq.w	34009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
340098e0:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
340098e4:	bf08      	it	eq
340098e6:	4298      	cmpeq	r0, r3
340098e8:	f47f ae96 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
340098ec:	48b4      	ldr	r0, [pc, #720]	@ (34009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
}
340098ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
340098f2:	f7fe bf8d 	b.w	34008810 <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
340098f6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
340098fa:	4291      	cmp	r1, r2
340098fc:	bf08      	it	eq
340098fe:	4298      	cmpeq	r0, r3
34009900:	f000 82c0 	beq.w	34009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
34009904:	4283      	cmp	r3, r0
34009906:	418a      	sbcs	r2, r1
34009908:	d30d      	bcc.n	34009926 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
3400990a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
3400990e:	bf08      	it	eq
34009910:	4298      	cmpeq	r0, r3
34009912:	f000 82b5 	beq.w	34009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
34009916:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
3400991a:	bf08      	it	eq
3400991c:	4298      	cmpeq	r0, r3
3400991e:	f47f ae7b 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34009922:	48a8      	ldr	r0, [pc, #672]	@ (34009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
34009924:	e2a8      	b.n	34009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  switch (PeriphClk)
34009926:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
3400992a:	bf08      	it	eq
3400992c:	4298      	cmpeq	r0, r3
3400992e:	f000 82ae 	beq.w	34009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
34009932:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
34009936:	bf08      	it	eq
34009938:	4298      	cmpeq	r0, r3
3400993a:	f47f ae6d 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3400993e:	48a2      	ldr	r0, [pc, #648]	@ (34009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
34009940:	e2a1      	b.n	34009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34009942:	4da2      	ldr	r5, [pc, #648]	@ (34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009944:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009948:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
3400994c:	2b40      	cmp	r3, #64	@ 0x40
3400994e:	d053      	beq.n	340099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
34009950:	d814      	bhi.n	3400997c <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
34009952:	2b20      	cmp	r3, #32
34009954:	d025      	beq.n	340099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
34009956:	d805      	bhi.n	34009964 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
34009958:	bb03      	cbnz	r3, 3400999c <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3400995a:	f7fb fb39 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
3400995e:	f7fb fc3f 	bl	340051e0 <RCCEx_GetHCLKFreq>
      break;
34009962:	e002      	b.n	3400996a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009964:	2b30      	cmp	r3, #48	@ 0x30
34009966:	d034      	beq.n	340099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34009968:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
3400996a:	4b98      	ldr	r3, [pc, #608]	@ (34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3400996c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34009970:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34009974:	3301      	adds	r3, #1
34009976:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
3400997a:	e069      	b.n	34009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
3400997c:	2b60      	cmp	r3, #96	@ 0x60
3400997e:	d047      	beq.n	34009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
34009980:	2b70      	cmp	r3, #112	@ 0x70
34009982:	d03f      	beq.n	34009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
34009984:	2b50      	cmp	r3, #80	@ 0x50
34009986:	d1ef      	bne.n	34009968 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34009988:	f7fb fb98 	bl	340050bc <LL_RCC_HSI_IsReady>
3400998c:	2800      	cmp	r0, #0
3400998e:	d0eb      	beq.n	34009968 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009990:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009992:	488f      	ldr	r0, [pc, #572]	@ (34009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
34009994:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009998:	40d8      	lsrs	r0, r3
      break;
3400999a:	e7e6      	b.n	3400996a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400999c:	f7fe fd72 	bl	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
340099a0:	e7e3      	b.n	3400996a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC7_IsEnabled() != 0U)
340099a2:	f7fb fbc3 	bl	3400512c <LL_RCC_IC7_IsEnabled>
340099a6:	2800      	cmp	r0, #0
340099a8:	d0de      	beq.n	34009968 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC7_GetDivider();
340099aa:	f7fb fbc7 	bl	3400513c <LL_RCC_IC7_GetDivider>
340099ae:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
340099b0:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340099b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
340099b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340099bc:	d019      	beq.n	340099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
340099be:	d812      	bhi.n	340099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
340099c0:	b913      	cbnz	r3, 340099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340099c2:	f7fe fc5f 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
340099c6:	e001      	b.n	340099cc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340099c8:	f7fe fc9c 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
340099cc:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340099d0:	e7cb      	b.n	3400996a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340099d2:	f7fb fbbd 	bl	34005150 <LL_RCC_IC8_IsEnabled>
340099d6:	2800      	cmp	r0, #0
340099d8:	d0c6      	beq.n	34009968 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC8_GetDivider();
340099da:	f7fb fbc1 	bl	34005160 <LL_RCC_IC8_GetDivider>
340099de:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
340099e2:	4604      	mov	r4, r0
340099e4:	e7e6      	b.n	340099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
        switch (LL_RCC_IC8_GetSource())
340099e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340099ea:	d1bd      	bne.n	34009968 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340099ec:	f7fe fd0a 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
340099f0:	e7ec      	b.n	340099cc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340099f2:	f7fe fcc7 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
340099f6:	e7e9      	b.n	340099cc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
      if (LL_RCC_MSI_IsReady() != 0U)
340099f8:	f7fb fb68 	bl	340050cc <LL_RCC_MSI_IsReady>
340099fc:	2800      	cmp	r0, #0
340099fe:	d0b3      	beq.n	34009968 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        adc_frequency = MSI_VALUE;
34009a00:	4874      	ldr	r0, [pc, #464]	@ (34009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34009a02:	e7b2      	b.n	3400996a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009a04:	f7fb fae4 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009a08:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009a0a:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009a0e:	e7c3      	b.n	34009998 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009a10:	4871      	ldr	r0, [pc, #452]	@ (34009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x648>)
34009a12:	e7aa      	b.n	3400996a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34009a14:	4d6d      	ldr	r5, [pc, #436]	@ (34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009a16:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009a1a:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
34009a1e:	3b01      	subs	r3, #1
34009a20:	2b06      	cmp	r3, #6
34009a22:	f200 80f5 	bhi.w	34009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
34009a26:	a201      	add	r2, pc, #4	@ (adr r2, 34009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x49c>)
34009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34009a2c:	34009b01 	.word	0x34009b01
34009a30:	34009d73 	.word	0x34009d73
34009a34:	34009741 	.word	0x34009741
34009a38:	34009a53 	.word	0x34009a53
34009a3c:	34009ac1 	.word	0x34009ac1
34009a40:	34009e93 	.word	0x34009e93
34009a44:	34009d89 	.word	0x34009d89
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009a48:	f7fe fc5c 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34009a4c:	fbb0 f0f4 	udiv	r0, r0, r4
}
34009a50:	bd38      	pop	{r3, r4, r5, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34009a52:	f7fb fb3b 	bl	340050cc <LL_RCC_MSI_IsReady>
34009a56:	2800      	cmp	r0, #0
34009a58:	f43f adde 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
34009a5c:	485d      	ldr	r0, [pc, #372]	@ (34009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34009a5e:	e7f7      	b.n	34009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34009a60:	4b5a      	ldr	r3, [pc, #360]	@ (34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009a62:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009a66:	0395      	lsls	r5, r2, #14
34009a68:	f57f add6 	bpl.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009a6c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34009a70:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009a74:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009a78:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009a7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC20_GetSource())
34009a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009a82:	f000 81ae 	beq.w	34009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
34009a86:	f200 81a5 	bhi.w	34009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34009a8a:	2b00      	cmp	r3, #0
34009a8c:	d1dc      	bne.n	34009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009a8e:	f7fe fbf9 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
34009a92:	e7db      	b.n	34009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34009a94:	4d4d      	ldr	r5, [pc, #308]	@ (34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009a96:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009a9a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009a9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34009aa2:	d014      	beq.n	34009ace <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
34009aa4:	d808      	bhi.n	34009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34009aa6:	bb5b      	cbnz	r3, 34009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009aa8:	f7fb fa92 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34009aac:	f7fb fb98 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34009ab0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34009ab2:	f3c3 4302 	ubfx	r3, r3, #16, #3
34009ab6:	e5df      	b.n	34009678 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009ab8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009abc:	f47f adac 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009ac0:	f7fb fafc 	bl	340050bc <LL_RCC_HSI_IsReady>
34009ac4:	2800      	cmp	r0, #0
34009ac6:	f43f ada7 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009aca:	6cab      	ldr	r3, [r5, #72]	@ 0x48
34009acc:	e136      	b.n	34009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34009ace:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009ad2:	03dc      	lsls	r4, r3, #15
34009ad4:	f57f ada0 	bpl.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009ad8:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009adc:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009ae0:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009ae4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009ae6:	e7c8      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34009ae8:	4a38      	ldr	r2, [pc, #224]	@ (34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009aea:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009aee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34009af6:	d012      	beq.n	34009b1e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
34009af8:	d806      	bhi.n	34009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009afa:	2b00      	cmp	r3, #0
34009afc:	f000 8088 	beq.w	34009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
}
34009b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009b04:	f7fe bcbe 	b.w	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009b08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34009b0c:	f47f ad84 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
34009b10:	f7fb facc 	bl	340050ac <LL_RCC_HSE_IsReady>
34009b14:	2800      	cmp	r0, #0
34009b16:	f43f ad7f 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
34009b1a:	4830      	ldr	r0, [pc, #192]	@ (34009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009b1c:	e798      	b.n	34009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34009b1e:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009b22:	0518      	lsls	r0, r3, #20
34009b24:	f57f ad78 	bpl.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009b28:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009b2c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009b30:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009b34:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009b36:	e7a0      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34009b38:	4a24      	ldr	r2, [pc, #144]	@ (34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009b3a:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009b3e:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34009b42:	2b02      	cmp	r3, #2
34009b44:	d010      	beq.n	34009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
34009b46:	2b03      	cmp	r3, #3
34009b48:	d034      	beq.n	34009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
34009b4a:	2b01      	cmp	r3, #1
34009b4c:	d009      	beq.n	34009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009b4e:	f7fb fa3f 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34009b52:	f7fb fb45 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34009b56:	4b1d      	ldr	r3, [pc, #116]	@ (34009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34009b58:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34009b5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
34009b60:	e708      	b.n	34009974 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009b62:	f7fe fc8f 	bl	34008484 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34009b66:	e7f6      	b.n	34009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34009b68:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009b6c:	04d9      	lsls	r1, r3, #19
34009b6e:	d516      	bpl.n	34009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009b70:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009b74:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009b78:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009b7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC13_GetSource())
34009b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009b84:	f100 0401 	add.w	r4, r0, #1
34009b88:	d00e      	beq.n	34009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
34009b8a:	d805      	bhi.n	34009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
34009b8c:	b94b      	cbnz	r3, 34009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009b8e:	f7fe fb79 	bl	34008284 <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34009b92:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009b96:	e7de      	b.n	34009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        switch (LL_RCC_IC13_GetSource())
34009b98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009b9c:	d007      	beq.n	34009bae <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
        eth1ptp_frequency = HSE_VALUE;
34009b9e:	2000      	movs	r0, #0
34009ba0:	e7d9      	b.n	34009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009ba2:	f7fe fbaf 	bl	34008304 <HAL_RCCEx_GetPLL2CLKFreq>
34009ba6:	e7f4      	b.n	34009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009ba8:	f7fe fbec 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34009bac:	e7f1      	b.n	34009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009bae:	f7fe fc29 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34009bb2:	e7ee      	b.n	34009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
      if (LL_RCC_HSE_IsReady() != 0U)
34009bb4:	f7fb fa7a 	bl	340050ac <LL_RCC_HSE_IsReady>
34009bb8:	2800      	cmp	r0, #0
34009bba:	d0f0      	beq.n	34009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        eth1ptp_frequency = HSE_VALUE;
34009bbc:	4807      	ldr	r0, [pc, #28]	@ (34009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34009bbe:	e7ca      	b.n	34009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
34009bc0:	01001014 	.word	0x01001014
34009bc4:	03001414 	.word	0x03001414
34009bc8:	03000814 	.word	0x03000814
34009bcc:	56028000 	.word	0x56028000
34009bd0:	03d09000 	.word	0x03d09000
34009bd4:	003d0900 	.word	0x003d0900
34009bd8:	00bb8000 	.word	0x00bb8000
34009bdc:	02dc6c00 	.word	0x02dc6c00
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34009be0:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009be4:	035b      	lsls	r3, r3, #13
34009be6:	f57f ad17 	bpl.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009bea:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009bee:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009bf2:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009bf6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009bf8:	e73f      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34009bfa:	4ba7      	ldr	r3, [pc, #668]	@ (34009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009bfc:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
34009c00:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009c04:	2a20      	cmp	r2, #32
34009c06:	d019      	beq.n	34009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
34009c08:	d808      	bhi.n	34009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
34009c0a:	2a00      	cmp	r2, #0
34009c0c:	f47f af78 	bne.w	34009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009c10:	f7fb f9de 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
}
34009c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009c18:	f7fb bae2 	b.w	340051e0 <RCCEx_GetHCLKFreq>
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009c1c:	2a30      	cmp	r2, #48	@ 0x30
34009c1e:	f47f acfb 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009c22:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009c26:	0714      	lsls	r4, r2, #28
34009c28:	f57f acf6 	bpl.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009c2c:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009c30:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009c34:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009c38:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009c3a:	e71e      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34009c3c:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009c40:	0755      	lsls	r5, r2, #29
34009c42:	f57f ace9 	bpl.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009c46:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009c4a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009c4e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009c52:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009c54:	e711      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34009c56:	4891      	ldr	r0, [pc, #580]	@ (34009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
}
34009c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34009c5c:	f7ff bafa 	b.w	34009254 <RCCEx_GetI2CCLKFreq>
34009c60:	488f      	ldr	r0, [pc, #572]	@ (34009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34009c62:	e7f9      	b.n	34009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34009c64:	488f      	ldr	r0, [pc, #572]	@ (34009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34009c66:	e7f7      	b.n	34009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34009c68:	488f      	ldr	r0, [pc, #572]	@ (34009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
}
34009c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34009c6e:	f7ff b9ff 	b.w	34009070 <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34009c72:	488e      	ldr	r0, [pc, #568]	@ (34009eac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
}
34009c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34009c78:	f7ff bbaa 	b.w	340093d0 <RCCEx_GetLPTIMCLKFreq>
34009c7c:	488c      	ldr	r0, [pc, #560]	@ (34009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009c7e:	e7f9      	b.n	34009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34009c80:	488c      	ldr	r0, [pc, #560]	@ (34009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34009c82:	e7f7      	b.n	34009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34009c84:	488c      	ldr	r0, [pc, #560]	@ (34009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34009c86:	e7f5      	b.n	34009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34009c88:	4a83      	ldr	r2, [pc, #524]	@ (34009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009c8a:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34009c8e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34009c92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009c96:	d031      	beq.n	34009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
34009c98:	d812      	bhi.n	34009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
34009c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009c9e:	f43f af2f 	beq.w	34009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
34009ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009ca6:	d01d      	beq.n	34009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
34009ca8:	2b00      	cmp	r3, #0
34009caa:	f47f acb5 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009cae:	f7fb f98f 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
34009cb2:	f7fb fa95 	bl	340051e0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34009cb6:	4b78      	ldr	r3, [pc, #480]	@ (34009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009cba:	f3c3 3302 	ubfx	r3, r3, #12, #3
34009cbe:	e4db      	b.n	34009678 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34009cc0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34009cc4:	f43f aec5 	beq.w	34009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34009cc8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34009ccc:	d02f      	beq.n	34009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
34009cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
34009cd2:	f47f aca1 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
34009cd6:	f7fb fa01 	bl	340050dc <LL_RCC_LSE_IsReady>
34009cda:	3800      	subs	r0, #0
34009cdc:	bf18      	it	ne
34009cde:	2001      	movne	r0, #1
34009ce0:	03c0      	lsls	r0, r0, #15
34009ce2:	e6b5      	b.n	34009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34009ce4:	f7fb fa46 	bl	34005174 <LL_RCC_IC9_IsEnabled>
34009ce8:	2800      	cmp	r0, #0
34009cea:	f43f ac95 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
34009cee:	f7fb fa49 	bl	34005184 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34009cf2:	4b69      	ldr	r3, [pc, #420]	@ (34009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009cf4:	4604      	mov	r4, r0
34009cf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34009cfa:	e6be      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34009cfc:	f7fb fa4c 	bl	34005198 <LL_RCC_IC14_IsEnabled>
34009d00:	2800      	cmp	r0, #0
34009d02:	f43f ac89 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
34009d06:	f7fb fa4f 	bl	340051a8 <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34009d0a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34009d0e:	4604      	mov	r4, r0
34009d10:	e6b3      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34009d12:	4d61      	ldr	r5, [pc, #388]	@ (34009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009d14:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
34009d18:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34009d1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34009d20:	d010      	beq.n	34009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
34009d22:	f67f aec0 	bls.w	34009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
34009d26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34009d2a:	f47f ac75 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009d2e:	f7fb f9c5 	bl	340050bc <LL_RCC_HSI_IsReady>
34009d32:	2800      	cmp	r0, #0
34009d34:	f43f ac70 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009d38:	4b57      	ldr	r3, [pc, #348]	@ (34009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009d3c:	485f      	ldr	r0, [pc, #380]	@ (34009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34009d3e:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009d42:	e499      	b.n	34009678 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34009d44:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009d48:	0418      	lsls	r0, r3, #16
34009d4a:	f57f ac65 	bpl.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009d4e:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009d52:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009d56:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009d5a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009d5c:	e68d      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009d5e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34009d62:	f000 8096 	beq.w	34009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x902>
34009d66:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34009d6a:	d00d      	beq.n	34009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
34009d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34009d70:	e6a4      	b.n	34009abc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34009d72:	f7fb f9db 	bl	3400512c <LL_RCC_IC7_IsEnabled>
34009d76:	2800      	cmp	r0, #0
34009d78:	f43f ac4e 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
34009d7c:	f7fb f9de 	bl	3400513c <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009d80:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
34009d84:	4604      	mov	r4, r0
34009d86:	e678      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009d88:	f7fb f922 	bl	34004fd0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009d8c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009d8e:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009d92:	e471      	b.n	34009678 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34009d94:	4a40      	ldr	r2, [pc, #256]	@ (34009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009d96:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009d9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009d9e:	2b20      	cmp	r3, #32
34009da0:	d00b      	beq.n	34009dba <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
34009da2:	f67f aeaa 	bls.w	34009afa <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34009da6:	2b30      	cmp	r3, #48	@ 0x30
34009da8:	f47f ac36 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009dac:	f7fb f986 	bl	340050bc <LL_RCC_HSI_IsReady>
34009db0:	2800      	cmp	r0, #0
34009db2:	f43f ac31 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009db6:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34009db8:	e7c0      	b.n	34009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34009dba:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009dbe:	0319      	lsls	r1, r3, #12
34009dc0:	f57f ac2a 	bpl.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009dc4:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009dc8:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009dcc:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009dd0:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009dd2:	e652      	b.n	34009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        switch (LL_RCC_IC20_GetSource())
34009dd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009dd8:	f47f ac1e 	bne.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009ddc:	f7fe fb12 	bl	34008404 <HAL_RCCEx_GetPLL4CLKFreq>
34009de0:	e634      	b.n	34009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009de2:	f7fe facf 	bl	34008384 <HAL_RCCEx_GetPLL3CLKFreq>
34009de6:	e631      	b.n	34009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34009de8:	4a2b      	ldr	r2, [pc, #172]	@ (34009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34009dea:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
34009df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009df6:	d005      	beq.n	34009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
34009df8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009dfc:	d009      	beq.n	34009e12 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
34009dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009e02:	e766      	b.n	34009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34009e04:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34009e06:	07db      	lsls	r3, r3, #31
34009e08:	f57f ac06 	bpl.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
34009e0c:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
34009e10:	e61e      	b.n	34009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_HSE_IsReady() != 0U)
34009e12:	f7fb f94b 	bl	340050ac <LL_RCC_HSE_IsReady>
34009e16:	2800      	cmp	r0, #0
34009e18:	f43f abfe 	beq.w	34009618 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009e1c:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
34009e20:	4827      	ldr	r0, [pc, #156]	@ (34009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009e22:	f3c3 3305 	ubfx	r3, r3, #12, #6
34009e26:	3301      	adds	r3, #1
34009e28:	e5a5      	b.n	34009976 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34009e2a:	4826      	ldr	r0, [pc, #152]	@ (34009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34009e2c:	e49e      	b.n	3400976c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34009e2e:	4826      	ldr	r0, [pc, #152]	@ (34009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
34009e30:	e4ce      	b.n	340097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
34009e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34009e36:	f7fe bbab 	b.w	34008590 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34009e3a:	4824      	ldr	r0, [pc, #144]	@ (34009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
}
34009e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009e40:	f7fe bf30 	b.w	34008ca4 <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34009e44:	4822      	ldr	r0, [pc, #136]	@ (34009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
34009e46:	e7f9      	b.n	34009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34009e48:	4822      	ldr	r0, [pc, #136]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
34009e4a:	e7f7      	b.n	34009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009e4c:	4822      	ldr	r0, [pc, #136]	@ (34009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
34009e4e:	e7f5      	b.n	34009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34009e50:	4822      	ldr	r0, [pc, #136]	@ (34009edc <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
}
34009e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34009e56:	f7fe bd0d 	b.w	34008874 <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34009e5a:	4821      	ldr	r0, [pc, #132]	@ (34009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
34009e5c:	e7f9      	b.n	34009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34009e5e:	4821      	ldr	r0, [pc, #132]	@ (34009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
34009e60:	e7f7      	b.n	34009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34009e62:	4821      	ldr	r0, [pc, #132]	@ (34009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
34009e64:	e4ed      	b.n	34009842 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34009e66:	4821      	ldr	r0, [pc, #132]	@ (34009eec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
34009e68:	e4eb      	b.n	34009842 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34009e6a:	4821      	ldr	r0, [pc, #132]	@ (34009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
34009e6c:	e4e9      	b.n	34009842 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34009e6e:	4821      	ldr	r0, [pc, #132]	@ (34009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
34009e70:	e4e7      	b.n	34009842 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34009e72:	4821      	ldr	r0, [pc, #132]	@ (34009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
34009e74:	e7ed      	b.n	34009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34009e76:	4821      	ldr	r0, [pc, #132]	@ (34009efc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
}
34009e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34009e7c:	f7fe bc62 	b.w	34008744 <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34009e80:	481f      	ldr	r0, [pc, #124]	@ (34009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
34009e82:	e534      	b.n	340098ee <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34009e84:	481f      	ldr	r0, [pc, #124]	@ (34009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
}
34009e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34009e8a:	f7fe bbe1 	b.w	34008650 <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34009e8e:	481e      	ldr	r0, [pc, #120]	@ (34009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
34009e90:	e7f9      	b.n	34009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009e92:	481e      	ldr	r0, [pc, #120]	@ (34009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
34009e94:	e5dc      	b.n	34009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
34009e96:	bf00      	nop
34009e98:	56028000 	.word	0x56028000
34009e9c:	0700000c 	.word	0x0700000c
34009ea0:	0700040c 	.word	0x0700040c
34009ea4:	0700080c 	.word	0x0700080c
34009ea8:	0700100c 	.word	0x0700100c
34009eac:	0700082c 	.word	0x0700082c
34009eb0:	07000c2c 	.word	0x07000c2c
34009eb4:	0700102c 	.word	0x0700102c
34009eb8:	0700142c 	.word	0x0700142c
34009ebc:	03d09000 	.word	0x03d09000
34009ec0:	02dc6c00 	.word	0x02dc6c00
34009ec4:	07001818 	.word	0x07001818
34009ec8:	0300041c 	.word	0x0300041c
34009ecc:	07000420 	.word	0x07000420
34009ed0:	07000820 	.word	0x07000820
34009ed4:	07001020 	.word	0x07001020
34009ed8:	07001820 	.word	0x07001820
34009edc:	07000030 	.word	0x07000030
34009ee0:	07000430 	.word	0x07000430
34009ee4:	07000830 	.word	0x07000830
34009ee8:	07001030 	.word	0x07001030
34009eec:	07001830 	.word	0x07001830
34009ef0:	07001c30 	.word	0x07001c30
34009ef4:	07000034 	.word	0x07000034
34009ef8:	07000434 	.word	0x07000434
34009efc:	03000c14 	.word	0x03000c14
34009f00:	01001814 	.word	0x01001814
34009f04:	03000014 	.word	0x03000014
34009f08:	03000414 	.word	0x03000414
34009f0c:	00bb8000 	.word	0x00bb8000

34009f10 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34009f10:	b538      	push	{r3, r4, r5, lr}
34009f12:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
34009f14:	460d      	mov	r5, r1
34009f16:	b921      	cbnz	r1, 34009f22 <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
34009f18:	f240 1111 	movw	r1, #273	@ 0x111
34009f1c:	4825      	ldr	r0, [pc, #148]	@ (34009fb4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009f1e:	f7f7 fa27 	bl	34001370 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
34009f22:	2c0c      	cmp	r4, #12
34009f24:	d904      	bls.n	34009f30 <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
34009f26:	f44f 7189 	mov.w	r1, #274	@ 0x112
34009f2a:	4822      	ldr	r0, [pc, #136]	@ (34009fb4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009f2c:	f7f7 fa20 	bl	34001370 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34009f30:	682b      	ldr	r3, [r5, #0]
34009f32:	2b20      	cmp	r3, #32
34009f34:	d838      	bhi.n	34009fa8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x98>
34009f36:	2b03      	cmp	r3, #3
34009f38:	d82a      	bhi.n	34009f90 <HAL_RIF_RIMC_ConfigMasterAttributes+0x80>
34009f3a:	3b01      	subs	r3, #1
34009f3c:	2b01      	cmp	r3, #1
34009f3e:	d82d      	bhi.n	34009f9c <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
34009f40:	682b      	ldr	r3, [r5, #0]
34009f42:	2b80      	cmp	r3, #128	@ 0x80
34009f44:	d001      	beq.n	34009f4a <HAL_RIF_RIMC_ConfigMasterAttributes+0x3a>
34009f46:	2bff      	cmp	r3, #255	@ 0xff
34009f48:	d904      	bls.n	34009f54 <HAL_RIF_RIMC_ConfigMasterAttributes+0x44>
34009f4a:	f44f 718a 	mov.w	r1, #276	@ 0x114
34009f4e:	4819      	ldr	r0, [pc, #100]	@ (34009fb4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009f50:	f7f7 fa0e 	bl	34001370 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
34009f54:	686b      	ldr	r3, [r5, #4]
34009f56:	2b03      	cmp	r3, #3
34009f58:	d904      	bls.n	34009f64 <HAL_RIF_RIMC_ConfigMasterAttributes+0x54>
34009f5a:	f240 1115 	movw	r1, #277	@ 0x115
34009f5e:	4815      	ldr	r0, [pc, #84]	@ (34009fb4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009f60:	f7f7 fa06 	bl	34001370 <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34009f64:	682b      	ldr	r3, [r5, #0]
34009f66:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
34009f6a:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
34009f6e:	00a0      	lsls	r0, r4, #2
34009f70:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
34009f74:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
34009f78:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34009f7c:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
34009f7e:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
34009f82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34009f86:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
34009f8a:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
34009f8e:	bd38      	pop	{r3, r4, r5, pc}
34009f90:	4a09      	ldr	r2, [pc, #36]	@ (34009fb8 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa8>)
34009f92:	3b04      	subs	r3, #4
34009f94:	fa22 f303 	lsr.w	r3, r2, r3
34009f98:	07db      	lsls	r3, r3, #31
34009f9a:	d4d1      	bmi.n	34009f40 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34009f9c:	f240 1113 	movw	r1, #275	@ 0x113
34009fa0:	4804      	ldr	r0, [pc, #16]	@ (34009fb4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009fa2:	f7f7 f9e5 	bl	34001370 <assert_failed>
34009fa6:	e7cb      	b.n	34009f40 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
34009fa8:	2b40      	cmp	r3, #64	@ 0x40
34009faa:	d0c9      	beq.n	34009f40 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
34009fac:	2b80      	cmp	r3, #128	@ 0x80
34009fae:	d1f5      	bne.n	34009f9c <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
34009fb0:	e7c6      	b.n	34009f40 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
34009fb2:	bf00      	nop
34009fb4:	34010ab4 	.word	0x34010ab4
34009fb8:	10001011 	.word	0x10001011

34009fbc <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34009fbc:	4b38      	ldr	r3, [pc, #224]	@ (3400a0a0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
34009fbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
34009fc0:	4298      	cmp	r0, r3
34009fc2:	4604      	mov	r4, r0
34009fc4:	460d      	mov	r5, r1
34009fc6:	d85c      	bhi.n	3400a082 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
34009fc8:	3b1e      	subs	r3, #30
34009fca:	4298      	cmp	r0, r3
34009fcc:	d83b      	bhi.n	3400a046 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
34009fce:	4b35      	ldr	r3, [pc, #212]	@ (3400a0a4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
34009fd0:	4298      	cmp	r0, r3
34009fd2:	d84b      	bhi.n	3400a06c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
34009fd4:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34009fd8:	d23a      	bcs.n	3400a050 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
34009fda:	4b33      	ldr	r3, [pc, #204]	@ (3400a0a8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
34009fdc:	4298      	cmp	r0, r3
34009fde:	d840      	bhi.n	3400a062 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
34009fe0:	1fc2      	subs	r2, r0, #7
34009fe2:	3b22      	subs	r3, #34	@ 0x22
34009fe4:	429a      	cmp	r2, r3
34009fe6:	d937      	bls.n	3400a058 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
34009fe8:	2d03      	cmp	r5, #3
34009fea:	d904      	bls.n	34009ff6 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
34009fec:	f44f 71ba 	mov.w	r1, #372	@ 0x174
34009ff0:	482e      	ldr	r0, [pc, #184]	@ (3400a0ac <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
34009ff2:	f7f7 f9bd 	bl	34001370 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34009ff6:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34009ff8:	0f20      	lsrs	r0, r4, #28
34009ffa:	0080      	lsls	r0, r0, #2
34009ffc:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3400a000:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3400a004:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a006:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a00a:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a00c:	9b01      	ldr	r3, [sp, #4]
3400a00e:	40a2      	lsls	r2, r4
3400a010:	ea23 0302 	bic.w	r3, r3, r2
3400a014:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a016:	9901      	ldr	r1, [sp, #4]
3400a018:	f005 0301 	and.w	r3, r5, #1
3400a01c:	40a3      	lsls	r3, r4
3400a01e:	430b      	orrs	r3, r1
3400a020:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a022:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a024:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a028:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a02a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a02c:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a02e:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a030:	9b01      	ldr	r3, [sp, #4]
3400a032:	ea23 0302 	bic.w	r3, r3, r2
3400a036:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a038:	9b01      	ldr	r3, [sp, #4]
3400a03a:	4319      	orrs	r1, r3
3400a03c:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a03e:	9b01      	ldr	r3, [sp, #4]
3400a040:	6303      	str	r3, [r0, #48]	@ 0x30
}
3400a042:	b003      	add	sp, #12
3400a044:	bd30      	pop	{r4, r5, pc}
3400a046:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
3400a04a:	4b19      	ldr	r3, [pc, #100]	@ (3400a0b0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
3400a04c:	3a02      	subs	r2, #2
3400a04e:	e01d      	b.n	3400a08c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a050:	4b18      	ldr	r3, [pc, #96]	@ (3400a0b4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
3400a052:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
3400a056:	e019      	b.n	3400a08c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a058:	f1a0 0308 	sub.w	r3, r0, #8
3400a05c:	2b17      	cmp	r3, #23
3400a05e:	d9c3      	bls.n	34009fe8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a060:	e017      	b.n	3400a092 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a062:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
3400a066:	3b1c      	subs	r3, #28
3400a068:	2b02      	cmp	r3, #2
3400a06a:	e7f8      	b.n	3400a05e <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
3400a06c:	4b12      	ldr	r3, [pc, #72]	@ (3400a0b8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
3400a06e:	4298      	cmp	r0, r3
3400a070:	d803      	bhi.n	3400a07a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
3400a072:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3400a076:	d2b7      	bcs.n	34009fe8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a078:	e00b      	b.n	3400a092 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a07a:	4b10      	ldr	r3, [pc, #64]	@ (3400a0bc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
3400a07c:	4298      	cmp	r0, r3
3400a07e:	d0b3      	beq.n	34009fe8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a080:	e007      	b.n	3400a092 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a082:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
3400a086:	2a1e      	cmp	r2, #30
3400a088:	d803      	bhi.n	3400a092 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a08a:	4b0d      	ldr	r3, [pc, #52]	@ (3400a0c0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
3400a08c:	40d3      	lsrs	r3, r2
3400a08e:	07db      	lsls	r3, r3, #31
3400a090:	d4aa      	bmi.n	34009fe8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3400a092:	f240 1173 	movw	r1, #371	@ 0x173
3400a096:	4805      	ldr	r0, [pc, #20]	@ (3400a0ac <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3400a098:	f7f7 f96a 	bl	34001370 <assert_failed>
3400a09c:	e7a4      	b.n	34009fe8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a09e:	bf00      	nop
3400a0a0:	4000001f 	.word	0x4000001f
3400a0a4:	2000001e 	.word	0x2000001e
3400a0a8:	1000001a 	.word	0x1000001a
3400a0ac:	34010ab4 	.word	0x34010ab4
3400a0b0:	2e838c0b 	.word	0x2e838c0b
3400a0b4:	77dff03b 	.word	0x77dff03b
3400a0b8:	30000008 	.word	0x30000008
3400a0bc:	3000000a 	.word	0x3000000a
3400a0c0:	49deef7f 	.word	0x49deef7f

3400a0c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3400a0c4:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a0c6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a0c8:	e852 3f00 	ldrex	r3, [r2]
3400a0cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a0d0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a0d4:	6802      	ldr	r2, [r0, #0]
3400a0d6:	2900      	cmp	r1, #0
3400a0d8:	d1f5      	bne.n	3400a0c6 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3400a0da:	4c0f      	ldr	r4, [pc, #60]	@ (3400a118 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a0dc:	f102 0308 	add.w	r3, r2, #8
3400a0e0:	e853 3f00 	ldrex	r3, [r3]
3400a0e4:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a0e6:	f102 0c08 	add.w	ip, r2, #8
3400a0ea:	e84c 3100 	strex	r1, r3, [ip]
3400a0ee:	2900      	cmp	r1, #0
3400a0f0:	d1f4      	bne.n	3400a0dc <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3400a0f2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
3400a0f4:	2b01      	cmp	r3, #1
3400a0f6:	d107      	bne.n	3400a108 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a0f8:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3400a0fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a100:	e842 3100 	strex	r1, r3, [r2]
3400a104:	2900      	cmp	r1, #0
3400a106:	d1f7      	bne.n	3400a0f8 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3400a108:	2320      	movs	r3, #32
3400a10a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a10e:	2300      	movs	r3, #0
3400a110:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3400a112:	6743      	str	r3, [r0, #116]	@ 0x74
}
3400a114:	bd10      	pop	{r4, pc}
3400a116:	bf00      	nop
3400a118:	effffffe 	.word	0xeffffffe

3400a11c <HAL_UART_MspInit>:
}
3400a11c:	4770      	bx	lr
	...

3400a120 <UART_SetConfig>:
{
3400a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a122:	6842      	ldr	r2, [r0, #4]
3400a124:	4bb0      	ldr	r3, [pc, #704]	@ (3400a3e8 <UART_SetConfig+0x2c8>)
{
3400a126:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a128:	429a      	cmp	r2, r3
3400a12a:	d904      	bls.n	3400a136 <UART_SetConfig+0x16>
3400a12c:	f640 414f 	movw	r1, #3151	@ 0xc4f
3400a130:	48ae      	ldr	r0, [pc, #696]	@ (3400a3ec <UART_SetConfig+0x2cc>)
3400a132:	f7f7 f91d 	bl	34001370 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
3400a136:	68a3      	ldr	r3, [r4, #8]
3400a138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a13c:	d007      	beq.n	3400a14e <UART_SetConfig+0x2e>
3400a13e:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a142:	d004      	beq.n	3400a14e <UART_SetConfig+0x2e>
3400a144:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
3400a148:	48a8      	ldr	r0, [pc, #672]	@ (3400a3ec <UART_SetConfig+0x2cc>)
3400a14a:	f7f7 f911 	bl	34001370 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a14e:	6822      	ldr	r2, [r4, #0]
3400a150:	49a7      	ldr	r1, [pc, #668]	@ (3400a3f0 <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a152:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
3400a154:	428a      	cmp	r2, r1
3400a156:	d004      	beq.n	3400a162 <UART_SetConfig+0x42>
3400a158:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3400a15c:	428a      	cmp	r2, r1
3400a15e:	f040 80af 	bne.w	3400a2c0 <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3400a162:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a166:	d004      	beq.n	3400a172 <UART_SetConfig+0x52>
3400a168:	f640 4153 	movw	r1, #3155	@ 0xc53
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a16c:	489f      	ldr	r0, [pc, #636]	@ (3400a3ec <UART_SetConfig+0x2cc>)
3400a16e:	f7f7 f8ff 	bl	34001370 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
3400a172:	6923      	ldr	r3, [r4, #16]
3400a174:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
3400a178:	d007      	beq.n	3400a18a <UART_SetConfig+0x6a>
3400a17a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400a17e:	d004      	beq.n	3400a18a <UART_SetConfig+0x6a>
3400a180:	f640 415b 	movw	r1, #3163	@ 0xc5b
3400a184:	4899      	ldr	r0, [pc, #612]	@ (3400a3ec <UART_SetConfig+0x2cc>)
3400a186:	f7f7 f8f3 	bl	34001370 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3400a18a:	6963      	ldr	r3, [r4, #20]
3400a18c:	f033 020c 	bics.w	r2, r3, #12
3400a190:	d100      	bne.n	3400a194 <UART_SetConfig+0x74>
3400a192:	b923      	cbnz	r3, 3400a19e <UART_SetConfig+0x7e>
3400a194:	f640 415c 	movw	r1, #3164	@ 0xc5c
3400a198:	4894      	ldr	r0, [pc, #592]	@ (3400a3ec <UART_SetConfig+0x2cc>)
3400a19a:	f7f7 f8e9 	bl	34001370 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
3400a19e:	69a3      	ldr	r3, [r4, #24]
3400a1a0:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
3400a1a4:	d004      	beq.n	3400a1b0 <UART_SetConfig+0x90>
3400a1a6:	f640 415d 	movw	r1, #3165	@ 0xc5d
3400a1aa:	4890      	ldr	r0, [pc, #576]	@ (3400a3ec <UART_SetConfig+0x2cc>)
3400a1ac:	f7f7 f8e0 	bl	34001370 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
3400a1b0:	69e3      	ldr	r3, [r4, #28]
3400a1b2:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a1b6:	d004      	beq.n	3400a1c2 <UART_SetConfig+0xa2>
3400a1b8:	f640 415e 	movw	r1, #3166	@ 0xc5e
3400a1bc:	488b      	ldr	r0, [pc, #556]	@ (3400a3ec <UART_SetConfig+0x2cc>)
3400a1be:	f7f7 f8d7 	bl	34001370 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
3400a1c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a1c4:	2b0b      	cmp	r3, #11
3400a1c6:	d904      	bls.n	3400a1d2 <UART_SetConfig+0xb2>
3400a1c8:	f640 415f 	movw	r1, #3167	@ 0xc5f
3400a1cc:	4887      	ldr	r0, [pc, #540]	@ (3400a3ec <UART_SetConfig+0x2cc>)
3400a1ce:	f7f7 f8cf 	bl	34001370 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a1d2:	6921      	ldr	r1, [r4, #16]
3400a1d4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a1d6:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a1d8:	430a      	orrs	r2, r1
3400a1da:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a1dc:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a1de:	69e5      	ldr	r5, [r4, #28]
3400a1e0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a1e2:	4984      	ldr	r1, [pc, #528]	@ (3400a3f4 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a1e4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a1e6:	4001      	ands	r1, r0
3400a1e8:	430a      	orrs	r2, r1
3400a1ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3400a1ec:	685a      	ldr	r2, [r3, #4]
3400a1ee:	68e1      	ldr	r1, [r4, #12]
3400a1f0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
3400a1f4:	430a      	orrs	r2, r1
3400a1f6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a1f8:	4a7d      	ldr	r2, [pc, #500]	@ (3400a3f0 <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3400a1fa:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a1fc:	4293      	cmp	r3, r2
3400a1fe:	d005      	beq.n	3400a20c <UART_SetConfig+0xec>
3400a200:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a204:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
3400a206:	bf1c      	itt	ne
3400a208:	6a22      	ldrne	r2, [r4, #32]
3400a20a:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3400a20c:	689a      	ldr	r2, [r3, #8]
3400a20e:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
3400a212:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
3400a216:	430a      	orrs	r2, r1
3400a218:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3400a21a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400a21c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a21e:	f022 020f 	bic.w	r2, r2, #15
3400a222:	430a      	orrs	r2, r1
3400a224:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a226:	4a74      	ldr	r2, [pc, #464]	@ (3400a3f8 <UART_SetConfig+0x2d8>)
3400a228:	4293      	cmp	r3, r2
3400a22a:	d07a      	beq.n	3400a322 <UART_SetConfig+0x202>
3400a22c:	4a73      	ldr	r2, [pc, #460]	@ (3400a3fc <UART_SetConfig+0x2dc>)
3400a22e:	4293      	cmp	r3, r2
3400a230:	f000 809c 	beq.w	3400a36c <UART_SetConfig+0x24c>
3400a234:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a238:	4293      	cmp	r3, r2
3400a23a:	f000 809b 	beq.w	3400a374 <UART_SetConfig+0x254>
3400a23e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a242:	4293      	cmp	r3, r2
3400a244:	f000 809a 	beq.w	3400a37c <UART_SetConfig+0x25c>
3400a248:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a24c:	f000 809a 	beq.w	3400a384 <UART_SetConfig+0x264>
3400a250:	4a6b      	ldr	r2, [pc, #428]	@ (3400a400 <UART_SetConfig+0x2e0>)
3400a252:	4293      	cmp	r3, r2
3400a254:	f000 809a 	beq.w	3400a38c <UART_SetConfig+0x26c>
3400a258:	4a6a      	ldr	r2, [pc, #424]	@ (3400a404 <UART_SetConfig+0x2e4>)
3400a25a:	4293      	cmp	r3, r2
3400a25c:	f000 809a 	beq.w	3400a394 <UART_SetConfig+0x274>
3400a260:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a264:	4293      	cmp	r3, r2
3400a266:	f000 8099 	beq.w	3400a39c <UART_SetConfig+0x27c>
3400a26a:	4a67      	ldr	r2, [pc, #412]	@ (3400a408 <UART_SetConfig+0x2e8>)
3400a26c:	4293      	cmp	r3, r2
3400a26e:	f000 8099 	beq.w	3400a3a4 <UART_SetConfig+0x284>
3400a272:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a276:	4293      	cmp	r3, r2
3400a278:	f000 8098 	beq.w	3400a3ac <UART_SetConfig+0x28c>
3400a27c:	4a5c      	ldr	r2, [pc, #368]	@ (3400a3f0 <UART_SetConfig+0x2d0>)
3400a27e:	4293      	cmp	r3, r2
3400a280:	d02e      	beq.n	3400a2e0 <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a282:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a286:	4293      	cmp	r3, r2
3400a288:	f04f 0000 	mov.w	r0, #0
3400a28c:	f04f 0100 	mov.w	r1, #0
3400a290:	d14a      	bne.n	3400a328 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a292:	f7ff f97d 	bl	34009590 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a296:	2800      	cmp	r0, #0
3400a298:	d041      	beq.n	3400a31e <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a29a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a29c:	4a5b      	ldr	r2, [pc, #364]	@ (3400a40c <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a29e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a2a0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2a4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a2a8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2ac:	4299      	cmp	r1, r3
3400a2ae:	d91b      	bls.n	3400a2e8 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
3400a2b0:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
3400a2b2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
3400a2b6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
3400a2b8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
3400a2ba:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
3400a2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a2c0:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400a2c4:	d004      	beq.n	3400a2d0 <UART_SetConfig+0x1b0>
3400a2c6:	f640 4157 	movw	r1, #3159	@ 0xc57
3400a2ca:	4848      	ldr	r0, [pc, #288]	@ (3400a3ec <UART_SetConfig+0x2cc>)
3400a2cc:	f7f7 f850 	bl	34001370 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a2d0:	6a23      	ldr	r3, [r4, #32]
3400a2d2:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400a2d6:	f43f af4c 	beq.w	3400a172 <UART_SetConfig+0x52>
3400a2da:	f640 4158 	movw	r1, #3160	@ 0xc58
3400a2de:	e745      	b.n	3400a16c <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a2e0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
3400a2e4:	2100      	movs	r1, #0
3400a2e6:	e7d4      	b.n	3400a292 <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2e8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
3400a2ec:	d8e0      	bhi.n	3400a2b0 <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a2ee:	2300      	movs	r3, #0
3400a2f0:	4619      	mov	r1, r3
3400a2f2:	f7f6 fa55 	bl	340007a0 <__aeabi_uldivmod>
3400a2f6:	4606      	mov	r6, r0
3400a2f8:	460f      	mov	r7, r1
3400a2fa:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
3400a2fe:	0868      	lsrs	r0, r5, #1
3400a300:	1830      	adds	r0, r6, r0
3400a302:	462a      	mov	r2, r5
3400a304:	f04f 0300 	mov.w	r3, #0
3400a308:	f147 0100 	adc.w	r1, r7, #0
3400a30c:	f7f6 fa48 	bl	340007a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3400a310:	4b3f      	ldr	r3, [pc, #252]	@ (3400a410 <UART_SetConfig+0x2f0>)
3400a312:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
3400a316:	429a      	cmp	r2, r3
3400a318:	d8ca      	bhi.n	3400a2b0 <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
3400a31a:	6823      	ldr	r3, [r4, #0]
3400a31c:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
3400a31e:	2000      	movs	r0, #0
3400a320:	e7c7      	b.n	3400a2b2 <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a322:	2000      	movs	r0, #0
3400a324:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3400a328:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
3400a32c:	d142      	bne.n	3400a3b4 <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a32e:	f7ff f92f 	bl	34009590 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a332:	2800      	cmp	r0, #0
3400a334:	d0f3      	beq.n	3400a31e <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a336:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a338:	4b34      	ldr	r3, [pc, #208]	@ (3400a40c <UART_SetConfig+0x2ec>)
3400a33a:	6862      	ldr	r2, [r4, #4]
3400a33c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a340:	fbb0 f0f3 	udiv	r0, r0, r3
3400a344:	0853      	lsrs	r3, r2, #1
3400a346:	eb03 0340 	add.w	r3, r3, r0, lsl #1
3400a34a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a34e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a352:	f1a3 0110 	sub.w	r1, r3, #16
3400a356:	4291      	cmp	r1, r2
3400a358:	d8aa      	bhi.n	3400a2b0 <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a35a:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
3400a35e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a360:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3400a362:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
3400a366:	4313      	orrs	r3, r2
3400a368:	60cb      	str	r3, [r1, #12]
3400a36a:	e7d8      	b.n	3400a31e <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a36c:	2000      	movs	r0, #0
3400a36e:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400a372:	e7d9      	b.n	3400a328 <UART_SetConfig+0x208>
3400a374:	2000      	movs	r0, #0
3400a376:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3400a37a:	e7d5      	b.n	3400a328 <UART_SetConfig+0x208>
3400a37c:	2000      	movs	r0, #0
3400a37e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400a382:	e7d1      	b.n	3400a328 <UART_SetConfig+0x208>
3400a384:	2000      	movs	r0, #0
3400a386:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3400a38a:	e7cd      	b.n	3400a328 <UART_SetConfig+0x208>
3400a38c:	2000      	movs	r0, #0
3400a38e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3400a392:	e7c9      	b.n	3400a328 <UART_SetConfig+0x208>
3400a394:	2000      	movs	r0, #0
3400a396:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
3400a39a:	e7c5      	b.n	3400a328 <UART_SetConfig+0x208>
3400a39c:	2000      	movs	r0, #0
3400a39e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3400a3a2:	e7c1      	b.n	3400a328 <UART_SetConfig+0x208>
3400a3a4:	2000      	movs	r0, #0
3400a3a6:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
3400a3aa:	e7bd      	b.n	3400a328 <UART_SetConfig+0x208>
3400a3ac:	2000      	movs	r0, #0
3400a3ae:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3400a3b2:	e7b9      	b.n	3400a328 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a3b4:	f7ff f8ec 	bl	34009590 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a3b8:	2800      	cmp	r0, #0
3400a3ba:	d0b0      	beq.n	3400a31e <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a3bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a3be:	4b13      	ldr	r3, [pc, #76]	@ (3400a40c <UART_SetConfig+0x2ec>)
3400a3c0:	6862      	ldr	r2, [r4, #4]
3400a3c2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a3c6:	fbb0 f3f3 	udiv	r3, r0, r3
3400a3ca:	eb03 0352 	add.w	r3, r3, r2, lsr #1
3400a3ce:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a3d2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a3d6:	f1a3 0110 	sub.w	r1, r3, #16
3400a3da:	4291      	cmp	r1, r2
3400a3dc:	f63f af68 	bhi.w	3400a2b0 <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
3400a3e0:	6822      	ldr	r2, [r4, #0]
3400a3e2:	60d3      	str	r3, [r2, #12]
3400a3e4:	e79b      	b.n	3400a31e <UART_SetConfig+0x1fe>
3400a3e6:	bf00      	nop
3400a3e8:	00bebc1f 	.word	0x00bebc1f
3400a3ec:	34010b5c 	.word	0x34010b5c
3400a3f0:	56000c00 	.word	0x56000c00
3400a3f4:	cfff69f3 	.word	0xcfff69f3
3400a3f8:	52001000 	.word	0x52001000
3400a3fc:	50004400 	.word	0x50004400
3400a400:	52001400 	.word	0x52001400
3400a404:	50007800 	.word	0x50007800
3400a408:	52001800 	.word	0x52001800
3400a40c:	34011fa0 	.word	0x34011fa0
3400a410:	000ffcff 	.word	0x000ffcff

3400a414 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a414:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
3400a416:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a418:	2bff      	cmp	r3, #255	@ 0xff
{
3400a41a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a41c:	d904      	bls.n	3400a428 <UART_AdvFeatureConfig+0x14>
3400a41e:	f640 41e4 	movw	r1, #3300	@ 0xce4
3400a422:	487e      	ldr	r0, [pc, #504]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a424:	f7f6 ffa4 	bl	34001370 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3400a428:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a42a:	0718      	lsls	r0, r3, #28
3400a42c:	d50f      	bpl.n	3400a44e <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3400a42e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400a430:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a434:	d004      	beq.n	3400a440 <UART_AdvFeatureConfig+0x2c>
3400a436:	f640 41e9 	movw	r1, #3305	@ 0xce9
3400a43a:	4878      	ldr	r0, [pc, #480]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a43c:	f7f6 ff98 	bl	34001370 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3400a440:	6822      	ldr	r2, [r4, #0]
3400a442:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400a444:	6853      	ldr	r3, [r2, #4]
3400a446:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3400a44a:	430b      	orrs	r3, r1
3400a44c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3400a44e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a450:	07d9      	lsls	r1, r3, #31
3400a452:	d50f      	bpl.n	3400a474 <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3400a454:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a456:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
3400a45a:	d004      	beq.n	3400a466 <UART_AdvFeatureConfig+0x52>
3400a45c:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
3400a460:	486e      	ldr	r0, [pc, #440]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a462:	f7f6 ff85 	bl	34001370 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3400a466:	6822      	ldr	r2, [r4, #0]
3400a468:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400a46a:	6853      	ldr	r3, [r2, #4]
3400a46c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3400a470:	430b      	orrs	r3, r1
3400a472:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3400a474:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a476:	079a      	lsls	r2, r3, #30
3400a478:	d50f      	bpl.n	3400a49a <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3400a47a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a47c:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3400a480:	d004      	beq.n	3400a48c <UART_AdvFeatureConfig+0x78>
3400a482:	f640 41f7 	movw	r1, #3319	@ 0xcf7
3400a486:	4865      	ldr	r0, [pc, #404]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a488:	f7f6 ff72 	bl	34001370 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3400a48c:	6822      	ldr	r2, [r4, #0]
3400a48e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3400a490:	6853      	ldr	r3, [r2, #4]
3400a492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400a496:	430b      	orrs	r3, r1
3400a498:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3400a49a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a49c:	075b      	lsls	r3, r3, #29
3400a49e:	d50f      	bpl.n	3400a4c0 <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3400a4a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400a4a2:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
3400a4a6:	d004      	beq.n	3400a4b2 <UART_AdvFeatureConfig+0x9e>
3400a4a8:	f640 41fe 	movw	r1, #3326	@ 0xcfe
3400a4ac:	485b      	ldr	r0, [pc, #364]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a4ae:	f7f6 ff5f 	bl	34001370 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3400a4b2:	6822      	ldr	r2, [r4, #0]
3400a4b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400a4b6:	6853      	ldr	r3, [r2, #4]
3400a4b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
3400a4bc:	430b      	orrs	r3, r1
3400a4be:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3400a4c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a4c2:	06d8      	lsls	r0, r3, #27
3400a4c4:	d50f      	bpl.n	3400a4e6 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3400a4c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a4c8:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a4cc:	d004      	beq.n	3400a4d8 <UART_AdvFeatureConfig+0xc4>
3400a4ce:	f640 5105 	movw	r1, #3333	@ 0xd05
3400a4d2:	4852      	ldr	r0, [pc, #328]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a4d4:	f7f6 ff4c 	bl	34001370 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3400a4d8:	6822      	ldr	r2, [r4, #0]
3400a4da:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400a4dc:	6893      	ldr	r3, [r2, #8]
3400a4de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400a4e2:	430b      	orrs	r3, r1
3400a4e4:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3400a4e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a4e8:	0699      	lsls	r1, r3, #26
3400a4ea:	d50f      	bpl.n	3400a50c <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3400a4ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400a4ee:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a4f2:	d004      	beq.n	3400a4fe <UART_AdvFeatureConfig+0xea>
3400a4f4:	f640 510d 	movw	r1, #3341	@ 0xd0d
3400a4f8:	4848      	ldr	r0, [pc, #288]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a4fa:	f7f6 ff39 	bl	34001370 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3400a4fe:	6822      	ldr	r2, [r4, #0]
3400a500:	6c21      	ldr	r1, [r4, #64]	@ 0x40
3400a502:	6893      	ldr	r3, [r2, #8]
3400a504:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
3400a508:	430b      	orrs	r3, r1
3400a50a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3400a50c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a50e:	065a      	lsls	r2, r3, #25
3400a510:	d56f      	bpl.n	3400a5f2 <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3400a512:	6823      	ldr	r3, [r4, #0]
3400a514:	4a42      	ldr	r2, [pc, #264]	@ (3400a620 <UART_AdvFeatureConfig+0x20c>)
3400a516:	4293      	cmp	r3, r2
3400a518:	d047      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a51a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a51e:	4293      	cmp	r3, r2
3400a520:	d043      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a522:	4a40      	ldr	r2, [pc, #256]	@ (3400a624 <UART_AdvFeatureConfig+0x210>)
3400a524:	4293      	cmp	r3, r2
3400a526:	d040      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a528:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a52c:	4293      	cmp	r3, r2
3400a52e:	d03c      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a530:	4a3d      	ldr	r2, [pc, #244]	@ (3400a628 <UART_AdvFeatureConfig+0x214>)
3400a532:	4293      	cmp	r3, r2
3400a534:	d039      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a536:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a53a:	4293      	cmp	r3, r2
3400a53c:	d035      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a53e:	4a3b      	ldr	r2, [pc, #236]	@ (3400a62c <UART_AdvFeatureConfig+0x218>)
3400a540:	4293      	cmp	r3, r2
3400a542:	d032      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a544:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a548:	4293      	cmp	r3, r2
3400a54a:	d02e      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a54c:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a550:	d02b      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a552:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a556:	4293      	cmp	r3, r2
3400a558:	d027      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a55a:	4a35      	ldr	r2, [pc, #212]	@ (3400a630 <UART_AdvFeatureConfig+0x21c>)
3400a55c:	4293      	cmp	r3, r2
3400a55e:	d024      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a560:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a564:	4293      	cmp	r3, r2
3400a566:	d020      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a568:	4a32      	ldr	r2, [pc, #200]	@ (3400a634 <UART_AdvFeatureConfig+0x220>)
3400a56a:	4293      	cmp	r3, r2
3400a56c:	d01d      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a56e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a572:	4293      	cmp	r3, r2
3400a574:	d019      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a576:	4a30      	ldr	r2, [pc, #192]	@ (3400a638 <UART_AdvFeatureConfig+0x224>)
3400a578:	4293      	cmp	r3, r2
3400a57a:	d016      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a57c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a580:	4293      	cmp	r3, r2
3400a582:	d012      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a584:	4a2d      	ldr	r2, [pc, #180]	@ (3400a63c <UART_AdvFeatureConfig+0x228>)
3400a586:	4293      	cmp	r3, r2
3400a588:	d00f      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a58a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a58e:	4293      	cmp	r3, r2
3400a590:	d00b      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a592:	4a2b      	ldr	r2, [pc, #172]	@ (3400a640 <UART_AdvFeatureConfig+0x22c>)
3400a594:	4293      	cmp	r3, r2
3400a596:	d008      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a598:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a59c:	4293      	cmp	r3, r2
3400a59e:	d004      	beq.n	3400a5aa <UART_AdvFeatureConfig+0x196>
3400a5a0:	f640 5115 	movw	r1, #3349	@ 0xd15
3400a5a4:	481d      	ldr	r0, [pc, #116]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a5a6:	f7f6 fee3 	bl	34001370 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3400a5aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400a5ac:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
3400a5b0:	d004      	beq.n	3400a5bc <UART_AdvFeatureConfig+0x1a8>
3400a5b2:	f640 5116 	movw	r1, #3350	@ 0xd16
3400a5b6:	4819      	ldr	r0, [pc, #100]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a5b8:	f7f6 feda 	bl	34001370 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a5bc:	6821      	ldr	r1, [r4, #0]
3400a5be:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3400a5c0:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a5c2:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a5c6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3400a5ca:	ea43 0302 	orr.w	r3, r3, r2
3400a5ce:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a5d0:	d10f      	bne.n	3400a5f2 <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3400a5d2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400a5d4:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
3400a5d8:	d004      	beq.n	3400a5e4 <UART_AdvFeatureConfig+0x1d0>
3400a5da:	f640 511b 	movw	r1, #3355	@ 0xd1b
3400a5de:	480f      	ldr	r0, [pc, #60]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a5e0:	f7f6 fec6 	bl	34001370 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3400a5e4:	6822      	ldr	r2, [r4, #0]
3400a5e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3400a5e8:	6853      	ldr	r3, [r2, #4]
3400a5ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
3400a5ee:	430b      	orrs	r3, r1
3400a5f0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3400a5f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a5f4:	061b      	lsls	r3, r3, #24
3400a5f6:	d50f      	bpl.n	3400a618 <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3400a5f8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400a5fa:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400a5fe:	d004      	beq.n	3400a60a <UART_AdvFeatureConfig+0x1f6>
3400a600:	f640 5123 	movw	r1, #3363	@ 0xd23
3400a604:	4805      	ldr	r0, [pc, #20]	@ (3400a61c <UART_AdvFeatureConfig+0x208>)
3400a606:	f7f6 feb3 	bl	34001370 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3400a60a:	6822      	ldr	r2, [r4, #0]
3400a60c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400a60e:	6853      	ldr	r3, [r2, #4]
3400a610:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
3400a614:	430b      	orrs	r3, r1
3400a616:	6053      	str	r3, [r2, #4]
}
3400a618:	bd10      	pop	{r4, pc}
3400a61a:	bf00      	nop
3400a61c:	34010b5c 	.word	0x34010b5c
3400a620:	52001000 	.word	0x52001000
3400a624:	50004400 	.word	0x50004400
3400a628:	50004800 	.word	0x50004800
3400a62c:	50004c00 	.word	0x50004c00
3400a630:	52001400 	.word	0x52001400
3400a634:	50007800 	.word	0x50007800
3400a638:	50007c00 	.word	0x50007c00
3400a63c:	52001800 	.word	0x52001800
3400a640:	52001c00 	.word	0x52001c00

3400a644 <UART_WaitOnFlagUntilTimeout>:
{
3400a644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400a648:	4604      	mov	r4, r0
3400a64a:	460d      	mov	r5, r1
3400a64c:	4617      	mov	r7, r2
3400a64e:	4698      	mov	r8, r3
3400a650:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3400a654:	6822      	ldr	r2, [r4, #0]
3400a656:	69d3      	ldr	r3, [r2, #28]
3400a658:	ea35 0303 	bics.w	r3, r5, r3
3400a65c:	bf0c      	ite	eq
3400a65e:	2301      	moveq	r3, #1
3400a660:	2300      	movne	r3, #0
3400a662:	42bb      	cmp	r3, r7
3400a664:	d001      	beq.n	3400a66a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
3400a666:	2000      	movs	r0, #0
3400a668:	e022      	b.n	3400a6b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
3400a66a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
3400a66e:	d0f2      	beq.n	3400a656 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400a670:	f7f7 fea4 	bl	340023bc <HAL_GetTick>
3400a674:	eba0 0008 	sub.w	r0, r0, r8
3400a678:	4548      	cmp	r0, r9
3400a67a:	d829      	bhi.n	3400a6d0 <UART_WaitOnFlagUntilTimeout+0x8c>
3400a67c:	f1b9 0f00 	cmp.w	r9, #0
3400a680:	d026      	beq.n	3400a6d0 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3400a682:	6821      	ldr	r1, [r4, #0]
3400a684:	680b      	ldr	r3, [r1, #0]
3400a686:	075a      	lsls	r2, r3, #29
3400a688:	d5e4      	bpl.n	3400a654 <UART_WaitOnFlagUntilTimeout+0x10>
3400a68a:	2d80      	cmp	r5, #128	@ 0x80
3400a68c:	d0e2      	beq.n	3400a654 <UART_WaitOnFlagUntilTimeout+0x10>
3400a68e:	2d40      	cmp	r5, #64	@ 0x40
3400a690:	d0e0      	beq.n	3400a654 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3400a692:	69ce      	ldr	r6, [r1, #28]
3400a694:	f016 0608 	ands.w	r6, r6, #8
3400a698:	d00c      	beq.n	3400a6b4 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a69a:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
3400a69c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a69e:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3400a6a0:	f7ff fd10 	bl	3400a0c4 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
3400a6a4:	2300      	movs	r3, #0
          return HAL_ERROR;
3400a6a6:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
3400a6a8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
3400a6ac:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3400a6b4:	69cb      	ldr	r3, [r1, #28]
3400a6b6:	051b      	lsls	r3, r3, #20
3400a6b8:	d5cc      	bpl.n	3400a654 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a6ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
3400a6be:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a6c0:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
3400a6c2:	f7ff fcff 	bl	3400a0c4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a6c6:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
3400a6c8:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a6cc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
3400a6d0:	2003      	movs	r0, #3
3400a6d2:	e7ed      	b.n	3400a6b0 <UART_WaitOnFlagUntilTimeout+0x6c>

3400a6d4 <HAL_UART_Transmit>:
{
3400a6d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400a6d8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
3400a6da:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
3400a6de:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
3400a6e0:	2b20      	cmp	r3, #32
{
3400a6e2:	460d      	mov	r5, r1
3400a6e4:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
3400a6e6:	d148      	bne.n	3400a77a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
3400a6e8:	2900      	cmp	r1, #0
3400a6ea:	d048      	beq.n	3400a77e <HAL_UART_Transmit+0xaa>
3400a6ec:	2a00      	cmp	r2, #0
3400a6ee:	d046      	beq.n	3400a77e <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a6f0:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a6f2:	f04f 0900 	mov.w	r9, #0
3400a6f6:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a6fa:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
3400a6fe:	f7f7 fe5d 	bl	340023bc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a702:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
3400a704:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
3400a70c:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
3400a710:	4607      	mov	r7, r0
      pdata16bits = NULL;
3400a712:	464e      	mov	r6, r9
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a714:	d103      	bne.n	3400a71e <HAL_UART_Transmit+0x4a>
3400a716:	6923      	ldr	r3, [r4, #16]
3400a718:	b90b      	cbnz	r3, 3400a71e <HAL_UART_Transmit+0x4a>
      pdata16bits = (const uint16_t *) pData;
3400a71a:	462e      	mov	r6, r5
      pdata8bits  = NULL;
3400a71c:	461d      	mov	r5, r3
    while (huart->TxXferCount > 0U)
3400a71e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a722:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
3400a724:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a726:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
3400a72a:	b942      	cbnz	r2, 3400a73e <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3400a72c:	2140      	movs	r1, #64	@ 0x40
3400a72e:	4620      	mov	r0, r4
3400a730:	f7ff ff88 	bl	3400a644 <UART_WaitOnFlagUntilTimeout>
3400a734:	2320      	movs	r3, #32
3400a736:	b948      	cbnz	r0, 3400a74c <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
3400a738:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
3400a73c:	e009      	b.n	3400a752 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a73e:	2200      	movs	r2, #0
3400a740:	2180      	movs	r1, #128	@ 0x80
3400a742:	4620      	mov	r0, r4
3400a744:	f7ff ff7e 	bl	3400a644 <UART_WaitOnFlagUntilTimeout>
3400a748:	b130      	cbz	r0, 3400a758 <HAL_UART_Transmit+0x84>
        huart->gState = HAL_UART_STATE_READY;
3400a74a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
3400a74c:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
3400a74e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
3400a752:	b003      	add	sp, #12
3400a754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a758:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
3400a75a:	b95d      	cbnz	r5, 3400a774 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a75c:	f836 3b02 	ldrh.w	r3, [r6], #2
3400a760:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a764:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
3400a766:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
3400a76a:	3a01      	subs	r2, #1
3400a76c:	b292      	uxth	r2, r2
3400a76e:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
3400a772:	e7d4      	b.n	3400a71e <HAL_UART_Transmit+0x4a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a774:	f815 3b01 	ldrb.w	r3, [r5], #1
3400a778:	e7f4      	b.n	3400a764 <HAL_UART_Transmit+0x90>
    return HAL_BUSY;
3400a77a:	2002      	movs	r0, #2
3400a77c:	e7e9      	b.n	3400a752 <HAL_UART_Transmit+0x7e>
      return  HAL_ERROR;
3400a77e:	2001      	movs	r0, #1
3400a780:	e7e7      	b.n	3400a752 <HAL_UART_Transmit+0x7e>

3400a782 <UART_CheckIdleState>:
{
3400a782:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a784:	2600      	movs	r6, #0
{
3400a786:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a788:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
3400a78c:	f7f7 fe16 	bl	340023bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a790:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
3400a792:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a794:	681b      	ldr	r3, [r3, #0]
3400a796:	071a      	lsls	r2, r3, #28
3400a798:	d51c      	bpl.n	3400a7d4 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a79a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a79e:	4632      	mov	r2, r6
3400a7a0:	9300      	str	r3, [sp, #0]
3400a7a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400a7a6:	4603      	mov	r3, r0
3400a7a8:	4620      	mov	r0, r4
3400a7aa:	f7ff ff4b 	bl	3400a644 <UART_WaitOnFlagUntilTimeout>
3400a7ae:	b188      	cbz	r0, 3400a7d4 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3400a7b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a7b2:	e852 3f00 	ldrex	r3, [r2]
3400a7b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a7ba:	e842 3100 	strex	r1, r3, [r2]
3400a7be:	2900      	cmp	r1, #0
3400a7c0:	d1f6      	bne.n	3400a7b0 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
3400a7c2:	2320      	movs	r3, #32
3400a7c4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
3400a7c8:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
3400a7ca:	2300      	movs	r3, #0
3400a7cc:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a7d0:	b002      	add	sp, #8
3400a7d2:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3400a7d4:	6823      	ldr	r3, [r4, #0]
3400a7d6:	681b      	ldr	r3, [r3, #0]
3400a7d8:	075b      	lsls	r3, r3, #29
3400a7da:	d524      	bpl.n	3400a826 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a7dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a7e0:	2200      	movs	r2, #0
3400a7e2:	9300      	str	r3, [sp, #0]
3400a7e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400a7e8:	462b      	mov	r3, r5
3400a7ea:	4620      	mov	r0, r4
3400a7ec:	f7ff ff2a 	bl	3400a644 <UART_WaitOnFlagUntilTimeout>
3400a7f0:	b1c8      	cbz	r0, 3400a826 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a7f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a7f4:	e852 3f00 	ldrex	r3, [r2]
3400a7f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a7fc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a800:	6822      	ldr	r2, [r4, #0]
3400a802:	2900      	cmp	r1, #0
3400a804:	d1f5      	bne.n	3400a7f2 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a806:	f102 0308 	add.w	r3, r2, #8
3400a80a:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3400a80e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a812:	f102 0008 	add.w	r0, r2, #8
3400a816:	e840 3100 	strex	r1, r3, [r0]
3400a81a:	2900      	cmp	r1, #0
3400a81c:	d1f3      	bne.n	3400a806 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3400a81e:	2320      	movs	r3, #32
3400a820:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
3400a824:	e7d0      	b.n	3400a7c8 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
3400a826:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a828:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
3400a82a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3400a82e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a832:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3400a834:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
3400a836:	e7c8      	b.n	3400a7ca <UART_CheckIdleState+0x48>

3400a838 <HAL_UART_Init>:
{
3400a838:	b510      	push	{r4, lr}
  if (huart == NULL)
3400a83a:	4604      	mov	r4, r0
3400a83c:	2800      	cmp	r0, #0
3400a83e:	f000 80d0 	beq.w	3400a9e2 <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a842:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a844:	6803      	ldr	r3, [r0, #0]
3400a846:	4a68      	ldr	r2, [pc, #416]	@ (3400a9e8 <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a848:	2900      	cmp	r1, #0
3400a84a:	d07c      	beq.n	3400a946 <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a84c:	4293      	cmp	r3, r2
3400a84e:	d04e      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a850:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a854:	4293      	cmp	r3, r2
3400a856:	d04a      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a858:	4a64      	ldr	r2, [pc, #400]	@ (3400a9ec <HAL_UART_Init+0x1b4>)
3400a85a:	4293      	cmp	r3, r2
3400a85c:	d047      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a85e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a862:	4293      	cmp	r3, r2
3400a864:	d043      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a866:	4a62      	ldr	r2, [pc, #392]	@ (3400a9f0 <HAL_UART_Init+0x1b8>)
3400a868:	4293      	cmp	r3, r2
3400a86a:	d040      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a86c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a870:	4293      	cmp	r3, r2
3400a872:	d03c      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a874:	4a5f      	ldr	r2, [pc, #380]	@ (3400a9f4 <HAL_UART_Init+0x1bc>)
3400a876:	4293      	cmp	r3, r2
3400a878:	d039      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a87a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a87e:	4293      	cmp	r3, r2
3400a880:	d035      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a882:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a886:	d032      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a888:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a88c:	4293      	cmp	r3, r2
3400a88e:	d02e      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a890:	4a59      	ldr	r2, [pc, #356]	@ (3400a9f8 <HAL_UART_Init+0x1c0>)
3400a892:	4293      	cmp	r3, r2
3400a894:	d02b      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a896:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a89a:	4293      	cmp	r3, r2
3400a89c:	d027      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a89e:	4a57      	ldr	r2, [pc, #348]	@ (3400a9fc <HAL_UART_Init+0x1c4>)
3400a8a0:	4293      	cmp	r3, r2
3400a8a2:	d024      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8a4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8a8:	4293      	cmp	r3, r2
3400a8aa:	d020      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8ac:	4a54      	ldr	r2, [pc, #336]	@ (3400aa00 <HAL_UART_Init+0x1c8>)
3400a8ae:	4293      	cmp	r3, r2
3400a8b0:	d01d      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8b2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8b6:	4293      	cmp	r3, r2
3400a8b8:	d019      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8ba:	4a52      	ldr	r2, [pc, #328]	@ (3400aa04 <HAL_UART_Init+0x1cc>)
3400a8bc:	4293      	cmp	r3, r2
3400a8be:	d016      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8c0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8c4:	4293      	cmp	r3, r2
3400a8c6:	d012      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8c8:	4a4f      	ldr	r2, [pc, #316]	@ (3400aa08 <HAL_UART_Init+0x1d0>)
3400a8ca:	4293      	cmp	r3, r2
3400a8cc:	d00f      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8ce:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8d2:	4293      	cmp	r3, r2
3400a8d4:	d00b      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8d6:	4a4d      	ldr	r2, [pc, #308]	@ (3400aa0c <HAL_UART_Init+0x1d4>)
3400a8d8:	4293      	cmp	r3, r2
3400a8da:	d008      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8dc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8e0:	4293      	cmp	r3, r2
3400a8e2:	d004      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a8e4:	f240 113f 	movw	r1, #319	@ 0x13f
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400a8e8:	4849      	ldr	r0, [pc, #292]	@ (3400aa10 <HAL_UART_Init+0x1d8>)
3400a8ea:	f7f6 fd41 	bl	34001370 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3400a8ee:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3400a8f2:	b923      	cbnz	r3, 3400a8fe <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
3400a8f4:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
3400a8f6:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3400a8fa:	f7ff fc0f 	bl	3400a11c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3400a8fe:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
3400a900:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3400a902:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
3400a906:	6813      	ldr	r3, [r2, #0]
3400a908:	f023 0301 	bic.w	r3, r3, #1
3400a90c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3400a90e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a910:	b113      	cbz	r3, 3400a918 <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
3400a912:	4620      	mov	r0, r4
3400a914:	f7ff fd7e 	bl	3400a414 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
3400a918:	4620      	mov	r0, r4
3400a91a:	f7ff fc01 	bl	3400a120 <UART_SetConfig>
3400a91e:	2801      	cmp	r0, #1
3400a920:	d05f      	beq.n	3400a9e2 <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400a922:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
3400a924:	4620      	mov	r0, r4
}
3400a926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400a92a:	685a      	ldr	r2, [r3, #4]
3400a92c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3400a930:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3400a932:	689a      	ldr	r2, [r3, #8]
3400a934:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3400a938:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3400a93a:	681a      	ldr	r2, [r3, #0]
3400a93c:	f042 0201 	orr.w	r2, r2, #1
3400a940:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
3400a942:	f7ff bf1e 	b.w	3400a782 <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400a946:	4293      	cmp	r3, r2
3400a948:	d0d1      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a94a:	4a32      	ldr	r2, [pc, #200]	@ (3400aa14 <HAL_UART_Init+0x1dc>)
3400a94c:	4293      	cmp	r3, r2
3400a94e:	d0ce      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a950:	4a26      	ldr	r2, [pc, #152]	@ (3400a9ec <HAL_UART_Init+0x1b4>)
3400a952:	4293      	cmp	r3, r2
3400a954:	d0cb      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a956:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a95a:	4293      	cmp	r3, r2
3400a95c:	d0c7      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a95e:	4a24      	ldr	r2, [pc, #144]	@ (3400a9f0 <HAL_UART_Init+0x1b8>)
3400a960:	4293      	cmp	r3, r2
3400a962:	d0c4      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a964:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a968:	4293      	cmp	r3, r2
3400a96a:	d0c0      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a96c:	4a21      	ldr	r2, [pc, #132]	@ (3400a9f4 <HAL_UART_Init+0x1bc>)
3400a96e:	4293      	cmp	r3, r2
3400a970:	d0bd      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a972:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a976:	4293      	cmp	r3, r2
3400a978:	d0b9      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a97a:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a97e:	d0b6      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a980:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a984:	4293      	cmp	r3, r2
3400a986:	d0b2      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a988:	4a1b      	ldr	r2, [pc, #108]	@ (3400a9f8 <HAL_UART_Init+0x1c0>)
3400a98a:	4293      	cmp	r3, r2
3400a98c:	d0af      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a98e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a992:	4293      	cmp	r3, r2
3400a994:	d0ab      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a996:	4a19      	ldr	r2, [pc, #100]	@ (3400a9fc <HAL_UART_Init+0x1c4>)
3400a998:	4293      	cmp	r3, r2
3400a99a:	d0a8      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a99c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9a0:	4293      	cmp	r3, r2
3400a9a2:	d0a4      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a9a4:	4a16      	ldr	r2, [pc, #88]	@ (3400aa00 <HAL_UART_Init+0x1c8>)
3400a9a6:	4293      	cmp	r3, r2
3400a9a8:	d0a1      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a9aa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9ae:	4293      	cmp	r3, r2
3400a9b0:	d09d      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a9b2:	4a14      	ldr	r2, [pc, #80]	@ (3400aa04 <HAL_UART_Init+0x1cc>)
3400a9b4:	4293      	cmp	r3, r2
3400a9b6:	d09a      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a9b8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9bc:	4293      	cmp	r3, r2
3400a9be:	d096      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a9c0:	4a11      	ldr	r2, [pc, #68]	@ (3400aa08 <HAL_UART_Init+0x1d0>)
3400a9c2:	4293      	cmp	r3, r2
3400a9c4:	d093      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a9c6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9ca:	4293      	cmp	r3, r2
3400a9cc:	d08f      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a9ce:	4a0f      	ldr	r2, [pc, #60]	@ (3400aa0c <HAL_UART_Init+0x1d4>)
3400a9d0:	4293      	cmp	r3, r2
3400a9d2:	d08c      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a9d4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9d8:	4293      	cmp	r3, r2
3400a9da:	d088      	beq.n	3400a8ee <HAL_UART_Init+0xb6>
3400a9dc:	f44f 71a2 	mov.w	r1, #324	@ 0x144
3400a9e0:	e782      	b.n	3400a8e8 <HAL_UART_Init+0xb0>
}
3400a9e2:	2001      	movs	r0, #1
3400a9e4:	bd10      	pop	{r4, pc}
3400a9e6:	bf00      	nop
3400a9e8:	52001000 	.word	0x52001000
3400a9ec:	50004400 	.word	0x50004400
3400a9f0:	50004800 	.word	0x50004800
3400a9f4:	50004c00 	.word	0x50004c00
3400a9f8:	52001400 	.word	0x52001400
3400a9fc:	50007800 	.word	0x50007800
3400aa00:	50007c00 	.word	0x50007c00
3400aa04:	52001800 	.word	0x52001800
3400aa08:	52001c00 	.word	0x52001c00
3400aa0c:	56000c00 	.word	0x56000c00
3400aa10:	34010b5c 	.word	0x34010b5c
3400aa14:	42001000 	.word	0x42001000

3400aa18 <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400aa18:	6802      	ldr	r2, [r0, #0]
{
3400aa1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400aa1e:	6813      	ldr	r3, [r2, #0]
{
3400aa20:	4606      	mov	r6, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400aa22:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400aa26:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400aa28:	6883      	ldr	r3, [r0, #8]
{
3400aa2a:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400aa2c:	b97b      	cbnz	r3, 3400aa4e <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400aa2e:	684b      	ldr	r3, [r1, #4]
3400aa30:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400aa34:	d004      	beq.n	3400aa40 <XSPI_ConfigCmd+0x28>
3400aa36:	f640 41a4 	movw	r1, #3236	@ 0xca4
3400aa3a:	4876      	ldr	r0, [pc, #472]	@ (3400ac14 <XSPI_ConfigCmd+0x1fc>)
3400aa3c:	f7f6 fc98 	bl	34001370 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3400aa40:	6832      	ldr	r2, [r6, #0]
3400aa42:	6861      	ldr	r1, [r4, #4]
3400aa44:	6813      	ldr	r3, [r2, #0]
3400aa46:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
3400aa4a:	430b      	orrs	r3, r1
3400aa4c:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400aa4e:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3400aa50:	6831      	ldr	r1, [r6, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400aa52:	2b02      	cmp	r3, #2
3400aa54:	d158      	bne.n	3400ab08 <XSPI_ConfigCmd+0xf0>
    ccr_reg = &(hxspi->Instance->WCCR);
3400aa56:	f501 72c0 	add.w	r2, r1, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
3400aa5a:	f501 70c4 	add.w	r0, r1, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
3400aa5e:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
3400aa62:	f501 73d0 	add.w	r3, r1, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3400aa66:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
3400aa68:	6017      	str	r7, [r2, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400aa6a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
3400aa6c:	b167      	cbz	r7, 3400aa88 <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3400aa6e:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3400aa70:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3400aa72:	6b67      	ldr	r7, [r4, #52]	@ 0x34
3400aa74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400aa76:	f8d2 c000 	ldr.w	ip, [r2]
3400aa7a:	433b      	orrs	r3, r7
3400aa7c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3400aa7e:	433b      	orrs	r3, r7
3400aa80:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
3400aa84:	433b      	orrs	r3, r7
3400aa86:	6013      	str	r3, [r2, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3400aa88:	6803      	ldr	r3, [r0, #0]
3400aa8a:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3400aa8c:	f023 031f 	bic.w	r3, r3, #31
3400aa90:	433b      	orrs	r3, r7
3400aa92:	6003      	str	r3, [r0, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400aa94:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
3400aa98:	f1be 0f00 	cmp.w	lr, #0
3400aa9c:	d00e      	beq.n	3400aabc <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400aa9e:	6823      	ldr	r3, [r4, #0]
3400aaa0:	b913      	cbnz	r3, 3400aaa8 <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3400aaa2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400aaa4:	3b01      	subs	r3, #1
3400aaa6:	640b      	str	r3, [r1, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3400aaa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400aaaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400aaae:	d13f      	bne.n	3400ab30 <XSPI_ConfigCmd+0x118>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400aab0:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400aab4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400aab8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400aabc:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400aabe:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400aac2:	2b00      	cmp	r3, #0
3400aac4:	f000 8083 	beq.w	3400abce <XSPI_ConfigCmd+0x1b6>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400aac8:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400aacc:	f1b9 0f00 	cmp.w	r9, #0
3400aad0:	d053      	beq.n	3400ab7a <XSPI_ConfigCmd+0x162>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400aad2:	e9d4 0708 	ldrd	r0, r7, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400aad6:	f1be 0f00 	cmp.w	lr, #0
3400aada:	d032      	beq.n	3400ab42 <XSPI_ConfigCmd+0x12a>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400aadc:	ea4e 0303 	orr.w	r3, lr, r3
3400aae0:	ea43 0309 	orr.w	r3, r3, r9
3400aae4:	ea43 0308 	orr.w	r3, r3, r8
3400aae8:	ea43 030c 	orr.w	r3, r3, ip
3400aaec:	433b      	orrs	r3, r7
3400aaee:	4303      	orrs	r3, r0
3400aaf0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400aaf2:	6816      	ldr	r6, [r2, #0]
3400aaf4:	4303      	orrs	r3, r0
3400aaf6:	4848      	ldr	r0, [pc, #288]	@ (3400ac18 <XSPI_ConfigCmd+0x200>)
3400aaf8:	4030      	ands	r0, r6
3400aafa:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400aafc:	6013      	str	r3, [r2, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3400aafe:	68a3      	ldr	r3, [r4, #8]
3400ab00:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3400ab02:	69a3      	ldr	r3, [r4, #24]
3400ab04:	648b      	str	r3, [r1, #72]	@ 0x48
3400ab06:	e04c      	b.n	3400aba2 <XSPI_ConfigCmd+0x18a>
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3400ab08:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
3400ab0a:	bf01      	itttt	eq
3400ab0c:	f501 72a0 	addeq.w	r2, r1, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
3400ab10:	f501 70a4 	addeq.w	r0, r1, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
3400ab14:	f501 75a8 	addeq.w	r5, r1, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
3400ab18:	f501 73b0 	addeq.w	r3, r1, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
3400ab1c:	bf1f      	itttt	ne
3400ab1e:	f501 7280 	addne.w	r2, r1, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
3400ab22:	f501 7084 	addne.w	r0, r1, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
3400ab26:	f501 7588 	addne.w	r5, r1, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
3400ab2a:	f501 7390 	addne.w	r3, r1, #288	@ 0x120
3400ab2e:	e79a      	b.n	3400aa66 <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3400ab30:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3400ab32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400ab36:	d1c1      	bne.n	3400aabc <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400ab38:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400ab3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3400ab40:	e7ba      	b.n	3400aab8 <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ab42:	ea43 0309 	orr.w	r3, r3, r9
3400ab46:	f8d2 e000 	ldr.w	lr, [r2]
3400ab4a:	ea43 0308 	orr.w	r3, r3, r8
3400ab4e:	ea43 030c 	orr.w	r3, r3, ip
3400ab52:	433b      	orrs	r3, r7
3400ab54:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
3400ab58:	4303      	orrs	r3, r0
3400ab5a:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
3400ab5e:	ea43 030e 	orr.w	r3, r3, lr
3400ab62:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400ab64:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400ab66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ab6a:	d1c8      	bne.n	3400aafe <XSPI_ConfigCmd+0xe6>
3400ab6c:	6963      	ldr	r3, [r4, #20]
3400ab6e:	2b08      	cmp	r3, #8
3400ab70:	d1c5      	bne.n	3400aafe <XSPI_ConfigCmd+0xe6>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ab72:	6813      	ldr	r3, [r2, #0]
3400ab74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400ab78:	e7c0      	b.n	3400aafc <XSPI_ConfigCmd+0xe4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400ab7a:	6811      	ldr	r1, [r2, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ab7c:	f1be 0f00 	cmp.w	lr, #0
3400ab80:	d012      	beq.n	3400aba8 <XSPI_ConfigCmd+0x190>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400ab82:	ea4e 0303 	orr.w	r3, lr, r3
3400ab86:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400ab88:	ea43 0308 	orr.w	r3, r3, r8
3400ab8c:	ea43 030c 	orr.w	r3, r3, ip
3400ab90:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
3400ab94:	4303      	orrs	r3, r0
3400ab96:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400ab9a:	430b      	orrs	r3, r1
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ab9c:	6013      	str	r3, [r2, #0]
      *ir_reg = pCmd->Instruction;
3400ab9e:	68a3      	ldr	r3, [r4, #8]
3400aba0:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
3400aba2:	2000      	movs	r0, #0
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  return status;
}
3400aba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3400aba8:	ea43 0308 	orr.w	r3, r3, r8
3400abac:	ea43 030c 	orr.w	r3, r3, ip
3400abb0:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400abb4:	430b      	orrs	r3, r1
3400abb6:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400abb8:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400abba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400abbe:	d1ee      	bne.n	3400ab9e <XSPI_ConfigCmd+0x186>
3400abc0:	6963      	ldr	r3, [r4, #20]
3400abc2:	2b08      	cmp	r3, #8
3400abc4:	d1eb      	bne.n	3400ab9e <XSPI_ConfigCmd+0x186>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400abc6:	6813      	ldr	r3, [r2, #0]
3400abc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400abcc:	e7e6      	b.n	3400ab9c <XSPI_ConfigCmd+0x184>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400abce:	f1b9 0f00 	cmp.w	r9, #0
3400abd2:	d01b      	beq.n	3400ac0c <XSPI_ConfigCmd+0x1f4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400abd4:	e9d4 6008 	ldrd	r6, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400abd8:	f1be 0f00 	cmp.w	lr, #0
3400abdc:	d00d      	beq.n	3400abfa <XSPI_ConfigCmd+0x1e2>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3400abde:	ea4e 0309 	orr.w	r3, lr, r9
3400abe2:	6815      	ldr	r5, [r2, #0]
3400abe4:	4303      	orrs	r3, r0
3400abe6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400abe8:	4333      	orrs	r3, r6
3400abea:	4303      	orrs	r3, r0
3400abec:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
3400abf0:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
3400abf4:	4303      	orrs	r3, r0
3400abf6:	6013      	str	r3, [r2, #0]
3400abf8:	e783      	b.n	3400ab02 <XSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3400abfa:	6813      	ldr	r3, [r2, #0]
3400abfc:	ea40 0009 	orr.w	r0, r0, r9
3400ac00:	4330      	orrs	r0, r6
3400ac02:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400ac06:	4318      	orrs	r0, r3
3400ac08:	6010      	str	r0, [r2, #0]
3400ac0a:	e77a      	b.n	3400ab02 <XSPI_ConfigCmd+0xea>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400ac0c:	2308      	movs	r3, #8
      status = HAL_ERROR;
3400ac0e:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400ac10:	65f3      	str	r3, [r6, #92]	@ 0x5c
3400ac12:	e7c7      	b.n	3400aba4 <XSPI_ConfigCmd+0x18c>
3400ac14:	34010b91 	.word	0x34010b91
3400ac18:	f0ffc0c0 	.word	0xf0ffc0c0

3400ac1c <XSPI_WaitFlagStateUntilTimeout>:
{
3400ac1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400ac20:	4604      	mov	r4, r0
3400ac22:	460e      	mov	r6, r1
3400ac24:	4615      	mov	r5, r2
3400ac26:	461f      	mov	r7, r3
3400ac28:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3400ac2c:	6822      	ldr	r2, [r4, #0]
3400ac2e:	6a13      	ldr	r3, [r2, #32]
3400ac30:	4233      	tst	r3, r6
3400ac32:	bf14      	ite	ne
3400ac34:	2301      	movne	r3, #1
3400ac36:	2300      	moveq	r3, #0
3400ac38:	42ab      	cmp	r3, r5
3400ac3a:	d101      	bne.n	3400ac40 <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
3400ac3c:	2000      	movs	r0, #0
3400ac3e:	e00e      	b.n	3400ac5e <XSPI_WaitFlagStateUntilTimeout+0x42>
    if (Timeout != HAL_MAX_DELAY)
3400ac40:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
3400ac44:	d0f3      	beq.n	3400ac2e <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400ac46:	f7f7 fbb9 	bl	340023bc <HAL_GetTick>
3400ac4a:	1bc0      	subs	r0, r0, r7
3400ac4c:	4540      	cmp	r0, r8
3400ac4e:	d908      	bls.n	3400ac62 <XSPI_WaitFlagStateUntilTimeout+0x46>
        hxspi->State     = HAL_XSPI_STATE_READY;
3400ac50:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400ac52:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
3400ac54:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400ac56:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3400ac58:	f043 0301 	orr.w	r3, r3, #1
3400ac5c:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
3400ac5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400ac62:	f1b8 0f00 	cmp.w	r8, #0
3400ac66:	d1e1      	bne.n	3400ac2c <XSPI_WaitFlagStateUntilTimeout+0x10>
3400ac68:	e7f2      	b.n	3400ac50 <XSPI_WaitFlagStateUntilTimeout+0x34>

3400ac6a <HAL_XSPI_MspInit>:
}
3400ac6a:	4770      	bx	lr

3400ac6c <HAL_XSPI_Init>:
{
3400ac6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400ac6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3400ac70:	f7f7 fba4 	bl	340023bc <HAL_GetTick>
3400ac74:	4606      	mov	r6, r0
  if (hxspi == NULL)
3400ac76:	2c00      	cmp	r4, #0
3400ac78:	f000 812a 	beq.w	3400aed0 <HAL_XSPI_Init+0x264>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3400ac7c:	68a3      	ldr	r3, [r4, #8]
3400ac7e:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3400ac82:	d004      	beq.n	3400ac8e <HAL_XSPI_Init+0x22>
3400ac84:	f240 1161 	movw	r1, #353	@ 0x161
3400ac88:	4892      	ldr	r0, [pc, #584]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ac8a:	f7f6 fb71 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3400ac8e:	68e3      	ldr	r3, [r4, #12]
3400ac90:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
3400ac94:	d009      	beq.n	3400acaa <HAL_XSPI_Init+0x3e>
3400ac96:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3400ac9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400ac9e:	d004      	beq.n	3400acaa <HAL_XSPI_Init+0x3e>
3400aca0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400aca4:	488b      	ldr	r0, [pc, #556]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400aca6:	f7f6 fb63 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3400acaa:	6923      	ldr	r3, [r4, #16]
3400acac:	2b1f      	cmp	r3, #31
3400acae:	d904      	bls.n	3400acba <HAL_XSPI_Init+0x4e>
3400acb0:	f240 1163 	movw	r1, #355	@ 0x163
3400acb4:	4887      	ldr	r0, [pc, #540]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400acb6:	f7f6 fb5b 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3400acba:	6963      	ldr	r3, [r4, #20]
3400acbc:	3b01      	subs	r3, #1
3400acbe:	2b3f      	cmp	r3, #63	@ 0x3f
3400acc0:	d904      	bls.n	3400accc <HAL_XSPI_Init+0x60>
3400acc2:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400acc6:	4883      	ldr	r0, [pc, #524]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400acc8:	f7f6 fb52 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
3400accc:	69a3      	ldr	r3, [r4, #24]
3400acce:	f033 0302 	bics.w	r3, r3, #2
3400acd2:	d004      	beq.n	3400acde <HAL_XSPI_Init+0x72>
3400acd4:	f240 1165 	movw	r1, #357	@ 0x165
3400acd8:	487e      	ldr	r0, [pc, #504]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400acda:	f7f6 fb49 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3400acde:	69e3      	ldr	r3, [r4, #28]
3400ace0:	2b01      	cmp	r3, #1
3400ace2:	d904      	bls.n	3400acee <HAL_XSPI_Init+0x82>
3400ace4:	f44f 71b3 	mov.w	r1, #358	@ 0x166
3400ace8:	487a      	ldr	r0, [pc, #488]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400acea:	f7f6 fb41 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3400acee:	6a23      	ldr	r3, [r4, #32]
3400acf0:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
3400acf4:	d00c      	beq.n	3400ad10 <HAL_XSPI_Init+0xa4>
3400acf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400acfa:	d009      	beq.n	3400ad10 <HAL_XSPI_Init+0xa4>
3400acfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400ad00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400ad04:	d004      	beq.n	3400ad10 <HAL_XSPI_Init+0xa4>
3400ad06:	f240 1167 	movw	r1, #359	@ 0x167
3400ad0a:	4872      	ldr	r0, [pc, #456]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ad0c:	f7f6 fb30 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
3400ad10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400ad12:	2bff      	cmp	r3, #255	@ 0xff
3400ad14:	d904      	bls.n	3400ad20 <HAL_XSPI_Init+0xb4>
3400ad16:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3400ad1a:	486e      	ldr	r0, [pc, #440]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ad1c:	f7f6 fb28 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
3400ad20:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400ad22:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
3400ad26:	d004      	beq.n	3400ad32 <HAL_XSPI_Init+0xc6>
3400ad28:	f240 1169 	movw	r1, #361	@ 0x169
3400ad2c:	4869      	ldr	r0, [pc, #420]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ad2e:	f7f6 fb1f 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
3400ad32:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ad34:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
3400ad38:	d004      	beq.n	3400ad44 <HAL_XSPI_Init+0xd8>
3400ad3a:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400ad3e:	4865      	ldr	r0, [pc, #404]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ad40:	f7f6 fb16 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
3400ad44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400ad46:	2b1f      	cmp	r3, #31
3400ad48:	d904      	bls.n	3400ad54 <HAL_XSPI_Init+0xe8>
3400ad4a:	f240 116b 	movw	r1, #363	@ 0x16b
3400ad4e:	4861      	ldr	r0, [pc, #388]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ad50:	f7f6 fb0e 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
3400ad54:	6863      	ldr	r3, [r4, #4]
3400ad56:	3b01      	subs	r3, #1
3400ad58:	2b3f      	cmp	r3, #63	@ 0x3f
3400ad5a:	d904      	bls.n	3400ad66 <HAL_XSPI_Init+0xfa>
3400ad5c:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3400ad60:	485c      	ldr	r0, [pc, #368]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ad62:	f7f6 fb05 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3400ad66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400ad68:	2bff      	cmp	r3, #255	@ 0xff
3400ad6a:	d904      	bls.n	3400ad76 <HAL_XSPI_Init+0x10a>
3400ad6c:	f240 116d 	movw	r1, #365	@ 0x16d
3400ad70:	4858      	ldr	r0, [pc, #352]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ad72:	f7f6 fafd 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3400ad76:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400ad78:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3400ad7c:	d004      	beq.n	3400ad88 <HAL_XSPI_Init+0x11c>
3400ad7e:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3400ad82:	4854      	ldr	r0, [pc, #336]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ad84:	f7f6 faf4 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
3400ad88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400ad8a:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3400ad8e:	d004      	beq.n	3400ad9a <HAL_XSPI_Init+0x12e>
3400ad90:	f240 116f 	movw	r1, #367	@ 0x16f
3400ad94:	484f      	ldr	r0, [pc, #316]	@ (3400aed4 <HAL_XSPI_Init+0x268>)
3400ad96:	f7f6 faeb 	bl	34001370 <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400ad9a:	2300      	movs	r3, #0
3400ad9c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3400ad9e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3400ada0:	2f00      	cmp	r7, #0
3400ada2:	f040 8087 	bne.w	3400aeb4 <HAL_XSPI_Init+0x248>
      HAL_XSPI_MspInit(hxspi);
3400ada6:	4620      	mov	r0, r4
3400ada8:	f7ff ff5f 	bl	3400ac6a <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
3400adac:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3400adb0:	69e3      	ldr	r3, [r4, #28]
3400adb2:	68e5      	ldr	r5, [r4, #12]
3400adb4:	6821      	ldr	r1, [r4, #0]
3400adb6:	431d      	orrs	r5, r3
3400adb8:	6923      	ldr	r3, [r4, #16]
3400adba:	6888      	ldr	r0, [r1, #8]
3400adbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3400adc0:	4b45      	ldr	r3, [pc, #276]	@ (3400aed8 <HAL_XSPI_Init+0x26c>)
  hxspi->Timeout = Timeout;
3400adc2:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
3400adc4:	4003      	ands	r3, r0
3400adc6:	431d      	orrs	r5, r3
3400adc8:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400adca:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
3400adcc:	3b01      	subs	r3, #1
3400adce:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3400add2:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400add4:	68cb      	ldr	r3, [r1, #12]
3400add6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3400adda:	4303      	orrs	r3, r0
3400addc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3400adde:	690b      	ldr	r3, [r1, #16]
3400ade0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3400ade2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3400ade6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400adea:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3400adec:	690b      	ldr	r3, [r1, #16]
3400adee:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3400adf0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400adf4:	4303      	orrs	r3, r0
3400adf6:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400adf8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400adfa:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400adfc:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400adfe:	680b      	ldr	r3, [r1, #0]
3400ae00:	3801      	subs	r0, #1
3400ae02:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400ae06:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
3400ae0a:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400ae0c:	4620      	mov	r0, r4
3400ae0e:	9200      	str	r2, [sp, #0]
3400ae10:	4633      	mov	r3, r6
3400ae12:	463a      	mov	r2, r7
3400ae14:	2120      	movs	r1, #32
3400ae16:	f7ff ff01 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400ae1a:	2800      	cmp	r0, #0
3400ae1c:	d156      	bne.n	3400aecc <HAL_XSPI_Init+0x260>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400ae1e:	6823      	ldr	r3, [r4, #0]
3400ae20:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400ae22:	68da      	ldr	r2, [r3, #12]
3400ae24:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
3400ae28:	430a      	orrs	r2, r1
3400ae2a:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3400ae2c:	4a2b      	ldr	r2, [pc, #172]	@ (3400aedc <HAL_XSPI_Init+0x270>)
3400ae2e:	4293      	cmp	r3, r2
3400ae30:	d042      	beq.n	3400aeb8 <HAL_XSPI_Init+0x24c>
3400ae32:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ae36:	4293      	cmp	r3, r2
3400ae38:	d03e      	beq.n	3400aeb8 <HAL_XSPI_Init+0x24c>
3400ae3a:	4a29      	ldr	r2, [pc, #164]	@ (3400aee0 <HAL_XSPI_Init+0x274>)
3400ae3c:	4293      	cmp	r3, r2
3400ae3e:	d03b      	beq.n	3400aeb8 <HAL_XSPI_Init+0x24c>
3400ae40:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ae44:	4293      	cmp	r3, r2
3400ae46:	d037      	beq.n	3400aeb8 <HAL_XSPI_Init+0x24c>
3400ae48:	4a26      	ldr	r2, [pc, #152]	@ (3400aee4 <HAL_XSPI_Init+0x278>)
3400ae4a:	4293      	cmp	r3, r2
3400ae4c:	d034      	beq.n	3400aeb8 <HAL_XSPI_Init+0x24c>
3400ae4e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ae52:	4293      	cmp	r3, r2
3400ae54:	d030      	beq.n	3400aeb8 <HAL_XSPI_Init+0x24c>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3400ae56:	6823      	ldr	r3, [r4, #0]
3400ae58:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
3400ae5a:	6819      	ldr	r1, [r3, #0]
3400ae5c:	68a2      	ldr	r2, [r4, #8]
3400ae5e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400ae62:	4302      	orrs	r2, r0
3400ae64:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3400ae68:	430a      	orrs	r2, r1
3400ae6a:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3400ae6c:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
3400ae70:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
3400ae74:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
3400ae78:	4302      	orrs	r2, r0
3400ae7a:	430a      	orrs	r2, r1
3400ae7c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3400ae80:	681a      	ldr	r2, [r3, #0]
3400ae82:	f042 0201 	orr.w	r2, r2, #1
3400ae86:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3400ae88:	69a2      	ldr	r2, [r4, #24]
3400ae8a:	2a02      	cmp	r2, #2
3400ae8c:	d103      	bne.n	3400ae96 <HAL_XSPI_Init+0x22a>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3400ae8e:	689a      	ldr	r2, [r3, #8]
3400ae90:	f042 0202 	orr.w	r2, r2, #2
3400ae94:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3400ae96:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400ae98:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3400ae9c:	bf02      	ittt	eq
3400ae9e:	689a      	ldreq	r2, [r3, #8]
3400aea0:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
3400aea4:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400aea6:	68e3      	ldr	r3, [r4, #12]
3400aea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3400aeac:	bf0c      	ite	eq
3400aeae:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3400aeb0:	2302      	movne	r3, #2
3400aeb2:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
3400aeb4:	2000      	movs	r0, #0
3400aeb6:	e009      	b.n	3400aecc <HAL_XSPI_Init+0x260>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400aeb8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3400aeba:	2200      	movs	r2, #0
3400aebc:	9300      	str	r3, [sp, #0]
3400aebe:	2120      	movs	r1, #32
3400aec0:	4633      	mov	r3, r6
3400aec2:	4620      	mov	r0, r4
3400aec4:	f7ff feaa 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
3400aec8:	2800      	cmp	r0, #0
3400aeca:	d0c4      	beq.n	3400ae56 <HAL_XSPI_Init+0x1ea>
}
3400aecc:	b003      	add	sp, #12
3400aece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3400aed0:	2001      	movs	r0, #1
3400aed2:	e7fb      	b.n	3400aecc <HAL_XSPI_Init+0x260>
3400aed4:	34010b91 	.word	0x34010b91
3400aed8:	f8e0c0fc 	.word	0xf8e0c0fc
3400aedc:	58025000 	.word	0x58025000
3400aee0:	5802a000 	.word	0x5802a000
3400aee4:	5802d000 	.word	0x5802d000

3400aee8 <HAL_XSPI_Command>:
{
3400aee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400aeea:	460c      	mov	r4, r1
3400aeec:	4605      	mov	r5, r0
3400aeee:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400aef0:	f7f7 fa64 	bl	340023bc <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400aef4:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400aef6:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400aef8:	2b03      	cmp	r3, #3
3400aefa:	d904      	bls.n	3400af06 <HAL_XSPI_Command+0x1e>
3400aefc:	f240 313e 	movw	r1, #830	@ 0x33e
3400af00:	4884      	ldr	r0, [pc, #528]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400af02:	f7f6 fa35 	bl	34001370 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400af06:	68ab      	ldr	r3, [r5, #8]
3400af08:	b943      	cbnz	r3, 3400af1c <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400af0a:	6863      	ldr	r3, [r4, #4]
3400af0c:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400af10:	d004      	beq.n	3400af1c <HAL_XSPI_Command+0x34>
3400af12:	f240 3141 	movw	r1, #833	@ 0x341
3400af16:	487f      	ldr	r0, [pc, #508]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400af18:	f7f6 fa2a 	bl	34001370 <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3400af1c:	68e3      	ldr	r3, [r4, #12]
3400af1e:	2b04      	cmp	r3, #4
3400af20:	d904      	bls.n	3400af2c <HAL_XSPI_Command+0x44>
3400af22:	f44f 7151 	mov.w	r1, #836	@ 0x344
3400af26:	487b      	ldr	r0, [pc, #492]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400af28:	f7f6 fa22 	bl	34001370 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400af2c:	68e3      	ldr	r3, [r4, #12]
3400af2e:	b18b      	cbz	r3, 3400af54 <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
3400af30:	6923      	ldr	r3, [r4, #16]
3400af32:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400af36:	d004      	beq.n	3400af42 <HAL_XSPI_Command+0x5a>
3400af38:	f240 3147 	movw	r1, #839	@ 0x347
3400af3c:	4875      	ldr	r0, [pc, #468]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400af3e:	f7f6 fa17 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3400af42:	6963      	ldr	r3, [r4, #20]
3400af44:	f033 0308 	bics.w	r3, r3, #8
3400af48:	d004      	beq.n	3400af54 <HAL_XSPI_Command+0x6c>
3400af4a:	f44f 7152 	mov.w	r1, #840	@ 0x348
3400af4e:	4871      	ldr	r0, [pc, #452]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400af50:	f7f6 fa0e 	bl	34001370 <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400af54:	69e3      	ldr	r3, [r4, #28]
3400af56:	b303      	cbz	r3, 3400af9a <HAL_XSPI_Command+0xb2>
3400af58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3400af5c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3400af60:	d10d      	bne.n	3400af7e <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400af62:	6a23      	ldr	r3, [r4, #32]
3400af64:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400af68:	d12c      	bne.n	3400afc4 <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3400af6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400af6c:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400af70:	d013      	beq.n	3400af9a <HAL_XSPI_Command+0xb2>
3400af72:	f240 314f 	movw	r1, #847	@ 0x34f
3400af76:	4867      	ldr	r0, [pc, #412]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400af78:	f7f6 f9fa 	bl	34001370 <assert_failed>
3400af7c:	e00d      	b.n	3400af9a <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400af7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400af82:	d0ee      	beq.n	3400af62 <HAL_XSPI_Command+0x7a>
3400af84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400af88:	d0eb      	beq.n	3400af62 <HAL_XSPI_Command+0x7a>
3400af8a:	f240 314b 	movw	r1, #843	@ 0x34b
3400af8e:	4861      	ldr	r0, [pc, #388]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400af90:	f7f6 f9ee 	bl	34001370 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400af94:	69e3      	ldr	r3, [r4, #28]
3400af96:	2b00      	cmp	r3, #0
3400af98:	d1e3      	bne.n	3400af62 <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400af9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400af9c:	b333      	cbz	r3, 3400afec <HAL_XSPI_Command+0x104>
3400af9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3400afa2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3400afa6:	d113      	bne.n	3400afd0 <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400afa8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400afaa:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3400afae:	d13d      	bne.n	3400b02c <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3400afb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400afb2:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400afb6:	d019      	beq.n	3400afec <HAL_XSPI_Command+0x104>
3400afb8:	f240 3156 	movw	r1, #854	@ 0x356
3400afbc:	4855      	ldr	r0, [pc, #340]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400afbe:	f7f6 f9d7 	bl	34001370 <assert_failed>
3400afc2:	e013      	b.n	3400afec <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400afc4:	f240 314e 	movw	r1, #846	@ 0x34e
3400afc8:	4852      	ldr	r0, [pc, #328]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400afca:	f7f6 f9d1 	bl	34001370 <assert_failed>
3400afce:	e7cc      	b.n	3400af6a <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400afd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400afd4:	d0e8      	beq.n	3400afa8 <HAL_XSPI_Command+0xc0>
3400afd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400afda:	d0e5      	beq.n	3400afa8 <HAL_XSPI_Command+0xc0>
3400afdc:	f240 3152 	movw	r1, #850	@ 0x352
3400afe0:	484c      	ldr	r0, [pc, #304]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400afe2:	f7f6 f9c5 	bl	34001370 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400afe6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400afe8:	2b00      	cmp	r3, #0
3400afea:	d1dd      	bne.n	3400afa8 <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400afec:	68eb      	ldr	r3, [r5, #12]
3400afee:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400aff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400aff4:	d120      	bne.n	3400b038 <HAL_XSPI_Command+0x150>
3400aff6:	b389      	cbz	r1, 3400b05c <HAL_XSPI_Command+0x174>
3400aff8:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400affc:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
3400b000:	d124      	bne.n	3400b04c <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b002:	6823      	ldr	r3, [r4, #0]
3400b004:	2b00      	cmp	r3, #0
3400b006:	d03d      	beq.n	3400b084 <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3400b008:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400b00a:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
3400b00e:	d004      	beq.n	3400b01a <HAL_XSPI_Command+0x132>
3400b010:	f240 3161 	movw	r1, #865	@ 0x361
3400b014:	483f      	ldr	r0, [pc, #252]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400b016:	f7f6 f9ab 	bl	34001370 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3400b01a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b01c:	2b1f      	cmp	r3, #31
3400b01e:	d91d      	bls.n	3400b05c <HAL_XSPI_Command+0x174>
3400b020:	f240 3162 	movw	r1, #866	@ 0x362
3400b024:	483b      	ldr	r0, [pc, #236]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400b026:	f7f6 f9a3 	bl	34001370 <assert_failed>
3400b02a:	e017      	b.n	3400b05c <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400b02c:	f240 3155 	movw	r1, #853	@ 0x355
3400b030:	4838      	ldr	r0, [pc, #224]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400b032:	f7f6 f99d 	bl	34001370 <assert_failed>
3400b036:	e7bb      	b.n	3400afb0 <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400b038:	b181      	cbz	r1, 3400b05c <HAL_XSPI_Command+0x174>
3400b03a:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
3400b03e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400b042:	d0de      	beq.n	3400b002 <HAL_XSPI_Command+0x11a>
3400b044:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
3400b048:	d1d6      	bne.n	3400aff8 <HAL_XSPI_Command+0x110>
3400b04a:	e7da      	b.n	3400b002 <HAL_XSPI_Command+0x11a>
3400b04c:	f240 3159 	movw	r1, #857	@ 0x359
3400b050:	4830      	ldr	r0, [pc, #192]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400b052:	f7f6 f98d 	bl	34001370 <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400b056:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b058:	2b00      	cmp	r3, #0
3400b05a:	d1d2      	bne.n	3400b002 <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3400b05c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400b05e:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3400b062:	d004      	beq.n	3400b06e <HAL_XSPI_Command+0x186>
3400b064:	f240 3165 	movw	r1, #869	@ 0x365
3400b068:	482a      	ldr	r0, [pc, #168]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400b06a:	f7f6 f981 	bl	34001370 <assert_failed>
  state = hxspi->State;
3400b06e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b070:	2b02      	cmp	r3, #2
3400b072:	d110      	bne.n	3400b096 <HAL_XSPI_Command+0x1ae>
3400b074:	68eb      	ldr	r3, [r5, #12]
3400b076:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400b07a:	d112      	bne.n	3400b0a2 <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b07c:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b07e:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b080:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b082:	e028      	b.n	3400b0d6 <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3400b084:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400b086:	2b00      	cmp	r3, #0
3400b088:	d1be      	bne.n	3400b008 <HAL_XSPI_Command+0x120>
3400b08a:	f240 315f 	movw	r1, #863	@ 0x35f
3400b08e:	4821      	ldr	r0, [pc, #132]	@ (3400b114 <HAL_XSPI_Command+0x22c>)
3400b090:	f7f6 f96e 	bl	34001370 <assert_failed>
3400b094:	e7b8      	b.n	3400b008 <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b096:	2b14      	cmp	r3, #20
3400b098:	d11f      	bne.n	3400b0da <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3400b09a:	6823      	ldr	r3, [r4, #0]
3400b09c:	3b02      	subs	r3, #2
3400b09e:	2b01      	cmp	r3, #1
3400b0a0:	d8ec      	bhi.n	3400b07c <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b0a2:	4633      	mov	r3, r6
3400b0a4:	2200      	movs	r2, #0
3400b0a6:	2120      	movs	r1, #32
3400b0a8:	4628      	mov	r0, r5
3400b0aa:	9700      	str	r7, [sp, #0]
3400b0ac:	f7ff fdb6 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b0b0:	bb70      	cbnz	r0, 3400b110 <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400b0b2:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
3400b0b4:	4621      	mov	r1, r4
3400b0b6:	4628      	mov	r0, r5
3400b0b8:	f7ff fcae 	bl	3400aa18 <XSPI_ConfigCmd>
      if (status == HAL_OK)
3400b0bc:	b958      	cbnz	r0, 3400b0d6 <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3400b0be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b0c0:	b99b      	cbnz	r3, 3400b0ea <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b0c2:	4602      	mov	r2, r0
3400b0c4:	4633      	mov	r3, r6
3400b0c6:	2120      	movs	r1, #32
3400b0c8:	4628      	mov	r0, r5
3400b0ca:	9700      	str	r7, [sp, #0]
3400b0cc:	f7ff fda6 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b0d0:	2202      	movs	r2, #2
3400b0d2:	682b      	ldr	r3, [r5, #0]
3400b0d4:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400b0d6:	b003      	add	sp, #12
3400b0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3400b0da:	2b24      	cmp	r3, #36	@ 0x24
3400b0dc:	d1ce      	bne.n	3400b07c <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3400b0de:	6823      	ldr	r3, [r4, #0]
3400b0e0:	f023 0302 	bic.w	r3, r3, #2
3400b0e4:	2b01      	cmp	r3, #1
3400b0e6:	d1c9      	bne.n	3400b07c <HAL_XSPI_Command+0x194>
3400b0e8:	e7db      	b.n	3400b0a2 <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b0ea:	6823      	ldr	r3, [r4, #0]
3400b0ec:	b90b      	cbnz	r3, 3400b0f2 <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3400b0ee:	2304      	movs	r3, #4
3400b0f0:	e005      	b.n	3400b0fe <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3400b0f2:	2b01      	cmp	r3, #1
3400b0f4:	d105      	bne.n	3400b102 <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3400b0f6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b0f8:	2b24      	cmp	r3, #36	@ 0x24
3400b0fa:	d0f8      	beq.n	3400b0ee <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3400b0fc:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b0fe:	65ab      	str	r3, [r5, #88]	@ 0x58
3400b100:	e7e9      	b.n	3400b0d6 <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400b102:	2b02      	cmp	r3, #2
3400b104:	d1e7      	bne.n	3400b0d6 <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3400b106:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b108:	2b14      	cmp	r3, #20
3400b10a:	d0f0      	beq.n	3400b0ee <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b10c:	2324      	movs	r3, #36	@ 0x24
3400b10e:	e7f6      	b.n	3400b0fe <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
3400b110:	2002      	movs	r0, #2
3400b112:	e7e0      	b.n	3400b0d6 <HAL_XSPI_Command+0x1ee>
3400b114:	34010b91 	.word	0x34010b91

3400b118 <HAL_XSPI_Transmit>:
{
3400b118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b11c:	4604      	mov	r4, r0
3400b11e:	4688      	mov	r8, r1
3400b120:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
3400b122:	f7f7 f94b 	bl	340023bc <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b126:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b128:	4605      	mov	r5, r0
  if (pData == NULL)
3400b12a:	f1b8 0f00 	cmp.w	r8, #0
3400b12e:	d103      	bne.n	3400b138 <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b130:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b132:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b134:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b136:	e02e      	b.n	3400b196 <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b138:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b13a:	2b04      	cmp	r3, #4
3400b13c:	d12e      	bne.n	3400b19c <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b13e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
3400b140:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b144:	3301      	adds	r3, #1
3400b146:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b148:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b14a:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3400b14c:	683b      	ldr	r3, [r7, #0]
3400b14e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b152:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3400b154:	462b      	mov	r3, r5
3400b156:	2201      	movs	r2, #1
3400b158:	2104      	movs	r1, #4
3400b15a:	4620      	mov	r0, r4
3400b15c:	9600      	str	r6, [sp, #0]
3400b15e:	f7ff fd5d 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b162:	b9c0      	cbnz	r0, 3400b196 <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3400b164:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b166:	781b      	ldrb	r3, [r3, #0]
3400b168:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
3400b16c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b16e:	3301      	adds	r3, #1
3400b170:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b172:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b174:	3b01      	subs	r3, #1
3400b176:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b178:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b17a:	2b00      	cmp	r3, #0
3400b17c:	d1ea      	bne.n	3400b154 <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b17e:	462b      	mov	r3, r5
3400b180:	2201      	movs	r2, #1
3400b182:	2102      	movs	r1, #2
3400b184:	4620      	mov	r0, r4
3400b186:	9600      	str	r6, [sp, #0]
3400b188:	f7ff fd48 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b18c:	b918      	cbnz	r0, 3400b196 <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b18e:	2302      	movs	r3, #2
3400b190:	6822      	ldr	r2, [r4, #0]
3400b192:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b194:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b196:	b002      	add	sp, #8
3400b198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b19c:	2310      	movs	r3, #16
3400b19e:	e7c8      	b.n	3400b132 <HAL_XSPI_Transmit+0x1a>

3400b1a0 <HAL_XSPI_Receive>:
{
3400b1a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b1a4:	4604      	mov	r4, r0
3400b1a6:	4616      	mov	r6, r2
3400b1a8:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
3400b1aa:	f7f7 f907 	bl	340023bc <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b1ae:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b1b0:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b1b2:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b1b4:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
3400b1b8:	f1b8 0f00 	cmp.w	r8, #0
3400b1bc:	d103      	bne.n	3400b1c6 <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b1be:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b1c0:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b1c2:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b1c4:	e035      	b.n	3400b232 <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b1c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b1c8:	2b04      	cmp	r3, #4
3400b1ca:	d13d      	bne.n	3400b248 <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b1cc:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3400b1ce:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b1d2:	3301      	adds	r3, #1
3400b1d4:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b1d6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b1d8:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b1da:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b1dc:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b1de:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3400b1e2:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b1e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b1ea:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b1ec:	d124      	bne.n	3400b238 <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b1ee:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3400b1f0:	463b      	mov	r3, r7
3400b1f2:	2201      	movs	r2, #1
3400b1f4:	2106      	movs	r1, #6
3400b1f6:	4620      	mov	r0, r4
3400b1f8:	9600      	str	r6, [sp, #0]
3400b1fa:	f7ff fd0f 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b1fe:	b9c0      	cbnz	r0, 3400b232 <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3400b200:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
3400b204:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b206:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3400b208:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b20a:	3301      	adds	r3, #1
3400b20c:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b20e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b210:	3b01      	subs	r3, #1
3400b212:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b214:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b216:	2b00      	cmp	r3, #0
3400b218:	d1ea      	bne.n	3400b1f0 <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b21a:	463b      	mov	r3, r7
3400b21c:	2201      	movs	r2, #1
3400b21e:	2102      	movs	r1, #2
3400b220:	4620      	mov	r0, r4
3400b222:	9600      	str	r6, [sp, #0]
3400b224:	f7ff fcfa 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b228:	b918      	cbnz	r0, 3400b232 <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b22a:	2302      	movs	r3, #2
3400b22c:	6822      	ldr	r2, [r4, #0]
3400b22e:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b230:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b232:	b002      	add	sp, #8
3400b234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b238:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
3400b23c:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b240:	d1d5      	bne.n	3400b1ee <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b242:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
3400b246:	e7d3      	b.n	3400b1f0 <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b248:	2310      	movs	r3, #16
3400b24a:	e7b9      	b.n	3400b1c0 <HAL_XSPI_Receive+0x20>

3400b24c <HAL_XSPI_AutoPolling>:
{
3400b24c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3400b250:	4604      	mov	r4, r0
3400b252:	460d      	mov	r5, r1
3400b254:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400b256:	f7f7 f8b1 	bl	340023bc <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
3400b25a:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b25c:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b25e:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b262:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
3400b266:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
3400b26a:	68ab      	ldr	r3, [r5, #8]
3400b26c:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3400b270:	d004      	beq.n	3400b27c <HAL_XSPI_AutoPolling+0x30>
3400b272:	f240 7134 	movw	r1, #1844	@ 0x734
3400b276:	4832      	ldr	r0, [pc, #200]	@ (3400b340 <HAL_XSPI_AutoPolling+0xf4>)
3400b278:	f7f6 f87a 	bl	34001370 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3400b27c:	68eb      	ldr	r3, [r5, #12]
3400b27e:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3400b282:	d004      	beq.n	3400b28e <HAL_XSPI_AutoPolling+0x42>
3400b284:	f240 7135 	movw	r1, #1845	@ 0x735
3400b288:	482d      	ldr	r0, [pc, #180]	@ (3400b340 <HAL_XSPI_AutoPolling+0xf4>)
3400b28a:	f7f6 f871 	bl	34001370 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3400b28e:	692b      	ldr	r3, [r5, #16]
3400b290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b294:	d304      	bcc.n	3400b2a0 <HAL_XSPI_AutoPolling+0x54>
3400b296:	f240 7136 	movw	r1, #1846	@ 0x736
3400b29a:	4829      	ldr	r0, [pc, #164]	@ (3400b340 <HAL_XSPI_AutoPolling+0xf4>)
3400b29c:	f7f6 f868 	bl	34001370 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3400b2a0:	f1ba 0f03 	cmp.w	sl, #3
3400b2a4:	d904      	bls.n	3400b2b0 <HAL_XSPI_AutoPolling+0x64>
3400b2a6:	f240 7137 	movw	r1, #1847	@ 0x737
3400b2aa:	4825      	ldr	r0, [pc, #148]	@ (3400b340 <HAL_XSPI_AutoPolling+0xf4>)
3400b2ac:	f7f6 f860 	bl	34001370 <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3400b2b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b2b2:	2b04      	cmp	r3, #4
3400b2b4:	d13e      	bne.n	3400b334 <HAL_XSPI_AutoPolling+0xe8>
3400b2b6:	68eb      	ldr	r3, [r5, #12]
3400b2b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3400b2bc:	d13a      	bne.n	3400b334 <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b2be:	4633      	mov	r3, r6
3400b2c0:	2200      	movs	r2, #0
3400b2c2:	2120      	movs	r1, #32
3400b2c4:	4620      	mov	r0, r4
3400b2c6:	9700      	str	r7, [sp, #0]
3400b2c8:	f7ff fca8 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b2cc:	2800      	cmp	r0, #0
3400b2ce:	d135      	bne.n	3400b33c <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3400b2d0:	682b      	ldr	r3, [r5, #0]
3400b2d2:	6821      	ldr	r1, [r4, #0]
3400b2d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3400b2d8:	686b      	ldr	r3, [r5, #4]
3400b2da:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3400b2de:	692b      	ldr	r3, [r5, #16]
3400b2e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b2e4:	680a      	ldr	r2, [r1, #0]
3400b2e6:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
3400b2ea:	431d      	orrs	r5, r3
3400b2ec:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3400b2f0:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b2f2:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b2f4:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b2f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b2fc:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b2fe:	d111      	bne.n	3400b324 <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b300:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3400b304:	4633      	mov	r3, r6
3400b306:	2201      	movs	r2, #1
3400b308:	2108      	movs	r1, #8
3400b30a:	4620      	mov	r0, r4
3400b30c:	9700      	str	r7, [sp, #0]
3400b30e:	f7ff fc85 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400b312:	b920      	cbnz	r0, 3400b31e <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3400b314:	2208      	movs	r2, #8
3400b316:	6823      	ldr	r3, [r4, #0]
3400b318:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
3400b31a:	2302      	movs	r3, #2
3400b31c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b31e:	b002      	add	sp, #8
3400b320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b324:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
3400b328:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b32c:	d1e8      	bne.n	3400b300 <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b32e:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
3400b332:	e7e7      	b.n	3400b304 <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b334:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b336:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b338:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b33a:	e7f0      	b.n	3400b31e <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
3400b33c:	2002      	movs	r0, #2
3400b33e:	e7ee      	b.n	3400b31e <HAL_XSPI_AutoPolling+0xd2>
3400b340:	34010b91 	.word	0x34010b91

3400b344 <HAL_XSPI_MemoryMapped>:
{
3400b344:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400b346:	460c      	mov	r4, r1
3400b348:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
3400b34a:	f7f7 f837 	bl	340023bc <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b34e:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b350:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b352:	f033 0308 	bics.w	r3, r3, #8
3400b356:	d004      	beq.n	3400b362 <HAL_XSPI_MemoryMapped+0x1e>
3400b358:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
3400b35c:	482f      	ldr	r0, [pc, #188]	@ (3400b41c <HAL_XSPI_MemoryMapped+0xd8>)
3400b35e:	f7f6 f807 	bl	34001370 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3400b362:	68a3      	ldr	r3, [r4, #8]
3400b364:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
3400b368:	d004      	beq.n	3400b374 <HAL_XSPI_MemoryMapped+0x30>
3400b36a:	f240 71c9 	movw	r1, #1993	@ 0x7c9
3400b36e:	482b      	ldr	r0, [pc, #172]	@ (3400b41c <HAL_XSPI_MemoryMapped+0xd8>)
3400b370:	f7f5 fffe 	bl	34001370 <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b374:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b376:	2b04      	cmp	r3, #4
3400b378:	d14b      	bne.n	3400b412 <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400b37a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
3400b37c:	2200      	movs	r2, #0
3400b37e:	9300      	str	r3, [sp, #0]
3400b380:	2120      	movs	r1, #32
3400b382:	4633      	mov	r3, r6
3400b384:	4628      	mov	r0, r5
3400b386:	f7ff fc49 	bl	3400ac1c <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b38a:	4606      	mov	r6, r0
3400b38c:	bb58      	cbnz	r0, 3400b3e6 <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3400b38e:	2388      	movs	r3, #136	@ 0x88
3400b390:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3400b392:	68a3      	ldr	r3, [r4, #8]
3400b394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400b398:	d128      	bne.n	3400b3ec <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3400b39a:	682a      	ldr	r2, [r5, #0]
3400b39c:	6813      	ldr	r3, [r2, #0]
3400b39e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3400b3a2:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3400b3a4:	6823      	ldr	r3, [r4, #0]
3400b3a6:	2b08      	cmp	r3, #8
3400b3a8:	d112      	bne.n	3400b3d0 <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3400b3aa:	6863      	ldr	r3, [r4, #4]
3400b3ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b3b0:	d304      	bcc.n	3400b3bc <HAL_XSPI_MemoryMapped+0x78>
3400b3b2:	f240 71e5 	movw	r1, #2021	@ 0x7e5
3400b3b6:	4819      	ldr	r0, [pc, #100]	@ (3400b41c <HAL_XSPI_MemoryMapped+0xd8>)
3400b3b8:	f7f5 ffda 	bl	34001370 <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3400b3bc:	682b      	ldr	r3, [r5, #0]
3400b3be:	6862      	ldr	r2, [r4, #4]
3400b3c0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3400b3c4:	2210      	movs	r2, #16
3400b3c6:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3400b3c8:	681a      	ldr	r2, [r3, #0]
3400b3ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3400b3ce:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3400b3d0:	682a      	ldr	r2, [r5, #0]
3400b3d2:	6821      	ldr	r1, [r4, #0]
3400b3d4:	6813      	ldr	r3, [r2, #0]
3400b3d6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b3da:	f023 0308 	bic.w	r3, r3, #8
3400b3de:	430b      	orrs	r3, r1
3400b3e0:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
3400b3e4:	6013      	str	r3, [r2, #0]
}
3400b3e6:	4630      	mov	r0, r6
3400b3e8:	b002      	add	sp, #8
3400b3ea:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
3400b3ec:	68e3      	ldr	r3, [r4, #12]
3400b3ee:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3400b3f2:	d004      	beq.n	3400b3fe <HAL_XSPI_MemoryMapped+0xba>
3400b3f4:	f240 71dd 	movw	r1, #2013	@ 0x7dd
3400b3f8:	4808      	ldr	r0, [pc, #32]	@ (3400b41c <HAL_XSPI_MemoryMapped+0xd8>)
3400b3fa:	f7f5 ffb9 	bl	34001370 <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3400b3fe:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
3400b402:	6829      	ldr	r1, [r5, #0]
3400b404:	4303      	orrs	r3, r0
3400b406:	680a      	ldr	r2, [r1, #0]
3400b408:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
3400b40c:	4313      	orrs	r3, r2
3400b40e:	600b      	str	r3, [r1, #0]
3400b410:	e7c8      	b.n	3400b3a4 <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b412:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b414:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b416:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b418:	e7e5      	b.n	3400b3e6 <HAL_XSPI_MemoryMapped+0xa2>
3400b41a:	bf00      	nop
3400b41c:	34010b91 	.word	0x34010b91

3400b420 <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b420:	29ff      	cmp	r1, #255	@ 0xff
{
3400b422:	b538      	push	{r3, r4, r5, lr}
3400b424:	4604      	mov	r4, r0
3400b426:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b428:	d904      	bls.n	3400b434 <HAL_XSPI_SetClockPrescaler+0x14>
3400b42a:	f640 2193 	movw	r1, #2707	@ 0xa93
3400b42e:	4809      	ldr	r0, [pc, #36]	@ (3400b454 <HAL_XSPI_SetClockPrescaler+0x34>)
3400b430:	f7f5 ff9e 	bl	34001370 <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3400b434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400b436:	f010 0008 	ands.w	r0, r0, #8
3400b43a:	d107      	bne.n	3400b44c <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b43c:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
3400b43e:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b440:	68d3      	ldr	r3, [r2, #12]
3400b442:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400b446:	432b      	orrs	r3, r5
3400b448:	60d3      	str	r3, [r2, #12]
}
3400b44a:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b44c:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b44e:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b450:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b452:	e7fa      	b.n	3400b44a <HAL_XSPI_SetClockPrescaler+0x2a>
3400b454:	34010b91 	.word	0x34010b91

3400b458 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
3400b458:	2a02      	cmp	r2, #2
3400b45a:	d14a      	bne.n	3400b4f2 <USB_SetTurnaroundTime+0x9a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
3400b45c:	4b27      	ldr	r3, [pc, #156]	@ (3400b4fc <USB_SetTurnaroundTime+0xa4>)
3400b45e:	4a28      	ldr	r2, [pc, #160]	@ (3400b500 <USB_SetTurnaroundTime+0xa8>)
3400b460:	440b      	add	r3, r1
3400b462:	4293      	cmp	r3, r2
3400b464:	d939      	bls.n	3400b4da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
3400b466:	4b27      	ldr	r3, [pc, #156]	@ (3400b504 <USB_SetTurnaroundTime+0xac>)
3400b468:	4a27      	ldr	r2, [pc, #156]	@ (3400b508 <USB_SetTurnaroundTime+0xb0>)
3400b46a:	440b      	add	r3, r1
3400b46c:	4293      	cmp	r3, r2
3400b46e:	d936      	bls.n	3400b4de <USB_SetTurnaroundTime+0x86>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
3400b470:	4a26      	ldr	r2, [pc, #152]	@ (3400b50c <USB_SetTurnaroundTime+0xb4>)
3400b472:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
3400b476:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
3400b47a:	4293      	cmp	r3, r2
3400b47c:	d931      	bls.n	3400b4e2 <USB_SetTurnaroundTime+0x8a>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
3400b47e:	4a24      	ldr	r2, [pc, #144]	@ (3400b510 <USB_SetTurnaroundTime+0xb8>)
3400b480:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
3400b484:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
3400b488:	4293      	cmp	r3, r2
3400b48a:	d32c      	bcc.n	3400b4e6 <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
3400b48c:	4b21      	ldr	r3, [pc, #132]	@ (3400b514 <USB_SetTurnaroundTime+0xbc>)
3400b48e:	4a22      	ldr	r2, [pc, #136]	@ (3400b518 <USB_SetTurnaroundTime+0xc0>)
3400b490:	440b      	add	r3, r1
3400b492:	4293      	cmp	r3, r2
3400b494:	d929      	bls.n	3400b4ea <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
3400b496:	4b21      	ldr	r3, [pc, #132]	@ (3400b51c <USB_SetTurnaroundTime+0xc4>)
3400b498:	4a21      	ldr	r2, [pc, #132]	@ (3400b520 <USB_SetTurnaroundTime+0xc8>)
3400b49a:	440b      	add	r3, r1
3400b49c:	4293      	cmp	r3, r2
3400b49e:	d326      	bcc.n	3400b4ee <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
3400b4a0:	4b20      	ldr	r3, [pc, #128]	@ (3400b524 <USB_SetTurnaroundTime+0xcc>)
3400b4a2:	4a21      	ldr	r2, [pc, #132]	@ (3400b528 <USB_SetTurnaroundTime+0xd0>)
3400b4a4:	440b      	add	r3, r1
3400b4a6:	4293      	cmp	r3, r2
3400b4a8:	d323      	bcc.n	3400b4f2 <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
3400b4aa:	4a20      	ldr	r2, [pc, #128]	@ (3400b52c <USB_SetTurnaroundTime+0xd4>)
3400b4ac:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
3400b4b0:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
3400b4b4:	4293      	cmp	r3, r2
3400b4b6:	d31e      	bcc.n	3400b4f6 <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
3400b4b8:	4b1d      	ldr	r3, [pc, #116]	@ (3400b530 <USB_SetTurnaroundTime+0xd8>)
3400b4ba:	4a1e      	ldr	r2, [pc, #120]	@ (3400b534 <USB_SetTurnaroundTime+0xdc>)
3400b4bc:	440b      	add	r3, r1
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
3400b4be:	4293      	cmp	r3, r2
3400b4c0:	bf2c      	ite	cs
3400b4c2:	2306      	movcs	r3, #6
3400b4c4:	2307      	movcc	r3, #7
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
3400b4c6:	68c2      	ldr	r2, [r0, #12]
3400b4c8:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
3400b4cc:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
3400b4ce:	68c2      	ldr	r2, [r0, #12]
3400b4d0:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
3400b4d4:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
3400b4d6:	2000      	movs	r0, #0
3400b4d8:	4770      	bx	lr
      UsbTrd = 0xFU;
3400b4da:	230f      	movs	r3, #15
3400b4dc:	e7f3      	b.n	3400b4c6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
3400b4de:	230e      	movs	r3, #14
3400b4e0:	e7f1      	b.n	3400b4c6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
3400b4e2:	230d      	movs	r3, #13
3400b4e4:	e7ef      	b.n	3400b4c6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
3400b4e6:	230c      	movs	r3, #12
3400b4e8:	e7ed      	b.n	3400b4c6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
3400b4ea:	230b      	movs	r3, #11
3400b4ec:	e7eb      	b.n	3400b4c6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
3400b4ee:	230a      	movs	r3, #10
3400b4f0:	e7e9      	b.n	3400b4c6 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
3400b4f2:	2309      	movs	r3, #9
3400b4f4:	e7e7      	b.n	3400b4c6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
3400b4f6:	2308      	movs	r3, #8
3400b4f8:	e7e5      	b.n	3400b4c6 <USB_SetTurnaroundTime+0x6e>
3400b4fa:	bf00      	nop
3400b4fc:	ff275340 	.word	0xff275340
3400b500:	000c34ff 	.word	0x000c34ff
3400b504:	ff1b1e40 	.word	0xff1b1e40
3400b508:	000f423f 	.word	0x000f423f
3400b50c:	00124f7f 	.word	0x00124f7f
3400b510:	0013d620 	.word	0x0013d620
3400b514:	fee5b660 	.word	0xfee5b660
3400b518:	0016e35f 	.word	0x0016e35f
3400b51c:	feced300 	.word	0xfeced300
3400b520:	001b7740 	.word	0x001b7740
3400b524:	feb35bc0 	.word	0xfeb35bc0
3400b528:	002191c0 	.word	0x002191c0
3400b52c:	00387520 	.word	0x00387520
3400b530:	fe5954e0 	.word	0xfe5954e0
3400b534:	00419ce0 	.word	0x00419ce0

3400b538 <USB_FlushTxFifo>:
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  __IO uint32_t count = 0U;
3400b538:	2300      	movs	r3, #0
{
3400b53a:	4602      	mov	r2, r0
3400b53c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b53e:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b540:	9b01      	ldr	r3, [sp, #4]
3400b542:	3301      	adds	r3, #1
3400b544:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b546:	9b01      	ldr	r3, [sp, #4]
3400b548:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b54c:	d815      	bhi.n	3400b57a <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b54e:	6913      	ldr	r3, [r2, #16]
3400b550:	2b00      	cmp	r3, #0
3400b552:	daf5      	bge.n	3400b540 <USB_FlushTxFifo+0x8>

  /* Flush TX Fifo */
  count = 0U;
3400b554:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b556:	0189      	lsls	r1, r1, #6
3400b558:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
3400b55c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b55e:	6111      	str	r1, [r2, #16]

  do
  {
    count++;
3400b560:	9b01      	ldr	r3, [sp, #4]
3400b562:	3301      	adds	r3, #1
3400b564:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b566:	9b01      	ldr	r3, [sp, #4]
3400b568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b56c:	d805      	bhi.n	3400b57a <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
3400b56e:	6910      	ldr	r0, [r2, #16]
3400b570:	f010 0020 	ands.w	r0, r0, #32
3400b574:	d1f4      	bne.n	3400b560 <USB_FlushTxFifo+0x28>

  return HAL_OK;
}
3400b576:	b002      	add	sp, #8
3400b578:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b57a:	2003      	movs	r0, #3
3400b57c:	e7fb      	b.n	3400b576 <USB_FlushTxFifo+0x3e>

3400b57e <USB_FlushRxFifo>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
3400b57e:	2300      	movs	r3, #0
{
3400b580:	4602      	mov	r2, r0
3400b582:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b584:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b586:	9b01      	ldr	r3, [sp, #4]
3400b588:	3301      	adds	r3, #1
3400b58a:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b58c:	9b01      	ldr	r3, [sp, #4]
3400b58e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b592:	d813      	bhi.n	3400b5bc <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b594:	6913      	ldr	r3, [r2, #16]
3400b596:	2b00      	cmp	r3, #0
3400b598:	daf5      	bge.n	3400b586 <USB_FlushRxFifo+0x8>

  /* Flush RX Fifo */
  count = 0U;
3400b59a:	2300      	movs	r3, #0
3400b59c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
3400b59e:	2310      	movs	r3, #16
3400b5a0:	6113      	str	r3, [r2, #16]

  do
  {
    count++;
3400b5a2:	9b01      	ldr	r3, [sp, #4]
3400b5a4:	3301      	adds	r3, #1
3400b5a6:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b5a8:	9b01      	ldr	r3, [sp, #4]
3400b5aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b5ae:	d805      	bhi.n	3400b5bc <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
3400b5b0:	6910      	ldr	r0, [r2, #16]
3400b5b2:	f010 0010 	ands.w	r0, r0, #16
3400b5b6:	d1f4      	bne.n	3400b5a2 <USB_FlushRxFifo+0x24>

  return HAL_OK;
}
3400b5b8:	b002      	add	sp, #8
3400b5ba:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b5bc:	2003      	movs	r0, #3
3400b5be:	e7fb      	b.n	3400b5b8 <USB_FlushRxFifo+0x3a>

3400b5c0 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
3400b5c0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
3400b5c4:	f013 0006 	ands.w	r0, r3, #6
3400b5c8:	d004      	beq.n	3400b5d4 <USB_GetDevSpeed+0x14>
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
3400b5ca:	f013 0f02 	tst.w	r3, #2
3400b5ce:	bf14      	ite	ne
3400b5d0:	2002      	movne	r0, #2
3400b5d2:	200f      	moveq	r0, #15
  }

  return speed;
}
3400b5d4:	4770      	bx	lr

3400b5d6 <USB_ActivateEndpoint>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b5d6:	2201      	movs	r2, #1
{
3400b5d8:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
3400b5da:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b5dc:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
3400b5e0:	f004 050f 	and.w	r5, r4, #15
3400b5e4:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
3400b5e6:	784d      	ldrb	r5, [r1, #1]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b5e8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
3400b5ec:	2d01      	cmp	r5, #1
3400b5ee:	d119      	bne.n	3400b624 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b5f0:	69dd      	ldr	r5, [r3, #28]
3400b5f2:	432a      	orrs	r2, r5
3400b5f4:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b5f6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b5fa:	041a      	lsls	r2, r3, #16
3400b5fc:	d410      	bmi.n	3400b620 <USB_ActivateEndpoint+0x4a>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b5fe:	688a      	ldr	r2, [r1, #8]
3400b600:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
3400b604:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
3400b608:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b60a:	432b      	orrs	r3, r5
3400b60c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b610:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
3400b614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b61c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
3400b620:	2000      	movs	r0, #0
3400b622:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
3400b624:	69dc      	ldr	r4, [r3, #28]
3400b626:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
3400b62a:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
3400b62c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b630:	041b      	lsls	r3, r3, #16
3400b632:	d4f5      	bmi.n	3400b620 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b634:	688b      	ldr	r3, [r1, #8]
3400b636:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b63a:	f3c3 030a 	ubfx	r3, r3, #0, #11
3400b63e:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
3400b640:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b642:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b64a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b64e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b652:	e7e5      	b.n	3400b620 <USB_ActivateEndpoint+0x4a>

3400b654 <USB_EPStopXfer>:
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  __IO uint32_t count = 0U;
3400b654:	2300      	movs	r3, #0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* IN endpoint */
  if (ep->is_in == 1U)
3400b656:	784a      	ldrb	r2, [r1, #1]
{
3400b658:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b65a:	9301      	str	r3, [sp, #4]
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b65c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400b65e:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b660:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
3400b664:	d11e      	bne.n	3400b6a4 <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b666:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
3400b66a:	58c2      	ldr	r2, [r0, r3]
3400b66c:	18c1      	adds	r1, r0, r3
3400b66e:	2a00      	cmp	r2, #0
3400b670:	db02      	blt.n	3400b678 <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
3400b672:	2000      	movs	r0, #0
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
    }
  }

  return ret;
}
3400b674:	b002      	add	sp, #8
3400b676:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
3400b678:	58c2      	ldr	r2, [r0, r3]
3400b67a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b67e:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
3400b680:	58c2      	ldr	r2, [r0, r3]
3400b682:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b686:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b688:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b68c:	9b01      	ldr	r3, [sp, #4]
3400b68e:	3301      	adds	r3, #1
3400b690:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b692:	9b01      	ldr	r3, [sp, #4]
3400b694:	4293      	cmp	r3, r2
3400b696:	d901      	bls.n	3400b69c <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
3400b698:	2001      	movs	r0, #1
3400b69a:	e7eb      	b.n	3400b674 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
3400b69c:	680b      	ldr	r3, [r1, #0]
3400b69e:	2b00      	cmp	r3, #0
3400b6a0:	dbf4      	blt.n	3400b68c <USB_EPStopXfer+0x38>
3400b6a2:	e7e6      	b.n	3400b672 <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400b6a4:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
3400b6a8:	58c2      	ldr	r2, [r0, r3]
3400b6aa:	18c1      	adds	r1, r0, r3
3400b6ac:	2a00      	cmp	r2, #0
3400b6ae:	dae0      	bge.n	3400b672 <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
3400b6b0:	58c2      	ldr	r2, [r0, r3]
3400b6b2:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b6b6:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
3400b6b8:	58c2      	ldr	r2, [r0, r3]
3400b6ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b6be:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b6c0:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b6c4:	9b01      	ldr	r3, [sp, #4]
3400b6c6:	3301      	adds	r3, #1
3400b6c8:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b6ca:	9b01      	ldr	r3, [sp, #4]
3400b6cc:	4293      	cmp	r3, r2
3400b6ce:	d8e3      	bhi.n	3400b698 <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
3400b6d0:	680b      	ldr	r3, [r1, #0]
3400b6d2:	2b00      	cmp	r3, #0
3400b6d4:	dbf6      	blt.n	3400b6c4 <USB_EPStopXfer+0x70>
3400b6d6:	e7cc      	b.n	3400b672 <USB_EPStopXfer+0x1e>

3400b6d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
3400b6d8:	b510      	push	{r4, lr}
3400b6da:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t *pSrc = src;
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
3400b6de:	b93c      	cbnz	r4, 3400b6f0 <USB_WritePacket+0x18>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
3400b6e0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b6e2:	3201      	adds	r2, #1
3400b6e4:	089b      	lsrs	r3, r3, #2
3400b6e6:	eb00 3002 	add.w	r0, r0, r2, lsl #12
3400b6ea:	3301      	adds	r3, #1
    for (i = 0U; i < count32b; i++)
3400b6ec:	3b01      	subs	r3, #1
3400b6ee:	d101      	bne.n	3400b6f4 <USB_WritePacket+0x1c>
      pSrc++;
    }
  }

  return HAL_OK;
}
3400b6f0:	2000      	movs	r0, #0
3400b6f2:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b6f4:	f851 2b04 	ldr.w	r2, [r1], #4
3400b6f8:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
3400b6fa:	e7f7      	b.n	3400b6ec <USB_WritePacket+0x14>

3400b6fc <USB_EPStartXfer>:
{
3400b6fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
3400b700:	784b      	ldrb	r3, [r1, #1]
{
3400b702:	4616      	mov	r6, r2
  uint32_t epnum = (uint32_t)ep->num;
3400b704:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
3400b706:	2b01      	cmp	r3, #1
    if (ep->xfer_len == 0U)
3400b708:	690c      	ldr	r4, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b70a:	790f      	ldrb	r7, [r1, #4]
3400b70c:	f8df e1e8 	ldr.w	lr, [pc, #488]	@ 3400b8f8 <USB_EPStartXfer+0x1fc>
3400b710:	f8df 81e8 	ldr.w	r8, [pc, #488]	@ 3400b8fc <USB_EPStartXfer+0x200>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b714:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
3400b718:	f040 8097 	bne.w	3400b84a <USB_EPStartXfer+0x14e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b71c:	f505 6c10 	add.w	ip, r5, #2304	@ 0x900
3400b720:	f8dc 3010 	ldr.w	r3, [ip, #16]
    if (ep->xfer_len == 0U)
3400b724:	bb74      	cbnz	r4, 3400b784 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b726:	ea03 030e 	and.w	r3, r3, lr
3400b72a:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b72e:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b732:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
3400b736:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b73a:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b73e:	ea03 0308 	and.w	r3, r3, r8
    if (dma == 1U)
3400b742:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b744:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400b748:	d157      	bne.n	3400b7fa <USB_EPStartXfer+0xfe>
      if ((uint32_t)ep->dma_addr != 0U)
3400b74a:	69cb      	ldr	r3, [r1, #28]
3400b74c:	b10b      	cbz	r3, 3400b752 <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
3400b74e:	f8cc 3014 	str.w	r3, [ip, #20]
      if (ep->type == EP_TYPE_ISOC)
3400b752:	2f01      	cmp	r7, #1
3400b754:	d10c      	bne.n	3400b770 <USB_EPStartXfer+0x74>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b756:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400b75a:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b75e:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b762:	bf0c      	ite	eq
3400b764:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b768:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400b76c:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b770:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b774:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b778:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
}
3400b77c:	2000      	movs	r0, #0
3400b77e:	b002      	add	sp, #8
3400b780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b784:	ea03 0308 	and.w	r3, r3, r8
3400b788:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b78c:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b790:	ea03 030e 	and.w	r3, r3, lr
3400b794:	f8cc 3010 	str.w	r3, [ip, #16]
        if (ep->xfer_len > ep->maxpacket)
3400b798:	688b      	ldr	r3, [r1, #8]
      if (epnum == 0U)
3400b79a:	b97a      	cbnz	r2, 3400b7bc <USB_EPStartXfer+0xc0>
        if (ep->xfer_len > ep->maxpacket)
3400b79c:	42a3      	cmp	r3, r4
          ep->xfer_len = ep->maxpacket;
3400b79e:	bf38      	it	cc
3400b7a0:	610b      	strcc	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b7a2:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b7a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b7aa:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b7ae:	690b      	ldr	r3, [r1, #16]
3400b7b0:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b7b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b7b8:	4323      	orrs	r3, r4
3400b7ba:	e7c2      	b.n	3400b742 <USB_EPStartXfer+0x46>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400b7bc:	441c      	add	r4, r3
3400b7be:	3c01      	subs	r4, #1
3400b7c0:	fbb4 f4f3 	udiv	r4, r4, r3
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b7c4:	4b4b      	ldr	r3, [pc, #300]	@ (3400b8f4 <USB_EPStartXfer+0x1f8>)
3400b7c6:	f8dc e010 	ldr.w	lr, [ip, #16]
3400b7ca:	fa1f f884 	uxth.w	r8, r4
3400b7ce:	ea03 44c4 	and.w	r4, r3, r4, lsl #19
3400b7d2:	ea44 040e 	orr.w	r4, r4, lr
        if (ep->type == EP_TYPE_ISOC)
3400b7d6:	2f01      	cmp	r7, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b7d8:	f8cc 4010 	str.w	r4, [ip, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b7dc:	d1e7      	bne.n	3400b7ae <USB_EPStartXfer+0xb2>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
3400b7de:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b7e2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
3400b7e6:	f8cc 3010 	str.w	r3, [ip, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b7ea:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b7ee:	ea4f 7348 	mov.w	r3, r8, lsl #29
3400b7f2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
3400b7f6:	4323      	orrs	r3, r4
3400b7f8:	e7d7      	b.n	3400b7aa <USB_EPStartXfer+0xae>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b7fa:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
3400b7fe:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b800:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b804:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
3400b808:	690b      	ldr	r3, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
3400b80a:	d00b      	beq.n	3400b824 <USB_EPStartXfer+0x128>
        if (ep->xfer_len > 0U)
3400b80c:	2b00      	cmp	r3, #0
3400b80e:	d0b5      	beq.n	3400b77c <USB_EPStartXfer+0x80>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
3400b810:	2301      	movs	r3, #1
3400b812:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
3400b816:	f002 020f 	and.w	r2, r2, #15
3400b81a:	4093      	lsls	r3, r2
3400b81c:	430b      	orrs	r3, r1
3400b81e:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
3400b822:	e7ab      	b.n	3400b77c <USB_EPStartXfer+0x80>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b824:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b828:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b82a:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b82e:	f8d5 4900 	ldr.w	r4, [r5, #2304]	@ 0x900
3400b832:	bf0c      	ite	eq
3400b834:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b838:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
3400b83c:	f8c5 4900 	str.w	r4, [r5, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b840:	9600      	str	r6, [sp, #0]
3400b842:	68c9      	ldr	r1, [r1, #12]
3400b844:	f7ff ff48 	bl	3400b6d8 <USB_WritePacket>
3400b848:	e798      	b.n	3400b77c <USB_EPStartXfer+0x80>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
3400b84a:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
3400b84e:	f505 6c30 	add.w	ip, r5, #2816	@ 0xb00
3400b852:	ea03 0308 	and.w	r3, r3, r8
3400b856:	f8cc 3010 	str.w	r3, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
3400b85a:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b85e:	ea03 030e 	and.w	r3, r3, lr
3400b862:	f8cc 3010 	str.w	r3, [ip, #16]
        ep->xfer_len = ep->maxpacket;
3400b866:	688b      	ldr	r3, [r1, #8]
    if (epnum == 0U)
3400b868:	bb5a      	cbnz	r2, 3400b8c2 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
3400b86a:	b104      	cbz	r4, 3400b86e <USB_EPStartXfer+0x172>
        ep->xfer_len = ep->maxpacket;
3400b86c:	610b      	str	r3, [r1, #16]
      ep->xfer_size = ep->maxpacket;
3400b86e:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
3400b870:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400b874:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b878:	4313      	orrs	r3, r2
3400b87a:	f8cc 3010 	str.w	r3, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400b87e:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b882:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    if (dma == 1U)
3400b886:	2e01      	cmp	r6, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400b888:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400b88c:	d103      	bne.n	3400b896 <USB_EPStartXfer+0x19a>
      if ((uint32_t)ep->xfer_buff != 0U)
3400b88e:	68cb      	ldr	r3, [r1, #12]
3400b890:	b10b      	cbz	r3, 3400b896 <USB_EPStartXfer+0x19a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
3400b892:	f8cc 3014 	str.w	r3, [ip, #20]
    if (ep->type == EP_TYPE_ISOC)
3400b896:	2f01      	cmp	r7, #1
3400b898:	d10c      	bne.n	3400b8b4 <USB_EPStartXfer+0x1b8>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b89a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400b89e:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
3400b8a2:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400b8a6:	bf0c      	ite	eq
3400b8a8:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
3400b8ac:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400b8b0:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
3400b8b4:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400b8b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b8bc:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
3400b8c0:	e75c      	b.n	3400b77c <USB_EPStartXfer+0x80>
      if (ep->xfer_len == 0U)
3400b8c2:	2c00      	cmp	r4, #0
3400b8c4:	d0d4      	beq.n	3400b870 <USB_EPStartXfer+0x174>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400b8c6:	441c      	add	r4, r3
3400b8c8:	3c01      	subs	r4, #1
3400b8ca:	fbb4 f4f3 	udiv	r4, r4, r3
3400b8ce:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
3400b8d0:	4363      	muls	r3, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400b8d2:	4a08      	ldr	r2, [pc, #32]	@ (3400b8f4 <USB_EPStartXfer+0x1f8>)
3400b8d4:	f8dc e010 	ldr.w	lr, [ip, #16]
3400b8d8:	ea02 42c4 	and.w	r2, r2, r4, lsl #19
3400b8dc:	ea42 020e 	orr.w	r2, r2, lr
        ep->xfer_size = ep->maxpacket * pktcnt;
3400b8e0:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400b8e2:	f8cc 2010 	str.w	r2, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400b8e6:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400b8ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b8ee:	4313      	orrs	r3, r2
3400b8f0:	e7c9      	b.n	3400b886 <USB_EPStartXfer+0x18a>
3400b8f2:	bf00      	nop
3400b8f4:	1ff80000 	.word	0x1ff80000
3400b8f8:	e007ffff 	.word	0xe007ffff
3400b8fc:	fff80000 	.word	0xfff80000

3400b900 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
3400b900:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
  uint16_t remaining_bytes = len % 4U;

  for (i = 0U; i < count32b; i++)
3400b902:	2500      	movs	r5, #0
  uint32_t count32b = (uint32_t)len >> 2U;
3400b904:	0894      	lsrs	r4, r2, #2
  uint16_t remaining_bytes = len % 4U;
3400b906:	42ac      	cmp	r4, r5
{
3400b908:	4603      	mov	r3, r0
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400b90a:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
3400b90e:	f104 0001 	add.w	r0, r4, #1
3400b912:	bf08      	it	eq
3400b914:	2001      	moveq	r0, #1
  uint16_t remaining_bytes = len % 4U;
3400b916:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
3400b91a:	3801      	subs	r0, #1
3400b91c:	d110      	bne.n	3400b940 <USB_ReadPacket+0x40>
3400b91e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
    pDest++;
    pDest++;
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
3400b922:	b162      	cbz	r2, 3400b93e <USB_ReadPacket+0x3e>
  {
    i = 0U;
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
3400b924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400b928:	681c      	ldr	r4, [r3, #0]
    i = 0U;
3400b92a:	2300      	movs	r3, #0

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
3400b92c:	00d9      	lsls	r1, r3, #3
3400b92e:	fa24 f101 	lsr.w	r1, r4, r1
3400b932:	54c1      	strb	r1, [r0, r3]
      i++;
3400b934:	3301      	adds	r3, #1
      pDest++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
3400b936:	b299      	uxth	r1, r3
3400b938:	428a      	cmp	r2, r1
3400b93a:	d1f7      	bne.n	3400b92c <USB_ReadPacket+0x2c>
3400b93c:	4410      	add	r0, r2
  }

  return ((void *)pDest);
}
3400b93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400b940:	6837      	ldr	r7, [r6, #0]
3400b942:	f841 7025 	str.w	r7, [r1, r5, lsl #2]
  for (i = 0U; i < count32b; i++)
3400b946:	3501      	adds	r5, #1
3400b948:	e7e7      	b.n	3400b91a <USB_ReadPacket+0x1a>

3400b94a <USB_EPSetStall>:
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
3400b94a:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
3400b94c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400b94e:	2a01      	cmp	r2, #1
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b950:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
3400b954:	d112      	bne.n	3400b97c <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b956:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
3400b95a:	2a00      	cmp	r2, #0
3400b95c:	db06      	blt.n	3400b96c <USB_EPSetStall+0x22>
3400b95e:	b12b      	cbz	r3, 3400b96c <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
3400b960:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b964:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400b968:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
3400b96c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b970:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400b974:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
  }

  return HAL_OK;
}
3400b978:	2000      	movs	r0, #0
3400b97a:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b97c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b980:	2a00      	cmp	r2, #0
3400b982:	db06      	blt.n	3400b992 <USB_EPSetStall+0x48>
3400b984:	b12b      	cbz	r3, 3400b992 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
3400b986:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b98a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400b98e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
3400b992:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b996:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400b99a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b99e:	e7eb      	b.n	3400b978 <USB_EPSetStall+0x2e>

3400b9a0 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
3400b9a0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
3400b9a2:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
3400b9a4:	4010      	ands	r0, r2
3400b9a6:	4770      	bx	lr

3400b9a8 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400b9a8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400b9ac:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400b9b0:	69c0      	ldr	r0, [r0, #28]
3400b9b2:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
3400b9b4:	0c00      	lsrs	r0, r0, #16
3400b9b6:	4770      	bx	lr

3400b9b8 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400b9b8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400b9bc:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400b9c0:	69c0      	ldr	r0, [r0, #28]
3400b9c2:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
3400b9c4:	b280      	uxth	r0, r0
3400b9c6:	4770      	bx	lr

3400b9c8 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400b9c8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400b9cc:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400b9d0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400b9d4:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
3400b9d6:	4010      	ands	r0, r2
3400b9d8:	4770      	bx	lr

3400b9da <USB_ReadDevInEPInterrupt>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
3400b9da:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
3400b9de:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400b9e2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400b9e6:	f001 010f 	and.w	r1, r1, #15
3400b9ea:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400b9ec:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400b9f0:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400b9f2:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400b9f4:	b2db      	uxtb	r3, r3
3400b9f6:	4313      	orrs	r3, r2

  return tmpreg;
}
3400b9f8:	4018      	ands	r0, r3
3400b9fa:	4770      	bx	lr

3400b9fc <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
3400b9fc:	6940      	ldr	r0, [r0, #20]
}
3400b9fe:	f000 0001 	and.w	r0, r0, #1
3400ba02:	4770      	bx	lr

3400ba04 <USB_ActivateSetup>:
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
3400ba04:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400ba08:	f36f 030a 	bfc	r3, #0, #11
3400ba0c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
3400ba10:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
3400ba14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3400ba18:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804

  return HAL_OK;
}
3400ba1c:	2000      	movs	r0, #0
3400ba1e:	4770      	bx	lr

3400ba20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
3400ba20:	b530      	push	{r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
3400ba22:	6c05      	ldr	r5, [r0, #64]	@ 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400ba24:	4c10      	ldr	r4, [pc, #64]	@ (3400ba68 <USB_EP0_OutStart+0x48>)
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400ba26:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400ba2a:	42a5      	cmp	r5, r4
3400ba2c:	d903      	bls.n	3400ba36 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400ba2e:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
3400ba32:	2c00      	cmp	r4, #0
3400ba34:	db16      	blt.n	3400ba64 <USB_EP0_OutStart+0x44>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
3400ba36:	2400      	movs	r4, #0
3400ba38:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400ba3a:	691c      	ldr	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;

  if (dma == 1U)
3400ba3c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400ba3e:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
3400ba42:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
3400ba44:	691c      	ldr	r4, [r3, #16]
3400ba46:	f044 0418 	orr.w	r4, r4, #24
3400ba4a:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
3400ba4c:	691c      	ldr	r4, [r3, #16]
3400ba4e:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
3400ba52:	611c      	str	r4, [r3, #16]
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
3400ba54:	bf01      	itttt	eq
3400ba56:	615a      	streq	r2, [r3, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
3400ba58:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	@ 0xb00
3400ba5c:	f043 2380 	orreq.w	r3, r3, #2147516416	@ 0x80008000
3400ba60:	f8c0 3b00 	streq.w	r3, [r0, #2816]	@ 0xb00
  }

  return HAL_OK;
}
3400ba64:	2000      	movs	r0, #0
3400ba66:	bd30      	pop	{r4, r5, pc}
3400ba68:	4f54300a 	.word	0x4f54300a

3400ba6c <CMW_CAMERA_GetDCMIPPHandle>:
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
    return &hcamera_dcmipp;
}
3400ba6c:	4800      	ldr	r0, [pc, #0]	@ (3400ba70 <CMW_CAMERA_GetDCMIPPHandle+0x4>)
3400ba6e:	4770      	bx	lr
3400ba70:	34012918 	.word	0x34012918

3400ba74 <CMW_CAMERA_PIPE_VsyncEventCallback>:
/**
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
3400ba74:	2000      	movs	r0, #0
3400ba76:	4770      	bx	lr

3400ba78 <CMW_CAMERA_PIPE_FrameEventCallback>:
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
  UNUSED(pipe);

  return HAL_OK;
}
3400ba78:	2000      	movs	r0, #0
3400ba7a:	4770      	bx	lr

3400ba7c <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
3400ba7c:	4b05      	ldr	r3, [pc, #20]	@ (3400ba94 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x18>)
{
3400ba7e:	b510      	push	{r4, lr}
  if(Camera_Drv.VsyncEventCallback != NULL)
3400ba80:	691b      	ldr	r3, [r3, #16]
{
3400ba82:	460c      	mov	r4, r1
  if(Camera_Drv.VsyncEventCallback != NULL)
3400ba84:	b10b      	cbz	r3, 3400ba8a <HAL_DCMIPP_PIPE_VsyncEventCallback+0xe>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
3400ba86:	4804      	ldr	r0, [pc, #16]	@ (3400ba98 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>)
3400ba88:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
3400ba8a:	4620      	mov	r0, r4
3400ba8c:	f7ff fff2 	bl	3400ba74 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
3400ba90:	bd10      	pop	{r4, pc}
3400ba92:	bf00      	nop
3400ba94:	340128b0 	.word	0x340128b0
3400ba98:	3401276c 	.word	0x3401276c

3400ba9c <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
3400ba9c:	4b05      	ldr	r3, [pc, #20]	@ (3400bab4 <HAL_DCMIPP_PIPE_FrameEventCallback+0x18>)
{
3400ba9e:	b510      	push	{r4, lr}
  if(Camera_Drv.FrameEventCallback != NULL)
3400baa0:	695b      	ldr	r3, [r3, #20]
{
3400baa2:	460c      	mov	r4, r1
  if(Camera_Drv.FrameEventCallback != NULL)
3400baa4:	b10b      	cbz	r3, 3400baaa <HAL_DCMIPP_PIPE_FrameEventCallback+0xe>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
3400baa6:	4804      	ldr	r0, [pc, #16]	@ (3400bab8 <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>)
3400baa8:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
3400baaa:	4620      	mov	r0, r4
3400baac:	f7ff ffe4 	bl	3400ba78 <CMW_CAMERA_PIPE_FrameEventCallback>
}
3400bab0:	bd10      	pop	{r4, pc}
3400bab2:	bf00      	nop
3400bab4:	340128b0 	.word	0x340128b0
3400bab8:	3401276c 	.word	0x3401276c

3400babc <DMA2D_IRQHandler>:
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(dma2d_current);
3400babc:	4b01      	ldr	r3, [pc, #4]	@ (3400bac4 <DMA2D_IRQHandler+0x8>)
3400babe:	6818      	ldr	r0, [r3, #0]
3400bac0:	f7f7 bad8 	b.w	34003074 <HAL_DMA2D_IRQHandler>
3400bac4:	34012924 	.word	0x34012924

3400bac8 <USB1_OTG_HS_IRQHandler>:
  HAL_NVIC_EnableIRQ(USB1_OTG_HS_IRQn);
}

void USB1_OTG_HS_IRQHandler(void)
{
  UVCL_IRQHandler();
3400bac8:	f000 b800 	b.w	3400bacc <UVCL_IRQHandler>

3400bacc <UVCL_IRQHandler>:
void UVCL_IRQHandler()
{
#if defined(UVCL_USBD_USE_THREADX) || defined(UVCL_USBD_USE_FREERTOS)
  UVCL_stm32_usbd_IRQHandler();
#elif defined(UVC_LIB_USE_USBX)
  UVCL_stm32_usbx_IRQHandler();
3400bacc:	f000 b800 	b.w	3400bad0 <UVCL_stm32_usbx_IRQHandler>

3400bad0 <UVCL_stm32_usbx_IRQHandler>:
    __enable_irq();
}
#endif

void UVCL_stm32_usbx_IRQHandler()
{
3400bad0:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&uvcl_pcd_handle);
3400bad2:	4804      	ldr	r0, [pc, #16]	@ (3400bae4 <UVCL_stm32_usbx_IRQHandler+0x14>)
3400bad4:	f7f7 fe4e 	bl	34003774 <HAL_PCD_IRQHandler>
    assert(ret == pdTRUE);
    HAL_NVIC_DisableIRQ(irqn_type);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  }
#else
  ux_system_tasks_run();
3400bad8:	f000 fa76 	bl	3400bfc8 <_ux_system_tasks_run>
  ux_system_tasks_run();
#endif
#endif
}
3400badc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ux_system_tasks_run();
3400bae0:	f000 ba72 	b.w	3400bfc8 <_ux_system_tasks_run>
3400bae4:	34012928 	.word	0x34012928

3400bae8 <HAL_PCD_SetupStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bae8:	4b24      	ldr	r3, [pc, #144]	@ (3400bb7c <HAL_PCD_SetupStageCallback+0x94>)
{
3400baea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400baee:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400baf0:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400baf4:	69dd      	ldr	r5, [r3, #28]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400baf6:	2208      	movs	r2, #8
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
3400baf8:	686c      	ldr	r4, [r5, #4]
{
3400bafa:	4606      	mov	r6, r0
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bafc:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
3400bb00:	f000 fa96 	bl	3400c030 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bb04:	2301      	movs	r3, #1
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bb06:	2200      	movs	r2, #0
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bb08:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bb0a:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bb0c:	63a2      	str	r2, [r4, #56]	@ 0x38
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bb0e:	f023 030e 	bic.w	r3, r3, #14
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bb12:	6462      	str	r2, [r4, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bb14:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
3400bb16:	f994 105c 	ldrsb.w	r1, [r4, #92]	@ 0x5c
3400bb1a:	4291      	cmp	r1, r2
3400bb1c:	da04      	bge.n	3400bb28 <HAL_PCD_SetupStageCallback+0x40>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
3400bb1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb22:	60ab      	str	r3, [r5, #8]
                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
            }
        }
    }
}
3400bb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
3400bb28:	73aa      	strb	r2, [r5, #14]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
3400bb2a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
3400bb2e:	b92a      	cbnz	r2, 3400bb3c <HAL_PCD_SetupStageCallback+0x54>
3400bb30:	f894 2063 	ldrb.w	r2, [r4, #99]	@ 0x63
3400bb34:	b912      	cbnz	r2, 3400bb3c <HAL_PCD_SetupStageCallback+0x54>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3400bb3a:	e7f2      	b.n	3400bb22 <HAL_PCD_SetupStageCallback+0x3a>
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bb3c:	f104 0062 	add.w	r0, r4, #98	@ 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bb40:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bb42:	f000 fa7f 	bl	3400c044 <_ux_utility_short_get>
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bb46:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bb4a:	4603      	mov	r3, r0
3400bb4c:	f04f 0800 	mov.w	r8, #0
3400bb50:	6360      	str	r0, [r4, #52]	@ 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bb52:	d907      	bls.n	3400bb64 <HAL_PCD_SetupStageCallback+0x7c>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
3400bb54:	4639      	mov	r1, r7
3400bb56:	4628      	mov	r0, r5
3400bb58:	f000 f94e 	bl	3400bdf8 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb5c:	68ab      	ldr	r3, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
3400bb5e:	f885 800c 	strb.w	r8, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb62:	e7e8      	b.n	3400bb36 <HAL_PCD_SetupStageCallback+0x4e>
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bb64:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bb66:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bb6a:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Receive(hpcd,
3400bb6c:	4630      	mov	r0, r6
3400bb6e:	7bb9      	ldrb	r1, [r7, #14]
3400bb70:	f7f7 fd75 	bl	3400365e <HAL_PCD_EP_Receive>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
3400bb74:	2302      	movs	r3, #2
3400bb76:	732b      	strb	r3, [r5, #12]
3400bb78:	e7d4      	b.n	3400bb24 <HAL_PCD_SetupStageCallback+0x3c>
3400bb7a:	bf00      	nop
3400bb7c:	34012e0c 	.word	0x34012e0c

3400bb80 <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb80:	4b2e      	ldr	r3, [pc, #184]	@ (3400bc3c <HAL_PCD_DataInStageCallback+0xbc>)
{
3400bb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb86:	681b      	ldr	r3, [r3, #0]
3400bb88:	f001 020f 	and.w	r2, r1, #15
3400bb8c:	69df      	ldr	r7, [r3, #28]
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bb8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
3400bb92:	eb07 0282 	add.w	r2, r7, r2, lsl #2
{
3400bb96:	4606      	mov	r6, r0
3400bb98:	460d      	mov	r5, r1
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bb9a:	6854      	ldr	r4, [r2, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400bb9c:	2900      	cmp	r1, #0
3400bb9e:	d13b      	bne.n	3400bc18 <HAL_PCD_DataInStageCallback+0x98>

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
3400bba0:	7b3b      	ldrb	r3, [r7, #12]
3400bba2:	2b01      	cmp	r3, #1
3400bba4:	d115      	bne.n	3400bbd2 <HAL_PCD_DataInStageCallback+0x52>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bba6:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
3400bbaa:	460b      	mov	r3, r1
3400bbac:	460a      	mov	r2, r1
3400bbae:	f7f7 fd56 	bl	3400365e <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
3400bbb2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400bbb4:	f8b8 0010 	ldrh.w	r0, [r8, #16]
3400bbb8:	4281      	cmp	r1, r0
3400bbba:	d81d      	bhi.n	3400bbf8 <HAL_PCD_DataInStageCallback+0x78>
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
3400bbbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400bbbe:	2b01      	cmp	r3, #1
3400bbc0:	d109      	bne.n	3400bbd6 <HAL_PCD_DataInStageCallback+0x56>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
3400bbc2:	462b      	mov	r3, r5
3400bbc4:	462a      	mov	r2, r5
3400bbc6:	4630      	mov	r0, r6
3400bbc8:	f898 100e 	ldrb.w	r1, [r8, #14]
3400bbcc:	f7f7 fd6d 	bl	340036aa <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400bbd0:	65a5      	str	r5, [r4, #88]	@ 0x58
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
3400bbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bbd6:	2302      	movs	r3, #2
3400bbd8:	6223      	str	r3, [r4, #32]
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400bbda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bbdc:	6465      	str	r5, [r4, #68]	@ 0x44
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400bbde:	63a3      	str	r3, [r4, #56]	@ 0x38
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bbe0:	68bb      	ldr	r3, [r7, #8]
3400bbe2:	f043 0308 	orr.w	r3, r3, #8
3400bbe6:	60bb      	str	r3, [r7, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
3400bbe8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400bbea:	b113      	cbz	r3, 3400bbf2 <HAL_PCD_DataInStageCallback+0x72>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bbec:	f104 0020 	add.w	r0, r4, #32
3400bbf0:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
3400bbf2:	2304      	movs	r3, #4
3400bbf4:	733b      	strb	r3, [r7, #12]
3400bbf6:	e7ec      	b.n	3400bbd2 <HAL_PCD_DataInStageCallback+0x52>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bbf8:	1a0b      	subs	r3, r1, r0
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
3400bbfa:	4283      	cmp	r3, r0
3400bbfc:	bf28      	it	cs
3400bbfe:	4603      	movcs	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc00:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400bc02:	1ac9      	subs	r1, r1, r3
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc04:	4402      	add	r2, r0
                HAL_PCD_EP_Transmit(hpcd,
3400bc06:	4630      	mov	r0, r6
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc08:	6322      	str	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400bc0a:	63e1      	str	r1, [r4, #60]	@ 0x3c
                HAL_PCD_EP_Transmit(hpcd,
3400bc0c:	f898 100e 	ldrb.w	r1, [r8, #14]
}
3400bc10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bc14:	f7f7 bd49 	b.w	340036aa <HAL_PCD_EP_Transmit>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400bc18:	6da6      	ldr	r6, [r4, #88]	@ 0x58
3400bc1a:	2300      	movs	r3, #0
            transfer_request -> ux_slave_transfer_request_requested_length)
3400bc1c:	6b65      	ldr	r5, [r4, #52]	@ 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400bc1e:	b126      	cbz	r6, 3400bc2a <HAL_PCD_DataInStageCallback+0xaa>
3400bc20:	b11d      	cbz	r5, 3400bc2a <HAL_PCD_DataInStageCallback+0xaa>
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bc22:	461a      	mov	r2, r3
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400bc24:	65a3      	str	r3, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
3400bc26:	63e3      	str	r3, [r4, #60]	@ 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bc28:	e7f2      	b.n	3400bc10 <HAL_PCD_DataInStageCallback+0x90>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bc2a:	6463      	str	r3, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bc2c:	2302      	movs	r3, #2
3400bc2e:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bc30:	6893      	ldr	r3, [r2, #8]
            transfer_request -> ux_slave_transfer_request_actual_length =
3400bc32:	63a5      	str	r5, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bc34:	f043 0308 	orr.w	r3, r3, #8
3400bc38:	6093      	str	r3, [r2, #8]
}
3400bc3a:	e7ca      	b.n	3400bbd2 <HAL_PCD_DataInStageCallback+0x52>
3400bc3c:	34012e0c 	.word	0x34012e0c

3400bc40 <HAL_PCD_DataOutStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bc40:	4a23      	ldr	r2, [pc, #140]	@ (3400bcd0 <HAL_PCD_DataOutStageCallback+0x90>)
{
3400bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bc46:	6812      	ldr	r2, [r2, #0]
3400bc48:	f001 050f 	and.w	r5, r1, #15
3400bc4c:	69d6      	ldr	r6, [r2, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bc4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3400bc52:	eb06 0585 	add.w	r5, r6, r5, lsl #2
{
3400bc56:	4607      	mov	r7, r0
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bc58:	686c      	ldr	r4, [r5, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400bc5a:	bb61      	cbnz	r1, 3400bcb6 <HAL_PCD_DataOutStageCallback+0x76>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
3400bc5c:	7b33      	ldrb	r3, [r6, #12]
3400bc5e:	2b02      	cmp	r3, #2
3400bc60:	d110      	bne.n	3400bc84 <HAL_PCD_DataOutStageCallback+0x44>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
3400bc62:	6aa5      	ldr	r5, [r4, #40]	@ 0x28

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400bc64:	f7f7 fd19 	bl	3400369a <HAL_PCD_EP_GetRxCount>

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400bc68:	6ba3      	ldr	r3, [r4, #56]	@ 0x38

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
                transfer_request -> ux_slave_transfer_request_requested_length)
3400bc6a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400bc6c:	4403      	add	r3, r0
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400bc6e:	4293      	cmp	r3, r2
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400bc70:	63a3      	str	r3, [r4, #56]	@ 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400bc72:	d812      	bhi.n	3400bc9a <HAL_PCD_DataOutStageCallback+0x5a>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
3400bc74:	d002      	beq.n	3400bc7c <HAL_PCD_DataOutStageCallback+0x3c>
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
3400bc76:	8a2b      	ldrh	r3, [r5, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
3400bc78:	4283      	cmp	r3, r0
3400bc7a:	d005      	beq.n	3400bc88 <HAL_PCD_DataOutStageCallback+0x48>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
3400bc7c:	68b3      	ldr	r3, [r6, #8]
3400bc7e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
3400bc82:	60b3      	str	r3, [r6, #8]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
3400bc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc88:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400bc8a:	4638      	mov	r0, r7
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc8c:	441a      	add	r2, r3
3400bc8e:	6322      	str	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400bc90:	7ba9      	ldrb	r1, [r5, #14]
}
3400bc92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    HAL_PCD_EP_Receive(hpcd,
3400bc96:	f7f7 bce2 	b.w	3400365e <HAL_PCD_EP_Receive>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
3400bc9a:	2327      	movs	r3, #39	@ 0x27
3400bc9c:	6463      	str	r3, [r4, #68]	@ 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bc9e:	68b3      	ldr	r3, [r6, #8]
3400bca0:	f043 0308 	orr.w	r3, r3, #8
3400bca4:	60b3      	str	r3, [r6, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
3400bca6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400bca8:	2b00      	cmp	r3, #0
3400bcaa:	d0eb      	beq.n	3400bc84 <HAL_PCD_DataOutStageCallback+0x44>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bcac:	f104 0020 	add.w	r0, r4, #32
}
3400bcb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bcb4:	4718      	bx	r3
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400bcb6:	f7f7 fcf0 	bl	3400369a <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bcba:	2300      	movs	r3, #0
3400bcbc:	6463      	str	r3, [r4, #68]	@ 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bcbe:	2302      	movs	r3, #2
3400bcc0:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bcc2:	68ab      	ldr	r3, [r5, #8]
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400bcc4:	63a0      	str	r0, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bcc6:	f043 0308 	orr.w	r3, r3, #8
3400bcca:	60ab      	str	r3, [r5, #8]
}
3400bccc:	e7da      	b.n	3400bc84 <HAL_PCD_DataOutStageCallback+0x44>
3400bcce:	bf00      	nop
3400bcd0:	34012e0c 	.word	0x34012e0c

3400bcd4 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
3400bcd4:	b538      	push	{r3, r4, r5, lr}

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bcd6:	4c0a      	ldr	r4, [pc, #40]	@ (3400bd00 <HAL_PCD_ResetCallback+0x2c>)
{
3400bcd8:	4605      	mov	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bcda:	6823      	ldr	r3, [r4, #0]
3400bcdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400bcde:	b10b      	cbz	r3, 3400bce4 <HAL_PCD_ResetCallback+0x10>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
3400bce0:	f000 f902 	bl	3400bee8 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
3400bce4:	79ea      	ldrb	r2, [r5, #7]
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400bce6:	6823      	ldr	r3, [r4, #0]
    switch(hpcd -> Init.speed)
3400bce8:	2a00      	cmp	r2, #0
3400bcea:	bf0c      	ite	eq
3400bcec:	2202      	moveq	r2, #2
3400bcee:	2201      	movne	r2, #1
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400bcf0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
3400bcf4:	f000 f88e 	bl	3400be14 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400bcf8:	2201      	movs	r2, #1
3400bcfa:	6823      	ldr	r3, [r4, #0]
3400bcfc:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400bcfe:	bd38      	pop	{r3, r4, r5, pc}
3400bd00:	34012e0c 	.word	0x34012e0c

3400bd04 <HAL_PCD_ConnectCallback>:
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd04:	4b03      	ldr	r3, [pc, #12]	@ (3400bd14 <HAL_PCD_ConnectCallback+0x10>)
3400bd06:	681b      	ldr	r3, [r3, #0]
3400bd08:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd0c:	b10b      	cbz	r3, 3400bd12 <HAL_PCD_ConnectCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
3400bd0e:	20f1      	movs	r0, #241	@ 0xf1
3400bd10:	4718      	bx	r3
    }
}
3400bd12:	4770      	bx	lr
3400bd14:	34012e0c 	.word	0x34012e0c

3400bd18 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
3400bd18:	b510      	push	{r4, lr}

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd1a:	4c07      	ldr	r4, [pc, #28]	@ (3400bd38 <HAL_PCD_DisconnectCallback+0x20>)
3400bd1c:	6823      	ldr	r3, [r4, #0]
3400bd1e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd22:	b10b      	cbz	r3, 3400bd28 <HAL_PCD_DisconnectCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
3400bd24:	20f2      	movs	r0, #242	@ 0xf2
3400bd26:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bd28:	6823      	ldr	r3, [r4, #0]
3400bd2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400bd2c:	b11b      	cbz	r3, 3400bd36 <HAL_PCD_DisconnectCallback+0x1e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
    }
}
3400bd2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _ux_device_stack_disconnect();
3400bd32:	f000 b8d9 	b.w	3400bee8 <_ux_device_stack_disconnect>
}
3400bd36:	bd10      	pop	{r4, pc}
3400bd38:	34012e0c 	.word	0x34012e0c

3400bd3c <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd3c:	4b03      	ldr	r3, [pc, #12]	@ (3400bd4c <HAL_PCD_SuspendCallback+0x10>)
3400bd3e:	681b      	ldr	r3, [r3, #0]
3400bd40:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd44:	b10b      	cbz	r3, 3400bd4a <HAL_PCD_SuspendCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
3400bd46:	20f4      	movs	r0, #244	@ 0xf4
3400bd48:	4718      	bx	r3
    }
}
3400bd4a:	4770      	bx	lr
3400bd4c:	34012e0c 	.word	0x34012e0c

3400bd50 <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd50:	4b03      	ldr	r3, [pc, #12]	@ (3400bd60 <HAL_PCD_ResumeCallback+0x10>)
3400bd52:	681b      	ldr	r3, [r3, #0]
3400bd54:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd58:	b10b      	cbz	r3, 3400bd5e <HAL_PCD_ResumeCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
3400bd5a:	20f3      	movs	r0, #243	@ 0xf3
3400bd5c:	4718      	bx	r3
    }
}
3400bd5e:	4770      	bx	lr
3400bd60:	34012e0c 	.word	0x34012e0c

3400bd64 <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd64:	4b03      	ldr	r3, [pc, #12]	@ (3400bd74 <HAL_PCD_SOFCallback+0x10>)
3400bd66:	681b      	ldr	r3, [r3, #0]
3400bd68:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd6c:	b10b      	cbz	r3, 3400bd72 <HAL_PCD_SOFCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
3400bd6e:	20f0      	movs	r0, #240	@ 0xf0
3400bd70:	4718      	bx	r3
    }
}
3400bd72:	4770      	bx	lr
3400bd74:	34012e0c 	.word	0x34012e0c

3400bd78 <HAL_PCD_ISOINIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bd78:	4b0e      	ldr	r3, [pc, #56]	@ (3400bdb4 <HAL_PCD_ISOINIncompleteCallback+0x3c>)
3400bd7a:	f001 010f 	and.w	r1, r1, #15
3400bd7e:	681b      	ldr	r3, [r3, #0]
3400bd80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400bd84:	69d8      	ldr	r0, [r3, #28]
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
#else
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0U)
3400bd86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400bd8a:	688b      	ldr	r3, [r1, #8]
3400bd8c:	07db      	lsls	r3, r3, #31
3400bd8e:	d50f      	bpl.n	3400bdb0 <HAL_PCD_ISOINIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400bd90:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bd92:	7bd3      	ldrb	r3, [r2, #15]
3400bd94:	f003 0303 	and.w	r3, r3, #3
3400bd98:	2b01      	cmp	r3, #1
3400bd9a:	d109      	bne.n	3400bdb0 <HAL_PCD_ISOINIncompleteCallback+0x38>
3400bd9c:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != 0)
3400bda0:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bda2:	2b00      	cmp	r3, #0
3400bda4:	da04      	bge.n	3400bdb0 <HAL_PCD_ISOINIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
3400bda6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400bda8:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400bdaa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400bdac:	f7f7 bc7d 	b.w	340036aa <HAL_PCD_EP_Transmit>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400bdb0:	4770      	bx	lr
3400bdb2:	bf00      	nop
3400bdb4:	34012e0c 	.word	0x34012e0c

3400bdb8 <HAL_PCD_ISOOUTIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bdb8:	4b0e      	ldr	r3, [pc, #56]	@ (3400bdf4 <HAL_PCD_ISOOUTIncompleteCallback+0x3c>)
3400bdba:	f001 010f 	and.w	r1, r1, #15
3400bdbe:	681b      	ldr	r3, [r3, #0]
3400bdc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400bdc4:	69d8      	ldr	r0, [r3, #28]

    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
3400bdc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400bdca:	688b      	ldr	r3, [r1, #8]
3400bdcc:	07db      	lsls	r3, r3, #31
3400bdce:	d50f      	bpl.n	3400bdf0 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400bdd0:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bdd2:	7bd3      	ldrb	r3, [r2, #15]
3400bdd4:	f003 0303 	and.w	r3, r3, #3
3400bdd8:	2b01      	cmp	r3, #1
3400bdda:	d109      	bne.n	3400bdf0 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
3400bddc:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == 0)
3400bde0:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bde2:	2b00      	cmp	r3, #0
3400bde4:	db04      	blt.n	3400bdf0 <HAL_PCD_ISOOUTIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
3400bde6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400bde8:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400bdea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400bdec:	f7f7 bc37 	b.w	3400365e <HAL_PCD_EP_Receive>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400bdf0:	4770      	bx	lr
3400bdf2:	bf00      	nop
3400bdf4:	34012e0c 	.word	0x34012e0c

3400bdf8 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
3400bdf8:	b508      	push	{r3, lr}

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
3400bdfa:	688b      	ldr	r3, [r1, #8]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400bdfc:	6f00      	ldr	r0, [r0, #112]	@ 0x70
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
3400bdfe:	685a      	ldr	r2, [r3, #4]
3400be00:	f042 0204 	orr.w	r2, r2, #4
3400be04:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400be06:	7b89      	ldrb	r1, [r1, #14]
3400be08:	7a9b      	ldrb	r3, [r3, #10]
3400be0a:	4319      	orrs	r1, r3
3400be0c:	f7f7 fc67 	bl	340036de <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
3400be10:	2000      	movs	r0, #0
3400be12:	bd08      	pop	{r3, pc}

3400be14 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
3400be14:	b570      	push	{r4, r5, r6, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400be16:	4e32      	ldr	r6, [pc, #200]	@ (3400bee0 <_ux_dcd_stm32_initialize_complete+0xcc>)
3400be18:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400be1a:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400be1e:	69e5      	ldr	r5, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400be20:	2b01      	cmp	r3, #1
3400be22:	d147      	bne.n	3400beb4 <_ux_dcd_stm32_initialize_complete+0xa0>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
3400be24:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
3400be28:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400be2c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
3400be30:	220e      	movs	r2, #14
3400be32:	492c      	ldr	r1, [pc, #176]	@ (3400bee4 <_ux_dcd_stm32_initialize_complete+0xd0>)
3400be34:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400be38:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
    _ux_utility_descriptor_parse(device_framework,
3400be3c:	f104 0328 	add.w	r3, r4, #40	@ 0x28
3400be40:	f000 f8c7 	bl	3400bfd2 <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
3400be44:	f242 7310 	movw	r3, #10000	@ 0x2710
3400be48:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400be4c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
                            transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400be4e:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400be52:	66e3      	str	r3, [r4, #108]	@ 0x6c

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400be54:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400be58:	6662      	str	r2, [r4, #100]	@ 0x64

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400be5a:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400be5c:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400be60:	6723      	str	r3, [r4, #112]	@ 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400be62:	4620      	mov	r0, r4
3400be64:	69a3      	ldr	r3, [r4, #24]
3400be66:	4798      	blx	r3
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
3400be68:	2100      	movs	r1, #0
3400be6a:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400be6c:	f7f7 ffe8 	bl	34003e40 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400be70:	2300      	movs	r3, #0
3400be72:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400be76:	4619      	mov	r1, r3
3400be78:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400be7a:	f7f7 fbb7 	bl	340035ec <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
3400be7e:	2180      	movs	r1, #128	@ 0x80
3400be80:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400be82:	f7f7 ffdd 	bl	34003e40 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400be86:	2300      	movs	r3, #0
3400be88:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400be8c:	2180      	movs	r1, #128	@ 0x80
3400be8e:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400be90:	f7f7 fbac 	bl	340035ec <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400be94:	2300      	movs	r3, #0

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400be96:	2208      	movs	r2, #8
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400be98:	2001      	movs	r0, #1
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400be9a:	e9c4 321d 	strd	r3, r2, [r4, #116]	@ 0x74
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400be9e:	6423      	str	r3, [r4, #64]	@ 0x40

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bea0:	6833      	ldr	r3, [r6, #0]
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
3400bea2:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bea6:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400beaa:	6722      	str	r2, [r4, #112]	@ 0x70
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400beac:	b103      	cbz	r3, 3400beb0 <_ux_dcd_stm32_initialize_complete+0x9c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
3400beae:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
3400beb0:	2000      	movs	r0, #0
3400beb2:	bd70      	pop	{r4, r5, r6, pc}
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
3400beb4:	2300      	movs	r3, #0
3400beb6:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
3400beba:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400bebe:	2b01      	cmp	r3, #1
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400bec0:	bf0b      	itete	eq
3400bec2:	f8d4 30d4 	ldreq.w	r3, [r4, #212]	@ 0xd4
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400bec6:	f8d4 30dc 	ldrne.w	r3, [r4, #220]	@ 0xdc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400beca:	f8c4 30cc 	streq.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400bece:	f8c4 30cc 	strne.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
3400bed2:	bf0c      	ite	eq
3400bed4:	f8d4 30d8 	ldreq.w	r3, [r4, #216]	@ 0xd8
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
3400bed8:	f8d4 30e0 	ldrne.w	r3, [r4, #224]	@ 0xe0
3400bedc:	e7a8      	b.n	3400be30 <_ux_dcd_stm32_initialize_complete+0x1c>
3400bede:	bf00      	nop
3400bee0:	34012e0c 	.word	0x34012e0c
3400bee4:	340123a8 	.word	0x340123a8

3400bee8 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
3400bee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400beec:	4f19      	ldr	r7, [pc, #100]	@ (3400bf54 <_ux_device_stack_disconnect+0x6c>)
{
3400beee:	b08c      	sub	sp, #48	@ 0x30
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400bef0:	683c      	ldr	r4, [r7, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
3400bef2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
3400bef4:	2e03      	cmp	r6, #3
3400bef6:	d128      	bne.n	3400bf4a <_ux_device_stack_disconnect+0x62>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
3400bef8:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
3400befc:	b9b5      	cbnz	r5, 3400bf2c <_ux_device_stack_disconnect+0x44>
            interface_ptr =  next_interface;
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400befe:	2301      	movs	r3, #1
3400bf00:	6263      	str	r3, [r4, #36]	@ 0x24

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
3400bf02:	210f      	movs	r1, #15
3400bf04:	4620      	mov	r0, r4
3400bf06:	69a3      	ldr	r3, [r4, #24]
3400bf08:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
3400bf0c:	4798      	blx	r3
3400bf0e:	4605      	mov	r5, r0
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
3400bf10:	2300      	movs	r3, #0
3400bf12:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
3400bf16:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bf18:	683b      	ldr	r3, [r7, #0]
3400bf1a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bf1e:	b10b      	cbz	r3, 3400bf24 <_ux_device_stack_disconnect+0x3c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
3400bf20:	200a      	movs	r0, #10
3400bf22:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
3400bf24:	4628      	mov	r0, r5
3400bf26:	b00c      	add	sp, #48	@ 0x30
3400bf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            class_ptr =  interface_ptr -> ux_slave_interface_class;
3400bf2c:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
3400bf2e:	9601      	str	r6, [sp, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
3400bf30:	9503      	str	r5, [sp, #12]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
3400bf32:	9309      	str	r3, [sp, #36]	@ 0x24
            if (class_ptr != UX_NULL)
3400bf34:	b113      	cbz	r3, 3400bf3c <_ux_device_stack_disconnect+0x54>
                class_ptr -> ux_slave_class_entry_function(&class_command);
3400bf36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400bf38:	a801      	add	r0, sp, #4
3400bf3a:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bf3c:	f8d5 8018 	ldr.w	r8, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
3400bf40:	4628      	mov	r0, r5
3400bf42:	f000 f809 	bl	3400bf58 <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
3400bf46:	4645      	mov	r5, r8
3400bf48:	e7d8      	b.n	3400befc <_ux_device_stack_disconnect+0x14>
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
3400bf4a:	2e01      	cmp	r6, #1
3400bf4c:	d0d9      	beq.n	3400bf02 <_ux_device_stack_disconnect+0x1a>
UINT                        status = UX_ERROR;
3400bf4e:	25ff      	movs	r5, #255	@ 0xff
3400bf50:	e7de      	b.n	3400bf10 <_ux_device_stack_disconnect+0x28>
3400bf52:	bf00      	nop
3400bf54:	34012e0c 	.word	0x34012e0c

3400bf58 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
3400bf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400bf5c:	4605      	mov	r5, r0

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
3400bf5e:	2600      	movs	r6, #0
    device =  &_ux_system_slave -> ux_system_slave_device;
3400bf60:	4f0e      	ldr	r7, [pc, #56]	@ (3400bf9c <_ux_device_stack_interface_delete+0x44>)
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
3400bf62:	69c4      	ldr	r4, [r0, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
3400bf64:	f8d7 8000 	ldr.w	r8, [r7]
    while (next_endpoint != UX_NULL)
3400bf68:	b954      	cbnz	r4, 3400bf80 <_ux_device_stack_interface_delete+0x28>
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bf6a:	69ab      	ldr	r3, [r5, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
3400bf6c:	4620      	mov	r0, r4
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bf6e:	f8c8 30b4 	str.w	r3, [r8, #180]	@ 0xb4
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
3400bf72:	e9c5 4401 	strd	r4, r4, [r5, #4]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
3400bf76:	e9c5 4406 	strd	r4, r4, [r5, #24]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
3400bf7a:	602c      	str	r4, [r5, #0]
}
3400bf7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
3400bf80:	6838      	ldr	r0, [r7, #0]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400bf82:	f8d4 9014 	ldr.w	r9, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
3400bf86:	4622      	mov	r2, r4
3400bf88:	210f      	movs	r1, #15
3400bf8a:	6983      	ldr	r3, [r0, #24]
3400bf8c:	4798      	blx	r3
        endpoint -> ux_slave_endpoint_state =  0;
3400bf8e:	e9c4 6600 	strd	r6, r6, [r4]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
3400bf92:	e9c4 6605 	strd	r6, r6, [r4, #20]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
3400bf96:	61e6      	str	r6, [r4, #28]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400bf98:	464c      	mov	r4, r9
3400bf9a:	e7e5      	b.n	3400bf68 <_ux_device_stack_interface_delete+0x10>
3400bf9c:	34012e0c 	.word	0x34012e0c

3400bfa0 <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
3400bfa0:	b510      	push	{r4, lr}


    status = UX_STATE_RESET;

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400bfa2:	4c08      	ldr	r4, [pc, #32]	@ (3400bfc4 <_ux_device_stack_tasks_run+0x24>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400bfa4:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400bfa6:	6820      	ldr	r0, [r4, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400bfa8:	2112      	movs	r1, #18
3400bfaa:	6983      	ldr	r3, [r0, #24]
3400bfac:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400bfae:	6823      	ldr	r3, [r4, #0]
    status = UX_STATE_RESET;
3400bfb0:	2000      	movs	r0, #0
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400bfb2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
3400bfb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400bfb8:	b11a      	cbz	r2, 3400bfc2 <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
3400bfba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400bfbc:	b10a      	cbz	r2, 3400bfc2 <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
3400bfbe:	6c98      	ldr	r0, [r3, #72]	@ 0x48
3400bfc0:	4790      	blx	r2
        class_instance ++;
    }

    /* Return overall status.  */
    return(status);
}
3400bfc2:	bd10      	pop	{r4, pc}
3400bfc4:	34012e0c 	.word	0x34012e0c

3400bfc8 <_ux_system_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_tasks_run(VOID)
{
3400bfc8:	b508      	push	{r3, lr}
#if defined(UX_DEVICE_STANDALONE) && !defined(UX_HOST_SIDE_ONLY)
    _ux_device_stack_tasks_run();
3400bfca:	f7ff ffe9 	bl	3400bfa0 <_ux_device_stack_tasks_run>
    _ux_otg_tasks_run();
#endif

   /* Return code not used now.  */
   return(0);
}
3400bfce:	2000      	movs	r0, #0
3400bfd0:	bd08      	pop	{r3, pc}

3400bfd2 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
3400bfd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400bfd6:	4605      	mov	r5, r0
3400bfd8:	460e      	mov	r6, r1
3400bfda:	461c      	mov	r4, r3
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
                *descriptor++ =  0;
3400bfdc:	f04f 0800 	mov.w	r8, #0
3400bfe0:	188f      	adds	r7, r1, r2
    while(descriptor_entries--)
3400bfe2:	42be      	cmp	r6, r7
3400bfe4:	d101      	bne.n	3400bfea <_ux_utility_descriptor_parse+0x18>
        }
    }

    /* Return to caller.  */
    return;
}
3400bfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(*descriptor_structure++)
3400bfea:	f816 3b01 	ldrb.w	r3, [r6], #1
3400bfee:	2b02      	cmp	r3, #2
3400bff0:	d013      	beq.n	3400c01a <_ux_utility_descriptor_parse+0x48>
3400bff2:	2b04      	cmp	r3, #4
3400bff4:	d006      	beq.n	3400c004 <_ux_utility_descriptor_parse+0x32>
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
3400bff6:	f815 3b01 	ldrb.w	r3, [r5], #1
3400bffa:	f804 3b01 	strb.w	r3, [r4], #1
            descriptor ++;
3400bffe:	e7f0      	b.n	3400bfe2 <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c000:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 3u)
3400c004:	07a2      	lsls	r2, r4, #30
3400c006:	d1fb      	bne.n	3400c000 <_ux_utility_descriptor_parse+0x2e>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c008:	4628      	mov	r0, r5
3400c00a:	f000 f80f 	bl	3400c02c <_ux_utility_long_get>
            raw_descriptor +=  4;
3400c00e:	3504      	adds	r5, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c010:	f844 0b04 	str.w	r0, [r4], #4
            break;
3400c014:	e7e5      	b.n	3400bfe2 <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c016:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 1u)
3400c01a:	07e3      	lsls	r3, r4, #31
3400c01c:	d4fb      	bmi.n	3400c016 <_ux_utility_descriptor_parse+0x44>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c01e:	4628      	mov	r0, r5
3400c020:	f000 f810 	bl	3400c044 <_ux_utility_short_get>
            raw_descriptor += 2;
3400c024:	3502      	adds	r5, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c026:	f824 0b02 	strh.w	r0, [r4], #2
            break;
3400c02a:	e7da      	b.n	3400bfe2 <_ux_utility_descriptor_parse+0x10>

3400c02c <_ux_utility_long_get>:
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;

    /* Return 32-bit value.  */
    return(value);
}
3400c02c:	6800      	ldr	r0, [r0, #0]
3400c02e:	4770      	bx	lr

3400c030 <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
3400c030:	3801      	subs	r0, #1
3400c032:	3201      	adds	r2, #1
3400c034:	3a01      	subs	r2, #1
3400c036:	d100      	bne.n	3400c03a <_ux_utility_memory_copy+0xa>
        *destination++ =  *source++;
    }

    /* Return to caller.  */
    return; 
}
3400c038:	4770      	bx	lr
        *destination++ =  *source++;
3400c03a:	f811 3b01 	ldrb.w	r3, [r1], #1
3400c03e:	f800 3f01 	strb.w	r3, [r0, #1]!
3400c042:	e7f7      	b.n	3400c034 <_ux_utility_memory_copy+0x4>

3400c044 <_ux_utility_short_get>:
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);

    /* Return to caller.  */
    return((ULONG) value);
}
3400c044:	8800      	ldrh	r0, [r0, #0]
3400c046:	4770      	bx	lr

3400c048 <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
3400c048:	b510      	push	{r4, lr}
  if (done != 0)
3400c04a:	4ba3      	ldr	r3, [pc, #652]	@ (3400c2d8 <LL_ATON_Init+0x290>)
{
3400c04c:	b088      	sub	sp, #32
  if (done != 0)
3400c04e:	781a      	ldrb	r2, [r3, #0]
3400c050:	b90a      	cbnz	r2, 3400c056 <LL_ATON_Init+0xe>
  done = 1;
3400c052:	2201      	movs	r2, #1
3400c054:	701a      	strb	r2, [r3, #0]
  int i;

  ll_aton_static_checks();

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
3400c056:	4ba1      	ldr	r3, [pc, #644]	@ (3400c2dc <LL_ATON_Init+0x294>)
3400c058:	681a      	ldr	r2, [r3, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
3400c05a:	f042 0202 	orr.w	r2, r2, #2
  ATON_CLKCTRL_CTRL_SET(0, t);
3400c05e:	601a      	str	r2, [r3, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
3400c060:	2201      	movs	r2, #1
3400c062:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
3400c064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400c068:	609a      	str	r2, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
3400c06a:	60da      	str	r2, [r3, #12]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
3400c06c:	2200      	movs	r2, #0
3400c06e:	611a      	str	r2, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c070:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
3400c074:	685c      	ldr	r4, [r3, #4]
3400c076:	2c00      	cmp	r4, #0
3400c078:	d0fc      	beq.n	3400c074 <LL_ATON_Init+0x2c>
3400c07a:	f245 0301 	movw	r3, #20481	@ 0x5001
3400c07e:	b2a2      	uxth	r2, r4
3400c080:	429a      	cmp	r2, r3
3400c082:	f040 8092 	bne.w	3400c1aa <LL_ATON_Init+0x162>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c086:	4b96      	ldr	r3, [pc, #600]	@ (3400c2e0 <LL_ATON_Init+0x298>)
3400c088:	685c      	ldr	r4, [r3, #4]
3400c08a:	2c00      	cmp	r4, #0
3400c08c:	d0fc      	beq.n	3400c088 <LL_ATON_Init+0x40>
3400c08e:	f245 1317 	movw	r3, #20759	@ 0x5117
3400c092:	b2a2      	uxth	r2, r4
3400c094:	429a      	cmp	r2, r3
3400c096:	f040 80b0 	bne.w	3400c1fa <LL_ATON_Init+0x1b2>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c09a:	4b92      	ldr	r3, [pc, #584]	@ (3400c2e4 <LL_ATON_Init+0x29c>)
3400c09c:	685c      	ldr	r4, [r3, #4]
3400c09e:	2c00      	cmp	r4, #0
3400c0a0:	d0fc      	beq.n	3400c09c <LL_ATON_Init+0x54>
3400c0a2:	f241 131c 	movw	r3, #4380	@ 0x111c
3400c0a6:	b2a2      	uxth	r2, r4
3400c0a8:	429a      	cmp	r2, r3
3400c0aa:	f040 80cc 	bne.w	3400c246 <LL_ATON_Init+0x1fe>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c0ae:	4b8e      	ldr	r3, [pc, #568]	@ (3400c2e8 <LL_ATON_Init+0x2a0>)
3400c0b0:	685c      	ldr	r4, [r3, #4]
3400c0b2:	2c00      	cmp	r4, #0
3400c0b4:	d0fc      	beq.n	3400c0b0 <LL_ATON_Init+0x68>
3400c0b6:	f241 031a 	movw	r3, #4122	@ 0x101a
3400c0ba:	b2a2      	uxth	r2, r4
3400c0bc:	429a      	cmp	r2, r3
3400c0be:	f040 80e6 	bne.w	3400c28e <LL_ATON_Init+0x246>
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c0c2:	4b8a      	ldr	r3, [pc, #552]	@ (3400c2ec <LL_ATON_Init+0x2a4>)
3400c0c4:	685c      	ldr	r4, [r3, #4]
3400c0c6:	2c00      	cmp	r4, #0
3400c0c8:	d0fc      	beq.n	3400c0c4 <LL_ATON_Init+0x7c>
3400c0ca:	f241 131b 	movw	r3, #4379	@ 0x111b
3400c0ce:	b2a2      	uxth	r2, r4
3400c0d0:	429a      	cmp	r2, r3
3400c0d2:	f040 812d 	bne.w	3400c330 <LL_ATON_Init+0x2e8>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c0d6:	4b86      	ldr	r3, [pc, #536]	@ (3400c2f0 <LL_ATON_Init+0x2a8>)
3400c0d8:	685c      	ldr	r4, [r3, #4]
3400c0da:	2c00      	cmp	r4, #0
3400c0dc:	d0fc      	beq.n	3400c0d8 <LL_ATON_Init+0x90>
3400c0de:	f641 2319 	movw	r3, #6681	@ 0x1a19
3400c0e2:	b2a2      	uxth	r2, r4
3400c0e4:	429a      	cmp	r2, r3
3400c0e6:	f040 8147 	bne.w	3400c378 <LL_ATON_Init+0x330>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c0ea:	4b82      	ldr	r3, [pc, #520]	@ (3400c2f4 <LL_ATON_Init+0x2ac>)
3400c0ec:	685c      	ldr	r4, [r3, #4]
3400c0ee:	2c00      	cmp	r4, #0
3400c0f0:	d0fc      	beq.n	3400c0ec <LL_ATON_Init+0xa4>
3400c0f2:	f241 1321 	movw	r3, #4385	@ 0x1121
3400c0f6:	b2a2      	uxth	r2, r4
3400c0f8:	429a      	cmp	r2, r3
3400c0fa:	f040 8162 	bne.w	3400c3c2 <LL_ATON_Init+0x37a>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c0fe:	4b7e      	ldr	r3, [pc, #504]	@ (3400c2f8 <LL_ATON_Init+0x2b0>)
3400c100:	685c      	ldr	r4, [r3, #4]
3400c102:	2c00      	cmp	r4, #0
3400c104:	d0fc      	beq.n	3400c100 <LL_ATON_Init+0xb8>
3400c106:	f243 2320 	movw	r3, #12832	@ 0x3220
3400c10a:	b2a2      	uxth	r2, r4
3400c10c:	429a      	cmp	r2, r3
3400c10e:	f040 817c 	bne.w	3400c40a <LL_ATON_Init+0x3c2>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c112:	4b72      	ldr	r3, [pc, #456]	@ (3400c2dc <LL_ATON_Init+0x294>)
3400c114:	685c      	ldr	r4, [r3, #4]
3400c116:	2c00      	cmp	r4, #0
3400c118:	d0fc      	beq.n	3400c114 <LL_ATON_Init+0xcc>
3400c11a:	f241 231f 	movw	r3, #4639	@ 0x121f
3400c11e:	b2a2      	uxth	r2, r4
3400c120:	429a      	cmp	r2, r3
3400c122:	f040 8198 	bne.w	3400c456 <LL_ATON_Init+0x40e>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c126:	4b75      	ldr	r3, [pc, #468]	@ (3400c2fc <LL_ATON_Init+0x2b4>)
3400c128:	685c      	ldr	r4, [r3, #4]
3400c12a:	2c00      	cmp	r4, #0
3400c12c:	d0fc      	beq.n	3400c128 <LL_ATON_Init+0xe0>
3400c12e:	f241 131e 	movw	r3, #4382	@ 0x111e
3400c132:	b2a2      	uxth	r2, r4
3400c134:	429a      	cmp	r2, r3
3400c136:	f040 81b4 	bne.w	3400c4a2 <LL_ATON_Init+0x45a>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c13a:	4b71      	ldr	r3, [pc, #452]	@ (3400c300 <LL_ATON_Init+0x2b8>)
3400c13c:	685c      	ldr	r4, [r3, #4]
3400c13e:	2c00      	cmp	r4, #0
3400c140:	d0fc      	beq.n	3400c13c <LL_ATON_Init+0xf4>
3400c142:	b2a3      	uxth	r3, r4
3400c144:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
3400c148:	f040 81cf 	bne.w	3400c4ea <LL_ATON_Init+0x4a2>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c14c:	4a6d      	ldr	r2, [pc, #436]	@ (3400c304 <LL_ATON_Init+0x2bc>)
3400c14e:	6854      	ldr	r4, [r2, #4]
3400c150:	2c00      	cmp	r4, #0
3400c152:	d0fc      	beq.n	3400c14e <LL_ATON_Init+0x106>
3400c154:	f245 031d 	movw	r3, #20509	@ 0x501d
3400c158:	b2a1      	uxth	r1, r4
3400c15a:	4299      	cmp	r1, r3
3400c15c:	f000 81ec 	beq.w	3400c538 <LL_ATON_Init+0x4f0>
3400c160:	f002 fd24 	bl	3400ebac <__errno>
3400c164:	6803      	ldr	r3, [r0, #0]
3400c166:	2b00      	cmp	r3, #0
3400c168:	f000 81e4 	beq.w	3400c534 <LL_ATON_Init+0x4ec>
3400c16c:	f002 fd1e 	bl	3400ebac <__errno>
3400c170:	6800      	ldr	r0, [r0, #0]
3400c172:	f002 fcb5 	bl	3400eae0 <strerror>
3400c176:	4603      	mov	r3, r0
3400c178:	2205      	movs	r2, #5
3400c17a:	2100      	movs	r1, #0
3400c17c:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c180:	221d      	movs	r2, #29
3400c182:	9204      	str	r2, [sp, #16]
3400c184:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c188:	9203      	str	r2, [sp, #12]
3400c18a:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c18e:	9202      	str	r2, [sp, #8]
3400c190:	4a5d      	ldr	r2, [pc, #372]	@ (3400c308 <LL_ATON_Init+0x2c0>)
3400c192:	b2e4      	uxtb	r4, r4
3400c194:	495d      	ldr	r1, [pc, #372]	@ (3400c30c <LL_ATON_Init+0x2c4>)
3400c196:	9200      	str	r2, [sp, #0]
3400c198:	485d      	ldr	r0, [pc, #372]	@ (3400c310 <LL_ATON_Init+0x2c8>)
3400c19a:	22fb      	movs	r2, #251	@ 0xfb
3400c19c:	9401      	str	r4, [sp, #4]
3400c19e:	f002 f969 	bl	3400e474 <iprintf>
3400c1a2:	21fb      	movs	r1, #251	@ 0xfb
3400c1a4:	4b5b      	ldr	r3, [pc, #364]	@ (3400c314 <LL_ATON_Init+0x2cc>)
3400c1a6:	4a5c      	ldr	r2, [pc, #368]	@ (3400c318 <LL_ATON_Init+0x2d0>)
3400c1a8:	e022      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c1aa:	f002 fcff 	bl	3400ebac <__errno>
3400c1ae:	6803      	ldr	r3, [r0, #0]
3400c1b0:	b30b      	cbz	r3, 3400c1f6 <LL_ATON_Init+0x1ae>
3400c1b2:	f002 fcfb 	bl	3400ebac <__errno>
3400c1b6:	6800      	ldr	r0, [r0, #0]
3400c1b8:	f002 fc92 	bl	3400eae0 <strerror>
3400c1bc:	4603      	mov	r3, r0
3400c1be:	2205      	movs	r2, #5
3400c1c0:	f04f 0e00 	mov.w	lr, #0
3400c1c4:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c1c8:	2201      	movs	r2, #1
3400c1ca:	9204      	str	r2, [sp, #16]
3400c1cc:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c1d0:	9203      	str	r2, [sp, #12]
3400c1d2:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c1d6:	9202      	str	r2, [sp, #8]
3400c1d8:	4a50      	ldr	r2, [pc, #320]	@ (3400c31c <LL_ATON_Init+0x2d4>)
3400c1da:	b2e4      	uxtb	r4, r4
3400c1dc:	494b      	ldr	r1, [pc, #300]	@ (3400c30c <LL_ATON_Init+0x2c4>)
3400c1de:	9200      	str	r2, [sp, #0]
3400c1e0:	484b      	ldr	r0, [pc, #300]	@ (3400c310 <LL_ATON_Init+0x2c8>)
3400c1e2:	22c7      	movs	r2, #199	@ 0xc7
3400c1e4:	9401      	str	r4, [sp, #4]
3400c1e6:	f002 f945 	bl	3400e474 <iprintf>
3400c1ea:	21c7      	movs	r1, #199	@ 0xc7
3400c1ec:	4b49      	ldr	r3, [pc, #292]	@ (3400c314 <LL_ATON_Init+0x2cc>)
3400c1ee:	4a4a      	ldr	r2, [pc, #296]	@ (3400c318 <LL_ATON_Init+0x2d0>)
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c1f0:	4846      	ldr	r0, [pc, #280]	@ (3400c30c <LL_ATON_Init+0x2c4>)
3400c1f2:	f001 fa9f 	bl	3400d734 <__assert_func>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c1f6:	4b4a      	ldr	r3, [pc, #296]	@ (3400c320 <LL_ATON_Init+0x2d8>)
3400c1f8:	e7e1      	b.n	3400c1be <LL_ATON_Init+0x176>
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c1fa:	f002 fcd7 	bl	3400ebac <__errno>
3400c1fe:	6803      	ldr	r3, [r0, #0]
3400c200:	b1fb      	cbz	r3, 3400c242 <LL_ATON_Init+0x1fa>
3400c202:	f002 fcd3 	bl	3400ebac <__errno>
3400c206:	6800      	ldr	r0, [r0, #0]
3400c208:	f002 fc6a 	bl	3400eae0 <strerror>
3400c20c:	4603      	mov	r3, r0
3400c20e:	2205      	movs	r2, #5
3400c210:	f04f 0c01 	mov.w	ip, #1
3400c214:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c218:	2217      	movs	r2, #23
3400c21a:	9204      	str	r2, [sp, #16]
3400c21c:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c220:	9203      	str	r2, [sp, #12]
3400c222:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c226:	9202      	str	r2, [sp, #8]
3400c228:	4a3e      	ldr	r2, [pc, #248]	@ (3400c324 <LL_ATON_Init+0x2dc>)
3400c22a:	b2e4      	uxtb	r4, r4
3400c22c:	4937      	ldr	r1, [pc, #220]	@ (3400c30c <LL_ATON_Init+0x2c4>)
3400c22e:	9200      	str	r2, [sp, #0]
3400c230:	4837      	ldr	r0, [pc, #220]	@ (3400c310 <LL_ATON_Init+0x2c8>)
3400c232:	22ca      	movs	r2, #202	@ 0xca
3400c234:	9401      	str	r4, [sp, #4]
3400c236:	f002 f91d 	bl	3400e474 <iprintf>
3400c23a:	21ca      	movs	r1, #202	@ 0xca
3400c23c:	4b35      	ldr	r3, [pc, #212]	@ (3400c314 <LL_ATON_Init+0x2cc>)
3400c23e:	4a36      	ldr	r2, [pc, #216]	@ (3400c318 <LL_ATON_Init+0x2d0>)
3400c240:	e7d6      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c242:	4b37      	ldr	r3, [pc, #220]	@ (3400c320 <LL_ATON_Init+0x2d8>)
3400c244:	e7e3      	b.n	3400c20e <LL_ATON_Init+0x1c6>
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c246:	f002 fcb1 	bl	3400ebac <__errno>
3400c24a:	6803      	ldr	r3, [r0, #0]
3400c24c:	b1eb      	cbz	r3, 3400c28a <LL_ATON_Init+0x242>
3400c24e:	f002 fcad 	bl	3400ebac <__errno>
3400c252:	6800      	ldr	r0, [r0, #0]
3400c254:	f002 fc44 	bl	3400eae0 <strerror>
3400c258:	4603      	mov	r3, r0
3400c25a:	2201      	movs	r2, #1
3400c25c:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c260:	221c      	movs	r2, #28
3400c262:	9204      	str	r2, [sp, #16]
3400c264:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c268:	9203      	str	r2, [sp, #12]
3400c26a:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c26e:	9202      	str	r2, [sp, #8]
3400c270:	4a2d      	ldr	r2, [pc, #180]	@ (3400c328 <LL_ATON_Init+0x2e0>)
3400c272:	b2e4      	uxtb	r4, r4
3400c274:	4925      	ldr	r1, [pc, #148]	@ (3400c30c <LL_ATON_Init+0x2c4>)
3400c276:	9200      	str	r2, [sp, #0]
3400c278:	4825      	ldr	r0, [pc, #148]	@ (3400c310 <LL_ATON_Init+0x2c8>)
3400c27a:	22ce      	movs	r2, #206	@ 0xce
3400c27c:	9401      	str	r4, [sp, #4]
3400c27e:	f002 f8f9 	bl	3400e474 <iprintf>
3400c282:	21ce      	movs	r1, #206	@ 0xce
3400c284:	4b23      	ldr	r3, [pc, #140]	@ (3400c314 <LL_ATON_Init+0x2cc>)
3400c286:	4a24      	ldr	r2, [pc, #144]	@ (3400c318 <LL_ATON_Init+0x2d0>)
3400c288:	e7b2      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c28a:	4b25      	ldr	r3, [pc, #148]	@ (3400c320 <LL_ATON_Init+0x2d8>)
3400c28c:	e7e5      	b.n	3400c25a <LL_ATON_Init+0x212>
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c28e:	f002 fc8d 	bl	3400ebac <__errno>
3400c292:	6803      	ldr	r3, [r0, #0]
3400c294:	b1f3      	cbz	r3, 3400c2d4 <LL_ATON_Init+0x28c>
3400c296:	f002 fc89 	bl	3400ebac <__errno>
3400c29a:	6800      	ldr	r0, [r0, #0]
3400c29c:	f002 fc20 	bl	3400eae0 <strerror>
3400c2a0:	4603      	mov	r3, r0
3400c2a2:	2201      	movs	r2, #1
3400c2a4:	2000      	movs	r0, #0
3400c2a6:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c2aa:	221a      	movs	r2, #26
3400c2ac:	9204      	str	r2, [sp, #16]
3400c2ae:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c2b2:	9203      	str	r2, [sp, #12]
3400c2b4:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c2b8:	9202      	str	r2, [sp, #8]
3400c2ba:	4a1c      	ldr	r2, [pc, #112]	@ (3400c32c <LL_ATON_Init+0x2e4>)
3400c2bc:	b2e4      	uxtb	r4, r4
3400c2be:	4913      	ldr	r1, [pc, #76]	@ (3400c30c <LL_ATON_Init+0x2c4>)
3400c2c0:	9200      	str	r2, [sp, #0]
3400c2c2:	4813      	ldr	r0, [pc, #76]	@ (3400c310 <LL_ATON_Init+0x2c8>)
3400c2c4:	22d2      	movs	r2, #210	@ 0xd2
3400c2c6:	9401      	str	r4, [sp, #4]
3400c2c8:	f002 f8d4 	bl	3400e474 <iprintf>
3400c2cc:	21d2      	movs	r1, #210	@ 0xd2
3400c2ce:	4b11      	ldr	r3, [pc, #68]	@ (3400c314 <LL_ATON_Init+0x2cc>)
3400c2d0:	4a11      	ldr	r2, [pc, #68]	@ (3400c318 <LL_ATON_Init+0x2d0>)
3400c2d2:	e78d      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c2d4:	4b12      	ldr	r3, [pc, #72]	@ (3400c320 <LL_ATON_Init+0x2d8>)
3400c2d6:	e7e4      	b.n	3400c2a2 <LL_ATON_Init+0x25a>
3400c2d8:	34012e10 	.word	0x34012e10
3400c2dc:	580e0000 	.word	0x580e0000
3400c2e0:	580ef000 	.word	0x580ef000
3400c2e4:	580fb000 	.word	0x580fb000
3400c2e8:	580f7000 	.word	0x580f7000
3400c2ec:	580f5000 	.word	0x580f5000
3400c2f0:	580f3000 	.word	0x580f3000
3400c2f4:	580fe000 	.word	0x580fe000
3400c2f8:	580fd000 	.word	0x580fd000
3400c2fc:	580e1000 	.word	0x580e1000
3400c300:	580e4000 	.word	0x580e4000
3400c304:	580e2000 	.word	0x580e2000
3400c308:	34010d84 	.word	0x34010d84
3400c30c:	34010c3f 	.word	0x34010c3f
3400c310:	34010ccf 	.word	0x34010ccf
3400c314:	34010f62 	.word	0x34010f62
3400c318:	34011fb8 	.word	0x34011fb8
3400c31c:	34010d33 	.word	0x34010d33
3400c320:	34010c3a 	.word	0x34010c3a
3400c324:	34010d3a 	.word	0x34010d3a
3400c328:	34010d42 	.word	0x34010d42
3400c32c:	34010d47 	.word	0x34010d47
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c330:	f002 fc3c 	bl	3400ebac <__errno>
3400c334:	6803      	ldr	r3, [r0, #0]
3400c336:	b1eb      	cbz	r3, 3400c374 <LL_ATON_Init+0x32c>
3400c338:	f002 fc38 	bl	3400ebac <__errno>
3400c33c:	6800      	ldr	r0, [r0, #0]
3400c33e:	f002 fbcf 	bl	3400eae0 <strerror>
3400c342:	4603      	mov	r3, r0
3400c344:	2201      	movs	r2, #1
3400c346:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c34a:	221b      	movs	r2, #27
3400c34c:	9204      	str	r2, [sp, #16]
3400c34e:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c352:	9203      	str	r2, [sp, #12]
3400c354:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c358:	9202      	str	r2, [sp, #8]
3400c35a:	4a7c      	ldr	r2, [pc, #496]	@ (3400c54c <LL_ATON_Init+0x504>)
3400c35c:	b2e4      	uxtb	r4, r4
3400c35e:	497c      	ldr	r1, [pc, #496]	@ (3400c550 <LL_ATON_Init+0x508>)
3400c360:	9200      	str	r2, [sp, #0]
3400c362:	487c      	ldr	r0, [pc, #496]	@ (3400c554 <LL_ATON_Init+0x50c>)
3400c364:	22d6      	movs	r2, #214	@ 0xd6
3400c366:	9401      	str	r4, [sp, #4]
3400c368:	f002 f884 	bl	3400e474 <iprintf>
3400c36c:	21d6      	movs	r1, #214	@ 0xd6
3400c36e:	4b7a      	ldr	r3, [pc, #488]	@ (3400c558 <LL_ATON_Init+0x510>)
3400c370:	4a7a      	ldr	r2, [pc, #488]	@ (3400c55c <LL_ATON_Init+0x514>)
3400c372:	e73d      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c374:	4b7a      	ldr	r3, [pc, #488]	@ (3400c560 <LL_ATON_Init+0x518>)
3400c376:	e7e5      	b.n	3400c344 <LL_ATON_Init+0x2fc>
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c378:	f002 fc18 	bl	3400ebac <__errno>
3400c37c:	6803      	ldr	r3, [r0, #0]
3400c37e:	b1f3      	cbz	r3, 3400c3be <LL_ATON_Init+0x376>
3400c380:	f002 fc14 	bl	3400ebac <__errno>
3400c384:	6800      	ldr	r0, [r0, #0]
3400c386:	f002 fbab 	bl	3400eae0 <strerror>
3400c38a:	4603      	mov	r3, r0
3400c38c:	2201      	movs	r2, #1
3400c38e:	210a      	movs	r1, #10
3400c390:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c394:	2219      	movs	r2, #25
3400c396:	9204      	str	r2, [sp, #16]
3400c398:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c39c:	9203      	str	r2, [sp, #12]
3400c39e:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c3a2:	9202      	str	r2, [sp, #8]
3400c3a4:	4a6f      	ldr	r2, [pc, #444]	@ (3400c564 <LL_ATON_Init+0x51c>)
3400c3a6:	b2e4      	uxtb	r4, r4
3400c3a8:	4969      	ldr	r1, [pc, #420]	@ (3400c550 <LL_ATON_Init+0x508>)
3400c3aa:	9200      	str	r2, [sp, #0]
3400c3ac:	4869      	ldr	r0, [pc, #420]	@ (3400c554 <LL_ATON_Init+0x50c>)
3400c3ae:	22da      	movs	r2, #218	@ 0xda
3400c3b0:	9401      	str	r4, [sp, #4]
3400c3b2:	f002 f85f 	bl	3400e474 <iprintf>
3400c3b6:	21da      	movs	r1, #218	@ 0xda
3400c3b8:	4b67      	ldr	r3, [pc, #412]	@ (3400c558 <LL_ATON_Init+0x510>)
3400c3ba:	4a68      	ldr	r2, [pc, #416]	@ (3400c55c <LL_ATON_Init+0x514>)
3400c3bc:	e718      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c3be:	4b68      	ldr	r3, [pc, #416]	@ (3400c560 <LL_ATON_Init+0x518>)
3400c3c0:	e7e4      	b.n	3400c38c <LL_ATON_Init+0x344>
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c3c2:	f002 fbf3 	bl	3400ebac <__errno>
3400c3c6:	6803      	ldr	r3, [r0, #0]
3400c3c8:	b1eb      	cbz	r3, 3400c406 <LL_ATON_Init+0x3be>
3400c3ca:	f002 fbef 	bl	3400ebac <__errno>
3400c3ce:	6800      	ldr	r0, [r0, #0]
3400c3d0:	f002 fb86 	bl	3400eae0 <strerror>
3400c3d4:	4603      	mov	r3, r0
3400c3d6:	2201      	movs	r2, #1
3400c3d8:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c3dc:	2221      	movs	r2, #33	@ 0x21
3400c3de:	9204      	str	r2, [sp, #16]
3400c3e0:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c3e4:	9203      	str	r2, [sp, #12]
3400c3e6:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c3ea:	9202      	str	r2, [sp, #8]
3400c3ec:	4a5e      	ldr	r2, [pc, #376]	@ (3400c568 <LL_ATON_Init+0x520>)
3400c3ee:	b2e4      	uxtb	r4, r4
3400c3f0:	4957      	ldr	r1, [pc, #348]	@ (3400c550 <LL_ATON_Init+0x508>)
3400c3f2:	9200      	str	r2, [sp, #0]
3400c3f4:	4857      	ldr	r0, [pc, #348]	@ (3400c554 <LL_ATON_Init+0x50c>)
3400c3f6:	22de      	movs	r2, #222	@ 0xde
3400c3f8:	9401      	str	r4, [sp, #4]
3400c3fa:	f002 f83b 	bl	3400e474 <iprintf>
3400c3fe:	21de      	movs	r1, #222	@ 0xde
3400c400:	4b55      	ldr	r3, [pc, #340]	@ (3400c558 <LL_ATON_Init+0x510>)
3400c402:	4a56      	ldr	r2, [pc, #344]	@ (3400c55c <LL_ATON_Init+0x514>)
3400c404:	e6f4      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c406:	4b56      	ldr	r3, [pc, #344]	@ (3400c560 <LL_ATON_Init+0x518>)
3400c408:	e7e5      	b.n	3400c3d6 <LL_ATON_Init+0x38e>
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c40a:	f002 fbcf 	bl	3400ebac <__errno>
3400c40e:	6803      	ldr	r3, [r0, #0]
3400c410:	b1fb      	cbz	r3, 3400c452 <LL_ATON_Init+0x40a>
3400c412:	f002 fbcb 	bl	3400ebac <__errno>
3400c416:	6800      	ldr	r0, [r0, #0]
3400c418:	f002 fb62 	bl	3400eae0 <strerror>
3400c41c:	4603      	mov	r3, r0
3400c41e:	2203      	movs	r2, #3
3400c420:	f04f 0e02 	mov.w	lr, #2
3400c424:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c428:	2220      	movs	r2, #32
3400c42a:	9204      	str	r2, [sp, #16]
3400c42c:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c430:	9203      	str	r2, [sp, #12]
3400c432:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c436:	9202      	str	r2, [sp, #8]
3400c438:	4a4c      	ldr	r2, [pc, #304]	@ (3400c56c <LL_ATON_Init+0x524>)
3400c43a:	b2e4      	uxtb	r4, r4
3400c43c:	4944      	ldr	r1, [pc, #272]	@ (3400c550 <LL_ATON_Init+0x508>)
3400c43e:	9200      	str	r2, [sp, #0]
3400c440:	4844      	ldr	r0, [pc, #272]	@ (3400c554 <LL_ATON_Init+0x50c>)
3400c442:	22e2      	movs	r2, #226	@ 0xe2
3400c444:	9401      	str	r4, [sp, #4]
3400c446:	f002 f815 	bl	3400e474 <iprintf>
3400c44a:	21e2      	movs	r1, #226	@ 0xe2
3400c44c:	4b42      	ldr	r3, [pc, #264]	@ (3400c558 <LL_ATON_Init+0x510>)
3400c44e:	4a43      	ldr	r2, [pc, #268]	@ (3400c55c <LL_ATON_Init+0x514>)
3400c450:	e6ce      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c452:	4b43      	ldr	r3, [pc, #268]	@ (3400c560 <LL_ATON_Init+0x518>)
3400c454:	e7e3      	b.n	3400c41e <LL_ATON_Init+0x3d6>
  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c456:	f002 fba9 	bl	3400ebac <__errno>
3400c45a:	6803      	ldr	r3, [r0, #0]
3400c45c:	b1fb      	cbz	r3, 3400c49e <LL_ATON_Init+0x456>
3400c45e:	f002 fba5 	bl	3400ebac <__errno>
3400c462:	6800      	ldr	r0, [r0, #0]
3400c464:	f002 fb3c 	bl	3400eae0 <strerror>
3400c468:	4603      	mov	r3, r0
3400c46a:	2201      	movs	r2, #1
3400c46c:	f04f 0c02 	mov.w	ip, #2
3400c470:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c474:	221f      	movs	r2, #31
3400c476:	9204      	str	r2, [sp, #16]
3400c478:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c47c:	9203      	str	r2, [sp, #12]
3400c47e:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c482:	9202      	str	r2, [sp, #8]
3400c484:	4a3a      	ldr	r2, [pc, #232]	@ (3400c570 <LL_ATON_Init+0x528>)
3400c486:	b2e4      	uxtb	r4, r4
3400c488:	4931      	ldr	r1, [pc, #196]	@ (3400c550 <LL_ATON_Init+0x508>)
3400c48a:	9200      	str	r2, [sp, #0]
3400c48c:	4831      	ldr	r0, [pc, #196]	@ (3400c554 <LL_ATON_Init+0x50c>)
3400c48e:	22f5      	movs	r2, #245	@ 0xf5
3400c490:	9401      	str	r4, [sp, #4]
3400c492:	f001 ffef 	bl	3400e474 <iprintf>
3400c496:	21f5      	movs	r1, #245	@ 0xf5
3400c498:	4b2f      	ldr	r3, [pc, #188]	@ (3400c558 <LL_ATON_Init+0x510>)
3400c49a:	4a30      	ldr	r2, [pc, #192]	@ (3400c55c <LL_ATON_Init+0x514>)
3400c49c:	e6a8      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c49e:	4b30      	ldr	r3, [pc, #192]	@ (3400c560 <LL_ATON_Init+0x518>)
3400c4a0:	e7e3      	b.n	3400c46a <LL_ATON_Init+0x422>
  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c4a2:	f002 fb83 	bl	3400ebac <__errno>
3400c4a6:	6803      	ldr	r3, [r0, #0]
3400c4a8:	b1eb      	cbz	r3, 3400c4e6 <LL_ATON_Init+0x49e>
3400c4aa:	f002 fb7f 	bl	3400ebac <__errno>
3400c4ae:	6800      	ldr	r0, [r0, #0]
3400c4b0:	f002 fb16 	bl	3400eae0 <strerror>
3400c4b4:	4603      	mov	r3, r0
3400c4b6:	2201      	movs	r2, #1
3400c4b8:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c4bc:	221e      	movs	r2, #30
3400c4be:	9204      	str	r2, [sp, #16]
3400c4c0:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c4c4:	9203      	str	r2, [sp, #12]
3400c4c6:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c4ca:	9202      	str	r2, [sp, #8]
3400c4cc:	4a29      	ldr	r2, [pc, #164]	@ (3400c574 <LL_ATON_Init+0x52c>)
3400c4ce:	b2e4      	uxtb	r4, r4
3400c4d0:	491f      	ldr	r1, [pc, #124]	@ (3400c550 <LL_ATON_Init+0x508>)
3400c4d2:	9200      	str	r2, [sp, #0]
3400c4d4:	481f      	ldr	r0, [pc, #124]	@ (3400c554 <LL_ATON_Init+0x50c>)
3400c4d6:	22f7      	movs	r2, #247	@ 0xf7
3400c4d8:	9401      	str	r4, [sp, #4]
3400c4da:	f001 ffcb 	bl	3400e474 <iprintf>
3400c4de:	21f7      	movs	r1, #247	@ 0xf7
3400c4e0:	4b1d      	ldr	r3, [pc, #116]	@ (3400c558 <LL_ATON_Init+0x510>)
3400c4e2:	4a1e      	ldr	r2, [pc, #120]	@ (3400c55c <LL_ATON_Init+0x514>)
3400c4e4:	e684      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c4e6:	4b1e      	ldr	r3, [pc, #120]	@ (3400c560 <LL_ATON_Init+0x518>)
3400c4e8:	e7e5      	b.n	3400c4b6 <LL_ATON_Init+0x46e>
  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c4ea:	f002 fb5f 	bl	3400ebac <__errno>
3400c4ee:	6803      	ldr	r3, [r0, #0]
3400c4f0:	b1f3      	cbz	r3, 3400c530 <LL_ATON_Init+0x4e8>
3400c4f2:	f002 fb5b 	bl	3400ebac <__errno>
3400c4f6:	6800      	ldr	r0, [r0, #0]
3400c4f8:	f002 faf2 	bl	3400eae0 <strerror>
3400c4fc:	4603      	mov	r3, r0
3400c4fe:	2201      	movs	r2, #1
3400c500:	2006      	movs	r0, #6
3400c502:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c506:	2200      	movs	r2, #0
3400c508:	9204      	str	r2, [sp, #16]
3400c50a:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400c50e:	9203      	str	r2, [sp, #12]
3400c510:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400c514:	9202      	str	r2, [sp, #8]
3400c516:	4a18      	ldr	r2, [pc, #96]	@ (3400c578 <LL_ATON_Init+0x530>)
3400c518:	b2e4      	uxtb	r4, r4
3400c51a:	490d      	ldr	r1, [pc, #52]	@ (3400c550 <LL_ATON_Init+0x508>)
3400c51c:	9200      	str	r2, [sp, #0]
3400c51e:	480d      	ldr	r0, [pc, #52]	@ (3400c554 <LL_ATON_Init+0x50c>)
3400c520:	22f9      	movs	r2, #249	@ 0xf9
3400c522:	9401      	str	r4, [sp, #4]
3400c524:	f001 ffa6 	bl	3400e474 <iprintf>
3400c528:	21f9      	movs	r1, #249	@ 0xf9
3400c52a:	4b0b      	ldr	r3, [pc, #44]	@ (3400c558 <LL_ATON_Init+0x510>)
3400c52c:	4a0b      	ldr	r2, [pc, #44]	@ (3400c55c <LL_ATON_Init+0x514>)
3400c52e:	e65f      	b.n	3400c1f0 <LL_ATON_Init+0x1a8>
3400c530:	4b0b      	ldr	r3, [pc, #44]	@ (3400c560 <LL_ATON_Init+0x518>)
3400c532:	e7e4      	b.n	3400c4fe <LL_ATON_Init+0x4b6>
  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c534:	4b0a      	ldr	r3, [pc, #40]	@ (3400c560 <LL_ATON_Init+0x518>)
3400c536:	e61f      	b.n	3400c178 <LL_ATON_Init+0x130>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 1);
3400c538:	2301      	movs	r3, #1

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);

  return 0;
}
3400c53a:	2000      	movs	r0, #0
    ATON_BUSIF_CTRL_SET(i, 1);
3400c53c:	6013      	str	r3, [r2, #0]
3400c53e:	4a0f      	ldr	r2, [pc, #60]	@ (3400c57c <LL_ATON_Init+0x534>)
3400c540:	6013      	str	r3, [r2, #0]
  ATON_INTCTRL_CTRL_SET(0, 1);
3400c542:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
3400c546:	6013      	str	r3, [r2, #0]
}
3400c548:	b008      	add	sp, #32
3400c54a:	bd10      	pop	{r4, pc}
3400c54c:	34010d4d 	.word	0x34010d4d
3400c550:	34010c3f 	.word	0x34010c3f
3400c554:	34010ccf 	.word	0x34010ccf
3400c558:	34010f62 	.word	0x34010f62
3400c55c:	34011fb8 	.word	0x34011fb8
3400c560:	34010c3a 	.word	0x34010c3a
3400c564:	34010d53 	.word	0x34010d53
3400c568:	34010d59 	.word	0x34010d59
3400c56c:	34010d63 	.word	0x34010d63
3400c570:	34010d6a 	.word	0x34010d6a
3400c574:	34010d72 	.word	0x34010d72
3400c578:	34010d7a 	.word	0x34010d7a
3400c57c:	580e3000 	.word	0x580e3000

3400c580 <LL_ATON_DeInit>:
int LL_ATON_DeInit(void)
{
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
3400c580:	2000      	movs	r0, #0
3400c582:	4b07      	ldr	r3, [pc, #28]	@ (3400c5a0 <LL_ATON_DeInit+0x20>)
3400c584:	6018      	str	r0, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 0);
3400c586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c58a:	6018      	str	r0, [r3, #0]
3400c58c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c590:	6018      	str	r0, [r3, #0]
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
3400c592:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
3400c596:	6098      	str	r0, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
3400c598:	60d8      	str	r0, [r3, #12]
  ATON_CLKCTRL_BGATES_SET(0, 0);
3400c59a:	6118      	str	r0, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
3400c59c:	6018      	str	r0, [r3, #0]

  return 0;
}
3400c59e:	4770      	bx	lr
3400c5a0:	580e1000 	.word	0x580e1000

3400c5a4 <LL_ATON_EnableUnits_Init>:
 * @param  n Lenght of the initialization array
 * @retval Error code
 * @todo   Add boundary checks
 */
int LL_ATON_EnableUnits_Init(const LL_ATON_EnableUnits_InitTypeDef *LL_ATON_EnableUnits_InitStruct, int n)
{
3400c5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;

  for (i = 0; i < n; i++)
3400c5a6:	2400      	movs	r4, #0
3400c5a8:	42a1      	cmp	r1, r4
3400c5aa:	f101 0201 	add.w	r2, r1, #1
3400c5ae:	bfb8      	it	lt
3400c5b0:	2201      	movlt	r2, #1
#endif // !POOL_RC14
      break;
#endif
#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_ENABLE(RECBUF, unitId);
3400c5b2:	4d1e      	ldr	r5, [pc, #120]	@ (3400c62c <LL_ATON_EnableUnits_Init+0x88>)
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
3400c5b4:	4f1e      	ldr	r7, [pc, #120]	@ (3400c630 <LL_ATON_EnableUnits_Init+0x8c>)
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
3400c5b6:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
3400c5b8:	3a01      	subs	r2, #1
3400c5ba:	d101      	bne.n	3400c5c0 <LL_ATON_EnableUnits_Init+0x1c>
      break;
    }
  }

  return 0;
}
3400c5bc:	2000      	movs	r0, #0
3400c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (unitType)
3400c5c0:	f810 1024 	ldrb.w	r1, [r0, r4, lsl #2]
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
3400c5c4:	f836 3024 	ldrh.w	r3, [r6, r4, lsl #2]
    switch (unitType)
3400c5c8:	2908      	cmp	r1, #8
3400c5ca:	d818      	bhi.n	3400c5fe <LL_ATON_EnableUnits_Init+0x5a>
3400c5cc:	e8df f001 	tbb	[pc, r1]
3400c5d0:	190e1705 	.word	0x190e1705
3400c5d4:	1725211d 	.word	0x1725211d
3400c5d8:	29          	.byte	0x29
3400c5d9:	00          	.byte	0x00
      ATON_ENABLE(STRENG, unitId);
3400c5da:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c5de:	33e5      	adds	r3, #229	@ 0xe5
      ATON_ENABLE(DECUN, unitId);
3400c5e0:	031b      	lsls	r3, r3, #12
3400c5e2:	6819      	ldr	r1, [r3, #0]
3400c5e4:	f041 0101 	orr.w	r1, r1, #1
3400c5e8:	6019      	str	r1, [r3, #0]
      break;
3400c5ea:	e008      	b.n	3400c5fe <LL_ATON_EnableUnits_Init+0x5a>
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
3400c5ec:	f503 21b0 	add.w	r1, r3, #360448	@ 0x58000
3400c5f0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
3400c5f4:	31ef      	adds	r1, #239	@ 0xef
3400c5f6:	0309      	lsls	r1, r1, #12
3400c5f8:	f043 0301 	orr.w	r3, r3, #1
3400c5fc:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
3400c5fe:	3401      	adds	r4, #1
3400c600:	e7da      	b.n	3400c5b8 <LL_ATON_EnableUnits_Init+0x14>
      ATON_ENABLE(DECUN, unitId);
3400c602:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c606:	33f3      	adds	r3, #243	@ 0xf3
3400c608:	e7ea      	b.n	3400c5e0 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ACTIV, unitId);
3400c60a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c60e:	33f5      	adds	r3, #245	@ 0xf5
3400c610:	e7e6      	b.n	3400c5e0 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ARITH, unitId);
3400c612:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c616:	33f7      	adds	r3, #247	@ 0xf7
3400c618:	e7e2      	b.n	3400c5e0 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(POOL, unitId);
3400c61a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400c61e:	33fb      	adds	r3, #251	@ 0xfb
3400c620:	e7de      	b.n	3400c5e0 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(RECBUF, unitId);
3400c622:	682b      	ldr	r3, [r5, #0]
3400c624:	f043 0301 	orr.w	r3, r3, #1
3400c628:	602b      	str	r3, [r5, #0]
      break;
3400c62a:	e7e8      	b.n	3400c5fe <LL_ATON_EnableUnits_Init+0x5a>
3400c62c:	580fd000 	.word	0x580fd000
3400c630:	34012e14 	.word	0x34012e14

3400c634 <LL_Switch_Init_NoReset>:
  unsigned int fnr_mask[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_MASK, ATON_STRSWITCH_DST_FNR1_MASK};

  /* Enable Switch */
  t = ATON_STRSWITCH_CTRL_DT;
  t = ATON_STRSWITCH_CTRL_SET_EN(t, 1);
  ATON_STRSWITCH_CTRL_SET(0, t);
3400c634:	2301      	movs	r3, #1
3400c636:	4a13      	ldr	r2, [pc, #76]	@ (3400c684 <LL_Switch_Init_NoReset+0x50>)
3400c638:	2900      	cmp	r1, #0
{
3400c63a:	b530      	push	{r4, r5, lr}
  ATON_STRSWITCH_CTRL_SET(0, t);
3400c63c:	6013      	str	r3, [r2, #0]

  for (i = 0; i < n; i++)
3400c63e:	eb01 0203 	add.w	r2, r1, r3
3400c642:	bfb8      	it	lt
3400c644:	461a      	movlt	r2, r3
3400c646:	3a01      	subs	r2, #1
3400c648:	d101      	bne.n	3400c64e <LL_Switch_Init_NoReset+0x1a>

    ATON_REG_WRITE(reg, t);
  }

  return 0;
}
3400c64a:	2000      	movs	r0, #0
3400c64c:	bd30      	pop	{r4, r5, pc}
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
3400c64e:	7b84      	ldrb	r4, [r0, #14]
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source1) << link_shift[1]);
3400c650:	e9d0 5300 	ldrd	r5, r3, [r0]
3400c654:	045b      	lsls	r3, r3, #17
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c656:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
3400c65a:	f004 0501 	and.w	r5, r4, #1
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c65e:	432b      	orrs	r3, r5
    t |= ((LL_Switch_InitStruct[i].frames0 << fnr_shift[0]) & fnr_mask[0]);
3400c660:	7b05      	ldrb	r5, [r0, #12]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c662:	6881      	ldr	r1, [r0, #8]
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c664:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
3400c668:	7b45      	ldrb	r5, [r0, #13]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c66a:	f101 41b0 	add.w	r1, r1, #1476395008	@ 0x58000000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c66e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    t |= ((LL_Switch_InitStruct[i].context1 != 0) << en_shift[1]);
3400c672:	f3c4 0440 	ubfx	r4, r4, #1, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c676:	f501 2164 	add.w	r1, r1, #933888	@ 0xe4000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
3400c67a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    ATON_REG_WRITE(reg, t);
3400c67e:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
3400c680:	3010      	adds	r0, #16
3400c682:	e7e0      	b.n	3400c646 <LL_Switch_Init_NoReset+0x12>
3400c684:	580e4000 	.word	0x580e4000

3400c688 <LL_Switch_Init>:
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ll_aton_static_checks();
#endif

  /* Clear Configuration */
  ATON_DISABLE_CLR_CONFCLR(STRSWITCH, 0);
3400c688:	2202      	movs	r2, #2
3400c68a:	4b06      	ldr	r3, [pc, #24]	@ (3400c6a4 <LL_Switch_Init+0x1c>)
3400c68c:	601a      	str	r2, [r3, #0]
3400c68e:	681a      	ldr	r2, [r3, #0]
3400c690:	0792      	lsls	r2, r2, #30
3400c692:	d4fc      	bmi.n	3400c68e <LL_Switch_Init+0x6>
3400c694:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400c698:	601a      	str	r2, [r3, #0]
3400c69a:	681a      	ldr	r2, [r3, #0]
3400c69c:	0052      	lsls	r2, r2, #1
3400c69e:	d4fc      	bmi.n	3400c69a <LL_Switch_Init+0x12>

  return LL_Switch_Init_NoReset(LL_Switch_InitStruct, n);
3400c6a0:	f7ff bfc8 	b.w	3400c634 <LL_Switch_Init_NoReset>
3400c6a4:	580e4000 	.word	0x580e4000

3400c6a8 <LL_Switch_Deinit>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be disconnected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Deinit(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
3400c6a8:	b530      	push	{r4, r5, lr}
  int i;
  volatile uint32_t *reg;

  for (i = 0; i < n; i++)
3400c6aa:	2400      	movs	r4, #0
3400c6ac:	42a1      	cmp	r1, r4
3400c6ae:	f101 0301 	add.w	r3, r1, #1
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));

    /* Disable contexts */
    ATON_REG_WRITE(reg, 0);
3400c6b2:	4625      	mov	r5, r4
3400c6b4:	bfb8      	it	lt
3400c6b6:	2301      	movlt	r3, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c6b8:	3008      	adds	r0, #8
  for (i = 0; i < n; i++)
3400c6ba:	3b01      	subs	r3, #1
3400c6bc:	d101      	bne.n	3400c6c2 <LL_Switch_Deinit+0x1a>
  }

  return 0;
}
3400c6be:	2000      	movs	r0, #0
3400c6c0:	bd30      	pop	{r4, r5, pc}
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c6c2:	0122      	lsls	r2, r4, #4
3400c6c4:	5882      	ldr	r2, [r0, r2]
  for (i = 0; i < n; i++)
3400c6c6:	3401      	adds	r4, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3400c6c8:	f102 42b0 	add.w	r2, r2, #1476395008	@ 0x58000000
3400c6cc:	f502 2264 	add.w	r2, r2, #933888	@ 0xe4000
    ATON_REG_WRITE(reg, 0);
3400c6d0:	6015      	str	r5, [r2, #0]
  for (i = 0; i < n; i++)
3400c6d2:	e7f2      	b.n	3400c6ba <LL_Switch_Deinit+0x12>

3400c6d4 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
3400c6d4:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
3400c6d6:	2401      	movs	r4, #1
3400c6d8:	2500      	movs	r5, #0
3400c6da:	2301      	movs	r3, #1
3400c6dc:	ea54 050d 	orrs.w	r5, r4, sp
3400c6e0:	4a03      	ldr	r2, [pc, #12]	@ (3400c6f0 <LL_ATON_EnableClock+0x1c>)
3400c6e2:	4083      	lsls	r3, r0
3400c6e4:	6911      	ldr	r1, [r2, #16]
3400c6e6:	404b      	eors	r3, r1
3400c6e8:	4023      	ands	r3, r4
3400c6ea:	404b      	eors	r3, r1
3400c6ec:	6113      	str	r3, [r2, #16]
#endif
}
3400c6ee:	bd30      	pop	{r4, r5, pc}
3400c6f0:	580e0000 	.word	0x580e0000

3400c6f4 <LL_Streng_TensorInit>:
  if (id >= ATON_STRENG_NUM)
3400c6f4:	2809      	cmp	r0, #9
{
3400c6f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400c6fa:	4604      	mov	r4, r0
3400c6fc:	460d      	mov	r5, r1
3400c6fe:	4616      	mov	r6, r2
  if (id >= ATON_STRENG_NUM)
3400c700:	dd04      	ble.n	3400c70c <LL_Streng_TensorInit+0x18>
    return LL_ATON_INVALID_ID;
3400c702:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
3400c706:	b003      	add	sp, #12
3400c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LL_ATON_EnableClock(ATON_STRENG_CLKB_CLK(id));
3400c70c:	f7ff ffe2 	bl	3400c6d4 <LL_ATON_EnableClock>
  if (n != 1)
3400c710:	2e01      	cmp	r6, #1
3400c712:	d1f6      	bne.n	3400c702 <LL_Streng_TensorInit+0xe>
  if (conf->nbits_in > 24 || conf->nbits_out > 24)
3400c714:	f895 603c 	ldrb.w	r6, [r5, #60]	@ 0x3c
3400c718:	2e18      	cmp	r6, #24
3400c71a:	d8f2      	bhi.n	3400c702 <LL_Streng_TensorInit+0xe>
3400c71c:	f895 c03d 	ldrb.w	ip, [r5, #61]	@ 0x3d
3400c720:	f1bc 0f18 	cmp.w	ip, #24
3400c724:	d8ed      	bhi.n	3400c702 <LL_Streng_TensorInit+0xe>
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400c726:	7828      	ldrb	r0, [r5, #0]
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400c728:	f8d5 a038 	ldr.w	sl, [r5, #56]	@ 0x38
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400c72c:	01c2      	lsls	r2, r0, #7
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400c72e:	00c3      	lsls	r3, r0, #3
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400c730:	f402 7180 	and.w	r1, r2, #256	@ 0x100
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
3400c734:	f003 0308 	and.w	r3, r3, #8
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
3400c738:	430b      	orrs	r3, r1
  t = ATON_STRENG_CTRL_SET_RAW_OUT(t, conf->raw_out);
3400c73a:	f3c0 0180 	ubfx	r1, r0, #2, #1
3400c73e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  t = ATON_STRENG_CTRL_SET_NOBLK(t, (conf->noblk != 0));
3400c742:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
3400c746:	431a      	orrs	r2, r3
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
3400c748:	0843      	lsrs	r3, r0, #1
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400c74a:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
3400c74e:	f003 0310 	and.w	r3, r3, #16
3400c752:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
3400c754:	424a      	negs	r2, r1
3400c756:	414a      	adcs	r2, r1
3400c758:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
3400c75c:	0102      	lsls	r2, r0, #4
3400c75e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400c762:	f8b5 8000 	ldrh.w	r8, [r5]
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
3400c766:	0207      	lsls	r7, r0, #8
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
3400c768:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
3400c76a:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
3400c76e:	431f      	orrs	r7, r3
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400c770:	f408 7310 	and.w	r3, r8, #576	@ 0x240
3400c774:	f1a3 0e40 	sub.w	lr, r3, #64	@ 0x40
3400c778:	f1de 0300 	rsbs	r3, lr, #0
3400c77c:	eb43 030e 	adc.w	r3, r3, lr
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400c780:	f010 0201 	ands.w	r2, r0, #1
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
3400c784:	ea47 37c3 	orr.w	r7, r7, r3, lsl #15
  int nbits_in = conf->nbits_in;
3400c788:	4631      	mov	r1, r6
  int nbits_out = conf->nbits_out;
3400c78a:	4663      	mov	r3, ip
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400c78c:	9201      	str	r2, [sp, #4]
3400c78e:	f000 0940 	and.w	r9, r0, #64	@ 0x40
3400c792:	f040 80a9 	bne.w	3400c8e8 <LL_Streng_TensorInit+0x1f4>
3400c796:	4566      	cmp	r6, ip
3400c798:	bf8c      	ite	hi
3400c79a:	2200      	movhi	r2, #0
3400c79c:	2201      	movls	r2, #1
  switch (io_case)
3400c79e:	2a03      	cmp	r2, #3
3400c7a0:	f000 80b2 	beq.w	3400c908 <LL_Streng_TensorInit+0x214>
3400c7a4:	2a01      	cmp	r2, #1
3400c7a6:	f000 80aa 	beq.w	3400c8fe <LL_Streng_TensorInit+0x20a>
    nbits_in = nbits_out;
3400c7aa:	4661      	mov	r1, ip
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7ac:	eba6 020c 	sub.w	r2, r6, ip
    if (conf->mem_lsb)
3400c7b0:	0603      	lsls	r3, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7b2:	bf4b      	itete	mi
3400c7b4:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7b6:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7b8:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
3400c7bc:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    in_bits[0] = _LL_min(8, nbits_in);
3400c7c0:	2908      	cmp	r1, #8
3400c7c2:	468e      	mov	lr, r1
3400c7c4:	bfa8      	it	ge
3400c7c6:	f04f 0e08 	movge.w	lr, #8
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400c7ca:	2908      	cmp	r1, #8
3400c7cc:	f340 8099 	ble.w	3400c902 <LL_Streng_TensorInit+0x20e>
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
3400c7d0:	2910      	cmp	r1, #16
3400c7d2:	bfcb      	itete	gt
3400c7d4:	f1a1 0310 	subgt.w	r3, r1, #16
3400c7d8:	2300      	movle	r3, #0
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400c7da:	2108      	movgt	r1, #8
3400c7dc:	3908      	suble	r1, #8
    if (conf->align_right)
3400c7de:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
3400c7e2:	f1b9 0f00 	cmp.w	r9, #0
3400c7e6:	d10b      	bne.n	3400c800 <LL_Streng_TensorInit+0x10c>
      if (nbits_out > 16)
3400c7e8:	f1bc 0f10 	cmp.w	ip, #16
3400c7ec:	f300 80b2 	bgt.w	3400c954 <LL_Streng_TensorInit+0x260>
      else if (nbits_out > 8)
3400c7f0:	f1bc 0f08 	cmp.w	ip, #8
      else if (nbits_in > 8)
3400c7f4:	f340 80b2 	ble.w	3400c95c <LL_Streng_TensorInit+0x268>
3400c7f8:	4673      	mov	r3, lr
        ch_bits[0] = out_bits[1];
3400c7fa:	468e      	mov	lr, r1
        ch_bits[1] = out_bits[0];
3400c7fc:	4619      	mov	r1, r3
  int ch_bits[3] = {0, 0, 0};
3400c7fe:	465b      	mov	r3, fp
  t = ATON_STRENG_CTRL_SET_SIZE0(t, ch_bits[0]);
3400c800:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
  ATON_STRENG_CTRL_SET(id, t);
3400c804:	f504 24b0 	add.w	r4, r4, #360448	@ 0x58000
  t = ATON_STRENG_CTRL_SET_SIZE1(t, ch_bits[1]);
3400c808:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
  ATON_STRENG_CTRL_SET(id, t);
3400c80c:	34e5      	adds	r4, #229	@ 0xe5
  t = ATON_STRENG_CTRL_SET_SIZE2(t, ch_bits[2]);
3400c80e:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
  ATON_STRENG_CTRL_SET(id, t);
3400c812:	0324      	lsls	r4, r4, #12
3400c814:	6027      	str	r7, [r4, #0]
  ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_ADDR_ADDR(id)), conf->addr_base.i,
3400c816:	e9d5 7e01 	ldrd	r7, lr, [r5, #4]
3400c81a:	eb07 030e 	add.w	r3, r7, lr
3400c81e:	60a3      	str	r3, [r4, #8]
  if (conf->raw)
3400c820:	0783      	lsls	r3, r0, #30
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400c822:	6a69      	ldr	r1, [r5, #36]	@ 0x24
  if (conf->raw)
3400c824:	f140 809d 	bpl.w	3400c962 <LL_Streng_TensorInit+0x26e>
    if (conf->frame_count)
3400c828:	696b      	ldr	r3, [r5, #20]
3400c82a:	b94b      	cbnz	r3, 3400c840 <LL_Streng_TensorInit+0x14c>
      t = (LL_Streng_len(conf) * 8) / (conf->dir == 0 ? conf->nbits_in : conf->nbits_out);
3400c82c:	f010 0f01 	tst.w	r0, #1
3400c830:	bf18      	it	ne
3400c832:	4666      	movne	r6, ip
    return conf->addr_base.p + conf->offset_limit;
  }

  static inline uint32_t LL_Streng_len(const LL_Streng_TensorInitTypeDef *conf)
  {
    return conf->offset_end - conf->offset_start;
3400c834:	68eb      	ldr	r3, [r5, #12]
3400c836:	eba3 030e 	sub.w	r3, r3, lr
3400c83a:	00db      	lsls	r3, r3, #3
3400c83c:	fbb3 f3f6 	udiv	r3, r3, r6
  uint32_t t_streng_cid_cache = ATON_STRENG_CID_CACHE_DT;
3400c840:	2000      	movs	r0, #0
    ATON_STRENG_FSIZE_SET(id, t);
3400c842:	60e3      	str	r3, [r4, #12]
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
3400c844:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
3400c846:	f36f 010f 	bfc	r1, #0, #16
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
3400c84a:	6223      	str	r3, [r4, #32]
  ATON_STRENG_FRAME_RPT_SET(id, conf->frame_loop_cnt);
3400c84c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
3400c84e:	61e3      	str	r3, [r4, #28]
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
3400c850:	6aab      	ldr	r3, [r5, #40]	@ 0x28
3400c852:	61a3      	str	r3, [r4, #24]
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
3400c854:	f041 0306 	orr.w	r3, r1, #6
  ATON_STRENG_LIMITEN_SET(id, t);
3400c858:	6323      	str	r3, [r4, #48]	@ 0x30
  if (/*(conf->dir == 0) && */ (conf->offset_limit != 0x0))
3400c85a:	692b      	ldr	r3, [r5, #16]
3400c85c:	b12b      	cbz	r3, 3400c86a <LL_Streng_TensorInit+0x176>
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400c85e:	441f      	add	r7, r3
    t = ATON_STRENG_LIMITEN_SET_STOPPREFTC(t, 1);
3400c860:	f041 0107 	orr.w	r1, r1, #7
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400c864:	3f01      	subs	r7, #1
    ATON_STRENG_LIMITEN_SET(id, t);
3400c866:	6321      	str	r1, [r4, #48]	@ 0x30
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
3400c868:	63a7      	str	r7, [r4, #56]	@ 0x38
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
3400c86a:	7869      	ldrb	r1, [r5, #1]
  if ((conf->dir == 0) && conf->sync_with_other)
3400c86c:	f028 08fe 	bic.w	r8, r8, #254	@ 0xfe
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
3400c870:	f3c1 1380 	ubfx	r3, r1, #6, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
3400c874:	f3c1 1640 	ubfx	r6, r1, #5, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
3400c878:	011b      	lsls	r3, r3, #4
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c87a:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CID(t_streng_cid_cache, conf->bus_cid);
3400c87e:	f3c1 0682 	ubfx	r6, r1, #2, #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c882:	4333      	orrs	r3, r6
3400c884:	78ae      	ldrb	r6, [r5, #2]
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_PFETCH(t_streng_cid_cache, conf->bus_pfetch);
3400c886:	09c9      	lsrs	r1, r1, #7
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c888:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  if ((conf->dir == 0) && conf->sync_with_other)
3400c88c:	ea4f 58c8 	mov.w	r8, r8, lsl #23
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c890:	f006 0103 	and.w	r1, r6, #3
3400c894:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
  if ((conf->dir == 0) && conf->sync_with_other)
3400c898:	ea4f 58d8 	mov.w	r8, r8, lsr #23
  if (conf->dir == 1)
3400c89c:	9901      	ldr	r1, [sp, #4]
  ATON_STRENG_LIMIT_SET(id, conf->frame_tot_cnt);
3400c89e:	f8c4 a034 	str.w	sl, [r4, #52]	@ 0x34
  if ((conf->dir == 0) && conf->sync_with_other)
3400c8a2:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
3400c8a6:	ea43 0300 	orr.w	r3, r3, r0
  if (conf->dir == 1)
3400c8aa:	ea4f 40c1 	mov.w	r0, r1, lsl #19
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400c8ae:	bf09      	itett	eq
3400c8b0:	78e9      	ldrbeq	r1, [r5, #3]
  t = ATON_STRENG_EVENT_SET_EN_ILLCFG(t, 1); // Enable Illegal Configuration interrupt
3400c8b2:	f440 1180 	orrne.w	r1, r0, #1048576	@ 0x100000
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400c8b6:	0609      	lsleq	r1, r1, #24
3400c8b8:	f001 51f8 	andeq.w	r1, r1, #520093696	@ 0x1f000000
3400c8bc:	bf08      	it	eq
3400c8be:	4301      	orreq	r1, r0
  ATON_STRENG_POS_SET(id, t);
3400c8c0:	f04f 0024 	mov.w	r0, #36	@ 0x24
3400c8c4:	6260      	str	r0, [r4, #36]	@ 0x24
  ATON_STRENG_STRD_SET(id, t_streng_strd);
3400c8c6:	6162      	str	r2, [r4, #20]
  ATON_STRENG_CID_CACHE_SET(id, t_streng_cid_cache);
3400c8c8:	64a3      	str	r3, [r4, #72]	@ 0x48
  t = ATON_STRENG_ENCR_MSB_SET_EN(t, conf->cipher_en);
3400c8ca:	f3c6 0380 	ubfx	r3, r6, #2, #1
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
3400c8ce:	f3c6 06c0 	ubfx	r6, r6, #3, #1
3400c8d2:	ea4f 3686 	mov.w	r6, r6, lsl #14
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
3400c8d6:	bf08      	it	eq
3400c8d8:	f441 0110 	orreq.w	r1, r1, #9437184	@ 0x900000
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
3400c8dc:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  ATON_STRENG_EVENT_SET(id, t_streng_event);
3400c8e0:	62a1      	str	r1, [r4, #40]	@ 0x28
  return 0;
3400c8e2:	2000      	movs	r0, #0
  ATON_STRENG_ENCR_MSB_SET(id, t);
3400c8e4:	6466      	str	r6, [r4, #68]	@ 0x44
  return 0;
3400c8e6:	e70e      	b.n	3400c706 <LL_Streng_TensorInit+0x12>
  int io_case = ((conf->dir != 0) << 1);
3400c8e8:	0042      	lsls	r2, r0, #1
3400c8ea:	f002 0202 	and.w	r2, r2, #2
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
3400c8ee:	4566      	cmp	r6, ip
3400c8f0:	ea52 9222 			@ <UNDEFINED> instruction: 0xea529222
  switch (io_case)
3400c8f4:	2a02      	cmp	r2, #2
3400c8f6:	f47f af52 	bne.w	3400c79e <LL_Streng_TensorInit+0xaa>
3400c8fa:	2200      	movs	r2, #0
3400c8fc:	e00f      	b.n	3400c91e <LL_Streng_TensorInit+0x22a>
3400c8fe:	2200      	movs	r2, #0
3400c900:	e75e      	b.n	3400c7c0 <LL_Streng_TensorInit+0xcc>
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
3400c902:	2100      	movs	r1, #0
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
3400c904:	460b      	mov	r3, r1
3400c906:	e76a      	b.n	3400c7de <LL_Streng_TensorInit+0xea>
    nbits_out = nbits_in;
3400c908:	4633      	mov	r3, r6
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400c90a:	ebac 0206 	sub.w	r2, ip, r6
    if (conf->mem_lsb)
3400c90e:	0601      	lsls	r1, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400c910:	bf4b      	itete	mi
3400c912:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
3400c914:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
3400c916:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
3400c91a:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    out_bits[0] = _LL_min(8, nbits_out);
3400c91e:	2b08      	cmp	r3, #8
3400c920:	469e      	mov	lr, r3
3400c922:	bfa8      	it	ge
3400c924:	f04f 0e08 	movge.w	lr, #8
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400c928:	2b08      	cmp	r3, #8
3400c92a:	dd10      	ble.n	3400c94e <LL_Streng_TensorInit+0x25a>
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400c92c:	2b10      	cmp	r3, #16
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400c92e:	bfd5      	itete	le
3400c930:	f1a3 0108 	suble.w	r1, r3, #8
3400c934:	2108      	movgt	r1, #8
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400c936:	2300      	movle	r3, #0
3400c938:	3b10      	subgt	r3, #16
    if (conf->align_right)
3400c93a:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
3400c93e:	f1b9 0f00 	cmp.w	r9, #0
3400c942:	f47f af5d 	bne.w	3400c800 <LL_Streng_TensorInit+0x10c>
      if (nbits_in > 16)
3400c946:	2e10      	cmp	r6, #16
3400c948:	dc04      	bgt.n	3400c954 <LL_Streng_TensorInit+0x260>
      else if (nbits_in > 8)
3400c94a:	2e08      	cmp	r6, #8
3400c94c:	e752      	b.n	3400c7f4 <LL_Streng_TensorInit+0x100>
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
3400c94e:	2100      	movs	r1, #0
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
3400c950:	460b      	mov	r3, r1
3400c952:	e7f2      	b.n	3400c93a <LL_Streng_TensorInit+0x246>
3400c954:	46f1      	mov	r9, lr
        ch_bits[0] = out_bits[2];
3400c956:	469e      	mov	lr, r3
        ch_bits[2] = out_bits[0];
3400c958:	464b      	mov	r3, r9
3400c95a:	e751      	b.n	3400c800 <LL_Streng_TensorInit+0x10c>
  int ch_bits[3] = {0, 0, 0};
3400c95c:	465b      	mov	r3, fp
3400c95e:	4659      	mov	r1, fp
3400c960:	e74e      	b.n	3400c800 <LL_Streng_TensorInit+0x10c>
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
3400c962:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
    t = ATON_STRENG_FSIZE_SET_WIDTH(t, conf->fwidth);
3400c966:	b2b0      	uxth	r0, r6
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400c968:	434e      	muls	r6, r1
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
3400c96a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400c96e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
    ATON_STRENG_FSIZE_SET(id, t);
3400c970:	60e3      	str	r3, [r4, #12]
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3400c972:	2800      	cmp	r0, #0
3400c974:	bf08      	it	eq
3400c976:	4630      	moveq	r0, r6
    t_streng_strd = ATON_STRENG_STRD_SET_LOFF(t_streng_strd, line_offset);
3400c978:	b283      	uxth	r3, r0
3400c97a:	431a      	orrs	r2, r3
    t = ATON_STRENG_DEPTH_SET_SIZE(t, conf->batch_depth);
3400c97c:	8c2b      	ldrh	r3, [r5, #32]
    t = ATON_STRENG_CID_CACHE_SET_LOFF_MSB(t, (line_offset >> ATON_STRENG_STRD_LOFF_W));
3400c97e:	f36f 000f 	bfc	r0, #0, #16
    t = ATON_STRENG_DEPTH_SET_OFFSET(t, conf->batch_offset);
3400c982:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ATON_STRENG_DEPTH_SET(id, t);
3400c986:	6123      	str	r3, [r4, #16]
3400c988:	e75c      	b.n	3400c844 <LL_Streng_TensorInit+0x150>
	...

3400c98c <LL_Convacc_Init>:
  if (id >= ATON_CONVACC_NUM)
3400c98c:	2803      	cmp	r0, #3
{
3400c98e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400c992:	4606      	mov	r6, r0
3400c994:	460c      	mov	r4, r1
  if (id >= ATON_CONVACC_NUM)
3400c996:	f300 814e 	bgt.w	3400cc36 <LL_Convacc_Init+0x2aa>
  LL_ATON_EnableClock(ATON_CONVACC_CLKB_CLK(id));
3400c99a:	300a      	adds	r0, #10
3400c99c:	f7ff fe9a 	bl	3400c6d4 <LL_ATON_EnableClock>
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
3400c9a0:	78a5      	ldrb	r5, [r4, #2]
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
3400c9a2:	7862      	ldrb	r2, [r4, #1]
  t = ATON_CONVACC_CTRL_SET_KT1(t, (conf->kt1_mode != 0));
3400c9a4:	f005 0308 	and.w	r3, r5, #8
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
3400c9a8:	f3c2 1101 	ubfx	r1, r2, #4, #2
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9ac:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
3400c9b0:	78e1      	ldrb	r1, [r4, #3]
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
3400c9b2:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
3400c9b6:	f001 0103 	and.w	r1, r1, #3
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9ba:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
  t = ATON_CONVACC_CTRL_SET_FUNSIGNED(t, conf->f_unsigned);
3400c9be:	f3c5 1180 	ubfx	r1, r5, #6, #1
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9c2:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
3400c9c6:	09e9      	lsrs	r1, r5, #7
3400c9c8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  t = ATON_CONVACC_CTRL_SET_NOSUM(t, (conf->accumulate == 0));
3400c9cc:	f3c2 1180 	ubfx	r1, r2, #6, #1
3400c9d0:	f081 0101 	eor.w	r1, r1, #1
3400c9d4:	b2c9      	uxtb	r1, r1
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9d6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  t = ATON_CONVACC_CTRL_SET_NO1SUM(t, (conf->accumulate_first == 0));
3400c9da:	f082 0180 	eor.w	r1, r2, #128	@ 0x80
3400c9de:	09c9      	lsrs	r1, r1, #7
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9e0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
3400c9e4:	02a9      	lsls	r1, r5, #10
3400c9e6:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9ea:	430b      	orrs	r3, r1
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
3400c9ec:	0201      	lsls	r1, r0, #8
3400c9ee:	f401 7140 	and.w	r1, r1, #768	@ 0x300
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
3400c9f2:	430b      	orrs	r3, r1
  t = ATON_CONVACC_CTRL_SET_FSTAT(t, (conf->fstat != 0));
3400c9f4:	05e9      	lsls	r1, r5, #23
3400c9f6:	f001 7180 	and.w	r1, r1, #16777216	@ 0x1000000
3400c9fa:	4319      	orrs	r1, r3
  t = ATON_CONVACC_CTRL_SET_DEEPMODE(t, (conf->deepmode != 0));
3400c9fc:	062b      	lsls	r3, r5, #24
3400c9fe:	f003 5780 	and.w	r7, r3, #268435456	@ 0x10000000
3400ca02:	4339      	orrs	r1, r7
  if ((conf->fstat != 0) && (conf->deepmode != 0))
3400ca04:	f005 0712 	and.w	r7, r5, #18
3400ca08:	2f12      	cmp	r7, #18
3400ca0a:	f000 8117 	beq.w	3400cc3c <LL_Convacc_Init+0x2b0>
  t = ATON_CONVACC_CTRL_SET_DSS2MODE(t, (conf->dss2mode != 0));
3400ca0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
3400ca12:	430b      	orrs	r3, r1
  if ((conf->fstat != 0) && (conf->dss2mode != 0))
3400ca14:	f005 0122 	and.w	r1, r5, #34	@ 0x22
3400ca18:	2922      	cmp	r1, #34	@ 0x22
3400ca1a:	f000 810f 	beq.w	3400cc3c <LL_Convacc_Init+0x2b0>
  if ((conf->dss2mode != 0) && (conf->deepmode != 0))
3400ca1e:	f005 0130 	and.w	r1, r5, #48	@ 0x30
3400ca22:	2930      	cmp	r1, #48	@ 0x30
3400ca24:	f000 810a 	beq.w	3400cc3c <LL_Convacc_Init+0x2b0>
  ATON_CONVACC_CTRL_SET(id, t);
3400ca28:	f506 21b0 	add.w	r1, r6, #360448	@ 0x58000
  Conv_ctrl_bits[id] = t;
3400ca2c:	4f85      	ldr	r7, [pc, #532]	@ (3400cc44 <LL_Convacc_Init+0x2b8>)
  ATON_CONVACC_CTRL_SET(id, t);
3400ca2e:	31ef      	adds	r1, #239	@ 0xef
3400ca30:	0309      	lsls	r1, r1, #12
3400ca32:	600b      	str	r3, [r1, #0]
  Conv_ctrl_bits[id] = t;
3400ca34:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
  if (conf->afilt_mode != AFILT_MODE_NONE)
3400ca38:	b150      	cbz	r0, 3400ca50 <LL_Convacc_Init+0xc4>
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400ca3a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
    t = ATON_CONVACC_AFILT_SET_FIRST(t, conf->afilt_first);
3400ca3e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400ca42:	041b      	lsls	r3, r3, #16
3400ca44:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    t = ATON_CONVACC_AFILT_SET_TOT(t, conf->afilt_tot);
3400ca48:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
3400ca4c:	4303      	orrs	r3, r0
    ATON_CONVACC_AFILT_SET(id, t);
3400ca4e:	624b      	str	r3, [r1, #36]	@ 0x24
  if (conf->kfilt_tot > 0)
3400ca50:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
3400ca54:	b140      	cbz	r0, 3400ca68 <LL_Convacc_Init+0xdc>
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
3400ca56:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
    t = ATON_CONVACC_KFILT_SET_FIRST(t, conf->kfilt_first);
3400ca5a:	f894 602f 	ldrb.w	r6, [r4, #47]	@ 0x2f
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
3400ca5e:	041b      	lsls	r3, r3, #16
3400ca60:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
3400ca64:	4303      	orrs	r3, r0
    ATON_CONVACC_KFILT_SET(id, t);
3400ca66:	620b      	str	r3, [r1, #32]
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ca68:	7923      	ldrb	r3, [r4, #4]
  t = ATON_CONVACC_DFORMAT_SET_ROUND(t, conf->rounding_o);
3400ca6a:	7826      	ldrb	r6, [r4, #0]
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ca6c:	3310      	adds	r3, #16
  t = ATON_CONVACC_DFORMAT_SET_SAT(t, conf->saturation_o);
3400ca6e:	02b0      	lsls	r0, r6, #10
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ca70:	061b      	lsls	r3, r3, #24
3400ca72:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
3400ca76:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
3400ca7a:	4318      	orrs	r0, r3
3400ca7c:	f002 0303 	and.w	r3, r2, #3
3400ca80:	ea40 3083 	orr.w	r0, r0, r3, lsl #14
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
3400ca84:	f3c6 1301 	ubfx	r3, r6, #4, #2
  t = ATON_CONVACC_DFORMAT_SET_FROUND(t, conf->rounding_f);
3400ca88:	f006 0701 	and.w	r7, r6, #1
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
3400ca8c:	059b      	lsls	r3, r3, #22
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ca8e:	ea43 7387 	orr.w	r3, r3, r7, lsl #30
  t = ATON_CONVACC_DFORMAT_SET_FSAT(t, conf->saturation_f);
3400ca92:	f3c6 0740 	ubfx	r7, r6, #1, #1
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ca96:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
  t = ATON_CONVACC_DFORMAT_SET_FRNDMODE(t, conf->round_mode_f);
3400ca9a:	f3c6 0681 	ubfx	r6, r6, #2, #2
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
3400ca9e:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
3400caa2:	4303      	orrs	r3, r0
  t = ATON_CONVACC_DFORMAT_SET_OBYTES(t, conf->outbytes_o);
3400caa4:	f3c2 0281 	ubfx	r2, r2, #2, #2
3400caa8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
3400caac:	79a2      	ldrb	r2, [r4, #6]
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
3400caae:	f3c5 0080 	ubfx	r0, r5, #2, #1
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
3400cab2:	0212      	lsls	r2, r2, #8
3400cab4:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
3400cab8:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
3400cabc:	4313      	orrs	r3, r2
3400cabe:	7962      	ldrb	r2, [r4, #5]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cac0:	8aa0      	ldrh	r0, [r4, #20]
  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
3400cac2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
3400cac6:	4313      	orrs	r3, r2
  ATON_CONVACC_DFORMAT_SET(id, t);
3400cac8:	610b      	str	r3, [r1, #16]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400caca:	68a3      	ldr	r3, [r4, #8]
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
3400cacc:	68e2      	ldr	r2, [r4, #12]
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
3400cace:	4343      	muls	r3, r0
3400cad0:	b29b      	uxth	r3, r3
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
3400cad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  ATON_CONVACC_FFORMAT_SET(id, t);
3400cad6:	614b      	str	r3, [r1, #20]
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cad8:	8a27      	ldrh	r7, [r4, #16]
  t = ATON_CONVACC_KFORMAT_SET_BTCDEPTH(t, conf->batchDepth);
3400cada:	0403      	lsls	r3, r0, #16
3400cadc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  t = ATON_CONVACC_KFORMAT_SET_HEIGHT(t, conf->kernelHeight);
3400cae0:	7c62      	ldrb	r2, [r4, #17]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cae2:	f8b4 801c 	ldrh.w	r8, [r4, #28]
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400cae6:	433b      	orrs	r3, r7
3400cae8:	7ca7      	ldrb	r7, [r4, #18]
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400caea:	f8b4 a01e 	ldrh.w	sl, [r4, #30]
  t = ATON_CONVACC_KFORMAT_SET_WIDTH(t, conf->kernelWidth);
3400caee:	7c26      	ldrb	r6, [r4, #16]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400caf0:	4590      	cmp	r8, r2
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
3400caf2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
3400caf6:	f8b4 9018 	ldrh.w	r9, [r4, #24]
  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
3400cafa:	f102 37ff 	add.w	r7, r2, #4294967295	@ 0xffffffff
3400cafe:	bf2c      	ite	cs
3400cb00:	46bc      	movcs	ip, r7
3400cb02:	46c4      	movcc	ip, r8
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cb04:	4552      	cmp	r2, sl
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
3400cb06:	8b62      	ldrh	r2, [r4, #26]
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
3400cb08:	bf88      	it	hi
3400cb0a:	4657      	movhi	r7, sl
  ATON_CONVACC_KFORMAT_SET(id, t);
3400cb0c:	608b      	str	r3, [r1, #8]
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
3400cb0e:	45b1      	cmp	r9, r6
3400cb10:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
3400cb14:	bf2c      	ite	cs
3400cb16:	469e      	movcs	lr, r3
3400cb18:	46ce      	movcc	lr, r9
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
3400cb1a:	4296      	cmp	r6, r2
3400cb1c:	bf88      	it	hi
3400cb1e:	4613      	movhi	r3, r2
  if (conf->deepmode != 0)
3400cb20:	06ee      	lsls	r6, r5, #27
3400cb22:	f100 8083 	bmi.w	3400cc2c <LL_Convacc_Init+0x2a0>
  p_top = (p_top <= 2 ? p_top : 2);
3400cb26:	f1bc 0f02 	cmp.w	ip, #2
3400cb2a:	bfa8      	it	ge
3400cb2c:	f04f 0c02 	movge.w	ip, #2
  p_bot = (p_bot <= 2 ? p_bot : 2);
3400cb30:	2f02      	cmp	r7, #2
3400cb32:	bfa8      	it	ge
3400cb34:	2702      	movge	r7, #2
  p_left = (p_left <= 2 ? p_left : 2);
3400cb36:	f1be 0f02 	cmp.w	lr, #2
3400cb3a:	bfa8      	it	ge
3400cb3c:	f04f 0e02 	movge.w	lr, #2
  p_right = (p_right <= 2 ? p_right : 2);
3400cb40:	2b02      	cmp	r3, #2
3400cb42:	bfa8      	it	ge
3400cb44:	2302      	movge	r3, #2
  if (conf->dss2mode != 0)
3400cb46:	06ae      	lsls	r6, r5, #26
    p_top = p_bot = p_left = p_right = 0;
3400cb48:	bf48      	it	mi
3400cb4a:	2300      	movmi	r3, #0
  if (conf->zfbias != 0)
3400cb4c:	f9b4 6038 	ldrsh.w	r6, [r4, #56]	@ 0x38
    p_top = p_bot = p_left = p_right = 0;
3400cb50:	bf42      	ittt	mi
3400cb52:	469e      	movmi	lr, r3
3400cb54:	461f      	movmi	r7, r3
3400cb56:	469c      	movmi	ip, r3
  if (conf->zfbias != 0)
3400cb58:	b11e      	cbz	r6, 3400cb62 <LL_Convacc_Init+0x1d6>
    p_top = p_bot = p_left = p_right = 0;
3400cb5a:	2300      	movs	r3, #0
3400cb5c:	469e      	mov	lr, r3
3400cb5e:	461f      	mov	r7, r3
3400cb60:	469c      	mov	ip, r3
  int z_left = (conf->left_padding - p_left);
3400cb62:	eba9 090e 	sub.w	r9, r9, lr
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cb66:	fb00 f909 	mul.w	r9, r0, r9
  int z_right = (conf->right_padding - p_right);
3400cb6a:	1ad2      	subs	r2, r2, r3
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cb6c:	4342      	muls	r2, r0
  int z_top = (conf->top_padding - p_top);
3400cb6e:	eba8 080c 	sub.w	r8, r8, ip
  t = ATON_CONVACC_ZFRAME_SET_TOP(t, z_top);
3400cb72:	ea4f 4808 	mov.w	r8, r8, lsl #16
3400cb76:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cb7a:	fa5f f989 	uxtb.w	r9, r9
  int z_bot = (conf->bot_padding - p_bot);
3400cb7e:	ebaa 0a07 	sub.w	sl, sl, r7
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cb82:	ea48 0809 	orr.w	r8, r8, r9
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cb86:	0212      	lsls	r2, r2, #8
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
3400cb88:	ea48 680a 	orr.w	r8, r8, sl, lsl #24
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
3400cb8c:	b292      	uxth	r2, r2
3400cb8e:	ea42 0208 	orr.w	r2, r2, r8
  ATON_CONVACC_ZFRAME_SET(id, t);
3400cb92:	628a      	str	r2, [r1, #40]	@ 0x28
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
3400cb94:	7da2      	ldrb	r2, [r4, #22]
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
3400cb96:	009b      	lsls	r3, r3, #2
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
3400cb98:	0212      	lsls	r2, r2, #8
3400cb9a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
3400cb9e:	f003 030c 	and.w	r3, r3, #12
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cba2:	4313      	orrs	r3, r2
  t = ATON_CONVACC_SAMPLE_SET_LPAD(t, p_left);
3400cba4:	f00e 0e03 	and.w	lr, lr, #3
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cba8:	7de2      	ldrb	r2, [r4, #23]
  t = ATON_CONVACC_SAMPLE_SET_TPAD(t, p_top);
3400cbaa:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
3400cbae:	f00c 0c30 	and.w	ip, ip, #48	@ 0x30
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cbb2:	ea43 030e 	orr.w	r3, r3, lr
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
3400cbb6:	01bf      	lsls	r7, r7, #6
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cbb8:	ea43 030c 	orr.w	r3, r3, ip
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
3400cbbc:	b2ff      	uxtb	r7, r7
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
3400cbbe:	0312      	lsls	r2, r2, #12
3400cbc0:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
3400cbc4:	433b      	orrs	r3, r7
3400cbc6:	4313      	orrs	r3, r2
  if (conf->fstat != 0)
3400cbc8:	07aa      	lsls	r2, r5, #30
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
3400cbca:	bf48      	it	mi
3400cbcc:	8d22      	ldrhmi	r2, [r4, #40]	@ 0x28
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
3400cbce:	4f1e      	ldr	r7, [pc, #120]	@ (3400cc48 <LL_Convacc_Init+0x2bc>)
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
3400cbd0:	bf48      	it	mi
3400cbd2:	ea43 4302 	orrmi.w	r3, r3, r2, lsl #16
  if (conf->left_crop > 0)
3400cbd6:	8c22      	ldrh	r2, [r4, #32]
  ATON_CONVACC_SAMPLE_SET(id, t);
3400cbd8:	60cb      	str	r3, [r1, #12]
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
3400cbda:	fb00 f302 	mul.w	r3, r0, r2
3400cbde:	ea6f 4303 	mvn.w	r3, r3, lsl #16
3400cbe2:	2a00      	cmp	r2, #0
3400cbe4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
3400cbe8:	bf08      	it	eq
3400cbea:	463b      	moveq	r3, r7
  if (conf->right_crop > 0)
3400cbec:	f8b4 c022 	ldrh.w	ip, [r4, #34]	@ 0x22
    t = ATON_CONVACC_FHCROP_SET_RIGHT(t, conf->right_crop * conf->batchDepth + (conf->batchDepth - 1));
3400cbf0:	1e45      	subs	r5, r0, #1
3400cbf2:	fb00 500c 	mla	r0, r0, ip, r5
3400cbf6:	b29a      	uxth	r2, r3
3400cbf8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
3400cbfc:	f1bc 0f00 	cmp.w	ip, #0
3400cc00:	bf18      	it	ne
3400cc02:	4613      	movne	r3, r2
  if (conf->bot_crop > 0)
3400cc04:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
  if (conf->top_crop > 0)
3400cc06:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
3400cc08:	2800      	cmp	r0, #0
3400cc0a:	ea42 0207 	orr.w	r2, r2, r7
  ATON_CONVACC_FHCROP_SET(id, t);
3400cc0e:	618b      	str	r3, [r1, #24]
    t = ATON_CONVACC_FVCROP_SET_BOTTOM(t, conf->bot_crop);
3400cc10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
3400cc12:	bf08      	it	eq
3400cc14:	4613      	moveq	r3, r2
  ATON_CONVACC_FVCROP_SET(id, t);
3400cc16:	61cb      	str	r3, [r1, #28]
  if (conf->fsub != 0)
3400cc18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400cc1a:	b113      	cbz	r3, 3400cc22 <LL_Convacc_Init+0x296>
    t = ATON_CONVACC_FSUB_SET_FSUB(t, conf->fsub);
3400cc1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    ATON_CONVACC_FSUB_SET(id, t);
3400cc20:	630b      	str	r3, [r1, #48]	@ 0x30
  return 0;
3400cc22:	2000      	movs	r0, #0
    t = ATON_CONVACC_ZFBIAS_SET_ZFBIAS(t, conf->zfbias);
3400cc24:	b2b6      	uxth	r6, r6
  ATON_CONVACC_ZFBIAS_SET(id, t);
3400cc26:	634e      	str	r6, [r1, #52]	@ 0x34
}
3400cc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_top = p_bot = p_left = p_right = 0;
3400cc2c:	2300      	movs	r3, #0
3400cc2e:	469e      	mov	lr, r3
3400cc30:	461f      	mov	r7, r3
3400cc32:	469c      	mov	ip, r3
3400cc34:	e787      	b.n	3400cb46 <LL_Convacc_Init+0x1ba>
    return LL_ATON_INVALID_ID;
3400cc36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400cc3a:	e7f5      	b.n	3400cc28 <LL_Convacc_Init+0x29c>
    return LL_ATON_INVALID_PARAM;
3400cc3c:	f06f 0001 	mvn.w	r0, #1
3400cc40:	e7f2      	b.n	3400cc28 <LL_Convacc_Init+0x29c>
3400cc42:	bf00      	nop
3400cc44:	34012e14 	.word	0x34012e14
3400cc48:	ffff0000 	.word	0xffff0000

3400cc4c <LL_EpochCtrl_Init>:
  if (id >= ATON_EPOCHCTRL_NUM)
3400cc4c:	2800      	cmp	r0, #0
{
3400cc4e:	b510      	push	{r4, lr}
3400cc50:	460c      	mov	r4, r1
  if (id >= ATON_EPOCHCTRL_NUM)
3400cc52:	dc0e      	bgt.n	3400cc72 <LL_EpochCtrl_Init+0x26>
  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
3400cc54:	3019      	adds	r0, #25
3400cc56:	f7ff fd3d 	bl	3400c6d4 <LL_ATON_EnableClock>
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400cc5a:	7923      	ldrb	r3, [r4, #4]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400cc5c:	4a08      	ldr	r2, [pc, #32]	@ (3400cc80 <LL_EpochCtrl_Init+0x34>)
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400cc5e:	f003 0301 	and.w	r3, r3, #1
3400cc62:	00db      	lsls	r3, r3, #3
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400cc64:	6013      	str	r3, [r2, #0]
  if (conf->blobaddr & 0x7)
3400cc66:	6823      	ldr	r3, [r4, #0]
3400cc68:	f013 0007 	ands.w	r0, r3, #7
3400cc6c:	d104      	bne.n	3400cc78 <LL_EpochCtrl_Init+0x2c>
  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
3400cc6e:	6093      	str	r3, [r2, #8]
}
3400cc70:	bd10      	pop	{r4, pc}
    return LL_ATON_INVALID_ID;
3400cc72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400cc76:	e7fb      	b.n	3400cc70 <LL_EpochCtrl_Init+0x24>
    return LL_ATON_INVALID_PARAM;
3400cc78:	f06f 0001 	mvn.w	r0, #1
3400cc7c:	e7f8      	b.n	3400cc70 <LL_EpochCtrl_Init+0x24>
3400cc7e:	bf00      	nop
3400cc80:	580fe000 	.word	0x580fe000

3400cc84 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
3400cc84:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
3400cc86:	2401      	movs	r4, #1
3400cc88:	2500      	movs	r5, #0
3400cc8a:	ea54 050d 	orrs.w	r5, r4, sp
3400cc8e:	4a03      	ldr	r2, [pc, #12]	@ (3400cc9c <LL_ATON_DisableClock+0x18>)
3400cc90:	6913      	ldr	r3, [r2, #16]
3400cc92:	ea23 0304 	bic.w	r3, r3, r4
3400cc96:	6113      	str	r3, [r2, #16]
#endif
}
3400cc98:	bd30      	pop	{r4, r5, pc}
3400cc9a:	bf00      	nop
3400cc9c:	580e0000 	.word	0x580e0000

3400cca0 <LL_ATON_DisableUnits_Init>:
{
3400cca0:	b570      	push	{r4, r5, r6, lr}
3400cca2:	4605      	mov	r5, r0
  for (i = 0; i < n; i++)
3400cca4:	2400      	movs	r4, #0
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
3400cca6:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
3400cca8:	428c      	cmp	r4, r1
3400ccaa:	db01      	blt.n	3400ccb0 <LL_ATON_DisableUnits_Init+0x10>
  return LL_ATON_OK;
3400ccac:	2000      	movs	r0, #0
}
3400ccae:	bd70      	pop	{r4, r5, r6, pc}
    switch (unitType)
3400ccb0:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
3400ccb4:	f836 0024 	ldrh.w	r0, [r6, r4, lsl #2]
    switch (unitType)
3400ccb8:	2b08      	cmp	r3, #8
3400ccba:	d87a      	bhi.n	3400cdb2 <LL_ATON_DisableUnits_Init+0x112>
3400ccbc:	e8df f003 	tbb	[pc, r3]
3400ccc0:	29187905 	.word	0x29187905
3400ccc4:	795b4a3a 	.word	0x795b4a3a
3400ccc8:	6b          	.byte	0x6b
3400ccc9:	00          	.byte	0x00
      ATON_DISABLE_CLR_CONFCLR(STRENG, unitId);
3400ccca:	2202      	movs	r2, #2
3400cccc:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400ccd0:	33e5      	adds	r3, #229	@ 0xe5
3400ccd2:	031b      	lsls	r3, r3, #12
3400ccd4:	601a      	str	r2, [r3, #0]
3400ccd6:	681a      	ldr	r2, [r3, #0]
3400ccd8:	0792      	lsls	r2, r2, #30
3400ccda:	d4fc      	bmi.n	3400ccd6 <LL_ATON_DisableUnits_Init+0x36>
3400ccdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cce0:	601a      	str	r2, [r3, #0]
3400cce2:	681a      	ldr	r2, [r3, #0]
3400cce4:	0052      	lsls	r2, r2, #1
3400cce6:	d4fc      	bmi.n	3400cce2 <LL_ATON_DisableUnits_Init+0x42>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
3400cce8:	f7ff ffcc 	bl	3400cc84 <LL_ATON_DisableClock>
  for (i = 0; i < n; i++)
3400ccec:	3401      	adds	r4, #1
3400ccee:	e7db      	b.n	3400cca8 <LL_ATON_DisableUnits_Init+0x8>
      ATON_DISABLE_CLR_CONFCLR(CONVACC, unitId);
3400ccf0:	2202      	movs	r2, #2
3400ccf2:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400ccf6:	33ef      	adds	r3, #239	@ 0xef
3400ccf8:	031b      	lsls	r3, r3, #12
3400ccfa:	601a      	str	r2, [r3, #0]
3400ccfc:	681a      	ldr	r2, [r3, #0]
3400ccfe:	0792      	lsls	r2, r2, #30
3400cd00:	d4fc      	bmi.n	3400ccfc <LL_ATON_DisableUnits_Init+0x5c>
3400cd02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cd06:	601a      	str	r2, [r3, #0]
3400cd08:	681a      	ldr	r2, [r3, #0]
3400cd0a:	0052      	lsls	r2, r2, #1
3400cd0c:	d4fc      	bmi.n	3400cd08 <LL_ATON_DisableUnits_Init+0x68>
      LL_ATON_DisableClock(ATON_CONVACC_CLKB_CLK(unitId));
3400cd0e:	300a      	adds	r0, #10
3400cd10:	e7ea      	b.n	3400cce8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(DECUN, unitId);
3400cd12:	2202      	movs	r2, #2
3400cd14:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cd18:	33f3      	adds	r3, #243	@ 0xf3
3400cd1a:	031b      	lsls	r3, r3, #12
3400cd1c:	601a      	str	r2, [r3, #0]
3400cd1e:	681a      	ldr	r2, [r3, #0]
3400cd20:	0792      	lsls	r2, r2, #30
3400cd22:	d4fc      	bmi.n	3400cd1e <LL_ATON_DisableUnits_Init+0x7e>
3400cd24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cd28:	601a      	str	r2, [r3, #0]
3400cd2a:	681a      	ldr	r2, [r3, #0]
3400cd2c:	0052      	lsls	r2, r2, #1
3400cd2e:	d4fc      	bmi.n	3400cd2a <LL_ATON_DisableUnits_Init+0x8a>
      LL_ATON_DisableClock(ATON_DECUN_CLKB_CLK(unitId));
3400cd30:	300e      	adds	r0, #14
3400cd32:	e7d9      	b.n	3400cce8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ACTIV, unitId);
3400cd34:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cd38:	4a1f      	ldr	r2, [pc, #124]	@ (3400cdb8 <LL_ATON_DisableUnits_Init+0x118>)
3400cd3a:	33f5      	adds	r3, #245	@ 0xf5
3400cd3c:	031b      	lsls	r3, r3, #12
3400cd3e:	601a      	str	r2, [r3, #0]
3400cd40:	681a      	ldr	r2, [r3, #0]
3400cd42:	0792      	lsls	r2, r2, #30
3400cd44:	d4fc      	bmi.n	3400cd40 <LL_ATON_DisableUnits_Init+0xa0>
3400cd46:	4a1d      	ldr	r2, [pc, #116]	@ (3400cdbc <LL_ATON_DisableUnits_Init+0x11c>)
3400cd48:	601a      	str	r2, [r3, #0]
3400cd4a:	681a      	ldr	r2, [r3, #0]
3400cd4c:	0052      	lsls	r2, r2, #1
3400cd4e:	d4fc      	bmi.n	3400cd4a <LL_ATON_DisableUnits_Init+0xaa>
      LL_ATON_DisableClock(ATON_ACTIV_CLKB_CLK(unitId));
3400cd50:	3010      	adds	r0, #16
3400cd52:	e7c9      	b.n	3400cce8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ARITH, unitId);
3400cd54:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cd58:	4a19      	ldr	r2, [pc, #100]	@ (3400cdc0 <LL_ATON_DisableUnits_Init+0x120>)
3400cd5a:	33f7      	adds	r3, #247	@ 0xf7
3400cd5c:	031b      	lsls	r3, r3, #12
3400cd5e:	601a      	str	r2, [r3, #0]
3400cd60:	681a      	ldr	r2, [r3, #0]
3400cd62:	0792      	lsls	r2, r2, #30
3400cd64:	d4fc      	bmi.n	3400cd60 <LL_ATON_DisableUnits_Init+0xc0>
3400cd66:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
3400cd6a:	601a      	str	r2, [r3, #0]
3400cd6c:	681a      	ldr	r2, [r3, #0]
3400cd6e:	0052      	lsls	r2, r2, #1
3400cd70:	d4fc      	bmi.n	3400cd6c <LL_ATON_DisableUnits_Init+0xcc>
      LL_ATON_DisableClock(ATON_ARITH_CLKB_CLK(unitId));
3400cd72:	3012      	adds	r0, #18
3400cd74:	e7b8      	b.n	3400cce8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(POOL, unitId);
3400cd76:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
3400cd7a:	4a12      	ldr	r2, [pc, #72]	@ (3400cdc4 <LL_ATON_DisableUnits_Init+0x124>)
3400cd7c:	33fb      	adds	r3, #251	@ 0xfb
3400cd7e:	031b      	lsls	r3, r3, #12
3400cd80:	601a      	str	r2, [r3, #0]
3400cd82:	681a      	ldr	r2, [r3, #0]
3400cd84:	0792      	lsls	r2, r2, #30
3400cd86:	d4fc      	bmi.n	3400cd82 <LL_ATON_DisableUnits_Init+0xe2>
3400cd88:	4a0f      	ldr	r2, [pc, #60]	@ (3400cdc8 <LL_ATON_DisableUnits_Init+0x128>)
3400cd8a:	601a      	str	r2, [r3, #0]
3400cd8c:	681a      	ldr	r2, [r3, #0]
3400cd8e:	0052      	lsls	r2, r2, #1
3400cd90:	d4fc      	bmi.n	3400cd8c <LL_ATON_DisableUnits_Init+0xec>
      LL_ATON_DisableClock(ATON_POOL_CLKB_CLK(unitId));
3400cd92:	3016      	adds	r0, #22
3400cd94:	e7a8      	b.n	3400cce8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(RECBUF, unitId);
3400cd96:	2202      	movs	r2, #2
3400cd98:	4b0c      	ldr	r3, [pc, #48]	@ (3400cdcc <LL_ATON_DisableUnits_Init+0x12c>)
3400cd9a:	601a      	str	r2, [r3, #0]
3400cd9c:	681a      	ldr	r2, [r3, #0]
3400cd9e:	0792      	lsls	r2, r2, #30
3400cda0:	d4fc      	bmi.n	3400cd9c <LL_ATON_DisableUnits_Init+0xfc>
3400cda2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cda6:	601a      	str	r2, [r3, #0]
3400cda8:	681a      	ldr	r2, [r3, #0]
3400cdaa:	0052      	lsls	r2, r2, #1
3400cdac:	d4fc      	bmi.n	3400cda8 <LL_ATON_DisableUnits_Init+0x108>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
3400cdae:	3018      	adds	r0, #24
3400cdb0:	e79a      	b.n	3400cce8 <LL_ATON_DisableUnits_Init+0x48>
    switch (unitType)
3400cdb2:	f06f 0001 	mvn.w	r0, #1
3400cdb6:	e77a      	b.n	3400ccae <LL_ATON_DisableUnits_Init+0xe>
3400cdb8:	00881082 	.word	0x00881082
3400cdbc:	40881080 	.word	0x40881080
3400cdc0:	08000002 	.word	0x08000002
3400cdc4:	00420002 	.word	0x00420002
3400cdc8:	40420000 	.word	0x40420000
3400cdcc:	580fd000 	.word	0x580fd000

3400cdd0 <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
3400cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
3400cdd2:	4604      	mov	r4, r0
3400cdd4:	b928      	cbnz	r0, 3400cde2 <LL_ATON_RT_Main+0x12>
3400cdd6:	213c      	movs	r1, #60	@ 0x3c
3400cdd8:	4b14      	ldr	r3, [pc, #80]	@ (3400ce2c <LL_ATON_RT_Main+0x5c>)
3400cdda:	4a15      	ldr	r2, [pc, #84]	@ (3400ce30 <LL_ATON_RT_Main+0x60>)
  LL_ATON_ASSERT(network_instance->network != NULL);
3400cddc:	4815      	ldr	r0, [pc, #84]	@ (3400ce34 <LL_ATON_RT_Main+0x64>)
3400cdde:	f000 fca9 	bl	3400d734 <__assert_func>
3400cde2:	6803      	ldr	r3, [r0, #0]
3400cde4:	b91b      	cbnz	r3, 3400cdee <LL_ATON_RT_Main+0x1e>
3400cde6:	213d      	movs	r1, #61	@ 0x3d
3400cde8:	4b13      	ldr	r3, [pc, #76]	@ (3400ce38 <LL_ATON_RT_Main+0x68>)
3400cdea:	4a11      	ldr	r2, [pc, #68]	@ (3400ce30 <LL_ATON_RT_Main+0x60>)
3400cdec:	e7f6      	b.n	3400cddc <LL_ATON_RT_Main+0xc>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
3400cdee:	f000 fa21 	bl	3400d234 <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
3400cdf2:	4620      	mov	r0, r4
3400cdf4:	f000 f9dc 	bl	3400d1b0 <LL_ATON_RT_Init_Network>
  size_t epochCount = 0;
3400cdf8:	2600      	movs	r6, #0
    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
    }
    printf("Epoch: %5d, Return: %d\n\r", epochCount, ll_aton_rt_ret);
3400cdfa:	4f10      	ldr	r7, [pc, #64]	@ (3400ce3c <LL_ATON_RT_Main+0x6c>)
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
3400cdfc:	4620      	mov	r0, r4
3400cdfe:	f000 fa93 	bl	3400d328 <LL_ATON_RT_RunEpochBlock>
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
3400ce02:	2801      	cmp	r0, #1
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
3400ce04:	4605      	mov	r5, r0
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
3400ce06:	d100      	bne.n	3400ce0a <LL_ATON_RT_Main+0x3a>
      LL_ATON_OSAL_WFE();
3400ce08:	bf20      	wfe
    printf("Epoch: %5d, Return: %d\n\r", epochCount, ll_aton_rt_ret);
3400ce0a:	4631      	mov	r1, r6
3400ce0c:	462a      	mov	r2, r5
3400ce0e:	4638      	mov	r0, r7
3400ce10:	f001 fb30 	bl	3400e474 <iprintf>
    epochCount++;
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3400ce14:	2d02      	cmp	r5, #2
    epochCount++;
3400ce16:	f106 0601 	add.w	r6, r6, #1
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3400ce1a:	d1ef      	bne.n	3400cdfc <LL_ATON_RT_Main+0x2c>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
3400ce1c:	4620      	mov	r0, r4
3400ce1e:	f000 f9eb 	bl	3400d1f8 <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
3400ce22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
3400ce26:	f000 ba4f 	b.w	3400d2c8 <LL_ATON_RT_RuntimeDeInit>
3400ce2a:	bf00      	nop
3400ce2c:	34010d8a 	.word	0x34010d8a
3400ce30:	34011fc5 	.word	0x34011fc5
3400ce34:	34010daa 	.word	0x34010daa
3400ce38:	34010e42 	.word	0x34010e42
3400ce3c:	34010e6b 	.word	0x34010e6b

3400ce40 <__LL_ATON_RT_Init_Network>:
                          // wait for
  }
}

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3400ce40:	b510      	push	{r4, lr}
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3400ce42:	4604      	mov	r4, r0
3400ce44:	b310      	cbz	r0, 3400ce8c <__LL_ATON_RT_Init_Network+0x4c>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3400ce46:	6803      	ldr	r3, [r0, #0]
3400ce48:	b303      	cbz	r3, 3400ce8c <__LL_ATON_RT_Init_Network+0x4c>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
3400ce4a:	69db      	ldr	r3, [r3, #28]
3400ce4c:	4798      	blx	r3
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
  nn_instance->exec_state.first_epoch_block = eb_list;
  nn_instance->exec_state.next_epoch_block = NULL;
3400ce4e:	2300      	movs	r3, #0
  nn_instance->exec_state.current_epoch_block = eb_list;
3400ce50:	6060      	str	r0, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400ce52:	60a0      	str	r0, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400ce54:	60e3      	str	r3, [r4, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400ce56:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400ce58:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400ce5a:	6863      	ldr	r3, [r4, #4]
  if (list != NULL)
3400ce5c:	b9a3      	cbnz	r3, 3400ce88 <__LL_ATON_RT_Init_Network+0x48>
  int i = 0;
3400ce5e:	461a      	mov	r2, r3
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400ce60:	6262      	str	r2, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400ce62:	2200      	movs	r2, #0
  nn_instance->exec_state.triggered_events = 0x0;
  nn_instance->exec_state.current_epoch_block_started = false;
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400ce64:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400ce66:	62a2      	str	r2, [r4, #40]	@ 0x28
  nn_instance->exec_state.inference_started = false;
3400ce68:	7622      	strb	r2, [r4, #24]
  nn_instance->exec_state.triggered_events = 0x0;
3400ce6a:	61e2      	str	r2, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400ce6c:	f884 2020 	strb.w	r2, [r4, #32]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400ce70:	b163      	cbz	r3, 3400ce8c <__LL_ATON_RT_Init_Network+0x4c>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400ce72:	4621      	mov	r1, r4
  }
}
3400ce74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400ce78:	2004      	movs	r0, #4
3400ce7a:	4718      	bx	r3
      list++;
3400ce7c:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400ce7e:	3201      	adds	r2, #1
3400ce80:	8a19      	ldrh	r1, [r3, #16]
3400ce82:	0709      	lsls	r1, r1, #28
3400ce84:	d5fa      	bpl.n	3400ce7c <__LL_ATON_RT_Init_Network+0x3c>
3400ce86:	e7eb      	b.n	3400ce60 <__LL_ATON_RT_Init_Network+0x20>
3400ce88:	2201      	movs	r2, #1
3400ce8a:	e7f9      	b.n	3400ce80 <__LL_ATON_RT_Init_Network+0x40>
}
3400ce8c:	bd10      	pop	{r4, pc}
	...

3400ce90 <__ll_clear_aton_owner>:

    __ll_current_aton_ip_owner = new_owner;
  }

  static inline void __ll_clear_aton_owner(NN_Instance_TypeDef *current_owner)
  {
3400ce90:	b508      	push	{r3, lr}
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
3400ce92:	4b09      	ldr	r3, [pc, #36]	@ (3400ceb8 <__ll_clear_aton_owner+0x28>)
3400ce94:	681a      	ldr	r2, [r3, #0]
3400ce96:	4282      	cmp	r2, r0
3400ce98:	d005      	beq.n	3400cea6 <__ll_clear_aton_owner+0x16>
3400ce9a:	2142      	movs	r1, #66	@ 0x42
3400ce9c:	4b07      	ldr	r3, [pc, #28]	@ (3400cebc <__ll_clear_aton_owner+0x2c>)
3400ce9e:	4a08      	ldr	r2, [pc, #32]	@ (3400cec0 <__ll_clear_aton_owner+0x30>)

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400cea0:	4808      	ldr	r0, [pc, #32]	@ (3400cec4 <__ll_clear_aton_owner+0x34>)
3400cea2:	f000 fc47 	bl	3400d734 <__assert_func>
3400cea6:	4a08      	ldr	r2, [pc, #32]	@ (3400cec8 <__ll_clear_aton_owner+0x38>)
3400cea8:	6812      	ldr	r2, [r2, #0]
3400ceaa:	b11a      	cbz	r2, 3400ceb4 <__ll_clear_aton_owner+0x24>
3400ceac:	2146      	movs	r1, #70	@ 0x46
3400ceae:	4b07      	ldr	r3, [pc, #28]	@ (3400cecc <__ll_clear_aton_owner+0x3c>)
3400ceb0:	4a03      	ldr	r2, [pc, #12]	@ (3400cec0 <__ll_clear_aton_owner+0x30>)
3400ceb2:	e7f5      	b.n	3400cea0 <__ll_clear_aton_owner+0x10>
#endif // NDEBUG

    __ll_current_aton_ip_owner = NULL;
3400ceb4:	601a      	str	r2, [r3, #0]
    LL_ATON_OSAL_UNLOCK_ATON();
  }
3400ceb6:	bd08      	pop	{r3, pc}
3400ceb8:	34012e2c 	.word	0x34012e2c
3400cebc:	34010e84 	.word	0x34010e84
3400cec0:	34012123 	.word	0x34012123
3400cec4:	34010eb0 	.word	0x34010eb0
3400cec8:	34012e28 	.word	0x34012e28
3400cecc:	34010f48 	.word	0x34010f48

3400ced0 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
3400ced0:	b508      	push	{r3, lr}
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400ced2:	4b07      	ldr	r3, [pc, #28]	@ (3400cef0 <__LL_ATON_RT_SetWaitMask+0x20>)
3400ced4:	681b      	ldr	r3, [r3, #0]
3400ced6:	b92b      	cbnz	r3, 3400cee4 <__LL_ATON_RT_SetWaitMask+0x14>
3400ced8:	2175      	movs	r1, #117	@ 0x75
3400ceda:	4b06      	ldr	r3, [pc, #24]	@ (3400cef4 <__LL_ATON_RT_SetWaitMask+0x24>)
3400cedc:	4a06      	ldr	r2, [pc, #24]	@ (3400cef8 <__LL_ATON_RT_SetWaitMask+0x28>)
3400cede:	4807      	ldr	r0, [pc, #28]	@ (3400cefc <__LL_ATON_RT_SetWaitMask+0x2c>)
3400cee0:	f000 fc28 	bl	3400d734 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
3400cee4:	4b06      	ldr	r3, [pc, #24]	@ (3400cf00 <__LL_ATON_RT_SetWaitMask+0x30>)
3400cee6:	6018      	str	r0, [r3, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3400cee8:	43c0      	mvns	r0, r0
3400ceea:	4b06      	ldr	r3, [pc, #24]	@ (3400cf04 <__LL_ATON_RT_SetWaitMask+0x34>)
3400ceec:	6258      	str	r0, [r3, #36]	@ 0x24
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
3400ceee:	bd08      	pop	{r3, pc}
3400cef0:	34012e2c 	.word	0x34012e2c
3400cef4:	34010f64 	.word	0x34010f64
3400cef8:	34012076 	.word	0x34012076
3400cefc:	34010eb0 	.word	0x34010eb0
3400cf00:	34012e28 	.word	0x34012e28
3400cf04:	580e1000 	.word	0x580e1000

3400cf08 <EpochBlock_EpochControllerUnit>:
  {
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
  }

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3400cf08:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3400cf0a:	8a03      	ldrh	r3, [r0, #16]
3400cf0c:	075b      	lsls	r3, r3, #29
3400cf0e:	d406      	bmi.n	3400cf1e <EpochBlock_EpochControllerUnit+0x16>
3400cf10:	f240 212f 	movw	r1, #559	@ 0x22f
3400cf14:	4b03      	ldr	r3, [pc, #12]	@ (3400cf24 <EpochBlock_EpochControllerUnit+0x1c>)
3400cf16:	4a04      	ldr	r2, [pc, #16]	@ (3400cf28 <EpochBlock_EpochControllerUnit+0x20>)
3400cf18:	4804      	ldr	r0, [pc, #16]	@ (3400cf2c <EpochBlock_EpochControllerUnit+0x24>)
3400cf1a:	f000 fc0b 	bl	3400d734 <__assert_func>
    return eb->wait_mask;
  }
3400cf1e:	68c0      	ldr	r0, [r0, #12]
3400cf20:	bd08      	pop	{r3, pc}
3400cf22:	bf00      	nop
3400cf24:	34010f8e 	.word	0x34010f8e
3400cf28:	34012057 	.word	0x34012057
3400cf2c:	34010fa9 	.word	0x34010fa9

3400cf30 <__LL_ATON_RT_ExecEndEpochBlock>:
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400cf30:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
{
3400cf32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400cf36:	4605      	mov	r5, r0
3400cf38:	460c      	mov	r4, r1
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400cf3a:	b113      	cbz	r3, 3400cf42 <__LL_ATON_RT_ExecEndEpochBlock+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
3400cf3c:	4602      	mov	r2, r0
3400cf3e:	2002      	movs	r0, #2
3400cf40:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400cf42:	8a2b      	ldrh	r3, [r5, #16]
3400cf44:	0758      	lsls	r0, r3, #29
3400cf46:	d518      	bpl.n	3400cf7a <__LL_ATON_RT_ExecEndEpochBlock+0x4a>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400cf48:	4628      	mov	r0, r5
3400cf4a:	f7ff ffdd 	bl	3400cf08 <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400cf4e:	b128      	cbz	r0, 3400cf5c <__LL_ATON_RT_ExecEndEpochBlock+0x2c>
3400cf50:	21c2      	movs	r1, #194	@ 0xc2
3400cf52:	4b25      	ldr	r3, [pc, #148]	@ (3400cfe8 <__LL_ATON_RT_ExecEndEpochBlock+0xb8>)
3400cf54:	4a25      	ldr	r2, [pc, #148]	@ (3400cfec <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400cf56:	4826      	ldr	r0, [pc, #152]	@ (3400cff0 <__LL_ATON_RT_ExecEndEpochBlock+0xc0>)
3400cf58:	f000 fbec 	bl	3400d734 <__assert_func>
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
3400cf5c:	2202      	movs	r2, #2
3400cf5e:	4b25      	ldr	r3, [pc, #148]	@ (3400cff4 <__LL_ATON_RT_ExecEndEpochBlock+0xc4>)
3400cf60:	601a      	str	r2, [r3, #0]
3400cf62:	681a      	ldr	r2, [r3, #0]
3400cf64:	0791      	lsls	r1, r2, #30
3400cf66:	d4fc      	bmi.n	3400cf62 <__LL_ATON_RT_ExecEndEpochBlock+0x32>
3400cf68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cf6c:	601a      	str	r2, [r3, #0]
3400cf6e:	681a      	ldr	r2, [r3, #0]
3400cf70:	0052      	lsls	r2, r2, #1
3400cf72:	d4fc      	bmi.n	3400cf6e <__LL_ATON_RT_ExecEndEpochBlock+0x3e>
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
3400cf74:	2019      	movs	r0, #25
3400cf76:	f7ff fe85 	bl	3400cc84 <LL_ATON_DisableClock>
  if (eb->end_epoch_block != NULL)
3400cf7a:	686b      	ldr	r3, [r5, #4]
3400cf7c:	b10b      	cbz	r3, 3400cf82 <__LL_ATON_RT_ExecEndEpochBlock+0x52>
    eb->end_epoch_block((const void *)eb);
3400cf7e:	4628      	mov	r0, r5
3400cf80:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
3400cf82:	8a2e      	ldrh	r6, [r5, #16]
  if (EpochBlock_IsEpochPureHW(eb) ||
3400cf84:	f016 0f90 	tst.w	r6, #144	@ 0x90
3400cf88:	f006 07c0 	and.w	r7, r6, #192	@ 0xc0
3400cf8c:	d108      	bne.n	3400cfa0 <__LL_ATON_RT_ExecEndEpochBlock+0x70>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400cf8e:	bb0f      	cbnz	r7, 3400cfd4 <__LL_ATON_RT_ExecEndEpochBlock+0xa4>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400cf90:	4b19      	ldr	r3, [pc, #100]	@ (3400cff8 <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400cf92:	681b      	ldr	r3, [r3, #0]
3400cf94:	42a3      	cmp	r3, r4
3400cf96:	d115      	bne.n	3400cfc4 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400cf98:	21ed      	movs	r1, #237	@ 0xed
3400cf9a:	4b18      	ldr	r3, [pc, #96]	@ (3400cffc <__LL_ATON_RT_ExecEndEpochBlock+0xcc>)
3400cf9c:	4a13      	ldr	r2, [pc, #76]	@ (3400cfec <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400cf9e:	e7da      	b.n	3400cf56 <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400cfa0:	4b15      	ldr	r3, [pc, #84]	@ (3400cff8 <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400cfa2:	681b      	ldr	r3, [r3, #0]
3400cfa4:	42a3      	cmp	r3, r4
3400cfa6:	d003      	beq.n	3400cfb0 <__LL_ATON_RT_ExecEndEpochBlock+0x80>
3400cfa8:	21e1      	movs	r1, #225	@ 0xe1
3400cfaa:	4b15      	ldr	r3, [pc, #84]	@ (3400d000 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>)
3400cfac:	4a0f      	ldr	r2, [pc, #60]	@ (3400cfec <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400cfae:	e7d2      	b.n	3400cf56 <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    __LL_ATON_RT_SetWaitMask(0);
3400cfb0:	2000      	movs	r0, #0
3400cfb2:	f7ff ff8d 	bl	3400ced0 <__LL_ATON_RT_SetWaitMask>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400cfb6:	06f3      	lsls	r3, r6, #27
3400cfb8:	d5e9      	bpl.n	3400cf8e <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
    __ll_clear_aton_owner(nn_instance);
3400cfba:	4620      	mov	r0, r4
3400cfbc:	f7ff ff68 	bl	3400ce90 <__ll_clear_aton_owner>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400cfc0:	2f00      	cmp	r7, #0
3400cfc2:	d0e5      	beq.n	3400cf90 <__LL_ATON_RT_ExecEndEpochBlock+0x60>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400cfc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400cfc6:	b163      	cbz	r3, 3400cfe2 <__LL_ATON_RT_ExecEndEpochBlock+0xb2>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400cfc8:	462a      	mov	r2, r5
3400cfca:	4621      	mov	r1, r4
}
3400cfcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400cfd0:	2003      	movs	r0, #3
3400cfd2:	4718      	bx	r3
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400cfd4:	6923      	ldr	r3, [r4, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400cfd6:	2b00      	cmp	r3, #0
3400cfd8:	d1f4      	bne.n	3400cfc4 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
                                       (nn_instance->exec_state.next_epoch_block ==
3400cfda:	68e3      	ldr	r3, [r4, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400cfdc:	2b00      	cmp	r3, #0
3400cfde:	d1f1      	bne.n	3400cfc4 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400cfe0:	e7eb      	b.n	3400cfba <__LL_ATON_RT_ExecEndEpochBlock+0x8a>
}
3400cfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400cfe6:	bf00      	nop
3400cfe8:	34011046 	.word	0x34011046
3400cfec:	34012038 	.word	0x34012038
3400cff0:	3401104f 	.word	0x3401104f
3400cff4:	580fe000 	.word	0x580fe000
3400cff8:	34012e2c 	.word	0x34012e2c
3400cffc:	34011111 	.word	0x34011111
3400d000:	340110e7 	.word	0x340110e7

3400d004 <__LL_ATON_RT_DetermineNextEpochBlock>:
{
3400d004:	b508      	push	{r3, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400d006:	b928      	cbnz	r0, 3400d014 <__LL_ATON_RT_DetermineNextEpochBlock+0x10>
3400d008:	21f8      	movs	r1, #248	@ 0xf8
3400d00a:	4b1a      	ldr	r3, [pc, #104]	@ (3400d074 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
3400d00c:	4a1a      	ldr	r2, [pc, #104]	@ (3400d078 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400d00e:	481b      	ldr	r0, [pc, #108]	@ (3400d07c <__LL_ATON_RT_DetermineNextEpochBlock+0x78>)
3400d010:	f000 fb90 	bl	3400d734 <__assert_func>
3400d014:	69c3      	ldr	r3, [r0, #28]
3400d016:	b11b      	cbz	r3, 3400d020 <__LL_ATON_RT_DetermineNextEpochBlock+0x1c>
3400d018:	21fa      	movs	r1, #250	@ 0xfa
3400d01a:	4b19      	ldr	r3, [pc, #100]	@ (3400d080 <__LL_ATON_RT_DetermineNextEpochBlock+0x7c>)
3400d01c:	4a16      	ldr	r2, [pc, #88]	@ (3400d078 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400d01e:	e7f6      	b.n	3400d00e <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
  if ((nn_instance->exec_state.next_epoch_block != NULL))
3400d020:	68c3      	ldr	r3, [r0, #12]
3400d022:	b313      	cbz	r3, 3400d06a <__LL_ATON_RT_DetermineNextEpochBlock+0x66>
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
3400d024:	6903      	ldr	r3, [r0, #16]
3400d026:	b123      	cbz	r3, 3400d032 <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
3400d028:	f44f 7181 	mov.w	r1, #258	@ 0x102
3400d02c:	4b15      	ldr	r3, [pc, #84]	@ (3400d084 <__LL_ATON_RT_DetermineNextEpochBlock+0x80>)
3400d02e:	4a12      	ldr	r2, [pc, #72]	@ (3400d078 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400d030:	e7ed      	b.n	3400d00e <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
3400d032:	6843      	ldr	r3, [r0, #4]
3400d034:	6103      	str	r3, [r0, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3400d036:	6883      	ldr	r3, [r0, #8]
3400d038:	6143      	str	r3, [r0, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
3400d03a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
3400d03c:	6283      	str	r3, [r0, #40]	@ 0x28
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
3400d03e:	68c3      	ldr	r3, [r0, #12]
3400d040:	6043      	str	r3, [r0, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
3400d042:	68c3      	ldr	r3, [r0, #12]
3400d044:	6083      	str	r3, [r0, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400d046:	6883      	ldr	r3, [r0, #8]
  if (list != NULL)
3400d048:	b96b      	cbnz	r3, 3400d066 <__LL_ATON_RT_DetermineNextEpochBlock+0x62>
  int i = 0;
3400d04a:	461a      	mov	r2, r3
    nn_instance->exec_state.next_epoch_block = NULL;
3400d04c:	2300      	movs	r3, #0
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400d04e:	6242      	str	r2, [r0, #36]	@ 0x24
    nn_instance->exec_state.next_epoch_block = NULL;
3400d050:	60c3      	str	r3, [r0, #12]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d052:	2300      	movs	r3, #0
3400d054:	f880 3020 	strb.w	r3, [r0, #32]
}
3400d058:	bd08      	pop	{r3, pc}
      list++;
3400d05a:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400d05c:	3201      	adds	r2, #1
3400d05e:	8a19      	ldrh	r1, [r3, #16]
3400d060:	0709      	lsls	r1, r1, #28
3400d062:	d5fa      	bpl.n	3400d05a <__LL_ATON_RT_DetermineNextEpochBlock+0x56>
3400d064:	e7f2      	b.n	3400d04c <__LL_ATON_RT_DetermineNextEpochBlock+0x48>
3400d066:	2201      	movs	r2, #1
3400d068:	e7f9      	b.n	3400d05e <__LL_ATON_RT_DetermineNextEpochBlock+0x5a>
    nn_instance->exec_state.current_epoch_block++;
3400d06a:	6843      	ldr	r3, [r0, #4]
3400d06c:	3314      	adds	r3, #20
3400d06e:	6043      	str	r3, [r0, #4]
3400d070:	e7ef      	b.n	3400d052 <__LL_ATON_RT_DetermineNextEpochBlock+0x4e>
3400d072:	bf00      	nop
3400d074:	3401117f 	.word	0x3401117f
3400d078:	34012013 	.word	0x34012013
3400d07c:	3401104f 	.word	0x3401104f
3400d080:	3401119a 	.word	0x3401119a
3400d084:	340111ca 	.word	0x340111ca

3400d088 <dump_dma_state>:
LL_ATON_WEAK void dump_dma_state(void){};
3400d088:	4770      	bx	lr
	...

3400d08c <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3400d08c:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3400d08e:	4604      	mov	r4, r0
3400d090:	2800      	cmp	r0, #0
3400d092:	d060      	beq.n	3400d156 <__LL_ATON_RT_IrqErr+0xca>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3400d094:	4b30      	ldr	r3, [pc, #192]	@ (3400d158 <__LL_ATON_RT_IrqErr+0xcc>)
3400d096:	4003      	ands	r3, r0
3400d098:	d007      	beq.n	3400d0aa <__LL_ATON_RT_IrqErr+0x1e>

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3400d09a:	4259      	negs	r1, r3
3400d09c:	4019      	ands	r1, r3
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3400d09e:	4b2f      	ldr	r3, [pc, #188]	@ (3400d15c <__LL_ATON_RT_IrqErr+0xd0>)
3400d0a0:	030a      	lsls	r2, r1, #12
3400d0a2:	58d2      	ldr	r2, [r2, r3]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
3400d0a4:	482e      	ldr	r0, [pc, #184]	@ (3400d160 <__LL_ATON_RT_IrqErr+0xd4>)
3400d0a6:	f001 f9e5 	bl	3400e474 <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3400d0aa:	f3c4 0309 	ubfx	r3, r4, #0, #10
3400d0ae:	b113      	cbz	r3, 3400d0b6 <__LL_ATON_RT_IrqErr+0x2a>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3400d0b0:	482c      	ldr	r0, [pc, #176]	@ (3400d164 <__LL_ATON_RT_IrqErr+0xd8>)
3400d0b2:	f001 fa47 	bl	3400e544 <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3400d0b6:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
3400d0ba:	d002      	beq.n	3400d0c2 <__LL_ATON_RT_IrqErr+0x36>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3400d0bc:	482a      	ldr	r0, [pc, #168]	@ (3400d168 <__LL_ATON_RT_IrqErr+0xdc>)
3400d0be:	f001 fa41 	bl	3400e544 <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3400d0c2:	01e5      	lsls	r5, r4, #7
3400d0c4:	d502      	bpl.n	3400d0cc <__LL_ATON_RT_IrqErr+0x40>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3400d0c6:	4829      	ldr	r0, [pc, #164]	@ (3400d16c <__LL_ATON_RT_IrqErr+0xe0>)
3400d0c8:	f001 fa3c 	bl	3400e544 <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3400d0cc:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
3400d0d0:	d00e      	beq.n	3400d0f0 <__LL_ATON_RT_IrqErr+0x64>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3400d0d2:	4827      	ldr	r0, [pc, #156]	@ (3400d170 <__LL_ATON_RT_IrqErr+0xe4>)
3400d0d4:	f001 fa36 	bl	3400e544 <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3400d0d8:	4b26      	ldr	r3, [pc, #152]	@ (3400d174 <__LL_ATON_RT_IrqErr+0xe8>)
3400d0da:	2100      	movs	r1, #0
3400d0dc:	691a      	ldr	r2, [r3, #16]
3400d0de:	4826      	ldr	r0, [pc, #152]	@ (3400d178 <__LL_ATON_RT_IrqErr+0xec>)
3400d0e0:	f001 f9c8 	bl	3400e474 <iprintf>
3400d0e4:	4b25      	ldr	r3, [pc, #148]	@ (3400d17c <__LL_ATON_RT_IrqErr+0xf0>)
3400d0e6:	2101      	movs	r1, #1
3400d0e8:	691a      	ldr	r2, [r3, #16]
3400d0ea:	4823      	ldr	r0, [pc, #140]	@ (3400d178 <__LL_ATON_RT_IrqErr+0xec>)
3400d0ec:	f001 f9c2 	bl	3400e474 <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3400d0f0:	0120      	lsls	r0, r4, #4
3400d0f2:	d502      	bpl.n	3400d0fa <__LL_ATON_RT_IrqErr+0x6e>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3400d0f4:	4822      	ldr	r0, [pc, #136]	@ (3400d180 <__LL_ATON_RT_IrqErr+0xf4>)
3400d0f6:	f001 fa25 	bl	3400e544 <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d0fa:	0061      	lsls	r1, r4, #1
3400d0fc:	d50c      	bpl.n	3400d118 <__LL_ATON_RT_IrqErr+0x8c>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3400d0fe:	4d21      	ldr	r5, [pc, #132]	@ (3400d184 <__LL_ATON_RT_IrqErr+0xf8>)
3400d100:	4821      	ldr	r0, [pc, #132]	@ (3400d188 <__LL_ATON_RT_IrqErr+0xfc>)
3400d102:	68e9      	ldr	r1, [r5, #12]
3400d104:	f001 f9b6 	bl	3400e474 <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3400d108:	6a29      	ldr	r1, [r5, #32]
3400d10a:	4820      	ldr	r0, [pc, #128]	@ (3400d18c <__LL_ATON_RT_IrqErr+0x100>)
3400d10c:	f001 f9b2 	bl	3400e474 <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3400d110:	69e9      	ldr	r1, [r5, #28]
3400d112:	481f      	ldr	r0, [pc, #124]	@ (3400d190 <__LL_ATON_RT_IrqErr+0x104>)
3400d114:	f001 f9ae 	bl	3400e474 <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d118:	00a2      	lsls	r2, r4, #2
3400d11a:	d502      	bpl.n	3400d122 <__LL_ATON_RT_IrqErr+0x96>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3400d11c:	481d      	ldr	r0, [pc, #116]	@ (3400d194 <__LL_ATON_RT_IrqErr+0x108>)
3400d11e:	f001 fa11 	bl	3400e544 <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3400d122:	00e3      	lsls	r3, r4, #3
3400d124:	d502      	bpl.n	3400d12c <__LL_ATON_RT_IrqErr+0xa0>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3400d126:	481c      	ldr	r0, [pc, #112]	@ (3400d198 <__LL_ATON_RT_IrqErr+0x10c>)
3400d128:	f001 fa0c 	bl	3400e544 <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3400d12c:	f7ff ffac 	bl	3400d088 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3400d130:	4622      	mov	r2, r4
3400d132:	f240 314a 	movw	r1, #842	@ 0x34a
3400d136:	2300      	movs	r3, #0
3400d138:	4818      	ldr	r0, [pc, #96]	@ (3400d19c <__LL_ATON_RT_IrqErr+0x110>)
3400d13a:	f001 f99b 	bl	3400e474 <iprintf>
//#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
3400d13e:	4b18      	ldr	r3, [pc, #96]	@ (3400d1a0 <__LL_ATON_RT_IrqErr+0x114>)
3400d140:	681b      	ldr	r3, [r3, #0]
3400d142:	6898      	ldr	r0, [r3, #8]
3400d144:	f001 f8ae 	bl	3400e2a4 <fflush>
//#endif
  LL_ATON_ASSERT(false); // may never happen
3400d148:	f240 314e 	movw	r1, #846	@ 0x34e
3400d14c:	4b15      	ldr	r3, [pc, #84]	@ (3400d1a4 <__LL_ATON_RT_IrqErr+0x118>)
3400d14e:	4a16      	ldr	r2, [pc, #88]	@ (3400d1a8 <__LL_ATON_RT_IrqErr+0x11c>)
3400d150:	4816      	ldr	r0, [pc, #88]	@ (3400d1ac <__LL_ATON_RT_IrqErr+0x120>)
3400d152:	f000 faef 	bl	3400d734 <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3400d156:	bd38      	pop	{r3, r4, r5, pc}
3400d158:	000ffc00 	.word	0x000ffc00
3400d15c:	580e503c 	.word	0x580e503c
3400d160:	3401120b 	.word	0x3401120b
3400d164:	34011238 	.word	0x34011238
3400d168:	3401125e 	.word	0x3401125e
3400d16c:	34011282 	.word	0x34011282
3400d170:	340112a2 	.word	0x340112a2
3400d174:	580e2000 	.word	0x580e2000
3400d178:	340112ba 	.word	0x340112ba
3400d17c:	580e3000 	.word	0x580e3000
3400d180:	340112cf 	.word	0x340112cf
3400d184:	580fe000 	.word	0x580fe000
3400d188:	340112e7 	.word	0x340112e7
3400d18c:	3401131b 	.word	0x3401131b
3400d190:	34011345 	.word	0x34011345
3400d194:	34011366 	.word	0x34011366
3400d198:	34011387 	.word	0x34011387
3400d19c:	340113a2 	.word	0x340113a2
3400d1a0:	340123c4 	.word	0x340123c4
3400d1a4:	34010f62 	.word	0x34010f62
3400d1a8:	34011fef 	.word	0x34011fef
3400d1ac:	3401104f 	.word	0x3401104f

3400d1b0 <LL_ATON_RT_Init_Network>:
{
3400d1b0:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400d1b2:	4604      	mov	r4, r0
3400d1b4:	b1b0      	cbz	r0, 3400d1e4 <LL_ATON_RT_Init_Network+0x34>
  if (nn_instance->network == NULL)
3400d1b6:	6803      	ldr	r3, [r0, #0]
3400d1b8:	b1a3      	cbz	r3, 3400d1e4 <LL_ATON_RT_Init_Network+0x34>
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
3400d1ba:	685b      	ldr	r3, [r3, #4]
3400d1bc:	b933      	cbnz	r3, 3400d1cc <LL_ATON_RT_Init_Network+0x1c>
3400d1be:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
3400d1c2:	4b09      	ldr	r3, [pc, #36]	@ (3400d1e8 <LL_ATON_RT_Init_Network+0x38>)
3400d1c4:	4a09      	ldr	r2, [pc, #36]	@ (3400d1ec <LL_ATON_RT_Init_Network+0x3c>)
  LL_ATON_ASSERT(ret == true);
3400d1c6:	480a      	ldr	r0, [pc, #40]	@ (3400d1f0 <LL_ATON_RT_Init_Network+0x40>)
3400d1c8:	f000 fab4 	bl	3400d734 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
3400d1cc:	4798      	blx	r3
  LL_ATON_ASSERT(ret == true);
3400d1ce:	b920      	cbnz	r0, 3400d1da <LL_ATON_RT_Init_Network+0x2a>
3400d1d0:	f240 11a9 	movw	r1, #425	@ 0x1a9
3400d1d4:	4b07      	ldr	r3, [pc, #28]	@ (3400d1f4 <LL_ATON_RT_Init_Network+0x44>)
3400d1d6:	4a05      	ldr	r2, [pc, #20]	@ (3400d1ec <LL_ATON_RT_Init_Network+0x3c>)
3400d1d8:	e7f5      	b.n	3400d1c6 <LL_ATON_RT_Init_Network+0x16>
  __LL_ATON_RT_Init_Network(nn_instance);
3400d1da:	4620      	mov	r0, r4
}
3400d1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __LL_ATON_RT_Init_Network(nn_instance);
3400d1e0:	f7ff be2e 	b.w	3400ce40 <__LL_ATON_RT_Init_Network>
}
3400d1e4:	bd10      	pop	{r4, pc}
3400d1e6:	bf00      	nop
3400d1e8:	340113c9 	.word	0x340113c9
3400d1ec:	34012139 	.word	0x34012139
3400d1f0:	3401104f 	.word	0x3401104f
3400d1f4:	340113fe 	.word	0x340113fe

3400d1f8 <LL_ATON_RT_DeInit_Network>:
{
3400d1f8:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400d1fa:	4604      	mov	r4, r0
3400d1fc:	b1b8      	cbz	r0, 3400d22e <LL_ATON_RT_DeInit_Network+0x36>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d1fe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400d200:	b11b      	cbz	r3, 3400d20a <LL_ATON_RT_DeInit_Network+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
3400d202:	4601      	mov	r1, r0
3400d204:	2200      	movs	r2, #0
3400d206:	2005      	movs	r0, #5
3400d208:	4798      	blx	r3
  if (nn_instance == __ll_current_aton_ip_owner)
3400d20a:	4b09      	ldr	r3, [pc, #36]	@ (3400d230 <LL_ATON_RT_DeInit_Network+0x38>)
3400d20c:	681b      	ldr	r3, [r3, #0]
3400d20e:	42a3      	cmp	r3, r4
3400d210:	d102      	bne.n	3400d218 <LL_ATON_RT_DeInit_Network+0x20>
    __ll_clear_aton_owner(nn_instance);
3400d212:	4620      	mov	r0, r4
3400d214:	f7ff fe3c 	bl	3400ce90 <__ll_clear_aton_owner>
  nn_instance->exec_state.current_epoch_block = eb_list;
3400d218:	2300      	movs	r3, #0
3400d21a:	6063      	str	r3, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400d21c:	60a3      	str	r3, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400d21e:	60e3      	str	r3, [r4, #12]
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400d220:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400d222:	6163      	str	r3, [r4, #20]
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
3400d224:	6263      	str	r3, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d226:	62a3      	str	r3, [r4, #40]	@ 0x28
  nn_instance->exec_state.triggered_events = 0x0;
3400d228:	61e3      	str	r3, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400d22a:	f884 3020 	strb.w	r3, [r4, #32]
}
3400d22e:	bd10      	pop	{r4, pc}
3400d230:	34012e2c 	.word	0x34012e2c

3400d234 <LL_ATON_RT_RuntimeInit>:
{
3400d234:	b510      	push	{r4, lr}
  LL_ATON_Init();
3400d236:	f7fe ff07 	bl	3400c048 <LL_ATON_Init>
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
3400d23a:	2202      	movs	r2, #2
3400d23c:	4b1f      	ldr	r3, [pc, #124]	@ (3400d2bc <LL_ATON_RT_RuntimeInit+0x88>)
3400d23e:	601a      	str	r2, [r3, #0]
3400d240:	681a      	ldr	r2, [r3, #0]
3400d242:	0791      	lsls	r1, r2, #30
3400d244:	d4fc      	bmi.n	3400d240 <LL_ATON_RT_RuntimeInit+0xc>
3400d246:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d24a:	601a      	str	r2, [r3, #0]
3400d24c:	681a      	ldr	r2, [r3, #0]
3400d24e:	0052      	lsls	r2, r2, #1
3400d250:	d4fc      	bmi.n	3400d24c <LL_ATON_RT_RuntimeInit+0x18>
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3400d252:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3400d256:	615a      	str	r2, [r3, #20]
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
3400d258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400d25c:	625a      	str	r2, [r3, #36]	@ 0x24
    ATON_ENABLE(INTCTRL, 0);
3400d25e:	681a      	ldr	r2, [r3, #0]
3400d260:	f042 0201 	orr.w	r2, r2, #1
3400d264:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d266:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400d26a:	4b15      	ldr	r3, [pc, #84]	@ (3400d2c0 <LL_ATON_RT_RuntimeInit+0x8c>)
3400d26c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d270:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d274:	f3bf 8f6f 	isb	sy
3400d278:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400d27c:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d280:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d284:	f3bf 8f6f 	isb	sy
3400d288:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
3400d28c:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d294:	f3bf 8f6f 	isb	sy
3400d298:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
3400d29c:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d2a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d2a4:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d2a8:	605a      	str	r2, [r3, #4]
  if (ll_aton_init_deinit_trace)
3400d2aa:	4b06      	ldr	r3, [pc, #24]	@ (3400d2c4 <LL_ATON_RT_RuntimeInit+0x90>)
3400d2ac:	681b      	ldr	r3, [r3, #0]
3400d2ae:	b11b      	cbz	r3, 3400d2b8 <LL_ATON_RT_RuntimeInit+0x84>
}
3400d2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
3400d2b4:	2006      	movs	r0, #6
3400d2b6:	4718      	bx	r3
}
3400d2b8:	bd10      	pop	{r4, pc}
3400d2ba:	bf00      	nop
3400d2bc:	580e1000 	.word	0x580e1000
3400d2c0:	e000e100 	.word	0xe000e100
3400d2c4:	34012e24 	.word	0x34012e24

3400d2c8 <LL_ATON_RT_RuntimeDeInit>:
{
3400d2c8:	b508      	push	{r3, lr}
  if (ll_aton_init_deinit_trace)
3400d2ca:	4b15      	ldr	r3, [pc, #84]	@ (3400d320 <LL_ATON_RT_RuntimeDeInit+0x58>)
3400d2cc:	681b      	ldr	r3, [r3, #0]
3400d2ce:	b10b      	cbz	r3, 3400d2d4 <LL_ATON_RT_RuntimeDeInit+0xc>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
3400d2d0:	2007      	movs	r0, #7
3400d2d2:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d2d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400d2d8:	4b12      	ldr	r3, [pc, #72]	@ (3400d324 <LL_ATON_RT_RuntimeDeInit+0x5c>)
3400d2da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d2de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d2e2:	f3bf 8f6f 	isb	sy
3400d2e6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
3400d2ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d2ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d2f2:	f3bf 8f6f 	isb	sy
3400d2f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400d2fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d2fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d302:	f3bf 8f6f 	isb	sy
3400d306:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400d30a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d30e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d312:	f3bf 8f6f 	isb	sy
}
3400d316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DeInit();
3400d31a:	f7ff b931 	b.w	3400c580 <LL_ATON_DeInit>
3400d31e:	bf00      	nop
3400d320:	34012e24 	.word	0x34012e24
3400d324:	e000e100 	.word	0xe000e100

3400d328 <LL_ATON_RT_RunEpochBlock>:
{
3400d328:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400d32a:	4604      	mov	r4, r0
3400d32c:	b930      	cbnz	r0, 3400d33c <LL_ATON_RT_RunEpochBlock+0x14>
3400d32e:	f44f 7110 	mov.w	r1, #576	@ 0x240
3400d332:	4b8c      	ldr	r3, [pc, #560]	@ (3400d564 <LL_ATON_RT_RunEpochBlock+0x23c>)
3400d334:	4a8c      	ldr	r2, [pc, #560]	@ (3400d568 <LL_ATON_RT_RunEpochBlock+0x240>)
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
3400d336:	488d      	ldr	r0, [pc, #564]	@ (3400d56c <LL_ATON_RT_RunEpochBlock+0x244>)
3400d338:	f000 f9fc 	bl	3400d734 <__assert_func>
3400d33c:	6843      	ldr	r3, [r0, #4]
3400d33e:	b923      	cbnz	r3, 3400d34a <LL_ATON_RT_RunEpochBlock+0x22>
3400d340:	f240 2143 	movw	r1, #579	@ 0x243
3400d344:	4b8a      	ldr	r3, [pc, #552]	@ (3400d570 <LL_ATON_RT_RunEpochBlock+0x248>)
3400d346:	4a88      	ldr	r2, [pc, #544]	@ (3400d568 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d348:	e7f5      	b.n	3400d336 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.inference_started == false)
3400d34a:	7e03      	ldrb	r3, [r0, #24]
3400d34c:	b98b      	cbnz	r3, 3400d372 <LL_ATON_RT_RunEpochBlock+0x4a>
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3400d34e:	6803      	ldr	r3, [r0, #0]
3400d350:	b10b      	cbz	r3, 3400d356 <LL_ATON_RT_RunEpochBlock+0x2e>
3400d352:	689b      	ldr	r3, [r3, #8]
3400d354:	b923      	cbnz	r3, 3400d360 <LL_ATON_RT_RunEpochBlock+0x38>
3400d356:	f240 2155 	movw	r1, #597	@ 0x255
3400d35a:	4b86      	ldr	r3, [pc, #536]	@ (3400d574 <LL_ATON_RT_RunEpochBlock+0x24c>)
3400d35c:	4a82      	ldr	r2, [pc, #520]	@ (3400d568 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d35e:	e7ea      	b.n	3400d336 <LL_ATON_RT_RunEpochBlock+0xe>
    bool ret = nn_instance->network->ec_inference_init();
3400d360:	4798      	blx	r3
    LL_ATON_ASSERT(ret == true);
3400d362:	b920      	cbnz	r0, 3400d36e <LL_ATON_RT_RunEpochBlock+0x46>
3400d364:	f240 2159 	movw	r1, #601	@ 0x259
3400d368:	4b83      	ldr	r3, [pc, #524]	@ (3400d578 <LL_ATON_RT_RunEpochBlock+0x250>)
3400d36a:	4a7f      	ldr	r2, [pc, #508]	@ (3400d568 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d36c:	e7e3      	b.n	3400d336 <LL_ATON_RT_RunEpochBlock+0xe>
    nn_instance->exec_state.inference_started = true;
3400d36e:	2301      	movs	r3, #1
3400d370:	7623      	strb	r3, [r4, #24]
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
3400d372:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400d374:	8a03      	ldrh	r3, [r0, #16]
3400d376:	075a      	lsls	r2, r3, #29
3400d378:	d512      	bpl.n	3400d3a0 <LL_ATON_RT_RunEpochBlock+0x78>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400d37a:	f7ff fdc5 	bl	3400cf08 <EpochBlock_EpochControllerUnit>
3400d37e:	2301      	movs	r3, #1
3400d380:	fa03 f000 	lsl.w	r0, r3, r0
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
3400d384:	f894 3020 	ldrb.w	r3, [r4, #32]
3400d388:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
3400d38c:	b343      	cbz	r3, 3400d3e0 <LL_ATON_RT_RunEpochBlock+0xb8>
3400d38e:	2800      	cmp	r0, #0
3400d390:	d036      	beq.n	3400d400 <LL_ATON_RT_RunEpochBlock+0xd8>
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
3400d392:	69e3      	ldr	r3, [r4, #28]
3400d394:	ea30 0303 	bics.w	r3, r0, r3
3400d398:	d004      	beq.n	3400d3a4 <LL_ATON_RT_RunEpochBlock+0x7c>
        return LL_ATON_RT_WFE;
3400d39a:	2001      	movs	r0, #1
}
3400d39c:	b002      	add	sp, #8
3400d39e:	bd70      	pop	{r4, r5, r6, pc}
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400d3a0:	68c0      	ldr	r0, [r0, #12]
3400d3a2:	e7ef      	b.n	3400d384 <LL_ATON_RT_RunEpochBlock+0x5c>
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
3400d3a4:	4b75      	ldr	r3, [pc, #468]	@ (3400d57c <LL_ATON_RT_RunEpochBlock+0x254>)
3400d3a6:	681b      	ldr	r3, [r3, #0]
3400d3a8:	42a3      	cmp	r3, r4
3400d3aa:	d004      	beq.n	3400d3b6 <LL_ATON_RT_RunEpochBlock+0x8e>
3400d3ac:	f240 2171 	movw	r1, #625	@ 0x271
3400d3b0:	4b73      	ldr	r3, [pc, #460]	@ (3400d580 <LL_ATON_RT_RunEpochBlock+0x258>)
3400d3b2:	4a6d      	ldr	r2, [pc, #436]	@ (3400d568 <LL_ATON_RT_RunEpochBlock+0x240>)
3400d3b4:	e7bf      	b.n	3400d336 <LL_ATON_RT_RunEpochBlock+0xe>
3400d3b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400d3ba:	4a72      	ldr	r2, [pc, #456]	@ (3400d584 <LL_ATON_RT_RunEpochBlock+0x25c>)
3400d3bc:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400d3c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400d3c4:	f3bf 8f6f 	isb	sy
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
3400d3c8:	69e3      	ldr	r3, [r4, #28]
3400d3ca:	ea23 0300 	bic.w	r3, r3, r0
3400d3ce:	61e3      	str	r3, [r4, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400d3d0:	6051      	str	r1, [r2, #4]
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d3d2:	6860      	ldr	r0, [r4, #4]
3400d3d4:	4621      	mov	r1, r4
3400d3d6:	f7ff fdab 	bl	3400cf30 <__LL_ATON_RT_ExecEndEpochBlock>
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400d3da:	4620      	mov	r0, r4
3400d3dc:	f7ff fe12 	bl	3400d004 <__LL_ATON_RT_DetermineNextEpochBlock>
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
3400d3e0:	6863      	ldr	r3, [r4, #4]
3400d3e2:	8a1b      	ldrh	r3, [r3, #16]
3400d3e4:	071b      	lsls	r3, r3, #28
3400d3e6:	d534      	bpl.n	3400d452 <LL_ATON_RT_RunEpochBlock+0x12a>
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
3400d3e8:	6923      	ldr	r3, [r4, #16]
3400d3ea:	2b00      	cmp	r3, #0
3400d3ec:	f000 80b7 	beq.w	3400d55e <LL_ATON_RT_RunEpochBlock+0x236>
      LL_ATON_ASSERT(nn_instance == NULL);

      nn_instance = __ll_current_aton_ip_owner;
    }

    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400d3f0:	4b62      	ldr	r3, [pc, #392]	@ (3400d57c <LL_ATON_RT_RunEpochBlock+0x254>)
3400d3f2:	681a      	ldr	r2, [r3, #0]
3400d3f4:	b932      	cbnz	r2, 3400d404 <LL_ATON_RT_RunEpochBlock+0xdc>
3400d3f6:	2197      	movs	r1, #151	@ 0x97
3400d3f8:	4b63      	ldr	r3, [pc, #396]	@ (3400d588 <LL_ATON_RT_RunEpochBlock+0x260>)
3400d3fa:	4a64      	ldr	r2, [pc, #400]	@ (3400d58c <LL_ATON_RT_RunEpochBlock+0x264>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d3fc:	4864      	ldr	r0, [pc, #400]	@ (3400d590 <LL_ATON_RT_RunEpochBlock+0x268>)
3400d3fe:	e79b      	b.n	3400d338 <LL_ATON_RT_RunEpochBlock+0x10>
  bool this_run_executed_end_epoch = false;
3400d400:	4606      	mov	r6, r0
3400d402:	e7ed      	b.n	3400d3e0 <LL_ATON_RT_RunEpochBlock+0xb8>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
3400d404:	6862      	ldr	r2, [r4, #4]
3400d406:	8a12      	ldrh	r2, [r2, #16]
3400d408:	0716      	lsls	r6, r2, #28
3400d40a:	d403      	bmi.n	3400d414 <LL_ATON_RT_RunEpochBlock+0xec>
3400d40c:	2198      	movs	r1, #152	@ 0x98
3400d40e:	4b61      	ldr	r3, [pc, #388]	@ (3400d594 <LL_ATON_RT_RunEpochBlock+0x26c>)
3400d410:	4a5e      	ldr	r2, [pc, #376]	@ (3400d58c <LL_ATON_RT_RunEpochBlock+0x264>)
3400d412:	e7f3      	b.n	3400d3fc <LL_ATON_RT_RunEpochBlock+0xd4>
                          : EpochBlock_IsEpochInternal(nn_instance->exec_state.current_epoch_block));
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
3400d414:	6922      	ldr	r2, [r4, #16]
3400d416:	8a12      	ldrh	r2, [r2, #16]
3400d418:	0655      	lsls	r5, r2, #25
3400d41a:	d403      	bmi.n	3400d424 <LL_ATON_RT_RunEpochBlock+0xfc>
3400d41c:	219a      	movs	r1, #154	@ 0x9a
3400d41e:	4b5e      	ldr	r3, [pc, #376]	@ (3400d598 <LL_ATON_RT_RunEpochBlock+0x270>)
3400d420:	4a5a      	ldr	r2, [pc, #360]	@ (3400d58c <LL_ATON_RT_RunEpochBlock+0x264>)
3400d422:	e7eb      	b.n	3400d3fc <LL_ATON_RT_RunEpochBlock+0xd4>

    /* Clear owner */
    if (unlock)
    {
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
3400d424:	6818      	ldr	r0, [r3, #0]
3400d426:	f7ff fd33 	bl	3400ce90 <__ll_clear_aton_owner>
    }

    /* set old context */
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400d42a:	68e3      	ldr	r3, [r4, #12]
3400d42c:	b11b      	cbz	r3, 3400d436 <LL_ATON_RT_RunEpochBlock+0x10e>
3400d42e:	21a3      	movs	r1, #163	@ 0xa3
3400d430:	4b5a      	ldr	r3, [pc, #360]	@ (3400d59c <LL_ATON_RT_RunEpochBlock+0x274>)
3400d432:	4a56      	ldr	r2, [pc, #344]	@ (3400d58c <LL_ATON_RT_RunEpochBlock+0x264>)
3400d434:	e7e2      	b.n	3400d3fc <LL_ATON_RT_RunEpochBlock+0xd4>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
3400d436:	6922      	ldr	r2, [r4, #16]
3400d438:	6062      	str	r2, [r4, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3400d43a:	6962      	ldr	r2, [r4, #20]
3400d43c:	60a2      	str	r2, [r4, #8]

#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
3400d43e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
3400d440:	6262      	str	r2, [r4, #36]	@ 0x24
#endif

    /* reset saved context */
    nn_instance->exec_state.saved_current_epoch_block = NULL;
3400d442:	6123      	str	r3, [r4, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
3400d444:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400d446:	62a3      	str	r3, [r4, #40]	@ 0x28
        nn_instance->exec_state.current_epoch_block++;
3400d448:	6863      	ldr	r3, [r4, #4]
3400d44a:	3314      	adds	r3, #20
3400d44c:	6063      	str	r3, [r4, #4]
        return LL_ATON_RT_NO_WFE;
3400d44e:	2000      	movs	r0, #0
3400d450:	e7a4      	b.n	3400d39c <LL_ATON_RT_RunEpochBlock+0x74>
    if (this_run_executed_end_epoch)
3400d452:	2e00      	cmp	r6, #0
3400d454:	d1fb      	bne.n	3400d44e <LL_ATON_RT_RunEpochBlock+0x126>
    if (!nn_instance->exec_state.current_epoch_block_started)
3400d456:	f894 3020 	ldrb.w	r3, [r4, #32]
3400d45a:	2b00      	cmp	r3, #0
3400d45c:	d169      	bne.n	3400d532 <LL_ATON_RT_RunEpochBlock+0x20a>
      nn_instance->exec_state.current_epoch_block_started = true;
3400d45e:	2301      	movs	r3, #1
3400d460:	f884 3020 	strb.w	r3, [r4, #32]
      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d464:	6865      	ldr	r5, [r4, #4]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400d466:	68e3      	ldr	r3, [r4, #12]
3400d468:	b11b      	cbz	r3, 3400d472 <LL_ATON_RT_RunEpochBlock+0x14a>
3400d46a:	2161      	movs	r1, #97	@ 0x61
3400d46c:	4b4b      	ldr	r3, [pc, #300]	@ (3400d59c <LL_ATON_RT_RunEpochBlock+0x274>)
3400d46e:	4a4c      	ldr	r2, [pc, #304]	@ (3400d5a0 <LL_ATON_RT_RunEpochBlock+0x278>)
3400d470:	e761      	b.n	3400d336 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d472:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d474:	b11b      	cbz	r3, 3400d47e <LL_ATON_RT_RunEpochBlock+0x156>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
3400d476:	462a      	mov	r2, r5
3400d478:	4621      	mov	r1, r4
3400d47a:	4630      	mov	r0, r6
3400d47c:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
3400d47e:	8a2b      	ldrh	r3, [r5, #16]
  if (EpochBlock_IsEpochStart(eb))
3400d480:	07d8      	lsls	r0, r3, #31
3400d482:	d505      	bpl.n	3400d490 <LL_ATON_RT_RunEpochBlock+0x168>
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400d484:	69e2      	ldr	r2, [r4, #28]
3400d486:	b11a      	cbz	r2, 3400d490 <LL_ATON_RT_RunEpochBlock+0x168>
3400d488:	2156      	movs	r1, #86	@ 0x56
3400d48a:	4b46      	ldr	r3, [pc, #280]	@ (3400d5a4 <LL_ATON_RT_RunEpochBlock+0x27c>)
3400d48c:	4a46      	ldr	r2, [pc, #280]	@ (3400d5a8 <LL_ATON_RT_RunEpochBlock+0x280>)
3400d48e:	e7b5      	b.n	3400d3fc <LL_ATON_RT_RunEpochBlock+0xd4>
  if (EpochBlock_IsEpochPureHW(eb) ||
3400d490:	f013 0f50 	tst.w	r3, #80	@ 0x50
3400d494:	d015      	beq.n	3400d4c2 <LL_ATON_RT_RunEpochBlock+0x19a>
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
3400d496:	4a39      	ldr	r2, [pc, #228]	@ (3400d57c <LL_ATON_RT_RunEpochBlock+0x254>)
3400d498:	6811      	ldr	r1, [r2, #0]
3400d49a:	428c      	cmp	r4, r1
3400d49c:	d103      	bne.n	3400d4a6 <LL_ATON_RT_RunEpochBlock+0x17e>
3400d49e:	2131      	movs	r1, #49	@ 0x31
3400d4a0:	4b42      	ldr	r3, [pc, #264]	@ (3400d5ac <LL_ATON_RT_RunEpochBlock+0x284>)
3400d4a2:	4a43      	ldr	r2, [pc, #268]	@ (3400d5b0 <LL_ATON_RT_RunEpochBlock+0x288>)
3400d4a4:	e7aa      	b.n	3400d3fc <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
3400d4a6:	6811      	ldr	r1, [r2, #0]
3400d4a8:	b119      	cbz	r1, 3400d4b2 <LL_ATON_RT_RunEpochBlock+0x18a>
3400d4aa:	2135      	movs	r1, #53	@ 0x35
3400d4ac:	4b41      	ldr	r3, [pc, #260]	@ (3400d5b4 <LL_ATON_RT_RunEpochBlock+0x28c>)
3400d4ae:	4a40      	ldr	r2, [pc, #256]	@ (3400d5b0 <LL_ATON_RT_RunEpochBlock+0x288>)
3400d4b0:	e7a4      	b.n	3400d3fc <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400d4b2:	4941      	ldr	r1, [pc, #260]	@ (3400d5b8 <LL_ATON_RT_RunEpochBlock+0x290>)
3400d4b4:	6809      	ldr	r1, [r1, #0]
3400d4b6:	b119      	cbz	r1, 3400d4c0 <LL_ATON_RT_RunEpochBlock+0x198>
3400d4b8:	2139      	movs	r1, #57	@ 0x39
3400d4ba:	4b40      	ldr	r3, [pc, #256]	@ (3400d5bc <LL_ATON_RT_RunEpochBlock+0x294>)
3400d4bc:	4a3c      	ldr	r2, [pc, #240]	@ (3400d5b0 <LL_ATON_RT_RunEpochBlock+0x288>)
3400d4be:	e79d      	b.n	3400d3fc <LL_ATON_RT_RunEpochBlock+0xd4>
    __ll_current_aton_ip_owner = new_owner;
3400d4c0:	6014      	str	r4, [r2, #0]
  if (!EpochBlock_IsEpochBlob(eb))
3400d4c2:	0759      	lsls	r1, r3, #29
3400d4c4:	d41c      	bmi.n	3400d500 <LL_ATON_RT_RunEpochBlock+0x1d8>
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
3400d4c6:	f013 0f90 	tst.w	r3, #144	@ 0x90
3400d4ca:	d00a      	beq.n	3400d4e2 <LL_ATON_RT_RunEpochBlock+0x1ba>
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
3400d4cc:	4b2b      	ldr	r3, [pc, #172]	@ (3400d57c <LL_ATON_RT_RunEpochBlock+0x254>)
3400d4ce:	681b      	ldr	r3, [r3, #0]
3400d4d0:	429c      	cmp	r4, r3
3400d4d2:	d003      	beq.n	3400d4dc <LL_ATON_RT_RunEpochBlock+0x1b4>
3400d4d4:	2178      	movs	r1, #120	@ 0x78
3400d4d6:	4b2a      	ldr	r3, [pc, #168]	@ (3400d580 <LL_ATON_RT_RunEpochBlock+0x258>)
3400d4d8:	4a31      	ldr	r2, [pc, #196]	@ (3400d5a0 <LL_ATON_RT_RunEpochBlock+0x278>)
3400d4da:	e72c      	b.n	3400d336 <LL_ATON_RT_RunEpochBlock+0xe>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3400d4dc:	68e8      	ldr	r0, [r5, #12]
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400d4de:	f7ff fcf7 	bl	3400ced0 <__LL_ATON_RT_SetWaitMask>
  if (eb->start_epoch_block != NULL)
3400d4e2:	682b      	ldr	r3, [r5, #0]
3400d4e4:	b10b      	cbz	r3, 3400d4ea <LL_ATON_RT_RunEpochBlock+0x1c2>
    eb->start_epoch_block((const void *)eb);
3400d4e6:	4628      	mov	r0, r5
3400d4e8:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400d4ea:	8a2b      	ldrh	r3, [r5, #16]
3400d4ec:	075a      	lsls	r2, r3, #29
3400d4ee:	d51a      	bpl.n	3400d526 <LL_ATON_RT_RunEpochBlock+0x1fe>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400d4f0:	4628      	mov	r0, r5
3400d4f2:	f7ff fd09 	bl	3400cf08 <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d4f6:	b130      	cbz	r0, 3400d506 <LL_ATON_RT_RunEpochBlock+0x1de>
3400d4f8:	21a4      	movs	r1, #164	@ 0xa4
3400d4fa:	4b31      	ldr	r3, [pc, #196]	@ (3400d5c0 <LL_ATON_RT_RunEpochBlock+0x298>)
3400d4fc:	4a28      	ldr	r2, [pc, #160]	@ (3400d5a0 <LL_ATON_RT_RunEpochBlock+0x278>)
3400d4fe:	e71a      	b.n	3400d336 <LL_ATON_RT_RunEpochBlock+0xe>
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400d500:	f240 30ff 	movw	r0, #1023	@ 0x3ff
3400d504:	e7eb      	b.n	3400d4de <LL_ATON_RT_RunEpochBlock+0x1b6>
    conf.stepmode = 0;
3400d506:	f89d 2004 	ldrb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400d50a:	68ab      	ldr	r3, [r5, #8]
    conf.stepmode = 0;
3400d50c:	f360 0200 	bfi	r2, r0, #0, #1
    LL_EpochCtrl_Init(ecId, &conf);
3400d510:	4669      	mov	r1, sp
    conf.stepmode = 0;
3400d512:	f88d 2004 	strb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400d516:	9300      	str	r3, [sp, #0]
    LL_EpochCtrl_Init(ecId, &conf);
3400d518:	f7ff fb98 	bl	3400cc4c <LL_EpochCtrl_Init>
    ATON_ENABLE(EPOCHCTRL, ecId);
3400d51c:	4a29      	ldr	r2, [pc, #164]	@ (3400d5c4 <LL_ATON_RT_RunEpochBlock+0x29c>)
3400d51e:	6813      	ldr	r3, [r2, #0]
3400d520:	f043 0301 	orr.w	r3, r3, #1
3400d524:	6013      	str	r3, [r2, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400d526:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400d528:	b11b      	cbz	r3, 3400d532 <LL_ATON_RT_RunEpochBlock+0x20a>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3400d52a:	462a      	mov	r2, r5
3400d52c:	4621      	mov	r1, r4
3400d52e:	2001      	movs	r0, #1
3400d530:	4798      	blx	r3
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400d532:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400d534:	8a03      	ldrh	r3, [r0, #16]
3400d536:	075b      	lsls	r3, r3, #29
3400d538:	d50f      	bpl.n	3400d55a <LL_ATON_RT_RunEpochBlock+0x232>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400d53a:	f7ff fce5 	bl	3400cf08 <EpochBlock_EpochControllerUnit>
3400d53e:	2301      	movs	r3, #1
3400d540:	fa03 f000 	lsl.w	r0, r3, r0
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400d544:	2800      	cmp	r0, #0
3400d546:	f47f af28 	bne.w	3400d39a <LL_ATON_RT_RunEpochBlock+0x72>
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400d54a:	6860      	ldr	r0, [r4, #4]
3400d54c:	4621      	mov	r1, r4
3400d54e:	f7ff fcef 	bl	3400cf30 <__LL_ATON_RT_ExecEndEpochBlock>
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400d552:	4620      	mov	r0, r4
3400d554:	f7ff fd56 	bl	3400d004 <__LL_ATON_RT_DetermineNextEpochBlock>
      return LL_ATON_RT_NO_WFE;
3400d558:	e779      	b.n	3400d44e <LL_ATON_RT_RunEpochBlock+0x126>
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400d55a:	68c0      	ldr	r0, [r0, #12]
3400d55c:	e7f2      	b.n	3400d544 <LL_ATON_RT_RunEpochBlock+0x21c>
        return LL_ATON_RT_DONE;
3400d55e:	2002      	movs	r0, #2
3400d560:	e71c      	b.n	3400d39c <LL_ATON_RT_RunEpochBlock+0x74>
3400d562:	bf00      	nop
3400d564:	3401117f 	.word	0x3401117f
3400d568:	3401210a 	.word	0x3401210a
3400d56c:	3401104f 	.word	0x3401104f
3400d570:	34011407 	.word	0x34011407
3400d574:	34011442 	.word	0x34011442
3400d578:	340113fe 	.word	0x340113fe
3400d57c:	34012e2c 	.word	0x34012e2c
3400d580:	340114a4 	.word	0x340114a4
3400d584:	e000e100 	.word	0xe000e100
3400d588:	34010f64 	.word	0x34010f64
3400d58c:	340120e3 	.word	0x340120e3
3400d590:	34010eb0 	.word	0x34010eb0
3400d594:	340114ce 	.word	0x340114ce
3400d598:	3401156a 	.word	0x3401156a
3400d59c:	340115b6 	.word	0x340115b6
3400d5a0:	340120c2 	.word	0x340120c2
3400d5a4:	3401119a 	.word	0x3401119a
3400d5a8:	340120a3 	.word	0x340120a3
3400d5ac:	340115ee 	.word	0x340115ee
3400d5b0:	3401208f 	.word	0x3401208f
3400d5b4:	34011616 	.word	0x34011616
3400d5b8:	34012e28 	.word	0x34012e28
3400d5bc:	34010f48 	.word	0x34010f48
3400d5c0:	34011046 	.word	0x34011046
3400d5c4:	580fe000 	.word	0x580fe000

3400d5c8 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3400d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400d5ca:	4b38      	ldr	r3, [pc, #224]	@ (3400d6ac <NPU0_IRQHandler+0xe4>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3400d5cc:	4c38      	ldr	r4, [pc, #224]	@ (3400d6b0 <NPU0_IRQHandler+0xe8>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400d5ce:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
3400d5d0:	6823      	ldr	r3, [r4, #0]
3400d5d2:	b343      	cbz	r3, 3400d626 <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3400d5d4:	6823      	ldr	r3, [r4, #0]
3400d5d6:	685b      	ldr	r3, [r3, #4]
3400d5d8:	b933      	cbnz	r3, 3400d5e8 <NPU0_IRQHandler+0x20>
3400d5da:	f240 31b1 	movw	r1, #945	@ 0x3b1
3400d5de:	4b35      	ldr	r3, [pc, #212]	@ (3400d6b4 <NPU0_IRQHandler+0xec>)
3400d5e0:	4a35      	ldr	r2, [pc, #212]	@ (3400d6b8 <NPU0_IRQHandler+0xf0>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d5e2:	4836      	ldr	r0, [pc, #216]	@ (3400d6bc <NPU0_IRQHandler+0xf4>)
3400d5e4:	f000 f8a6 	bl	3400d734 <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400d5e8:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3400d5ea:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400d5ec:	8a1b      	ldrh	r3, [r3, #16]
3400d5ee:	075b      	lsls	r3, r3, #29
3400d5f0:	d40c      	bmi.n	3400d60c <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
3400d5f2:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
3400d5f6:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400d5fa:	f7ff fd47 	bl	3400d08c <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400d5fe:	6823      	ldr	r3, [r4, #0]
3400d600:	b99b      	cbnz	r3, 3400d62a <NPU0_IRQHandler+0x62>
3400d602:	f240 31d2 	movw	r1, #978	@ 0x3d2
3400d606:	4b2e      	ldr	r3, [pc, #184]	@ (3400d6c0 <NPU0_IRQHandler+0xf8>)
3400d608:	4a2b      	ldr	r2, [pc, #172]	@ (3400d6b8 <NPU0_IRQHandler+0xf0>)
3400d60a:	e7ea      	b.n	3400d5e2 <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400d60c:	6823      	ldr	r3, [r4, #0]
3400d60e:	6858      	ldr	r0, [r3, #4]
3400d610:	f7ff fc7a 	bl	3400cf08 <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d614:	b120      	cbz	r0, 3400d620 <NPU0_IRQHandler+0x58>
3400d616:	f240 31be 	movw	r1, #958	@ 0x3be
3400d61a:	4b2a      	ldr	r3, [pc, #168]	@ (3400d6c4 <NPU0_IRQHandler+0xfc>)
3400d61c:	4a26      	ldr	r2, [pc, #152]	@ (3400d6b8 <NPU0_IRQHandler+0xf0>)
3400d61e:	e7e0      	b.n	3400d5e2 <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
3400d620:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
3400d624:	e7e9      	b.n	3400d5fa <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400d626:	4628      	mov	r0, r5
3400d628:	e7e7      	b.n	3400d5fa <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3400d62a:	6823      	ldr	r3, [r4, #0]
3400d62c:	685b      	ldr	r3, [r3, #4]
3400d62e:	8a1b      	ldrh	r3, [r3, #16]
3400d630:	f013 0304 	ands.w	r3, r3, #4
3400d634:	d123      	bne.n	3400d67e <NPU0_IRQHandler+0xb6>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3400d636:	6822      	ldr	r2, [r4, #0]
3400d638:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
3400d63a:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
3400d63c:	402a      	ands	r2, r5
3400d63e:	d017      	beq.n	3400d670 <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
3400d640:	f04f 0c01 	mov.w	ip, #1
3400d644:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400d646:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400d648:	4e1f      	ldr	r6, [pc, #124]	@ (3400d6c8 <NPU0_IRQHandler+0x100>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400d64a:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
3400d64c:	fa22 f703 	lsr.w	r7, r2, r3
3400d650:	07ff      	lsls	r7, r7, #31
3400d652:	d507      	bpl.n	3400d664 <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400d654:	031f      	lsls	r7, r3, #12
3400d656:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
3400d65a:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
3400d65e:	fa0c f703 	lsl.w	r7, ip, r3
3400d662:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
3400d664:	3801      	subs	r0, #1
3400d666:	f103 0301 	add.w	r3, r3, #1
3400d66a:	d1ef      	bne.n	3400d64c <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400d66c:	6823      	ldr	r3, [r4, #0]
3400d66e:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
3400d670:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3400d674:	4b0d      	ldr	r3, [pc, #52]	@ (3400d6ac <NPU0_IRQHandler+0xe4>)
3400d676:	611d      	str	r5, [r3, #16]
3400d678:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
3400d67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400d67e:	6823      	ldr	r3, [r4, #0]
3400d680:	6858      	ldr	r0, [r3, #4]
3400d682:	f7ff fc41 	bl	3400cf08 <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400d686:	b120      	cbz	r0, 3400d692 <NPU0_IRQHandler+0xca>
3400d688:	f240 3191 	movw	r1, #913	@ 0x391
3400d68c:	4b0d      	ldr	r3, [pc, #52]	@ (3400d6c4 <NPU0_IRQHandler+0xfc>)
3400d68e:	4a0f      	ldr	r2, [pc, #60]	@ (3400d6cc <NPU0_IRQHandler+0x104>)
3400d690:	e7a7      	b.n	3400d5e2 <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3400d692:	00eb      	lsls	r3, r5, #3
3400d694:	d5ec      	bpl.n	3400d670 <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3400d696:	4b0e      	ldr	r3, [pc, #56]	@ (3400d6d0 <NPU0_IRQHandler+0x108>)
3400d698:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3400d69a:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400d69c:	6823      	ldr	r3, [r4, #0]
3400d69e:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400d6a0:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
3400d6a2:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400d6a6:	61d3      	str	r3, [r2, #28]
3400d6a8:	e7e2      	b.n	3400d670 <NPU0_IRQHandler+0xa8>
3400d6aa:	bf00      	nop
3400d6ac:	580e1000 	.word	0x580e1000
3400d6b0:	34012e2c 	.word	0x34012e2c
3400d6b4:	34011640 	.word	0x34011640
3400d6b8:	34012003 	.word	0x34012003
3400d6bc:	3401104f 	.word	0x3401104f
3400d6c0:	34010f64 	.word	0x34010f64
3400d6c4:	34011046 	.word	0x34011046
3400d6c8:	580e503c 	.word	0x580e503c
3400d6cc:	34011fd5 	.word	0x34011fd5
3400d6d0:	580fe000 	.word	0x580fe000

3400d6d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3400d6d4:	480f      	ldr	r0, [pc, #60]	@ (3400d714 <LoopForever+0x4>)
  msr   MSPLIM, r0
3400d6d6:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3400d6da:	480f      	ldr	r0, [pc, #60]	@ (3400d718 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3400d6dc:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3400d6de:	f7f4 fc91 	bl	34002004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3400d6e2:	480e      	ldr	r0, [pc, #56]	@ (3400d71c <LoopForever+0xc>)
  ldr r1, =_edata
3400d6e4:	490e      	ldr	r1, [pc, #56]	@ (3400d720 <LoopForever+0x10>)
  ldr r2, =_sidata
3400d6e6:	4a0f      	ldr	r2, [pc, #60]	@ (3400d724 <LoopForever+0x14>)
  movs r3, #0
3400d6e8:	2300      	movs	r3, #0
  b LoopCopyDataInit
3400d6ea:	e002      	b.n	3400d6f2 <LoopCopyDataInit>

3400d6ec <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3400d6ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3400d6ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3400d6f0:	3304      	adds	r3, #4

3400d6f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3400d6f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3400d6f4:	428c      	cmp	r4, r1
  bcc CopyDataInit
3400d6f6:	d3f9      	bcc.n	3400d6ec <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3400d6f8:	4a0b      	ldr	r2, [pc, #44]	@ (3400d728 <LoopForever+0x18>)
  ldr r4, =_ebss
3400d6fa:	4c0c      	ldr	r4, [pc, #48]	@ (3400d72c <LoopForever+0x1c>)
  movs r3, #0
3400d6fc:	2300      	movs	r3, #0
  b LoopFillZerobss
3400d6fe:	e001      	b.n	3400d704 <LoopFillZerobss>

3400d700 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3400d700:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3400d702:	3204      	adds	r2, #4

3400d704 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3400d704:	42a2      	cmp	r2, r4
  bcc FillZerobss
3400d706:	d3fb      	bcc.n	3400d700 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3400d708:	f001 fa56 	bl	3400ebb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3400d70c:	f7f3 fe04 	bl	34001318 <main>

3400d710 <LoopForever>:

LoopForever:
  b LoopForever
3400d710:	e7fe      	b.n	3400d710 <LoopForever>
3400d712:	0000      	.short	0x0000
  ldr   r0, =_sstack
3400d714:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3400d718:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3400d71c:	34012364 	.word	0x34012364
  ldr r1, =_edata
3400d720:	34012580 	.word	0x34012580
  ldr r2, =_sidata
3400d724:	34012364 	.word	0x34012364
  ldr r2, =_sbss
3400d728:	34012580 	.word	0x34012580
  ldr r4, =_ebss
3400d72c:	34012f80 	.word	0x34012f80

3400d730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3400d730:	e7fe      	b.n	3400d730 <ADC1_2_IRQHandler>
	...

3400d734 <__assert_func>:
3400d734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400d736:	4614      	mov	r4, r2
3400d738:	461a      	mov	r2, r3
3400d73a:	4b09      	ldr	r3, [pc, #36]	@ (3400d760 <__assert_func+0x2c>)
3400d73c:	4605      	mov	r5, r0
3400d73e:	681b      	ldr	r3, [r3, #0]
3400d740:	68d8      	ldr	r0, [r3, #12]
3400d742:	b14c      	cbz	r4, 3400d758 <__assert_func+0x24>
3400d744:	4b07      	ldr	r3, [pc, #28]	@ (3400d764 <__assert_func+0x30>)
3400d746:	9100      	str	r1, [sp, #0]
3400d748:	4907      	ldr	r1, [pc, #28]	@ (3400d768 <__assert_func+0x34>)
3400d74a:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400d74e:	462b      	mov	r3, r5
3400d750:	f000 fe60 	bl	3400e414 <fiprintf>
3400d754:	f001 fa72 	bl	3400ec3c <abort>
3400d758:	4b04      	ldr	r3, [pc, #16]	@ (3400d76c <__assert_func+0x38>)
3400d75a:	461c      	mov	r4, r3
3400d75c:	e7f3      	b.n	3400d746 <__assert_func+0x12>
3400d75e:	bf00      	nop
3400d760:	340123c4 	.word	0x340123c4
3400d764:	3401168a 	.word	0x3401168a
3400d768:	34011697 	.word	0x34011697
3400d76c:	34010d32 	.word	0x34010d32

3400d770 <malloc>:
3400d770:	4b02      	ldr	r3, [pc, #8]	@ (3400d77c <malloc+0xc>)
3400d772:	4601      	mov	r1, r0
3400d774:	6818      	ldr	r0, [r3, #0]
3400d776:	f000 b825 	b.w	3400d7c4 <_malloc_r>
3400d77a:	bf00      	nop
3400d77c:	340123c4 	.word	0x340123c4

3400d780 <sbrk_aligned>:
3400d780:	b570      	push	{r4, r5, r6, lr}
3400d782:	4e0f      	ldr	r6, [pc, #60]	@ (3400d7c0 <sbrk_aligned+0x40>)
3400d784:	460c      	mov	r4, r1
3400d786:	4605      	mov	r5, r0
3400d788:	6831      	ldr	r1, [r6, #0]
3400d78a:	b911      	cbnz	r1, 3400d792 <sbrk_aligned+0x12>
3400d78c:	f001 f9ec 	bl	3400eb68 <_sbrk_r>
3400d790:	6030      	str	r0, [r6, #0]
3400d792:	4621      	mov	r1, r4
3400d794:	4628      	mov	r0, r5
3400d796:	f001 f9e7 	bl	3400eb68 <_sbrk_r>
3400d79a:	1c43      	adds	r3, r0, #1
3400d79c:	d103      	bne.n	3400d7a6 <sbrk_aligned+0x26>
3400d79e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3400d7a2:	4620      	mov	r0, r4
3400d7a4:	bd70      	pop	{r4, r5, r6, pc}
3400d7a6:	1cc4      	adds	r4, r0, #3
3400d7a8:	f024 0403 	bic.w	r4, r4, #3
3400d7ac:	42a0      	cmp	r0, r4
3400d7ae:	d0f8      	beq.n	3400d7a2 <sbrk_aligned+0x22>
3400d7b0:	1a21      	subs	r1, r4, r0
3400d7b2:	4628      	mov	r0, r5
3400d7b4:	f001 f9d8 	bl	3400eb68 <_sbrk_r>
3400d7b8:	3001      	adds	r0, #1
3400d7ba:	d1f2      	bne.n	3400d7a2 <sbrk_aligned+0x22>
3400d7bc:	e7ef      	b.n	3400d79e <sbrk_aligned+0x1e>
3400d7be:	bf00      	nop
3400d7c0:	34012e30 	.word	0x34012e30

3400d7c4 <_malloc_r>:
3400d7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400d7c8:	1ccd      	adds	r5, r1, #3
3400d7ca:	4606      	mov	r6, r0
3400d7cc:	f025 0503 	bic.w	r5, r5, #3
3400d7d0:	3508      	adds	r5, #8
3400d7d2:	2d0c      	cmp	r5, #12
3400d7d4:	bf38      	it	cc
3400d7d6:	250c      	movcc	r5, #12
3400d7d8:	2d00      	cmp	r5, #0
3400d7da:	db01      	blt.n	3400d7e0 <_malloc_r+0x1c>
3400d7dc:	42a9      	cmp	r1, r5
3400d7de:	d904      	bls.n	3400d7ea <_malloc_r+0x26>
3400d7e0:	230c      	movs	r3, #12
3400d7e2:	6033      	str	r3, [r6, #0]
3400d7e4:	2000      	movs	r0, #0
3400d7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400d7ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3400d8c0 <_malloc_r+0xfc>
3400d7ee:	f000 f869 	bl	3400d8c4 <__malloc_lock>
3400d7f2:	f8d8 3000 	ldr.w	r3, [r8]
3400d7f6:	461c      	mov	r4, r3
3400d7f8:	bb44      	cbnz	r4, 3400d84c <_malloc_r+0x88>
3400d7fa:	4629      	mov	r1, r5
3400d7fc:	4630      	mov	r0, r6
3400d7fe:	f7ff ffbf 	bl	3400d780 <sbrk_aligned>
3400d802:	1c43      	adds	r3, r0, #1
3400d804:	4604      	mov	r4, r0
3400d806:	d158      	bne.n	3400d8ba <_malloc_r+0xf6>
3400d808:	f8d8 4000 	ldr.w	r4, [r8]
3400d80c:	4627      	mov	r7, r4
3400d80e:	2f00      	cmp	r7, #0
3400d810:	d143      	bne.n	3400d89a <_malloc_r+0xd6>
3400d812:	2c00      	cmp	r4, #0
3400d814:	d04b      	beq.n	3400d8ae <_malloc_r+0xea>
3400d816:	6823      	ldr	r3, [r4, #0]
3400d818:	4639      	mov	r1, r7
3400d81a:	4630      	mov	r0, r6
3400d81c:	eb04 0903 	add.w	r9, r4, r3
3400d820:	f001 f9a2 	bl	3400eb68 <_sbrk_r>
3400d824:	4581      	cmp	r9, r0
3400d826:	d142      	bne.n	3400d8ae <_malloc_r+0xea>
3400d828:	6821      	ldr	r1, [r4, #0]
3400d82a:	4630      	mov	r0, r6
3400d82c:	1a6d      	subs	r5, r5, r1
3400d82e:	4629      	mov	r1, r5
3400d830:	f7ff ffa6 	bl	3400d780 <sbrk_aligned>
3400d834:	3001      	adds	r0, #1
3400d836:	d03a      	beq.n	3400d8ae <_malloc_r+0xea>
3400d838:	6823      	ldr	r3, [r4, #0]
3400d83a:	442b      	add	r3, r5
3400d83c:	6023      	str	r3, [r4, #0]
3400d83e:	f8d8 3000 	ldr.w	r3, [r8]
3400d842:	685a      	ldr	r2, [r3, #4]
3400d844:	bb62      	cbnz	r2, 3400d8a0 <_malloc_r+0xdc>
3400d846:	f8c8 7000 	str.w	r7, [r8]
3400d84a:	e00f      	b.n	3400d86c <_malloc_r+0xa8>
3400d84c:	6822      	ldr	r2, [r4, #0]
3400d84e:	1b52      	subs	r2, r2, r5
3400d850:	d420      	bmi.n	3400d894 <_malloc_r+0xd0>
3400d852:	2a0b      	cmp	r2, #11
3400d854:	d917      	bls.n	3400d886 <_malloc_r+0xc2>
3400d856:	1961      	adds	r1, r4, r5
3400d858:	42a3      	cmp	r3, r4
3400d85a:	6025      	str	r5, [r4, #0]
3400d85c:	bf18      	it	ne
3400d85e:	6059      	strne	r1, [r3, #4]
3400d860:	6863      	ldr	r3, [r4, #4]
3400d862:	bf08      	it	eq
3400d864:	f8c8 1000 	streq.w	r1, [r8]
3400d868:	5162      	str	r2, [r4, r5]
3400d86a:	604b      	str	r3, [r1, #4]
3400d86c:	4630      	mov	r0, r6
3400d86e:	f000 f82f 	bl	3400d8d0 <__malloc_unlock>
3400d872:	f104 000b 	add.w	r0, r4, #11
3400d876:	1d23      	adds	r3, r4, #4
3400d878:	f020 0007 	bic.w	r0, r0, #7
3400d87c:	1ac2      	subs	r2, r0, r3
3400d87e:	bf1c      	itt	ne
3400d880:	1a1b      	subne	r3, r3, r0
3400d882:	50a3      	strne	r3, [r4, r2]
3400d884:	e7af      	b.n	3400d7e6 <_malloc_r+0x22>
3400d886:	6862      	ldr	r2, [r4, #4]
3400d888:	42a3      	cmp	r3, r4
3400d88a:	bf0c      	ite	eq
3400d88c:	f8c8 2000 	streq.w	r2, [r8]
3400d890:	605a      	strne	r2, [r3, #4]
3400d892:	e7eb      	b.n	3400d86c <_malloc_r+0xa8>
3400d894:	4623      	mov	r3, r4
3400d896:	6864      	ldr	r4, [r4, #4]
3400d898:	e7ae      	b.n	3400d7f8 <_malloc_r+0x34>
3400d89a:	463c      	mov	r4, r7
3400d89c:	687f      	ldr	r7, [r7, #4]
3400d89e:	e7b6      	b.n	3400d80e <_malloc_r+0x4a>
3400d8a0:	461a      	mov	r2, r3
3400d8a2:	685b      	ldr	r3, [r3, #4]
3400d8a4:	42a3      	cmp	r3, r4
3400d8a6:	d1fb      	bne.n	3400d8a0 <_malloc_r+0xdc>
3400d8a8:	2300      	movs	r3, #0
3400d8aa:	6053      	str	r3, [r2, #4]
3400d8ac:	e7de      	b.n	3400d86c <_malloc_r+0xa8>
3400d8ae:	230c      	movs	r3, #12
3400d8b0:	4630      	mov	r0, r6
3400d8b2:	6033      	str	r3, [r6, #0]
3400d8b4:	f000 f80c 	bl	3400d8d0 <__malloc_unlock>
3400d8b8:	e794      	b.n	3400d7e4 <_malloc_r+0x20>
3400d8ba:	6005      	str	r5, [r0, #0]
3400d8bc:	e7d6      	b.n	3400d86c <_malloc_r+0xa8>
3400d8be:	bf00      	nop
3400d8c0:	34012e34 	.word	0x34012e34

3400d8c4 <__malloc_lock>:
3400d8c4:	4801      	ldr	r0, [pc, #4]	@ (3400d8cc <__malloc_lock+0x8>)
3400d8c6:	f001 b99c 	b.w	3400ec02 <__retarget_lock_acquire_recursive>
3400d8ca:	bf00      	nop
3400d8cc:	34012f78 	.word	0x34012f78

3400d8d0 <__malloc_unlock>:
3400d8d0:	4801      	ldr	r0, [pc, #4]	@ (3400d8d8 <__malloc_unlock+0x8>)
3400d8d2:	f001 b997 	b.w	3400ec04 <__retarget_lock_release_recursive>
3400d8d6:	bf00      	nop
3400d8d8:	34012f78 	.word	0x34012f78

3400d8dc <__cvt>:
3400d8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
3400d8de:	ed2d 8b02 	vpush	{d8}
3400d8e2:	eeb0 8b40 	vmov.f64	d8, d0
3400d8e6:	b085      	sub	sp, #20
3400d8e8:	4617      	mov	r7, r2
3400d8ea:	460c      	mov	r4, r1
3400d8ec:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3400d8ee:	ee18 2a90 	vmov	r2, s17
3400d8f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400d8f4:	f025 0520 	bic.w	r5, r5, #32
3400d8f8:	2a00      	cmp	r2, #0
3400d8fa:	bfb6      	itet	lt
3400d8fc:	222d      	movlt	r2, #45	@ 0x2d
3400d8fe:	2200      	movge	r2, #0
3400d900:	eeb1 8b40 	vneglt.f64	d8, d0
3400d904:	2d46      	cmp	r5, #70	@ 0x46
3400d906:	701a      	strb	r2, [r3, #0]
3400d908:	d004      	beq.n	3400d914 <__cvt+0x38>
3400d90a:	2d45      	cmp	r5, #69	@ 0x45
3400d90c:	d100      	bne.n	3400d910 <__cvt+0x34>
3400d90e:	3401      	adds	r4, #1
3400d910:	2102      	movs	r1, #2
3400d912:	e000      	b.n	3400d916 <__cvt+0x3a>
3400d914:	2103      	movs	r1, #3
3400d916:	ab03      	add	r3, sp, #12
3400d918:	eeb0 0b48 	vmov.f64	d0, d8
3400d91c:	4622      	mov	r2, r4
3400d91e:	9301      	str	r3, [sp, #4]
3400d920:	ab02      	add	r3, sp, #8
3400d922:	9300      	str	r3, [sp, #0]
3400d924:	4633      	mov	r3, r6
3400d926:	f001 fa1f 	bl	3400ed68 <_dtoa_r>
3400d92a:	2d47      	cmp	r5, #71	@ 0x47
3400d92c:	d114      	bne.n	3400d958 <__cvt+0x7c>
3400d92e:	07fb      	lsls	r3, r7, #31
3400d930:	d50a      	bpl.n	3400d948 <__cvt+0x6c>
3400d932:	1902      	adds	r2, r0, r4
3400d934:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400d938:	2130      	movs	r1, #48	@ 0x30
3400d93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d93e:	bf08      	it	eq
3400d940:	9203      	streq	r2, [sp, #12]
3400d942:	9b03      	ldr	r3, [sp, #12]
3400d944:	4293      	cmp	r3, r2
3400d946:	d319      	bcc.n	3400d97c <__cvt+0xa0>
3400d948:	9b03      	ldr	r3, [sp, #12]
3400d94a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400d94c:	1a1b      	subs	r3, r3, r0
3400d94e:	6013      	str	r3, [r2, #0]
3400d950:	b005      	add	sp, #20
3400d952:	ecbd 8b02 	vpop	{d8}
3400d956:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400d958:	2d46      	cmp	r5, #70	@ 0x46
3400d95a:	eb00 0204 	add.w	r2, r0, r4
3400d95e:	d1e9      	bne.n	3400d934 <__cvt+0x58>
3400d960:	7803      	ldrb	r3, [r0, #0]
3400d962:	2b30      	cmp	r3, #48	@ 0x30
3400d964:	d107      	bne.n	3400d976 <__cvt+0x9a>
3400d966:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400d96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d96e:	bf1c      	itt	ne
3400d970:	f1c4 0401 	rsbne	r4, r4, #1
3400d974:	6034      	strne	r4, [r6, #0]
3400d976:	6833      	ldr	r3, [r6, #0]
3400d978:	441a      	add	r2, r3
3400d97a:	e7db      	b.n	3400d934 <__cvt+0x58>
3400d97c:	1c5c      	adds	r4, r3, #1
3400d97e:	9403      	str	r4, [sp, #12]
3400d980:	7019      	strb	r1, [r3, #0]
3400d982:	e7de      	b.n	3400d942 <__cvt+0x66>

3400d984 <__exponent>:
3400d984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400d986:	2900      	cmp	r1, #0
3400d988:	7002      	strb	r2, [r0, #0]
3400d98a:	bfba      	itte	lt
3400d98c:	4249      	neglt	r1, r1
3400d98e:	232d      	movlt	r3, #45	@ 0x2d
3400d990:	232b      	movge	r3, #43	@ 0x2b
3400d992:	2909      	cmp	r1, #9
3400d994:	7043      	strb	r3, [r0, #1]
3400d996:	dd28      	ble.n	3400d9ea <__exponent+0x66>
3400d998:	f10d 0307 	add.w	r3, sp, #7
3400d99c:	270a      	movs	r7, #10
3400d99e:	461d      	mov	r5, r3
3400d9a0:	461a      	mov	r2, r3
3400d9a2:	3b01      	subs	r3, #1
3400d9a4:	fbb1 f6f7 	udiv	r6, r1, r7
3400d9a8:	fb07 1416 	mls	r4, r7, r6, r1
3400d9ac:	3430      	adds	r4, #48	@ 0x30
3400d9ae:	f802 4c01 	strb.w	r4, [r2, #-1]
3400d9b2:	460c      	mov	r4, r1
3400d9b4:	4631      	mov	r1, r6
3400d9b6:	2c63      	cmp	r4, #99	@ 0x63
3400d9b8:	dcf2      	bgt.n	3400d9a0 <__exponent+0x1c>
3400d9ba:	3130      	adds	r1, #48	@ 0x30
3400d9bc:	1e94      	subs	r4, r2, #2
3400d9be:	f803 1c01 	strb.w	r1, [r3, #-1]
3400d9c2:	1c41      	adds	r1, r0, #1
3400d9c4:	4623      	mov	r3, r4
3400d9c6:	42ab      	cmp	r3, r5
3400d9c8:	d30a      	bcc.n	3400d9e0 <__exponent+0x5c>
3400d9ca:	f10d 0309 	add.w	r3, sp, #9
3400d9ce:	1a9b      	subs	r3, r3, r2
3400d9d0:	42ac      	cmp	r4, r5
3400d9d2:	bf88      	it	hi
3400d9d4:	2300      	movhi	r3, #0
3400d9d6:	3302      	adds	r3, #2
3400d9d8:	4403      	add	r3, r0
3400d9da:	1a18      	subs	r0, r3, r0
3400d9dc:	b003      	add	sp, #12
3400d9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400d9e0:	f813 6b01 	ldrb.w	r6, [r3], #1
3400d9e4:	f801 6f01 	strb.w	r6, [r1, #1]!
3400d9e8:	e7ed      	b.n	3400d9c6 <__exponent+0x42>
3400d9ea:	2330      	movs	r3, #48	@ 0x30
3400d9ec:	3130      	adds	r1, #48	@ 0x30
3400d9ee:	7083      	strb	r3, [r0, #2]
3400d9f0:	1d03      	adds	r3, r0, #4
3400d9f2:	70c1      	strb	r1, [r0, #3]
3400d9f4:	e7f1      	b.n	3400d9da <__exponent+0x56>
	...

3400d9f8 <_printf_float>:
3400d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400d9fc:	b08d      	sub	sp, #52	@ 0x34
3400d9fe:	460c      	mov	r4, r1
3400da00:	4616      	mov	r6, r2
3400da02:	461f      	mov	r7, r3
3400da04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3400da08:	4605      	mov	r5, r0
3400da0a:	f001 f875 	bl	3400eaf8 <_localeconv_r>
3400da0e:	f8d0 b000 	ldr.w	fp, [r0]
3400da12:	4658      	mov	r0, fp
3400da14:	f7f2 febc 	bl	34000790 <strlen>
3400da18:	2300      	movs	r3, #0
3400da1a:	f894 9018 	ldrb.w	r9, [r4, #24]
3400da1e:	930a      	str	r3, [sp, #40]	@ 0x28
3400da20:	f8d8 3000 	ldr.w	r3, [r8]
3400da24:	6822      	ldr	r2, [r4, #0]
3400da26:	3307      	adds	r3, #7
3400da28:	9005      	str	r0, [sp, #20]
3400da2a:	f023 0307 	bic.w	r3, r3, #7
3400da2e:	f103 0108 	add.w	r1, r3, #8
3400da32:	f8c8 1000 	str.w	r1, [r8]
3400da36:	ed93 0b00 	vldr	d0, [r3]
3400da3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3400dc98 <_printf_float+0x2a0>
3400da3e:	eeb0 7bc0 	vabs.f64	d7, d0
3400da42:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3400da46:	eeb4 7b46 	vcmp.f64	d7, d6
3400da4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400da4e:	dd24      	ble.n	3400da9a <_printf_float+0xa2>
3400da50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3400da54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400da58:	d502      	bpl.n	3400da60 <_printf_float+0x68>
3400da5a:	232d      	movs	r3, #45	@ 0x2d
3400da5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400da60:	498f      	ldr	r1, [pc, #572]	@ (3400dca0 <_printf_float+0x2a8>)
3400da62:	4b90      	ldr	r3, [pc, #576]	@ (3400dca4 <_printf_float+0x2ac>)
3400da64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3400da68:	bf8c      	ite	hi
3400da6a:	4688      	movhi	r8, r1
3400da6c:	4698      	movls	r8, r3
3400da6e:	f022 0204 	bic.w	r2, r2, #4
3400da72:	2303      	movs	r3, #3
3400da74:	f04f 0a00 	mov.w	sl, #0
3400da78:	6022      	str	r2, [r4, #0]
3400da7a:	6123      	str	r3, [r4, #16]
3400da7c:	4633      	mov	r3, r6
3400da7e:	aa0b      	add	r2, sp, #44	@ 0x2c
3400da80:	4621      	mov	r1, r4
3400da82:	4628      	mov	r0, r5
3400da84:	9700      	str	r7, [sp, #0]
3400da86:	f000 f9d1 	bl	3400de2c <_printf_common>
3400da8a:	3001      	adds	r0, #1
3400da8c:	f040 8089 	bne.w	3400dba2 <_printf_float+0x1aa>
3400da90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400da94:	b00d      	add	sp, #52	@ 0x34
3400da96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400da9a:	eeb4 0b40 	vcmp.f64	d0, d0
3400da9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400daa2:	d709      	bvc.n	3400dab8 <_printf_float+0xc0>
3400daa4:	ee10 3a90 	vmov	r3, s1
3400daa8:	497f      	ldr	r1, [pc, #508]	@ (3400dca8 <_printf_float+0x2b0>)
3400daaa:	2b00      	cmp	r3, #0
3400daac:	bfbc      	itt	lt
3400daae:	232d      	movlt	r3, #45	@ 0x2d
3400dab0:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3400dab4:	4b7d      	ldr	r3, [pc, #500]	@ (3400dcac <_printf_float+0x2b4>)
3400dab6:	e7d5      	b.n	3400da64 <_printf_float+0x6c>
3400dab8:	6863      	ldr	r3, [r4, #4]
3400daba:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3400dabe:	1c59      	adds	r1, r3, #1
3400dac0:	d139      	bne.n	3400db36 <_printf_float+0x13e>
3400dac2:	2306      	movs	r3, #6
3400dac4:	6063      	str	r3, [r4, #4]
3400dac6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3400daca:	2300      	movs	r3, #0
3400dacc:	4628      	mov	r0, r5
3400dace:	6022      	str	r2, [r4, #0]
3400dad0:	9303      	str	r3, [sp, #12]
3400dad2:	ab0a      	add	r3, sp, #40	@ 0x28
3400dad4:	e9cd 9301 	strd	r9, r3, [sp, #4]
3400dad8:	ab09      	add	r3, sp, #36	@ 0x24
3400dada:	9300      	str	r3, [sp, #0]
3400dadc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3400dae0:	6861      	ldr	r1, [r4, #4]
3400dae2:	f7ff fefb 	bl	3400d8dc <__cvt>
3400dae6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400daea:	4680      	mov	r8, r0
3400daec:	9909      	ldr	r1, [sp, #36]	@ 0x24
3400daee:	d129      	bne.n	3400db44 <_printf_float+0x14c>
3400daf0:	1cc8      	adds	r0, r1, #3
3400daf2:	db02      	blt.n	3400dafa <_printf_float+0x102>
3400daf4:	6863      	ldr	r3, [r4, #4]
3400daf6:	4299      	cmp	r1, r3
3400daf8:	dd41      	ble.n	3400db7e <_printf_float+0x186>
3400dafa:	f1a9 0902 	sub.w	r9, r9, #2
3400dafe:	fa5f f989 	uxtb.w	r9, r9
3400db02:	3901      	subs	r1, #1
3400db04:	464a      	mov	r2, r9
3400db06:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3400db0a:	9109      	str	r1, [sp, #36]	@ 0x24
3400db0c:	f7ff ff3a 	bl	3400d984 <__exponent>
3400db10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400db12:	4682      	mov	sl, r0
3400db14:	1813      	adds	r3, r2, r0
3400db16:	2a01      	cmp	r2, #1
3400db18:	6123      	str	r3, [r4, #16]
3400db1a:	dc02      	bgt.n	3400db22 <_printf_float+0x12a>
3400db1c:	6822      	ldr	r2, [r4, #0]
3400db1e:	07d2      	lsls	r2, r2, #31
3400db20:	d501      	bpl.n	3400db26 <_printf_float+0x12e>
3400db22:	3301      	adds	r3, #1
3400db24:	6123      	str	r3, [r4, #16]
3400db26:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3400db2a:	2b00      	cmp	r3, #0
3400db2c:	d0a6      	beq.n	3400da7c <_printf_float+0x84>
3400db2e:	232d      	movs	r3, #45	@ 0x2d
3400db30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400db34:	e7a2      	b.n	3400da7c <_printf_float+0x84>
3400db36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400db3a:	d1c4      	bne.n	3400dac6 <_printf_float+0xce>
3400db3c:	2b00      	cmp	r3, #0
3400db3e:	d1c2      	bne.n	3400dac6 <_printf_float+0xce>
3400db40:	2301      	movs	r3, #1
3400db42:	e7bf      	b.n	3400dac4 <_printf_float+0xcc>
3400db44:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400db48:	d9db      	bls.n	3400db02 <_printf_float+0x10a>
3400db4a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3400db4e:	d118      	bne.n	3400db82 <_printf_float+0x18a>
3400db50:	2900      	cmp	r1, #0
3400db52:	6863      	ldr	r3, [r4, #4]
3400db54:	dd0b      	ble.n	3400db6e <_printf_float+0x176>
3400db56:	6121      	str	r1, [r4, #16]
3400db58:	b913      	cbnz	r3, 3400db60 <_printf_float+0x168>
3400db5a:	6822      	ldr	r2, [r4, #0]
3400db5c:	07d0      	lsls	r0, r2, #31
3400db5e:	d502      	bpl.n	3400db66 <_printf_float+0x16e>
3400db60:	3301      	adds	r3, #1
3400db62:	440b      	add	r3, r1
3400db64:	6123      	str	r3, [r4, #16]
3400db66:	f04f 0a00 	mov.w	sl, #0
3400db6a:	65a1      	str	r1, [r4, #88]	@ 0x58
3400db6c:	e7db      	b.n	3400db26 <_printf_float+0x12e>
3400db6e:	b913      	cbnz	r3, 3400db76 <_printf_float+0x17e>
3400db70:	6822      	ldr	r2, [r4, #0]
3400db72:	07d2      	lsls	r2, r2, #31
3400db74:	d501      	bpl.n	3400db7a <_printf_float+0x182>
3400db76:	3302      	adds	r3, #2
3400db78:	e7f4      	b.n	3400db64 <_printf_float+0x16c>
3400db7a:	2301      	movs	r3, #1
3400db7c:	e7f2      	b.n	3400db64 <_printf_float+0x16c>
3400db7e:	f04f 0967 	mov.w	r9, #103	@ 0x67
3400db82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400db84:	4299      	cmp	r1, r3
3400db86:	db05      	blt.n	3400db94 <_printf_float+0x19c>
3400db88:	6823      	ldr	r3, [r4, #0]
3400db8a:	6121      	str	r1, [r4, #16]
3400db8c:	07d8      	lsls	r0, r3, #31
3400db8e:	d5ea      	bpl.n	3400db66 <_printf_float+0x16e>
3400db90:	1c4b      	adds	r3, r1, #1
3400db92:	e7e7      	b.n	3400db64 <_printf_float+0x16c>
3400db94:	2900      	cmp	r1, #0
3400db96:	bfd4      	ite	le
3400db98:	f1c1 0202 	rsble	r2, r1, #2
3400db9c:	2201      	movgt	r2, #1
3400db9e:	4413      	add	r3, r2
3400dba0:	e7e0      	b.n	3400db64 <_printf_float+0x16c>
3400dba2:	6823      	ldr	r3, [r4, #0]
3400dba4:	055a      	lsls	r2, r3, #21
3400dba6:	d407      	bmi.n	3400dbb8 <_printf_float+0x1c0>
3400dba8:	6923      	ldr	r3, [r4, #16]
3400dbaa:	4642      	mov	r2, r8
3400dbac:	4631      	mov	r1, r6
3400dbae:	4628      	mov	r0, r5
3400dbb0:	47b8      	blx	r7
3400dbb2:	3001      	adds	r0, #1
3400dbb4:	d12a      	bne.n	3400dc0c <_printf_float+0x214>
3400dbb6:	e76b      	b.n	3400da90 <_printf_float+0x98>
3400dbb8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400dbbc:	f240 80e0 	bls.w	3400dd80 <_printf_float+0x388>
3400dbc0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400dbc4:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400dbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dbcc:	d133      	bne.n	3400dc36 <_printf_float+0x23e>
3400dbce:	2301      	movs	r3, #1
3400dbd0:	4a37      	ldr	r2, [pc, #220]	@ (3400dcb0 <_printf_float+0x2b8>)
3400dbd2:	4631      	mov	r1, r6
3400dbd4:	4628      	mov	r0, r5
3400dbd6:	47b8      	blx	r7
3400dbd8:	3001      	adds	r0, #1
3400dbda:	f43f af59 	beq.w	3400da90 <_printf_float+0x98>
3400dbde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3400dbe2:	4543      	cmp	r3, r8
3400dbe4:	db02      	blt.n	3400dbec <_printf_float+0x1f4>
3400dbe6:	6823      	ldr	r3, [r4, #0]
3400dbe8:	07d8      	lsls	r0, r3, #31
3400dbea:	d50f      	bpl.n	3400dc0c <_printf_float+0x214>
3400dbec:	9b05      	ldr	r3, [sp, #20]
3400dbee:	465a      	mov	r2, fp
3400dbf0:	4631      	mov	r1, r6
3400dbf2:	4628      	mov	r0, r5
3400dbf4:	47b8      	blx	r7
3400dbf6:	3001      	adds	r0, #1
3400dbf8:	f43f af4a 	beq.w	3400da90 <_printf_float+0x98>
3400dbfc:	f04f 0900 	mov.w	r9, #0
3400dc00:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400dc04:	f104 0a1a 	add.w	sl, r4, #26
3400dc08:	45c8      	cmp	r8, r9
3400dc0a:	dc09      	bgt.n	3400dc20 <_printf_float+0x228>
3400dc0c:	6823      	ldr	r3, [r4, #0]
3400dc0e:	079b      	lsls	r3, r3, #30
3400dc10:	f100 8107 	bmi.w	3400de22 <_printf_float+0x42a>
3400dc14:	68e0      	ldr	r0, [r4, #12]
3400dc16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400dc18:	4298      	cmp	r0, r3
3400dc1a:	bfb8      	it	lt
3400dc1c:	4618      	movlt	r0, r3
3400dc1e:	e739      	b.n	3400da94 <_printf_float+0x9c>
3400dc20:	2301      	movs	r3, #1
3400dc22:	4652      	mov	r2, sl
3400dc24:	4631      	mov	r1, r6
3400dc26:	4628      	mov	r0, r5
3400dc28:	47b8      	blx	r7
3400dc2a:	3001      	adds	r0, #1
3400dc2c:	f43f af30 	beq.w	3400da90 <_printf_float+0x98>
3400dc30:	f109 0901 	add.w	r9, r9, #1
3400dc34:	e7e8      	b.n	3400dc08 <_printf_float+0x210>
3400dc36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dc38:	2b00      	cmp	r3, #0
3400dc3a:	dc3b      	bgt.n	3400dcb4 <_printf_float+0x2bc>
3400dc3c:	2301      	movs	r3, #1
3400dc3e:	4a1c      	ldr	r2, [pc, #112]	@ (3400dcb0 <_printf_float+0x2b8>)
3400dc40:	4631      	mov	r1, r6
3400dc42:	4628      	mov	r0, r5
3400dc44:	47b8      	blx	r7
3400dc46:	3001      	adds	r0, #1
3400dc48:	f43f af22 	beq.w	3400da90 <_printf_float+0x98>
3400dc4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3400dc50:	ea59 0303 	orrs.w	r3, r9, r3
3400dc54:	d102      	bne.n	3400dc5c <_printf_float+0x264>
3400dc56:	6823      	ldr	r3, [r4, #0]
3400dc58:	07d9      	lsls	r1, r3, #31
3400dc5a:	d5d7      	bpl.n	3400dc0c <_printf_float+0x214>
3400dc5c:	9b05      	ldr	r3, [sp, #20]
3400dc5e:	465a      	mov	r2, fp
3400dc60:	4631      	mov	r1, r6
3400dc62:	4628      	mov	r0, r5
3400dc64:	47b8      	blx	r7
3400dc66:	3001      	adds	r0, #1
3400dc68:	f43f af12 	beq.w	3400da90 <_printf_float+0x98>
3400dc6c:	f04f 0a00 	mov.w	sl, #0
3400dc70:	f104 0b1a 	add.w	fp, r4, #26
3400dc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dc76:	425b      	negs	r3, r3
3400dc78:	4553      	cmp	r3, sl
3400dc7a:	dc01      	bgt.n	3400dc80 <_printf_float+0x288>
3400dc7c:	464b      	mov	r3, r9
3400dc7e:	e794      	b.n	3400dbaa <_printf_float+0x1b2>
3400dc80:	2301      	movs	r3, #1
3400dc82:	465a      	mov	r2, fp
3400dc84:	4631      	mov	r1, r6
3400dc86:	4628      	mov	r0, r5
3400dc88:	47b8      	blx	r7
3400dc8a:	3001      	adds	r0, #1
3400dc8c:	f43f af00 	beq.w	3400da90 <_printf_float+0x98>
3400dc90:	f10a 0a01 	add.w	sl, sl, #1
3400dc94:	e7ee      	b.n	3400dc74 <_printf_float+0x27c>
3400dc96:	bf00      	nop
3400dc98:	ffffffff 	.word	0xffffffff
3400dc9c:	7fefffff 	.word	0x7fefffff
3400dca0:	340116ca 	.word	0x340116ca
3400dca4:	340116c6 	.word	0x340116c6
3400dca8:	340116d2 	.word	0x340116d2
3400dcac:	340116ce 	.word	0x340116ce
3400dcb0:	34010f62 	.word	0x34010f62
3400dcb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400dcb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3400dcba:	4553      	cmp	r3, sl
3400dcbc:	bfa8      	it	ge
3400dcbe:	4653      	movge	r3, sl
3400dcc0:	2b00      	cmp	r3, #0
3400dcc2:	4699      	mov	r9, r3
3400dcc4:	dc37      	bgt.n	3400dd36 <_printf_float+0x33e>
3400dcc6:	2300      	movs	r3, #0
3400dcc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400dccc:	f104 021a 	add.w	r2, r4, #26
3400dcd0:	9307      	str	r3, [sp, #28]
3400dcd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400dcd4:	9907      	ldr	r1, [sp, #28]
3400dcd6:	9306      	str	r3, [sp, #24]
3400dcd8:	eba3 0309 	sub.w	r3, r3, r9
3400dcdc:	428b      	cmp	r3, r1
3400dcde:	dc31      	bgt.n	3400dd44 <_printf_float+0x34c>
3400dce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dce2:	459a      	cmp	sl, r3
3400dce4:	dc3b      	bgt.n	3400dd5e <_printf_float+0x366>
3400dce6:	6823      	ldr	r3, [r4, #0]
3400dce8:	07da      	lsls	r2, r3, #31
3400dcea:	d438      	bmi.n	3400dd5e <_printf_float+0x366>
3400dcec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dcee:	ebaa 0903 	sub.w	r9, sl, r3
3400dcf2:	9b06      	ldr	r3, [sp, #24]
3400dcf4:	ebaa 0303 	sub.w	r3, sl, r3
3400dcf8:	4599      	cmp	r9, r3
3400dcfa:	bfa8      	it	ge
3400dcfc:	4699      	movge	r9, r3
3400dcfe:	f1b9 0f00 	cmp.w	r9, #0
3400dd02:	dc34      	bgt.n	3400dd6e <_printf_float+0x376>
3400dd04:	f04f 0800 	mov.w	r8, #0
3400dd08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400dd0c:	f104 0b1a 	add.w	fp, r4, #26
3400dd10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400dd12:	ebaa 0303 	sub.w	r3, sl, r3
3400dd16:	eba3 0309 	sub.w	r3, r3, r9
3400dd1a:	4543      	cmp	r3, r8
3400dd1c:	f77f af76 	ble.w	3400dc0c <_printf_float+0x214>
3400dd20:	2301      	movs	r3, #1
3400dd22:	465a      	mov	r2, fp
3400dd24:	4631      	mov	r1, r6
3400dd26:	4628      	mov	r0, r5
3400dd28:	47b8      	blx	r7
3400dd2a:	3001      	adds	r0, #1
3400dd2c:	f43f aeb0 	beq.w	3400da90 <_printf_float+0x98>
3400dd30:	f108 0801 	add.w	r8, r8, #1
3400dd34:	e7ec      	b.n	3400dd10 <_printf_float+0x318>
3400dd36:	4642      	mov	r2, r8
3400dd38:	4631      	mov	r1, r6
3400dd3a:	4628      	mov	r0, r5
3400dd3c:	47b8      	blx	r7
3400dd3e:	3001      	adds	r0, #1
3400dd40:	d1c1      	bne.n	3400dcc6 <_printf_float+0x2ce>
3400dd42:	e6a5      	b.n	3400da90 <_printf_float+0x98>
3400dd44:	2301      	movs	r3, #1
3400dd46:	4631      	mov	r1, r6
3400dd48:	4628      	mov	r0, r5
3400dd4a:	9206      	str	r2, [sp, #24]
3400dd4c:	47b8      	blx	r7
3400dd4e:	3001      	adds	r0, #1
3400dd50:	f43f ae9e 	beq.w	3400da90 <_printf_float+0x98>
3400dd54:	9b07      	ldr	r3, [sp, #28]
3400dd56:	9a06      	ldr	r2, [sp, #24]
3400dd58:	3301      	adds	r3, #1
3400dd5a:	9307      	str	r3, [sp, #28]
3400dd5c:	e7b9      	b.n	3400dcd2 <_printf_float+0x2da>
3400dd5e:	9b05      	ldr	r3, [sp, #20]
3400dd60:	465a      	mov	r2, fp
3400dd62:	4631      	mov	r1, r6
3400dd64:	4628      	mov	r0, r5
3400dd66:	47b8      	blx	r7
3400dd68:	3001      	adds	r0, #1
3400dd6a:	d1bf      	bne.n	3400dcec <_printf_float+0x2f4>
3400dd6c:	e690      	b.n	3400da90 <_printf_float+0x98>
3400dd6e:	9a06      	ldr	r2, [sp, #24]
3400dd70:	464b      	mov	r3, r9
3400dd72:	4631      	mov	r1, r6
3400dd74:	4628      	mov	r0, r5
3400dd76:	4442      	add	r2, r8
3400dd78:	47b8      	blx	r7
3400dd7a:	3001      	adds	r0, #1
3400dd7c:	d1c2      	bne.n	3400dd04 <_printf_float+0x30c>
3400dd7e:	e687      	b.n	3400da90 <_printf_float+0x98>
3400dd80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3400dd84:	f1b9 0f01 	cmp.w	r9, #1
3400dd88:	dc01      	bgt.n	3400dd8e <_printf_float+0x396>
3400dd8a:	07db      	lsls	r3, r3, #31
3400dd8c:	d536      	bpl.n	3400ddfc <_printf_float+0x404>
3400dd8e:	2301      	movs	r3, #1
3400dd90:	4642      	mov	r2, r8
3400dd92:	4631      	mov	r1, r6
3400dd94:	4628      	mov	r0, r5
3400dd96:	47b8      	blx	r7
3400dd98:	3001      	adds	r0, #1
3400dd9a:	f43f ae79 	beq.w	3400da90 <_printf_float+0x98>
3400dd9e:	9b05      	ldr	r3, [sp, #20]
3400dda0:	465a      	mov	r2, fp
3400dda2:	4631      	mov	r1, r6
3400dda4:	4628      	mov	r0, r5
3400dda6:	47b8      	blx	r7
3400dda8:	3001      	adds	r0, #1
3400ddaa:	f43f ae71 	beq.w	3400da90 <_printf_float+0x98>
3400ddae:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3400ddb2:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400ddb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400ddba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400ddbe:	d018      	beq.n	3400ddf2 <_printf_float+0x3fa>
3400ddc0:	464b      	mov	r3, r9
3400ddc2:	f108 0201 	add.w	r2, r8, #1
3400ddc6:	4631      	mov	r1, r6
3400ddc8:	4628      	mov	r0, r5
3400ddca:	47b8      	blx	r7
3400ddcc:	3001      	adds	r0, #1
3400ddce:	d10c      	bne.n	3400ddea <_printf_float+0x3f2>
3400ddd0:	e65e      	b.n	3400da90 <_printf_float+0x98>
3400ddd2:	2301      	movs	r3, #1
3400ddd4:	465a      	mov	r2, fp
3400ddd6:	4631      	mov	r1, r6
3400ddd8:	4628      	mov	r0, r5
3400ddda:	47b8      	blx	r7
3400dddc:	3001      	adds	r0, #1
3400ddde:	f43f ae57 	beq.w	3400da90 <_printf_float+0x98>
3400dde2:	f108 0801 	add.w	r8, r8, #1
3400dde6:	45c8      	cmp	r8, r9
3400dde8:	dbf3      	blt.n	3400ddd2 <_printf_float+0x3da>
3400ddea:	4653      	mov	r3, sl
3400ddec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3400ddf0:	e6dc      	b.n	3400dbac <_printf_float+0x1b4>
3400ddf2:	f04f 0800 	mov.w	r8, #0
3400ddf6:	f104 0b1a 	add.w	fp, r4, #26
3400ddfa:	e7f4      	b.n	3400dde6 <_printf_float+0x3ee>
3400ddfc:	2301      	movs	r3, #1
3400ddfe:	4642      	mov	r2, r8
3400de00:	e7e1      	b.n	3400ddc6 <_printf_float+0x3ce>
3400de02:	2301      	movs	r3, #1
3400de04:	464a      	mov	r2, r9
3400de06:	4631      	mov	r1, r6
3400de08:	4628      	mov	r0, r5
3400de0a:	47b8      	blx	r7
3400de0c:	3001      	adds	r0, #1
3400de0e:	f43f ae3f 	beq.w	3400da90 <_printf_float+0x98>
3400de12:	f108 0801 	add.w	r8, r8, #1
3400de16:	68e3      	ldr	r3, [r4, #12]
3400de18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3400de1a:	1a5b      	subs	r3, r3, r1
3400de1c:	4543      	cmp	r3, r8
3400de1e:	dcf0      	bgt.n	3400de02 <_printf_float+0x40a>
3400de20:	e6f8      	b.n	3400dc14 <_printf_float+0x21c>
3400de22:	f04f 0800 	mov.w	r8, #0
3400de26:	f104 0919 	add.w	r9, r4, #25
3400de2a:	e7f4      	b.n	3400de16 <_printf_float+0x41e>

3400de2c <_printf_common>:
3400de2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400de30:	4616      	mov	r6, r2
3400de32:	4698      	mov	r8, r3
3400de34:	688a      	ldr	r2, [r1, #8]
3400de36:	4607      	mov	r7, r0
3400de38:	690b      	ldr	r3, [r1, #16]
3400de3a:	460c      	mov	r4, r1
3400de3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
3400de40:	4293      	cmp	r3, r2
3400de42:	bfb8      	it	lt
3400de44:	4613      	movlt	r3, r2
3400de46:	6033      	str	r3, [r6, #0]
3400de48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3400de4c:	b10a      	cbz	r2, 3400de52 <_printf_common+0x26>
3400de4e:	3301      	adds	r3, #1
3400de50:	6033      	str	r3, [r6, #0]
3400de52:	6823      	ldr	r3, [r4, #0]
3400de54:	0699      	lsls	r1, r3, #26
3400de56:	bf42      	ittt	mi
3400de58:	6833      	ldrmi	r3, [r6, #0]
3400de5a:	3302      	addmi	r3, #2
3400de5c:	6033      	strmi	r3, [r6, #0]
3400de5e:	6825      	ldr	r5, [r4, #0]
3400de60:	f015 0506 	ands.w	r5, r5, #6
3400de64:	d106      	bne.n	3400de74 <_printf_common+0x48>
3400de66:	f104 0a19 	add.w	sl, r4, #25
3400de6a:	68e3      	ldr	r3, [r4, #12]
3400de6c:	6832      	ldr	r2, [r6, #0]
3400de6e:	1a9b      	subs	r3, r3, r2
3400de70:	42ab      	cmp	r3, r5
3400de72:	dc2b      	bgt.n	3400decc <_printf_common+0xa0>
3400de74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3400de78:	6822      	ldr	r2, [r4, #0]
3400de7a:	3b00      	subs	r3, #0
3400de7c:	bf18      	it	ne
3400de7e:	2301      	movne	r3, #1
3400de80:	0692      	lsls	r2, r2, #26
3400de82:	d430      	bmi.n	3400dee6 <_printf_common+0xba>
3400de84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3400de88:	4641      	mov	r1, r8
3400de8a:	4638      	mov	r0, r7
3400de8c:	47c8      	blx	r9
3400de8e:	3001      	adds	r0, #1
3400de90:	d023      	beq.n	3400deda <_printf_common+0xae>
3400de92:	6823      	ldr	r3, [r4, #0]
3400de94:	341a      	adds	r4, #26
3400de96:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3400de9a:	f003 0306 	and.w	r3, r3, #6
3400de9e:	2b04      	cmp	r3, #4
3400dea0:	bf0a      	itet	eq
3400dea2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3400dea6:	2500      	movne	r5, #0
3400dea8:	6833      	ldreq	r3, [r6, #0]
3400deaa:	f04f 0600 	mov.w	r6, #0
3400deae:	bf08      	it	eq
3400deb0:	1aed      	subeq	r5, r5, r3
3400deb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
3400deb6:	bf08      	it	eq
3400deb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3400debc:	4293      	cmp	r3, r2
3400debe:	bfc4      	itt	gt
3400dec0:	1a9b      	subgt	r3, r3, r2
3400dec2:	18ed      	addgt	r5, r5, r3
3400dec4:	42b5      	cmp	r5, r6
3400dec6:	d11a      	bne.n	3400defe <_printf_common+0xd2>
3400dec8:	2000      	movs	r0, #0
3400deca:	e008      	b.n	3400dede <_printf_common+0xb2>
3400decc:	2301      	movs	r3, #1
3400dece:	4652      	mov	r2, sl
3400ded0:	4641      	mov	r1, r8
3400ded2:	4638      	mov	r0, r7
3400ded4:	47c8      	blx	r9
3400ded6:	3001      	adds	r0, #1
3400ded8:	d103      	bne.n	3400dee2 <_printf_common+0xb6>
3400deda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400dede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400dee2:	3501      	adds	r5, #1
3400dee4:	e7c1      	b.n	3400de6a <_printf_common+0x3e>
3400dee6:	18e1      	adds	r1, r4, r3
3400dee8:	1c5a      	adds	r2, r3, #1
3400deea:	2030      	movs	r0, #48	@ 0x30
3400deec:	3302      	adds	r3, #2
3400deee:	4422      	add	r2, r4
3400def0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3400def4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3400def8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3400defc:	e7c2      	b.n	3400de84 <_printf_common+0x58>
3400defe:	2301      	movs	r3, #1
3400df00:	4622      	mov	r2, r4
3400df02:	4641      	mov	r1, r8
3400df04:	4638      	mov	r0, r7
3400df06:	47c8      	blx	r9
3400df08:	3001      	adds	r0, #1
3400df0a:	d0e6      	beq.n	3400deda <_printf_common+0xae>
3400df0c:	3601      	adds	r6, #1
3400df0e:	e7d9      	b.n	3400dec4 <_printf_common+0x98>

3400df10 <_printf_i>:
3400df10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3400df14:	7e0f      	ldrb	r7, [r1, #24]
3400df16:	4691      	mov	r9, r2
3400df18:	4680      	mov	r8, r0
3400df1a:	460c      	mov	r4, r1
3400df1c:	2f78      	cmp	r7, #120	@ 0x78
3400df1e:	469a      	mov	sl, r3
3400df20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400df22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3400df26:	d807      	bhi.n	3400df38 <_printf_i+0x28>
3400df28:	2f62      	cmp	r7, #98	@ 0x62
3400df2a:	d80a      	bhi.n	3400df42 <_printf_i+0x32>
3400df2c:	2f00      	cmp	r7, #0
3400df2e:	f000 80d1 	beq.w	3400e0d4 <_printf_i+0x1c4>
3400df32:	2f58      	cmp	r7, #88	@ 0x58
3400df34:	f000 80b8 	beq.w	3400e0a8 <_printf_i+0x198>
3400df38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400df3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3400df40:	e03a      	b.n	3400dfb8 <_printf_i+0xa8>
3400df42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3400df46:	2b15      	cmp	r3, #21
3400df48:	d8f6      	bhi.n	3400df38 <_printf_i+0x28>
3400df4a:	a101      	add	r1, pc, #4	@ (adr r1, 3400df50 <_printf_i+0x40>)
3400df4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3400df50:	3400dfa9 	.word	0x3400dfa9
3400df54:	3400dfbd 	.word	0x3400dfbd
3400df58:	3400df39 	.word	0x3400df39
3400df5c:	3400df39 	.word	0x3400df39
3400df60:	3400df39 	.word	0x3400df39
3400df64:	3400df39 	.word	0x3400df39
3400df68:	3400dfbd 	.word	0x3400dfbd
3400df6c:	3400df39 	.word	0x3400df39
3400df70:	3400df39 	.word	0x3400df39
3400df74:	3400df39 	.word	0x3400df39
3400df78:	3400df39 	.word	0x3400df39
3400df7c:	3400e0bb 	.word	0x3400e0bb
3400df80:	3400dfe7 	.word	0x3400dfe7
3400df84:	3400e075 	.word	0x3400e075
3400df88:	3400df39 	.word	0x3400df39
3400df8c:	3400df39 	.word	0x3400df39
3400df90:	3400e0dd 	.word	0x3400e0dd
3400df94:	3400df39 	.word	0x3400df39
3400df98:	3400dfe7 	.word	0x3400dfe7
3400df9c:	3400df39 	.word	0x3400df39
3400dfa0:	3400df39 	.word	0x3400df39
3400dfa4:	3400e07d 	.word	0x3400e07d
3400dfa8:	6833      	ldr	r3, [r6, #0]
3400dfaa:	1d1a      	adds	r2, r3, #4
3400dfac:	681b      	ldr	r3, [r3, #0]
3400dfae:	6032      	str	r2, [r6, #0]
3400dfb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400dfb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3400dfb8:	2301      	movs	r3, #1
3400dfba:	e09c      	b.n	3400e0f6 <_printf_i+0x1e6>
3400dfbc:	6833      	ldr	r3, [r6, #0]
3400dfbe:	6820      	ldr	r0, [r4, #0]
3400dfc0:	1d19      	adds	r1, r3, #4
3400dfc2:	6031      	str	r1, [r6, #0]
3400dfc4:	0606      	lsls	r6, r0, #24
3400dfc6:	d501      	bpl.n	3400dfcc <_printf_i+0xbc>
3400dfc8:	681d      	ldr	r5, [r3, #0]
3400dfca:	e003      	b.n	3400dfd4 <_printf_i+0xc4>
3400dfcc:	0645      	lsls	r5, r0, #25
3400dfce:	d5fb      	bpl.n	3400dfc8 <_printf_i+0xb8>
3400dfd0:	f9b3 5000 	ldrsh.w	r5, [r3]
3400dfd4:	2d00      	cmp	r5, #0
3400dfd6:	da03      	bge.n	3400dfe0 <_printf_i+0xd0>
3400dfd8:	232d      	movs	r3, #45	@ 0x2d
3400dfda:	426d      	negs	r5, r5
3400dfdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400dfe0:	4858      	ldr	r0, [pc, #352]	@ (3400e144 <_printf_i+0x234>)
3400dfe2:	230a      	movs	r3, #10
3400dfe4:	e011      	b.n	3400e00a <_printf_i+0xfa>
3400dfe6:	6821      	ldr	r1, [r4, #0]
3400dfe8:	6833      	ldr	r3, [r6, #0]
3400dfea:	0608      	lsls	r0, r1, #24
3400dfec:	f853 5b04 	ldr.w	r5, [r3], #4
3400dff0:	d402      	bmi.n	3400dff8 <_printf_i+0xe8>
3400dff2:	0649      	lsls	r1, r1, #25
3400dff4:	bf48      	it	mi
3400dff6:	b2ad      	uxthmi	r5, r5
3400dff8:	2f6f      	cmp	r7, #111	@ 0x6f
3400dffa:	6033      	str	r3, [r6, #0]
3400dffc:	4851      	ldr	r0, [pc, #324]	@ (3400e144 <_printf_i+0x234>)
3400dffe:	bf14      	ite	ne
3400e000:	230a      	movne	r3, #10
3400e002:	2308      	moveq	r3, #8
3400e004:	2100      	movs	r1, #0
3400e006:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3400e00a:	6866      	ldr	r6, [r4, #4]
3400e00c:	2e00      	cmp	r6, #0
3400e00e:	60a6      	str	r6, [r4, #8]
3400e010:	db05      	blt.n	3400e01e <_printf_i+0x10e>
3400e012:	6821      	ldr	r1, [r4, #0]
3400e014:	432e      	orrs	r6, r5
3400e016:	f021 0104 	bic.w	r1, r1, #4
3400e01a:	6021      	str	r1, [r4, #0]
3400e01c:	d04b      	beq.n	3400e0b6 <_printf_i+0x1a6>
3400e01e:	4616      	mov	r6, r2
3400e020:	fbb5 f1f3 	udiv	r1, r5, r3
3400e024:	fb03 5711 	mls	r7, r3, r1, r5
3400e028:	5dc7      	ldrb	r7, [r0, r7]
3400e02a:	f806 7d01 	strb.w	r7, [r6, #-1]!
3400e02e:	462f      	mov	r7, r5
3400e030:	460d      	mov	r5, r1
3400e032:	42bb      	cmp	r3, r7
3400e034:	d9f4      	bls.n	3400e020 <_printf_i+0x110>
3400e036:	2b08      	cmp	r3, #8
3400e038:	d10b      	bne.n	3400e052 <_printf_i+0x142>
3400e03a:	6823      	ldr	r3, [r4, #0]
3400e03c:	07df      	lsls	r7, r3, #31
3400e03e:	d508      	bpl.n	3400e052 <_printf_i+0x142>
3400e040:	6923      	ldr	r3, [r4, #16]
3400e042:	6861      	ldr	r1, [r4, #4]
3400e044:	4299      	cmp	r1, r3
3400e046:	bfde      	ittt	le
3400e048:	2330      	movle	r3, #48	@ 0x30
3400e04a:	f806 3c01 	strble.w	r3, [r6, #-1]
3400e04e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3400e052:	1b92      	subs	r2, r2, r6
3400e054:	6122      	str	r2, [r4, #16]
3400e056:	464b      	mov	r3, r9
3400e058:	aa03      	add	r2, sp, #12
3400e05a:	4621      	mov	r1, r4
3400e05c:	4640      	mov	r0, r8
3400e05e:	f8cd a000 	str.w	sl, [sp]
3400e062:	f7ff fee3 	bl	3400de2c <_printf_common>
3400e066:	3001      	adds	r0, #1
3400e068:	d14a      	bne.n	3400e100 <_printf_i+0x1f0>
3400e06a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e06e:	b004      	add	sp, #16
3400e070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400e074:	6823      	ldr	r3, [r4, #0]
3400e076:	f043 0320 	orr.w	r3, r3, #32
3400e07a:	6023      	str	r3, [r4, #0]
3400e07c:	2778      	movs	r7, #120	@ 0x78
3400e07e:	4832      	ldr	r0, [pc, #200]	@ (3400e148 <_printf_i+0x238>)
3400e080:	6823      	ldr	r3, [r4, #0]
3400e082:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3400e086:	061f      	lsls	r7, r3, #24
3400e088:	6831      	ldr	r1, [r6, #0]
3400e08a:	f851 5b04 	ldr.w	r5, [r1], #4
3400e08e:	d402      	bmi.n	3400e096 <_printf_i+0x186>
3400e090:	065f      	lsls	r7, r3, #25
3400e092:	bf48      	it	mi
3400e094:	b2ad      	uxthmi	r5, r5
3400e096:	6031      	str	r1, [r6, #0]
3400e098:	07d9      	lsls	r1, r3, #31
3400e09a:	bf44      	itt	mi
3400e09c:	f043 0320 	orrmi.w	r3, r3, #32
3400e0a0:	6023      	strmi	r3, [r4, #0]
3400e0a2:	b11d      	cbz	r5, 3400e0ac <_printf_i+0x19c>
3400e0a4:	2310      	movs	r3, #16
3400e0a6:	e7ad      	b.n	3400e004 <_printf_i+0xf4>
3400e0a8:	4826      	ldr	r0, [pc, #152]	@ (3400e144 <_printf_i+0x234>)
3400e0aa:	e7e9      	b.n	3400e080 <_printf_i+0x170>
3400e0ac:	6823      	ldr	r3, [r4, #0]
3400e0ae:	f023 0320 	bic.w	r3, r3, #32
3400e0b2:	6023      	str	r3, [r4, #0]
3400e0b4:	e7f6      	b.n	3400e0a4 <_printf_i+0x194>
3400e0b6:	4616      	mov	r6, r2
3400e0b8:	e7bd      	b.n	3400e036 <_printf_i+0x126>
3400e0ba:	6833      	ldr	r3, [r6, #0]
3400e0bc:	6825      	ldr	r5, [r4, #0]
3400e0be:	1d18      	adds	r0, r3, #4
3400e0c0:	6961      	ldr	r1, [r4, #20]
3400e0c2:	6030      	str	r0, [r6, #0]
3400e0c4:	062e      	lsls	r6, r5, #24
3400e0c6:	681b      	ldr	r3, [r3, #0]
3400e0c8:	d501      	bpl.n	3400e0ce <_printf_i+0x1be>
3400e0ca:	6019      	str	r1, [r3, #0]
3400e0cc:	e002      	b.n	3400e0d4 <_printf_i+0x1c4>
3400e0ce:	0668      	lsls	r0, r5, #25
3400e0d0:	d5fb      	bpl.n	3400e0ca <_printf_i+0x1ba>
3400e0d2:	8019      	strh	r1, [r3, #0]
3400e0d4:	2300      	movs	r3, #0
3400e0d6:	4616      	mov	r6, r2
3400e0d8:	6123      	str	r3, [r4, #16]
3400e0da:	e7bc      	b.n	3400e056 <_printf_i+0x146>
3400e0dc:	6833      	ldr	r3, [r6, #0]
3400e0de:	2100      	movs	r1, #0
3400e0e0:	1d1a      	adds	r2, r3, #4
3400e0e2:	6032      	str	r2, [r6, #0]
3400e0e4:	681e      	ldr	r6, [r3, #0]
3400e0e6:	6862      	ldr	r2, [r4, #4]
3400e0e8:	4630      	mov	r0, r6
3400e0ea:	f000 fd8c 	bl	3400ec06 <memchr>
3400e0ee:	b108      	cbz	r0, 3400e0f4 <_printf_i+0x1e4>
3400e0f0:	1b80      	subs	r0, r0, r6
3400e0f2:	6060      	str	r0, [r4, #4]
3400e0f4:	6863      	ldr	r3, [r4, #4]
3400e0f6:	6123      	str	r3, [r4, #16]
3400e0f8:	2300      	movs	r3, #0
3400e0fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e0fe:	e7aa      	b.n	3400e056 <_printf_i+0x146>
3400e100:	6923      	ldr	r3, [r4, #16]
3400e102:	4632      	mov	r2, r6
3400e104:	4649      	mov	r1, r9
3400e106:	4640      	mov	r0, r8
3400e108:	47d0      	blx	sl
3400e10a:	3001      	adds	r0, #1
3400e10c:	d0ad      	beq.n	3400e06a <_printf_i+0x15a>
3400e10e:	6823      	ldr	r3, [r4, #0]
3400e110:	079b      	lsls	r3, r3, #30
3400e112:	d413      	bmi.n	3400e13c <_printf_i+0x22c>
3400e114:	68e0      	ldr	r0, [r4, #12]
3400e116:	9b03      	ldr	r3, [sp, #12]
3400e118:	4298      	cmp	r0, r3
3400e11a:	bfb8      	it	lt
3400e11c:	4618      	movlt	r0, r3
3400e11e:	e7a6      	b.n	3400e06e <_printf_i+0x15e>
3400e120:	2301      	movs	r3, #1
3400e122:	4632      	mov	r2, r6
3400e124:	4649      	mov	r1, r9
3400e126:	4640      	mov	r0, r8
3400e128:	47d0      	blx	sl
3400e12a:	3001      	adds	r0, #1
3400e12c:	d09d      	beq.n	3400e06a <_printf_i+0x15a>
3400e12e:	3501      	adds	r5, #1
3400e130:	68e3      	ldr	r3, [r4, #12]
3400e132:	9903      	ldr	r1, [sp, #12]
3400e134:	1a5b      	subs	r3, r3, r1
3400e136:	42ab      	cmp	r3, r5
3400e138:	dcf2      	bgt.n	3400e120 <_printf_i+0x210>
3400e13a:	e7eb      	b.n	3400e114 <_printf_i+0x204>
3400e13c:	2500      	movs	r5, #0
3400e13e:	f104 0619 	add.w	r6, r4, #25
3400e142:	e7f5      	b.n	3400e130 <_printf_i+0x220>
3400e144:	340116d6 	.word	0x340116d6
3400e148:	340116e7 	.word	0x340116e7

3400e14c <__sflush_r>:
3400e14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3400e150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400e154:	0716      	lsls	r6, r2, #28
3400e156:	4605      	mov	r5, r0
3400e158:	460c      	mov	r4, r1
3400e15a:	d454      	bmi.n	3400e206 <__sflush_r+0xba>
3400e15c:	684b      	ldr	r3, [r1, #4]
3400e15e:	2b00      	cmp	r3, #0
3400e160:	dc02      	bgt.n	3400e168 <__sflush_r+0x1c>
3400e162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3400e164:	2b00      	cmp	r3, #0
3400e166:	dd48      	ble.n	3400e1fa <__sflush_r+0xae>
3400e168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400e16a:	2e00      	cmp	r6, #0
3400e16c:	d045      	beq.n	3400e1fa <__sflush_r+0xae>
3400e16e:	2300      	movs	r3, #0
3400e170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3400e174:	682f      	ldr	r7, [r5, #0]
3400e176:	6a21      	ldr	r1, [r4, #32]
3400e178:	602b      	str	r3, [r5, #0]
3400e17a:	d030      	beq.n	3400e1de <__sflush_r+0x92>
3400e17c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3400e17e:	89a3      	ldrh	r3, [r4, #12]
3400e180:	0759      	lsls	r1, r3, #29
3400e182:	d505      	bpl.n	3400e190 <__sflush_r+0x44>
3400e184:	6863      	ldr	r3, [r4, #4]
3400e186:	1ad2      	subs	r2, r2, r3
3400e188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400e18a:	b10b      	cbz	r3, 3400e190 <__sflush_r+0x44>
3400e18c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400e18e:	1ad2      	subs	r2, r2, r3
3400e190:	2300      	movs	r3, #0
3400e192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400e194:	6a21      	ldr	r1, [r4, #32]
3400e196:	4628      	mov	r0, r5
3400e198:	47b0      	blx	r6
3400e19a:	1c43      	adds	r3, r0, #1
3400e19c:	89a3      	ldrh	r3, [r4, #12]
3400e19e:	d106      	bne.n	3400e1ae <__sflush_r+0x62>
3400e1a0:	6829      	ldr	r1, [r5, #0]
3400e1a2:	291d      	cmp	r1, #29
3400e1a4:	d82b      	bhi.n	3400e1fe <__sflush_r+0xb2>
3400e1a6:	4a2a      	ldr	r2, [pc, #168]	@ (3400e250 <__sflush_r+0x104>)
3400e1a8:	40ca      	lsrs	r2, r1
3400e1aa:	07d6      	lsls	r6, r2, #31
3400e1ac:	d527      	bpl.n	3400e1fe <__sflush_r+0xb2>
3400e1ae:	2200      	movs	r2, #0
3400e1b0:	04d9      	lsls	r1, r3, #19
3400e1b2:	6062      	str	r2, [r4, #4]
3400e1b4:	6922      	ldr	r2, [r4, #16]
3400e1b6:	6022      	str	r2, [r4, #0]
3400e1b8:	d504      	bpl.n	3400e1c4 <__sflush_r+0x78>
3400e1ba:	1c42      	adds	r2, r0, #1
3400e1bc:	d101      	bne.n	3400e1c2 <__sflush_r+0x76>
3400e1be:	682b      	ldr	r3, [r5, #0]
3400e1c0:	b903      	cbnz	r3, 3400e1c4 <__sflush_r+0x78>
3400e1c2:	6560      	str	r0, [r4, #84]	@ 0x54
3400e1c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400e1c6:	602f      	str	r7, [r5, #0]
3400e1c8:	b1b9      	cbz	r1, 3400e1fa <__sflush_r+0xae>
3400e1ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400e1ce:	4299      	cmp	r1, r3
3400e1d0:	d002      	beq.n	3400e1d8 <__sflush_r+0x8c>
3400e1d2:	4628      	mov	r0, r5
3400e1d4:	f001 fb26 	bl	3400f824 <_free_r>
3400e1d8:	2300      	movs	r3, #0
3400e1da:	6363      	str	r3, [r4, #52]	@ 0x34
3400e1dc:	e00d      	b.n	3400e1fa <__sflush_r+0xae>
3400e1de:	2301      	movs	r3, #1
3400e1e0:	4628      	mov	r0, r5
3400e1e2:	47b0      	blx	r6
3400e1e4:	4602      	mov	r2, r0
3400e1e6:	1c50      	adds	r0, r2, #1
3400e1e8:	d1c9      	bne.n	3400e17e <__sflush_r+0x32>
3400e1ea:	682b      	ldr	r3, [r5, #0]
3400e1ec:	2b00      	cmp	r3, #0
3400e1ee:	d0c6      	beq.n	3400e17e <__sflush_r+0x32>
3400e1f0:	2b1d      	cmp	r3, #29
3400e1f2:	d001      	beq.n	3400e1f8 <__sflush_r+0xac>
3400e1f4:	2b16      	cmp	r3, #22
3400e1f6:	d11d      	bne.n	3400e234 <__sflush_r+0xe8>
3400e1f8:	602f      	str	r7, [r5, #0]
3400e1fa:	2000      	movs	r0, #0
3400e1fc:	e021      	b.n	3400e242 <__sflush_r+0xf6>
3400e1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e202:	b21b      	sxth	r3, r3
3400e204:	e01a      	b.n	3400e23c <__sflush_r+0xf0>
3400e206:	690f      	ldr	r7, [r1, #16]
3400e208:	2f00      	cmp	r7, #0
3400e20a:	d0f6      	beq.n	3400e1fa <__sflush_r+0xae>
3400e20c:	0793      	lsls	r3, r2, #30
3400e20e:	680e      	ldr	r6, [r1, #0]
3400e210:	600f      	str	r7, [r1, #0]
3400e212:	bf0c      	ite	eq
3400e214:	694b      	ldreq	r3, [r1, #20]
3400e216:	2300      	movne	r3, #0
3400e218:	eba6 0807 	sub.w	r8, r6, r7
3400e21c:	608b      	str	r3, [r1, #8]
3400e21e:	f1b8 0f00 	cmp.w	r8, #0
3400e222:	ddea      	ble.n	3400e1fa <__sflush_r+0xae>
3400e224:	4643      	mov	r3, r8
3400e226:	463a      	mov	r2, r7
3400e228:	6a21      	ldr	r1, [r4, #32]
3400e22a:	4628      	mov	r0, r5
3400e22c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3400e22e:	47b0      	blx	r6
3400e230:	2800      	cmp	r0, #0
3400e232:	dc08      	bgt.n	3400e246 <__sflush_r+0xfa>
3400e234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e23c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e240:	81a3      	strh	r3, [r4, #12]
3400e242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400e246:	4407      	add	r7, r0
3400e248:	eba8 0800 	sub.w	r8, r8, r0
3400e24c:	e7e7      	b.n	3400e21e <__sflush_r+0xd2>
3400e24e:	bf00      	nop
3400e250:	20400001 	.word	0x20400001

3400e254 <_fflush_r>:
3400e254:	b538      	push	{r3, r4, r5, lr}
3400e256:	690b      	ldr	r3, [r1, #16]
3400e258:	4605      	mov	r5, r0
3400e25a:	460c      	mov	r4, r1
3400e25c:	b913      	cbnz	r3, 3400e264 <_fflush_r+0x10>
3400e25e:	2500      	movs	r5, #0
3400e260:	4628      	mov	r0, r5
3400e262:	bd38      	pop	{r3, r4, r5, pc}
3400e264:	b118      	cbz	r0, 3400e26e <_fflush_r+0x1a>
3400e266:	6a03      	ldr	r3, [r0, #32]
3400e268:	b90b      	cbnz	r3, 3400e26e <_fflush_r+0x1a>
3400e26a:	f000 f8bb 	bl	3400e3e4 <__sinit>
3400e26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e272:	2b00      	cmp	r3, #0
3400e274:	d0f3      	beq.n	3400e25e <_fflush_r+0xa>
3400e276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3400e278:	07d0      	lsls	r0, r2, #31
3400e27a:	d404      	bmi.n	3400e286 <_fflush_r+0x32>
3400e27c:	0599      	lsls	r1, r3, #22
3400e27e:	d402      	bmi.n	3400e286 <_fflush_r+0x32>
3400e280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e282:	f000 fcbe 	bl	3400ec02 <__retarget_lock_acquire_recursive>
3400e286:	4628      	mov	r0, r5
3400e288:	4621      	mov	r1, r4
3400e28a:	f7ff ff5f 	bl	3400e14c <__sflush_r>
3400e28e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e290:	4605      	mov	r5, r0
3400e292:	07da      	lsls	r2, r3, #31
3400e294:	d4e4      	bmi.n	3400e260 <_fflush_r+0xc>
3400e296:	89a3      	ldrh	r3, [r4, #12]
3400e298:	059b      	lsls	r3, r3, #22
3400e29a:	d4e1      	bmi.n	3400e260 <_fflush_r+0xc>
3400e29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e29e:	f000 fcb1 	bl	3400ec04 <__retarget_lock_release_recursive>
3400e2a2:	e7dd      	b.n	3400e260 <_fflush_r+0xc>

3400e2a4 <fflush>:
3400e2a4:	4601      	mov	r1, r0
3400e2a6:	b920      	cbnz	r0, 3400e2b2 <fflush+0xe>
3400e2a8:	4a04      	ldr	r2, [pc, #16]	@ (3400e2bc <fflush+0x18>)
3400e2aa:	4905      	ldr	r1, [pc, #20]	@ (3400e2c0 <fflush+0x1c>)
3400e2ac:	4805      	ldr	r0, [pc, #20]	@ (3400e2c4 <fflush+0x20>)
3400e2ae:	f000 b8c3 	b.w	3400e438 <_fwalk_sglue>
3400e2b2:	4b05      	ldr	r3, [pc, #20]	@ (3400e2c8 <fflush+0x24>)
3400e2b4:	6818      	ldr	r0, [r3, #0]
3400e2b6:	f7ff bfcd 	b.w	3400e254 <_fflush_r>
3400e2ba:	bf00      	nop
3400e2bc:	340123b8 	.word	0x340123b8
3400e2c0:	3400e255 	.word	0x3400e255
3400e2c4:	340123c8 	.word	0x340123c8
3400e2c8:	340123c4 	.word	0x340123c4

3400e2cc <std>:
3400e2cc:	2300      	movs	r3, #0
3400e2ce:	b510      	push	{r4, lr}
3400e2d0:	4604      	mov	r4, r0
3400e2d2:	6083      	str	r3, [r0, #8]
3400e2d4:	8181      	strh	r1, [r0, #12]
3400e2d6:	4619      	mov	r1, r3
3400e2d8:	6643      	str	r3, [r0, #100]	@ 0x64
3400e2da:	81c2      	strh	r2, [r0, #14]
3400e2dc:	2208      	movs	r2, #8
3400e2de:	6183      	str	r3, [r0, #24]
3400e2e0:	e9c0 3300 	strd	r3, r3, [r0]
3400e2e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
3400e2e8:	305c      	adds	r0, #92	@ 0x5c
3400e2ea:	f000 fa0b 	bl	3400e704 <memset>
3400e2ee:	4b0d      	ldr	r3, [pc, #52]	@ (3400e324 <std+0x58>)
3400e2f0:	6224      	str	r4, [r4, #32]
3400e2f2:	6263      	str	r3, [r4, #36]	@ 0x24
3400e2f4:	4b0c      	ldr	r3, [pc, #48]	@ (3400e328 <std+0x5c>)
3400e2f6:	62a3      	str	r3, [r4, #40]	@ 0x28
3400e2f8:	4b0c      	ldr	r3, [pc, #48]	@ (3400e32c <std+0x60>)
3400e2fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
3400e2fc:	4b0c      	ldr	r3, [pc, #48]	@ (3400e330 <std+0x64>)
3400e2fe:	6323      	str	r3, [r4, #48]	@ 0x30
3400e300:	4b0c      	ldr	r3, [pc, #48]	@ (3400e334 <std+0x68>)
3400e302:	429c      	cmp	r4, r3
3400e304:	d006      	beq.n	3400e314 <std+0x48>
3400e306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3400e30a:	4294      	cmp	r4, r2
3400e30c:	d002      	beq.n	3400e314 <std+0x48>
3400e30e:	33d0      	adds	r3, #208	@ 0xd0
3400e310:	429c      	cmp	r4, r3
3400e312:	d105      	bne.n	3400e320 <std+0x54>
3400e314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3400e318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e31c:	f000 bc70 	b.w	3400ec00 <__retarget_lock_init_recursive>
3400e320:	bd10      	pop	{r4, pc}
3400e322:	bf00      	nop
3400e324:	3400e555 	.word	0x3400e555
3400e328:	3400e577 	.word	0x3400e577
3400e32c:	3400e5af 	.word	0x3400e5af
3400e330:	3400e5d3 	.word	0x3400e5d3
3400e334:	34012e38 	.word	0x34012e38

3400e338 <stdio_exit_handler>:
3400e338:	4a02      	ldr	r2, [pc, #8]	@ (3400e344 <stdio_exit_handler+0xc>)
3400e33a:	4903      	ldr	r1, [pc, #12]	@ (3400e348 <stdio_exit_handler+0x10>)
3400e33c:	4803      	ldr	r0, [pc, #12]	@ (3400e34c <stdio_exit_handler+0x14>)
3400e33e:	f000 b87b 	b.w	3400e438 <_fwalk_sglue>
3400e342:	bf00      	nop
3400e344:	340123b8 	.word	0x340123b8
3400e348:	3400e255 	.word	0x3400e255
3400e34c:	340123c8 	.word	0x340123c8

3400e350 <cleanup_stdio>:
3400e350:	6841      	ldr	r1, [r0, #4]
3400e352:	4b0c      	ldr	r3, [pc, #48]	@ (3400e384 <cleanup_stdio+0x34>)
3400e354:	4299      	cmp	r1, r3
3400e356:	b510      	push	{r4, lr}
3400e358:	4604      	mov	r4, r0
3400e35a:	d001      	beq.n	3400e360 <cleanup_stdio+0x10>
3400e35c:	f7ff ff7a 	bl	3400e254 <_fflush_r>
3400e360:	68a1      	ldr	r1, [r4, #8]
3400e362:	4b09      	ldr	r3, [pc, #36]	@ (3400e388 <cleanup_stdio+0x38>)
3400e364:	4299      	cmp	r1, r3
3400e366:	d002      	beq.n	3400e36e <cleanup_stdio+0x1e>
3400e368:	4620      	mov	r0, r4
3400e36a:	f7ff ff73 	bl	3400e254 <_fflush_r>
3400e36e:	68e1      	ldr	r1, [r4, #12]
3400e370:	4b06      	ldr	r3, [pc, #24]	@ (3400e38c <cleanup_stdio+0x3c>)
3400e372:	4299      	cmp	r1, r3
3400e374:	d004      	beq.n	3400e380 <cleanup_stdio+0x30>
3400e376:	4620      	mov	r0, r4
3400e378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e37c:	f7ff bf6a 	b.w	3400e254 <_fflush_r>
3400e380:	bd10      	pop	{r4, pc}
3400e382:	bf00      	nop
3400e384:	34012e38 	.word	0x34012e38
3400e388:	34012ea0 	.word	0x34012ea0
3400e38c:	34012f08 	.word	0x34012f08

3400e390 <global_stdio_init.part.0>:
3400e390:	b510      	push	{r4, lr}
3400e392:	4b0b      	ldr	r3, [pc, #44]	@ (3400e3c0 <global_stdio_init.part.0+0x30>)
3400e394:	2104      	movs	r1, #4
3400e396:	4c0b      	ldr	r4, [pc, #44]	@ (3400e3c4 <global_stdio_init.part.0+0x34>)
3400e398:	4a0b      	ldr	r2, [pc, #44]	@ (3400e3c8 <global_stdio_init.part.0+0x38>)
3400e39a:	4620      	mov	r0, r4
3400e39c:	601a      	str	r2, [r3, #0]
3400e39e:	2200      	movs	r2, #0
3400e3a0:	f7ff ff94 	bl	3400e2cc <std>
3400e3a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3400e3a8:	2201      	movs	r2, #1
3400e3aa:	2109      	movs	r1, #9
3400e3ac:	f7ff ff8e 	bl	3400e2cc <std>
3400e3b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3400e3b4:	2202      	movs	r2, #2
3400e3b6:	2112      	movs	r1, #18
3400e3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e3bc:	f7ff bf86 	b.w	3400e2cc <std>
3400e3c0:	34012f70 	.word	0x34012f70
3400e3c4:	34012e38 	.word	0x34012e38
3400e3c8:	3400e339 	.word	0x3400e339

3400e3cc <__sfp_lock_acquire>:
3400e3cc:	4801      	ldr	r0, [pc, #4]	@ (3400e3d4 <__sfp_lock_acquire+0x8>)
3400e3ce:	f000 bc18 	b.w	3400ec02 <__retarget_lock_acquire_recursive>
3400e3d2:	bf00      	nop
3400e3d4:	34012f79 	.word	0x34012f79

3400e3d8 <__sfp_lock_release>:
3400e3d8:	4801      	ldr	r0, [pc, #4]	@ (3400e3e0 <__sfp_lock_release+0x8>)
3400e3da:	f000 bc13 	b.w	3400ec04 <__retarget_lock_release_recursive>
3400e3de:	bf00      	nop
3400e3e0:	34012f79 	.word	0x34012f79

3400e3e4 <__sinit>:
3400e3e4:	b510      	push	{r4, lr}
3400e3e6:	4604      	mov	r4, r0
3400e3e8:	f7ff fff0 	bl	3400e3cc <__sfp_lock_acquire>
3400e3ec:	6a23      	ldr	r3, [r4, #32]
3400e3ee:	b11b      	cbz	r3, 3400e3f8 <__sinit+0x14>
3400e3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e3f4:	f7ff bff0 	b.w	3400e3d8 <__sfp_lock_release>
3400e3f8:	4b04      	ldr	r3, [pc, #16]	@ (3400e40c <__sinit+0x28>)
3400e3fa:	6223      	str	r3, [r4, #32]
3400e3fc:	4b04      	ldr	r3, [pc, #16]	@ (3400e410 <__sinit+0x2c>)
3400e3fe:	681b      	ldr	r3, [r3, #0]
3400e400:	2b00      	cmp	r3, #0
3400e402:	d1f5      	bne.n	3400e3f0 <__sinit+0xc>
3400e404:	f7ff ffc4 	bl	3400e390 <global_stdio_init.part.0>
3400e408:	e7f2      	b.n	3400e3f0 <__sinit+0xc>
3400e40a:	bf00      	nop
3400e40c:	3400e351 	.word	0x3400e351
3400e410:	34012f70 	.word	0x34012f70

3400e414 <fiprintf>:
3400e414:	b40e      	push	{r1, r2, r3}
3400e416:	b503      	push	{r0, r1, lr}
3400e418:	ab03      	add	r3, sp, #12
3400e41a:	4601      	mov	r1, r0
3400e41c:	4805      	ldr	r0, [pc, #20]	@ (3400e434 <fiprintf+0x20>)
3400e41e:	f853 2b04 	ldr.w	r2, [r3], #4
3400e422:	6800      	ldr	r0, [r0, #0]
3400e424:	9301      	str	r3, [sp, #4]
3400e426:	f001 fdf3 	bl	34010010 <_vfiprintf_r>
3400e42a:	b002      	add	sp, #8
3400e42c:	f85d eb04 	ldr.w	lr, [sp], #4
3400e430:	b003      	add	sp, #12
3400e432:	4770      	bx	lr
3400e434:	340123c4 	.word	0x340123c4

3400e438 <_fwalk_sglue>:
3400e438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400e43c:	4607      	mov	r7, r0
3400e43e:	4688      	mov	r8, r1
3400e440:	4614      	mov	r4, r2
3400e442:	2600      	movs	r6, #0
3400e444:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3400e448:	f1b9 0901 	subs.w	r9, r9, #1
3400e44c:	d505      	bpl.n	3400e45a <_fwalk_sglue+0x22>
3400e44e:	6824      	ldr	r4, [r4, #0]
3400e450:	2c00      	cmp	r4, #0
3400e452:	d1f7      	bne.n	3400e444 <_fwalk_sglue+0xc>
3400e454:	4630      	mov	r0, r6
3400e456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400e45a:	89ab      	ldrh	r3, [r5, #12]
3400e45c:	2b01      	cmp	r3, #1
3400e45e:	d907      	bls.n	3400e470 <_fwalk_sglue+0x38>
3400e460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3400e464:	3301      	adds	r3, #1
3400e466:	d003      	beq.n	3400e470 <_fwalk_sglue+0x38>
3400e468:	4629      	mov	r1, r5
3400e46a:	4638      	mov	r0, r7
3400e46c:	47c0      	blx	r8
3400e46e:	4306      	orrs	r6, r0
3400e470:	3568      	adds	r5, #104	@ 0x68
3400e472:	e7e9      	b.n	3400e448 <_fwalk_sglue+0x10>

3400e474 <iprintf>:
3400e474:	b40f      	push	{r0, r1, r2, r3}
3400e476:	b507      	push	{r0, r1, r2, lr}
3400e478:	4906      	ldr	r1, [pc, #24]	@ (3400e494 <iprintf+0x20>)
3400e47a:	ab04      	add	r3, sp, #16
3400e47c:	6808      	ldr	r0, [r1, #0]
3400e47e:	f853 2b04 	ldr.w	r2, [r3], #4
3400e482:	6881      	ldr	r1, [r0, #8]
3400e484:	9301      	str	r3, [sp, #4]
3400e486:	f001 fdc3 	bl	34010010 <_vfiprintf_r>
3400e48a:	b003      	add	sp, #12
3400e48c:	f85d eb04 	ldr.w	lr, [sp], #4
3400e490:	b004      	add	sp, #16
3400e492:	4770      	bx	lr
3400e494:	340123c4 	.word	0x340123c4

3400e498 <_puts_r>:
3400e498:	6a03      	ldr	r3, [r0, #32]
3400e49a:	b570      	push	{r4, r5, r6, lr}
3400e49c:	4605      	mov	r5, r0
3400e49e:	460e      	mov	r6, r1
3400e4a0:	6884      	ldr	r4, [r0, #8]
3400e4a2:	b90b      	cbnz	r3, 3400e4a8 <_puts_r+0x10>
3400e4a4:	f7ff ff9e 	bl	3400e3e4 <__sinit>
3400e4a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e4aa:	07db      	lsls	r3, r3, #31
3400e4ac:	d405      	bmi.n	3400e4ba <_puts_r+0x22>
3400e4ae:	89a3      	ldrh	r3, [r4, #12]
3400e4b0:	0598      	lsls	r0, r3, #22
3400e4b2:	d402      	bmi.n	3400e4ba <_puts_r+0x22>
3400e4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e4b6:	f000 fba4 	bl	3400ec02 <__retarget_lock_acquire_recursive>
3400e4ba:	89a3      	ldrh	r3, [r4, #12]
3400e4bc:	0719      	lsls	r1, r3, #28
3400e4be:	d502      	bpl.n	3400e4c6 <_puts_r+0x2e>
3400e4c0:	6923      	ldr	r3, [r4, #16]
3400e4c2:	2b00      	cmp	r3, #0
3400e4c4:	d135      	bne.n	3400e532 <_puts_r+0x9a>
3400e4c6:	4621      	mov	r1, r4
3400e4c8:	4628      	mov	r0, r5
3400e4ca:	f000 f8c5 	bl	3400e658 <__swsetup_r>
3400e4ce:	b380      	cbz	r0, 3400e532 <_puts_r+0x9a>
3400e4d0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3400e4d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e4d6:	07da      	lsls	r2, r3, #31
3400e4d8:	d405      	bmi.n	3400e4e6 <_puts_r+0x4e>
3400e4da:	89a3      	ldrh	r3, [r4, #12]
3400e4dc:	059b      	lsls	r3, r3, #22
3400e4de:	d402      	bmi.n	3400e4e6 <_puts_r+0x4e>
3400e4e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e4e2:	f000 fb8f 	bl	3400ec04 <__retarget_lock_release_recursive>
3400e4e6:	4628      	mov	r0, r5
3400e4e8:	bd70      	pop	{r4, r5, r6, pc}
3400e4ea:	2b00      	cmp	r3, #0
3400e4ec:	da04      	bge.n	3400e4f8 <_puts_r+0x60>
3400e4ee:	69a2      	ldr	r2, [r4, #24]
3400e4f0:	429a      	cmp	r2, r3
3400e4f2:	dc17      	bgt.n	3400e524 <_puts_r+0x8c>
3400e4f4:	290a      	cmp	r1, #10
3400e4f6:	d015      	beq.n	3400e524 <_puts_r+0x8c>
3400e4f8:	6823      	ldr	r3, [r4, #0]
3400e4fa:	1c5a      	adds	r2, r3, #1
3400e4fc:	6022      	str	r2, [r4, #0]
3400e4fe:	7019      	strb	r1, [r3, #0]
3400e500:	68a3      	ldr	r3, [r4, #8]
3400e502:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400e506:	3b01      	subs	r3, #1
3400e508:	60a3      	str	r3, [r4, #8]
3400e50a:	2900      	cmp	r1, #0
3400e50c:	d1ed      	bne.n	3400e4ea <_puts_r+0x52>
3400e50e:	2b00      	cmp	r3, #0
3400e510:	da11      	bge.n	3400e536 <_puts_r+0x9e>
3400e512:	4622      	mov	r2, r4
3400e514:	210a      	movs	r1, #10
3400e516:	4628      	mov	r0, r5
3400e518:	f000 f85f 	bl	3400e5da <__swbuf_r>
3400e51c:	3001      	adds	r0, #1
3400e51e:	d0d7      	beq.n	3400e4d0 <_puts_r+0x38>
3400e520:	250a      	movs	r5, #10
3400e522:	e7d7      	b.n	3400e4d4 <_puts_r+0x3c>
3400e524:	4622      	mov	r2, r4
3400e526:	4628      	mov	r0, r5
3400e528:	f000 f857 	bl	3400e5da <__swbuf_r>
3400e52c:	3001      	adds	r0, #1
3400e52e:	d1e7      	bne.n	3400e500 <_puts_r+0x68>
3400e530:	e7ce      	b.n	3400e4d0 <_puts_r+0x38>
3400e532:	3e01      	subs	r6, #1
3400e534:	e7e4      	b.n	3400e500 <_puts_r+0x68>
3400e536:	6823      	ldr	r3, [r4, #0]
3400e538:	1c5a      	adds	r2, r3, #1
3400e53a:	6022      	str	r2, [r4, #0]
3400e53c:	220a      	movs	r2, #10
3400e53e:	701a      	strb	r2, [r3, #0]
3400e540:	e7ee      	b.n	3400e520 <_puts_r+0x88>
	...

3400e544 <puts>:
3400e544:	4b02      	ldr	r3, [pc, #8]	@ (3400e550 <puts+0xc>)
3400e546:	4601      	mov	r1, r0
3400e548:	6818      	ldr	r0, [r3, #0]
3400e54a:	f7ff bfa5 	b.w	3400e498 <_puts_r>
3400e54e:	bf00      	nop
3400e550:	340123c4 	.word	0x340123c4

3400e554 <__sread>:
3400e554:	b510      	push	{r4, lr}
3400e556:	460c      	mov	r4, r1
3400e558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e55c:	f000 faf2 	bl	3400eb44 <_read_r>
3400e560:	2800      	cmp	r0, #0
3400e562:	bfab      	itete	ge
3400e564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3400e566:	89a3      	ldrhlt	r3, [r4, #12]
3400e568:	181b      	addge	r3, r3, r0
3400e56a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3400e56e:	bfac      	ite	ge
3400e570:	6563      	strge	r3, [r4, #84]	@ 0x54
3400e572:	81a3      	strhlt	r3, [r4, #12]
3400e574:	bd10      	pop	{r4, pc}

3400e576 <__swrite>:
3400e576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400e57a:	461f      	mov	r7, r3
3400e57c:	898b      	ldrh	r3, [r1, #12]
3400e57e:	4605      	mov	r5, r0
3400e580:	460c      	mov	r4, r1
3400e582:	05db      	lsls	r3, r3, #23
3400e584:	4616      	mov	r6, r2
3400e586:	d505      	bpl.n	3400e594 <__swrite+0x1e>
3400e588:	2302      	movs	r3, #2
3400e58a:	2200      	movs	r2, #0
3400e58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e590:	f000 fac6 	bl	3400eb20 <_lseek_r>
3400e594:	89a3      	ldrh	r3, [r4, #12]
3400e596:	4632      	mov	r2, r6
3400e598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400e59c:	4628      	mov	r0, r5
3400e59e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400e5a2:	81a3      	strh	r3, [r4, #12]
3400e5a4:	463b      	mov	r3, r7
3400e5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3400e5aa:	f000 baed 	b.w	3400eb88 <_write_r>

3400e5ae <__sseek>:
3400e5ae:	b510      	push	{r4, lr}
3400e5b0:	460c      	mov	r4, r1
3400e5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e5b6:	f000 fab3 	bl	3400eb20 <_lseek_r>
3400e5ba:	1c43      	adds	r3, r0, #1
3400e5bc:	89a3      	ldrh	r3, [r4, #12]
3400e5be:	bf15      	itete	ne
3400e5c0:	6560      	strne	r0, [r4, #84]	@ 0x54
3400e5c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3400e5c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3400e5ca:	81a3      	strheq	r3, [r4, #12]
3400e5cc:	bf18      	it	ne
3400e5ce:	81a3      	strhne	r3, [r4, #12]
3400e5d0:	bd10      	pop	{r4, pc}

3400e5d2 <__sclose>:
3400e5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400e5d6:	f000 ba93 	b.w	3400eb00 <_close_r>

3400e5da <__swbuf_r>:
3400e5da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400e5dc:	460e      	mov	r6, r1
3400e5de:	4614      	mov	r4, r2
3400e5e0:	4605      	mov	r5, r0
3400e5e2:	b118      	cbz	r0, 3400e5ec <__swbuf_r+0x12>
3400e5e4:	6a03      	ldr	r3, [r0, #32]
3400e5e6:	b90b      	cbnz	r3, 3400e5ec <__swbuf_r+0x12>
3400e5e8:	f7ff fefc 	bl	3400e3e4 <__sinit>
3400e5ec:	69a3      	ldr	r3, [r4, #24]
3400e5ee:	60a3      	str	r3, [r4, #8]
3400e5f0:	89a3      	ldrh	r3, [r4, #12]
3400e5f2:	071a      	lsls	r2, r3, #28
3400e5f4:	d501      	bpl.n	3400e5fa <__swbuf_r+0x20>
3400e5f6:	6923      	ldr	r3, [r4, #16]
3400e5f8:	b943      	cbnz	r3, 3400e60c <__swbuf_r+0x32>
3400e5fa:	4621      	mov	r1, r4
3400e5fc:	4628      	mov	r0, r5
3400e5fe:	f000 f82b 	bl	3400e658 <__swsetup_r>
3400e602:	b118      	cbz	r0, 3400e60c <__swbuf_r+0x32>
3400e604:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3400e608:	4638      	mov	r0, r7
3400e60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400e60c:	6823      	ldr	r3, [r4, #0]
3400e60e:	b2f6      	uxtb	r6, r6
3400e610:	6922      	ldr	r2, [r4, #16]
3400e612:	4637      	mov	r7, r6
3400e614:	1a98      	subs	r0, r3, r2
3400e616:	6963      	ldr	r3, [r4, #20]
3400e618:	4283      	cmp	r3, r0
3400e61a:	dc05      	bgt.n	3400e628 <__swbuf_r+0x4e>
3400e61c:	4621      	mov	r1, r4
3400e61e:	4628      	mov	r0, r5
3400e620:	f7ff fe18 	bl	3400e254 <_fflush_r>
3400e624:	2800      	cmp	r0, #0
3400e626:	d1ed      	bne.n	3400e604 <__swbuf_r+0x2a>
3400e628:	68a3      	ldr	r3, [r4, #8]
3400e62a:	3b01      	subs	r3, #1
3400e62c:	60a3      	str	r3, [r4, #8]
3400e62e:	6823      	ldr	r3, [r4, #0]
3400e630:	1c5a      	adds	r2, r3, #1
3400e632:	6022      	str	r2, [r4, #0]
3400e634:	701e      	strb	r6, [r3, #0]
3400e636:	1c43      	adds	r3, r0, #1
3400e638:	6962      	ldr	r2, [r4, #20]
3400e63a:	429a      	cmp	r2, r3
3400e63c:	d004      	beq.n	3400e648 <__swbuf_r+0x6e>
3400e63e:	89a3      	ldrh	r3, [r4, #12]
3400e640:	07db      	lsls	r3, r3, #31
3400e642:	d5e1      	bpl.n	3400e608 <__swbuf_r+0x2e>
3400e644:	2e0a      	cmp	r6, #10
3400e646:	d1df      	bne.n	3400e608 <__swbuf_r+0x2e>
3400e648:	4621      	mov	r1, r4
3400e64a:	4628      	mov	r0, r5
3400e64c:	f7ff fe02 	bl	3400e254 <_fflush_r>
3400e650:	2800      	cmp	r0, #0
3400e652:	d0d9      	beq.n	3400e608 <__swbuf_r+0x2e>
3400e654:	e7d6      	b.n	3400e604 <__swbuf_r+0x2a>
	...

3400e658 <__swsetup_r>:
3400e658:	b538      	push	{r3, r4, r5, lr}
3400e65a:	4b29      	ldr	r3, [pc, #164]	@ (3400e700 <__swsetup_r+0xa8>)
3400e65c:	4605      	mov	r5, r0
3400e65e:	460c      	mov	r4, r1
3400e660:	6818      	ldr	r0, [r3, #0]
3400e662:	b118      	cbz	r0, 3400e66c <__swsetup_r+0x14>
3400e664:	6a03      	ldr	r3, [r0, #32]
3400e666:	b90b      	cbnz	r3, 3400e66c <__swsetup_r+0x14>
3400e668:	f7ff febc 	bl	3400e3e4 <__sinit>
3400e66c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e670:	0719      	lsls	r1, r3, #28
3400e672:	d422      	bmi.n	3400e6ba <__swsetup_r+0x62>
3400e674:	06da      	lsls	r2, r3, #27
3400e676:	d407      	bmi.n	3400e688 <__swsetup_r+0x30>
3400e678:	2209      	movs	r2, #9
3400e67a:	602a      	str	r2, [r5, #0]
3400e67c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400e680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e684:	81a3      	strh	r3, [r4, #12]
3400e686:	e033      	b.n	3400e6f0 <__swsetup_r+0x98>
3400e688:	0758      	lsls	r0, r3, #29
3400e68a:	d512      	bpl.n	3400e6b2 <__swsetup_r+0x5a>
3400e68c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400e68e:	b141      	cbz	r1, 3400e6a2 <__swsetup_r+0x4a>
3400e690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400e694:	4299      	cmp	r1, r3
3400e696:	d002      	beq.n	3400e69e <__swsetup_r+0x46>
3400e698:	4628      	mov	r0, r5
3400e69a:	f001 f8c3 	bl	3400f824 <_free_r>
3400e69e:	2300      	movs	r3, #0
3400e6a0:	6363      	str	r3, [r4, #52]	@ 0x34
3400e6a2:	89a3      	ldrh	r3, [r4, #12]
3400e6a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3400e6a8:	81a3      	strh	r3, [r4, #12]
3400e6aa:	2300      	movs	r3, #0
3400e6ac:	6063      	str	r3, [r4, #4]
3400e6ae:	6923      	ldr	r3, [r4, #16]
3400e6b0:	6023      	str	r3, [r4, #0]
3400e6b2:	89a3      	ldrh	r3, [r4, #12]
3400e6b4:	f043 0308 	orr.w	r3, r3, #8
3400e6b8:	81a3      	strh	r3, [r4, #12]
3400e6ba:	6923      	ldr	r3, [r4, #16]
3400e6bc:	b94b      	cbnz	r3, 3400e6d2 <__swsetup_r+0x7a>
3400e6be:	89a3      	ldrh	r3, [r4, #12]
3400e6c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3400e6c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400e6c8:	d003      	beq.n	3400e6d2 <__swsetup_r+0x7a>
3400e6ca:	4621      	mov	r1, r4
3400e6cc:	4628      	mov	r0, r5
3400e6ce:	f001 fddc 	bl	3401028a <__smakebuf_r>
3400e6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400e6d6:	f013 0201 	ands.w	r2, r3, #1
3400e6da:	d00a      	beq.n	3400e6f2 <__swsetup_r+0x9a>
3400e6dc:	2200      	movs	r2, #0
3400e6de:	60a2      	str	r2, [r4, #8]
3400e6e0:	6962      	ldr	r2, [r4, #20]
3400e6e2:	4252      	negs	r2, r2
3400e6e4:	61a2      	str	r2, [r4, #24]
3400e6e6:	6922      	ldr	r2, [r4, #16]
3400e6e8:	b942      	cbnz	r2, 3400e6fc <__swsetup_r+0xa4>
3400e6ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3400e6ee:	d1c5      	bne.n	3400e67c <__swsetup_r+0x24>
3400e6f0:	bd38      	pop	{r3, r4, r5, pc}
3400e6f2:	0799      	lsls	r1, r3, #30
3400e6f4:	bf58      	it	pl
3400e6f6:	6962      	ldrpl	r2, [r4, #20]
3400e6f8:	60a2      	str	r2, [r4, #8]
3400e6fa:	e7f4      	b.n	3400e6e6 <__swsetup_r+0x8e>
3400e6fc:	2000      	movs	r0, #0
3400e6fe:	e7f7      	b.n	3400e6f0 <__swsetup_r+0x98>
3400e700:	340123c4 	.word	0x340123c4

3400e704 <memset>:
3400e704:	4402      	add	r2, r0
3400e706:	4603      	mov	r3, r0
3400e708:	4293      	cmp	r3, r2
3400e70a:	d100      	bne.n	3400e70e <memset+0xa>
3400e70c:	4770      	bx	lr
3400e70e:	f803 1b01 	strb.w	r1, [r3], #1
3400e712:	e7f9      	b.n	3400e708 <memset+0x4>

3400e714 <_strerror_r>:
3400e714:	b510      	push	{r4, lr}
3400e716:	4604      	mov	r4, r0
3400e718:	4608      	mov	r0, r1
3400e71a:	4611      	mov	r1, r2
3400e71c:	461a      	mov	r2, r3
3400e71e:	288e      	cmp	r0, #142	@ 0x8e
3400e720:	f200 8130 	bhi.w	3400e984 <_strerror_r+0x270>
3400e724:	e8df f010 	tbh	[pc, r0, lsl #1]
3400e728:	0138008f 	.word	0x0138008f
3400e72c:	00940092 	.word	0x00940092
3400e730:	00980096 	.word	0x00980096
3400e734:	009c009a 	.word	0x009c009a
3400e738:	00a2009e 	.word	0x00a2009e
3400e73c:	00a800a4 	.word	0x00a800a4
3400e740:	00ac00aa 	.word	0x00ac00aa
3400e744:	012e00ae 	.word	0x012e00ae
3400e748:	00b200b0 	.word	0x00b200b0
3400e74c:	00b600b4 	.word	0x00b600b4
3400e750:	00be00b8 	.word	0x00be00b8
3400e754:	00c600c0 	.word	0x00c600c0
3400e758:	00ca00c8 	.word	0x00ca00c8
3400e75c:	00ce00cc 	.word	0x00ce00cc
3400e760:	00d600d2 	.word	0x00d600d2
3400e764:	00da00d8 	.word	0x00da00d8
3400e768:	00de00dc 	.word	0x00de00dc
3400e76c:	00e200e0 	.word	0x00e200e0
3400e770:	012e00e4 	.word	0x012e00e4
3400e774:	012e012e 	.word	0x012e012e
3400e778:	012e012e 	.word	0x012e012e
3400e77c:	012e012e 	.word	0x012e012e
3400e780:	00e8012e 	.word	0x00e8012e
3400e784:	012e00ec 	.word	0x012e00ec
3400e788:	012e012e 	.word	0x012e012e
3400e78c:	012e012e 	.word	0x012e012e
3400e790:	012e012e 	.word	0x012e012e
3400e794:	012e012e 	.word	0x012e012e
3400e798:	012e012e 	.word	0x012e012e
3400e79c:	012e012e 	.word	0x012e012e
3400e7a0:	010800ee 	.word	0x010800ee
3400e7a4:	00f200f0 	.word	0x00f200f0
3400e7a8:	012e012e 	.word	0x012e012e
3400e7ac:	00f4012e 	.word	0x00f4012e
3400e7b0:	012e012e 	.word	0x012e012e
3400e7b4:	00f6012e 	.word	0x00f6012e
3400e7b8:	012e012e 	.word	0x012e012e
3400e7bc:	012e00fa 	.word	0x012e00fa
3400e7c0:	00fc012e 	.word	0x00fc012e
3400e7c4:	012e012e 	.word	0x012e012e
3400e7c8:	012e012e 	.word	0x012e012e
3400e7cc:	012e012e 	.word	0x012e012e
3400e7d0:	012e012e 	.word	0x012e012e
3400e7d4:	012e012e 	.word	0x012e012e
3400e7d8:	012e00fe 	.word	0x012e00fe
3400e7dc:	01020100 	.word	0x01020100
3400e7e0:	012e0104 	.word	0x012e0104
3400e7e4:	0126012e 	.word	0x0126012e
3400e7e8:	012e012e 	.word	0x012e012e
3400e7ec:	012e012e 	.word	0x012e012e
3400e7f0:	012e012e 	.word	0x012e012e
3400e7f4:	012e012e 	.word	0x012e012e
3400e7f8:	01060114 	.word	0x01060114
3400e7fc:	010c010a 	.word	0x010c010a
3400e800:	0110010e 	.word	0x0110010e
3400e804:	0112012e 	.word	0x0112012e
3400e808:	011a0116 	.word	0x011a0116
3400e80c:	00c200ea 	.word	0x00c200ea
3400e810:	00ba012c 	.word	0x00ba012c
3400e814:	00bc00d0 	.word	0x00bc00d0
3400e818:	00a600a0 	.word	0x00a600a0
3400e81c:	00f8012a 	.word	0x00f8012a
3400e820:	0118012e 	.word	0x0118012e
3400e824:	011e00c4 	.word	0x011e00c4
3400e828:	012e011c 	.word	0x012e011c
3400e82c:	012e012e 	.word	0x012e012e
3400e830:	012e012e 	.word	0x012e012e
3400e834:	012e00d4 	.word	0x012e00d4
3400e838:	012e012e 	.word	0x012e012e
3400e83c:	012800e6 	.word	0x012800e6
3400e840:	01220120 	.word	0x01220120
3400e844:	0124      	.short	0x0124
3400e846:	4b55      	ldr	r3, [pc, #340]	@ (3400e99c <_strerror_r+0x288>)
3400e848:	4618      	mov	r0, r3
3400e84a:	bd10      	pop	{r4, pc}
3400e84c:	4b54      	ldr	r3, [pc, #336]	@ (3400e9a0 <_strerror_r+0x28c>)
3400e84e:	e7fb      	b.n	3400e848 <_strerror_r+0x134>
3400e850:	4b54      	ldr	r3, [pc, #336]	@ (3400e9a4 <_strerror_r+0x290>)
3400e852:	e7f9      	b.n	3400e848 <_strerror_r+0x134>
3400e854:	4b54      	ldr	r3, [pc, #336]	@ (3400e9a8 <_strerror_r+0x294>)
3400e856:	e7f7      	b.n	3400e848 <_strerror_r+0x134>
3400e858:	4b54      	ldr	r3, [pc, #336]	@ (3400e9ac <_strerror_r+0x298>)
3400e85a:	e7f5      	b.n	3400e848 <_strerror_r+0x134>
3400e85c:	4b54      	ldr	r3, [pc, #336]	@ (3400e9b0 <_strerror_r+0x29c>)
3400e85e:	e7f3      	b.n	3400e848 <_strerror_r+0x134>
3400e860:	4b54      	ldr	r3, [pc, #336]	@ (3400e9b4 <_strerror_r+0x2a0>)
3400e862:	e7f1      	b.n	3400e848 <_strerror_r+0x134>
3400e864:	4b54      	ldr	r3, [pc, #336]	@ (3400e9b8 <_strerror_r+0x2a4>)
3400e866:	e7ef      	b.n	3400e848 <_strerror_r+0x134>
3400e868:	4b54      	ldr	r3, [pc, #336]	@ (3400e9bc <_strerror_r+0x2a8>)
3400e86a:	e7ed      	b.n	3400e848 <_strerror_r+0x134>
3400e86c:	4b54      	ldr	r3, [pc, #336]	@ (3400e9c0 <_strerror_r+0x2ac>)
3400e86e:	e7eb      	b.n	3400e848 <_strerror_r+0x134>
3400e870:	4b54      	ldr	r3, [pc, #336]	@ (3400e9c4 <_strerror_r+0x2b0>)
3400e872:	e7e9      	b.n	3400e848 <_strerror_r+0x134>
3400e874:	4b54      	ldr	r3, [pc, #336]	@ (3400e9c8 <_strerror_r+0x2b4>)
3400e876:	e7e7      	b.n	3400e848 <_strerror_r+0x134>
3400e878:	4b54      	ldr	r3, [pc, #336]	@ (3400e9cc <_strerror_r+0x2b8>)
3400e87a:	e7e5      	b.n	3400e848 <_strerror_r+0x134>
3400e87c:	4b54      	ldr	r3, [pc, #336]	@ (3400e9d0 <_strerror_r+0x2bc>)
3400e87e:	e7e3      	b.n	3400e848 <_strerror_r+0x134>
3400e880:	4b54      	ldr	r3, [pc, #336]	@ (3400e9d4 <_strerror_r+0x2c0>)
3400e882:	e7e1      	b.n	3400e848 <_strerror_r+0x134>
3400e884:	4b54      	ldr	r3, [pc, #336]	@ (3400e9d8 <_strerror_r+0x2c4>)
3400e886:	e7df      	b.n	3400e848 <_strerror_r+0x134>
3400e888:	4b54      	ldr	r3, [pc, #336]	@ (3400e9dc <_strerror_r+0x2c8>)
3400e88a:	e7dd      	b.n	3400e848 <_strerror_r+0x134>
3400e88c:	4b54      	ldr	r3, [pc, #336]	@ (3400e9e0 <_strerror_r+0x2cc>)
3400e88e:	e7db      	b.n	3400e848 <_strerror_r+0x134>
3400e890:	4b54      	ldr	r3, [pc, #336]	@ (3400e9e4 <_strerror_r+0x2d0>)
3400e892:	e7d9      	b.n	3400e848 <_strerror_r+0x134>
3400e894:	4b54      	ldr	r3, [pc, #336]	@ (3400e9e8 <_strerror_r+0x2d4>)
3400e896:	e7d7      	b.n	3400e848 <_strerror_r+0x134>
3400e898:	4b54      	ldr	r3, [pc, #336]	@ (3400e9ec <_strerror_r+0x2d8>)
3400e89a:	e7d5      	b.n	3400e848 <_strerror_r+0x134>
3400e89c:	4b54      	ldr	r3, [pc, #336]	@ (3400e9f0 <_strerror_r+0x2dc>)
3400e89e:	e7d3      	b.n	3400e848 <_strerror_r+0x134>
3400e8a0:	4b54      	ldr	r3, [pc, #336]	@ (3400e9f4 <_strerror_r+0x2e0>)
3400e8a2:	e7d1      	b.n	3400e848 <_strerror_r+0x134>
3400e8a4:	4b54      	ldr	r3, [pc, #336]	@ (3400e9f8 <_strerror_r+0x2e4>)
3400e8a6:	e7cf      	b.n	3400e848 <_strerror_r+0x134>
3400e8a8:	4b54      	ldr	r3, [pc, #336]	@ (3400e9fc <_strerror_r+0x2e8>)
3400e8aa:	e7cd      	b.n	3400e848 <_strerror_r+0x134>
3400e8ac:	4b54      	ldr	r3, [pc, #336]	@ (3400ea00 <_strerror_r+0x2ec>)
3400e8ae:	e7cb      	b.n	3400e848 <_strerror_r+0x134>
3400e8b0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea04 <_strerror_r+0x2f0>)
3400e8b2:	e7c9      	b.n	3400e848 <_strerror_r+0x134>
3400e8b4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea08 <_strerror_r+0x2f4>)
3400e8b6:	e7c7      	b.n	3400e848 <_strerror_r+0x134>
3400e8b8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea0c <_strerror_r+0x2f8>)
3400e8ba:	e7c5      	b.n	3400e848 <_strerror_r+0x134>
3400e8bc:	4b54      	ldr	r3, [pc, #336]	@ (3400ea10 <_strerror_r+0x2fc>)
3400e8be:	e7c3      	b.n	3400e848 <_strerror_r+0x134>
3400e8c0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea14 <_strerror_r+0x300>)
3400e8c2:	e7c1      	b.n	3400e848 <_strerror_r+0x134>
3400e8c4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea18 <_strerror_r+0x304>)
3400e8c6:	e7bf      	b.n	3400e848 <_strerror_r+0x134>
3400e8c8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea1c <_strerror_r+0x308>)
3400e8ca:	e7bd      	b.n	3400e848 <_strerror_r+0x134>
3400e8cc:	4b54      	ldr	r3, [pc, #336]	@ (3400ea20 <_strerror_r+0x30c>)
3400e8ce:	e7bb      	b.n	3400e848 <_strerror_r+0x134>
3400e8d0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea24 <_strerror_r+0x310>)
3400e8d2:	e7b9      	b.n	3400e848 <_strerror_r+0x134>
3400e8d4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea28 <_strerror_r+0x314>)
3400e8d6:	e7b7      	b.n	3400e848 <_strerror_r+0x134>
3400e8d8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea2c <_strerror_r+0x318>)
3400e8da:	e7b5      	b.n	3400e848 <_strerror_r+0x134>
3400e8dc:	4b54      	ldr	r3, [pc, #336]	@ (3400ea30 <_strerror_r+0x31c>)
3400e8de:	e7b3      	b.n	3400e848 <_strerror_r+0x134>
3400e8e0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea34 <_strerror_r+0x320>)
3400e8e2:	e7b1      	b.n	3400e848 <_strerror_r+0x134>
3400e8e4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea38 <_strerror_r+0x324>)
3400e8e6:	e7af      	b.n	3400e848 <_strerror_r+0x134>
3400e8e8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea3c <_strerror_r+0x328>)
3400e8ea:	e7ad      	b.n	3400e848 <_strerror_r+0x134>
3400e8ec:	4b54      	ldr	r3, [pc, #336]	@ (3400ea40 <_strerror_r+0x32c>)
3400e8ee:	e7ab      	b.n	3400e848 <_strerror_r+0x134>
3400e8f0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea44 <_strerror_r+0x330>)
3400e8f2:	e7a9      	b.n	3400e848 <_strerror_r+0x134>
3400e8f4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea48 <_strerror_r+0x334>)
3400e8f6:	e7a7      	b.n	3400e848 <_strerror_r+0x134>
3400e8f8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea4c <_strerror_r+0x338>)
3400e8fa:	e7a5      	b.n	3400e848 <_strerror_r+0x134>
3400e8fc:	4b54      	ldr	r3, [pc, #336]	@ (3400ea50 <_strerror_r+0x33c>)
3400e8fe:	e7a3      	b.n	3400e848 <_strerror_r+0x134>
3400e900:	4b54      	ldr	r3, [pc, #336]	@ (3400ea54 <_strerror_r+0x340>)
3400e902:	e7a1      	b.n	3400e848 <_strerror_r+0x134>
3400e904:	4b54      	ldr	r3, [pc, #336]	@ (3400ea58 <_strerror_r+0x344>)
3400e906:	e79f      	b.n	3400e848 <_strerror_r+0x134>
3400e908:	4b54      	ldr	r3, [pc, #336]	@ (3400ea5c <_strerror_r+0x348>)
3400e90a:	e79d      	b.n	3400e848 <_strerror_r+0x134>
3400e90c:	4b54      	ldr	r3, [pc, #336]	@ (3400ea60 <_strerror_r+0x34c>)
3400e90e:	e79b      	b.n	3400e848 <_strerror_r+0x134>
3400e910:	4b54      	ldr	r3, [pc, #336]	@ (3400ea64 <_strerror_r+0x350>)
3400e912:	e799      	b.n	3400e848 <_strerror_r+0x134>
3400e914:	4b54      	ldr	r3, [pc, #336]	@ (3400ea68 <_strerror_r+0x354>)
3400e916:	e797      	b.n	3400e848 <_strerror_r+0x134>
3400e918:	4b54      	ldr	r3, [pc, #336]	@ (3400ea6c <_strerror_r+0x358>)
3400e91a:	e795      	b.n	3400e848 <_strerror_r+0x134>
3400e91c:	4b54      	ldr	r3, [pc, #336]	@ (3400ea70 <_strerror_r+0x35c>)
3400e91e:	e793      	b.n	3400e848 <_strerror_r+0x134>
3400e920:	4b54      	ldr	r3, [pc, #336]	@ (3400ea74 <_strerror_r+0x360>)
3400e922:	e791      	b.n	3400e848 <_strerror_r+0x134>
3400e924:	4b54      	ldr	r3, [pc, #336]	@ (3400ea78 <_strerror_r+0x364>)
3400e926:	e78f      	b.n	3400e848 <_strerror_r+0x134>
3400e928:	4b54      	ldr	r3, [pc, #336]	@ (3400ea7c <_strerror_r+0x368>)
3400e92a:	e78d      	b.n	3400e848 <_strerror_r+0x134>
3400e92c:	4b54      	ldr	r3, [pc, #336]	@ (3400ea80 <_strerror_r+0x36c>)
3400e92e:	e78b      	b.n	3400e848 <_strerror_r+0x134>
3400e930:	4b54      	ldr	r3, [pc, #336]	@ (3400ea84 <_strerror_r+0x370>)
3400e932:	e789      	b.n	3400e848 <_strerror_r+0x134>
3400e934:	4b54      	ldr	r3, [pc, #336]	@ (3400ea88 <_strerror_r+0x374>)
3400e936:	e787      	b.n	3400e848 <_strerror_r+0x134>
3400e938:	4b54      	ldr	r3, [pc, #336]	@ (3400ea8c <_strerror_r+0x378>)
3400e93a:	e785      	b.n	3400e848 <_strerror_r+0x134>
3400e93c:	4b54      	ldr	r3, [pc, #336]	@ (3400ea90 <_strerror_r+0x37c>)
3400e93e:	e783      	b.n	3400e848 <_strerror_r+0x134>
3400e940:	4b54      	ldr	r3, [pc, #336]	@ (3400ea94 <_strerror_r+0x380>)
3400e942:	e781      	b.n	3400e848 <_strerror_r+0x134>
3400e944:	4b54      	ldr	r3, [pc, #336]	@ (3400ea98 <_strerror_r+0x384>)
3400e946:	e77f      	b.n	3400e848 <_strerror_r+0x134>
3400e948:	4b54      	ldr	r3, [pc, #336]	@ (3400ea9c <_strerror_r+0x388>)
3400e94a:	e77d      	b.n	3400e848 <_strerror_r+0x134>
3400e94c:	4b54      	ldr	r3, [pc, #336]	@ (3400eaa0 <_strerror_r+0x38c>)
3400e94e:	e77b      	b.n	3400e848 <_strerror_r+0x134>
3400e950:	4b54      	ldr	r3, [pc, #336]	@ (3400eaa4 <_strerror_r+0x390>)
3400e952:	e779      	b.n	3400e848 <_strerror_r+0x134>
3400e954:	4b54      	ldr	r3, [pc, #336]	@ (3400eaa8 <_strerror_r+0x394>)
3400e956:	e777      	b.n	3400e848 <_strerror_r+0x134>
3400e958:	4b54      	ldr	r3, [pc, #336]	@ (3400eaac <_strerror_r+0x398>)
3400e95a:	e775      	b.n	3400e848 <_strerror_r+0x134>
3400e95c:	4b54      	ldr	r3, [pc, #336]	@ (3400eab0 <_strerror_r+0x39c>)
3400e95e:	e773      	b.n	3400e848 <_strerror_r+0x134>
3400e960:	4b54      	ldr	r3, [pc, #336]	@ (3400eab4 <_strerror_r+0x3a0>)
3400e962:	e771      	b.n	3400e848 <_strerror_r+0x134>
3400e964:	4b54      	ldr	r3, [pc, #336]	@ (3400eab8 <_strerror_r+0x3a4>)
3400e966:	e76f      	b.n	3400e848 <_strerror_r+0x134>
3400e968:	4b54      	ldr	r3, [pc, #336]	@ (3400eabc <_strerror_r+0x3a8>)
3400e96a:	e76d      	b.n	3400e848 <_strerror_r+0x134>
3400e96c:	4b54      	ldr	r3, [pc, #336]	@ (3400eac0 <_strerror_r+0x3ac>)
3400e96e:	e76b      	b.n	3400e848 <_strerror_r+0x134>
3400e970:	4b54      	ldr	r3, [pc, #336]	@ (3400eac4 <_strerror_r+0x3b0>)
3400e972:	e769      	b.n	3400e848 <_strerror_r+0x134>
3400e974:	4b54      	ldr	r3, [pc, #336]	@ (3400eac8 <_strerror_r+0x3b4>)
3400e976:	e767      	b.n	3400e848 <_strerror_r+0x134>
3400e978:	4b54      	ldr	r3, [pc, #336]	@ (3400eacc <_strerror_r+0x3b8>)
3400e97a:	e765      	b.n	3400e848 <_strerror_r+0x134>
3400e97c:	4b54      	ldr	r3, [pc, #336]	@ (3400ead0 <_strerror_r+0x3bc>)
3400e97e:	e763      	b.n	3400e848 <_strerror_r+0x134>
3400e980:	4b54      	ldr	r3, [pc, #336]	@ (3400ead4 <_strerror_r+0x3c0>)
3400e982:	e761      	b.n	3400e848 <_strerror_r+0x134>
3400e984:	2a00      	cmp	r2, #0
3400e986:	bf08      	it	eq
3400e988:	4622      	moveq	r2, r4
3400e98a:	f000 f8b3 	bl	3400eaf4 <_user_strerror>
3400e98e:	4b52      	ldr	r3, [pc, #328]	@ (3400ead8 <_strerror_r+0x3c4>)
3400e990:	2800      	cmp	r0, #0
3400e992:	bf18      	it	ne
3400e994:	4603      	movne	r3, r0
3400e996:	e757      	b.n	3400e848 <_strerror_r+0x134>
3400e998:	4b50      	ldr	r3, [pc, #320]	@ (3400eadc <_strerror_r+0x3c8>)
3400e99a:	e755      	b.n	3400e848 <_strerror_r+0x134>
3400e99c:	340116f8 	.word	0x340116f8
3400e9a0:	3401170a 	.word	0x3401170a
3400e9a4:	34011724 	.word	0x34011724
3400e9a8:	34011734 	.word	0x34011734
3400e9ac:	3401174c 	.word	0x3401174c
3400e9b0:	34011756 	.word	0x34011756
3400e9b4:	34011770 	.word	0x34011770
3400e9b8:	34011782 	.word	0x34011782
3400e9bc:	34011794 	.word	0x34011794
3400e9c0:	340117ad 	.word	0x340117ad
3400e9c4:	340117bd 	.word	0x340117bd
3400e9c8:	340117c9 	.word	0x340117c9
3400e9cc:	340117e6 	.word	0x340117e6
3400e9d0:	340117f8 	.word	0x340117f8
3400e9d4:	34011809 	.word	0x34011809
3400e9d8:	3401181b 	.word	0x3401181b
3400e9dc:	34011827 	.word	0x34011827
3400e9e0:	3401183f 	.word	0x3401183f
3400e9e4:	3401184b 	.word	0x3401184b
3400e9e8:	3401185d 	.word	0x3401185d
3400e9ec:	3401186c 	.word	0x3401186c
3400e9f0:	3401187c 	.word	0x3401187c
3400e9f4:	34011889 	.word	0x34011889
3400e9f8:	340118a8 	.word	0x340118a8
3400e9fc:	340118b7 	.word	0x340118b7
3400ea00:	340118c8 	.word	0x340118c8
3400ea04:	340118ec 	.word	0x340118ec
3400ea08:	3401190a 	.word	0x3401190a
3400ea0c:	34011928 	.word	0x34011928
3400ea10:	34011948 	.word	0x34011948
3400ea14:	3401195f 	.word	0x3401195f
3400ea18:	3401196e 	.word	0x3401196e
3400ea1c:	3401197d 	.word	0x3401197d
3400ea20:	34011991 	.word	0x34011991
3400ea24:	340119a9 	.word	0x340119a9
3400ea28:	340119b7 	.word	0x340119b7
3400ea2c:	340119c4 	.word	0x340119c4
3400ea30:	340119da 	.word	0x340119da
3400ea34:	340119e9 	.word	0x340119e9
3400ea38:	340119f5 	.word	0x340119f5
3400ea3c:	34011a24 	.word	0x34011a24
3400ea40:	34011a35 	.word	0x34011a35
3400ea44:	34011a50 	.word	0x34011a50
3400ea48:	34011a63 	.word	0x34011a63
3400ea4c:	34011a79 	.word	0x34011a79
3400ea50:	34011a82 	.word	0x34011a82
3400ea54:	34011a99 	.word	0x34011a99
3400ea58:	34011aa1 	.word	0x34011aa1
3400ea5c:	34011aae 	.word	0x34011aae
3400ea60:	34011ac3 	.word	0x34011ac3
3400ea64:	34011ad7 	.word	0x34011ad7
3400ea68:	34011aef 	.word	0x34011aef
3400ea6c:	34011afe 	.word	0x34011afe
3400ea70:	34011b0f 	.word	0x34011b0f
3400ea74:	34011b22 	.word	0x34011b22
3400ea78:	34011b2e 	.word	0x34011b2e
3400ea7c:	34011b47 	.word	0x34011b47
3400ea80:	34011b5b 	.word	0x34011b5b
3400ea84:	34011b76 	.word	0x34011b76
3400ea88:	34011b8e 	.word	0x34011b8e
3400ea8c:	34011ba8 	.word	0x34011ba8
3400ea90:	34011bb0 	.word	0x34011bb0
3400ea94:	34011be0 	.word	0x34011be0
3400ea98:	34011bff 	.word	0x34011bff
3400ea9c:	34011c1e 	.word	0x34011c1e
3400eaa0:	34011c35 	.word	0x34011c35
3400eaa4:	34011c48 	.word	0x34011c48
3400eaa8:	34011c61 	.word	0x34011c61
3400eaac:	34011c78 	.word	0x34011c78
3400eab0:	34011c8e 	.word	0x34011c8e
3400eab4:	34011caf 	.word	0x34011caf
3400eab8:	34011cc7 	.word	0x34011cc7
3400eabc:	34011ce3 	.word	0x34011ce3
3400eac0:	34011cf6 	.word	0x34011cf6
3400eac4:	34011d0c 	.word	0x34011d0c
3400eac8:	34011d20 	.word	0x34011d20
3400eacc:	34011d42 	.word	0x34011d42
3400ead0:	34011d68 	.word	0x34011d68
3400ead4:	34011d79 	.word	0x34011d79
3400ead8:	34010d32 	.word	0x34010d32
3400eadc:	34011700 	.word	0x34011700

3400eae0 <strerror>:
3400eae0:	4601      	mov	r1, r0
3400eae2:	2300      	movs	r3, #0
3400eae4:	4802      	ldr	r0, [pc, #8]	@ (3400eaf0 <strerror+0x10>)
3400eae6:	461a      	mov	r2, r3
3400eae8:	6800      	ldr	r0, [r0, #0]
3400eaea:	f7ff be13 	b.w	3400e714 <_strerror_r>
3400eaee:	bf00      	nop
3400eaf0:	340123c4 	.word	0x340123c4

3400eaf4 <_user_strerror>:
3400eaf4:	2000      	movs	r0, #0
3400eaf6:	4770      	bx	lr

3400eaf8 <_localeconv_r>:
3400eaf8:	4800      	ldr	r0, [pc, #0]	@ (3400eafc <_localeconv_r+0x4>)
3400eafa:	4770      	bx	lr
3400eafc:	34012504 	.word	0x34012504

3400eb00 <_close_r>:
3400eb00:	b538      	push	{r3, r4, r5, lr}
3400eb02:	2300      	movs	r3, #0
3400eb04:	4d05      	ldr	r5, [pc, #20]	@ (3400eb1c <_close_r+0x1c>)
3400eb06:	4604      	mov	r4, r0
3400eb08:	4608      	mov	r0, r1
3400eb0a:	602b      	str	r3, [r5, #0]
3400eb0c:	f7f2 fca7 	bl	3400145e <_close>
3400eb10:	1c43      	adds	r3, r0, #1
3400eb12:	d102      	bne.n	3400eb1a <_close_r+0x1a>
3400eb14:	682b      	ldr	r3, [r5, #0]
3400eb16:	b103      	cbz	r3, 3400eb1a <_close_r+0x1a>
3400eb18:	6023      	str	r3, [r4, #0]
3400eb1a:	bd38      	pop	{r3, r4, r5, pc}
3400eb1c:	34012f74 	.word	0x34012f74

3400eb20 <_lseek_r>:
3400eb20:	b538      	push	{r3, r4, r5, lr}
3400eb22:	4604      	mov	r4, r0
3400eb24:	4d06      	ldr	r5, [pc, #24]	@ (3400eb40 <_lseek_r+0x20>)
3400eb26:	4608      	mov	r0, r1
3400eb28:	4611      	mov	r1, r2
3400eb2a:	2200      	movs	r2, #0
3400eb2c:	602a      	str	r2, [r5, #0]
3400eb2e:	461a      	mov	r2, r3
3400eb30:	f7f2 fc9f 	bl	34001472 <_lseek>
3400eb34:	1c43      	adds	r3, r0, #1
3400eb36:	d102      	bne.n	3400eb3e <_lseek_r+0x1e>
3400eb38:	682b      	ldr	r3, [r5, #0]
3400eb3a:	b103      	cbz	r3, 3400eb3e <_lseek_r+0x1e>
3400eb3c:	6023      	str	r3, [r4, #0]
3400eb3e:	bd38      	pop	{r3, r4, r5, pc}
3400eb40:	34012f74 	.word	0x34012f74

3400eb44 <_read_r>:
3400eb44:	b538      	push	{r3, r4, r5, lr}
3400eb46:	4604      	mov	r4, r0
3400eb48:	4d06      	ldr	r5, [pc, #24]	@ (3400eb64 <_read_r+0x20>)
3400eb4a:	4608      	mov	r0, r1
3400eb4c:	4611      	mov	r1, r2
3400eb4e:	2200      	movs	r2, #0
3400eb50:	602a      	str	r2, [r5, #0]
3400eb52:	461a      	mov	r2, r3
3400eb54:	f7f2 fc75 	bl	34001442 <_read>
3400eb58:	1c43      	adds	r3, r0, #1
3400eb5a:	d102      	bne.n	3400eb62 <_read_r+0x1e>
3400eb5c:	682b      	ldr	r3, [r5, #0]
3400eb5e:	b103      	cbz	r3, 3400eb62 <_read_r+0x1e>
3400eb60:	6023      	str	r3, [r4, #0]
3400eb62:	bd38      	pop	{r3, r4, r5, pc}
3400eb64:	34012f74 	.word	0x34012f74

3400eb68 <_sbrk_r>:
3400eb68:	b538      	push	{r3, r4, r5, lr}
3400eb6a:	2300      	movs	r3, #0
3400eb6c:	4d05      	ldr	r5, [pc, #20]	@ (3400eb84 <_sbrk_r+0x1c>)
3400eb6e:	4604      	mov	r4, r0
3400eb70:	4608      	mov	r0, r1
3400eb72:	602b      	str	r3, [r5, #0]
3400eb74:	f001 fc60 	bl	34010438 <_sbrk>
3400eb78:	1c43      	adds	r3, r0, #1
3400eb7a:	d102      	bne.n	3400eb82 <_sbrk_r+0x1a>
3400eb7c:	682b      	ldr	r3, [r5, #0]
3400eb7e:	b103      	cbz	r3, 3400eb82 <_sbrk_r+0x1a>
3400eb80:	6023      	str	r3, [r4, #0]
3400eb82:	bd38      	pop	{r3, r4, r5, pc}
3400eb84:	34012f74 	.word	0x34012f74

3400eb88 <_write_r>:
3400eb88:	b538      	push	{r3, r4, r5, lr}
3400eb8a:	4604      	mov	r4, r0
3400eb8c:	4d06      	ldr	r5, [pc, #24]	@ (3400eba8 <_write_r+0x20>)
3400eb8e:	4608      	mov	r0, r1
3400eb90:	4611      	mov	r1, r2
3400eb92:	2200      	movs	r2, #0
3400eb94:	602a      	str	r2, [r5, #0]
3400eb96:	461a      	mov	r2, r3
3400eb98:	f7f2 fbc2 	bl	34001320 <_write>
3400eb9c:	1c43      	adds	r3, r0, #1
3400eb9e:	d102      	bne.n	3400eba6 <_write_r+0x1e>
3400eba0:	682b      	ldr	r3, [r5, #0]
3400eba2:	b103      	cbz	r3, 3400eba6 <_write_r+0x1e>
3400eba4:	6023      	str	r3, [r4, #0]
3400eba6:	bd38      	pop	{r3, r4, r5, pc}
3400eba8:	34012f74 	.word	0x34012f74

3400ebac <__errno>:
3400ebac:	4b01      	ldr	r3, [pc, #4]	@ (3400ebb4 <__errno+0x8>)
3400ebae:	6818      	ldr	r0, [r3, #0]
3400ebb0:	4770      	bx	lr
3400ebb2:	bf00      	nop
3400ebb4:	340123c4 	.word	0x340123c4

3400ebb8 <__libc_init_array>:
3400ebb8:	b570      	push	{r4, r5, r6, lr}
3400ebba:	4d0d      	ldr	r5, [pc, #52]	@ (3400ebf0 <__libc_init_array+0x38>)
3400ebbc:	2600      	movs	r6, #0
3400ebbe:	4c0d      	ldr	r4, [pc, #52]	@ (3400ebf4 <__libc_init_array+0x3c>)
3400ebc0:	1b64      	subs	r4, r4, r5
3400ebc2:	10a4      	asrs	r4, r4, #2
3400ebc4:	42a6      	cmp	r6, r4
3400ebc6:	d109      	bne.n	3400ebdc <__libc_init_array+0x24>
3400ebc8:	4d0b      	ldr	r5, [pc, #44]	@ (3400ebf8 <__libc_init_array+0x40>)
3400ebca:	2600      	movs	r6, #0
3400ebcc:	4c0b      	ldr	r4, [pc, #44]	@ (3400ebfc <__libc_init_array+0x44>)
3400ebce:	f001 fc41 	bl	34010454 <_init>
3400ebd2:	1b64      	subs	r4, r4, r5
3400ebd4:	10a4      	asrs	r4, r4, #2
3400ebd6:	42a6      	cmp	r6, r4
3400ebd8:	d105      	bne.n	3400ebe6 <__libc_init_array+0x2e>
3400ebda:	bd70      	pop	{r4, r5, r6, pc}
3400ebdc:	f855 3b04 	ldr.w	r3, [r5], #4
3400ebe0:	3601      	adds	r6, #1
3400ebe2:	4798      	blx	r3
3400ebe4:	e7ee      	b.n	3400ebc4 <__libc_init_array+0xc>
3400ebe6:	f855 3b04 	ldr.w	r3, [r5], #4
3400ebea:	3601      	adds	r6, #1
3400ebec:	4798      	blx	r3
3400ebee:	e7f2      	b.n	3400ebd6 <__libc_init_array+0x1e>
3400ebf0:	3401235c 	.word	0x3401235c
3400ebf4:	3401235c 	.word	0x3401235c
3400ebf8:	3401235c 	.word	0x3401235c
3400ebfc:	34012360 	.word	0x34012360

3400ec00 <__retarget_lock_init_recursive>:
3400ec00:	4770      	bx	lr

3400ec02 <__retarget_lock_acquire_recursive>:
3400ec02:	4770      	bx	lr

3400ec04 <__retarget_lock_release_recursive>:
3400ec04:	4770      	bx	lr

3400ec06 <memchr>:
3400ec06:	b2c9      	uxtb	r1, r1
3400ec08:	4603      	mov	r3, r0
3400ec0a:	4402      	add	r2, r0
3400ec0c:	b510      	push	{r4, lr}
3400ec0e:	4293      	cmp	r3, r2
3400ec10:	4618      	mov	r0, r3
3400ec12:	d101      	bne.n	3400ec18 <memchr+0x12>
3400ec14:	2000      	movs	r0, #0
3400ec16:	e003      	b.n	3400ec20 <memchr+0x1a>
3400ec18:	7804      	ldrb	r4, [r0, #0]
3400ec1a:	3301      	adds	r3, #1
3400ec1c:	428c      	cmp	r4, r1
3400ec1e:	d1f6      	bne.n	3400ec0e <memchr+0x8>
3400ec20:	bd10      	pop	{r4, pc}

3400ec22 <memcpy>:
3400ec22:	440a      	add	r2, r1
3400ec24:	1e43      	subs	r3, r0, #1
3400ec26:	4291      	cmp	r1, r2
3400ec28:	d100      	bne.n	3400ec2c <memcpy+0xa>
3400ec2a:	4770      	bx	lr
3400ec2c:	b510      	push	{r4, lr}
3400ec2e:	f811 4b01 	ldrb.w	r4, [r1], #1
3400ec32:	4291      	cmp	r1, r2
3400ec34:	f803 4f01 	strb.w	r4, [r3, #1]!
3400ec38:	d1f9      	bne.n	3400ec2e <memcpy+0xc>
3400ec3a:	bd10      	pop	{r4, pc}

3400ec3c <abort>:
3400ec3c:	2006      	movs	r0, #6
3400ec3e:	b508      	push	{r3, lr}
3400ec40:	f001 fb88 	bl	34010354 <raise>
3400ec44:	2001      	movs	r0, #1
3400ec46:	f7f2 fbf6 	bl	34001436 <_exit>

3400ec4a <quorem>:
3400ec4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400ec4e:	6903      	ldr	r3, [r0, #16]
3400ec50:	4607      	mov	r7, r0
3400ec52:	690c      	ldr	r4, [r1, #16]
3400ec54:	42a3      	cmp	r3, r4
3400ec56:	f2c0 8083 	blt.w	3400ed60 <quorem+0x116>
3400ec5a:	3c01      	subs	r4, #1
3400ec5c:	f100 0514 	add.w	r5, r0, #20
3400ec60:	f101 0814 	add.w	r8, r1, #20
3400ec64:	00a3      	lsls	r3, r4, #2
3400ec66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400ec6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3400ec6e:	9300      	str	r3, [sp, #0]
3400ec70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400ec74:	9301      	str	r3, [sp, #4]
3400ec76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3400ec7a:	3301      	adds	r3, #1
3400ec7c:	429a      	cmp	r2, r3
3400ec7e:	fbb2 f6f3 	udiv	r6, r2, r3
3400ec82:	d331      	bcc.n	3400ece8 <quorem+0x9e>
3400ec84:	f04f 0a00 	mov.w	sl, #0
3400ec88:	46c4      	mov	ip, r8
3400ec8a:	46ae      	mov	lr, r5
3400ec8c:	46d3      	mov	fp, sl
3400ec8e:	f85c 3b04 	ldr.w	r3, [ip], #4
3400ec92:	b298      	uxth	r0, r3
3400ec94:	45e1      	cmp	r9, ip
3400ec96:	ea4f 4313 	mov.w	r3, r3, lsr #16
3400ec9a:	fb06 a000 	mla	r0, r6, r0, sl
3400ec9e:	ea4f 4210 	mov.w	r2, r0, lsr #16
3400eca2:	b280      	uxth	r0, r0
3400eca4:	fb06 2303 	mla	r3, r6, r3, r2
3400eca8:	f8de 2000 	ldr.w	r2, [lr]
3400ecac:	b292      	uxth	r2, r2
3400ecae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400ecb2:	eba2 0200 	sub.w	r2, r2, r0
3400ecb6:	b29b      	uxth	r3, r3
3400ecb8:	f8de 0000 	ldr.w	r0, [lr]
3400ecbc:	445a      	add	r2, fp
3400ecbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3400ecc2:	b292      	uxth	r2, r2
3400ecc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3400ecc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3400eccc:	ea4f 4b23 	mov.w	fp, r3, asr #16
3400ecd0:	f84e 2b04 	str.w	r2, [lr], #4
3400ecd4:	d2db      	bcs.n	3400ec8e <quorem+0x44>
3400ecd6:	9b00      	ldr	r3, [sp, #0]
3400ecd8:	58eb      	ldr	r3, [r5, r3]
3400ecda:	b92b      	cbnz	r3, 3400ece8 <quorem+0x9e>
3400ecdc:	9b01      	ldr	r3, [sp, #4]
3400ecde:	3b04      	subs	r3, #4
3400ece0:	429d      	cmp	r5, r3
3400ece2:	461a      	mov	r2, r3
3400ece4:	d330      	bcc.n	3400ed48 <quorem+0xfe>
3400ece6:	613c      	str	r4, [r7, #16]
3400ece8:	4638      	mov	r0, r7
3400ecea:	f001 f85b 	bl	3400fda4 <__mcmp>
3400ecee:	2800      	cmp	r0, #0
3400ecf0:	db26      	blt.n	3400ed40 <quorem+0xf6>
3400ecf2:	4629      	mov	r1, r5
3400ecf4:	2000      	movs	r0, #0
3400ecf6:	f858 2b04 	ldr.w	r2, [r8], #4
3400ecfa:	f8d1 c000 	ldr.w	ip, [r1]
3400ecfe:	fa1f fe82 	uxth.w	lr, r2
3400ed02:	45c1      	cmp	r9, r8
3400ed04:	fa1f f38c 	uxth.w	r3, ip
3400ed08:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400ed0c:	eba3 030e 	sub.w	r3, r3, lr
3400ed10:	4403      	add	r3, r0
3400ed12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3400ed16:	b29b      	uxth	r3, r3
3400ed18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3400ed1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400ed20:	ea4f 4022 	mov.w	r0, r2, asr #16
3400ed24:	f841 3b04 	str.w	r3, [r1], #4
3400ed28:	d2e5      	bcs.n	3400ecf6 <quorem+0xac>
3400ed2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400ed2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400ed32:	b922      	cbnz	r2, 3400ed3e <quorem+0xf4>
3400ed34:	3b04      	subs	r3, #4
3400ed36:	429d      	cmp	r5, r3
3400ed38:	461a      	mov	r2, r3
3400ed3a:	d30b      	bcc.n	3400ed54 <quorem+0x10a>
3400ed3c:	613c      	str	r4, [r7, #16]
3400ed3e:	3601      	adds	r6, #1
3400ed40:	4630      	mov	r0, r6
3400ed42:	b003      	add	sp, #12
3400ed44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400ed48:	6812      	ldr	r2, [r2, #0]
3400ed4a:	3b04      	subs	r3, #4
3400ed4c:	2a00      	cmp	r2, #0
3400ed4e:	d1ca      	bne.n	3400ece6 <quorem+0x9c>
3400ed50:	3c01      	subs	r4, #1
3400ed52:	e7c5      	b.n	3400ece0 <quorem+0x96>
3400ed54:	6812      	ldr	r2, [r2, #0]
3400ed56:	3b04      	subs	r3, #4
3400ed58:	2a00      	cmp	r2, #0
3400ed5a:	d1ef      	bne.n	3400ed3c <quorem+0xf2>
3400ed5c:	3c01      	subs	r4, #1
3400ed5e:	e7ea      	b.n	3400ed36 <quorem+0xec>
3400ed60:	2000      	movs	r0, #0
3400ed62:	e7ee      	b.n	3400ed42 <quorem+0xf8>
3400ed64:	0000      	movs	r0, r0
	...

3400ed68 <_dtoa_r>:
3400ed68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400ed6c:	69c7      	ldr	r7, [r0, #28]
3400ed6e:	4681      	mov	r9, r0
3400ed70:	ed2d 8b02 	vpush	{d8}
3400ed74:	b091      	sub	sp, #68	@ 0x44
3400ed76:	ec55 4b10 	vmov	r4, r5, d0
3400ed7a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3400ed7c:	9107      	str	r1, [sp, #28]
3400ed7e:	9209      	str	r2, [sp, #36]	@ 0x24
3400ed80:	930d      	str	r3, [sp, #52]	@ 0x34
3400ed82:	ed8d 0b02 	vstr	d0, [sp, #8]
3400ed86:	b97f      	cbnz	r7, 3400eda8 <_dtoa_r+0x40>
3400ed88:	2010      	movs	r0, #16
3400ed8a:	f7fe fcf1 	bl	3400d770 <malloc>
3400ed8e:	4602      	mov	r2, r0
3400ed90:	f8c9 001c 	str.w	r0, [r9, #28]
3400ed94:	b920      	cbnz	r0, 3400eda0 <_dtoa_r+0x38>
3400ed96:	4ba0      	ldr	r3, [pc, #640]	@ (3400f018 <_dtoa_r+0x2b0>)
3400ed98:	21ef      	movs	r1, #239	@ 0xef
3400ed9a:	48a0      	ldr	r0, [pc, #640]	@ (3400f01c <_dtoa_r+0x2b4>)
3400ed9c:	f7fe fcca 	bl	3400d734 <__assert_func>
3400eda0:	e9c0 7701 	strd	r7, r7, [r0, #4]
3400eda4:	6007      	str	r7, [r0, #0]
3400eda6:	60c7      	str	r7, [r0, #12]
3400eda8:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400edac:	6819      	ldr	r1, [r3, #0]
3400edae:	b159      	cbz	r1, 3400edc8 <_dtoa_r+0x60>
3400edb0:	685a      	ldr	r2, [r3, #4]
3400edb2:	2301      	movs	r3, #1
3400edb4:	4648      	mov	r0, r9
3400edb6:	4093      	lsls	r3, r2
3400edb8:	604a      	str	r2, [r1, #4]
3400edba:	608b      	str	r3, [r1, #8]
3400edbc:	f000 fdbc 	bl	3400f938 <_Bfree>
3400edc0:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400edc4:	2200      	movs	r2, #0
3400edc6:	601a      	str	r2, [r3, #0]
3400edc8:	1e2b      	subs	r3, r5, #0
3400edca:	bfb7      	itett	lt
3400edcc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3400edd0:	2300      	movge	r3, #0
3400edd2:	2201      	movlt	r2, #1
3400edd4:	9303      	strlt	r3, [sp, #12]
3400edd6:	bfac      	ite	ge
3400edd8:	6033      	strge	r3, [r6, #0]
3400edda:	6032      	strlt	r2, [r6, #0]
3400eddc:	4b90      	ldr	r3, [pc, #576]	@ (3400f020 <_dtoa_r+0x2b8>)
3400edde:	9e03      	ldr	r6, [sp, #12]
3400ede0:	43b3      	bics	r3, r6
3400ede2:	d110      	bne.n	3400ee06 <_dtoa_r+0x9e>
3400ede4:	f242 730f 	movw	r3, #9999	@ 0x270f
3400ede8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400edea:	6013      	str	r3, [r2, #0]
3400edec:	f3c6 0313 	ubfx	r3, r6, #0, #20
3400edf0:	4323      	orrs	r3, r4
3400edf2:	f000 84e6 	beq.w	3400f7c2 <_dtoa_r+0xa5a>
3400edf6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400edf8:	4f8a      	ldr	r7, [pc, #552]	@ (3400f024 <_dtoa_r+0x2bc>)
3400edfa:	2b00      	cmp	r3, #0
3400edfc:	f000 84e8 	beq.w	3400f7d0 <_dtoa_r+0xa68>
3400ee00:	1cfb      	adds	r3, r7, #3
3400ee02:	f000 bce3 	b.w	3400f7cc <_dtoa_r+0xa64>
3400ee06:	ed9d 8b02 	vldr	d8, [sp, #8]
3400ee0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400ee0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400ee12:	d10a      	bne.n	3400ee2a <_dtoa_r+0xc2>
3400ee14:	2301      	movs	r3, #1
3400ee16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400ee18:	6013      	str	r3, [r2, #0]
3400ee1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400ee1c:	b113      	cbz	r3, 3400ee24 <_dtoa_r+0xbc>
3400ee1e:	4b82      	ldr	r3, [pc, #520]	@ (3400f028 <_dtoa_r+0x2c0>)
3400ee20:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400ee22:	6013      	str	r3, [r2, #0]
3400ee24:	4f81      	ldr	r7, [pc, #516]	@ (3400f02c <_dtoa_r+0x2c4>)
3400ee26:	f000 bcd3 	b.w	3400f7d0 <_dtoa_r+0xa68>
3400ee2a:	aa0e      	add	r2, sp, #56	@ 0x38
3400ee2c:	eeb0 0b48 	vmov.f64	d0, d8
3400ee30:	a90f      	add	r1, sp, #60	@ 0x3c
3400ee32:	4648      	mov	r0, r9
3400ee34:	f001 f86a 	bl	3400ff0c <__d2b>
3400ee38:	f3c6 530a 	ubfx	r3, r6, #20, #11
3400ee3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400ee3e:	9001      	str	r0, [sp, #4]
3400ee40:	2b00      	cmp	r3, #0
3400ee42:	d045      	beq.n	3400eed0 <_dtoa_r+0x168>
3400ee44:	ee18 1a90 	vmov	r1, s17
3400ee48:	eeb0 7b48 	vmov.f64	d7, d8
3400ee4c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3400ee50:	2500      	movs	r5, #0
3400ee52:	f3c1 0113 	ubfx	r1, r1, #0, #20
3400ee56:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3400ee5a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3400ee5e:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3400ee62:	ee07 1a90 	vmov	s15, r1
3400ee66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3400f000 <_dtoa_r+0x298>
3400ee6a:	ee37 7b46 	vsub.f64	d7, d7, d6
3400ee6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3400f008 <_dtoa_r+0x2a0>
3400ee72:	eea7 6b05 	vfma.f64	d6, d7, d5
3400ee76:	ee07 3a90 	vmov	s15, r3
3400ee7a:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3400ee7e:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3400f010 <_dtoa_r+0x2a8>
3400ee82:	eeb0 7b46 	vmov.f64	d7, d6
3400ee86:	eea4 7b05 	vfma.f64	d7, d4, d5
3400ee8a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3400ee8e:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3400ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400ee96:	ee16 8a90 	vmov	r8, s13
3400ee9a:	d508      	bpl.n	3400eeae <_dtoa_r+0x146>
3400ee9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3400eea0:	eeb4 6b47 	vcmp.f64	d6, d7
3400eea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400eea8:	bf18      	it	ne
3400eeaa:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3400eeae:	f1b8 0f16 	cmp.w	r8, #22
3400eeb2:	d82d      	bhi.n	3400ef10 <_dtoa_r+0x1a8>
3400eeb4:	495e      	ldr	r1, [pc, #376]	@ (3400f030 <_dtoa_r+0x2c8>)
3400eeb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3400eeba:	ed91 7b00 	vldr	d7, [r1]
3400eebe:	eeb4 8bc7 	vcmpe.f64	d8, d7
3400eec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400eec6:	d501      	bpl.n	3400eecc <_dtoa_r+0x164>
3400eec8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400eecc:	2100      	movs	r1, #0
3400eece:	e020      	b.n	3400ef12 <_dtoa_r+0x1aa>
3400eed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3400eed2:	2501      	movs	r5, #1
3400eed4:	4413      	add	r3, r2
3400eed6:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3400eeda:	2920      	cmp	r1, #32
3400eedc:	bfc9      	itett	gt
3400eede:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3400eee2:	f1c1 0120 	rsble	r1, r1, #32
3400eee6:	408e      	lslgt	r6, r1
3400eee8:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3400eeec:	bfd8      	it	le
3400eeee:	fa04 f101 	lslle.w	r1, r4, r1
3400eef2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3400eef6:	bfc4      	itt	gt
3400eef8:	fa24 f101 	lsrgt.w	r1, r4, r1
3400eefc:	4331      	orrgt	r1, r6
3400eefe:	ee07 1a90 	vmov	s15, r1
3400ef02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3400ef06:	ee17 1a90 	vmov	r1, s15
3400ef0a:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3400ef0e:	e7a6      	b.n	3400ee5e <_dtoa_r+0xf6>
3400ef10:	2101      	movs	r1, #1
3400ef12:	1ad2      	subs	r2, r2, r3
3400ef14:	910c      	str	r1, [sp, #48]	@ 0x30
3400ef16:	1e53      	subs	r3, r2, #1
3400ef18:	9306      	str	r3, [sp, #24]
3400ef1a:	bf49      	itett	mi
3400ef1c:	f1c2 0301 	rsbmi	r3, r2, #1
3400ef20:	2300      	movpl	r3, #0
3400ef22:	9304      	strmi	r3, [sp, #16]
3400ef24:	2300      	movmi	r3, #0
3400ef26:	bf54      	ite	pl
3400ef28:	9304      	strpl	r3, [sp, #16]
3400ef2a:	9306      	strmi	r3, [sp, #24]
3400ef2c:	f1b8 0f00 	cmp.w	r8, #0
3400ef30:	db16      	blt.n	3400ef60 <_dtoa_r+0x1f8>
3400ef32:	9b06      	ldr	r3, [sp, #24]
3400ef34:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3400ef38:	4443      	add	r3, r8
3400ef3a:	9306      	str	r3, [sp, #24]
3400ef3c:	2300      	movs	r3, #0
3400ef3e:	9a07      	ldr	r2, [sp, #28]
3400ef40:	2a09      	cmp	r2, #9
3400ef42:	d843      	bhi.n	3400efcc <_dtoa_r+0x264>
3400ef44:	2a05      	cmp	r2, #5
3400ef46:	bfc5      	ittet	gt
3400ef48:	3a04      	subgt	r2, #4
3400ef4a:	2400      	movgt	r4, #0
3400ef4c:	2401      	movle	r4, #1
3400ef4e:	9207      	strgt	r2, [sp, #28]
3400ef50:	9a07      	ldr	r2, [sp, #28]
3400ef52:	3a02      	subs	r2, #2
3400ef54:	2a03      	cmp	r2, #3
3400ef56:	d844      	bhi.n	3400efe2 <_dtoa_r+0x27a>
3400ef58:	e8df f002 	tbb	[pc, r2]
3400ef5c:	0b173634 	.word	0x0b173634
3400ef60:	9b04      	ldr	r3, [sp, #16]
3400ef62:	2200      	movs	r2, #0
3400ef64:	eba3 0308 	sub.w	r3, r3, r8
3400ef68:	920a      	str	r2, [sp, #40]	@ 0x28
3400ef6a:	9304      	str	r3, [sp, #16]
3400ef6c:	f1c8 0300 	rsb	r3, r8, #0
3400ef70:	e7e5      	b.n	3400ef3e <_dtoa_r+0x1d6>
3400ef72:	2201      	movs	r2, #1
3400ef74:	9208      	str	r2, [sp, #32]
3400ef76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400ef78:	eb08 0b02 	add.w	fp, r8, r2
3400ef7c:	f10b 0a01 	add.w	sl, fp, #1
3400ef80:	4652      	mov	r2, sl
3400ef82:	2a01      	cmp	r2, #1
3400ef84:	bfb8      	it	lt
3400ef86:	2201      	movlt	r2, #1
3400ef88:	e006      	b.n	3400ef98 <_dtoa_r+0x230>
3400ef8a:	2201      	movs	r2, #1
3400ef8c:	9208      	str	r2, [sp, #32]
3400ef8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400ef90:	2a00      	cmp	r2, #0
3400ef92:	dd29      	ble.n	3400efe8 <_dtoa_r+0x280>
3400ef94:	4693      	mov	fp, r2
3400ef96:	4692      	mov	sl, r2
3400ef98:	f8d9 701c 	ldr.w	r7, [r9, #28]
3400ef9c:	2100      	movs	r1, #0
3400ef9e:	2004      	movs	r0, #4
3400efa0:	f100 0614 	add.w	r6, r0, #20
3400efa4:	4296      	cmp	r6, r2
3400efa6:	d926      	bls.n	3400eff6 <_dtoa_r+0x28e>
3400efa8:	6079      	str	r1, [r7, #4]
3400efaa:	4648      	mov	r0, r9
3400efac:	9305      	str	r3, [sp, #20]
3400efae:	f000 fc83 	bl	3400f8b8 <_Balloc>
3400efb2:	9b05      	ldr	r3, [sp, #20]
3400efb4:	4607      	mov	r7, r0
3400efb6:	2800      	cmp	r0, #0
3400efb8:	d13e      	bne.n	3400f038 <_dtoa_r+0x2d0>
3400efba:	4b1e      	ldr	r3, [pc, #120]	@ (3400f034 <_dtoa_r+0x2cc>)
3400efbc:	4602      	mov	r2, r0
3400efbe:	f240 11af 	movw	r1, #431	@ 0x1af
3400efc2:	e6ea      	b.n	3400ed9a <_dtoa_r+0x32>
3400efc4:	2200      	movs	r2, #0
3400efc6:	e7e1      	b.n	3400ef8c <_dtoa_r+0x224>
3400efc8:	2200      	movs	r2, #0
3400efca:	e7d3      	b.n	3400ef74 <_dtoa_r+0x20c>
3400efcc:	2401      	movs	r4, #1
3400efce:	2200      	movs	r2, #0
3400efd0:	e9cd 2407 	strd	r2, r4, [sp, #28]
3400efd4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3400efd8:	2100      	movs	r1, #0
3400efda:	2212      	movs	r2, #18
3400efdc:	46da      	mov	sl, fp
3400efde:	9109      	str	r1, [sp, #36]	@ 0x24
3400efe0:	e7da      	b.n	3400ef98 <_dtoa_r+0x230>
3400efe2:	2201      	movs	r2, #1
3400efe4:	9208      	str	r2, [sp, #32]
3400efe6:	e7f5      	b.n	3400efd4 <_dtoa_r+0x26c>
3400efe8:	f04f 0b01 	mov.w	fp, #1
3400efec:	46da      	mov	sl, fp
3400efee:	465a      	mov	r2, fp
3400eff0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3400eff4:	e7d0      	b.n	3400ef98 <_dtoa_r+0x230>
3400eff6:	3101      	adds	r1, #1
3400eff8:	0040      	lsls	r0, r0, #1
3400effa:	e7d1      	b.n	3400efa0 <_dtoa_r+0x238>
3400effc:	f3af 8000 	nop.w
3400f000:	636f4361 	.word	0x636f4361
3400f004:	3fd287a7 	.word	0x3fd287a7
3400f008:	8b60c8b3 	.word	0x8b60c8b3
3400f00c:	3fc68a28 	.word	0x3fc68a28
3400f010:	509f79fb 	.word	0x509f79fb
3400f014:	3fd34413 	.word	0x3fd34413
3400f018:	34011d9b 	.word	0x34011d9b
3400f01c:	34011db2 	.word	0x34011db2
3400f020:	7ff00000 	.word	0x7ff00000
3400f024:	34011d97 	.word	0x34011d97
3400f028:	34010f63 	.word	0x34010f63
3400f02c:	34010f62 	.word	0x34010f62
3400f030:	34012188 	.word	0x34012188
3400f034:	34011e0a 	.word	0x34011e0a
3400f038:	f8d9 201c 	ldr.w	r2, [r9, #28]
3400f03c:	f1ba 0f0e 	cmp.w	sl, #14
3400f040:	6010      	str	r0, [r2, #0]
3400f042:	d86e      	bhi.n	3400f122 <_dtoa_r+0x3ba>
3400f044:	2c00      	cmp	r4, #0
3400f046:	d06c      	beq.n	3400f122 <_dtoa_r+0x3ba>
3400f048:	f1b8 0f00 	cmp.w	r8, #0
3400f04c:	f340 80b4 	ble.w	3400f1b8 <_dtoa_r+0x450>
3400f050:	f008 010f 	and.w	r1, r8, #15
3400f054:	4ac7      	ldr	r2, [pc, #796]	@ (3400f374 <_dtoa_r+0x60c>)
3400f056:	f418 7f80 	tst.w	r8, #256	@ 0x100
3400f05a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3400f05e:	ea4f 1128 	mov.w	r1, r8, asr #4
3400f062:	ed92 7b00 	vldr	d7, [r2]
3400f066:	f000 809b 	beq.w	3400f1a0 <_dtoa_r+0x438>
3400f06a:	4ac3      	ldr	r2, [pc, #780]	@ (3400f378 <_dtoa_r+0x610>)
3400f06c:	f001 010f 	and.w	r1, r1, #15
3400f070:	ed92 6b08 	vldr	d6, [r2, #32]
3400f074:	2203      	movs	r2, #3
3400f076:	ee88 6b06 	vdiv.f64	d6, d8, d6
3400f07a:	ed8d 6b02 	vstr	d6, [sp, #8]
3400f07e:	48be      	ldr	r0, [pc, #760]	@ (3400f378 <_dtoa_r+0x610>)
3400f080:	2900      	cmp	r1, #0
3400f082:	f040 808f 	bne.w	3400f1a4 <_dtoa_r+0x43c>
3400f086:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f08a:	ee86 7b07 	vdiv.f64	d7, d6, d7
3400f08e:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f092:	990c      	ldr	r1, [sp, #48]	@ 0x30
3400f094:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f098:	2900      	cmp	r1, #0
3400f09a:	f000 80b3 	beq.w	3400f204 <_dtoa_r+0x49c>
3400f09e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3400f0a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f0aa:	f140 80ab 	bpl.w	3400f204 <_dtoa_r+0x49c>
3400f0ae:	f1ba 0f00 	cmp.w	sl, #0
3400f0b2:	f000 80a7 	beq.w	3400f204 <_dtoa_r+0x49c>
3400f0b6:	f1bb 0f00 	cmp.w	fp, #0
3400f0ba:	dd30      	ble.n	3400f11e <_dtoa_r+0x3b6>
3400f0bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3400f0c0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3400f0c4:	3201      	adds	r2, #1
3400f0c6:	465c      	mov	r4, fp
3400f0c8:	9105      	str	r1, [sp, #20]
3400f0ca:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f0ce:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f0d2:	ee07 2a90 	vmov	s15, r2
3400f0d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3400f0da:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f0de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3400f0e2:	eea7 5b06 	vfma.f64	d5, d7, d6
3400f0e6:	ee15 2a90 	vmov	r2, s11
3400f0ea:	ec51 0b15 	vmov	r0, r1, d5
3400f0ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3400f0f2:	2c00      	cmp	r4, #0
3400f0f4:	f040 808a 	bne.w	3400f20c <_dtoa_r+0x4a4>
3400f0f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f0fc:	ee36 6b47 	vsub.f64	d6, d6, d7
3400f100:	ec41 0b17 	vmov	d7, r0, r1
3400f104:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f10c:	f300 826a 	bgt.w	3400f5e4 <_dtoa_r+0x87c>
3400f110:	eeb1 7b47 	vneg.f64	d7, d7
3400f114:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f11c:	d423      	bmi.n	3400f166 <_dtoa_r+0x3fe>
3400f11e:	ed8d 8b02 	vstr	d8, [sp, #8]
3400f122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3400f124:	2a00      	cmp	r2, #0
3400f126:	f2c0 8129 	blt.w	3400f37c <_dtoa_r+0x614>
3400f12a:	f1b8 0f0e 	cmp.w	r8, #14
3400f12e:	f300 8125 	bgt.w	3400f37c <_dtoa_r+0x614>
3400f132:	4b90      	ldr	r3, [pc, #576]	@ (3400f374 <_dtoa_r+0x60c>)
3400f134:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3400f138:	ed93 6b00 	vldr	d6, [r3]
3400f13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f13e:	2b00      	cmp	r3, #0
3400f140:	f280 80c8 	bge.w	3400f2d4 <_dtoa_r+0x56c>
3400f144:	f1ba 0f00 	cmp.w	sl, #0
3400f148:	f300 80c4 	bgt.w	3400f2d4 <_dtoa_r+0x56c>
3400f14c:	d10b      	bne.n	3400f166 <_dtoa_r+0x3fe>
3400f14e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f152:	ee26 6b07 	vmul.f64	d6, d6, d7
3400f156:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f15a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f162:	f2c0 823c 	blt.w	3400f5de <_dtoa_r+0x876>
3400f166:	2400      	movs	r4, #0
3400f168:	4625      	mov	r5, r4
3400f16a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f16c:	463e      	mov	r6, r7
3400f16e:	43db      	mvns	r3, r3
3400f170:	9305      	str	r3, [sp, #20]
3400f172:	f04f 0800 	mov.w	r8, #0
3400f176:	4621      	mov	r1, r4
3400f178:	4648      	mov	r0, r9
3400f17a:	f000 fbdd 	bl	3400f938 <_Bfree>
3400f17e:	2d00      	cmp	r5, #0
3400f180:	f000 80a2 	beq.w	3400f2c8 <_dtoa_r+0x560>
3400f184:	f1b8 0f00 	cmp.w	r8, #0
3400f188:	d005      	beq.n	3400f196 <_dtoa_r+0x42e>
3400f18a:	45a8      	cmp	r8, r5
3400f18c:	d003      	beq.n	3400f196 <_dtoa_r+0x42e>
3400f18e:	4641      	mov	r1, r8
3400f190:	4648      	mov	r0, r9
3400f192:	f000 fbd1 	bl	3400f938 <_Bfree>
3400f196:	4629      	mov	r1, r5
3400f198:	4648      	mov	r0, r9
3400f19a:	f000 fbcd 	bl	3400f938 <_Bfree>
3400f19e:	e093      	b.n	3400f2c8 <_dtoa_r+0x560>
3400f1a0:	2202      	movs	r2, #2
3400f1a2:	e76c      	b.n	3400f07e <_dtoa_r+0x316>
3400f1a4:	07cc      	lsls	r4, r1, #31
3400f1a6:	d504      	bpl.n	3400f1b2 <_dtoa_r+0x44a>
3400f1a8:	3201      	adds	r2, #1
3400f1aa:	ed90 6b00 	vldr	d6, [r0]
3400f1ae:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f1b2:	1049      	asrs	r1, r1, #1
3400f1b4:	3008      	adds	r0, #8
3400f1b6:	e763      	b.n	3400f080 <_dtoa_r+0x318>
3400f1b8:	d022      	beq.n	3400f200 <_dtoa_r+0x498>
3400f1ba:	f1c8 0100 	rsb	r1, r8, #0
3400f1be:	4a6d      	ldr	r2, [pc, #436]	@ (3400f374 <_dtoa_r+0x60c>)
3400f1c0:	2400      	movs	r4, #0
3400f1c2:	f001 000f 	and.w	r0, r1, #15
3400f1c6:	1109      	asrs	r1, r1, #4
3400f1c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3400f1cc:	486a      	ldr	r0, [pc, #424]	@ (3400f378 <_dtoa_r+0x610>)
3400f1ce:	ed92 7b00 	vldr	d7, [r2]
3400f1d2:	2202      	movs	r2, #2
3400f1d4:	ee28 7b07 	vmul.f64	d7, d8, d7
3400f1d8:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f1dc:	b929      	cbnz	r1, 3400f1ea <_dtoa_r+0x482>
3400f1de:	2c00      	cmp	r4, #0
3400f1e0:	f43f af57 	beq.w	3400f092 <_dtoa_r+0x32a>
3400f1e4:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f1e8:	e753      	b.n	3400f092 <_dtoa_r+0x32a>
3400f1ea:	07ce      	lsls	r6, r1, #31
3400f1ec:	d505      	bpl.n	3400f1fa <_dtoa_r+0x492>
3400f1ee:	3201      	adds	r2, #1
3400f1f0:	2401      	movs	r4, #1
3400f1f2:	ed90 6b00 	vldr	d6, [r0]
3400f1f6:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f1fa:	1049      	asrs	r1, r1, #1
3400f1fc:	3008      	adds	r0, #8
3400f1fe:	e7ed      	b.n	3400f1dc <_dtoa_r+0x474>
3400f200:	2202      	movs	r2, #2
3400f202:	e746      	b.n	3400f092 <_dtoa_r+0x32a>
3400f204:	4654      	mov	r4, sl
3400f206:	f8cd 8014 	str.w	r8, [sp, #20]
3400f20a:	e762      	b.n	3400f0d2 <_dtoa_r+0x36a>
3400f20c:	4a59      	ldr	r2, [pc, #356]	@ (3400f374 <_dtoa_r+0x60c>)
3400f20e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3400f212:	443c      	add	r4, r7
3400f214:	ed12 4b02 	vldr	d4, [r2, #-8]
3400f218:	9a08      	ldr	r2, [sp, #32]
3400f21a:	ec41 0b17 	vmov	d7, r0, r1
3400f21e:	b34a      	cbz	r2, 3400f274 <_dtoa_r+0x50c>
3400f220:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3400f224:	463e      	mov	r6, r7
3400f226:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3400f22a:	ee83 5b04 	vdiv.f64	d5, d3, d4
3400f22e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f232:	ee35 7b47 	vsub.f64	d7, d5, d7
3400f236:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f23a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f23e:	ee14 2a90 	vmov	r2, s9
3400f242:	3230      	adds	r2, #48	@ 0x30
3400f244:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f248:	f806 2b01 	strb.w	r2, [r6], #1
3400f24c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f254:	d438      	bmi.n	3400f2c8 <_dtoa_r+0x560>
3400f256:	ee32 5b46 	vsub.f64	d5, d2, d6
3400f25a:	eeb4 5bc7 	vcmpe.f64	d5, d7
3400f25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f262:	d46e      	bmi.n	3400f342 <_dtoa_r+0x5da>
3400f264:	42a6      	cmp	r6, r4
3400f266:	f43f af5a 	beq.w	3400f11e <_dtoa_r+0x3b6>
3400f26a:	ee27 7b03 	vmul.f64	d7, d7, d3
3400f26e:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f272:	e7e0      	b.n	3400f236 <_dtoa_r+0x4ce>
3400f274:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f278:	4621      	mov	r1, r4
3400f27a:	463e      	mov	r6, r7
3400f27c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f280:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f284:	ee14 2a90 	vmov	r2, s9
3400f288:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f28c:	3230      	adds	r2, #48	@ 0x30
3400f28e:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f292:	f806 2b01 	strb.w	r2, [r6], #1
3400f296:	42a6      	cmp	r6, r4
3400f298:	d119      	bne.n	3400f2ce <_dtoa_r+0x566>
3400f29a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3400f29e:	ee37 4b05 	vadd.f64	d4, d7, d5
3400f2a2:	eeb4 6bc4 	vcmpe.f64	d6, d4
3400f2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f2aa:	dc4a      	bgt.n	3400f342 <_dtoa_r+0x5da>
3400f2ac:	ee35 5b47 	vsub.f64	d5, d5, d7
3400f2b0:	eeb4 6bc5 	vcmpe.f64	d6, d5
3400f2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f2b8:	f57f af31 	bpl.w	3400f11e <_dtoa_r+0x3b6>
3400f2bc:	460e      	mov	r6, r1
3400f2be:	3901      	subs	r1, #1
3400f2c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3400f2c4:	2b30      	cmp	r3, #48	@ 0x30
3400f2c6:	d0f9      	beq.n	3400f2bc <_dtoa_r+0x554>
3400f2c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
3400f2cc:	e027      	b.n	3400f31e <_dtoa_r+0x5b6>
3400f2ce:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f2d2:	e7d5      	b.n	3400f280 <_dtoa_r+0x518>
3400f2d4:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f2d8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3400f2dc:	463e      	mov	r6, r7
3400f2de:	ee87 5b06 	vdiv.f64	d5, d7, d6
3400f2e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3400f2e6:	ee15 3a10 	vmov	r3, s10
3400f2ea:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3400f2ee:	3330      	adds	r3, #48	@ 0x30
3400f2f0:	eea3 7b46 	vfms.f64	d7, d3, d6
3400f2f4:	f806 3b01 	strb.w	r3, [r6], #1
3400f2f8:	1bf3      	subs	r3, r6, r7
3400f2fa:	459a      	cmp	sl, r3
3400f2fc:	d132      	bne.n	3400f364 <_dtoa_r+0x5fc>
3400f2fe:	ee37 7b07 	vadd.f64	d7, d7, d7
3400f302:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f30a:	dc18      	bgt.n	3400f33e <_dtoa_r+0x5d6>
3400f30c:	eeb4 7b46 	vcmp.f64	d7, d6
3400f310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f314:	d103      	bne.n	3400f31e <_dtoa_r+0x5b6>
3400f316:	ee15 3a10 	vmov	r3, s10
3400f31a:	07db      	lsls	r3, r3, #31
3400f31c:	d40f      	bmi.n	3400f33e <_dtoa_r+0x5d6>
3400f31e:	9901      	ldr	r1, [sp, #4]
3400f320:	4648      	mov	r0, r9
3400f322:	f000 fb09 	bl	3400f938 <_Bfree>
3400f326:	2300      	movs	r3, #0
3400f328:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400f32a:	7033      	strb	r3, [r6, #0]
3400f32c:	f108 0301 	add.w	r3, r8, #1
3400f330:	6013      	str	r3, [r2, #0]
3400f332:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f334:	2b00      	cmp	r3, #0
3400f336:	f000 824b 	beq.w	3400f7d0 <_dtoa_r+0xa68>
3400f33a:	601e      	str	r6, [r3, #0]
3400f33c:	e248      	b.n	3400f7d0 <_dtoa_r+0xa68>
3400f33e:	f8cd 8014 	str.w	r8, [sp, #20]
3400f342:	4633      	mov	r3, r6
3400f344:	461e      	mov	r6, r3
3400f346:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400f34a:	2a39      	cmp	r2, #57	@ 0x39
3400f34c:	d106      	bne.n	3400f35c <_dtoa_r+0x5f4>
3400f34e:	429f      	cmp	r7, r3
3400f350:	d1f8      	bne.n	3400f344 <_dtoa_r+0x5dc>
3400f352:	9a05      	ldr	r2, [sp, #20]
3400f354:	3201      	adds	r2, #1
3400f356:	9205      	str	r2, [sp, #20]
3400f358:	2230      	movs	r2, #48	@ 0x30
3400f35a:	703a      	strb	r2, [r7, #0]
3400f35c:	781a      	ldrb	r2, [r3, #0]
3400f35e:	3201      	adds	r2, #1
3400f360:	701a      	strb	r2, [r3, #0]
3400f362:	e7b1      	b.n	3400f2c8 <_dtoa_r+0x560>
3400f364:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f368:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400f36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f370:	d1b5      	bne.n	3400f2de <_dtoa_r+0x576>
3400f372:	e7d4      	b.n	3400f31e <_dtoa_r+0x5b6>
3400f374:	34012188 	.word	0x34012188
3400f378:	34012160 	.word	0x34012160
3400f37c:	9908      	ldr	r1, [sp, #32]
3400f37e:	2900      	cmp	r1, #0
3400f380:	f000 80e9 	beq.w	3400f556 <_dtoa_r+0x7ee>
3400f384:	9907      	ldr	r1, [sp, #28]
3400f386:	2901      	cmp	r1, #1
3400f388:	f300 80cb 	bgt.w	3400f522 <_dtoa_r+0x7ba>
3400f38c:	2d00      	cmp	r5, #0
3400f38e:	f000 80c4 	beq.w	3400f51a <_dtoa_r+0x7b2>
3400f392:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3400f396:	461c      	mov	r4, r3
3400f398:	9e04      	ldr	r6, [sp, #16]
3400f39a:	9305      	str	r3, [sp, #20]
3400f39c:	2101      	movs	r1, #1
3400f39e:	9b04      	ldr	r3, [sp, #16]
3400f3a0:	4648      	mov	r0, r9
3400f3a2:	4413      	add	r3, r2
3400f3a4:	9304      	str	r3, [sp, #16]
3400f3a6:	9b06      	ldr	r3, [sp, #24]
3400f3a8:	4413      	add	r3, r2
3400f3aa:	9306      	str	r3, [sp, #24]
3400f3ac:	f000 fb7a 	bl	3400faa4 <__i2b>
3400f3b0:	9b05      	ldr	r3, [sp, #20]
3400f3b2:	4605      	mov	r5, r0
3400f3b4:	b166      	cbz	r6, 3400f3d0 <_dtoa_r+0x668>
3400f3b6:	9a06      	ldr	r2, [sp, #24]
3400f3b8:	2a00      	cmp	r2, #0
3400f3ba:	dd09      	ble.n	3400f3d0 <_dtoa_r+0x668>
3400f3bc:	42b2      	cmp	r2, r6
3400f3be:	9904      	ldr	r1, [sp, #16]
3400f3c0:	bfa8      	it	ge
3400f3c2:	4632      	movge	r2, r6
3400f3c4:	1a89      	subs	r1, r1, r2
3400f3c6:	1ab6      	subs	r6, r6, r2
3400f3c8:	9104      	str	r1, [sp, #16]
3400f3ca:	9906      	ldr	r1, [sp, #24]
3400f3cc:	1a8a      	subs	r2, r1, r2
3400f3ce:	9206      	str	r2, [sp, #24]
3400f3d0:	b30b      	cbz	r3, 3400f416 <_dtoa_r+0x6ae>
3400f3d2:	9a08      	ldr	r2, [sp, #32]
3400f3d4:	2a00      	cmp	r2, #0
3400f3d6:	f000 80c5 	beq.w	3400f564 <_dtoa_r+0x7fc>
3400f3da:	2c00      	cmp	r4, #0
3400f3dc:	f000 80bf 	beq.w	3400f55e <_dtoa_r+0x7f6>
3400f3e0:	4629      	mov	r1, r5
3400f3e2:	4622      	mov	r2, r4
3400f3e4:	4648      	mov	r0, r9
3400f3e6:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f3e8:	f000 fc16 	bl	3400fc18 <__pow5mult>
3400f3ec:	9a01      	ldr	r2, [sp, #4]
3400f3ee:	4601      	mov	r1, r0
3400f3f0:	4605      	mov	r5, r0
3400f3f2:	4648      	mov	r0, r9
3400f3f4:	f000 fb6c 	bl	3400fad0 <__multiply>
3400f3f8:	9901      	ldr	r1, [sp, #4]
3400f3fa:	9005      	str	r0, [sp, #20]
3400f3fc:	4648      	mov	r0, r9
3400f3fe:	f000 fa9b 	bl	3400f938 <_Bfree>
3400f402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400f404:	1b1b      	subs	r3, r3, r4
3400f406:	f000 80b0 	beq.w	3400f56a <_dtoa_r+0x802>
3400f40a:	461a      	mov	r2, r3
3400f40c:	9905      	ldr	r1, [sp, #20]
3400f40e:	4648      	mov	r0, r9
3400f410:	f000 fc02 	bl	3400fc18 <__pow5mult>
3400f414:	9001      	str	r0, [sp, #4]
3400f416:	2101      	movs	r1, #1
3400f418:	4648      	mov	r0, r9
3400f41a:	f000 fb43 	bl	3400faa4 <__i2b>
3400f41e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f420:	4604      	mov	r4, r0
3400f422:	2b00      	cmp	r3, #0
3400f424:	f000 81da 	beq.w	3400f7dc <_dtoa_r+0xa74>
3400f428:	461a      	mov	r2, r3
3400f42a:	4601      	mov	r1, r0
3400f42c:	4648      	mov	r0, r9
3400f42e:	f000 fbf3 	bl	3400fc18 <__pow5mult>
3400f432:	9b07      	ldr	r3, [sp, #28]
3400f434:	4604      	mov	r4, r0
3400f436:	2b01      	cmp	r3, #1
3400f438:	f300 80a0 	bgt.w	3400f57c <_dtoa_r+0x814>
3400f43c:	9b02      	ldr	r3, [sp, #8]
3400f43e:	2b00      	cmp	r3, #0
3400f440:	f040 8096 	bne.w	3400f570 <_dtoa_r+0x808>
3400f444:	9b03      	ldr	r3, [sp, #12]
3400f446:	f3c3 0213 	ubfx	r2, r3, #0, #20
3400f44a:	2a00      	cmp	r2, #0
3400f44c:	f040 8092 	bne.w	3400f574 <_dtoa_r+0x80c>
3400f450:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3400f454:	0d12      	lsrs	r2, r2, #20
3400f456:	0512      	lsls	r2, r2, #20
3400f458:	2a00      	cmp	r2, #0
3400f45a:	f000 808d 	beq.w	3400f578 <_dtoa_r+0x810>
3400f45e:	9b04      	ldr	r3, [sp, #16]
3400f460:	3301      	adds	r3, #1
3400f462:	9304      	str	r3, [sp, #16]
3400f464:	9b06      	ldr	r3, [sp, #24]
3400f466:	3301      	adds	r3, #1
3400f468:	9306      	str	r3, [sp, #24]
3400f46a:	2301      	movs	r3, #1
3400f46c:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f46e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f470:	2b00      	cmp	r3, #0
3400f472:	f000 81b9 	beq.w	3400f7e8 <_dtoa_r+0xa80>
3400f476:	6922      	ldr	r2, [r4, #16]
3400f478:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3400f47c:	6910      	ldr	r0, [r2, #16]
3400f47e:	f000 fac5 	bl	3400fa0c <__hi0bits>
3400f482:	f1c0 0020 	rsb	r0, r0, #32
3400f486:	9b06      	ldr	r3, [sp, #24]
3400f488:	4418      	add	r0, r3
3400f48a:	f010 001f 	ands.w	r0, r0, #31
3400f48e:	f000 8081 	beq.w	3400f594 <_dtoa_r+0x82c>
3400f492:	f1c0 0220 	rsb	r2, r0, #32
3400f496:	2a04      	cmp	r2, #4
3400f498:	dd73      	ble.n	3400f582 <_dtoa_r+0x81a>
3400f49a:	f1c0 001c 	rsb	r0, r0, #28
3400f49e:	9b04      	ldr	r3, [sp, #16]
3400f4a0:	4403      	add	r3, r0
3400f4a2:	4406      	add	r6, r0
3400f4a4:	9304      	str	r3, [sp, #16]
3400f4a6:	9b06      	ldr	r3, [sp, #24]
3400f4a8:	4403      	add	r3, r0
3400f4aa:	9306      	str	r3, [sp, #24]
3400f4ac:	9b04      	ldr	r3, [sp, #16]
3400f4ae:	2b00      	cmp	r3, #0
3400f4b0:	dd05      	ble.n	3400f4be <_dtoa_r+0x756>
3400f4b2:	461a      	mov	r2, r3
3400f4b4:	9901      	ldr	r1, [sp, #4]
3400f4b6:	4648      	mov	r0, r9
3400f4b8:	f000 fc08 	bl	3400fccc <__lshift>
3400f4bc:	9001      	str	r0, [sp, #4]
3400f4be:	9b06      	ldr	r3, [sp, #24]
3400f4c0:	2b00      	cmp	r3, #0
3400f4c2:	dd05      	ble.n	3400f4d0 <_dtoa_r+0x768>
3400f4c4:	4621      	mov	r1, r4
3400f4c6:	461a      	mov	r2, r3
3400f4c8:	4648      	mov	r0, r9
3400f4ca:	f000 fbff 	bl	3400fccc <__lshift>
3400f4ce:	4604      	mov	r4, r0
3400f4d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400f4d2:	2b00      	cmp	r3, #0
3400f4d4:	d060      	beq.n	3400f598 <_dtoa_r+0x830>
3400f4d6:	4621      	mov	r1, r4
3400f4d8:	9801      	ldr	r0, [sp, #4]
3400f4da:	f000 fc63 	bl	3400fda4 <__mcmp>
3400f4de:	2800      	cmp	r0, #0
3400f4e0:	da5a      	bge.n	3400f598 <_dtoa_r+0x830>
3400f4e2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3400f4e6:	220a      	movs	r2, #10
3400f4e8:	9901      	ldr	r1, [sp, #4]
3400f4ea:	4648      	mov	r0, r9
3400f4ec:	9305      	str	r3, [sp, #20]
3400f4ee:	2300      	movs	r3, #0
3400f4f0:	f000 fa44 	bl	3400f97c <__multadd>
3400f4f4:	9b08      	ldr	r3, [sp, #32]
3400f4f6:	9001      	str	r0, [sp, #4]
3400f4f8:	2b00      	cmp	r3, #0
3400f4fa:	f000 8177 	beq.w	3400f7ec <_dtoa_r+0xa84>
3400f4fe:	4629      	mov	r1, r5
3400f500:	2300      	movs	r3, #0
3400f502:	220a      	movs	r2, #10
3400f504:	4648      	mov	r0, r9
3400f506:	f000 fa39 	bl	3400f97c <__multadd>
3400f50a:	f1bb 0f00 	cmp.w	fp, #0
3400f50e:	4605      	mov	r5, r0
3400f510:	dc6e      	bgt.n	3400f5f0 <_dtoa_r+0x888>
3400f512:	9b07      	ldr	r3, [sp, #28]
3400f514:	2b02      	cmp	r3, #2
3400f516:	dc48      	bgt.n	3400f5aa <_dtoa_r+0x842>
3400f518:	e06a      	b.n	3400f5f0 <_dtoa_r+0x888>
3400f51a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400f51c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3400f520:	e739      	b.n	3400f396 <_dtoa_r+0x62e>
3400f522:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3400f526:	42a3      	cmp	r3, r4
3400f528:	db07      	blt.n	3400f53a <_dtoa_r+0x7d2>
3400f52a:	f1ba 0f00 	cmp.w	sl, #0
3400f52e:	eba3 0404 	sub.w	r4, r3, r4
3400f532:	db0b      	blt.n	3400f54c <_dtoa_r+0x7e4>
3400f534:	9e04      	ldr	r6, [sp, #16]
3400f536:	4652      	mov	r2, sl
3400f538:	e72f      	b.n	3400f39a <_dtoa_r+0x632>
3400f53a:	1ae2      	subs	r2, r4, r3
3400f53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f53e:	9e04      	ldr	r6, [sp, #16]
3400f540:	4413      	add	r3, r2
3400f542:	4652      	mov	r2, sl
3400f544:	930a      	str	r3, [sp, #40]	@ 0x28
3400f546:	4623      	mov	r3, r4
3400f548:	2400      	movs	r4, #0
3400f54a:	e726      	b.n	3400f39a <_dtoa_r+0x632>
3400f54c:	9a04      	ldr	r2, [sp, #16]
3400f54e:	eba2 060a 	sub.w	r6, r2, sl
3400f552:	2200      	movs	r2, #0
3400f554:	e721      	b.n	3400f39a <_dtoa_r+0x632>
3400f556:	461c      	mov	r4, r3
3400f558:	9e04      	ldr	r6, [sp, #16]
3400f55a:	9d08      	ldr	r5, [sp, #32]
3400f55c:	e72a      	b.n	3400f3b4 <_dtoa_r+0x64c>
3400f55e:	9a01      	ldr	r2, [sp, #4]
3400f560:	9205      	str	r2, [sp, #20]
3400f562:	e752      	b.n	3400f40a <_dtoa_r+0x6a2>
3400f564:	461a      	mov	r2, r3
3400f566:	9901      	ldr	r1, [sp, #4]
3400f568:	e751      	b.n	3400f40e <_dtoa_r+0x6a6>
3400f56a:	9b05      	ldr	r3, [sp, #20]
3400f56c:	9301      	str	r3, [sp, #4]
3400f56e:	e752      	b.n	3400f416 <_dtoa_r+0x6ae>
3400f570:	2300      	movs	r3, #0
3400f572:	e77b      	b.n	3400f46c <_dtoa_r+0x704>
3400f574:	9b02      	ldr	r3, [sp, #8]
3400f576:	e779      	b.n	3400f46c <_dtoa_r+0x704>
3400f578:	920b      	str	r2, [sp, #44]	@ 0x2c
3400f57a:	e778      	b.n	3400f46e <_dtoa_r+0x706>
3400f57c:	2300      	movs	r3, #0
3400f57e:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f580:	e779      	b.n	3400f476 <_dtoa_r+0x70e>
3400f582:	d093      	beq.n	3400f4ac <_dtoa_r+0x744>
3400f584:	321c      	adds	r2, #28
3400f586:	9b04      	ldr	r3, [sp, #16]
3400f588:	4413      	add	r3, r2
3400f58a:	4416      	add	r6, r2
3400f58c:	9304      	str	r3, [sp, #16]
3400f58e:	9b06      	ldr	r3, [sp, #24]
3400f590:	4413      	add	r3, r2
3400f592:	e78a      	b.n	3400f4aa <_dtoa_r+0x742>
3400f594:	4602      	mov	r2, r0
3400f596:	e7f5      	b.n	3400f584 <_dtoa_r+0x81c>
3400f598:	f1ba 0f00 	cmp.w	sl, #0
3400f59c:	46d3      	mov	fp, sl
3400f59e:	f8cd 8014 	str.w	r8, [sp, #20]
3400f5a2:	dc21      	bgt.n	3400f5e8 <_dtoa_r+0x880>
3400f5a4:	9b07      	ldr	r3, [sp, #28]
3400f5a6:	2b02      	cmp	r3, #2
3400f5a8:	dd1e      	ble.n	3400f5e8 <_dtoa_r+0x880>
3400f5aa:	f1bb 0f00 	cmp.w	fp, #0
3400f5ae:	f47f addc 	bne.w	3400f16a <_dtoa_r+0x402>
3400f5b2:	4621      	mov	r1, r4
3400f5b4:	465b      	mov	r3, fp
3400f5b6:	2205      	movs	r2, #5
3400f5b8:	4648      	mov	r0, r9
3400f5ba:	f000 f9df 	bl	3400f97c <__multadd>
3400f5be:	4601      	mov	r1, r0
3400f5c0:	4604      	mov	r4, r0
3400f5c2:	9801      	ldr	r0, [sp, #4]
3400f5c4:	f000 fbee 	bl	3400fda4 <__mcmp>
3400f5c8:	2800      	cmp	r0, #0
3400f5ca:	f77f adce 	ble.w	3400f16a <_dtoa_r+0x402>
3400f5ce:	2331      	movs	r3, #49	@ 0x31
3400f5d0:	463e      	mov	r6, r7
3400f5d2:	f806 3b01 	strb.w	r3, [r6], #1
3400f5d6:	9b05      	ldr	r3, [sp, #20]
3400f5d8:	3301      	adds	r3, #1
3400f5da:	9305      	str	r3, [sp, #20]
3400f5dc:	e5c9      	b.n	3400f172 <_dtoa_r+0x40a>
3400f5de:	4654      	mov	r4, sl
3400f5e0:	f8cd 8014 	str.w	r8, [sp, #20]
3400f5e4:	4625      	mov	r5, r4
3400f5e6:	e7f2      	b.n	3400f5ce <_dtoa_r+0x866>
3400f5e8:	9b08      	ldr	r3, [sp, #32]
3400f5ea:	2b00      	cmp	r3, #0
3400f5ec:	f000 8102 	beq.w	3400f7f4 <_dtoa_r+0xa8c>
3400f5f0:	2e00      	cmp	r6, #0
3400f5f2:	dd05      	ble.n	3400f600 <_dtoa_r+0x898>
3400f5f4:	4629      	mov	r1, r5
3400f5f6:	4632      	mov	r2, r6
3400f5f8:	4648      	mov	r0, r9
3400f5fa:	f000 fb67 	bl	3400fccc <__lshift>
3400f5fe:	4605      	mov	r5, r0
3400f600:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400f602:	2b00      	cmp	r3, #0
3400f604:	d058      	beq.n	3400f6b8 <_dtoa_r+0x950>
3400f606:	6869      	ldr	r1, [r5, #4]
3400f608:	4648      	mov	r0, r9
3400f60a:	f000 f955 	bl	3400f8b8 <_Balloc>
3400f60e:	4606      	mov	r6, r0
3400f610:	b928      	cbnz	r0, 3400f61e <_dtoa_r+0x8b6>
3400f612:	4b82      	ldr	r3, [pc, #520]	@ (3400f81c <_dtoa_r+0xab4>)
3400f614:	4602      	mov	r2, r0
3400f616:	f240 21ef 	movw	r1, #751	@ 0x2ef
3400f61a:	f7ff bbbe 	b.w	3400ed9a <_dtoa_r+0x32>
3400f61e:	692a      	ldr	r2, [r5, #16]
3400f620:	f105 010c 	add.w	r1, r5, #12
3400f624:	300c      	adds	r0, #12
3400f626:	3202      	adds	r2, #2
3400f628:	0092      	lsls	r2, r2, #2
3400f62a:	f7ff fafa 	bl	3400ec22 <memcpy>
3400f62e:	2201      	movs	r2, #1
3400f630:	4631      	mov	r1, r6
3400f632:	4648      	mov	r0, r9
3400f634:	f000 fb4a 	bl	3400fccc <__lshift>
3400f638:	1c7b      	adds	r3, r7, #1
3400f63a:	46a8      	mov	r8, r5
3400f63c:	4605      	mov	r5, r0
3400f63e:	9304      	str	r3, [sp, #16]
3400f640:	eb07 030b 	add.w	r3, r7, fp
3400f644:	9309      	str	r3, [sp, #36]	@ 0x24
3400f646:	9b02      	ldr	r3, [sp, #8]
3400f648:	f003 0301 	and.w	r3, r3, #1
3400f64c:	9308      	str	r3, [sp, #32]
3400f64e:	9b04      	ldr	r3, [sp, #16]
3400f650:	4621      	mov	r1, r4
3400f652:	9801      	ldr	r0, [sp, #4]
3400f654:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3400f658:	f7ff faf7 	bl	3400ec4a <quorem>
3400f65c:	4641      	mov	r1, r8
3400f65e:	9002      	str	r0, [sp, #8]
3400f660:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400f664:	9801      	ldr	r0, [sp, #4]
3400f666:	f000 fb9d 	bl	3400fda4 <__mcmp>
3400f66a:	462a      	mov	r2, r5
3400f66c:	9006      	str	r0, [sp, #24]
3400f66e:	4621      	mov	r1, r4
3400f670:	4648      	mov	r0, r9
3400f672:	f000 fbb3 	bl	3400fddc <__mdiff>
3400f676:	68c2      	ldr	r2, [r0, #12]
3400f678:	4606      	mov	r6, r0
3400f67a:	b9fa      	cbnz	r2, 3400f6bc <_dtoa_r+0x954>
3400f67c:	4601      	mov	r1, r0
3400f67e:	9801      	ldr	r0, [sp, #4]
3400f680:	f000 fb90 	bl	3400fda4 <__mcmp>
3400f684:	4602      	mov	r2, r0
3400f686:	4631      	mov	r1, r6
3400f688:	4648      	mov	r0, r9
3400f68a:	920a      	str	r2, [sp, #40]	@ 0x28
3400f68c:	f000 f954 	bl	3400f938 <_Bfree>
3400f690:	9b07      	ldr	r3, [sp, #28]
3400f692:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400f694:	9e04      	ldr	r6, [sp, #16]
3400f696:	ea42 0103 	orr.w	r1, r2, r3
3400f69a:	9b08      	ldr	r3, [sp, #32]
3400f69c:	4319      	orrs	r1, r3
3400f69e:	d10f      	bne.n	3400f6c0 <_dtoa_r+0x958>
3400f6a0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400f6a4:	d028      	beq.n	3400f6f8 <_dtoa_r+0x990>
3400f6a6:	9b06      	ldr	r3, [sp, #24]
3400f6a8:	2b00      	cmp	r3, #0
3400f6aa:	dd02      	ble.n	3400f6b2 <_dtoa_r+0x94a>
3400f6ac:	9b02      	ldr	r3, [sp, #8]
3400f6ae:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3400f6b2:	f88b a000 	strb.w	sl, [fp]
3400f6b6:	e55e      	b.n	3400f176 <_dtoa_r+0x40e>
3400f6b8:	4628      	mov	r0, r5
3400f6ba:	e7bd      	b.n	3400f638 <_dtoa_r+0x8d0>
3400f6bc:	2201      	movs	r2, #1
3400f6be:	e7e2      	b.n	3400f686 <_dtoa_r+0x91e>
3400f6c0:	9b06      	ldr	r3, [sp, #24]
3400f6c2:	2b00      	cmp	r3, #0
3400f6c4:	db04      	blt.n	3400f6d0 <_dtoa_r+0x968>
3400f6c6:	9907      	ldr	r1, [sp, #28]
3400f6c8:	430b      	orrs	r3, r1
3400f6ca:	9908      	ldr	r1, [sp, #32]
3400f6cc:	430b      	orrs	r3, r1
3400f6ce:	d120      	bne.n	3400f712 <_dtoa_r+0x9aa>
3400f6d0:	2a00      	cmp	r2, #0
3400f6d2:	ddee      	ble.n	3400f6b2 <_dtoa_r+0x94a>
3400f6d4:	2201      	movs	r2, #1
3400f6d6:	9901      	ldr	r1, [sp, #4]
3400f6d8:	4648      	mov	r0, r9
3400f6da:	f000 faf7 	bl	3400fccc <__lshift>
3400f6de:	4621      	mov	r1, r4
3400f6e0:	9001      	str	r0, [sp, #4]
3400f6e2:	f000 fb5f 	bl	3400fda4 <__mcmp>
3400f6e6:	2800      	cmp	r0, #0
3400f6e8:	dc03      	bgt.n	3400f6f2 <_dtoa_r+0x98a>
3400f6ea:	d1e2      	bne.n	3400f6b2 <_dtoa_r+0x94a>
3400f6ec:	f01a 0f01 	tst.w	sl, #1
3400f6f0:	d0df      	beq.n	3400f6b2 <_dtoa_r+0x94a>
3400f6f2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400f6f6:	d1d9      	bne.n	3400f6ac <_dtoa_r+0x944>
3400f6f8:	2339      	movs	r3, #57	@ 0x39
3400f6fa:	f88b 3000 	strb.w	r3, [fp]
3400f6fe:	4633      	mov	r3, r6
3400f700:	461e      	mov	r6, r3
3400f702:	3b01      	subs	r3, #1
3400f704:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3400f708:	2a39      	cmp	r2, #57	@ 0x39
3400f70a:	d052      	beq.n	3400f7b2 <_dtoa_r+0xa4a>
3400f70c:	3201      	adds	r2, #1
3400f70e:	701a      	strb	r2, [r3, #0]
3400f710:	e531      	b.n	3400f176 <_dtoa_r+0x40e>
3400f712:	2a00      	cmp	r2, #0
3400f714:	dd07      	ble.n	3400f726 <_dtoa_r+0x9be>
3400f716:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400f71a:	d0ed      	beq.n	3400f6f8 <_dtoa_r+0x990>
3400f71c:	f10a 0301 	add.w	r3, sl, #1
3400f720:	f88b 3000 	strb.w	r3, [fp]
3400f724:	e527      	b.n	3400f176 <_dtoa_r+0x40e>
3400f726:	9b04      	ldr	r3, [sp, #16]
3400f728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f72a:	f803 ac01 	strb.w	sl, [r3, #-1]
3400f72e:	4293      	cmp	r3, r2
3400f730:	d029      	beq.n	3400f786 <_dtoa_r+0xa1e>
3400f732:	2300      	movs	r3, #0
3400f734:	220a      	movs	r2, #10
3400f736:	9901      	ldr	r1, [sp, #4]
3400f738:	4648      	mov	r0, r9
3400f73a:	f000 f91f 	bl	3400f97c <__multadd>
3400f73e:	45a8      	cmp	r8, r5
3400f740:	9001      	str	r0, [sp, #4]
3400f742:	f04f 0300 	mov.w	r3, #0
3400f746:	f04f 020a 	mov.w	r2, #10
3400f74a:	4641      	mov	r1, r8
3400f74c:	4648      	mov	r0, r9
3400f74e:	d107      	bne.n	3400f760 <_dtoa_r+0x9f8>
3400f750:	f000 f914 	bl	3400f97c <__multadd>
3400f754:	4680      	mov	r8, r0
3400f756:	4605      	mov	r5, r0
3400f758:	9b04      	ldr	r3, [sp, #16]
3400f75a:	3301      	adds	r3, #1
3400f75c:	9304      	str	r3, [sp, #16]
3400f75e:	e776      	b.n	3400f64e <_dtoa_r+0x8e6>
3400f760:	f000 f90c 	bl	3400f97c <__multadd>
3400f764:	4629      	mov	r1, r5
3400f766:	4680      	mov	r8, r0
3400f768:	2300      	movs	r3, #0
3400f76a:	220a      	movs	r2, #10
3400f76c:	4648      	mov	r0, r9
3400f76e:	f000 f905 	bl	3400f97c <__multadd>
3400f772:	4605      	mov	r5, r0
3400f774:	e7f0      	b.n	3400f758 <_dtoa_r+0x9f0>
3400f776:	f1bb 0f00 	cmp.w	fp, #0
3400f77a:	f04f 0800 	mov.w	r8, #0
3400f77e:	bfcc      	ite	gt
3400f780:	465e      	movgt	r6, fp
3400f782:	2601      	movle	r6, #1
3400f784:	443e      	add	r6, r7
3400f786:	2201      	movs	r2, #1
3400f788:	9901      	ldr	r1, [sp, #4]
3400f78a:	4648      	mov	r0, r9
3400f78c:	f000 fa9e 	bl	3400fccc <__lshift>
3400f790:	4621      	mov	r1, r4
3400f792:	9001      	str	r0, [sp, #4]
3400f794:	f000 fb06 	bl	3400fda4 <__mcmp>
3400f798:	2800      	cmp	r0, #0
3400f79a:	dcb0      	bgt.n	3400f6fe <_dtoa_r+0x996>
3400f79c:	d102      	bne.n	3400f7a4 <_dtoa_r+0xa3c>
3400f79e:	f01a 0f01 	tst.w	sl, #1
3400f7a2:	d1ac      	bne.n	3400f6fe <_dtoa_r+0x996>
3400f7a4:	4633      	mov	r3, r6
3400f7a6:	461e      	mov	r6, r3
3400f7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400f7ac:	2a30      	cmp	r2, #48	@ 0x30
3400f7ae:	d0fa      	beq.n	3400f7a6 <_dtoa_r+0xa3e>
3400f7b0:	e4e1      	b.n	3400f176 <_dtoa_r+0x40e>
3400f7b2:	429f      	cmp	r7, r3
3400f7b4:	d1a4      	bne.n	3400f700 <_dtoa_r+0x998>
3400f7b6:	9b05      	ldr	r3, [sp, #20]
3400f7b8:	3301      	adds	r3, #1
3400f7ba:	9305      	str	r3, [sp, #20]
3400f7bc:	2331      	movs	r3, #49	@ 0x31
3400f7be:	703b      	strb	r3, [r7, #0]
3400f7c0:	e4d9      	b.n	3400f176 <_dtoa_r+0x40e>
3400f7c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f7c4:	4f16      	ldr	r7, [pc, #88]	@ (3400f820 <_dtoa_r+0xab8>)
3400f7c6:	b11b      	cbz	r3, 3400f7d0 <_dtoa_r+0xa68>
3400f7c8:	f107 0308 	add.w	r3, r7, #8
3400f7cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400f7ce:	6013      	str	r3, [r2, #0]
3400f7d0:	4638      	mov	r0, r7
3400f7d2:	b011      	add	sp, #68	@ 0x44
3400f7d4:	ecbd 8b02 	vpop	{d8}
3400f7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400f7dc:	9b07      	ldr	r3, [sp, #28]
3400f7de:	2b01      	cmp	r3, #1
3400f7e0:	f77f ae2c 	ble.w	3400f43c <_dtoa_r+0x6d4>
3400f7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f7e6:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f7e8:	2001      	movs	r0, #1
3400f7ea:	e64c      	b.n	3400f486 <_dtoa_r+0x71e>
3400f7ec:	f1bb 0f00 	cmp.w	fp, #0
3400f7f0:	f77f aed8 	ble.w	3400f5a4 <_dtoa_r+0x83c>
3400f7f4:	463e      	mov	r6, r7
3400f7f6:	4621      	mov	r1, r4
3400f7f8:	9801      	ldr	r0, [sp, #4]
3400f7fa:	f7ff fa26 	bl	3400ec4a <quorem>
3400f7fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400f802:	f806 ab01 	strb.w	sl, [r6], #1
3400f806:	1bf2      	subs	r2, r6, r7
3400f808:	4593      	cmp	fp, r2
3400f80a:	ddb4      	ble.n	3400f776 <_dtoa_r+0xa0e>
3400f80c:	2300      	movs	r3, #0
3400f80e:	220a      	movs	r2, #10
3400f810:	9901      	ldr	r1, [sp, #4]
3400f812:	4648      	mov	r0, r9
3400f814:	f000 f8b2 	bl	3400f97c <__multadd>
3400f818:	9001      	str	r0, [sp, #4]
3400f81a:	e7ec      	b.n	3400f7f6 <_dtoa_r+0xa8e>
3400f81c:	34011e0a 	.word	0x34011e0a
3400f820:	34011d8e 	.word	0x34011d8e

3400f824 <_free_r>:
3400f824:	b538      	push	{r3, r4, r5, lr}
3400f826:	4605      	mov	r5, r0
3400f828:	2900      	cmp	r1, #0
3400f82a:	d041      	beq.n	3400f8b0 <_free_r+0x8c>
3400f82c:	f851 3c04 	ldr.w	r3, [r1, #-4]
3400f830:	1f0c      	subs	r4, r1, #4
3400f832:	2b00      	cmp	r3, #0
3400f834:	bfb8      	it	lt
3400f836:	18e4      	addlt	r4, r4, r3
3400f838:	f7fe f844 	bl	3400d8c4 <__malloc_lock>
3400f83c:	4a1d      	ldr	r2, [pc, #116]	@ (3400f8b4 <_free_r+0x90>)
3400f83e:	6813      	ldr	r3, [r2, #0]
3400f840:	b933      	cbnz	r3, 3400f850 <_free_r+0x2c>
3400f842:	6063      	str	r3, [r4, #4]
3400f844:	6014      	str	r4, [r2, #0]
3400f846:	4628      	mov	r0, r5
3400f848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400f84c:	f7fe b840 	b.w	3400d8d0 <__malloc_unlock>
3400f850:	42a3      	cmp	r3, r4
3400f852:	d908      	bls.n	3400f866 <_free_r+0x42>
3400f854:	6820      	ldr	r0, [r4, #0]
3400f856:	1821      	adds	r1, r4, r0
3400f858:	428b      	cmp	r3, r1
3400f85a:	bf01      	itttt	eq
3400f85c:	6819      	ldreq	r1, [r3, #0]
3400f85e:	685b      	ldreq	r3, [r3, #4]
3400f860:	1809      	addeq	r1, r1, r0
3400f862:	6021      	streq	r1, [r4, #0]
3400f864:	e7ed      	b.n	3400f842 <_free_r+0x1e>
3400f866:	461a      	mov	r2, r3
3400f868:	685b      	ldr	r3, [r3, #4]
3400f86a:	b10b      	cbz	r3, 3400f870 <_free_r+0x4c>
3400f86c:	42a3      	cmp	r3, r4
3400f86e:	d9fa      	bls.n	3400f866 <_free_r+0x42>
3400f870:	6811      	ldr	r1, [r2, #0]
3400f872:	1850      	adds	r0, r2, r1
3400f874:	42a0      	cmp	r0, r4
3400f876:	d10b      	bne.n	3400f890 <_free_r+0x6c>
3400f878:	6820      	ldr	r0, [r4, #0]
3400f87a:	4401      	add	r1, r0
3400f87c:	1850      	adds	r0, r2, r1
3400f87e:	6011      	str	r1, [r2, #0]
3400f880:	4283      	cmp	r3, r0
3400f882:	d1e0      	bne.n	3400f846 <_free_r+0x22>
3400f884:	6818      	ldr	r0, [r3, #0]
3400f886:	685b      	ldr	r3, [r3, #4]
3400f888:	4408      	add	r0, r1
3400f88a:	6053      	str	r3, [r2, #4]
3400f88c:	6010      	str	r0, [r2, #0]
3400f88e:	e7da      	b.n	3400f846 <_free_r+0x22>
3400f890:	d902      	bls.n	3400f898 <_free_r+0x74>
3400f892:	230c      	movs	r3, #12
3400f894:	602b      	str	r3, [r5, #0]
3400f896:	e7d6      	b.n	3400f846 <_free_r+0x22>
3400f898:	6820      	ldr	r0, [r4, #0]
3400f89a:	1821      	adds	r1, r4, r0
3400f89c:	428b      	cmp	r3, r1
3400f89e:	bf02      	ittt	eq
3400f8a0:	6819      	ldreq	r1, [r3, #0]
3400f8a2:	685b      	ldreq	r3, [r3, #4]
3400f8a4:	1809      	addeq	r1, r1, r0
3400f8a6:	6063      	str	r3, [r4, #4]
3400f8a8:	bf08      	it	eq
3400f8aa:	6021      	streq	r1, [r4, #0]
3400f8ac:	6054      	str	r4, [r2, #4]
3400f8ae:	e7ca      	b.n	3400f846 <_free_r+0x22>
3400f8b0:	bd38      	pop	{r3, r4, r5, pc}
3400f8b2:	bf00      	nop
3400f8b4:	34012e34 	.word	0x34012e34

3400f8b8 <_Balloc>:
3400f8b8:	b570      	push	{r4, r5, r6, lr}
3400f8ba:	69c6      	ldr	r6, [r0, #28]
3400f8bc:	4604      	mov	r4, r0
3400f8be:	460d      	mov	r5, r1
3400f8c0:	b976      	cbnz	r6, 3400f8e0 <_Balloc+0x28>
3400f8c2:	2010      	movs	r0, #16
3400f8c4:	f7fd ff54 	bl	3400d770 <malloc>
3400f8c8:	4602      	mov	r2, r0
3400f8ca:	61e0      	str	r0, [r4, #28]
3400f8cc:	b920      	cbnz	r0, 3400f8d8 <_Balloc+0x20>
3400f8ce:	4b18      	ldr	r3, [pc, #96]	@ (3400f930 <_Balloc+0x78>)
3400f8d0:	216b      	movs	r1, #107	@ 0x6b
3400f8d2:	4818      	ldr	r0, [pc, #96]	@ (3400f934 <_Balloc+0x7c>)
3400f8d4:	f7fd ff2e 	bl	3400d734 <__assert_func>
3400f8d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400f8dc:	6006      	str	r6, [r0, #0]
3400f8de:	60c6      	str	r6, [r0, #12]
3400f8e0:	69e6      	ldr	r6, [r4, #28]
3400f8e2:	68f3      	ldr	r3, [r6, #12]
3400f8e4:	b183      	cbz	r3, 3400f908 <_Balloc+0x50>
3400f8e6:	69e3      	ldr	r3, [r4, #28]
3400f8e8:	68db      	ldr	r3, [r3, #12]
3400f8ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3400f8ee:	b9b8      	cbnz	r0, 3400f920 <_Balloc+0x68>
3400f8f0:	2101      	movs	r1, #1
3400f8f2:	4620      	mov	r0, r4
3400f8f4:	fa01 f605 	lsl.w	r6, r1, r5
3400f8f8:	1d72      	adds	r2, r6, #5
3400f8fa:	0092      	lsls	r2, r2, #2
3400f8fc:	f000 fd68 	bl	340103d0 <_calloc_r>
3400f900:	b160      	cbz	r0, 3400f91c <_Balloc+0x64>
3400f902:	e9c0 5601 	strd	r5, r6, [r0, #4]
3400f906:	e00e      	b.n	3400f926 <_Balloc+0x6e>
3400f908:	2221      	movs	r2, #33	@ 0x21
3400f90a:	2104      	movs	r1, #4
3400f90c:	4620      	mov	r0, r4
3400f90e:	f000 fd5f 	bl	340103d0 <_calloc_r>
3400f912:	69e3      	ldr	r3, [r4, #28]
3400f914:	60f0      	str	r0, [r6, #12]
3400f916:	68db      	ldr	r3, [r3, #12]
3400f918:	2b00      	cmp	r3, #0
3400f91a:	d1e4      	bne.n	3400f8e6 <_Balloc+0x2e>
3400f91c:	2000      	movs	r0, #0
3400f91e:	bd70      	pop	{r4, r5, r6, pc}
3400f920:	6802      	ldr	r2, [r0, #0]
3400f922:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3400f926:	2300      	movs	r3, #0
3400f928:	e9c0 3303 	strd	r3, r3, [r0, #12]
3400f92c:	e7f7      	b.n	3400f91e <_Balloc+0x66>
3400f92e:	bf00      	nop
3400f930:	34011d9b 	.word	0x34011d9b
3400f934:	34011e1b 	.word	0x34011e1b

3400f938 <_Bfree>:
3400f938:	b570      	push	{r4, r5, r6, lr}
3400f93a:	69c6      	ldr	r6, [r0, #28]
3400f93c:	4605      	mov	r5, r0
3400f93e:	460c      	mov	r4, r1
3400f940:	b976      	cbnz	r6, 3400f960 <_Bfree+0x28>
3400f942:	2010      	movs	r0, #16
3400f944:	f7fd ff14 	bl	3400d770 <malloc>
3400f948:	4602      	mov	r2, r0
3400f94a:	61e8      	str	r0, [r5, #28]
3400f94c:	b920      	cbnz	r0, 3400f958 <_Bfree+0x20>
3400f94e:	4b09      	ldr	r3, [pc, #36]	@ (3400f974 <_Bfree+0x3c>)
3400f950:	218f      	movs	r1, #143	@ 0x8f
3400f952:	4809      	ldr	r0, [pc, #36]	@ (3400f978 <_Bfree+0x40>)
3400f954:	f7fd feee 	bl	3400d734 <__assert_func>
3400f958:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400f95c:	6006      	str	r6, [r0, #0]
3400f95e:	60c6      	str	r6, [r0, #12]
3400f960:	b13c      	cbz	r4, 3400f972 <_Bfree+0x3a>
3400f962:	69eb      	ldr	r3, [r5, #28]
3400f964:	6862      	ldr	r2, [r4, #4]
3400f966:	68db      	ldr	r3, [r3, #12]
3400f968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3400f96c:	6021      	str	r1, [r4, #0]
3400f96e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3400f972:	bd70      	pop	{r4, r5, r6, pc}
3400f974:	34011d9b 	.word	0x34011d9b
3400f978:	34011e1b 	.word	0x34011e1b

3400f97c <__multadd>:
3400f97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400f980:	f101 0c14 	add.w	ip, r1, #20
3400f984:	4607      	mov	r7, r0
3400f986:	460c      	mov	r4, r1
3400f988:	461e      	mov	r6, r3
3400f98a:	690d      	ldr	r5, [r1, #16]
3400f98c:	2000      	movs	r0, #0
3400f98e:	f8dc 3000 	ldr.w	r3, [ip]
3400f992:	3001      	adds	r0, #1
3400f994:	b299      	uxth	r1, r3
3400f996:	4285      	cmp	r5, r0
3400f998:	fb02 6101 	mla	r1, r2, r1, r6
3400f99c:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400f9a0:	ea4f 4311 	mov.w	r3, r1, lsr #16
3400f9a4:	b289      	uxth	r1, r1
3400f9a6:	fb02 3306 	mla	r3, r2, r6, r3
3400f9aa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3400f9ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400f9b2:	f84c 1b04 	str.w	r1, [ip], #4
3400f9b6:	dcea      	bgt.n	3400f98e <__multadd+0x12>
3400f9b8:	b30e      	cbz	r6, 3400f9fe <__multadd+0x82>
3400f9ba:	68a3      	ldr	r3, [r4, #8]
3400f9bc:	42ab      	cmp	r3, r5
3400f9be:	dc19      	bgt.n	3400f9f4 <__multadd+0x78>
3400f9c0:	6861      	ldr	r1, [r4, #4]
3400f9c2:	4638      	mov	r0, r7
3400f9c4:	3101      	adds	r1, #1
3400f9c6:	f7ff ff77 	bl	3400f8b8 <_Balloc>
3400f9ca:	4680      	mov	r8, r0
3400f9cc:	b928      	cbnz	r0, 3400f9da <__multadd+0x5e>
3400f9ce:	4602      	mov	r2, r0
3400f9d0:	4b0c      	ldr	r3, [pc, #48]	@ (3400fa04 <__multadd+0x88>)
3400f9d2:	21ba      	movs	r1, #186	@ 0xba
3400f9d4:	480c      	ldr	r0, [pc, #48]	@ (3400fa08 <__multadd+0x8c>)
3400f9d6:	f7fd fead 	bl	3400d734 <__assert_func>
3400f9da:	6922      	ldr	r2, [r4, #16]
3400f9dc:	f104 010c 	add.w	r1, r4, #12
3400f9e0:	300c      	adds	r0, #12
3400f9e2:	3202      	adds	r2, #2
3400f9e4:	0092      	lsls	r2, r2, #2
3400f9e6:	f7ff f91c 	bl	3400ec22 <memcpy>
3400f9ea:	4621      	mov	r1, r4
3400f9ec:	4644      	mov	r4, r8
3400f9ee:	4638      	mov	r0, r7
3400f9f0:	f7ff ffa2 	bl	3400f938 <_Bfree>
3400f9f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3400f9f8:	3501      	adds	r5, #1
3400f9fa:	615e      	str	r6, [r3, #20]
3400f9fc:	6125      	str	r5, [r4, #16]
3400f9fe:	4620      	mov	r0, r4
3400fa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400fa04:	34011e0a 	.word	0x34011e0a
3400fa08:	34011e1b 	.word	0x34011e1b

3400fa0c <__hi0bits>:
3400fa0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3400fa10:	4603      	mov	r3, r0
3400fa12:	bf36      	itet	cc
3400fa14:	0403      	lslcc	r3, r0, #16
3400fa16:	2000      	movcs	r0, #0
3400fa18:	2010      	movcc	r0, #16
3400fa1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400fa1e:	bf3c      	itt	cc
3400fa20:	021b      	lslcc	r3, r3, #8
3400fa22:	3008      	addcc	r0, #8
3400fa24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fa28:	bf3c      	itt	cc
3400fa2a:	011b      	lslcc	r3, r3, #4
3400fa2c:	3004      	addcc	r0, #4
3400fa2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400fa32:	bf3c      	itt	cc
3400fa34:	009b      	lslcc	r3, r3, #2
3400fa36:	3002      	addcc	r0, #2
3400fa38:	2b00      	cmp	r3, #0
3400fa3a:	db05      	blt.n	3400fa48 <__hi0bits+0x3c>
3400fa3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3400fa40:	f100 0001 	add.w	r0, r0, #1
3400fa44:	bf08      	it	eq
3400fa46:	2020      	moveq	r0, #32
3400fa48:	4770      	bx	lr

3400fa4a <__lo0bits>:
3400fa4a:	6803      	ldr	r3, [r0, #0]
3400fa4c:	4602      	mov	r2, r0
3400fa4e:	f013 0007 	ands.w	r0, r3, #7
3400fa52:	d00b      	beq.n	3400fa6c <__lo0bits+0x22>
3400fa54:	07d9      	lsls	r1, r3, #31
3400fa56:	d421      	bmi.n	3400fa9c <__lo0bits+0x52>
3400fa58:	0798      	lsls	r0, r3, #30
3400fa5a:	bf47      	ittee	mi
3400fa5c:	085b      	lsrmi	r3, r3, #1
3400fa5e:	2001      	movmi	r0, #1
3400fa60:	089b      	lsrpl	r3, r3, #2
3400fa62:	2002      	movpl	r0, #2
3400fa64:	bf4c      	ite	mi
3400fa66:	6013      	strmi	r3, [r2, #0]
3400fa68:	6013      	strpl	r3, [r2, #0]
3400fa6a:	4770      	bx	lr
3400fa6c:	b299      	uxth	r1, r3
3400fa6e:	b909      	cbnz	r1, 3400fa74 <__lo0bits+0x2a>
3400fa70:	0c1b      	lsrs	r3, r3, #16
3400fa72:	2010      	movs	r0, #16
3400fa74:	b2d9      	uxtb	r1, r3
3400fa76:	b909      	cbnz	r1, 3400fa7c <__lo0bits+0x32>
3400fa78:	3008      	adds	r0, #8
3400fa7a:	0a1b      	lsrs	r3, r3, #8
3400fa7c:	0719      	lsls	r1, r3, #28
3400fa7e:	bf04      	itt	eq
3400fa80:	091b      	lsreq	r3, r3, #4
3400fa82:	3004      	addeq	r0, #4
3400fa84:	0799      	lsls	r1, r3, #30
3400fa86:	bf04      	itt	eq
3400fa88:	089b      	lsreq	r3, r3, #2
3400fa8a:	3002      	addeq	r0, #2
3400fa8c:	07d9      	lsls	r1, r3, #31
3400fa8e:	d403      	bmi.n	3400fa98 <__lo0bits+0x4e>
3400fa90:	085b      	lsrs	r3, r3, #1
3400fa92:	f100 0001 	add.w	r0, r0, #1
3400fa96:	d003      	beq.n	3400faa0 <__lo0bits+0x56>
3400fa98:	6013      	str	r3, [r2, #0]
3400fa9a:	4770      	bx	lr
3400fa9c:	2000      	movs	r0, #0
3400fa9e:	4770      	bx	lr
3400faa0:	2020      	movs	r0, #32
3400faa2:	4770      	bx	lr

3400faa4 <__i2b>:
3400faa4:	b510      	push	{r4, lr}
3400faa6:	460c      	mov	r4, r1
3400faa8:	2101      	movs	r1, #1
3400faaa:	f7ff ff05 	bl	3400f8b8 <_Balloc>
3400faae:	4602      	mov	r2, r0
3400fab0:	b928      	cbnz	r0, 3400fabe <__i2b+0x1a>
3400fab2:	4b05      	ldr	r3, [pc, #20]	@ (3400fac8 <__i2b+0x24>)
3400fab4:	f240 1145 	movw	r1, #325	@ 0x145
3400fab8:	4804      	ldr	r0, [pc, #16]	@ (3400facc <__i2b+0x28>)
3400faba:	f7fd fe3b 	bl	3400d734 <__assert_func>
3400fabe:	2301      	movs	r3, #1
3400fac0:	6144      	str	r4, [r0, #20]
3400fac2:	6103      	str	r3, [r0, #16]
3400fac4:	bd10      	pop	{r4, pc}
3400fac6:	bf00      	nop
3400fac8:	34011e0a 	.word	0x34011e0a
3400facc:	34011e1b 	.word	0x34011e1b

3400fad0 <__multiply>:
3400fad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400fad4:	4617      	mov	r7, r2
3400fad6:	690a      	ldr	r2, [r1, #16]
3400fad8:	4689      	mov	r9, r1
3400fada:	b085      	sub	sp, #20
3400fadc:	693b      	ldr	r3, [r7, #16]
3400fade:	429a      	cmp	r2, r3
3400fae0:	bfa2      	ittt	ge
3400fae2:	463b      	movge	r3, r7
3400fae4:	460f      	movge	r7, r1
3400fae6:	4699      	movge	r9, r3
3400fae8:	693d      	ldr	r5, [r7, #16]
3400faea:	68bb      	ldr	r3, [r7, #8]
3400faec:	f8d9 a010 	ldr.w	sl, [r9, #16]
3400faf0:	6879      	ldr	r1, [r7, #4]
3400faf2:	eb05 060a 	add.w	r6, r5, sl
3400faf6:	42b3      	cmp	r3, r6
3400faf8:	bfb8      	it	lt
3400fafa:	3101      	addlt	r1, #1
3400fafc:	f7ff fedc 	bl	3400f8b8 <_Balloc>
3400fb00:	b930      	cbnz	r0, 3400fb10 <__multiply+0x40>
3400fb02:	4602      	mov	r2, r0
3400fb04:	4b42      	ldr	r3, [pc, #264]	@ (3400fc10 <__multiply+0x140>)
3400fb06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400fb0a:	4842      	ldr	r0, [pc, #264]	@ (3400fc14 <__multiply+0x144>)
3400fb0c:	f7fd fe12 	bl	3400d734 <__assert_func>
3400fb10:	f100 0414 	add.w	r4, r0, #20
3400fb14:	2200      	movs	r2, #0
3400fb16:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3400fb1a:	4623      	mov	r3, r4
3400fb1c:	4573      	cmp	r3, lr
3400fb1e:	d320      	bcc.n	3400fb62 <__multiply+0x92>
3400fb20:	f107 0814 	add.w	r8, r7, #20
3400fb24:	f109 0114 	add.w	r1, r9, #20
3400fb28:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3400fb2c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3400fb30:	9302      	str	r3, [sp, #8]
3400fb32:	1beb      	subs	r3, r5, r7
3400fb34:	3715      	adds	r7, #21
3400fb36:	3b15      	subs	r3, #21
3400fb38:	f023 0303 	bic.w	r3, r3, #3
3400fb3c:	3304      	adds	r3, #4
3400fb3e:	42bd      	cmp	r5, r7
3400fb40:	bf38      	it	cc
3400fb42:	2304      	movcc	r3, #4
3400fb44:	9301      	str	r3, [sp, #4]
3400fb46:	9b02      	ldr	r3, [sp, #8]
3400fb48:	9103      	str	r1, [sp, #12]
3400fb4a:	428b      	cmp	r3, r1
3400fb4c:	d80c      	bhi.n	3400fb68 <__multiply+0x98>
3400fb4e:	2e00      	cmp	r6, #0
3400fb50:	dd03      	ble.n	3400fb5a <__multiply+0x8a>
3400fb52:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3400fb56:	2b00      	cmp	r3, #0
3400fb58:	d057      	beq.n	3400fc0a <__multiply+0x13a>
3400fb5a:	6106      	str	r6, [r0, #16]
3400fb5c:	b005      	add	sp, #20
3400fb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400fb62:	f843 2b04 	str.w	r2, [r3], #4
3400fb66:	e7d9      	b.n	3400fb1c <__multiply+0x4c>
3400fb68:	f8b1 a000 	ldrh.w	sl, [r1]
3400fb6c:	f1ba 0f00 	cmp.w	sl, #0
3400fb70:	d021      	beq.n	3400fbb6 <__multiply+0xe6>
3400fb72:	46c4      	mov	ip, r8
3400fb74:	46a1      	mov	r9, r4
3400fb76:	2700      	movs	r7, #0
3400fb78:	f85c 2b04 	ldr.w	r2, [ip], #4
3400fb7c:	f8d9 3000 	ldr.w	r3, [r9]
3400fb80:	fa1f fb82 	uxth.w	fp, r2
3400fb84:	4565      	cmp	r5, ip
3400fb86:	b29b      	uxth	r3, r3
3400fb88:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400fb8c:	fb0a 330b 	mla	r3, sl, fp, r3
3400fb90:	443b      	add	r3, r7
3400fb92:	f8d9 7000 	ldr.w	r7, [r9]
3400fb96:	ea4f 4717 	mov.w	r7, r7, lsr #16
3400fb9a:	fb0a 7202 	mla	r2, sl, r2, r7
3400fb9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3400fba2:	b29b      	uxth	r3, r3
3400fba4:	ea4f 4712 	mov.w	r7, r2, lsr #16
3400fba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400fbac:	f849 3b04 	str.w	r3, [r9], #4
3400fbb0:	d8e2      	bhi.n	3400fb78 <__multiply+0xa8>
3400fbb2:	9b01      	ldr	r3, [sp, #4]
3400fbb4:	50e7      	str	r7, [r4, r3]
3400fbb6:	9b03      	ldr	r3, [sp, #12]
3400fbb8:	3104      	adds	r1, #4
3400fbba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3400fbbe:	f1b9 0f00 	cmp.w	r9, #0
3400fbc2:	d020      	beq.n	3400fc06 <__multiply+0x136>
3400fbc4:	6823      	ldr	r3, [r4, #0]
3400fbc6:	4647      	mov	r7, r8
3400fbc8:	46a4      	mov	ip, r4
3400fbca:	f04f 0a00 	mov.w	sl, #0
3400fbce:	f8b7 b000 	ldrh.w	fp, [r7]
3400fbd2:	b29b      	uxth	r3, r3
3400fbd4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3400fbd8:	fb09 220b 	mla	r2, r9, fp, r2
3400fbdc:	4452      	add	r2, sl
3400fbde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400fbe2:	f84c 3b04 	str.w	r3, [ip], #4
3400fbe6:	f857 3b04 	ldr.w	r3, [r7], #4
3400fbea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400fbee:	f8bc 3000 	ldrh.w	r3, [ip]
3400fbf2:	42bd      	cmp	r5, r7
3400fbf4:	fb09 330a 	mla	r3, r9, sl, r3
3400fbf8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
3400fbfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400fc00:	d8e5      	bhi.n	3400fbce <__multiply+0xfe>
3400fc02:	9a01      	ldr	r2, [sp, #4]
3400fc04:	50a3      	str	r3, [r4, r2]
3400fc06:	3404      	adds	r4, #4
3400fc08:	e79d      	b.n	3400fb46 <__multiply+0x76>
3400fc0a:	3e01      	subs	r6, #1
3400fc0c:	e79f      	b.n	3400fb4e <__multiply+0x7e>
3400fc0e:	bf00      	nop
3400fc10:	34011e0a 	.word	0x34011e0a
3400fc14:	34011e1b 	.word	0x34011e1b

3400fc18 <__pow5mult>:
3400fc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400fc1c:	4615      	mov	r5, r2
3400fc1e:	f012 0203 	ands.w	r2, r2, #3
3400fc22:	4607      	mov	r7, r0
3400fc24:	460e      	mov	r6, r1
3400fc26:	d007      	beq.n	3400fc38 <__pow5mult+0x20>
3400fc28:	3a01      	subs	r2, #1
3400fc2a:	4c25      	ldr	r4, [pc, #148]	@ (3400fcc0 <__pow5mult+0xa8>)
3400fc2c:	2300      	movs	r3, #0
3400fc2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3400fc32:	f7ff fea3 	bl	3400f97c <__multadd>
3400fc36:	4606      	mov	r6, r0
3400fc38:	10ad      	asrs	r5, r5, #2
3400fc3a:	d03d      	beq.n	3400fcb8 <__pow5mult+0xa0>
3400fc3c:	69fc      	ldr	r4, [r7, #28]
3400fc3e:	b97c      	cbnz	r4, 3400fc60 <__pow5mult+0x48>
3400fc40:	2010      	movs	r0, #16
3400fc42:	f7fd fd95 	bl	3400d770 <malloc>
3400fc46:	4602      	mov	r2, r0
3400fc48:	61f8      	str	r0, [r7, #28]
3400fc4a:	b928      	cbnz	r0, 3400fc58 <__pow5mult+0x40>
3400fc4c:	4b1d      	ldr	r3, [pc, #116]	@ (3400fcc4 <__pow5mult+0xac>)
3400fc4e:	f240 11b3 	movw	r1, #435	@ 0x1b3
3400fc52:	481d      	ldr	r0, [pc, #116]	@ (3400fcc8 <__pow5mult+0xb0>)
3400fc54:	f7fd fd6e 	bl	3400d734 <__assert_func>
3400fc58:	e9c0 4401 	strd	r4, r4, [r0, #4]
3400fc5c:	6004      	str	r4, [r0, #0]
3400fc5e:	60c4      	str	r4, [r0, #12]
3400fc60:	f8d7 801c 	ldr.w	r8, [r7, #28]
3400fc64:	f8d8 4008 	ldr.w	r4, [r8, #8]
3400fc68:	b94c      	cbnz	r4, 3400fc7e <__pow5mult+0x66>
3400fc6a:	f240 2171 	movw	r1, #625	@ 0x271
3400fc6e:	4638      	mov	r0, r7
3400fc70:	f7ff ff18 	bl	3400faa4 <__i2b>
3400fc74:	2300      	movs	r3, #0
3400fc76:	4604      	mov	r4, r0
3400fc78:	f8c8 0008 	str.w	r0, [r8, #8]
3400fc7c:	6003      	str	r3, [r0, #0]
3400fc7e:	f04f 0900 	mov.w	r9, #0
3400fc82:	07eb      	lsls	r3, r5, #31
3400fc84:	d50a      	bpl.n	3400fc9c <__pow5mult+0x84>
3400fc86:	4631      	mov	r1, r6
3400fc88:	4622      	mov	r2, r4
3400fc8a:	4638      	mov	r0, r7
3400fc8c:	f7ff ff20 	bl	3400fad0 <__multiply>
3400fc90:	4680      	mov	r8, r0
3400fc92:	4631      	mov	r1, r6
3400fc94:	4638      	mov	r0, r7
3400fc96:	4646      	mov	r6, r8
3400fc98:	f7ff fe4e 	bl	3400f938 <_Bfree>
3400fc9c:	106d      	asrs	r5, r5, #1
3400fc9e:	d00b      	beq.n	3400fcb8 <__pow5mult+0xa0>
3400fca0:	6820      	ldr	r0, [r4, #0]
3400fca2:	b938      	cbnz	r0, 3400fcb4 <__pow5mult+0x9c>
3400fca4:	4622      	mov	r2, r4
3400fca6:	4621      	mov	r1, r4
3400fca8:	4638      	mov	r0, r7
3400fcaa:	f7ff ff11 	bl	3400fad0 <__multiply>
3400fcae:	6020      	str	r0, [r4, #0]
3400fcb0:	f8c0 9000 	str.w	r9, [r0]
3400fcb4:	4604      	mov	r4, r0
3400fcb6:	e7e4      	b.n	3400fc82 <__pow5mult+0x6a>
3400fcb8:	4630      	mov	r0, r6
3400fcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400fcbe:	bf00      	nop
3400fcc0:	34012154 	.word	0x34012154
3400fcc4:	34011d9b 	.word	0x34011d9b
3400fcc8:	34011e1b 	.word	0x34011e1b

3400fccc <__lshift>:
3400fccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400fcd0:	460c      	mov	r4, r1
3400fcd2:	4607      	mov	r7, r0
3400fcd4:	4691      	mov	r9, r2
3400fcd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
3400fcda:	6923      	ldr	r3, [r4, #16]
3400fcdc:	6849      	ldr	r1, [r1, #4]
3400fcde:	eb03 1862 	add.w	r8, r3, r2, asr #5
3400fce2:	68a3      	ldr	r3, [r4, #8]
3400fce4:	f108 0601 	add.w	r6, r8, #1
3400fce8:	42b3      	cmp	r3, r6
3400fcea:	db0b      	blt.n	3400fd04 <__lshift+0x38>
3400fcec:	4638      	mov	r0, r7
3400fcee:	f7ff fde3 	bl	3400f8b8 <_Balloc>
3400fcf2:	4605      	mov	r5, r0
3400fcf4:	b948      	cbnz	r0, 3400fd0a <__lshift+0x3e>
3400fcf6:	4602      	mov	r2, r0
3400fcf8:	4b28      	ldr	r3, [pc, #160]	@ (3400fd9c <__lshift+0xd0>)
3400fcfa:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400fcfe:	4828      	ldr	r0, [pc, #160]	@ (3400fda0 <__lshift+0xd4>)
3400fd00:	f7fd fd18 	bl	3400d734 <__assert_func>
3400fd04:	3101      	adds	r1, #1
3400fd06:	005b      	lsls	r3, r3, #1
3400fd08:	e7ee      	b.n	3400fce8 <__lshift+0x1c>
3400fd0a:	2300      	movs	r3, #0
3400fd0c:	f100 0114 	add.w	r1, r0, #20
3400fd10:	f100 0210 	add.w	r2, r0, #16
3400fd14:	4618      	mov	r0, r3
3400fd16:	4553      	cmp	r3, sl
3400fd18:	db33      	blt.n	3400fd82 <__lshift+0xb6>
3400fd1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3400fd1e:	f104 0314 	add.w	r3, r4, #20
3400fd22:	6920      	ldr	r0, [r4, #16]
3400fd24:	f019 091f 	ands.w	r9, r9, #31
3400fd28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3400fd2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3400fd30:	d02b      	beq.n	3400fd8a <__lshift+0xbe>
3400fd32:	f1c9 0e20 	rsb	lr, r9, #32
3400fd36:	468a      	mov	sl, r1
3400fd38:	2200      	movs	r2, #0
3400fd3a:	6818      	ldr	r0, [r3, #0]
3400fd3c:	fa00 f009 	lsl.w	r0, r0, r9
3400fd40:	4310      	orrs	r0, r2
3400fd42:	f84a 0b04 	str.w	r0, [sl], #4
3400fd46:	f853 2b04 	ldr.w	r2, [r3], #4
3400fd4a:	459c      	cmp	ip, r3
3400fd4c:	fa22 f20e 	lsr.w	r2, r2, lr
3400fd50:	d8f3      	bhi.n	3400fd3a <__lshift+0x6e>
3400fd52:	ebac 0304 	sub.w	r3, ip, r4
3400fd56:	f104 0015 	add.w	r0, r4, #21
3400fd5a:	3b15      	subs	r3, #21
3400fd5c:	f023 0303 	bic.w	r3, r3, #3
3400fd60:	3304      	adds	r3, #4
3400fd62:	4560      	cmp	r0, ip
3400fd64:	bf88      	it	hi
3400fd66:	2304      	movhi	r3, #4
3400fd68:	50ca      	str	r2, [r1, r3]
3400fd6a:	b10a      	cbz	r2, 3400fd70 <__lshift+0xa4>
3400fd6c:	f108 0602 	add.w	r6, r8, #2
3400fd70:	3e01      	subs	r6, #1
3400fd72:	4638      	mov	r0, r7
3400fd74:	4621      	mov	r1, r4
3400fd76:	612e      	str	r6, [r5, #16]
3400fd78:	f7ff fdde 	bl	3400f938 <_Bfree>
3400fd7c:	4628      	mov	r0, r5
3400fd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400fd82:	3301      	adds	r3, #1
3400fd84:	f842 0f04 	str.w	r0, [r2, #4]!
3400fd88:	e7c5      	b.n	3400fd16 <__lshift+0x4a>
3400fd8a:	3904      	subs	r1, #4
3400fd8c:	f853 2b04 	ldr.w	r2, [r3], #4
3400fd90:	459c      	cmp	ip, r3
3400fd92:	f841 2f04 	str.w	r2, [r1, #4]!
3400fd96:	d8f9      	bhi.n	3400fd8c <__lshift+0xc0>
3400fd98:	e7ea      	b.n	3400fd70 <__lshift+0xa4>
3400fd9a:	bf00      	nop
3400fd9c:	34011e0a 	.word	0x34011e0a
3400fda0:	34011e1b 	.word	0x34011e1b

3400fda4 <__mcmp>:
3400fda4:	4603      	mov	r3, r0
3400fda6:	690a      	ldr	r2, [r1, #16]
3400fda8:	6900      	ldr	r0, [r0, #16]
3400fdaa:	1a80      	subs	r0, r0, r2
3400fdac:	b530      	push	{r4, r5, lr}
3400fdae:	d10e      	bne.n	3400fdce <__mcmp+0x2a>
3400fdb0:	3314      	adds	r3, #20
3400fdb2:	3114      	adds	r1, #20
3400fdb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3400fdb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3400fdbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3400fdc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3400fdc4:	4295      	cmp	r5, r2
3400fdc6:	d003      	beq.n	3400fdd0 <__mcmp+0x2c>
3400fdc8:	d205      	bcs.n	3400fdd6 <__mcmp+0x32>
3400fdca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400fdce:	bd30      	pop	{r4, r5, pc}
3400fdd0:	42a3      	cmp	r3, r4
3400fdd2:	d3f3      	bcc.n	3400fdbc <__mcmp+0x18>
3400fdd4:	e7fb      	b.n	3400fdce <__mcmp+0x2a>
3400fdd6:	2001      	movs	r0, #1
3400fdd8:	e7f9      	b.n	3400fdce <__mcmp+0x2a>
	...

3400fddc <__mdiff>:
3400fddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400fde0:	4689      	mov	r9, r1
3400fde2:	4606      	mov	r6, r0
3400fde4:	4611      	mov	r1, r2
3400fde6:	4614      	mov	r4, r2
3400fde8:	4648      	mov	r0, r9
3400fdea:	f7ff ffdb 	bl	3400fda4 <__mcmp>
3400fdee:	1e05      	subs	r5, r0, #0
3400fdf0:	d112      	bne.n	3400fe18 <__mdiff+0x3c>
3400fdf2:	4629      	mov	r1, r5
3400fdf4:	4630      	mov	r0, r6
3400fdf6:	f7ff fd5f 	bl	3400f8b8 <_Balloc>
3400fdfa:	4602      	mov	r2, r0
3400fdfc:	b928      	cbnz	r0, 3400fe0a <__mdiff+0x2e>
3400fdfe:	4b41      	ldr	r3, [pc, #260]	@ (3400ff04 <__mdiff+0x128>)
3400fe00:	f240 2137 	movw	r1, #567	@ 0x237
3400fe04:	4840      	ldr	r0, [pc, #256]	@ (3400ff08 <__mdiff+0x12c>)
3400fe06:	f7fd fc95 	bl	3400d734 <__assert_func>
3400fe0a:	2301      	movs	r3, #1
3400fe0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
3400fe10:	4610      	mov	r0, r2
3400fe12:	b003      	add	sp, #12
3400fe14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400fe18:	bfbc      	itt	lt
3400fe1a:	464b      	movlt	r3, r9
3400fe1c:	46a1      	movlt	r9, r4
3400fe1e:	4630      	mov	r0, r6
3400fe20:	bfb8      	it	lt
3400fe22:	2501      	movlt	r5, #1
3400fe24:	f8d9 1004 	ldr.w	r1, [r9, #4]
3400fe28:	bfb4      	ite	lt
3400fe2a:	461c      	movlt	r4, r3
3400fe2c:	2500      	movge	r5, #0
3400fe2e:	f7ff fd43 	bl	3400f8b8 <_Balloc>
3400fe32:	4602      	mov	r2, r0
3400fe34:	b918      	cbnz	r0, 3400fe3e <__mdiff+0x62>
3400fe36:	4b33      	ldr	r3, [pc, #204]	@ (3400ff04 <__mdiff+0x128>)
3400fe38:	f240 2145 	movw	r1, #581	@ 0x245
3400fe3c:	e7e2      	b.n	3400fe04 <__mdiff+0x28>
3400fe3e:	f8d9 7010 	ldr.w	r7, [r9, #16]
3400fe42:	f104 0e14 	add.w	lr, r4, #20
3400fe46:	6926      	ldr	r6, [r4, #16]
3400fe48:	f100 0b14 	add.w	fp, r0, #20
3400fe4c:	60c5      	str	r5, [r0, #12]
3400fe4e:	f109 0514 	add.w	r5, r9, #20
3400fe52:	f109 0310 	add.w	r3, r9, #16
3400fe56:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3400fe5a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3400fe5e:	46d9      	mov	r9, fp
3400fe60:	f04f 0c00 	mov.w	ip, #0
3400fe64:	9301      	str	r3, [sp, #4]
3400fe66:	9b01      	ldr	r3, [sp, #4]
3400fe68:	f85e 0b04 	ldr.w	r0, [lr], #4
3400fe6c:	f853 af04 	ldr.w	sl, [r3, #4]!
3400fe70:	4576      	cmp	r6, lr
3400fe72:	9301      	str	r3, [sp, #4]
3400fe74:	fa1f f38a 	uxth.w	r3, sl
3400fe78:	4619      	mov	r1, r3
3400fe7a:	b283      	uxth	r3, r0
3400fe7c:	ea4f 4010 	mov.w	r0, r0, lsr #16
3400fe80:	eba1 0303 	sub.w	r3, r1, r3
3400fe84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3400fe88:	4463      	add	r3, ip
3400fe8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
3400fe8e:	b29b      	uxth	r3, r3
3400fe90:	ea4f 4c20 	mov.w	ip, r0, asr #16
3400fe94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400fe98:	f849 3b04 	str.w	r3, [r9], #4
3400fe9c:	d8e3      	bhi.n	3400fe66 <__mdiff+0x8a>
3400fe9e:	1b33      	subs	r3, r6, r4
3400fea0:	3415      	adds	r4, #21
3400fea2:	3b15      	subs	r3, #21
3400fea4:	f023 0303 	bic.w	r3, r3, #3
3400fea8:	3304      	adds	r3, #4
3400feaa:	42a6      	cmp	r6, r4
3400feac:	bf38      	it	cc
3400feae:	2304      	movcc	r3, #4
3400feb0:	441d      	add	r5, r3
3400feb2:	445b      	add	r3, fp
3400feb4:	462c      	mov	r4, r5
3400feb6:	461e      	mov	r6, r3
3400feb8:	4544      	cmp	r4, r8
3400feba:	d30e      	bcc.n	3400feda <__mdiff+0xfe>
3400febc:	f108 0103 	add.w	r1, r8, #3
3400fec0:	1b49      	subs	r1, r1, r5
3400fec2:	3d03      	subs	r5, #3
3400fec4:	f021 0103 	bic.w	r1, r1, #3
3400fec8:	45a8      	cmp	r8, r5
3400feca:	bf38      	it	cc
3400fecc:	2100      	movcc	r1, #0
3400fece:	440b      	add	r3, r1
3400fed0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3400fed4:	b199      	cbz	r1, 3400fefe <__mdiff+0x122>
3400fed6:	6117      	str	r7, [r2, #16]
3400fed8:	e79a      	b.n	3400fe10 <__mdiff+0x34>
3400feda:	f854 1b04 	ldr.w	r1, [r4], #4
3400fede:	46e6      	mov	lr, ip
3400fee0:	fa1f fc81 	uxth.w	ip, r1
3400fee4:	0c08      	lsrs	r0, r1, #16
3400fee6:	4471      	add	r1, lr
3400fee8:	44f4      	add	ip, lr
3400feea:	b289      	uxth	r1, r1
3400feec:	eb00 402c 	add.w	r0, r0, ip, asr #16
3400fef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3400fef4:	ea4f 4c20 	mov.w	ip, r0, asr #16
3400fef8:	f846 1b04 	str.w	r1, [r6], #4
3400fefc:	e7dc      	b.n	3400feb8 <__mdiff+0xdc>
3400fefe:	3f01      	subs	r7, #1
3400ff00:	e7e6      	b.n	3400fed0 <__mdiff+0xf4>
3400ff02:	bf00      	nop
3400ff04:	34011e0a 	.word	0x34011e0a
3400ff08:	34011e1b 	.word	0x34011e1b

3400ff0c <__d2b>:
3400ff0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400ff10:	460f      	mov	r7, r1
3400ff12:	2101      	movs	r1, #1
3400ff14:	4616      	mov	r6, r2
3400ff16:	ec59 8b10 	vmov	r8, r9, d0
3400ff1a:	f7ff fccd 	bl	3400f8b8 <_Balloc>
3400ff1e:	4604      	mov	r4, r0
3400ff20:	b930      	cbnz	r0, 3400ff30 <__d2b+0x24>
3400ff22:	4602      	mov	r2, r0
3400ff24:	4b23      	ldr	r3, [pc, #140]	@ (3400ffb4 <__d2b+0xa8>)
3400ff26:	f240 310f 	movw	r1, #783	@ 0x30f
3400ff2a:	4823      	ldr	r0, [pc, #140]	@ (3400ffb8 <__d2b+0xac>)
3400ff2c:	f7fd fc02 	bl	3400d734 <__assert_func>
3400ff30:	f3c9 550a 	ubfx	r5, r9, #20, #11
3400ff34:	f3c9 0313 	ubfx	r3, r9, #0, #20
3400ff38:	b10d      	cbz	r5, 3400ff3e <__d2b+0x32>
3400ff3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3400ff3e:	9301      	str	r3, [sp, #4]
3400ff40:	f1b8 0300 	subs.w	r3, r8, #0
3400ff44:	d023      	beq.n	3400ff8e <__d2b+0x82>
3400ff46:	4668      	mov	r0, sp
3400ff48:	9300      	str	r3, [sp, #0]
3400ff4a:	f7ff fd7e 	bl	3400fa4a <__lo0bits>
3400ff4e:	e9dd 1200 	ldrd	r1, r2, [sp]
3400ff52:	b1d0      	cbz	r0, 3400ff8a <__d2b+0x7e>
3400ff54:	f1c0 0320 	rsb	r3, r0, #32
3400ff58:	fa02 f303 	lsl.w	r3, r2, r3
3400ff5c:	40c2      	lsrs	r2, r0
3400ff5e:	430b      	orrs	r3, r1
3400ff60:	9201      	str	r2, [sp, #4]
3400ff62:	6163      	str	r3, [r4, #20]
3400ff64:	9b01      	ldr	r3, [sp, #4]
3400ff66:	2b00      	cmp	r3, #0
3400ff68:	61a3      	str	r3, [r4, #24]
3400ff6a:	bf0c      	ite	eq
3400ff6c:	2201      	moveq	r2, #1
3400ff6e:	2202      	movne	r2, #2
3400ff70:	6122      	str	r2, [r4, #16]
3400ff72:	b1a5      	cbz	r5, 3400ff9e <__d2b+0x92>
3400ff74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3400ff78:	4405      	add	r5, r0
3400ff7a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3400ff7e:	603d      	str	r5, [r7, #0]
3400ff80:	6030      	str	r0, [r6, #0]
3400ff82:	4620      	mov	r0, r4
3400ff84:	b003      	add	sp, #12
3400ff86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3400ff8a:	6161      	str	r1, [r4, #20]
3400ff8c:	e7ea      	b.n	3400ff64 <__d2b+0x58>
3400ff8e:	a801      	add	r0, sp, #4
3400ff90:	f7ff fd5b 	bl	3400fa4a <__lo0bits>
3400ff94:	9b01      	ldr	r3, [sp, #4]
3400ff96:	3020      	adds	r0, #32
3400ff98:	2201      	movs	r2, #1
3400ff9a:	6163      	str	r3, [r4, #20]
3400ff9c:	e7e8      	b.n	3400ff70 <__d2b+0x64>
3400ff9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3400ffa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3400ffa6:	6038      	str	r0, [r7, #0]
3400ffa8:	6918      	ldr	r0, [r3, #16]
3400ffaa:	f7ff fd2f 	bl	3400fa0c <__hi0bits>
3400ffae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3400ffb2:	e7e5      	b.n	3400ff80 <__d2b+0x74>
3400ffb4:	34011e0a 	.word	0x34011e0a
3400ffb8:	34011e1b 	.word	0x34011e1b

3400ffbc <__sfputc_r>:
3400ffbc:	6893      	ldr	r3, [r2, #8]
3400ffbe:	3b01      	subs	r3, #1
3400ffc0:	2b00      	cmp	r3, #0
3400ffc2:	b410      	push	{r4}
3400ffc4:	6093      	str	r3, [r2, #8]
3400ffc6:	da08      	bge.n	3400ffda <__sfputc_r+0x1e>
3400ffc8:	6994      	ldr	r4, [r2, #24]
3400ffca:	42a3      	cmp	r3, r4
3400ffcc:	db01      	blt.n	3400ffd2 <__sfputc_r+0x16>
3400ffce:	290a      	cmp	r1, #10
3400ffd0:	d103      	bne.n	3400ffda <__sfputc_r+0x1e>
3400ffd2:	f85d 4b04 	ldr.w	r4, [sp], #4
3400ffd6:	f7fe bb00 	b.w	3400e5da <__swbuf_r>
3400ffda:	6813      	ldr	r3, [r2, #0]
3400ffdc:	1c58      	adds	r0, r3, #1
3400ffde:	6010      	str	r0, [r2, #0]
3400ffe0:	4608      	mov	r0, r1
3400ffe2:	7019      	strb	r1, [r3, #0]
3400ffe4:	f85d 4b04 	ldr.w	r4, [sp], #4
3400ffe8:	4770      	bx	lr

3400ffea <__sfputs_r>:
3400ffea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400ffec:	4606      	mov	r6, r0
3400ffee:	460f      	mov	r7, r1
3400fff0:	4614      	mov	r4, r2
3400fff2:	18d5      	adds	r5, r2, r3
3400fff4:	42ac      	cmp	r4, r5
3400fff6:	d101      	bne.n	3400fffc <__sfputs_r+0x12>
3400fff8:	2000      	movs	r0, #0
3400fffa:	e007      	b.n	3401000c <__sfputs_r+0x22>
3400fffc:	463a      	mov	r2, r7
3400fffe:	f814 1b01 	ldrb.w	r1, [r4], #1
34010002:	4630      	mov	r0, r6
34010004:	f7ff ffda 	bl	3400ffbc <__sfputc_r>
34010008:	1c43      	adds	r3, r0, #1
3401000a:	d1f3      	bne.n	3400fff4 <__sfputs_r+0xa>
3401000c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

34010010 <_vfiprintf_r>:
34010010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34010014:	460d      	mov	r5, r1
34010016:	b09d      	sub	sp, #116	@ 0x74
34010018:	4614      	mov	r4, r2
3401001a:	4698      	mov	r8, r3
3401001c:	4606      	mov	r6, r0
3401001e:	b118      	cbz	r0, 34010028 <_vfiprintf_r+0x18>
34010020:	6a03      	ldr	r3, [r0, #32]
34010022:	b90b      	cbnz	r3, 34010028 <_vfiprintf_r+0x18>
34010024:	f7fe f9de 	bl	3400e3e4 <__sinit>
34010028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401002a:	07d9      	lsls	r1, r3, #31
3401002c:	d405      	bmi.n	3401003a <_vfiprintf_r+0x2a>
3401002e:	89ab      	ldrh	r3, [r5, #12]
34010030:	059a      	lsls	r2, r3, #22
34010032:	d402      	bmi.n	3401003a <_vfiprintf_r+0x2a>
34010034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34010036:	f7fe fde4 	bl	3400ec02 <__retarget_lock_acquire_recursive>
3401003a:	89ab      	ldrh	r3, [r5, #12]
3401003c:	071b      	lsls	r3, r3, #28
3401003e:	d501      	bpl.n	34010044 <_vfiprintf_r+0x34>
34010040:	692b      	ldr	r3, [r5, #16]
34010042:	b99b      	cbnz	r3, 3401006c <_vfiprintf_r+0x5c>
34010044:	4629      	mov	r1, r5
34010046:	4630      	mov	r0, r6
34010048:	f7fe fb06 	bl	3400e658 <__swsetup_r>
3401004c:	b170      	cbz	r0, 3401006c <_vfiprintf_r+0x5c>
3401004e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34010050:	07dc      	lsls	r4, r3, #31
34010052:	d504      	bpl.n	3401005e <_vfiprintf_r+0x4e>
34010054:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34010058:	b01d      	add	sp, #116	@ 0x74
3401005a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401005e:	89ab      	ldrh	r3, [r5, #12]
34010060:	0598      	lsls	r0, r3, #22
34010062:	d4f7      	bmi.n	34010054 <_vfiprintf_r+0x44>
34010064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34010066:	f7fe fdcd 	bl	3400ec04 <__retarget_lock_release_recursive>
3401006a:	e7f3      	b.n	34010054 <_vfiprintf_r+0x44>
3401006c:	2300      	movs	r3, #0
3401006e:	f8cd 800c 	str.w	r8, [sp, #12]
34010072:	f04f 0901 	mov.w	r9, #1
34010076:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3401022c <_vfiprintf_r+0x21c>
3401007a:	9309      	str	r3, [sp, #36]	@ 0x24
3401007c:	2320      	movs	r3, #32
3401007e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
34010082:	2330      	movs	r3, #48	@ 0x30
34010084:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
34010088:	4623      	mov	r3, r4
3401008a:	469a      	mov	sl, r3
3401008c:	f813 2b01 	ldrb.w	r2, [r3], #1
34010090:	b10a      	cbz	r2, 34010096 <_vfiprintf_r+0x86>
34010092:	2a25      	cmp	r2, #37	@ 0x25
34010094:	d1f9      	bne.n	3401008a <_vfiprintf_r+0x7a>
34010096:	ebba 0b04 	subs.w	fp, sl, r4
3401009a:	d00b      	beq.n	340100b4 <_vfiprintf_r+0xa4>
3401009c:	465b      	mov	r3, fp
3401009e:	4622      	mov	r2, r4
340100a0:	4629      	mov	r1, r5
340100a2:	4630      	mov	r0, r6
340100a4:	f7ff ffa1 	bl	3400ffea <__sfputs_r>
340100a8:	3001      	adds	r0, #1
340100aa:	f000 80a7 	beq.w	340101fc <_vfiprintf_r+0x1ec>
340100ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
340100b0:	445a      	add	r2, fp
340100b2:	9209      	str	r2, [sp, #36]	@ 0x24
340100b4:	f89a 3000 	ldrb.w	r3, [sl]
340100b8:	2b00      	cmp	r3, #0
340100ba:	f000 809f 	beq.w	340101fc <_vfiprintf_r+0x1ec>
340100be:	2300      	movs	r3, #0
340100c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
340100c4:	f10a 0a01 	add.w	sl, sl, #1
340100c8:	9304      	str	r3, [sp, #16]
340100ca:	9307      	str	r3, [sp, #28]
340100cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
340100d0:	931a      	str	r3, [sp, #104]	@ 0x68
340100d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
340100d6:	4654      	mov	r4, sl
340100d8:	2205      	movs	r2, #5
340100da:	4854      	ldr	r0, [pc, #336]	@ (3401022c <_vfiprintf_r+0x21c>)
340100dc:	f814 1b01 	ldrb.w	r1, [r4], #1
340100e0:	f7fe fd91 	bl	3400ec06 <memchr>
340100e4:	9a04      	ldr	r2, [sp, #16]
340100e6:	b9d8      	cbnz	r0, 34010120 <_vfiprintf_r+0x110>
340100e8:	06d1      	lsls	r1, r2, #27
340100ea:	bf44      	itt	mi
340100ec:	2320      	movmi	r3, #32
340100ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
340100f2:	0713      	lsls	r3, r2, #28
340100f4:	bf44      	itt	mi
340100f6:	232b      	movmi	r3, #43	@ 0x2b
340100f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
340100fc:	f89a 3000 	ldrb.w	r3, [sl]
34010100:	2b2a      	cmp	r3, #42	@ 0x2a
34010102:	d015      	beq.n	34010130 <_vfiprintf_r+0x120>
34010104:	9a07      	ldr	r2, [sp, #28]
34010106:	4654      	mov	r4, sl
34010108:	2000      	movs	r0, #0
3401010a:	f04f 0c0a 	mov.w	ip, #10
3401010e:	4621      	mov	r1, r4
34010110:	f811 3b01 	ldrb.w	r3, [r1], #1
34010114:	3b30      	subs	r3, #48	@ 0x30
34010116:	2b09      	cmp	r3, #9
34010118:	d94b      	bls.n	340101b2 <_vfiprintf_r+0x1a2>
3401011a:	b1b0      	cbz	r0, 3401014a <_vfiprintf_r+0x13a>
3401011c:	9207      	str	r2, [sp, #28]
3401011e:	e014      	b.n	3401014a <_vfiprintf_r+0x13a>
34010120:	eba0 0308 	sub.w	r3, r0, r8
34010124:	46a2      	mov	sl, r4
34010126:	fa09 f303 	lsl.w	r3, r9, r3
3401012a:	4313      	orrs	r3, r2
3401012c:	9304      	str	r3, [sp, #16]
3401012e:	e7d2      	b.n	340100d6 <_vfiprintf_r+0xc6>
34010130:	9b03      	ldr	r3, [sp, #12]
34010132:	1d19      	adds	r1, r3, #4
34010134:	681b      	ldr	r3, [r3, #0]
34010136:	2b00      	cmp	r3, #0
34010138:	9103      	str	r1, [sp, #12]
3401013a:	bfbb      	ittet	lt
3401013c:	425b      	neglt	r3, r3
3401013e:	f042 0202 	orrlt.w	r2, r2, #2
34010142:	9307      	strge	r3, [sp, #28]
34010144:	9307      	strlt	r3, [sp, #28]
34010146:	bfb8      	it	lt
34010148:	9204      	strlt	r2, [sp, #16]
3401014a:	7823      	ldrb	r3, [r4, #0]
3401014c:	2b2e      	cmp	r3, #46	@ 0x2e
3401014e:	d10a      	bne.n	34010166 <_vfiprintf_r+0x156>
34010150:	7863      	ldrb	r3, [r4, #1]
34010152:	2b2a      	cmp	r3, #42	@ 0x2a
34010154:	d132      	bne.n	340101bc <_vfiprintf_r+0x1ac>
34010156:	9b03      	ldr	r3, [sp, #12]
34010158:	3402      	adds	r4, #2
3401015a:	1d1a      	adds	r2, r3, #4
3401015c:	681b      	ldr	r3, [r3, #0]
3401015e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
34010162:	9203      	str	r2, [sp, #12]
34010164:	9305      	str	r3, [sp, #20]
34010166:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3401023c <_vfiprintf_r+0x22c>
3401016a:	2203      	movs	r2, #3
3401016c:	7821      	ldrb	r1, [r4, #0]
3401016e:	4650      	mov	r0, sl
34010170:	f7fe fd49 	bl	3400ec06 <memchr>
34010174:	b138      	cbz	r0, 34010186 <_vfiprintf_r+0x176>
34010176:	eba0 000a 	sub.w	r0, r0, sl
3401017a:	2240      	movs	r2, #64	@ 0x40
3401017c:	9b04      	ldr	r3, [sp, #16]
3401017e:	3401      	adds	r4, #1
34010180:	4082      	lsls	r2, r0
34010182:	4313      	orrs	r3, r2
34010184:	9304      	str	r3, [sp, #16]
34010186:	f814 1b01 	ldrb.w	r1, [r4], #1
3401018a:	2206      	movs	r2, #6
3401018c:	4828      	ldr	r0, [pc, #160]	@ (34010230 <_vfiprintf_r+0x220>)
3401018e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
34010192:	f7fe fd38 	bl	3400ec06 <memchr>
34010196:	2800      	cmp	r0, #0
34010198:	d03f      	beq.n	3401021a <_vfiprintf_r+0x20a>
3401019a:	4b26      	ldr	r3, [pc, #152]	@ (34010234 <_vfiprintf_r+0x224>)
3401019c:	bb1b      	cbnz	r3, 340101e6 <_vfiprintf_r+0x1d6>
3401019e:	9b03      	ldr	r3, [sp, #12]
340101a0:	3307      	adds	r3, #7
340101a2:	f023 0307 	bic.w	r3, r3, #7
340101a6:	3308      	adds	r3, #8
340101a8:	9303      	str	r3, [sp, #12]
340101aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340101ac:	443b      	add	r3, r7
340101ae:	9309      	str	r3, [sp, #36]	@ 0x24
340101b0:	e76a      	b.n	34010088 <_vfiprintf_r+0x78>
340101b2:	fb0c 3202 	mla	r2, ip, r2, r3
340101b6:	460c      	mov	r4, r1
340101b8:	2001      	movs	r0, #1
340101ba:	e7a8      	b.n	3401010e <_vfiprintf_r+0xfe>
340101bc:	2300      	movs	r3, #0
340101be:	3401      	adds	r4, #1
340101c0:	f04f 0c0a 	mov.w	ip, #10
340101c4:	4619      	mov	r1, r3
340101c6:	9305      	str	r3, [sp, #20]
340101c8:	4620      	mov	r0, r4
340101ca:	f810 2b01 	ldrb.w	r2, [r0], #1
340101ce:	3a30      	subs	r2, #48	@ 0x30
340101d0:	2a09      	cmp	r2, #9
340101d2:	d903      	bls.n	340101dc <_vfiprintf_r+0x1cc>
340101d4:	2b00      	cmp	r3, #0
340101d6:	d0c6      	beq.n	34010166 <_vfiprintf_r+0x156>
340101d8:	9105      	str	r1, [sp, #20]
340101da:	e7c4      	b.n	34010166 <_vfiprintf_r+0x156>
340101dc:	fb0c 2101 	mla	r1, ip, r1, r2
340101e0:	4604      	mov	r4, r0
340101e2:	2301      	movs	r3, #1
340101e4:	e7f0      	b.n	340101c8 <_vfiprintf_r+0x1b8>
340101e6:	ab03      	add	r3, sp, #12
340101e8:	462a      	mov	r2, r5
340101ea:	a904      	add	r1, sp, #16
340101ec:	4630      	mov	r0, r6
340101ee:	9300      	str	r3, [sp, #0]
340101f0:	4b11      	ldr	r3, [pc, #68]	@ (34010238 <_vfiprintf_r+0x228>)
340101f2:	f7fd fc01 	bl	3400d9f8 <_printf_float>
340101f6:	4607      	mov	r7, r0
340101f8:	1c78      	adds	r0, r7, #1
340101fa:	d1d6      	bne.n	340101aa <_vfiprintf_r+0x19a>
340101fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
340101fe:	07d9      	lsls	r1, r3, #31
34010200:	d405      	bmi.n	3401020e <_vfiprintf_r+0x1fe>
34010202:	89ab      	ldrh	r3, [r5, #12]
34010204:	059a      	lsls	r2, r3, #22
34010206:	d402      	bmi.n	3401020e <_vfiprintf_r+0x1fe>
34010208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401020a:	f7fe fcfb 	bl	3400ec04 <__retarget_lock_release_recursive>
3401020e:	89ab      	ldrh	r3, [r5, #12]
34010210:	065b      	lsls	r3, r3, #25
34010212:	f53f af1f 	bmi.w	34010054 <_vfiprintf_r+0x44>
34010216:	9809      	ldr	r0, [sp, #36]	@ 0x24
34010218:	e71e      	b.n	34010058 <_vfiprintf_r+0x48>
3401021a:	ab03      	add	r3, sp, #12
3401021c:	462a      	mov	r2, r5
3401021e:	a904      	add	r1, sp, #16
34010220:	4630      	mov	r0, r6
34010222:	9300      	str	r3, [sp, #0]
34010224:	4b04      	ldr	r3, [pc, #16]	@ (34010238 <_vfiprintf_r+0x228>)
34010226:	f7fd fe73 	bl	3400df10 <_printf_i>
3401022a:	e7e4      	b.n	340101f6 <_vfiprintf_r+0x1e6>
3401022c:	34011e74 	.word	0x34011e74
34010230:	34011e7e 	.word	0x34011e7e
34010234:	3400d9f9 	.word	0x3400d9f9
34010238:	3400ffeb 	.word	0x3400ffeb
3401023c:	34011e7a 	.word	0x34011e7a

34010240 <__swhatbuf_r>:
34010240:	b570      	push	{r4, r5, r6, lr}
34010242:	460c      	mov	r4, r1
34010244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34010248:	b096      	sub	sp, #88	@ 0x58
3401024a:	4615      	mov	r5, r2
3401024c:	2900      	cmp	r1, #0
3401024e:	461e      	mov	r6, r3
34010250:	da0c      	bge.n	3401026c <__swhatbuf_r+0x2c>
34010252:	89a3      	ldrh	r3, [r4, #12]
34010254:	2100      	movs	r1, #0
34010256:	f013 0f80 	tst.w	r3, #128	@ 0x80
3401025a:	bf14      	ite	ne
3401025c:	2340      	movne	r3, #64	@ 0x40
3401025e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
34010262:	2000      	movs	r0, #0
34010264:	6031      	str	r1, [r6, #0]
34010266:	602b      	str	r3, [r5, #0]
34010268:	b016      	add	sp, #88	@ 0x58
3401026a:	bd70      	pop	{r4, r5, r6, pc}
3401026c:	466a      	mov	r2, sp
3401026e:	f000 f879 	bl	34010364 <_fstat_r>
34010272:	2800      	cmp	r0, #0
34010274:	dbed      	blt.n	34010252 <__swhatbuf_r+0x12>
34010276:	9901      	ldr	r1, [sp, #4]
34010278:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3401027c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
34010280:	4259      	negs	r1, r3
34010282:	4159      	adcs	r1, r3
34010284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34010288:	e7eb      	b.n	34010262 <__swhatbuf_r+0x22>

3401028a <__smakebuf_r>:
3401028a:	898b      	ldrh	r3, [r1, #12]
3401028c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401028e:	079d      	lsls	r5, r3, #30
34010290:	4606      	mov	r6, r0
34010292:	460c      	mov	r4, r1
34010294:	d507      	bpl.n	340102a6 <__smakebuf_r+0x1c>
34010296:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3401029a:	6023      	str	r3, [r4, #0]
3401029c:	6123      	str	r3, [r4, #16]
3401029e:	2301      	movs	r3, #1
340102a0:	6163      	str	r3, [r4, #20]
340102a2:	b003      	add	sp, #12
340102a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
340102a6:	ab01      	add	r3, sp, #4
340102a8:	466a      	mov	r2, sp
340102aa:	f7ff ffc9 	bl	34010240 <__swhatbuf_r>
340102ae:	9f00      	ldr	r7, [sp, #0]
340102b0:	4605      	mov	r5, r0
340102b2:	4630      	mov	r0, r6
340102b4:	4639      	mov	r1, r7
340102b6:	f7fd fa85 	bl	3400d7c4 <_malloc_r>
340102ba:	b948      	cbnz	r0, 340102d0 <__smakebuf_r+0x46>
340102bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340102c0:	059a      	lsls	r2, r3, #22
340102c2:	d4ee      	bmi.n	340102a2 <__smakebuf_r+0x18>
340102c4:	f023 0303 	bic.w	r3, r3, #3
340102c8:	f043 0302 	orr.w	r3, r3, #2
340102cc:	81a3      	strh	r3, [r4, #12]
340102ce:	e7e2      	b.n	34010296 <__smakebuf_r+0xc>
340102d0:	89a3      	ldrh	r3, [r4, #12]
340102d2:	6020      	str	r0, [r4, #0]
340102d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
340102d8:	81a3      	strh	r3, [r4, #12]
340102da:	9b01      	ldr	r3, [sp, #4]
340102dc:	e9c4 0704 	strd	r0, r7, [r4, #16]
340102e0:	b15b      	cbz	r3, 340102fa <__smakebuf_r+0x70>
340102e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
340102e6:	4630      	mov	r0, r6
340102e8:	f000 f84e 	bl	34010388 <_isatty_r>
340102ec:	b128      	cbz	r0, 340102fa <__smakebuf_r+0x70>
340102ee:	89a3      	ldrh	r3, [r4, #12]
340102f0:	f023 0303 	bic.w	r3, r3, #3
340102f4:	f043 0301 	orr.w	r3, r3, #1
340102f8:	81a3      	strh	r3, [r4, #12]
340102fa:	89a3      	ldrh	r3, [r4, #12]
340102fc:	431d      	orrs	r5, r3
340102fe:	81a5      	strh	r5, [r4, #12]
34010300:	e7cf      	b.n	340102a2 <__smakebuf_r+0x18>

34010302 <_raise_r>:
34010302:	291f      	cmp	r1, #31
34010304:	b538      	push	{r3, r4, r5, lr}
34010306:	4605      	mov	r5, r0
34010308:	460c      	mov	r4, r1
3401030a:	d904      	bls.n	34010316 <_raise_r+0x14>
3401030c:	2316      	movs	r3, #22
3401030e:	6003      	str	r3, [r0, #0]
34010310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34010314:	bd38      	pop	{r3, r4, r5, pc}
34010316:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
34010318:	b112      	cbz	r2, 34010320 <_raise_r+0x1e>
3401031a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3401031e:	b94b      	cbnz	r3, 34010334 <_raise_r+0x32>
34010320:	4628      	mov	r0, r5
34010322:	f000 f853 	bl	340103cc <_getpid_r>
34010326:	4622      	mov	r2, r4
34010328:	4601      	mov	r1, r0
3401032a:	4628      	mov	r0, r5
3401032c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34010330:	f000 b83a 	b.w	340103a8 <_kill_r>
34010334:	2b01      	cmp	r3, #1
34010336:	d00a      	beq.n	3401034e <_raise_r+0x4c>
34010338:	1c59      	adds	r1, r3, #1
3401033a:	d103      	bne.n	34010344 <_raise_r+0x42>
3401033c:	2316      	movs	r3, #22
3401033e:	6003      	str	r3, [r0, #0]
34010340:	2001      	movs	r0, #1
34010342:	e7e7      	b.n	34010314 <_raise_r+0x12>
34010344:	2100      	movs	r1, #0
34010346:	4620      	mov	r0, r4
34010348:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3401034c:	4798      	blx	r3
3401034e:	2000      	movs	r0, #0
34010350:	e7e0      	b.n	34010314 <_raise_r+0x12>
	...

34010354 <raise>:
34010354:	4b02      	ldr	r3, [pc, #8]	@ (34010360 <raise+0xc>)
34010356:	4601      	mov	r1, r0
34010358:	6818      	ldr	r0, [r3, #0]
3401035a:	f7ff bfd2 	b.w	34010302 <_raise_r>
3401035e:	bf00      	nop
34010360:	340123c4 	.word	0x340123c4

34010364 <_fstat_r>:
34010364:	b538      	push	{r3, r4, r5, lr}
34010366:	2300      	movs	r3, #0
34010368:	4d06      	ldr	r5, [pc, #24]	@ (34010384 <_fstat_r+0x20>)
3401036a:	4604      	mov	r4, r0
3401036c:	4608      	mov	r0, r1
3401036e:	4611      	mov	r1, r2
34010370:	602b      	str	r3, [r5, #0]
34010372:	f7f1 f877 	bl	34001464 <_fstat>
34010376:	1c43      	adds	r3, r0, #1
34010378:	d102      	bne.n	34010380 <_fstat_r+0x1c>
3401037a:	682b      	ldr	r3, [r5, #0]
3401037c:	b103      	cbz	r3, 34010380 <_fstat_r+0x1c>
3401037e:	6023      	str	r3, [r4, #0]
34010380:	bd38      	pop	{r3, r4, r5, pc}
34010382:	bf00      	nop
34010384:	34012f74 	.word	0x34012f74

34010388 <_isatty_r>:
34010388:	b538      	push	{r3, r4, r5, lr}
3401038a:	2300      	movs	r3, #0
3401038c:	4d05      	ldr	r5, [pc, #20]	@ (340103a4 <_isatty_r+0x1c>)
3401038e:	4604      	mov	r4, r0
34010390:	4608      	mov	r0, r1
34010392:	602b      	str	r3, [r5, #0]
34010394:	f7f1 f86b 	bl	3400146e <_isatty>
34010398:	1c43      	adds	r3, r0, #1
3401039a:	d102      	bne.n	340103a2 <_isatty_r+0x1a>
3401039c:	682b      	ldr	r3, [r5, #0]
3401039e:	b103      	cbz	r3, 340103a2 <_isatty_r+0x1a>
340103a0:	6023      	str	r3, [r4, #0]
340103a2:	bd38      	pop	{r3, r4, r5, pc}
340103a4:	34012f74 	.word	0x34012f74

340103a8 <_kill_r>:
340103a8:	b538      	push	{r3, r4, r5, lr}
340103aa:	2300      	movs	r3, #0
340103ac:	4d06      	ldr	r5, [pc, #24]	@ (340103c8 <_kill_r+0x20>)
340103ae:	4604      	mov	r4, r0
340103b0:	4608      	mov	r0, r1
340103b2:	4611      	mov	r1, r2
340103b4:	602b      	str	r3, [r5, #0]
340103b6:	f7f1 f836 	bl	34001426 <_kill>
340103ba:	1c43      	adds	r3, r0, #1
340103bc:	d102      	bne.n	340103c4 <_kill_r+0x1c>
340103be:	682b      	ldr	r3, [r5, #0]
340103c0:	b103      	cbz	r3, 340103c4 <_kill_r+0x1c>
340103c2:	6023      	str	r3, [r4, #0]
340103c4:	bd38      	pop	{r3, r4, r5, pc}
340103c6:	bf00      	nop
340103c8:	34012f74 	.word	0x34012f74

340103cc <_getpid_r>:
340103cc:	f7f1 b829 	b.w	34001422 <_getpid>

340103d0 <_calloc_r>:
340103d0:	b570      	push	{r4, r5, r6, lr}
340103d2:	fba1 5402 	umull	r5, r4, r1, r2
340103d6:	b934      	cbnz	r4, 340103e6 <_calloc_r+0x16>
340103d8:	4629      	mov	r1, r5
340103da:	f7fd f9f3 	bl	3400d7c4 <_malloc_r>
340103de:	4606      	mov	r6, r0
340103e0:	b928      	cbnz	r0, 340103ee <_calloc_r+0x1e>
340103e2:	4630      	mov	r0, r6
340103e4:	bd70      	pop	{r4, r5, r6, pc}
340103e6:	220c      	movs	r2, #12
340103e8:	2600      	movs	r6, #0
340103ea:	6002      	str	r2, [r0, #0]
340103ec:	e7f9      	b.n	340103e2 <_calloc_r+0x12>
340103ee:	462a      	mov	r2, r5
340103f0:	4621      	mov	r1, r4
340103f2:	f7fe f987 	bl	3400e704 <memset>
340103f6:	e7f4      	b.n	340103e2 <_calloc_r+0x12>

340103f8 <__ascii_mbtowc>:
340103f8:	b082      	sub	sp, #8
340103fa:	b901      	cbnz	r1, 340103fe <__ascii_mbtowc+0x6>
340103fc:	a901      	add	r1, sp, #4
340103fe:	b142      	cbz	r2, 34010412 <__ascii_mbtowc+0x1a>
34010400:	b14b      	cbz	r3, 34010416 <__ascii_mbtowc+0x1e>
34010402:	7813      	ldrb	r3, [r2, #0]
34010404:	600b      	str	r3, [r1, #0]
34010406:	7812      	ldrb	r2, [r2, #0]
34010408:	1e10      	subs	r0, r2, #0
3401040a:	bf18      	it	ne
3401040c:	2001      	movne	r0, #1
3401040e:	b002      	add	sp, #8
34010410:	4770      	bx	lr
34010412:	4610      	mov	r0, r2
34010414:	e7fb      	b.n	3401040e <__ascii_mbtowc+0x16>
34010416:	f06f 0001 	mvn.w	r0, #1
3401041a:	e7f8      	b.n	3401040e <__ascii_mbtowc+0x16>

3401041c <__ascii_wctomb>:
3401041c:	4603      	mov	r3, r0
3401041e:	4608      	mov	r0, r1
34010420:	b141      	cbz	r1, 34010434 <__ascii_wctomb+0x18>
34010422:	2aff      	cmp	r2, #255	@ 0xff
34010424:	d904      	bls.n	34010430 <__ascii_wctomb+0x14>
34010426:	228a      	movs	r2, #138	@ 0x8a
34010428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401042c:	601a      	str	r2, [r3, #0]
3401042e:	4770      	bx	lr
34010430:	2001      	movs	r0, #1
34010432:	700a      	strb	r2, [r1, #0]
34010434:	4770      	bx	lr
	...

34010438 <_sbrk>:
34010438:	4a04      	ldr	r2, [pc, #16]	@ (3401044c <_sbrk+0x14>)
3401043a:	4603      	mov	r3, r0
3401043c:	6811      	ldr	r1, [r2, #0]
3401043e:	b909      	cbnz	r1, 34010444 <_sbrk+0xc>
34010440:	4903      	ldr	r1, [pc, #12]	@ (34010450 <_sbrk+0x18>)
34010442:	6011      	str	r1, [r2, #0]
34010444:	6810      	ldr	r0, [r2, #0]
34010446:	4403      	add	r3, r0
34010448:	6013      	str	r3, [r2, #0]
3401044a:	4770      	bx	lr
3401044c:	34012f7c 	.word	0x34012f7c
34010450:	34012f80 	.word	0x34012f80

34010454 <_init>:
34010454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010456:	bf00      	nop
34010458:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401045a:	bc08      	pop	{r3}
3401045c:	469e      	mov	lr, r3
3401045e:	4770      	bx	lr

34010460 <_fini>:
34010460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010462:	bf00      	nop
34010464:	bcf8      	pop	{r3, r4, r5, r6, r7}
34010466:	bc08      	pop	{r3}
34010468:	469e      	mov	lr, r3
3401046a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

34010480 <SECURE_SystemCoreClockUpdate>:
34010480:	e97f e97f 	sg
34010484:	f7f1 bf42 	b.w	3400230c <__acle_se_SECURE_SystemCoreClockUpdate>
	...
